uint64_t VTTileDecompressionOutputCallback_Gateway(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  if (result && *(_DWORD *)result == 1)
  {
    v1 = *(uint64_t (**)(_QWORD))(result + 16);
    if (v1)
      return v1(*(_QWORD *)(result + 8));
  }
  return result;
}

void CMPhotoDecompressionContainerClass_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x240uLL);
}

void CMPhotoDecompressionSessionClass_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  unint64_t v11;
  const void *ValueAtIndex;
  const void *v13;
  const void *v14;
  const void *v15;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_sync(v2, &__block_literal_global_21);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  _releaseAsyncQueueElements((_QWORD *)(a1 + 144));
  _releaseAsyncQueueElements((_QWORD *)(a1 + 192));
  _releaseAsyncQueueElements((_QWORD *)(a1 + 96));
  _releaseAsyncQueueElements((_QWORD *)(a1 + 48));
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(const void **)(a1 + 288);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v7 = *(const void **)(a1 + 280);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 280) = 0;
  }
  v8 = *(const void **)(a1 + 272);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 272) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v9 = *(const __CFArray **)(a1 + 264);
    if (v9)
    {
      Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v11 = Count + 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), v11 - 2);
          JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), v11 - 2);
          --v11;
        }
        while (v11 > 1);
      }
    }
    v13 = *(const void **)(a1 + 256);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 256) = 0;
    }
    v14 = *(const void **)(a1 + 264);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 264) = 0;
    }
  }
  v15 = *(const void **)(a1 + 304);
  if (v15)
  {
    _Block_release(v15);
    *(_QWORD *)(a1 + 304) = 0;
  }
}

void _releaseAsyncQueueElements(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;

  v2 = a1[2];
  if (v2)
  {
    dispatch_barrier_sync(v2, &__block_literal_global_15_0);
    v3 = a1[2];
    if (v3)
    {
      dispatch_release(v3);
      a1[2] = 0;
    }
  }
  v4 = a1[1];
  if (v4)
  {
    dispatch_release(v4);
    a1[1] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  v6 = a1[3];
  if (v6)
  {
    dispatch_release(v6);
    a1[3] = 0;
  }
}

uint64_t _determineDecodeStrategy(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t *a7, int8x16_t *a8, int8x16_t *a9, _DWORD *a10, char *a11)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  __int128 v18;
  uint64_t TwoPassCropRects;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int8x16_t v57;
  unint64_t *v58;
  int8x16_t *v59;
  char v60;
  int8x16_t v62;
  int8x16_t *v63;
  int8x16_t v65;
  BOOL v66;
  _OWORD v67[2];
  CFTypeRef v68;

  v13 = a5;
  v14 = a4;
  v68 = 0;
  if (!*(_BYTE *)(a3 + 21))
    goto LABEL_11;
  v17 = *(unsigned int *)(a3 + 4);
  v18 = *(_OWORD *)(a3 + 40);
  v67[0] = *(_OWORD *)(a3 + 24);
  v67[1] = v18;
  TwoPassCropRects = CMPhotoGetTwoPassCropRects(v17, (unint64_t *)v67, a4, a5, 0, 0);
  if ((_DWORD)TwoPassCropRects)
    goto LABEL_125;
  if (*(_BYTE *)(a3 + 21))
  {
    LODWORD(v20) = 0;
    v21 = (unint64_t *)(a3 + 56);
    v22 = *(_QWORD *)(a3 + 56);
    v14 = *(_QWORD *)(a3 + 40);
    v13 = *(_QWORD *)(a3 + 48);
    if (v14 <= v13)
      v23 = *(_QWORD *)(a3 + 48);
    else
      v23 = *(_QWORD *)(a3 + 40);
    if (!v22 || v22 >= v23)
      goto LABEL_40;
    if (_canUseEmbeddedHWDCTScaling_onceToken != -1)
      dispatch_once(&_canUseEmbeddedHWDCTScaling_onceToken, &__block_literal_global_3);
  }
  else
  {
LABEL_11:
    v21 = (unint64_t *)(a3 + 56);
    v22 = *(_QWORD *)(a3 + 56);
    if (v14 <= v13)
      v24 = v13;
    else
      v24 = v14;
    if (v22)
      v25 = v22 >= v24;
    else
      v25 = 1;
    if (v25)
      goto LABEL_39;
    v26 = *(_DWORD *)(a3 + 72);
    if (v26 != 1
      && (v26 == 2 || v22 >= 4 && CMPhotoUnifiedJPEGDecoderFileSupportedByHardware(*(_QWORD *)(a1 + 96), a6)))
    {
      v27 = 0;
      if (*(_BYTE *)(a3 + 70))
        v22 &= ~1uLL;
      goto LABEL_30;
    }
  }
  if (*(_BYTE *)(a3 + 21))
  {
    v27 = *(_DWORD *)(a3 + 72);
    if (v27 != 1)
    {
LABEL_39:
      LODWORD(v20) = 0;
LABEL_40:
      v34 = v14;
      v35 = v13;
      goto LABEL_41;
    }
  }
  else
  {
    v27 = 1;
  }
LABEL_30:
  v28 = (v14 + 1) >> 1;
  v29 = (v13 + 1) >> 1;
  v30 = v14 >> 1;
  v31 = v13 >> 1;
  if (v28 <= v29)
    v32 = (v13 + 1) >> 1;
  else
    v32 = (v14 + 1) >> 1;
  if (v30 <= v13 >> 1)
    v33 = v13 >> 1;
  else
    v33 = v14 >> 1;
  if (v27)
    v32 = v33;
  if (v32 < v22)
    goto LABEL_39;
  v20 = 0;
  while (1)
  {
    v46 = v28;
    v47 = v29;
    v48 = v30;
    v49 = v31;
    if (v20 == 2)
      break;
    v50 = v20++ + 2;
    v51 = (2 << v20);
    v28 = (v14 - 1 + v51) >> v50;
    v29 = (v13 - 1 + v51) >> v50;
    v30 = v14 >> v50;
    v31 = v13 >> v50;
    if (v28 <= v29)
      v52 = v29;
    else
      v52 = v28;
    if (v30 <= v31)
      v53 = v31;
    else
      v53 = v30;
    if (v27)
      v52 = v53;
    if (v52 < v22)
      goto LABEL_118;
  }
  LODWORD(v20) = 3;
LABEL_118:
  if (v27)
    v35 = v49;
  else
    v35 = v47;
  if (v27)
    v34 = v48;
  else
    v34 = v46;
LABEL_41:
  v63 = a8;
  if (*(_BYTE *)(a3 + 71))
  {
    TwoPassCropRects = _parseExifIfNeeded(a1 + 40, 0);
    if ((_DWORD)TwoPassCropRects)
      goto LABEL_125;
    if (*(_BYTE *)(a1 + 281))
      v36 = *(_DWORD *)(a1 + 304);
    else
      v36 = 1;
  }
  else
  {
    v36 = 0;
  }
  if (*(_BYTE *)(a3 + 71))
    v37 = v36 == 1;
  else
    v37 = 1;
  v38 = !v37;
  v66 = 0;
  v65.i64[0] = v34;
  v65.i64[1] = v35;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(v34, v35, *(_QWORD *)(a3 + 56), v14, v13, *(unsigned __int8 *)(a3 + 64), *(unsigned __int8 *)(a3 + 70), (unint64_t *)&v65, &v66, 0);
  if (*(_DWORD *)(a3 + 72) != 1)
  {
    v42 = 0;
    v43 = *(_DWORD *)(a3 + 4);
    v44 = 1;
    if (v43 > 875836517)
    {
      if (v43 != 1111970369)
      {
        v45 = 875836518;
LABEL_61:
        v40 = 0;
        if (v43 != v45)
          goto LABEL_91;
        goto LABEL_78;
      }
    }
    else if (v43 != 875704422)
    {
      v45 = 875704934;
      goto LABEL_61;
    }
    v40 = 0;
    goto LABEL_78;
  }
  v40 = _copyImageBitDepthForIndex(a1, 0, v39, &v68);
  if ((_DWORD)v40)
  {
    v41 = 1;
  }
  else
  {
    LODWORD(v67[0]) = 0;
    FigCFArrayGetIntAtIndex();
    v41 = SLODWORD(v67[0]) < 9;
  }
  v42 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(*(_DWORD *)(a3 + 4), v41, 0) != 0;
LABEL_78:
  if ((v38 & 1) != 0 || v42 || !v66)
  {
    v44 = v42;
  }
  else
  {
    v54 = *v21;
    if (*v21
      && (v34 <= v35 ? (v55 = v35) : (v55 = v34),
          (v25 = v55 >= v54, v56 = v55 - v54, v25) && (*(_DWORD *)(a3 + 16) & 0xFFFFFFFE) == 2 && 100 * v56 / v54 <= 9))
    {
      v44 = 0;
      v65.i64[0] = v34;
      v65.i64[1] = v35;
      v66 = 0;
    }
    else
    {
      v44 = 0;
    }
  }
LABEL_91:
  v57 = v65;
  if (v38)
  {
    v62 = v65;
    LODWORD(v67[0]) = 0;
    TwoPassCropRects = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v36, v67, 0);
    v58 = a7;
    if (!(_DWORD)TwoPassCropRects)
    {
      if (LODWORD(v67[0]) == 270 || LODWORD(v67[0]) == 90)
      {
        v57 = vextq_s8(v62, v62, 8uLL);
        v59 = v63;
      }
      else
      {
        v59 = v63;
        v57 = v62;
      }
      v40 = 0;
      goto LABEL_99;
    }
LABEL_125:
    v40 = TwoPassCropRects;
    goto LABEL_114;
  }
  v59 = v63;
  v58 = a7;
LABEL_99:
  if (v58)
  {
    *v58 = v34;
    v58[1] = v35;
  }
  if (v59)
    *v59 = v65;
  if (a9)
    *a9 = v57;
  if (a10)
    *a10 = v20;
  if (a11)
  {
    if (v66)
      v60 = 1;
    else
      v60 = v38;
    if (v44)
      v60 = 1;
    *a11 = v60;
  }
LABEL_114:
  if (v68)
    CFRelease(v68);
  return v40;
}

uint64_t _determineDecodeStrategy_0(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  int v12;

  *(_QWORD *)(a5 + 152) = a3;
  *(_QWORD *)(a5 + 160) = a4;
  result = CMPhotoDecompressionContainerParseOptions(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a5 + 72) == 2)
    {
      return FigSignalErrorAt();
    }
    else
    {
      if (*(_DWORD *)(a1 + 96) <= 8u)
        v8 = 1111970369;
      else
        v8 = 1815491698;
      *(_DWORD *)(a5 + 204) = v8;
      if (*(_BYTE *)(a5 + 8))
      {
        v9 = *(_DWORD *)(a5 + 4);
        if (v9 == 1815491698 || v9 == 1111970369)
        {
          *(_DWORD *)(a5 + 204) = v9;
          v8 = v9;
        }
      }
      else
      {
        *(_DWORD *)(a5 + 4) = v8;
        v9 = v8;
      }
      *(_DWORD *)(a5 + 208) = v9;
      *(_BYTE *)(a5 + 213) = v8 != v9;
      if (*(_BYTE *)(a5 + 71))
      {
        v10 = *(_DWORD *)(a1 + 132);
        *(_BYTE *)(a5 + 212) = v10 != 1;
      }
      else
      {
        *(_BYTE *)(a5 + 212) = 0;
        v10 = 1;
      }
      *(_BYTE *)(a5 + 214) = 0;
      *(_DWORD *)(a5 + 200) = v10;
      v11 = *(_OWORD *)(a5 + 40);
      *(_OWORD *)(a5 + 184) = v11;
      *(_OWORD *)(a5 + 168) = *(_OWORD *)(a5 + 24);
      *(_OWORD *)(a5 + 216) = v11;
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(*(_QWORD *)(a5 + 184), *(_QWORD *)(a5 + 192), *(_QWORD *)(a5 + 56), 0, 0, *(unsigned __int8 *)(a5 + 64), *(unsigned __int8 *)(a5 + 70), (unint64_t *)(a5 + 216), (BOOL *)(a5 + 214), 0);
      *(_OWORD *)(a5 + 232) = *(_OWORD *)(a5 + 216);
      if (*(_BYTE *)(a5 + 212))
      {
        v12 = 0;
        result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(*(_DWORD *)(a5 + 200), &v12, 0);
        if (!(_DWORD)result && (v12 == 270 || v12 == 90))
          *(int8x16_t *)(a5 + 232) = vextq_s8(*(int8x16_t *)(a5 + 216), *(int8x16_t *)(a5 + 216), 8uLL);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

__n128 _determineDecodeStrategy_1(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4, int a5, int a6, int a7, uint64_t a8)
{
  __n128 result;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  float64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64x2_t v41;
  uint64x2_t v42;
  unint64_t v43;
  _BOOL4 v44;
  float64x2_t v45;
  float64x2_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  _BOOL4 v55;
  __int128 *v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  _BOOL4 v67;
  int v68;
  BOOL v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64x2_t v79;
  char v80;
  int v81;
  unint64_t v82;
  int v83;
  __int128 v84;
  __int128 v85;
  BOOL v86;
  __n128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __n128 v93;
  __int128 v94;
  int v95;
  _OWORD v96[4];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __n128 v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  float64x2_t v108;
  BOOL v109;

  v102 = 0;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v97 = 0u;
  memset(v96, 0, sizeof(v96));
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v92 = 0uLL;
  v91 = 0;
  if (_getItemProperties(a1, a2, a3, (uint64_t)a4, &v95, &v93, &v92, &v91)
    || CMPhotoDecompressionContainerParseOptions(a1, a4, v94, *((uint64_t *)&v94 + 1), (uint64_t)v96))
  {
    return result;
  }
  if (a6 && BYTE1(v97))
  {
    v106 = 0u;
    v107 = 0u;
    if (_getItemProperties(a1, a3, 0, (uint64_t)a4, 0, &v106, 0, 0))
      return result;
    v16 = v107;
    if ((unint64_t)v107 <= *((_QWORD *)&v107 + 1))
      v16 = *((_QWORD *)&v107 + 1);
    *((_QWORD *)&v96[3] + 1) = v16;
    LOBYTE(v97) = 1;
  }
  if (BYTE8(v96[0]))
    v17 = DWORD1(v96[0]);
  else
    v17 = 0;
  DWORD1(v96[0]) = v17;
  v18 = CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(v17);
  if (a5 || BYTE8(v96[0]))
  {
    if (v18)
      goto LABEL_15;
LABEL_47:
    FigSignalErrorAt();
    return result;
  }
  if (BYTE5(v96[1]) && ((BYTE8(v96[1]) & 1) != 0 || (v96[2] & 1) != 0 || (BYTE8(v96[2]) & 1) != 0 || (v96[3] & 1) != 0))
    goto LABEL_47;
LABEL_15:
  v89 = 0u;
  v90 = 0u;
  if (BYTE5(v96[1]))
  {
    v106 = *(_OWORD *)((char *)&v96[1] + 8);
    v107 = *(_OWORD *)((char *)&v96[2] + 8);
    if (CMPhotoGetTwoPassCropRects(DWORD1(v96[0]), (unint64_t *)&v106, v94, *((unint64_t *)&v94 + 1), (unint64_t *)&v96[1] + 1, (unint64_t *)&v89))return result;
    v19 = v89 == 0 && v90 == 0;
    v87 = v93;
    v88 = v94;
    if (BYTE5(v96[1]))
    {
      v106 = *(_OWORD *)((char *)&v96[1] + 8);
      v107 = *(_OWORD *)((char *)&v96[2] + 8);
      if (CMPhotoApplyCropCMPhotoRectToRect(&v87, (unint64_t *)&v106))
        return result;
      if (v19)
      {
        v20 = 0;
      }
      else
      {
        v106 = v89;
        v107 = v90;
        if (CMPhotoApplyCropCMPhotoRectToRect(&v87, (unint64_t *)&v106))
          return result;
        v20 = 1;
      }
    }
    else
    {
      v20 = !v19;
    }
  }
  else
  {
    v20 = 0;
    v87 = v93;
    v88 = v94;
  }
  v22 = *((_QWORD *)&v88 + 1);
  v21 = v88;
  v23 = v87;
  v24 = *((_QWORD *)&v92 + 1);
  v25 = v92;
  v81 = a7;
  if ((unint64_t)v92 >= (unint64_t)v94 && *((_QWORD *)&v92 + 1) >= *((_QWORD *)&v94 + 1))
    goto LABEL_80;
  v79 = (uint64x2_t)v92;
  v26 = *((_QWORD *)&v96[3] + 1);
  v109 = 0;
  v108 = 0uLL;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(v88, *((unint64_t *)&v88 + 1), *((unint64_t *)&v96[3] + 1), 0, 0, v97, 0, 0, &v109, v108.f64);
  v27 = v109;
  v82 = v23.n128_u64[0];
  if (!v109)
  {
    v34 = v23.n128_u64[1];
LABEL_49:
    v35 = v22;
    v36 = v21;
LABEL_77:
    LODWORD(v96[1]) = v27;
    v49 = v35;
    v50 = v36;
    goto LABEL_78;
  }
  v28 = v96[1];
  if (!LODWORD(v96[1]))
  {
    v34 = v23.n128_u64[1];
    v27 = 0;
    goto LABEL_49;
  }
  v29 = vcvtq_f64_u64(v79);
  v30 = vmulq_f64(v108, v29);
  v31 = (int64x2_t)vcvtq_u64_f64(vrndpq_f64(v30));
  if (((v31.i32[0] | v31.i32[2]) & 1) != 0)
  {
    v32 = vdupq_n_s64(2uLL);
    v31 = (int64x2_t)vbslq_s8((int8x16_t)vceqzq_s64(v31), (int8x16_t)v32, (int8x16_t)vaddq_s64(vaddq_s64(v31, v32), (int64x2_t)vorrq_s8((int8x16_t)v31, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL))));
  }
  if (v31.i64[0] >= (unint64_t)v31.i64[1])
    v33 = v31.u64[1];
  else
    v33 = v31.i64[0];
  if (v33 <= 0xF)
  {
    if (LODWORD(v96[1]) == 3)
    {
      v28 = 2;
    }
    else
    {
      if (LODWORD(v96[1]) != 4)
      {
LABEL_52:
        if (v31.i64[0] >= (unint64_t)v31.i64[1])
          v37 = v24;
        else
          v37 = v25;
        v38 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v29, 16.0 / (double)v37)));
        v31 = vaddq_s64(vaddq_s64(v38, vdupq_n_s64(2uLL)), (int64x2_t)vorrq_s8((int8x16_t)v38, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)));
        goto LABEL_56;
      }
      v28 = 1;
    }
    LODWORD(v96[1]) = v28;
    goto LABEL_52;
  }
LABEL_56:
  v40 = v31.i64[1];
  v39 = v31.i64[0];
  v78 = v26;
  if ((v28 - 3) <= 1)
  {
    v41 = (uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(v30)), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL));
    v42 = v41;
    v43 = v41.i64[0] >= (unint64_t)v41.i64[1] ? v41.i64[1] : v41.i64[0];
    if (v43 >= 0x10)
    {
      v44 = v28 == 4;
      if (v28 == 3)
      {
        v45 = vabdq_f64(vcvtq_f64_u64(v41), v30);
        if (v45.f64[0] <= v45.f64[1])
          v45.f64[0] = v45.f64[1];
        v46 = vabdq_f64(vcvtq_f64_u64((uint64x2_t)v31), v30);
        if (v46.f64[0] <= v46.f64[1])
          v46.f64[0] = v46.f64[1];
        v44 = v45.f64[0] < v46.f64[0];
      }
      if (v44)
      {
        v40 = v42.i64[1];
        v39 = v42.i64[0];
      }
    }
  }
  v103 = v23;
  v34 = v23.n128_u64[1];
  v104 = v21;
  v105 = v22;
  v47 = v39;
  v48 = v40;
  _getScaledEvenCropRect((uint64_t)&v103, v25, v24, v39, v40, (uint64_t)&v106);
  v36 = v107;
  if ((unint64_t)v107 >> 31)
  {
    v49 = v22;
    v50 = v21;
    goto LABEL_78;
  }
  v35 = *((_QWORD *)&v107 + 1);
  v49 = v22;
  v50 = v21;
  if (!(*((_QWORD *)&v107 + 1) >> 31))
  {
    v34 = *((_QWORD *)&v106 + 1);
    v82 = v106;
    if ((unint64_t)v107 <= *((_QWORD *)&v107 + 1))
      v51 = *((_QWORD *)&v107 + 1);
    else
      v51 = v107;
    if (v28 != 4 || v51 <= v78)
    {
      v49 = *((_QWORD *)&v107 + 1);
      v50 = v107;
      v24 = v48;
      v25 = v47;
      goto LABEL_78;
    }
    v27 = 1;
    v24 = v48;
    v25 = v47;
    goto LABEL_77;
  }
LABEL_78:
  if (v92 != __PAIR128__(v24, v25))
  {
    *(_QWORD *)&v88 = v87.n128_u64[0] - v92 * (v82 / v25) + v88;
    *((_QWORD *)&v88 + 1) += v87.n128_u64[1] - *((_QWORD *)&v92 + 1) * (v34 / v24);
    v87.n128_u64[0] = v92 * (v82 / v25);
    v87.n128_u64[1] = *((_QWORD *)&v92 + 1) * (v34 / v24);
    *(__n128 *)((char *)&v96[1] + 8) = v87;
    *(_OWORD *)((char *)&v96[2] + 8) = v88;
    *(_QWORD *)&v89 = v82 % v25;
    *((_QWORD *)&v89 + 1) = v34 % v24;
    *(_QWORD *)&v90 = v50;
    *((_QWORD *)&v90 + 1) = v49;
    v83 = 1;
    v54 = 1;
    v20 = 1;
    goto LABEL_86;
  }
  a7 = v81;
LABEL_80:
  if (a7)
  {
    v52 = v87.n128_u64[0] % v25;
    v53 = v87.n128_u64[1] % v24;
    *(_QWORD *)&v89 = v87.n128_u64[0] % v25;
    *((_QWORD *)&v89 + 1) = v87.n128_u64[1] % v24;
    if (v90 == 0)
      v90 = *(_OWORD *)((char *)&v96[2] + 8);
    v83 = 0;
    *((_QWORD *)&v96[1] + 1) = v87.n128_u64[0] - v52;
    *(_QWORD *)&v96[2] = v87.n128_u64[1] - v53;
    *((_QWORD *)&v96[2] + 1) = v25 + v88 + v52 + ~(((unint64_t)v88 + v87.n128_u64[0] - 1) % v25);
    *(_QWORD *)&v96[3] = v24 + *((_QWORD *)&v88 + 1) + v53 + ~((*((_QWORD *)&v88 + 1) + v87.n128_u64[1] - 1) % v24);
    v54 = 1;
    v20 = 1;
  }
  else
  {
    v83 = 0;
    v54 = 0;
  }
LABEL_86:
  v55 = 0;
  v56 = &v94;
  if (*((_QWORD *)&v98 + 1))
    v57 = 0;
  else
    v57 = v20 == 0;
  if (v57)
    v58 = BYTE7(v97);
  else
    v58 = 0;
  if (!v58 && BYTE7(v97))
    v55 = v91 != 1;
  v86 = 0;
  if (BYTE5(v96[1]))
    v56 = (_OWORD *)((char *)&v96[2] + 8);
  if (v20)
    v56 = &v90;
  v85 = *v56;
  if (v95 == 1953325424 && BYTE13(v101))
  {
    v59 = v85;
    if (_flipSizeIfNeeded(v91, v85, *((uint64_t *)&v85 + 1), &v85))
      return result;
    if ((_QWORD)v85 == v59)
      v60 = v22;
    else
      v60 = v21;
    if ((_QWORD)v85 != v59)
      v21 = v22;
    v22 = v60;
  }
  v84 = v85;
  v80 = v54;
  if (v58)
  {
    if (_flipSizeIfNeeded(v91, v85, *((uint64_t *)&v85 + 1), &v84))
      return result;
    v61 = v84;
    if ((_QWORD)v85 == (_QWORD)v84)
      v62 = v22;
    else
      v62 = v21;
    if ((_QWORD)v85 != (_QWORD)v84)
      v21 = v22;
    v22 = v62;
  }
  else
  {
    v61 = v84;
  }
  v63 = *((_QWORD *)&v84 + 1);
  if (!v20 && !*((_QWORD *)&v96[3] + 1) && !v55)
    goto LABEL_143;
  v106 = v84;
  if (v55 || *((_QWORD *)&v96[3] + 1))
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v61, *((unint64_t *)&v84 + 1), *((unint64_t *)&v96[3] + 1), v21, v22, v97, BYTE6(v97), (unint64_t *)&v106, &v86, 0);
    v64 = *((_QWORD *)&v96[3] + 1);
  }
  else
  {
    v64 = 0;
  }
  if (v61 <= v63)
    v65 = v63;
  else
    v65 = v61;
  v66 = v65 - v64;
  if (v66 < 0)
    v66 = -v66;
  v67 = (double)v64 * 0.1 >= (double)v66;
  if ((_QWORD)v92 != *((_QWORD *)&v92 + 1) && vabdd_f64((double)v21 / (double)v22, (double)v61 / (double)v63) >= 0.001)
    v67 = 0;
  v68 = v83;
  if (!v86)
    v68 = 0;
  if (v68 == 1 && LODWORD(v96[1]) != 1 && v67 && !v55)
  {
    v86 = 0;
LABEL_143:
    if (DWORD2(v97))
    {
      v69 = 0;
    }
    else
    {
      v70 = v94;
      if (CMPhotoSupportsHEVCHWDecode())
        v69 = !CMPhotoShouldUseHWDecoderForSize(*((_QWORD *)&v70 + 1) * v70, 0);
      else
        v69 = 1;
    }
    v71 = v100;
    *(_OWORD *)(a8 + 96) = v99;
    *(_OWORD *)(a8 + 112) = v71;
    *(_OWORD *)(a8 + 128) = v101;
    v72 = v96[3];
    *(_OWORD *)(a8 + 32) = v96[2];
    *(_OWORD *)(a8 + 48) = v72;
    v73 = v98;
    *(_OWORD *)(a8 + 64) = v97;
    *(_OWORD *)(a8 + 80) = v73;
    v74 = v96[1];
    *(_OWORD *)a8 = v96[0];
    *(_OWORD *)(a8 + 16) = v74;
    v75 = v84;
    *(_OWORD *)(a8 + 208) = v85;
    *(_OWORD *)(a8 + 224) = v75;
    v76 = v90;
    *(_OWORD *)(a8 + 272) = v89;
    *(_OWORD *)(a8 + 288) = v76;
    result = v93;
    *(_OWORD *)(a8 + 192) = v92;
    v77 = v94;
    *(__n128 *)(a8 + 152) = result;
    *(_BYTE *)(a8 + 310) = v69;
    *(_QWORD *)(a8 + 144) = v102;
    *(_BYTE *)(a8 + 305) = v58;
    *(_BYTE *)(a8 + 304) = v83;
    *(_BYTE *)(a8 + 306) = v80;
    *(_QWORD *)(a8 + 256) = v25;
    *(_QWORD *)(a8 + 264) = v24;
    *(_BYTE *)(a8 + 307) = v20;
    *(_BYTE *)(a8 + 308) = v55;
    *(_BYTE *)(a8 + 309) = v86;
    *(_QWORD *)(a8 + 240) = v61;
    *(_QWORD *)(a8 + 248) = v63;
    *(_DWORD *)(a8 + 184) = v91;
    *(_OWORD *)(a8 + 168) = v77;
    *(_BYTE *)(a8 + 311) = v81;
    return result;
  }
  if (!v86 && !v55)
    goto LABEL_143;
  v84 = v106;
  v85 = v106;
  if (!v55 || !_flipSizeIfNeeded(v91, v84, *((uint64_t *)&v84 + 1), &v84))
    goto LABEL_143;
  return result;
}

uint64_t _copyColorInfoForItem(_BYTE *a1, const void *a2, const void *a3, int a4, CMVideoFormatDescriptionRef *a5, int a6, CFTypeRef *a7, CFTypeRef *a8, CFTypeRef *a9, CFTypeRef *a10, _DWORD *a11, _DWORD *a12, _BYTE *a13)
{
  uint64_t ItemTypeFromReader;
  uint64_t FigBaseObject;
  uint64_t (*v22)(uint64_t, _QWORD, CFAllocatorRef, CMVideoFormatDescriptionRef *);
  const opaqueCMFormatDescription *v23;
  CMVideoFormatDescriptionRef v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t (*v32)(const void *, CFTypeRef *);
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v36)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v37;
  CFAllocatorRef v39;
  char v41;
  _QWORD v42[6];
  int v43;
  CFTypeRef v44;
  int v45;
  int v46;
  CFTypeRef cf;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CMVideoFormatDescriptionRef v53;
  int v54;
  CMVideoFormatDescriptionRef v55[2];

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  cf = 0;
  v45 = -1;
  v46 = -1;
  v44 = 0;
  v43 = 0;
  v39 = CFGetAllocator(a1);
  ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v43);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v22 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CMVideoFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v22)
    goto LABEL_49;
  ItemTypeFromReader = v22(FigBaseObject, *MEMORY[0x1E0CC4B58], v39, &v53);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
  v23 = v53;
  v55[0] = 0;
  ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a2, (CFIndex *)v55);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
  v24 = v55[0];
  if (a3 && !v55[0])
  {
    ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a3, (CFIndex *)v55);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_48;
    v24 = v55[0];
  }
  if (v24)
  {
    v25 = v24 == (CMVideoFormatDescriptionRef)1;
LABEL_11:
    v26 = v25;
    goto LABEL_15;
  }
  v26 = a4;
  if (!a4)
  {
    if (v23)
    {
      v54 = 0;
      if (CMPhotoGetInfoFromFormatDescription(v23, 0, 0, 0, 0, &v54, 0, 0, 0, 0, 0, 0))
        v25 = 0;
      else
        v25 = v54 == 6;
      goto LABEL_11;
    }
    v26 = 0;
  }
LABEL_15:
  if (v43 == 1635135537)
  {
    v55[0] = 0;
    if (a4)
      v27 = a1[28] == 0;
    else
      v27 = 1;
    v28 = !v27;
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 0x40000000;
    v42[2] = ___copyColorInfoForItem_block_invoke;
    v42[3] = &__block_descriptor_tmp_10;
    v42[4] = a2;
    v42[5] = v53;
    ItemTypeFromReader = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(v53, (uint64_t)v42, v28, v55);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_48;
    if (v53)
      CFRelease(v53);
    v53 = v55[0];
  }
  if (_checkForInterestingBrands((uint64_t)a1))
    v29 = 0;
  else
    v29 = a1[163];
  v41 = 0;
  ItemTypeFromReader = CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(v53, a1[28], v29, v26, 0, a6, &v44, &v49, &v48, &cf, &v46, &v45, &v41);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
  if (v44 || (v49 ? (v30 = v48 == 0) : (v30 = 1), v30 ? (v31 = 0) : (v31 = 1), v31))
  {
    if (cf && !v41)
    {
LABEL_56:
      if (a5)
      {
        *a5 = v53;
        v53 = 0;
      }
      if (a7)
      {
        *a7 = v44;
        v44 = 0;
      }
      if (a8)
      {
        *a8 = v49;
        v49 = 0;
      }
      if (a9)
      {
        *a9 = v48;
        v48 = 0;
      }
      if (a10)
      {
        *a10 = cf;
        cf = 0;
      }
      if (a11)
        *a11 = v46;
      if (a12)
        *a12 = v45;
      v37 = 0;
      if (a13)
        *a13 = v41;
      goto LABEL_72;
    }
  }
  if (v43 == 1768187246)
  {
    ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(a2, &v52, 0, 0);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_48;
    goto LABEL_51;
  }
  if (v43 != 1735551332)
    goto LABEL_51;
  v32 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v32)
  {
LABEL_49:
    v37 = 4294954514;
    goto LABEL_72;
  }
  ItemTypeFromReader = v32(a2, &v51);
  if ((_DWORD)ItemTypeFromReader)
  {
LABEL_48:
    v37 = ItemTypeFromReader;
    goto LABEL_72;
  }
  v33 = v51;
  v34 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v34)
    goto LABEL_49;
  ItemTypeFromReader = v34(v33, &v50);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v36 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v36)
    goto LABEL_49;
  ItemTypeFromReader = v36(CMBaseObject, *MEMORY[0x1E0CC4C00], v39, &v52);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_48;
LABEL_51:
  if (!v52)
    goto LABEL_56;
  if (v41 && cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v37 = _copyColorInfoForItem(a1);
  if (!(_DWORD)v37)
    goto LABEL_56;
LABEL_72:
  if (v53)
    CFRelease(v53);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (cf)
    CFRelease(cf);
  if (v44)
    CFRelease(v44);
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  return v37;
}

uint64_t _verifyPixelInformationFromPictureReader(const void *a1, CFIndex *a2)
{
  CFAllocatorRef v3;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *);
  uint64_t v6;
  CFIndex Count;
  uint64_t v8;
  CFArrayRef theArray;

  theArray = 0;
  v3 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v5)
  {
    v8 = 4294954514;
    goto LABEL_9;
  }
  v6 = v5(FigBaseObject, *MEMORY[0x1E0CC4BC0], v3, &theArray);
  if ((_DWORD)v6 == -12783)
  {
    Count = 0;
  }
  else
  {
    v8 = v6;
    if ((_DWORD)v6)
      goto LABEL_9;
    Count = CFArrayGetCount(theArray);
    if ((Count & 0xFFFFFFFFFFFFFFFDLL) != 1)
    {
      v8 = FigSignalErrorAt();
      goto LABEL_9;
    }
  }
  v8 = 0;
  if (a2)
    *a2 = Count;
LABEL_9:
  if (theArray)
    CFRelease(theArray);
  return v8;
}

uint64_t _getImageGeometryForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  v12 = a2;
  if (!a4 && !a5 && !a6)
    return 0;
  result = _checkImageIndex(a1 + 40, &v12, 0);
  if (!(_DWORD)result)
  {
    result = _parseImageSizeAndTypeIfNeeded(a1 + 40);
    if (!(_DWORD)result)
    {
      v11 = *(_QWORD *)(a1 + 120);
      if (a4)
        *a4 = *(_QWORD *)(a1 + 112);
      if (a5)
        *a5 = v11;
      if (a6)
      {
        result = _parseExifIfNeeded(a1 + 40, 0);
        if (!(_DWORD)result)
          *a6 = *(_DWORD *)(a1 + 304);
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _getImageGeometryForIndex_0(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  if (!a4 && !a5 && !a6)
    return 0;
  if (!a2)
  {
    if (a4)
      *a4 = a1[22];
    if (a5)
      *a5 = a1[23];
    if (a6)
      *a6 = a1[33];
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _getImageGeometryForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6)
{
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t ItemTypeFromReader;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  CFTypeRef cf;

  cf = 0;
  v18 = 0;
  v19 = 1;
  v16 = 0u;
  v17 = 0u;
  if (!a4 && !a5 && !a6)
  {
LABEL_20:
    v14 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v12)
  {
    v14 = 4294954514;
    goto LABEL_21;
  }
  ItemTypeFromReader = v12(v11, a2, &cf, 0);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_24;
  ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(cf, &v18);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_24;
  if (v18 != 1768187246)
  {
    ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(cf, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v16, 0);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_24;
    if (a6)
    {
      ItemTypeFromReader = _getImageOrientation(a1, cf, 0, &v19);
      if ((_DWORD)ItemTypeFromReader)
        goto LABEL_24;
    }
    goto LABEL_14;
  }
  ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(cf, 0, &v16, &v19);
  if (!(_DWORD)ItemTypeFromReader)
  {
LABEL_14:
    if (a4)
      *a4 = v17;
    if (a5)
      *a5 = *((_QWORD *)&v17 + 1);
    if (a6)
    {
      v14 = 0;
      *a6 = v19;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_24:
  v14 = ItemTypeFromReader;
LABEL_21:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t _getImageGeometryForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t result;
  __int128 v10;
  __int128 v11;

  if (!a4 && !a5 && !a6)
    return 0;
  v10 = 0u;
  v11 = 0u;
  result = _getImageGeometryFromTrackReader(*(CFTypeRef *)(*(_QWORD *)(a1 + 80) + 8), &v10);
  if ((_DWORD)result)
    return result;
  if (a4)
    *a4 = v11;
  if (a5)
    *a5 = *((_QWORD *)&v11 + 1);
  if (!a6)
    return 0;
  result = 0;
  *a6 = 1;
  return result;
}

uint64_t _getFourCCPropertyFromReader(const void *a1, uint64_t a2, void *a3)
{
  CFAllocatorRef v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, CFAllocatorRef, CFNumberRef *);
  uint64_t v8;
  uint64_t v9;
  CFNumberRef number;

  number = 0;
  if (!a3)
    return 0;
  v5 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v7)
  {
    v8 = v7(FigBaseObject, a2, v5, &number);
    if ((_DWORD)v8)
    {
      v9 = v8;
    }
    else if (CFNumberGetValue(number, kCFNumberSInt32Type, a3))
    {
      v9 = 0;
    }
    else
    {
      v9 = 4294950194;
    }
  }
  else
  {
    v9 = 4294954514;
  }
  if (number)
    CFRelease(number);
  return v9;
}

uint64_t CMPhotoPictureReaderGetItemTypeFromReader(const void *a1, void *a2)
{
  return _getFourCCPropertyFromReader(a1, *MEMORY[0x1E0CC4B80], a2);
}

uint64_t _getImageOrientation(uint64_t a1, const void *a2, const void *a3, _DWORD *a4)
{
  uint64_t result;
  const __CFString *v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, const __CFBoolean **);
  int v13;
  CFAllocatorRef v14;
  unsigned int (*v15)(const void *, uint64_t *);
  uint64_t i;
  unsigned int (*v17)(const void *, uint64_t, unsigned int *, const __CFBoolean **, void **, void **, CFTypeRef *, _QWORD);
  size_t DataLength;
  void *v19;
  void *v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  void *v26;
  void *v27;
  const __CFBoolean *v28;
  unsigned int v29;

  v22 = 0;
  v21 = 1;
  result = CMPhotoPictureReaderGetHEIFOrientation(a2, &v22, &v21);
  if (!(_DWORD)result)
  {
    if ((_checkForInterestingBrands(a1) || !*(_BYTE *)(a1 + 163))
      && (_checkForInterestingBrands(a1) || !*(_BYTE *)(a1 + 164)))
    {
      LODWORD(v28) = 0;
      result = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v28);
      if ((_DWORD)result)
        return result;
      if ((_DWORD)v28 != 1953325424)
      {
        if (!*(_BYTE *)(a1 + 165))
        {
          v28 = 0;
          v9 = cmpweak_kFigPictureCollectionProperty_SourceSpecifiesOrientation();
          v10 = *(_QWORD *)(a1 + 40);
          CMBaseObject = FigPictureCollectionGetCMBaseObject();
          v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v12 && !v12(CMBaseObject, v9, v10, &v28))
            *(_BYTE *)(a1 + 166) = CMPhotoCFBooleanGetValue(v28);
          *(_BYTE *)(a1 + 165) = 1;
        }
        if (!*(_BYTE *)(a1 + 166))
        {
          v13 = v22;
          if (a3 && !v22)
          {
            LODWORD(v28) = 0;
            result = CMPhotoPictureReaderGetHEIFOrientation(a3, &v22, (int *)&v28);
            if ((_DWORD)result)
              return result;
            v13 = v22;
          }
          if (!v13)
          {
            if (!a3)
              a3 = a2;
            v14 = CFGetAllocator(a3);
            v29 = 0;
            v27 = 0;
            v28 = 0;
            theBuffer = 0;
            v26 = 0;
            v23 = 0;
            cf = 0;
            v15 = *(unsigned int (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 48);
            if (v15 && !v15(a3, &v23) && v23 >= 1)
            {
              for (i = 0; i < v23; ++i)
              {
                v17 = *(unsigned int (**)(const void *, uint64_t, unsigned int *, const __CFBoolean **, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (!v17
                  || v17(a3, i, &v29, &v28, &v27, &v26, &cf, 0)
                  || !cf
                  || CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v14, (uint64_t)v28, (uint64_t)v27, (uint64_t)v26, (uint64_t)cf, 0, 0, &theBuffer))
                {
                  break;
                }
                DataLength = CMBlockBufferGetDataLength(theBuffer);
                if (DataLength < v29)
                {
                  FigSignalErrorAt();
                  break;
                }
                if (CMPhotoParseExifOrientationFromTIFF(theBuffer, v29, DataLength - v29, &v21))
                {
                  v22 = 1;
                  break;
                }
                v19 = v27;
                if (v27)
                {
                  v27 = 0;
                  free(v19);
                }
                v20 = v26;
                if (v26)
                {
                  v26 = 0;
                  free(v20);
                }
                if (cf)
                {
                  CFRelease(cf);
                  cf = 0;
                }
                if (theBuffer)
                {
                  CFRelease(theBuffer);
                  theBuffer = 0;
                }
              }
            }
            free(v27);
            free(v26);
            if (cf)
              CFRelease(cf);
            if (theBuffer)
              CFRelease(theBuffer);
          }
        }
      }
    }
    result = 0;
    *a4 = v21;
  }
  return result;
}

uint64_t CMPhotoPictureReaderGetHEIFOrientation(const void *a1, _BYTE *a2, int *a3)
{
  CFAllocatorRef v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *);
  uint64_t v9;
  char v10;
  uint64_t v11;
  CFAllocatorRef v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *);
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v19;
  int v20;
  int valuePtr;
  CFNumberRef number;

  number = 0;
  v20 = -1;
  valuePtr = 0;
  v6 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v8)
    goto LABEL_11;
  v9 = v8(FigBaseObject, *MEMORY[0x1E0CC4BC8], v6, &number);
  if ((_DWORD)v9 == -12783)
  {
    v10 = 0;
  }
  else
  {
    v11 = v9;
    if ((_DWORD)v9)
      goto LABEL_12;
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    v10 = 1;
  }
  if (number)
  {
    CFRelease(number);
    number = 0;
  }
  v12 = CFGetAllocator(a1);
  v13 = FigPictureReaderGetFigBaseObject();
  v14 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v14)
  {
LABEL_11:
    v11 = 4294954514;
    goto LABEL_12;
  }
  v15 = v14(v13, *MEMORY[0x1E0CC4B98], v12, &number);
  if ((_DWORD)v15 == -12783)
  {
    v16 = 0;
    v17 = -1;
  }
  else
  {
    v11 = v15;
    if ((_DWORD)v15)
      goto LABEL_12;
    CFNumberGetValue(number, kCFNumberIntType, &v20);
    v16 = 1;
    v17 = v20;
  }
  v19 = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(valuePtr, v17, a3);
  v11 = v19;
  if (a2 && !(_DWORD)v19)
    *a2 = v10 | v16;
LABEL_12:
  if (number)
    CFRelease(number);
  return v11;
}

uint64_t CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(int a1, int a2, int *a3)
{
  int v3;
  BOOL v6;
  BOOL v8;
  BOOL v9;

  if (a1 || a2 != -1)
  {
    if ((a1 || a2 != 1) && (a1 != 180 || a2))
    {
      if (a1 == 180 && a2 == -1)
      {
        v3 = 3;
      }
      else
      {
        v6 = a1 == 180 && a2 == 1;
        v3 = 4;
        if (a2 | a1 && !v6)
        {
          if (a1 == 90 && !a2 || a1 == 270 && a2 == 1)
          {
            v3 = 5;
          }
          else if (a1 == 270 && a2 == -1)
          {
            v3 = 6;
          }
          else
          {
            v8 = a1 == 270 && a2 == 0;
            v9 = a2 == 1 && a1 == 90;
            v3 = 7;
            if (!v9 && !v8)
            {
              if (a1 != 90 || a2 != -1)
                return FigSignalErrorAt();
              v3 = 8;
            }
          }
        }
      }
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 1;
  }
  if (a3)
    *a3 = v3;
  return 0;
}

uint64_t CMPhotoPictureReaderGetImageGeometryFromPictureReader(const void *a1, int a2, unint64_t a3, unint64_t a4)
{
  CFAllocatorRef v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  uint64_t v11;
  CFAllocatorRef v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  uint64_t v15;
  uint64_t v16;
  double width;
  double v18;
  double v19;
  double v20;
  double CropRectFromCLAPDict;
  double height;
  double v23;
  double v24;
  CGSize size;
  CFDictionaryRef dict;

  size.height = 0.0;
  dict = 0;
  size.width = 0.0;
  if (!(a3 | a4))
    goto LABEL_34;
  v8 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v10 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v10)
  {
LABEL_14:
    v16 = 4294954514;
    goto LABEL_31;
  }
  v11 = v10(FigBaseObject, *MEMORY[0x1E0CC4BB8], v8, &dict);
  if ((_DWORD)v11)
  {
LABEL_35:
    v16 = v11;
    goto LABEL_31;
  }
  if (!CGSizeMakeWithDictionaryRepresentation(dict, &size) || size.width <= 0.0 || size.height <= 0.0)
  {
LABEL_34:
    v11 = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (dict)
  {
    CFRelease(dict);
    dict = 0;
  }
  v12 = CFGetAllocator(a1);
  v13 = FigPictureReaderGetFigBaseObject();
  v14 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v14)
    goto LABEL_14;
  v15 = v14(v13, *MEMORY[0x1E0CA8D50], v12, &dict);
  if ((_DWORD)v15)
  {
    v16 = v15;
    if ((_DWORD)v15 != -12783)
      goto LABEL_31;
  }
  width = size.width;
  if (dict)
  {
    CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(dict, size.width, size.height);
    width = size.width;
    height = size.height;
  }
  else
  {
    height = size.height;
    CropRectFromCLAPDict = 0.0;
    v18 = 0.0;
    v19 = size.width;
    v20 = size.height;
  }
  if (CropRectFromCLAPDict < 0.0 || v19 <= 0.0 || v18 < 0.0 || v20 <= 0.0)
    goto LABEL_34;
  v23 = CropRectFromCLAPDict + v19;
  v24 = v18 + v20;
  if (a2)
  {
    if (v23 > width)
      v19 = width - CropRectFromCLAPDict;
    if (v24 > height)
      v20 = height - v18;
    goto LABEL_27;
  }
  if (v23 > width || v24 > height)
    goto LABEL_34;
LABEL_27:
  if (a3)
  {
    *(_QWORD *)a3 = vcvtad_u64_f64(CropRectFromCLAPDict);
    *(_QWORD *)(a3 + 8) = vcvtad_u64_f64(v18);
    *(_QWORD *)(a3 + 16) = vcvtad_u64_f64(v19);
    *(_QWORD *)(a3 + 24) = vcvtad_u64_f64(v20);
  }
  v16 = 0;
  if (a4)
  {
    *(_QWORD *)a4 = vcvtad_u64_f64(width);
    *(_QWORD *)(a4 + 8) = vcvtad_u64_f64(height);
  }
LABEL_31:
  if (dict)
    CFRelease(dict);
  return v16;
}

uint64_t CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(const opaqueCMFormatDescription *a1, int a2, int a3, int a4, int a5, int a6, _QWORD *a7, CFTypeRef *a8, CFTypeRef *a9, CFTypeRef *a10, int *a11, int *a12, char *a13)
{
  uint64_t InfoFromFormatDescription;
  const __CFDictionary *Extensions;
  BOOL v21;
  char v22;
  char v23;
  CGColorSpace *v24;
  uint64_t v25;
  __int128 v27;
  BOOL v28;
  int v29;
  int v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;
  CGColorSpace *v34;

  v34 = 0;
  v32 = 0;
  cf = 0;
  v31 = 0;
  v29 = -1;
  v30 = -1;
  v28 = a5 == 0;
  *(_QWORD *)&v27 = &v30;
  *((_QWORD *)&v27 + 1) = &v29;
  InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(a1, 0, a2, 0, &v28, 0, 0, 0, v27, &cf, &v32, &v31);
  if ((_DWORD)InfoFromFormatDescription)
    goto LABEL_45;
  Extensions = CMFormatDescriptionGetExtensions(a1);
  InfoFromFormatDescription = CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, a4, &v34, 1, 1);
  if ((_DWORD)InfoFromFormatDescription)
    goto LABEL_45;
  if (a4)
    v21 = 0;
  else
    v21 = v31 == 0;
  v22 = !v21;
  if (!a3 || (v22 & 1) != 0)
  {
    if (v28)
      v22 = 1;
    v23 = 0;
    if ((v22 & 1) == 0)
      v31 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8F18]);
  }
  else
  {
    v31 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8F10]);
    v23 = 1;
  }
  v24 = v34;
  if (!(a6 | a4) && !v34)
  {
    v24 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    v34 = v24;
  }
  if (v24 && CGColorSpaceGetModel(v24) >= kCGColorSpaceModelCMYK)
  {
    InfoFromFormatDescription = FigSignalErrorAt();
LABEL_45:
    v25 = InfoFromFormatDescription;
    goto LABEL_35;
  }
  if (a7)
  {
    *a7 = v34;
    v34 = 0;
  }
  if (a8)
  {
    *a8 = cf;
    cf = 0;
  }
  if (a9)
  {
    *a9 = v32;
    v32 = 0;
  }
  if (a10)
  {
    *a10 = v31;
    v31 = 0;
  }
  if (a11)
    *a11 = v30;
  if (a12)
    *a12 = v29;
  v25 = 0;
  if (a13)
    *a13 = v23;
LABEL_35:
  if (v34)
    CFRelease(v34);
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  return v25;
}

uint64_t CMPhotoCreateColorSpaceFromPixelBuffer(__CVBuffer *a1, CGColorSpace **a2, int a3, int a4)
{
  _BOOL4 v8;
  const __CFDictionary *v9;
  signed int PixelFormatType;
  uint64_t ColorSpaceFromPixelBufferAttachments;

  v8 = 1;
  v9 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1278226735)
  {
    if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0
      || PixelFormatType == 1717855600
      || PixelFormatType == 1751410032)
    {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if ((PixelFormatType - 1278226488) > 0x30
    || ((1 << (PixelFormatType - 56)) & 0x1400000000001) == 0)
  {
LABEL_9:
    v8 = PixelFormatType == 1751411059 || PixelFormatType == 1717856627;
  }
LABEL_15:
  ColorSpaceFromPixelBufferAttachments = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v9, v8, a2, a3, a4);
  if (v9)
    CFRelease(v9);
  return ColorSpaceFromPixelBufferAttachments;
}

uint64_t CMPhotoCreateColorSpaceFromPixelBufferAttachments(const __CFDictionary *a1, int a2, CGColorSpace **a3, int a4, int a5)
{
  const __CFString *v8;
  const void *Value;
  CGColorSpace *ColorSpaceFromTriplets;
  CGColorSpaceRef ColorSpaceFromAttachments;
  int v14;
  uint64_t result;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t v18;
  const __CFString *yCbCrMatrixString;

  if (a2)
    v8 = (const __CFString *)*MEMORY[0x1E0C9D978];
  else
    v8 = (const __CFString *)*MEMORY[0x1E0C9DA10];
  if (a1 && CFDictionaryGetCount(a1) >= 1)
  {
    Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8CD8]);
    if (Value)
    {
      ColorSpaceFromTriplets = (CGColorSpace *)CFRetain(Value);
      if (ColorSpaceFromTriplets)
        goto LABEL_15;
    }
    if (CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E40]))
    {
      ColorSpaceFromAttachments = (CGColorSpaceRef)MEMORY[0x1A85CF43C]();
    }
    else
    {
      v16 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8D68]);
      v17 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E98]);
      yCbCrMatrixString = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8EE8]);
      ColorSpaceFromTriplets = CMPhotoCreateColorSpaceFromTriplets((uint64_t)v16, (uint64_t)v17, v18, a2);
      if (ColorSpaceFromTriplets)
        goto LABEL_15;
      CVColorPrimariesGetIntegerCodePointForString(v16);
      CVTransferFunctionGetIntegerCodePointForString(v17);
      CVYCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString);
      ColorSpaceFromTriplets = (CGColorSpace *)CGColorSpaceCreateFromCICP();
      if (ColorSpaceFromTriplets)
        goto LABEL_15;
      if (!v17 || !v16)
        goto LABEL_12;
      ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(a1);
    }
    ColorSpaceFromTriplets = ColorSpaceFromAttachments;
  }
  else
  {
    ColorSpaceFromTriplets = 0;
  }
LABEL_12:
  if (!(a5 | a4) && !ColorSpaceFromTriplets)
  {
    ColorSpaceFromTriplets = CGColorSpaceCreateWithName(v8);
    if (!ColorSpaceFromTriplets)
    {
      result = 4294950305;
      goto LABEL_20;
    }
  }
LABEL_15:
  if (a5)
  {
    CGColorSpaceGetName(ColorSpaceFromTriplets);
    v14 = FigCFEqual();
    result = 0;
    if (ColorSpaceFromTriplets && v14)
    {
      CFRelease(ColorSpaceFromTriplets);
      result = 0;
      ColorSpaceFromTriplets = 0;
    }
  }
  else
  {
    result = 0;
  }
LABEL_20:
  *a3 = ColorSpaceFromTriplets;
  return result;
}

uint64_t CMPhotoGetInfoFromFormatDescription(const opaqueCMFormatDescription *a1, opaqueCMSampleBuffer *a2, int a3, FourCharCode *a4, _BYTE *a5, _DWORD *a6, char *a7, char *a8, __int128 a9, _QWORD *a10, _QWORD *a11, _QWORD *a12)
{
  FourCharCode MediaSubType;
  int v18;
  const __CFDictionary *Extensions;
  const __CFDictionary *v20;
  const void *StringForIntegerCodePoint;
  const void *v22;
  const __CFDictionary *MatrixFromPixelBufferAttachments;
  _BOOL4 v24;
  BOOL v25;
  const __CFDictionary *Extension;
  const __CFDictionary *v28;
  int v29;
  uint64_t AV1SequenceHeaderInfoFromSampleBuffer;
  int v31;
  const void *Value;
  CFTypeID TypeID;
  int v34;
  CFTypeRef *v35;
  CFTypeRef *v36;
  CFTypeRef *v37;
  CFTypeRef v38;
  CFTypeRef v39;
  unint64_t v40;
  CFTypeRef v41;
  Boolean v42;
  int v43;
  const __CFBoolean *v44;
  char IsFullRange;
  const __CFDictionary *v46;
  const __CFData *v47;
  const __CFData *v48;
  unint64_t Length;
  const UInt8 *BytePtr;
  unsigned int v51;
  unint64_t v52;
  _BOOL4 v53;
  const __CFData *v54;
  const __CFDictionary *v55;
  const __CFData *v56;
  const __CFData *v57;
  uint64_t HEVCParameterSetAtIndex;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const __CFArray *v61;
  const __CFArray *ValueAtIndex;
  CFTypeID v63;
  const __CFDictionary *v64;
  const __CFData *v65;
  unint64_t v66;
  const UInt8 *v67;
  unsigned int v68;
  CFTypeID v70;
  int v71;
  CFTypeRef cf;
  CFTypeID v73;
  CFTypeID v74;
  _BOOL4 v75;
  _BOOL4 v76;
  _BYTE *v79;
  char *v80;
  char *v81;
  int v83;
  int v84;
  char v85;
  char BitDepthForPixelFormat;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  int colorPrimariesCodePoint[4];
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  BitDepthForPixelFormat = -1;
  v85 = -1;
  v83 = -1;
  v84 = -1;
  if (!a1)
    return 4294950306;
  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  v18 = MediaSubType;
  if (a4)
    *a4 = MediaSubType;
  v88 = 0;
  v89 = 0;
  v87 = 0;
  if (!a10 && !a11 && !a12)
  {
    AV1SequenceHeaderInfoFromSampleBuffer = 0;
    v40 = (unint64_t)a6;
    goto LABEL_69;
  }
  v79 = a5;
  v80 = a7;
  v81 = a8;
  Extensions = CMFormatDescriptionGetExtensions(a1);
  v20 = Extensions;
  if (!Extensions)
  {
    v75 = 0;
    v76 = 0;
    v24 = 0;
    v22 = 0;
    StringForIntegerCodePoint = 0;
    if (CMFormatDescriptionGetMediaSubType(a1) != 1735551332)
      goto LABEL_31;
    Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (!Extension)
      goto LABEL_31;
LABEL_18:
    v28 = Extension;
    if (CFDictionaryGetValue(Extension, CFSTR("hvcC")))
    {
      v29 = 1752589105;
LABEL_26:
      v31 = v29;
      goto LABEL_32;
    }
    if (CFDictionaryGetValue(v28, CFSTR("avcC")))
    {
      v29 = 1635148593;
      goto LABEL_26;
    }
    if (CFDictionaryGetValue(v28, CFSTR("slmC")))
    {
      v29 = 1936484717;
      goto LABEL_26;
    }
    Value = CFDictionaryGetValue(v28, CFSTR("av1C"));
    if (Value)
    {
      v29 = 1635135537;
      cf = Value;
      v73 = CFGetTypeID(Value);
      if (v73 == CFArrayGetTypeID())
        goto LABEL_26;
      v74 = CFGetTypeID(cf);
      TypeID = CFDataGetTypeID();
      v31 = v18;
      if (v74 == TypeID)
        goto LABEL_26;
    }
    else
    {
LABEL_31:
      v31 = v18;
    }
LABEL_32:
    AV1SequenceHeaderInfoFromSampleBuffer = 0;
    if (v31 > 1752589104)
    {
      if (v31 == 1936484717)
        goto LABEL_38;
      v34 = 1752589105;
    }
    else
    {
      if (v31 == 1635135537)
      {
        AV1SequenceHeaderInfoFromSampleBuffer = 0;
        if (a2)
        {
          if (a3)
          {
            v93 = 0;
            v91 = 0u;
            v92 = 0u;
            *(_OWORD *)colorPrimariesCodePoint = 0u;
            AV1SequenceHeaderInfoFromSampleBuffer = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a2, colorPrimariesCodePoint);
            if (!(_DWORD)AV1SequenceHeaderInfoFromSampleBuffer)
            {
              if (v24)
                StringForIntegerCodePoint = 0;
              else
                StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(colorPrimariesCodePoint[1]);
              if (v75)
                v22 = 0;
              else
                v22 = CVTransferFunctionGetStringForIntegerCodePoint(colorPrimariesCodePoint[2]);
              if (v76)
                v20 = 0;
              else
                v20 = (const __CFDictionary *)CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(colorPrimariesCodePoint[3]);
            }
          }
        }
        goto LABEL_53;
      }
      v34 = 1635148593;
    }
    if (v31 != v34)
      goto LABEL_53;
LABEL_38:
    if (v24)
      v35 = 0;
    else
      v35 = &v89;
    if (v75)
      v36 = 0;
    else
      v36 = &v88;
    if (v76)
      v37 = 0;
    else
      v37 = &v87;
    CMPhotoCopyTripletsFromVUIInsideFormatDescription(a1, v35, v36, v37);
    AV1SequenceHeaderInfoFromSampleBuffer = 0;
    if (v89)
      StringForIntegerCodePoint = v89;
    if (v88)
      v22 = v88;
    if (v87)
      v20 = (const __CFDictionary *)v87;
    goto LABEL_53;
  }
  StringForIntegerCodePoint = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8D68]);
  v22 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CA8E98]);
  MatrixFromPixelBufferAttachments = CMPhotoGetMatrixFromPixelBufferAttachments(v20);
  v20 = MatrixFromPixelBufferAttachments;
  v24 = StringForIntegerCodePoint != 0;
  if (StringForIntegerCodePoint)
    v25 = v22 == 0;
  else
    v25 = 1;
  if (v25 || MatrixFromPixelBufferAttachments == 0)
  {
    v75 = v22 != 0;
    v76 = MatrixFromPixelBufferAttachments != 0;
    goto LABEL_18;
  }
  AV1SequenceHeaderInfoFromSampleBuffer = 0;
LABEL_53:
  a5 = v79;
  if (a10)
  {
    if (StringForIntegerCodePoint)
      v38 = CFRetain(StringForIntegerCodePoint);
    else
      v38 = 0;
    *a10 = v38;
  }
  a7 = v80;
  if (a11)
  {
    if (v22)
      v39 = CFRetain(v22);
    else
      v39 = 0;
    *a11 = v39;
  }
  if (a12)
  {
    a8 = v81;
    v40 = (unint64_t)a6;
    if (v20)
      v41 = CFRetain(v20);
    else
      v41 = 0;
    *a12 = v41;
  }
  else
  {
    a8 = v81;
    v40 = (unint64_t)a6;
  }
LABEL_69:
  if (v89)
    CFRelease(v89);
  if (v88)
    CFRelease(v88);
  if (v87)
    CFRelease(v87);
  if (!(_DWORD)AV1SequenceHeaderInfoFromSampleBuffer)
  {
    if (!a5)
      goto LABEL_97;
    v42 = 1;
    if (v18 > 1752589104)
    {
      if (v18 == 1936484717)
      {
        v46 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
        if (!v46)
          return 4294950303;
        v47 = (const __CFData *)CFDictionaryGetValue(v46, CFSTR("slmC"));
        if (v47)
        {
          v48 = v47;
          Length = CFDataGetLength(v47);
          BytePtr = CFDataGetBytePtr(v48);
          v42 = 1;
          if (Length < 4 || !BytePtr)
            goto LABEL_96;
          v51 = *(_DWORD *)BytePtr;
          colorPrimariesCodePoint[0] = 6;
          LODWORD(v89) = 0;
          AV1SequenceHeaderInfoFromSampleBuffer = Slim_GetPixelBufferInfoFromVersion(v51, colorPrimariesCodePoint, (int *)&v89, 0, 0, 0);
          if ((_DWORD)AV1SequenceHeaderInfoFromSampleBuffer)
            IsFullRange = 1;
          else
            IsFullRange = CMPhotoPixelFormatIsFullRange(v89);
LABEL_161:
          *a5 = IsFullRange;
          if ((_DWORD)AV1SequenceHeaderInfoFromSampleBuffer)
            return AV1SequenceHeaderInfoFromSampleBuffer;
LABEL_97:
          v52 = v40 | (unint64_t)a7 | (unint64_t)a8;
          v53 = v52 != 0;
          if (!v52 && a9 == 0)
            return 0;
          LODWORD(v54) = 0;
          if (v18 > 1752589104)
          {
            if (v18 != 1936484717)
            {
              AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (v18 != 1752589105)
                goto LABEL_141;
              v89 = 0;
              *(_QWORD *)colorPrimariesCodePoint = 0;
              v59 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
              if (v59 && CFDictionaryGetValue(v59, CFSTR("hvcC")))
              {
                HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
                if (!(_DWORD)HEVCParameterSetAtIndex)
                {
                  if (v53
                    && (LOBYTE(v88) = -1,
                        FigHEVCBridge_GetSPSChromaFormatAndBitDepths(),
                        (unint64_t)(char)v88 <= 3))
                  {
                    LODWORD(v54) = dword_1A828F1B0[(char)v88];
                  }
                  else
                  {
                    LODWORD(v54) = 0;
                  }
                  if (a9 != 0)
                    FigHEVCBridge_GetSPS_VUI_ChromaLocation();
                  goto LABEL_140;
                }
                return HEVCParameterSetAtIndex;
              }
              return 4294950303;
            }
            if (!v52)
            {
              AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (!(_QWORD)a9)
              {
LABEL_149:
                if (*((_QWORD *)&a9 + 1))
                  **((_DWORD **)&a9 + 1) = v83;
                return AV1SequenceHeaderInfoFromSampleBuffer;
              }
LABEL_148:
              *(_DWORD *)a9 = v84;
              goto LABEL_149;
            }
            v64 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
            if (!v64)
              return 4294950303;
            v65 = (const __CFData *)CFDictionaryGetValue(v64, CFSTR("slmC"));
            v54 = v65;
            if (v65)
            {
              v66 = CFDataGetLength(v65);
              v67 = CFDataGetBytePtr(v54);
              LODWORD(v54) = 0;
              AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (v66 >= 4)
              {
                if (v67)
                {
                  v68 = *(_DWORD *)v67;
                  colorPrimariesCodePoint[0] = 6;
                  LODWORD(v89) = 0;
                  AV1SequenceHeaderInfoFromSampleBuffer = Slim_GetPixelBufferInfoFromVersion(v68, colorPrimariesCodePoint, (int *)&v89, 0, 0, 0);
                  LODWORD(v54) = 0;
                  if (!(_DWORD)AV1SequenceHeaderInfoFromSampleBuffer)
                  {
                    LODWORD(v54) = CMPhotoGetChromaSubsamplingFromPixelFormat(v89);
                    BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v89);
                    v85 = BitDepthForPixelFormat;
                  }
                }
              }
LABEL_141:
              if (v40)
                *(_DWORD *)v40 = (_DWORD)v54;
              if (a7)
                *a7 = BitDepthForPixelFormat;
              if (a8)
                *a8 = v85;
              if (!(_QWORD)a9)
                goto LABEL_149;
              goto LABEL_148;
            }
LABEL_140:
            AV1SequenceHeaderInfoFromSampleBuffer = 0;
            goto LABEL_141;
          }
          if (v18 != 1635135537)
          {
            AV1SequenceHeaderInfoFromSampleBuffer = 0;
            if (v18 != 1635148593)
              goto LABEL_141;
            v89 = 0;
            *(_QWORD *)colorPrimariesCodePoint = 0;
            v55 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
            if (v55)
            {
              v56 = (const __CFData *)CFDictionaryGetValue(v55, CFSTR("avcC"));
              if (v56)
              {
                v57 = v56;
                CFDataGetBytePtr(v56);
                CFDataGetLength(v57);
                HEVCParameterSetAtIndex = FigH264Bridge_GetSPSFromAVCC();
                if (!(_DWORD)HEVCParameterSetAtIndex)
                {
                  if (v53
                    && (LOBYTE(v88) = -1,
                        FigH264Bridge_GetSPSChromaFormatAndBitDepths(),
                        (unint64_t)(char)v88 <= 3))
                  {
                    LODWORD(v54) = dword_1A828F1B0[(char)v88];
                  }
                  else
                  {
                    LODWORD(v54) = 0;
                  }
                  if (a9 != 0)
                    FigH264Bridge_GetSPS_VUI_ChromaLocation();
                  goto LABEL_140;
                }
                return HEVCParameterSetAtIndex;
              }
            }
            return 4294950303;
          }
          LOBYTE(colorPrimariesCodePoint[0]) = -1;
          LOBYTE(v89) = -1;
          v60 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
          if (!v60)
            return 4294950303;
          v61 = (const __CFArray *)CFDictionaryGetValue(v60, CFSTR("av1C"));
          if (!v61)
            return 4294950303;
          ValueAtIndex = v61;
          v63 = CFGetTypeID(v61);
          if (v63 == CFArrayGetTypeID())
          {
            ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
            if (!ValueAtIndex)
              return 4294950303;
          }
          else
          {
            v70 = CFGetTypeID(ValueAtIndex);
            if (v70 != CFDataGetTypeID())
              return 4294950303;
          }
          CFDataGetBytePtr(ValueAtIndex);
          CFDataGetLength(ValueAtIndex);
          HEVCParameterSetAtIndex = FigAV1Bridge_GetChromaFormatAndBitDepthsFromAV1CodecConfigurationRecord();
          if ((_DWORD)HEVCParameterSetAtIndex)
            return HEVCParameterSetAtIndex;
          BitDepthForPixelFormat = -1;
          v71 = LOBYTE(colorPrimariesCodePoint[0]);
          if (LOBYTE(colorPrimariesCodePoint[0]) != 2)
          {
            if (LOBYTE(colorPrimariesCodePoint[0]) == 1)
            {
              v83 = 0;
              v84 = 0;
              goto LABEL_165;
            }
            v71 = -1;
          }
          v83 = v71;
          v84 = v71;
LABEL_165:
          if (v89 > 0x6Du)
          {
            if (v89 == 110)
            {
              LODWORD(v54) = 5;
              goto LABEL_140;
            }
            if (v89 == 111)
            {
              LODWORD(v54) = 6;
              goto LABEL_140;
            }
          }
          else
          {
            if (!(_BYTE)v89)
            {
              LODWORD(v54) = 1;
              goto LABEL_140;
            }
            if (v89 == 100)
            {
              LODWORD(v54) = 3;
              goto LABEL_140;
            }
          }
          LODWORD(v54) = 0;
          goto LABEL_140;
        }
LABEL_95:
        v42 = 1;
        goto LABEL_96;
      }
      v43 = 1752589105;
    }
    else
    {
      if (v18 == 1635135537)
        goto LABEL_83;
      v43 = 1635148593;
    }
    if (v18 != v43)
    {
LABEL_96:
      *a5 = v42;
      goto LABEL_97;
    }
LABEL_83:
    v44 = (const __CFBoolean *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA21D0]);
    if (v44)
    {
      v42 = CFBooleanGetValue(v44);
      goto LABEL_96;
    }
    if (v18 == 1635135537)
    {
      v42 = 1;
      if (!a2 || !a3)
        goto LABEL_96;
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
      *(_OWORD *)colorPrimariesCodePoint = 0u;
      AV1SequenceHeaderInfoFromSampleBuffer = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a2, colorPrimariesCodePoint);
      IsFullRange = (AV1SequenceHeaderInfoFromSampleBuffer | colorPrimariesCodePoint[0]) != 0;
      goto LABEL_161;
    }
    goto LABEL_95;
  }
  return AV1SequenceHeaderInfoFromSampleBuffer;
}

uint64_t CMPhotoCopyTripletsFromVUIInsideFormatDescription(const opaqueCMFormatDescription *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  const __CFDictionary *Extension;
  const __CFDictionary *v8;
  const void *Value;
  const __CFData *StringForIntegerCodePoint;
  uint64_t HEVCParameterSetAtIndex;
  uint64_t SPS_VUI_NCLC;
  CFStringRef v13;
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  if (!a1)
  {
    StringForIntegerCodePoint = 0;
    goto LABEL_7;
  }
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  v8 = Extension;
  if (!Extension)
  {
    StringForIntegerCodePoint = 0;
LABEL_9:
    v13 = 0;
    v14 = 0;
    if (!a2)
      goto LABEL_21;
    goto LABEL_17;
  }
  Value = CFDictionaryGetValue(Extension, CFSTR("hvcC"));
  StringForIntegerCodePoint = (const __CFData *)CFDictionaryGetValue(v8, CFSTR("avcC"));
  CFDictionaryGetValue(v8, CFSTR("slmC"));
  if (Value)
  {
    HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
    if (!(_DWORD)HEVCParameterSetAtIndex)
    {
      SPS_VUI_NCLC = FigHEVCBridge_GetSPS_VUI_NCLC();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (!StringForIntegerCodePoint)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_9;
  }
  CFDataGetBytePtr(StringForIntegerCodePoint);
  CFDataGetLength(StringForIntegerCodePoint);
  HEVCParameterSetAtIndex = FigH264Bridge_GetSPSFromAVCC();
  if (!(_DWORD)HEVCParameterSetAtIndex)
  {
    SPS_VUI_NCLC = FigH264Bridge_GetSPS_VUI_NCLC();
LABEL_15:
    v14 = SPS_VUI_NCLC;
    if (!(_DWORD)SPS_VUI_NCLC)
    {
      StringForIntegerCodePoint = (const __CFData *)CVColorPrimariesGetStringForIntegerCodePoint(0);
      v8 = (const __CFDictionary *)CVTransferFunctionGetStringForIntegerCodePoint(0);
      v13 = CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(0);
      if (!a2)
        goto LABEL_21;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_13:
  v14 = HEVCParameterSetAtIndex;
LABEL_16:
  StringForIntegerCodePoint = 0;
  v8 = 0;
  v13 = 0;
  if (!a2)
    goto LABEL_21;
LABEL_17:
  if (StringForIntegerCodePoint)
    v15 = CFRetain(StringForIntegerCodePoint);
  else
    v15 = 0;
  *a2 = v15;
LABEL_21:
  if (a3)
  {
    if (v8)
      v16 = CFRetain(v8);
    else
      v16 = 0;
    *a3 = v16;
  }
  if (a4)
  {
    if (v13)
      v17 = CFRetain(v13);
    else
      v17 = 0;
    *a4 = v17;
  }
  return v14;
}

CFStringRef CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(int a1)
{
  uint64_t v1;

  if (a1 == 5)
  {
    v1 = MEMORY[0x1E0CA8F10];
    return *(CFStringRef *)v1;
  }
  if (!a1)
  {
    v1 = MEMORY[0x1E0CA8F20];
    return *(CFStringRef *)v1;
  }
  return CVYCbCrMatrixGetStringForIntegerCodePoint(a1);
}

uint64_t HEIFItemDecoderWaitForFinishAndReturnStatus(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  CFIndex Count;
  uint64_t v9;
  int v10;
  NSObject *v11;
  dispatch_time_t v12;
  int v13;
  int v14;
  NSObject *v15;
  dispatch_time_t v16;

  if (*(_BYTE *)(a1 + 157))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 14576));
    *(_BYTE *)(a1 + 216) = 1;
    Count = CFSetGetCount(*(CFSetRef *)(a1 + 14600));
    v9 = *(_QWORD *)(a1 + 14608);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 14576));
    if (*(int *)(a1 + 212) >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *(NSObject **)(a1 + 224);
        v12 = dispatch_time(0, 10000000000);
        if (dispatch_semaphore_wait(v11, v12))
        {
          if (FigDebugIsInternalBuild())
            _logHang(**(_QWORD **)(a1 + 8), 0, v9, Count, *(_DWORD *)(a1 + 14580), a2, a3, a4);
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 224), 0xFFFFFFFFFFFFFFFFLL);
        }
        ++v10;
        v13 = *(_DWORD *)(a1 + 212);
      }
      while (v10 < v13);
      if (v13 >= 1)
      {
        v14 = 0;
        do
        {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 224));
          ++v14;
        }
        while (v14 < *(_DWORD *)(a1 + 212));
      }
    }
    if (Count)
    {
      v15 = *(NSObject **)(a1 + 232);
      v16 = dispatch_time(0, 10000000000);
      if (dispatch_semaphore_wait(v15, v16))
      {
        if (FigDebugIsInternalBuild())
          _logHang(**(_QWORD **)(a1 + 8), 1, v9, Count, *(_DWORD *)(a1 + 14580), a2, a3, a4);
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 232), 0xFFFFFFFFFFFFFFFFLL);
      }
    }
  }
  return *(unsigned int *)(a1 + 14580);
}

BOOL CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(int a1)
{
  _BOOL8 result;
  unsigned __int16 v3;
  unsigned __int16 v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;

  result = 1;
  if (a1 > 1717855599)
  {
    if (a1 > 1936077361)
    {
      if (a1 > 1953903151)
      {
        if (a1 <= 2016686641)
        {
          if (a1 <= 1953903667)
          {
            if (a1 == 1953903152)
              return result;
            v5 = 1953903154;
            goto LABEL_103;
          }
          if (a1 == 1953903668)
            return result;
          v8 = 12848;
        }
        else
        {
          if (a1 > 2019963439)
          {
            if (a1 == 2019963440 || a1 == 2019963442)
              return result;
            v5 = 2019963956;
            goto LABEL_103;
          }
          if (a1 == 2016686642)
            return result;
          v8 = 13364;
        }
        v5 = v8 | 0x78340000;
        goto LABEL_103;
      }
      if (a1 > 1937126451)
      {
        if (a1 > 1952854577)
        {
          if (a1 == 1952854578)
            return result;
          v7 = 13364;
        }
        else
        {
          if (a1 == 1937126452)
            return result;
          v7 = 12848;
        }
        v5 = v7 | 0x74660000;
        goto LABEL_103;
      }
      if (a1 > 1937125935)
      {
        if (a1 == 1937125936)
          return result;
        v5 = 1937125938;
        goto LABEL_103;
      }
      if (a1 == 1936077362)
        return result;
      v4 = 13364;
    }
    else
    {
      if (a1 <= 1751527983)
      {
        if (a1 > 1735549491)
        {
          if (a1 > 1751410031)
          {
            if (a1 == 1751410032)
              return result;
            v5 = 1751411059;
          }
          else
          {
            if (a1 == 1735549492)
              return result;
            v5 = 1735549752;
          }
        }
        else if (a1 > 1734501175)
        {
          if (a1 == 1734501176)
            return result;
          v5 = 1734505012;
        }
        else
        {
          if (a1 == 1717855600)
            return result;
          v5 = 1717856627;
        }
        goto LABEL_103;
      }
      if (a1 <= 1885745711)
      {
        if (a1 > 1815491697)
        {
          if (a1 == 1815491698)
            return result;
          v5 = 1882468912;
        }
        else
        {
          if (a1 == 1751527984)
            return result;
          v5 = 1815162994;
        }
        goto LABEL_103;
      }
      if (a1 <= 1919379251)
      {
        if (a1 == 1885745712)
          return result;
        v5 = 1919378232;
        goto LABEL_103;
      }
      if (a1 == 1919379252 || a1 == 1932996149)
        return result;
      v4 = 12848;
    }
    v5 = v4 | 0x73660000;
    goto LABEL_103;
  }
  if (a1 > 1278555700)
  {
    if (a1 <= 1647719527)
    {
      if (a1 > 1380410944)
      {
        if (a1 > 1647392368)
        {
          if (a1 == 1647392369)
            return result;
          v5 = 1647589490;
          goto LABEL_103;
        }
        if (a1 == 1380410945)
          return result;
        v6 = 26689;
      }
      else
      {
        if (a1 <= 1279340853)
        {
          if (a1 == 1278555701)
            return result;
          v5 = 1279340600;
          goto LABEL_103;
        }
        if (a1 == 1279340854)
          return result;
        v6 = 16961;
      }
      v5 = v6 | 0x52470000;
      goto LABEL_103;
    }
    if (a1 > 1651847471)
    {
      if (a1 > 1651926375)
      {
        if (a1 == 1651926376)
          return result;
        v5 = 1652056888;
      }
      else
      {
        if (a1 == 1651847472)
          return result;
        v5 = 1651925816;
      }
    }
    else if (a1 > 1650943795)
    {
      if (a1 == 1650943796)
        return result;
      v5 = 1651519798;
    }
    else
    {
      if (a1 == 1647719528)
        return result;
      v5 = 1650942776;
    }
  }
  else if (a1 > 875836517)
  {
    if (a1 > 1278226487)
    {
      if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
        || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
      {
        return result;
      }
      return CMPhotoPixelFormatIsAGXCompressed(a1) && CMPhotoSupportsAGXCompressedFormat()
          || CMPhotoPixelFormatIsLossyCompressed(a1) && CMPhotoSupportsLossyCompressedFormat();
    }
    if (a1 == 875836518 || a1 == 875836534)
      return result;
    v5 = 1111970369;
  }
  else if (a1 <= 843264309)
  {
    if (a1 > 825437746)
    {
      if (a1 == 825437747)
        return result;
      v5 = 843264056;
    }
    else
    {
      if (a1 == 16)
        return result;
      v5 = 825306677;
    }
  }
  else
  {
    if (a1 <= 875704437)
    {
      if (a1 == 843264310)
        return result;
      v3 = 12390;
    }
    else
    {
      if (a1 == 875704438 || a1 == 875704934)
        return result;
      v3 = 12918;
    }
    v5 = v3 | 0x34320000;
  }
LABEL_103:
  if (a1 == v5)
    return result;
  return CMPhotoPixelFormatIsAGXCompressed(a1) && CMPhotoSupportsAGXCompressedFormat()
      || CMPhotoPixelFormatIsLossyCompressed(a1) && CMPhotoSupportsLossyCompressedFormat();
}

double CMPhotoPixelBufferConstrainSizeToMaxSideLength(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7, unint64_t *a8, BOOL *a9, double *a10)
{
  double result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  float v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;

  v30 = a2;
  v31 = a1;
  LODWORD(result) = 4.0;
  if (!a6)
    *(float *)&result = 1.0;
  if (!a3 || !(a4 | a5))
  {
    if (a1 <= a2)
      v11 = a2;
    else
      v11 = a1;
    v12 = a2;
    v13 = a1;
    if (!a3 || v11 == a3)
      goto LABEL_42;
    if (!(a4 | a5))
    {
      a5 = a2;
      a4 = a1;
    }
  }
  v14 = &v30;
  v15 = &v30;
  if (a1 < a2)
    v16 = a4;
  else
    v16 = a5;
  if (a1 < a2)
    v17 = a5;
  else
    v17 = a4;
  if (a1 < a2)
    v14 = &v31;
  else
    v15 = &v31;
  v18 = fminf(*(float *)&result, (float)a3 / (float)v17);
  v19 = vcvtas_u32_f32(v18 * (float)v17);
  *v15 = v19;
  *(float *)&result = v18 * (float)v16;
  v20 = vcvtas_u32_f32(*(float *)&result);
  *v14 = v20;
  if ((a3 & 1) == 0 && v17 != a3)
  {
    v21 = v20 & 1;
    v22 = v19 != a3 || v21 == 0;
    v23 = !v22 && a7 == 0;
    if (v23 && v17 != v16)
    {
      v25 = roundf(*(float *)&result * 0.5);
      result = v25 + v25;
      *v14 = (unint64_t)result;
    }
  }
  if (a7)
    v12 = 2;
  else
    v12 = 1;
  if (v31 >= 2)
    v13 = v31;
  else
    v13 = v12;
  if (v30 >= 2)
    v12 = v30;
LABEL_42:
  v26 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
    v26 = 1;
  v27 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 0)
    v27 = 1;
  if (a7)
  {
    v12 = v27;
    v13 = v26;
  }
  if (a8)
  {
    *a8 = v13;
    a8[1] = v12;
  }
  if (a9)
  {
    v29 = a1 != v13 || a2 != v12;
    *a9 = v29;
  }
  if (a10)
  {
    result = (double)v13 / (double)a1;
    *a10 = result;
    a10[1] = (double)v12 / (double)a2;
  }
  return result;
}

double CMPhotoDecompressionSessionClass_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t _queueAsyncImageDecode(uint64_t a1, int a2, uint64_t a3, const void *a4, char a5, int a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  __CFDictionary *DeepCopy;
  __CFDictionary *v18;
  int SizeIfPresent;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char ShouldUseHWForOperation;
  _DWORD *AsyncRequest;
  _DWORD *v28;
  CFTypeRef v29;
  CFTypeRef v30;
  const void *v31;
  const void *v32;
  _OWORD v34[2];
  char v35[5];
  int v36[2];
  char v37;

  v37 = 0;
  *(_QWORD *)v36 = 0;
  memset(v35, 0, sizeof(v35));
  if (!a4)
  {
    v18 = 0;
    goto LABEL_13;
  }
  DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)(a1 + 40), a4);
  if (!DeepCopy)
    return 4294950305;
  v18 = DeepCopy;
  LOBYTE(v34[0]) = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, CFSTR("PreferLowMemory"), v34))
    v35[0] = v34[0];
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, CFSTR("HighPriority"), &v37);
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, CFSTR("UseLimitedConcurrencyQueue"), v35);
  SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a4, CFSTR("ReservedRequestID"), v36);
  if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a4, CFSTR("AccelerationMode"), &v35[1]))
    v20 = *(_DWORD *)&v35[1] >= 3u;
  else
    v20 = 0;
  if (v20)
    goto LABEL_11;
  if (!SizeIfPresent)
  {
LABEL_13:
    v23 = CMPhotoDecompressionSessionReserveRequestID(*(_QWORD *)(a1 + 16), (unint64_t *)v36);
    if ((_DWORD)v23)
    {
      v21 = v23;
      v22 = 0;
      goto LABEL_28;
    }
LABEL_14:
    if (a2 == 2)
    {
      v24 = 1;
      *(_DWORD *)&v35[1] = 1;
    }
    else
    {
      v24 = *(_DWORD *)&v35[1];
    }
    v25 = *(_QWORD *)(a1 + 96);
    memset(v34, 0, sizeof(v34));
    ShouldUseHWForOperation = CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(v25, v24);
    AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x58uLL, *(uint64_t *)v36, v37 != 0, (const void *)a1, v35[0], ShouldUseHWForOperation, a8, a9, a6);
    if (AsyncRequest)
    {
      v28 = AsyncRequest;
      v29 = *(CFTypeRef *)(a1 + 64);
      if (v29)
        v29 = CFRetain(v29);
      *((_QWORD *)v28 + 6) = v29;
      *((_BYTE *)v28 + 72) = a5;
      v28[14] = a2;
      *((_QWORD *)v28 + 8) = a3;
      if (v18)
        v30 = CFRetain(v18);
      else
        v30 = 0;
      *((_QWORD *)v28 + 10) = v30;
      if (a7)
        *a7 = *(_QWORD *)v36;
      v21 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(*(_QWORD *)(a1 + 16), v28);
      if ((_DWORD)v21)
        v22 = v28;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
      v21 = 4294950305;
    }
LABEL_28:
    if (!v18)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (*(_QWORD *)v36)
    goto LABEL_14;
LABEL_11:
  v21 = FigSignalErrorAt();
  v22 = 0;
LABEL_29:
  CFRelease(v18);
LABEL_30:
  if (v22)
  {
    v31 = (const void *)v22[6];
    if (v31)
    {
      CFRelease(v31);
      v22[6] = 0;
    }
    v32 = (const void *)v22[10];
    if (v32)
    {
      CFRelease(v32);
      v22[10] = 0;
    }
    CMPhotoDecompressionSessionFreeAsyncRequest(v22);
  }
  return v21;
}

uint64_t CMPhotoDecompressionPluginCreate(const void *a1, const void *a2, const void *a3, const void *a4, int a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, CFDictionaryRef theDict, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  int IsTileDecoderAvailable;
  BOOL v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t (**v28)();
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  uint64_t v35;
  char v37;

  IsTileDecoderAvailable = CMPhotoIsTileDecoderAvailable(a5);
  if (a11)
    v21 = a13 == 0;
  else
    v21 = 1;
  if (v21)
  {
    v24 = 0;
    v25 = 4294950306;
    goto LABEL_40;
  }
  v22 = IsTileDecoderAvailable;
  v35 = a7;
  v37 = 0;
  if (theDict)
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseVTDecompression"), &v37);
  v23 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040B0B98C6FuLL);
  v24 = v23;
  if (!v23)
  {
    v25 = 4294950305;
    goto LABEL_40;
  }
  v25 = 4294950298;
  if (a5 <= 1752589104)
  {
    if (a5 == 1635135537)
    {
LABEL_15:
      if (v37)
        v27 = 1;
      else
        v27 = v22 == 0;
      v28 = CMPhotoDecompressionPluginClassVideoToolbox;
      if (!v27)
        v28 = CMPhotoDecompressionPluginClassVideoToolbox_Tile;
      goto LABEL_23;
    }
    v26 = 1635148593;
LABEL_14:
    if (a5 != v26)
      goto LABEL_40;
    goto LABEL_15;
  }
  if (a5 == 1936484717)
  {
    v28 = CMPhotoDecompressionPluginClassSlim;
  }
  else
  {
    if (a5 != 1785750887)
    {
      v26 = 1752589105;
      goto LABEL_14;
    }
    v28 = CMPhotoDecompressionPluginClassJPEG;
  }
LABEL_23:
  v23[5] = v28;
  v23[6] = a11;
  if (a1)
    v29 = CFRetain(a1);
  else
    v29 = 0;
  *v24 = v29;
  if (a2)
    v30 = CFRetain(a2);
  else
    v30 = 0;
  v24[1] = v30;
  if (a3)
    v31 = CFRetain(a3);
  else
    v31 = 0;
  v24[2] = v31;
  if (a4)
    v32 = CFRetain(a4);
  else
    v32 = 0;
  v24[3] = v32;
  if (a6)
    v33 = CFRetain(a6);
  else
    v33 = 0;
  v24[4] = v33;
  v24[7] = a12;
  *((_DWORD *)v24 + 18) = a5;
  v24[10] = a9;
  v24[11] = a8;
  v25 = (*(uint64_t (**)(_QWORD *, uint64_t, CFDictionaryRef, uint64_t))v24[5])(v24, v35, theDict, a11);
  if (!(_DWORD)v25)
  {
    *a13 = v24;
    v24 = 0;
  }
LABEL_40:
  CMPhotoDecompressionPluginDispose((CFTypeRef *)v24);
  return v25;
}

void CMPhotoDecompressionPluginDispose(CFTypeRef *a1)
{
  void (**v2)(CFTypeRef *);
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;

  if (a1)
  {
    v2 = (void (**)(CFTypeRef *))a1[5];
    if (v2)
      v2[1](a1);
    if (*a1)
      CFRelease(*a1);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    v5 = a1[3];
    if (v5)
      CFRelease(v5);
    v6 = a1[4];
    if (v6)
      CFRelease(v6);
    free(a1);
  }
}

void VTTileDecompressionPluginClass_dispose(uint64_t a1)
{
  unsigned __int8 *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  int v6;
  const void *v7;
  const void *v8;

  if (a1)
  {
    v2 = *(unsigned __int8 **)(a1 + 64);
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 4);
      if (v3)
      {
        dispatch_barrier_sync_f(v3, 0, (dispatch_function_t)_dispatch_empty);
        v4 = *((_QWORD *)v2 + 4);
        if (v4)
          dispatch_release(v4);
      }
      v5 = (const void *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        if (!*(_QWORD *)(a1 + 80) && ((v6 = *(_DWORD *)(a1 + 72), v6 == 1635135537) || v6 == 1902212657))
        {
          VTTileDecompressionSessionInvalidate();
        }
        else
        {
          VTSessionSetProperty(v5, (CFStringRef)*MEMORY[0x1E0CED320], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
          CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v2 + 1), *v2);
        }
        v7 = (const void *)*((_QWORD *)v2 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((_QWORD *)v2 + 1) = 0;
        }
      }
      v8 = (const void *)*((_QWORD *)v2 + 2);
      if (v8)
        CFRelease(v8);
      free(v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
}

uint64_t CMPhotoCodecSessionPoolRecycleSession(uint64_t a1, CFTypeRef cf, int a3)
{
  uint64_t v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t v8;
  int v9;
  CFTypeID v11;
  CFTypeID v12;

  v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    v5 = defaultPool;
    if (!defaultPool)
      return 4294950305;
  }
  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == VTCompressionSessionGetTypeID() || (v7 = CFGetTypeID(cf), v7 == VTTileCompressionSessionGetTypeID()))
  {
    v8 = v5;
    v9 = 0;
    return CMPhotoCodecSessionPool_RecycleSession(v8, v9, cf, a3);
  }
  v11 = CFGetTypeID(cf);
  if (v11 == VTDecompressionSessionGetTypeID() || (v12 = CFGetTypeID(cf), v12 == VTTileDecompressionSessionGetTypeID()))
  {
    v8 = v5;
    v9 = 1;
    return CMPhotoCodecSessionPool_RecycleSession(v8, v9, cf, a3);
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCodecSessionPoolGetDefault()
{
  pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
  return defaultPool;
}

uint64_t CMPhotoCodecSessionPool_RecycleSession(uint64_t a1, int a2, const void *a3, int a4)
{
  CFAllocatorRef *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *Value;
  _QWORD *v12;
  int64_t v13;
  CFIndex FirstIndexOfValue;
  CFIndex Count;
  CFIndex v16;
  unint64_t v17;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v20;
  const __CFArray *v21;
  const void *v22;
  CFIndex v23;
  uint64_t v24;
  const void *v25;
  uint64_t IdleSessionSlots;
  CFMutableArrayRef v28;
  uint64_t context;
  CFArrayRef theArray;
  CFRange v31;
  CFRange v32;

  if (a2)
    v7 = (CFAllocatorRef *)(a1 + 88);
  else
    v7 = (CFAllocatorRef *)(a1 + 48);
  v8 = 40;
  if (!a2)
    v8 = 32;
  v9 = *(_QWORD *)(a1 + v8);
  v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if ((_DWORD)v10)
    return v10;
  v28 = 0;
  Value = CFDictionaryGetValue(v7[3], a3);
  if (!Value)
  {
    IdleSessionSlots = FigSignalErrorAt();
    goto LABEL_34;
  }
  v12 = Value;
  v13 = *(_QWORD *)(a1 + 152);
  Value[1] = 0;
  Value[2] = 0;
  *((_BYTE *)Value + 48) = 1;
  Value[7] = dispatch_time(0, v13);
  if (a4 || *((_BYTE *)v12 + 49))
  {
    CodecSessionPool_DestroyGatewayForSession((uint64_t)v7, a3);
    v31.length = CFArrayGetCount(v7[1]);
    v31.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7[1], v31, a3);
    CFArrayRemoveValueAtIndex(v7[1], FirstIndexOfValue);
    goto LABEL_11;
  }
  IdleSessionSlots = CodecSessionPool_GetIdleSessionSlots(v7, (const void *)v12[4], 1, &v28);
  if ((_DWORD)IdleSessionSlots)
  {
LABEL_34:
    v24 = IdleSessionSlots;
    goto LABEL_28;
  }
  CFArrayAppendValue(v28, a3);
LABEL_11:
  Count = CFArrayGetCount(v7[4]);
  v16 = CFArrayGetCount(v7[1]);
  if (Count >= 1)
  {
    v17 = v16;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7[4], i);
      v20 = (const __CFArray *)CFDictionaryGetValue(v7[2], *(const void **)ValueAtIndex);
      if (v20)
      {
        v21 = v20;
        if (CFArrayGetCount(v20) > 0)
        {
          v25 = CFArrayGetValueAtIndex(v21, 0);
          CFDictionaryGetValue(v7[3], v25);
          goto LABEL_26;
        }
      }
    }
    if (v17 >= v9)
    {
      context = 0;
      theArray = 0;
      CFDictionaryApplyFunction(v7[2], (CFDictionaryApplierFunction)CodecSessionPool_PurgeIdleSessionFromLargestGroupApplier, &context);
      if (theArray)
      {
        if (context >= 1)
        {
          v22 = CFArrayGetValueAtIndex(theArray, 0);
          CodecSessionPool_DestroyGatewayForSession((uint64_t)v7, v22);
          v32.length = CFArrayGetCount(v7[1]);
          v32.location = 0;
          v23 = CFArrayGetFirstIndexOfValue(v7[1], v32, v22);
          CFArrayRemoveValueAtIndex(v7[1], v23);
        }
      }
    }
    ValueAtIndex = CFArrayGetValueAtIndex(v7[4], 0);
LABEL_26:
    dispatch_semaphore_signal(*((dispatch_semaphore_t *)ValueAtIndex + 1));
    CodecSessionPool_DequeueWaitingClient((uint64_t)v7, ValueAtIndex);
    goto LABEL_27;
  }
  *(_QWORD *)(a1 + 160) = dispatch_time(0, 0);
  if (*(_QWORD *)(a1 + 176))
  {
    objc_msgSend(*(id *)(a1 + 176), "takeAssertionUntilTime:forContext:", dispatch_time(0, *(_QWORD *)(a1 + 152) + 5000000000), a1);
    objc_msgSend(*(id *)(a1 + 176), "registerBackgroundNotificationHandlerForContext:handler:", a1, *(_QWORD *)(a1 + 184));
  }
  if (!*(_BYTE *)(a1 + 128))
  {
LABEL_27:
    v24 = 0;
    goto LABEL_28;
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 136));
  v24 = 0;
  *(_BYTE *)(a1 + 128) = 0;
LABEL_28:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return v24;
}

uint64_t CodecSessionPool_GetIdleSessionSlots(CFAllocatorRef *a1, const void *a2, int a3, CFMutableArrayRef *a4)
{
  __CFArray *Value;
  CFMutableArrayRef v9;
  CFMutableArrayRef Mutable;
  uint64_t result;

  Value = (__CFArray *)CFDictionaryGetValue(a1[2], a2);
  v9 = Value;
  if (!a3 || Value)
    goto LABEL_5;
  Mutable = CFArrayCreateMutable(*a1, 0, 0);
  if (Mutable)
  {
    v9 = Mutable;
    CFDictionarySetValue(a1[2], a2, Mutable);
    CFRelease(v9);
LABEL_5:
    result = 0;
    *a4 = v9;
    return result;
  }
  return 4294950305;
}

uint64_t VTTileDecompressionPluginClass_create(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  int v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  CFDictionaryRef v17;
  CFDictionaryRef v18;
  uint64_t v19;
  uint64_t DecompressionSession;
  uint64_t v21;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int16 v31;
  char DecodeHighSpeedDefault;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
  v31 = 0;
  v30 = 0;
  v8 = 4294950306;
  if (!a1 || !a2 || !a4)
    return v8;
  if (*(_DWORD *)(a1 + 72) == 1936484717)
    return 4294950298;
  v9 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10E2040A0F51DDDuLL);
  if (!v9)
    return 4294950305;
  v10 = v9;
  v9[41] = 0;
  v11 = v9 + 41;
  v9[24] = 1;
  *((_QWORD *)v9 + 2) = CFRetain(a2);
  if (a3
    && (CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("SyncDecode"), v10 + 25),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("AllowPackedBuffers"), v11),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("ForceHighSpeedDecode"), &DecodeHighSpeedDefault),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("PreferSoftwareCodec"), (_BYTE *)&v31 + 1),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("RequireHardwareCodec"), &v31),
        CMPhotoCFDictionaryGetInt32IfPresent(a3, CFSTR("ThreadPriority"), &v30),
        HIBYTE(v31)))
  {
    v12 = 0;
    LOBYTE(v31) = 0;
  }
  else
  {
    v12 = 1;
    if ((_BYTE)v31)
    {
      v13 = (void **)MEMORY[0x1E0CEDCC0];
      goto LABEL_12;
    }
  }
  v13 = (void **)MEMORY[0x1E0CEDCA8];
LABEL_12:
  v14 = (void *)*MEMORY[0x1E0CEDCA0];
  keys[0] = *v13;
  keys[1] = v14;
  v15 = (void *)*MEMORY[0x1E0C9AE50];
  if (v12)
    v16 = (void *)*MEMORY[0x1E0C9AE50];
  else
    v16 = (void *)*MEMORY[0x1E0C9AE40];
  values[0] = v16;
  values[1] = v15;
  v17 = CFDictionaryCreate(*(CFAllocatorRef *)a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v17)
  {
    *v10 = 1;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v28 = (unint64_t)v10;
    VTTileDecompressionPluginClass_dispose((uint64_t)&v24);
    return 4294950305;
  }
  v18 = v17;
  v19 = *(_QWORD *)(a1 + 80);
  if (!v19)
  {
    v23 = *(_DWORD *)(a1 + 72);
    if (v23 == 1635135537 || v23 == 1902212657)
    {
      DecompressionSession = VTTileDecompressionSessionCreate();
      if ((_DWORD)DecompressionSession)
        goto LABEL_26;
LABEL_18:
      if (v10[24] || v10[25] || (v21 = FigDispatchQueueCreateWithPriority(), (*((_QWORD *)v10 + 4) = v21) != 0))
      {
        v10[40] = 1;
        *(_QWORD *)(a1 + 64) = v10;
        CFRelease(v18);
        return 0;
      }
      v8 = 4294950305;
      goto LABEL_27;
    }
  }
  DecompressionSession = CMPhotoCodecSessionPoolCreateDecompressionSession(*(CFTypeRef *)(a1 + 24), 1u, v19, (const opaqueCMFormatDescription *)a2, v17, (uint64_t)VTTileDecompressionPluginClass_VideoToolbox_callback, a1, (_QWORD *)v10 + 1, 0);
  if (!(_DWORD)DecompressionSession)
    goto LABEL_18;
LABEL_26:
  v8 = DecompressionSession;
LABEL_27:
  CFRelease(v18);
  *v10 = 1;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v28 = (unint64_t)v10;
  VTTileDecompressionPluginClass_dispose((uint64_t)&v24);
  if ((v8 | 2) == 0x44E)
    return 4294951826;
  return v8;
}

uint64_t CMPhotoDecompressionContainerParseOptions(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  const void *Value;
  uint64_t result;
  _BYTE *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFTypeID v15;
  int BooleanIfPresent;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  _BYTE *v20;
  _DWORD *v21;
  _DWORD *v22;
  __CVBuffer *v23;
  __CVBuffer *v24;
  CFTypeID v25;
  OSType PixelFormatType;
  unint64_t *v27;
  char v28;
  uint64_t v29;
  int IntIfPresent;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  signed int v36;
  int v37;
  int v38;
  BOOL v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  _BYTE *v43;
  _DWORD *v44;
  _DWORD *v45;
  __int16 v47;
  char v48;

  if (!a5)
    return 4294950306;
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 1) = CMPhotoGetDecodeHighSpeedDefault();
  *(_BYTE *)(a5 + 2) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  *(_BYTE *)(a5 + 64) = 0;
  *(_BYTE *)(a5 + 71) = 0;
  *(_DWORD *)(a5 + 66) = 0;
  *(_DWORD *)(a5 + 4) = 875704422;
  *(_WORD *)(a5 + 104) = 1;
  v43 = (_BYTE *)(a5 + 104);
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = a3;
  *(_QWORD *)(a5 + 48) = a4;
  *(_WORD *)(a5 + 20) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_DWORD *)(a5 + 72) = 0;
  *(_BYTE *)(a5 + 120) = 0;
  *(_BYTE *)(a5 + 70) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 124) = 0;
  *(_BYTE *)(a5 + 132) = 0;
  *(_WORD *)(a5 + 133) = 1;
  *(_BYTE *)(a5 + 135) = 0;
  *(_BYTE *)(a5 + 76) = 0;
  *(_DWORD *)(a5 + 136) = 0x800000;
  *(_WORD *)(a5 + 140) = 0;
  *(_DWORD *)(a5 + 12) = 0;
  *(_BYTE *)(a5 + 65) = 0;
  if (!a2)
    return 0;
  if (*(_BYTE *)(a1 + 27) || *(_BYTE *)(a1 + 25))
  {
    if (*(_BYTE *)(a1 + 26))
    {
      v9 = 2;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_10;
      v9 = 1;
    }
    *(_DWORD *)(a5 + 72) = v9;
  }
LABEL_10:
  v44 = (_DWORD *)(a5 + 72);
  Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    v48 = 0;
    result = CMPhotoDecompressionContainerValidateSourceCropRect(Value, a3, a4, &v48, (int64x2_t *)(a5 + 24));
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a5 + 21) = v48 == 0;
    *(_BYTE *)(a5 + 133) = 0;
  }
  v45 = (_DWORD *)(a5 + 128);
  v12 = (_BYTE *)(a5 + 141);
  v13 = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (!v13)
  {
    BooleanIfPresent = 0;
LABEL_20:
    v20 = (_BYTE *)(a5 + 65);
    v22 = (_DWORD *)(a5 + 4);
    v21 = (_DWORD *)(a5 + 16);
    goto LABEL_22;
  }
  v14 = v13;
  v15 = CFGetTypeID(v13);
  if (v15 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  CMPhotoCFDictionaryGetIntIfPresent(v14, CFSTR("DecodeToHDROutputMode"), v45);
  if (*v45 >= 8u)
    return FigSignalErrorAt();
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDROutputModePreferMeteor"), (_BYTE *)(a5 + 132));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDRAddFlexGTC"), (_BYTE *)(a5 + 133));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDRForceFlexGTCCreation"), (_BYTE *)(a5 + 134));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDRApplyFlexGTC"), (_BYTE *)(a5 + 135));
  CMPhotoCFDictionaryGetFloatIfPresent(v14, CFSTR("DecodeToHDROutputHeadRoom"), (void *)(a5 + 136));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDROutputDoNotDecodeBaselayer"), (_BYTE *)(a5 + 140));
  v12 = (_BYTE *)(a5 + 141);
  BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v14, CFSTR("DecodeToHDROutputModeUseBaselayerOrientation"), (_BYTE *)(a5 + 141));
  v17 = (const void *)FigCFDictionaryGetValue();
  if (!v17)
    goto LABEL_20;
  v18 = v17;
  v19 = CFGetTypeID(v17);
  v20 = (_BYTE *)(a5 + 65);
  v22 = (_DWORD *)(a5 + 4);
  v21 = (_DWORD *)(a5 + 16);
  if (v19 != CFDictionaryGetTypeID())
    return 4294950306;
  *(_QWORD *)(a5 + 144) = v18;
LABEL_22:
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("DryRun"), (_BYTE *)a5);
  *(_BYTE *)(a5 + 8) = CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("OutputPixelFormat"), v22);
  v23 = (__CVBuffer *)FigCFDictionaryGetValue();
  if (v23)
  {
    v24 = v23;
    v25 = CFGetTypeID(v23);
    if (v25 != CVPixelBufferGetTypeID())
      return FigSignalErrorAt();
    *(_QWORD *)(a5 + 88) = v24;
    PixelFormatType = CVPixelBufferGetPixelFormatType(v24);
    v27 = (unint64_t *)(a5 + 56);
    if (*(_BYTE *)(a5 + 8))
    {
      if (PixelFormatType != *v22)
        return FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(a5 + 4) = PixelFormatType;
      *(_BYTE *)(a5 + 8) = 1;
    }
  }
  else
  {
    *(_QWORD *)(a5 + 88) = 0;
    v27 = (unint64_t *)(a5 + 56);
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ApplyTransform"), (_BYTE *)(a5 + 71));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ScaleAuxImageToParentImage"), v20);
  if (CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("MaxPixelSize"), v27))
  {
    if (!*v27)
      return FigSignalErrorAt();
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseMaxPixelSizeForShortEdge"), (_BYTE *)(a5 + 69));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("AllowMaxPixelSizeUpscale"), (_BYTE *)(a5 + 64));
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("DisableMSRForTransfer"), (_BYTE *)(a5 + 66));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("DisableGPUForTransfer"), (_BYTE *)(a5 + 68));
  v47 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("RestrictedDecoding"), (_BYTE *)&v47 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("RestrictedTranscoding"), &v47);
  v28 = v47 | HIBYTE(v47);
  *(_BYTE *)(a5 + 105) = v47 | HIBYTE(v47);
  if (!*(_DWORD *)(a1 + 536) && v28 && !VTAreVideoDecodersRunningInProcess())
    return FigSignalErrorAt();
  CMPhotoCFDictionaryGetCFValueIfPresent(a2, CFSTR("AllowExperimentalCodecs"), (void **)(a5 + 112));
  *(_BYTE *)(a5 + 105) &= CMPhotoRestrictedDecodingDisabled() == 0;
  if (!CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("TiledDownsampling"), v21))
    goto LABEL_40;
  if (*v21 <= 4u)
  {
    if (!*v27)
      *v21 = 0;
    *(_BYTE *)(a5 + 20) = 1;
LABEL_40:
    IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("AccelerationMode"), v44);
    v31 = *v44;
    if (IntIfPresent && (v31 >= 3 || (_DWORD)v31 == 2 && *(_BYTE *)(a5 + 105)))
      return FigSignalErrorAt();
    *(_DWORD *)(a5 + 72) = CMPhotoGetEncodeAccelerationModeOverride(v31, v29);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ForceHighSpeedDecode"), (_BYTE *)(a5 + 1));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("HighPriority"), (_BYTE *)(a5 + 2));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("PreferLowMemory"), (_BYTE *)(a5 + 3));
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("BackCGImageWithIOSurface"), v43))
    {
      if (*v43 && *(_BYTE *)(a5 + 105))
        return FigSignalErrorAt();
    }
    else if (*(_BYTE *)(a5 + 105))
    {
      *v43 = 0;
    }
    CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("ThreadPriority"), (void *)(a5 + 124));
    v32 = *v27;
    if (*v27)
    {
      v33 = *(_QWORD *)(a5 + 40);
      v34 = *(_QWORD *)(a5 + 48);
      if (v33 <= v34)
        v35 = *(_QWORD *)(a5 + 48);
      else
        v35 = *(_QWORD *)(a5 + 40);
      if (*(_BYTE *)(a5 + 69))
      {
        if (v33 >= v34)
          v33 = *(_QWORD *)(a5 + 48);
        v36 = vcvtps_s32_f32((float)((float)v35 / (float)v33) * (float)v32);
        v37 = v36 + 1;
        v39 = v36 < 1;
        v38 = ((_BYTE)v36 - 1) & 1;
        if (v39)
          v38 = -v38;
        v32 = v37 - v38;
        *v27 = (int)v32;
        if (!(_DWORD)v32)
          goto LABEL_62;
      }
      if (v35 == v32)
      {
        *v27 = 0;
      }
      else
      {
LABEL_62:
        if (v32)
          v39 = (*v21 - 2) > 2;
        else
          v39 = 1;
        if (!v39)
          *(_BYTE *)(a5 + 70) = 1;
      }
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseEvenScalingMode"), (_BYTE *)(a5 + 70));
    *(_BYTE *)(a5 + 70) = CMPhotoGetEvenScalingModeDefault(0, *(unsigned __int8 *)(a5 + 70));
    *(_BYTE *)(a5 + 76) = CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("ReservedRequestID"), (_QWORD *)(a5 + 80));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseVTDecompression"), (_BYTE *)(a5 + 120));
    v40 = (const void *)FigCFDictionaryGetValue();
    v41 = v40;
    if (v40)
    {
      v42 = CFGetTypeID(v40);
      if (v42 != CGColorSpaceGetTypeID())
        return FigSignalErrorAt();
    }
    *(_QWORD *)(a5 + 96) = v41;
    if (*(_BYTE *)(a5 + 105))
      *v44 = 1;
    if (*v45 == 6 && !BooleanIfPresent)
      *v12 = 1;
    if (*v20 && (*v27 || *(_BYTE *)(a5 + 21)))
      return FigSignalErrorAt();
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionaryGetBooleanIfPresent(CFDictionaryRef theDict, const void *a2, _BYTE *a3)
{
  uint64_t result;
  CFTypeID v6;
  int valuePtr;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          v6 = CFGetTypeID(value);
          if (CFBooleanGetTypeID() == v6)
          {
            *a3 = CFBooleanGetValue((CFBooleanRef)value);
            return 1;
          }
          else if (CFNumberGetTypeID() == v6)
          {
            valuePtr = 0;
            result = CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
            if ((_DWORD)result)
              *a3 = valuePtr != 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetIntIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoGetDecodeHighSpeedDefault()
{
  if (CMPhotoGetDecodeHighSpeedDefault_onceToken != -1)
    dispatch_once(&CMPhotoGetDecodeHighSpeedDefault_onceToken, &__block_literal_global_17);
  return 1;
}

uint64_t CMPhotoIsTileDecoderAvailable(int a1)
{
  _QWORD block[4];
  int v3;

  switch(a1)
  {
    case 1635135537:
      if (CMPhotoIsTileDecoderAvailable_onceTokenAV1 != -1)
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenAV1, &__block_literal_global_40);
      return sTileDecodersAvailable_2;
    case 1752589105:
      if (CMPhotoIsTileDecoderAvailable_onceTokenHEVC != -1)
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenHEVC, &__block_literal_global_38);
      return sTileDecodersAvailable_1;
    case 1635148593:
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __CMPhotoIsTileDecoderAvailable_block_invoke;
      block[3] = &__block_descriptor_tmp_36;
      v3 = 1635148593;
      if (CMPhotoIsTileDecoderAvailable_onceTokenAVC != -1)
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenAVC, block);
      return sTileDecodersAvailable_0;
    default:
      return 0;
  }
}

uint64_t VTDecompressionPluginClass_getDecoderRestrictions(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t BytesPerPixelForPixelFormat;
  void *v8;
  void *v9;
  _BOOL4 IsPackedYUV;
  int v11;
  int v12;
  int32x2_t v13;
  signed int v14;
  int v15;
  const __CFDictionary *propertyValueOut;

  propertyValueOut = 0;
  result = 4294950306;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)a2 = 0x1000000040;
    if (*(_DWORD *)(a1 + 72) == 1752589105)
      v6 = 64;
    else
      v6 = 16;
    *(_DWORD *)(a2 + 48) = v6;
    *(_DWORD *)(a2 + 16) = 0x7FFFFFFF;
    *(_QWORD *)(a2 + 32) = 0x7FFFFFFF0003FFC0;
    *(_DWORD *)(a2 + 24) = 262080;
    *(_DWORD *)(a2 + 40) = 262080;
    *(_QWORD *)(a2 + 52) = 0x7FFFFFFF0003FFC0;
    *(_DWORD *)(a2 + 20) = v6;
    *(_DWORD *)(a2 + 28) = v6;
    *(_DWORD *)(a2 + 44) = v6;
    if (!VTSessionCopyProperty(*(VTSessionRef *)(v5 + 8), (CFStringRef)*MEMORY[0x1E0CED3B8], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut))
    {
      v14 = 64;
      v15 = 64;
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC10], &v14);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC00], &v15);
      if (CMPhotoDecompressionPluginCopyPixelBufferAttributes(a1))
      {
        BytesPerPixelForPixelFormat = 1;
        v8 = (void *)(a2 + 40);
        v9 = (void *)(a2 + 24);
      }
      else
      {
        v9 = (void *)(a2 + 24);
        if (CMPhotoPixelFormatIsPackedYUV(0))
          BytesPerPixelForPixelFormat = 1;
        else
          BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(0);
        v8 = (void *)(a2 + 40);
      }
      IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(0);
      v11 = v14;
      if (IsPackedYUV)
      {
        if (v14 <= (int)((3 * v15 / 4) & 0xFFFFFFFE))
          v11 = (3 * v15 / 4) & 0xFFFFFFFE;
      }
      else if (v15 / BytesPerPixelForPixelFormat >= v14)
      {
        v11 = v15 / BytesPerPixelForPixelFormat;
      }
      *(_DWORD *)a2 = v11;
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC08], (void *)(a2 + 4));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBD0], (void *)(a2 + 16));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBD8], v9);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBF0], (void *)(a2 + 20));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBF8], (void *)(a2 + 28));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBC8], (void *)(a2 + 32));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBB8], (void *)(a2 + 36));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBC0], v8);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBE0], (void *)(a2 + 48));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDBE8], (void *)(a2 + 44));
      v12 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 56) = v12;
      v13.i32[0] = *(_DWORD *)(a2 + 28);
      v13.i32[1] = *(_DWORD *)(a2 + 20);
      *(int32x2_t *)(a2 + 44) = vmin_s32(*(int32x2_t *)(a2 + 44), v13);
    }
    result = (uint64_t)propertyValueOut;
    if (propertyValueOut)
    {
      CFRelease(propertyValueOut);
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetInt32IfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTDecompressionPluginClass_copyPixelBufferAttributes(uint64_t a1, _DWORD *a2, __CFDictionary **a3)
{
  uint64_t v6;
  const __CFAllocator *v7;
  unsigned int InfoFromFormatDescription;
  BOOL v9;
  const __CFDictionary *v10;
  const void *v11;
  const __CFArray *Value;
  const __CFArray *ValueAtIndex;
  CFTypeID v14;
  CFIndex v15;
  __CFDictionary *v16;
  int v17;
  unsigned int v18;
  CFDictionaryRef PixelBufferAttributes;
  CFTypeID v20;
  __CFDictionary *MutableCopy;
  int v23;
  int valuePtr;
  const __CFDictionary *propertyValueOut;
  CVPixelBufferPoolRef pool;

  v6 = *(_QWORD *)(a1 + 64);
  propertyValueOut = 0;
  pool = 0;
  valuePtr = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  InfoFromFormatDescription = VTSessionCopyProperty(*(VTSessionRef *)(v6 + 8), (CFStringRef)*MEMORY[0x1E0CED2E0], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut);
  if (InfoFromFormatDescription)
    v9 = InfoFromFormatDescription == -12900;
  else
    v9 = 1;
  if (!v9)
    goto LABEL_27;
  v10 = propertyValueOut;
  if (!propertyValueOut)
  {
    if (!VTSessionCopyProperty(*(VTSessionRef *)(v6 + 8), (CFStringRef)*MEMORY[0x1E0CED360], v7, &pool))
    {
      PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(pool);
      if (PixelBufferAttributes)
      {
        v10 = (const __CFDictionary *)CFRetain(PixelBufferAttributes);
        propertyValueOut = v10;
        if (v10)
          goto LABEL_7;
        v16 = 0;
      }
      else
      {
        v16 = 0;
        propertyValueOut = 0;
      }
      v18 = -16994;
      goto LABEL_41;
    }
    v10 = propertyValueOut;
    if (propertyValueOut)
      goto LABEL_7;
    if (CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 16), 0, &valuePtr))
    {
      LOBYTE(v23) = 1;
      InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 16), 0, 0, 0, &v23, 0, 0, 0, 0, 0, 0, 0);
      if (InfoFromFormatDescription)
      {
LABEL_27:
        v18 = InfoFromFormatDescription;
        v16 = 0;
        goto LABEL_39;
      }
      v16 = 0;
      if ((_BYTE)v23)
        v17 = 875704422;
      else
        v17 = 875704438;
      valuePtr = v17;
      if (!a3)
      {
LABEL_37:
        v18 = 0;
        if (a2)
          *a2 = valuePtr;
        goto LABEL_39;
      }
    }
    else
    {
      v16 = 0;
      if (!a3)
        goto LABEL_37;
    }
LABEL_36:
    *a3 = v16;
    v16 = 0;
    goto LABEL_37;
  }
LABEL_7:
  v11 = (const void *)*MEMORY[0x1E0CA9040];
  Value = (const __CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA9040]);
  if (!Value)
    goto LABEL_52;
  ValueAtIndex = Value;
  v14 = CFGetTypeID(Value);
  if (v14 == CFArrayGetTypeID())
  {
    v23 = 0;
    if (CFArrayGetCount(ValueAtIndex) < 1)
      goto LABEL_52;
    if (CFArrayGetCount(ValueAtIndex) >= 1)
    {
      v15 = 0;
      while (!FigCFArrayGetInt32AtIndex()
           || !CMPhotoIsDecoderOutputPixelFormatAccepted(v23)
           || CMPhotoPixelFormatIsPackedYUV(v23) && !*(_BYTE *)(v6 + 41))
      {
        if (++v15 >= CFArrayGetCount(ValueAtIndex))
          goto LABEL_32;
      }
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, v15);
    }
  }
LABEL_32:
  v20 = CFGetTypeID(ValueAtIndex);
  if (v20 == CFNumberGetTypeID())
  {
    if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr))
    {
      MutableCopy = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)a1, 0, propertyValueOut);
      v16 = MutableCopy;
      if (MutableCopy)
      {
        CFDictionaryRemoveValue(MutableCopy, v11);
        CFDictionaryRemoveValue(v16, (const void *)*MEMORY[0x1E0CA8FD8]);
        CFDictionaryRemoveValue(v16, (const void *)*MEMORY[0x1E0CA90E0]);
        if (!a3)
          goto LABEL_37;
        goto LABEL_36;
      }
      goto LABEL_53;
    }
LABEL_52:
    v16 = 0;
LABEL_53:
    v18 = -16994;
    goto LABEL_39;
  }
  v16 = 0;
  v18 = -16995;
LABEL_39:
  if (propertyValueOut)
    CFRelease(propertyValueOut);
LABEL_41:
  if (pool)
    CFRelease(pool);
  if (v16)
    CFRelease(v16);
  if ((v18 | 2) == 0x44E)
    return 4294951826;
  else
    return v18;
}

BOOL CMPhotoPixelFormatIsPackedYUV(int a1)
{
  return a1 == 1882468912 || a1 == 1885745712;
}

uint64_t CMPhotoIsDecoderOutputPixelFormatAccepted(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1885745711)
  {
    if (a1 <= 2016687155)
    {
      if (a1 <= 1952854575)
      {
        if (a1 == 1885745712)
          return result;
        v3 = 1949577776;
        goto LABEL_30;
      }
      if (a1 != 1952854576 && a1 != 2016686640)
      {
        v3 = 2016686642;
        goto LABEL_30;
      }
    }
    else if (a1 > 2019963955)
    {
      if (a1 != 2019963956 && a1 != 2037741158)
      {
        v3 = 2037741171;
        goto LABEL_30;
      }
    }
    else if (a1 != 2016687156 && a1 != 2019963440)
    {
      v3 = 2019963442;
      goto LABEL_30;
    }
  }
  else
  {
    if (a1 > 875836533)
    {
      if (a1 <= 1278226735)
      {
        if (a1 == 875836534)
          return result;
        v3 = 1278226488;
      }
      else
      {
        if ((a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
          return result;
        v3 = 1882468912;
      }
LABEL_30:
      if (a1 != v3)
        return 0;
      return result;
    }
    if (a1 <= 875704933)
    {
      if (a1 == 875704422)
        return result;
      v3 = 875704438;
      goto LABEL_30;
    }
    if (a1 != 875704934 && a1 != 875704950)
    {
      v3 = 875836518;
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t CMPhotoGetEvenScalingModeDefault(uint64_t a1, uint64_t a2)
{
  if (CMPhotoGetEvenScalingModeDefault_onceToken != -1)
    dispatch_once(&CMPhotoGetEvenScalingModeDefault_onceToken, &__block_literal_global_2_0);
  return a2;
}

uint64_t CMPhotoCFDictionaryGetCFValueIfPresent(CFDictionaryRef theDict, const void *a2, void **a3)
{
  uint64_t result;
  CFTypeID v6;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
      if ((_DWORD)result)
      {
        v6 = CFGetTypeID(value);
        result = 1;
        if (a3)
        {
          if (v6)
            *a3 = value;
        }
      }
    }
  }
  return result;
}

uint64_t VTTileDecompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char a8)
{
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;

  v13 = *(_BYTE **)(a1 + 64);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if ((a8 & 2) != 0)
    v14 = -17104;
  else
    v14 = a7;
  if (v14)
  {
    *v13 = 1;
    if ((v14 | 2) == 0x44E)
      v15 = 4294951826;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 48))(a1, v15, a5, *(_QWORD *)(a1 + 56), a2);
}

void _ioSurfaceDeallocator_deallocateDirect(int a1, IOSurfaceRef buffer)
{
  IOSurfaceUnlock(buffer, 1u, 0);
  if (buffer)
    CFRelease(buffer);
}

OpaqueCMBlockBuffer *CMPhotoCreateSampleBufferWrappingIOSurface(const __CFAllocator *a1, __IOSurface *a2, unint64_t a3, size_t a4, char a5, IOSurfaceLockOptions a6)
{
  int v6;
  OpaqueCMBlockBuffer *result;
  OpaqueCMBlockBuffer *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  CMAttachmentBearerRef target;
  size_t sampleSizeArray;

  v6 = a3;
  target = 0;
  sampleSizeArray = a4;
  result = CMPhotoCreateBlockBufferWrappingIOSurface(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    v10 = result;
    if (CMSampleBufferCreate(a1, result, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, (CMSampleBufferRef *)&target))
    {
      if (target)
      {
        CFRelease(target);
        target = 0;
      }
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v12 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("IOSurface"), a2);
        CMPhotoCFDictionarySetInt(v12, CFSTR("IOSurfaceDataOffset"), v6);
        CMPhotoCFDictionarySetInt(v12, CFSTR("IOSurfaceDataSize"), sampleSizeArray);
        CMSetAttachments(target, v12, 1u);
        CMPropagateAttachments(target, v10);
        CFRelease(v12);
      }
    }
    CFRelease(v10);
    return (OpaqueCMBlockBuffer *)target;
  }
  return result;
}

void _attachSizeHintIfNeeded(uint64_t a1, uint64_t a2, void *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  CMBlockBufferRef DataBuffer;

  if (*(_QWORD *)(a1 + 160))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CMPhotoCFDictionarySetFloat(Mutable, CFSTR("ByteBudgetHint_Quality"), *(float *)(a1 + 168));
      CMPhotoCFDictionarySetSize(v7, CFSTR("ByteBudgetHint_Size"), a2);
      CMSetAttachment(a3, CFSTR("ByteBudgetHint"), v7, 1u);
      DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a3);
      CMPropagateAttachments(a3, DataBuffer);
      CFRelease(v7);
    }
  }
}

uint64_t CMPhotoCreatePixelBufferCLAPDictionaryFromRect(const __CFAllocator *a1, __CFDictionary **a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;

  if (!a2)
    return 0;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v16 = Mutable;
    v17 = a5 + a7 * 0.5 - a3 * 0.5;
    v18 = CMPhotoCFDictionarySetFloat(Mutable, (const void *)*MEMORY[0x1E0CA8D48], v17);
    if ((_DWORD)v18
      || (v19 = a6 + a8 * 0.5 - a4 * 0.5,
          v18 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E0CA8D58], v19),
          (_DWORD)v18)
      || (v20 = a7, v18 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E0CA8D60], v20), (_DWORD)v18))
    {
      v22 = v18;
    }
    else
    {
      v21 = a8;
      v22 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E0CA8D40], v21);
      if (!(_DWORD)v22)
      {
        *a2 = v16;
        return v22;
      }
    }
    CFRelease(v16);
    return v22;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  float valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoPixelBufferFillOutsideCropRect(__CVBuffer *a1, int a2, _QWORD *a3)
{
  _QWORD *v3;
  __CVBuffer *v5;
  signed int PixelFormatType;
  unsigned __int16 v7;
  int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  const __CFDictionary *Attributes;
  const __CFDictionary *Value;
  const __CFArray *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const __CFDictionary *ValueAtIndex;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  unint64_t v25;
  size_t BytesPerRowOfPlane;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v31;
  const __CFDictionary *v32;
  size_t PlaneCount;
  const __CFArray *v34;
  _QWORD *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  __CVBuffer *pixelBuffer;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *BaseAddressOfPlane;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  if (!a1)
    return FigSignalErrorAt();
  v3 = a3;
  if (!a3[2] || !a3[3])
    return 0;
  v5 = a1;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1734505011)
  {
    if (PixelFormatType <= 1647392368)
    {
      if (PixelFormatType > 1111970368)
      {
        if (PixelFormatType > 1278226735)
        {
          if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
          {
            v8 = 1380401729;
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        if (PixelFormatType == 1111970369)
          goto LABEL_76;
        v8 = 1278226488;
      }
      else
      {
        if (PixelFormatType <= 875704949)
        {
          if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
          {
            v8 = 875704934;
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518)
          goto LABEL_76;
        v8 = 875836534;
      }
    }
    else if (PixelFormatType <= 1651519797)
    {
      if (PixelFormatType > 1650943795)
      {
        if (PixelFormatType == 1650943796 || PixelFormatType == 1650946096)
          goto LABEL_76;
        v10 = 28722;
      }
      else
      {
        if (PixelFormatType == 1647392369 || PixelFormatType == 1647719528)
          goto LABEL_76;
        v10 = 25400;
      }
      v8 = v10 | 0x62670000;
    }
    else if (PixelFormatType <= 1651926375)
    {
      if (PixelFormatType == 1651519798 || PixelFormatType == 1651847472)
        goto LABEL_76;
      v8 = 1651925816;
    }
    else
    {
      if (PixelFormatType <= 1734501175)
      {
        if (PixelFormatType != 1651926376)
        {
          v8 = 1652056888;
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (PixelFormatType == 1734501176)
        goto LABEL_76;
      v8 = 1734504496;
    }
  }
  else if (PixelFormatType > 1937126451)
  {
    if (PixelFormatType <= 1953903667)
    {
      if (PixelFormatType <= 1952855091)
      {
        if (PixelFormatType != 1937126452 && PixelFormatType != 1952854576)
        {
          v8 = 1952854578;
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (PixelFormatType == 1952855092 || PixelFormatType == 1953903152)
        goto LABEL_76;
      v8 = 1953903154;
    }
    else if (PixelFormatType <= 2016687155)
    {
      if (PixelFormatType == 1953903668 || PixelFormatType == 2016686640)
        goto LABEL_76;
      v8 = 2016686642;
    }
    else
    {
      if (PixelFormatType > 2019963441)
      {
        if (PixelFormatType == 2019963442)
          goto LABEL_76;
        v9 = 13364;
      }
      else
      {
        if (PixelFormatType == 2016687156)
          goto LABEL_76;
        v9 = 12848;
      }
      v8 = v9 | 0x78660000;
    }
  }
  else if (PixelFormatType <= 1919379251)
  {
    if (PixelFormatType <= 1735553071)
    {
      if (PixelFormatType != 1734505012 && PixelFormatType != 1735549492)
      {
        v8 = 1735549752;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (PixelFormatType == 1735553072 || PixelFormatType == 1751527984)
      goto LABEL_76;
    v8 = 1919378232;
  }
  else
  {
    if (PixelFormatType <= 1936077361)
    {
      if (PixelFormatType != 1919379252 && PixelFormatType != 1919381552)
      {
        v7 = 12848;
        goto LABEL_46;
      }
LABEL_76:
      Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes();
      if (!Attributes)
        return 4294950305;
      Value = (const __CFDictionary *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E0CA9038]);
      if (!Value)
      {
        Value = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
        if (!Value)
          return 4294950305;
      }
      v13 = (const __CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA91B0]);
      if (a2)
      {
        v14 = CVPixelBufferLockBaseAddress(v5, 0);
        if ((_DWORD)v14)
          return v14;
      }
      if (CVPixelBufferGetPlaneCount(v5) < 2)
      {
        PlaneCount = 1;
      }
      else
      {
        PlaneCount = CVPixelBufferGetPlaneCount(v5);
        if (!PlaneCount)
        {
          v15 = 0;
          if (!a2)
            return v15;
          goto LABEL_103;
        }
      }
      v31 = a2;
      pixelBuffer = v5;
      v16 = 0;
      v38 = (const void *)*MEMORY[0x1E0CA91B8];
      v37 = (const void *)*MEMORY[0x1E0CA91A0];
      v35 = v3;
      v36 = (const void *)*MEMORY[0x1E0CA90E8];
      v32 = Value;
      v34 = v13;
      while (1)
      {
        ValueAtIndex = Value;
        if (v13)
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16);
        v50 = 1;
        v51 = 1;
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v38, &v51);
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v37, &v50);
        v19 = v50;
        v18 = v51;
        v20 = *v3;
        v21 = (*v3 + v19 + v3[2] - 1) / v19;
        v40 = *v3 / v50;
        v41 = v3[1];
        v42 = (v41 + v18 + v3[3] - 1) / v18;
        v43 = v41 / v51;
        v22 = v42 - v41 / v51;
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v16);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v16);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v16);
        v25 = HeightOfPlane;
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v16);
        v49 = 8;
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v36, &v49);
        v27 = v49 >> 3;
        v49 >>= 3;
        if (v21 - v40 < WidthOfPlane)
        {
          if (v19 <= v20)
          {
            v45 = 0;
            v46 = v43;
            v47 = v40;
            v48 = v22;
            v28 = _fillPixelBufferRectHorizontally((uint64_t *)&v45, 0, WidthOfPlane, v25, v27, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if ((_DWORD)v28)
              break;
          }
          if (WidthOfPlane > v21)
          {
            v45 = v21;
            v46 = v43;
            v47 = WidthOfPlane - v21;
            v48 = v22;
            v28 = _fillPixelBufferRectHorizontally((uint64_t *)&v45, 1, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if ((_DWORD)v28)
              break;
          }
        }
        v29 = v22 >= v25;
        v13 = v34;
        v3 = v35;
        if (!v29)
        {
          if (v18 <= v41)
          {
            v45 = 0;
            v46 = 0;
            v47 = WidthOfPlane;
            v48 = v43;
            v28 = _fillPixelBufferRectVertically(&v45, 0, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if ((_DWORD)v28)
              break;
          }
          if (v25 > v42)
          {
            v45 = 0;
            v46 = v42;
            v47 = WidthOfPlane;
            v48 = v25 - v42;
            v28 = _fillPixelBufferRectVertically(&v45, 1, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if ((_DWORD)v28)
              break;
          }
        }
        ++v16;
        Value = v32;
        if (PlaneCount == v16)
        {
          v15 = 0;
          goto LABEL_102;
        }
      }
      v15 = v28;
LABEL_102:
      v5 = pixelBuffer;
      if (!v31)
        return v15;
LABEL_103:
      CVPixelBufferUnlockBaseAddress(v5, 0);
      return v15;
    }
    if (PixelFormatType <= 1937125935)
    {
      if (PixelFormatType != 1936077362)
      {
        v7 = 13364;
LABEL_46:
        v8 = v7 | 0x73660000;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (PixelFormatType == 1937125936)
      goto LABEL_76;
    v8 = 1937125938;
  }
LABEL_75:
  if (PixelFormatType == v8)
    goto LABEL_76;
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateMemorySurface(unint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __IOSurface **a7)
{
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  __IOSurface *v15;
  __IOSurface *v16;
  const __CFString *v17;
  uint64_t v18;

  if (a1 >> 31 || a4 && a1 > a5)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v14 = Mutable;
  CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF10], 0);
  CMPhotoCFDictionarySetInt32(v14, (const void *)*MEMORY[0x1E0CBC070], a2);
  CMPhotoCFDictionarySetSize(v14, *MEMORY[0x1E0CBBEE0], a1);
  if (_getMarkSurfacesNonPurgeable_onceToken != -1)
    dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_25);
  if (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable == 1)
    CMPhotoCFDictionarySetBoolean(v14, (const void *)*MEMORY[0x1E0CBC050], 1);
  CMPhotoCFDictionarySetInt(v14, (const void *)*MEMORY[0x1E0CBC020], a3);
  if (a4)
    FigCFDictionarySetInt64();
  if (a6)
    CMPhotoCFDictionarySetInt64(v14, (const void *)*MEMORY[0x1E0CBBEE8], a6);
  v15 = IOSurfaceCreate(v14);
  if (v15)
  {
    v16 = v15;
    if (a4)
      v17 = CFSTR("CMPhoto Wrapped Memory Surface");
    else
      v17 = CFSTR("CMPhoto Memory Surface");
    IOSurfaceSetValue(v15, (CFStringRef)*MEMORY[0x1E0CBC048], v17);
    if (_getShouldSetSurfaceOwnership())
      IOSurfaceSetOwnership();
    if (a7)
    {
      v18 = 0;
      *a7 = v16;
    }
    else
    {
      CFRelease(v16);
      v18 = 0;
    }
  }
  else
  {
    v18 = 4294950305;
  }
  CFRelease(v14);
  return v18;
}

uint64_t _createPixelBuffer(const void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, size_t a7, size_t a8, unint64_t *a9, int *a10, const __CFDictionary *a11, _QWORD *a12)
{
  _DWORD *v18;
  uint64_t IsSubsampled;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFDictionary *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t MutableCopy;
  uint64_t v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  CVPixelBufferRef v48;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_OWORD *)a9 == 0 && *((_OWORD *)a9 + 1) == 0)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = a7;
    a9[3] = a8;
  }
  v45 = 0;
  CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(a11, &v46);
  if ((_QWORD)v46 || (_QWORD)v47)
  {
    IsSubsampled = FigSignalErrorAt();
    goto LABEL_50;
  }
  IsSubsampled = CMPhotoPixelFormatIsSubsampled(a4, (_BYTE *)&v45 + 1, &v45, 0, 0);
  if ((_DWORD)IsSubsampled)
  {
LABEL_50:
    v32 = IsSubsampled;
    goto LABEL_51;
  }
  v20 = 1;
  if ((_BYTE)v45)
    v20 = 2;
  v21 = *((_QWORD *)&v46 + 1) + a5;
  v22 = *((_QWORD *)&v47 + 1) + a6;
  if (a10)
  {
    if (HIBYTE(v45))
      v23 = 2;
    else
      v23 = 1;
    v24 = *a10;
    v26 = a10[2];
    v25 = a10[3];
    if (!v26)
      v26 = *a10;
    v27 = v21 + ~((v21 - 1) % v26) + v26;
    v28 = v27 + v23 + ~((v27 - 1) & (v23 - 1));
    if (v28 <= a10[7])
      v21 = a10[7];
    else
      v21 = v28;
    if (!v25)
      v25 = a10[1];
    v29 = v22 + v25 + ~((v22 - 1) % v25);
    v30 = v29 + v20 + ~((v29 - 1) & (v20 - 1));
    if (v30 <= a10[5])
      v22 = a10[5];
    else
      v22 = v30;
  }
  else
  {
    v24 = 0;
  }
  if (!*a9 && !a9[1])
  {
    v36 = a9[2];
    v37 = a9[3];
    v43 = *MEMORY[0x1E0C9AE00];
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    v34 = (const __CFDictionary *)MutableCopy;
    if (MutableCopy)
    {
      v39 = CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E0CA8FB8], v21 + ~((v36 - 1) % v21));
      if (!(_DWORD)v39)
      {
        v39 = CMPhotoCFDictionarySetSize(v34, *MEMORY[0x1E0CA8FA0], v22 + ~((v37 - 1) % v22));
        if (!(_DWORD)v39)
        {
          v40 = a9[2];
          v41 = a9[3];
          if (a3)
            v42 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(v43, a4, v40, v41, v21, v22, v24, (uint64_t)v34, &v48);
          else
            v42 = CMPhotoSurfacePoolCreatePixelBuffer(a1, a4, v40, v41, 1, v21, v22, 0, v24, v34, &v48);
          v32 = v42;
          v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          if (!(_DWORD)v42)
            goto LABEL_33;
          goto LABEL_34;
        }
      }
      v32 = v39;
    }
    else
    {
      v32 = 4294950305;
    }
    v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    goto LABEL_34;
  }
  if (a3)
    v31 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a4, a7, a8, v21, v22, v24, (uint64_t)a11, &v48);
  else
    v31 = CMPhotoSurfacePoolCreatePixelBuffer(a1, a4, a7, a8, 1, v21, v22, 0, v24, a11, &v48);
  v32 = v31;
  v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if ((_DWORD)v31)
  {
LABEL_51:
    v34 = 0;
    goto LABEL_34;
  }
  v33 = CMPhotoSetPixelBufferCLAP(v48, *a9, a9[1], a9[2], a9[3], 0, 1);
  v34 = 0;
  if (!(_DWORD)v33)
  {
LABEL_33:
    v32 = 0;
    *a12 = v48;
    v48 = 0;
    goto LABEL_34;
  }
  v32 = v33;
LABEL_34:
  if (*v18 == 1)
    kdebug_trace();
  if (v34)
    CFRelease(v34);
  if (v48)
    CFRelease(v48);
  return v32;
}

uint64_t CMPhotoCFDictionaryGetSizeIfPresent(const __CFDictionary *a1, const void *a2, _QWORD *a3)
{
  int Int64IfPresent;
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(a1, a2, &v6);
  result = 0;
  if (a3)
  {
    if (Int64IfPresent)
    {
      *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetInt64IfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _createImageSurfacePropertiesAndName(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, int a8, unsigned __int8 a9, __CFDictionary **a10, CFTypeRef *a11)
{
  __CFDictionary **v12;
  CFTypeRef *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  const __CFString *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned __int16 v41;
  uint64_t IsSubsampled;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __CFDictionary *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFMutableDictionaryRef v58;
  CFMutableDictionaryRef v59;
  unint64_t v60;
  const __CFAllocator *v61;
  const __CFAllocator *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  const __CFAllocator *v70;
  __CFDictionary *v71;
  __CFDictionary *v72;
  CFMutableArrayRef v73;
  __CFArray *v74;
  CFMutableDictionaryRef v75;
  CFMutableDictionaryRef v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  CFMutableDictionaryRef v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t BytesPerPixelForPixelFormat;
  unint64_t SurfaceElementWidthForPixelFormat;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const __CFAllocator *v99;
  __CFDictionary *Mutable;
  unint64_t v101;
  CFMutableArrayRef v102;
  __CFArray *v103;
  CFMutableDictionaryRef v104;
  CFMutableDictionaryRef v105;
  BOOL v106;
  uint64_t v107;
  __CFDictionary **v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const __CFAllocator *v116;
  __CFDictionary *v117;
  __CFDictionary *v118;
  CFMutableArrayRef v119;
  CFMutableDictionaryRef v120;
  CFMutableDictionaryRef v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  CFMutableDictionaryRef v128;
  unint64_t v129;
  unint64_t v130;
  __CFDictionary *v131;
  int v132;
  __CFDictionary *theDict;
  CFMutableDictionaryRef theDicta;
  __CFDictionary *theDictb;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  __CFDictionary **v150;
  __CFDictionary **v151;
  unint64_t v152;
  CFMutableArrayRef theArrayb;
  int theArrayc;
  uint64_t v158;
  __CFArray *v159;
  CFMutableArrayRef v160;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  CFAllocatorRef allocatorb;
  unint64_t allocatorc;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v169;
  unint64_t v171;

  if (!(a2 >> 31) && !(a3 >> 31))
  {
    v12 = a10;
    v13 = a11;
    if (a10)
      v14 = a11 == 0;
    else
      v14 = 1;
    if (v14)
      return 4294950306;
    if (a4 | a5)
      v15 = a5;
    else
      v15 = 2;
    if (a4 | a5)
      v16 = a4;
    else
      v16 = 2;
    v17 = 4294950306;
    if (!v16 || !v15)
      return v17;
    v19 = a1;
    if (a6)
      v20 = a6;
    else
      v20 = 16;
    v17 = 4294950301;
    if ((int)a1 <= 1734501175)
    {
      if ((int)a1 <= 1278555700)
      {
        if ((int)a1 > 875704949)
        {
          if ((int)a1 <= 1111970368)
          {
            if ((_DWORD)a1 == 875704950 || (_DWORD)a1 == 875836518)
              goto LABEL_166;
            v23 = 875836534;
            goto LABEL_165;
          }
          if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
            || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
          {
            goto LABEL_232;
          }
          v22 = 1111970369;
        }
        else
        {
          if ((int)a1 <= 843264055)
          {
            if (a1 > 0x20 || ((1 << a1) & 0x101010000) == 0)
            {
              if ((_DWORD)a1 != 825306677)
              {
                v21 = 825437747;
                goto LABEL_231;
              }
LABEL_232:
              v150 = a10;
              v89 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
              v91 = v90;
              BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v19);
              SurfaceElementWidthForPixelFormat = CMPhotoGetSurfaceElementWidthForPixelFormat(v19);
              v94 = CMPhotoGetSurfaceElementWidthForPixelFormat(v19);
              allocatorb = (CFAllocatorRef)v89;
              v95 = CMPhotoAlignValue(v89 * BytesPerPixelForPixelFormat, v20);
              v96 = v95;
              v97 = v95 * v91;
              if (a7)
                v97 = CMPhotoAlignValue(v95 * v91, a7);
              if (v97 >> 31
                || (v98 = v96 * SurfaceElementWidthForPixelFormat, (v96 * SurfaceElementWidthForPixelFormat) >> 31))
              {
                v17 = FigSignalErrorAt();
                v35 = 0;
                v36 = CFSTR("CMPhoto Luma");
              }
              else
              {
                v99 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v35 = Mutable;
                if (Mutable)
                {
                  v101 = SurfaceElementWidthForPixelFormat * BytesPerPixelForPixelFormat * v94;
                  CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF10], 0);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC1E0], a2);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC008], a3);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBF00], v101);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBF08], v98);
                  CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E0CBC070], v19);
                  if ((unint64_t)allocatorb > a2)
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC120], (char *)allocatorb - a2);
                  if (v91 > a3)
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC118], v91 - a3);
                  if (SurfaceElementWidthForPixelFormat >= 2)
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBFC0], SurfaceElementWidthForPixelFormat);
                  if (v94 >= 2)
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBFB8], v94);
                  v102 = CFArrayCreateMutable(v99, 1, MEMORY[0x1E0C9B378]);
                  if (v102)
                  {
                    v103 = v102;
                    v104 = CFDictionaryCreateMutable(v99, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (v104)
                    {
                      v105 = v104;
                      CMPhotoCFDictionarySetSize(v104, *MEMORY[0x1E0CBC178], a2);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC140], a3);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC090], v101);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC160], 0);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC098], v98);
                      if ((unint64_t)allocatorb > a2)
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC120], (char *)allocatorb - a2);
                      v107 = v91 - a3;
                      v106 = v91 > a3;
                      v12 = a10;
                      if (v106)
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC118], v107);
                      if (SurfaceElementWidthForPixelFormat >= 2)
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC110], SurfaceElementWidthForPixelFormat);
                      if (v94 >= 2)
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC108], v94);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E0CBC168], v97);
                      CFArrayAppendValue(v103, v105);
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E0CBC158], v103);
                      CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBEE0], v97);
                      CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E0CBC020], a8);
                      CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E0CBC188], a9);
                      v17 = 0;
                    }
                    else
                    {
                      v17 = 4294950305;
                      v105 = v35;
                      v35 = 0;
                      v12 = a10;
                    }
                    CFRelease(v105);
                    CFRelease(v103);
                    v36 = CFSTR("CMPhoto Luma");
                    v13 = a11;
                    goto LABEL_258;
                  }
                  CFRelease(v35);
                  v35 = 0;
                }
                v36 = CFSTR("CMPhoto Luma");
                v17 = 4294950305;
              }
              v13 = a11;
              goto LABEL_312;
            }
LABEL_132:
            v171 = 0;
            IsSubsampled = CMPhotoPixelFormatIsSubsampled(a1, 0, 0, 0, (uint64_t *)&v171);
            if (!(_DWORD)IsSubsampled)
            {
              v43 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
              v45 = v44;
              v165 = v43;
              v158 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
              v46 = CMPhotoAlignValue(v43 * v158, v20);
              if (!(v46 >> 31))
              {
                v47 = v46;
                v48 = v46 * v45;
                if (a7)
                  v48 = CMPhotoAlignValue(v46 * v45, a7);
                if (v48 >> 31 || (v49 = a3, v169 = v45, v50 = v171 * v48, (v171 * v48) >> 31))
                {
                  v17 = FigSignalErrorAt();
                  v35 = 0;
                }
                else
                {
                  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  v51 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v35 = v51;
                  if (v51)
                  {
                    CMPhotoCFDictionarySetInt(v51, (const void *)*MEMORY[0x1E0CBBF10], 0);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC1E0], a2);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC008], v49);
                    CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E0CBC070], v19);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBEE0], v50);
                    CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E0CBC020], a8);
                    CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E0CBC188], a9);
                    if (v171 == 3)
                    {
                      v152 = v47;
                      theDict = v35;
                      theArrayb = CFArrayCreateMutable(allocator, 3, MEMORY[0x1E0C9B378]);
                      if (theArrayb)
                      {
                        if (!v171)
                        {
LABEL_156:
                          v35 = theDict;
                          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CBC158], theArrayb);
                          CFRelease(theArrayb);
                          v17 = 0;
                          v13 = a11;
                          v12 = a10;
                          goto LABEL_160;
                        }
                        v52 = 0;
                        v53 = 0;
                        v147 = *MEMORY[0x1E0CBC178];
                        v144 = *MEMORY[0x1E0CBC140];
                        v54 = *MEMORY[0x1E0CBC090];
                        v55 = *MEMORY[0x1E0CBC160];
                        v56 = *MEMORY[0x1E0CBC098];
                        v141 = *MEMORY[0x1E0CBC120];
                        v137 = *MEMORY[0x1E0CBC118];
                        v57 = *MEMORY[0x1E0CBC168];
                        while (1)
                        {
                          v58 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                          if (!v58)
                            break;
                          v59 = v58;
                          CMPhotoCFDictionarySetSize(v58, v147, a2);
                          CMPhotoCFDictionarySetSize(v59, v144, v49);
                          CMPhotoCFDictionarySetSize(v59, v54, v158);
                          CMPhotoCFDictionarySetSize(v59, v55, v52);
                          CMPhotoCFDictionarySetSize(v59, v56, v152);
                          if (v165 > a2)
                            CMPhotoCFDictionarySetSize(v59, v141, v165 - a2);
                          if (v169 > v49)
                            CMPhotoCFDictionarySetSize(v59, v137, v169 - v49);
                          CMPhotoCFDictionarySetSize(v59, v57, v48);
                          CFArrayAppendValue(theArrayb, v59);
                          CFRelease(v59);
                          ++v53;
                          v52 += v48;
                          if (v171 <= v53)
                            goto LABEL_156;
                        }
                        CFRelease(theArrayb);
                      }
                      v17 = 4294950305;
                      v13 = a11;
                      v12 = a10;
                      v35 = theDict;
                    }
                    else
                    {
                      if (v171 == 1)
                      {
                        CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBF08], v47);
                        CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBF00], v158);
                        CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E0CBC058], 0);
                        if (v43 > a2)
                          CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC120], v43 - a2);
                        if (v169 > v49)
                          CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC118], v169 - v49);
                        v17 = 0;
                        goto LABEL_146;
                      }
                      v17 = FigSignalErrorAt();
                      v12 = a10;
                    }
                    CFRelease(v35);
LABEL_159:
                    v35 = 0;
                    goto LABEL_160;
                  }
                  v17 = 4294950305;
                }
LABEL_146:
                v12 = a10;
LABEL_160:
                v36 = CFSTR("CMPhoto RGB");
LABEL_258:
                *v12 = v35;
                *v13 = CFRetain(v36);
                return v17;
              }
              IsSubsampled = FigSignalErrorAt();
            }
            v17 = IsSubsampled;
            goto LABEL_159;
          }
          if ((int)a1 > 875704421)
          {
            if ((_DWORD)a1 == 875704422 || (_DWORD)a1 == 875704438)
              goto LABEL_166;
            v23 = 875704934;
            goto LABEL_165;
          }
          if ((_DWORD)a1 == 843264056)
            goto LABEL_132;
          v22 = 843264310;
        }
LABEL_131:
        if ((_DWORD)a1 != v22)
          return v17;
        goto LABEL_132;
      }
      if ((int)a1 <= 1650943795)
      {
        if ((int)a1 <= 1380410944)
        {
          if ((int)a1 <= 1279340853)
          {
            if ((_DWORD)a1 == 1278555701)
              goto LABEL_132;
            v22 = 1279340600;
            goto LABEL_131;
          }
          if ((_DWORD)a1 == 1279340854)
            goto LABEL_132;
          v41 = 16961;
        }
        else
        {
          if ((int)a1 > 1647589489)
          {
            if ((_DWORD)a1 == 1647589490)
              goto LABEL_132;
            if ((_DWORD)a1 == 1647719528)
              goto LABEL_232;
            v21 = 1650942776;
            goto LABEL_231;
          }
          if ((_DWORD)a1 == 1380410945)
            goto LABEL_132;
          v41 = 26689;
        }
        v22 = v41 | 0x52470000;
        goto LABEL_131;
      }
      if ((int)a1 > 1651925815)
      {
        if ((int)a1 <= 1652056887)
        {
          if ((_DWORD)a1 == 1651925816)
            goto LABEL_232;
          v21 = 1651926376;
        }
        else
        {
          if ((_DWORD)a1 == 1652056888 || (_DWORD)a1 == 1717855600)
            goto LABEL_232;
          v21 = 1717856627;
        }
        goto LABEL_231;
      }
      if ((int)a1 > 1651519797)
      {
        if ((_DWORD)a1 == 1651519798)
          goto LABEL_232;
        v21 = 1651847472;
        goto LABEL_231;
      }
      if ((_DWORD)a1 == 1650943796)
        goto LABEL_232;
      v37 = 1650946098;
      goto LABEL_107;
    }
    if ((int)a1 <= 1936077361)
    {
      if ((int)a1 <= 1815491697)
      {
        if ((int)a1 <= 1751410031)
        {
          if ((int)a1 > 1735549491)
          {
            if ((_DWORD)a1 == 1735549492)
              goto LABEL_232;
            v21 = 1735549752;
          }
          else
          {
            if ((_DWORD)a1 == 1734501176)
              goto LABEL_232;
            v21 = 1734505012;
          }
        }
        else
        {
          if ((int)a1 > 1751527983)
          {
            if ((_DWORD)a1 == 1751527984)
              goto LABEL_166;
            if ((_DWORD)a1 == 1815162994)
              goto LABEL_132;
            v22 = 1815361650;
            goto LABEL_131;
          }
          if ((_DWORD)a1 == 1751410032)
            goto LABEL_232;
          v21 = 1751411059;
        }
LABEL_231:
        if ((_DWORD)a1 == v21)
          goto LABEL_232;
        return v17;
      }
      if ((int)a1 <= 1919378231)
      {
        if ((int)a1 <= 1885745711)
        {
          if ((_DWORD)a1 == 1815491698)
            goto LABEL_132;
          v37 = 1882468912;
LABEL_107:
          if ((_DWORD)a1 != v37)
            return v17;
          goto LABEL_108;
        }
        if ((_DWORD)a1 != 1885745712)
        {
          if ((_DWORD)a1 == 1919365990)
            goto LABEL_132;
          v22 = 1919365992;
          goto LABEL_131;
        }
LABEL_108:
        v39 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
        v35 = 0;
        v36 = CFSTR("CMPhoto Packed");
        v17 = 4294950306;
        if (v19 > 1885745711)
        {
          if (v19 != 1919381552)
          {
            v40 = 1885745712;
            goto LABEL_262;
          }
          v167 = v38;
          v109 = a10;
          v110 = a3;
          v114 = 5 * ((v39 + 3) >> 2);
          v115 = 320;
        }
        else
        {
          if (v19 != 1650946098)
          {
            v40 = 1882468912;
LABEL_262:
            if (v19 != v40)
              goto LABEL_258;
            v109 = a10;
            v149 = (a2 + 1) >> 1;
            v110 = a3;
            v167 = v38;
            v160 = (CFMutableArrayRef)((a3 + 1) >> 1);
            allocatorc = (v38 + 1) >> 1;
            v111 = CMPhotoAlignValue((2 * (((v39 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL, v20);
            v112 = 1;
            v113 = v39;
            v146 = v111;
            goto LABEL_268;
          }
          v167 = v38;
          v109 = a10;
          v110 = a3;
          v114 = (unint64_t)((double)v39 * 1.5);
          v115 = 96;
        }
        v111 = CMPhotoAlignValue(v114, v115);
        if (v111 != CMPhotoAlignValue(v111, v20))
          goto LABEL_323;
        v112 = 0;
        v146 = 0;
        v149 = 0;
        v160 = 0;
        allocatorc = 0;
        v113 = 0;
LABEL_268:
        if (!(v111 >> 31))
        {
          v116 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v117 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v117)
          {
            v118 = v117;
            CMPhotoCFDictionarySetInt(v117, (const void *)*MEMORY[0x1E0CBBF10], 0);
            CMPhotoCFDictionarySetSize(v118, *MEMORY[0x1E0CBC1E0], a2);
            CMPhotoCFDictionarySetSize(v118, *MEMORY[0x1E0CBC008], v110);
            theDictb = v118;
            CMPhotoCFDictionarySetInt32(v118, (const void *)*MEMORY[0x1E0CBC070], v19);
            if (!v112)
            {
              v130 = v111 * v110;
              if (a7)
                v130 = CMPhotoAlignValue(v111 * v110, a7);
              CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E0CBBF08], v111);
              if (v39 > a2)
                CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E0CBC120], v39 - a2);
              if (v167 <= v110)
              {
                v119 = 0;
                v121 = 0;
                v132 = a8;
                v131 = theDictb;
LABEL_296:
                CMPhotoCFDictionarySetSize(v131, *MEMORY[0x1E0CBBEE0], v130);
                CMPhotoCFDictionarySetInt(v131, (const void *)*MEMORY[0x1E0CBC020], v132);
                CMPhotoCFDictionarySetBoolean(v131, (const void *)*MEMORY[0x1E0CBC188], a9);
                v17 = 0;
                if (!v121)
                {
LABEL_298:
                  if (v119)
                    CFRelease(v119);
                  v36 = CFSTR("CMPhoto Packed");
                  v13 = a11;
                  v12 = v109;
                  v35 = theDictb;
                  goto LABEL_258;
                }
LABEL_297:
                CFRelease(v121);
                goto LABEL_298;
              }
              v131 = theDictb;
              CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E0CBC118], v167 - v110);
              v119 = 0;
              v121 = 0;
LABEL_294:
              v132 = a8;
              goto LABEL_296;
            }
            v143 = v113;
            v119 = CFArrayCreateMutable(v116, 2, MEMORY[0x1E0C9B378]);
            v151 = v109;
            if (v119)
            {
              v120 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v121 = v120;
              if (v120)
              {
                v140 = *MEMORY[0x1E0CBC178];
                CMPhotoCFDictionarySetSize(v120, *MEMORY[0x1E0CBC178], a2);
                v122 = *MEMORY[0x1E0CBC140];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC140], v110);
                v123 = *MEMORY[0x1E0CBC160];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC160], 0);
                v124 = *MEMORY[0x1E0CBC098];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC098], v111);
                if (v39 > a2)
                  CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC120], v39 - a2);
                v125 = v167;
                if (v167 > v110)
                {
                  CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC118], v167 - v110);
                  v125 = v167;
                }
                v126 = v111 * v125;
                if (a7)
                  v126 = CMPhotoAlignValue(v111 * v125, a7);
                if (v126 >> 31)
                {
LABEL_324:
                  v17 = FigSignalErrorAt();
                  goto LABEL_331;
                }
                v127 = *MEMORY[0x1E0CBC168];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC168], v126);
                CFArrayAppendValue(v119, v121);
                CFRelease(v121);
                v128 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v121 = v128;
                if (v128)
                {
                  CMPhotoCFDictionarySetSize(v128, v140, v149);
                  CMPhotoCFDictionarySetSize(v121, v122, v160);
                  CMPhotoCFDictionarySetSize(v121, v123, v126);
                  CMPhotoCFDictionarySetSize(v121, v124, v146);
                  if (v143 >> 1 > v149)
                    CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC120], (v143 >> 1) - v149);
                  v109 = v151;
                  if (allocatorc > (unint64_t)v160)
                    CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E0CBC118], allocatorc - (_QWORD)v160);
                  v129 = v146 * allocatorc;
                  if (!((v146 * allocatorc) >> 31))
                  {
                    CMPhotoCFDictionarySetSize(v121, v127, v129);
                    v130 = v126 + v129;
                    if (!(v130 >> 31))
                    {
                      CFArrayAppendValue(v119, v121);
                      v131 = theDictb;
                      CFDictionarySetValue(theDictb, (const void *)*MEMORY[0x1E0CBC158], v119);
                      goto LABEL_294;
                    }
                  }
                  goto LABEL_324;
                }
              }
            }
            else
            {
              v121 = 0;
            }
            v17 = 4294950305;
LABEL_331:
            CFRelease(theDictb);
            theDictb = 0;
            v109 = v151;
            if (!v121)
              goto LABEL_298;
            goto LABEL_297;
          }
          v36 = CFSTR("CMPhoto Packed");
          v17 = 4294950305;
LABEL_327:
          v12 = v109;
          v35 = 0;
          goto LABEL_258;
        }
LABEL_323:
        v17 = FigSignalErrorAt();
        v36 = CFSTR("CMPhoto Packed");
        goto LABEL_327;
      }
      if ((int)a1 <= 1919381551)
      {
        if ((_DWORD)a1 == 1919378232)
          goto LABEL_232;
        v21 = 1919379252;
        goto LABEL_231;
      }
      if ((_DWORD)a1 == 1919381552)
        goto LABEL_108;
      if ((_DWORD)a1 == 1932996149)
        goto LABEL_232;
      v25 = 12848;
LABEL_99:
      v23 = v25 | 0x73660000;
      goto LABEL_165;
    }
    if ((int)a1 <= 1953903153)
    {
      if ((int)a1 <= 1937126451)
      {
        if ((int)a1 > 1937125935)
        {
          if ((_DWORD)a1 == 1937125936)
            goto LABEL_166;
          v23 = 1937125938;
          goto LABEL_165;
        }
        if ((_DWORD)a1 == 1936077362)
          goto LABEL_166;
        v25 = 13364;
        goto LABEL_99;
      }
      if ((int)a1 <= 1952854577)
      {
        if ((_DWORD)a1 == 1937126452)
          goto LABEL_166;
        v23 = 1952854576;
        goto LABEL_165;
      }
      if ((_DWORD)a1 == 1952854578 || (_DWORD)a1 == 1952855092)
        goto LABEL_166;
      v24 = 12848;
    }
    else
    {
      if ((int)a1 > 2019963439)
      {
        if ((int)a1 > 2019963955)
        {
          if ((_DWORD)a1 != 2019963956)
          {
            if ((_DWORD)a1 != 2037741158 && (_DWORD)a1 != 2037741171)
              return v17;
            v150 = a10;
            v27 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
            v29 = v28;
            v30 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
            v31 = CMPhotoAlignValue(v27 * v30, v20);
            if (v31 >> 31)
              goto LABEL_325;
            v32 = v31;
            v33 = v31 * v29;
            if (a7)
              v33 = CMPhotoAlignValue(v31 * v29, a7);
            if (v33 >> 31)
            {
LABEL_325:
              v17 = FigSignalErrorAt();
              v35 = 0;
              v36 = CFSTR("CMPhoto YUV");
            }
            else
            {
              v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v35 = v34;
              if (v34)
              {
                CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E0CBBF10], 0);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC1E0], a2);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC008], a3);
                CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E0CBC070], v19);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBF08], v32);
                if (v27 > a2)
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC120], v27 - a2);
                if (v29 > a3)
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBC118], v29 - a3);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E0CBBEE0], v33);
                CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E0CBC020], a8);
                CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E0CBC188], a9);
                v17 = 0;
                v36 = CFSTR("CMPhoto YUV");
                v12 = a10;
                goto LABEL_258;
              }
              v36 = CFSTR("CMPhoto YUV");
              v17 = 4294950305;
            }
LABEL_312:
            v12 = v150;
            goto LABEL_258;
          }
          goto LABEL_166;
        }
        if ((_DWORD)a1 == 2019963440)
          goto LABEL_166;
        v23 = 2019963442;
LABEL_165:
        if ((_DWORD)a1 != v23)
          return v17;
LABEL_166:
        v60 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
        v62 = v61;
        v63 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
        v166 = CMPhotoAlignValue(v60 * v63, v20);
        if (v166 >> 31)
        {
          v17 = FigSignalErrorAt();
          v35 = 0;
          goto LABEL_228;
        }
        v35 = 0;
        v148 = v60;
        v64 = v60;
        v36 = CFSTR("CMPhoto Bi-planar");
        v17 = 4294950306;
        theArrayc = a8;
        allocatora = v62;
        if (v19 <= 1937126451)
        {
          if (v19 <= 1751527983)
          {
            if (v19 <= 875704949)
            {
              if (v19 != 875704422 && v19 != 875704438)
              {
                v65 = 875704934;
                goto LABEL_199;
              }
              goto LABEL_201;
            }
            if (v19 == 875704950)
              goto LABEL_200;
            if (v19 != 875836518)
            {
              v66 = 875836534;
              goto LABEL_204;
            }
            goto LABEL_205;
          }
          if (v19 <= 1936077875)
          {
            if (v19 != 1751527984 && v19 != 1936077360)
            {
              v65 = 1936077362;
              goto LABEL_199;
            }
            goto LABEL_201;
          }
          if (v19 == 1936077876)
          {
LABEL_205:
            v64 = 2 * v148;
            v67 = a2;
            goto LABEL_206;
          }
          if (v19 == 1937125936)
            goto LABEL_201;
          v65 = 1937125938;
        }
        else
        {
          if (v19 > 1953903667)
          {
            if (v19 > 2016687155)
            {
              if (v19 <= 2019963441)
              {
                if (v19 != 2016687156)
                {
                  if (v19 != 2019963440)
                    goto LABEL_258;
                  goto LABEL_201;
                }
                goto LABEL_205;
              }
              if (v19 != 2019963442)
              {
                v66 = 2019963956;
LABEL_204:
                if (v19 != v66)
                  goto LABEL_258;
                goto LABEL_205;
              }
LABEL_200:
              v67 = (a2 + 1) >> 1;
LABEL_206:
              v139 = v67;
              v68 = a3;
              v69 = (unint64_t)v62;
LABEL_207:
              v145 = v64;
              v142 = CMPhotoAlignValue(v64 * v63, v20);
              v70 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v71 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v71)
              {
                v72 = v71;
                CMPhotoCFDictionarySetInt(v71, (const void *)*MEMORY[0x1E0CBBF10], 0);
                CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E0CBC1E0], a2);
                CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E0CBC008], a3);
                CMPhotoCFDictionarySetInt32(v72, (const void *)*MEMORY[0x1E0CBC070], v19);
                v73 = CFArrayCreateMutable(v70, 2, MEMORY[0x1E0C9B378]);
                if (v73)
                {
                  v74 = v73;
                  v75 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v75)
                  {
                    v76 = v75;
                    theDicta = (CFMutableDictionaryRef)v68;
                    v136 = v69;
                    v159 = v74;
                    v77 = *MEMORY[0x1E0CBC178];
                    CMPhotoCFDictionarySetSize(v75, *MEMORY[0x1E0CBC178], a2);
                    v78 = *MEMORY[0x1E0CBC140];
                    v79 = a3;
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC140], a3);
                    v80 = *MEMORY[0x1E0CBC090];
                    v138 = v63;
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC090], v63);
                    v81 = *MEMORY[0x1E0CBC160];
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC160], 0);
                    v82 = *MEMORY[0x1E0CBC098];
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC098], v166);
                    if (v148 > a2)
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC120], v148 - a2);
                    if ((unint64_t)allocatora > v79)
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC118], (char *)allocatora - v79);
                    v83 = v166 * (_QWORD)allocatora;
                    if (a7)
                      v83 = CMPhotoAlignValue(v166 * (_QWORD)allocatora, a7);
                    if (v83 >> 31)
                    {
                      v13 = a11;
                      v12 = a10;
                    }
                    else
                    {
                      v84 = *MEMORY[0x1E0CBC168];
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC168], v83);
                      CFArrayAppendValue(v159, v76);
                      CFRelease(v76);
                      v85 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (!v85)
                      {
                        v35 = 0;
                        v17 = 4294950305;
                        v13 = a11;
                        v12 = a10;
                        v74 = v159;
                        goto LABEL_227;
                      }
                      v76 = v85;
                      CMPhotoCFDictionarySetSize(v85, v77, v139);
                      CMPhotoCFDictionarySetSize(v76, v78, theDicta);
                      CMPhotoCFDictionarySetSize(v76, v80, 2 * v138);
                      CMPhotoCFDictionarySetSize(v76, v81, v83);
                      CMPhotoCFDictionarySetSize(v76, v82, v142);
                      if (v145 >> 1 > v139)
                        CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC120], (v145 >> 1) - v139);
                      if (v136 > (unint64_t)theDicta)
                        CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E0CBC118], v136 - (_QWORD)theDicta);
                      v86 = v142 * v136;
                      v13 = a11;
                      if (a7)
                        v86 = CMPhotoAlignValue(v86, a7);
                      if (!(v86 >> 31))
                      {
                        CMPhotoCFDictionarySetSize(v76, v84, v86);
                        v87 = v86 + v83;
                        if (!(v87 >> 31))
                        {
                          v74 = v159;
                          CFArrayAppendValue(v159, v76);
                          CFDictionarySetValue(v72, (const void *)*MEMORY[0x1E0CBC158], v159);
                          CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E0CBBEE0], v87);
                          CMPhotoCFDictionarySetInt(v72, (const void *)*MEMORY[0x1E0CBC020], theArrayc);
                          CMPhotoCFDictionarySetBoolean(v72, (const void *)*MEMORY[0x1E0CBC188], a9);
                          v17 = 0;
                          v35 = v72;
                          v72 = v76;
                          v12 = a10;
LABEL_227:
                          CFRelease(v72);
                          CFRelease(v74);
LABEL_228:
                          v36 = CFSTR("CMPhoto Bi-planar");
                          goto LABEL_258;
                        }
                      }
                      v12 = a10;
                    }
                    v74 = v159;
                    v17 = FigSignalErrorAt();
                    CFRelease(v72);
                    v35 = 0;
                    v72 = v76;
                    goto LABEL_227;
                  }
                  v35 = 0;
                  v17 = 4294950305;
                  goto LABEL_227;
                }
                CFRelease(v72);
              }
              v35 = 0;
              v36 = CFSTR("CMPhoto Bi-planar");
              v17 = 4294950305;
              goto LABEL_258;
            }
            if (v19 != 1953903668)
            {
              if (v19 != 2016686640)
              {
                v65 = 2016686642;
                goto LABEL_199;
              }
LABEL_201:
              v139 = (a2 + 1) >> 1;
              v68 = (a3 + 1) >> 1;
              v69 = ((unint64_t)v62 + 1) >> 1;
              goto LABEL_207;
            }
            goto LABEL_205;
          }
          if (v19 <= 1952855091)
          {
            if (v19 != 1937126452)
            {
              if (v19 != 1952854576)
              {
                v65 = 1952854578;
                goto LABEL_199;
              }
              goto LABEL_201;
            }
            goto LABEL_205;
          }
          if (v19 == 1952855092)
            goto LABEL_205;
          if (v19 == 1953903152)
            goto LABEL_201;
          v65 = 1953903154;
        }
LABEL_199:
        if (v19 != v65)
          goto LABEL_258;
        goto LABEL_200;
      }
      if ((int)a1 > 2016686639)
      {
        if ((_DWORD)a1 == 2016686640 || (_DWORD)a1 == 2016686642)
          goto LABEL_166;
        v23 = 2016687156;
        goto LABEL_165;
      }
      if ((_DWORD)a1 == 1953903154)
        goto LABEL_166;
      v24 = 13364;
    }
    v23 = v24 | 0x74760000;
    goto LABEL_165;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionarySetInt64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  uint64_t valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoAlignValue(unint64_t a1, unint64_t a2)
{
  unint64_t v2;

  if (a1 % a2)
    v2 = a2 - a1 % a2;
  else
    v2 = 0;
  return v2 + a1;
}

uint64_t CMPhotoCFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  int valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetInt32(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  int valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v3;
  const void **v4;

  v3 = 4294950306;
  if (a1 && a2)
  {
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a3)
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(a1, a2, *v4);
    return 0;
  }
  return v3;
}

uint64_t _fillPixelBufferRectVertically(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;

  v7 = a1[3];
  if (!v7 || !a1[2])
    return 0;
  v11 = a1[1];
  if (a2)
  {
    if (v11)
    {
      v12 = v11 - 1;
      goto LABEL_7;
    }
  }
  else
  {
    v12 = v11 + v7;
    if (a4 != v12)
    {
LABEL_7:
      v13 = 0;
      v14 = *a1 * a5;
      v15 = (const void *)(a7 + v12 * a6 + v14);
      v16 = (char *)(a7 + v11 * a6 + v14);
      do
      {
        memcpy(v16, v15, a1[2] * a5);
        v16 += a6;
        ++v13;
      }
      while (v13 < a1[3]);
      return 0;
    }
  }
  return 4294950193;
}

uint64_t _fillPixelBufferRectHorizontally(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;

  v7 = a1[3];
  if (!v7)
    return 0;
  v8 = a1[2];
  if (!v8)
    return 0;
  v9 = *a1;
  if (a2)
  {
    if (v9)
    {
      v10 = (v9 - 1) * a5;
      v11 = 1;
      goto LABEL_8;
    }
  }
  else if (a3 != v9 + v8)
  {
    v10 = a5 + a5 * (v8 + v9) - 1;
    v11 = -1;
LABEL_8:
    v12 = a1[1];
    v13 = v12 + v7;
    if (v12 < v13)
    {
      v14 = a7 + v10;
      v15 = v11;
      v16 = (int)a5 * (uint64_t)v11;
      do
      {
        if (v8 * a5)
        {
          v17 = 0;
          v18 = (_BYTE *)(v14 + v12 * a6);
          do
          {
            v18[v16] = *v18;
            v18 += v15;
            ++v17;
            v8 = a1[2];
          }
          while (v17 < v8 * a5);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    return 0;
  }
  return 4294950193;
}

uint64_t CMPhotoGetSurfaceElementWidthForPixelFormat(int a1)
{
  if (a1 == 1647719528)
    return 2;
  else
    return 1;
}

CMBlockBufferRef CMPhotoCreateBlockBufferWrappingIOSurface(const __CFAllocator *a1, IOSurfaceRef buffer, unint64_t a3, size_t a4, char a5, IOSurfaceLockOptions a6)
{
  IOSurfaceRef v6;
  size_t AllocSize;
  size_t v13;
  kern_return_t v14;
  size_t v15;
  char *BaseAddress;
  char *v17;
  _QWORD *v18;
  void *v19;
  const __CFAllocator *v20;
  OSStatus v21;
  int v23;
  CFAllocatorContext context;
  CMBlockBufferRef blockBufferOut;

  v6 = buffer;
  blockBufferOut = 0;
  if (buffer)
  {
    AllocSize = IOSurfaceGetAllocSize(buffer);
    v13 = AllocSize - a3;
    if (AllocSize < a3 || a4 + a3 > AllocSize)
    {
      v23 = FigSignalErrorAt();
      v6 = 0;
    }
    else
    {
      v6 = (IOSurfaceRef)CFRetain(v6);
      v14 = IOSurfaceLock(v6, a6, 0);
      if (!v14)
      {
        if (a4)
          v15 = a4;
        else
          v15 = v13;
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v6);
        if (BaseAddress)
        {
          v17 = BaseAddress;
          v18 = malloc_type_calloc(1uLL, 0x10uLL, 0x102004034E03FFCuLL);
          v19 = v18;
          if (v18)
          {
            *v18 = v6;
            *((_DWORD *)v18 + 2) = a6;
            *((_BYTE *)v18 + 12) = a5;
            context.version = 0;
            context.info = v18;
            memset(&context.retain, 0, 24);
            context.allocate = (CFAllocatorAllocateCallBack)_ioSurfaceDeallocator_allocate;
            context.reallocate = 0;
            context.deallocate = (CFAllocatorDeallocateCallBack)_ioSurfaceDeallocator_deallocateWithContext;
            context.preferredSize = 0;
            v20 = CFAllocatorCreate(0, &context);
            v21 = CMBlockBufferCreateWithMemoryBlock(a1, &v17[a3], v15, v20, 0, 0, v15, 0, &blockBufferOut);
            if (!v21)
            {
              v19 = 0;
              v6 = 0;
              goto LABEL_12;
            }
            v23 = v21;
            goto LABEL_24;
          }
        }
        else
        {
          v19 = 0;
        }
        v20 = 0;
        v23 = -16990;
LABEL_24:
        if (v6)
          IOSurfaceUnlock(v6, a6, 0);
        goto LABEL_26;
      }
      v23 = v14;
    }
    v20 = 0;
    v19 = 0;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v23 = -16990;
  }
LABEL_26:
  if (v23 && blockBufferOut)
  {
    CFRelease(blockBufferOut);
    blockBufferOut = 0;
  }
LABEL_12:
  free(v19);
  if (v20)
    CFRelease(v20);
  if (v6)
    CFRelease(v6);
  return blockBufferOut;
}

uint64_t CMPhotoGetPixelFormatCompressionType(int a1)
{
  if (CMPhotoPixelFormatIsLossyCompressed50(a1))
    return 3;
  if (CMPhotoPixelFormatIsLossyCompressed62(a1))
    return 4;
  if (CMPhotoPixelFormatIsLossyCompressed75(a1))
    return 5;
  return 2 * (CMPhotoPixelFormatIsAGXCompressed(a1) != 0);
}

uint64_t CMPhotoSurfacePoolCreateMemorySurface(uint64_t a1, unint64_t a2, int a3, IOSurfaceRef *a4)
{
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __IOSurface *v15;
  int v16;
  uint64_t v17;
  const __CFString *v18;
  unsigned int *v19;
  unsigned int v20;
  IOSurfaceRef v21;
  uint64_t v22;
  const void *WiringAssertion;
  const __CFString *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const __CFString *v30;
  CFTypeRef v31;
  IOSurfaceRef buffer;
  unint64_t v33;

  v7 = a1;
  buffer = 0;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    v7 = defaultSurfacePool;
  }
  if ((__CFString *)v7 == CFSTR("SurfacePoolOneShot"))
  {
    v8 = 0;
    v11 = 0;
    v17 = 0;
LABEL_15:
    v12 = CMPhotoCreateMemorySurface(a2, 1246774599, a3, 0, 0, v17, &buffer);
    if ((_DWORD)v12)
      goto LABEL_60;
    if (!buffer)
    {
      v26 = 0;
      v28 = 4294950305;
      goto LABEL_42;
    }
    if (v17)
      v18 = CFSTR("CMPhoto non-pooled IOSurfaceMemoryPool");
    else
      v18 = CFSTR("CMPhoto non-pooled");
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v18);
    IOSurfaceIncrementUseCount(buffer);
    if ((__CFString *)v7 == CFSTR("SurfacePoolOneShot"))
    {
      v21 = buffer;
      if (buffer)
        goto LABEL_41;
      v22 = 0;
      goto LABEL_27;
    }
    v19 = &v8[8].u32[1];
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    goto LABEL_23;
  }
  v8 = (int64x2_t *)(v7 + 24);
  v33 = 0;
  if (!Pool_LookupSizeBucket(v7 + 24, a2, &v33))
  {
    v11 = 0;
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(v7 + 48);
  v10 = v33;
  v11 = (uint64_t *)(v9 + 88 * v33);
  if (!v9)
  {
LABEL_14:
    v17 = *(_QWORD *)(v7 + 160);
    goto LABEL_15;
  }
  v12 = pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 312));
  if ((_DWORD)v12)
    goto LABEL_60;
  v13 = *v11;
  if (*v11)
  {
    while (!*(_BYTE *)(v13 + 72) && IOSurfaceIsInUse(*(IOSurfaceRef *)v13))
    {
      v13 = *(_QWORD *)(v13 + 40);
      if (!v13)
        goto LABEL_11;
    }
    Pool_MarkBufferAsUsed(v7 + 24, (uint64_t)v11, v13);
    v15 = *(__IOSurface **)v13;
    buffer = v15;
    *(_QWORD *)(v7 + 384) = dispatch_time(0, 0);
    *(_BYTE *)(v7 + 392) = 0;
    if (*(_QWORD *)(v7 + 352))
    {
      objc_msgSend(*(id *)(v7 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v7);
      objc_msgSend(*(id *)(v7 + 352), "registerBackgroundNotificationHandlerForContext:handler:", v7, *(_QWORD *)(v7 + 360));
    }
    if (*(_BYTE *)(v7 + 320))
    {
      dispatch_resume(*(dispatch_object_t *)(v7 + 328));
      v14 = 0;
      *(_BYTE *)(v7 + 320) = 0;
    }
    else
    {
      v14 = 0;
    }
    v16 = 1;
  }
  else
  {
LABEL_11:
    v14 = *(_QWORD *)(v9 + 88 * v10 + 16);
    Pool_Cleanup((int64x2_t *)(v7 + 24), *(_QWORD *)(v7 + 80) - v14, *(_QWORD *)(v7 + 104) - 1, 0, 0);
    v15 = 0;
    v16 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 312));
  if (v16 && v15)
  {
    if (CMPhotoUsePurgeableIOSurfaces() && IOSurfaceSetPurgeable(v15, 0, 0))
    {
      SurfacePool_DetachSurface(v7, v15, 0);
      CFRelease(v15);
      buffer = 0;
      goto LABEL_55;
    }
    v30 = (const __CFString *)*MEMORY[0x1E0CBC048];
    v31 = IOSurfaceCopyValue(v15, (CFStringRef)*MEMORY[0x1E0CBC048]);
    IOSurfaceRemoveAllValues(v15);
    if (v31)
    {
      IOSurfaceSetValue(v15, v30, v31);
      CFRelease(v31);
    }
  }
  else if (!v15)
  {
LABEL_55:
    if ((unint64_t)(*(_QWORD *)(v7 + 136) + v14) > *(_QWORD *)(v7 + 80) && *(_BYTE *)(v7 + 153)
      || *(_QWORD *)(v7 + 144) >= *(_QWORD *)(v7 + 104) && *(_BYTE *)(v7 + 152))
    {
      v12 = FigSignalErrorAt();
      goto LABEL_60;
    }
  }
LABEL_23:
  v21 = buffer;
  if (buffer)
    goto LABEL_41;
  v22 = v8[8].i64[1];
LABEL_27:
  v12 = CMPhotoCreateMemorySurface(v11[2], 1246774599, a3, 0, 0, v22, &buffer);
  if (!(_DWORD)v12)
  {
    if (v8[6].i8[8])
      WiringAssertion = (const void *)IOSurfaceCreateWiringAssertion();
    else
      WiringAssertion = 0;
    if (v22)
      v24 = CFSTR("CMPhoto pooled IOSurfaceMemoryPool");
    else
      v24 = CFSTR("CMPhoto pooled");
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v24);
    IOSurfaceIncrementUseCount(buffer);
    v25 = malloc_type_malloc(0x50uLL, 0x10A00405052DA9CuLL);
    v26 = v25;
    if (!v25)
    {
      v28 = 4294950305;
      goto LABEL_67;
    }
    *v25 = buffer;
    v25[2] = WiringAssertion;
    v25[4] = v11;
    v25[1] = v11[2];
    v25[3] = 0;
    v27 = pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 312));
    if ((_DWORD)v27)
    {
      v28 = v27;
      goto LABEL_66;
    }
    Pool_InsertNewBuffer(v8, v11, (uint64_t)v26);
    *(_QWORD *)(v7 + 384) = dispatch_time(0, 0);
    *(_BYTE *)(v7 + 392) = 0;
    if (*(_QWORD *)(v7 + 352))
    {
      objc_msgSend(*(id *)(v7 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v7);
      objc_msgSend(*(id *)(v7 + 352), "registerBackgroundNotificationHandlerForContext:handler:", v7, *(_QWORD *)(v7 + 360));
    }
    if (*(_BYTE *)(v7 + 320))
    {
      dispatch_resume(*(dispatch_object_t *)(v7 + 328));
      *(_BYTE *)(v7 + 320) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 312));
    v21 = buffer;
LABEL_41:
    v26 = 0;
    v28 = 0;
    *a4 = v21;
    buffer = 0;
    goto LABEL_42;
  }
LABEL_60:
  v28 = v12;
  v26 = 0;
LABEL_66:
  WiringAssertion = 0;
LABEL_67:
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    if (buffer)
      CFRelease(buffer);
  }
  if (WiringAssertion)
    CFRelease(WiringAssertion);
LABEL_42:
  free(v26);
  return v28;
}

uint64_t Pool_LookupSizeBucket(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v6;

  v3 = *(unint64_t **)(a1 + 32);
  if (*v3 >= a2)
  {
    v4 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40) - 1;
    if (v3[v4] < a2)
      return 0;
    if (v4 >= 2)
    {
      v6 = 0;
      do
      {
        if (v3[(v4 + v6) >> 1] >= a2)
          v4 = (v4 + v6) >> 1;
        else
          v6 = (v4 + v6) >> 1;
      }
      while (v4 - v6 > 1);
    }
  }
  *a3 = v4;
  return 1;
}

uint64_t CMPhotoSurfacePoolCreatePixelBuffer(const void *a1, uint64_t a2, size_t a3, size_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, const __CFDictionary *a10, CVPixelBufferRef *a11)
{
  return CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(const void *a1, uint64_t a2, size_t a3, size_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, const __CFDictionary *a10, CVPixelBufferRef *a11, _BYTE *a12)
{
  const __CFDictionary *MutableCopy;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  const __CFAllocator *v30;
  CFMutableDictionaryRef Mutable;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *v34;
  double PixelBufferSize;
  double v36;
  unint64_t v37;
  uint64_t v39;
  IOSurfaceRef v40;
  size_t v42;
  unint64_t v43;
  IOSurfaceRef buffer;
  CVPixelBufferRef pixelBufferOut;

  buffer = 0;
  pixelBufferOut = 0;
  if (CMPhotoPixelFormatIsLossyCompressed(a2) || CMPhotoPixelFormatIsAGXCompressed(a2))
  {
    CFGetAllocator(a1);
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      if (a6 <= 1)
        v21 = 1;
      else
        v21 = a6;
      v22 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a3, a4, v21);
      v24 = v22;
      v25 = v23;
      if (a9 || v22 != a3 || v23 != a4)
      {
        v42 = 0;
        v43 = 0;
        v26 = *MEMORY[0x1E0CA8FB8];
        CMPhotoCFDictionaryGetSizeIfPresent(MutableCopy, (const void *)*MEMORY[0x1E0CA8FB8], &v43);
        v27 = *MEMORY[0x1E0CA8FA0];
        CMPhotoCFDictionaryGetSizeIfPresent(MutableCopy, (const void *)*MEMORY[0x1E0CA8FA0], &v42);
        v28 = v43 <= v24 - a3 ? v24 - a3 : v43;
        v29 = v42 <= v25 - a4 ? v25 - a4 : v42;
        CMPhotoCFDictionarySetSize(MutableCopy, v26, v28);
        CMPhotoCFDictionarySetSize(MutableCopy, v27, v29);
        if (a9)
          CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E0CA8F68], a9);
      }
      v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0], Mutable);
      v32 = CVPixelBufferCreate(v30, a3, a4, a2, MutableCopy, &pixelBufferOut);
      if (!(_DWORD)v32)
      {
        if (a12)
          *a12 = 0;
        goto LABEL_32;
      }
      v39 = v32;
      if (Mutable)
LABEL_33:
        CFRelease(Mutable);
    }
    else
    {
      v39 = 4294950305;
    }
  }
  else
  {
    v43 = 0;
    CMPhotoCFDictionaryGetSizeIfPresent(a10, (const void *)*MEMORY[0x1E0CA9048], &v43);
    if (!a1)
    {
      pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
      a1 = (const void *)defaultSurfacePool;
    }
    v33 = CMPhotoSurfacePoolCreateImageSurfaceWithAlignment((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, v43, 1, 0, &buffer, a12);
    if (!(_DWORD)v33)
    {
      v34 = CFGetAllocator(a1);
      v33 = CMPhotoCreatePixelBufferWithSurface(v34, buffer, a10, &pixelBufferOut);
      if (!(_DWORD)v33)
      {
        if (!a5)
        {
          PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBufferOut);
          v37 = vcvtad_u64_f64(v36);
          if (vcvtad_u64_f64(PixelBufferSize) != a3 || v37 != a4)
            CMPhotoSetPixelBufferCLAP(pixelBufferOut, 0, 0, a3, a4, 0, 1);
        }
        Mutable = 0;
        MutableCopy = 0;
LABEL_32:
        v39 = 0;
        *a11 = pixelBufferOut;
        pixelBufferOut = 0;
        if (!Mutable)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    v39 = v33;
    MutableCopy = 0;
  }
LABEL_34:
  v40 = buffer;
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    CFRelease(v40);
  }
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v39;
}

uint64_t CMPhotoPixelFormatIsAGXCompressed(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;

  result = 1;
  if (a1 <= 645101103)
  {
    if (a1 > 642527535)
    {
      if ((a1 - 642527536) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0
        || (a1 - 645097008) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      {
        return result;
      }
      v4 = 644624754;
    }
    else
    {
      if ((a1 - 641230384) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
        || (a1 - 641234480) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      {
        return result;
      }
      v4 = 642527288;
    }
    if (a1 == v4)
      return result;
    return 0;
  }
  if (a1 <= 645166639)
  {
    if ((a1 - 645101104) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      return result;
    v3 = -645162544;
  }
  else
  {
    if ((a1 - 645166640) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
      || (a1 - 645424688) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
    {
      return result;
    }
    v3 = -645428784;
  }
  v5 = a1 + v3;
  if (v5 > 4 || ((1 << v5) & 0x15) == 0)
    return 0;
  return result;
}

BOOL CMPhotoPixelFormatIsLossyCompressed(int a1)
{
  return CMPhotoPixelFormatIsLossyCompressed50(a1)
      || CMPhotoPixelFormatIsLossyCompressed62(a1)
      || CMPhotoPixelFormatIsLossyCompressed75(a1) != 0;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed75(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  result = 1;
  if (a1 > 762865199)
  {
    if (a1 > 762869295)
    {
      if (a1 == 762869296)
        return result;
      v3 = 30258;
    }
    else
    {
      if (a1 == 762865200)
        return result;
      v3 = 26162;
    }
    v4 = v3 | 0x2D780000;
    goto LABEL_11;
  }
  if (a1 != 758670896 && a1 != 758674992)
  {
    v4 = 759967800;
LABEL_11:
    if (a1 != v4)
      return 0;
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed62(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  result = 1;
  if (a1 > 796419631)
  {
    if (a1 > 796423727)
    {
      if (a1 == 796423728)
        return result;
      v3 = 30258;
    }
    else
    {
      if (a1 == 796419632)
        return result;
      v3 = 26162;
    }
    v4 = v3 | 0x2F780000;
    goto LABEL_11;
  }
  if (a1 != 792225328 && a1 != 792229424)
  {
    v4 = 793522232;
LABEL_11:
    if (a1 != v4)
      return 0;
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed50(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  result = 1;
  if (a1 > 2088265263)
  {
    if (a1 > 2088269359)
    {
      if (a1 == 2088269360)
        return result;
      v3 = 30258;
    }
    else
    {
      if (a1 == 2088265264)
        return result;
      v3 = 26162;
    }
    v4 = v3 | 0x7C780000;
    goto LABEL_11;
  }
  if (a1 != 2084070960 && a1 != 2084075056)
  {
    v4 = 2085367864;
LABEL_11:
    if (a1 != v4)
      return 0;
  }
  return result;
}

uint64_t CMPhotoSurfacePoolCreateImageSurfaceWithAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, unint64_t a10, int a11, unsigned __int8 a12, IOSurfaceRef *a13, _BYTE *a14)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  const __CFAllocator *v44;
  CFDataRef v45;
  CFDataRef v46;
  uint64_t *Value;
  char *v48;
  __int128 v49;
  uint64_t BytesPerPixelForPixelFormat;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  CFTypeRef v59;
  int v60;
  int v61;
  unsigned __int16 v62;
  int v63;
  unsigned __int16 v64;
  __IOSurface *v65;
  _BOOL4 v66;
  kern_return_t v67;
  char v68;
  const __CFString *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  const __CFString *v74;
  unsigned int *v75;
  unsigned int v76;
  IOSurfaceRef v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const void *WiringAssertion;
  const __CFString *v83;
  __IOSurface *v84;
  size_t BytesPerRowOfPlane;
  uint64_t v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v92;
  int64x2_t *v93;
  unint64_t v94;
  IOSurfaceRef buffer;
  unint64_t v96;
  UInt8 bytes[16];
  __int128 v98;

  buffer = 0;
  if (a6 >= 0x7FFFFFFF)
  {
    v72 = FigSignalErrorAt();
    v73 = 0;
    goto LABEL_295;
  }
  v14 = a7;
  if (a7 >= 0x7FFFFFFF)
    goto LABEL_255;
  v15 = a6;
  v19 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    v19 = defaultSurfacePool;
    if (!defaultSurfacePool)
    {
      v73 = 0;
      WiringAssertion = 0;
      goto LABEL_305;
    }
  }
  if (a9)
    v20 = a9;
  else
    v20 = 16;
  v94 = v20;
  v21 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(v15, v20);
  v22 = 1;
  if ((int)a2 > 1882468911)
  {
    if ((int)a2 <= 1952854575)
    {
      if ((int)a2 <= 1919381551)
      {
        if ((int)a2 > 1919378231)
        {
          if ((_DWORD)a2 == 1919378232)
            goto LABEL_72;
          v24 = 1919379252;
        }
        else
        {
          if ((_DWORD)a2 == 1882468912)
            goto LABEL_72;
          v24 = 1885745712;
        }
        goto LABEL_71;
      }
      if ((int)a2 <= 1936077361)
      {
        if ((_DWORD)a2 == 1919381552)
        {
          v25 = 1;
          v22 = 16;
          if (!v15)
            goto LABEL_68;
          goto LABEL_74;
        }
        v24 = 1936077360;
        goto LABEL_71;
      }
      if ((_DWORD)a2 != 1936077362)
      {
        if ((_DWORD)a2 == 1937125936)
          goto LABEL_72;
        v26 = 1937125938;
        goto LABEL_66;
      }
    }
    else if ((int)a2 > 2016686641)
    {
      if ((int)a2 > 2019963441)
      {
        if ((_DWORD)a2 == 2019963442 || (_DWORD)a2 == 2037741158)
          goto LABEL_67;
        v26 = 2037741171;
        goto LABEL_66;
      }
      if ((_DWORD)a2 != 2016686642)
      {
        v24 = 2019963440;
        goto LABEL_71;
      }
    }
    else
    {
      if ((int)a2 <= 1953903151)
      {
        if ((_DWORD)a2 == 1952854576)
          goto LABEL_72;
        v26 = 1952854578;
        goto LABEL_66;
      }
      if ((_DWORD)a2 == 1953903152)
        goto LABEL_72;
      if ((_DWORD)a2 != 1953903154)
      {
        v24 = 2016686640;
        goto LABEL_71;
      }
    }
  }
  else
  {
    if ((int)a2 > 1651519797)
    {
      if ((int)a2 <= 1734501175)
      {
        if ((int)a2 <= 1651925815)
        {
          if ((_DWORD)a2 == 1651519798)
            goto LABEL_56;
          v23 = 1651847472;
        }
        else
        {
          if ((_DWORD)a2 == 1651925816 || (_DWORD)a2 == 1651926376)
          {
LABEL_56:
            v22 = 4;
            v25 = 4;
            if (!v15)
              goto LABEL_68;
LABEL_74:
            v27 = v15 % v22;
            if (v27 && (v21 <= v15 || v27 > v21 - v15))
              goto LABEL_79;
            goto LABEL_77;
          }
          v23 = 1652056888;
        }
        goto LABEL_55;
      }
      if ((int)a2 > 1735549491)
      {
        if ((_DWORD)a2 != 1735549492 && (_DWORD)a2 != 1735549752)
        {
          v24 = 1751527984;
          goto LABEL_71;
        }
LABEL_72:
        v22 = 2;
        v25 = 2;
LABEL_73:
        if (v15)
          goto LABEL_74;
        goto LABEL_68;
      }
      if ((_DWORD)a2 == 1734501176)
        goto LABEL_72;
      v24 = 1734505012;
LABEL_71:
      v25 = 1;
      if ((_DWORD)a2 != v24)
        goto LABEL_73;
      goto LABEL_72;
    }
    if ((int)a2 > 1278555700)
    {
      if ((int)a2 > 1650942775)
      {
        if ((_DWORD)a2 != 1650942776 && (_DWORD)a2 != 1650943796)
        {
          v25 = 1;
          if ((_DWORD)a2 == 1650946098)
            v22 = 8;
          else
            v25 = 1;
          if (!v15)
            goto LABEL_68;
          goto LABEL_74;
        }
        goto LABEL_72;
      }
      if ((_DWORD)a2 != 1278555701)
      {
        v23 = 1647719528;
LABEL_55:
        v25 = 1;
        if ((_DWORD)a2 == v23)
          goto LABEL_56;
        goto LABEL_73;
      }
      goto LABEL_67;
    }
    if ((int)a2 <= 875704933)
    {
      if ((_DWORD)a2 == 875704422)
        goto LABEL_72;
      v24 = 875704438;
      goto LABEL_71;
    }
    if ((_DWORD)a2 != 875704934)
    {
      v26 = 875704950;
LABEL_66:
      v25 = 1;
      if ((_DWORD)a2 != v26)
        goto LABEL_73;
    }
  }
LABEL_67:
  v25 = 1;
  v22 = 2;
  if (v15)
    goto LABEL_74;
LABEL_68:
  v15 = v22;
LABEL_77:
  if (!v14)
  {
    v14 = v25;
    goto LABEL_82;
  }
  if (!(v14 % v25))
    goto LABEL_82;
LABEL_79:
  v28 = FigSignalErrorAt();
  if ((_DWORD)v28)
  {
LABEL_296:
    v72 = v28;
    v73 = 0;
LABEL_297:
    WiringAssertion = 0;
    goto LABEL_298;
  }
LABEL_82:
  v29 = a11;
  v30 = a10;
  v89 = v15;
  if ((__CFString *)v19 == CFSTR("SurfacePoolOneShot"))
  {
    v93 = 0;
    v40 = 0;
LABEL_260:
    if (!a5 && a8)
    {
      a3 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(a3, v89);
      a4 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(a4, v14);
    }
    v28 = CMPhotoCreateImageSurface(a2, a3, a4, v89, v14, v94, v30, v29, a12, 0, 0, v40, &buffer);
    if ((_DWORD)v28)
      goto LABEL_296;
    if (!buffer)
    {
      v73 = 0;
      v72 = 4294950305;
      goto LABEL_295;
    }
    if (v40)
      v74 = CFSTR("CMPhoto non-pooled IOSurfaceMemoryPool");
    else
      v74 = CFSTR("CMPhoto non-pooled");
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v74);
    IOSurfaceIncrementUseCount(buffer);
    if ((__CFString *)v19 != CFSTR("SurfacePoolOneShot"))
    {
      v75 = &v93[8].u32[1];
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 + 1, v75));
      Value = 0;
      LOBYTE(v59) = 0;
      goto LABEL_272;
    }
    LOBYTE(v59) = 0;
    v77 = buffer;
    v78 = v89;
    if (buffer)
      goto LABEL_293;
    Value = 0;
    v81 = 0;
    v80 = 60;
    v79 = 56;
LABEL_276:
    v28 = CMPhotoCreateImageSurface(a2, *(unsigned int *)v79, *(unsigned int *)v80, v78, v14, v94, v30, v29, a12, 0, 0, v81, &buffer);
    if ((_DWORD)v28)
      goto LABEL_296;
    if (v93[6].i8[8])
      WiringAssertion = (const void *)IOSurfaceCreateWiringAssertion();
    else
      WiringAssertion = 0;
    if (v81)
      v83 = CFSTR("CMPhoto pooled IOSurfaceMemoryPool");
    else
      v83 = CFSTR("CMPhoto pooled");
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v83);
    IOSurfaceIncrementUseCount(buffer);
    v73 = malloc_type_malloc(0x50uLL, 0x10A00405052DA9CuLL);
    if (v73)
    {
      v84 = buffer;
      *v73 = buffer;
      v73[2] = WiringAssertion;
      v73[4] = Value;
      v73[1] = IOSurfaceGetAllocSize(v84);
      if (IOSurfaceGetPlaneCount(buffer))
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, 0);
      else
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRow(buffer);
      v73[3] = BytesPerRowOfPlane;
      v86 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
      if (!(_DWORD)v86)
      {
        Pool_InsertNewBuffer(v93, Value, (uint64_t)v73);
        *(_QWORD *)(v19 + 384) = dispatch_time(0, 0);
        *(_BYTE *)(v19 + 392) = 0;
        if (*(_QWORD *)(v19 + 352))
        {
          objc_msgSend(*(id *)(v19 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v19);
          objc_msgSend(*(id *)(v19 + 352), "registerBackgroundNotificationHandlerForContext:handler:", v19, *(_QWORD *)(v19 + 360));
        }
        if (*(_BYTE *)(v19 + 320))
        {
          dispatch_resume(*(dispatch_object_t *)(v19 + 328));
          *(_BYTE *)(v19 + 320) = 0;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
        v77 = buffer;
        goto LABEL_293;
      }
      v72 = v86;
      goto LABEL_297;
    }
LABEL_305:
    v72 = 4294950305;
LABEL_298:
    if (buffer)
    {
      IOSurfaceDecrementUseCount(buffer);
      if (buffer)
        CFRelease(buffer);
    }
    if (WiringAssertion)
      CFRelease(WiringAssertion);
    goto LABEL_295;
  }
  v93 = (int64x2_t *)(v19 + 168);
  v31 = v14;
  v32 = *(_QWORD *)(*(_QWORD *)(v19 + 200) + 8 * *(_QWORD *)(v19 + 208) - 8);
  v88 = v31;
  v33 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a3, a4, v15);
  if (v33 > v32)
    goto LABEL_258;
  v35 = v34;
  if (v34 > v32)
    goto LABEL_258;
  LODWORD(v36) = v33;
  if (a8 | a5)
  {
    v37 = a2;
    v38 = a10;
    v39 = a11;
  }
  else
  {
    v96 = 0;
    if (!Pool_LookupSizeBucket((uint64_t)v93, v33, &v96)
      || (v41 = *(_QWORD *)(v19 + 200),
          v36 = *(_QWORD *)(v41 + 8 * v96),
          !Pool_LookupSizeBucket((uint64_t)v93, v35, &v96)))
    {
      a2 = a2;
      goto LABEL_258;
    }
    v35 = *(_QWORD *)(v41 + 8 * v96);
    v39 = a11;
    v38 = a10;
    v37 = a2;
  }
  if (a5)
    v42 = a3;
  else
    v42 = v36;
  if (a5)
    v43 = a4;
  else
    v43 = v35;
  *(_DWORD *)bytes = v42;
  *(_DWORD *)&bytes[4] = v43;
  *(_DWORD *)&bytes[8] = v36;
  *(_DWORD *)&bytes[12] = v35;
  HIDWORD(v98) = v38;
  v30 = v38;
  a2 = v37;
  LODWORD(v98) = v37;
  *(_QWORD *)((char *)&v98 + 4) = __PAIR64__(v94, v39);
  v29 = v39;
  v44 = CFGetAllocator((CFTypeRef)v19);
  v45 = CFDataCreate(v44, bytes, 32);
  if (!v45)
    goto LABEL_258;
  v46 = v45;
  if (pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312)))
  {
    CFRelease(v46);
LABEL_258:
    v14 = v88;
LABEL_259:
    v40 = *(_QWORD *)(v19 + 304);
    goto LABEL_260;
  }
  Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(v19 + 192), v46);
  v14 = v88;
  if (!Value)
  {
    v48 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10A00402736B2FBuLL);
    Value = (uint64_t *)v48;
    if (v48)
    {
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = v48;
      v49 = v98;
      *(_OWORD *)(v48 + 56) = *(_OWORD *)bytes;
      *(_OWORD *)(v48 + 72) = v49;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v19 + 192), v46, v48);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
  CFRelease(v46);
  if (!Value)
    goto LABEL_259;
  v28 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
  if ((_DWORD)v28)
    goto LABEL_296;
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a2);
  v51 = *Value;
  if (!*Value)
  {
LABEL_118:
    v55 = CMPhotoGetBytesPerPixelForPixelFormat(a2);
    v56 = CMPhotoAlignValue(v55 * *((unsigned int *)Value + 16), v94);
    v57 = 0;
    if ((int)a2 <= 1734504495)
    {
      if ((int)a2 <= 1380401728)
      {
        if ((int)a2 <= 875836533)
        {
          if ((int)a2 > 875704421)
          {
            if ((int)a2 > 875704933)
            {
              if ((_DWORD)a2 != 875704934 && (_DWORD)a2 != 875704950)
              {
                v58 = 875836518;
                goto LABEL_251;
              }
LABEL_253:
              v57 = 2 * v56 * *((unsigned int *)Value + 17);
              goto LABEL_229;
            }
            if ((_DWORD)a2 != 875704422)
            {
              v63 = 875704438;
LABEL_197:
              if ((_DWORD)a2 != v63)
                goto LABEL_229;
            }
LABEL_213:
            v57 = (((*((_DWORD *)Value + 17) + 1) >> 1) + (unint64_t)*((unsigned int *)Value + 17))
                * v56;
            goto LABEL_229;
          }
          if ((int)a2 <= 825306676)
          {
            if ((_DWORD)a2 != 16 && (_DWORD)a2 != 32)
              goto LABEL_229;
            goto LABEL_228;
          }
          if ((_DWORD)a2 == 825306677)
          {
LABEL_228:
            v57 = v56 * *((unsigned int *)Value + 17);
            goto LABEL_229;
          }
          v60 = 825437747;
LABEL_227:
          if ((_DWORD)a2 != v60)
            goto LABEL_229;
          goto LABEL_228;
        }
        if ((int)a2 > 1278226735)
        {
          if ((a2 - 1278226736) <= 6 && ((1 << (a2 - 48)) & 0x45) != 0)
            goto LABEL_228;
          v60 = 1278555701;
          goto LABEL_227;
        }
        if ((a2 - 1278226488) <= 0x30 && ((1 << (a2 - 56)) & 0x1400000000001) != 0)
          goto LABEL_228;
        if ((_DWORD)a2 != 875836534)
        {
          v60 = 1111970369;
          goto LABEL_227;
        }
LABEL_252:
        v57 = 3 * v56 * *((unsigned int *)Value + 17);
        goto LABEL_229;
      }
      if ((int)a2 <= 1650946097)
      {
        if ((int)a2 <= 1647589489)
        {
          if ((int)a2 > 1380411456)
          {
            if ((_DWORD)a2 == 1380411457)
              goto LABEL_228;
            v60 = 1647392369;
          }
          else
          {
            if ((_DWORD)a2 == 1380401729)
              goto LABEL_228;
            v60 = 1380410945;
          }
        }
        else if ((int)a2 <= 1650942775)
        {
          if ((_DWORD)a2 == 1647589490)
            goto LABEL_228;
          v60 = 1647719528;
        }
        else
        {
          if ((_DWORD)a2 == 1650942776 || (_DWORD)a2 == 1650943796)
            goto LABEL_228;
          v60 = 1650946096;
        }
        goto LABEL_227;
      }
      if ((int)a2 <= 1651926375)
      {
        if ((int)a2 > 1651847471)
        {
          if ((_DWORD)a2 == 1651847472)
            goto LABEL_228;
          v60 = 1651925816;
        }
        else
        {
          if ((_DWORD)a2 == 1650946098)
            goto LABEL_228;
          v60 = 1651519798;
        }
        goto LABEL_227;
      }
      if ((int)a2 <= 1717855599)
      {
        if ((_DWORD)a2 == 1651926376)
          goto LABEL_228;
        v60 = 1652056888;
        goto LABEL_227;
      }
      if ((_DWORD)a2 == 1717855600 || (_DWORD)a2 == 1717856627)
        goto LABEL_228;
      v62 = 25400;
LABEL_176:
      v60 = v62 | 0x67620000;
      goto LABEL_227;
    }
    if ((int)a2 <= 1936077875)
    {
      if ((int)a2 <= 1815491697)
      {
        if ((int)a2 > 1735553071)
        {
          if ((int)a2 <= 1751411058)
          {
            if ((_DWORD)a2 == 1735553072)
              goto LABEL_228;
            v60 = 1751410032;
          }
          else
          {
            if ((_DWORD)a2 == 1751411059)
              goto LABEL_228;
            if ((_DWORD)a2 == 1751527984)
              goto LABEL_213;
            v60 = 1815162994;
          }
          goto LABEL_227;
        }
        if ((int)a2 > 1735549491)
        {
          if ((_DWORD)a2 == 1735549492)
            goto LABEL_228;
          v60 = 1735549752;
          goto LABEL_227;
        }
        if ((_DWORD)a2 == 1734504496)
          goto LABEL_228;
        v62 = 29236;
        goto LABEL_176;
      }
      if ((int)a2 > 1919379251)
      {
        if ((int)a2 > 1932996148)
        {
          if ((_DWORD)a2 == 1932996149)
            goto LABEL_228;
          if ((_DWORD)a2 == 1936077360)
            goto LABEL_213;
          v61 = 1936077362;
          goto LABEL_211;
        }
        if ((_DWORD)a2 == 1919379252)
          goto LABEL_228;
        v64 = 28720;
LABEL_224:
        v60 = v64 | 0x72670000;
        goto LABEL_227;
      }
      if ((int)a2 > 1919365991)
      {
        if ((_DWORD)a2 == 1919365992)
          goto LABEL_252;
        v64 = 25400;
        goto LABEL_224;
      }
      if ((_DWORD)a2 == 1815491698)
        goto LABEL_228;
      v58 = 1919365990;
LABEL_251:
      if ((_DWORD)a2 == v58)
        goto LABEL_252;
LABEL_229:
      v92 = v57;
      Pool_Cleanup(v93, *(_QWORD *)(v19 + 224) - v57, *(_QWORD *)(v19 + 248) - 1, 0, 0);
      LODWORD(v59) = 0;
      goto LABEL_230;
    }
    if ((int)a2 > 1953903667)
    {
      if ((int)a2 <= 2019963439)
      {
        if ((int)a2 <= 2016686641)
        {
          if ((_DWORD)a2 != 1953903668)
          {
            v63 = 2016686640;
            goto LABEL_197;
          }
          goto LABEL_252;
        }
        if ((_DWORD)a2 == 2016686642)
          goto LABEL_253;
        v58 = 2016687156;
        goto LABEL_251;
      }
      if ((int)a2 > 2019963955)
      {
        if ((_DWORD)a2 != 2019963956)
        {
          if ((_DWORD)a2 == 2037741158)
            goto LABEL_228;
          v60 = 2037741171;
          goto LABEL_227;
        }
        goto LABEL_252;
      }
      if ((_DWORD)a2 == 2019963440)
        goto LABEL_213;
      v61 = 2019963442;
    }
    else
    {
      if ((int)a2 <= 1952854575)
      {
        if ((int)a2 <= 1937125937)
        {
          if ((_DWORD)a2 != 1936077876)
          {
            v63 = 1937125936;
            goto LABEL_197;
          }
          goto LABEL_252;
        }
        if ((_DWORD)a2 == 1937125938)
          goto LABEL_253;
        v58 = 1937126452;
        goto LABEL_251;
      }
      if ((int)a2 <= 1952855091)
      {
        if ((_DWORD)a2 == 1952854576)
          goto LABEL_213;
        v61 = 1952854578;
      }
      else
      {
        if ((_DWORD)a2 == 1952855092)
          goto LABEL_252;
        if ((_DWORD)a2 == 1953903152)
          goto LABEL_213;
        v61 = 1953903154;
      }
    }
LABEL_211:
    if ((_DWORD)a2 != v61)
      goto LABEL_229;
    goto LABEL_253;
  }
  v52 = BytesPerPixelForPixelFormat;
  while (1)
  {
    if (!*(_BYTE *)(v51 + 72) && IOSurfaceIsInUse(*(IOSurfaceRef *)v51))
      goto LABEL_111;
    v53 = *(_QWORD *)(v51 + 24);
    if (a8)
      break;
    if (!(v53 % v94))
      goto LABEL_114;
LABEL_111:
    v51 = *(_QWORD *)(v51 + 40);
    if (!v51)
      goto LABEL_118;
  }
  v54 = *(_QWORD *)(v51 + 32);
  if (v53 != v52 * *(unsigned int *)(v54 + 64) || *(_DWORD *)(v54 + 76) != v29)
    goto LABEL_111;
LABEL_114:
  Pool_MarkBufferAsUsed((uint64_t)v93, (uint64_t)Value, v51);
  buffer = *(IOSurfaceRef *)v51;
  *(_QWORD *)(v19 + 384) = dispatch_time(0, 0);
  *(_BYTE *)(v19 + 392) = 0;
  if (*(_QWORD *)(v19 + 352))
  {
    objc_msgSend(*(id *)(v19 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v19);
    objc_msgSend(*(id *)(v19 + 352), "registerBackgroundNotificationHandlerForContext:handler:", v19, *(_QWORD *)(v19 + 360));
  }
  if (*(_BYTE *)(v19 + 320))
  {
    dispatch_resume(*(dispatch_object_t *)(v19 + 328));
    v92 = 0;
    *(_BYTE *)(v19 + 320) = 0;
  }
  else
  {
    v92 = 0;
  }
  LODWORD(v59) = 1;
LABEL_230:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
  v65 = buffer;
  if ((_DWORD)v59)
  {
    if (buffer)
    {
      v66 = CMPhotoUsePurgeableIOSurfaces();
      v65 = buffer;
      if (v66)
      {
        v67 = IOSurfaceSetPurgeable(buffer, 0, 0);
        v65 = buffer;
        if (v67)
        {
          SurfacePool_DetachSurface(v19, buffer, 1);
          CFRelease(buffer);
          LOBYTE(v59) = 0;
          buffer = 0;
          goto LABEL_241;
        }
      }
    }
  }
  v68 = v59 ^ 1;
  if (!v65)
    v68 = 1;
  if ((v68 & 1) != 0)
  {
LABEL_240:
    if (!v65)
      goto LABEL_241;
  }
  else
  {
    v69 = (const __CFString *)*MEMORY[0x1E0CBC048];
    v59 = IOSurfaceCopyValue(v65, (CFStringRef)*MEMORY[0x1E0CBC048]);
    IOSurfaceRemoveAllValues(buffer);
    if (v59)
    {
      IOSurfaceSetValue(buffer, v69, v59);
      CFRelease(v59);
      LOBYTE(v59) = 1;
      v65 = buffer;
      goto LABEL_240;
    }
    LOBYTE(v59) = 1;
    if (!buffer)
    {
LABEL_241:
      v28 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
      if ((_DWORD)v28)
        goto LABEL_296;
      v70 = *(_QWORD *)(v19 + 288);
      v71 = *(_QWORD *)(v19 + 280) + v92;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
      if (v71 > *(_QWORD *)(v19 + 224) && *(_BYTE *)(v19 + 297)
        || v70 >= *(_QWORD *)(v19 + 248) && *(_BYTE *)(v19 + 296))
      {
LABEL_255:
        v28 = FigSignalErrorAt();
        goto LABEL_296;
      }
    }
  }
LABEL_272:
  v77 = buffer;
  if (!buffer)
  {
    v78 = v89;
    v79 = (uint64_t)(Value + 7);
    v80 = (uint64_t)Value + 60;
    v81 = v93[8].i64[1];
    goto LABEL_276;
  }
LABEL_293:
  *a13 = v77;
  buffer = 0;
  v73 = 0;
  v72 = 0;
  if (a14)
    *a14 = (_BYTE)v59;
LABEL_295:
  free(v73);
  return v72;
}

uint64_t CMPhotoGetBytesPerPixelForPixelFormat(int a1)
{
  int v1;
  int v2;
  int v3;

  if (a1 > 1651925815)
  {
    if (a1 > 1932996148)
    {
      if (a1 <= 1953903153)
      {
        if (a1 > 1937125937)
        {
          if (a1 > 1952854577)
          {
            if (a1 == 1952854578 || a1 == 1952855092)
              return 2;
            v1 = 1953903152;
          }
          else
          {
            if (a1 == 1937125938 || a1 == 1937126452)
              return 2;
            v1 = 1952854576;
          }
          goto LABEL_105;
        }
        if (a1 > 1936077361)
        {
          if (a1 == 1936077362 || a1 == 1936077876)
            return 2;
          v1 = 1937125936;
          goto LABEL_105;
        }
        if (a1 != 1932996149)
        {
          v1 = 1936077360;
          goto LABEL_105;
        }
      }
      else
      {
        if (a1 <= 2019963441)
        {
          if (a1 > 2016686641)
          {
            if (a1 == 2016686642 || a1 == 2016687156)
              return 2;
            v1 = 2019963440;
          }
          else
          {
            if (a1 == 1953903154 || a1 == 1953903668)
              return 2;
            v1 = 2016686640;
          }
LABEL_105:
          if (a1 == v1)
            return 2;
          return 1;
        }
        if (a1 <= 2037741170)
        {
          if (a1 == 2019963442 || a1 == 2019963956)
            return 2;
          v1 = 2037741158;
          goto LABEL_105;
        }
        if (a1 != 2037741171)
          return 1;
      }
      return 2;
    }
    if (a1 <= 1751527983)
    {
      if (a1 > 1734501175)
      {
        if (a1 > 1735549751)
        {
          if (a1 == 1735549752)
            return 1;
          if (a1 != 1751410032)
          {
            v1 = 1751411059;
            goto LABEL_105;
          }
        }
        else
        {
          if (a1 == 1734501176)
            return 1;
          if (a1 != 1734505012)
          {
            v1 = 1735549492;
            goto LABEL_105;
          }
        }
        return 2;
      }
      if (a1 <= 1652056887)
      {
        if (a1 != 1651925816)
        {
          v1 = 1651926376;
          goto LABEL_105;
        }
        return 1;
      }
      if (a1 == 1652056888)
        return 1;
      if (a1 == 1717855600)
        return 4;
      v2 = 1717856627;
      goto LABEL_110;
    }
    if (a1 > 1885745711)
    {
      if (a1 <= 1919378231)
      {
        if (a1 != 1885745712)
        {
          if (a1 != 1919365990)
          {
            v1 = 1919365992;
            goto LABEL_105;
          }
          return 4;
        }
        return 0;
      }
      if (a1 == 1919378232)
        return 1;
      if (a1 == 1919379252)
        return 2;
      v3 = 1919381552;
      return a1 != v3;
    }
    if (a1 <= 1815361649)
    {
      if (a1 == 1751527984)
        return 2;
      v2 = 1815162994;
LABEL_110:
      if (a1 != v2)
        return 1;
      return 4;
    }
    if (a1 != 1815361650)
    {
      if (a1 != 1815491698)
      {
        v3 = 1882468912;
        return a1 != v3;
      }
      return 8;
    }
    return 6;
  }
  if (a1 > 875836533)
  {
    if (a1 <= 1380401728)
    {
      if (a1 <= 1278226735)
      {
        if (a1 > 1278226487)
        {
          if (a1 == 1278226488)
            return 1;
          if (a1 != 1278226534)
          {
            v1 = 1278226536;
            goto LABEL_105;
          }
          return 4;
        }
        if (a1 == 875836534)
          return 1;
        v2 = 1111970369;
      }
      else
      {
        if (a1 <= 1278555700)
        {
          if ((a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
            return 2;
          return 1;
        }
        if (a1 == 1278555701 || a1 == 1279340600)
          return 2;
        v2 = 1279340854;
      }
      goto LABEL_110;
    }
    if (a1 > 1647719527)
    {
      if (a1 <= 1650946097)
      {
        if (a1 != 1647719528)
        {
          if (a1 != 1650942776)
          {
            v1 = 1650943796;
            goto LABEL_105;
          }
          return 1;
        }
        return 2;
      }
      if (a1 != 1650946098)
      {
        if (a1 != 1651519798)
        {
          v1 = 1651847472;
          goto LABEL_105;
        }
        return 2;
      }
      return 0;
    }
    if (a1 > 1380411456)
    {
      if (a1 == 1380411457)
        return 8;
      if (a1 == 1647392369)
        return 2;
      if (a1 != 1647589490)
        return 1;
      return 6;
    }
    if (a1 == 1380401729)
      return 4;
    if (a1 != 1380410945)
      return 1;
    return 16;
  }
  else
  {
    if (a1 > 792225327)
    {
      if (a1 <= 843264309)
      {
        if (a1 > 825306676)
        {
          if (a1 == 825306677 || a1 == 825437747)
            return 2;
          v1 = 843264056;
          goto LABEL_105;
        }
        return 1;
      }
      if (a1 != 843264310)
        return 1;
      return 4;
    }
    if (a1 >= 641230384)
      return 1;
    if (a1 == 16)
      return 2;
    if (a1 != 24)
    {
      if (a1 != 32)
        return 1;
      return 4;
    }
    return 3;
  }
}

unint64_t CMPhotoPaddedSizeFromImageSizeAndBlockSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 + a1 + ~((a1 - 1) % a3);
}

int64x2_t Pool_InsertNewBuffer(int64x2_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int64x2_t v8;
  int64x2_t result;

  if (*(_QWORD *)a3)
    CFRetain(*(CFTypeRef *)a3);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v6 = (_QWORD *)a2[1];
  *(_QWORD *)(a3 + 48) = v6;
  *v6 = a3;
  a2[1] = a3 + 40;
  *(_QWORD *)(a3 + 56) = 0;
  v7 = (_QWORD *)a1->i64[1];
  *(_QWORD *)(a3 + 64) = v7;
  *v7 = a3;
  a1->i64[1] = a3 + 56;
  v8 = vdupq_n_s64(1uLL);
  v8.i64[0] = *(_QWORD *)(a3 + 8);
  result = vaddq_s64(a1[7], v8);
  a1[7] = result;
  ++a2[3];
  ++a2[5];
  return result;
}

uint64_t CMPhotoSmallestNumGreaterThanAndDivisibleBy(uint64_t result, uint64_t a2)
{
  if (a2 + result != (a2 + result) / a2 * a2)
    return (a2 + result) / a2 * a2;
  return result;
}

uint64_t CMPhotoCreatePixelBufferWithSurface(const __CFAllocator *a1, IOSurfaceRef buffer, const __CFDictionary *a3, CVPixelBufferRef *a4)
{
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFDataRef v13;
  CFDataRef v14;
  uint64_t v15;
  __CFDictionary *v16;

  if (IOSurfaceGetPixelFormat(buffer) != 1380401729)
    return CVPixelBufferCreateWithIOSurface(a1, buffer, a3, a4);
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = MutableCopy;
  if (MutableCopy)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v12 = Mutable;
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA9038], Mutable);
      CMPhotoCFDictionarySetInt32(v12, (const void *)*MEMORY[0x1E0CA9160], 1380401729);
      CMPhotoCFDictionarySetInt(v12, (const void *)*MEMORY[0x1E0CA90E8], 32);
      v13 = CFDataCreate(a1, CMPhotoCreatePixelBufferWithSurface_kBlack_32RGBA, 4);
      if (v13)
      {
        v14 = v13;
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA90F8], v13);
        v15 = CVPixelBufferCreateWithIOSurface(a1, buffer, v10, a4);
        CFRelease(v10);
        CFRelease(v12);
        CFRelease(v14);
        return v15;
      }
      CFRelease(v10);
      v16 = v12;
    }
    else
    {
      v16 = v10;
    }
    CFRelease(v16);
  }
  return 4294950305;
}

uint64_t CMPhotoCreateImageSurface(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, unint64_t a11, uint64_t a12, __IOSurface **a13)
{
  uint64_t v13;
  __IOSurface *v14;
  __IOSurface *v15;
  const __CFString *v16;
  uint64_t v17;
  unint64_t v19;
  CFTypeRef value;
  CFDictionaryRef properties;

  value = 0;
  properties = 0;
  if (!a13)
    return 4294950306;
  v13 = _createImageSurfacePropertiesAndName(a1, a2, a3, a4, a5, a6, a7, a8, a9, &properties, &value);
  if ((_DWORD)v13)
  {
    v17 = v13;
  }
  else
  {
    if (!a10)
    {
LABEL_6:
      if (_getMarkSurfacesNonPurgeable_onceToken != -1)
        dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_25);
      if (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable == 1)
        CMPhotoCFDictionarySetBoolean(properties, (const void *)*MEMORY[0x1E0CBC050], 1);
      if (a12)
        CMPhotoCFDictionarySetInt64(properties, (const void *)*MEMORY[0x1E0CBBEE8], a12);
      v14 = IOSurfaceCreate(properties);
      if (v14)
      {
        v15 = v14;
        if (a10)
          v16 = CFSTR("CMPhoto Wrapped");
        else
          v16 = (const __CFString *)value;
        IOSurfaceSetValue(v14, (CFStringRef)*MEMORY[0x1E0CBC048], v16);
        if (_getShouldSetSurfaceOwnership())
          IOSurfaceSetOwnership();
        v17 = 0;
        *a13 = v15;
      }
      else
      {
        v17 = 4294950305;
      }
      goto LABEL_19;
    }
    v19 = 0;
    CMPhotoCFDictionaryGetSizeIfPresent(properties, (const void *)*MEMORY[0x1E0CBBEE0], &v19);
    if (v19 <= a11)
    {
      FigCFDictionarySetInt64();
      goto LABEL_6;
    }
    v17 = 4294950306;
  }
LABEL_19:
  if (properties)
    CFRelease(properties);
  if (value)
    CFRelease(value);
  return v17;
}

uint64_t _getShouldSetSurfaceOwnership()
{
  if (_getShouldSetSurfaceOwnership_onceToken != -1)
    dispatch_once(&_getShouldSetSurfaceOwnership_onceToken, &__block_literal_global_20);
  if (_getMarkSurfacesNonPurgeable_onceToken != -1)
    dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_25);
  return _getShouldSetSurfaceOwnership_setOwnership & ~_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable & 1;
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  _BOOL4 v7;
  uint64_t v8;

  if (!a1)
    return 4294950306;
  v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CMPhotoScaleAndRotateSessionFlushCaches(*(_QWORD *)(a1 + 280), a2, a3);
  v7 = CMPhotoUsePurgeableIOSurfaces();
  v8 = *(_QWORD *)(a1 + 272);
  if (a3 || !v7)
    CMPhotoSurfacePoolFlushCaches(v8, a3);
  else
    CMPhotoSurfacePoolMarkCachesVolatile(v8, 1);
  os_unfair_lock_unlock(v6);
  return 0;
}

uint64_t CMPhotoSurfacePoolMarkCachesVolatile(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMPhotoUsePurgeableIOSurfaces();
  if ((_DWORD)result)
  {
    if (!a1)
    {
      result = pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
      a1 = defaultSurfacePool;
    }
    if ((__CFString *)a1 != CFSTR("SurfacePoolOneShot"))
    {
      result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
      if (!(_DWORD)result)
      {
        Pool_Cleanup((int64x2_t *)(a1 + 24), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 104), 0, a2);
        Pool_Cleanup((int64x2_t *)(a1 + 168), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 248), 0, a2);
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
      }
    }
  }
  return result;
}

__n128 Pool_Cleanup(int64x2_t *a1, unint64_t a2, unint64_t a3, int a4, int a5)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  __n128 result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const void *v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint64_t v21;

  v6 = a3;
  v7 = a2;
  if (a4)
  {
    if (a1[7].i64[0] > a2 && a1[4].i64[0] < a2)
      v7 = a1[4].u64[0];
    if (a1[7].i64[1] > a3 && a1[5].i64[1] < a3)
      v6 = a1[5].u64[1];
  }
  v9 = (_QWORD *)a1->i64[0];
  if (a1->i64[0])
  {
    while (1)
    {
      v10 = v9;
      v9 = (_QWORD *)v9[7];
      if (!*((_BYTE *)v10 + 72) && IOSurfaceIsInUse((IOSurfaceRef)*v10))
        goto LABEL_23;
      if (a1[7].i64[0] > v7
        || a1[7].i64[1] > v6
        || (v11 = CMPhotoUsePurgeableIOSurfaces(), a5) && v11 && *(_DWORD *)(v10[4] + 76) != 2)
      {
        v13 = v10[7];
        v14 = (_QWORD *)v10[8];
        if (v13)
        {
          *(_QWORD *)(v13 + 64) = v14;
          v14 = (_QWORD *)v10[8];
        }
        else
        {
          a1->i64[1] = (uint64_t)v14;
        }
        *v14 = v13;
        v15 = v10[5];
        v16 = (_QWORD *)v10[6];
        if (v15)
        {
          *(_QWORD *)(v15 + 48) = v16;
          v16 = (_QWORD *)v10[6];
        }
        else
        {
          *(_QWORD *)(v10[4] + 8) = v16;
        }
        *v16 = v15;
        CMPhotoGetEncodeAccelerationModeOverride(*v10, CFSTR("CMPhoto dropped"));
        if (*v10)
          CFRelease((CFTypeRef)*v10);
        v17 = (const void *)v10[2];
        if (v17)
          CFRelease(v17);
        v18 = a1[7];
        v19.i64[1] = -1;
        v19.i64[0] = v10[1];
        v19.i64[0] = vsubq_s64(v18, v19).u64[0];
        v20.i64[0] = -1;
        v20.i64[1] = -1;
        v19.i64[1] = vaddq_s64(v18, v20).i64[1];
        a1[7] = v19;
        v21 = v10[4];
        --*(_QWORD *)(v21 + 24);
        ++*(_QWORD *)(v21 + 48);
        free(v10);
        if (!v9)
          return result;
      }
      else if (*((_BYTE *)v10 + 72))
      {
LABEL_23:
        if (!v9)
          return result;
      }
      else
      {
        if (CMPhotoUsePurgeableIOSurfaces())
          IOSurfaceSetPurgeable((IOSurfaceRef)*v10, 1u, 0);
        *((_BYTE *)v10 + 72) = 1;
        if (!v9)
          return result;
      }
    }
  }
  return result;
}

BOOL CMPhotoUsePurgeableIOSurfaces()
{
  if (_getMarkSurfacesNonPurgeable_onceToken != -1)
    dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_25);
  return (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable & 1) == 0;
}

uint64_t CMPhotoSurfacePoolGetDefault()
{
  pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
  return defaultSurfacePool;
}

void CMPhotoScaleAndRotateSessionFlushCaches(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;

  v4 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    v4 = defaultSession;
  }
  v5 = CMPhotoUsePurgeableIOSurfaces();
  v6 = *(_QWORD *)(v4 + 16);
  if (a3 || !v5)
    CMPhotoSurfacePoolFlushCaches(v6, a3);
  else
    CMPhotoSurfacePoolMarkCachesVolatile(v6, 1);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 48));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 64));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 48));
}

const void *Pool_MarkBufferAsUsed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *result;

  v5 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD **)(a3 + 48);
  if (v5)
  {
    *(_QWORD *)(v5 + 48) = v6;
    v6 = *(_QWORD **)(a3 + 48);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v6;
  }
  *v6 = v5;
  v7 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v7;
  *v7 = a3;
  *(_QWORD *)(a2 + 8) = a3 + 40;
  v8 = *(_QWORD *)(a3 + 56);
  v9 = *(_QWORD **)(a3 + 64);
  if (v8)
  {
    *(_QWORD *)(v8 + 64) = v9;
    v9 = *(_QWORD **)(a3 + 64);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v9;
  }
  *v9 = v8;
  v10 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = v10;
  *v10 = a3;
  *(_QWORD *)(a1 + 8) = a3 + 56;
  IOSurfaceIncrementUseCount(*(IOSurfaceRef *)a3);
  *(_BYTE *)(a3 + 72) = 0;
  result = *(const void **)a3;
  if (*(_QWORD *)a3)
    result = CFRetain(result);
  ++*(_QWORD *)(a2 + 32);
  return result;
}

uint64_t CMPhotoSetPixelBufferCLAP(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  return CMPhotoSetPixelBufferCLAPFromRect(a1, a6, a7, (double)a2, (double)a3, (double)a4, (double)a5);
}

uint64_t _getPrimaryIndex(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  uint64_t Int32;
  CFTypeRef cf;

  if (a2 && *(_QWORD *)(a1 + 48))
  {
    cf = 0;
    v3 = *(_QWORD *)(a1 + 40);
    CMBaseObject = FigPictureCollectionGetCMBaseObject();
    v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v5)
    {
      v6 = v5(CMBaseObject, *MEMORY[0x1E0CC49F0], v3, &cf);
      v7 = cf;
      if (v6)
      {
        Int32 = 0;
      }
      else
      {
        Int32 = CMPhotoCFNumberGetInt32((const __CFNumber *)cf);
        v7 = cf;
      }
      *a2 = Int32;
      if (v7)
        CFRelease(v7);
    }
    else
    {
      *a2 = 0;
    }
  }
  return 0;
}

uint64_t _decodeImage(const __CFAllocator *a1, uint64_t a2, const void *a3, int a4, unint64_t a5, const __CFDictionary *a6, int a7, uint64_t a8, int a9, char a10, CGImageRef *a11)
{
  uint64_t v11;
  uint64_t v19;
  uint64_t AuxiliaryImageStorageForIndex;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  const __CFDictionary *v24;
  const void *v25;
  uint64_t WrappedPixelBufferForType;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _QWORD, _OWORD *);
  int v34;
  int v35;
  CFTypeRef v36;
  CFTypeRef v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  const __CFAllocator *v41;
  uint64_t v42;
  CFMutableArrayRef Mutable;
  uint64_t v44;
  uint64_t Clone;
  BOOL v46;
  __CVBuffer *v47;
  uint64_t v48;
  char v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  const __CFArray *v53;
  const void *ValueAtIndex;
  uint64_t v55;
  int v56;
  _BOOL4 v57;
  int v58;
  int v59;
  OSType PixelFormatType;
  uint64_t FractionalPixelBuffer;
  double v62;
  double v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  __CFDictionary *v68;
  uint64_t v69;
  _BOOL8 v70;
  int v71;
  uint64_t FirstAuxiliaryOfTypeForInternalIndexWithOptions;
  int v73;
  CVBufferRef v74;
  CFMutableDictionaryRef v75;
  const void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t OutputFromConstituents;
  uint64_t v81;
  __CVBuffer *v82;
  int v83;
  const void *v84;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const __CFAllocator *v93;
  const void *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  _BOOL4 v99;
  uint64_t v100;
  unsigned __int8 v101;
  __int128 v102;
  __int128 v103;
  void *value[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  int8x16_t v116;
  int8x16_t v117;
  void *v118;
  void *v119;
  const void *v120;
  CFTypeRef cf;
  CVBufferRef buffer;
  CFTypeRef v123;
  CFTypeRef v124;
  OSType pixelFormat[4];
  _OWORD v126[3];
  __int128 v127;
  __int128 v128;
  CFTypeRef v129[2];
  __int128 v130;
  char v131[16];
  uint64_t v132;
  _OWORD v133[5];
  CFTypeRef v134;
  __CFDictionary *v135;
  CFTypeRef v136;
  __CFDictionary *v137[3];

  v11 = a8;
  if (a8)
    v19 = a8;
  else
    v19 = a2;
  v132 = 0;
  v130 = 0u;
  *(_OWORD *)v131 = 0u;
  v128 = 0u;
  *(_OWORD *)v129 = 0u;
  v127 = 0u;
  memset(v126, 0, sizeof(v126));
  *(_OWORD *)pixelFormat = 0u;
  v123 = 0;
  v124 = 0;
  cf = 0;
  buffer = 0;
  v120 = 0;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a2 + 16), v11))
    goto LABEL_267;
  v94 = a3;
  if (a4 == 2)
  {
    v93 = a1;
    AuxiliaryImageStorageForIndex = _parseMPOIfNeeded(a2 + 40);
    if ((_DWORD)AuxiliaryImageStorageForIndex)
      goto LABEL_265;
    value[0] = 0;
    AuxiliaryImageStorageForIndex = _getAuxiliaryImageStorageForIndex(a2 + 40, a7, a5, value);
    if ((_DWORD)AuxiliaryImageStorageForIndex)
      goto LABEL_265;
    v21 = *((_QWORD *)value[0] + 1);
    v98 = *(_QWORD *)value[0];
  }
  else
  {
    if (a4)
    {
      if (a4 != 1)
        goto LABEL_17;
      v93 = a1;
      AuxiliaryImageStorageForIndex = _parseExifIfNeeded(a2 + 40, 0);
      if ((_DWORD)AuxiliaryImageStorageForIndex)
        goto LABEL_265;
      if (!*(_BYTE *)(a2 + 312))
      {
LABEL_17:
        v24 = 0;
        v25 = 0;
        WrappedPixelBufferForType = 4294950306;
LABEL_18:
        v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_292:
        CMPhotoUnifiedJPEGDecoderDestroy((uint64_t)v120);
        goto LABEL_293;
      }
      v22 = (unint64_t *)(a2 + 320);
      v23 = (unint64_t *)(a2 + 328);
    }
    else
    {
      v93 = a1;
      AuxiliaryImageStorageForIndex = _parseImageSizeAndTypeIfNeeded(a2 + 40);
      if ((_DWORD)AuxiliaryImageStorageForIndex)
        goto LABEL_265;
      v22 = (unint64_t *)(a2 + 112);
      v23 = (unint64_t *)(a2 + 120);
    }
    v98 = *v22;
    v21 = *v23;
  }
  v96 = v21;
  AuxiliaryImageStorageForIndex = _parseImageSizeAndTypeIfNeeded(a2 + 40);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
    goto LABEL_265;
  AuxiliaryImageStorageForIndex = _parseOptionsForJPEGDecoding(a2, a6, v98, v96, a4, *(_BYTE *)(a2 + 133), (uint64_t)pixelFormat);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
    goto LABEL_265;
  if (a10 && LOBYTE(pixelFormat[0]))
  {
LABEL_264:
    AuxiliaryImageStorageForIndex = FigSignalErrorAt();
    goto LABEL_265;
  }
  if (a4 == 2 && BYTE1(v127))
  {
    AuxiliaryImageStorageForIndex = _parseImageSizeAndTypeIfNeeded(a2 + 40);
    if ((_DWORD)AuxiliaryImageStorageForIndex)
      goto LABEL_265;
    v28 = *(_QWORD *)(a2 + 112);
    if (v28 <= *(_QWORD *)(a2 + 120))
      v28 = *(_QWORD *)(a2 + 120);
    *((_QWORD *)&v126[2] + 1) = v28;
    LOBYTE(v127) = 1;
  }
  if (a7 && !*(_DWORD *)v131)
    *(_DWORD *)v131 = 1;
  if (BYTE5(v126[0]))
  {
    *(_OWORD *)value = *(_OWORD *)((char *)v126 + 8);
    v105 = *(_OWORD *)((char *)&v126[1] + 8);
    AuxiliaryImageStorageForIndex = CMPhotoGetTwoPassCropRects(pixelFormat[1], (unint64_t *)value, v98, v96, 0, 0);
    if ((_DWORD)AuxiliaryImageStorageForIndex)
      goto LABEL_265;
  }
  if (a4)
  {
    if (a4 != 1)
    {
      value[0] = 0;
      v29 = _getAuxiliaryImageStorageForIndex(a2 + 40, a7, a5, value);
      if (!(_DWORD)v29)
      {
        v30 = *((_QWORD *)value[0] + 7);
        v92 = *((_QWORD *)value[0] + 6);
        goto LABEL_49;
      }
      goto LABEL_268;
    }
    v29 = _parseExifIfNeeded(a2 + 40, 0);
    if (!(_DWORD)v29)
    {
      if (*(_BYTE *)(a2 + 312))
      {
        v30 = *(_QWORD *)(a2 + 352);
        v92 = *(_QWORD *)(a2 + 288) + *(_QWORD *)(a2 + 344);
        goto LABEL_49;
      }
      WrappedPixelBufferForType = 4294950306;
LABEL_95:
      v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_96:
      v24 = 0;
      v25 = 0;
      goto LABEL_292;
    }
    goto LABEL_268;
  }
  v31 = v11;
  v29 = _parseImageSizeAndTypeIfNeeded(a2 + 40);
  if ((_DWORD)v29)
    goto LABEL_268;
  *(_QWORD *)&v133[0] = 0;
  v32 = *(_QWORD *)(a2 + 64);
  v33 = *(uint64_t (**)(uint64_t, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v33)
  {
    WrappedPixelBufferForType = 4294954514;
    goto LABEL_95;
  }
  v29 = v33(v32, 0, v133);
  if ((_DWORD)v29)
  {
LABEL_268:
    WrappedPixelBufferForType = v29;
    goto LABEL_95;
  }
  v30 = *(_QWORD *)&v133[0];
  if ((*(_QWORD *)&v133[0] & 0x8000000000000000) != 0)
  {
    WrappedPixelBufferForType = 4294950190;
    goto LABEL_95;
  }
  v11 = v31;
  v92 = 0;
LABEL_49:
  v91 = v30;
  if (!BYTE7(v127))
  {
LABEL_53:
    v34 = 1;
    goto LABEL_54;
  }
  AuxiliaryImageStorageForIndex = _parseExifIfNeeded(a2 + 40, 0);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
  {
LABEL_265:
    WrappedPixelBufferForType = AuxiliaryImageStorageForIndex;
LABEL_266:
    v24 = 0;
    v25 = 0;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a2 + 281))
    goto LABEL_53;
  v34 = *(_DWORD *)(a2 + 304);
LABEL_54:
  v88 = v34;
  AuxiliaryImageStorageForIndex = CMPhotoDecompressionSessionCopyScaler(*(_QWORD *)(a2 + 16), &v124);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
    goto LABEL_265;
  AuxiliaryImageStorageForIndex = CMPhotoDecompressionSessionCopySurfacePool(*(_QWORD *)(a2 + 16), &v123);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
    goto LABEL_265;
  v118 = 0;
  v119 = 0;
  v117 = 0uLL;
  v116 = 0uLL;
  v115 = 0;
  v114 = 0;
  v110 = *(_OWORD *)v129;
  v111 = v130;
  v112 = *(_OWORD *)v131;
  v113 = v132;
  v106 = v126[1];
  v107 = v126[2];
  v108 = v127;
  v109 = v128;
  *(_OWORD *)value = *(_OWORD *)pixelFormat;
  v105 = v126[0];
  AuxiliaryImageStorageForIndex = _determineDecodeStrategy(a2, v11, (uint64_t)value, v98, v96, (uint64_t)v123, (unint64_t *)&v118, &v117, &v116, &v115, &v114);
  if ((_DWORD)AuxiliaryImageStorageForIndex)
    goto LABEL_265;
  if (*((_QWORD *)&v128 + 1))
  {
    value[0] = 0;
    value[1] = 0;
    CMPhotoGetPixelBufferCLAP(*((__CVBuffer **)&v128 + 1), 0, 0, value, &value[1]);
    if (*(_OWORD *)value != *(_OWORD *)&v116)
      goto LABEL_264;
  }
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a2 + 16), v11))
  {
LABEL_267:
    v24 = 0;
    v25 = 0;
    WrappedPixelBufferForType = 4294950191;
    goto LABEL_18;
  }
  if (BYTE5(v126[0]))
  {
    v102 = *(_OWORD *)((char *)v126 + 8);
    v103 = *(_OWORD *)((char *)&v126[1] + 8);
  }
  else
  {
    v102 = 0u;
    v103 = 0u;
  }
  v95 = v19;
  v35 = LOBYTE(pixelFormat[0]);
  v89 = a2 + 40;
  v90 = a5;
  if (a4 != 1 && LOBYTE(pixelFormat[0]))
  {
    v86 = a7;
    v87 = v11;
    v37 = v123;
    v36 = v124;
    v38 = DWORD2(v127);
    v39 = pixelFormat[1];
    v40 = v115;
    v41 = *(const __CFAllocator **)(a2 + 40);
    LODWORD(v11) = CMPhotoGetCPUCount();
    _dropPreparedDecoders(a2);
    if ((_DWORD)v11)
    {
      v42 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72));
      if ((_DWORD)v42)
      {
        WrappedPixelBufferForType = v42;
      }
      else
      {
        if (*(_QWORD *)(a2 + 88)
          || (Mutable = CFArrayCreateMutable(v41, 0, 0), (*(_QWORD *)(a2 + 88) = Mutable) != 0))
        {
          v44 = *(_QWORD *)(a2 + 96);
          *(_OWORD *)value = v102;
          v105 = v103;
          Clone = CMPhotoUnifiedJPEGDecoderPrepare(v44, (uint64_t)v37, (uint64_t)v36, v38, v39, (uint64_t)value, v40, v95);
          if (!(_DWORD)Clone)
          {
            v11 = (int)v11;
            while (1)
            {
              value[0] = 0;
              Clone = CMPhotoUnifiedJPEGDecoderCreateClone(*(_QWORD *)(a2 + 96), v95, value);
              if ((_DWORD)Clone)
                break;
              --v11;
              CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), value[0]);
              if (!v11)
              {
                *(_BYTE *)(a2 + 80) = 1;
                pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
                goto LABEL_76;
              }
            }
          }
          WrappedPixelBufferForType = Clone;
        }
        else
        {
          WrappedPixelBufferForType = 4294950305;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
      }
      v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      _dropPreparedDecoders(a2);
      goto LABEL_96;
    }
LABEL_76:
    v35 = LOBYTE(pixelFormat[0]);
    v11 = v87;
    a7 = v86;
  }
  if (v35)
  {
    v24 = 0;
    v25 = 0;
    WrappedPixelBufferForType = 0;
    goto LABEL_18;
  }
  if (v114)
    v46 = 1;
  else
    v46 = *((_QWORD *)&v128 + 1) == 0;
  if (v46)
    v47 = 0;
  else
    v47 = (__CVBuffer *)*((_QWORD *)&v128 + 1);
  if (a4)
  {
    WrappedPixelBufferForType = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a2 + 16), *(CFAllocatorRef *)(a2 + 40), v98, v96, v94, v92, v91, v94, 5, (uint64_t *)&v120);
    v48 = v95;
    if (!(_DWORD)WrappedPixelBufferForType)
    {
      v49 = 0;
      v50 = 0;
      goto LABEL_102;
    }
    goto LABEL_266;
  }
  v48 = v95;
  if (a10)
  {
    if (*(_BYTE *)(a2 + 80))
    {
      v51 = v11;
      v52 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72));
      if ((_DWORD)v52)
      {
        WrappedPixelBufferForType = v52;
      }
      else
      {
        v53 = *(const __CFArray **)(a2 + 88);
        if (CFArrayGetCount(v53) <= 0)
        {
          WrappedPixelBufferForType = FigSignalErrorAt();
        }
        else
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v53, 0);
          CFArrayRemoveValueAtIndex(v53, 0);
          WrappedPixelBufferForType = 0;
          v120 = ValueAtIndex;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
        v48 = v95;
      }
      v11 = v51;
      v50 = WrappedPixelBufferForType == 0;
    }
    else
    {
      v50 = 0;
      WrappedPixelBufferForType = 0;
    }
    if (!v120)
    {
      WrappedPixelBufferForType = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a2 + 16), *(CFAllocatorRef *)(a2 + 40), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), *(const void **)(a2 + 64), 0, 0, *(const void **)(a2 + 56), *(_DWORD *)(a2 + 48), (uint64_t *)&v120);
      if ((_DWORD)WrappedPixelBufferForType)
      {
        v25 = 0;
        v24 = 0;
        v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (!v50)
          goto LABEL_292;
        goto LABEL_281;
      }
    }
    v49 = 0;
  }
  else
  {
    v50 = 0;
    WrappedPixelBufferForType = 0;
    v120 = *(const void **)(a2 + 96);
    v49 = 1;
  }
LABEL_102:
  v99 = v50;
  v97 = v49;
  if (a4 != 2 && v131[12])
  {
    if (*(_DWORD *)v131 == 6)
    {
      v24 = 0;
      v25 = 0;
      if (!v11)
        goto LABEL_192;
      goto LABEL_191;
    }
    goto LABEL_274;
  }
  if (a4 != 2)
    goto LABEL_134;
  value[0] = 0;
  v55 = _getAuxiliaryImageStorageForIndex(v89, a7, v90, value);
  if ((_DWORD)v55)
  {
LABEL_275:
    WrappedPixelBufferForType = v55;
    v24 = 0;
    v25 = 0;
    goto LABEL_290;
  }
  v56 = *((_DWORD *)value[0] + 5);
  LODWORD(v133[0]) = 0;
  FigCFDictionaryGetInt32IfPresent();
  v57 = 1;
  if (v56 != 825306677 && v56 != 825437747)
    v57 = v56 == 1932996149;
  v58 = 1;
  if (v56 <= 1651926375)
  {
    if (v56 <= 1380410944)
    {
      if (v56 == 1278226534)
        goto LABEL_128;
      v59 = 1278226536;
    }
    else
    {
      if (v56 == 1380410945 || v56 == 1380411457)
        goto LABEL_128;
      v59 = 1647719528;
    }
  }
  else if (v56 > 1751410031)
  {
    if (v56 == 1751410032 || v56 == 1751411059)
      goto LABEL_128;
    v59 = 1751527984;
  }
  else
  {
    if (v56 == 1651926376 || v56 == 1717855600)
      goto LABEL_128;
    v59 = 1717856627;
  }
  if (v56 != v59)
    v58 = 0;
LABEL_128:
  if (LOBYTE(pixelFormat[2]))
  {
    if (LODWORD(v133[0]) != pixelFormat[1])
    {
      if (v57)
      {
        if (pixelFormat[1] != v56)
        {
LABEL_274:
          v55 = FigSignalErrorAt();
          goto LABEL_275;
        }
      }
      else if (v58 && !CMPhotoIsOutputFormatSupportedForNativeFloatingPoint(v56, pixelFormat[1]))
      {
        goto LABEL_274;
      }
    }
  }
  else
  {
    pixelFormat[1] = v56;
    LOBYTE(pixelFormat[2]) = 1;
  }
LABEL_134:
  *(_OWORD *)value = v102;
  v105 = v103;
  v55 = CMPhotoUnifiedJPEGDecoderDecode((uint64_t)v120, (uint64_t)v123, (uint64_t)v124, SDWORD2(v127), pixelFormat[1], BYTE1(v129[1]), value, v115, SBYTE1(pixelFormat[0]), v48, 0, v114, v47, &buffer);
  if ((_DWORD)v55)
    goto LABEL_275;
  v25 = 0;
  if (a4 != 2 && *(_BYTE *)(a2 + 457))
  {
    v25 = (const void *)MEMORY[0x1A85CF43C](*(_QWORD *)(a2 + 464));
    if (!v25)
    {
      v24 = 0;
      goto LABEL_289;
    }
    CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CD8], v25, kCVAttachmentMode_ShouldPropagate);
  }
  CMPhotoAddDefault601709MatrixToBufferIfAllowed(buffer, 1, 0);
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a2 + 16), v11))
  {
    v24 = 0;
    WrappedPixelBufferForType = 4294950191;
    goto LABEL_290;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(buffer);
  value[0] = 0;
  value[1] = 0;
  CMPhotoGetPixelBufferCLAP(buffer, 0, 0, value, &value[1]);
  if (v118 != value[0] || v119 != value[1])
    v114 = 1;
  if (a4 == 2 && PixelFormatType != pixelFormat[1])
  {
    *(_QWORD *)&v133[0] = 0;
    v137[0] = 0;
    FractionalPixelBuffer = _getAuxiliaryImageStorageForIndex(v89, a7, v90, v137);
    if ((_DWORD)FractionalPixelBuffer
      || (FractionalPixelBuffer = CMPhotoCreateFractionalPixelBuffer(buffer, v123, pixelFormat[1], BYTE1(v129[1]), *((const __CFDictionary **)v137[0] + 5), (CFTypeRef *)v133), (_DWORD)FractionalPixelBuffer))
    {
      WrappedPixelBufferForType = FractionalPixelBuffer;
      v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      v24 = 0;
      if (v50)
        goto LABEL_281;
      goto LABEL_291;
    }
    if (buffer)
      CFRelease(buffer);
    buffer = *(CVBufferRef *)&v133[0];
    PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)&v133[0]);
  }
  if (!v114
    && (!LOBYTE(pixelFormat[2]) || PixelFormatType == pixelFormat[1])
    && !CMPhotoPixelBufferHasCLAP(buffer))
  {
    v24 = 0;
    if (!*((_QWORD *)&v128 + 1) || *((CVBufferRef *)&v128 + 1) == buffer)
    {
LABEL_190:
      WrappedPixelBufferForType = 0;
      if (!v11)
        goto LABEL_192;
LABEL_191:
      if (CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a2 + 16), v11))
      {
        WrappedPixelBufferForType = 4294950191;
        v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        goto LABEL_280;
      }
LABEL_192:
      v70 = v11;
      v46 = a4 == 2;
      v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (v46)
        goto LABEL_245;
      v71 = *(_DWORD *)v131;
      v101 = 0;
      v100 = -1;
      FirstAuxiliaryOfTypeForInternalIndexWithOptions = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions((_QWORD *)a2, 0, 0, 4, (uint64_t)CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), (char *)&v101, &v100);
      if ((_DWORD)FirstAuxiliaryOfTypeForInternalIndexWithOptions)
      {
        WrappedPixelBufferForType = FirstAuxiliaryOfTypeForInternalIndexWithOptions;
        goto LABEL_280;
      }
      if (a7)
      {
        v73 = 0;
        v101 = 0;
      }
      else
      {
        v73 = v101;
        if (v101)
        {
LABEL_199:
          if (v71 != 6 && (v71 & 0xFFFFFFFD) == 0)
          {
LABEL_234:
            if (!cf || v71 == 6)
            {
              if (v71 != 6)
              {
                v81 = CMPhotoDecompressionContainerCheckHDROutputMode(buffer, *(unsigned int *)v131);
                if ((_DWORD)v81 != -16994)
                {
                  WrappedPixelBufferForType = v81;
                  if ((_DWORD)v81)
                    goto LABEL_280;
                }
              }
            }
            else
            {
              value[0] = 0;
              OutputFromConstituents = CMPhotoGainMapCreateOutputFromConstituents((int)v124, v123, BYTE1(v129[1]), (uint64_t)v129[0], v48, cf, *(int *)v131, v131[4], *(float *)&v131[8], v131[5], v131[6], v131[7], v132, (__CVBuffer **)value, 0);
              if ((_DWORD)OutputFromConstituents != -16994)
              {
                WrappedPixelBufferForType = OutputFromConstituents;
                if ((_DWORD)OutputFromConstituents)
                  goto LABEL_280;
                if (buffer)
                  CFRelease(buffer);
                buffer = (CVBufferRef)value[0];
              }
            }
            WrappedPixelBufferForType = 0;
LABEL_245:
            if (!a11)
              goto LABEL_280;
            if (a9 == 5)
            {
              if (!cf)
              {
                WrappedPixelBufferForType = 4294950304;
                goto LABEL_280;
              }
              *a11 = (CGImageRef)CFRetain(cf);
              if (!v70)
              {
LABEL_280:
                if (v99)
                  goto LABEL_281;
LABEL_291:
                if ((v97 & 1) != 0)
                  goto LABEL_293;
                goto LABEL_292;
              }
            }
            else
            {
              v82 = buffer;
              if (v129[0])
              {
                CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(buffer);
                CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v129[0], 0, 0, 0, buffer);
                v82 = buffer;
              }
              WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v93, v82, LOBYTE(v129[1]), a9, a11);
              if ((_DWORD)WrappedPixelBufferForType || !v70)
                goto LABEL_280;
            }
            if (CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a2 + 16), v70))
            {
              WrappedPixelBufferForType = 4294950191;
              if (v99)
                goto LABEL_281;
            }
            else if (v99)
            {
              goto LABEL_281;
            }
            goto LABEL_291;
          }
          if (!a7)
          {
            if (v73)
              CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex((_QWORD *)a2, 0, v100, (unsigned __int8 *)pixelFormat, (uint64_t)buffer, (__CFDictionary **)&cf);
            goto LABEL_234;
          }
          v74 = buffer;
          v136 = 0;
          v137[0] = 0;
          v134 = 0;
          v135 = 0;
          if (!*(_BYTE *)(a2 + 153))
          {
LABEL_228:
            if (v135)
              CFRelease(v135);
            if (v136)
              CFRelease(v136);
            if (v137[0])
              CFRelease(v137[0]);
            goto LABEL_234;
          }
          v75 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v75)
          {
            *(_OWORD *)value = *(_OWORD *)((char *)v126 + 8);
            v105 = *(_OWORD *)((char *)&v126[1] + 8);
            if (!CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage((_QWORD *)a2, 1, -128, BYTE5(v126[0]), (uint64x2_t *)value, BYTE7(v127), v137)&& !_createAuxiliaryImageForIndex(a2, 1uLL, -128, v137[0], 2, (uint64_t)&v136)&& *(_BYTE *)(a2 + 153))
            {
              v76 = *(const void **)(a2 + 248);
              if (v76)
              {
                v135 = (__CFDictionary *)CFRetain(v76);
              }
              else
              {
                if (CMPhotoGetChromaSubsamplingFromPixelFormat(*(unsigned int *)(a2 + 180)) == 6)
                  v77 = 1;
                else
                  v77 = 3;
                v107 = 0u;
                v108 = 0u;
                v105 = 0u;
                v106 = 0u;
                *(_OWORD *)value = 0u;
                if (CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(*(const CGImageMetadata **)(a2 + 184), v77, (uint64_t)value))goto LABEL_224;
                v133[2] = v106;
                v133[3] = v107;
                v133[4] = v108;
                v133[0] = *(_OWORD *)value;
                v133[1] = v105;
                if (CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata((uint64_t)v133, &v135))
                  goto LABEL_224;
              }
              if (!v74
                || (FigCFDictionarySetValue(),
                    LODWORD(value[0]) = 1,
                    _getImageGeometryForIndex(a2, 1uLL, v78, 0, 0, value))
                || !FigCFDictionarySetInt())
              {
                FigCFDictionarySetValue();
                LODWORD(value[0]) = 1;
                if (_getAuxiliaryImageGeometryForIndex(a2, 1uLL, 0xFFFFFFFFFFFFFF80, v79, 0, 0, value)|| !FigCFDictionarySetInt())
                {
                  FigCFDictionarySetValue();
                  if (v129[0])
                    goto LABEL_222;
                  v83 = _copyColorSpaceForIndex(a2, 1uLL, &v134);
                  if (v83 && v83 != -16993)
                    goto LABEL_224;
                  if (v134)
LABEL_222:
                    FigCFDictionarySetValue();
                  cf = v75;
                  v75 = 0;
                }
              }
            }
          }
LABEL_224:
          if (v134)
            CFRelease(v134);
          if (v75)
            CFRelease(v75);
          goto LABEL_228;
        }
      }
      if (v131[4])
        v131[4] = 0;
      goto LABEL_199;
    }
  }
  *(_QWORD *)&v133[0] = *((_QWORD *)&v128 + 1);
  if (!CMPhotoPixelFormatContainsRGB(PixelFormatType)
    || CMPhotoPixelFormatContainsRGB(pixelFormat[1]))
  {
    v64 = v11;
    v65 = 0;
    goto LABEL_179;
  }
  v66 = 1;
  if ((int)pixelFormat[1] <= 1278226735)
  {
    v64 = v11;
    if (pixelFormat[1] - 1278226488 <= 0x30 && ((1 << (LOBYTE(pixelFormat[1]) - 56)) & 0x1400000000001) != 0)
      goto LABEL_178;
    goto LABEL_172;
  }
  if (pixelFormat[1] - 1278226736 > 6 || ((1 << (LOBYTE(pixelFormat[1]) - 48)) & 0x45) == 0)
  {
    v64 = v11;
    if (pixelFormat[1] == 1717855600 || pixelFormat[1] == 1751410032)
      goto LABEL_178;
LABEL_172:
    v66 = pixelFormat[1] == 1751411059 || pixelFormat[1] == 1717856627;
    goto LABEL_178;
  }
  v64 = v11;
LABEL_178:
  v65 = !v66;
LABEL_179:
  if (!HIBYTE(pixelFormat[0]))
  {
    v24 = 0;
    goto LABEL_183;
  }
  v68 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = v68;
  if (!v68)
  {
LABEL_289:
    WrappedPixelBufferForType = 4294950305;
    goto LABEL_290;
  }
  CMPhotoCFDictionarySetBoolean(v68, CFSTR("PreferLowMemory"), HIBYTE(pixelFormat[0]));
LABEL_183:
  v69 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions((uint64_t)v124, buffer, v24, BYTE1(v129[1]) == 0, v88, pixelFormat[1], 0, v65, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)v117.u64[0], (double)v117.u64[1], v62, v63, 1u, 0, BYTE1(pixelFormat[0]),
          SBYTE2(v127),
          SBYTE3(v127),
          SBYTE2(v127),
          (__CVBuffer **)v133);
  if (!(_DWORD)v69)
  {
    if (*((_QWORD *)&v128 + 1) && *(_QWORD *)&v133[0])
      CFRetain(*(CFTypeRef *)&v133[0]);
    v11 = v64;
    if (buffer)
      CFRelease(buffer);
    buffer = *(CVBufferRef *)&v133[0];
    goto LABEL_190;
  }
  WrappedPixelBufferForType = v69;
LABEL_290:
  v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!v50)
    goto LABEL_291;
LABEL_281:
  v84 = v120;
  if (v120 && *(_BYTE *)(a2 + 80) && !pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72)))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), v84);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
    v84 = 0;
  }
  CMPhotoUnifiedJPEGDecoderDestroy((uint64_t)v84);
  v120 = 0;
LABEL_293:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (buffer)
    CFRelease(buffer);
  if (v124)
    CFRelease(v124);
  if (v24)
    CFRelease(v24);
  CMPhotoSurfacePoolMarkCachesVolatile((uint64_t)v123, 0);
  if (v123)
    CFRelease(v123);
  if (*v27 == 1)
    kdebug_trace();
  return WrappedPixelBufferForType;
}

uint64_t _decodeImage_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _BOOL8 a4, int a5, int a6, CGImageRef *a7)
{
  _DWORD *v14;
  uint64_t v15;
  OSType PixelFormatType;
  _BOOL4 v17;
  CFAllocatorRef v18;
  uint64_t v19;
  __CVBuffer *v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  const void *v24;
  int v25;
  uint64_t v26;
  int v27;
  __CFDictionary *Mutable;
  const __CFDictionary *v29;
  uint64_t DefaultTripletsForTransfer;
  int v31;
  double v32;
  double v33;
  uint64_t WrappedPixelBufferForType;
  __CVBuffer *v35;
  __int128 v37;
  _OWORD v38[4];
  __int128 v39;
  CVPixelBufferRef pixelBuffer[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  __CVBuffer *v50;
  CVPixelBufferRef v51;
  CFTypeRef v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;

  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (a2)
    goto LABEL_81;
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a1 + 16), a4))
    goto LABEL_84;
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)pixelBuffer = 0u;
  v41 = 0u;
  v39 = 0u;
  memset(v38, 0, sizeof(v38));
  v15 = _determineDecodeStrategy_0(a1, a3, *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), (uint64_t)v38);
  if ((_DWORD)v15)
    goto LABEL_82;
  if (a6 && LOBYTE(v38[0]))
    goto LABEL_81;
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a1 + 16), a4))
    goto LABEL_84;
  if (pixelBuffer[1])
  {
    v37 = 0uLL;
    CMPhotoGetPixelBufferCLAP(pixelBuffer[1], 0, 0, &v37, (_QWORD *)&v37 + 1);
    if (v37 == *(_OWORD *)&v49[1])
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer[1]);
      if (PixelFormatType != (_DWORD)v48)
      {
        FigSignalErrorAt();
        v21 = 0;
        goto LABEL_83;
      }
      goto LABEL_14;
    }
LABEL_81:
    v15 = FigSignalErrorAt();
    goto LABEL_82;
  }
LABEL_14:
  if (BYTE6(v48) | BYTE4(v48))
  {
    v17 = 1;
  }
  else
  {
    v17 = BYTE5(v48) != 0;
    if (!BYTE5(v48) && pixelBuffer[1])
    {
      v20 = (__CVBuffer *)CFRetain(pixelBuffer[1]);
      v17 = 0;
      v51 = v20;
      goto LABEL_25;
    }
  }
  v15 = CMPhotoDecompressionSessionCopySurfacePool(*(_QWORD *)(a1 + 16), &v53);
  if ((_DWORD)v15)
  {
LABEL_82:
    v21 = v15;
    goto LABEL_83;
  }
  if (BYTE9(v41))
  {
    v18 = CFGetAllocator((CFTypeRef)a1);
    v19 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v18, HIDWORD(v47), *((size_t *)&v46 + 1), v47, 1uLL, 1uLL, 0, 0, &v51);
  }
  else
  {
    v19 = CMPhotoSurfacePoolCreatePixelBuffer(v53, HIDWORD(v47), *((size_t *)&v46 + 1), v47, 1, 1uLL, 1uLL, 1, 0, 0, &v51);
  }
  v21 = v19;
  if ((_DWORD)v19)
    goto LABEL_83;
  v20 = v51;
LABEL_25:
  v22 = *(const void **)(a1 + 288);
  if (v22)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8CD8], v22, kCVAttachmentMode_ShouldPropagate);
    v20 = v51;
  }
  v23 = *(const void **)(a1 + 312);
  if (v23)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8E98], v23, kCVAttachmentMode_ShouldPropagate);
    v20 = v51;
  }
  v24 = *(const void **)(a1 + 304);
  if (v24)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8D68], v24, kCVAttachmentMode_ShouldPropagate);
    v20 = v51;
  }
  CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(v20, *(_DWORD *)(a1 + 144) == 0, 0);
  v15 = CVPixelBufferLockBaseAddress(v51, 0);
  if ((_DWORD)v15)
    goto LABEL_82;
  if (*v14 == 1)
    kdebug_trace();
  v25 = _createPreparedJXLDecoder(a1, 4352, *((uint64_t *)&v46 + 1), v47, &v55, &v54);
  if (*v14 == 1)
  {
    kdebug_trace();
    if (*v14 == 1)
      kdebug_trace();
  }
  if (v25 == 256)
  {
    v26 = _configureJXLColor(*(const __CFAllocator **)(a1 + 40), v55, *(unsigned __int8 *)(a1 + 120), 0, 0, 0);
    if ((_DWORD)v26)
    {
      v21 = v26;
      goto LABEL_80;
    }
    v25 = JxlDecoderProcessInput();
  }
  if (v25 != 5)
    goto LABEL_79;
  CVPixelBufferGetBytesPerRow(v51);
  CVPixelBufferGetBaseAddress(v51);
  if (JxlDecoderSetImageOutCallback() || JxlDecoderSetImageOutBitDepth())
    goto LABEL_79;
  v27 = JxlDecoderProcessInput();
  if (*v14 == 1)
    kdebug_trace();
  if ((v27 & 0xFFFFEFFF) != 0)
  {
LABEL_79:
    v21 = 4294950194;
LABEL_80:
    CVPixelBufferUnlockBaseAddress(v51, 0);
LABEL_83:
    v29 = 0;
    goto LABEL_66;
  }
  CVPixelBufferUnlockBaseAddress(v51, 0);
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a1 + 16), a4))
  {
LABEL_84:
    v29 = 0;
LABEL_85:
    v21 = 4294950191;
    goto LABEL_66;
  }
  if (!v17)
  {
    v29 = 0;
    goto LABEL_61;
  }
  v15 = CMPhotoDecompressionSessionCopyScaler(*(_QWORD *)(a1 + 16), &v52);
  if ((_DWORD)v15)
    goto LABEL_82;
  if (BYTE3(v38[0]))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v29 = Mutable;
    if (!Mutable)
    {
      v21 = 4294950305;
      goto LABEL_66;
    }
    CMPhotoCFDictionarySetBoolean(Mutable, CFSTR("PreferLowMemory"), BYTE3(v38[0]));
  }
  else
  {
    v29 = 0;
  }
  if (pixelBuffer[1])
    v50 = (__CVBuffer *)CFRetain(pixelBuffer[1]);
  DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v51, v48);
  WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions((uint64_t)v52, v51, v29, BYTE9(v41) == 0, SDWORD2(v47), v48, DefaultTripletsForTransfer, v31, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)*((unint64_t *)&v48 + 1), (double)v49[0], v32, v33, 1u, 0, BYTE1(v38[0]),
                                SBYTE2(v39),
                                SBYTE3(v39),
                                SBYTE4(v39),
                                &v50);
  if ((_DWORD)WrappedPixelBufferForType)
    goto LABEL_65;
  if (v51)
    CFRelease(v51);
  v35 = v50;
  v50 = 0;
  v51 = v35;
LABEL_61:
  if (a7)
  {
    if (!a4 || !CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a1 + 16), a4))
    {
      WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(*(const __CFAllocator **)(a1 + 40), v51, BYTE8(v41), a5, a7);
LABEL_65:
      v21 = WrappedPixelBufferForType;
      goto LABEL_66;
    }
    goto LABEL_85;
  }
  v21 = 0;
LABEL_66:
  JxlThreadParallelRunnerDestroy();
  JxlDecoderDestroy();
  if (v53)
    CFRelease(v53);
  if (v52)
    CFRelease(v52);
  if (v29)
    CFRelease(v29);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (*v14 == 1)
    kdebug_trace();
  return v21;
}

uint64_t _decodeImage_1(_QWORD *a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, _BOOL8 a6, int a7, int a8, CGImageRef *a9)
{
  int v16;
  uint64_t ItemTypeFromReader;
  __n128 v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  _BOOL4 v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t WrappedPixelBufferForType;
  __CVBuffer *v28;
  uint64_t v29;
  __CVBuffer *v30;
  const __CFAllocator *v31;
  int v33;
  __int128 v35[6];
  uint64_t v36;
  unsigned __int8 v37;
  _OWORD v38[4];
  __int128 v39;
  __int128 v40;
  CFTypeRef value[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  CFMutableDictionaryRef Mutable;
  __CVBuffer *v62;
  CVPixelBufferRef v63;

  v62 = 0;
  v63 = 0;
  Mutable = 0;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  *(_OWORD *)value = 0u;
  v39 = 0u;
  memset(v38, 0, sizeof(v38));
  if (a6)
    v16 = a6;
  else
    v16 = (int)a1;
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
  }
  *(_QWORD *)&v55 = a6;
  *((_QWORD *)&v55 + 1) = a1;
  v33 = v16;
  if (a6 && CMPhotoDecompressionSessionAsyncRequestCancelled(a1[2], a6))
    goto LABEL_88;
  v18 = _determineDecodeStrategy_1((uint64_t)a1, a2, a3, a5, 0, a8, 0, (uint64_t)v38);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  if (a7 == 1 && BYTE1(value[1]) || (v19 = v43, a7 == 5) && (_DWORD)v43 != 6)
  {
    ItemTypeFromReader = FigSignalErrorAt();
    goto LABEL_86;
  }
  if (a4 == -1)
  {
    v21 = 0;
    v20 = 0;
    v37 = 0;
    v36 = -1;
    goto LABEL_27;
  }
  if (_getEncoderNativePixelFormatForIndex(*((_QWORD **)&v55 + 1), a4, (int *)((unint64_t)v38 | 0xC)))HIDWORD(v38[0]) = 0;
  LODWORD(v35[0]) = 0;
  ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, v35);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  v20 = LODWORD(v35[0]) == 1953325424;
  if (LODWORD(v35[0]) == 1953325424 && FigCFDictionaryGetValue() && !(_DWORD)v43)
    LODWORD(v43) = 1;
  v37 = 0;
  v36 = -1;
  if (!a8)
  {
    ItemTypeFromReader = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a4, 0, 4, (uint64_t)CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), (char *)&v37, &v36);
    if (!(_DWORD)ItemTypeFromReader)
    {
      v21 = v37;
      goto LABEL_27;
    }
LABEL_86:
    WrappedPixelBufferForType = ItemTypeFromReader;
LABEL_87:
    v26 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    goto LABEL_71;
  }
  v21 = 0;
LABEL_27:
  v22 = v43;
  *((_QWORD *)&v58 + 1) = v43;
  LODWORD(v59) = DWORD2(v43);
  v18.n128_u32[0] = DWORD1(v43);
  WORD2(v59) = WORD6(v43);
  *(CFTypeRef *)&v60 = value[0];
  DWORD2(v60) = HIDWORD(v38[0]);
  if (v20 && v21)
  {
    v21 = 0;
    v37 = 0;
  }
  if (!v21 && vmovl_u8((uint8x8_t)v18.n128_u64[0]).u8[0])
    BYTE12(v58) = 0;
  *((_QWORD *)&v59 + 1) = v44;
  LOBYTE(v58) = BYTE1(v38[0]);
  BYTE2(v58) = BYTE2(v39);
  *(_WORD *)((char *)&v58 + 3) = *(_WORD *)((char *)&v39 + 3);
  BYTE8(v57) = BYTE6(v54);
  HIDWORD(v57) = DWORD2(v39);
  BYTE1(v58) = BYTE1(value[1]);
  BYTE5(v58) = BYTE8(v42);
  ItemTypeFromReader = CMPhotoDecompressionSessionCopyScaler(a1[2], &v57);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  ItemTypeFromReader = CMPhotoDecompressionSessionCopySurfacePool(a1[2], (_QWORD *)&v56 + 1);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  ItemTypeFromReader = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(a1[2], &v56);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  v35[2] = v57;
  v35[3] = v58;
  v35[4] = v59;
  v35[5] = v60;
  v35[0] = v55;
  v35[1] = v56;
  ItemTypeFromReader = _applyDecodeStrategy(v35, (uint64_t)v38, a2, a3, a8, (CFTypeRef *)&Mutable, &v63);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_86;
  if ((_QWORD)v55 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(*((_QWORD *)&v55 + 1) + 16), v55))
  {
LABEL_88:
    WrappedPixelBufferForType = 4294950191;
    goto LABEL_87;
  }
  v24 = v19 == 6 || (v22 & 0xFFFFFFFD) != 0;
  if (v37 && v24)
    CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex(a1, a4, v36, (unsigned __int8 *)v38, (uint64_t)v63, &Mutable);
  if (!Mutable || v19 == 6)
  {
    v26 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (v19 != 6)
    {
      v29 = CMPhotoDecompressionContainerCheckHDROutputMode(v63, DWORD2(v58));
      if ((_DWORD)v29 != -16994)
      {
        WrappedPixelBufferForType = v29;
        if ((_DWORD)v29)
          goto LABEL_71;
      }
    }
  }
  else
  {
    v25 = CMPhotoGainMapCreateOutputFromConstituents(v57, *((const void **)&v56 + 1), BYTE1(v58), v60, v33, Mutable, SDWORD2(v58), BYTE12(v58), *(float *)&v59, BYTE13(v58), BYTE14(v58), SHIBYTE(v58), *((uint64_t *)&v59 + 1), &v62, 0);
    v26 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if ((_DWORD)v25 != -16994)
    {
      WrappedPixelBufferForType = v25;
      if ((_DWORD)v25)
        goto LABEL_71;
      if (v63)
        CFRelease(v63);
      v28 = v62;
      v62 = 0;
      v63 = v28;
    }
  }
  if (!Mutable && !(v37 | v20) && v19 == 6)
  {
    LODWORD(v35[0]) = 1;
    _getImageOrientation((uint64_t)a1, a2, 0, v35);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      WrappedPixelBufferForType = 4294950305;
      goto LABEL_73;
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetInt();
  }
  if ((_QWORD)v55 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(*((_QWORD *)&v55 + 1) + 16), v55))
  {
    WrappedPixelBufferForType = 4294950191;
  }
  else if (a7 == 5)
  {
    if (!Mutable)
    {
      WrappedPixelBufferForType = 4294950304;
      goto LABEL_73;
    }
    WrappedPixelBufferForType = 0;
    *a9 = (CGImageRef)CFRetain(Mutable);
  }
  else
  {
    v30 = v63;
    if (value[0])
    {
      CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(v63);
      CMPhotoAddColorInformationToPixelBufferAccordingToFormat(value[0], 0, 0, 0, v30);
    }
    v31 = CFGetAllocator(a1);
    WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v31, v30, LOBYTE(value[1]), a7, a9);
  }
LABEL_71:
  if (Mutable)
    CFRelease(Mutable);
LABEL_73:
  if (v62)
    CFRelease(v62);
  if (v63)
    CFRelease(v63);
  if ((_QWORD)v57)
    CFRelease((CFTypeRef)v57);
  CMPhotoSurfacePoolMarkCachesVolatile(*((uint64_t *)&v56 + 1), 0);
  if (*((_QWORD *)&v56 + 1))
    CFRelease(*((CFTypeRef *)&v56 + 1));
  if (*v26 == 1)
  {
    kdebug_trace();
    if (*v26 == 1)
      kdebug_trace();
  }
  return WrappedPixelBufferForType;
}

uint64_t _parseImageSizeAndTypeIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  uint64_t ImageInformationFromJFIFByteStream;

  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(a1 + 64))
  {
    v3 = 0;
  }
  else
  {
    v4 = (const void **)(a1 + 104);
    ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream(*(_QWORD *)(a1 + 24), 0, (_QWORD *)(a1 + 72), (int *)(a1 + 88), (BOOL *)(a1 + 92), (_BYTE *)(a1 + 93), (_DWORD *)(a1 + 96), (_QWORD *)(a1 + 104));
    if ((_DWORD)ImageInformationFromJFIFByteStream)
    {
      v3 = ImageInformationFromJFIFByteStream;
    }
    else
    {
      if (*v4)
        CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(*v4, 1, 0);
      v3 = 0;
      *(_BYTE *)(a1 + 64) = 1;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

BOOL CMPhotoDecompressionSessionAsyncRequestCancelled(uint64_t a1, _BOOL8 a2)
{
  _BOOL8 v2;
  os_unfair_lock_s *v4;

  v2 = a2;
  if (a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v2 = CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)v2) == 0;
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

uint64_t CMPhotoSetPixelBufferCLAPFromRect(__CVBuffer *a1, int a2, int a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  double v14;
  double v15;
  double PixelBufferCLAPAsRect;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  const __CFAllocator *v27;
  double Width;
  size_t Height;
  uint64_t PixelBufferCLAPDictionaryFromRect;
  CFTypeRef v31;
  CFTypeRef value;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  value = 0;
  if (!a1)
    return FigSignalErrorAt();
  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  v18 = v17;
  v19 = v14;
  v20 = v15;
  v21 = -0.0;
  if (a2)
    v22 = PixelBufferCLAPAsRect;
  else
    v22 = -0.0;
  v23 = a4 + v22;
  if (a2)
    v21 = v18;
  v24 = a5 + v21;
  v25 = PixelBufferCLAPAsRect;
  v26 = v18;
  v35.origin.x = v23;
  v35.origin.y = v24;
  v35.size.width = a6;
  v35.size.height = a7;
  if (!CGRectContainsRect(*(CGRect *)(&v14 - 2), v35))
    return FigSignalErrorAt();
  v34.origin.x = PixelBufferCLAPAsRect;
  v34.origin.y = v18;
  v34.size.width = v19;
  v34.size.height = v20;
  v36.origin.x = v23;
  v36.origin.y = v24;
  v36.size.width = a6;
  v36.size.height = a7;
  if (CGRectEqualToRect(v34, v36))
    return 0;
  v27 = CFGetAllocator(a1);
  Width = (double)CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(v27, (__CFDictionary **)&value, Width, (double)Height, v23, v24, a6, a7);
  v31 = value;
  if (!(_DWORD)PixelBufferCLAPDictionaryFromRect)
  {
    CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], value, (CVAttachmentMode)(a3 != 0));
    v31 = value;
  }
  if (v31)
    CFRelease(v31);
  return PixelBufferCLAPDictionaryFromRect;
}

void _canvasItemDecodeCallback(int a1, int a2, CVBufferRef buffer, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  _BOOL8 *v10;
  const void *v11;
  const void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  CFTypeRef v16;
  dispatch_block_t v17;
  _QWORD block[8];
  int v19;
  char v20;

  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    if (*v9 == 1)
      kdebug_trace();
  }
  if (*(_DWORD *)(a4 + 14580) | a2)
    goto LABEL_11;
  v10 = *(_BOOL8 **)(a4 + 8);
  if (*v10 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(v10[1] + 16), *v10))
  {
    a2 = -17105;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a4 + 156))
  {
    CMPhotoRemoveColorInformationGuessedBy(buffer);
    CMPhotoRemoveChromaInformationFromBuffer(buffer);
  }
  if (*(_BYTE *)(a4 + 158))
  {
    a2 = 0;
LABEL_11:
    v11 = *(const void **)(a5 + 208);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a5 + 208) = 0;
    }
    v12 = *(const void **)(a5 + 216);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a5 + 216) = 0;
    }
    _asyncCanvasDecodeFinished(a4, (const void *)a5, a2, 0);
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a5 + 48)
    && (v13 = CMPhotoSetPixelBufferCLAPFromRect(buffer, 1, 1, (double)*(unint64_t *)(a4 + 176), (double)*(unint64_t *)(a4 + 184), (double)*(unint64_t *)(a4 + 192), (double)*(unint64_t *)(a4 + 200))) != 0|| ((v14 = *(_QWORD *)(a5 + 72), v15 = *(_QWORD *)(a5 + 80), *(_OWORD *)(a5 + 56) != 0) || v14 | v15)&& (v13 = CMPhotoSetPixelBufferCLAPFromRect(buffer, 1, 1, (double)*(unint64_t *)(a5 + 56), (double)*(unint64_t *)(a5 + 64), (double)v14, (double)v15)) != 0)
  {
    a2 = v13;
    goto LABEL_11;
  }
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*(CFTypeRef *)(a4 + 48), *(const void **)(a4 + 56), *(const void **)(a4 + 64), *(const void **)(a4 + 72), buffer);
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 84), buffer);
  if (!*(_QWORD *)(a5 + 208))
  {
    if (buffer)
      v16 = CFRetain(buffer);
    else
      v16 = 0;
    *(_QWORD *)(a5 + 208) = v16;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___canvasItemDecodeCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_11_0;
  block[4] = a5;
  block[5] = a4;
  block[6] = a5;
  block[7] = buffer;
  v19 = 0;
  v20 = 1;
  v17 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
  os_unfair_lock_lock((os_unfair_lock_t)(a4 + 14576));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a4 + 14592), v17);
  dispatch_async(*(dispatch_queue_t *)(a5 + 40), v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(a4 + 14576));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a4 + 224));
LABEL_27:
  if (*v9 == 1)
    kdebug_trace();
}

double CMPhotoGetPixelBufferCLAPAsRect(__CVBuffer *a1)
{
  double PixelBufferSize;
  double v3;
  double v4;
  const __CFDictionary *v5;
  double CropRectFromCLAPDict;

  PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  v4 = v3;
  v5 = (const __CFDictionary *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(v5, PixelBufferSize, v4);
  if (v5)
    CFRelease(v5);
  return CropRectFromCLAPDict;
}

double CMPhotoGetPixelBufferSize(__CVBuffer *a1)
{
  double Width;

  if (!a1)
    return 0.0;
  Width = (double)CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return Width;
}

double CMPhotoGetCropRectFromCLAPDict(const __CFDictionary *a1, double a2, double a3)
{
  double v4;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  int v13;
  int v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFTypeID v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFTypeID v20;
  int v21;
  int v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFTypeID v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  int v32;
  int v33;

  v4 = a2;
  v30 = 0.0;
  v31 = 0;
  v28 = a2;
  v29 = a3;
  if (!a1)
    goto LABEL_28;
  v6 = (const void *)*MEMORY[0x1E0CA22F8];
  if (!CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA22F8])
    || (v7 = (const void *)*MEMORY[0x1E0CA22C8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA22C8]))
    || (v8 = (const void *)*MEMORY[0x1E0CA22D8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA22D8]))
    || (v9 = (const void *)*MEMORY[0x1E0CA22E8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA22E8])))
  {
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E0CA8D60], &v28);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E0CA8D40], &v29);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E0CA8D48], &v30);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E0CA8D58], &v31);
    v26 = v30;
    v4 = v28;
    return round(v26 + (a2 - v4) * 0.5);
  }
  Value = (const __CFArray *)CFDictionaryGetValue(a1, v6);
  v32 = 1;
  v33 = 0;
  if (!Value)
    goto LABEL_28;
  v11 = Value;
  v12 = CFGetTypeID(Value);
  if (v12 != CFArrayGetTypeID())
    goto LABEL_28;
  if (CFArrayGetCount(v11) != 2)
    goto LABEL_28;
  if (!FigCFArrayGetInt32AtIndex())
    goto LABEL_28;
  if (!FigCFArrayGetInt32AtIndex())
    goto LABEL_28;
  v13 = v32;
  v14 = v33;
  v15 = (const __CFArray *)CFDictionaryGetValue(a1, v7);
  v32 = 1;
  v33 = 0;
  if (!v15)
    goto LABEL_28;
  v16 = v15;
  v17 = CFGetTypeID(v15);
  if (v17 != CFArrayGetTypeID())
    goto LABEL_28;
  if (CFArrayGetCount(v16) != 2)
    goto LABEL_28;
  if (!FigCFArrayGetInt32AtIndex())
    goto LABEL_28;
  if (!FigCFArrayGetInt32AtIndex())
    goto LABEL_28;
  v18 = (const __CFArray *)CFDictionaryGetValue(a1, v8);
  v32 = 1;
  v33 = 0;
  if (!v18)
    goto LABEL_28;
  v19 = v18;
  v20 = CFGetTypeID(v18);
  if (v20 != CFArrayGetTypeID()
    || CFArrayGetCount(v19) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex()
    || (v21 = v32, v22 = v33, v23 = (const __CFArray *)CFDictionaryGetValue(a1, v9), v32 = 1, v33 = 0, !v23)
    || (v24 = v23, v25 = CFGetTypeID(v23), v25 != CFArrayGetTypeID())
    || CFArrayGetCount(v24) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex())
  {
LABEL_28:
    v26 = 0.0;
    return round(v26 + (a2 - v4) * 0.5);
  }
  v4 = (double)v14 / (double)v13;
  v26 = (double)v22 / (double)v21;
  return round(v26 + (a2 - v4) * 0.5);
}

uint64_t CMPhotoCFDictionaryGetDoubleIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  int CPUCount;
  CFMutableSetRef Mutable;
  uint64_t AsyncQueueElements;
  dispatch_queue_t v11;
  __CFString *Value;
  __CFString *v13;
  CFTypeID v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  uint64_t v18;
  int v20;

  if (!a3)
    return 4294950306;
  FigKTraceInit();
  pthread_once(&CMPhotoDecompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v7 = (_QWORD *)Instance;
  *(_DWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 272) = 0;
  *(_QWORD *)(Instance + 280) = 0;
  *(_QWORD *)(Instance + 288) = 0;
  *(_QWORD *)(Instance + 296) = 0;
  *(_QWORD *)(Instance + 320) = 0;
  *(_QWORD *)(Instance + 24) = 1;
  CPUCount = CMPhotoGetCPUCount();
  v20 = 1;
  if (a2)
  {
    CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("LimitedConcurrencySlots"), &v20);
    if (v20 <= 0)
    {
      AsyncQueueElements = FigSignalErrorAt();
      goto LABEL_23;
    }
  }
  Mutable = CFSetCreateMutable(a1, 0, 0);
  v7[4] = Mutable;
  if (!Mutable)
  {
LABEL_19:
    v18 = 4294950305;
LABEL_24:
    CFRelease(v7);
    return v18;
  }
  AsyncQueueElements = _createAsyncQueueElements(a1, (uint64_t)(v7 + 18), "com.apple.CMPhoto.sw.feederQueue", "com.apple.CMPhoto.sw.workerQueue", CPUCount, 0);
  if ((_DWORD)AsyncQueueElements
    || (AsyncQueueElements = _createAsyncQueueElements(a1, (uint64_t)(v7 + 24), "com.apple.CMPhoto.limitedConcurrency.feederQueue", "com.apple.CMPhoto.limitedConcurrency.workerQueue", v20, 3), (_DWORD)AsyncQueueElements))
  {
LABEL_23:
    v18 = AsyncQueueElements;
    goto LABEL_24;
  }
  v11 = dispatch_queue_create("com.apple.CMPhoto.hwQueueSynchronizer", 0);
  v7[5] = v11;
  if (!v11)
    goto LABEL_19;
  if (a2)
  {
    Value = (__CFString *)CFDictionaryGetValue(a2, CFSTR("SurfacePool"));
    if (Value)
    {
      v13 = Value;
      v14 = CFGetTypeID(Value);
      if (v14 == CMPhotoSurfacePoolGetTypeID() || v13 == CFSTR("SurfacePoolOneShot"))
        v7[34] = CFRetain(v13);
    }
    v15 = CFDictionaryGetValue(a2, CFSTR("Scaler"));
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CMPhotoScaleAndRotateSessionGetTypeID())
        v7[35] = CFRetain(v16);
    }
  }
  v18 = 0;
  *a3 = v7;
  return v18;
}

uint64_t _createAsyncQueueElements(const __CFAllocator *a1, uint64_t a2, char *label, const char *a4, int a5, int a6)
{
  dispatch_queue_t v11;
  dispatch_queue_t v12;
  dispatch_semaphore_t v13;
  CFMutableArrayRef Mutable;
  uint64_t v15;

  if (a5 < 1)
  {
    v15 = 4294950306;
    if (!a2)
      return v15;
    goto LABEL_9;
  }
  v11 = dispatch_queue_create(label, 0);
  *(_QWORD *)(a2 + 16) = v11;
  if (!v11
    || (v12 = dispatch_queue_create(a4, MEMORY[0x1E0C80D50]), (*(_QWORD *)(a2 + 8) = v12) == 0)
    || (v13 = dispatch_semaphore_create(a5), (*(_QWORD *)(a2 + 24) = v13) == 0)
    || (Mutable = CFArrayCreateMutable(a1, 0, 0), (*(_QWORD *)(a2 + 32) = Mutable) == 0))
  {
    v15 = 4294950305;
LABEL_9:
    _releaseAsyncQueueElements((_QWORD *)a2);
    return v15;
  }
  v15 = 0;
  *(_DWORD *)(a2 + 40) = a6;
  return v15;
}

uint64_t VTTileDecompressionPluginClass_decode(uint64_t a1, CFDictionaryRef theDict, CFTypeRef a3, uint64_t a4)
{
  uint64_t v4;
  const void *Value;
  const void *v10;
  const void *v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  const void *v17;
  CFTypeRef v18;
  CFTypeRef v19;

  v4 = *(_QWORD *)(a1 + 64);
  if (!theDict)
    goto LABEL_13;
  Value = CFDictionaryGetValue(theDict, CFSTR("CanvasPixelBuffer"));
  v10 = CFDictionaryGetValue(theDict, CFSTR("TilePixelBuffer"));
  v11 = CFDictionaryGetValue(theDict, CFSTR("CanvasOrigin"));
  if (!Value)
  {
    Value = v10;
    if (v10)
      goto LABEL_6;
LABEL_13:
    v13 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (v11)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
  }
LABEL_6:
  v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!*(_BYTE *)(v4 + 25))
  {
    if (*(_BYTE *)(v4 + 24))
    {
      if (*v12 == 1)
        kdebug_trace();
      v13 = VTTileDecompressionSessionDecodeTile();
      if (*v12 == 1)
        goto LABEL_18;
      goto LABEL_19;
    }
    v15 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040518B8D9EuLL);
    if (!v15)
    {
      *(_BYTE *)v4 = 1;
      return 4294950305;
    }
    v16 = v15;
    v17 = *(const void **)(v4 + 8);
    if (v17)
    {
      v18 = CFRetain(v17);
      if (!a3)
      {
LABEL_27:
        v19 = CFRetain(Value);
        *v16 = a1;
        v16[1] = v18;
        v16[2] = a3;
        v16[3] = v19;
        v16[4] = 0;
        v16[5] = -1;
        v16[6] = a4;
        dispatch_async_f(*(dispatch_queue_t *)(v4 + 32), v16, (dispatch_function_t)_dispatch_tileDecodeTileAsync);
        return 0;
      }
    }
    else
    {
      v18 = 0;
      if (!a3)
        goto LABEL_27;
    }
    a3 = CFRetain(a3);
    goto LABEL_27;
  }
  if (*v12 == 1)
    kdebug_trace();
  v13 = VTTileDecompressionSessionDecodeTile();
  if (*v12 == 1)
LABEL_18:
    kdebug_trace();
LABEL_19:
  if (!v13)
    return 0;
  *(_BYTE *)v4 = 1;
  if ((v13 | 2) == 0x44E)
    return 4294951826;
  else
    return v13;
}

uint64_t CMPhotoDecompressionSessionCreateContainer(const void *a1, const __CFDictionary *a2, const __CFData *a3, unsigned int *a4, uint64_t *a5)
{
  CFAllocatorRef v10;

  if (!a1 || !a3 || !a5)
    return 4294950306;
  v10 = CFGetAllocator(a1);
  return CMPhotoDecompressionContainerCreate((uint64_t)v10, a3, a2, (uint64_t)a1, a4, a5);
}

uint64_t CMPhotoDecompressionContainerCreate(uint64_t a1, const __CFData *a2, const __CFDictionary *a3, uint64_t a4, unsigned int *a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v12;
  CFTypeRef v13;
  const void *v14;
  unsigned int v15;
  uint64_t (**v16)();
  uint64_t v17;
  CFAllocatorRef v18;
  uint64_t (*v19)(uint64_t, int64_t *);
  const __CFAllocator *v20;
  uint64_t v21;
  CFIndex v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t (*v25)(uint64_t, char **);
  CFIndex Count;
  int64_t v27;
  _BYTE *v28;
  __CFArray *Mutable;
  CFMutableDictionaryRef v30;
  void *v31;
  const __CFDictionary *v32;
  CFIndex i;
  const __CFArray *v34;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v36;
  const __CFArray *v37;
  uint64_t v38;
  const __CFDictionary *v39;
  const __CFString *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, void **);
  uint64_t v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  char *v53;
  const __CFDictionary *v54;
  const __CFDictionary *v55;
  CFTypeID v56;
  const void *v57;
  const void *v58;
  const __CFNumber *Size;
  void *v61;
  void *v62;
  __CFDictionary *theDict;
  unsigned int v64;
  CFTypeRef cf;
  void *value[9];
  _QWORD v67[4];
  int64_t v68;
  char *v69;
  CFTypeRef v70[2];
  CFRange v71;

  cf = 0;
  if (!a6)
    return 4294950306;
  v64 = 0;
  pthread_once(&CMPhotoDecompressionContainerGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionContainer);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v41 = 4294950305;
    goto LABEL_94;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a4 + 16));
  v12 = *(_QWORD *)(a4 + 320) + 1;
  *(_QWORD *)(a4 + 320) = v12;
  *(_QWORD *)(Instance + 496) = v12;
  os_unfair_lock_unlock((os_unfair_lock_t)(a4 + 16));
  v13 = CFRetain((CFTypeRef)a4);
  *(_BYTE *)(Instance + 28) = 0;
  *(_QWORD *)(Instance + 16) = v13;
  if (a3)
  {
    *(_BYTE *)(Instance + 25) = CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("PreferSoftwareCodec"), (_BYTE *)(Instance + 24));
    *(_BYTE *)(Instance + 27) = CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("RequireHardwareCodec"), (_BYTE *)(Instance + 26));
    v14 = CFDictionaryGetValue(a3, CFSTR("SequenceInfo"));
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("UseLenientParsingMode"), (_BYTE *)(Instance + 28));
  }
  else
  {
    v14 = 0;
  }
  if (*(_BYTE *)(Instance + 26))
    *(_BYTE *)(Instance + 24) = 0;
  if (v14)
  {
    v15 = 0;
    v64 = 0;
    v16 = CMPhotoDecompressionContainerVTableHEICS;
    goto LABEL_14;
  }
  v17 = CMPhotoByteStreamCreateFromSource(a2, 0, 0, 0, &cf, 0);
  if ((_DWORD)v17 || (v17 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, (int *)&v64), (_DWORD)v17))
  {
LABEL_52:
    v41 = v17;
    goto LABEL_94;
  }
  v15 = v64;
  if (v64 >= 3)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_52;
  }
  v16 = off_1E53F5E98[v64];
LABEL_14:
  *(_QWORD *)(Instance + 32) = v16;
  *(_DWORD *)(Instance + 536) = v15;
  if (!*v16)
  {
    v41 = 4294950302;
    goto LABEL_94;
  }
  v17 = ((uint64_t (*)(uint64_t, const __CFDictionary *, CFTypeRef, const __CFData *))*v16)(Instance, a3, cf, a2);
  if ((_DWORD)v17)
    goto LABEL_52;
  v18 = CFGetAllocator((CFTypeRef)Instance);
  v70[0] = 0;
  v68 = 0;
  v69 = 0;
  v19 = *(uint64_t (**)(uint64_t, int64_t *))(*(_QWORD *)(Instance + 32) + 24);
  if (!v19)
  {
    Mutable = 0;
    v30 = 0;
    v42 = 0;
    v32 = 0;
    v28 = 0;
    v41 = 4294950302;
    goto LABEL_84;
  }
  v20 = v18;
  v21 = v19(Instance, &v68);
  if ((_DWORD)v21)
    goto LABEL_106;
  v22 = v68;
  if (!v68)
  {
    v27 = 0;
    Mutable = 0;
    v30 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v28 = 0;
LABEL_83:
    v41 = 0;
    *(_QWORD *)(Instance + 544) = Mutable;
    *(_QWORD *)(Instance + 552) = v43;
    *(_QWORD *)(Instance + 560) = v44;
    *(_QWORD *)(Instance + 568) = v45;
    *(_QWORD *)(Instance + 576) = v27;
    *(_QWORD *)(Instance + 584) = v22;
    Mutable = 0;
    v42 = 0;
    v32 = 0;
    goto LABEL_84;
  }
  v23 = *(_QWORD *)(Instance + 32);
  v24 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v23 + 320);
  if (v24)
  {
    v24(Instance, 1, v70);
    v23 = *(_QWORD *)(Instance + 32);
  }
  v25 = *(uint64_t (**)(uint64_t, char **))(v23 + 32);
  if (v25)
  {
    v21 = v25(Instance, &v69);
    if ((_DWORD)v21)
    {
LABEL_106:
      v41 = v21;
      Mutable = 0;
      v30 = 0;
      v42 = 0;
      v32 = 0;
      v28 = 0;
      goto LABEL_84;
    }
  }
  if (!v70[0])
  {
    v27 = v68;
    goto LABEL_55;
  }
  Count = CFArrayGetCount((CFArrayRef)v70[0]);
  v27 = v68;
  if (!Count)
  {
LABEL_55:
    Mutable = 0;
    v30 = 0;
    v43 = 0;
    v44 = 0;
    v28 = 0;
    v45 = v69;
    v22 = v27;
    goto LABEL_83;
  }
  v28 = malloc_type_calloc(v68, 1uLL, 0x100004077774924uLL);
  if (!v28)
  {
    Mutable = 0;
    goto LABEL_108;
  }
  Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_108:
    v30 = 0;
LABEL_109:
    v42 = 0;
    v32 = 0;
    v41 = 4294950305;
    goto LABEL_84;
  }
  v30 = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], 0);
  if (!v30)
    goto LABEL_109;
  v31 = malloc_type_calloc(v68, 8uLL, 0x100004000313F17uLL);
  if (!v31)
    goto LABEL_109;
  v62 = v31;
  theDict = v30;
  v61 = malloc_type_calloc(v68, 8uLL, 0x100004000313F17uLL);
  v32 = 0;
  if (!v61)
  {
    v41 = 4294950305;
    v42 = v62;
    goto LABEL_84;
  }
  for (i = 0; ; ++i)
  {
    v34 = (const __CFArray *)v70[0];
    if (v70[0])
      v34 = (const __CFArray *)CFArrayGetCount((CFArrayRef)v70[0]);
    if (i >= (uint64_t)v34)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v70[0], i);
    v36 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("GroupPictureIndexList"));
    if (v36)
    {
      v37 = v36;
      if (CFArrayGetCount(v36) >= 2)
      {
        if (CFArrayGetCount(v37) >= 1)
        {
          v38 = 0;
          while (1)
          {
            value[0] = 0;
            if (!CMPhotoCFArrayGetSizeAtIndex(v37, v38, value) || value[0] >= (void *)v68)
              break;
            if (value[0] == v69)
              v39 = ValueAtIndex;
            else
              v39 = 0;
            if (!v32)
              v32 = v39;
            v28[(unint64_t)value[0]] = 1;
            if (++v38 >= CFArrayGetCount(v37))
              goto LABEL_46;
          }
LABEL_99:
          v41 = 4294950194;
          goto LABEL_101;
        }
LABEL_46:
        LODWORD(value[0]) = 0;
        v40 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
        if (!CMPhotoCFDictionaryGetInt32IfPresent(ValueAtIndex, v40, value))
          goto LABEL_99;
        CFArrayAppendValue(Mutable, ValueAtIndex);
        CFDictionaryAddValue(theDict, ValueAtIndex, (const void *)LODWORD(value[0]));
      }
    }
  }
  v46 = v68;
  if (v68 < 1)
  {
LABEL_69:
    v71.length = CFArrayGetCount(Mutable);
    v71.location = 0;
    CFArraySortValues(Mutable, v71, (CFComparatorFunction)_indexMapComparator, theDict);
    if (CFArrayGetCount(Mutable) >= 1)
    {
      v53 = 0;
      v45 = 0;
      while (1)
      {
        v54 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
        v55 = v54;
        if (v54 == v32)
          v45 = v53;
        if (v54 && (v56 = CFGetTypeID(v54), v56 == CFDictionaryGetTypeID()))
        {
          v57 = CFDictionaryGetValue(v55, CFSTR("GroupPictureIndexList"));
          if (!v57)
          {
            v41 = 4294950304;
            goto LABEL_101;
          }
          v58 = v57;
          v67[0] = 0;
          v67[1] = v67;
          v67[2] = 0x2000000000;
          v67[3] = 0;
          value[0] = (void *)MEMORY[0x1E0C809B0];
          value[1] = (void *)0x40000000;
          value[2] = ___populateIndexMap_block_invoke;
          value[3] = &unk_1E53F5E18;
          value[6] = v62;
          value[7] = v53;
          value[8] = v61;
          value[4] = v67;
          value[5] = (void *)v68;
          FigCFArrayApplyBlock();
          CFArraySetValueAtIndex(Mutable, (CFIndex)v53, v58);
          _Block_object_dispose(v67, 8);
        }
        else
        {
          Size = CMPhotoCFNumberGetSize(v55);
          if ((uint64_t)Size < v68)
            *((_QWORD *)v62 + (_QWORD)Size) = v53;
        }
        if ((uint64_t)++v53 >= CFArrayGetCount(Mutable))
          goto LABEL_82;
      }
    }
    v45 = 0;
LABEL_82:
    v22 = CFArrayGetCount(Mutable);
    v27 = v68;
    v43 = v62;
    v30 = theDict;
    v44 = v61;
    goto LABEL_83;
  }
  v47 = 0;
  while (v28[v47])
  {
LABEL_68:
    if (++v47 >= v46)
      goto LABEL_69;
  }
  LODWORD(value[0]) = 0;
  v48 = *(uint64_t (**)(uint64_t, uint64_t, void **))(*(_QWORD *)(Instance + 32) + 48);
  if (!v48)
  {
    v41 = 4294950302;
    goto LABEL_101;
  }
  v49 = v48(Instance, v47, value);
  if (!(_DWORD)v49)
  {
    v50 = CMPhotoCFNumberCreateSize(v47);
    if (!v50)
    {
      v41 = 4294950305;
      goto LABEL_101;
    }
    v51 = v50;
    CFArrayAppendValue(Mutable, v50);
    CFRelease(v51);
    CFDictionarySetValue(theDict, v51, (const void *)LODWORD(value[0]));
    if ((char *)v47 == v69)
      v52 = v51;
    else
      v52 = 0;
    if (!v32)
      v32 = v52;
    v46 = v68;
    goto LABEL_68;
  }
  v41 = v49;
LABEL_101:
  v42 = v62;
  v30 = theDict;
  v32 = (const __CFDictionary *)v61;
LABEL_84:
  if (v70[0])
    CFRelease(v70[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v30)
    CFRelease(v30);
  free(v28);
  free(v42);
  free(v32);
  if (!(_DWORD)v41)
  {
    if (a5)
      *a5 = v64;
    v41 = 0;
    *a6 = Instance;
    Instance = 0;
  }
LABEL_94:
  if (cf)
    CFRelease(cf);
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  return v41;
}

uint64_t _openContainer(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  _QWORD *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t result;
  uint64_t ByteStreamLength;

  v7 = (_QWORD *)(a1 + 40);
  v8 = CFGetAllocator((CFTypeRef)a1);
  if (v8)
    v8 = CFRetain(v8);
  *v7 = v8;
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  *(_QWORD *)(a1 + 64) = v9;
  if (a4)
    v10 = CFRetain(a4);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 48) = CMPhotoGetStorageType(a4);
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 72) = v11;
  if (!v11)
    return 4294950305;
  result = _parseICCProfileIfNeeded((uint64_t)v7);
  if (!(_DWORD)result)
  {
    result = _parseImageSizeAndTypeIfNeeded((uint64_t)v7);
    if (!(_DWORD)result)
    {
      result = _parseMPOIfNeeded((uint64_t)v7);
      if (!(_DWORD)result)
      {
        result = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a1 + 16), *(CFAllocatorRef *)(a1 + 40), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), a3, 0, 0, a4, *(_DWORD *)(a1 + 48), (uint64_t *)(a1 + 96));
        if (!(_DWORD)result)
        {
          ByteStreamLength = CMPhotoUtilitiesGetByteStreamLength();
          result = 0;
          *(_QWORD *)(a1 + 488) = ByteStreamLength;
        }
      }
    }
  }
  return result;
}

uint64_t _openContainer_0(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  int v11;
  const __CFData *v12;
  char v13;
  __int16 v14;
  int v15;
  CFIndex v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex Length;
  CFIndex v21;
  CFTypeRef *v22;
  BOOL v23;
  __CFArray *Mutable;
  __CFData *v25;
  __CFDictionary *v26;
  uint64_t v27;
  __CFDictionary *v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  void *v34;
  BOOL v36;
  UInt8 buffer[8];
  int v38;
  char v39;
  void *value;
  CFTypeRef cf;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef v45;
  uint64_t v46;
  CFRange v47;
  CFRange v48;

  v36 = 0;
  v7 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, &v36);
  if ((_DWORD)v7)
    return v7;
  if (!v36)
    return FigSignalErrorAt();
  v8 = CFGetAllocator((CFTypeRef)a1);
  if (v8)
    v8 = CFRetain(v8);
  *(_QWORD *)(a1 + 40) = v8;
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  *(_QWORD *)(a1 + 64) = v9;
  if (a4)
    v10 = CFRetain(a4);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 48) = CMPhotoGetStorageType(a4);
  v7 = CMPhotoDataCreateFromSource(*(const __CFAllocator **)(a1 + 40), (const __CFData *)a4, 0, 0, (_QWORD *)(a1 + 72), 0);
  if ((_DWORD)v7)
    return v7;
  v45 = 0;
  v46 = 0;
  v43 = 0;
  v44 = 0;
  cf = 0;
  v42 = 0;
  value = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v26 = 0;
    v12 = 0;
    v27 = 0;
    goto LABEL_78;
  }
  v11 = _createPreparedJXLDecoder(a1, 16704, 0, 0, &v46, 0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  while (v11 > 63)
  {
    if (v11 != 0x4000)
    {
      if (v11 == 256)
      {
        if ((v14 & 0x100) != 0)
          goto LABEL_63;
        v18 = _configureJXLColor(*(const __CFAllocator **)(a1 + 40), v46, *(unsigned __int8 *)(a1 + 120), (unint64_t)&cf, (CFStringRef *)&value, (__CFData **)&v45);
        if ((_DWORD)v18)
          goto LABEL_99;
      }
      else
      {
        if (v11 != 64)
          goto LABEL_64;
        if ((v14 & 0x40) != 0 || JxlDecoderGetBasicInfo())
        {
LABEL_63:
          v26 = 0;
          v27 = 4294950194;
          goto LABEL_78;
        }
      }
      goto LABEL_62;
    }
    v17 = 1;
    if (v12)
      goto LABEL_32;
LABEL_33:
    if (v15)
    {
      if (CFDataGetLength(v12) <= 4)
        goto LABEL_98;
      *(_DWORD *)buffer = 0;
      v47.location = 0;
      v47.length = 4;
      CFDataGetBytes(v12, v47, buffer);
      *(_DWORD *)buffer = bswap32(*(unsigned int *)buffer);
      v21 = (*(_DWORD *)buffer + 4);
      if (CFDataGetLength(v12) <= v21)
        goto LABEL_98;
      v48.length = (*(_DWORD *)buffer + 4);
      v48.location = 0;
      CFDataDeleteBytes(v12, v48);
      v22 = &v43;
      goto LABEL_39;
    }
    v23 = v13 == 0;
    v13 = 0;
    if (!v23)
    {
      v22 = &v42;
LABEL_39:
      Mutable = (__CFArray *)*v22;
      if (!*v22)
      {
        Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E0C9B378]);
        *v22 = Mutable;
        if (!Mutable)
        {
          v26 = 0;
          v27 = 4294950305;
          goto LABEL_78;
        }
      }
      CFArrayAppendValue(Mutable, v12);
      if (v12)
      {
        CFRelease(v12);
        v12 = 0;
      }
    }
    if (v11 != 0x4000)
      goto LABEL_61;
    v39 = 0;
    v38 = 0;
    if (JxlDecoderGetBoxType())
      goto LABEL_63;
    *(_QWORD *)buffer = 0;
    if (JxlDecoderGetBoxSizeRaw())
      goto LABEL_94;
    if (v38 == 1718188101)
    {
      v15 = 1;
    }
    else
    {
      if (v38 == 543976824)
        v13 = 1;
      if (!v13)
      {
        v13 = 0;
LABEL_61:
        v15 = 0;
        if (!v17)
          goto LABEL_65;
        goto LABEL_62;
      }
      v15 = 0;
    }
    if (!*(_QWORD *)buffer)
      *(_QWORD *)buffer = 4096;
    v25 = CFDataCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0);
    v12 = v25;
    if (!v25)
    {
      v27 = 4294950305;
      goto LABEL_100;
    }
    if ((*(_QWORD *)buffer & 0x8000000000000000) != 0)
    {
      v27 = 4294950190;
      goto LABEL_100;
    }
    if (*(_QWORD *)buffer >> 27)
      goto LABEL_98;
    CFDataSetLength(v25, *(CFIndex *)buffer);
    CFDataGetMutableBytePtr(v12);
    CFDataGetLength(v12);
    if (JxlDecoderSetBoxBuffer())
    {
LABEL_94:
      v27 = 4294950194;
      goto LABEL_100;
    }
    if (!v17)
      goto LABEL_65;
LABEL_62:
    v14 |= v11;
    v11 = JxlDecoderProcessInput();
  }
  if (!v11)
  {
    v17 = 0;
    if (!v12)
      goto LABEL_33;
LABEL_32:
    v19 = JxlDecoderReleaseBoxBuffer();
    Length = CFDataGetLength(v12);
    CFDataSetLength(v12, Length - v19);
    goto LABEL_33;
  }
  if (v11 == 7)
  {
    if (!v12)
    {
      v26 = 0;
      v27 = 4294950304;
      goto LABEL_78;
    }
    JxlDecoderReleaseBoxBuffer();
    v16 = CFDataGetLength(v12);
    CFDataIncreaseLength(v12, v16);
    CFDataGetMutableBytePtr(v12);
    if (JxlDecoderSetBoxBuffer())
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_64:
  if ((v11 & 0xFFFFFFFD) != 0)
  {
LABEL_98:
    v18 = FigSignalErrorAt();
LABEL_99:
    v27 = v18;
LABEL_100:
    v26 = 0;
    goto LABEL_78;
  }
LABEL_65:
  v26 = 0;
  if (cf && value)
  {
    v28 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v26 = v28;
    if (v28)
    {
      CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E0CA8E98], value);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E0CA8D68], cf);
      CMPhotoCreateColorSpaceFromPixelBufferAttachments(v26, *(_DWORD *)(a1 + 136) == 1, (CGColorSpace **)&v44, 1, 0);
      goto LABEL_69;
    }
LABEL_105:
    v27 = 4294950305;
  }
  else
  {
LABEL_69:
    v29 = v44;
    v30 = v45;
    if (v45 && !v44)
    {
      v29 = (CFTypeRef)MEMORY[0x1A85CF43C](v45);
      v44 = v29;
      if (!v29)
        goto LABEL_105;
      v30 = v45;
    }
    *(_BYTE *)(a1 + 80) = 1;
    v44 = 0;
    v45 = 0;
    *(_QWORD *)(a1 + 288) = v29;
    *(_QWORD *)(a1 + 296) = v30;
    v32 = v42;
    v31 = v43;
    v42 = 0;
    v43 = 0;
    *(_QWORD *)(a1 + 320) = v31;
    *(_QWORD *)(a1 + 328) = v32;
    v33 = cf;
    if (cf)
      v33 = CFRetain(cf);
    *(_QWORD *)(a1 + 304) = v33;
    v34 = value;
    if (value)
      v34 = (void *)CFRetain(value);
    v27 = 0;
    *(_QWORD *)(a1 + 312) = v34;
  }
LABEL_78:
  JxlDecoderDestroy();
  if (v45)
    CFRelease(v45);
  if (v44)
    CFRelease(v44);
  if (v12)
    CFRelease(v12);
  if (v43)
    CFRelease(v43);
  if (v42)
    CFRelease(v42);
  if (v26)
    CFRelease(v26);
  if (!(_DWORD)v27)
    *(_QWORD *)(a1 + 488) = CMPhotoUtilitiesGetByteStreamLength();
  return v27;
}

uint64_t _openContainer_1(uint64_t a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  BOOL v5;
  __CFDictionary *v6;
  __CFDictionary *v7;
  dispatch_queue_t v8;
  uint64_t v9;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v2, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v4 = Mutable;
  if (*(_BYTE *)(a1 + 28))
    v5 = MEMORY[0x1E0CC2D70] == 0;
  else
    v5 = 1;
  if (v5)
  {
    FigPictureCollectionCreateFromByteStream();
LABEL_10:
    if (CMPhotoHEIFUtilitiesByteStreamHasMoovAtom())
    {
      FigCFDictionarySetValue();
      FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
    }
    if (*(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 56))
    {
      *(_QWORD *)(a1 + 488) = CMPhotoUtilitiesGetByteStreamLength();
      v8 = dispatch_queue_create("com.apple.cmphoto.auxmeta.synchronizer", 0);
      *(_QWORD *)(a1 + 64) = v8;
      if (v8)
        v9 = 0;
      else
        v9 = 4294950305;
    }
    else
    {
      v9 = 4294950194;
    }
    goto LABEL_17;
  }
  v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    v7 = v6;
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CC49D0], (const void *)*MEMORY[0x1E0C9AE50]);
    FigPictureCollectionCreateFromByteStreamWithOptions();
    CFRelease(v7);
    goto LABEL_10;
  }
  v9 = 4294950305;
LABEL_17:
  CFRelease(v4);
  return v9;
}

uint64_t _openContainer_2(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4;
  const __CFAllocator *v5;
  CFTypeRef v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;
  uint64_t result;
  const __CFArray *v14;
  const __CFArray *v15;
  CFTypeID v16;
  CFArrayRef *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFTypeID v20;
  CFArrayRef *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  int v25;
  const void *ValueAtIndex;
  CFIndex Count;
  CFIndex v28;
  CFIndex v29;
  const void *v30;
  CFTypeRef v31;
  uint64_t v32;
  uint64_t v33;

  v4 = CFGetAllocator((CFTypeRef)a1);
  if (!a2)
    return 4294950306;
  v5 = v4;
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
      v6 = CFRetain(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  *(_BYTE *)(a1 + 112) = 1;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("SequenceInfo"));
  if (!Value)
    return 4294950306;
  v8 = Value;
  v9 = CFGetTypeID(Value);
  if (v9 != CFDictionaryGetTypeID())
    return 4294950306;
  v10 = CFDictionaryGetValue(v8, CFSTR("FormatReader"));
  if (!v10)
    return 4294950306;
  v11 = v10;
  v12 = CFGetTypeID(v10);
  if (v12 != FigFormatReaderGetTypeID() || !FigCFDictionaryGetInt32IfPresent())
    return 4294950306;
  result = _createSequenceReader((uint64_t)v11, 0, 1885954932, *(unsigned __int8 *)(a1 + 28), (_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return result;
  v14 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("thmb"));
  if (!v14)
    return 4294950306;
  v15 = v14;
  v16 = CFGetTypeID(v14);
  if (v16 != CFArrayGetTypeID())
    return 4294950306;
  v17 = (CFArrayRef *)(a1 + 88);
  result = _copyReferenceSequenceReaders(v5, (uint64_t)v11, v15, 1885954932, *(unsigned __int8 *)(a1 + 28), (__CFArray **)(a1 + 88));
  if ((_DWORD)result)
    return result;
  v18 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("auxl"));
  if (!v18)
    return 4294950306;
  v19 = v18;
  v20 = CFGetTypeID(v18);
  if (v20 != CFArrayGetTypeID())
    return 4294950306;
  v21 = (CFArrayRef *)(a1 + 96);
  result = _copyReferenceSequenceReaders(v5, (uint64_t)v11, v19, 1635088502, *(unsigned __int8 *)(a1 + 28), (__CFArray **)(a1 + 96));
  if (!(_DWORD)result)
  {
    v33 = 0;
    result = (uint64_t)_getImageCountForSequence(*(_QWORD *)(a1 + 80), &v33);
    if (!(_DWORD)result)
    {
      if (*v17 && (v22 = CFArrayGetCount(*v17), v22 >= 1))
      {
        v23 = v22;
        v24 = 0;
        LOBYTE(v25) = 1;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*v17, v24);
          v32 = 0;
          result = (uint64_t)_getImageCountForSequence((uint64_t)ValueAtIndex, &v32);
          if ((_DWORD)result)
            break;
          v25 = (v33 == v32) & v25;
          if (v23 == ++v24)
            goto LABEL_27;
        }
      }
      else
      {
        v25 = 1;
LABEL_27:
        if (*v21 && (Count = CFArrayGetCount(*v21), Count >= 1))
        {
          v28 = Count;
          v29 = 0;
          while (1)
          {
            v30 = CFArrayGetValueAtIndex(*v21, v29);
            v32 = 0;
            result = (uint64_t)_getImageCountForSequence((uint64_t)v30, &v32);
            if ((_DWORD)result)
              break;
            v25 = (v33 == v32) & v25;
            if (v28 == ++v29)
              goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          *(_BYTE *)(a1 + 112) = v25;
          if (v25)
          {
            *(_QWORD *)(a1 + 72) = CFRetain(v8);
            v31 = CFRetain(v11);
            result = 0;
            *(_QWORD *)(a1 + 64) = v31;
            *(_QWORD *)(a1 + 104) = 0;
          }
          else
          {
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  return result;
}

uint64_t _openContainer_3(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  uint64_t result;
  CFMutableDictionaryRef v10;

  result = _parseContainer(a1, a2, a3, a4);
  if (!(_DWORD)result)
  {
    _handleStripping(a1, a2);
    result = _handleRewrite(a1, a3);
    if (a5)
    {
      if (!(_DWORD)result)
      {
        v10 = 0;
        result = _createDescriptionFromSession(a1, &v10);
        if (!(_DWORD)result)
          *a5 = v10;
      }
    }
  }
  return result;
}

uint64_t _openContainer_4(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, __CFDictionary **a5)
{
  uint64_t v8;
  uint64_t ContainerAndCopyDescription;
  CFTypeRef v10;
  uint64_t inited;
  CFTypeRef cf;

  cf = 0;
  v8 = _newContainer_0((uint64_t)a1, a2);
  if ((_DWORD)v8)
    return v8;
  ContainerAndCopyDescription = _readContainerAndCopyDescription((uint64_t)a1, a3, (__CFDictionary **)&cf);
  v10 = cf;
  if ((_DWORD)ContainerAndCopyDescription)
  {
    inited = ContainerAndCopyDescription;
    if (!cf)
      return inited;
    goto LABEL_4;
  }
  inited = _initContainerFromDescription(a1, (const __CFDictionary *)cf, a5);
  v10 = cf;
  if (cf)
LABEL_4:
    CFRelease(v10);
  return inited;
}

uint64_t CMPhotoUtilitiesGetByteStreamLength()
{
  uint64_t CMBaseObject;
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v2;
  CFTypeRef v3;
  CFTypeID v4;
  CFTypeID TypeID;
  uint64_t Int32;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v1 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
    return 0;
  v2 = v1(CMBaseObject, *MEMORY[0x1E0CA2068], *MEMORY[0x1E0C9AE00], &cf);
  v3 = cf;
  if (v2 || (v4 = CFGetTypeID(cf), TypeID = CFNumberGetTypeID(), v3 = cf, v4 != TypeID))
  {
    Int32 = 0;
    if (!v3)
      return Int32;
    goto LABEL_5;
  }
  Int32 = (int)CMPhotoCFNumberGetInt32((const __CFNumber *)cf);
  v3 = cf;
  if (cf)
LABEL_5:
    CFRelease(v3);
  return Int32;
}

const __CFNumber *CMPhotoCFNumberGetInt32(const __CFNumber *result)
{
  unsigned int valuePtr;

  if (result)
  {
    valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr))
      return (const __CFNumber *)valuePtr;
    else
      return 0;
  }
  return result;
}

uint64_t CMPhotoImageContainerFormatDetectFromBytestream(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t (*v9)(uint64_t, unint64_t, uint64_t, uint64_t *, unint64_t *);
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  v4 = 0;
  v5 = &v16;
  v6 = 12;
  do
  {
    v14 = 0;
    v15 = 0;
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v7)
      return 4294954514;
    result = v7(a1, v4, &v15);
    if ((_DWORD)result)
      return result;
    if (v15 < 1)
      return 4294950194;
    v9 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v9)
      return 4294954514;
    result = v9(a1, v6, v4, v5, &v14);
    if ((_DWORD)result)
      return result;
    v10 = v6 >= v14;
    v6 -= v14;
    if (!v10)
      return 4294950304;
    v5 = (uint64_t *)((char *)v5 + v14);
    v4 += v14;
  }
  while (v6);
  if ((unsigned __int16)v16 == 55551)
    v11 = 1;
  else
    v11 = -1;
  if (HIDWORD(v16) == 1887007846)
  {
    v12 = 0;
  }
  else
  {
    v12 = 2;
    if ((unsigned __int16)v16 != 2815)
    {
      v13 = v16 ^ 0x204C584A0C000000 | v17 ^ 0xA870A0DLL;
      v12 = v13 ? v11 : 2;
      if (v13 && (unsigned __int16)v16 != 55551)
        return 4294950194;
    }
  }
  result = 0;
  if (a2)
    *a2 = v12;
  return result;
}

uint64_t CMPhotoByteStreamCreateFromSource(const __CFData *a1, uint64_t a2, int a3, int a4, CFTypeRef *a5, _QWORD *a6)
{
  const __CFData *v11;
  const __CFAllocator *v12;
  const void *MutableCopy;
  uint64_t WritableWithCFMutableData;
  uint64_t v15;
  uint64_t v16;
  uint64_t ByteStreamForFile;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t (*v20)(const __CFData *, _QWORD, uint64_t *);
  int Value;
  uint64_t v22;
  uint64_t (*v23)(const __CFData *, uint64_t, _QWORD, CFTypeRef *, _QWORD);
  CFTypeRef v24;
  uint64_t v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFBooleanRef BOOLean;
  CFTypeRef cf;

  BOOLean = 0;
  cf = 0;
  v27 = 0;
  v28 = 0;
  if (!a1)
  {
    MutableCopy = 0;
    v16 = 4294950306;
LABEL_48:
    if (cf)
      CFRelease(cf);
    if (MutableCopy)
      CFRelease(MutableCopy);
    goto LABEL_52;
  }
  if (!a5)
  {
    MutableCopy = 0;
    v16 = 0;
    goto LABEL_48;
  }
  v11 = a1;
  v12 = CFGetAllocator(a1);
  switch(CMPhotoGetStorageType(v11))
  {
    case 1u:
      if (a3 && !a4)
        goto LABEL_10;
      if (!a3)
      {
        WritableWithCFMutableData = FigByteStreamCreateWithCFData();
        goto LABEL_40;
      }
      MutableCopy = CFDataCreateMutableCopy(v12, 0, v11);
      if (!MutableCopy)
      {
        v16 = 4294950305;
        goto LABEL_48;
      }
      WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (!(_DWORD)WritableWithCFMutableData)
        goto LABEL_41;
      goto LABEL_61;
    case 2u:
      WritableWithCFMutableData = CMByteStreamCreateWritableForBlockBuffer();
      goto LABEL_40;
    case 3u:
      if (a3)
      {
        ByteStreamForFile = CMByteStreamCreateForFileURL();
      }
      else
      {
        FigGetDefaultManagedFilePool();
        ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
      }
      goto LABEL_37;
    case 4u:
      if (a3)
      {
        WritableWithCFMutableData = FigByteStreamCreateWritableWithIOSurface();
LABEL_40:
        MutableCopy = 0;
        if ((_DWORD)WritableWithCFMutableData)
        {
LABEL_61:
          v16 = WritableWithCFMutableData;
          goto LABEL_48;
        }
      }
      else
      {
        ByteStreamForFile = FigByteStreamCreateWithIOSurface();
LABEL_37:
        v16 = ByteStreamForFile;
        MutableCopy = 0;
        if ((_DWORD)ByteStreamForFile)
          goto LABEL_48;
      }
      goto LABEL_41;
    case 5u:
      if (!a3)
        goto LABEL_32;
      v26 = a2;
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v19 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (!v19)
        goto LABEL_46;
      v15 = v19(CMBaseObject, *MEMORY[0x1E0CA20A0], v12, &BOOLean);
      if ((_DWORD)v15)
        goto LABEL_11;
      if (a2)
        goto LABEL_23;
      v20 = *(uint64_t (**)(const __CFData *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 24);
      if (!v20)
        goto LABEL_46;
      v15 = v20(v11, 0, &v26);
      if ((_DWORD)v15)
        goto LABEL_11;
LABEL_23:
      Value = CFBooleanGetValue(BOOLean);
      if (!(Value | a4))
      {
LABEL_10:
        v15 = FigSignalErrorAt();
        goto LABEL_11;
      }
      if (!a4 || Value)
      {
LABEL_32:
        MutableCopy = 0;
        goto LABEL_33;
      }
      v22 = v26;
      if (v26 < 0)
      {
        v16 = 4294950190;
        goto LABEL_47;
      }
      v23 = *(uint64_t (**)(const __CFData *, uint64_t, _QWORD, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
      if (!v23)
      {
LABEL_46:
        v16 = 4294954514;
        goto LABEL_47;
      }
      v15 = v23(v11, v22, 0, &v28, 0);
      if ((_DWORD)v15 || (v15 = CMByteStreamCreateForBlockBuffer(), (_DWORD)v15))
      {
LABEL_11:
        v16 = v15;
LABEL_47:
        MutableCopy = 0;
        goto LABEL_48;
      }
      v11 = (const __CFData *)v27;
      MutableCopy = v28;
      v28 = 0;
      if (!v27)
      {
        v24 = 0;
        goto LABEL_34;
      }
LABEL_33:
      v24 = CFRetain(v11);
LABEL_34:
      cf = v24;
LABEL_41:
      *a5 = cf;
      cf = 0;
      if (a6)
      {
        v16 = 0;
        *a6 = MutableCopy;
      }
      else
      {
        if (MutableCopy)
          CFRelease(MutableCopy);
        v16 = 0;
      }
LABEL_52:
      if (v28)
        CFRelease(v28);
      if (v27)
        CFRelease(v27);
      if (BOOLean)
        CFRelease(BOOLean);
      return v16;
    default:
      goto LABEL_10;
  }
}

uint64_t CMPhotoGetStorageType(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  pthread_once(&CMPhotoGetStorageType_onceToken, (void (*)(void))_once_setTypes);
  v2 = CFGetTypeID(a1);
  result = 1;
  while (v2 != sTypes_0[result])
  {
    if (++result == 6)
      return 0;
  }
  return result;
}

BOOL CMPhotoHEIFUtilitiesByteStreamHasMoovAtom()
{
  return !FigAtomStreamInitWithByteStream()
      && FigAtomStreamPositionAtFirstAtomWithType() == 0;
}

uint64_t CMPhotoGetCPUCount()
{
  pthread_once(&CMPhotoGetCPUCount_onceToken, (void (*)(void))_once_CMPhotoGetCPUCount);
  return sCPUCount;
}

void _asyncCanvasDecodeFinished(uint64_t a1, const void *a2, int a3, int a4)
{
  os_unfair_lock_s *v8;
  _BOOL4 v9;

  v8 = (os_unfair_lock_s *)(a1 + 14576);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 14576));
  if (a3)
    *(_DWORD *)(a1 + 14580) = a3;
  v9 = CFSetContainsValue(*(CFSetRef *)(a1 + 14600), a2)
    && (CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 14600), a2),
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 14584), a2),
        !CFSetGetCount(*(CFSetRef *)(a1 + 14600)))
    && *(_BYTE *)(a1 + 216) != 0;
  CFSetGetCount(*(CFSetRef *)(a1 + 14600));
  os_unfair_lock_unlock(v8);
  if (a4)
  {
    if (!v9)
      return;
    goto LABEL_9;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 224));
  if (v9)
LABEL_9:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 232));
}

uint64_t CMPhotoCreateWrappedPixelBufferForType(const __CFAllocator *a1, CVPixelBufferRef pixelBuffer, int a3, int a4, CGImageRef *a5)
{
  uint64_t v8;
  __IOSurface *IOSurface;
  __CVBuffer *v10;
  CVPixelBufferRef v11;
  CGImage *v12;
  uint64_t v13;
  CMSampleTimingInfo v15;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMSampleBufferRef sampleBufferOut;

  formatDescriptionOut = 0;
  sampleBufferOut = 0;
  if (!a5)
    return 0;
  v8 = 4294950306;
  switch(a4)
  {
    case 0:
      return v8;
    case 1:
      IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
      if (IOSurface)
      {
        v10 = IOSurface;
        IOSurfaceIncrementUseCount(IOSurface);
        v11 = v10;
        goto LABEL_8;
      }
      v8 = 4294950304;
      break;
    case 2:
      if (pixelBuffer)
      {
        v11 = pixelBuffer;
LABEL_8:
        v12 = (CGImage *)CFRetain(v11);
      }
      else
      {
        v12 = 0;
      }
      v8 = 0;
      *a5 = v12;
      break;
    case 3:
      *(_OWORD *)&v15.duration.value = *MEMORY[0x1E0CA2E18];
      v15.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v15.presentationTimeStamp = v15.duration;
      v15.decodeTimeStamp = v15.duration;
      v13 = CMVideoFormatDescriptionCreateForImageBuffer(a1, pixelBuffer, &formatDescriptionOut);
      if ((_DWORD)v13)
        goto LABEL_13;
      v8 = CMSampleBufferCreateForImageBuffer(a1, pixelBuffer, 1u, 0, 0, formatDescriptionOut, &v15, &sampleBufferOut);
      if ((_DWORD)v8)
      {
        if (sampleBufferOut)
          CFRelease(sampleBufferOut);
      }
      else
      {
        *a5 = sampleBufferOut;
        sampleBufferOut = 0;
LABEL_13:
        v8 = v13;
      }
      break;
    case 4:
      return CMPhotoCreateCGImageWithPixelBuffer(a1, pixelBuffer, a3, a5);
    default:
      return 4294950302;
  }
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  return v8;
}

uint64_t CMPhotoDecompressionSessionCopySurfacePool(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  CFTypeRef v5;

  result = 4294950306;
  if (a1 && a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v5 = *(CFTypeRef *)(a1 + 272);
    if (v5)
      v5 = CFRetain(v5);
    *a2 = v5;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 0;
  }
  return result;
}

uint64_t CMPhotoDecompressionSessionCopyScaler(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  CFTypeRef v5;

  result = 4294950306;
  if (a1 && a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v5 = *(CFTypeRef *)(a1 + 280);
    if (v5)
      v5 = CFRetain(v5);
    *a2 = v5;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 0;
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGDecoderCreate(const void *a1, CFAllocatorRef allocator, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, const void *a8, int a9, uint64_t *a10)
{
  _QWORD *v18;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t (*v23)(const void *, _QWORD, uint64_t *);
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v28;

  if (!a10)
    return 4294950306;
  v18 = CFAllocatorAllocate(allocator, 248, 0);
  if (!v18)
    return 4294950305;
  v19 = (uint64_t)v18;
  v18[30] = 0;
  *((_OWORD *)v18 + 13) = 0u;
  *((_OWORD *)v18 + 14) = 0u;
  *((_OWORD *)v18 + 11) = 0u;
  *((_OWORD *)v18 + 12) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  *((_OWORD *)v18 + 10) = 0u;
  *((_OWORD *)v18 + 7) = 0u;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_OWORD *)v18 + 6) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *(_OWORD *)v18 = 0u;
  if (allocator)
    v20 = CFRetain(allocator);
  else
    v20 = 0;
  *(_QWORD *)(v19 + 8) = v20;
  if (a1)
    v21 = CFRetain(a1);
  else
    v21 = 0;
  *(_QWORD *)v19 = v21;
  if (a5)
    v22 = CFRetain(a5);
  else
    v22 = 0;
  *(_QWORD *)(v19 + 16) = v22;
  if (a6 | a7)
    goto LABEL_16;
  v28 = 0;
  v23 = *(uint64_t (**)(const void *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v23)
  {
    v26 = 4294954514;
LABEL_22:
    CMPhotoUnifiedJPEGDecoderDestroy(v19);
    return v26;
  }
  v24 = v23(a5, 0, &v28);
  if ((_DWORD)v24)
  {
    v26 = v24;
    goto LABEL_22;
  }
  a7 = v28;
  if (v28 < 0)
  {
    v26 = 4294950190;
    goto LABEL_22;
  }
LABEL_16:
  *(_QWORD *)(v19 + 24) = a6;
  *(_QWORD *)(v19 + 32) = a7;
  if (a8)
    v25 = CFRetain(a8);
  else
    v25 = 0;
  v26 = 0;
  *(_QWORD *)(v19 + 40) = v25;
  *(_DWORD *)(v19 + 48) = a9;
  *(_QWORD *)(v19 + 56) = a3;
  *(_QWORD *)(v19 + 64) = a4;
  *a10 = v19;
  return v26;
}

uint64_t CMPhotoDecompressionSessionGetPictureCollectionCodecPool(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_QWORD *)(a1 + 288);
    }
  }
  return result;
}

uint64_t _parseOptionsForJPEGDecoding(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;

  result = CMPhotoDecompressionContainerParseOptions(a1, a2, a3, a4, a7);
  if (!(_DWORD)result)
  {
    v13 = *(_DWORD *)(a7 + 72);
    if ((a6 & 0xFE) != 0xC2 || v13 == 2)
    {
      if (v13 == 2)
        goto LABEL_9;
    }
    else
    {
      *(_DWORD *)(a7 + 72) = 1;
    }
    if (*(_BYTE *)(a7 + 21) && (unint64_t)(a3 * a4) / (*(_QWORD *)(a7 + 48) * *(_QWORD *)(a7 + 40)) >= 5)
      *(_DWORD *)(a7 + 72) = 1;
LABEL_9:
    if (a5 == 2)
    {
      result = 0;
      *(_DWORD *)(a7 + 72) = 1;
      return result;
    }
    v14 = *(_DWORD *)(a7 + 4);
    if (v14 <= 1278226741)
    {
      if (v14 > 875836517)
      {
        if (v14 == 875836518 || v14 == 1111970369)
          return 0;
        v15 = 1278226488;
      }
      else
      {
        if (v14 == 875704422 || v14 == 875704438)
          return 0;
        v15 = 875704934;
      }
    }
    else if (v14 <= 1815162993)
    {
      if (v14 == 1278226742 || v14 == 1278555701)
        return 0;
      v15 = 1380401729;
    }
    else
    {
      if (v14 <= 1952854575)
      {
        if (v14 != 1815162994)
        {
          v15 = 1815491698;
          goto LABEL_28;
        }
        return 0;
      }
      if (v14 == 1952854576)
        return 0;
      v15 = 2019963440;
    }
LABEL_28:
    if (v14 != v15
      && (!CMPhotoPixelFormatIsAGXCompressed(v14) || !CMPhotoSupportsAGXCompressedFormat())
      && (!CMPhotoPixelFormatIsLossyCompressed(v14) || !CMPhotoSupportsLossyCompressedFormat()))
    {
      return 4294950301;
    }
    return 0;
  }
  return result;
}

uint64_t CMPhotoGetImageInformationFromJFIFByteStream(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, BOOL *a5, _BYTE *a6, _DWORD *a7, _QWORD *a8)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *);
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, CFIndex *, uint64_t *);
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  CFDataRef v36;
  _BYTE *v38;
  _QWORD v39[9];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  _QWORD v56[3];
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  CFDataRef v62;
  unsigned __int8 v63;
  _DWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _OWORD v68[2];
  const char *v69;
  CFIndex v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v58 = 0;
  v59 = &v58;
  v60 = 0x2000000000;
  v61 = 0;
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x2000000000;
  v57 = 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = a8 != 0;
  v51 = -30;
  v50 = -1010646592;
  memset(v68, 0, sizeof(v68));
  v69 = "urn:iso:std:iso:ts:21496:-1";
  memset(v66, 0, sizeof(v66));
  v67 = 28;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2800000000;
  v48 = 0;
  v49 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2800000000;
  v43 = 0;
  v44 = 0;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 0x40000000;
  v39[2] = __CMPhotoGetImageInformationFromJFIFByteStream_block_invoke;
  v39[3] = &unk_1E53F6A88;
  v39[4] = v56;
  v39[5] = &v58;
  v39[6] = &v45;
  v39[7] = &v52;
  v39[8] = &v40;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 5, (uint64_t)&v50, v68, (unint64_t *)v66, (uint64_t)v39);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
    goto LABEL_63;
  if ((unint64_t)v46[4] < 9)
  {
    v38 = a6;
    goto LABEL_62;
  }
  v16 = v46[3];
  v65 = 0;
  memset(v64, 0, 5);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
  if (!v17)
    goto LABEL_18;
  v38 = a6;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = v17(a1, 5, v16, v64, &v65);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
    goto LABEL_63;
  if (v65 != 5)
    goto LABEL_62;
  v18 = *(unsigned __int16 *)((char *)v64 + 3);
  *(_WORD *)((char *)v64 + 3) = __rev16(*(unsigned __int16 *)((char *)v64 + 3));
  v19 = *(unsigned __int16 *)((char *)v64 + 1);
  *(_WORD *)((char *)v64 + 1) = __rev16(*(unsigned __int16 *)((char *)v64 + 1));
  if (!v19 || !v18)
    goto LABEL_62;
  v63 = 0;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
  if (!v20)
  {
LABEL_18:
    v25 = 4294954514;
    goto LABEL_59;
  }
  MarkersWithSignaturesInJFIFByteStreamWithHandler = v20(a1, 1, v16 + 5, &v63, &v65);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
LABEL_63:
    v25 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_59;
  }
  if (v65 != 1)
    goto LABEL_62;
  v21 = v63;
  if (v63 - 5 < 0xFFFFFFFC)
    goto LABEL_62;
  v71 = 0;
  v70 = 0;
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFIndex *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
  if (!v22)
    goto LABEL_18;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = v22(a1, 3 * v21, v16 + 6, &v70, &v65);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
    goto LABEL_63;
  if (v65 == 3 * v63)
  {
    if (v63)
    {
      if (v63 == 1)
      {
        v23 = 0;
        v24 = 6;
LABEL_42:
        if (a3)
        {
          v31 = *(unsigned __int16 *)((char *)v64 + 1);
          *a3 = *(unsigned __int16 *)((char *)v64 + 3);
          a3[1] = v31;
        }
        if (a4)
          *a4 = v24;
        v32 = a6;
        if (a5)
          *a5 = v23;
        if (a7)
          *a7 = LOBYTE(v64[0]);
        goto LABEL_50;
      }
      v26 = v63 - 1;
      v27 = (unsigned __int8 *)&v70 + 4;
      while (1)
      {
        v28 = *v27;
        v27 += 3;
        if (v28 != 17)
          break;
        if (!--v26)
          goto LABEL_22;
      }
    }
    else
    {
LABEL_22:
      if (BYTE1(v70) <= 0x20u)
      {
        if (BYTE1(v70) == 17)
        {
          v23 = v70 == 82 && BYTE3(v70) == 71 && BYTE6(v70) == 66;
          v24 = 1;
          goto LABEL_42;
        }
        if (BYTE1(v70) == 18)
        {
          v23 = 0;
          v24 = 2;
          goto LABEL_42;
        }
      }
      else
      {
        switch(BYTE1(v70))
        {
          case '!':
            v23 = 0;
            v24 = 3;
            goto LABEL_42;
          case '"':
            v23 = 0;
            v24 = 5;
            goto LABEL_42;
          case 'A':
            v23 = 0;
            v24 = 4;
            goto LABEL_42;
        }
      }
    }
  }
LABEL_62:
  MarkersWithSignaturesInJFIFByteStreamWithHandler = FigSignalErrorAt();
  v32 = v38;
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
    goto LABEL_63;
LABEL_50:
  if (v32)
    *v32 = *((_BYTE *)v59 + 24);
  if (!a8 || !*((_BYTE *)v53 + 24) || (v33 = v41[4], v34 = v33 - 28, v33 <= 0x1C))
  {
    v25 = 0;
    goto LABEL_59;
  }
  v70 = 0;
  v35 = CMPhotoByteStreamReadAndCreateData(a1, v33 - 28, v41[3] + 28, &v62, &v70);
  if ((_DWORD)v35)
  {
    v25 = v35;
    v36 = v62;
  }
  else
  {
    v36 = v62;
    if (v70 == v34)
    {
      v25 = 0;
      *a8 = v62;
      v62 = 0;
      goto LABEL_59;
    }
    v25 = 4294950194;
  }
  if (v36)
    CFRelease(v36);
LABEL_59:
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(v56, 8);
  _Block_object_dispose(&v58, 8);
  return v25;
}

void CMPhotoGetPixelBufferCLAP(__CVBuffer *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  double PixelBufferCLAPAsRect;
  double v10;
  double v11;
  double v12;

  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  if (a2)
    *a2 = (unint64_t)PixelBufferCLAPAsRect;
  if (a3)
    *a3 = (unint64_t)v10;
  if (a4)
    *a4 = (unint64_t)v11;
  if (a5)
    *a5 = (unint64_t)v12;
}

void _callbackDataProviderReleaseInfo(_QWORD *a1)
{
  const void *v2;
  __CVBuffer *v3;
  const void *v4;

  FigSimpleMutexDestroy();
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  v3 = (__CVBuffer *)a1[2];
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(v3, 0);
    v4 = (const void *)a1[2];
    if (v4)
      CFRelease(v4);
  }
  free(a1);
}

uint64_t CMPhotoDecompressionSupportedForContainerAndCodec(int a1, int a2, uint64_t a3, BOOL *a4)
{
  BOOL v5;
  uint64_t result;
  BOOL v7;

  if (!a4)
    return 4294950306;
  if (a3)
  {
    result = FigSignalErrorAt();
    v5 = 0;
  }
  else if (a1 == 2)
  {
    result = 0;
    v7 = a2 != 1786276896 || MEMORY[0x1E0CFD1A0] == 0;
    v5 = !v7;
  }
  else
  {
    v5 = a2 == 1785750887;
    if (a2 == 1752589105)
      v5 = 1;
    if (a2 == 1635148593)
      v5 = 1;
    if (a2 == 1936484717)
      v5 = 1;
    if (a2 == 1635135537)
      v5 = 1;
    if (a1)
      v5 = 0;
    v7 = a1 == 1;
    result = 0;
    if (v7)
      v5 = a2 == 1785750887;
  }
  *a4 = v5;
  return result;
}

BOOL CMPhotoPixelBufferIsNon601YCbCr(__CVBuffer *a1, char *a2)
{
  int PixelFormatType;
  char v5;
  const __CFString *v6;
  char v7;
  int v8;
  _BOOL8 v9;
  const __CFString *v11;
  int IntegerCodePointForString;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = 0;
  v6 = 0;
  v7 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
      || PixelFormatType == 825306677)
    {
      goto LABEL_18;
    }
    v8 = 825437747;
  }
  else
  {
    if (PixelFormatType <= 1717856626)
    {
      if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
      {
        v8 = 1717855600;
        goto LABEL_15;
      }
LABEL_18:
      v9 = 0;
      goto LABEL_19;
    }
    if (PixelFormatType > 1751411058)
    {
      if (PixelFormatType == 1751411059)
        goto LABEL_18;
      v8 = 1932996149;
    }
    else
    {
      if (PixelFormatType == 1717856627)
        goto LABEL_18;
      v8 = 1751410032;
    }
  }
LABEL_15:
  v9 = 0;
  if (PixelFormatType != v8)
  {
    if (CMPhotoPixelFormatContainsRGB(PixelFormatType))
    {
      v6 = 0;
      v5 = 0;
      v9 = 0;
      v7 = 1;
    }
    else
    {
      v11 = (const __CFString *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      v6 = v11;
      if (v11)
      {
        IntegerCodePointForString = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v11);
        v7 = 0;
        v5 = 0;
        v9 = (IntegerCodePointForString - 7) < 0xFFFFFFFE;
      }
      else
      {
        v9 = 0;
        v7 = 1;
        v5 = 1;
      }
    }
  }
LABEL_19:
  if (a2)
    *a2 = v5;
  if ((v7 & 1) == 0)
    CFRelease(v6);
  return v9;
}

uint64_t _createAuxiliaryImageForIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;

  v14 = a2;
  v13 = 0;
  result = _checkImageIndex(a1 + 40, &v14, &v13);
  if (!(_DWORD)result)
  {
    result = (uint64_t)_checkForbiddenAuxOptions(a4);
    if (!(_DWORD)result)
    {
      BYTE4(v12) = 0;
      LODWORD(v12) = a5;
      return _decodeImage(*(_QWORD *)(a1 + 40), a1, *(_QWORD *)(a1 + 64), 2, a3, a4, v13, 0, v12, a6);
    }
  }
  return result;
}

const __CFDictionary *_createAuxiliaryImageForIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, CGImageRef *a6)
{
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v15;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  CFTypeRef cf;
  CFTypeRef v23;

  cf = 0;
  v23 = 0;
  v12 = _checkForbiddenAuxOptions_0(theDict);
  if ((_DWORD)v12)
    return v12;
  v13 = a1[6];
  v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v14)
    goto LABEL_8;
  v15 = v14(v13, a2, &v23, 0);
  if ((_DWORD)v15)
  {
    v20 = v15;
    goto LABEL_9;
  }
  v16 = v23;
  v17 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v17)
  {
LABEL_8:
    v20 = 4294954514;
    goto LABEL_9;
  }
  v18 = v17(v16, a3, &cf);
  v19 = cf;
  if (!(_DWORD)v18)
  {
    v20 = _decodeAuxiliaryImage(a1, cf, v23, a2, a3, theDict, 0, a5, a6);
    v19 = cf;
    if (!cf)
      goto LABEL_9;
    goto LABEL_7;
  }
  v20 = v18;
  if (cf)
LABEL_7:
    CFRelease(v19);
LABEL_9:
  if (v23)
    CFRelease(v23);
  return (const __CFDictionary *)v20;
}

uint64_t _createAuxiliaryImageForIndex_1(uint64_t a1, uint64_t a2, CFIndex idx, const __CFDictionary *a4, int a5, CGImageRef *a6)
{
  uint64_t v12;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t SampleBuffer;
  CFTypeRef v16;
  CFTypeRef cf;
  const void *v19[3];

  v19[2] = *(const void **)MEMORY[0x1E0C80C00];
  cf = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    if (a4)
    {
      v19[0] = CFSTR("DryRun");
      v19[1] = CFSTR("UseProvidedPixelBuffer");
      v12 = _checkForUnsupportedKeys(a4, v19);
      if ((_DWORD)v12)
        return v12;
    }
    if (idx < 0)
      return 4294950306;
    Count = *(const __CFArray **)(a1 + 96);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
      return 4294950306;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
    SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, (uint64_t)ValueAtIndex, (CMSampleBufferRef *)&cf);
    v16 = cf;
    if ((_DWORD)SampleBuffer)
    {
      v12 = SampleBuffer;
      if (!cf)
        return v12;
    }
    else
    {
      v12 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)cf, (uint64_t)ValueAtIndex, a4, a5, a6);
      v16 = cf;
      if (!cf)
        return v12;
    }
    CFRelease(v16);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t _decodeAuxiliaryImage(_QWORD *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, CFDictionaryRef theDict, _BOOL8 a7, int a8, CGImageRef *a9)
{
  const __CFAllocator *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  const __CFDictionary *MutableCopy;
  uint64_t v23;
  uint64_t WrappedPixelBufferForType;
  __CVBuffer *v25;
  OSType PixelFormatType;
  OSType v27;
  __CVBuffer *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v33;
  int v34;
  CFTypeRef v35;
  CFTypeRef cf;
  CFTypeRef v37;
  CVPixelBufferRef pixelBuffer;

  v17 = (const __CFAllocator *)a1[5];
  v37 = 0;
  pixelBuffer = 0;
  v35 = 0;
  cf = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  if (theDict)
  {
    v18 = CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("OutputPixelFormat"), &v32) != 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("RestrictedDecoding"), &v33);
    if (v33 && !VTAreVideoDecodersRunningInProcess())
    {
      v20 = FigSignalErrorAt();
LABEL_16:
      v21 = 0;
LABEL_36:
      MutableCopy = 0;
      goto LABEL_37;
    }
    v33 &= CMPhotoRestrictedDecodingDisabled() == 0;
  }
  else
  {
    v18 = 0;
  }
  v19 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)a1, a4, a5, (uint64_t)a3, (uint64_t)a2, &cf, &v35, &v34);
  v20 = v19;
  if ((_DWORD)v19 && (_DWORD)v19 != -16993)
    goto LABEL_16;
  v30 = 0;
  v31 = 0;
  if ((_DWORD)v19 || !FigCFDictionaryGetInt32IfPresent())
  {
    if (theDict)
      v21 = (const __CFDictionary *)CFRetain(theDict);
    else
      v21 = 0;
  }
  else
  {
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
    {
      v21 = 0;
      v20 = 4294950305;
      goto LABEL_37;
    }
    FigCFDictionaryGetInt32IfPresent();
    if (!v18)
      v32 = v31;
    v23 = FigCFDictionarySetInt();
    if ((_DWORD)v23)
    {
      v20 = v23;
      v21 = 0;
      goto LABEL_37;
    }
    v21 = MutableCopy;
  }
  WrappedPixelBufferForType = _decodeImage_1(a1, a2, a3, -1, v21, a7, 2, 1, &pixelBuffer);
  if ((_DWORD)WrappedPixelBufferForType)
  {
LABEL_35:
    v20 = WrappedPixelBufferForType;
    goto LABEL_36;
  }
  v25 = pixelBuffer;
  if (!v32)
  {
LABEL_34:
    WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v17, v25, 0, a8, a9);
    goto LABEL_35;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == v32)
  {
    v25 = pixelBuffer;
    if (!PixelFormatType)
      goto LABEL_34;
  }
  else
  {
    v29 = 0;
    WrappedPixelBufferForType = CMPhotoDecompressionSessionCopySurfacePool(a1[2], &v37);
    if ((_DWORD)WrappedPixelBufferForType)
      goto LABEL_35;
    WrappedPixelBufferForType = CMPhotoCreateFractionalPixelBuffer(pixelBuffer, v37, v32, v33, (const __CFDictionary *)v35, (CFTypeRef *)&v29);
    if ((_DWORD)WrappedPixelBufferForType)
      goto LABEL_35;
    if (pixelBuffer)
      CFRelease(pixelBuffer);
    v25 = v29;
    pixelBuffer = v29;
    if (!v32)
      goto LABEL_34;
  }
  v27 = CVPixelBufferGetPixelFormatType(v25);
  if (v27 == v32)
  {
    v25 = pixelBuffer;
    goto LABEL_34;
  }
  MutableCopy = 0;
  v20 = 4294950304;
LABEL_37:
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  if (v37)
    CFRelease(v37);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v21)
    CFRelease(v21);
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  return v20;
}

uint64_t CMPhotoRestrictedDecodingDisabled()
{
  if (CMPhotoRestrictedDecodingDisabled_onceToken != -1)
    dispatch_once(&CMPhotoRestrictedDecodingDisabled_onceToken, &__block_literal_global_42);
  return 0;
}

uint64_t _getAuxiliaryImageTypeForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;

  v13 = a2;
  v9 = a1 + 40;
  v12 = 0;
  result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!(_DWORD)result)
  {
    v11 = 0;
    result = _getAuxiliaryImageStorageForIndex(v9, v12, a3, &v11);
    if (!(_DWORD)result)
    {
      if (a5)
        *a5 = *(_DWORD *)(v11 + 16);
      result = 0;
      if (a6)
        *a6 = *(_DWORD *)(v11 + 20);
    }
  }
  return result;
}

uint64_t _getAuxiliaryImageTypeForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int *a6)
{
  int v6;

  if (!a2)
  {
    if (!(a5 | (unint64_t)a6))
      return 0;
    if ((a3 & 0x8000000000000000) == 0 && (*(_DWORD *)(a1 + 144) != 0) > a3)
    {
      if (a5)
        *(_DWORD *)a5 = 3;
      if (a6)
      {
        if (*(_DWORD *)(a1 + 144) <= 8u)
          v6 = 1278226488;
        else
          v6 = 1278226742;
        *a6 = v6;
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _getAuxiliaryImageTypeForIndex_1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t AuxiliaryEncodedPixelFormatForIndex;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v16;
  CFTypeRef v17;
  uint64_t (*v18)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t FigBaseObject;
  uint64_t (*v20)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;

  v6 = a1[5];
  v25 = 0;
  cf = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  if (!(a5 | a6))
  {
    AuxiliaryEncodedPixelFormatForIndex = 0;
    goto LABEL_25;
  }
  v12 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)a1, a2, a3, 0, 0, 0, &cf, (_DWORD *)&v22 + 1);
  AuxiliaryEncodedPixelFormatForIndex = v12;
  if (!(_DWORD)v12 || (_DWORD)v12 == -16993)
  {
    if (!(_DWORD)v12 && cf)
    {
      if (a6 && !FigCFDictionaryGetInt32IfPresent())
      {
        AuxiliaryEncodedPixelFormatForIndex = 4294950303;
        goto LABEL_25;
      }
      AuxiliaryEncodedPixelFormatForIndex = 0;
LABEL_19:
      if (a5)
        *(_DWORD *)a5 = HIDWORD(v22);
      if (a6)
        *(_DWORD *)a6 = v22;
      goto LABEL_25;
    }
    if (!a5)
    {
LABEL_17:
      if (a6)
      {
        AuxiliaryEncodedPixelFormatForIndex = _getAuxiliaryEncodedPixelFormatForIndex(a1, a2, a3, (int *)&v22);
        if ((_DWORD)AuxiliaryEncodedPixelFormatForIndex)
          goto LABEL_25;
      }
      goto LABEL_19;
    }
    v14 = a1[6];
    v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 16);
    if (v15)
    {
      v16 = v15(v14, a2, &v25, 0);
      if ((_DWORD)v16)
        goto LABEL_35;
      v17 = v25;
      v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v18)
        goto LABEL_23;
      v16 = v18(v17, a3, &v24);
      if ((_DWORD)v16)
      {
LABEL_35:
        AuxiliaryEncodedPixelFormatForIndex = v16;
        goto LABEL_25;
      }
      FigBaseObject = FigPictureReaderGetFigBaseObject();
      v20 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
      if (v20)
      {
        AuxiliaryEncodedPixelFormatForIndex = v20(FigBaseObject, *MEMORY[0x1E0CC4B18], v6, &v23);
        if ((_DWORD)AuxiliaryEncodedPixelFormatForIndex)
          goto LABEL_25;
        HIDWORD(v22) = CMPhotoGetAuxiliaryImageTypeFromURN();
        goto LABEL_17;
      }
    }
LABEL_23:
    AuxiliaryEncodedPixelFormatForIndex = 4294954514;
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  return AuxiliaryEncodedPixelFormatForIndex;
}

uint64_t _getAuxiliaryImageTypeForIndex_2(uint64_t a1, int a2, CFIndex idx, uint64_t a4, _DWORD *a5)
{
  return _getAuxiliaryTypeInfoForIndex(a1, idx, a5, 0);
}

uint64_t HEIFItemDecoderCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, char a6, unint64_t a7, unint64_t a8, __int128 *a9, size_t *a10, uint64_t *a11, _QWORD *a12, __CVBuffer **a13)
{
  const __CFAllocator *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char *v23;
  __CFDictionary *theDict;
  CFTypeRef v25;
  uint64_t ImageGeometryFromPictureReader;
  char v27;
  char IsInternalBuild;
  int v29;
  int v30;
  char v31;
  int ImageInformationFromJFIFByteStream;
  int v33;
  const void **v34;
  void *v35;
  CFTypeRef **v36;
  CFAllocatorRef v37;
  uint64_t FigBaseObject;
  uint64_t (*v39)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  int v40;
  unint64_t v41;
  unint64_t v42;
  __CFDictionary *Mutable;
  const void *v44;
  uint64_t v45;
  __CVBuffer **v46;
  int v47;
  uint64_t v48;
  int v49;
  double PixelBufferSize;
  double v51;
  unint64_t v52;
  _BOOL4 v54;
  _BOOL4 canDecodeTilesOrLayersIntoCanvas;
  __CVBuffer *v56;
  uint64_t v57;
  const void *v58;
  int v59;
  int *v60;
  const __CFDictionary *v61;
  int v62;
  const __CFAllocator *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t BytesPerPixelForPixelFormat;
  unint64_t v69;
  CFIndex v70;
  dispatch_semaphore_t v71;
  dispatch_semaphore_t v72;
  CFMutableArrayRef v73;
  CFMutableArrayRef v74;
  CFMutableSetRef v75;
  char *v76;
  uint64_t v78;
  char v79;
  unsigned int v80;
  int v81;
  unsigned int v84;
  CFAllocatorRef allocator;
  uint64_t v86;
  unint64_t v87[2];
  __int128 v88;
  char v89;
  BOOL v90;
  void *value;
  int v92;
  unint64_t v93;
  unint64_t v94;
  CFTypeRef v95;
  __CVBuffer *v96;
  uint64_t v97;
  void *v98[2];

  v19 = CFGetAllocator(*(CFTypeRef *)(a1 + 8));
  v95 = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v81 = *(unsigned __int8 *)(a5 + 112);
  v86 = a5;
  v20 = *(_DWORD *)(a5 + 104);
  value = 0;
  if (*(_BYTE *)(a1 + 49))
    v21 = 2;
  else
    v21 = 4;
  if (*(_BYTE *)(a1 + 49))
    v22 = 2;
  else
    v22 = 64;
  v80 = v22;
  v23 = (char *)malloc_type_calloc(1uLL, 0x3918uLL, 0x10600407F32F884uLL);
  if (!v23)
  {
    theDict = 0;
    goto LABEL_156;
  }
  v79 = a6;
  theDict = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!theDict)
    goto LABEL_156;
  *((_QWORD *)v23 + 1) = a1;
  if (a3)
    v25 = CFRetain(a3);
  else
    v25 = 0;
  *((_QWORD *)v23 + 5) = v25;
  ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v25, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 28), (unint64_t)(v23 + 176), (unint64_t)(v23 + 160));
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  v84 = v20;
  v78 = v21;
  ImageGeometryFromPictureReader = _copyColorInfoForItem(*(_BYTE **)(a1 + 8), *((const void **)v23 + 5), 0, v81, (CMVideoFormatDescriptionRef *)v23 + 3, *(unsigned __int8 *)(v86 + 128), (CFTypeRef *)v23 + 6, (CFTypeRef *)v23 + 7, (CFTypeRef *)v23 + 8, (CFTypeRef *)v23 + 9, (_DWORD *)v23 + 20, (_DWORD *)v23 + 21, 0);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(*((const void **)v23 + 5), &v92);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  if (v92 == 1936484717)
  {
    v27 = FigCFArrayContainsInt();
    IsInternalBuild = FigDebugIsInternalBuild();
    if (!CMPhotoAllowExperimentalCodecsOverride(IsInternalBuild | v27))
      goto LABEL_157;
  }
  if (!a2)
    a2 = (const void *)*((_QWORD *)v23 + 5);
  if (!CMPhotoPictureReaderCopyImageBitDepth(a2, (CFTypeRef *)&value) && value)
    CFDictionaryAddValue(theDict, CFSTR("PixelInformation"), value);
  v90 = 0;
  v29 = v92;
  if (v92 == 1635135537)
  {
    ImageGeometryFromPictureReader = _copyMultilayerProperties((uint64_t)v19, *((_QWORD *)v23 + 5), 0, 0, 0, &v90);
    if ((_DWORD)ImageGeometryFromPictureReader)
    {
LABEL_158:
      v48 = ImageGeometryFromPictureReader;
      goto LABEL_146;
    }
    v29 = v92;
  }
  allocator = v19;
  v30 = *(_DWORD *)(a1 + 44);
  v31 = v30 == 1;
  if (!v30)
  {
    v31 |= *(_BYTE *)(a1 + 40) | v90;
    if (v29 == 1635135537)
    {
      v31 |= (*(_QWORD *)&CMVideoFormatDescriptionGetDimensions(*((CMVideoFormatDescriptionRef *)v23 + 3)) & 0x100000001) != 0;
      v29 = v92;
    }
  }
  if (v29 == 1785750887)
  {
    v89 = 0;
    v97 = 0;
    v98[0] = 0;
    ImageInformationFromJFIFByteStream = CMPhotoPictureReaderCopyByteStreamForFirstTile((uint64_t)a3, v98, &v97);
    if (!ImageInformationFromJFIFByteStream)
      ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v98[0], v97, 0, 0, 0, &v89, 0, 0);
    v33 = ImageInformationFromJFIFByteStream;
    if (v98[0])
      CFRelease(v98[0]);
    if (v33)
      v31 = 1;
    else
      v31 |= (v89 & 0xFE) == 194;
  }
  v34 = (const void **)MEMORY[0x1E0C9AE50];
  if (v31)
    CFDictionaryAddValue(theDict, CFSTR("PreferSoftwareCodec"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (*(_DWORD *)(a1 + 44) == 2)
    CFDictionaryAddValue(theDict, CFSTR("RequireHardwareCodec"), *v34);
  if (CMPhotoPixelFormatIsPackedYUV(v84))
    CFDictionaryAddValue(theDict, CFSTR("AllowPackedBuffers"), *v34);
  if (*(_BYTE *)(a1 + 53) || v92 == 1635148593)
    CFDictionaryAddValue(theDict, CFSTR("UseVTDecompression"), *v34);
  v23[208] = 0;
  if (a7 == 1 && a8 == 1)
  {
    CMPhotoCFDictionarySetBoolean(theDict, CFSTR("SyncDecode"), 1);
    v23[208] = 1;
  }
  CMPhotoCFDictionarySetInt32(theDict, CFSTR("ThreadPriority"), *(_DWORD *)(v86 + 108));
  v23[157] = a13 != 0;
  if (a13)
    v35 = _canvasItemDecodeCallback;
  else
    v35 = _oneShotItemDecodeCallback;
  v36 = (CFTypeRef **)(v23 + 16);
  ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCreate(allocator, *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 16), v92, *(const void **)(*(_QWORD *)(a1 + 8) + 16), *((_QWORD *)v23 + 3), *(_QWORD *)a1, 0, theDict, (uint64_t)v35, (uint64_t)v23, (_QWORD *)v23 + 2);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  if (a4)
  {
    ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a4, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 28), 0, (unint64_t)&v93);
    if ((_DWORD)ImageGeometryFromPictureReader)
      goto LABEL_158;
    v37 = CFGetAllocator(a4);
    FigBaseObject = FigPictureReaderGetFigBaseObject();
    v39 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (!v39)
    {
      v48 = 4294954514;
      goto LABEL_146;
    }
    ImageGeometryFromPictureReader = v39(FigBaseObject, *MEMORY[0x1E0CC4B58], v37, &v95);
    if ((_DWORD)ImageGeometryFromPictureReader)
      goto LABEL_158;
  }
  CMPhotoDecompressionPluginGetDecoderRestrictions(*((_QWORD *)v23 + 2), (uint64_t)v95, (uint64_t)(v23 + 92));
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  v40 = CMPhotoDecompressionPluginSupportsNativeTiling(*((_QWORD *)v23 + 2));
  v23[156] = v40;
  v41 = *((_QWORD *)v23 + 21);
  if (v41 >= *((int *)v23 + 35))
  {
    v42 = *((_QWORD *)v23 + 20);
    if (v42 >= *((int *)v23 + 34) && v41 <= *((int *)v23 + 37) && v42 <= *((int *)v23 + 36))
    {
      v45 = v84;
      goto LABEL_73;
    }
  }
  if (v31 || *(_DWORD *)(a1 + 44))
  {
    if (v40)
    {
LABEL_157:
      ImageGeometryFromPictureReader = FigSignalErrorAt();
      goto LABEL_158;
    }
    v45 = v84;
    v46 = a13;
    goto LABEL_82;
  }
  LOBYTE(v97) = 0;
  v98[0] = 0;
  CMPhotoDecompressionPluginDispose(*v36);
  *v36 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseVTDecompression"), &v97);
  CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("PixelInformation"), v98);
  CFRelease(theDict);
  Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = Mutable;
  if (!Mutable)
  {
LABEL_156:
    v48 = 4294950305;
    goto LABEL_146;
  }
  v44 = *v34;
  CFDictionaryAddValue(Mutable, CFSTR("PreferSoftwareCodec"), v44);
  if ((_BYTE)v97)
    CFDictionaryAddValue(theDict, CFSTR("UseVTDecompression"), v44);
  if (v98[0])
    CFDictionaryAddValue(theDict, CFSTR("PixelInformation"), v98[0]);
  v45 = v84;
  if (v23[208])
    CMPhotoCFDictionarySetBoolean(theDict, CFSTR("SyncDecode"), 1);
  ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCreate(allocator, *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 16), v92, *(const void **)(*(_QWORD *)(a1 + 8) + 16), *((_QWORD *)v23 + 3), *(_QWORD *)a1, 0, theDict, (uint64_t)v35, (uint64_t)v23, (_QWORD *)v23 + 2);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  CMPhotoDecompressionPluginGetDecoderRestrictions((uint64_t)*v36, (uint64_t)v95, (uint64_t)(v23 + 92));
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  v40 = v23[156];
LABEL_73:
  v46 = a13;
  if (!v40)
  {
LABEL_82:
    if ((_DWORD)v45)
      *((_DWORD *)v23 + 38) = v45;
    else
      *((_DWORD *)v23 + 38) = 875704422;
    goto LABEL_86;
  }
  ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCopyPixelBufferAttributes(*((_QWORD *)v23 + 2));
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_158;
  if (v92 == 1785750887)
  {
    v47 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v45, 0, 0);
    if (v81 || (_DWORD)v45 && !v47)
      *((_DWORD *)v23 + 38) = v45;
  }
LABEL_86:
  if (!v23[157])
  {
    v56 = 0;
    goto LABEL_142;
  }
  v49 = (v23[156] & v79);
  if (*v46)
  {
    PixelBufferSize = CMPhotoGetPixelBufferSize(*v46);
    if (a11)
    {
      v52 = vcvtad_u64_f64(v51);
      v54 = *a11 <= vcvtad_u64_f64(PixelBufferSize) && a11[1] <= v52;
      v49 &= v54;
    }
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*((CFTypeRef *)v23 + 6), *((const void **)v23 + 7), *((const void **)v23 + 8), *((const void **)v23 + 9), *v46);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*((_DWORD *)v23 + 20), *((_DWORD *)v23 + 21), *v46);
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(*((const opaqueCMFormatDescription **)v23 + 3), *v46);
    canDecodeTilesOrLayersIntoCanvas = _canDecodeTilesOrLayersIntoCanvas(*v46, *((_QWORD *)v23 + 20), *((_QWORD *)v23 + 21), v93, v94, a7, a8, *((_DWORD *)v23 + 38), (int *)v23 + 23, *((const __CFDictionary **)v23 + 4), v92);
    v56 = 0;
  }
  else
  {
    v57 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      v57 = *(_QWORD *)(a1 + 8);
    v58 = *(const void **)(a1 + 24);
    v59 = *(unsigned __int8 *)(a1 + 49);
    if (!(_DWORD)v45)
      v45 = *((unsigned int *)v23 + 38);
    v87[0] = 0;
    v87[1] = 0;
    v88 = *a9;
    if (v49)
      v60 = (int *)(v23 + 92);
    else
      v60 = 0;
    if (v49)
      v61 = (const __CFDictionary *)*((_QWORD *)v23 + 4);
    else
      v61 = 0;
    ImageGeometryFromPictureReader = _createPixelBuffer(v58, v57, v59, v45, *a11, a11[1], *a10, a10[1], v87, v60, v61, &v96);
    if ((_DWORD)ImageGeometryFromPictureReader)
      goto LABEL_158;
    v56 = v96;
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*((CFTypeRef *)v23 + 6), *((const void **)v23 + 7), *((const void **)v23 + 8), *((const void **)v23 + 9), v96);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*((_DWORD *)v23 + 20), *((_DWORD *)v23 + 21), v56);
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(*((const opaqueCMFormatDescription **)v23 + 3), v56);
    canDecodeTilesOrLayersIntoCanvas = _canDecodeTilesOrLayersIntoCanvas(v56, *((_QWORD *)v23 + 20), *((_QWORD *)v23 + 21), v93, v94, a7, a8, *((_DWORD *)v23 + 38), (int *)v23 + 23, *((const __CFDictionary **)v23 + 4), v92);
  }
  v62 = canDecodeTilesOrLayersIntoCanvas & v49;
  v23[158] = canDecodeTilesOrLayersIntoCanvas & v49;
  v63 = allocator;
  if (v92 == 1936484717
    && *((_DWORD *)v23 + 38) == *(_DWORD *)(v86 + 104)
    && *(_OWORD *)(v86 + 8) == 0
    && *(_OWORD *)(v86 + 24) == 0)
  {
    v64 = v80;
    if (v62)
      goto LABEL_135;
    goto LABEL_157;
  }
  v64 = v80;
  if (!v62)
  {
    if (*(_BYTE *)(v86 + 114))
    {
      v64 = 2;
    }
    else
    {
      if (_lowMemoryConcurrentDecodeOverride_onceToken != -1)
        dispatch_once(&_lowMemoryConcurrentDecodeOverride_onceToken, &__block_literal_global_13);
      if (_getAvailableFreeMemory_onceToken != -1)
        dispatch_once(&_getAvailableFreeMemory_onceToken, &__block_literal_global_15);
      if (_getAvailableFreeMemory_sSyscallAllowed)
        v65 = MEMORY[0x1A85D11A0]();
      else
        v65 = 0;
      v66 = *((_QWORD *)v23 + 20);
      v67 = *((_QWORD *)v23 + 21);
      BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(*((_DWORD *)v23 + 38));
      if (v65)
      {
        v69 = a7 * a8;
        if (a7 * a8 >= v78)
          v69 = v78;
        if (v66 * v69 * v67 * BytesPerPixelForPixelFormat <= v65 >> 2)
          v64 = v78;
        else
          v64 = 2;
      }
      else
      {
        v64 = v78;
      }
      v63 = allocator;
    }
  }
LABEL_135:
  *((_DWORD *)v23 + 53) = v64;
  *((_DWORD *)v23 + 3644) = 0;
  v70 = v64;
  v71 = dispatch_semaphore_create(v64);
  *((_QWORD *)v23 + 28) = v71;
  if (!v71)
    goto LABEL_156;
  v72 = dispatch_semaphore_create(0);
  *((_QWORD *)v23 + 29) = v72;
  if (!v72)
    goto LABEL_156;
  v73 = CFArrayCreateMutable(v63, v70, 0);
  *((_QWORD *)v23 + 1823) = v73;
  if (!v73)
    goto LABEL_156;
  v74 = CFArrayCreateMutable(v63, 0, 0);
  *((_QWORD *)v23 + 1824) = v74;
  if (!v74)
    goto LABEL_156;
  v75 = CFSetCreateMutable(v63, v70, 0);
  *((_QWORD *)v23 + 1825) = v75;
  if (!v75)
    goto LABEL_156;
  v76 = v23 + 240;
  do
  {
    CFArrayAppendValue(*((CFMutableArrayRef *)v23 + 1823), v76);
    v76 += 224;
    --v70;
  }
  while (v70);
LABEL_142:
  v23[88] = CMPhotoDecompressionPluginIsHardwareSession(*((_QWORD *)v23 + 2)) == 0;
  *v23 = 1;
  *a12 = v23;
  if (v46 && !*v46)
  {
    v23 = 0;
    v48 = 0;
    *v46 = v56;
    v96 = 0;
  }
  else
  {
    v23 = 0;
    v48 = 0;
  }
LABEL_146:
  if (value)
    CFRelease(value);
  if (theDict)
    CFRelease(theDict);
  if (v96)
    CFRelease(v96);
  HEIFItemDecoderRelease((uint64_t)v23);
  if (v95)
    CFRelease(v95);
  return v48;
}

uint64_t CMPhotoDecompressionPluginCopyPixelBufferAttributes(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 24);
  if (v1)
    return v1();
  else
    return 4294950302;
}

void HEIFItemDecoderRelease(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (a1)
  {
    if (*(_BYTE *)a1)
      HEIFItemDecoderWaitForFinishAndReturnStatus(a1, 0, 0, 0);
    CMPhotoDecompressionPluginDispose(*(CFTypeRef **)(a1 + 16));
    v2 = *(const void **)(a1 + 24);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 40);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 48);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 72);
    if (v6)
      CFRelease(v6);
    v7 = *(NSObject **)(a1 + 224);
    if (v7)
      dispatch_release(v7);
    v8 = *(NSObject **)(a1 + 232);
    if (v8)
      dispatch_release(v8);
    v9 = *(const void **)(a1 + 14584);
    if (v9)
      CFRelease(v9);
    FigCFArrayApplyFunction();
    v10 = *(const void **)(a1 + 14592);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(a1 + 14600);
    if (v11)
      CFRelease(v11);
    free((void *)a1);
  }
}

double CMPhotoDecompressionPluginGetDecoderRestrictions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  double result;
  void (*v6)(uint64_t, uint64_t);

  if (a1 && a3)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (a2 && (v4 = *(void (**)(uint64_t))(v3 + 48)) != 0)
    {
      v4(a1);
    }
    else
    {
      v6 = *(void (**)(uint64_t, uint64_t))(v3 + 40);
      if (v6)
      {
        v6(a1, a3);
      }
      else
      {
        *(_DWORD *)(a3 + 56) = 0x7FFFFFFF;
        *(_OWORD *)(a3 + 16) = xmmword_1A8295930;
        *(_OWORD *)(a3 + 32) = xmmword_1A8295940;
        *(_QWORD *)(a3 + 48) = 0x7FFFFFFF00000001;
        *(_QWORD *)&result = 0x1000000010;
        *(_QWORD *)a3 = 0x1000000010;
      }
    }
  }
  return result;
}

uint64_t VTDecompressionPluginClass_supportsNativeTiling(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(*(_QWORD *)(result + 64) + 40);
  return result;
}

uint64_t VTDecompressionPluginClass_isHardwareSession(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFTypeRef propertyValueOut;

  v1 = *(_QWORD *)(a1 + 64);
  propertyValueOut = 0;
  if (VTSessionCopyProperty(*(VTSessionRef *)(v1 + 8), (CFStringRef)*MEMORY[0x1E0CED3D0], *(CFAllocatorRef *)a1, &propertyValueOut))
  {
    v2 = 0;
  }
  else
  {
    v2 = FigCFEqual();
  }
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  return v2;
}

uint64_t CMPhotoDecompressionPluginSupportsNativeTiling(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16)) != 0)
    return v1();
  else
    return 0;
}

uint64_t CMPhotoDecompressionPluginIsHardwareSession(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 56)) != 0)
    return v1();
  else
    return 0;
}

uint64_t CMPhotoCreateDefaultTripletsForTransfer(__CVBuffer *a1, uint64_t a2)
{
  OSType v2;
  const __CFBoolean *PixelBufferDescriptionKey;

  if (a1)
  {
    v2 = a2;
    CMPhotoPixelFormatIsFullRange(a2);
    PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E0CA9180]);
    if (CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey))
    {
      if (CMPhotoPixelFormatContainsYCbCr(v2))
        CMPhotoPixelBufferIsITUR_2100TF(a1);
    }
  }
  return 0;
}

void CMPhotoAddDefault601709MatrixToBufferIfAllowed(__CVBuffer *a1, int a2, int a3)
{
  uint64_t PixelFormatType;
  signed int v7;
  int IsFullRange;
  int v9;
  _BOOL4 v10;
  _BOOL4 v12;
  char v13;
  int v14;
  unsigned __int16 v15;
  int IsITUR_2100TF;
  int v17;
  const __CFString *v18;
  CFTypeRef v19;
  CFTypeRef *v20;

  if (!a1)
    return;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = PixelFormatType;
  IsFullRange = CMPhotoPixelFormatIsFullRange(PixelFormatType);
  v9 = CMPhotoPixelFormatContainsRGB(v7);
  v10 = 1;
  if (v7 <= 1278226735)
  {
    if ((v7 - 1278226488) <= 0x30 && ((1 << (v7 - 56)) & 0x1400000000001) != 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  if (((v7 - 1278226736) > 6 || ((1 << (v7 - 48)) & 0x45) == 0) && v7 != 1717855600 && v7 != 1751410032)
LABEL_10:
    v10 = v7 == 1751411059 || v7 == 1717856627;
LABEL_16:
  v12 = 1;
  if (v7 != 825306677 && v7 != 825437747)
    v12 = v7 == 1932996149;
  v13 = 1;
  if (v7 <= 1652056887)
  {
    if (v7 > 1650946097)
    {
      if (v7 <= 1651847471)
      {
        if (v7 == 1650946098)
          goto LABEL_49;
        v14 = 1651519798;
      }
      else
      {
        if (v7 == 1651847472 || v7 == 1651925816)
          goto LABEL_49;
        v14 = 1651926376;
      }
    }
    else if (v7 <= 1650942775)
    {
      if (v7 == 1647392369)
        goto LABEL_49;
      v14 = 1647719528;
    }
    else
    {
      if (v7 == 1650942776 || v7 == 1650943796)
        goto LABEL_49;
      v14 = 1650946096;
    }
    goto LABEL_47;
  }
  if (v7 > 1735549751)
  {
    if (v7 > 1919378231)
    {
      if (v7 == 1919378232 || v7 == 1919379252)
        goto LABEL_49;
      v14 = 1919381552;
      goto LABEL_47;
    }
    if (v7 == 1735549752)
      goto LABEL_49;
    v15 = 28720;
  }
  else
  {
    if (v7 <= 1734504495)
    {
      if (v7 == 1652056888)
        goto LABEL_49;
      v14 = 1734501176;
      goto LABEL_47;
    }
    if (v7 == 1734504496 || v7 == 1734505012)
      goto LABEL_49;
    v15 = 25140;
  }
  v14 = v15 | 0x67720000;
LABEL_47:
  if (v7 != v14)
    v13 = 0;
LABEL_49:
  IsITUR_2100TF = CMPhotoPixelBufferIsITUR_2100TF(a1);
  if (v9)
    v17 = 1;
  else
    v17 = v10;
  if (((v17 | v12) & 1) == 0 && (v13 & 1) == 0 && !IsITUR_2100TF)
  {
    v18 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
    v19 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    if (v19)
    {
      CFRelease(v19);
      return;
    }
    if (a2 && IsFullRange)
    {
      v20 = (CFTypeRef *)MEMORY[0x1E0CA8F10];
    }
    else
    {
      if (!a3)
        return;
      v20 = (CFTypeRef *)MEMORY[0x1E0CA8F18];
    }
    CVBufferSetAttachment(a1, v18, *v20, kCVAttachmentMode_ShouldPropagate);
  }
}

uint64_t CMPhotoPixelFormatContainsRGB(OSType pixelFormat)
{
  CFDictionaryRef v1;
  unsigned __int8 v3;

  v3 = 0;
  if (pixelFormat == 1380401729)
  {
    return 1;
  }
  else
  {
    v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
    FigCFDictionaryGetBooleanIfPresent();
    if (v1)
      CFRelease(v1);
  }
  return v3;
}

void _oneShotItemDecodeCallback(int a1, int a2, void *cf, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  __CVBuffer *v10;

  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  *(_DWORD *)(a5 + 16) = a2;
  if (cf)
    v10 = (__CVBuffer *)CFRetain(cf);
  else
    v10 = 0;
  *(_QWORD *)a5 = v10;
  if (!*(_BYTE *)(a4 + 156))
  {
    CMPhotoRemoveColorInformationGuessedBy((__CVBuffer *)cf);
    v10 = *(__CVBuffer **)a5;
  }
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*(CFTypeRef *)(a4 + 48), *(const void **)(a4 + 56), *(const void **)(a4 + 64), *(const void **)(a4 + 72), v10);
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 84), *(__CVBuffer **)a5);
  if (!*(_BYTE *)(a4 + 208))
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a5 + 8));
  if (*v9 == 1)
    kdebug_trace();
}

const __CFBoolean *CMPhotoPixelBufferContainsGrayscale(__CVBuffer *a1)
{
  const __CFBoolean *PixelBufferDescriptionKey;

  PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E0CA9178]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

const __CFBoolean *CMPhotoPixelBufferContainsYCbCr(__CVBuffer *a1)
{
  const __CFBoolean *PixelBufferDescriptionKey;

  PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E0CA9188]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

void _removeYCbCrMatrixFromBufferIfNeeded(__CVBuffer *a1)
{
  unsigned int v2;

  v2 = CMPhotoPixelBufferContainsRGB(a1);
  if (v2 | CMPhotoPixelBufferContainsGrayscale(a1))
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
}

const __CFBoolean *CMPhotoPixelBufferContainsRGB(__CVBuffer *a1)
{
  const __CFBoolean *PixelBufferDescriptionKey;

  PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E0CA9180]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

void CMPhotoAddColorInformationToPixelBufferAccordingToFormat(CFTypeRef value, const void *a2, const void *a3, const void *a4, CVBufferRef buffer)
{
  const __CFBoolean *PixelBufferDescriptionKey;
  unsigned int v10;
  const __CFBoolean *v11;
  unsigned int v12;
  BOOL v13;

  if (buffer)
  {
    if (value)
      CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CD8], value, kCVAttachmentMode_ShouldPropagate);
    PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(buffer, (const void *)*MEMORY[0x1E0CA9180]);
    v10 = CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
    v11 = (const __CFBoolean *)_getPixelBufferDescriptionKey(buffer, (const void *)*MEMORY[0x1E0CA9178]);
    v12 = CMPhotoCFBooleanGetValue(v11);
    if (CMPhotoPixelBufferIsITUR_2100TF(buffer))
    {
      if (a2 && !v12)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8D68], a2, kCVAttachmentMode_ShouldPropagate);
      if (a3)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], a3, kCVAttachmentMode_ShouldPropagate);
    }
    if (a4)
    {
      if (v10)
        v13 = 0;
      else
        v13 = v12 == 0;
      if (v13)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], a4, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

const __CFBoolean *CMPhotoCFBooleanGetValue(const __CFBoolean *result)
{
  const __CFBoolean *v1;
  CFTypeID v2;
  BOOL v3;
  int valuePtr;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (CFBooleanGetTypeID() == v2)
    {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }
    else if (CFNumberGetTypeID() == v2)
    {
      valuePtr = 0;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr))
        v3 = valuePtr == 0;
      else
        v3 = 1;
      return (const __CFBoolean *)!v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *_getPixelBufferDescriptionKey(__CVBuffer *a1, const void *a2)
{
  const __CFDictionary *Attributes;
  const __CFDictionary *Value;

  if (a1
    && (Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes()) != 0
    && ((Value = (const __CFDictionary *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E0CA9038])) != 0
     || (CVPixelBufferGetPixelFormatType(a1),
         (Value = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0)))
  {
    return CFDictionaryGetValue(Value, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t CMPhotoPixelBufferIsITUR_2100TF(__CVBuffer *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  int v4;
  CGColorSpaceRef v5;
  CGColorSpaceRef v7;

  v7 = 0;
  if (!a1)
    return 0;
  v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v2)
  {
    if (FigCFEqual())
      v3 = 1;
    else
      v3 = FigCFEqual() != 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &v7, 1, 0);
  v5 = v7;
  if (!v4 && v7)
    v3 = v3 | CGColorSpaceUsesITUR_2100TF(v7);
  if (v2)
    CFRelease(v2);
  if (v5)
    CFRelease(v5);
  return v3;
}

BOOL _canDecodeTilesOrLayersIntoCanvas(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, int a8, int *a9, const __CFDictionary *a10, int a11)
{
  OSType PixelFormatType;
  double PixelBufferSize;
  double v21;
  _BOOL8 result;
  double v23;
  double v24;
  int v25;
  IOSurfaceRef IOSurface;
  _BOOL4 v28;
  unint64_t v29;
  _BOOL4 v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  size_t v45;
  size_t BytesPerRowOfPlane;
  _BOOL4 v48;
  _BOOL4 v50;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;
  __int128 v53;
  __int128 v54;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  if (a11 == 1785750887)
    return PixelFormatType == a8;
  v23 = PixelBufferSize;
  v24 = v21;
  v25 = CMPhotoDeviceSupportsTileDecodingToCanvas();
  result = 0;
  if ((a8 & 0xFFFFFFEF) != 0x34343466 && v25)
  {
    IOSurface = CVPixelBufferGetIOSurface(a1);
    v28 = PixelFormatType == a8 && IOSurface != 0;
    v53 = 0u;
    v54 = 0u;
    CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(a10, &v53);
    if ((unint64_t)v53 | (unint64_t)v54)
    {
      v31 = 0;
      v29 = a7;
    }
    else
    {
      v29 = a7;
      v31 = (a6 < 2 || !*((_QWORD *)&v53 + 1)) && (a7 < 2 || *((_QWORD *)&v54 + 1) == 0);
    }
    v32 = v31 && v28;
    if (a2 > a9[6])
      v32 = 0;
    if (a3 > a9[4])
      v32 = 0;
    if (a4 | a5)
      v33 = a4;
    else
      v33 = a2;
    if (a4 | a5)
      v34 = a5;
    else
      v34 = a3;
    if (v33 < a9[7] || v34 < a9[5])
      v32 = 0;
    if (a6 >= 2 && a2 % *a9)
      v32 = 0;
    v36 = vcvtad_u64_f64(v23);
    v37 = vcvtad_u64_f64(v24);
    if (v29 >= 2 && a3 % a9[1])
      v32 = 0;
    v38 = a2 + v36 + ~((v36 - 1) % a2);
    v39 = a3 + v37 + ~((v37 - 1) % a3);
    if (a4 | a5)
    {
      v38 = a4 + a9[2] + ~((a4 - 1) % a9[2]) + v36 + ~((v36 - 1) % a2);
      v39 = a5 + a9[3] + ~((a5 - 1) % a9[3]) + v37 + ~((v37 - 1) % a3);
    }
    v40 = 0;
    if (a6 == 1)
      v41 = *((_QWORD *)&v53 + 1) + a2;
    else
      v41 = v38;
    if (v29 == 1)
      v42 = *((_QWORD *)&v54 + 1) + a3;
    else
      v42 = v39;
    if (v41 <= a9[8])
      v43 = v32;
    else
      v43 = 0;
    if (v42 <= a9[9])
      v44 = v43;
    else
      v44 = 0;
    while (1)
    {
      v45 = CVPixelBufferGetPlaneCount(a1) ? CVPixelBufferGetPlaneCount(a1) : 1;
      if (v40 >= v45)
        break;
      if (CVPixelBufferIsPlanar(a1))
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v40);
      else
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      v48 = BytesPerRowOfPlane <= a9[10] && BytesPerRowOfPlane % *a9 == 0;
      v44 &= v48;
      ++v40;
    }
    extraRowsOnBottom = 0;
    extraColumnsOnRight = 0;
    CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
    v50 = extraColumnsOnRight + v36 >= v41 && extraRowsOnBottom + v37 >= v42;
    return v50 & v44;
  }
  return result;
}

uint64_t CMPhotoDeviceSupportsTileDecodingToCanvas()
{
  pthread_once(&CMPhotoDeviceSupportsTileDecodingToCanvas_onceToken, (void (*)(void))_once_CMPhotoDeviceSupportsTileDecodingToCanvas);
  return sDeviceSupportsTileDecodingToCanvas;
}

uint64_t CMPhotoGetAuxiliaryImageTypeFromURN()
{
  if (FigCFEqual() || FigCFEqual())
    return 3;
  if (FigCFEqual() || FigCFEqual())
    return 2;
  if (FigCFEqual())
    return 5;
  return 4;
}

uint64_t _parseAuxiliaryImageMetadataForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, CFTypeRef a4, CFTypeRef a5, int *a6, CGImageMetadata **a7, const __CFDictionary **a8)
{
  const __CFAllocator *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t ContiguousDataFromChunks;
  uint64_t (*v20)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t (*v21)(CFTypeRef, uint64_t *);
  _QWORD *v22;
  uint64_t (*v23)(CFTypeRef, _QWORD, uint64_t *, void **, void **, CFTypeRef *, _QWORD, CFTypeRef *);
  uint64_t v24;
  uint64_t (*v25)(CFTypeRef, _QWORD, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  void *v31;
  void *v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef cf;

  v16 = CFGetAllocator(a1);
  v35 = 0;
  cf = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  if (!a5)
  {
    if (!a4)
    {
      v17 = a1[6];
      v18 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 16);
      if (!v18)
        goto LABEL_21;
      ContiguousDataFromChunks = v18(v17, a2, &cf, 0);
      if ((_DWORD)ContiguousDataFromChunks)
        goto LABEL_34;
      a4 = cf;
    }
    v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v20)
      goto LABEL_21;
    ContiguousDataFromChunks = v20(a4, a3, &v35);
    if ((_DWORD)ContiguousDataFromChunks)
      goto LABEL_34;
    a5 = v35;
  }
  v29 = 0;
  v21 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v21)
    goto LABEL_21;
  ContiguousDataFromChunks = v21(a5, &v29);
  if ((_DWORD)ContiguousDataFromChunks)
    goto LABEL_34;
  if (v29 < 1)
  {
LABEL_33:
    v26 = 4294950303;
    goto LABEL_22;
  }
  v28 = 0;
  v22 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v22 >= 3uLL)
  {
    v23 = (uint64_t (*)(CFTypeRef, _QWORD, uint64_t *, void **, void **, CFTypeRef *, _QWORD, CFTypeRef *))v22[16];
    if (v23)
    {
      v24 = v23(a5, 0, &v28, &v32, &v31, &v34, 0, &v30);
      goto LABEL_17;
    }
  }
  v25 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v25)
  {
LABEL_21:
    v26 = 4294954514;
    goto LABEL_22;
  }
  v24 = v25(a5, 0, &v28, &v32, &v31, &v34, 0);
LABEL_17:
  v26 = v24;
  if ((_DWORD)v24)
    goto LABEL_22;
  ContiguousDataFromChunks = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v16, v28, (uint64_t)v32, (uint64_t)v31, (uint64_t)v34, 0, (uint64_t)v30, 0, (__CFData **)&v33);
  if (!(_DWORD)ContiguousDataFromChunks)
  {
    if (!CMPhotoAuxiliaryImageMetadataCreateFromXMPData(v16, (const __CFData *)v33, a6, a7, 0, a8))
    {
      v26 = 0;
      goto LABEL_22;
    }
    goto LABEL_33;
  }
LABEL_34:
  v26 = ContiguousDataFromChunks;
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v30)
    CFRelease(v30);
  free(v32);
  free(v31);
  return v26;
}

const __CFDictionary *_checkForbiddenAuxOptions(const __CFDictionary *theDict)
{
  const __CFDictionary *v1;
  uint64_t v2;
  _QWORD v3[5];

  v3[4] = *MEMORY[0x1E0C80C00];
  if (theDict)
  {
    v1 = theDict;
    v2 = 0;
    v3[0] = CFSTR("BackCGImageWithIOSurface");
    v3[1] = CFSTR("UseProvidedPixelBuffer");
    v3[2] = CFSTR("TiledDownsampling");
    v3[3] = CFSTR("DryRun");
    while (!CFDictionaryContainsKey(v1, (const void *)v3[v2]))
    {
      if (++v2 == 4)
        return 0;
    }
    return (const __CFDictionary *)FigSignalErrorAt();
  }
  return theDict;
}

const __CFDictionary *_checkForbiddenAuxOptions_0(const __CFDictionary *theDict)
{
  const __CFDictionary *v1;
  uint64_t v2;
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  if (theDict)
  {
    v1 = theDict;
    v2 = 0;
    v3[0] = CFSTR("BackCGImageWithIOSurface");
    v3[1] = CFSTR("UseProvidedPixelBuffer");
    v3[2] = CFSTR("DryRun");
    while (!CFDictionaryContainsKey(v1, (const void *)v3[v2]))
    {
      if (++v2 == 3)
        return 0;
    }
    return (const __CFDictionary *)FigSignalErrorAt();
  }
  return theDict;
}

uint64_t _invalidate(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[58];
  if (v2)
  {
    CFRelease(v2);
    a1[58] = 0;
  }
  _dropPreparedDecoders((uint64_t)a1);
  v3 = (const void *)a1[11];
  if (v3)
  {
    CFRelease(v3);
    a1[11] = 0;
  }
  FigSimpleMutexDestroy();
  a1[9] = 0;
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  CMPhotoUnifiedJPEGDecoderDestroy(a1[12]);
  a1[12] = 0;
  return 0;
}

uint64_t _invalidate_0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return 0;
}

uint64_t _invalidate_1(uint64_t a1)
{
  CFTypeRef *v2;
  NSObject *v3;
  const void *v4;
  _QWORD block[5];

  v2 = (CFTypeRef *)(a1 + 40);
  v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = v2;
    dispatch_sync(v3, block);
    v4 = *(const void **)(a1 + 64);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
  if (*v2)
  {
    CFRelease(*v2);
    *v2 = 0;
  }
  _closeContainer_1(a1);
  return 0;
}

uint64_t _invalidate_2(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  _closeContainer_2(a1);
  return 0;
}

uint64_t _invalidate_3(uint64_t a1)
{
  uint64_t v2;

  _releaseAllContainerResources(a1);
  v2 = *(unsigned int *)(a1 + 396);
  if ((_DWORD)v2)
  {
    JPEGDeviceInterface_closeDriverConnection(v2);
    *(_DWORD *)(a1 + 396) = 0;
  }
  return 0;
}

uint64_t _invalidate_4(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;

  _finishAsyncEncoding((_QWORD *)a1);
  v2 = *(const void **)(a1 + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v3 = *(const void **)(a1 + 120);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v4 = *(const void **)(a1 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v6 = *(const void **)(a1 + 160);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 160) = 0;
  }
  FigSemaphoreDestroy();
  *(_QWORD *)(a1 + 200) = 0;
  v7 = *(NSObject **)(a1 + 192);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v8 = *(const void **)(a1 + 128);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 128) = 0;
  }
  _destroySequenceGroupReaders(*(const __CFArray **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  return 0;
}

void CMPhotoDecompressionContainerClass_Finalize(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *);
  void (*v4)(_QWORD *);
  const void *v5;
  void *v6;
  void *v7;
  const void *v8;

  v2 = a1[4];
  if (v2)
  {
    v3 = *(void (**)(_QWORD *))(v2 + 16);
    if (v3)
    {
      v3(a1);
      v2 = a1[4];
    }
    v4 = *(void (**)(_QWORD *))(v2 + 8);
    if (v4)
      v4(a1);
  }
  v5 = (const void *)a1[68];
  if (v5)
  {
    CFRelease(v5);
    a1[68] = 0;
  }
  v6 = (void *)a1[69];
  if (v6)
  {
    a1[69] = 0;
    free(v6);
  }
  v7 = (void *)a1[70];
  if (v7)
  {
    a1[70] = 0;
    free(v7);
  }
  v8 = (const void *)a1[2];
  if (v8)
  {
    CFRelease(v8);
    a1[2] = 0;
  }
}

uint64_t _closeContainer(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;

  v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_BYTE *)(a1 + 368) = 0;
  v5 = *(const void **)(a1 + 416);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 416) = 0;
  }
  *(_BYTE *)(a1 + 392) = 0;
  v6 = *(const void **)(a1 + 448);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 448) = 0;
  }
  *(_BYTE *)(a1 + 424) = 0;
  v7 = *(const void **)(a1 + 464);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 464) = 0;
  }
  *(_BYTE *)(a1 + 456) = 0;
  v8 = *(const void **)(a1 + 480);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 480) = 0;
  }
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_QWORD *)(a1 + 264))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      _releaseAuxImageStorage((_QWORD *)(*(_QWORD *)(a1 + 272) + v9));
      ++v10;
      v9 += 96;
    }
    while (v10 < *(_QWORD *)(a1 + 264));
  }
  v11 = *(void **)(a1 + 272);
  if (v11)
  {
    *(_QWORD *)(a1 + 272) = 0;
    free(v11);
  }
  *(_BYTE *)(a1 + 153) = 0;
  _releaseAuxImageStorage((_QWORD *)(a1 + 160));
  return 0;
}

uint64_t _closeContainer_0(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = *(const void **)(a1 + 288);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v3 = *(const void **)(a1 + 296);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v4 = *(const void **)(a1 + 304);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v5 = *(const void **)(a1 + 312);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v6 = *(const void **)(a1 + 320);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 320) = 0;
  }
  v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v9 = *(const void **)(a1 + 56);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
  return 0;
}

uint64_t _closeContainer_1(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return 0;
}

uint64_t _closeContainer_2(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex v3;
  _QWORD *ValueAtIndex;
  const __CFArray *v5;
  CFIndex v6;
  _QWORD *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;

  _releaseSequenceReader(*(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 80) = 0;
  v2 = *(const __CFArray **)(a1 + 88);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (CFArrayGetCount(v2) <= v3)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v3);
      _releaseSequenceReader(ValueAtIndex);
      ++v3;
      v2 = *(const __CFArray **)(a1 + 88);
    }
    while (v2);
  }
  v5 = *(const __CFArray **)(a1 + 96);
  if (v5)
  {
    v6 = 0;
    do
    {
      if (CFArrayGetCount(v5) <= v6)
        break;
      v7 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
      _releaseSequenceReader(v7);
      ++v6;
      v5 = *(const __CFArray **)(a1 + 96);
    }
    while (v5);
  }
  v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v11 = *(const void **)(a1 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v12 = *(NSObject **)(a1 + 104);
  if (v12)
    dispatch_release(v12);
  *(_QWORD *)(a1 + 104) = 0;
  return 0;
}

uint64_t _closeContainer_3(uint64_t a1)
{
  return _closeContainerAndCopyBacking(a1, 0, 0, 0);
}

uint64_t _closeContainer_4(uint64_t a1)
{
  return _closeContainerAndCopyBacking_0(a1, 0, 0, 0);
}

void _destroyAuxMetadataCache(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(const void **)(a1 + 64);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 56) = 0;
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void CMPhotoUnifiedJPEGDecoderDestroy(uint64_t a1)
{
  const __CFAllocator *v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = *(const __CFAllocator **)(a1 + 8);
    v3 = *(void **)(a1 + 224);
    if (v3)
    {
      if (!*(_BYTE *)(a1 + 240) || (IOSurfaceDecrementUseCount((IOSurfaceRef)v3), (v3 = *(void **)(a1 + 224)) != 0))
        CFRelease(v3);
    }
    applejpeg_decode_destroy();
    InputWrapper_destroy(*(const void ***)(a1 + 80));
    v4 = *(const void **)(a1 + 88);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 16);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 40);
    if (v6)
      CFRelease(v6);
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    CFAllocatorDeallocate(v2, (void *)a1);
    if (v2)
      CFRelease(v2);
  }
}

void InputWrapper_destroy(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t _dropPreparedDecoders(uint64_t a1)
{
  const __CFArray *v2;
  CFRange v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v2 = *(const __CFArray **)(a1 + 88);
  if (v2)
  {
    v4.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    v4.location = 0;
    CFArrayApplyFunction(v2, v4, (CFArrayApplierFunction)_disposePreparedDecoder, 0);
  }
  *(_BYTE *)(a1 + 80) = 0;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
}

uint64_t CMPhotoCompressionSupportedForContainerAndCodec(int a1, int a2, uint64_t a3, _BYTE *a4)
{
  char v5;
  uint64_t result;

  if (a4)
  {
    if (a3)
    {
      result = FigSignalErrorAt();
    }
    else
    {
      if (a1 == 1)
      {
        result = 0;
        v5 = a2 == 1785750887;
        goto LABEL_10;
      }
      if (!a1 && a2 == 1752589105)
      {
        v5 = CMPhotoSupportsHEVCEncode();
        result = 0;
LABEL_10:
        *a4 = v5;
        return result;
      }
      result = 0;
    }
    v5 = 0;
    goto LABEL_10;
  }
  return 4294950306;
}

uint64_t CMPhotoSupportsHEVCEncode()
{
  return 1;
}

void ___getHWQueueForFormat_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[5];
  int v12;

  v2 = *(_DWORD *)(a1 + 48);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v3 + 56))
      {
        v4 = v3 + 48;
        v5 = *(_QWORD **)(a1 + 40);
LABEL_7:
        *v5 = v4;
        return;
      }
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 32);
    }
    **(_QWORD **)(a1 + 40) = v3 + 144;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (_BYTE *)(v7 + 48);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD **)(a1 + 40);
    if (*(_QWORD *)(v6 + 104))
    {
      v4 = v6 + 96;
      goto LABEL_7;
    }
    *v5 = v6 + 144;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (_BYTE *)(v7 + 96);
  }
  if (!*v8)
  {
    v9 = *(NSObject **)(v7 + 40);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___getHWQueueForFormat_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_30;
    v12 = v2;
    v11[4] = v7;
    dispatch_async(v9, v11);
    v10 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 48))
      *(_BYTE *)(v10 + 48) = 1;
    else
      *(_BYTE *)(v10 + 96) = 1;
  }
}

uint64_t CMPhotoDecompressionContainerGetExifCountForIndex(_QWORD *a1, const __CFNumber *a2, _QWORD *a3)
{
  return CMPhotoDecompressionContainerGetExifCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t _getExifCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v8 = a2;
  v6 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!(_DWORD)result)
  {
    result = _parseExifIfNeeded(v6, 0);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_BYTE *)(a1 + 281) != 0;
    }
  }
  return result;
}

uint64_t _getExifCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray **a4)
{
  const __CFArray *Count;

  if (a2)
    return FigSignalErrorAt();
  if (a4)
  {
    Count = *(const __CFArray **)(a1 + 320);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    *a4 = Count;
  }
  return 0;
}

uint64_t _getExifCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return _getMetadataCountForIndex(a1, 0, a2, a4);
}

uint64_t CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t _copyHEIFItemPropertiesForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFDictionary **a4)
{
  const __CFDictionary **v4;
  uint64_t v7;
  const __CFDictionary *Mutable;
  uint64_t RotationMatrixFromQuaternionArray;
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t ImageGeometryForIndex_1;
  const void *v13;
  int IntIfPresent;
  int v15;
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  const __CFAllocator *v18;
  int v19;
  unint64_t v20;
  CFTypeRef v21;
  int v22;
  unint64_t v23;
  CFMutableDictionaryRef v24;
  CFMutableDictionaryRef v25;
  void *v26;
  uint64_t IntrinsicsArrayFromHorizontalFOV;
  __CFString **v28;
  const __CFDictionary *v29;
  int v30;
  const __CFArray *v31;
  uint64_t v32;
  uint64_t *v33;
  const void *v34;
  const void *v35;
  int v36;
  int v37;
  const __CFAllocator *v38;
  int v39;
  __CFDictionary *v40;
  __CFDictionary *v41;
  uint64_t ExtrinsicsPositionArrayFromExtrinsicsValues;
  const __CFDictionary **v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  CFTypeRef v51;
  CFDictionaryRef theDict;
  CFTypeRef cf;
  void *value;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  theDict = 0;
  if (!a4)
    return 0;
  v4 = a4;
  v7 = _copyMetadataForIndex(a1, 3, a2, -1, 0, &theDict);
  if ((_DWORD)v7 != -16993)
  {
    RotationMatrixFromQuaternionArray = v7;
    if ((_DWORD)v7)
      goto LABEL_62;
    v10 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_72;
    v49 = 0;
    v50 = 0;
    ImageGeometryForIndex_1 = _getImageGeometryForIndex_1((uint64_t)a1, a2, v11, &v49, &v50, 0);
    if ((_DWORD)ImageGeometryForIndex_1)
    {
LABEL_70:
      RotationMatrixFromQuaternionArray = ImageGeometryForIndex_1;
      goto LABEL_63;
    }
    v48 = 1;
    v13 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC60B8]);
    v47 = 0;
    IntIfPresent = FigCFDictionaryGetIntIfPresent();
    v15 = IntIfPresent;
    if (v13)
    {
      v16 = CFGetAllocator(a1);
      ImageGeometryForIndex_1 = CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(v16, v13, v49, v50, (char *)&v48, (__CFArray **)&v51);
      if ((_DWORD)ImageGeometryForIndex_1)
        goto LABEL_70;
      if (!v15)
      {
        if (v48)
        {
          if (!CMPhotoGetHorizontalFOVFromIntrinsicsArray(v51, v49, v50, (uint64_t)&v47))
          {
            ImageGeometryForIndex_1 = FigCFDictionarySetInt();
            if ((_DWORD)ImageGeometryForIndex_1)
              goto LABEL_70;
          }
        }
      }
    }
    else if (IntIfPresent)
    {
      ImageGeometryForIndex_1 = FigCFDictionarySetInt();
      if ((_DWORD)ImageGeometryForIndex_1)
        goto LABEL_70;
      v17 = CFGetAllocator(a1);
      ImageGeometryForIndex_1 = CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v17, v49, v50, v47, (__CFArray **)&v51);
      if ((_DWORD)ImageGeometryForIndex_1)
        goto LABEL_70;
    }
    if (!v51)
    {
LABEL_32:
      v56 = 0;
      v55 = 0;
      v46 = 0;
      v29 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC60B0]);
      v30 = FigCFDictionaryGetIntIfPresent();
      if (!v29 && !v30)
      {
LABEL_60:
        if (CFDictionaryGetCount(Mutable) < 1)
          goto LABEL_4;
        RotationMatrixFromQuaternionArray = 0;
        *v4 = Mutable;
LABEL_62:
        Mutable = 0;
        goto LABEL_63;
      }
      v45 = 0;
      if (v29)
      {
        v31 = (const __CFArray *)CFDictionaryGetValue(v29, (const void *)*MEMORY[0x1E0CC3F20]);
        if (v31 && CFArrayGetCount(v31) == 3)
        {
          v32 = 0;
          v33 = &v55;
          while (FigCFArrayGetInt32AtIndex())
          {
            ++v32;
            v33 = (uint64_t *)((char *)v33 + 4);
            if (v32 == 3)
            {
              v34 = CFDictionaryGetValue(v29, (const void *)*MEMORY[0x1E0CC3F30]);
              if (v34)
              {
                v35 = v34;
                v36 = 1;
              }
              else
              {
                v35 = CFDictionaryGetValue(v29, (const void *)*MEMORY[0x1E0CC3F28]);
                v36 = 0;
              }
              CMPhotoCFDictionaryGetIntIfPresent(v29, (const void *)*MEMORY[0x1E0CC3F38], &v45);
              goto LABEL_48;
            }
          }
        }
        RotationMatrixFromQuaternionArray = 4294950304;
        goto LABEL_63;
      }
      v35 = 0;
      v36 = 0;
      v37 = v46;
      if (!a2)
        v37 = 0;
      LODWORD(v55) = v37;
LABEL_48:
      v38 = CFGetAllocator(a1);
      v39 = v45;
      cf = 0;
      value = 0;
      v40 = CFDictionaryCreateMutable(v38, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v41 = v40;
      if (!v40)
      {
        RotationMatrixFromQuaternionArray = 4294950305;
LABEL_55:
        if (value)
          CFRelease(value);
        if ((_DWORD)RotationMatrixFromQuaternionArray)
          goto LABEL_63;
        CFDictionarySetValue(Mutable, CFSTR("CameraExtrinsics"), v41);
        if (v41)
          CFRelease(v41);
        goto LABEL_60;
      }
      ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCFDictionarySetInt32(v40, CFSTR("CoordinateSystemID"), v39);
      if ((_DWORD)ExtrinsicsPositionArrayFromExtrinsicsValues
        || (ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(v38, v55, SHIDWORD(v55), v56, (__CFArray **)&cf), (_DWORD)ExtrinsicsPositionArrayFromExtrinsicsValues))
      {
        RotationMatrixFromQuaternionArray = ExtrinsicsPositionArrayFromExtrinsicsValues;
      }
      else
      {
        RotationMatrixFromQuaternionArray = CMPhotoCreateRotationMatrixFromQuaternionArray(v38, v35, v36, (__CFArray **)&value);
        if (!(_DWORD)RotationMatrixFromQuaternionArray)
        {
          CFDictionarySetValue(v41, CFSTR("Position"), cf);
          CFDictionarySetValue(v41, CFSTR("Rotation"), value);
          goto LABEL_53;
        }
      }
      CFRelease(v41);
      v41 = 0;
LABEL_53:
      if (cf)
        CFRelease(cf);
      goto LABEL_55;
    }
    v44 = v4;
    v18 = CFGetAllocator(a1);
    v19 = v47;
    v20 = v50;
    v21 = v51;
    v22 = v48;
    v23 = v49;
    value = 0;
    v24 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v24)
    {
LABEL_72:
      RotationMatrixFromQuaternionArray = 4294950305;
      goto LABEL_63;
    }
    v25 = v24;
    if (v21)
    {
      v26 = (void *)CFRetain(v21);
      value = v26;
    }
    else
    {
      IntrinsicsArrayFromHorizontalFOV = CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v18, v23, v20, v19, (__CFArray **)&value);
      if ((_DWORD)IntrinsicsArrayFromHorizontalFOV)
      {
        RotationMatrixFromQuaternionArray = IntrinsicsArrayFromHorizontalFOV;
        CFRelease(v25);
        v25 = 0;
        v4 = v44;
LABEL_27:
        if (value)
          CFRelease(value);
        if ((_DWORD)RotationMatrixFromQuaternionArray)
          goto LABEL_63;
        CFDictionarySetValue(Mutable, CFSTR("CameraModel"), v25);
        if (v25)
          CFRelease(v25);
        goto LABEL_32;
      }
      v26 = value;
    }
    v4 = v44;
    CFDictionarySetValue(v25, CFSTR("Intrinsics"), v26);
    v28 = kCMPhotoCameraModelType_GenericPinhole;
    if (v22)
      v28 = kCMPhotoCameraModelType_SimplifiedPinhole;
    CFDictionarySetValue(v25, CFSTR("ModelType"), *v28);
    RotationMatrixFromQuaternionArray = 0;
    goto LABEL_27;
  }
  Mutable = 0;
LABEL_4:
  RotationMatrixFromQuaternionArray = 4294950303;
LABEL_63:
  if (v51)
    CFRelease(v51);
  if (theDict)
    CFRelease(theDict);
  if (Mutable)
    CFRelease(Mutable);
  return RotationMatrixFromQuaternionArray;
}

uint64_t _copyMetadataForIndex(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, __CFData **a6)
{
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t ContiguousDataFromChunks;
  CFTypeRef v16;
  _QWORD *v17;
  uint64_t (*v18)(CFTypeRef, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, CFTypeRef *, CFTypeRef *);
  CFTypeRef v19;
  _QWORD *v20;
  uint64_t *v21;
  void **v22;
  void **v23;
  void *v24;
  CFTypeRef *v25;
  CFTypeRef v26;
  uint64_t v27;
  CFTypeRef *v28;
  uint64_t (*v29)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  uint64_t (*v31)(uint64_t, _QWORD, _QWORD, __CFData **);
  unsigned int v32;
  CFTypeRef v33;
  _QWORD *v34;
  uint64_t (*v35)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *);
  unsigned int v36;
  uint64_t v37;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v39;
  uint64_t v40;
  CFTypeRef *v42;
  void *value;
  CFTypeRef v44;
  uint64_t v45;
  CFTypeRef v46;
  CFTypeRef cf;
  void *v48;
  void *v49;
  uint64_t v50;
  CFTypeRef v51;
  CFTypeRef v52;

  v12 = CFGetAllocator(a1);
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  cf = 0;
  v44 = 0;
  v45 = 0;
  v13 = a1[6];
  v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (v14)
  {
    ContiguousDataFromChunks = v14(v13, a3, &v52, 0);
    if ((_DWORD)ContiguousDataFromChunks
      || (ContiguousDataFromChunks = _getMetadataCountForIndex((uint64_t)a1, a2, a3, &v45),
          (_DWORD)ContiguousDataFromChunks))
    {
LABEL_56:
      v37 = ContiguousDataFromChunks;
    }
    else if (v45 <= a4)
    {
      v37 = 4294950303;
    }
    else
    {
      switch(a2)
      {
        case 0:
          v16 = v52;
          v17 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v17 >= 3uLL
            && (v18 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v17[15]) != 0)
          {
            v42 = &v44;
          }
          else
          {
            v18 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
            if (!v18)
              goto LABEL_43;
          }
          v22 = (void **)&v50;
          v23 = &v49;
          v24 = &v48;
          v28 = &v51;
          v26 = v16;
          v27 = a4;
          v21 = a5;
          v25 = 0;
          goto LABEL_25;
        case 1:
          v19 = v52;
          v20 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v20 >= 3uLL
            && (v18 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v20[16]) != 0)
          {
            v21 = &v50;
            v22 = &v49;
            v23 = &v48;
            v24 = &v51;
            v25 = &v44;
            v26 = v19;
            v27 = a4;
            v28 = 0;
LABEL_25:
            v32 = v18(v26, v27, v21, v22, v23, v24, v28, v25, v42);
          }
          else
          {
            v29 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (!v29)
              goto LABEL_43;
LABEL_27:
            v32 = v29(v19, a4, &v50, &v49, &v48, &v51, 0);
          }
LABEL_28:
          if (v32 == -12783)
            v37 = 4294950303;
          else
            v37 = v32;
          if (a2 == 3 || (_DWORD)v37)
            break;
          if (a2 != 4)
          {
            ContiguousDataFromChunks = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v12, v50, (uint64_t)v49, (uint64_t)v48, (uint64_t)v51, 0, (uint64_t)v44, 0, a6);
            goto LABEL_56;
          }
LABEL_34:
          Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v39 = Mutable;
            value = 0;
            v40 = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v12, v50, (uint64_t)v49, (uint64_t)v48, (uint64_t)v51, 0, (uint64_t)v44, 0, (__CFData **)&value);
            if ((_DWORD)v40)
            {
              v37 = v40;
              CFRelease(v39);
            }
            else
            {
              CFDictionarySetValue(v39, CFSTR("Data"), value);
              if (value)
                CFRelease(value);
              if (cf)
                CFDictionarySetValue(v39, CFSTR("URI"), cf);
              if (v46)
                CFDictionarySetValue(v39, CFSTR("Name"), v46);
              v37 = 0;
              *a6 = v39;
            }
          }
          else
          {
            v37 = 4294950305;
          }
          break;
        case 2:
          v19 = v52;
          v29 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
          if (!v29)
            goto LABEL_43;
          goto LABEL_27;
        case 4:
          v33 = v52;
          v34 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v34 < 2uLL)
            goto LABEL_43;
          v35 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *))v34[14];
          if (!v35)
            goto LABEL_43;
          v36 = v35(v33, a4, &v50, &v49, &v48, &v51, 0, &cf, &v46);
          if (v36 == -12783)
            v37 = 4294950303;
          else
            v37 = v36;
          if ((_DWORD)v37)
            break;
          goto LABEL_34;
        default:
          FigBaseObject = FigPictureReaderGetFigBaseObject();
          v31 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, __CFData **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (!v31)
            goto LABEL_43;
          v32 = v31(FigBaseObject, *MEMORY[0x1E0CC4BD0], 0, a6);
          goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_43:
    v37 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if (v46)
    CFRelease(v46);
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v44)
    CFRelease(v44);
  free(v49);
  free(v48);
  return v37;
}

uint64_t _getMetadataCountForIndex(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t *);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
  {
    v9 = v8(v7, a3, &cf, 0);
    if ((_DWORD)v9)
    {
      v13 = v9;
    }
    else
    {
      switch(a2)
      {
        case 0:
          v10 = cf;
          v11 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (!v11)
            goto LABEL_14;
          goto LABEL_12;
        case 1:
          v10 = cf;
          v11 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
          if (!v11)
            goto LABEL_14;
          goto LABEL_12;
        case 2:
          v10 = cf;
          v11 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
          if (!v11)
            goto LABEL_14;
          goto LABEL_12;
        case 4:
          v10 = cf;
          v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v12 < 2uLL)
            goto LABEL_14;
          v11 = (uint64_t (*)(CFTypeRef, uint64_t *))v12[13];
          if (!v11)
            goto LABEL_14;
LABEL_12:
          v13 = v11(v10, &v15);
          if (!a4)
            break;
          goto LABEL_16;
        default:
          v13 = 0;
          v15 = 0;
          if (a4)
          {
LABEL_16:
            if (!(_DWORD)v13)
              *a4 = v15;
          }
          break;
      }
    }
  }
  else
  {
LABEL_14:
    v13 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, CFTypeRef, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v14 = -1;
  v10 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v14, 0, 0);
  if ((_DWORD)v10)
    goto LABEL_6;
  v10 = _createModifiedDecodeOptionsIfNeeded(a1, a2, -1, a3, a4, &cf);
  if ((_DWORD)v10)
    goto LABEL_6;
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, CFTypeRef, uint64_t, uint64_t))(a1[4] + 80);
  if (v11)
  {
    v10 = v11(a1, v14, cf, a4, a5);
LABEL_6:
    v12 = v10;
    goto LABEL_8;
  }
  v12 = 4294950302;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t _createModifiedDecodeOptionsIfNeeded(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, int a5, _QWORD *a6)
{
  const __CFDictionary *v8;
  uint64_t v12;
  uint64_t Value;
  CFTypeRef v14;
  uint64_t v15;
  __CFDictionary *MutableCopy;
  uint64_t v18;
  uint64_t v19;
  char v20;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  if (!a6)
    return 4294950306;
  v8 = a4;
  if (a3 == -1)
  {
    v12 = CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates(a1, a2, a4, 0, (__CFDictionary **)&cf);
    if ((_DWORD)v12)
    {
      v15 = v12;
      goto LABEL_18;
    }
    v8 = (const __CFDictionary *)cf;
  }
  Value = FigCFDictionaryGetValue();
  if (a5 != 4 || Value)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (!CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(a1, a2, a3, v8, (uint64_t)&theArray))goto LABEL_11;
LABEL_14:
    if (v8)
      v14 = CFRetain(v8);
    else
      v14 = 0;
    goto LABEL_17;
  }
  if (CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(a1, a2, v8, (uint64_t)&theArray))
    goto LABEL_14;
LABEL_11:
  if (!theArray)
    goto LABEL_14;
  if (CFArrayGetCount(theArray) != 1)
    goto LABEL_14;
  v20 = 0;
  v19 = 0;
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, (uint64_t)a2, 0, 3, 0, &v20, &v19);
  if (v20)
    goto LABEL_14;
  CFGetAllocator(a1);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v15 = 4294950305;
    goto LABEL_18;
  }
  v14 = MutableCopy;
  v18 = CMPhotoCFDictionarySetInt32(MutableCopy, CFSTR("OutputPixelFormat"), 1278226488);
  if ((_DWORD)v18)
  {
    v15 = v18;
    CFRelease(v14);
    goto LABEL_18;
  }
LABEL_17:
  v15 = 0;
  *a6 = v14;
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  return v15;
}

uint64_t CMPhotoDecompressionContainerCopyImageBitDepthForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetImageGeometryForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t CMPhotoDecompressionContainerGetImageCount(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 4294950306;
  if (!a2)
    return 0;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 584);
  return result;
}

uint64_t _getImageCount(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = 1;
    if (*(_BYTE *)(a1 + 153))
      v2 = 2;
    *a2 = v2;
  }
  return 0;
}

uint64_t _getImageCount_0(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = 1;
  return 0;
}

uint64_t _getImageCount_1(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  v7 = 0;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v6 = 0;
LABEL_8:
    result = 0;
    *a2 = v6;
    return result;
  }
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
  {
    result = v4(v3, 1, &v7);
    if ((_DWORD)result)
      return result;
    v6 = v7;
    goto LABEL_8;
  }
  return 4294954514;
}

CFNumberRef _getImageCount_2(uint64_t a1, _QWORD *a2)
{
  return _getImageCountForSequence(*(_QWORD *)(a1 + 80), a2);
}

uint64_t _copyImageBitDepthForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t BitDepthArray;
  char v12;
  CFTypeRef cf;
  unint64_t v14;

  cf = 0;
  v14 = a2;
  if (!a4)
    return 0;
  v6 = a1 + 40;
  v12 = 0;
  v7 = _checkImageIndex(a1 + 40, &v14, &v12);
  if ((_DWORD)v7)
    return v7;
  v7 = _parseImageSizeAndTypeIfNeeded(v6);
  if ((_DWORD)v7)
    return v7;
  if (*(int *)(a1 + 136) <= 10)
    v8 = 10;
  else
    v8 = *(_DWORD *)(a1 + 136);
  if (v12)
    v9 = v8;
  else
    v9 = *(_DWORD *)(a1 + 136);
  BitDepthArray = _createBitDepthArray(*(const __CFAllocator **)(a1 + 40), *(_DWORD *)(a1 + 128), v9, (__CFArray **)&cf);
  if ((_DWORD)BitDepthArray)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a4 = cf;
  }
  return BitDepthArray;
}

uint64_t _copyImageBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  int v8;
  uint64_t appended;
  uint64_t v10;

  if (!a4)
    return 0;
  if (!a2)
  {
    Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 40), 4, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return 4294950305;
    v7 = Mutable;
    if (*(_DWORD *)(a1 + 136))
    {
      v8 = 0;
      while (1)
      {
        appended = CMPhotoCFArrayAppendInt32(v7, *(_DWORD *)(a1 + 96));
        if ((_DWORD)appended)
          break;
        if (++v8 >= *(_DWORD *)(a1 + 136))
          goto LABEL_8;
      }
      v10 = appended;
      CFRelease(v7);
    }
    else
    {
LABEL_8:
      v10 = 0;
      *a4 = v7;
    }
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t _copyImageBitDepthForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  if (!a4)
    return 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    return 4294954514;
  v8 = v7(v6, a2, &cf, 0);
  v9 = cf;
  if (!(_DWORD)v8)
  {
    v8 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
    v9 = cf;
  }
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t _copyImageBitDepthForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;

  desc = 0;
  cf = 0;
  if (!a4)
    return 0;
  v5 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), &desc);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!(_DWORD)v6)
    {
      *a4 = cf;
      cf = 0;
    }
  }
  else
  {
    v6 = 4294950303;
  }
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t _createImageForIndex(uint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  CFTypeRef cf;
  unint64_t v14;

  cf = 0;
  v14 = a2;
  v12 = 0;
  v9 = _checkImageIndex(a1 + 40, &v14, &v12);
  if ((_DWORD)v9)
    return v9;
  v10 = _decodeImage(*(const __CFAllocator **)(a1 + 40), a1, *(const void **)(a1 + 64), 0, 0, a3, v12, 0, a4, 0, (CGImageRef *)&cf);
  if ((_DWORD)v10)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a5 = cf;
  }
  return v10;
}

uint64_t _createImageForIndex_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, CGImageRef *a5)
{
  return _decodeImage_0(a1, a2, a3, 0, a4, 0, a5);
}

uint64_t _createImageForIndex_1(_QWORD *a1, uint64_t a2, CFDictionaryRef theDict, int a4, CGImageRef *a5)
{
  uint64_t v10;
  int ShouldDecodeAlphaAutomatically;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t AuxiliaryImageForIndex_0;
  int v15;
  uint64_t v16;
  int v17;
  CFTypeID v18;
  CGImage *v19;
  uint64_t v20;
  const __CFAllocator *v21;
  __int16 v23;
  int v24;
  int v25;
  char v26;
  int v27[2];
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  CFTypeRef v33;

  cf = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  *(_QWORD *)v27 = 0;
  v26 = 0;
  v25 = 0;
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, CFSTR("UseProvidedPixelBuffer"))
      && CFDictionaryContainsKey(theDict, CFSTR("BackCGImageWithIOSurface")))
    {
      v10 = FigSignalErrorAt();
      goto LABEL_31;
    }
    if (CFDictionaryGetValue(theDict, CFSTR("DryRun")))
      goto LABEL_8;
  }
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a2, 0, 3, 0, &v26, (uint64_t *)v27);
  if (!v26)
  {
LABEL_8:
    ShouldDecodeAlphaAutomatically = 0;
  }
  else
  {
    v24 = 0;
    v10 = _copyImageSubsamplingForIndex_1((uint64_t)a1, a2, &v24);
    if ((_DWORD)v10)
    {
LABEL_31:
      v20 = v10;
      goto LABEL_37;
    }
    ShouldDecodeAlphaAutomatically = CMPhotoShouldDecodeAlphaAutomatically(theDict, v24, &v25);
  }
  v12 = a1[6];
  v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v13)
  {
    v20 = 4294954514;
    goto LABEL_37;
  }
  v10 = v13(v12, a2, &v33, 0);
  if ((_DWORD)v10)
    goto LABEL_31;
  if (!ShouldDecodeAlphaAutomatically)
  {
    v10 = _decodeImage_1(a1, v33, 0, a2, theDict, 0, a4, 0, a5);
    goto LABEL_31;
  }
  v24 = 2;
  AuxiliaryImageForIndex_0 = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex((uint64_t)a1, a2, (uint64_t)theDict, v25, &v30, (__CFDictionary **)&v29);
  if (!(_DWORD)AuxiliaryImageForIndex_0)
  {
    AuxiliaryImageForIndex_0 = (uint64_t)_createAuxiliaryImageForIndex_0(a1, a2, *(uint64_t *)v27, (CFDictionaryRef)v29, 2, (CGImageRef *)&v31);
    if (!(_DWORD)AuxiliaryImageForIndex_0)
    {
      v15 = a4 == 5 ? 5 : 2;
      AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v33, 0, a2, (const __CFDictionary *)v30, 0, v15, 0, (CGImageRef *)&cf);
      if (!(_DWORD)AuxiliaryImageForIndex_0)
      {
        if (_copyAuxiliaryImageTypeInfo((uint64_t)a1, a2, *(uint64_t *)v27, v16, 0, (uint64_t)&v28)
          || !v28
          || (_readAlphaInfoSEIPayload((uint64_t)v28, &v24), v17 = v24, v24 == 2))
        {
          v17 = 0;
        }
        if (a4 == 5)
        {
          if (cf && (v18 = CFGetTypeID(cf), v18 == CFDictionaryGetTypeID()))
          {
            AuxiliaryImageForIndex_0 = FigCFDictionarySetInt();
            if (!(_DWORD)AuxiliaryImageForIndex_0)
            {
              FigCFDictionarySetValue();
              v19 = (CGImage *)cf;
              if (cf)
                v19 = (CGImage *)CFRetain(cf);
              v20 = 0;
              *a5 = v19;
              goto LABEL_35;
            }
          }
          else
          {
            AuxiliaryImageForIndex_0 = FigSignalErrorAt();
          }
        }
        else
        {
          v23 = 0;
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("BackCGImageWithIOSurface"), (_BYTE *)&v23 + 1);
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PremultiplyWithAlpha"), &v23);
          if (!CMPhotoCreateImageFromAlphaAndMainBuffer((__CVBuffer *)cf, (__CVBuffer *)v31, v17, v23, HIBYTE(v23), a4, a5)|| (v21 = CFGetAllocator(a1), AuxiliaryImageForIndex_0 = CMPhotoCreateWrappedPixelBufferForType(v21, (CVPixelBufferRef)cf, HIBYTE(v23), a4, a5), !(_DWORD)AuxiliaryImageForIndex_0))
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
      }
    }
  }
  v20 = AuxiliaryImageForIndex_0;
LABEL_35:
  if (v30)
    CFRelease(v30);
LABEL_37:
  if (v28)
    CFRelease(v28);
  if (v29)
    CFRelease(v29);
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v33)
    CFRelease(v33);
  return v20;
}

uint64_t _createImageForIndex_2(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, CGImageRef *a5)
{
  uint64_t v10;
  uint64_t WrappedPixelBufferForType;
  const __CFArray *v12;
  CFIndex Count;
  uint64_t v14;
  _DWORD *v15;
  NSObject *v16;
  uint64_t v17;
  const void *v18;
  unsigned __int8 v20;
  _QWORD block[10];
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  CGImageRef v31;
  __CFDictionary *v32;
  const __CFDictionary *v33;
  CMSampleBufferRef v34;
  const void *v35[2];

  v35[1] = *(const void **)MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v22 = 0;
  if (!*(_BYTE *)(a1 + 112))
  {
    WrappedPixelBufferForType = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (a3)
  {
    v35[0] = CFSTR("DryRun");
    v10 = _checkForUnsupportedKeys(a3, v35);
    if ((_DWORD)v10)
      goto LABEL_25;
  }
  WrappedPixelBufferForType = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, *(_QWORD *)(a1 + 80), &v34);
  if ((_DWORD)WrappedPixelBufferForType)
    goto LABEL_24;
  v12 = *(const __CFArray **)(a1 + 96);
  if (!v12
    || ((Count = CFArrayGetCount(v12), Count >= 1) ? (v14 = 0) : (v14 = -1),
        Count < 1 || !CMPhotoShouldDecodeAlphaAutomatically(a3, 0, &v22)))
  {
    WrappedPixelBufferForType = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)v34, *(_QWORD *)(a1 + 80), a3, a4, a5);
    goto LABEL_24;
  }
  v15 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  WrappedPixelBufferForType = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex(a1, a2, (uint64_t)a3, v22, &v33, &v32);
  if ((_DWORD)WrappedPixelBufferForType)
    goto LABEL_24;
  v16 = *(NSObject **)(a1 + 104);
  if (!v16)
  {
    v16 = dispatch_queue_create("com.apple.coremedia.decodeasyncauxiliary", 0);
    *(_QWORD *)(a1 + 104) = v16;
    if (!v16)
    {
      v10 = 4294950305;
      goto LABEL_25;
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___createImageForIndex_block_invoke;
  block[3] = &unk_1E53F5EB8;
  block[6] = a1;
  block[7] = a2;
  block[8] = v14;
  block[9] = v32;
  block[4] = &v23;
  block[5] = &v27;
  dispatch_async(v16, block);
  v17 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)v34, *(_QWORD *)(a1 + 80), v33, 2, &v31);
  if ((_DWORD)v17)
  {
    v10 = v17;
    dispatch_sync(*(dispatch_queue_t *)(a1 + 104), &__block_literal_global_13_0);
    goto LABEL_25;
  }
  LOBYTE(v35[0]) = 0;
  v20 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("BackCGImageWithIOSurface"), v35);
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("PremultiplyWithAlpha"), &v20);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 104), &__block_literal_global_13);
  v10 = *((unsigned int *)v24 + 6);
  if ((_DWORD)v10)
    goto LABEL_25;
  if (CMPhotoCreateImageFromAlphaAndMainBuffer(v31, (__CVBuffer *)v28[3], 2, v20, LOBYTE(v35[0]), a4, a5))
  {
    WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(*(const __CFAllocator **)(a1 + 40), v31, LOBYTE(v35[0]), a4, a5);
    if ((_DWORD)WrappedPixelBufferForType)
    {
LABEL_24:
      v10 = WrappedPixelBufferForType;
      goto LABEL_25;
    }
  }
  if (*v15 == 1)
    kdebug_trace();
  v10 = 0;
LABEL_25:
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  v18 = (const void *)v28[3];
  if (v18)
    CFRelease(v18);
  if (v34)
    CFRelease(v34);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v10;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t _getAuxiliaryImageCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  unint64_t v9;

  v9 = a2;
  v6 = a1 + 40;
  v8 = 0;
  result = _checkImageIndex(a1 + 40, &v9, &v8);
  if (!(_DWORD)result)
  {
    result = _parseMPOIfNeeded(v6);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_QWORD *)(a1 + 264) - (v8 != 0);
    }
  }
  return result;
}

uint64_t _getAuxiliaryImageCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  if (a2)
    return FigSignalErrorAt();
  if (a4)
    *a4 = *(_DWORD *)(a1 + 144) != 0;
  return 0;
}

uint64_t _getAuxiliaryImageCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t *);
  uint64_t v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    goto LABEL_7;
  v8 = v7(v6, a2, &cf, 0);
  v9 = v8;
  if (!a4 || (_DWORD)v8)
    goto LABEL_8;
  v10 = cf;
  v11 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v11)
  {
LABEL_7:
    v9 = 4294954514;
    goto LABEL_8;
  }
  v9 = v11(v10, &v13);
  if (!(_DWORD)v9)
    *a4 = v13;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t _getAuxiliaryImageCountForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex *a4)
{
  if (!a4)
    return 0;
  if (*(_BYTE *)(a1 + 112))
  {
    *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _createBitDepthArray(const __CFAllocator *a1, int a2, int a3, __CFArray **a4)
{
  __CFArray *Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v13;
  int valuePtr;

  valuePtr = a3;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v8 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  v9 = v8;
  if (Mutable)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = 0;
    do
    {
      CFArrayAppendValue(Mutable, v9);
      if (a2 == 6)
        break;
    }
    while (v11++ < 2);
    v13 = 0;
    *a4 = Mutable;
    Mutable = 0;
    if (!v9)
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = 4294950305;
  if (v8)
LABEL_10:
    CFRelease(v9);
LABEL_11:
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t _copyAuxiliaryImageTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, CFTypeRef *);
  CFAllocatorRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, CFAllocatorRef, uint64_t);
  unsigned int v18;
  CFAllocatorRef v19;
  uint64_t FigBaseObject;
  uint64_t (*v21)(uint64_t, _QWORD, CFAllocatorRef, uint64_t);
  uint64_t v22;
  CFTypeRef cf;
  CFTypeRef v25;

  cf = 0;
  v25 = 0;
  if (!(a5 | a6))
  {
    v22 = 4294950306;
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v11)
    goto LABEL_17;
  v12 = v11(v10, a2, &v25, 0);
  if ((_DWORD)v12)
    goto LABEL_24;
  v13 = v25;
  v14 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v14)
    goto LABEL_17;
  v12 = v14(v13, a3, &cf);
  if ((_DWORD)v12)
  {
LABEL_24:
    v22 = v12;
    goto LABEL_18;
  }
  if (!a5)
  {
    v18 = 0;
    if (!a6)
      goto LABEL_14;
LABEL_11:
    if (v18)
      goto LABEL_14;
    v19 = CFGetAllocator(cf);
    FigBaseObject = FigPictureReaderGetFigBaseObject();
    v21 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v21)
    {
      v18 = v21(FigBaseObject, *MEMORY[0x1E0CC4B10], v19, a6);
      goto LABEL_14;
    }
LABEL_17:
    v22 = 4294954514;
    goto LABEL_18;
  }
  v15 = CFGetAllocator(cf);
  v16 = FigPictureReaderGetFigBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v17)
    goto LABEL_17;
  v18 = v17(v16, *MEMORY[0x1E0CC4B18], v15, a5);
  if (a6)
    goto LABEL_11;
LABEL_14:
  if (v18 == -12783)
    v22 = 4294950303;
  else
    v22 = v18;
LABEL_18:
  if (v25)
    CFRelease(v25);
  if (cf)
    CFRelease(cf);
  return v22;
}

uint64_t _readAlphaInfoSEIPayload(uint64_t a1, _DWORD *a2)
{
  uint64_t Bytes;
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 v10;
  uint64_t v11;
  _OWORD v12[3];
  CFTypeRef v13;

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  Bytes = FigByteStreamCreateWithCFData();
  if ((_DWORD)Bytes)
    goto LABEL_17;
  CMPhotoBitStreamReadInit((uint64_t)v12, (uint64_t)v13, 1);
  Bytes = CMPhotoBitStreamReadBytes(v12, 4, (unsigned int *)&v11 + 1);
  if ((_DWORD)Bytes)
    goto LABEL_17;
  Bytes = CMPhotoBitStreamReadBytes(v12, 4, (unsigned int *)&v11);
  if ((_DWORD)Bytes)
    goto LABEL_17;
  Bytes = CMPhotoBitStreamReadBytes(v12, 2, (unsigned int *)&v10);
  if ((_DWORD)Bytes)
    goto LABEL_17;
  v4 = (v10 >> 9) & 0x3F;
  v10 = (v10 >> 9) & 0x3F;
  if (v4 != 39)
    goto LABEL_18;
  Bytes = CMPhotoBitStreamReadVariableLengthEntry(v12, &v9);
  if ((_DWORD)Bytes)
  {
LABEL_17:
    v5 = Bytes;
    goto LABEL_14;
  }
  if (v9 != 165)
  {
LABEL_18:
    v5 = 4294950194;
    goto LABEL_14;
  }
  Bytes = CMPhotoBitStreamReadVariableLengthEntry(v12, (_DWORD *)&v8 + 1);
  if ((_DWORD)Bytes)
    goto LABEL_17;
  Bytes = CMPhotoBitStreamReadBits((uint64_t)v12, 1uLL, &v8);
  if ((_DWORD)Bytes)
    goto LABEL_17;
  if ((_DWORD)v8)
    goto LABEL_18;
  v7 = 0;
  v5 = CMPhotoBitStreamReadBits((uint64_t)v12, 3uLL, &v7);
  if (!(_DWORD)v5 && *a2)
    *a2 = v7;
LABEL_14:
  if (v13)
    CFRelease(v13);
  return v5;
}

uint64_t CMPhotoBitStreamReadBytes(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v6 = a1[4];
  v7 = a1[5];
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
  if (!v8)
    return 4294954514;
  result = v8(v6, a2, v7, a3, &v11);
  if (!(_DWORD)result)
  {
    v10 = v11;
    a1[5] += v11;
    a1[2] += 8 * v10;
    if (a2 == 2)
    {
      result = 0;
      *(_WORD *)a3 = bswap32(*(unsigned __int16 *)a3) >> 16;
    }
    else
    {
      result = 0;
      if (a2 == 4)
        *a3 = bswap32(*a3);
    }
  }
  return result;
}

uint64_t CMPhotoBitStreamReadVariableLengthEntry(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v10 = 0;
  v9 = 0;
  v4 = a1[5];
  while (1)
  {
    v5 = a1[4];
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
    if (!v6)
      break;
    result = v6(v5, 1, v4, &v10, &v9);
    if ((_DWORD)result)
      return result;
    v8 = v9;
    v4 = a1[5] + v9;
    a1[5] = v4;
    a1[2] += 8 * v8;
    LODWORD(v8) = v10;
    *a2 += v10;
    if ((_DWORD)v8 != 255)
      return 0;
  }
  return 4294954514;
}

uint64_t CMPhotoBitStreamReadBits(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *);
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD v26[9];

  if (a2 > 0x20)
    return 4294950190;
  v26[7] = v3;
  v26[8] = v4;
  *(_QWORD *)(a1 + 16) += a2;
  v8 = *(unsigned int *)(a1 + 4);
  if (v8 > 0x17 || v8 >= a2)
  {
    if (a2)
    {
LABEL_23:
      result = 0;
      *a3 = *(_DWORD *)a1 >> -(char)a2;
      v23 = *(_DWORD *)(a1 + 4) - a2;
      *(_DWORD *)a1 <<= a2;
      *(_DWORD *)(a1 + 4) = v23;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v26[0] = 0;
      v25 = 0;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
      if (!v13)
        return 4294954514;
      result = v13(v12, 1, v11, &v25, v26);
      if ((_DWORD)result)
        return result;
      v14 = v25;
      if (*(_BYTE *)(a1 + 24))
      {
        v15 = *(_DWORD *)(a1 + 8);
        if (v15 == 2 && v25 == 3)
        {
          v24 = 0;
          v16 = *(_QWORD *)(a1 + 32);
          v17 = *(_QWORD *)(a1 + 40);
          v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 8);
          if (!v18)
            return 4294954514;
          result = v18(v16, 1, v17, &v25, &v24);
          if ((_DWORD)result)
            return result;
          v15 = 0;
          *(_QWORD *)(a1 + 40) += v24;
          v14 = v25;
        }
        if (v14)
          v19 = 0;
        else
          v19 = v15 + 1;
        *(_DWORD *)(a1 + 8) = v19;
      }
      v11 = *(_QWORD *)(a1 + 40) + v26[0];
      *(_QWORD *)(a1 + 40) = v11;
      v20 = *(_DWORD *)(a1 + 4);
      v21 = (v14 << (24 - v20)) | *(_DWORD *)a1;
      v22 = (v20 + 8);
      *(_DWORD *)a1 = v21;
      *(_DWORD *)(a1 + 4) = v22;
      if (v22 > 0x17 || v22 >= a2)
        goto LABEL_23;
    }
  }
  return result;
}

uint64_t CMPhotoBitStreamReadInit(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t CMPhotoShouldDecodeAlphaAutomatically(CFDictionaryRef theDict, int a2, int *a3)
{
  signed int PixelFormatType;
  __CVBuffer *Value;
  int v8;
  int IntIfPresent;
  uint64_t v10;
  int v11;
  int v13;

  PixelFormatType = 1111970369;
  v13 = 1111970369;
  if (!theDict)
    goto LABEL_5;
  Value = (__CVBuffer *)CFDictionaryGetValue(theDict, CFSTR("UseProvidedPixelBuffer"));
  if (!Value)
  {
    IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("OutputPixelFormat"), &v13);
    PixelFormatType = v13;
    v8 = v13;
    if (IntIfPresent)
      goto LABEL_6;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(Value);
  v8 = PixelFormatType;
LABEL_6:
  *a3 = v8;
  v10 = 1;
  if (PixelFormatType != 1111970369 && PixelFormatType != 1815491698)
  {
    if (a2 != 6)
      return 0;
    if (PixelFormatType > 1279340599)
    {
      if (PixelFormatType == 1279340600)
        return v10;
      v11 = 1279340854;
    }
    else
    {
      if (PixelFormatType == 843264056)
        return v10;
      v11 = 843264310;
    }
    if (PixelFormatType != v11)
      return 0;
  }
  return v10;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetXMPCountForIndex(_QWORD *a1, const __CFNumber *a2, _QWORD *a3)
{
  return CMPhotoDecompressionContainerGetXMPCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t _getXMPCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v8 = a2;
  v6 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!(_DWORD)result)
  {
    result = _parseXMPIfNeeded(v6);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_BYTE *)(a1 + 369) != 0;
    }
  }
  return result;
}

uint64_t _getXMPCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray **a4)
{
  const __CFArray *Count;

  if (a2)
    return FigSignalErrorAt();
  if (a4)
  {
    Count = *(const __CFArray **)(a1 + 328);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    *a4 = Count;
  }
  return 0;
}

uint64_t _getXMPCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return _getMetadataCountForIndex(a1, 1, a2, a4);
}

uint64_t _compareAsyncDecodeRequests(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v2 == v3)
  {
    if (*(_QWORD *)a1 >= *(_QWORD *)a2)
      v4 = 0;
    else
      v4 = -1;
    if (*(_QWORD *)a1 <= *(_QWORD *)a2)
      return v4;
    else
      return 1;
  }
  else
  {
    if (v2 >= v3)
      v6 = 0;
    else
      v6 = -1;
    if (v2 <= v3)
      return v6;
    else
      return 1;
  }
}

uint64_t CMPhotoPictureReaderCreateContiguousDataFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __CFData **a9)
{
  return _createContiguousBufferFromChunks(a1, a2, a3, a4, a5, 1, a6, a7, a8, a9);
}

uint64_t CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, __CFData **a8)
{
  return _createContiguousBufferFromChunks(a1, a2, a3, a4, a5, 2, a6, 0, a7, a8);
}

uint64_t _createContiguousBufferFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, __CFData **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char **v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __CFData **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  const __CFAllocator *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, _QWORD, unint64_t *);
  uint64_t v33;
  uint64_t DataPointer;
  UInt8 *MutableBytePtr;
  CFIndex v36;
  __CFData *Mutable;
  __CFData *v38;
  int v39;
  compression_algorithm v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, char *, uint64_t, UInt8 *, char **);
  char *v47;
  BOOL v49;
  uint64_t v50;
  __CFData *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  CFIndex Length;
  const Bytef *BytePtr;
  uInt v60;
  int v61;
  unint64_t v62;
  uint64_t v64;
  __CFData *theData;
  int v66;
  unint64_t v67;
  size_t v68;
  unsigned __int8 v69;
  compression_stream stream;
  int64x2_t theBuffer;
  char **v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  _WORD v76[3];
  char *dataPointerOut[514];

  v10 = MEMORY[0x1E0C80A78]();
  v66 = v16;
  v18 = a10;
  dataPointerOut[512] = *(char **)MEMORY[0x1E0C80C00];
  v19 = 4294950306;
  if (!v14)
    return v19;
  if (!a10)
    return v19;
  v20 = v15;
  if ((v15 - 3) < 0xFFFFFFFE)
    return v19;
  v21 = v17;
  v22 = v14;
  v23 = v13;
  v24 = v11;
  v25 = (const __CFAllocator *)v10;
  if (v15 != 1 && v17 || v16 && v17)
    return FigSignalErrorAt();
  v26 = v12;
  if (v11 >= 1)
  {
    v27 = 0;
    v28 = (uint64_t *)v13;
    v29 = v11;
    while (1)
    {
      v31 = *v28++;
      v30 = v31;
      if (__CFADD__(v27, v31))
        return FigSignalErrorAt();
      v27 += v30;
      if (!--v29)
        goto LABEL_14;
    }
  }
  v27 = 0;
LABEL_14:
  v67 = 0;
  v32 = *(uint64_t (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v32)
    return 4294954514;
  v33 = v32(v22, 0, &v67);
  if ((_DWORD)v33)
    return v33;
  if (v27 > v67)
  {
    v27 = v67;
    if (!v66)
      return FigSignalErrorAt();
  }
  if (v20 != 1)
  {
    if (v20 == 2)
    {
      dataPointerOut[0] = 0;
      theBuffer.i64[0] = 0;
      v19 = CMBlockBufferCreateWithMemoryBlock(v25, 0, v27, v25, 0, 0, v27, 1u, (CMBlockBufferRef *)&theBuffer);
      theData = (__CFData *)theBuffer.i64[0];
      if ((_DWORD)v19)
        goto LABEL_103;
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)theBuffer.i64[0], 0, 0, 0, dataPointerOut);
      if ((_DWORD)DataPointer)
        goto LABEL_102;
      MutableBytePtr = (UInt8 *)dataPointerOut[0];
      goto LABEL_30;
    }
    return 4294950305;
  }
  if ((v27 & 0x8000000000000000) != 0)
    return 4294950190;
  if (v21)
    v36 = 0;
  else
    v36 = v27;
  Mutable = CFDataCreateMutable(v25, v36);
  if (!Mutable)
    return 4294950305;
  v38 = Mutable;
  CFDataSetLength(Mutable, v27);
  theData = v38;
  MutableBytePtr = CFDataGetMutableBytePtr(v38);
LABEL_30:
  if (!MutableBytePtr)
  {
    v19 = 4294950305;
    goto LABEL_103;
  }
  if (v21)
  {
    v39 = FigCFEqual();
    if (v39)
    {
      v40 = COMPRESSION_BROTLI;
      goto LABEL_59;
    }
    if (FigCFEqual())
    {
      v40 = COMPRESSION_ZLIB;
LABEL_59:
      v75 = 0u;
      v74 = 0u;
      if (v24 < 1)
      {
        v19 = 4294950194;
      }
      else
      {
        theBuffer.i64[0] = v24;
        theBuffer.i64[1] = (uint64_t)v26;
        v72 = v23;
        v73 = v22;
        memset(&stream, 0, sizeof(stream));
        v50 = compression_stream_init(&stream, COMPRESSION_STREAM_DECODE, v40);
        if (!(_DWORD)v50)
        {
          v51 = theData;
          CFDataSetLength(theData, llroundf((float)v27 * 4.0));
          stream.dst_ptr = CFDataGetMutableBytePtr(theData);
          stream.dst_size = CFDataGetLength(theData);
          if (v39)
          {
            v52 = 0;
          }
          else
          {
            while (1)
            {
              v52 = *((_QWORD *)&v75 + 1);
              if (*((_QWORD *)&v75 + 1) >= 2uLL)
                break;
              v56 = _readBytesFromChunks(&theBuffer, 2 - *((_QWORD *)&v75 + 1), (uint64_t)&v76[2] + *((_QWORD *)&v75 + 1), 0);
              if ((_DWORD)v56)
              {
LABEL_72:
                v19 = v56;
                goto LABEL_73;
              }
            }
          }
          v53 = 4 * (v39 == 0);
          v69 = 0;
          v54 = v27 - v53;
          while (v54 > v52)
          {
            if (!stream.src_size)
            {
              v68 = 0;
              if (v54 - v52 >= 0x1000)
                v55 = 4096;
              else
                v55 = v54 - v52;
              v56 = _readBytesFromChunks(&theBuffer, v55, (uint64_t)dataPointerOut, &v68);
              if ((_DWORD)v56)
                goto LABEL_72;
              stream.src_ptr = (const uint8_t *)dataPointerOut;
              stream.src_size = v68;
              v52 = *((_QWORD *)&v75 + 1);
            }
            v56 = _processCompressedData(&stream, theData, v52 >= v54, &v69);
            if ((_DWORD)v56)
              goto LABEL_72;
          }
          if (!v39)
          {
            v62 = 0;
            while (v53 > v62)
            {
              v68 = 0;
              v56 = _readBytesFromChunks(&theBuffer, v53 - v62, (uint64_t)v76 + v62, &v68);
              v62 += v68;
              if ((_DWORD)v56)
                goto LABEL_72;
            }
          }
          v57 = v69;
          while (!v57)
          {
            v56 = _processCompressedData(&stream, theData, 1, &v69);
            if ((_DWORD)v56)
              goto LABEL_72;
            v57 = v69;
            if (!v69 && stream.dst_size)
            {
              v19 = 4294950194;
              goto LABEL_73;
            }
          }
          if (stream.dst_size)
          {
            Length = CFDataGetLength(theData);
            CFDataSetLength(theData, Length - stream.dst_size);
          }
          if (v39
            || (BytePtr = CFDataGetBytePtr(theData),
                v60 = CFDataGetLength(theData),
                v61 = adler32(1uLL, BytePtr, v60),
                bswap32(*(unsigned int *)v76) == v61))
          {
            compression_stream_destroy(&stream);
            v41 = 0;
            v18 = a10;
            goto LABEL_94;
          }
          v19 = FigSignalErrorAt();
          compression_stream_destroy(&stream);
          if (!(_DWORD)v19)
          {
            v41 = 0;
            v18 = a10;
            goto LABEL_93;
          }
LABEL_103:
          v51 = theData;
          if (!theData)
            return v19;
          goto LABEL_104;
        }
        v19 = v50;
      }
      v51 = theData;
LABEL_73:
      compression_stream_destroy(&stream);
      if (v51)
        goto LABEL_104;
      return v19;
    }
    DataPointer = FigSignalErrorAt();
LABEL_102:
    v19 = DataPointer;
    goto LABEL_103;
  }
  if (v24 < 1)
  {
    v41 = 0;
LABEL_93:
    v51 = theData;
    goto LABEL_94;
  }
  v41 = 0;
  while (1)
  {
    v43 = *v23++;
    v42 = v43;
    dataPointerOut[0] = 0;
    v45 = *v26++;
    v44 = v45;
    v46 = *(uint64_t (**)(uint64_t, char *, uint64_t, UInt8 *, char **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
    if (v46)
    {
      if ((unint64_t)v42 >= v27 - v41)
        v47 = (char *)(v27 - v41);
      else
        v47 = v42;
      v19 = v46(v22, v47, v44, MutableBytePtr, dataPointerOut);
    }
    else
    {
      v19 = 4294954514;
    }
    v41 += (uint64_t)dataPointerOut[0];
    v49 = v42 != dataPointerOut[0] || (_DWORD)v19 == -12873;
    if (v66 && v49)
    {
      FigSignalErrorAt();
      goto LABEL_92;
    }
    if ((_DWORD)v19)
      goto LABEL_103;
    if (v42 != dataPointerOut[0])
      break;
    MutableBytePtr = (UInt8 *)&v42[(_QWORD)MutableBytePtr];
    if (!--v24)
    {
      v41 = 0;
LABEL_92:
      v18 = a10;
      goto LABEL_93;
    }
  }
  v64 = FigSignalErrorAt();
  v41 = 0;
  v18 = a10;
  v51 = theData;
  if ((_DWORD)v64)
  {
    v19 = v64;
    if (!theData)
      return v19;
LABEL_104:
    CFRelease(v51);
    return v19;
  }
LABEL_94:
  if (a9)
    *a9 = v41;
  v19 = 0;
  *v18 = v51;
  return v19;
}

uint64_t _applyDecodeStrategy(__int128 *a1, uint64_t a2, const void *a3, const void *a4, char a5, CFTypeRef *a6, CVPixelBufferRef *a7)
{
  CFTypeRef *v8;
  __CVBuffer *v11;
  BOOL v12;
  const void *v14;
  const void *v15;
  char v16;
  IOSurfaceRef IOSurface;
  BOOL v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned int v33;
  uint64_t PixelFormatType;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  _BOOL4 v39;
  int FullRangeForPixelFormat;
  uint64_t v41;
  __CVBuffer *v42;
  CVPixelBufferRef v43;
  BOOL v44;
  char v45;
  char v46;
  const __CFDictionary *v47;
  __CFDictionary *Mutable;
  dispatch_queue_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  NSObject *v53;
  __CVBuffer *v54;
  uint64_t v55;
  uint64_t DefaultTripletsForTransfer;
  int v57;
  int v58;
  uint64_t v59;
  __CVBuffer *v60;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v68;
  char v69;
  const void *v70;
  const void *v71;
  CFTypeRef *v72;
  int v73;
  CVPixelBufferRef *v74;
  char v75;
  CVPixelBufferRef cf;
  __CVBuffer *v77;
  __int128 v78;
  __int128 v79;
  dispatch_queue_t v80;
  _BYTE v81[19];
  _BYTE v82[21];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  int v88;
  char v89;
  char v90;
  char v91;
  int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  CVPixelBufferRef v104;
  CVPixelBufferRef v105;
  _BYTE v106[37];
  uint64_t v107;

  v8 = a6;
  v107 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  v11 = *(__CVBuffer **)(a2 + 88);
  if (*(_BYTE *)(a2 + 105))
    v12 = v11 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v14 = a4;
    v15 = a3;
    v16 = a5;
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 88));
    a5 = v16;
    a3 = v15;
    a4 = v14;
    v8 = a6;
    if (IOSurface)
    {
      v31 = FigSignalErrorAt();
LABEL_78:
      v30 = v31;
      goto LABEL_79;
    }
  }
  v18 = 1;
  if (!*(_BYTE *)(a2 + 309))
    v18 = *(_BYTE *)(a2 + 308) != 0;
  v103 = 1;
  *(_DWORD *)v106 = 0;
  v106[4] = 0;
  v19 = *(_BYTE *)(a2 + 306);
  v20 = *(_BYTE *)(a2 + 305);
  v21 = *(_BYTE *)(a2 + 21);
  *(_OWORD *)&v106[5] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v106[21] = *(_OWORD *)(a2 + 40);
  v74 = a7;
  cf = v11;
  if (*(_BYTE *)(a2 + 304))
    v102 = *(_OWORD *)(a2 + 256);
  else
    v102 = 0uLL;
  v22 = *(_DWORD *)(a2 + 4);
  v23 = *(_DWORD *)(a2 + 124);
  v24 = *(_BYTE *)(a2 + 3);
  v25 = *(_QWORD *)(a2 + 112);
  v75 = v18;
  if (v11)
    v26 = v18;
  else
    v26 = 1;
  v73 = *(unsigned __int8 *)(a2 + 3);
  if ((v26 & 1) != 0 || *(_BYTE *)(a2 + 307))
  {
    v27 = a1[3];
    v98 = a1[2];
    v99 = v27;
    v28 = a1[5];
    v100 = a1[4];
    v101 = v28;
    v29 = a1[1];
    v96 = *a1;
    v97 = v29;
    *(_OWORD *)&v81[3] = *(_OWORD *)v106;
    v81[0] = v19;
    v81[1] = v20;
    v81[2] = v21;
    *(_OWORD *)v82 = *(_OWORD *)&v106[16];
    *(_QWORD *)&v82[13] = *(_QWORD *)&v106[29];
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = v102;
    v87 = v22;
    v88 = v23;
    v89 = a5;
    v90 = 0;
    v91 = v24;
    v93 = 0;
    v92 = 0;
    v94 = v25;
    v95 = 0;
    v30 = _decodeItem((_BOOL8 *)&v96, a3, a4, 0, v81, &v103, 0, v8, &v105);
    if (!(_DWORD)v30)
      goto LABEL_17;
LABEL_79:
    v47 = 0;
    goto LABEL_69;
  }
  v68 = *(_QWORD *)(a2 + 112);
  v69 = a5;
  v70 = a3;
  v71 = a4;
  v72 = v8;
  v105 = (CVPixelBufferRef)CFRetain(v11);
  v49 = dispatch_queue_create("bufferQueue", 0);
  if (!v49)
  {
    v47 = 0;
    goto LABEL_82;
  }
  v77 = v11;
  v50 = a1[3];
  v98 = a1[2];
  v99 = v50;
  v51 = a1[5];
  v100 = a1[4];
  v101 = v51;
  v52 = a1[1];
  v96 = *a1;
  v97 = v52;
  *(_OWORD *)&v81[3] = *(_OWORD *)v106;
  v78 = 0u;
  v79 = 0u;
  v80 = v49;
  v81[0] = v19;
  v81[1] = v20;
  v81[2] = v21;
  *(_OWORD *)v82 = *(_OWORD *)&v106[16];
  *(_QWORD *)&v82[13] = *(_QWORD *)&v106[29];
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = v102;
  v87 = v22;
  v88 = v23;
  v89 = v69;
  v90 = 0;
  v91 = v73;
  v93 = 0;
  v92 = 0;
  v94 = v68;
  v95 = 0;
  v53 = v49;
  v30 = _decodeItem((_BOOL8 *)&v96, v70, v71, 0, v81, &v103, (__int128 *)&v77, v72, 0);
  dispatch_barrier_sync(v53, &__block_literal_global_8);
  dispatch_release(v53);
  if ((_DWORD)v30)
    goto LABEL_79;
LABEL_17:
  if (*(_BYTE *)(a2 + 307))
  {
    v31 = CMPhotoSetPixelBufferCLAPFromRect(v105, 1, 1, (double)*(unint64_t *)(a2 + 272), (double)*(unint64_t *)(a2 + 280), (double)*(unint64_t *)(a2 + 288), (double)*(unint64_t *)(a2 + 296));
    if ((_DWORD)v31)
      goto LABEL_78;
  }
  if (CMPhotoPixelBufferHasCLAP(v105))
    v32 = *(_BYTE *)(a2 + 311) == 0;
  else
    v32 = 0;
  v33 = CMPhotoPixelBufferHasUnhandledIdentityMatrix(v105);
  if (*(_QWORD *)a1
    && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(*((_QWORD *)a1 + 1) + 16), *(_QWORD *)a1))
  {
    v47 = 0;
    v30 = 4294950191;
    goto LABEL_69;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(v105);
  v35 = PixelFormatType;
  v36 = *((_DWORD *)a1 + 22);
  if (v36)
    v37 = v36 == (_DWORD)PixelFormatType;
  else
    v37 = 1;
  v38 = !v37;
  if (*(_BYTE *)(a2 + 8))
    v39 = *(_DWORD *)(a2 + 4) != PixelFormatType;
  else
    v39 = 1;
  if ((v38 & v39) == 1)
  {
    FullRangeForPixelFormat = CMPhotoGetFullRangeForPixelFormat(PixelFormatType);
    v41 = *((unsigned int *)a1 + 22);
    if ((FullRangeForPixelFormat == (_DWORD)v41 || CMPhotoGetFullRangeForPixelFormat(v41) == v35)
      && !CMPhotoCreateOtherRangePixelBufferWithBacking(v105, &v104))
    {
      if (v105)
        CFRelease(v105);
      v42 = v104;
      v104 = 0;
      v105 = v42;
    }
  }
  v43 = v105;
  if (cf)
    v44 = cf == v105;
  else
    v44 = 1;
  v45 = !v44;
  v46 = v75;
  if (v32)
    v46 = 1;
  if ((v46 & 1) == 0 && (v45 & 1) == 0 && !v33)
  {
    v47 = 0;
LABEL_68:
    v30 = 0;
    *v74 = v43;
    v105 = 0;
    goto LABEL_69;
  }
  if (!v73)
  {
    v47 = 0;
    goto LABEL_59;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v47 = Mutable;
  if (!Mutable)
  {
LABEL_82:
    v30 = 4294950305;
    goto LABEL_69;
  }
  CMPhotoCFDictionarySetBoolean(Mutable, CFSTR("PreferLowMemory"), v73);
LABEL_59:
  if (!*(_BYTE *)(a2 + 308))
    v103 = 1;
  v54 = v105;
  v55 = CVPixelBufferGetPixelFormatType(v105);
  DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v54, v55);
  v58 = v57;
  *(_QWORD *)v81 = cf;
  v59 = *((_QWORD *)a1 + 4);
  v60 = v105;
  v61 = *((_BYTE *)a1 + 49) == 0;
  v62 = v103;
  v63 = CVPixelBufferGetPixelFormatType(v105);
  v66 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v59, v60, v47, v61, v62, v63, DefaultTripletsForTransfer, v58, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)*(unint64_t *)(a2 + 208), (double)*(unint64_t *)(a2 + 216), v64, v65, 1u, 0, *((_BYTE *)a1 + 48),
          *((_BYTE *)a1 + 50),
          *((_BYTE *)a1 + 51),
          *((_BYTE *)a1 + 52),
          (__CVBuffer **)v81);
  if (!(_DWORD)v66)
  {
    if (cf && *(_QWORD *)v81)
      CFRetain(*(CFTypeRef *)v81);
    if (v105)
      CFRelease(v105);
    v43 = *(CVPixelBufferRef *)v81;
    goto LABEL_68;
  }
  v30 = v66;
LABEL_69:
  if (v104)
    CFRelease(v104);
  if (v105)
    CFRelease(v105);
  if (v47)
    CFRelease(v47);
  return v30;
}

uint64_t CMPhotoPixelBufferHasCLAP(__CVBuffer *a1)
{
  return CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50]);
}

__CVBuffer *CMPhotoPixelBufferHasUnhandledIdentityMatrix(__CVBuffer *result)
{
  __CVBuffer *v1;
  CFTypeRef v2;
  int v3;
  OSType PixelFormatType;
  int v5;
  BOOL v6;

  if (result)
  {
    v1 = result;
    v2 = CVBufferCopyAttachment(result, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    v3 = FigCFEqual();
    PixelFormatType = CVPixelBufferGetPixelFormatType(v1);
    v5 = CMPhotoPixelFormatContainsYCbCr(PixelFormatType);
    if (v2)
      CFRelease(v2);
    if (v3)
      v6 = v5 == 0;
    else
      v6 = 1;
    return (__CVBuffer *)!v6;
  }
  return result;
}

uint64_t CMPhotoPixelFormatContainsYCbCr(OSType pixelFormat)
{
  CFDictionaryRef v1;

  v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  FigCFDictionaryGetBooleanIfPresent();
  if (v1)
    CFRelease(v1);
  return 0;
}

uint64_t CMPhotoDecompressionContainerDetectSourceIsMIAF(uint64_t a1)
{
  uint64_t (*v1)(void);
  int v2;

  if (a1)
  {
    v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 424);
    if (v1)
    {
      v2 = v1();
      LOBYTE(v1) = 0;
      if (v2)
        LOBYTE(v1) = 0;
    }
  }
  else
  {
    LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t _detectSourceIsMIAF(uint64_t a1, _BYTE *a2)
{
  const void *v4;
  char v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t, const void **);
  uint64_t v9;
  const void *v11;

  v11 = 0;
  if (!a2)
    return 4294950306;
  if (*(_BYTE *)(a1 + 160))
  {
    v4 = 0;
    v5 = *(_BYTE *)(a1 + 161);
LABEL_10:
    v9 = 0;
    *a2 = v5;
    goto LABEL_11;
  }
  v4 = *(const void **)(a1 + 48);
  if (!v4)
  {
    v5 = 0;
    *(_BYTE *)(a1 + 161) = 0;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(a1 + 40);
  CMBaseObject = FigPictureCollectionGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v8)
    return 4294954514;
  v9 = v8(CMBaseObject, *MEMORY[0x1E0CC49F8], v6, &v11);
  v4 = v11;
  if (!(_DWORD)v9)
  {
    v5 = FigCFEqual();
    *(_BYTE *)(a1 + 161) = v5;
    v4 = v11;
LABEL_9:
    *(_BYTE *)(a1 + 160) = 1;
    goto LABEL_10;
  }
LABEL_11:
  if (v4)
    CFRelease(v4);
  return v9;
}

double CMPhotoScaleAndRotateSessionClass_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t _getSequenceCount(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t _getSequenceCount_0(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t _getSequenceCount_1(uint64_t a1, CFIndex *a2)
{
  uint64_t result;
  const __CFArray *v5;
  CFIndex Count;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a1 + 120)
    || (*(_BYTE *)(a1 + 120) = 1,
        result = CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(*(const void **)(a1 + 56), (__CFArray **)(a1 + 128)), !(_DWORD)result))
  {
    v5 = *(const __CFArray **)(a1 + 128);
    if (v5)
      Count = CFArrayGetCount(v5);
    else
      Count = 0;
    result = 0;
    *a2 = Count;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  uint64_t (*v7)(const void *, uint64_t *);
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v11;
  uint64_t (*v12)(const void *, uint64_t, _QWORD, char *, uint64_t *);
  CFMutableDictionaryRef v13;
  __CFDictionary *v14;
  uint64_t v15;
  uint64_t v16;
  __CFArray **v18;
  char v19;
  uint64_t v20;
  CFTypeRef cf;
  uint64_t v22;

  cf = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v6 = Mutable;
  v18 = a2;
  v22 = 0;
  if (!a1)
    goto LABEL_22;
  v7 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v7)
  {
    v8 = v7(a1, &v22);
    if ((_DWORD)v8)
    {
LABEL_33:
      v16 = v8;
      goto LABEL_25;
    }
    FigBaseObject = FigFormatReaderGetFigBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v10)
      v10(FigBaseObject, *MEMORY[0x1E0CC4330], v4, &cf);
    if (v22 >= 1)
    {
      v11 = 0;
      do
      {
        v20 = 0;
        v12 = *(uint64_t (**)(const void *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 48);
        if (!v12)
          goto LABEL_24;
        v8 = v12(a1, v11, 0, (char *)&v20 + 4, &v20);
        if ((_DWORD)v8)
          goto LABEL_33;
        if (HIDWORD(v20) == 1885954932)
        {
          v19 = 0;
          v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v13)
          {
            v16 = 4294950305;
            goto LABEL_25;
          }
          v14 = v13;
          FigCFDictionarySetInt();
          CFDictionarySetValue(v14, CFSTR("FormatReader"), a1);
          v15 = _addReferencesToItemInfo(v14, (const __CFDictionary *)cf, v20, CFSTR("thmb"), &v19);
          if ((_DWORD)v15)
            goto LABEL_30;
          if (v19)
          {
            v15 = _addReferencesToItemInfo(v14, (const __CFDictionary *)cf, v20, CFSTR("auxl"), &v19);
            if ((_DWORD)v15)
              goto LABEL_30;
            if (v19)
            {
              v15 = _addReferencesToItemInfo(v14, (const __CFDictionary *)cf, v20, CFSTR("cdsc"), &v19);
              if ((_DWORD)v15)
              {
LABEL_30:
                v16 = v15;
                CFRelease(v14);
                goto LABEL_25;
              }
              if (v19)
                CFArrayAppendValue(v6, v14);
            }
          }
          CFRelease(v14);
        }
      }
      while (++v11 < v22);
    }
LABEL_22:
    v16 = 0;
    if (v18)
    {
      *v18 = v6;
      v6 = 0;
    }
    goto LABEL_25;
  }
LABEL_24:
  v16 = 4294954514;
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v16;
}

uint64_t CMPhotoDecompressionContainerCreateDictionaryDescription(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (!a2)
    return 0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 344);
  if (v2)
    return v2();
  else
    return 4294950302;
}

void CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(const opaqueCMFormatDescription *a1, __CVBuffer *a2)
{
  const __CFDictionary *Extensions;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  const __CFString *v7;
  const void *v8;
  const void *v9;

  Extensions = CMFormatDescriptionGetExtensions(a1);
  if (Extensions)
  {
    v4 = Extensions;
    Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA21A8]);
    if (Value)
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8DA8], Value, kCVAttachmentMode_ShouldPropagate);
    v6 = CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E0CA2220]);
    if (v6)
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E58], v6, kCVAttachmentMode_ShouldPropagate);
    if (cmpweak_exists_kCMFormatDescriptionExtension_ContentColorVolume())
    {
      v7 = cmpweak_kCMFormatDescriptionExtension_ContentColorVolume();
      v8 = CFDictionaryGetValue(v4, v7);
      if (v8)
        CVBufferSetAttachment(a2, CFSTR("ContentColorVolume"), v8, kCVAttachmentMode_ShouldPropagate);
    }
    v9 = CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E0CA2150]);
    if (v9)
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CC8], v9, kCVAttachmentMode_ShouldPropagate);
  }
}

uint64_t _createDescription(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MainImageDescription;
  CFArrayRef v8;
  const __CFArray *v9;
  CFNumberRef Int;
  int Count;
  CFNumberRef v12;
  CFDictionaryRef v13;
  uint64_t v14;
  CFTypeRef cf;
  void *values[4];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 40;
  v4 = *(const __CFAllocator **)(a1 + 40);
  cf = 0;
  v6 = _parseImageSizeAndTypeIfNeeded(a1 + 40);
  if ((_DWORD)v6)
    return v6;
  MainImageDescription = _parseICCProfileIfNeeded(v5);
  if ((_DWORD)MainImageDescription
    || (MainImageDescription = _parseExifIfNeeded(v5, 0), (_DWORD)MainImageDescription)
    || (MainImageDescription = _parseXMPIfNeeded(v5), (_DWORD)MainImageDescription)
    || (MainImageDescription = _parseDebugMetadataIfNeeded(v5), (_DWORD)MainImageDescription)
    || (MainImageDescription = _parseCustomMetadataIfNeeded(v5), (_DWORD)MainImageDescription)
    || (MainImageDescription = _parseMPOIfNeeded(v5), (_DWORD)MainImageDescription)
    || (MainImageDescription = _createMainImageDescription(a1, (const __CFNumber *)0xFFFFFFFFFFFFFFFFLL, (__CFDictionary **)&cf), (_DWORD)MainImageDescription))
  {
    v14 = MainImageDescription;
    v12 = 0;
    Int = 0;
    goto LABEL_14;
  }
  v8 = CFArrayCreate(v4, &cf, 1, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    v12 = 0;
    Int = 0;
    v14 = 4294950305;
    goto LABEL_14;
  }
  v9 = v8;
  Int = CMPhotoCFNumberCreateInt(0);
  if (!Int)
  {
    v12 = 0;
    goto LABEL_25;
  }
  Count = CFArrayGetCount(v9);
  v12 = CMPhotoCFNumberCreateInt(Count);
  keys[0] = CFSTR("MainImages");
  keys[1] = CFSTR("MainImageCount");
  keys[2] = CFSTR("PrimaryImageIndex");
  keys[3] = CFSTR("ImageSequenceCount");
  values[0] = v9;
  values[1] = v12;
  values[2] = Int;
  values[3] = Int;
  v13 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v13)
  {
LABEL_25:
    v14 = 4294950305;
    goto LABEL_13;
  }
  v14 = 0;
  *a2 = v13;
LABEL_13:
  CFRelease(v9);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (Int)
    CFRelease(Int);
  if (v12)
    CFRelease(v12);
  return v14;
}

uint64_t _createDescription_0(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  uint64_t MetadataDescriptionArray_0;
  unint64_t v9;
  unint64_t v10;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v12;
  uint64_t v13;
  CGColorSpace *v14;
  CFStringRef v15;
  CFStringRef v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  const void *v19;
  const void *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  __CFDictionary *v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  CFDictionaryRef v29;
  CFDictionaryRef v30;
  CFArrayRef v31;
  uint64_t v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  void *value;
  CFTypeRef v39;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  void *values;
  CGSize v43;
  CGSize v44;

  v2 = *(const __CFAllocator **)(a1 + 40);
  theDict = 0;
  values = 0;
  v39 = 0;
  cf = 0;
  value = 0;
  if (!a2)
  {
    v31 = 0;
    v34 = 0;
    v36 = 0;
    goto LABEL_62;
  }
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  values = Mutable;
  if (!Mutable)
  {
    v31 = 0;
    goto LABEL_81;
  }
  v7 = *(_QWORD *)(a1 + 488);
  MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt64(Mutable, CFSTR("DataOffset"), 0);
  if ((_DWORD)MetadataDescriptionArray_0)
    goto LABEL_75;
  MetadataDescriptionArray_0 = CMPhotoCFDictionarySetSize(v6, CFSTR("DataLength"), v7);
  if ((_DWORD)MetadataDescriptionArray_0)
    goto LABEL_75;
  LODWORD(v9) = *(_DWORD *)(a1 + 88);
  LODWORD(v10) = *(_DWORD *)(a1 + 92);
  v43.width = (double)v9;
  v43.height = (double)v10;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v43);
  if (!DictionaryRepresentation)
    goto LABEL_78;
  v12 = DictionaryRepresentation;
  CFDictionarySetValue(v6, CFSTR("Dimensions"), DictionaryRepresentation);
  CFRelease(v12);
  MetadataDescriptionArray_0 = _copyImageBitDepthForIndex_0(a1, 0, v13, (__CFArray **)&value);
  if ((_DWORD)MetadataDescriptionArray_0)
  {
LABEL_75:
    v36 = MetadataDescriptionArray_0;
    v31 = 0;
LABEL_76:
    v6 = 0;
    goto LABEL_57;
  }
  CFDictionarySetValue(v6, CFSTR("BitDepth"), value);
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  v14 = *(CGColorSpace **)(a1 + 288);
  if (v14)
  {
    v15 = CGColorSpaceCopyName(v14);
    if (v15)
    {
      v16 = v15;
      CFDictionarySetValue(v6, CFSTR("NamedColorSpace"), v15);
      CFRelease(v16);
    }
    else
    {
      CFDictionarySetValue(v6, CFSTR("ColorSpace"), *(const void **)(a1 + 288));
    }
  }
  if (*(_QWORD *)(a1 + 304) || *(_QWORD *)(a1 + 312))
  {
    v17 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v17)
    {
      v18 = v17;
      v19 = *(const void **)(a1 + 304);
      if (v19)
        CFDictionarySetValue(v17, CFSTR("ColorPrimaries"), v19);
      v20 = *(const void **)(a1 + 312);
      if (v20)
        CFDictionarySetValue(v18, CFSTR("TransferFunction"), v20);
      CFDictionarySetValue(v6, CFSTR("NclxColor"), v18);
      CFRelease(v18);
      goto LABEL_21;
    }
LABEL_78:
    v31 = 0;
    v6 = 0;
    goto LABEL_81;
  }
LABEL_21:
  MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt32(v6, CFSTR("CodecType"), 1786276896);
  if ((_DWORD)MetadataDescriptionArray_0)
    goto LABEL_75;
  MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt64(v6, CFSTR("ItemID"), 1);
  if ((_DWORD)MetadataDescriptionArray_0)
    goto LABEL_75;
  v21 = *(const __CFArray **)(a1 + 320);
  if (v21)
  {
    if (CFArrayGetCount(v21) >= 1)
    {
      MetadataDescriptionArray_0 = _createMetadataDescriptionArray_0(v2, 0, v7, *(CFArrayRef *)(a1 + 320), (__CFArray **)&cf);
      if ((_DWORD)MetadataDescriptionArray_0)
        goto LABEL_75;
    }
  }
  v22 = *(const __CFArray **)(a1 + 328);
  if (v22)
  {
    if (CFArrayGetCount(v22) >= 1)
    {
      MetadataDescriptionArray_0 = _createMetadataDescriptionArray_0(v2, 0, v7, *(CFArrayRef *)(a1 + 328), (__CFArray **)&v39);
      if ((_DWORD)MetadataDescriptionArray_0)
        goto LABEL_75;
    }
  }
  if (!*(_DWORD *)(a1 + 144)
    || (v23 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (theDict = v23) == 0)
    || CMPhotoCFDictionarySetInt64(v23, CFSTR("DataOffset"), 0)
    || CMPhotoCFDictionarySetSize(theDict, CFSTR("DataLength"), v7))
  {
LABEL_43:
    v31 = 0;
    goto LABEL_44;
  }
  v24 = *(_DWORD *)(a1 + 144);
  if (v24)
  {
    if (v24 <= 8)
      v25 = 1278226488;
    else
      v25 = 1278226742;
    v26 = 3;
LABEL_38:
    if (!CMPhotoCFDictionarySetInt(theDict, CFSTR("AuxiliaryType"), v26)
      && !CMPhotoCFDictionarySetInt32(theDict, CFSTR("AuxiliaryNativePixelFormat"), v25)
      && !CMPhotoCFDictionarySetInt(theDict, CFSTR("AlphaPremultiplication"), 0))
    {
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
      LODWORD(v28) = *(_DWORD *)(a1 + 92);
      v44.width = (double)v27;
      v44.height = (double)v28;
      v29 = CGSizeCreateDictionaryRepresentation(v44);
      if (v29)
      {
        v30 = v29;
        CFDictionarySetValue(theDict, CFSTR("Dimensions"), v29);
        CFRelease(v30);
        v31 = CFArrayCreate(v2, (const void **)&theDict, 1, MEMORY[0x1E0C9B378]);
        goto LABEL_44;
      }
    }
    goto LABEL_43;
  }
  v31 = 0;
  if (!FigSignalErrorAt())
  {
    v26 = 0;
    v25 = 0;
    goto LABEL_38;
  }
LABEL_44:
  if (cf)
    CFDictionarySetValue(v6, CFSTR("ExifPayloads"), cf);
  if (v39)
    CFDictionarySetValue(v6, CFSTR("XMPPayloads"), v39);
  if (v31)
  {
    CFDictionarySetValue(v6, CFSTR("AuxiliaryImages"), v31);
    CFArrayGetCount(v31);
  }
  v32 = FigCFDictionarySetInt();
  if ((_DWORD)v32)
  {
    v36 = v32;
    goto LABEL_76;
  }
  v6 = CFArrayCreate(v2, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v6)
  {
LABEL_81:
    v34 = 0;
    goto LABEL_82;
  }
  v33 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v34 = v33;
  if (!v33)
  {
LABEL_82:
    v36 = 4294950305;
    goto LABEL_58;
  }
  CFDictionarySetValue(v33, CFSTR("MainImages"), v6);
  CFArrayGetCount(v6);
  v35 = FigCFDictionarySetInt();
  if ((_DWORD)v35 || (v35 = CMPhotoCFDictionarySetSize(v34, CFSTR("PrimaryImageIndex"), 0), (_DWORD)v35))
  {
    v36 = v35;
    goto LABEL_58;
  }
  v36 = CMPhotoCFDictionarySetSize(v34, CFSTR("ImageSequenceCount"), 0);
  if (!(_DWORD)v36)
  {
    *a2 = v34;
LABEL_57:
    v34 = 0;
  }
LABEL_58:
  if (value)
    CFRelease(value);
  if (v6)
    CFRelease(v6);
LABEL_62:
  if (cf)
    CFRelease(cf);
  if (v39)
    CFRelease(v39);
  if (v31)
    CFRelease(v31);
  if (values)
    CFRelease(values);
  if (theDict)
    CFRelease(theDict);
  if (v34)
    CFRelease(v34);
  return v36;
}

uint64_t _createDescription_1(_QWORD *a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t ImageCountWithOptions;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  void *v10;
  const __CFNumber *v11;
  uint64_t SequenceCount_1;
  uint64_t v13;
  CFArrayRef v14;
  uint64_t (*v15)(uint64_t, CFArrayRef, CFTypeRef *, _QWORD);
  int IsMIAF;
  uint64_t v17;
  const __CFNumber *v19;
  CFArrayRef theArray;
  CFIndex capacity;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  void *value;
  CFTypeRef cf;

  v4 = CFGetAllocator(a1);
  value = 0;
  cf = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    capacity = 0;
    ImageCountWithOptions = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)a1, 0, &capacity);
    if ((_DWORD)ImageCountWithOptions
      || (ImageCountWithOptions = FigCFDictionarySetInt(), (_DWORD)ImageCountWithOptions))
    {
      v17 = ImageCountWithOptions;
      goto LABEL_30;
    }
    v8 = CFArrayCreateMutable(v4, capacity, MEMORY[0x1E0C9B378]);
    if (!v8)
    {
      v17 = 4294950305;
      goto LABEL_30;
    }
    v9 = v8;
    if (capacity < 1)
    {
LABEL_19:
      IsMIAF = CMPhotoDecompressionContainerDetectSourceIsMIAF((uint64_t)a1);
      SequenceCount_1 = CMPhotoCFDictionarySetBoolean(v6, CFSTR("SourceIsMIAF"), IsMIAF);
      if (!(_DWORD)SequenceCount_1)
      {
        CFDictionarySetValue(v6, CFSTR("MainImages"), v9);
        if (capacity >= 1)
        {
          theArray = 0;
          if (!_copyGroupsDescriptionArray_0(a1, 0, &theArray))
          {
            if (theArray)
            {
              if (CFArrayGetCount(theArray) >= 1)
              {
                CFDictionarySetValue(v6, CFSTR("GroupsList"), theArray);
                if (theArray)
                  CFRelease(theArray);
              }
            }
          }
        }
        SequenceCount_1 = _getSequenceCount_1((uint64_t)a1, &v24);
        if (!(_DWORD)SequenceCount_1)
        {
          SequenceCount_1 = FigCFDictionarySetInt();
          if (!(_DWORD)SequenceCount_1)
          {
            SequenceCount_1 = _getVideoAndAudioCount((uint64_t)a1, (unint64_t)&v23, (unint64_t)&v22);
            if (!(_DWORD)SequenceCount_1)
            {
              SequenceCount_1 = FigCFDictionarySetInt();
              if (!(_DWORD)SequenceCount_1)
              {
                v17 = FigCFDictionarySetInt();
                if (!(_DWORD)v17)
                {
                  *a2 = v6;
                  v6 = v9;
LABEL_30:
                  CFRelease(v6);
                  goto LABEL_31;
                }
LABEL_29:
                CFRelease(v9);
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
    else
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v10)
        {
          CFRelease(v10);
          value = 0;
        }
        v19 = 0;
        theArray = (CFArrayRef)-1;
        SequenceCount_1 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, v11, -1, 0, &theArray, 0, &v19);
        if ((_DWORD)SequenceCount_1)
          break;
        v13 = a1[6];
        v14 = theArray;
        v15 = *(uint64_t (**)(uint64_t, CFArrayRef, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 16);
        if (!v15)
        {
          v17 = 4294954514;
          goto LABEL_29;
        }
        SequenceCount_1 = v15(v13, v14, &cf, 0);
        if ((_DWORD)SequenceCount_1)
          break;
        SequenceCount_1 = _createDescriptionForReader((uint64_t)a1, cf, (uint64_t)theArray, v19, v4, 0, 0, (__CFDictionary **)&value);
        if ((_DWORD)SequenceCount_1)
          break;
        v10 = value;
        CFArrayAppendValue(v9, value);
        v11 = (const __CFNumber *)((char *)v11 + 1);
        if ((uint64_t)v11 >= capacity)
        {
          if (capacity >= 1)
          {
            theArray = 0;
            SequenceCount_1 = CMPhotoDecompressionContainerGetPrimaryItemIndexWithOptions((uint64_t)a1, 0, &theArray);
            if ((_DWORD)SequenceCount_1)
              break;
            SequenceCount_1 = FigCFDictionarySetInt();
            if ((_DWORD)SequenceCount_1)
              break;
          }
          goto LABEL_19;
        }
      }
    }
    v17 = SequenceCount_1;
    goto LABEL_29;
  }
  v17 = 4294950305;
LABEL_31:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t _createDescription_2(uint64_t *a1, CFMutableDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  CFNumberRef ImageCountForSequence;
  uint64_t LoopCount;
  CFIndex v10;
  CFIndex v11;
  __CFArray *v12;
  __CFArray *v13;
  const CFArrayCallBacks *v14;
  uint64_t DescriptionOfFrameForIndex;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v19;
  CFIndex capacity;
  CFTypeRef v21;
  CFTypeRef cf;

  v4 = CFGetAllocator(a1);
  v21 = 0;
  cf = 0;
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v6 = Mutable;
  v7 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v7)
  {
    v12 = 0;
    v13 = 0;
LABEL_44:
    v17 = 4294950305;
LABEL_45:
    CFRelease(v6);
    if (!v7)
      goto LABEL_31;
    goto LABEL_30;
  }
  capacity = 0;
  ImageCountForSequence = _getImageCountForSequence(a1[10], &capacity);
  if ((_DWORD)ImageCountForSequence
    || (v19 = 0, LoopCount = _getLoopCount((uint64_t)a1, &v19), !(_DWORD)LoopCount)
    && (ImageCountForSequence = (CFNumberRef)CMPhotoCFDictionarySetSize(v6, CFSTR("LoopCount"), v19),
        (_DWORD)ImageCountForSequence))
  {
    v17 = (uint64_t)ImageCountForSequence;
    v12 = 0;
    v13 = 0;
    goto LABEL_45;
  }
  v10 = capacity;
  if (capacity >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      if (!v13)
      {
        v13 = CFArrayCreateMutable(v4, v10, v14);
        if (!v13)
          goto LABEL_44;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v21)
      {
        CFRelease(v21);
        v21 = 0;
      }
      DescriptionOfFrameForIndex = _createDescriptionOfFrameForIndex((uint64_t)a1, a1[10], v11, v4, 0, (__CFDictionary **)&v21, (__CFDictionary **)&cf);
      if ((_DWORD)DescriptionOfFrameForIndex)
      {
        v17 = DescriptionOfFrameForIndex;
        goto LABEL_45;
      }
      if (cf)
        CFArrayAppendValue(v13, cf);
      if (!v11)
      {
        v16 = v21;
        if (v21)
        {
          if (!v12)
          {
            v12 = CFArrayCreateMutable(v4, 0, v14);
            if (!v12)
              goto LABEL_44;
            v16 = v21;
          }
          CFArrayAppendValue(v12, v16);
        }
      }
      ++v11;
      v10 = capacity;
      if (v11 >= capacity)
      {
        CFDictionarySetValue(v6, CFSTR("MainImages"), v13);
        if (v12)
        {
          CFDictionarySetValue(v7, CFSTR("MainImages"), v12);
          CFDictionarySetValue(v6, CFSTR("SequenceTracksDescription"), v7);
        }
        v17 = 0;
        if (a2)
          goto LABEL_29;
        goto LABEL_45;
      }
    }
  }
  v13 = 0;
  v12 = 0;
  v17 = LoopCount;
  if (!a2)
    goto LABEL_45;
LABEL_29:
  *a2 = v6;
LABEL_30:
  CFRelease(v7);
LABEL_31:
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  return v17;
}

uint64_t CMPhotoDecompressionContainerGetPrimaryItemIndex(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_QWORD *)(a1 + 568);
    }
  }
  return result;
}

uint64_t _createDescriptionForReader(uint64_t a1, CFTypeRef a2, uint64_t a3, const __CFArray *a4, const __CFAllocator *a5, int a6, int a7, __CFDictionary **a8)
{
  __CFDictionary *Mutable;
  uint64_t ItemTypeFromReader;
  uint64_t FigBaseObject;
  uint64_t (*v19)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t (*v26)(CFTypeRef, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v28)(uint64_t, _QWORD, const __CFAllocator *, void **);
  uint64_t v29;
  const __CFArray *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const __CFDictionary *v33;
  const void **v34;
  const __CFDictionary *v35;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v37;
  const __CFArray *v38;
  const __CFArray *v39;
  CFTypeID v40;
  const void *ValueAtIndex;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, const void *, const __CFAllocator *, const void **);
  uint64_t v44;
  __CFArray *v45;
  __CFArray *v46;
  __CFArray *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, _QWORD, const __CFAllocator *, void **);
  uint64_t ClliDictionary;
  const __CFDictionary *Extensions;
  const __CFDictionary *v52;
  const __CFData *v53;
  const __CFData *v54;
  const __CFString *v55;
  const __CFData *v56;
  const __CFData *v57;
  uint64_t Count;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t DummyReaderDescription;
  const void *v63;
  uint64_t (*v64)(CFTypeRef, void **);
  uint64_t v65;
  uint64_t (*v66)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v67;
  int ThumbnailGeometryForIndex_0;
  __CFDictionary *v69;
  uint64_t (*v70)(CFTypeRef, __CFDictionary **);
  uint64_t v71;
  unsigned int (*v72)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __CFDictionary *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, const __CFAllocator *, __CFDictionary **);
  uint64_t v84;
  __CFDictionary **v85;
  int v86;
  uint64_t v87;
  const __CFArray *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  void *value[2];
  __int128 v94;
  int v95;
  CFTypeRef v96;
  CFTypeRef v97;
  CFTypeRef cf;
  __CFArray *v99;
  __CFArray *v100;
  __CFArray *v101;
  __CFArray *v102;
  CFTypeRef v103;
  const void *v104;
  CFTypeRef v105;
  CFTypeRef v106;
  __CFDictionary *v107;
  __CFDictionary *v108;
  __CFDictionary *v109;
  __CFDictionary *v110[2];
  CGSize v111;

  v105 = 0;
  v106 = 0;
  v103 = 0;
  v104 = 0;
  v101 = 0;
  v102 = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0;
  cf = 0;
  v96 = 0;
  v95 = 0;
  Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_233;
  v88 = a4;
  ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v95);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  ItemTypeFromReader = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("ItemType"), v95);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  v86 = a7;
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v19 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (!v19)
    goto LABEL_78;
  ItemTypeFromReader = v19(FigBaseObject, *MEMORY[0x1E0CC4B70], a5, &v105);
  if ((_DWORD)ItemTypeFromReader)
  {
LABEL_200:
    v23 = ItemTypeFromReader;
    goto LABEL_201;
  }
  FigCFDictionarySetValue();
  *(_OWORD *)value = 0u;
  v94 = 0u;
  if (v95 == 1768187246)
  {
    ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(a2, &cf, value, 0);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_200;
  }
  else
  {
    ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(a1 + 28), (unint64_t)value, 0);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_200;
  }
  v111.width = (double)(unint64_t)v94;
  v111.height = (double)*((unint64_t *)&v94 + 1);
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v111);
  if (!DictionaryRepresentation)
  {
    v23 = 4294950305;
    goto LABEL_201;
  }
  v21 = DictionaryRepresentation;
  CFDictionarySetValue(Mutable, CFSTR("Dimensions"), DictionaryRepresentation);
  CFRelease(v21);
  v110[0] = 0;
  v22 = CMPhotoPictureReaderCopyImageBitDepth(a2, (CFTypeRef *)v110);
  if ((_DWORD)v22 != -12783)
  {
    v23 = v22;
    if ((_DWORD)v22)
      goto LABEL_201;
    CFDictionarySetValue(Mutable, CFSTR("BitDepth"), v110[0]);
    if (v110[0])
      CFRelease(v110[0]);
  }
  if (v95 == 1768187246)
  {
    LODWORD(value[0]) = 0;
LABEL_17:
    v24 = cf;
    goto LABEL_18;
  }
  v26 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v26)
    goto LABEL_78;
  ItemTypeFromReader = v26(a2, &v97);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  value[0] = 0;
  CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  v28 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v28)
    goto LABEL_78;
  v29 = v28(CMBaseObject, *MEMORY[0x1E0CC4C30], a5, value);
  if ((_DWORD)v29 != -12784)
  {
    v23 = v29;
    if (!(_DWORD)v29)
    {
      CFDictionarySetValue(Mutable, CFSTR("TileDimensions"), value[0]);
      if (value[0])
        CFRelease(value[0]);
      goto LABEL_29;
    }
LABEL_201:
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_202;
  }
LABEL_29:
  LODWORD(value[0]) = 0;
  if (v95 == 1768187246)
    goto LABEL_17;
  v24 = a2;
LABEL_18:
  ItemTypeFromReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(v24, value);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  ItemTypeFromReader = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("CodecType"), (int)value[0]);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  value[0] = 0;
  value[1] = 0;
  v25 = v95 == 1768187246 ? cf : a2;
  ItemTypeFromReader = _getDataRangeFromReader((uint64_t)v25, (unint64_t *)value);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  ItemTypeFromReader = CMPhotoCFDictionarySetInt64(Mutable, CFSTR("DataOffset"), (uint64_t)value[0]);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  ItemTypeFromReader = CMPhotoCFDictionarySetSize(Mutable, CFSTR("DataLength"), value[1]);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_200;
  v87 = a3;
  v30 = a4;
  if (v95 == 1953325424)
  {
    v31 = FigPictureReaderGetFigBaseObject();
    v32 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (!v32)
      goto LABEL_78;
    ItemTypeFromReader = v32(v31, *MEMORY[0x1E0CC4B28], a5, &v106);
    if (!(_DWORD)ItemTypeFromReader)
    {
      v33 = (const __CFDictionary *)FigCFDictionaryGetValue();
      v34 = (const void **)MEMORY[0x1E0CC4BB8];
      if (!v33)
        goto LABEL_45;
      v35 = v33;
      MutableCopy = CFDictionaryCreateMutableCopy(a5, 0, v33);
      if (MutableCopy)
      {
        v37 = MutableCopy;
        if (!CFDictionaryContainsKey(v35, CFSTR("TonemapVersion")))
          CMPhotoCFDictionarySetInt(v37, CFSTR("TonemapVersion"), 0);
        if (!CFDictionaryContainsKey(v35, CFSTR("TonemapWriterVersion")))
          CMPhotoCFDictionarySetInt(v37, CFSTR("TonemapWriterVersion"), 0);
        CFDictionaryRemoveValue(v37, *v34);
        CFDictionarySetValue(Mutable, CFSTR("DerivationDetails"), v37);
        CFRelease(v37);
LABEL_45:
        v38 = (const __CFArray *)FigCFDictionaryGetValue();
        if (!v38 || (v39 = v38, v40 = CFGetTypeID(v38), v40 != CFArrayGetTypeID()) || CFArrayGetCount(v39) != 2)
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v23 = 4294950194;
          goto LABEL_202;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(v39, 1);
        v42 = FigPictureReaderGetFigBaseObject();
        v43 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v43)
        {
          ItemTypeFromReader = v43(v42, *v34, a5, &v104);
          if ((_DWORD)ItemTypeFromReader)
            goto LABEL_200;
          CFDictionarySetValue(Mutable, CFSTR("DerivationGainMapDimension"), v104);
          ItemTypeFromReader = CMPhotoPictureReaderCopyFormatDescriptorFromReader((uint64_t)ValueAtIndex, (uint64_t)a5, 1, (CMFormatDescriptionRef *)&v96);
          a3 = v87;
          if ((_DWORD)ItemTypeFromReader)
            goto LABEL_200;
          LODWORD(value[0]) = 0;
          if (!_getImageOrientation(a1, ValueAtIndex, 0, value))
          {
            ItemTypeFromReader = FigCFDictionarySetInt();
            if ((_DWORD)ItemTypeFromReader)
              goto LABEL_200;
          }
          LODWORD(v110[0]) = 0;
          LOBYTE(v107) = 1;
          ItemTypeFromReader = CMPhotoGetInfoFromFormatDescription((const opaqueCMFormatDescription *)v96, 0, *(unsigned __int8 *)(a1 + 28), 0, &v107, v110, 0, 0, 0, 0, 0, 0);
          if ((_DWORD)ItemTypeFromReader)
            goto LABEL_200;
          if (LODWORD(v110[0]))
          {
            ItemTypeFromReader = FigCFDictionarySetInt();
            if ((_DWORD)ItemTypeFromReader)
              goto LABEL_200;
          }
          v30 = v88;
          if (!CMPhotoPictureReaderCopyImageBitDepth(ValueAtIndex, &v103))
          {
            LODWORD(v109) = 0;
            if (FigCFArrayGetInt32AtIndex())
            {
              LODWORD(v108) = 0;
              if (!CMPhotoGetYUVPixelFormatForParameters((int)v110[0], (int)v109, v107, 0, 0, 0, 1, (int *)&v108))
              {
                ItemTypeFromReader = FigCFDictionarySetInt();
                if ((_DWORD)ItemTypeFromReader)
                  goto LABEL_200;
              }
              v30 = v88;
            }
          }
          goto LABEL_61;
        }
LABEL_78:
        v45 = 0;
        v46 = 0;
        v47 = 0;
LABEL_79:
        v23 = 4294954514;
        goto LABEL_202;
      }
LABEL_233:
      v45 = 0;
      v46 = 0;
      v47 = 0;
LABEL_234:
      v23 = 4294950305;
      goto LABEL_202;
    }
    goto LABEL_200;
  }
LABEL_61:
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 0, &v102);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 1, &v101);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 2, &v100);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 4, &v99);
  v85 = a8;
  if (a6)
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_63;
  }
  if (v30)
  {
    Count = CFArrayGetCount(v30);
    if (Count >= 1)
    {
      v47 = CFArrayCreateMutable(a5, Count, MEMORY[0x1E0C9B378]);
      v45 = 0;
      if (v47)
      {
        while (1)
        {
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          LODWORD(v110[0]) = 0;
          if (FigCFArrayGetInt32AtIndex())
          {
            v59 = *(_QWORD *)(a1 + 48);
            v60 = LODWORD(v110[0]);
            v61 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
            if (!v61)
            {
              v23 = 4294954514;
              goto LABEL_195;
            }
            DummyReaderDescription = v61(v59, v60, &cf, 0);
            if ((_DWORD)DummyReaderDescription)
              goto LABEL_236;
            value[0] = 0;
            if (_createDescriptionForReader(a1, cf, LODWORD(v110[0]), 0, a5, 0, 1, value))
            {
              DummyReaderDescription = _createDummyReaderDescription(a5, (__CFDictionary **)value);
              if ((_DWORD)DummyReaderDescription)
                goto LABEL_236;
            }
            v63 = value[0];
            DummyReaderDescription = FigCFDictionarySetCFIndex();
            if ((_DWORD)DummyReaderDescription)
              goto LABEL_236;
            CFArrayAppendValue(v47, v63);
            if (v63)
              CFRelease(v63);
            a3 = v87;
          }
          v45 = (__CFArray *)((char *)v45 + 1);
          if ((__CFArray *)Count == v45)
            goto LABEL_125;
        }
      }
      v46 = 0;
      goto LABEL_234;
    }
  }
  v47 = 0;
LABEL_125:
  if (!v86)
  {
    DummyReaderDescription = FigCFDictionarySetInt();
    if ((_DWORD)DummyReaderDescription)
      goto LABEL_236;
  }
  v92 = 0;
  if (!_getImageGeometryForIndex_1(a1, a3, v44, 0, 0, &v92))
  {
    DummyReaderDescription = FigCFDictionarySetInt();
    if ((_DWORD)DummyReaderDescription)
      goto LABEL_236;
  }
  value[0] = 0;
  v64 = *(uint64_t (**)(CFTypeRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v64)
  {
    v45 = 0;
LABEL_149:
    v23 = 4294954514;
    goto LABEL_196;
  }
  DummyReaderDescription = v64(a2, value);
  if ((_DWORD)DummyReaderDescription
    || (DummyReaderDescription = FigCFDictionarySetInt(), (_DWORD)DummyReaderDescription))
  {
LABEL_236:
    v23 = DummyReaderDescription;
LABEL_195:
    v45 = 0;
    goto LABEL_196;
  }
  if ((uint64_t)value[0] >= 1)
  {
    v65 = 0;
    v45 = 0;
    while (1)
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v110[0] = 0;
      if (!v45)
      {
        v45 = CFArrayCreateMutable(a5, (CFIndex)value[0], MEMORY[0x1E0C9B378]);
        if (!v45)
          break;
      }
      v66 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v66)
        goto LABEL_149;
      v67 = v66(a2, v65, &cf);
      if ((_DWORD)v67)
        goto LABEL_237;
      if (_createDescriptionForReader(a1, cf, v65, 0, a5, 1, 0, v110))
      {
        v67 = _createDummyReaderDescription(a5, v110);
        if ((_DWORD)v67)
          goto LABEL_237;
      }
      v92 = 0;
      ThumbnailGeometryForIndex_0 = _getThumbnailGeometryForIndex_0(a1, v87, v65, 0, 0, &v92);
      v69 = v110[0];
      if (!ThumbnailGeometryForIndex_0)
      {
        v67 = FigCFDictionarySetInt();
        if ((_DWORD)v67)
          goto LABEL_237;
      }
      CFArrayAppendValue(v45, v69);
      if (v110[0])
        CFRelease(v110[0]);
      if (++v65 >= (uint64_t)value[0])
        goto LABEL_151;
    }
    v23 = 4294950305;
    goto LABEL_196;
  }
  v45 = 0;
LABEL_151:
  v110[0] = 0;
  v70 = *(uint64_t (**)(CFTypeRef, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v70)
  {
    v46 = 0;
    goto LABEL_79;
  }
  v67 = v70(a2, v110);
  if ((_DWORD)v67 || (v67 = FigCFDictionarySetInt(), (_DWORD)v67))
  {
LABEL_237:
    v23 = v67;
LABEL_196:
    v46 = 0;
    goto LABEL_202;
  }
  if ((uint64_t)v110[0] >= 1)
  {
    v71 = 0;
    v46 = 0;
    v84 = *MEMORY[0x1E0CC4B18];
    while (1)
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v108 = 0;
      v109 = 0;
      v107 = 0;
      if (!v46)
      {
        v46 = CFArrayCreateMutable(a5, (CFIndex)v110[0], MEMORY[0x1E0C9B378]);
        if (!v46)
          goto LABEL_234;
      }
      v72 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 40);
      if (v72
        && !v72(a2, v71, &cf)
        && (!_createDescriptionForReader(a1, cf, v71, 0, a5, 2, 0, &v108)
         || !_createDummyReaderDescription(a5, &v108)))
      {
        v92 = 0;
        if (!_getAuxiliaryImageGeometryForIndex_1(a1, v87, v71, v73, 0, 0, &v92))
        {
          v75 = FigCFDictionarySetInt();
          if ((_DWORD)v75)
          {
            v23 = v75;
            goto LABEL_202;
          }
        }
        v91 = 0;
        if (!_getAuxiliaryImageTypeForIndex_1((_QWORD *)a1, v87, v71, v74, (unint64_t)&v91, 0))
        {
          if (_copyAuxiliaryImageTypeInfo(a1, v87, v71, v76, 0, (uint64_t)&v107) || !v107 || v91 != 3)
          {
            v78 = v108;
LABEL_176:
            _copyColorInfoForImageTypeWithIndex(a1, 2, v87, v71, v78);
            if (!CMPhotoCFDictionarySetInt(v78, CFSTR("AuxiliaryType"), v91))
            {
              v89 = 0;
              if (_getAuxiliaryImageTypeForIndex_1((_QWORD *)a1, v87, v71, v80, 0, (unint64_t)&v89)|| !CMPhotoCFDictionarySetInt32(v78, CFSTR("AuxiliaryNativePixelFormat"), v89))
              {
                v81 = FigPictureReaderGetFigBaseObject();
                v82 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v82)
                {
                  if (!v82(v81, v84, a5, &v109))
                  {
                    CFDictionarySetValue(v78, CFSTR("AuxiliaryTypeURN"), v109);
                    if (v91 == 4)
                    {
                      if (FigCFEqual())
                        CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex((_QWORD *)a1, v87, v71, v78);
                    }
                  }
                }
              }
            }
            goto LABEL_184;
          }
          v90 = 2;
          v77 = _readAlphaInfoSEIPayload((uint64_t)v107, &v90);
          v78 = v108;
          if (v77)
            v79 = 2;
          else
            v79 = v90;
          if (!CMPhotoCFDictionarySetInt(v108, CFSTR("AlphaPremultiplication"), v79))
            goto LABEL_176;
        }
      }
LABEL_184:
      if (v108)
        CFArrayAppendValue(v46, v108);
      if (v109)
        CFRelease(v109);
      if (v107)
        CFRelease(v107);
      if (v108)
        CFRelease(v108);
      if (++v71 >= (uint64_t)v110[0])
        goto LABEL_199;
    }
  }
  v46 = 0;
LABEL_199:
  _copyColorInfoForImageTypeWithIndex(a1, 0, v87, -1, Mutable);
LABEL_63:
  value[0] = 0;
  v109 = 0;
  v110[0] = 0;
  v107 = 0;
  v108 = 0;
  v48 = FigPictureReaderGetFigBaseObject();
  v49 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v49)
  {
    ClliDictionary = v49(v48, *MEMORY[0x1E0CC4B58], a5, value);
    if (!(_DWORD)ClliDictionary)
    {
      Extensions = CMFormatDescriptionGetExtensions((CMFormatDescriptionRef)value[0]);
      if (!Extensions)
      {
LABEL_97:
        v23 = 0;
        goto LABEL_98;
      }
      v52 = Extensions;
      v53 = (const __CFData *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA21A8]);
      if (v53)
      {
        ClliDictionary = CMPhotoCreateClliDictionary(v53, a5, v110);
        if ((_DWORD)ClliDictionary)
          goto LABEL_239;
        CFDictionarySetValue(Mutable, CFSTR("ContentLightLevelInfo"), v110[0]);
      }
      v54 = (const __CFData *)CFDictionaryGetValue(v52, (const void *)*MEMORY[0x1E0CA2220]);
      if (v54)
      {
        ClliDictionary = CMPhotoCreateMdcvDictionary(v54, a5, &v109);
        if ((_DWORD)ClliDictionary)
          goto LABEL_239;
        CFDictionarySetValue(Mutable, CFSTR("MasteringDisplayColorVolume"), v109);
      }
      v55 = cmpweak_kCMFormatDescriptionExtension_ContentColorVolume();
      v56 = (const __CFData *)CFDictionaryGetValue(v52, v55);
      if (!v56)
        goto LABEL_75;
      ClliDictionary = CMPhotoCreateCclvDictionary(v56, a5, &v108);
      if (!(_DWORD)ClliDictionary)
      {
        CFDictionarySetValue(Mutable, CFSTR("ContentColorVolume"), v108);
LABEL_75:
        v57 = (const __CFData *)CFDictionaryGetValue(v52, (const void *)*MEMORY[0x1E0CA2150]);
        if (v57)
        {
          v23 = CMPhotoCreateAmveDictionary(v57, a5, &v107);
          if (!(_DWORD)v23)
            CFDictionarySetValue(Mutable, CFSTR("AmbientViewingEnvironment"), v107);
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
LABEL_239:
    v23 = ClliDictionary;
    goto LABEL_98;
  }
  v23 = 4294954514;
LABEL_98:
  if (value[0])
    CFRelease(value[0]);
  if (v110[0])
    CFRelease(v110[0]);
  if (v109)
    CFRelease(v109);
  if (v108)
    CFRelease(v108);
  if (v107)
    CFRelease(v107);
  if (!(_DWORD)v23)
  {
    if (v102)
      CFDictionarySetValue(Mutable, CFSTR("ExifPayloads"), v102);
    if (v101)
      CFDictionarySetValue(Mutable, CFSTR("XMPPayloads"), v101);
    if (v100)
      CFDictionarySetValue(Mutable, CFSTR("DebugPayloads"), v100);
    if (v99)
      CFDictionarySetValue(Mutable, CFSTR("CustomMetadataPayloads"), v99);
    if (v45)
      CFDictionarySetValue(Mutable, CFSTR("ThumbnailImages"), v45);
    if (v46)
      CFDictionarySetValue(Mutable, CFSTR("AuxiliaryImages"), v46);
    if (v47)
      CFDictionarySetValue(Mutable, CFSTR("AlternateImages"), v47);
    v23 = 0;
    *v85 = Mutable;
    Mutable = 0;
  }
LABEL_202:
  if (v103)
    CFRelease(v103);
  if (v96)
    CFRelease(v96);
  if (v97)
    CFRelease(v97);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v102)
    CFRelease(v102);
  if (v101)
    CFRelease(v101);
  if (v100)
    CFRelease(v100);
  if (v99)
    CFRelease(v99);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  if (v106)
    CFRelease(v106);
  if (v104)
    CFRelease(v104);
  if (v47)
    CFRelease(v47);
  if (v105)
    CFRelease(v105);
  return v23;
}

void _createMetadataDictionaryArrayForReader(uint64_t a1, const __CFAllocator *a2, int a3, __CFArray **a4)
{
  __CFArray *Mutable;
  unsigned int (*v8)(uint64_t, CFIndex *);
  _QWORD *v9;
  CFIndex v10;
  CFIndex v11;
  CFMutableDictionaryRef v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, CFIndex, unsigned int *, uint64_t *, unint64_t **, uint64_t **, _QWORD, _QWORD);
  int v17;
  uint64_t (*v18)(uint64_t, CFIndex, uint64_t *, uint64_t *, void **, void **, _QWORD, void **, CFTypeRef *);
  uint64_t *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  CFIndex v23;
  uint64_t *v24;
  void **p_value;
  uint64_t (*v26)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, _QWORD, _QWORD);
  int v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  const void *v39;
  CFTypeRef *p_cf;
  const void *v42;
  const void *v43;
  CFIndex capacity;
  unsigned int v45;
  CFTypeRef cf;
  void *value;
  uint64_t *v48;
  unint64_t *v49;
  uint64_t v50;

  Mutable = 0;
  capacity = 0;
  switch(a3)
  {
    case 0:
      v8 = *(unsigned int (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v8)
        return;
      goto LABEL_10;
    case 1:
      v8 = *(unsigned int (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (!v8)
        return;
      goto LABEL_10;
    case 2:
      v8 = *(unsigned int (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v8)
        return;
      goto LABEL_10;
    case 4:
      v9 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v9 < 2uLL)
        return;
      v8 = (unsigned int (*)(uint64_t, CFIndex *))v9[13];
      if (!v8)
        return;
LABEL_10:
      if (v8(a1, &capacity))
        return;
      v10 = capacity;
      if (capacity < 1)
      {
        Mutable = 0;
LABEL_73:
        *a4 = Mutable;
      }
      else
      {
        v11 = 0;
        Mutable = 0;
        v43 = (const void *)*MEMORY[0x1E0C9AE50];
        v42 = (const void *)*MEMORY[0x1E0C9AE40];
        while (1)
        {
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(a2, v10, MEMORY[0x1E0C9B378]);
            if (!Mutable)
              return;
          }
          v49 = 0;
          v50 = 0;
          v48 = 0;
          cf = 0;
          value = 0;
          v45 = 0;
          v12 = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v12)
          {
            v13 = 0;
            v14 = 1;
            v15 = 0;
            switch(a3)
            {
              case 0:
                v16 = *(uint64_t (**)(uint64_t, CFIndex, unsigned int *, uint64_t *, unint64_t **, uint64_t **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (!v16)
                  goto LABEL_42;
                v17 = v16(a1, v11, &v45, &v50, &v49, &v48, 0, 0);
                if (v17 == -12783)
                {
                  v18 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t *, uint64_t *, void **, void **, _QWORD, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                  if (!v18)
                    goto LABEL_42;
                  v19 = &v50;
                  v20 = (void **)&v49;
                  v21 = (void **)&v48;
                  v22 = a1;
                  v23 = v11;
                  v24 = 0;
                  p_value = 0;
                  goto LABEL_28;
                }
                v29 = v17;
                v14 = 0;
                if (!v17)
                  goto LABEL_30;
                goto LABEL_43;
              case 1:
                v26 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
                if (!v26)
                  goto LABEL_42;
                goto LABEL_24;
              case 2:
                v26 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
                if (!v26)
                  goto LABEL_42;
LABEL_24:
                v27 = v26(a1, v11, &v50, &v49, &v48, 0, 0);
                goto LABEL_29;
              case 3:
                goto LABEL_47;
              case 4:
                v28 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                if (*v28 < 2uLL
                  || (v18 = (uint64_t (*)(uint64_t, CFIndex, uint64_t *, uint64_t *, void **, void **, _QWORD, void **, CFTypeRef *))v28[14]) == 0)
                {
LABEL_42:
                  v29 = -12782;
LABEL_43:
                  CFRelease(v12);
                  v12 = 0;
                  break;
                }
                p_cf = &cf;
                v24 = &v50;
                v19 = (uint64_t *)&v49;
                v20 = (void **)&v48;
                p_value = &value;
                v22 = a1;
                v23 = v11;
                v21 = 0;
LABEL_28:
                v27 = v18(v22, v23, v24, v19, v20, v21, 0, p_value, p_cf);
LABEL_29:
                v29 = v27;
                if (v27)
                  goto LABEL_43;
LABEL_30:
                v30 = v50;
                if (v50)
                {
                  if (v50 < 1)
                  {
                    v15 = 0;
                    v13 = -1;
                  }
                  else
                  {
                    v15 = 0;
                    v32 = v48;
                    v31 = v49;
                    v13 = -1;
                    do
                    {
                      v34 = *v31++;
                      v33 = v34;
                      v36 = *v32++;
                      v35 = v36;
                      v37 = v36 + v33;
                      if (v15 > v36 + v33)
                        v37 = v15;
                      if (__CFADD__(v35, v33))
                        v15 = -1;
                      else
                        v15 = v37;
                      if (v13 >= v33)
                        v13 = v33;
                      --v30;
                    }
                    while (v30);
                  }
                }
                else
                {
                  v13 = 0;
                  v15 = 0;
                }
LABEL_47:
                v38 = CMPhotoCFDictionarySetInt64(v12, CFSTR("DataOffset"), v13);
                if (v38
                  || (v38 = CMPhotoCFDictionarySetSize(v12, CFSTR("DataLength"), v15 - v13)) != 0
                  || (v50 != 1 ? (v39 = v42) : (v39 = v43),
                      (CFDictionarySetValue(v12, CFSTR("DataIsContiguous"), v39), (v14 & 1) == 0)
                   && (v38 = CMPhotoCFDictionarySetSize(v12, CFSTR("TiffOffset"), v45)) != 0))
                {
                  v29 = v38;
                  goto LABEL_43;
                }
                if (value)
                  CFDictionarySetValue(v12, CFSTR("URI"), value);
                if (cf)
                  CFDictionarySetValue(v12, CFSTR("Name"), cf);
                v29 = 0;
                break;
              default:
                v15 = 0;
                goto LABEL_47;
            }
          }
          else
          {
            v29 = -16991;
          }
          if (value)
            CFRelease(value);
          if (cf)
            CFRelease(cf);
          free(v49);
          free(v48);
          if (v29)
            break;
          CFArrayAppendValue(Mutable, v12);
          if (v12)
            CFRelease(v12);
          ++v11;
          v10 = capacity;
          if (v11 >= capacity)
            goto LABEL_73;
        }
        CFRelease(Mutable);
      }
      return;
    default:
      goto LABEL_73;
  }
}

uint64_t CMPhotoPictureReaderCopyImageBitDepth(const void *a1, CFTypeRef *a2)
{
  CFAllocatorRef v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  uint64_t FourCCPropertyFromReader;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFTypeID v16;
  CFIndex Count;
  uint64_t (*v18)(const void *, CFTypeRef *);
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *ValueAtIndex;
  uint64_t v24;
  CFAllocatorRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD, CFAllocatorRef, CMFormatDescriptionRef *);
  uint64_t v28;
  int v30;
  CMFormatDescriptionRef desc;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef cf;

  desc = 0;
  v32 = 0;
  v30 = 0;
  cf = 0;
  v4 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v7 = v6(FigBaseObject, *MEMORY[0x1E0CC4BC0], v4, &cf);
  if ((_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
    if ((_DWORD)v7 != -12783)
      goto LABEL_64;
  }
  else
  {
    v32 = cf;
    if (cf)
    {
      v8 = 0;
      goto LABEL_54;
    }
  }
  FourCCPropertyFromReader = _getFourCCPropertyFromReader(a1, *MEMORY[0x1E0CC4B80], &v30);
  if ((_DWORD)FourCCPropertyFromReader)
  {
    v7 = FourCCPropertyFromReader;
LABEL_64:
    v8 = 0;
    goto LABEL_56;
  }
  v10 = v30;
  if (v30 != 1735551332 && v30 != 1768912492 && v30 != 1768187246)
  {
    v8 = 0;
    goto LABEL_46;
  }
  v35 = 0;
  cf = 0;
  v33 = 0;
  v34 = 0;
  if (v30 != 1735551332)
  {
    v11 = FigPictureReaderGetFigBaseObject();
    v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v12)
    {
      v13 = v12(v11, *MEMORY[0x1E0CC4B28], *MEMORY[0x1E0C9AE00], &cf);
      if (!(_DWORD)v13)
      {
        Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CC4B40]);
        if (!Value)
          goto LABEL_66;
        v15 = Value;
        v16 = CFGetTypeID(Value);
        if (v16 != CFArrayGetTypeID())
          goto LABEL_66;
        Count = CFArrayGetCount(v15);
        if (v10 == 1768187246)
        {
          if (Count != 1)
            goto LABEL_66;
        }
        else if (Count <= 0)
        {
LABEL_66:
          v13 = FigSignalErrorAt();
          goto LABEL_67;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(v15, 0);
        if (ValueAtIndex)
          v8 = CFRetain(ValueAtIndex);
        else
          v8 = 0;
LABEL_35:
        v7 = 0;
        v35 = 0;
        goto LABEL_36;
      }
      goto LABEL_67;
    }
LABEL_30:
    v8 = 0;
    v7 = 4294954514;
    goto LABEL_36;
  }
  v18 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v18)
    goto LABEL_30;
  v13 = v18(a1, &v34);
  if ((_DWORD)v13)
    goto LABEL_67;
  v19 = v34;
  v20 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v20)
    goto LABEL_30;
  v13 = v20(v19, &v33);
  if ((_DWORD)v13)
    goto LABEL_67;
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v22 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v22)
    goto LABEL_30;
  v13 = v22(CMBaseObject, *MEMORY[0x1E0CC4C00], *MEMORY[0x1E0C9AE00], &v35);
  if (!(_DWORD)v13)
  {
    v8 = v35;
    goto LABEL_35;
  }
LABEL_67:
  v7 = v13;
  v8 = 0;
LABEL_36:
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  if (!(_DWORD)v7)
  {
    v24 = CMPhotoPictureReaderCopyImageBitDepth(v8, &v32);
    if ((_DWORD)v24)
      goto LABEL_65;
LABEL_46:
    if (v32)
    {
      v7 = 0;
LABEL_54:
      if (a2)
      {
        *a2 = v32;
        v32 = 0;
      }
      goto LABEL_56;
    }
    v25 = CFGetAllocator(a1);
    v26 = FigPictureReaderGetFigBaseObject();
    v27 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (v27)
    {
      v24 = v27(v26, *MEMORY[0x1E0CC4B58], v25, &desc);
      if (!(_DWORD)v24)
      {
        if (CMFormatDescriptionGetMediaSubType(desc) == 1785750887)
          v28 = CMPhotoPictureReaderCopyImageBitDepthForJPEG((uint64_t)a1, (CFMutableArrayRef *)&v32);
        else
          v28 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&v32);
        v7 = v28;
        if ((_DWORD)v28)
          goto LABEL_56;
        goto LABEL_54;
      }
LABEL_65:
      v7 = v24;
      goto LABEL_56;
    }
LABEL_6:
    v7 = 4294954514;
  }
LABEL_56:
  if (desc)
    CFRelease(desc);
  if (v32)
    CFRelease(v32);
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t CMPhotoPictureReaderGetImageCodecTypeFromReader(const void *a1, void *a2)
{
  return _getFourCCPropertyFromReader(a1, *MEMORY[0x1E0CC4B20], a2);
}

const __CFString *cmpweak_kCMFormatDescriptionExtension_ContentColorVolume()
{
  if (MEMORY[0x1E0CA2198])
    return (const __CFString *)*MEMORY[0x1E0CA2198];
  else
    return CFSTR("ContentColorVolume");
}

uint64_t _getDataRangeFromReader(uint64_t a1, unint64_t *a2)
{
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, CFTypeRef *);
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, uint64_t *, void **, void **, _QWORD, _QWORD);
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  void *v27;
  void *v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef cf;

  v30 = 0;
  cf = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v4)
    goto LABEL_30;
  v5 = v4(a1, &cf);
  if ((_DWORD)v5)
    goto LABEL_36;
  v6 = cf;
  v7 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v7)
  {
LABEL_30:
    v25 = 4294954514;
    goto LABEL_31;
  }
  v5 = v7(v6, &v30);
  if (!(_DWORD)v5)
  {
    v8 = 0;
    v9 = -1;
    while (1)
    {
      v10 = v28;
      if (v28)
      {
        v28 = 0;
        free(v10);
      }
      v11 = v27;
      if (v27)
      {
        v27 = 0;
        free(v11);
      }
      v12 = v30;
      v13 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
      if (!v13)
        goto LABEL_30;
      v5 = v13(v12, &v29, &v28, &v27, 0, 0);
      if ((_DWORD)v5)
        break;
      v14 = v29;
      if (v29)
      {
        if (v29 >= 1)
        {
          v16 = (uint64_t *)v27;
          v15 = (unint64_t *)v28;
          do
          {
            v18 = *v15++;
            v17 = v18;
            v20 = *v16++;
            v19 = v20;
            v21 = v20 + v17;
            if (v8 > v20 + v17)
              v21 = v8;
            if (__CFADD__(v19, v17))
              v8 = -1;
            else
              v8 = v21;
            if (v9 >= v17)
              v9 = v17;
            --v14;
          }
          while (v14);
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
      v22 = v30;
      v23 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v23)
        goto LABEL_30;
      v24 = v23(v22, 0, 0);
      if ((_DWORD)v24)
      {
        v25 = v24;
        if ((_DWORD)v24 == -17171)
        {
          v25 = 0;
          if (a2)
          {
            *a2 = v9;
            a2[1] = v8 - v9;
          }
        }
        goto LABEL_31;
      }
    }
  }
LABEL_36:
  v25 = v5;
LABEL_31:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  free(v28);
  free(v27);
  return v25;
}

void _copyColorInfoForImageTypeWithIndex(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __CFDictionary *a5)
{
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, uint64_t, CFTypeRef *);
  CFStringRef v15;
  CFStringRef v16;
  __CFDictionary *v17;
  __CFDictionary *Mutable;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef cf;
  CFTypeRef v23;
  CGColorSpace *v24;

  v23 = 0;
  v24 = 0;
  v21 = 0;
  cf = 0;
  v19 = 0;
  v20 = 0;
  if (!a5)
    goto LABEL_19;
  if (a2 == 2)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
    if (!v12)
      goto LABEL_19;
    if (v12(v11, a3, &v19, 0))
      goto LABEL_19;
    v13 = v19;
    v14 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 40);
    if (!v14 || v14(v13, a4, &v20))
      goto LABEL_19;
  }
  else if (a2
         || (v8 = *(_QWORD *)(a1 + 48),
             (v9 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 16)) == 0)
         || v9(v8, a3, &v20, 0))
  {
LABEL_19:
    v17 = 0;
    goto LABEL_20;
  }
  _copyColorInfoForItem((_BYTE *)a1, v20, 0, 0, 0, 0, (CFTypeRef *)&v24, &v23, &cf, &v21, 0, 0, 0);
  if (v24)
  {
    v15 = CGColorSpaceCopyName(v24);
    if (v15)
    {
      v16 = v15;
      CFDictionarySetValue(a5, CFSTR("NamedColorSpace"), v15);
      CFRelease(v16);
    }
    else if (v24)
    {
      CFDictionarySetValue(a5, CFSTR("ColorSpace"), v24);
    }
  }
  if (!v23 && !cf && !v21)
    goto LABEL_19;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = Mutable;
  if (Mutable)
  {
    if (v23)
      CFDictionarySetValue(Mutable, CFSTR("ColorPrimaries"), v23);
    if (cf)
      CFDictionarySetValue(v17, CFSTR("TransferFunction"), cf);
    if (v21)
      CFDictionarySetValue(v17, CFSTR("YCbCrMatrix"), v21);
    CFDictionarySetValue(a5, CFSTR("NclxColor"), v17);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_20:
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
}

uint64_t _copyGroupsDescriptionArray(_BYTE *a1, int a2, _QWORD *a3)
{
  uint64_t MutableCopy;
  void *v7;
  uint64_t v8;
  void *v9;
  __CFArray *v10;
  __CFArray *v11;
  uint64_t appended;
  const __CFString *v13;
  uint64_t v14;

  CFGetAllocator(a1);
  if (!a3)
    return 4294950306;
  if (!a2 || !a1[153])
    return 4294950303;
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v7 = (void *)MutableCopy;
  v8 = FigCFDictionaryCreateMutableCopy();
  if (!v8)
    goto LABEL_21;
  v9 = (void *)v8;
  v10 = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!v10)
  {
    CFRelease(v9);
LABEL_21:
    v14 = 4294950305;
LABEL_14:
    CFRelease(v7);
    return v14;
  }
  v11 = v10;
  appended = CMPhotoCFArrayAppendInt32(v10, 1);
  if ((_DWORD)appended
    || (appended = CMPhotoCFArrayAppendInt32(v11, 0), (_DWORD)appended)
    || (appended = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, CFSTR("GroupType"), 1634497650), (_DWORD)appended)
    || (CFDictionarySetValue((CFMutableDictionaryRef)v9, CFSTR("GroupPictureIndexList"), v11),
        appended = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, (const void *)*MEMORY[0x1E0CC4AF0], 2),
        (_DWORD)appended))
  {
    v14 = appended;
  }
  else
  {
    v13 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
    v14 = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, v13, 1);
    if (!(_DWORD)v14)
    {
      CFArrayAppendValue((CFMutableArrayRef)v7, v9);
      *a3 = v7;
      v7 = 0;
    }
  }
  CFRelease(v11);
  CFRelease(v9);
  if (v7)
    goto LABEL_14;
  return v14;
}

uint64_t _copyGroupsDescriptionArray_0(_QWORD *a1, int a2, __CFArray **a3)
{
  CFAllocatorRef v5;
  const __CFAllocator *v6;
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, _QWORD, const __CFAllocator *, const __CFArray **);
  CFIndex Count;
  CFIndex v10;
  CFMutableArrayRef Mutable;
  void *Value;
  __CFArray *v13;
  __CFDictionary *v14;
  uint64_t v15;
  CFIndex v16;
  __CFArray *v17;
  const void *v18;
  const __CFDictionary *ValueAtIndex;
  __CFArray *v20;
  __CFArray *v21;
  int v22;
  int v23;
  BOOL v24;
  __CFDictionary *v25;
  uint64_t v26;
  const __CFArray *MutableCopy;
  const void *v28;
  CFIndex v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFTypeID v32;
  const __CFNumber *Size;
  CFTypeID v34;
  const void *v35;
  uint64_t v36;
  const __CFString *v37;
  const void *v38;
  const __CFString *v39;
  const void *v40;
  uint64_t v41;
  __CFDictionary *v42;
  uint64_t v43;
  const void *v44;
  __CFArray **v46;
  void *v47;
  void *v48;
  const void *v49;
  _BOOL4 HasAlternates;
  const __CFAllocator *allocator;
  __CFArray *theArray;
  CFIndex v53;
  void *key;
  uint64_t v56;
  const __CFNumber *v57;
  const __CFArray *v58;

  v5 = CFGetAllocator(a1);
  v58 = 0;
  if (!a3)
    return 4294950306;
  v6 = v5;
  CMBaseObject = FigPictureCollectionGetCMBaseObject();
  v8 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v8 || v8(CMBaseObject, *MEMORY[0x1E0CC49E8], v6, &v58))
    goto LABEL_9;
  if (!v58)
    return 4294950303;
  Count = CFArrayGetCount(v58);
  if (!Count)
  {
LABEL_9:
    Value = 0;
    v13 = 0;
    v14 = 0;
    v15 = 4294950303;
    goto LABEL_73;
  }
  v10 = Count;
  Mutable = CFArrayCreateMutable(v6, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    Value = 0;
    v13 = 0;
    v14 = 0;
    v15 = 4294950305;
    goto LABEL_73;
  }
  allocator = v6;
  theArray = Mutable;
  v46 = a3;
  if (a2)
    HasAlternates = 0;
  else
    HasAlternates = CMPhotoDecompressionContainerHasAlternates((uint64_t)a1);
  v16 = 0;
  v17 = 0;
  Value = 0;
  v14 = 0;
  key = (void *)*MEMORY[0x1E0CC4B08];
  v18 = (const void *)*MEMORY[0x1E0CC4B00];
  v47 = (void *)*MEMORY[0x1E0CC4AF0];
  v48 = (void *)*MEMORY[0x1E0CC4AE8];
  v49 = (const void *)*MEMORY[0x1E0CC60C0];
  v53 = v10;
  do
  {
    if (Value)
      CFRelease(Value);
    if (v14)
      CFRelease(v14);
    if (v17)
      CFRelease(v17);
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v58, v16);
    Value = (void *)CFDictionaryGetValue(ValueAtIndex, key);
    if (!Value)
      goto LABEL_84;
    v20 = (__CFArray *)CFDictionaryGetValue(ValueAtIndex, v18);
    if (!v20)
    {
      Value = 0;
LABEL_84:
      v14 = 0;
      v15 = 4294950304;
      goto LABEL_87;
    }
    v21 = v20;
    v22 = FigCFEqual();
    if (v22)
    {
      v23 = 1937007986;
    }
    else
    {
      if (!FigCFEqual())
      {
        v17 = 0;
        Value = 0;
        v14 = 0;
        goto LABEL_61;
      }
      v23 = 1634497650;
    }
    v17 = 0;
    Value = 0;
    v14 = 0;
    if (v22)
      v24 = a2 == 0;
    else
      v24 = 1;
    if (v24 && v22 | a2)
    {
      v25 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Value = v25;
      if (!v25)
        goto LABEL_85;
      v26 = CMPhotoCFDictionarySetInt32(v25, CFSTR("GroupType"), v23);
      if ((_DWORD)v26)
      {
        v15 = v26;
        v14 = 0;
LABEL_87:
        v13 = theArray;
        goto LABEL_73;
      }
      if (HasAlternates)
      {
        MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        v28 = v49;
        if (!MutableCopy)
        {
LABEL_85:
          v14 = 0;
          v15 = 4294950305;
          goto LABEL_87;
        }
        v21 = MutableCopy;
        if (CFArrayGetCount(MutableCopy) >= 1)
        {
          v29 = 0;
          while (1)
          {
            v57 = 0;
            v30 = (const __CFNumber *)FigCFArrayGetValueAtIndex();
            if (!v30)
            {
LABEL_66:
              v14 = 0;
              v15 = 4294950194;
              goto LABEL_71;
            }
            v31 = v30;
            v32 = CFGetTypeID(v30);
            if (v32 == CFNumberGetTypeID())
            {
              Size = CMPhotoCFNumberGetSize(v31);
              v57 = Size;
            }
            else
            {
              v34 = CFGetTypeID(v31);
              if (v34 != CFDictionaryGetTypeID())
                goto LABEL_66;
              v35 = CFDictionaryGetValue(v31, v18);
              if (!CMPhotoCFArrayGetSizeAtIndex(v35, 0, &v57))
              {
                v14 = 0;
                v15 = 4294950304;
                goto LABEL_71;
              }
              Size = v57;
            }
            v56 = -1;
            v36 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, (uint64_t)Size, &v56, 0, 0);
            if ((_DWORD)v36)
              break;
            v36 = CMPhotoCFArraySetCFIndexAtIndex(v21, v56, v29);
            if ((_DWORD)v36)
              break;
            if (++v29 >= CFArrayGetCount(v21))
              goto LABEL_46;
          }
          v15 = v36;
          v14 = 0;
LABEL_71:
          v13 = theArray;
          goto LABEL_72;
        }
LABEL_46:
        v17 = v21;
      }
      else
      {
        v17 = 0;
        v28 = v49;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)Value, CFSTR("GroupPictureIndexList"), v21);
      if (a2)
      {
        v37 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
        v38 = CFDictionaryGetValue(ValueAtIndex, v37);
        if (v38 || (v38 = CFDictionaryGetValue(ValueAtIndex, v47)) != 0)
        {
          v39 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
          CFDictionarySetValue((CFMutableDictionaryRef)Value, v39, v38);
        }
        goto LABEL_52;
      }
      v40 = CFDictionaryGetValue(ValueAtIndex, v48);
      if (v40)
      {
        CFGetAllocator(v40);
        v41 = FigCFDictionaryCreateMutableCopy();
        if (v41)
        {
          v42 = (__CFDictionary *)v41;
          v43 = FigCFDictionaryGetValue();
          if (v43)
          {
            v44 = (const void *)v43;
            CFDictionaryRemoveValue(v42, v28);
            CFDictionarySetValue(v42, CFSTR("DisparityAdjustment"), v44);
          }
          if (FigCFDictionaryGetCount() >= 1)
          {
LABEL_59:
            FigCFDictionaryAddEntriesToDictionaryWithRecursion();
            v14 = v42;
            goto LABEL_60;
          }
          CFRelease(v42);
        }
LABEL_52:
        v14 = 0;
LABEL_60:
        CFArrayAppendValue(theArray, Value);
        goto LABEL_61;
      }
      v42 = 0;
      v14 = 0;
      if (FigCFDictionaryGetCount() < 1)
        goto LABEL_60;
      goto LABEL_59;
    }
LABEL_61:
    ++v16;
  }
  while (v16 != v53);
  v13 = theArray;
  if (CFArrayGetCount(theArray) >= 1)
  {
    v15 = 0;
    *v46 = theArray;
    v21 = v17;
    v13 = 0;
    if (!v17)
      goto LABEL_73;
    goto LABEL_72;
  }
  v15 = 4294950303;
  v21 = v17;
  if (v17)
LABEL_72:
    CFRelease(v21);
LABEL_73:
  if (v58)
    CFRelease(v58);
  if (v13)
    CFRelease(v13);
  if (Value)
    CFRelease(Value);
  if (v14)
    CFRelease(v14);
  return v15;
}

uint64_t _getVideoAndAudioCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, int *, _QWORD);
  _QWORD *v12;
  int v13;
  uint64_t v14;

  if (!(a2 | a3))
    return 0;
  if (!*(_BYTE *)(a1 + 136))
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 136) = 1;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v7)
        return 4294954514;
      v14 = 0;
      result = v7(v6, &v14);
      if ((_DWORD)result)
        return result;
      if (v14 >= 1)
      {
        v9 = 0;
        while (1)
        {
          v13 = 0;
          v10 = *(_QWORD *)(a1 + 56);
          v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 48);
          if (!v11)
            return 4294954514;
          result = v11(v10, v9, 0, &v13, 0);
          if ((_DWORD)result)
            return result;
          v12 = (_QWORD *)(a1 + 144);
          if (v13 == 1986618469)
            goto LABEL_13;
          if (v13 == 1936684398)
            break;
LABEL_14:
          if (++v9 >= v14)
            goto LABEL_15;
        }
        v12 = (_QWORD *)(a1 + 152);
LABEL_13:
        ++*v12;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  if (a2)
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 144);
  result = 0;
  if (a3)
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 152);
  return result;
}

BOOL cmpweak_exists_kCMFormatDescriptionExtension_ContentColorVolume()
{
  return MEMORY[0x1E0CA2198] != 0;
}

uint64_t _parseICCProfileIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFDataRef v6;
  CFIndex v7;
  CFTypeRef cf;
  CFTypeRef v9;

  cf = 0;
  v9 = 0;
  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
  {
    v4 = v2;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 416))
    goto LABEL_5;
  *(_BYTE *)(a1 + 416) = 1;
  v3 = CMPhotoCopyICCProfileFromJFIFByteStream(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), 0, (_BYTE *)(a1 + 417), 0, &v9);
  if ((_DWORD)v3)
    goto LABEL_20;
  *(_QWORD *)(a1 + 424) = v9;
  v9 = 0;
  if (*(_BYTE *)(a1 + 417))
  {
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 240))
  {
    v3 = _parseExifIfNeeded(a1, 1);
    if ((_DWORD)v3)
      goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 268))
    goto LABEL_5;
  v7 = 0;
  v3 = CMPhotoByteStreamReadAndCreateData(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 248), (CFDataRef *)&cf, &v7);
  if ((_DWORD)v3)
  {
LABEL_20:
    v4 = v3;
  }
  else
  {
    if (v7 == *(_QWORD *)(a1 + 256))
    {
      if (!CGImageCreateColorSpaceFromExifOrData())
      {
        v6 = CGColorSpaceCopyICCData(0);
        *(_QWORD *)(a1 + 424) = v6;
        *(_BYTE *)(a1 + 417) = v6 != 0;
      }
      goto LABEL_5;
    }
    v4 = 4294950194;
  }
LABEL_6:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  if (cf)
    CFRelease(cf);
LABEL_8:
  if (v9)
    CFRelease(v9);
  return v4;
}

uint64_t _parseExifIfNeeded(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ExifLocationFromJFIFByteStream;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *);
  _DWORD *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  OpaqueCMBlockBuffer *v25;

  v25 = 0;
  if (!a2)
  {
    v4 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
    if ((_DWORD)v4)
    {
      v5 = v4;
      goto LABEL_7;
    }
  }
  if (*(_BYTE *)(a1 + 240))
    goto LABEL_4;
  *(_BYTE *)(a1 + 240) = 1;
  v24 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  *(_DWORD *)(a1 + 264) = 1;
  ExifLocationFromJFIFByteStream = CMPhotoGetExifLocationFromJFIFByteStream(*(_QWORD *)(a1 + 24), 0, &v24, &v23, &v22, &v21);
  if ((_DWORD)ExifLocationFromJFIFByteStream)
    goto LABEL_25;
  v8 = v24;
  *(_BYTE *)(a1 + 241) = v24;
  if (!v8)
  {
LABEL_4:
    v5 = 0;
    goto LABEL_5;
  }
  v20 = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  v9 = v23;
  v10 = v21;
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 256) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
  if (!v12)
  {
    v5 = 4294954514;
    goto LABEL_5;
  }
  ExifLocationFromJFIFByteStream = v12(v11, v10, v9, &v25, &v20);
  if ((_DWORD)ExifLocationFromJFIFByteStream)
    goto LABEL_25;
  if (v20 == v21)
  {
    if (v22 - v23 >= 0)
    {
      v13 = (_DWORD *)(a1 + 264);
      ExifLocationFromJFIFByteStream = CMPhotoParseExifFromTIFF(v25, v22 - v23, v20 - (v22 - v23), 0, (int *)(a1 + 264), &v19, (unint64_t)&v18, (unint64_t)&v17, (char *)(a1 + 268));
      if (!(_DWORD)ExifLocationFromJFIFByteStream)
      {
        if ((*v13 - 9) <= 0xFFFFFFF7)
          *v13 = 1;
        v14 = v19;
        v15 = v17;
        if (v19 && !v17
          || (*(_BYTE *)(a1 + 272) = v19, v14)
          && (v16 = v18,
              *(_QWORD *)(a1 + 304) = v18,
              *(_QWORD *)(a1 + 312) = v15,
              CMPhotoGetImageInformationFromJFIFByteStream(*(_QWORD *)(a1 + 24), v23 + v16, (_QWORD *)(a1 + 280), (int *)(a1 + 296), 0, 0, (_DWORD *)(a1 + 320), 0)))
        {
          *(_BYTE *)(a1 + 272) = 0;
        }
        goto LABEL_4;
      }
LABEL_25:
      v5 = ExifLocationFromJFIFByteStream;
      goto LABEL_5;
    }
    v5 = 4294950190;
  }
  else
  {
    v5 = 4294950194;
  }
LABEL_5:
  if (!a2)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
LABEL_7:
  if (v25)
    CFRelease(v25);
  return v5;
}

uint64_t CMPhotoCopyICCProfileFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _OWORD *a5, _QWORD *a6)
{
  return _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 226, (uint64_t)"ICC_PROFILE", 0xCuLL, 1, a4, a5, a6);
}

uint64_t _copyChunkedHeadersFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, _BYTE *a8, _OWORD *a9, _QWORD *a10)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v12;
  uint64_t *v13;
  const void *v14;
  _QWORD v16[14];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;

  v37 = a4;
  v35 = a6;
  v36 = a5;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2800000000;
  v33 = 0;
  v34 = 0;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2000000000;
  v25[3] = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2000000000;
  v24 = 0;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2000000000;
  v22 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  if (!a9 && !a8 && !a10 || (unint64_t)(a7 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    MarkersWithSignaturesInJFIFByteStreamWithHandler = FigSignalErrorAt();
    goto LABEL_16;
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___copyChunkedHeadersFromJFIFByteStream_block_invoke;
  v16[3] = &unk_1E53F6B78;
  v16[10] = a6;
  v16[11] = a7;
  v16[4] = v23;
  v16[5] = v21;
  v16[6] = &v30;
  v16[7] = &v26;
  v16[12] = a2;
  v16[13] = a1;
  v16[8] = v25;
  v16[9] = &v17;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a2, a3, 1, (uint64_t)&v37, &v36, &v35, (uint64_t)v16);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
LABEL_16:
    v12 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_12;
  }
  if (a8)
    *a8 = *((_BYTE *)v18 + 24);
  if (a9)
    *a9 = *(_OWORD *)(v31 + 3);
  v12 = 0;
  if (a10)
  {
    v13 = v27;
    *a10 = v27[3];
    v13[3] = 0;
  }
LABEL_12:
  v14 = (const void *)v27[3];
  if (v14)
    CFRelease(v14);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v12;
}

uint64_t CMPhotoGetExifLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  const char *v24;

  v23 = 6;
  v24 = "Exif";
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2800000000;
  v17 = 0;
  v18 = 0;
  v13 = -31;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __CMPhotoGetExifLocationFromJFIFByteStream_block_invoke;
  v12[3] = &unk_1E53F6AD8;
  v12[4] = &v14;
  v12[5] = &v19;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, &v24, &v23, (uint64_t)v12);
  if (a3)
    *a3 = *((_BYTE *)v20 + 24);
  if (a4)
    *a4 = v15[3];
  if (a5)
    *a5 = v23 + v15[3];
  if (a6)
    *a6 = v15[4];
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t CMPhotoParseExifFromTIFF(OpaqueCMBlockBuffer *a1, size_t a2, unint64_t a3, BOOL *a4, int *a5, BOOL *a6, unint64_t a7, unint64_t a8, char *a9)
{
  _QWORD *v9;
  int v11;
  _BOOL4 v12;
  size_t DataLength;
  BOOL v16;
  size_t v17;
  uint64_t DataPointer;
  char *v19;
  char *v20;
  char *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned __int16 v37;
  int v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  unsigned int v47;
  int v49;
  BOOL v50;
  uint64_t v51;
  _BOOL4 v52;
  unint64_t v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  BOOL v58;
  _QWORD *v59;
  char *v64;
  size_t lengthAtOffsetOut;
  char *dataPointerOut[2];
  __int128 v67;
  uint64_t v68;

  v9 = (_QWORD *)a8;
  v68 = *MEMORY[0x1E0C80C00];
  v11 = ((unint64_t)a4 | (unint64_t)a5) != 0;
  v12 = ((unint64_t)a6 | a7 | a8) != 0;
  if (a1)
  {
    lengthAtOffsetOut = 0;
    dataPointerOut[0] = 0;
    DataLength = a3 + a2;
    if (a3 + a2 >= CMBlockBufferGetDataLength(a1))
      DataLength = CMBlockBufferGetDataLength(a1);
    if (!DataLength)
    {
      v31 = 4294950194;
      goto LABEL_89;
    }
    v16 = DataLength >= a2;
    v17 = DataLength - a2;
    if (v16)
    {
      v59 = v9;
      if (v17)
      {
        DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, dataPointerOut);
        if ((_DWORD)DataPointer)
        {
          v31 = DataPointer;
          goto LABEL_89;
        }
        if (lengthAtOffsetOut != v17)
        {
          v21 = (char *)malloc_type_malloc(v17, 0x7CDB58DBuLL);
          if (!v21)
          {
            v31 = 4294950305;
            goto LABEL_89;
          }
          v20 = v21;
          dataPointerOut[0] = v21;
          v22 = v17;
          v23 = a2;
          while (1)
          {
            v64 = 0;
            v24 = CMBlockBufferGetDataPointer(a1, v23, &lengthAtOffsetOut, 0, &v64);
            if ((_DWORD)v24)
              break;
            if (v22 >= lengthAtOffsetOut)
              v25 = lengthAtOffsetOut;
            else
              v25 = v22;
            lengthAtOffsetOut = v25;
            memcpy(dataPointerOut[0], v64, v25);
            dataPointerOut[0] += lengthAtOffsetOut;
            v23 += lengthAtOffsetOut;
            v22 -= lengthAtOffsetOut;
            if (!v22)
            {
              v19 = v20;
              goto LABEL_20;
            }
          }
          v31 = v24;
          free(v20);
          v20 = 0;
          goto LABEL_48;
        }
        v19 = dataPointerOut[0];
      }
      else
      {
        v19 = 0;
      }
      v20 = 0;
LABEL_20:
      if (v17 != a3)
      {
        v42 = 0;
        v30 = 0;
        v43 = 0;
        v39 = 0;
        v44 = 0;
        v35 = 1;
        v31 = 4294950194;
        goto LABEL_49;
      }
      if (a3 >= 8)
      {
        v26 = *v19;
        if (v26 == 73)
        {
          if (v19[1] == 73)
          {
            v29 = 0;
            v28 = *((unsigned __int16 *)v19 + 1);
            v27 = 1;
LABEL_28:
            if (v28 == 42)
            {
              v30 = 0;
              v31 = 0;
              v32 = *((_DWORD *)v19 + 1);
              v33 = bswap32(v32);
              if (v27)
                v34 = v32;
              else
                v34 = v33;
              v35 = 1;
              if (v34 < 8 || (v34 & 1) != 0)
              {
                v42 = 0;
                v43 = 0;
                v39 = 0;
LABEL_96:
                v44 = 0;
                goto LABEL_49;
              }
              if (v34 + 2 > a3)
              {
                v31 = 0;
                v42 = 0;
                v30 = 0;
                v43 = 0;
                v39 = 0;
              }
              else
              {
                v36 = bswap32(*(unsigned __int16 *)&v19[v34]) >> 16;
                if (v27)
                  v37 = *(_WORD *)&v19[v34];
                else
                  v37 = v36;
                if (((a9 == 0) & ~v11) != 0)
                {
                  v39 = 0;
                  v40 = 0;
                  v41 = 0;
                  v38 = v29;
                  if (!v12)
                  {
LABEL_46:
                    v42 = 0;
                    v30 = 0;
                    v43 = 0;
                    goto LABEL_79;
                  }
                }
                else
                {
                  *(_OWORD *)dataPointerOut = xmmword_1A8294D40;
                  v67 = unk_1A8294D50;
                  v38 = v29;
                  _readExifDirectory((unint64_t)&v19[v34], a3 - v34, v29, (uint64_t)dataPointerOut, 2, 0);
                  v39 = BYTE4(dataPointerOut[1]) != 0;
                  if (BYTE4(dataPointerOut[1]))
                    v35 = LOWORD(dataPointerOut[1]);
                  else
                    v35 = 1;
                  v40 = BYTE12(v67) != 0;
                  if (BYTE12(v67))
                    v41 = DWORD2(v67);
                  else
                    v41 = 0;
                  if (!v12)
                    goto LABEL_46;
                }
                *(_OWORD *)dataPointerOut = xmmword_1A8294D60;
                v67 = unk_1A8294D70;
                if (v34 + 12 * (unint64_t)v37 + 6 <= a3)
                {
                  LODWORD(v46) = *(_DWORD *)&v19[12 * v37 + 2 + v34];
                  v47 = bswap32(v46);
                  v46 = v27 ? v46 : v47;
                  if (v46 >= 8 && (v46 & 1) == 0)
                  {
                    LODWORD(lengthAtOffsetOut) = 0;
                    v49 = v35;
                    v50 = v39;
                    v51 = v41;
                    v52 = v40;
                    _readExifDirectory((unint64_t)&v19[v46], a3 - v46, v38, (uint64_t)dataPointerOut, 2, (int *)&lengthAtOffsetOut);
                    v40 = v52;
                    v41 = v51;
                    v39 = v50;
                    v35 = v49;
                    v30 = LODWORD(dataPointerOut[1]);
                    v43 = DWORD2(v67);
                    v42 = (_DWORD)lengthAtOffsetOut == 2
                       && DWORD2(v67) + (unint64_t)LODWORD(dataPointerOut[1]) <= a3;
LABEL_79:
                    v31 = 0;
                    if (a9 && v40)
                    {
                      *(_OWORD *)dataPointerOut = xmmword_1A8294DD0;
                      v54 = (unint64_t)&v19[v41];
                      v55 = a3 - v41;
                      v56 = v35;
                      v57 = v39;
                      _readExifDirectory(v54, v55, v38, (uint64_t)dataPointerOut, 1, 0);
                      v39 = v57;
                      v35 = v56;
                      v31 = 0;
                      if (BYTE4(dataPointerOut[1]))
                        v58 = LOWORD(dataPointerOut[1]) == 1;
                      else
                        v58 = 1;
                      v44 = !v58;
                      goto LABEL_49;
                    }
                    goto LABEL_96;
                  }
                }
                v31 = 0;
                v42 = 0;
                v30 = 0;
                v43 = 0;
              }
              v44 = 0;
              goto LABEL_49;
            }
          }
        }
        else if (v26 == 77 && v19[1] == 77)
        {
          v27 = 0;
          v28 = bswap32(*((unsigned __int16 *)v19 + 1)) >> 16;
          v29 = 1;
          goto LABEL_28;
        }
      }
      v31 = 0;
LABEL_48:
      v42 = 0;
      v30 = 0;
      v43 = 0;
      v39 = 0;
      v44 = 0;
      v35 = 1;
LABEL_49:
      v9 = v59;
      goto LABEL_50;
    }
  }
  v31 = 4294950306;
LABEL_89:
  v20 = 0;
  v42 = 0;
  v30 = 0;
  v43 = 0;
  v39 = 0;
  v44 = 0;
  v35 = 1;
LABEL_50:
  if (a4)
    *a4 = v39;
  if (a5)
    *a5 = v35;
  if (a6)
    *a6 = v42;
  if (a7)
    *(_QWORD *)a7 = v30 + a2;
  if (v9)
    *v9 = v43;
  if (a9)
    *a9 = v44;
  free(v20);
  return v31;
}

unint64_t _readExifDirectory(unint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  if (a2 >= 2)
  {
    v6 = *(unsigned __int16 *)result;
    v7 = bswap32(v6) >> 16;
    if (a3)
      LOWORD(v6) = v7;
    if (12 * (unint64_t)(unsigned __int16)v6 <= a2 - 2)
    {
      if ((_WORD)v6)
        v8 = a5 < 1;
      else
        v8 = 1;
      if (v8)
      {
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = (unsigned __int16 *)(result + 2);
        do
        {
          v12 = bswap32(*v11) >> 16;
          if (!a3)
            LOWORD(v12) = *v11;
          v13 = bswap32(v11[1]) >> 16;
          if (!a3)
            LOWORD(v13) = v11[1];
          v14 = *((_DWORD *)v11 + 1);
          LODWORD(result) = bswap32(v14);
          if (a3)
            result = result;
          else
            result = v14;
          v15 = a5;
          v16 = a4 + 8;
          while (*(unsigned __int16 *)(v16 - 8) != (unsigned __int16)v12
               || *(unsigned __int16 *)(v16 - 6) != (unsigned __int16)v13
               || (_DWORD)result != *(_DWORD *)(v16 - 4)
               || *(_BYTE *)(v16 + 4))
          {
            v16 += 16;
            if (!--v15)
              goto LABEL_27;
          }
          if ((unsigned __int16)v13 == 3)
          {
            v17 = v11[4];
            v18 = bswap32(v17) >> 16;
            if (a3)
              LOWORD(v17) = v18;
            *(_WORD *)v16 = v17;
          }
          else
          {
            v19 = *((_DWORD *)v11 + 2);
            v20 = bswap32(v19);
            if (a3)
              v19 = v20;
            *(_DWORD *)v16 = v19;
          }
          *(_BYTE *)(v16 + 4) = 1;
          ++v10;
LABEL_27:
          if (++v9 >= (unsigned __int16)v6)
            break;
          v11 += 6;
        }
        while (v10 < a5);
      }
      if (a6)
        *a6 = v10;
    }
  }
  return result;
}

uint64_t _convertAndScalePixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, int a3, int a4, OSType a5, uint64_t a6, int a7, int a8, double PixelBufferCLAPAsRect, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20,uint64_t a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned int a25,const void **a26)
{
  double v25;
  double v26;
  BOOL v27;
  __CVBuffer *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  CFDictionaryRef DictionaryRepresentation;
  double v48;
  double v49;
  double v50;
  uint64_t PixelBufferCLAPDictionaryFromRect;
  uint64_t PixelFormatType;
  BOOL v53;
  char v54;
  __CVBuffer *v55;
  const __CFString *v56;
  CFTypeRef v57;
  int IsAGXCompressed;
  int IsFullRange;
  _BOOL4 v63;
  const void *ValueAtIndex;
  OpaqueVTPixelTransferSession *v65;
  IOSurfaceRef IOSurface;
  double v67;
  BOOL v69;
  BOOL v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  uint64_t v74;
  OpaqueVTPixelTransferSession *v75;
  const void *v76;
  int v77;
  const void *v78;
  double PixelBufferSize;
  double v80;
  double v81;
  const __CFAllocator *v82;
  char v83;
  size_t v84;
  size_t v85;
  size_t v86;
  size_t v87;
  unint64_t v88;
  uint64_t CVPixelBufferNotBackedByIOSurface;
  uint64_t v90;
  const void *v91;
  const void *v92;
  uint64_t v93;
  const void *v94;
  int v95;
  const void *v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const __CFString *v101;
  CFTypeRef v102;
  const void *v103;
  const __CFString *v104;
  CFTypeRef v105;
  const void *v106;
  const __CFArray *v107;
  const void *v108;
  uint64_t v109;
  OpaqueVTPixelTransferSession *v110;
  OpaqueVTPixelTransferSession *v111;
  uint64_t v112;
  const void *v113;
  const void *v114;
  const void *v115;
  const void *v116;
  BOOL v117;
  const void *v118;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  size_t v123;
  unint64_t v124;
  size_t v125;
  size_t v126;
  uint64_t v127;
  __CVBuffer *v128;
  __CFArray *v129;
  char v131;
  size_t v132;
  size_t v133;
  char v134;
  CFTypeRef value;
  int valuea;
  int valueb;
  double v138;
  double v139;
  int v140;
  int v141[3];
  int v142;
  int v143;
  const void *v144;
  const __CFDictionary *v148;
  size_t v149;
  CVBufferRef destinationBuffer;
  int v151;
  int v152;
  CFTypeRef propertyValue;
  CFTypeRef cf;
  CVBufferRef buffer;
  CFTypeRef v156;
  VTPixelTransferSessionRef pixelTransferSessionOut[6];
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;

  pixelTransferSessionOut[4] = *(VTPixelTransferSessionRef *)MEMORY[0x1E0C80C00];
  v144 = *a26;
  buffer = 0;
  v156 = v144;
  propertyValue = 0;
  cf = 0;
  v151 = -1;
  v152 = 0;
  if (!pixelBuffer
    || ((v25 = *MEMORY[0x1E0C9D820], v26 = *(double *)(MEMORY[0x1E0C9D820] + 8), a13 == *MEMORY[0x1E0C9D820])
      ? (v27 = a14 == v26)
      : (v27 = 0),
        v27))
  {
    v75 = 0;
    v65 = 0;
    DictionaryRepresentation = 0;
    v76 = 0;
    v39 = 4294950306;
    goto LABEL_67;
  }
  v37 = pixelBuffer;
  v38 = CMPhotoPixelBufferConvertYCbCrIdentityMatrixToRGB(*(const void **)(a1 + 16), a3, pixelBuffer, (CVPixelBufferRef *)&cf);
  if ((_DWORD)v38)
  {
    v39 = v38;
    if ((_DWORD)v38 != -16997)
    {
      v75 = 0;
      v65 = 0;
      DictionaryRepresentation = 0;
      goto LABEL_66;
    }
  }
  else
  {
    v37 = (__CVBuffer *)cf;
  }
  v138 = v26;
  v139 = v25;
  v40 = a19;
  v41 = a20;
  v42 = a17;
  v43 = a18;
  v158.origin.x = PixelBufferCLAPAsRect;
  v158.origin.y = a10;
  v158.size.width = a11;
  v158.size.height = a12;
  v143 = a8;
  if (CGRectIsNull(v158))
  {
    PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v37);
    a10 = v44;
    a11 = v45;
    a12 = v46;
  }
  v159.origin.x = PixelBufferCLAPAsRect;
  v159.origin.y = a10;
  v159.size.width = a11;
  v159.size.height = a12;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v159);
  if (v156)
  {
    v160.origin.x = a17;
    v160.origin.y = a18;
    v160.size.width = a19;
    v160.size.height = a20;
    if (CGRectIsNull(v160))
    {
      v42 = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v156);
      v43 = v48;
      v40 = v49;
      v41 = v50;
    }
  }
  PixelBufferCLAPDictionaryFromRect = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v152, &v151);
  if ((_DWORD)PixelBufferCLAPDictionaryFromRect)
  {
LABEL_65:
    v39 = PixelBufferCLAPDictionaryFromRect;
    v75 = 0;
    v65 = 0;
LABEL_66:
    v76 = 0;
LABEL_67:
    v77 = 1;
    v142 = 1;
LABEL_68:
    v78 = v144;
    goto LABEL_187;
  }
  *(_QWORD *)v141 = a6;
  v148 = DictionaryRepresentation;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v37);
  if (v152)
    v53 = 0;
  else
    v53 = v151 == -1;
  v54 = v53;
  if (!v53)
  {
    IOSurface = CVPixelBufferGetIOSurface(v37);
    if (!a7 && a11 <= 4092.0 && a12 <= 4092.0)
    {
      v67 = a14 / a12;
      if (a13 / a11 >= 0.25 && v67 >= 0.25)
      {
        if (!a23 && a3 && IOSurface
          || (a13 / a11 == 1.0 ? (v69 = v67 == 1.0) : (v69 = 0),
              v69 ? (v70 = (_DWORD)PixelFormatType == a5) : (v70 = 0),
              v70))
        {
          v76 = 0;
          v65 = 0;
          v63 = 1;
          v140 = 1;
          goto LABEL_128;
        }
      }
    }
    v71 = vcvtad_u64_f64(a13);
    v72 = vcvtad_u64_f64(a14);
    v73 = 2 * (v143 == 0);
    if (a3)
    {
      v74 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v71, v72, v143, v73, v73, v143 == 0, a21, 0, &buffer);
      if ((_DWORD)v74)
      {
LABEL_61:
        v39 = v74;
        v75 = 0;
        v65 = 0;
        v76 = 0;
        v77 = 1;
        v142 = 1;
LABEL_62:
        v78 = v144;
        DictionaryRepresentation = v148;
        goto LABEL_187;
      }
    }
    else
    {
      valuea = a7;
      v83 = v54;
      v84 = v71;
      v85 = v72;
      if (!v143)
      {
        v84 = CMPhotoAlignValue(v71, 2uLL);
        v85 = CMPhotoAlignValue(v72, 2uLL);
      }
      v74 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a5, v84, v85, v73, v73, a21, 0, &buffer);
      if ((_DWORD)v74)
        goto LABEL_61;
      v27 = v84 == v71;
      v54 = v83;
      a7 = valuea;
      if (!v27 || v85 != v72)
        CMPhotoSetPixelBufferCLAP(buffer, 0, 0, v71, v72, 0, 1);
    }
  }
  destinationBuffer = 0;
  v55 = buffer;
  if (buffer)
  {
    v134 = v54;
LABEL_25:
    destinationBuffer = v55;
    v56 = (const __CFString *)*MEMORY[0x1E0CA8D50];
    propertyValue = CVBufferCopyAttachment(v55, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
    DictionaryRepresentation = v148;
    goto LABEL_26;
  }
  if (!v156)
  {
    v86 = vcvtad_u64_f64(a13);
    v87 = vcvtad_u64_f64(a14);
    v88 = 2 * (v143 == 0);
    if (a3)
    {
      CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v86, v87, v143, v88, v88, v143 == 0, a21, 0, (CVPixelBufferRef *)&v156);
      if ((_DWORD)CVPixelBufferNotBackedByIOSurface)
      {
LABEL_236:
        v39 = CVPixelBufferNotBackedByIOSurface;
        v65 = 0;
        v76 = 0;
        v142 = 1;
        v78 = v144;
        DictionaryRepresentation = v148;
        goto LABEL_221;
      }
    }
    else
    {
      valueb = a7;
      v131 = v54;
      v132 = v86;
      v133 = v87;
      if (!v143)
      {
        v132 = CMPhotoAlignValue(v86, 2uLL);
        v133 = CMPhotoAlignValue(v87, 2uLL);
      }
      CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a5, v132, v133, v88, v88, a21, 0, (CVPixelBufferRef *)&v156);
      if ((_DWORD)CVPixelBufferNotBackedByIOSurface)
        goto LABEL_236;
      v27 = v132 == v86;
      v54 = v131;
      a7 = valueb;
      if (!v27 || v133 != v87)
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v156, 0, 0, v86, v87, 0, 1);
    }
    v134 = v54;
    v55 = (__CVBuffer *)v156;
    goto LABEL_25;
  }
  destinationBuffer = (CVBufferRef)v156;
  PixelBufferSize = CMPhotoGetPixelBufferSize((__CVBuffer *)v156);
  v81 = v80;
  v82 = CFGetAllocator((CFTypeRef)a1);
  PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(v82, (__CFDictionary **)&propertyValue, PixelBufferSize, v81, v42, v43, v40, v41);
  DictionaryRepresentation = v148;
  if ((_DWORD)PixelBufferCLAPDictionaryFromRect)
    goto LABEL_65;
  v134 = v54;
  v56 = (const __CFString *)*MEMORY[0x1E0CA8D50];
LABEL_26:
  value = CVBufferCopyAttachment(destinationBuffer, v56, 0);
  v57 = propertyValue;
  IsAGXCompressed = CMPhotoPixelFormatIsAGXCompressed(PixelFormatType);
  IsFullRange = CMPhotoPixelFormatIsFullRange(PixelFormatType);
  v63 = a5 != 875836518 && v57 == 0 && a5 != 1111970369 && (IsFullRange | IsAGXCompressed) == 0;
  pixelTransferSessionOut[0] = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (v63)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 40)) <= 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), 0);
      if (ValueAtIndex)
        v65 = (OpaqueVTPixelTransferSession *)CFRetain(ValueAtIndex);
      else
        v65 = 0;
      pixelTransferSessionOut[0] = v65;
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), 0);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
      if (v65)
        goto LABEL_94;
    }
  }
  v90 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelTransferSessionOut);
  if ((_DWORD)v90)
  {
    v39 = v90;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    if (pixelTransferSessionOut[0])
      CFRelease(pixelTransferSessionOut[0]);
    v142 = v63;
    v65 = 0;
    goto LABEL_220;
  }
  if (_disableGPUForTransfer_onceToken != -1)
    dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_12);
  if (_disableMSRForTransfer_onceToken != -1)
    dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_8);
  v91 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a3)
    v92 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v92 = (const void *)*MEMORY[0x1E0C9AE40];
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED800], v92);
  if (!a3)
    VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED7F8], v91);
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]);
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED868], v91);
  v65 = pixelTransferSessionOut[0];
LABEL_94:
  v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED7B8], propertyValue);
  if ((_DWORD)v93)
    goto LABEL_219;
  v94 = (v141[0] - 1) > 2 ? 0 : (const void *)**((_QWORD **)&unk_1E53F4F70 + v141[0] - 1);
  v95 = a7;
  v96 = (v141[1] - 1) > 3 ? 0 : (const void *)**((_QWORD **)&unk_1E53F4F88 + v141[1] - 1);
  v97 = (v95 - 1) > 2 ? 0 : (const void *)**((_QWORD **)&unk_1E53F4FA8 + v95 - 1);
  v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED7C0], v94);
  if ((_DWORD)v93
    || (v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED7D8], v96), (_DWORD)v93)
    || (v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED7E0], v97), (_DWORD)v93)
    || (v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED850], DictionaryRepresentation), (_DWORD)v93))
  {
LABEL_219:
    v39 = v93;
    v142 = v63;
LABEL_220:
    v78 = v144;
    v76 = value;
LABEL_221:
    v75 = 0;
    v77 = 1;
    goto LABEL_187;
  }
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(a25, a25, destinationBuffer);
  LOBYTE(pixelTransferSessionOut[0]) = 0;
  v98 = CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(v65, a22, a23, a24, a3, pixelTransferSessionOut, a11, a12, a13, a14);
  if ((_DWORD)v98)
  {
    v39 = v98;
LABEL_226:
    v142 = v63;
    v75 = 0;
    v77 = 1;
    v78 = v144;
    v76 = value;
    goto LABEL_187;
  }
  if (LOBYTE(pixelTransferSessionOut[0]))
    v63 = 0;
  v99 = VTPixelTransferSessionTransferImage(v65, v37, destinationBuffer);
  if ((_DWORD)v99 == -12905)
  {
    v100 = CVPixelBufferGetPixelFormatType(destinationBuffer);
    v39 = CMPhotoVTPixelTransferWorkaround(v37, v100, 0, 1, a3, a22, a23, a24, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), v139, v138, &destinationBuffer);
    v63 = 0;
  }
  else
  {
    v39 = v99;
  }
  if ((_DWORD)v39)
    goto LABEL_226;
  _removeYCbCrMatrixFromBufferIfNeeded(destinationBuffer);
  if (CMPhotoPixelBufferContainsYCbCr(destinationBuffer))
  {
    if (!v97)
    {
      v101 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
      v102 = CVBufferCopyAttachment(v37, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      if (v102)
      {
        v103 = v102;
        CVBufferSetAttachment(destinationBuffer, v101, v102, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v103);
      }
    }
  }
  if (!v96)
  {
    v104 = (const __CFString *)*MEMORY[0x1E0CA8E98];
    v105 = CVBufferCopyAttachment(v37, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    if (v105)
    {
      v106 = v105;
      CVBufferSetAttachment(destinationBuffer, v104, v105, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v106);
    }
  }
  v76 = value;
  if (value)
    CVBufferSetAttachment(destinationBuffer, v56, value, kCVAttachmentMode_ShouldPropagate);
  else
    CMPhotoRemovePixelBufferCLAP(destinationBuffer);
  if ((v134 & 1) != 0)
  {
    v142 = v63;
    v75 = 0;
    v77 = 1;
    v78 = v144;
LABEL_186:
    v39 = 0;
    *a26 = v156;
    v156 = 0;
    goto LABEL_187;
  }
  v140 = 0;
LABEL_128:
  v161.origin.x = v42;
  v161.origin.y = v43;
  v161.size.width = v40;
  v161.size.height = v41;
  if (CGRectIsNull(v161))
  {
    if (v152 == 90)
    {
      v40 = a14;
      v41 = a13;
    }
    else
    {
      v41 = a13;
      if (v152 == 270)
      {
        v40 = a14;
      }
      else
      {
        v40 = a13;
        v41 = a14;
      }
    }
  }
  pixelTransferSessionOut[0] = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  v107 = *(const __CFArray **)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v142 = v63;
  if (CFArrayGetCount(v107) <= 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  }
  else
  {
    v108 = CFArrayGetValueAtIndex(v107, 0);
    if (v108)
      v75 = (OpaqueVTPixelTransferSession *)CFRetain(v108);
    else
      v75 = 0;
    pixelTransferSessionOut[0] = v75;
    CFArrayRemoveValueAtIndex(v107, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    if (v75)
      goto LABEL_142;
  }
  v109 = VTPixelRotationSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelTransferSessionOut);
  if ((_DWORD)v109)
  {
    v39 = v109;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    if (pixelTransferSessionOut[0])
      CFRelease(pixelTransferSessionOut[0]);
    v75 = 0;
    goto LABEL_224;
  }
  v75 = pixelTransferSessionOut[0];
LABEL_142:
  v110 = (OpaqueVTPixelTransferSession *)*MEMORY[0x1E0CEDA38];
  pixelTransferSessionOut[0] = *(VTPixelTransferSessionRef *)MEMORY[0x1E0CEDA28];
  pixelTransferSessionOut[1] = v110;
  v111 = (OpaqueVTPixelTransferSession *)*MEMORY[0x1E0CEDA40];
  pixelTransferSessionOut[2] = *(VTPixelTransferSessionRef *)MEMORY[0x1E0CEDA30];
  pixelTransferSessionOut[3] = v111;
  v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED7A0], pixelTransferSessionOut[((11651 * ((__int16)v152 % 360)) >> 20)+ ((11651 * ((__int16)v152 % 360)) >> 31)]);
  if ((_DWORD)v112)
    goto LABEL_223;
  v113 = (const void *)*MEMORY[0x1E0C9AE50];
  v114 = (const void *)*MEMORY[0x1E0C9AE40];
  v115 = (const void *)(v151 ? *MEMORY[0x1E0C9AE40] : *MEMORY[0x1E0C9AE50]);
  v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED780], v115);
  if ((_DWORD)v112
    || (v151 != 1 ? (v116 = v114) : (v116 = v113),
        (v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED778], v116), (_DWORD)v112)
     || (!a23 ? (v117 = a22 == 0) : (v117 = 1),
         v117 ? (v118 = v114) : (v118 = v113),
         v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED768], v118),
         (_DWORD)v112)))
  {
LABEL_223:
    v39 = v112;
LABEL_224:
    v77 = 1;
    goto LABEL_68;
  }
  if (_disableMSRForTransfer_onceToken != -1)
    dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_8);
  v119 = a3 == 0;
  if (v119 | a23)
  {
    v120 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED760], v114);
    if ((_DWORD)v120)
    {
      v39 = v120;
      v77 = 1;
      goto LABEL_62;
    }
    v77 = 0;
  }
  else
  {
    v77 = 1;
  }
  if (_disableGPUForTransfer_onceToken != -1)
    dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_12);
  if (v119 | a24)
  {
    v121 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E0CED758], v114);
    if ((_DWORD)v121)
    {
LABEL_231:
      v39 = v121;
      goto LABEL_62;
    }
    v77 = 0;
  }
  if (!v156)
  {
    v122 = vcvtad_u64_f64(v40);
    v123 = vcvtad_u64_f64(v41);
    v124 = 2 * (v143 == 0);
    if (a3)
    {
      v121 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v122, v123, v143, v124, v124, v143 == 0, a21, 0, (CVPixelBufferRef *)&v156);
      if ((_DWORD)v121)
        goto LABEL_231;
    }
    else
    {
      v125 = v122;
      v126 = v123;
      if (!v143)
      {
        v125 = CMPhotoAlignValue(v122, 2uLL);
        v126 = CMPhotoAlignValue(v123, 2uLL);
      }
      v149 = v126;
      v121 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a5, v125, v126, v124, v124, a21, 0, (CVPixelBufferRef *)&v156);
      if ((_DWORD)v121)
        goto LABEL_231;
      if (v125 != v122 || v149 != v123)
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v156, 0, 0, v122, v123, 0, 1);
    }
  }
  if ((v140 & 1) == 0)
    CMPhotoGetPixelBufferCLAPAsRect(buffer);
  v127 = VTPixelRotationSessionRotateSubImage();
  v78 = v144;
  DictionaryRepresentation = v148;
  if (!(_DWORD)v127)
  {
    _removeYCbCrMatrixFromBufferIfNeeded((__CVBuffer *)v156);
    if (v140)
      v128 = v37;
    else
      v128 = buffer;
    CMPhotoPropagateColorPropertiesFromSourceBuffer(v128, (__CVBuffer *)v156);
    goto LABEL_186;
  }
  v39 = v127;
LABEL_187:
  if (cf)
    CFRelease(cf);
  if (buffer)
    CFRelease(buffer);
  if (propertyValue)
    CFRelease(propertyValue);
  if (v76)
    CFRelease(v76);
  if (!v78 && v156)
    CFRelease(v156);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v75)
  {
    if (v77)
    {
      v129 = *(__CFArray **)(a1 + 64);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      CFArrayInsertValueAtIndex(v129, 0, v75);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    CFRelease(v75);
  }
  if (v65)
  {
    if (v142)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), 0, v65);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    CFRelease(v65);
  }
  return v39;
}

void CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(unsigned int a1, unsigned int a2, __CVBuffer *a3)
{
  const __CFBoolean *PixelBufferDescriptionKey;
  unsigned int Value;
  uint64_t PixelFormatType;
  int ChromaSubsamplingFromPixelFormat;
  BOOL v10;

  if (a2 != -1 && a1 != -1 && a3)
  {
    PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a3, (const void *)*MEMORY[0x1E0CA9188]);
    Value = CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
    ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(PixelFormatType);
    if (Value)
      v10 = ChromaSubsamplingFromPixelFormat == 5;
    else
      v10 = 0;
    if (v10)
    {
      _setChromaLocationAttachmentToBuffer(1, a1, a3);
      _setChromaLocationAttachmentToBuffer(0, a2, a3);
    }
  }
}

void _setChromaLocationAttachmentToBuffer(int a1, unsigned int a2, CVBufferRef buffer)
{
  CFStringRef *v3;

  if (a2 <= 5)
  {
    v3 = (CFStringRef *)MEMORY[0x1E0CA8CE0];
    if (a1)
      v3 = (CFStringRef *)MEMORY[0x1E0CA8CE8];
    CVBufferSetAttachment(buffer, *v3, **((CFTypeRef **)&unk_1E53F4CB0 + (int)a2), kCVAttachmentMode_ShouldPropagate);
  }
}

uint64_t CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(int a1, _DWORD *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = a1 - 2;
  if ((a1 - 2) > 6)
  {
    v4 = 0;
    v5 = -1;
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = dword_1A8294D90[v3];
  v5 = dword_1A8294DAC[v3];
  if (a2)
LABEL_5:
    *a2 = v4;
LABEL_6:
  if (a3)
    *a3 = v5;
  return 0;
}

uint64_t CMPhotoCreateCGImageWithPixelBuffer(const __CFAllocator *a1, CVPixelBufferRef pixelBuffer, int a3, CGImageRef *a4)
{
  __CVBuffer *v6;
  IOSurfaceRef IOSurface;
  __IOSurface *v9;
  uint64_t PixelFormat;
  double PixelBufferCLAPAsRect;
  double v12;
  double v13;
  double v14;
  double v15;
  int IsTiled;
  int32x4_t v17;
  int16x8_t v18;
  char v19;
  int v20;
  _BOOL4 v21;
  uint64_t FastestAlignment;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t PixelFormatType;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t BytesPerPixelForPixelFormat;
  int IsOpaque;
  uint64_t v34;
  char *BaseAddressOfPlane;
  int v36;
  char *v37;
  size_t BytesPerRowOfPlane;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  size_t v49;
  uint64_t Data;
  const void *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  CGDataProviderRef v56;
  CGDataProvider *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  CGBitmapInfo v62;
  CGBitmapInfo v63;
  size_t BitDepthForPixelFormat;
  const void *v65;
  CGImageRef v66;
  CGBitmapInfo v67;
  int v68;
  size_t v69;
  uint64_t v70;
  int v71;
  size_t v72;
  size_t BytesPerRow;
  uint64_t v74;
  CGDataProvider *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int32x4_t v79;
  int v80;
  uint64_t UsedBitDepthForPixelFormat;
  char *BaseAddress;
  uint64_t ColorSpaceFromPixelBuffer;
  CGColorSpace *v85;
  CGImageRef v86;
  CGImageRef v87;
  int v89;
  int v90;
  int v91;
  int16x8_t v92;
  CGImageRef *v93;
  size_t v94;
  uint64_t v95;
  size_t v96;
  CGDataProviderDirectCallbacks space;
  CFTypeRef cf[2];

  if (!pixelBuffer)
    return 4294950306;
  v6 = pixelBuffer;
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (a3 && IOSurface)
  {
    v9 = CVPixelBufferGetIOSurface(v6);
    PixelFormat = IOSurfaceGetPixelFormat(v9);
    cf[0] = 0;
    PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v6);
    v13 = v12;
    v94 = vcvtad_u64_f64(v14);
    v96 = vcvtad_u64_f64(v15);
    IsTiled = IOSurfaceIsTiled();
    v17.i32[0] = PixelFormat & 0xFFFFFFFD;
    v17.i32[1] = PixelFormat;
    v17.i32[2] = PixelFormat;
    v17.i32[3] = PixelFormat;
    v18 = (int16x8_t)vceqq_s32(vdupq_n_s32(PixelFormat), (int32x4_t)xmmword_1A8289EC0);
    v19 = ((_DWORD)PixelFormat != 1380411457) & ~vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v17, (int32x4_t)xmmword_1A8289EB0), v18)));
    if ((_DWORD)PixelFormat == 1815162994)
      v19 = 0;
    if ((_DWORD)PixelFormat == 1380410945)
      v19 = 0;
    if ((_DWORD)PixelFormat == 1815491698)
      v19 = 0;
    if ((_DWORD)PixelFormat == 1717856627)
      v19 = 0;
    if ((_DWORD)PixelFormat == 1751411059)
      v19 = 0;
    v93 = a4;
    if ((v19 & 1) == 0 && !IsTiled)
    {
      v92 = v18;
      if (v9)
        CFRetain(v9);
      IOSurfaceLock(v9, 1u, 0);
      IOSurfaceIncrementUseCount(v9);
      if ((int)PixelFormat <= 1380410944)
      {
        if ((PixelFormat - 1278226736) <= 6 && ((1 << (PixelFormat - 48)) & 0x45) != 0)
        {
          v20 = 4096;
          goto LABEL_119;
        }
        if ((_DWORD)PixelFormat == 1111970369)
        {
          v20 = 6;
          goto LABEL_119;
        }
LABEL_118:
        v20 = 0;
LABEL_119:
        v77 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
        v78 = vcvtad_u64_f64(v13);
        if (CMPhotoPixelBufferIsOpaque(v6, 1))
        {
          v79 = (int32x4_t)v92;
          goto LABEL_121;
        }
        v67 = 3;
        v79 = (int32x4_t)v92;
        if ((int)PixelFormat <= 1380411456)
        {
          if ((_DWORD)PixelFormat != 1111970369)
          {
            if ((_DWORD)PixelFormat == 1380410945)
              goto LABEL_124;
            goto LABEL_121;
          }
        }
        else
        {
          if ((_DWORD)PixelFormat == 1380411457 || (_DWORD)PixelFormat == 1815491698)
            goto LABEL_124;
          if ((_DWORD)PixelFormat != 1815162994)
          {
LABEL_121:
            if ((vmovn_s16(vmovn_hight_s32(*(int16x4_t *)&v79, v79)).i8[7] & 1) != 0)
            {
              v67 = v20 | 0x2000;
              goto LABEL_134;
            }
            v67 = v20;
LABEL_124:
            switch((_DWORD)PixelFormat)
            {
              case 0x6C313072:
                v80 = 204800;
LABEL_126:
                v67 |= v80;
                goto LABEL_134;
              case 0x6C363472:
                v67 |= 0x1000u;
                goto LABEL_134;
              case 0x52476841:
                v80 = 4352;
                goto LABEL_126;
              case 0x52476641:
                v80 = 8448;
                goto LABEL_126;
            }
            if ((int)PixelFormat > 1717856626)
            {
              if ((_DWORD)PixelFormat != 1717856627)
              {
                if ((_DWORD)PixelFormat != 1751411059 && (_DWORD)PixelFormat != 1751410032)
                {
LABEL_197:
                  v76 = 1;
                  if ((int)PixelFormat <= 1278226735)
                  {
                    if ((PixelFormat - 1278226488) <= 0x30
                      && ((1 << (PixelFormat - 56)) & 0x1400000000001) != 0)
                    {
LABEL_140:
                      UsedBitDepthForPixelFormat = CMPhotoGetUsedBitDepthForPixelFormat(PixelFormat);
                      v72 = UsedBitDepthForPixelFormat;
                      if ((_DWORD)PixelFormat == 1815162994)
                        v69 = 32;
                      else
                        v69 = UsedBitDepthForPixelFormat * v76;
                      BytesPerRow = IOSurfaceGetBytesPerRow(v9);
                      BaseAddress = (char *)IOSurfaceGetBaseAddress(v9);
                      v75 = CGDataProviderCreateWithData(v9, &BaseAddress[BytesPerRow * v78 + (v69 >> 3) * v77], BytesPerRow * v96, (CGDataProviderReleaseDataCallback)_callbackDataProviderReleaseSurface);
LABEL_144:
                      ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(v6, (CGColorSpace **)cf, 0, 0);
                      v85 = (CGColorSpace *)cf[0];
                      if ((_DWORD)ColorSpaceFromPixelBuffer)
                        goto LABEL_149;
                      v86 = CGImageCreate(v94, v96, v72, v69, BytesPerRow, (CGColorSpaceRef)cf[0], v67, v75, 0, 1, kCGRenderingIntentPerceptual);
                      v87 = v86;
                      if (v76 == 1 && !v86)
                      {
                        if (CGColorSpaceGetNumberOfComponents(v85) == 1)
                        {
LABEL_148:
                          ColorSpaceFromPixelBuffer = FigSignalErrorAt();
LABEL_149:
                          v29 = ColorSpaceFromPixelBuffer;
                          if (!v85)
                            goto LABEL_157;
                          goto LABEL_156;
                        }
                        if (v85)
                          CFRelease(v85);
                        v85 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
                        cf[0] = v85;
                        v87 = CGImageCreate(v94, v96, v72, v69, BytesPerRow, v85, v67, v75, 0, 1, kCGRenderingIntentPerceptual);
                      }
                      if (v87)
                      {
                        CMPhotoGetEncodeAccelerationModeOverride(v9, CFSTR("CMPhoto CGImage"));
                        CGImageSetProperty();
                        v29 = 0;
                        *v93 = v87;
                        if (!v85)
                        {
LABEL_157:
                          if (v75)
                            CFRelease(v75);
                          v24 = 0;
                          goto LABEL_160;
                        }
LABEL_156:
                        CFRelease(v85);
                        goto LABEL_157;
                      }
                      goto LABEL_148;
                    }
                  }
                  else if ((PixelFormat - 1278226736) <= 6 && ((1 << (PixelFormat - 48)) & 0x45) != 0
                         || (_DWORD)PixelFormat == 1717855600
                         || (_DWORD)PixelFormat == 1751410032)
                  {
                    goto LABEL_140;
                  }
LABEL_134:
                  if ((_DWORD)PixelFormat == 1717856627 || (_DWORD)PixelFormat == 1751411059)
                    v76 = 1;
                  else
                    v76 = 4;
                  goto LABEL_140;
                }
                goto LABEL_194;
              }
            }
            else if ((_DWORD)PixelFormat != 1278226534)
            {
              if ((_DWORD)PixelFormat != 1278226536)
              {
                if ((_DWORD)PixelFormat != 1717855600)
                  goto LABEL_197;
                goto LABEL_195;
              }
LABEL_194:
              v91 = 4352;
LABEL_196:
              v67 |= v91;
              goto LABEL_197;
            }
LABEL_195:
            v91 = 8448;
            goto LABEL_196;
          }
        }
        v20 = 4;
        goto LABEL_121;
      }
      if ((int)PixelFormat > 1815162993)
      {
        if ((_DWORD)PixelFormat != 1815491698)
        {
          if ((_DWORD)PixelFormat == 1815162994)
          {
            v20 = 4;
            goto LABEL_119;
          }
          goto LABEL_118;
        }
      }
      else if ((_DWORD)PixelFormat != 1380410945 && (_DWORD)PixelFormat != 1380411457)
      {
        goto LABEL_118;
      }
      v20 = 5;
      goto LABEL_119;
    }
    FastestAlignment = CGBitmapGetFastestAlignment();
    v23 = CFAllocatorAllocate(a1, 48, 0);
    v24 = v23;
    if (!v23)
    {
      v29 = FigSignalErrorAt();
      goto LABEL_160;
    }
    if ((int)PixelFormat > 1278555700)
    {
      if ((int)PixelFormat <= 1717856626)
      {
        if ((_DWORD)PixelFormat == 1278555701)
        {
          v71 = 1278555445;
          v24[6] = 1278555445;
          v70 = 2 * v94;
          v67 = 4102;
          v69 = 16;
          goto LABEL_114;
        }
        v36 = 1717855600;
      }
      else
      {
        if ((_DWORD)PixelFormat == 1717856627 || (_DWORD)PixelFormat == 1751411059)
          goto LABEL_98;
        v36 = 1751410032;
      }
      if ((_DWORD)PixelFormat != v36)
      {
LABEL_169:
        if ((unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormat) < 9)
        {
          v71 = 1111970369;
          v24[6] = 1111970369;
          v70 = 4 * v94;
          v67 = 8198;
          v69 = 32;
        }
        else
        {
          if ((_DWORD)PixelFormat == 1380410945)
            v89 = 1380410945;
          else
            v89 = 1815491698;
          if ((_DWORD)PixelFormat == 1380410945)
            v90 = 8453;
          else
            v90 = 4101;
          if ((_DWORD)PixelFormat == 1380411457)
            v71 = 1380411457;
          else
            v71 = v89;
          if ((_DWORD)PixelFormat == 1380411457)
            v67 = 4357;
          else
            v67 = v90;
          v24[6] = v71;
          v70 = 8 * v94;
          v69 = 64;
        }
        goto LABEL_114;
      }
    }
    else if (((PixelFormat - 1278226488) > 0x30
            || ((1 << (PixelFormat - 56)) & 0x1400000000001) == 0)
           && ((PixelFormat - 1278226736) > 6 || ((1 << (PixelFormat - 48)) & 0x45) == 0))
    {
      goto LABEL_169;
    }
LABEL_98:
    v23[6] = PixelFormat;
    v67 = ((unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormat) > 8) << 12;
    if ((int)PixelFormat > 1651926375)
    {
      if ((int)PixelFormat <= 1717856626)
      {
        if ((_DWORD)PixelFormat == 1651926376)
          goto LABEL_112;
        v68 = 1717855600;
      }
      else
      {
        if ((_DWORD)PixelFormat == 1717856627 || (_DWORD)PixelFormat == 1751411059)
          goto LABEL_112;
        v68 = 1751410032;
      }
    }
    else if ((int)PixelFormat <= 1380410944)
    {
      if ((_DWORD)PixelFormat == 1278226534)
        goto LABEL_112;
      v68 = 1278226536;
    }
    else
    {
      if ((_DWORD)PixelFormat == 1380410945 || (_DWORD)PixelFormat == 1380411457)
        goto LABEL_112;
      v68 = 1647719528;
    }
    if ((_DWORD)PixelFormat != v68)
    {
LABEL_113:
      v69 = CMPhotoGetUsedBitDepthForPixelFormat(PixelFormat);
      v70 = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormat) * v94;
      v71 = v24[6];
LABEL_114:
      v72 = CMPhotoGetUsedBitDepthForPixelFormat(v71);
      BytesPerRow = (FastestAlignment + v70 - 1) & -FastestAlignment;
      *((_QWORD *)v24 + 4) = BytesPerRow;
      *((_QWORD *)v24 + 5) = BytesPerRow * v96;
      *((_QWORD *)v24 + 1) = CFRetain(v6);
      *((_QWORD *)v24 + 2) = 0;
      v24[7] = 0;
      v74 = FigSimpleMutexCreate();
      *(_QWORD *)v24 = v74;
      if (v74)
      {
        *(_OWORD *)&space.version = xmmword_1E53F4C68;
        *(_OWORD *)&space.releaseBytePointer = *(_OWORD *)&off_1E53F4C78;
        space.releaseInfo = (CGDataProviderReleaseInfoCallback)_callbackDataProviderReleaseInfo;
        v75 = CGDataProviderCreateDirect(v24, BytesPerRow * v96, &space);
        v76 = 0;
        goto LABEL_144;
      }
      v29 = 4294950305;
LABEL_160:
      free(v24);
      return v29;
    }
LABEL_112:
    v67 |= 0x100u;
    goto LABEL_113;
  }
  cf[0] = 0;
  if (CVPixelBufferGetIOSurface(v6))
    v21 = IOSurfaceIsTiled() != 0;
  else
    v21 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
  if (((_DWORD)PixelFormatType == 1111970369
     || (_DWORD)PixelFormatType == 1815491698
     || (_DWORD)PixelFormatType == 1380401729)
    && !v21
    || ((unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormatType) <= 8
      ? (v28 = 1111970369)
      : (v28 = 1815491698),
        v29 = CMPhotoScaleAndRotateSessionTransformForSize(0, v6, a3, 1, v28, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v26, v27, 0, 1u, (__CVBuffer **)cf),
        v6 = (__CVBuffer *)cf[0],
        !(_DWORD)v29))
  {
    *(_QWORD *)&space.version = 0;
    v30 = CVPixelBufferGetPixelFormatType(v6);
    v31 = v30;
    if ((_DWORD)v30 == 1111970369 || (_DWORD)v30 == 1380401729 || (_DWORD)v30 == 1815491698)
    {
      BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v30);
      IsOpaque = CMPhotoPixelBufferIsOpaque(v6, 1);
      v34 = CVPixelBufferLockBaseAddress(v6, 1uLL);
      if (!(_DWORD)v34)
      {
        if (CVPixelBufferGetPlaneCount(v6) == 1)
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
        else
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(v6);
        v37 = BaseAddressOfPlane;
        if (CVPixelBufferGetPlaneCount(v6) == 1)
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
        else
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v6);
        v39 = BytesPerRowOfPlane;
        v40 = CMPhotoGetPixelBufferCLAPAsRect(v6);
        v42 = v41;
        v44 = v43;
        v46 = v45;
        v95 = BytesPerPixelForPixelFormat;
        v47 = (double)(unint64_t)BytesPerPixelForPixelFormat;
        v48 = v43 * (double)(unint64_t)BytesPerPixelForPixelFormat;
        v49 = (unint64_t)(v45 * (double)(unint64_t)v48);
        Data = CGBitmapAllocateData();
        if (Data)
        {
          v51 = (const void *)Data;
          if ((unint64_t)v46)
          {
            v52 = &v37[(unint64_t)(v42 * (double)v39) + (unint64_t)(v40 * v47)];
            v53 = (unint64_t)v46;
            v54 = (char *)Data;
            do
            {
              memcpy(v54, v52, (unint64_t)v48);
              v54 += (unint64_t)v48;
              v52 += v39;
              --v53;
            }
            while (v53);
          }
          v55 = CVPixelBufferUnlockBaseAddress(v6, 1uLL);
          if ((_DWORD)v55)
          {
            v29 = v55;
          }
          else
          {
            v56 = CGDataProviderCreateWithData(0, v51, v49, (CGDataProviderReleaseDataCallback)_callbackDataProviderReleaseImage);
            if (v56)
            {
              v57 = v56;
              v58 = CMPhotoCreateColorSpaceFromPixelBuffer(v6, (CGColorSpace **)&space, 0, 0);
              if ((_DWORD)v58)
              {
                v29 = v58;
                v65 = *(const void **)&space.version;
              }
              else
              {
                if (IsOpaque)
                  v59 = 8198;
                else
                  v59 = 8196;
                if (IsOpaque)
                  v60 = 4101;
                else
                  v60 = 4099;
                if (IsOpaque)
                  v61 = 16389;
                else
                  v61 = 16387;
                if ((_DWORD)v31 == 1380401729)
                  v62 = v61;
                else
                  v62 = v60;
                if ((_DWORD)v31 == 1111970369)
                  v63 = v59;
                else
                  v63 = v62;
                BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v31);
                v65 = *(const void **)&space.version;
                v66 = CGImageCreate((unint64_t)v44, (unint64_t)v46, BitDepthForPixelFormat, 8 * v95, (unint64_t)v48, *(CGColorSpaceRef *)&space.version, v63, v57, 0, 1, kCGRenderingIntentPerceptual);
                if (v66)
                {
                  v29 = 0;
                  *a4 = v66;
                }
                else
                {
                  v29 = FigSignalErrorAt();
                }
              }
              if (v65)
                CFRelease(v65);
              CFRelease(v57);
              goto LABEL_86;
            }
            v29 = 4294950305;
          }
          CGBitmapFreeData();
        }
        else
        {
          v29 = 4294950305;
        }
LABEL_86:
        v6 = (__CVBuffer *)cf[0];
        goto LABEL_87;
      }
    }
    else
    {
      v34 = FigSignalErrorAt();
    }
    v29 = v34;
    goto LABEL_86;
  }
LABEL_87:
  if (v6)
    CFRelease(v6);
  return v29;
}

uint64_t CMPhotoGetBitDepthForPixelFormat(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned __int16 v7;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  v2 = 32;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1734505011)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1936077875)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1882468911)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1751411058)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat <= 1815162993)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1751411059)
              return 16;
            v4 = 1751527984;
          }
          else
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1815162994)
              return 10;
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1815361650)
              return 16;
            v4 = 1815491698;
          }
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1735549751)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1735549752)
            return 8;
          v4 = 1751410032;
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1734505012)
        {
          v6 = 1735549492;
LABEL_76:
          if (UncompressedPixelFormatFromCompressedPixelFormat != v6)
            return 8;
        }
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1919379251)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat > 1919365989)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1919365990)
              return v2;
            if (UncompressedPixelFormatFromCompressedPixelFormat != 1919365992)
              return 8;
            return 16;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1882468912)
          {
            v3 = 1885745712;
            goto LABEL_99;
          }
          return 10;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1932996148)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149
            || UncompressedPixelFormatFromCompressedPixelFormat == 1936077360)
          {
            return 16;
          }
          v4 = 1936077362;
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1919379252)
        {
          v3 = 1919381552;
          goto LABEL_99;
        }
      }
      return 14;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1953903667)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1952854575)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952855091)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854576)
            return 12;
          v5 = 1952854578;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952855092
            || UncompressedPixelFormatFromCompressedPixelFormat == 1953903152)
          {
            return 12;
          }
          v5 = 1953903154;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != v5)
          return 8;
        return 12;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1937125937)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938)
          return 16;
        v7 = 13364;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876)
          return 16;
        v7 = 12848;
      }
      v4 = v7 | 0x73760000;
      goto LABEL_110;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963439)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 2016686639)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668)
          return 12;
        v3 = 1999843442;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2016686640
          || UncompressedPixelFormatFromCompressedPixelFormat == 2016686642)
        {
          return 10;
        }
        v3 = 2016687156;
      }
      goto LABEL_99;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 2019963955)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 2019963956)
        return 8;
      return 10;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963440)
      return 10;
    v3 = 2019963442;
LABEL_99:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v3)
      return 8;
    return 10;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1279340599)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1650942775)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1380410944)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1378955370)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1378955371)
            return 8;
          return 10;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1279340600)
          return 8;
        v4 = 1279340854;
      }
      else if (UncompressedPixelFormatFromCompressedPixelFormat <= 1647392368)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1380410945)
          return v2;
        v4 = 1380411457;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1647392369
          || UncompressedPixelFormatFromCompressedPixelFormat == 1647589490)
        {
          return 16;
        }
        v4 = 1647719528;
      }
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1651925815)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1650946097)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1650946098)
            return 12;
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1651519798)
            return 16;
          v3 = 1651847472;
          goto LABEL_99;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1650942776)
          return 8;
        v6 = 1650943796;
        goto LABEL_76;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1717855600
          && UncompressedPixelFormatFromCompressedPixelFormat != 1717856627)
        {
          return 8;
        }
        return v2;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1651925816)
        return 8;
      v4 = 1651926376;
    }
LABEL_110:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v4)
      return 8;
    return 16;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875836517)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 843264309)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 875704437
        || UncompressedPixelFormatFromCompressedPixelFormat != 843264310)
      {
        return 8;
      }
      return 16;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 825437747)
        return 8;
      return 16;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 32)
      return 8;
    v4 = 825306677;
    goto LABEL_110;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226535)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226737)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226738)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226742)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1278555445)
            return 5;
          return 8;
        }
        return 16;
      }
      return 12;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1278226536)
      return 16;
    v3 = 1278226736;
    goto LABEL_99;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226534)
    return 8;
  return v2;
}

uint64_t CMPhotoPixelFormatIsFullRange(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat;
  const __CFDictionary *DescriptionWithPixelFormatType;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  if (UncompressedPixelFormatFromCompressedPixelFormat == 1278555701)
    return 1;
  if (UncompressedPixelFormatFromCompressedPixelFormat == 1380401729)
    return 1;
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType
    || !CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA9120]))
  {
    return 1;
  }
  else
  {
    return FigCFEqual();
  }
}

uint64_t CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(uint64_t result)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  if ((int)result > 645428783)
  {
    if ((int)result > 792872768)
    {
      if ((int)result <= 2084075055)
      {
        if ((int)result <= 796419633)
        {
          if ((_DWORD)result != 792872769)
          {
            if ((_DWORD)result != 793522232)
            {
              v9 = 796419632;
              goto LABEL_70;
            }
            return 1278226488;
          }
          return 1111970369;
        }
        if ((int)result <= 796423729)
        {
          if ((_DWORD)result == 796419634)
            return 2019963442;
          if ((_DWORD)result != 796423728)
            return result;
          return 2016686640;
        }
        if ((_DWORD)result != 796423730)
        {
          if ((_DWORD)result != 2084070960)
            return result;
          return 875704422;
        }
        return 2016686642;
      }
      if ((int)result <= 2088265263)
      {
        if ((_DWORD)result != 2084075056)
        {
          if ((_DWORD)result != 2084718401)
          {
            if ((_DWORD)result != 2085367864)
              return result;
            return 1278226488;
          }
          return 1111970369;
        }
        return 875704438;
      }
      if ((int)result <= 2088269359)
      {
        if ((_DWORD)result == 2088265264)
          return 2019963440;
        v10 = 2088265266;
        goto LABEL_78;
      }
      if ((_DWORD)result == 2088269360)
        return 2016686640;
      v8 = 2088269362;
LABEL_120:
      if ((_DWORD)result != v8)
        return result;
      return 2016686642;
    }
    if ((int)result <= 759967799)
    {
      if ((int)result <= 758670895)
      {
        if ((_DWORD)result == 645428784)
          return 2016686640;
        if ((_DWORD)result != 645428786)
        {
          v15 = (_DWORD)result == 645428788;
          v16 = 2016687156;
          goto LABEL_114;
        }
        return 2016686642;
      }
      if ((_DWORD)result == 758670896)
        return 875704422;
      if ((_DWORD)result != 758674992)
      {
        if ((_DWORD)result != 759318337)
          return result;
        return 1111970369;
      }
    }
    else
    {
      if ((int)result <= 762869295)
      {
        if ((_DWORD)result == 759967800)
          return 1278226488;
        if ((_DWORD)result == 762865200)
          return 2019963440;
        v10 = 762865202;
LABEL_78:
        if ((_DWORD)result != v10)
          return result;
        return 2019963442;
      }
      if ((int)result <= 792225327)
      {
        if ((_DWORD)result == 762869296)
          return 2016686640;
        v8 = 762869298;
        goto LABEL_120;
      }
      if ((_DWORD)result == 792225328)
        return 875704422;
      if ((_DWORD)result != 792229424)
        return result;
    }
    return 875704438;
  }
  if ((int)result > 645097009)
  {
    if ((int)result <= 645162547)
    {
      if ((int)result > 645101105)
      {
        v1 = 645162543;
        if ((_DWORD)result == 645162546)
          v2 = 1952854578;
        else
          v2 = result;
        if ((_DWORD)result == 645162544)
          v3 = 1952854576;
        else
          v3 = v2;
        if ((_DWORD)result == 645101108)
          v4 = 1937126452;
        else
          v4 = result;
        if ((_DWORD)result == 645101106)
          v5 = 1937125938;
        else
          v5 = v4;
LABEL_38:
        if ((int)result <= v1)
          return v5;
        else
          return v3;
      }
      v17 = 645097010;
      v18 = 1936077362;
      if ((_DWORD)result == 645101104)
        v19 = 1937125936;
      else
        v19 = result;
      if ((_DWORD)result == 645097012)
        v19 = 1936077876;
      goto LABEL_87;
    }
    if ((int)result <= 645166643)
    {
      v17 = 645162548;
      v18 = 1952855092;
      if ((_DWORD)result == 645166642)
        v20 = 1953903154;
      else
        v20 = result;
      if ((_DWORD)result == 645166640)
        v19 = 1953903152;
      else
        v19 = v20;
LABEL_87:
      if ((_DWORD)result == v17)
        return v18;
      else
        return v19;
    }
    if ((int)result <= 645424689)
    {
      if ((_DWORD)result == 645166644)
        return 1953903668;
      v9 = 645424688;
LABEL_70:
      if ((_DWORD)result != v9)
        return result;
      return 2019963440;
    }
    if ((_DWORD)result != 645424690)
    {
      v15 = (_DWORD)result == 645424692;
      v16 = 2019963956;
LABEL_114:
      if (v15)
        return v16;
      else
        return result;
    }
    return 2019963442;
  }
  if ((int)result > 641877824)
  {
    if ((int)result > 642527537)
    {
      v1 = 644624753;
      if ((_DWORD)result == 645097008)
        v6 = 1936077360;
      else
        v6 = result;
      if ((_DWORD)result == 644624754)
        v3 = 1815162994;
      else
        v3 = v6;
      if ((_DWORD)result == 642527542)
        v7 = 1278226742;
      else
        v7 = result;
      if ((_DWORD)result == 642527538)
        v5 = 1278226738;
      else
        v5 = v7;
      goto LABEL_38;
    }
    if ((_DWORD)result != 641877825)
    {
      if ((_DWORD)result != 642527288)
      {
        v15 = (_DWORD)result == 642527536;
        v16 = 1278226736;
        goto LABEL_114;
      }
      return 1278226488;
    }
    return 1111970369;
  }
  if ((int)result > 641234479)
  {
    if ((_DWORD)result != 641234480)
    {
      v11 = 641234482;
      v12 = 875704950;
      v13 = (_DWORD)result == 641234484;
      v14 = 875836534;
      goto LABEL_96;
    }
    return 875704438;
  }
  if ((_DWORD)result == 641230384)
    return 875704422;
  v11 = 641230386;
  v12 = 875704934;
  v13 = (_DWORD)result == 641230388;
  v14 = 875836518;
LABEL_96:
  if (!v13)
    v14 = result;
  if ((_DWORD)result == v11)
    return v12;
  else
    return v14;
}

uint64_t CMPhotoGetUsedBitDepthForPixelFormat(int a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  int v8;

  v1 = 32;
  if (a1 > 1734501175)
  {
    if (a1 > 1936077875)
    {
      if (a1 <= 1953903667)
      {
        if (a1 <= 1952854575)
        {
          if (a1 > 1937125937)
          {
            if (a1 == 1937125938)
              return 16;
            v7 = 13364;
          }
          else
          {
            if (a1 == 1936077876)
              return 16;
            v7 = 12848;
          }
          v4 = v7 | 0x73760000;
        }
        else if (a1 <= 1952855091)
        {
          if (a1 == 1952854576)
            return 16;
          v4 = 1952854578;
        }
        else
        {
          if (a1 == 1952855092 || a1 == 1953903152)
            return 16;
          v4 = 1953903154;
        }
        goto LABEL_117;
      }
      if (a1 > 2019963439)
      {
        if (a1 <= 2019963955)
        {
          if (a1 == 2019963440)
            return 16;
          v6 = 12850;
        }
        else
        {
          if (a1 == 2037741171 || a1 == 2037741158)
            return 8;
          v6 = 13364;
        }
        v4 = v6 | 0x78660000;
        goto LABEL_117;
      }
      if (a1 > 2016686639)
      {
        if (a1 == 2016686640 || a1 == 2016686642)
          return 16;
        v4 = 2016687156;
        goto LABEL_117;
      }
      if (a1 == 1953903668)
        return 16;
      v8 = 1999843442;
    }
    else
    {
      if (a1 <= 1882468911)
      {
        if (a1 <= 1751410031)
        {
          if (a1 > 1735549491)
          {
            if (a1 == 1735549492)
              return 16;
            v3 = 1735549752;
            goto LABEL_111;
          }
          if (a1 == 1734501176)
            return 8;
          v4 = 1734505012;
          goto LABEL_117;
        }
        if (a1 <= 1751527983)
        {
          if (a1 == 1751410032)
            return 16;
          v4 = 1751411059;
          goto LABEL_117;
        }
        if (a1 == 1751527984)
          return 16;
        if (a1 != 1815162994)
        {
          v4 = 1815491698;
          goto LABEL_117;
        }
        return 10;
      }
      if (a1 > 1919379251)
      {
        if (a1 > 1932996148)
        {
          if (a1 == 1932996149 || a1 == 1936077360)
            return 16;
          v4 = 1936077362;
          goto LABEL_117;
        }
        if (a1 == 1919379252)
          return 16;
        v8 = 1919381552;
      }
      else
      {
        if (a1 > 1919365989)
        {
          if (a1 == 1919365990)
            return v1;
          if (a1 != 1919365992)
          {
            v3 = 1919378232;
            goto LABEL_111;
          }
          return 16;
        }
        if (a1 == 1882468912)
          return 10;
        v8 = 1885745712;
      }
    }
    if (a1 != v8)
      return 0;
    return 10;
  }
  if (a1 > 1279340599)
  {
    if (a1 > 1650942775)
    {
      if (a1 > 1651925815)
      {
        if (a1 > 1652056887)
        {
          if (a1 != 1652056888)
          {
            if (a1 == 1717855600)
              return v1;
            v2 = 1717856627;
            goto LABEL_61;
          }
          return 8;
        }
        if (a1 == 1651925816)
          return 8;
        v4 = 1651926376;
      }
      else if (a1 <= 1650946097)
      {
        if (a1 == 1650942776)
          return 8;
        v4 = 1650943796;
      }
      else
      {
        if (a1 == 1650946098)
          return 12;
        if (a1 == 1651519798)
          return 16;
        v4 = 1651847472;
      }
      goto LABEL_117;
    }
    if (a1 > 1380410944)
    {
      if (a1 <= 1647392368)
      {
        if (a1 == 1380410945)
          return v1;
        v4 = 1380411457;
      }
      else
      {
        if (a1 == 1647392369 || a1 == 1647589490)
          return 16;
        v4 = 1647719528;
      }
      goto LABEL_117;
    }
    if (a1 <= 1378955370)
    {
      if (a1 == 1279340600)
        return 8;
      v4 = 1279340854;
      goto LABEL_117;
    }
    if (a1 != 1378955371)
    {
      v3 = 1380401729;
      goto LABEL_111;
    }
    return 10;
  }
  if (a1 <= 875836517)
  {
    if (a1 > 843264309)
    {
      if (a1 <= 875704437)
      {
        if (a1 == 843264310)
          return 16;
        v5 = 12390;
      }
      else
      {
        if (a1 == 875704438 || a1 == 875704934)
          return 8;
        v5 = 12918;
      }
      v3 = v5 | 0x34320000;
LABEL_111:
      if (a1 == v3)
        return 8;
      return 0;
    }
    if (a1 > 825437746)
    {
      if (a1 == 825437747)
        return 16;
      v3 = 843264056;
      goto LABEL_111;
    }
    if (a1 == 32)
      return 8;
    v4 = 825306677;
LABEL_117:
    if (a1 != v4)
      return 0;
    return 16;
  }
  if (a1 > 1278226535)
  {
    if (((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0) && a1 != 1278226536)
    {
      if (a1 == 1278555445)
        return 5;
      return 0;
    }
    return 16;
  }
  if (a1 <= 1111970368)
  {
    if (a1 != 875836518)
    {
      v3 = 875836534;
      goto LABEL_111;
    }
    return 8;
  }
  if (a1 == 1111970369 || a1 == 1278226488)
    return 8;
  v2 = 1278226534;
LABEL_61:
  if (a1 != v2)
    return 0;
  return v1;
}

uint64_t CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(const void *a1, int a2, int a3, int a4, int a5, _BYTE *a6, double a7, double a8, double a9, double a10)
{
  BOOL v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t result;
  double v24;
  _BOOL4 v25;
  double v26;
  _BOOL4 v27;
  int v28;
  const __CFString *v29;
  int v30;

  if (!a1)
    return 4294950306;
  if (a3)
    v19 = 1;
  else
    v19 = a2 == 0;
  v20 = (const void *)*MEMORY[0x1E0C9AE50];
  v21 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v19)
    v22 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v22 = (const void *)*MEMORY[0x1E0C9AE50];
  result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E0CED808], v22);
  if (!(_DWORD)result)
  {
    if (_disableMSRForTransfer_onceToken != -1)
      dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_8);
    if (a7 >= a8)
      v24 = a8;
    else
      v24 = a7;
    v25 = v24 < 16.0;
    if (a9 >= a10)
      v26 = a10;
    else
      v26 = a9;
    if (v26 < 4.0)
      v25 = 1;
    v19 = a5 == 0;
    v27 = a5 == 0;
    if (v19)
      v25 = 1;
    v28 = v25 | a3;
    if (v28)
    {
      result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E0CED800], v21);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      if (_disableOptimalCoefficients_onceToken != -1)
        dispatch_once(&_disableOptimalCoefficients_onceToken, &__block_literal_global_10);
      v29 = cmpweak_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients();
      VTSessionSetProperty(a1, v29, v20);
    }
    if (_disableGPUForTransfer_onceToken != -1)
      dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_12);
    v30 = v27 | a4;
    if (v30)
    {
      result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E0CED7F8], v21);
      if (!a6 || (_DWORD)result)
        return result;
    }
    else if (!a6)
    {
      return 0;
    }
    result = 0;
    *a6 = v28 | v30;
  }
  return result;
}

uint64_t CMPhotoGetChromaSubsamplingFromPixelFormat(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat;
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  int v10;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  v2 = 5;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1735549491)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1936077875)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1953903667)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952854575)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat <= 1937125937)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876)
              return 1;
            v10 = 1937125936;
            goto LABEL_107;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938)
            return 3;
          v5 = 1937126452;
          return UncompressedPixelFormatFromCompressedPixelFormat == v5;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1952855091)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952855092)
            return 1;
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1953903152)
          {
            v7 = 1953903154;
            goto LABEL_103;
          }
          return v2;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854576)
          return v2;
        v7 = 1952854578;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963439)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat > 2016686639)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat != 2016686640)
            {
              if (UncompressedPixelFormatFromCompressedPixelFormat != 2016686642)
              {
                v5 = 2016687156;
                return UncompressedPixelFormatFromCompressedPixelFormat == v5;
              }
              return 3;
            }
            return v2;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668)
            return 1;
          v5 = 1999843442;
          return UncompressedPixelFormatFromCompressedPixelFormat == v5;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 2019963955)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963956)
            return 1;
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2037741171)
            return 3;
          v7 = 2037741158;
          goto LABEL_103;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963440)
          return v2;
        v7 = 2019963442;
      }
LABEL_103:
      if (UncompressedPixelFormatFromCompressedPixelFormat != v7)
        return 0;
      return 3;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1882468911)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1919379251)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1932996148)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149)
            return 6;
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1936077360)
          {
            v7 = 1936077362;
            goto LABEL_103;
          }
          return v2;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1919379252)
          return 7;
        v3 = 28720;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1919365989)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1882468912)
            return v2;
          v10 = 1885745712;
          goto LABEL_107;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1919365990
          || UncompressedPixelFormatFromCompressedPixelFormat == 1919365992)
        {
          return 1;
        }
        v3 = 25400;
      }
      v4 = v3 | 0x72670000;
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1751411058)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1735553071)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1735553072)
        {
          v8 = 1751410032;
LABEL_111:
          if (UncompressedPixelFormatFromCompressedPixelFormat != v8)
            return 0;
          return 6;
        }
        return 7;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1735549492)
        return 7;
      v4 = 1735549752;
LABEL_97:
      if (UncompressedPixelFormatFromCompressedPixelFormat != v4)
        return 0;
      return 7;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1815162993)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1751411059)
        return 6;
      v10 = 1751527984;
      goto LABEL_107;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1815162994
      || UncompressedPixelFormatFromCompressedPixelFormat == 1815361650)
    {
      return 1;
    }
    v5 = 1815491698;
    return UncompressedPixelFormatFromCompressedPixelFormat == v5;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1380410944)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1651519797)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1734501175)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1717855600)
            return 6;
          v8 = 1717856627;
          goto LABEL_111;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1734501176
          || UncompressedPixelFormatFromCompressedPixelFormat == 1734504496)
        {
          return 7;
        }
        v4 = 1734505012;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1651925815)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1651925816
            && UncompressedPixelFormatFromCompressedPixelFormat != 1651926376)
          {
            v4 = 1652056888;
            goto LABEL_97;
          }
          return 7;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1651519798)
          return 7;
        v4 = 1651847472;
      }
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1647719527)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1650943795)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1647719528)
          return 7;
        v6 = 25400;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1650943796
          || UncompressedPixelFormatFromCompressedPixelFormat == 1650946096)
        {
          return 7;
        }
        v6 = 28722;
      }
      v4 = v6 | 0x62670000;
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1647392368)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1380410945)
      {
        v9 = 26689;
LABEL_78:
        v5 = v9 | 0x52470000;
        return UncompressedPixelFormatFromCompressedPixelFormat == v5;
      }
      return 1;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1647392369)
      return 7;
    v5 = 1647589490;
    return UncompressedPixelFormatFromCompressedPixelFormat == v5;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226735)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1278555444)
      {
        if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226736) > 6
          || ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 48)) & 0x45) == 0)
        {
          return 0;
        }
        return 6;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1278555445
        && UncompressedPixelFormatFromCompressedPixelFormat != 1378955371)
      {
        v9 = 16961;
        goto LABEL_78;
      }
      return 1;
    }
    if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226488) > 0x30
      || ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 56)) & 0x1400000000001) == 0)
    {
      v5 = 1111970369;
      return UncompressedPixelFormatFromCompressedPixelFormat == v5;
    }
    return 6;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704437)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 32)
        return 1;
      v8 = 825306677;
      goto LABEL_111;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 825437747)
      return 6;
    v10 = 875704422;
LABEL_107:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v10)
      return 0;
    return v2;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 875704949)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875704950)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 875836518)
      {
        v5 = 875836534;
        return UncompressedPixelFormatFromCompressedPixelFormat == v5;
      }
      return 1;
    }
    return 3;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 875704438)
  {
    v7 = 875704934;
    goto LABEL_103;
  }
  return v2;
}

const __CFString *cmpweak_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients()
{
  if (MEMORY[0x1E0CED858])
    return (const __CFString *)*MEMORY[0x1E0CED858];
  else
    return CFSTR("UseOptimalMSRCoefficients");
}

uint64_t ___getHWQueueForFormat_block_invoke_2(uint64_t a1)
{
  uint64_t result;
  int v3;
  int NumberOfScalerCores;
  int v5;
  const __CFAllocator *v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  int v10;
  int v11;

  if (*(_DWORD *)(a1 + 40))
  {
    result = CMPhotoUnifiedJPEGDecoderHardwareAvailable();
    if (!(_DWORD)result)
      return result;
    v3 = CMPhotoUnifiedJPEGDecoderNumHardwareCores();
    NumberOfScalerCores = FigGetNumberOfScalerCores();
    v5 = NumberOfScalerCores + 2 * v3 + ((NumberOfScalerCores + 1) >> 1);
    v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 32) + 48;
    v8 = "com.apple.CMPhoto.jfifhw.feederQueue";
    v9 = "com.apple.CMPhoto.jfifhw.workerQueue";
    v10 = v5;
    v11 = 1;
  }
  else
  {
    result = CMPhotoSupportsHEVCHWDecode();
    if (!(_DWORD)result)
      return result;
    v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 32) + 96;
    v8 = "com.apple.CMPhoto.heifhw.feederQueue";
    v9 = "com.apple.CMPhoto.heifhw.workerQueue";
    v10 = 2;
    v11 = 2;
  }
  return _createAsyncQueueElements(v6, v7, v8, v9, v10, v11);
}

void ___setupHWCacheIfNeeded_block_invoke(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  const __CFAllocator *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  if (CMPhotoUnifiedJPEGDecoderHardwareAvailable() && !*(_BYTE *)(*(_QWORD *)(a1 + 40) + 240))
  {
    v2 = 2 * CMPhotoUnifiedJPEGDecoderNumHardwareCores();
    v3 = *(_DWORD **)(a1 + 40);
    v3[62] = 0;
    v4 = CFGetAllocator(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 264) = CFArrayCreateMutable(v4, v2, 0);
    v5 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v5 + 264))
      goto LABEL_12;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256) = dispatch_semaphore_create(v2);
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v5 + 256))
    {
      *(_BYTE *)(v5 + 240) = 1;
      *(_DWORD *)(v5 + 244) = v2;
    }
    else
    {
LABEL_12:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16991;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v6 = *(const void **)(v5 + 256);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256) = 0;
        v5 = *(_QWORD *)(a1 + 40);
      }
      v7 = *(const void **)(v5 + 264);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 264) = 0;
      }
    }
  }
}

uint64_t CMPhotoUnifiedJPEGDecoderHardwareAvailable()
{
  if (_isHWAvailableHelper_onceToken != -1)
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  return _isHWAvailableHelper_sHWAvailable;
}

uint64_t CMPhotoUnifiedJPEGDecoderNumHardwareCores()
{
  if (_isHWAvailableHelper_onceToken != -1)
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  if (_isHWAvailableHelper_sHWAvailable)
    return _isHWAvailableHelper_sNumCores;
  else
    return 0;
}

uint64_t ___getMarkSurfacesNonPurgeable_block_invoke()
{
  uint64_t result;

  result = FigServer_IsServerProcess();
  _getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable = (_DWORD)result != 0;
  return result;
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsync(_QWORD *a1, const __CFNumber *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5, void *aBlock)
{
  uint64_t v12;
  uint64_t v13;

  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("DryRun")))
  {
    v12 = FigSignalErrorAt();
  }
  else
  {
    aBlock = _Block_copy(aBlock);
    v12 = CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(a1, a2, theDict, a4, a5, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  v13 = v12;
  if (aBlock && (_DWORD)v12)
    _Block_release(aBlock);
  return v13;
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v18 = -1;
  v14 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v18, 0, 0);
  if ((_DWORD)v14)
    goto LABEL_9;
  if (a6)
  {
    if (a3 && CFDictionaryContainsKey(a3, CFSTR("DryRun")))
    {
      v14 = FigSignalErrorAt();
      goto LABEL_9;
    }
    v14 = _createModifiedDecodeOptionsIfNeeded(a1, a2, -1, a3, a4, &cf);
    if ((_DWORD)v14)
    {
LABEL_9:
      v16 = v14;
      goto LABEL_11;
    }
    v15 = *(uint64_t (**)(_QWORD *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(a1[4] + 96);
    if (v15)
    {
      v14 = v15(a1, v18, cf, a4, a5, a6, a7);
      goto LABEL_9;
    }
    v16 = 4294950302;
  }
  else
  {
    v16 = 4294950306;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v16;
}

uint64_t _decodeImageForIndexAsync(uint64_t a1, unint64_t a2, const void *a3, int a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  char v14;
  unint64_t v15;

  v15 = a2;
  v14 = 0;
  result = _checkImageIndex(a1 + 40, &v15, &v14);
  if (!(_DWORD)result)
    return _queueAsyncImageDecode(a1, 0, 0, a3, v14, a4, a5, a6, a7);
  return result;
}

uint64_t _decodeImageForIndexAsync_0(uint64_t a1, uint64_t a2, const void *a3, int a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  __CFDictionary *DeepCopy;
  __CFDictionary *v14;
  int SizeIfPresent;
  uint64_t v16;
  uint64_t v17;
  _DWORD *AsyncRequest;
  _QWORD *v19;
  CFTypeRef v20;
  uint64_t v21;
  _QWORD *v22;
  const void *v23;
  char v25;
  char v26[5];
  int v27[2];
  char v28;

  if (!a2)
  {
    v28 = 0;
    *(_QWORD *)v27 = 0;
    memset(v26, 0, sizeof(v26));
    if (a3)
    {
      DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)(a1 + 40), a3);
      if (!DeepCopy)
        return 4294950305;
      v14 = DeepCopy;
      v25 = 0;
      if (CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("PreferLowMemory"), &v25))
        v26[0] = v25;
      CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("HighPriority"), &v28);
      CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("UseLimitedConcurrencyQueue"), v26);
      SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a3, CFSTR("ReservedRequestID"), v27);
      if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a3, CFSTR("AccelerationMode"), &v26[1]))
      {
        if (*(_DWORD *)&v26[1] > 1u)
        {
LABEL_27:
          v21 = FigSignalErrorAt();
          v22 = 0;
          goto LABEL_28;
        }
        *(_DWORD *)&v26[1] = 1;
      }
      if (SizeIfPresent)
      {
        v16 = *(_QWORD *)v27;
        if (!*(_QWORD *)v27)
          goto LABEL_27;
        goto LABEL_15;
      }
    }
    else
    {
      v14 = 0;
    }
    v17 = CMPhotoDecompressionSessionReserveRequestID(*(_QWORD *)(a1 + 16), (unint64_t *)v27);
    if ((_DWORD)v17)
    {
      v21 = v17;
      v22 = 0;
      goto LABEL_24;
    }
    v16 = *(_QWORD *)v27;
LABEL_15:
    AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x40uLL, v16, v28 != 0, (const void *)a1, v26[0], 0, a6, a7, a4);
    if (AsyncRequest)
    {
      v19 = AsyncRequest;
      AsyncRequest[12] = 0;
      if (v14)
        v20 = CFRetain(v14);
      else
        v20 = 0;
      v19[7] = v20;
      if (a5)
        *a5 = *(_QWORD *)v27;
      v21 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(*(_QWORD *)(a1 + 16), v19);
      if ((_DWORD)v21)
        v22 = v19;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
      v21 = 4294950305;
    }
LABEL_24:
    if (!v14)
    {
      if (v22)
      {
LABEL_29:
        v23 = (const void *)v22[7];
        if (v23)
        {
          CFRelease(v23);
          v22[7] = 0;
        }
        CMPhotoDecompressionSessionFreeAsyncRequest(v22);
      }
      return v21;
    }
LABEL_28:
    CFRelease(v14);
    if (v22)
      goto LABEL_29;
    return v21;
  }
  return FigSignalErrorAt();
}

uint64_t _decodeImageForIndexAsync_1(uint64_t *a1, uint64_t a2, const __CFDictionary *a3, int a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  return _decodeImageAsync(a1, a2, -1, 0, a3, a4, a5, a6, a7);
}

uint64_t _decodeImageAsync(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef theDict, int a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  const __CFAllocator *v16;
  __CFDictionary *DeepCopy;
  int SizeIfPresent;
  BOOL v19;
  uint64_t ThumbnailGeometryForIndex_0;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int ShouldDecodeAlphaAutomatically;
  char ShouldUseHWDecoderForSize;
  _DWORD *AsyncRequest;
  _DWORD *v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t v31;
  int v32;
  const void *v33;
  const void *v34;
  uint64_t v37;
  uint64_t v38;
  char v39[5];
  int v40;
  char v41;
  uint64_t v42;
  int v43[2];
  char v44;

  v44 = 0;
  v42 = 0;
  *(_QWORD *)v43 = 0;
  v41 = 0;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (theDict)
  {
    LOBYTE(v37) = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PreferLowMemory"), &v37))
      v39[0] = v37;
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("HighPriority"), &v44);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseLimitedConcurrencyQueue"), v39);
    v16 = CFGetAllocator(a1);
    DeepCopy = CMPhotoDictionaryCreateDeepCopy(v16, theDict);
    if (!DeepCopy)
    {
      v21 = 4294950305;
LABEL_12:
      v22 = 0;
      if (!DeepCopy)
        goto LABEL_48;
LABEL_47:
      CFRelease(DeepCopy);
      goto LABEL_48;
    }
    SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent(theDict, CFSTR("ReservedRequestID"), v43);
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("AccelerationMode"), &v39[1]))
      v19 = *(_DWORD *)&v39[1] >= 3u;
    else
      v19 = 0;
    if (v19)
      goto LABEL_10;
  }
  else
  {
    DeepCopy = 0;
    SizeIfPresent = 0;
  }
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a2, 0, 3, 0, &v41, &v42);
  if (!v41)
  {
    ShouldDecodeAlphaAutomatically = 0;
    if (SizeIfPresent)
      goto LABEL_18;
LABEL_21:
    ThumbnailGeometryForIndex_0 = CMPhotoDecompressionSessionReserveRequestID(a1[2], (unint64_t *)v43);
    if ((_DWORD)ThumbnailGeometryForIndex_0)
      goto LABEL_11;
    goto LABEL_22;
  }
  LODWORD(v37) = 0;
  ThumbnailGeometryForIndex_0 = _copyImageSubsamplingForIndex_1((uint64_t)a1, a2, &v37);
  if ((_DWORD)ThumbnailGeometryForIndex_0)
    goto LABEL_11;
  ShouldDecodeAlphaAutomatically = CMPhotoShouldDecodeAlphaAutomatically(theDict, v37, &v40);
  if (!SizeIfPresent)
    goto LABEL_21;
LABEL_18:
  if (!*(_QWORD *)v43)
  {
LABEL_10:
    ThumbnailGeometryForIndex_0 = FigSignalErrorAt();
LABEL_11:
    v21 = ThumbnailGeometryForIndex_0;
    goto LABEL_12;
  }
LABEL_22:
  ShouldUseHWDecoderForSize = *(_DWORD *)&v39[1] == 2;
  if (!*(_DWORD *)&v39[1])
  {
    v37 = 0;
    v38 = 0;
    if (a4 == 1)
    {
      ThumbnailGeometryForIndex_0 = _getThumbnailGeometryForIndex_0((uint64_t)a1, a2, a3, &v37, &v38, 0);
      if ((_DWORD)ThumbnailGeometryForIndex_0)
        goto LABEL_11;
    }
    else if (a4)
    {
      ThumbnailGeometryForIndex_0 = _getAuxiliaryImageGeometryForIndex_1((uint64_t)a1, a2, a3, v24, &v37, &v38, 0);
      if ((_DWORD)ThumbnailGeometryForIndex_0)
        goto LABEL_11;
    }
    else
    {
      ThumbnailGeometryForIndex_0 = _getImageGeometryForIndex_1((uint64_t)a1, a2, v23, &v37, &v38, 0);
      if ((_DWORD)ThumbnailGeometryForIndex_0)
        goto LABEL_11;
    }
    ShouldUseHWDecoderForSize = CMPhotoShouldUseHWDecoderForSize(v38 * v37, 0);
  }
  AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x68uLL, *(uint64_t *)v43, v44 != 0, a1, v39[0], ShouldUseHWDecoderForSize, a8, a9, a6);
  if (AsyncRequest)
  {
    v28 = AsyncRequest;
    if (DeepCopy)
      v29 = CFRetain(DeepCopy);
    else
      v29 = 0;
    *((_QWORD *)v28 + 12) = v29;
    v30 = (CFTypeRef)a1[6];
    if (v30)
      v30 = CFRetain(v30);
    *((_QWORD *)v28 + 11) = v30;
    v28[14] = a4;
    *((_QWORD *)v28 + 6) = a2;
    v31 = v42;
    if (!ShouldDecodeAlphaAutomatically)
      v31 = -1;
    *((_QWORD *)v28 + 8) = a3;
    *((_QWORD *)v28 + 9) = v31;
    v32 = v40;
    if (!ShouldDecodeAlphaAutomatically)
      v32 = 0;
    v28[20] = v32;
    if (a7)
      *a7 = *(_QWORD *)v43;
    v21 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(a1[2], v28);
    if ((_DWORD)v21)
      v22 = v28;
    else
      v22 = 0;
    if (DeepCopy)
      goto LABEL_47;
  }
  else
  {
    v22 = 0;
    v21 = 4294950305;
    if (DeepCopy)
      goto LABEL_47;
  }
LABEL_48:
  if (v22)
  {
    v33 = (const void *)v22[11];
    if (v33)
    {
      CFRelease(v33);
      v22[11] = 0;
    }
    v34 = (const void *)v22[12];
    if (v34)
    {
      CFRelease(v34);
      v22[12] = 0;
    }
    CMPhotoDecompressionSessionFreeAsyncRequest(v22);
  }
  return v21;
}

uint64_t CMPhotoDecompressionSessionEnqueueAsynchronousRequest(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  intptr_t v10;
  CFIndex v11;
  int8x16_t v12;
  void (*v13)(int8x16_t *);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD block[6];
  int v20;
  CFRange v21;

  result = 4294950306;
  if (!a1)
    return result;
  if (!a2)
    return result;
  if (!*a2)
    return result;
  v5 = a2[2];
  if (!*(_QWORD *)(*(_QWORD *)(v5 + 32) + 128))
    return result;
  v18 = 0;
  v6 = MEMORY[0x1E0C809B0];
  if (*((_BYTE *)a2 + 12))
  {
    v7 = a1 + 192;
  }
  else
  {
    if (*((_BYTE *)a2 + 13))
    {
      v8 = *(_DWORD *)(v5 + 536);
      v9 = *(NSObject **)(a1 + 40);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___getHWQueueForFormat_block_invoke;
      block[3] = &__block_descriptor_tmp_31_0;
      v20 = v8;
      block[4] = a1;
      block[5] = &v18;
      dispatch_sync(v9, block);
      v7 = v18;
      goto LABEL_10;
    }
    v7 = a1 + 144;
  }
  v18 = v7;
LABEL_10:
  v10 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v7 + 24), 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v21.length = CFArrayGetCount(*(CFArrayRef *)(v18 + 32));
  v21.location = 0;
  v11 = CFArrayBSearchValues(*(CFArrayRef *)(v18 + 32), v21, a2, (CFComparatorFunction)_compareAsyncDecodeRequests, 0);
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v18 + 32), v11, a2);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), (const void *)*a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  v12.i64[0] = v6;
  v12.i64[1] = 0x40000000;
  v13 = __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke;
  v14 = &__block_descriptor_tmp_11_3;
  v17 = v10 != 0;
  v15 = v18;
  v16 = a1;
  CFRetain((CFTypeRef)a1);
  if (v10)
    dispatch_async(*(dispatch_queue_t *)(v18 + 16), &v12);
  else
    __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke(&v12);
  return 0;
}

uint64_t CMPhotoDecompressionSessionReserveRequestID(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  result = 4294950306;
  if (a1 && a2)
  {
    v4 = (unint64_t *)(a1 + 24);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 + 1;
    }
    while (__stxr(v6, v4));
    result = 0;
    *a2 = v6;
  }
  return result;
}

_DWORD *CMPhotoDecompressionSessionCreateAsyncRequest(size_t size, uint64_t a2, int a3, const void *a4, char a5, char a6, uint64_t a7, uint64_t a8, int a9)
{
  _DWORD *v16;
  _DWORD *v17;
  CFTypeRef v18;

  if (size <= 0x2F)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    v16 = malloc_type_calloc(1uLL, size, 0xE23B2BE6uLL);
    v17 = v16;
    if (v16)
    {
      *(_QWORD *)v16 = a2;
      v16[2] = a3;
      if (a4)
        v18 = CFRetain(a4);
      else
        v18 = 0;
      *((_QWORD *)v17 + 2) = v18;
      *((_QWORD *)v17 + 3) = a7;
      *((_QWORD *)v17 + 4) = a8;
      v17[10] = a9;
      *((_BYTE *)v17 + 12) = a5;
      *((_BYTE *)v17 + 13) = a6;
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return v17;
}

uint64_t _getTileSizeForIndex(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t TileGeometryFromPictureTileCursorService;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, CFTypeRef *);
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64x2_t v19;
  unint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef cf;

  v22 = 0;
  cf = 0;
  v20 = 0;
  v21 = 0;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v11)
  {
    v16 = 4294954514;
    goto LABEL_16;
  }
  TileGeometryFromPictureTileCursorService = v11(v10, a2, &cf, 0);
  if ((_DWORD)TileGeometryFromPictureTileCursorService)
    goto LABEL_21;
  v13 = cf;
  v14 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
  {
LABEL_15:
    v16 = 0;
    goto LABEL_16;
  }
  v15 = v14(v13, &v22);
  v16 = v15;
  v17 = 0;
  if ((_DWORD)v15 != -17161)
  {
    if (!(_DWORD)v15)
    {
      v19 = 0uLL;
      TileGeometryFromPictureTileCursorService = _getTileGeometryFromPictureTileCursorService(v22, &v19, &v20, 0);
      if (!(_DWORD)TileGeometryFromPictureTileCursorService)
      {
        v17 = v19.i64[1] * v19.i64[0] > 1uLL;
        goto LABEL_8;
      }
LABEL_21:
      v16 = TileGeometryFromPictureTileCursorService;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_8:
  if (a4)
    *a4 = v17;
  if (a5)
    *a5 = v20;
  if (a6)
    *a6 = v21;
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  return v16;
}

uint64_t _getTileGeometryFromPictureTileCursorService(const void *a1, uint64x2_t *a2, unint64_t *a3, unint64_t a4)
{
  CFAllocatorRef v7;
  uint64x2_t v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64x2_t v19;
  uint64x2_t v20;
  CGSize size;
  CFDictionaryRef dict;

  v7 = CFGetAllocator(a1);
  dict = 0;
  v8 = 0uLL;
  size = (CGSize)0;
  if ((unint64_t)a2 | a4)
  {
    CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
    v10 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (!v10)
      goto LABEL_27;
    v11 = v10(CMBaseObject, *MEMORY[0x1E0CC4C38], v7, &dict);
    if ((_DWORD)v11)
      goto LABEL_32;
    if (!CGSizeMakeWithDictionaryRepresentation(dict, &size))
    {
LABEL_31:
      v11 = FigSignalErrorAt();
      goto LABEL_32;
    }
    v8 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)size));
    if (dict)
    {
      v19 = v8;
      CFRelease(dict);
      v8 = v19;
      dict = 0;
    }
  }
  if ((unint64_t)a3 | a4)
  {
    v20 = v8;
    v12 = FigPictureTileCursorServiceGetCMBaseObject();
    v13 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v13)
    {
      v11 = v13(v12, *MEMORY[0x1E0CC4C30], v7, &dict);
      if (!(_DWORD)v11)
      {
        if (CGSizeMakeWithDictionaryRepresentation(dict, &size))
        {
          v14 = vcvtad_u64_f64(size.width);
          v15 = vcvtad_u64_f64(size.height);
          v16 = !v14 || v15 == 0;
          if (!v16 && !(v14 >> 16) && v15 < 0x10000)
          {
            if (dict)
            {
              CFRelease(dict);
              dict = 0;
            }
            v8 = v20;
            if (!a2)
              goto LABEL_23;
            goto LABEL_22;
          }
        }
        goto LABEL_31;
      }
LABEL_32:
      v17 = v11;
      goto LABEL_28;
    }
LABEL_27:
    v17 = 4294954514;
    goto LABEL_28;
  }
  v15 = 0;
  v14 = 0;
  if (a2)
LABEL_22:
    *a2 = v8;
LABEL_23:
  if (a3)
  {
    *a3 = v14;
    a3[1] = v15;
  }
  v17 = 0;
  if (a4)
  {
    *(_QWORD *)a4 = v14 * v8.i64[0];
    *(_QWORD *)(a4 + 8) = v15 * v8.i64[1];
  }
LABEL_28:
  if (dict)
    CFRelease(dict);
  return v17;
}

BOOL CMPhotoUnifiedJPEGDecoderFileSupportedByHardware(uint64_t a1, uint64_t a2)
{
  if (_isHWAvailableHelper_onceToken != -1)
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  return _isHWAvailableHelper_sHWAvailable
      && (*(_DWORD *)(a1 + 48) == 4 || *(_QWORD *)(a1 + 32) <= 0xC800000uLL)
      && _createHWDecoderIfNeeded(a1, a2) == 0;
}

uint64_t CMPhotoUnifiedJPEGDecoderDecode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, _QWORD *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, __CVBuffer *a13, CVPixelBufferRef *a14)
{
  uint64_t v14;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  double v52;
  unint64_t v53;
  OSType PixelFormatType;
  _BOOL4 v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  __CVBuffer *v61;
  uint64_t v62;
  uint64_t CVPixelBufferNotBackedByIOSurface;
  int v64;
  int v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  IOSurfaceRef IOSurface;
  _BOOL4 v71;
  uint64_t PooledIOSurfaceFromStreamRange;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  IOSurfaceRef v76;
  const void *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  signed int v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int output_dimensions;
  unint64_t v101;
  unint64_t v102;
  char v103;
  __CVBuffer *v104;
  _BOOL4 v105;
  double v107;
  double v108;
  double v109;
  double v110;
  OSType v111;
  __CVBuffer *v112;
  _DWORD *v113;
  uint64_t v114;
  size_t v115;
  size_t v116;
  unint64_t v117;
  unint64_t v118;
  CFMutableDictionaryRef v119;
  CFMutableDictionaryRef Mutable;
  uint64_t v121;
  uint64_t v122;
  uint64_t PixelBufferDataPointers;
  int v124;
  uint8x8_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  _WORD *v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  _WORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint32x4_t v150;
  uint32x4_t v151;
  uint16x4_t *v152;
  int v153;
  uint32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _WORD *v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint32x4_t v165;
  uint32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  uint32x4_t v169;
  int16x8_t v170;
  _BOOL4 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  unsigned int *v181;
  int v182;
  BOOL v183;
  __int128 v184;
  uint64_t v185;
  const void *v186;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  _BOOL4 cf;
  BOOL v192;
  _QWORD v193[4];
  int v194;
  int v195;
  int v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  int v207;
  CVPixelBufferRef v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  CVPixelBufferRef v212[4];
  __CVBuffer *v213;
  __CVBuffer *v214;
  __int128 v215;
  __CVBuffer *v216;
  __CVBuffer *v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  if (!a14)
    return 4294950306;
  v14 = a8;
  v20 = a10;
  v192 = 0;
  v21 = _prepare(a1, a2, a4, a5, a8, 0, a10, &v192);
  if ((_DWORD)v21)
    return v21;
  v182 = a4;
  v186 = (const void *)a2;
  v22 = (int *)MEMORY[0x1E0CA1FC0];
  v188 = v14;
  v189 = a5;
  if (!v192)
  {
LABEL_145:
    v83 = 0;
    goto LABEL_146;
  }
  v23 = *MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    v23 = *v22;
  }
  v24 = *a7;
  v25 = a7[1];
  v26 = a7[2];
  v27 = a7[3];
  LODWORD(v193[0]) = 0;
  v28 = *(unsigned int *)(a1 + 148);
  v181 = (unsigned int *)(a1 + 148);
  v29 = *(unsigned int *)(a1 + 152);
  v212[0] = 0;
  v197 = 0u;
  v198 = 0u;
  *(_QWORD *)&v184 = v27;
  *((_QWORD *)&v184 + 1) = v26;
  v178 = v25;
  v179 = v24;
  if (v23 == 1)
  {
    kdebug_trace();
    v25 = v178;
    v24 = v179;
    v26 = *((_QWORD *)&v184 + 1);
    v27 = v184;
  }
  v30 = 1;
  if ((v24 & 1) == 0 && (v25 & 1) == 0 && (v26 & 1) == 0)
    v30 = v27 & 1;
  if ((int)a5 <= 875836517)
  {
    if ((_DWORD)a5 != 875704422)
    {
      v31 = 875704422;
      if ((_DWORD)a5 != 875704934)
        goto LABEL_32;
    }
  }
  else if ((_DWORD)a5 != 875836518)
  {
    if ((_DWORD)a5 == 1380401729 || (v31 = 875704422, (_DWORD)a5 == 1111970369))
    {
      if (!a12)
        LOBYTE(v30) = 1;
      v31 = a5;
      if ((v30 & 1) == 0)
      {
        v32 = *(_DWORD *)(a1 + 164);
        if (v32 == 2)
          v33 = 875836518;
        else
          v33 = 875704422;
        if (v32 == 1)
          v31 = 875704934;
        else
          v31 = v33;
      }
    }
    goto LABEL_32;
  }
  if (!a12)
    v30 = 1;
  if (v30)
    v31 = a5;
  else
    v31 = 875704422;
LABEL_32:
  v183 = (v24 | v25) != 0;
  if (v24 | v25 || v26 | v27)
  {
    v34 = *(unsigned int *)(a1 + 156);
    v35 = *(unsigned int *)(a1 + 160);
    v36 = v24 / v34;
    v37 = (v24 + v26 + v34 - 1) / v34 - v24 / v34;
    v38 = v37 * v34;
    v39 = *(unsigned int *)(a1 + 152);
    if (v38 >= *(unsigned int *)(a1 + 148))
      v28 = *(unsigned int *)(a1 + 148);
    else
      v28 = v38;
    v175 = v25 / v35;
    v176 = v36;
    *(_QWORD *)&v197 = v36;
    *((_QWORD *)&v197 + 1) = v25 / v35;
    v173 = (v25 + v27 + v35 - 1) / v35 - v25 / v35;
    v174 = v37;
    *(_QWORD *)&v198 = v37;
    *((_QWORD *)&v198 + 1) = v173;
    if (v173 * v35 >= v39)
      v29 = v39;
    else
      v29 = v173 * v35;
  }
  else
  {
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v176 = 0;
  }
  v177 = a7;
  if ((_DWORD)v14)
  {
    if (v28 >> v14 << v14 == v28)
      v40 = v28 >> v14;
    else
      v40 = (v28 >> v14) + 1;
    if (v29 >> v14 << v14 == v29)
      v41 = v29 >> v14;
    else
      v41 = (v29 >> v14) + 1;
    if (v40 >= v41)
      v42 = v41;
    else
      v42 = v40;
    v43 = v14;
    if ((int)v14 >= 1 && v42 <= 3)
    {
      v44 = v14;
      do
      {
        v43 = v44 - 1;
        v45 = v28 >> (v44 - 1);
        if (v45 << (v44 - 1) == v28)
          v40 = v28 >> (v44 - 1);
        else
          v40 = v45 + 1;
        if (v29 >> v43 << v43 == v29)
          v41 = v29 >> v43;
        else
          v41 = (v29 >> v43) + 1;
        if (v40 >= v41)
          v46 = v41;
        else
          v46 = v40;
        if (v44 < 2)
          break;
        --v44;
      }
      while (v46 < 4);
    }
  }
  else
  {
    v43 = 0;
    v41 = v29;
    v40 = v28;
  }
  if (!JPEGDeviceInterface_supportsDecodeSize(*(unsigned int *)(a1 + 148), *(unsigned int *)(a1 + 152), *(_DWORD *)(a1 + 164), v40, v41))
  {
    v62 = 4294950302;
    goto LABEL_135;
  }
  if (a13)
  {
    v47 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a13));
    v49 = vcvtad_u64_f64(v48);
    v51 = vcvtad_u64_f64(v50);
    v53 = vcvtad_u64_f64(v52);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a13);
    v55 = !v183 && v184 == 0;
    v56 = v40 == v51 && v41 == v53;
    v57 = v56 && v47 == 0;
    v58 = v57 && v49 == 0;
    v59 = v58 && (_DWORD)v31 == PixelFormatType;
    v60 = !v59 || !v55;
    v20 = a10;
    v22 = (int *)MEMORY[0x1E0CA1FC0];
    if (!v60)
    {
      v61 = (__CVBuffer *)CFRetain(a13);
      v212[0] = v61;
      if (a6 && CVPixelBufferGetIOSurface(v61))
      {
        v62 = FigSignalErrorAt();
        goto LABEL_135;
      }
LABEL_99:
      if (_isHWAvailableHelper_onceToken != -1)
        dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
      v64 = *v22;
      v180 = _isHWAvailableHelper_sIsParavirtualized;
      if (_isHWAvailableHelper_sIsParavirtualized)
      {
        v172 = 0;
      }
      else
      {
        if (v64 == 1)
          kdebug_trace();
        v65 = CMPhotoDecompressionSessionCopyPooledJPEGHWSession(*(_QWORD *)a1, (unsigned int *)v193);
        v64 = *v22;
        if (*v22 == 1)
        {
          kdebug_trace();
          v64 = *v22;
        }
        v172 = v65 == 0;
      }
      if (v64 == 1)
        kdebug_trace();
      if (v176 | v175 | v174 | v173)
        v66 = (uint64_t *)&v197;
      else
        v66 = 0;
      v67 = v193[0];
      v69 = *(_QWORD *)(a1 + 224);
      v68 = *(_QWORD *)(a1 + 232);
      IOSurface = CVPixelBufferGetIOSurface(v212[0]);
      v71 = a9 != 0;
      v62 = JPEGDecompressSurface(v67, v180, v69, v68, (uint64_t)IOSurface, v181, v71, v20, v40, v41, v66, 0);
      if ((_DWORD)v62 == -536870192)
      {
        *(_QWORD *)&v209 = 0;
        PooledIOSurfaceFromStreamRange = _createPooledIOSurfaceFromStreamRange((uint64_t)v186, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0, (IOSurfaceRef *)&v209);
        if ((_DWORD)PooledIOSurfaceFromStreamRange)
        {
          v62 = PooledIOSurfaceFromStreamRange;
          v14 = v188;
          v20 = a10;
          v22 = (int *)MEMORY[0x1E0CA1FC0];
LABEL_133:
          if (v172)
            CMPhotoDecompressionSessionRecyclePooledJPEGHWSession(*(_QWORD *)a1, LODWORD(v193[0]), 0);
          goto LABEL_135;
        }
        v73 = v193[0];
        v74 = v209;
        v75 = *(_QWORD *)(a1 + 232);
        v76 = CVPixelBufferGetIOSurface(v212[0]);
        v62 = JPEGDecompressSurface(v73, v180, v74, v75, (uint64_t)v76, v181, v71, a10, v40, v41, v66, 0);
        if (*(_BYTE *)(a1 + 240))
          IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1 + 224));
        v77 = *(const void **)(a1 + 224);
        if (v77)
          CFRelease(v77);
        *(_QWORD *)(a1 + 224) = v74;
        *(_BYTE *)(a1 + 240) = 1;
      }
      v14 = v188;
      v20 = a10;
      v22 = (int *)MEMORY[0x1E0CA1FC0];
      v78 = *((_QWORD *)&v184 + 1);
      v79 = v184;
      if (!(_DWORD)v62)
      {
        if (!v183 && v184 == 0)
          goto LABEL_132;
        v80 = v179 - v197 * *(unsigned int *)(a1 + 156);
        v81 = v178 - *((_QWORD *)&v197 + 1) * *(unsigned int *)(a1 + 160);
        if (v43)
        {
          v82 = 1 << v43;
          v80 /= v82;
          if (*((_QWORD *)&v184 + 1) >> v43 << v43 == *((_QWORD *)&v184 + 1))
            v78 = *((_QWORD *)&v184 + 1) >> v43;
          else
            v78 = (*((_QWORD *)&v184 + 1) >> v43) + 1;
          if ((unint64_t)v184 >> v43 << v43 == (_QWORD)v184)
            v79 = (unint64_t)v184 >> v43;
          else
            v79 = ((unint64_t)v184 >> v43) + 1;
          v81 /= v82;
        }
        v62 = CMPhotoSetPixelBufferCLAPFromRect(v212[0], 1, 1, (double)v80, (double)v81, (double)(unint64_t)v78, (double)v79);
        if (!(_DWORD)v62)
        {
LABEL_132:
          v62 = 0;
          *a14 = v212[0];
          v212[0] = 0;
        }
      }
      goto LABEL_133;
    }
  }
  if (*v22 == 1)
    kdebug_trace();
  if (a6)
    CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v31, v40, v41, *(unsigned int *)(a1 + 156), *(unsigned int *)(a1 + 160), a11, 0, v212);
  else
    CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(v186, v31, v40, v41, a12 == 0, *(unsigned int *)(a1 + 156), *(unsigned int *)(a1 + 160), 0, a11, 0, v212);
  v62 = CVPixelBufferNotBackedByIOSurface;
  if (*v22 == 1)
    kdebug_trace();
  if (!(_DWORD)v62)
    goto LABEL_99;
LABEL_135:
  if (v212[0])
    CFRelease(v212[0]);
  a7 = v177;
  if (*v22 == 1)
    kdebug_trace();
  if (v182 || !(_DWORD)v62)
  {
    if (v192)
      return v62;
    goto LABEL_145;
  }
  v192 = 0;
  v83 = 1;
  v62 = _prepare(a1, (uint64_t)v186, 1, v189, v14, 0, v20, &v192);
  if ((_DWORD)v62 || v192)
    return v62;
LABEL_146:
  v84 = *v22;
  if (*v22 == 1)
  {
    kdebug_trace();
    v84 = *v22;
  }
  v85 = *a7;
  v86 = a7[1];
  v87 = a7;
  v88 = a7[2];
  v89 = v87[3];
  v208 = 0;
  v207 = 0;
  v216 = 0;
  v217 = 0;
  v215 = 0uLL;
  v213 = 0;
  v214 = 0;
  if (v84 == 1)
    kdebug_trace();
  v206 = 0;
  v204 = 0u;
  v205 = 0u;
  v202 = 0u;
  v203 = 0u;
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v197 = 0u;
  if (*(_DWORD *)(a1 + 140) == 8)
  {
    v90 = *(_DWORD *)(a1 + 112);
    v196 = 0;
    v91 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v189, v90 != 2, &v196);
    if (v90 != 2)
    {
      if (!a12 && !v91)
      {
        v92 = 1;
        goto LABEL_157;
      }
      v95 = v189;
      if ((int)v189 <= 1111970368)
      {
        if (v189 == 875704422 || v189 == 875704934 || v189 == 875836518)
        {
          v94 = 0;
          if (a12)
            v95 = 875704422;
          else
            v95 = v189;
          goto LABEL_198;
        }
LABEL_191:
        v94 = 0;
        if (*(_DWORD *)(a1 + 136) == 4)
          v95 = 1278226488;
        else
          v95 = 875704422;
        goto LABEL_198;
      }
      if (v189 != 1380401729)
      {
        if (v189 == 1278226488)
        {
LABEL_190:
          v94 = 0;
LABEL_198:
          v92 = 1;
          goto LABEL_199;
        }
        if (v189 != 1111970369)
          goto LABEL_191;
      }
      if (!a12)
      {
        v94 = 0;
        v92 = 1;
        goto LABEL_168;
      }
      v95 = 1111970369;
      if (v189 != 1111970369 || !a6)
      {
        v97 = *(int *)(a1 + 136);
        v94 = 0;
        if (v97 >= 5)
          v95 = 875704422;
        else
          v95 = dword_1A8294DF0[v97];
        goto LABEL_198;
      }
      goto LABEL_190;
    }
  }
  else
  {
    v196 = 0;
    v91 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v189, 0, &v196);
  }
  v92 = 0;
LABEL_157:
  v93 = *(_DWORD *)(a1 + 140);
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    if (v93 < 9)
    {
      v94 = 8 - v93;
      if (*(_DWORD *)(a1 + 100) == 3)
        v95 = 1111970369;
      else
        v95 = 1278226488;
      goto LABEL_199;
    }
    goto LABEL_163;
  }
  if (v93 == 12)
  {
LABEL_163:
    v94 = 16 - v93;
    if (*(_DWORD *)(a1 + 100) == 3)
    {
      if (*(_DWORD *)(a1 + 136) == 3 && *(_DWORD *)(a1 + 116) == 1)
        v95 = 1952854576;
      else
        v95 = 1815491698;
    }
    else
    {
      v95 = 1278226742;
    }
    goto LABEL_199;
  }
  v94 = 0;
  if (v91)
  {
LABEL_168:
    v95 = v189;
    goto LABEL_199;
  }
  if (v196 == 18 && v93 == 8)
    v95 = 1278226488;
  else
    v95 = v189;
LABEL_199:
  v98 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v95, v92, &v196);
  if ((_DWORD)v98)
  {
LABEL_321:
    v62 = v98;
    v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    goto LABEL_325;
  }
  if (v196 == 18 && (v189 == 825306677 || v189 == 1932996149 || v189 == 825437747))
    v95 = v189;
  applejpeg_decode_clear_options();
  v99 = applejpeg_decode_set_option_outformat();
  if (v99
    || (v85 | v86 || v88 | v89) && (v99 = applejpeg_decode_set_option_crop()) != 0
    || (_DWORD)v188 && (v99 = applejpeg_decode_set_option_outsize()) != 0)
  {
    v98 = CMPhotoAppleJPEGErrorToCMPhotoError(v99);
    goto LABEL_321;
  }
  v195 = 0;
  v194 = 0;
  output_dimensions = applejpeg_decode_get_output_dimensions();
  if (output_dimensions)
  {
    v62 = CMPhotoAppleJPEGErrorToCMPhotoError(output_dimensions);
    v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_325:
    if (v208)
      CFRelease(v208);
    goto LABEL_317;
  }
  LODWORD(v101) = v195;
  v190 = v195;
  LODWORD(v102) = v194;
  v185 = v194;
  v103 = v83 ^ 1;
  if (!(_DWORD)v188)
    v103 = 1;
  if ((v103 & 1) != 0)
  {
    v105 = 0;
    v104 = a13;
    if (!a13)
    {
LABEL_238:
      cf = v105;
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        kdebug_trace();
        LODWORD(v101) = v195;
        LODWORD(v102) = v194;
      }
      v115 = (int)v101;
      v116 = (int)v102;
      if ((_DWORD)v95 == 1952854576)
        goto LABEL_243;
      if ((_DWORD)v95 == 875704934)
      {
        v117 = (int)v101 + (v101 | 0xFFFFFFFFFFFFFFFELL) + 2;
        v118 = (int)v102;
        goto LABEL_245;
      }
      v117 = (int)v101;
      v118 = (int)v102;
      if ((_DWORD)v95 == 875704422)
      {
LABEL_243:
        v117 = (int)v101 + (v101 | 0xFFFFFFFFFFFFFFFELL) + 2;
        v118 = (int)v102 + (v102 | 0xFFFFFFFFFFFFFFFELL) + 2;
      }
LABEL_245:
      if (v117 > (int)v101 || v118 > (int)v102)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          v62 = 4294950305;
          v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          v105 = cf;
          goto LABEL_256;
        }
        v119 = Mutable;
        v121 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CA8FB8], v117 - v115);
        if ((_DWORD)v121 || (v121 = CMPhotoCFDictionarySetSize(v119, *MEMORY[0x1E0CA8FA0], v118 - v116), (_DWORD)v121))
        {
          v62 = v121;
          v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          v105 = cf;
LABEL_255:
          CFRelease(v119);
          goto LABEL_256;
        }
      }
      else
      {
        v119 = 0;
      }
      if (a6)
        v122 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v95, v115, v116, v117, v118, a11, (uint64_t)v119, &v208);
      else
        v122 = CMPhotoSurfacePoolCreatePixelBuffer(v186, v95, v115, v116, 1, v117, v118, 0, a11, v119, &v208);
      v62 = v122;
      v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      v105 = cf;
      if (v119)
        goto LABEL_255;
LABEL_256:
      if (*v113 == 1)
        kdebug_trace();
      if ((_DWORD)v62)
        goto LABEL_325;
      goto LABEL_259;
    }
  }
  else
  {
    if (v85 | v86)
    {
      v104 = a13;
    }
    else
    {
      v104 = a13;
      if (!(v88 | v89))
      {
        v88 = *(_QWORD *)(a1 + 56);
        v89 = *(_QWORD *)(a1 + 64);
      }
    }
    v101 = v88 >> v188;
    if (v88 >> v188 << v188 != v88)
      ++v101;
    v102 = v89 >> v188;
    if (v89 >> v188 << v188 != v89)
      ++v102;
    v105 = v101 != v195 || v102 != v194;
    v195 = v101;
    v194 = v102;
    if (!v104)
      goto LABEL_238;
  }
  CMPhotoGetPixelBufferCLAPAsRect(v104);
  v108 = v107;
  v110 = v109;
  v111 = CVPixelBufferGetPixelFormatType(v104);
  LODWORD(v101) = v195;
  LODWORD(v102) = v194;
  if ((_DWORD)v95 != v111 || v108 != (double)v195 || v110 != (double)v194)
    goto LABEL_238;
  v112 = (__CVBuffer *)CFRetain(v104);
  v208 = v112;
  v113 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (a6 && CVPixelBufferGetIOSurface(v112))
  {
    v114 = FigSignalErrorAt();
LABEL_329:
    v62 = v114;
    goto LABEL_325;
  }
LABEL_259:
  v114 = CVPixelBufferLockBaseAddress(v208, 0);
  if ((_DWORD)v114)
    goto LABEL_329;
  PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v208, 0, 0, &v207, (uint64_t)&v216, (uint64_t)&v215, (uint64_t)&v213);
  if ((_DWORD)PixelBufferDataPointers)
    goto LABEL_323;
  v212[0] = v216;
  v212[1] = v213;
  v212[2] = v217;
  v212[3] = v214;
  v209 = v215;
  v210 = 0;
  v211 = 0;
  v124 = applejpeg_decode_set_option_stride();
  if (v124)
    goto LABEL_322;
  if (*v113 == 1)
    kdebug_trace();
  v124 = applejpeg_decode_image_all();
  if ((v124 + 1) > 1)
  {
LABEL_322:
    PixelBufferDataPointers = CMPhotoAppleJPEGErrorToCMPhotoError(v124);
LABEL_323:
    v62 = PixelBufferDataPointers;
    goto LABEL_324;
  }
  if (v94 >= 1)
  {
    v62 = 4294950306;
    if ((int)v200 <= 15)
    {
      if ((_DWORD)v200 == 4)
      {
        v162 = HIDWORD(v199);
        if (SHIDWORD(v199) >= 1)
        {
          v163 = 0;
          v164 = DWORD2(v199);
          v165 = (uint32x4_t)vdupq_n_s32(v94);
          v166 = (uint32x4_t)vnegq_s32(vdupq_n_s32(8 - 2 * v94));
          do
          {
            if (v164 >= 1)
            {
              v167 = 0;
              v168 = v197 + *((_QWORD *)&v204 + 1) * v163;
              do
              {
                v125.i32[0] = *(_DWORD *)(v168 + 4 * v167);
                v169 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v125));
                v170 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u32(v169, v165), (int8x16_t)vshlq_u32(v169, v166));
                *(int16x4_t *)v170.i8 = vmovn_s32((int32x4_t)v170);
                v125 = (uint8x8_t)vmovn_s16(v170);
                *(_DWORD *)(v168 + 4 * v167) = v125.i32[0];
                v164 = DWORD2(v199);
                ++v167;
              }
              while ((int)v167 < SDWORD2(v199));
              v162 = HIDWORD(v199);
            }
            ++v163;
          }
          while (v163 < v162);
        }
      }
      else
      {
        if ((_DWORD)v200 != 5)
          goto LABEL_324;
        v140 = HIDWORD(v199);
        if (SHIDWORD(v199) >= 1)
        {
          v141 = 0;
          v142 = DWORD2(v199);
          do
          {
            if (v142 >= 1)
            {
              v143 = 0;
              v144 = v197 + *((_QWORD *)&v204 + 1) * v141;
              do
              {
                *(_BYTE *)(v144 + v143) = (*(unsigned __int8 *)(v144 + v143) << v94) | (*(unsigned __int8 *)(v144 + v143) >> (8 - 2 * v94));
                v142 = DWORD2(v199);
                ++v143;
              }
              while ((int)v143 < SDWORD2(v199));
              v140 = HIDWORD(v199);
            }
            ++v141;
          }
          while (v141 < v140);
        }
      }
    }
    else if ((v200 - 16) < 2)
    {
      v145 = HIDWORD(v199);
      if (SHIDWORD(v199) >= 1)
      {
        v146 = 0;
        v147 = v197;
        v148 = *((_QWORD *)&v204 + 1);
        v149 = DWORD2(v199);
        v150 = (uint32x4_t)vdupq_n_s32(v94);
        v151 = (uint32x4_t)vnegq_s32(vdupq_n_s32(16 - 2 * v94));
        do
        {
          if (v149 >= 1)
          {
            v152 = (uint16x4_t *)(v147 + v146 * v148);
            v153 = v149;
            do
            {
              v154 = vmovl_u16(*v152);
              *v152++ = (uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v154, v150), (int8x16_t)vshlq_u32(v154, v151)));
              --v153;
            }
            while (v153);
          }
          ++v146;
        }
        while (v146 != v145);
      }
    }
    else
    {
      if ((_DWORD)v200 != 18)
      {
        if ((_DWORD)v200 == 19)
        {
          v126 = HIDWORD(v199);
          if (SHIDWORD(v199) >= 1)
          {
            v127 = 0;
            v128 = v197;
            v129 = *((_QWORD *)&v204 + 1);
            v130 = DWORD2(v199);
            v131 = 16 - 2 * v94;
            do
            {
              if (v130 >= 1)
              {
                v132 = (_WORD *)(v128 + v127 * v129);
                v133 = v130;
                do
                {
                  *v132 = (*v132 << v94) | ((unsigned __int16)*v132 >> v131);
                  ++v132;
                  --v133;
                }
                while (v133);
              }
              ++v127;
            }
            while (v127 != v126);
            if ((int)v126 >= 2)
            {
              v134 = 0;
              v135 = v126 >> 1;
              v136 = *((_QWORD *)&v197 + 1);
              v137 = v205;
              do
              {
                if (v130 >= 1)
                {
                  v138 = (_WORD *)(v136 + v134 * v137);
                  v139 = v130;
                  do
                  {
                    *v138 = (*v138 << v94) | ((unsigned __int16)*v138 >> v131);
                    ++v138;
                    --v139;
                  }
                  while (v139);
                }
                ++v134;
              }
              while (v134 != v135);
            }
          }
          goto LABEL_314;
        }
LABEL_324:
        CVPixelBufferUnlockBaseAddress(v208, 0);
        goto LABEL_325;
      }
      v155 = HIDWORD(v199);
      if (SHIDWORD(v199) >= 1)
      {
        v156 = 0;
        v157 = v197;
        v158 = *((_QWORD *)&v204 + 1);
        v159 = DWORD2(v199);
        do
        {
          if (v159 >= 1)
          {
            v160 = (_WORD *)(v157 + v156 * v158);
            v161 = v159;
            do
            {
              *v160 = (*v160 << v94) | ((unsigned __int16)*v160 >> (16 - 2 * v94));
              ++v160;
              --v161;
            }
            while (v161);
          }
          ++v156;
        }
        while (v156 != v155);
      }
    }
  }
LABEL_314:
  if (v105)
  {
    v193[0] = 0;
    v193[1] = 0;
    v193[2] = v190;
    v193[3] = v185;
    PixelBufferDataPointers = CMPhotoPixelBufferFillOutsideCropRect(v208, 0, v193);
    if ((_DWORD)PixelBufferDataPointers)
      goto LABEL_323;
  }
  CVPixelBufferUnlockBaseAddress(v208, 0);
  v62 = 0;
  *a14 = v208;
LABEL_317:
  if (*v113 == 1)
    kdebug_trace();
  return v62;
}

uint64_t _prepare(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, BOOL *a8)
{
  _BOOL4 ShouldUseHWForOperation;
  _DWORD *v14;
  uint64_t HWDecoderIfNeeded;
  BOOL v16;
  BOOL v17;

  ShouldUseHWForOperation = CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(a1, a3);
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (ShouldUseHWForOperation)
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    HWDecoderIfNeeded = _createHWDecoderIfNeeded(a1, a2);
    if (*v14 == 1)
      kdebug_trace();
    v16 = a3 != 2;
    if (!(_DWORD)HWDecoderIfNeeded)
      v16 = 0;
    if (a3 == 2 && (_DWORD)HWDecoderIfNeeded)
      return HWDecoderIfNeeded;
    v17 = !v16;
    if (!v16 && (a3 || !a6))
    {
      if (!a8)
        return 0;
LABEL_22:
      HWDecoderIfNeeded = 0;
      *a8 = v17;
      return HWDecoderIfNeeded;
    }
  }
  else
  {
    v17 = 0;
  }
  if (*v14 == 1)
    kdebug_trace();
  HWDecoderIfNeeded = _createSWDecoderIfNeeded(a1, a6);
  if (*v14 == 1)
    kdebug_trace();
  if (a8 && !(_DWORD)HWDecoderIfNeeded)
    goto LABEL_22;
  return HWDecoderIfNeeded;
}

BOOL CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(uint64_t a1, int a2)
{
  _BOOL4 ShouldUseHWDecoderForSize;

  if (a2 == 2)
    return 1;
  ShouldUseHWDecoderForSize = CMPhotoShouldUseHWDecoderForSize(*(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56), 1);
  if (*(_DWORD *)(a1 + 48) == 4)
  {
    if (!ShouldUseHWDecoderForSize)
      return 0;
  }
  else if (*(_QWORD *)(a1 + 32) > 0xC800000uLL || !ShouldUseHWDecoderForSize)
  {
    return 0;
  }
  if (_isHWAvailableHelper_onceToken == -1)
  {
    if (a2)
      return 0;
  }
  else
  {
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
    if (a2)
      return 0;
  }
  return _isHWAvailableHelper_sHWAvailable && JPEGDeviceInterface_supportsAppleInterchangeFormats();
}

BOOL CMPhotoShouldUseHWDecoderForSize(unint64_t a1, int a2)
{
  unint64_t *v2;

  v2 = (unint64_t *)&g_cutOffHEIF;
  if (a2)
    v2 = (unint64_t *)&g_cutOffJPEG;
  return *v2 <= a1;
}

uint64_t JPEGDeviceInterface_supportsAppleInterchangeFormats()
{
  pthread_once(&JPEGDeviceInterface_supportsAppleInterchangeFormats_once, (void (*)(void))_checkSupportsAppleInterchangeFormats);
  return _supportsAppleInterchangeFormats;
}

uint64_t CMPhotoSupportsHEVCHWDecode()
{
  _DWORD *v0;

  v0 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (CMPhotoSupportsHEVCHWDecode_onceToken != -1)
    dispatch_once(&CMPhotoSupportsHEVCHWDecode_onceToken, &__block_literal_global_2);
  if (*v0 == 1)
    kdebug_trace();
  return CMPhotoSupportsHEVCHWDecode_supported;
}

uint64_t _createHWDecoderIfNeeded(uint64_t a1, uint64_t a2)
{
  int v4;
  const void *v5;
  const __CFData *DataWrappingIOSurface;
  const void *v7;
  void *v8;
  unsigned int DataPointer;
  CFDataRef v10;
  uint64_t MemorySurface;
  char v12;
  int v13;
  int v14;
  unsigned int PooledIOSurfaceFromStreamRange;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  CFTypeRef v22;
  const UInt8 *BytePtr;
  uint64_t v25;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  size_t Length;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a1 + 144))
  {
    DataWrappingIOSurface = 0;
    v14 = 0;
    if (*(_QWORD *)(a1 + 224))
      DataPointer = 0;
    else
      DataPointer = -16996;
    goto LABEL_52;
  }
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  Length = 0;
  v4 = *(_DWORD *)(a1 + 48);
  if (v4 == 1)
  {
    if (((unint64_t)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40)) & 0x1F) == 0
      && (unint64_t)CFDataGetLength(*(CFDataRef *)(a1 + 40)) > 0x800000)
    {
      v5 = *(const void **)(a1 + 40);
      if (v5)
      {
        DataWrappingIOSurface = (const __CFData *)CFRetain(v5);
        v5 = *(const void **)(a1 + 40);
      }
      else
      {
        DataWrappingIOSurface = 0;
      }
      Length = CFDataGetLength((CFDataRef)v5);
      BytePtr = CFDataGetBytePtr(DataWrappingIOSurface);
      v12 = 1;
      CMPhotoCreateMemorySurface(Length, 1246774599, 1, (uint64_t)BytePtr, Length, 0, (__IOSurface **)&cf);
      v13 = 0;
LABEL_24:
      if (cf)
        goto LABEL_25;
      goto LABEL_29;
    }
    v4 = *(_DWORD *)(a1 + 48);
  }
  if (v4 == 2)
  {
    if (!CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 40), 0, 0))
      goto LABEL_23;
    dataPointerOut = 0;
    lengthAtOffsetOut = 0;
    DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 40), 0, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (!DataPointer)
    {
      v10 = CFDataCreateWithBytesNoCopy(*(CFAllocatorRef *)(a1 + 8), (const UInt8 *)dataPointerOut, lengthAtOffsetOut, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (v10)
      {
        DataWrappingIOSurface = v10;
        v25 = 0;
        if (CMPhotoCopyBackingIOSurfaceFromStorage(*(_QWORD *)(a1 + 40), 2, &cf, &v25, &Length) || v25)
        {
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          MemorySurface = CMPhotoCreateMemorySurface(lengthAtOffsetOut, 1246774599, 1, (uint64_t)dataPointerOut, lengthAtOffsetOut, 0, (__IOSurface **)&cf);
          if ((_DWORD)MemorySurface)
            goto LABEL_71;
          Length = lengthAtOffsetOut;
        }
        MemorySurface = IOSurfaceLock((IOSurfaceRef)cf, 0, 0);
        if (!(_DWORD)MemorySurface)
        {
          v12 = 0;
          v13 = 1;
          goto LABEL_24;
        }
LABEL_71:
        v18 = MemorySurface;
        goto LABEL_58;
      }
      DataPointer = -16991;
    }
    DataWrappingIOSurface = 0;
    v14 = 0;
LABEL_52:
    if (*(unsigned __int8 *)(a1 + 145) | DataPointer)
      v18 = DataPointer;
    else
      v18 = 4294950300;
    goto LABEL_55;
  }
  if (v4 != 4)
  {
LABEL_23:
    DataWrappingIOSurface = 0;
    v13 = 0;
    Length = *(_QWORD *)(a1 + 32);
    v12 = 1;
    goto LABEL_24;
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
    v8 = (void *)CFRetain(v7);
  else
    v8 = 0;
  cf = v8;
  DataWrappingIOSurface = 0;
  v13 = 0;
  Length = IOSurfaceGetAllocSize((IOSurfaceRef)v8);
  v12 = 1;
  if (v8)
  {
LABEL_25:
    v14 = 0;
    if (DataWrappingIOSurface)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_29:
  PooledIOSurfaceFromStreamRange = _createPooledIOSurfaceFromStreamRange(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t *)&Length, (IOSurfaceRef *)&cf);
  if (PooledIOSurfaceFromStreamRange)
  {
    v14 = 0;
    goto LABEL_37;
  }
  v14 = 1;
  if (DataWrappingIOSurface)
    goto LABEL_32;
LABEL_31:
  DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface(*(const __CFAllocator **)(a1 + 8), (IOSurfaceRef)cf, 0, Length);
  if (!DataWrappingIOSurface)
  {
    PooledIOSurfaceFromStreamRange = -16991;
    goto LABEL_37;
  }
LABEL_32:
  v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v17 = JPEGParseJPEGInfo(DataWrappingIOSurface, a1 + 148, 0, 0);
  if (*v16 == 1)
    kdebug_trace();
  *(_BYTE *)(a1 + 144) = 1;
  PooledIOSurfaceFromStreamRange = -16996;
  if (!*(_BYTE *)(a1 + 208))
  {
    v19 = 1024;
    if (*(_BYTE *)(a1 + 180) == 1)
      v19 = 1536;
    v20 = (*(_DWORD *)(a1 + 152) * *(_DWORD *)(a1 + 148));
    PooledIOSurfaceFromStreamRange = v19 >= v20 ? -16996 : v17;
    if (v19 < v20 && !PooledIOSurfaceFromStreamRange)
    {
      *(_BYTE *)(a1 + 145) = 1;
      if ((v12 & 1) == 0)
        IOSurfaceUnlock((IOSurfaceRef)cf, 0, 0);
      DataPointer = 0;
      v21 = Length;
      *(_QWORD *)(a1 + 224) = cf;
      *(_QWORD *)(a1 + 232) = v21;
      cf = 0;
      *(_BYTE *)(a1 + 240) = v14;
      goto LABEL_52;
    }
  }
LABEL_37:
  if (*(unsigned __int8 *)(a1 + 145) | PooledIOSurfaceFromStreamRange)
    v18 = PooledIOSurfaceFromStreamRange;
  else
    v18 = 4294950300;
  if (v13)
    IOSurfaceUnlock((IOSurfaceRef)cf, 0, 0);
LABEL_55:
  v22 = cf;
  if (v14 && cf)
  {
    IOSurfaceDecrementUseCount((IOSurfaceRef)cf);
LABEL_58:
    v22 = cf;
  }
  if (v22)
    CFRelease(v22);
  if (DataWrappingIOSurface)
    CFRelease(DataWrappingIOSurface);
  return v18;
}

uint64_t _createPooledIOSurfaceFromStreamRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, IOSurfaceRef *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *BaseAddress;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, char *, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  IOSurfaceRef buffer;

  buffer = 0;
  v11 = a4;
  if (a5)
    v11 = *a5;
  v12 = CMPhotoSurfacePoolCreateMemorySurface(a1, v11 + 2, 1, &buffer);
  if ((_DWORD)v12 || (v12 = IOSurfaceLock(buffer, 0, 0), (_DWORD)v12))
  {
    v16 = v12;
  }
  else
  {
    BaseAddress = (char *)IOSurfaceGetBaseAddress(buffer);
    v18 = 0;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
    if (v14)
    {
      v15 = v14(a2, a4, a3, BaseAddress, &v18);
      if ((_DWORD)v15)
      {
        v16 = v15;
      }
      else
      {
        if (v18 == a4)
        {
          if (BaseAddress[v11 - 2] != 255 || BaseAddress[v11 - 1] != 217)
          {
            *(_WORD *)&BaseAddress[v11] = -9729;
            v11 += 2;
          }
          IOSurfaceUnlock(buffer, 0, 0);
          if (a5)
            *a5 = v11;
          v16 = 0;
          *a6 = buffer;
          return v16;
        }
        v16 = 4294950304;
      }
    }
    else
    {
      v16 = 4294954514;
    }
    IOSurfaceUnlock(buffer, 0, 0);
  }
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    if (buffer)
      CFRelease(buffer);
  }
  return v16;
}

uint64_t JPEGParseJPEGInfo(const __CFData *a1, uint64_t a2, uint64_t a3, int a4)
{
  const __CFData *v7;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v10;
  uint64_t v11;
  __CFData *Mutable;
  int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  const __CFAllocator *v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  const UInt8 *v28;
  uint64_t v29;
  const __CFData *v30;
  __CFData *v31;
  const __CFAllocator *v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v83;
  unsigned int v84;
  BOOL v85;
  __CFData *v86;
  CFIndex v87;
  CGColorSpace *v88;
  CGColorSpace *v89;
  CGImageSource *v90;
  CGImageSource *v91;
  CGImage *ImageAtIndex;
  CGImage *v93;
  const void *ColorSpace;
  uint32x2_t v95;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  __CFData *v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  _BYTE v110[3];

  v7 = a1;
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(v7);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 20) = 0x100000001;
  if (Length < 3)
    return 4294954387;
  if (BytePtr[1] != 216)
    return 4294954387;
  *(_DWORD *)(a2 + 56) = 2;
  v10 = Length - 2;
  if (Length - 2 < 4)
    return 4294954387;
  v11 = 0;
  Mutable = 0;
  v13 = 0;
  v109 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (unsigned __int8 *)(BytePtr + 2);
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = Length - 2;
  v19 = 1;
  do
  {
    if (*v16 != 255)
    {
      v20 = 0;
      --v18;
      ++v16;
      continue;
    }
    v21 = v16[1];
    v22 = __rev16(*((unsigned __int16 *)v16 + 1));
    v23 = v22 + 2;
    if (v21 <= 0xE1)
    {
      if (v16[1] <= 0xD9u)
      {
        if (v21 != 192 && v21 != 194)
          goto LABEL_53;
        v24 = 4294954387;
        if (v18 < 0xD || v23 > v18)
          goto LABEL_224;
        *(_BYTE *)(a2 + 60) = v21 == 194;
        if (v16[4] != 8)
          goto LABEL_199;
        *(_DWORD *)(a2 + 4) = __rev16(*(unsigned __int16 *)(v16 + 5));
        *(_DWORD *)a2 = __rev16(*(unsigned __int16 *)(v16 + 7));
        v25 = v16[9];
        *(_BYTE *)(a2 + 32) = v25;
        if (v22 != 3 * v25 + 8)
          goto LABEL_199;
        if ((_DWORD)v25 == 3)
        {
          v39 = 0;
          v40 = v16 + 11;
          while (1)
          {
            v42 = *v40;
            v40 += 3;
            v41 = v42;
            v110[v39] = v42;
            if (v39)
            {
              if (v41 != 17)
                goto LABEL_199;
            }
            if (++v39 == 3)
            {
              if (v110[0] > 0x21u)
              {
                if (v110[0] == 34)
                {
                  v43 = 0;
                  v44 = 0x1000000010;
                }
                else
                {
                  if (v110[0] != 65)
                    goto LABEL_199;
                  v43 = 3;
                  v44 = 0x800000020;
                }
              }
              else if (v110[0] == 17)
              {
                v44 = 0x800000008;
                v43 = 2;
              }
              else
              {
                if (v110[0] != 33)
                  goto LABEL_199;
                v43 = 1;
                v44 = 0x800000010;
              }
              v20 = 0;
              *(_QWORD *)(a2 + 8) = v44;
              *(_DWORD *)(a2 + 16) = v43;
              goto LABEL_85;
            }
          }
        }
        if ((_DWORD)v25 != 1)
          goto LABEL_199;
        v20 = 0;
        *(_QWORD *)(a2 + 8) = 0x800000008;
        *(_DWORD *)(a2 + 16) = 4;
        goto LABEL_85;
      }
      if (v21 == 218)
      {
        v24 = 4294954387;
        if ((v11 & 1) == 0 || v18 < 0xA || v23 > v18)
          goto LABEL_224;
        if (v16[4] != *(unsigned __int8 *)(a2 + 32))
          goto LABEL_199;
        v20 = 1;
LABEL_85:
        v11 = 1;
        goto LABEL_184;
      }
      if (v21 == 221)
      {
        v24 = 4294954387;
        if (v18 < 6 || v22 != 4)
          goto LABEL_224;
        v20 = 0;
        *(_DWORD *)(a2 + 28) = __rev16(*((unsigned __int16 *)v16 + 2));
        v23 = 6;
        goto LABEL_184;
      }
LABEL_53:
      v33 = v17;
      v34 = v11;
      v20 = 0;
      if ((v21 & 0xF0) != 0xE0 || v18 < 0xA)
        goto LABEL_182;
      if (v23 > v18)
        goto LABEL_227;
      v108 = v19;
      v20 = 0;
      if (*((_DWORD *)v16 + 1) ^ 0x66697845 | *((unsigned __int16 *)v16 + 4))
        goto LABEL_181;
      if (v22 - 2 < 0x10)
      {
LABEL_182:
        v11 = v34;
        goto LABEL_183;
      }
      if (v16[4] == 69 && v16[5] == 120 && v16[6] == 105 && v16[7] == 102 && !v16[8])
      {
        if (!v16[9])
        {
          v36 = v16 + 10;
          v35 = v16[10];
          if (v35 == 73)
          {
            if (v16[11] == 73 && v16[12] == 42 && !v16[13])
            {
              v38 = 0;
              v37 = *(_DWORD *)(v16 + 14);
LABEL_111:
              v20 = 0;
              if (v37 >= 8)
              {
                v106 = v14;
                if ((v37 & 1) == 0)
                {
                  v48 = v37;
                  v49 = v22 - 10;
                  v50 = v49 - v37;
                  if (v49 >= v37)
                  {
                    v20 = 0;
                    v51 = *(unsigned __int16 *)&v36[v37];
                    v52 = bswap32(v51) >> 16;
                    if (v38)
                      v51 = v52;
                    if ((_WORD)v51 && 12 * (unint64_t)(unsigned __int16)v51 <= v50)
                    {
                      v53 = 0;
                      v54 = 0;
                      v55 = 0;
                      v56 = (unsigned int *)&v16[v48 + 20];
                      do
                      {
                        v57 = *((unsigned __int16 *)v56 - 4);
                        v58 = bswap32(v57) >> 16;
                        if (v38)
                          LOWORD(v57) = v58;
                        v59 = bswap32(*((unsigned __int16 *)v56 - 3)) >> 16;
                        if (!v38)
                          LOWORD(v59) = *((_WORD *)v56 - 3);
                        v60 = *(v56 - 1);
                        v61 = bswap32(v60);
                        if (v38)
                          v60 = v61;
                        if ((unsigned __int16)v57 == 274 && (unsigned __int16)v59 == 3 && v60 == 1)
                        {
                          v67 = *(unsigned __int16 *)v56;
                          v68 = bswap32(v67) >> 16;
                          if (v38)
                            LOWORD(v67) = v68;
                          if ((_WORD)v67)
                          {
                            *(_DWORD *)(a2 + 20) = (unsigned __int16)v67;
                            v55 = 1;
                          }
                        }
                        else if ((unsigned __int16)v57 == 34665 && (unsigned __int16)v59 == 4 && v60 == 1)
                        {
                          v53 = *v56;
                          v66 = bswap32(*v56);
                          if (v38)
                            v53 = v66;
                          v54 = 1;
                        }
                        if (!(_WORD)--v51)
                          break;
                        v56 += 3;
                      }
                      while ((v55 & v54 & 1) == 0);
                      v20 = 0;
                      if (v53 >= 8 && (v53 & 1) == 0)
                      {
                        v69 = v53;
                        v70 = v49 >= v53;
                        v71 = v49 - v53;
                        if (v70)
                        {
                          v20 = 0;
                          v72 = *(unsigned __int16 *)&v36[v69];
                          v73 = bswap32(v72) >> 16;
                          if (v38)
                            v72 = v73;
                          if ((_WORD)v72 && 12 * (unint64_t)(unsigned __int16)v72 <= v71)
                          {
                            v74 = &v16[v69 + 20];
                            while (1)
                            {
                              v75 = *((unsigned __int16 *)v74 - 4);
                              v76 = bswap32(v75) >> 16;
                              if (v38)
                                LOWORD(v75) = v76;
                              v77 = *((unsigned __int16 *)v74 - 3);
                              v78 = bswap32(v77) >> 16;
                              if (v38)
                                LOWORD(v77) = v78;
                              v79 = *((_DWORD *)v74 - 1);
                              v80 = bswap32(v79);
                              if (v38)
                                v79 = v80;
                              v81 = (unsigned __int16)v75 == 40961 && (unsigned __int16)v77 == 3;
                              if (v81 && v79 == 1)
                                break;
                              --v72;
                              v74 += 12;
                              if (!(_WORD)v72)
                              {
                                v20 = 0;
                                goto LABEL_180;
                              }
                            }
                            v20 = 0;
                            v83 = *(unsigned __int16 *)v74;
                            v84 = bswap32(v83) >> 16;
                            if (v38)
                              LOWORD(v83) = v84;
                            *(_DWORD *)(a2 + 24) = (unsigned __int16)v83;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_180:
                v14 = v106;
              }
LABEL_181:
              v19 = v108;
              goto LABEL_182;
            }
          }
          else if (v35 == 77 && v16[11] == 77 && !v16[12] && v16[13] == 42)
          {
            v37 = bswap32(*(_DWORD *)(v16 + 14));
            v38 = 1;
            goto LABEL_111;
          }
        }
        v20 = 0;
        v19 = v108;
      }
      else
      {
        v20 = 0;
      }
LABEL_183:
      v17 = v33;
      goto LABEL_184;
    }
    if (v16[1] > 0xEDu)
    {
      if (v21 == 238)
      {
        if (v18 >= 0x10)
        {
          if (v23 > v18)
            goto LABEL_227;
          if (*((_DWORD *)v16 + 1) == 1651467329 && v16[8] == 101)
          {
            v20 = 0;
            v19 = v16[15];
            v15 = 1;
            goto LABEL_184;
          }
        }
LABEL_52:
        v20 = 0;
        goto LABEL_184;
      }
      if (v21 != 255)
        goto LABEL_53;
      v20 = 0;
      v23 = 1;
    }
    else if (v21 == 226)
    {
      v20 = 0;
      if (!(_BYTE)a4 || v18 < 0x12)
        goto LABEL_184;
      if (v23 > v18)
        goto LABEL_227;
      v27 = v22 - 16;
      if (v22 < 0x10)
        goto LABEL_52;
      v99 = v13;
      v100 = v11;
      v107 = v19;
      v104 = v14;
      v101 = v15;
      v102 = v10;
      v103 = Length;
      v98 = a4;
      v28 = BytePtr;
      v29 = a3;
      v30 = v7;
      v31 = Mutable;
      if (!strncmp((const char *)v16 + 4, "ICC_PROFILE", 0xCuLL))
      {
        v45 = v16[17];
        Mutable = v31;
        v13 = v99;
        v14 = v104;
        if (!v16[17])
        {
          v19 = v107;
          v45 = v109;
          v7 = v30;
          a3 = v29;
          BytePtr = v28;
          v10 = v102;
          Length = v103;
          v15 = v101;
          v11 = v100;
          goto LABEL_109;
        }
        v7 = v30;
        v10 = v102;
        Length = v103;
        v15 = v101;
        v19 = v107;
        v11 = v100;
        if (v109 && v109 != v45)
        {
          v45 = v109;
          a3 = v29;
          BytePtr = v28;
LABEL_109:
          a4 = 0;
          v20 = 0;
          v109 = v45;
          goto LABEL_184;
        }
        v47 = v16[16];
        v97 = v29;
        if (v45 <= (v47 - 1))
        {
          BytePtr = v28;
        }
        else
        {
          BytePtr = v28;
          if (v104 + 1 == v47)
          {
            v109 = v16[17];
            a4 = v98;
            if (Mutable)
              goto LABEL_105;
            Mutable = CFDataCreateMutable(v17, 0);
            if (Mutable)
            {
              v47 = v16[16];
LABEL_105:
              v105 = Mutable;
              CFDataAppendBytes(Mutable, v16 + 18, v27);
              v45 = v109;
              if (v47 != v109)
              {
                v20 = 0;
                v14 = v47;
                Length = v103;
                Mutable = v105;
                v13 = v99;
                v11 = v100;
                v10 = v102;
                v15 = v101;
                v19 = v107;
                a3 = v97;
                goto LABEL_184;
              }
              v13 = 1;
              v14 = v109;
              Length = v103;
              Mutable = v105;
              v10 = v102;
              v15 = v101;
              v19 = v107;
              v11 = v100;
            }
            else
            {
              v10 = v102;
              Length = v103;
              v13 = v99;
              v11 = v100;
              v15 = v101;
              v14 = v104;
              v19 = v107;
              v45 = v109;
            }
          }
        }
        a3 = v97;
        goto LABEL_109;
      }
      v20 = 0;
      Mutable = v31;
      v7 = v30;
      a3 = v29;
      BytePtr = v28;
      a4 = v98;
      v13 = v99;
      v10 = v102;
      Length = v103;
      v15 = v101;
      v14 = v104;
      v19 = v107;
      v11 = v100;
    }
    else
    {
      if (v21 != 234)
        goto LABEL_53;
      if (v18 < 0xE)
        goto LABEL_52;
      if (v23 > v18)
        goto LABEL_227;
      if (v22 < 0xC)
        goto LABEL_52;
      v26 = v11;
      if (*((_DWORD *)v16 + 1) ^ 0x544F5241 | *((unsigned __int16 *)v16 + 4))
        goto LABEL_25;
      if (__rev16(*((unsigned __int16 *)v16 + 5)))
        goto LABEL_52;
      v46 = __rev16(*((unsigned __int16 *)v16 + 6));
      if (!v46 || v22 < 4 * v46 + 12)
      {
LABEL_25:
        v20 = 0;
      }
      else
      {
        v20 = 0;
        *(_BYTE *)(a2 + 33) = 1;
        *(_DWORD *)(a2 + 36) = v46;
        *(_DWORD *)(a2 + 40) = (_DWORD)v16 - (_DWORD)BytePtr + 14;
      }
      v11 = v26;
    }
LABEL_184:
    v70 = v18 >= v23;
    v18 -= v23;
    if (!v70)
      goto LABEL_227;
    v16 += v23;
    if (v21 - 192 <= 0x1D && ((1 << (v21 + 64)) & 0x2C000011) != 0)
      *(_DWORD *)(a2 + 56) += v23;
  }
  while ((v20 & 1) == 0 && v18 > 3);
  if (v20)
  {
    *(_DWORD *)(a2 + 52) = (_DWORD)v16 - (_DWORD)BytePtr;
    if (v15 && v19 != 1)
    {
LABEL_199:
      v24 = 4294954386;
      if (!Mutable)
        return v24;
    }
    else
    {
      if ((_DWORD)a3)
      {
        v85 = BytePtr[v10] == 255 && BytePtr[Length - 1] == 217;
        *(_BYTE *)(a2 + 61) = v85;
      }
      if (v13)
      {
        v86 = Mutable;
        v87 = CFDataGetLength(Mutable);
        Mutable = v86;
        if (v87 >= 1)
        {
          v88 = (CGColorSpace *)MEMORY[0x1A85CF43C](v86);
          v89 = v88;
          if (v88 && CGColorSpaceGetModel(v88) == kCGColorSpaceModelRGB)
            *(_QWORD *)(a2 + 44) = CFRetain(v89);
          CGColorSpaceRelease(v89);
          goto LABEL_217;
        }
      }
      if ((_BYTE)a4)
      {
        if (*(_DWORD *)(a2 + 24) != 1)
        {
          v86 = Mutable;
          v90 = CGImageSourceCreateWithData(v7, 0);
          Mutable = v86;
          if (v90)
          {
            v91 = v90;
            ImageAtIndex = CGImageSourceCreateImageAtIndex(v90, 0, 0);
            if (ImageAtIndex)
            {
              v93 = ImageAtIndex;
              ColorSpace = CGImageGetColorSpace(ImageAtIndex);
              if (ColorSpace)
                ColorSpace = CFRetain(ColorSpace);
              *(_QWORD *)(a2 + 44) = ColorSpace;
              CFRelease(v93);
            }
            CFRelease(v91);
LABEL_217:
            Mutable = v86;
          }
        }
      }
      v95 = vshl_u32((uint32x2_t)vadd_s32(vadd_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 8)), (int32x2_t)-1), (uint32x2_t)vsub_s32(vclz_s32(*(int32x2_t *)(a2 + 8)), (int32x2_t)0x1F0000001FLL));
      *(uint32x2_t *)(a2 + 64) = v95;
      if (!*(_BYTE *)(a2 + 33) || *(_DWORD *)(a2 + 28) == v95.i32[0] && *(_DWORD *)(a2 + 36) == v95.i32[1] - 1)
      {
        v24 = 0;
        if (!Mutable)
          return v24;
      }
      else
      {
        v24 = 0;
        *(_BYTE *)(a2 + 33) = 0;
LABEL_224:
        if (!Mutable)
          return v24;
      }
    }
LABEL_225:
    CFRelease(Mutable);
    return v24;
  }
LABEL_227:
  v24 = 4294954387;
  if (Mutable)
    goto LABEL_225;
  return v24;
}

CFDataRef CMPhotoCreateDataWrappingIOSurface(const __CFAllocator *a1, IOSurfaceRef buffer, unint64_t a3, CFIndex a4)
{
  size_t AllocSize;
  CFIndex v9;
  __IOSurface *v10;
  const UInt8 *BaseAddress;
  const UInt8 *v12;
  const __CFAllocator *v13;
  int v14;
  CFDataRef v15;
  CFDataRef v16;
  _BOOL4 v17;
  CFAllocatorContext context;

  if (!buffer)
    return 0;
  AllocSize = IOSurfaceGetAllocSize(buffer);
  v9 = AllocSize - a3;
  if (AllocSize < a3 || a4 + a3 > AllocSize)
  {
    FigSignalErrorAt();
    return 0;
  }
  v10 = (__IOSurface *)CFRetain(buffer);
  if (IOSurfaceLock(v10, 1u, 0))
  {
    v16 = 0;
    if (!v10)
      return v16;
    goto LABEL_23;
  }
  if (a4)
    v9 = a4;
  BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(v10);
  if (BaseAddress)
  {
    v12 = BaseAddress;
    context.version = 0;
    context.info = v10;
    memset(&context.retain, 0, 24);
    context.allocate = (CFAllocatorAllocateCallBack)_ioSurfaceDeallocator_allocate;
    context.reallocate = 0;
    context.deallocate = (CFAllocatorDeallocateCallBack)_ioSurfaceDeallocator_deallocateDirect;
    context.preferredSize = 0;
    v13 = CFAllocatorCreate(0, &context);
    v14 = -16990;
    if (v13)
    {
      v15 = CFDataCreateWithBytesNoCopy(a1, &v12[a3], v9, v13);
      v16 = v15;
      v17 = v15 == 0;
      if (v15)
        v14 = 0;
      else
        v14 = -16990;
      if (v15)
        v10 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
  }
  else
  {
    v13 = 0;
    v16 = 0;
    v17 = 1;
    v14 = -16990;
  }
  if (v10 && v17)
    IOSurfaceUnlock(v10, 1u, 0);
  if (v14 && v16)
  {
    CFRelease(v16);
    v16 = 0;
  }
  if (v13)
    CFRelease(v13);
  if (v10)
LABEL_23:
    CFRelease(v10);
  return v16;
}

uint64_t JPEGDeviceInterface_supportsDecodeSize(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  BOOL v9;
  BOOL v10;

  pthread_once(&JPEGDeviceInterface_supportsAppleInterchangeFormats_once, (void (*)(void))_checkSupportsAppleInterchangeFormats);
  if (_supportsAppleInterchangeFormats)
    return 1;
  switch(a3)
  {
    case 0:
      v10 = a4 > 0xF && a5 > 0xF;
      goto LABEL_14;
    case 1:
      v9 = a4 > 0xF;
      goto LABEL_11;
    case 2:
    case 4:
      v9 = a4 > 7;
      goto LABEL_11;
    case 3:
      v9 = a4 > 0x1F;
LABEL_11:
      v10 = v9 && a5 > 7;
LABEL_14:
      result = v10;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

intptr_t CMPhotoDecompressionSessionRecyclePooledJPEGHWSession(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;

  if (!*(_BYTE *)(a1 + 240))
    return FigSignalErrorAt();
  v6 = (os_unfair_lock_s *)(a1 + 248);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 248));
  if (a3)
  {
    os_unfair_lock_unlock(v6);
    JPEGDeviceInterface_closeDriverConnection(a2);
  }
  else
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0, (const void *)a2);
    os_unfair_lock_unlock(v6);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 256));
}

uint64_t CMPhotoDecompressionSessionCopyPooledJPEGHWSession(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  uint64_t v5;
  const __CFArray *v6;
  unsigned int ValueAtIndex;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a2)
    return 4294950306;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v4 = *(NSObject **)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___setupHWCacheIfNeeded_block_invoke;
  v9[3] = &unk_1E53F6C70;
  v9[4] = &v10;
  v9[5] = a1;
  dispatch_sync(v4, v9);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(a1 + 240))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 256), 0xFFFFFFFFFFFFFFFFLL);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 248));
      v6 = *(const __CFArray **)(a1 + 264);
      if (v6 && CFArrayGetCount(v6) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
      }
      else
      {
        ValueAtIndex = JPEGDeviceInterface_openDriverConnection();
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 248));
      if (ValueAtIndex)
      {
        v5 = 0;
        *a2 = ValueAtIndex;
      }
      else
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 256));
        return 4294950305;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v5;
}

void ___getShouldSetSurfaceOwnership_block_invoke()
{
  _getShouldSetSurfaceOwnership_setOwnership = 1;
}

uint64_t CMPhotoCodecSessionPoolCreateDecompressionSession(CFTypeRef cf, UInt8 a2, uint64_t a3, const opaqueCMFormatDescription *a4, const void *a5, uint64_t a6, uint64_t a7, _QWORD *a8, _BYTE *a9)
{
  CFTypeRef v16;
  __CFData *MutableCopy;
  uint64_t v18;
  const __CFAllocator *v19;
  FourCharCode MediaSubType;
  const __CFDictionary *Extension;
  const __CFString *v22;
  const __CFData *Value;
  const __CFData *v24;
  CFTypeID v25;
  CFTypeID v26;
  CFMutableDataRef Mutable;
  CFIndex v28;
  const __CFData *ValueAtIndex;
  const __CFData *v30;
  CFTypeID v31;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *Data;
  const __CFData *v35;
  const UInt8 *v36;
  CFIndex v37;
  uint64_t v38;
  CFTypeRef v39;
  _QWORD *v40;
  OSStatus v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  char v47;
  CFTypeRef cfa;
  CFTypeRef session;
  UInt8 v50[8];
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  UInt8 v54[15];
  UInt8 bytes;
  CGRect CleanAperture;

  if (cf)
  {
    v16 = cf;
    cfa = 0;
    session = 0;
    v47 = 0;
  }
  else
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    v16 = (CFTypeRef)defaultPool;
    cfa = 0;
    session = 0;
    v47 = 0;
    if (!defaultPool)
    {
      MutableCopy = 0;
      v18 = 4294950305;
      goto LABEL_44;
    }
  }
  MutableCopy = 0;
  if (!a8)
  {
LABEL_41:
    v18 = 0;
    goto LABEL_42;
  }
  v18 = 4294950306;
  if (a4)
  {
    v44 = a6;
    v45 = a7;
    v43 = a8;
    if (a6)
    {
      v19 = CFGetAllocator(v16);
      bytes = a2;
      *(_QWORD *)v54 = a3;
      MediaSubType = CMFormatDescriptionGetMediaSubType(a4);
      Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a4, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (Extension)
      {
        switch(MediaSubType)
        {
          case 0x61763031u:
            v22 = CFSTR("av1C");
            break;
          case 0x68766331u:
            v22 = CFSTR("hvcC");
            break;
          case 0x61766331u:
            v22 = CFSTR("avcC");
            break;
          default:
            goto LABEL_34;
        }
        Value = (const __CFData *)CFDictionaryGetValue(Extension, v22);
        v24 = Value;
        if (Value)
        {
          v25 = CFGetTypeID(Value);
          if (v25 == CFDataGetTypeID())
          {
            MutableCopy = CFDataCreateMutableCopy(v19, 0, v24);
            if (!MutableCopy)
              goto LABEL_61;
            goto LABEL_25;
          }
          v26 = CFGetTypeID(v24);
          if (v26 == CFArrayGetTypeID())
          {
            Mutable = CFDataCreateMutable(v19, 0);
            if (!Mutable)
            {
LABEL_61:
              MutableCopy = 0;
              v18 = 4294950305;
              goto LABEL_42;
            }
            MutableCopy = Mutable;
            if (CFArrayGetCount(v24) >= 1)
            {
              v28 = 0;
              while (1)
              {
                ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v24, v28);
                if (!ValueAtIndex)
                  break;
                v30 = ValueAtIndex;
                v31 = CFGetTypeID(ValueAtIndex);
                if (v31 != CFDataGetTypeID())
                  break;
                BytePtr = CFDataGetBytePtr(v30);
                Length = CFDataGetLength(v30);
                CFDataAppendBytes(MutableCopy, BytePtr, Length);
                if (++v28 >= CFArrayGetCount(v24))
                  goto LABEL_25;
              }
              v18 = 4294950194;
LABEL_58:
              CFRelease(MutableCopy);
LABEL_35:
              MutableCopy = 0;
              if ((_DWORD)v18)
                goto LABEL_42;
LABEL_36:
              v46[0] = v19;
              v46[1] = a4;
              v46[2] = a5;
              v46[3] = a2;
              v38 = CMPhotoCodecSessionPool_CreateSession((uint64_t)v16, 1, MutableCopy, v44, v45, (uint64_t (*)(_QWORD *, uint64_t, void **))_callback_CreateDecompressionSession, (uint64_t)v46, (void **)&session, &v47);
              if (!(_DWORD)v38)
              {
                v39 = session;
                if (v47)
                {
                  v40 = v43;
                  goto LABEL_39;
                }
                v42 = VTSessionCopySupportedPropertyDictionary(session, (CFDictionaryRef *)&cfa);
                v40 = v43;
                if (v42 == -12900 || !v42)
                {
LABEL_39:
                  *v40 = v39;
                  session = 0;
                  if (a9)
                  {
                    v18 = 0;
                    *a9 = v47;
                    goto LABEL_42;
                  }
                  goto LABEL_41;
                }
                v38 = CMPhotoCodecSessionPoolRecycleSession((uint64_t)v16, v39, 1);
                if (!(_DWORD)v38)
                {
                  if (v39)
                  {
                    CFRelease(v39);
                    session = 0;
                  }
                  v38 = CMPhotoCodecSessionPoolFlush((uint64_t)v16, 3);
                  if (!(_DWORD)v38)
                  {
                    v38 = CMPhotoCodecSessionPool_CreateSession((uint64_t)v16, 1, MutableCopy, v44, v45, (uint64_t (*)(_QWORD *, uint64_t, void **))_callback_CreateDecompressionSession, (uint64_t)v46, (void **)&session, &v47);
                    if (!(_DWORD)v38)
                    {
                      v39 = session;
                      goto LABEL_39;
                    }
                  }
                }
              }
              v18 = v38;
              goto LABEL_42;
            }
LABEL_25:
            if (!a5)
            {
              v35 = 0;
              goto LABEL_30;
            }
            Data = CFPropertyListCreateData(v19, a5, kCFPropertyListBinaryFormat_v1_0, 0, 0);
            if (Data)
            {
              v35 = Data;
              v36 = CFDataGetBytePtr(Data);
              v37 = CFDataGetLength(v35);
              CFDataAppendBytes(MutableCopy, v36, v37);
LABEL_30:
              CFDataAppendBytes(MutableCopy, &bytes, 1);
              if (CMFormatDescriptionGetExtension(a4, (CFStringRef)*MEMORY[0x1E0CA8D50]))
              {
                CleanAperture = CMVideoFormatDescriptionGetCleanAperture(a4, 1u);
                *(_QWORD *)v50 = vcvtad_u64_f64(CleanAperture.origin.x);
                v51 = vcvtad_u64_f64(CleanAperture.origin.y);
                v52 = vcvtad_u64_f64(CleanAperture.size.width);
                v53 = vcvtad_u64_f64(CleanAperture.size.height);
                CFDataAppendBytes(MutableCopy, v50, 32);
              }
              CFDataAppendBytes(MutableCopy, v54, 8);
              if (v35)
                CFRelease(v35);
              goto LABEL_36;
            }
            v18 = FigSignalErrorAt();
            goto LABEL_58;
          }
        }
      }
LABEL_34:
      v18 = FigSignalErrorAt();
      goto LABEL_35;
    }
  }
LABEL_42:
  if (cfa)
    CFRelease(cfa);
LABEL_44:
  if (session)
    CFRelease(session);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v18;
}

uint64_t CMPhotoCodecSessionPool_CreateSession(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t, void **), uint64_t a7, void **a8, _BYTE *a9)
{
  const void *v11;
  uint64_t v13;
  CFAllocatorRef *v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *Value;
  const __CFArray *v18;
  void *ValueAtIndex;
  _QWORD *v20;
  uint64_t v21;
  CFIndex Count;
  _DWORD *v23;
  CFTypeRef v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  dispatch_semaphore_t v29;
  CFTypeRef v30;
  int v34;
  unint64_t v38;
  void *key;

  v11 = a3;
  v13 = a1;
  v34 = 0;
  if (a2)
    v14 = (CFAllocatorRef *)(a1 + 88);
  else
    v14 = (CFAllocatorRef *)(a1 + 48);
  v15 = 40;
  if (!a2)
    v15 = 32;
  v38 = *(_QWORD *)(a1 + v15);
  key = 0;
  do
  {
    if (*(_BYTE *)(v13 + 16))
    {
      v21 = 4294950195;
      goto LABEL_57;
    }
    v16 = pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 24));
    if ((_DWORD)v16)
    {
      v21 = v16;
      goto LABEL_57;
    }
    Value = (const __CFArray *)CFDictionaryGetValue(v14[2], v11);
    if (Value)
    {
      v18 = Value;
      if (CFArrayGetCount(Value))
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v18, 0);
        if (ValueAtIndex)
          ValueAtIndex = (void *)CFRetain(ValueAtIndex);
        key = ValueAtIndex;
        CFArrayRemoveValueAtIndex(v18, 0);
        v20 = CFDictionaryGetValue(v14[3], key);
        if (!v20)
        {
          v21 = 4294950195;
          goto LABEL_40;
        }
        if (a2)
          goto LABEL_15;
LABEL_37:
        CFDataGetBytePtr((CFDataRef)v11);
        goto LABEL_15;
      }
    }
    Count = CFArrayGetCount(v14[1]);
    if (Count >= v38)
    {
      CodecSessionPool_PurgeSessionsWithCriteria(v14, (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 1);
      Count = CFArrayGetCount(v14[1]);
    }
    if (Count >= v38)
    {
      v20 = 0;
      v21 = 0;
      goto LABEL_39;
    }
    v23 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E204024717DD0uLL);
    v20 = v23;
    if (!v23)
    {
      v21 = 4294950305;
      goto LABEL_39;
    }
    *v23 = a2;
    v24 = a3;
    if (a3)
      v24 = CFRetain(a3);
    v20[4] = v24;
    v20[5] = 0;
    *((_BYTE *)v20 + 49) = 0;
    v21 = a6(v20, a7, &key);
    v25 = 10;
    if (!a2)
    {
LABEL_23:
      if ((_DWORD)v21 != -12915)
        goto LABEL_27;
      v21 = 4294954381;
      if (Count >= 1 && v25 >= 2)
        goto LABEL_31;
LABEL_38:
      v13 = a1;
LABEL_39:
      v11 = a3;
      goto LABEL_40;
    }
LABEL_27:
    while (a2 == 1 && (_DWORD)v21 == -12913 && Count >= 1 && v25 > 1)
    {
LABEL_31:
      --v25;
      CodecSessionPool_PurgeSessionsWithCriteria(v14, (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 1);
      v21 = a6(v20, a7, &key);
      Count = CFArrayGetCount(v14[1]);
      if (!a2)
        goto LABEL_23;
    }
    if ((_DWORD)v21)
      goto LABEL_38;
    v26 = key;
    v20[3] = key;
    CFDictionarySetValue(v14[3], v26, v20);
    CFArrayGetCount(v14[1]);
    CFArrayAppendValue(v14[1], v26);
    v27 = v34;
    if (key)
      v27 = 1;
    v34 = v27;
    v13 = a1;
    v11 = a3;
    if (!a2)
      goto LABEL_37;
LABEL_15:
    v21 = 0;
    v20[1] = a5;
    v20[2] = a4;
    *((_BYTE *)v20 + 48) = 0;
    v20 = 0;
LABEL_40:
    CodecGateway_Destroy(v20);
    if ((_DWORD)v21 || key)
    {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
      if ((_DWORD)v21)
        goto LABEL_57;
    }
    else
    {
      v28 = malloc_type_calloc(1uLL, 0x10uLL, 0xE00402B90B96AuLL);
      if (!v28 || (v29 = dispatch_semaphore_create(0), (*((_QWORD *)v28 + 1) = v29) == 0))
      {
        WaitingClient_Destroy((const void **)v28);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
        v21 = 4294950305;
        goto LABEL_57;
      }
      if (v11)
        v30 = CFRetain(v11);
      else
        v30 = 0;
      *(_QWORD *)v28 = v30;
      WaitingClient_Destroy(0);
      CFArrayAppendValue(v14[4], v28);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
      dispatch_semaphore_wait(*((dispatch_semaphore_t *)v28 + 1), 0xFFFFFFFFFFFFFFFFLL);
      WaitingClient_Destroy((const void **)v28);
    }
  }
  while (!key);
  *a8 = key;
  key = 0;
  v21 = 0;
  if (a9)
    *a9 = v34;
LABEL_57:
  WaitingClient_Destroy(0);
  if (key)
    CFRelease(key);
  return v21;
}

void WaitingClient_Destroy(const void **a1)
{
  const void *v2;
  NSObject *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      dispatch_release(v3);
    free(a1);
  }
}

void CodecGateway_Destroy(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[4];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[5];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t _callback_CreateDecompressionSession(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;

  CMVideoFormatDescriptionGetCleanAperture(*(CMVideoFormatDescriptionRef *)(a2 + 8), 1u);
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  v4 = *MEMORY[0x1E0CA1FC0];
  if (*(_BYTE *)(a2 + 24))
  {
    if (v4 == 1)
      kdebug_trace();
    v5 = VTTileDecompressionSessionCreate();
    if (*v3 == 1)
LABEL_9:
      kdebug_trace();
  }
  else
  {
    if (v4 == 1)
      kdebug_trace();
    v5 = VTDecompressionSessionCreateWithOptions();
    if (*v3 == 1)
      goto LABEL_9;
  }
  return v5;
}

uint64_t _runAsyncDecodeRequest(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  CFTypeRef cf;

  cf = 0;
  v5 = _decodeImage(*(const __CFAllocator **)(a1 + 40), *(_QWORD *)(a2 + 16), *(const void **)(a2 + 48), *(_DWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(const __CFDictionary **)(a2 + 80), *(unsigned __int8 *)(a2 + 72), *(_QWORD *)a2, *(_DWORD *)(a2 + 40), 1, (CGImageRef *)&cf);
  if ((_DWORD)v5)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
    cf = 0;
  }
  v6 = *(const void **)(a2 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v7 = *(const void **)(a2 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a2 + 80) = 0;
  }
  return v5;
}

uint64_t _runAsyncDecodeRequest_0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  const void *v6;
  CFTypeRef cf;

  cf = 0;
  if (*(_DWORD *)(a2 + 48))
  {
    v5 = 4294950302;
  }
  else
  {
    v5 = _decodeImage_0(a1, 0, *(const __CFDictionary **)(a2 + 56), *(_QWORD *)a2, *(_DWORD *)(a2 + 40), 1, (CGImageRef *)&cf);
    if ((_DWORD)v5)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a3 = cf;
      cf = 0;
    }
  }
  v6 = *(const void **)(a2 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a2 + 56) = 0;
  }
  return v5;
}

uint64_t _runAsyncDecodeRequest_1(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t AuxiliaryImageForIndex_0;
  CFTypeRef v10;
  uint64_t v11;
  int v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  uint64_t v15;
  int v16;
  const __CFAllocator *v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v22;
  __int16 v23;
  int v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef cf;
  CGImageRef v32;

  v32 = 0;
  v30 = 0;
  cf = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  if (!*(_DWORD *)(a2 + 56) || *(_QWORD *)(a2 + 72) == -1)
  {
    v6 = *(_QWORD *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 16);
    if (!v8)
      goto LABEL_24;
    AuxiliaryImageForIndex_0 = v8(v6, v7, &cf, 0);
    if ((_DWORD)AuxiliaryImageForIndex_0)
      goto LABEL_50;
    v10 = cf;
    v11 = *(_QWORD *)(a2 + 64);
    if (v11 == -1)
    {
      v14 = 0;
LABEL_12:
      if (*(_QWORD *)(a2 + 72) != -1)
      {
        v24 = 2;
        AuxiliaryImageForIndex_0 = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex((uint64_t)a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 96), *(_DWORD *)(a2 + 80), &v27, (__CFDictionary **)&v26);
        if (!(_DWORD)AuxiliaryImageForIndex_0)
        {
          AuxiliaryImageForIndex_0 = (uint64_t)_createAuxiliaryImageForIndex_0(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 72), (CFDictionaryRef)v26, 2, (CGImageRef *)&v28);
          if (!(_DWORD)AuxiliaryImageForIndex_0)
          {
            AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v10, 0, *(_QWORD *)(a2 + 48), (const __CFDictionary *)v27, *(_QWORD *)a2, 2, 0, (CGImageRef *)&v29);
            if (!(_DWORD)AuxiliaryImageForIndex_0)
            {
              if (_copyAuxiliaryImageTypeInfo((uint64_t)a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 72), v15, 0, (uint64_t)&v25)|| !v25|| (_readAlphaInfoSEIPayload((uint64_t)v25, &v24), v16 = v24, v24 == 2))
              {
                v16 = 0;
              }
              v23 = 0;
              CMPhotoCFDictionaryGetBooleanIfPresent(*(CFDictionaryRef *)(a2 + 96), CFSTR("BackCGImageWithIOSurface"), (_BYTE *)&v23 + 1);
              CMPhotoCFDictionaryGetBooleanIfPresent(*(CFDictionaryRef *)(a2 + 96), CFSTR("PremultiplyWithAlpha"), &v23);
              if (!CMPhotoCreateImageFromAlphaAndMainBuffer((__CVBuffer *)v29, (__CVBuffer *)v28, v16, v23, HIBYTE(v23), *(_DWORD *)(a2 + 40), &v32))goto LABEL_22;
              v17 = CFGetAllocator(a1);
              AuxiliaryImageForIndex_0 = CMPhotoCreateWrappedPixelBufferForType(v17, (CVPixelBufferRef)v29, HIBYTE(v23), *(_DWORD *)(a2 + 40), &v32);
              if (!(_DWORD)AuxiliaryImageForIndex_0)
                goto LABEL_22;
            }
          }
        }
        goto LABEL_50;
      }
      v22 = *(_QWORD *)(a2 + 48);
      if (*(_DWORD *)(a2 + 56) == 2)
      {
        AuxiliaryImageForIndex_0 = _decodeAuxiliaryImage(a1, v10, v14, v22, *(_QWORD *)(a2 + 64), *(CFDictionaryRef *)(a2 + 96), *(_QWORD *)a2, *(_DWORD *)(a2 + 40), &v32);
        if ((_DWORD)AuxiliaryImageForIndex_0)
          goto LABEL_50;
LABEL_22:
        v18 = 0;
        *a3 = v32;
        v32 = 0;
        goto LABEL_27;
      }
      AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v10, v14, v22, *(const __CFDictionary **)(a2 + 96), *(_QWORD *)a2, *(_DWORD *)(a2 + 40), 0, &v32);
      if (!(_DWORD)AuxiliaryImageForIndex_0)
        goto LABEL_22;
LABEL_50:
      v18 = AuxiliaryImageForIndex_0;
      goto LABEL_25;
    }
    v12 = *(_DWORD *)(a2 + 56);
    if (v12 == 1)
    {
      v13 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v13)
        goto LABEL_9;
      goto LABEL_24;
    }
    if (v12)
    {
      v13 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v13)
      {
LABEL_9:
        AuxiliaryImageForIndex_0 = v13(v10, v11, &v30);
        if ((_DWORD)AuxiliaryImageForIndex_0)
          goto LABEL_50;
        v10 = v30;
        v14 = cf;
        goto LABEL_12;
      }
LABEL_24:
      v18 = 4294954514;
      goto LABEL_25;
    }
  }
  v18 = 4294950302;
LABEL_25:
  if (v32)
    CFRelease(v32);
LABEL_27:
  v19 = *(const void **)(a2 + 96);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a2 + 96) = 0;
  }
  v20 = *(const void **)(a2 + 88);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a2 + 88) = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v30)
  {
    CFRelease(v30);
    v30 = 0;
  }
  if (v29)
  {
    CFRelease(v29);
    v29 = 0;
  }
  if (v28)
  {
    CFRelease(v28);
    v28 = 0;
  }
  if (v27)
  {
    CFRelease(v27);
    v27 = 0;
  }
  if (v26)
  {
    CFRelease(v26);
    v26 = 0;
  }
  if (v25)
    CFRelease(v25);
  return v18;
}

void CMPhotoDecompressionSessionFreeAsyncRequest(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    v2 = (const void *)a1[2];
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

void _callback_CompletionHandlerWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a8[2](a8, a1, a2, a3, a4, a5, a6, a7);
  _Block_release(a8);
}

void _callback_CompletionHandlerWrapper_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a6[2](a6, a1, a2, a3, a4, a5);
  _Block_release(a6);
}

double CMPhotoSurfacePoolClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t _callbackDataProviderReleaseImage()
{
  return CGBitmapFreeData();
}

uint64_t _initializeService()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  const __CFBoolean *CFProperty;
  int Int;
  pthread_mutexattr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("AppleJPEGDriver");
  result = IOServiceGetMatchingService(v0, v1);
  _jpegService = result;
  if ((_DWORD)result)
  {
    CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(result, CFSTR("AppleJPEGNumCores"), 0, 0);
    Int = CMPhotoCFNumberGetInt(CFProperty);
    _numberOfJPEGCores = Int;
    if (CFProperty)
    {
      CFRelease(CFProperty);
      Int = _numberOfJPEGCores;
    }
    if (Int < 2)
    {
      v5.__sig = 0;
      *(_QWORD *)v5.__opaque = 0;
      pthread_mutexattr_init(&v5);
      pthread_mutexattr_settype(&v5, 2);
      pthread_mutex_init(&_jpegLock, &v5);
      return pthread_mutexattr_destroy(&v5);
    }
    else
    {
      result = FigSemaphoreCreate();
      _jpegSema = result;
    }
  }
  return result;
}

const __CFBoolean *_checkSupportsAppleInterchangeFormats()
{
  const __CFBoolean *result;

  result = _checkUInt32DriverProperty(CFSTR("AppleJPEGSupportsAppleInterchangeFormats"), (const __CFBoolean *)_supportsAppleInterchangeFormats);
  _supportsAppleInterchangeFormats = (char)result;
  return result;
}

const __CFBoolean *_checkSupportsRSTLogging()
{
  const __CFBoolean *result;

  result = _checkUInt32DriverProperty(CFSTR("AppleJPEGSupportsRSTLogging"), (const __CFBoolean *)_supportsRSTLogging);
  _supportsRSTLogging = (char)result;
  return result;
}

const __CFBoolean *_checkUInt32DriverProperty(CFStringRef key, const __CFBoolean *Int)
{
  io_registry_entry_t v3;
  const __CFBoolean *CFProperty;

  v3 = _jpegService;
  if (_jpegService || (pthread_once(&jpegService_once, (void (*)(void))_initializeService), (v3 = _jpegService) != 0))
  {
    CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v3, key, 0, 0);
    Int = CMPhotoCFNumberGetInt(CFProperty);
    if (CFProperty)
      CFRelease(CFProperty);
  }
  return Int;
}

const __CFBoolean *CMPhotoCFNumberGetInt(const __CFBoolean *result)
{
  const __CFBoolean *v1;
  CFTypeID v2;
  unsigned int valuePtr;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFBooleanGetTypeID())
    {
      return (const __CFBoolean *)(CFBooleanGetValue(v1) != 0);
    }
    else
    {
      valuePtr = 0;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr))
        return (const __CFBoolean *)valuePtr;
      else
        return 0;
    }
  }
  return result;
}

uint64_t _transferToCanvas(uint64_t a1, int a2, char a3, char a4, char a5, unsigned __int8 a6, uint64_t a7, CVPixelBufferRef pixelBuffer, uint64_t a9, int a10, unint64_t *a11, __CVBuffer *a12, uint64_t a13, uint64_t a14)
{
  __CVBuffer *v14;
  uint64_t PixelFormatType;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  const __CFDictionary *v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  __CFDictionary *Mutable;
  uint64_t v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  double v40;
  uint64_t v41;
  float64_t v42;
  float64_t v43;
  float64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  __CVBuffer *v55;
  CGFloat v56;
  CGFloat v57;
  uint64_t v58;
  int v65;
  _OWORD v66[2];
  float64x2_t v67;
  float64x2_t v68;
  _OWORD v69[8];
  uint64_t v70;
  CVPixelBufferRef v71;
  __CVBuffer *v72;

  v14 = pixelBuffer;
  v71 = 0;
  v72 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v18 = CVPixelBufferGetPixelFormatType(a12);
  v19 = v18;
  v21 = a10 != 1 && *(_BYTE *)(a9 + 1) != 0;
  v22 = *(_OWORD *)(a9 + 88) != 0;
  v23 = *(_OWORD *)(a9 + 40) == 0 && *(_OWORD *)(a9 + 56) == 0;
  if ((_DWORD)a7
    && (_DWORD)PixelFormatType != (_DWORD)a7
    && (_DWORD)v18 != (_DWORD)PixelFormatType
    && (CMPhotoGetFullRangeForPixelFormat(PixelFormatType) == (_DWORD)a7
     || CMPhotoGetFullRangeForPixelFormat(a7) == (_DWORD)PixelFormatType)
    && !CMPhotoCreateOtherRangePixelBufferWithBacking(v14, &v71))
  {
    v14 = v71;
  }
  v65 = a14;
  if (v21)
    v24 = a10;
  else
    v24 = 1;
  if ((_DWORD)v19 != (_DWORD)PixelFormatType && ((_DWORD)v19 == 1815491698 || (_DWORD)v19 == 1815162994))
  {
    if (_l64r_insertionWorkaroundEnabled_onceToken != -1)
      dispatch_once(&_l64r_insertionWorkaroundEnabled_onceToken, &__block_literal_global_22);
    v25 = 1;
LABEL_31:
    v28 = a6;
    v29 = a1;
    if (*(_BYTE *)(a9 + 114))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v27 = Mutable;
      if (!Mutable)
      {
        v58 = 4294950305;
        goto LABEL_54;
      }
      CMPhotoCFDictionarySetBoolean(Mutable, CFSTR("PreferLowMemory"), *(unsigned __int8 *)(a9 + 114));
      if (v22)
        goto LABEL_34;
    }
    else
    {
      v27 = 0;
      if (v22)
      {
LABEL_34:
        v69[0] = 0uLL;
        v32 = _flipSizeIfNeeded(v24, *(_QWORD *)(a9 + 88), *(_QWORD *)(a9 + 96), v69);
        if ((_DWORD)v32)
        {
LABEL_53:
          v58 = v32;
          goto LABEL_54;
        }
        v33 = (double)*(unint64_t *)&v69[0];
        v34 = (double)*((unint64_t *)&v69[0] + 1);
        goto LABEL_38;
      }
    }
    v33 = *MEMORY[0x1E0C9D820];
    v34 = *(double *)(MEMORY[0x1E0C9D820] + 8);
LABEL_38:
    v35 = *(_OWORD *)(a9 + 112);
    v69[6] = *(_OWORD *)(a9 + 96);
    v69[7] = v35;
    v70 = *(_QWORD *)(a9 + 128);
    v36 = *(_OWORD *)(a9 + 48);
    v69[2] = *(_OWORD *)(a9 + 32);
    v69[3] = v36;
    v37 = *(_OWORD *)(a9 + 80);
    v69[4] = *(_OWORD *)(a9 + 64);
    v69[5] = v37;
    v38 = *(_OWORD *)(a9 + 16);
    v69[0] = *(_OWORD *)a9;
    v69[1] = v38;
    v32 = _fillEdgesIfNeeded(v14, (uint64_t)v69, v24);
    if ((_DWORD)v32)
      goto LABEL_53;
    v41 = v19;
    v30 = a13;
    v32 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(a1, v14, v27, a2 == 0, v24, v41, a13, a14, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), v33, v34, v39, v40, 1u, 0, a6,
            a3,
            a4,
            a5,
            &v72);
    if ((_DWORD)v32)
      goto LABEL_53;
    v65 = 0;
    v24 = 1;
    v14 = v72;
    goto LABEL_41;
  }
  v25 = 0;
  v26 = (_DWORD)v19 != (_DWORD)PixelFormatType || v21;
  if ((((v26 | v22) ^ 1 | v23) & 1) == 0)
    goto LABEL_31;
  v27 = 0;
  v28 = a6;
  v29 = a1;
  v30 = a13;
LABEL_41:
  v67.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(v14);
  v67.f64[1] = v42;
  v68.f64[0] = v43;
  v68.f64[1] = v44;
  v45 = *(_QWORD *)(a9 + 56);
  v46 = *(_QWORD *)(a9 + 64);
  if (*(_OWORD *)(a9 + 40) != 0 || v45 | v46)
  {
    v32 = CMPhotoApplyCropRectToRect(v67.f64, (double)*(unint64_t *)(a9 + 40), (double)*(unint64_t *)(a9 + 48), (double)v45, (double)v46);
    if ((_DWORD)v32)
      goto LABEL_53;
  }
  v47 = a11[2];
  v48 = a11[3];
  if (*(_OWORD *)a11 == 0 && !(v47 | v48))
  {
    v49 = *MEMORY[0x1E0C9D628];
    v50 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v51 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v52 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v49 = (double)*a11;
    v50 = (double)a11[1];
    v51 = (double)v47;
    v52 = (double)v48;
  }
  v53 = v67.f64[0];
  v54 = v68.f64[0];
  if (!v25)
  {
    v56 = v67.f64[1];
    v57 = v68.f64[1];
    v55 = a12;
    goto LABEL_52;
  }
  v66[0] = vcvtq_u64_f64(vrndaq_f64(v67));
  v66[1] = vcvtq_u64_f64(vrndaq_f64(v68));
  v55 = a12;
  if (CMPhotoPixelBufferCopyCropRectToOffset(v14, 1, (uint64_t *)v66, a12, 1, vcvtad_u64_f64(v49), vcvtad_u64_f64(v50), 0))
  {
    v56 = v67.f64[1];
    v53 = v67.f64[0];
    v57 = v68.f64[1];
    v54 = v68.f64[0];
LABEL_52:
    v32 = CMPhotoScaleAndRotateSessionTransformWithRect(v29, v14, a2 == 0, v24, v55, v30, v65, v28, v53, v56, v54, v57, v49, v50, v51, v52);
    goto LABEL_53;
  }
  v58 = 0;
LABEL_54:
  if (v71)
    CFRelease(v71);
  if (v72)
    CFRelease(v72);
  if (v27)
    CFRelease(v27);
  return v58;
}

uint64_t _fillEdgesIfNeeded(__CVBuffer *a1, uint64_t a2, int a3)
{
  double v6;
  double v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_OWORD *)(a2 + 72) == 0)
    return 0;
  CMPhotoGetPixelBufferCLAPAsRect(a1);
  v16 = vcvtad_u64_f64(v6);
  v17 = vcvtad_u64_f64(v7);
  result = _flipSizeIfNeeded(a3, v16, v17, &v16);
  if (!(_DWORD)result)
  {
    v9 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    if (v16 <= v9 && v17 <= v10)
      return 0;
    if (v10 >= v17)
      v10 = v17;
    if (v9 >= v16)
      v9 = v16;
    v14 = 0uLL;
    *(_QWORD *)&v15 = v9;
    *((_QWORD *)&v15 + 1) = v10;
    v12 = 0uLL;
    v13 = v15;
    result = CMPhotoGetCropPreOrientation(v16, v17, &v12, a3, &v14);
    if (!(_DWORD)result)
    {
      v12 = v14;
      v13 = v15;
      return CMPhotoPixelBufferFillOutsideCropRect(a1, 1, &v12);
    }
  }
  return result;
}

uint64_t CMPhotoScaleAndRotateSessionTransformWithRect(uint64_t a1, __CVBuffer *a2, int a3, int a4, CVPixelBufferRef pixelBuffer, uint64_t a6, int a7, unsigned __int8 a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, double PixelBufferCLAPAsRect, CGFloat a14, CGFloat a15, CGFloat a16)
{
  uint64_t v31;
  uint64_t PixelFormatType;
  double v33;
  double v34;
  double v35;
  uint64_t result;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  __CVBuffer *v42;
  CGRect v43;

  v31 = a1;
  v42 = pixelBuffer;
  v41 = 0;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    v31 = defaultSession;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v43.origin.x = PixelBufferCLAPAsRect;
  v43.origin.y = a14;
  v43.size.width = a15;
  v43.size.height = a16;
  if (CGRectIsNull(v43))
  {
    PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
    a14 = v33;
    a15 = v34;
    a16 = v35;
  }
  result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v41, 0);
  if (!(_DWORD)result)
  {
    if (v41 == 270 || (v39 = a15, v40 = a16, v41 == 90))
    {
      v39 = a16;
      v40 = a15;
    }
    return _convertAndScalePixelBufferOddSafe(v31, a2, 0, a3, a4, PixelFormatType, a6, a7, a9, a10, a11, a12, v39, v40, v37, v38, PixelBufferCLAPAsRect, a14, a15,
             a16,
             1u,
             0,
             a8,
             0,
             0,
             0xFFFFFFFF,
             &v42);
  }
  return result;
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, uint64_t a18, unsigned __int8 a19, char a20,char a21,char a22,__CVBuffer **a23)
{
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a22,
           a23);
}

uint64_t _scaleAndRotateSessionTransformForSizeWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, uint64_t a18, unsigned __int8 a19, char a20,char a21,__CVBuffer **a22)
{
  uint64_t v31;
  __CVBuffer *v32;
  uint64_t v33;
  const __CFDictionary *v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  int v42;
  __CVBuffer *v43;
  int v44;
  const __CFDictionary *v45;
  CGRect v46;

  if (!a22)
    return 4294950306;
  v31 = a1;
  if (!a1)
  {
    v32 = a2;
    v33 = a7;
    v34 = a3;
    v35 = a8;
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    a8 = v35;
    a2 = v32;
    a3 = v34;
    a7 = v33;
    v31 = defaultSession;
  }
  if (a13 == *MEMORY[0x1E0C9D820] && a14 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    v42 = a8;
    v43 = a2;
    v45 = a3;
    v44 = a5;
    v37 = a6;
    v38 = a7;
    v46.origin.x = a9;
    v46.origin.y = a10;
    v46.size.width = a11;
    v46.size.height = a12;
    if (CGRectIsNull(v46))
    {
      CMPhotoGetPixelBufferCLAPAsRect(v43);
      a2 = v43;
      a13 = v39;
      a14 = v40;
      a7 = v38;
      a6 = v37;
      a5 = v44;
      a3 = v45;
    }
    else
    {
      a13 = a11;
      a14 = a12;
      a7 = v38;
      a6 = v37;
      a5 = v44;
      a3 = v45;
      a2 = v43;
    }
    a8 = v42;
  }
  return _convertAndScalePixelBufferOddSafe(v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16),
           *(double *)(MEMORY[0x1E0C9D628] + 24),
           a17,
           a18,
           a19,
           a20,
           a21,
           0xFFFFFFFF,
           a22);
}

uint64_t _convertAndScalePixelBufferOddSafe(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20,unsigned __int8 a21,uint64_t a22,unsigned __int8 a23,char a24,char a25,unsigned int a26,__CVBuffer **a27)
{
  BOOL v27;
  const void **v35;
  double PixelBufferCLAPAsRect;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t PixelFormatType;
  int v46;
  double v47;
  double v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  __CVBuffer *v53;
  unint64_t v54;
  _BOOL4 IsNull;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  int v60;
  double v61;
  double v62;
  __CVBuffer *v63;
  int v64;
  double PixelBufferSize;
  double v66;
  double v67;
  uint64_t v68;
  int v69;
  int IsSubsampled;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  int CVPixelBufferNotBackedByIOSurface;
  __CVBuffer *v77;
  const void *v78;
  size_t v79;
  __CVBuffer *v80;
  unint64_t v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  size_t v88;
  int v89;
  int v90;
  OSType v91;
  double v92;
  double v93;
  double v94;
  double v95;
  CGFloat v96;
  double v97;
  __CVBuffer *v98;
  double v99;
  double v100;
  __CVBuffer *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  size_t v110;
  int v111;
  size_t v112;
  size_t v113;
  size_t v114;
  double v115;
  size_t v116;
  int v117;
  double v118;
  size_t v119;
  double v120;
  int v121;
  __CVBuffer *v122;
  int v123;
  int v124;
  int v125;
  size_t v126;
  size_t v127;
  double v128;
  double v129;
  unint64_t v130;
  _BOOL4 v132;
  int v133;
  __CVBuffer *v134;
  int v135;
  int v136;
  double v137;
  CGFloat v138;
  CGFloat v139;
  int v140;
  size_t v141;
  unint64_t v142;
  __int128 v143;
  int v144;
  double v145;
  int v146;
  CFTypeRef v147;
  unint64_t v148;
  CGFloat v149;
  OSType UnsubsampledEquivalent;
  size_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  size_t v156;
  size_t v157;
  CVPixelBufferRef pixelBuffer;
  __CVBuffer *pixelBuffera;
  size_t v160;
  size_t v161;
  unint64_t v162;
  size_t v163;
  char v169;
  __int16 v170;
  CFTypeRef v171;
  CFTypeRef cf;
  unint64_t v173;
  CVPixelBufferRef v174;
  size_t v175;
  size_t v176;
  __int128 v177;
  __int128 v178;
  __CVBuffer *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  __int16 v183;
  __CVBuffer *v184;
  CVPixelBufferRef v185[3];
  CGRect v186;
  CGRect v187;
  CGRect v188;

  v171 = 0;
  cf = 0;
  if (!a2)
    return 4294950306;
  v27 = a13 == *MEMORY[0x1E0C9D820] && a14 == *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (v27)
  {
    v51 = 4294950306;
    goto LABEL_21;
  }
  v35 = (const void **)a27;
  if (CGRectIsNull(*(CGRect *)&a9))
  {
    PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a2);
    v38 = v37;
    v40 = v39;
    v42 = v41;
  }
  else
  {
    PixelBufferCLAPAsRect = a9;
    v38 = a10;
    v40 = a11;
    v42 = a12;
  }
  v43 = a23;
  v44 = a22;
  v170 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v46 = PixelFormatType;
  if (CMPhotoPixelFormatIsSubsampled(PixelFormatType, 0, 0, (_BYTE *)&v170 + 1, 0)
    || CMPhotoPixelFormatIsSubsampled(a6, 0, 0, &v170, 0))
  {
    goto LABEL_20;
  }
  v169 = 0;
  if (a3)
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("PreferLowMemory"), &v169);
  if (!(HIBYTE(v170) | v170))
    goto LABEL_20;
  v49 = vcvtad_u64_f64(v40);
  v50 = vcvtad_u64_f64(v42);
  if (((v49 | v50) & 1) == 0
    && vabdd_f64(floor(a13 * 0.5), a13 * 0.5) < 0.000001
    && vabdd_f64(floor(a14 * 0.5), a14 * 0.5) < 0.000001)
  {
    goto LABEL_20;
  }
  if (_disableOddWorkaround_onceToken != -1)
    dispatch_once(&_disableOddWorkaround_onceToken, &__block_literal_global_1);
  if (v169)
    goto LABEL_20;
  v53 = (__CVBuffer *)vcvtad_u64_f64(PixelBufferCLAPAsRect);
  v54 = vcvtad_u64_f64(v38);
  v186.origin.x = a17;
  v186.origin.y = a18;
  v186.size.width = a19;
  v186.size.height = a20;
  IsNull = CGRectIsNull(v186);
  v56 = vcvtad_u64_f64(a17);
  v57 = vcvtad_u64_f64(a18);
  v154 = v57;
  v155 = v56;
  if (IsNull)
    v58 = 0;
  else
    v58 = v57;
  if (IsNull)
    v59 = 0;
  else
    v59 = v56;
  v162 = (unint64_t)v53;
  v179 = v53;
  v180 = v54;
  pixelBuffer = (CVPixelBufferRef)v54;
  v181 = v49;
  v182 = v50;
  v60 = CMPhotoPixelBufferMemcpySupportedForBuffer(a2, &v179, v59, v58);
  if (a5 == 1 && v46 == (_DWORD)a6 && v49 == vcvtad_u64_f64(a13) && v50 == vcvtad_u64_f64(a14) && !a8 && v60)
  {
    *(_QWORD *)&v177 = 0;
    if (*a27)
    {
      v187.origin.y = a18;
      v187.origin.x = a17;
      v187.size.width = a19;
      v187.size.height = a20;
      v43 = a23;
      v44 = a22;
      if (CGRectIsNull(v187))
      {
        v61 = CMPhotoGetPixelBufferCLAPAsRect(*a27);
        v154 = vcvtad_u64_f64(v62);
        v155 = vcvtad_u64_f64(v61);
      }
      v63 = *a27;
      v179 = (__CVBuffer *)v162;
      v180 = (unint64_t)pixelBuffer;
      v181 = v49;
      v182 = v50;
      v64 = CMPhotoPixelBufferCopyCropRectToOffset(a2, 1, (uint64_t *)&v179, v63, 1, v155, v154, 0);
      if (!v64)
        CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, *a27);
      goto LABEL_43;
    }
    v74 = CVPixelBufferGetPixelFormatType(a2);
    v75 = 2 * (a21 == 0);
    v44 = a22;
    if (a4)
    {
      CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), v74, v49, v50, a21, v75, v75, a21 == 0, a22, 0, (CVPixelBufferRef *)&v177);
      if (CVPixelBufferNotBackedByIOSurface)
      {
LABEL_172:
        v64 = CVPixelBufferNotBackedByIOSurface;
        v43 = a23;
LABEL_43:
        if ((_QWORD)v177)
          CFRelease((CFTypeRef)v177);
        goto LABEL_162;
      }
    }
    else
    {
      v160 = v49;
      v79 = v50;
      if (!a21)
      {
        v160 = CMPhotoAlignValue(v49, 2uLL);
        v79 = CMPhotoAlignValue(v50, 2uLL);
      }
      v156 = v79;
      CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v74, v160, v79, v75, v75, a22, 0, (CVPixelBufferRef *)&v177);
      if (CVPixelBufferNotBackedByIOSurface)
        goto LABEL_172;
      if (v160 != v49 || v156 != v50)
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v177, 0, 0, v49, v50, 0, 1);
    }
    v179 = (__CVBuffer *)v162;
    v180 = (unint64_t)pixelBuffer;
    v181 = v49;
    v182 = v50;
    CVPixelBufferNotBackedByIOSurface = CMPhotoPixelBufferCopyCropRectToOffset(a2, 1, (uint64_t *)&v179, (__CVBuffer *)v177, 1, 0, 0, 0);
    if (!CVPixelBufferNotBackedByIOSurface)
    {
      CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, (__CVBuffer *)v177);
      v51 = 0;
      *a27 = (__CVBuffer *)v177;
      goto LABEL_21;
    }
    goto LABEL_172;
  }
  if (CMPhotoPixelFormatContainsGrayScale(a6)
    && !CMPhotoPixelBufferHasUnhandledIdentityMatrix(a2)
    && CMPhotoWrapLumaPlaneAsGrayscale(a2, (CVPixelBufferRef *)&cf))
  {
    CMPhotoGetPixelBufferSize(a2);
  }
  v43 = a23;
  v44 = a22;
  v153 = a7;
  v152 = a5;
  if (!cf)
  {
    PixelBufferSize = CMPhotoGetPixelBufferSize(a2);
    v67 = v66;
    v68 = CVPixelBufferGetPixelFormatType(a2);
    v69 = v68;
    v184 = 0;
    v185[0] = 0;
    v183 = 0;
    IsSubsampled = CMPhotoPixelFormatIsSubsampled(v68, (_BYTE *)&v183 + 1, &v183, 0, 0);
    if (!IsSubsampled)
    {
      v179 = 0;
      v180 = 0;
      v181 = v49;
      v182 = v50;
      if (!(HIBYTE(v183) | v183))
      {
        v77 = (__CVBuffer *)CFRetain(a2);
        v78 = 0;
        v179 = (__CVBuffer *)v162;
        v180 = (unint64_t)pixelBuffer;
        v181 = v49;
        v182 = v50;
        a7 = v153;
        goto LABEL_87;
      }
      UnsubsampledEquivalent = CMPhotoPixelFormatGetUnsubsampledEquivalent(v69);
      if (UnsubsampledEquivalent)
      {
        v71 = vcvtad_u64_f64(PixelBufferSize);
        v72 = vcvtad_u64_f64(v67);
        v146 = HIBYTE(v183);
        v144 = v183;
        if ((_BYTE)v183)
          v73 = (pixelBuffer | v50) & 1;
        else
          v73 = 0;
        v177 = 0u;
        v178 = 0u;
        v173 = v162;
        v174 = pixelBuffer;
        v175 = v49;
        v176 = v50;
        v142 = v72;
        v140 = (HIBYTE(v183) != 0) & (v49 | v162);
        if (_makeEvenCropRect(&v173, v71, v72, v140, v73, (unint64_t *)&v177, (uint64_t)&v179))
        {
          v80 = (__CVBuffer *)CFRetain(a2);
          v185[0] = v80;
          v147 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
          CMPhotoRemovePixelBufferCLAP(v80);
          goto LABEL_76;
        }
        v81 = v71 & 1;
        if (!v146)
          v81 = 0;
        v82 = v81 + v71;
        v83 = v142 & 1;
        if (!v144)
          v83 = 0;
        v84 = v83 + v142;
        v148 = v82;
        IsSubsampled = CMPhotoCreateEvenPixelBufferWithBacking(a2, v82, v83 + v142, v185);
        if (!IsSubsampled)
        {
          v173 = v162;
          v174 = pixelBuffer;
          v175 = v49;
          v176 = v50;
          _makeEvenCropRect(&v173, v148, v84, v140, v73, (unint64_t *)&v177, (uint64_t)&v179);
          v147 = 0;
LABEL_76:
          v85 = *((_QWORD *)&v178 + 1);
          a7 = v153;
          if (a4)
          {
            v86 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), UnsubsampledEquivalent, v178, *((size_t *)&v178 + 1), 0, 2uLL, 2uLL, 1, 0, 0, &v184);
            if (v86)
            {
              v87 = v86;
              goto LABEL_176;
            }
          }
          else
          {
            v143 = v178;
            v88 = CMPhotoAlignValue(v178, 2uLL);
            v141 = CMPhotoAlignValue(v85, 2uLL);
            v89 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], UnsubsampledEquivalent, v88, v141, 2uLL, 2uLL, 0, 0, &v184);
            if (v89)
            {
              v87 = v89;
              a7 = v153;
              goto LABEL_176;
            }
            v27 = v88 == (_QWORD)v143;
            a7 = v153;
            if (!v27 || v141 != v85)
              CMPhotoSetPixelBufferCLAP(v184, 0, 0, v143, *((unint64_t *)&v143 + 1), 0, 1);
          }
          v90 = _convertAndScalePixelBuffer(a1, v185[0], a4, 1, UnsubsampledEquivalent, 0, 0, 0, (double)(unint64_t)v177, (double)*((unint64_t *)&v177 + 1), (double)(unint64_t)v178, (double)*((unint64_t *)&v178 + 1), (double)(unint64_t)v178, (double)*((unint64_t *)&v178 + 1), *(double *)(MEMORY[0x1E0C9D628] + 24), v48, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16),
                  *(double *)(MEMORY[0x1E0C9D628] + 24),
                  0,
                  a23,
                  1u,
                  1u,
                  0xFFFFFFFF,
                  (const void **)&v184);
          if (!v90)
          {
            v90 = CMPhotoSetPixelBufferCLAPFromRect(v184, 1, 1, (double)(unint64_t)v179, (double)v180, (double)v181, (double)v182);
            if (!v90)
            {
              v77 = v184;
              v162 = (unint64_t)v179;
              v49 = v181;
              pixelBuffer = (CVPixelBufferRef)v180;
              v50 = v182;
              v78 = v147;
LABEL_87:
              v87 = 0;
              cf = v77;
              v184 = 0;
              if (!v78)
                goto LABEL_89;
              goto LABEL_88;
            }
          }
          v87 = v90;
LABEL_176:
          v78 = v147;
          if (!v147)
          {
LABEL_89:
            a5 = v152;
            if (v184)
              CFRelease(v184);
            if (v185[0])
              CFRelease(v185[0]);
            if (v87)
              goto LABEL_20;
            goto LABEL_94;
          }
LABEL_88:
          CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D50], v78, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v78);
          goto LABEL_89;
        }
      }
      else
      {
        IsSubsampled = FigSignalErrorAt();
      }
    }
    v87 = IsSubsampled;
    a7 = v153;
    goto LABEL_89;
  }
LABEL_94:
  if ((_BYTE)v170)
  {
    v91 = CMPhotoPixelFormatGetUnsubsampledEquivalent(a6);
    if (!v91)
    {
      FigSignalErrorAt();
      goto LABEL_20;
    }
    v95 = *MEMORY[0x1E0C9D628];
    v94 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v97 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v96 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    if (!_convertAndScalePixelBuffer(a1, (CVPixelBufferRef)cf, a4, a5, v91, a7, a8, 0, (double)v162, (double)(unint64_t)pixelBuffer, (double)v49, (double)v50, a13, a14, v92, v93, *MEMORY[0x1E0C9D628], v94, v97,
                          v96,
                          0,
                          a23,
                          1u,
                          1u,
                          0xFFFFFFFF,
                          &v171))
    {
      v98 = (__CVBuffer *)v171;
      CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v171);
      v161 = vcvtad_u64_f64(v100);
      v163 = vcvtad_u64_f64(v99);
      v179 = 0;
      *(_QWORD *)&v177 = *a27;
      v101 = (__CVBuffer *)v177;
      v139 = v97;
      v137 = v95;
      v138 = v94;
      if ((_QWORD)v177)
      {
        v102 = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v177);
        v145 = v103;
        v149 = v104;
        v106 = v105;
        v188.origin.y = a18;
        v188.origin.x = a17;
        v107 = a20;
        v188.size.width = a19;
        v188.size.height = a20;
        if (CGRectIsNull(v188))
        {
          v108 = v102;
          v107 = v149;
          v154 = vcvtad_u64_f64(v145);
          v155 = vcvtad_u64_f64(v102);
          v109 = v106;
        }
        else
        {
          v108 = v102;
          v109 = v106;
          v106 = a19;
        }
        v64 = -16992;
        if (v163 != vcvtad_u64_f64(v106))
          goto LABEL_159;
        v110 = v161;
        if (v161 != vcvtad_u64_f64(v107))
          goto LABEL_159;
        v97 = v109;
        v95 = v108;
      }
      else
      {
        v154 = 0;
        v155 = 0;
        v145 = v94;
        v149 = v96;
        v110 = v161;
      }
      LOBYTE(v173) = 0;
      LOBYTE(v185[0]) = 0;
      v111 = CMPhotoPixelFormatIsSubsampled(a6, &v173, v185, 0, 0);
      if (v111)
      {
        if (v101)
        {
          v64 = -16992;
          v43 = a23;
          v44 = a22;
          a5 = v152;
          goto LABEL_159;
        }
        v64 = v111;
        v43 = a23;
        v44 = a22;
        a5 = v152;
        goto LABEL_157;
      }
      if ((_BYTE)v173)
        v112 = v163 & 1;
      else
        v112 = 0;
      v113 = v110;
      if (LOBYTE(v185[0]))
        v114 = v110 & 1;
      else
        v114 = 0;
      pixelBuffera = v98;
      v64 = -16992;
      v151 = v112 + v163;
      if (v112 + v163 <= vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v98)))
      {
        v116 = v114 + v113;
        if (v114 + v113 <= vcvtad_u64_f64(v115))
        {
          v117 = CMPhotoRemovePixelBufferCLAP(pixelBuffera);
          a5 = v152;
          v35 = (const void **)a27;
          if (!v117)
          {
            v118 = (double)v151;
            v117 = CMPhotoSetPixelBufferCLAPFromRect(pixelBuffera, 0, 1, 0.0, 0.0, (double)v151, (double)v116);
            if (!v117)
            {
              if (v101)
              {
                v119 = v116 + v154;
                if (v151 + v155 > vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v101)) || v119 > vcvtad_u64_f64(v120))
                {
                  v121 = CMPhotoCreateEvenPixelBufferWithBacking(v101, v151 + v155, v119, &v179);
                  v122 = pixelBuffera;
                  if (!v121)
                  {
                    v123 = 0;
LABEL_128:
                    v125 = _convertAndScalePixelBuffer(a1, v122, a4, 1, a6, 0, 0, a21, v137, v138, v139, v96, v118, (double)v116, v47, v48, (double)v155, (double)(unint64_t)v154, v118,
                             (double)v116,
                             a22,
                             a23,
                             1u,
                             1u,
                             a26,
                             (const void **)&v179);
                    if (v125)
                    {
                      v64 = v125;
LABEL_154:
                      if (!v123)
                        goto LABEL_159;
                      v136 = 0;
LABEL_156:
                      v64 = CMPhotoSetPixelBufferCLAPFromRect(*a27, 0, 1, v95, v145, v97, v149);
                      if (v136)
                        goto LABEL_157;
LABEL_159:
                      if (v179)
                        CFRelease(v179);
                      a7 = v153;
LABEL_162:
                      if (!v64)
                        goto LABEL_163;
                      goto LABEL_20;
                    }
LABEL_150:
                    if (v179 && v179 != v101)
                    {
                      CMPhotoPropagateColorPropertiesFromSourceBuffer(v179, v101);
                      v101 = (__CVBuffer *)v177;
                    }
                    v64 = 0;
                    *a27 = v101;
                    goto LABEL_154;
                  }
                }
                else
                {
                  v179 = (__CVBuffer *)CFRetain(*a27);
                  v121 = CMPhotoRemovePixelBufferCLAP(v179);
                  v122 = pixelBuffera;
                  if (!v121)
                  {
                    v123 = 1;
                    goto LABEL_128;
                  }
                }
                v64 = v121;
                goto LABEL_159;
              }
              if (a4)
              {
                v124 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a6, v163, v161, a21, 2uLL, 2uLL, 1, a22, 0, (CVPixelBufferRef *)&v177);
                if (v124)
                  goto LABEL_173;
              }
              else
              {
                v126 = v163;
                v127 = v161;
                if (!a21)
                {
                  v126 = CMPhotoAlignValue(v163, 2uLL);
                  v127 = CMPhotoAlignValue(v161, 2uLL);
                }
                v157 = v127;
                v124 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a6, v126, v127, 2uLL, 2uLL, a22, 0, (CVPixelBufferRef *)&v177);
                if (v124)
                  goto LABEL_173;
                if (v126 != v163 || v157 != v161)
                  CMPhotoSetPixelBufferCLAP((__CVBuffer *)v177, 0, 0, v163, v161, 0, 1);
              }
              v128 = CMPhotoGetPixelBufferSize((__CVBuffer *)v177);
              v130 = vcvtad_u64_f64(v129);
              v132 = v151 > vcvtad_u64_f64(v128) || v116 > v130;
              if (v132)
              {
                v124 = CMPhotoCreateEvenPixelBufferWithBacking((__CVBuffer *)v177, v151, v116, &v179);
                if (v124)
                {
LABEL_173:
                  v64 = v124;
                  goto LABEL_157;
                }
                v123 = 0;
                v133 = a21;
                v134 = pixelBuffera;
              }
              else
              {
                v179 = (__CVBuffer *)CFRetain((CFTypeRef)v177);
                v124 = CMPhotoRemovePixelBufferCLAP(v179);
                if (v124)
                  goto LABEL_173;
                v124 = CMPhotoSetPixelBufferCLAPFromRect(v179, 0, 1, 0.0, 0.0, v118, (double)v116);
                v134 = pixelBuffera;
                if (v124)
                  goto LABEL_173;
                v97 = (double)v163;
                v145 = 0.0;
                v149 = (double)v161;
                v123 = 1;
                v95 = 0.0;
                v133 = a21;
              }
              v135 = _convertAndScalePixelBuffer(a1, v134, a4, 1, a6, 0, 0, v133, v137, v138, v139, v96, v118, (double)v116, v47, v48, v137, v138, v139,
                       v96,
                       a22,
                       a23,
                       1u,
                       1u,
                       a26,
                       (const void **)&v179);
              if (!v135)
              {
                v101 = (__CVBuffer *)v177;
                goto LABEL_150;
              }
              v64 = v135;
              if (!v132)
              {
                v136 = 1;
                goto LABEL_156;
              }
LABEL_157:
              if ((_QWORD)v177)
                CFRelease((CFTypeRef)v177);
              goto LABEL_159;
            }
          }
          v64 = v117;
        }
      }
      a5 = v152;
      v35 = (const void **)a27;
      if (v101)
        goto LABEL_159;
      goto LABEL_157;
    }
  }
  else if (!_convertAndScalePixelBuffer(a1, (CVPixelBufferRef)cf, a4, a5, a6, a7, a8, a21, (double)v162, (double)(unint64_t)pixelBuffer, (double)v49, (double)v50, a13, a14, v47, v48, a17, a18, a19,
                             a20,
                             a22,
                             a23,
                             1u,
                             1u,
                             0xFFFFFFFF,
                             (const void **)a27))
  {
LABEL_163:
    v51 = 0;
    goto LABEL_21;
  }
LABEL_20:
  v51 = _convertAndScalePixelBuffer(a1, a2, a4, a5, a6, a7, a8, a21, a9, a10, a11, a12, a13, a14, v47, v48, a17, a18, a19,
          a20,
          v44,
          v43,
          a24,
          a25,
          a26,
          v35);
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (v171)
    CFRelease(v171);
  return v51;
}

uint64_t CMPhotoPixelFormatIsSubsampled(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, uint64_t *a5)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v11;
  CFIndex Count;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t result;
  uint64_t *v18;

  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType)
    return 4294950305;
  Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
  if (Value)
  {
    v11 = Value;
    Count = CFArrayGetCount(Value);
    v13 = Count;
    if (Count)
    {
      v18 = a5;
      v14 = 0;
      v15 = Count - 1;
      do
      {
        CFArrayGetValueAtIndex(v11, v14);
        FigCFDictionaryGetIntIfPresent();
        FigCFDictionaryGetIntIfPresent();
      }
      while (v15 != v14++);
      a5 = v18;
    }
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    v13 = 1;
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetIntIfPresent();
    if (!a2)
      goto LABEL_10;
  }
  *a2 = 0;
LABEL_10:
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  result = 0;
  if (a5)
    *a5 = v13;
  return result;
}

uint64_t _flipSizeIfNeeded(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  int v9;

  v9 = 0;
  result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a1, &v9, 0);
  if (!(_DWORD)result)
  {
    if (v9 == 270 || v9 == 90)
    {
      v8 = a2;
      a2 = a3;
      a3 = v8;
    }
    if (a4)
    {
      *a4 = a2;
      a4[1] = a3;
    }
  }
  return result;
}

uint64_t CMPhotoGetCropPreOrientation(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, _OWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (!a5)
    return 4294950306;
  if (a4 == 1)
    goto LABEL_19;
  v23 = -1;
  v24 = 0;
  result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v24, &v23);
  if ((_DWORD)result)
    return result;
  v10 = *a3;
  v11 = a3[1];
  v21 = v11;
  v22 = v10;
  v12 = a3[2];
  v13 = a3[3];
  if (v23)
  {
    if (v23 != 1)
      goto LABEL_9;
    v14 = &v22;
    v15 = a3[2];
    v16 = a1;
  }
  else
  {
    v14 = &v21;
    v10 = v11;
    v15 = a3[3];
    v16 = a2;
  }
  *v14 = v16 - v15 - v10;
  v11 = v21;
  v10 = v22;
LABEL_9:
  v17 = v24 % 360;
  if (v24 % 360 == 270)
  {
    v10 = a1 - v10 - v12;
    v18 = v11;
    goto LABEL_14;
  }
  if (v17 == 180)
  {
    v18 = a1 - (v12 + v10);
    v10 = a2 - (v13 + v11);
LABEL_17:
    v19 = v12;
    v12 = v13;
    goto LABEL_18;
  }
  if (v17 != 90)
  {
    v18 = v10;
    v10 = v11;
    goto LABEL_17;
  }
  v18 = a2 - v11 - v13;
LABEL_14:
  v19 = v13;
LABEL_18:
  *a3 = v18;
  a3[1] = v10;
  a3[2] = v19;
  a3[3] = v12;
LABEL_19:
  result = 0;
  v20 = *((_OWORD *)a3 + 1);
  *a5 = *(_OWORD *)a3;
  a5[1] = v20;
  return result;
}

uint64_t CMPhotoApplyCropRectToRect(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  BOOL v8;
  uint64_t v10;
  double v11;

  if (!a1)
    return FigSignalErrorAt();
  v5 = a1[2];
  if (a2 >= v5)
    return 4294950193;
  v6 = a1[3];
  v7 = v5 - a2;
  v8 = a3 >= v6 || a4 > v7;
  if (v8 || a5 > v6 - a3)
    return 4294950193;
  v10 = 0;
  v11 = a3 + a1[1];
  *a1 = a2 + *a1;
  a1[1] = v11;
  a1[2] = a4;
  a1[3] = a5;
  return v10;
}

uint64_t _makeEvenCropRect(unint64_t *a1, unint64_t a2, unint64_t a3, int a4, int a5, unint64_t *a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v7 = a1[1];
  v8 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  v9 = a1[2] + *a1 + ((a1[2] + *a1) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v9 >= a2)
    v9 = a2;
  if (a4)
  {
    LODWORD(v10) = (v9 & 1) == 0;
  }
  else
  {
    v8 = *a1;
    v9 = a1[2] + *a1;
    LODWORD(v10) = 1;
  }
  v11 = a1[3] + v7 + ((a1[3] + v7) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v11 >= a3)
    v11 = a3;
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10;
  if (a5)
  {
    v7 &= ~1uLL;
    v13 = v11;
  }
  else
  {
    v13 = a1[3] + v7;
  }
  if (a5)
    v10 = v12;
  else
    v10 = v10;
  if (a6)
  {
    *a6 = v8;
    a6[1] = v7;
    a6[2] = v9 - v8;
    a6[3] = v13 - v7;
  }
  if (a7)
  {
    v14 = a1[1] - v7;
    v15 = *((_OWORD *)a1 + 1);
    *(_QWORD *)a7 = *a1 - v8;
    *(_QWORD *)(a7 + 8) = v14;
    *(_OWORD *)(a7 + 16) = v15;
  }
  return v10;
}

uint64_t CMPhotoRemovePixelBufferCLAP(__CVBuffer *a1)
{
  if (a1)
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50]);
  return 0;
}

uint64_t CMPhotoPixelFormatGetUnsubsampledEquivalent(int a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  int v3;

  if (a1 > 1952854575)
  {
    if (a1 > 2016686639)
    {
      if (a1 > 2019963439)
      {
        if (a1 == 2019963440 || a1 == 2019963442)
          return 2019963956;
        return 0;
      }
      if (a1 != 2016686640 && a1 != 2016686642)
        return 0;
      return 2016687156;
    }
    if (a1 <= 1953903151)
    {
      if (a1 != 1952854576 && a1 != 1952854578)
        return 0;
      return 1952855092;
    }
    if (a1 != 1953903152 && a1 != 1953903154)
      return 0;
    v3 = 1952855092;
    return v3 | 0x100000u;
  }
  if (a1 > 1936077359)
  {
    if (a1 <= 1937125935)
    {
      if (a1 != 1936077360 && a1 != 1936077362)
        return 0;
      return 1936077876;
    }
    if (a1 != 1937125936 && a1 != 1937125938)
      return 0;
    v3 = 1936077876;
    return v3 | 0x100000u;
  }
  v1 = 875836518;
  if (a1 > 875704933)
  {
    if (a1 != 875704934)
    {
      v2 = 12918;
LABEL_21:
      if (a1 == (v2 | 0x34320000))
        return 875836534;
      return 0;
    }
  }
  else if (a1 != 875704422)
  {
    v2 = 12406;
    goto LABEL_21;
  }
  return v1;
}

uint64_t CMPhotoPixelFormatContainsGrayScale(OSType pixelFormat)
{
  CFDictionaryRef v1;
  unsigned __int8 v3;

  v3 = 0;
  if (pixelFormat)
  {
    if (pixelFormat == 843264310 || pixelFormat == 843264056)
    {
      return 1;
    }
    else
    {
      v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
      FigCFDictionaryGetBooleanIfPresent();
      if (v1)
        CFRelease(v1);
    }
  }
  return v3;
}

uint64_t CMPhotoPixelBufferMemcpySupportedForBuffer(__CVBuffer *a1, _BYTE *a2, char a3, char a4)
{
  uint64_t PixelFormatType;
  uint64_t result;
  int v10;
  int IsSubsampled;
  char v12;
  __int128 extraRowsOnTop;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  result = 0;
  if ((int)PixelFormatType > 1380401728)
  {
    if ((int)PixelFormatType > 1937125935)
    {
      if ((int)PixelFormatType <= 1953903151)
      {
        if ((_DWORD)PixelFormatType == 1937125936)
          goto LABEL_30;
        v10 = 1952854576;
      }
      else
      {
        if ((_DWORD)PixelFormatType == 1953903152 || (_DWORD)PixelFormatType == 2019963440)
          goto LABEL_30;
        v10 = 2016686640;
      }
    }
    else if ((int)PixelFormatType <= 1815162993)
    {
      if ((_DWORD)PixelFormatType == 1380401729)
        goto LABEL_30;
      v10 = 1751527984;
    }
    else
    {
      if ((_DWORD)PixelFormatType == 1815162994 || (_DWORD)PixelFormatType == 1815491698)
        goto LABEL_30;
      v10 = 1936077360;
    }
LABEL_29:
    if ((_DWORD)PixelFormatType != v10)
      return result;
    goto LABEL_30;
  }
  if ((int)PixelFormatType <= 875836533)
  {
    if ((int)PixelFormatType <= 875704933)
    {
      if ((_DWORD)PixelFormatType == 875704422)
        goto LABEL_30;
      v10 = 875704438;
    }
    else
    {
      if ((_DWORD)PixelFormatType == 875704934 || (_DWORD)PixelFormatType == 875704950)
        goto LABEL_30;
      v10 = 875836518;
    }
    goto LABEL_29;
  }
  if ((int)PixelFormatType > 1278226735)
  {
    if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
      return result;
    goto LABEL_30;
  }
  if ((_DWORD)PixelFormatType != 875836534 && (_DWORD)PixelFormatType != 1111970369)
  {
    v10 = 1278226488;
    goto LABEL_29;
  }
LABEL_30:
  extraRowsOnTop = 0uLL;
  CVPixelBufferGetExtendedPixels(a1, (size_t *)&extraRowsOnTop + 1, 0, (size_t *)&extraRowsOnTop, 0);
  if (extraRowsOnTop != 0)
    return 0;
  v12 = 0;
  IsSubsampled = CMPhotoPixelFormatIsSubsampled(PixelFormatType, 0, 0, &v12, 0);
  result = 0;
  if (!IsSubsampled)
  {
    if (!v12)
      return 1;
    if ((*a2 & 1) != 0)
      return 0;
    result = 0;
    if ((a2[8] & 1) == 0 && (a3 & 1) == 0 && (a4 & 1) == 0)
      return 1;
  }
  return result;
}

uint64_t _once_setTypes()
{
  uint64_t result;

  qword_1ECEF2420 = CFDataGetTypeID();
  qword_1ECEF2428 = CMBlockBufferGetTypeID();
  qword_1ECEF2430 = CFURLGetTypeID();
  qword_1ECEF2438 = IOSurfaceGetTypeID();
  result = CMByteStreamBaseGetTypeID();
  qword_1ECEF2440 = result;
  return result;
}

uint64_t _once_CMPhotoGetCPUCount()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 1;
  v1 = 4;
  result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  sCPUCount = v2;
  return result;
}

uint64_t _decodeItem(_BOOL8 *a1, const void *a2, const void *a3, uint64_t a4, unsigned __int8 *a5, int *a6, __int128 *a7, CFTypeRef *a8, CVPixelBufferRef *a9)
{
  __int128 *v10;
  _BOOL8 *v14;
  const void *v15;
  CFAllocatorRef v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, _QWORD, CFAllocatorRef, _BYTE *);
  uint64_t v19;
  uint64_t v20;
  uint64_t ItemTypeFromReader;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  CFTypeRef *v40;
  _BOOL8 *v41;
  _BOOL8 v42;
  _BYTE *v43;
  char v44;
  int v45;
  float v46;
  int v47;
  __int128 v48;
  CFAllocatorRef v49;
  int v50;
  uint64_t HEIFOrientation;
  uint64_t CropPostOrientation;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t TileGeometryFromPictureTileCursorService;
  uint64_t (*v77)(const void *, CFTypeRef *);
  _BOOL4 v78;
  const void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  CFAllocatorRef v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v87;
  const __CFDictionary *v88;
  int v89;
  const void **v90;
  const __CFDictionary *v91;
  const __CFDictionary *v92;
  uint64x2_t v93;
  const __CFArray *v94;
  CFIndex v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  const __CFArray *v100;
  const __CFArray *v101;
  CFIndex v102;
  __int128 v103;
  CFIndex v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  CFIndex v109;
  const __CFArray *v110;
  const void *v111;
  const void *v112;
  unsigned int (*v113)(const void *, CFTypeRef *);
  uint64_t v114;
  unsigned int (*v115)(const void *, uint64_t, _BYTE *);
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, CFAllocatorRef, _OWORD *);
  uint64_t v118;
  unsigned int (*v119)(uint64_t, uint64_t, CFAllocatorRef, __int128 *);
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  char *v127;
  int v128;
  int v129;
  unint64_t v130;
  BOOL v131;
  BOOL v132;
  int v133;
  int v134;
  uint64_t ImageOrientation;
  uint64_t v136;
  uint64_t v137;
  double PixelBufferSize;
  double v139;
  double v140;
  uint64_t ImageGeometryFromPictureReader;
  unint64_t v142;
  char v144;
  BOOL v145;
  CFMutableDictionaryRef v146;
  CFMutableDictionaryRef v147;
  __CFDictionary *v148;
  uint64_t v149;
  const void *v150;
  uint64_t v151;
  uint64x2_t v152;
  unint64_t v153;
  unint64_t v154;
  BOOL v155;
  BOOL v157;
  int v158;
  uint64_t v159;
  const void *v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  const void *v165;
  const void *v166;
  uint64_t SampleBufferFromPictureReader;
  int v168;
  uint64_t v169;
  _DWORD *v170;
  CFIndex Count;
  CFIndex v172;
  void *ValueAtIndex;
  CFIndex v174;
  CFIndex v175;
  CFIndex v176;
  _OWORD *v177;
  uint64_t v178;
  uint64_t v179;
  CFDictionaryRef DictionaryRepresentation;
  CVPixelBufferRef v181;
  uint64_t v182;
  uint64_t BufferAndOptionsForTileDecoding;
  const __CFAllocator *v184;
  CFMutableDictionaryRef v185;
  __CFDictionary *v186;
  int v187;
  const __CFAllocator *v188;
  __CVBuffer *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *);
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *);
  char v197;
  NSObject *v198;
  CFTypeRef v199;
  uint64_t (*v200)(CFTypeRef, CFTypeRef *);
  uint64_t v201;
  unint64_t v202;
  unsigned int *v203;
  unsigned int *v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  uint64x2_t v209;
  CFTypeRef v210;
  uint64_t (*v211)(CFTypeRef, unint64_t, unint64_t);
  uint64_t v212;
  uint64_t CMBaseObject;
  uint64_t (*v214)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  _BOOL4 v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  CFTypeRef v232;
  const void *v233;
  const void *v234;
  _BOOL4 v235;
  _BOOL4 v236;
  unsigned int v237;
  CFTypeRef v238;
  int v239;
  BOOL v240;
  int v241;
  int v242;
  __CVBuffer *v243;
  OSType v244;
  int v245;
  __CFDictionary *Mutable;
  const __CFDictionary *v247;
  uint64_t PixelFormatType;
  uint64_t DefaultTripletsForTransfer;
  NSObject *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  int v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  double v267;
  double v268;
  unint64_t v269;
  unint64_t v270;
  __CFDictionary *v272;
  uint64_t v273;
  CFTypeRef v274;
  int *v275;
  int v276;
  uint64_t v277;
  char v278;
  int v279;
  uint64_t v280;
  unsigned __int8 *v281;
  const void *v282;
  unsigned __int8 *v283;
  int LayerReaderAtPosition;
  __int128 v285;
  unint64_t v286;
  __int128 v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unint64_t v292;
  const __CFArray *v293;
  CFTypeRef v294;
  _BYTE *v295;
  int v296;
  CFTypeRef v297;
  const void *v298;
  const void *v299;
  CFTypeRef v300;
  CFTypeRef *v301;
  CFTypeRef *v302;
  CFTypeRef *v303;
  CFTypeRef *v304;
  __int128 *v305;
  __int128 *p_value;
  int v307;
  int v308;
  int ImageCodecTypeFromReader;
  uint64_t v310;
  BOOL v311;
  BOOL v313;
  int v314;
  CFAllocatorRef v315;
  CFAllocatorRef v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  BOOL v320;
  uint64_t v322;
  unsigned int (*v323)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *);
  int v324;
  int v325;
  uint64_t v326;
  unsigned int (*v327)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *);
  _BOOL4 v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  CFTypeRef v335;
  CFAllocatorRef v336;
  uint64_t v337;
  unsigned int (*v338)(uint64_t, uint64_t, CFAllocatorRef, _BYTE *);
  CFAllocatorRef v339;
  uint64_t v340;
  uint64_t (*v341)(uint64_t, _QWORD, CFAllocatorRef, __int128 *);
  int v342;
  const void *v343;
  CFAllocatorRef v344;
  uint64_t v345;
  unsigned int (*v346)(uint64_t, uint64_t, CFAllocatorRef, __int128 *);
  BOOL v347;
  int v348;
  BOOL v349;
  BOOL v350;
  NSObject *v351;
  int v352;
  int *v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char v366;
  unint64_t v367;
  uint64_t v368;
  int v369;
  BOOL v370;
  CFTypeRef v371;
  const void *v372;
  _DWORD *v373;
  CFAllocatorRef v374;
  uint64_t v375;
  uint64_t (*v376)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *);
  char *v377;
  _BYTE *v378;
  BOOL v379;
  char *v380;
  _BYTE *v381;
  int v382;
  int v383;
  char v384;
  const __CFDictionary *v385;
  uint64_t v386;
  const __CFDictionary *v387;
  const __CFDictionary *v388;
  const __CFDictionary *v389;
  const void *v390;
  CGColor *v391;
  CGColor *v392;
  const __CFArray *v393;
  CFIndex v394;
  CFIndex v395;
  char *v396;
  uint64_t v397;
  char *v398;
  CGColor *v399;
  char *v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  __CVBuffer *v405;
  uint64_t v406;
  size_t BytesPerRow;
  size_t Height;
  size_t Width;
  void *BaseAddress;
  CGContext *v411;
  CGContext *v412;
  const __CFArray *v413;
  char *v414;
  CFIndex v415;
  uint64_t v416;
  int32x2_t *v417;
  int32x2_t v418;
  const void *v419;
  const void *v420;
  uint64_t WrappedPixelBufferForType;
  uint64_t (*v422)(const void *, CFTypeRef *);
  uint64_t v423;
  uint64_t v424;
  uint64_t (*v425)(const void *, uint64_t, CFTypeRef *);
  uint64_t v426;
  uint64_t (*v427)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  void *v428;
  CGImageRef v429;
  CGFloat v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  _BOOL4 v434;
  unsigned int v435;
  uint64_t v436;
  char v437;
  int v438;
  size_t v439;
  size_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned __int8 v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  _BOOL8 v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  unint64_t v452;
  uint64_t v453;
  int v454;
  unsigned int v455;
  CFTypeRef v456;
  CFTypeRef v457;
  char v458;
  CFTypeRef v459;
  size_t v460;
  CFTypeRef v461;
  __int128 v462;
  size_t v463;
  unint64_t v464;
  int v465;
  int queue;
  dispatch_queue_t queuea;
  const void *v468;
  __int128 v469;
  const __CFAllocator *allocator;
  int allocatora;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  char v475;
  uint64_t v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  CFTypeRef *v480;
  unint64_t v481;
  uint64_t v482;
  NSObject *v483;
  _BOOL8 v484;
  uint64_t v485;
  char v486;
  uint64_t v487;
  _BOOL4 v488;
  int v489;
  _BOOL8 v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  char v494;
  CFIndex v495;
  int v496;
  unsigned __int8 v497;
  __int128 v498;
  uint64_t v499;
  int v500;
  unsigned __int8 v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  unsigned __int8 v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unsigned __int8 v512;
  uint64_t v513;
  char v514;
  char v515[8];
  char v516[8];
  char v517[8];
  uint64_t v518;
  unsigned __int8 v519;
  unsigned __int8 v520;
  char v521[8];
  _BOOL4 v522;
  unsigned __int8 v523;
  int v524;
  int v525;
  int v526;
  char v527[8];
  OSType v528;
  CFArrayRef theArray;
  CFArrayRef theArraya;
  CFArrayRef theArrayb;
  int theArrayc;
  CFArrayRef theArrayd;
  const __CFArray *theArraye;
  __int128 *v535;
  int *v536;
  int v537;
  unint64_t v538;
  int v539;
  uint64_t v540;
  const __CFDictionary *v541;
  __int128 v542;
  _BOOL8 theDict;
  const void *theDicta;
  unint64_t theDictb;
  uint64_t theDictc;
  CFDictionaryRef theDictd[2];
  const __CFDictionary *theDicte;
  const __CFArray *theDictf;
  CGContext *theDictg;
  unsigned __int8 v551;
  char v552;
  unint64_t v553;
  CFAllocatorRef v554;
  char *v555;
  _BYTE *v556;
  char *v557;
  unsigned __int8 *v558;
  _BOOL8 *v559;
  unsigned int v561;
  int v562[2];
  CFAllocatorRef v563;
  int v564[2];
  const __CFAllocator *v565;
  _QWORD block[5];
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  CVPixelBufferRef v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  uint64_t v583;
  __int128 *v584;
  int v585;
  uint64_t v586;
  int v587;
  int v588;
  unsigned __int8 v589;
  int v590;
  __int16 v591;
  int v592;
  CVPixelBufferRef pixelBuffer;
  _DWORD v594[3];
  int v595;
  unsigned __int8 v596;
  int v597;
  CFBooleanRef BOOLean;
  CFTypeRef v599;
  unsigned int v600;
  unsigned int v601;
  CFTypeRef v602;
  CFTypeRef v603;
  CFTypeRef v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  uint64x2_t value;
  __int128 v610;
  __int128 v611;
  uint64x2_t v612;
  __int128 v613;
  CFTypeRef v614;
  CFTypeRef v615;
  CFTypeRef v616;
  CFTypeRef v617;
  CFTypeRef v618;
  CFTypeRef v619;
  __int128 v620;
  __int128 v621;
  uint64x2_t v622;
  _BYTE v623[48];
  _OWORD v624[3];
  _OWORD v625[2];
  _BYTE v626[48];
  __int128 v627;
  uint64x2_t v628;
  _BYTE v629[30];
  uint64x2_t v630;
  char v631;
  uint64x2_t v632;
  char v633;
  _OWORD v634[3];
  __int128 v635;
  _BYTE v636[96];
  CFTypeRef v637[6];
  CFTypeRef v638[6];
  _BYTE size[136];
  uint64_t v640;
  CGRect v641;
  CGRect v642;
  CGRect v643;

  v640 = *MEMORY[0x1E0C80C00];
  v594[0] = 0;
  pixelBuffer = 0;
  if ((a7 != 0) != (a9 == 0))
    return 4294950306;
  v10 = a7;
  v14 = a1;
  if (*a1 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(a1[1] + 16), *a1))
    goto LABEL_553;
  v536 = a6;
  *(_QWORD *)size = 0;
  LODWORD(v620) = 0;
  *(_DWORD *)v636 = 0;
  v15 = a2;
  v16 = CFGetAllocator(a2);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v18 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v18)
  {
    v20 = 4294954514;
    goto LABEL_12;
  }
  v19 = v18(FigBaseObject, *MEMORY[0x1E0CA8E68], v16, size);
  if ((_DWORD)v19 == -12783)
    goto LABEL_10;
  v20 = v19;
  if (!(_DWORD)v19)
  {
    if (!CMPhotoCFDictionaryGetInt32IfPresent(*(CFDictionaryRef *)size, (const void *)*MEMORY[0x1E0CA8E60], &v620)|| !CMPhotoCFDictionaryGetInt32IfPresent(*(CFDictionaryRef *)size, (const void *)*MEMORY[0x1E0CA8E70], v636)|| (_DWORD)v620 != *(_DWORD *)v636)
    {
      v20 = FigSignalErrorAt();
      goto LABEL_12;
    }
LABEL_10:
    v20 = 0;
  }
LABEL_12:
  if (*(_QWORD *)size)
    CFRelease(*(CFTypeRef *)size);
  if ((_DWORD)v20)
    goto LABEL_460;
  ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a2, 0);
  if ((_DWORD)ItemTypeFromReader
    || (ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, v594), (_DWORD)ItemTypeFromReader))
  {
    v20 = ItemTypeFromReader;
    goto LABEL_460;
  }
  v592 = 1;
  v558 = a5;
  v559 = v14;
  v535 = v10;
  if (v594[0] <= 1768912491)
  {
    if (v594[0] != 1735551332)
    {
      if (v594[0] == 1768187246)
      {
        v22 = (_BYTE *)v14[1];
        theDict = *v14;
        v23 = *((_OWORD *)v14 + 4);
        *(_OWORD *)&v636[32] = *((_OWORD *)v14 + 3);
        *(_OWORD *)&v636[48] = v23;
        *(_OWORD *)&v636[64] = *((_OWORD *)v14 + 5);
        v24 = *((_OWORD *)v14 + 2);
        *(_OWORD *)v636 = *((_OWORD *)v14 + 1);
        *(_OWORD *)&v636[16] = v24;
        v25 = *a5;
        v26 = *((_QWORD *)a5 + 1);
        v27 = *((_QWORD *)a5 + 2);
        v29 = *((_QWORD *)a5 + 3);
        v28 = *((_QWORD *)a5 + 4);
        v30 = *(_OWORD *)(a5 + 56);
        v624[0] = *(_OWORD *)(a5 + 40);
        v624[1] = v30;
        v31 = *(_OWORD *)(a5 + 88);
        v624[2] = *(_OWORD *)(a5 + 72);
        v625[0] = v31;
        v32 = *((_DWORD *)a5 + 26);
        v33 = a5[112];
        v551 = a5[114];
        v34 = *((_QWORD *)a5 + 15);
        v637[0] = 0;
        v628.i64[0] = 0;
        v638[0] = 0;
        *(_QWORD *)&v610 = 0;
        *(_QWORD *)&v607 = 0;
        v632.i64[0] = 0;
        v630.i32[0] = -1;
        LODWORD(v613) = -1;
        memset(v626, 0, 32);
        v35 = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(a2, v637, v626, &v592);
        if (!(_DWORD)v35)
        {
          if (!(v26 | v27) && (!(v29 | v28) || __PAIR128__(v28, v29) == *(_OWORD *)&v626[16]))
          {
            if (v25)
              memset(v626, 0, 32);
            goto LABEL_210;
          }
          if (v25)
          {
            *(_QWORD *)v626 = v26;
            *(_QWORD *)&v626[8] = v27;
            *(_QWORD *)&v626[16] = v29;
            *(_QWORD *)&v626[24] = v28;
            goto LABEL_210;
          }
          *(_QWORD *)size = v26;
          *(_QWORD *)&size[8] = v27;
          *(_QWORD *)&size[16] = v29;
          *(_QWORD *)&size[24] = v28;
          v35 = CMPhotoApplyCropCMPhotoRectToRect(v626, (unint64_t *)size);
          if (!(_DWORD)v35)
          {
LABEL_210:
            BYTE4(v634[0]) = 0;
            LODWORD(v634[0]) = 0;
            size[119] = 0;
            *(_DWORD *)&size[115] = 0;
            *(_DWORD *)&size[129] = 0;
            *(_DWORD *)&size[132] = 0;
            *(_OWORD *)((char *)v634 + 5) = *(_OWORD *)v626;
            *(_OWORD *)((char *)&v634[1] + 5) = *(_OWORD *)&v626[16];
            *(_OWORD *)&size[88] = v625[0];
            *(_QWORD *)&v620 = theDict;
            *((_QWORD *)&v620 + 1) = v22;
            *(_OWORD *)v623 = *(_OWORD *)&v636[32];
            *(_OWORD *)&v623[16] = *(_OWORD *)&v636[48];
            *(_OWORD *)&v623[32] = *(_OWORD *)&v636[64];
            v621 = *(_OWORD *)v636;
            v622 = *(uint64x2_t *)&v636[16];
            *(_WORD *)size = 1;
            size[2] = 0;
            *(_QWORD *)&size[32] = *(_QWORD *)&v626[24];
            *(_OWORD *)&size[19] = v634[1];
            *(_OWORD *)&size[3] = v634[0];
            memset(&size[40], 0, 48);
            *(_QWORD *)&size[104] = v32;
            *(_WORD *)&size[112] = v33;
            size[114] = v551;
            *(_QWORD *)&size[120] = v34;
            size[128] = 0;
            v159 = _decodeItem(&v620, v637[0], 0, a4, size, 0, 0, 0, &v628);
            v14 = v559;
            if ((_DWORD)v159)
            {
              v20 = v159;
              a5 = v558;
            }
            else
            {
              CMPhotoRemoveColorPropertiesFromBuffer((__CVBuffer *)v628.i64[0]);
              v20 = _copyColorInfoForItem(v22, a2, 0, v33, 0, 0, v638, (CFTypeRef *)&v610, (CFTypeRef *)&v607, (CFTypeRef *)&v632, &v630, &v613, 0);
              a5 = v558;
              if (!(_DWORD)v20)
              {
                CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v638[0], (const void *)v610, (const void *)v607, (const void *)v632.i64[0], (CVBufferRef)v628.i64[0]);
                CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v630.u32[0], v613, (__CVBuffer *)v628.i64[0]);
                pixelBuffer = (CVPixelBufferRef)v628.i64[0];
                v628.i64[0] = 0;
              }
            }
LABEL_213:
            if (v637[0])
              CFRelease(v637[0]);
            if (v628.i64[0])
              CFRelease((CFTypeRef)v628.i64[0]);
            if (v638[0])
              CFRelease(v638[0]);
            if ((_QWORD)v610)
              CFRelease((CFTypeRef)v610);
            if ((_QWORD)v607)
              CFRelease((CFTypeRef)v607);
            v160 = (const void *)v632.i64[0];
            if (v632.i64[0])
LABEL_224:
              CFRelease(v160);
LABEL_225:
            if ((_DWORD)v20)
              goto LABEL_460;
            v78 = 0;
LABEL_432:
            if (!*v14 || !CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(v14[1] + 16), *v14))
            {
              v239 = v592;
              if (a5[1])
                v240 = v592 == 1;
              else
                v240 = 1;
              v241 = !v240;
              v242 = 1;
              if (v240)
              {
                v242 = v592;
                v239 = 1;
              }
              else
              {
                v592 = 1;
              }
              if (v536)
                *v536 = v242;
              v243 = pixelBuffer;
              if (!pixelBuffer)
                return 0;
              if (!a9)
              {
                if (!v78)
                {
                  *(_QWORD *)size = 0;
                  *(_QWORD *)&size[8] = size;
                  *(_QWORD *)&size[16] = 0x2000000000;
                  *(_DWORD *)&size[24] = 0;
                  PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v535);
                  DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v243, PixelFormatType);
                  v250 = *((_QWORD *)v535 + 5);
                  block[0] = MEMORY[0x1E0C809B0];
                  block[1] = 0x40000000;
                  block[2] = ___decodeItem_block_invoke;
                  block[3] = &unk_1E53F56B8;
                  block[4] = size;
                  v251 = *((_OWORD *)v14 + 3);
                  v570 = *((_OWORD *)v14 + 2);
                  v571 = v251;
                  v252 = *((_OWORD *)v14 + 5);
                  v572 = *((_OWORD *)v14 + 4);
                  v573 = v252;
                  v253 = *((_OWORD *)v14 + 1);
                  v568 = *(_OWORD *)v14;
                  v569 = v253;
                  v574 = pixelBuffer;
                  v254 = *((_QWORD *)a5 + 16);
                  v255 = *((_OWORD *)a5 + 6);
                  v582 = *((_OWORD *)a5 + 7);
                  v581 = v255;
                  v256 = *((_OWORD *)a5 + 4);
                  v580 = *((_OWORD *)a5 + 5);
                  v579 = v256;
                  v257 = *((_OWORD *)a5 + 2);
                  v578 = *((_OWORD *)a5 + 3);
                  v577 = v257;
                  v258 = *((_OWORD *)a5 + 1);
                  v575 = *(_OWORD *)a5;
                  v576 = v258;
                  v585 = v239;
                  v583 = v254;
                  v584 = v535;
                  v586 = DefaultTripletsForTransfer;
                  v587 = v259;
                  dispatch_sync(v250, block);
                  v20 = *(unsigned int *)(*(_QWORD *)&size[8] + 24);
                  _Block_object_dispose(size, 8);
                  goto LABEL_460;
                }
                v20 = 0;
                v247 = 0;
                goto LABEL_462;
              }
              v244 = *((_DWORD *)a5 + 26);
              if (!v244)
              {
                v244 = CVPixelBufferGetPixelFormatType(pixelBuffer);
                *((_DWORD *)a5 + 26) = v244;
                v243 = pixelBuffer;
              }
              if (v244 == CVPixelBufferGetPixelFormatType(v243))
                v245 = v241;
              else
                v245 = 1;
              if (v245 == 1)
              {
                if (a5[114])
                {
                  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v247 = Mutable;
                  if (!Mutable)
                  {
                    v20 = 4294950305;
                    goto LABEL_461;
                  }
                  CMPhotoCFDictionarySetBoolean(Mutable, CFSTR("PreferLowMemory"), a5[114]);
                }
                else
                {
                  v247 = 0;
                }
                v260 = *((_OWORD *)a5 + 7);
                *(_OWORD *)&size[96] = *((_OWORD *)a5 + 6);
                *(_OWORD *)&size[112] = v260;
                *(_QWORD *)&size[128] = *((_QWORD *)a5 + 16);
                v261 = *((_OWORD *)a5 + 3);
                *(_OWORD *)&size[32] = *((_OWORD *)a5 + 2);
                *(_OWORD *)&size[48] = v261;
                v262 = *((_OWORD *)a5 + 5);
                *(_OWORD *)&size[64] = *((_OWORD *)a5 + 4);
                *(_OWORD *)&size[80] = v262;
                v263 = *((_OWORD *)a5 + 1);
                *(_OWORD *)size = *(_OWORD *)a5;
                *(_OWORD *)&size[16] = v263;
                v264 = _fillEdgesIfNeeded(pixelBuffer, (uint64_t)size, v239);
                if ((_DWORD)v264)
                  goto LABEL_554;
                v265 = CMPhotoCreateDefaultTripletsForTransfer(pixelBuffer, *((unsigned int *)a5 + 26));
                *(_QWORD *)size = 0;
                v264 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v14[4], pixelBuffer, v247, *((_BYTE *)v14 + 49) == 0, v239, *((unsigned int *)a5 + 26), v265, v266, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v267, v268, 1u, 0, *((_BYTE *)v14 + 48),
                         *((_BYTE *)v14 + 50),
                         *((_BYTE *)v14 + 51),
                         *((_BYTE *)v14 + 52),
                         (__CVBuffer **)size);
                if ((_DWORD)v264)
                  goto LABEL_554;
                if (pixelBuffer)
                  CFRelease(pixelBuffer);
                pixelBuffer = *(CVPixelBufferRef *)size;
              }
              else
              {
                v247 = 0;
              }
              v269 = *((_QWORD *)a5 + 7);
              v270 = *((_QWORD *)a5 + 8);
              if (*(_OWORD *)(a5 + 40) == 0 && !(v269 | v270)
                || (v264 = CMPhotoSetPixelBufferCLAPFromRect(pixelBuffer, 1, 1, (double)*((unint64_t *)a5 + 5), (double)*((unint64_t *)a5 + 6), (double)v269, (double)v270), !(_DWORD)v264))
              {
                v20 = 0;
                *a9 = pixelBuffer;
                pixelBuffer = 0;
                if (!v247)
                  return v20;
LABEL_475:
                CFRelease(v247);
                return v20;
              }
LABEL_554:
              v20 = v264;
              goto LABEL_461;
            }
LABEL_553:
            v247 = 0;
            v20 = 4294950191;
            goto LABEL_461;
          }
        }
        v20 = v35;
        a5 = v558;
        v14 = v559;
        goto LABEL_213;
      }
LABEL_45:
      v57 = *((_OWORD *)v14 + 3);
      v58 = *((_OWORD *)v14 + 1);
      *(_OWORD *)&v636[32] = *((_OWORD *)v14 + 2);
      *(_OWORD *)&v636[48] = v57;
      v59 = *((_OWORD *)v14 + 3);
      v60 = *((_OWORD *)v14 + 5);
      *(_OWORD *)&v636[64] = *((_OWORD *)v14 + 4);
      *(_OWORD *)&v636[80] = v60;
      v61 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v636 = *(_OWORD *)v14;
      *(_OWORD *)&v636[16] = v61;
      v62 = *(_OWORD *)(a5 + 56);
      v63 = *(_OWORD *)(a5 + 88);
      v624[2] = *(_OWORD *)(a5 + 72);
      v625[0] = v63;
      *(_OWORD *)((char *)v625 + 9) = *(_OWORD *)(a5 + 97);
      v624[0] = *(_OWORD *)(a5 + 40);
      v624[1] = v62;
      *(_QWORD *)&v626[14] = *((_QWORD *)a5 + 16);
      *(_OWORD *)v626 = *(_OWORD *)(a5 + 114);
      v622 = *(uint64x2_t *)&v636[32];
      *(_OWORD *)v623 = v59;
      v64 = *((_OWORD *)v14 + 5);
      *(_OWORD *)&v623[16] = *(_OWORD *)&v636[64];
      *(_OWORD *)&v623[32] = v64;
      v524 = *a5;
      v632.i32[0] = *(_DWORD *)(a5 + 1);
      *(__int32 *)((char *)v632.i32 + 3) = *((_DWORD *)a5 + 1);
      theDictb = *((_QWORD *)a5 + 1);
      v553 = *((_QWORD *)a5 + 2);
      theArraya = (CFArrayRef)*((_QWORD *)a5 + 3);
      v538 = *((_QWORD *)a5 + 4);
      v65 = a5[113];
      v620 = *(_OWORD *)v636;
      v621 = v58;
      v638[0] = 0;
      *(_QWORD *)&v610 = 0;
      v66 = *(_QWORD *)&v636[8];
      if (*(_QWORD *)v636)
      {
        if (CMPhotoDecompressionSessionAsyncRequestCancelled(*(_QWORD *)(*(_QWORD *)&v636[8] + 16), *(_BOOL8 *)v636))
        {
          v189 = 0;
          v20 = 4294950191;
          goto LABEL_573;
        }
        v66 = *(_QWORD *)&v636[8];
      }
      ImageOrientation = _getImageOrientation(v66, a2, a3, &v592);
      if (!(_DWORD)ImageOrientation)
      {
        if (a4)
        {
          v136 = 0;
          v137 = a4;
          goto LABEL_246;
        }
        if (v10)
        {
          *(_QWORD *)size = 0;
          *(_QWORD *)&size[8] = 0;
          PixelBufferSize = CMPhotoGetPixelBufferSize(*(__CVBuffer **)v10);
          v140 = v139;
          ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(*(_QWORD *)&v636[8] + 28), 0, (unint64_t)size);
          if ((_DWORD)ImageGeometryFromPictureReader)
            goto LABEL_582;
          v142 = vcvtad_u64_f64(v140);
          v144 = *(_QWORD *)size == vcvtad_u64_f64(PixelBufferSize) && *(_QWORD *)&size[8] == v142;
        }
        else
        {
          v144 = 0;
        }
        *(_OWORD *)&size[56] = v624[1];
        *(_OWORD *)&size[72] = v624[2];
        *(_OWORD *)&size[88] = v625[0];
        *(_OWORD *)&size[97] = *(_OWORD *)((char *)v625 + 9);
        size[0] = v524;
        *(_DWORD *)&size[1] = v632.i32[0];
        *(_DWORD *)&size[4] = *(__int32 *)((char *)v632.i32 + 3);
        *(_QWORD *)&size[8] = theDictb;
        *(_QWORD *)&size[16] = v553;
        *(_QWORD *)&size[24] = theArraya;
        *(_QWORD *)&size[32] = v538;
        *(_OWORD *)&size[40] = v624[0];
        size[113] = v65;
        *(_QWORD *)&size[128] = *(_QWORD *)&v626[14];
        *(_OWORD *)&size[114] = *(_OWORD *)v626;
        ImageGeometryFromPictureReader = HEIFItemDecoderCreate((uint64_t)v636, a3, a2, 0, (uint64_t)size, v144, 1uLL, 1uLL, 0, 0, 0, &v610, (__CVBuffer **)v10);
        if (!(_DWORD)ImageGeometryFromPictureReader)
        {
          v136 = v610;
          v164 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          if (*MEMORY[0x1E0CA1FC0] == 1)
          {
            kdebug_trace();
            if (*v164 == 1)
              kdebug_trace();
          }
          v137 = v136;
          v15 = a2;
LABEL_246:
          v630.i8[0] = 0;
          if (v65)
          {
            v165 = v15;
            v166 = 0;
          }
          else
          {
            v166 = *(const void **)(v137 + 24);
            v165 = v15;
          }
          SampleBufferFromPictureReader = _createSampleBufferFromPictureReader(v165, v166, v638, (BOOL *)v630.i8);
          if (!(_DWORD)SampleBufferFromPictureReader)
          {
            if (!v630.i8[0] || *(_BYTE *)(v137 + 88))
            {
LABEL_256:
              if (v10)
              {
                v168 = v592;
                LODWORD(v607) = v632.i32[0];
                *(_DWORD *)((char *)&v607 + 3) = *(__int32 *)((char *)v632.i32 + 3);
                *(_OWORD *)&size[32] = v624[2];
                *(_OWORD *)&size[48] = v625[0];
                *(_OWORD *)&size[57] = *(_OWORD *)((char *)v625 + 9);
                *(_OWORD *)size = v624[0];
                *(_OWORD *)&size[16] = v624[1];
                *(_QWORD *)((char *)v634 + 14) = *(_QWORD *)&v626[14];
                v634[0] = *(_OWORD *)v626;
                v637[0] = 0;
                v628.i64[0] = 0;
                if (*(_QWORD *)v636)
                  v169 = *(_QWORD *)v636;
                else
                  v169 = *(_QWORD *)&v636[8];
                v170 = (_DWORD *)MEMORY[0x1E0CA1FC0];
                if (*MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v137 + 224), 0xFFFFFFFFFFFFFFFFLL);
                if (*v170 == 1)
                  kdebug_trace();
                os_unfair_lock_lock((os_unfair_lock_t)(v137 + 14576));
                Count = CFArrayGetCount(*(CFArrayRef *)(v137 + 14584));
                v172 = CFArrayGetCount(*(CFArrayRef *)(v137 + 14592));
                if (Count || v172 < 1)
                {
LABEL_269:
                  os_unfair_lock_unlock((os_unfair_lock_t)(v137 + 14576));
                }
                else
                {
                  while (1)
                  {
                    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v137 + 14592), 0);
                    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v137 + 14592), 0);
                    CFSetGetCount(*(CFSetRef *)(v137 + 14600));
                    os_unfair_lock_unlock((os_unfair_lock_t)(v137 + 14576));
                    if (!ValueAtIndex)
                      break;
                    dispatch_block_wait(ValueAtIndex, 0xFFFFFFFFFFFFFFFFLL);
                    _Block_release(ValueAtIndex);
                    os_unfair_lock_lock((os_unfair_lock_t)(v137 + 14576));
                    v174 = CFArrayGetCount(*(CFArrayRef *)(v137 + 14584));
                    v175 = CFArrayGetCount(*(CFArrayRef *)(v137 + 14592));
                    if (v174 || v175 <= 0)
                      goto LABEL_269;
                  }
                }
                os_unfair_lock_lock((os_unfair_lock_t)(v137 + 14576));
                v176 = CFArrayGetCount(*(CFArrayRef *)(v137 + 14584)) - 1;
                v177 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v137 + 14584), v176);
                CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v137 + 14584), v176);
                CFSetAddValue(*(CFMutableSetRef *)(v137 + 14600), v177);
                CFSetGetCount(*(CFSetRef *)(v137 + 14600));
                v178 = *(_QWORD *)(v137 + 14608) + 1;
                *(_QWORD *)(v137 + 14608) = v178;
                *((_QWORD *)v177 + 25) = v178;
                os_unfair_lock_unlock((os_unfair_lock_t)(v137 + 14576));
                if (*v170 == 1)
                  kdebug_trace();
                a5 = v558;
                if (*(_BYTE *)(v137 + 156))
                {
                  if (!*(_BYTE *)(v137 + 158))
                  {
                    v179 = _createBufferAndOptionsForTileDecoding(*(const void **)&v636[24], v169, v636[49], *(_QWORD *)(v137 + 160), *(_QWORD *)(v137 + 168), *(unsigned int *)(v137 + 152), (int *)(v137 + 92), *(const __CFDictionary **)(v137 + 32), &v628, (__CFDictionary **)v637);
                    if (!(_DWORD)v179)
                    {
                      DictionaryRepresentation = 0;
                      v181 = (CVPixelBufferRef)v628.i64[0];
LABEL_400:
                      v228 = *v535;
                      v229 = v535[2];
                      v177[1] = v535[1];
                      v177[2] = v229;
                      *v177 = v228;
                      *((_BYTE *)v177 + 48) = v524;
                      *(_DWORD *)((char *)v177 + 49) = v607;
                      *((_DWORD *)v177 + 13) = *(_DWORD *)((char *)&v607 + 3);
                      *((_QWORD *)v177 + 7) = theDictb;
                      *((_QWORD *)v177 + 8) = v553;
                      *((_QWORD *)v177 + 9) = theArraya;
                      *((_QWORD *)v177 + 10) = v538;
                      v230 = *(_OWORD *)size;
                      *(_OWORD *)((char *)v177 + 104) = *(_OWORD *)&size[16];
                      v231 = *(_OWORD *)&size[48];
                      *(_OWORD *)((char *)v177 + 120) = *(_OWORD *)&size[32];
                      *(_OWORD *)((char *)v177 + 136) = v231;
                      *(_OWORD *)((char *)v177 + 145) = *(_OWORD *)&size[57];
                      *(_OWORD *)((char *)v177 + 88) = v230;
                      *((_BYTE *)v177 + 161) = v65;
                      *((_QWORD *)v177 + 22) = *(_QWORD *)((char *)v634 + 14);
                      *(_OWORD *)((char *)v177 + 162) = v634[0];
                      *((_DWORD *)v177 + 46) = v168;
                      *((_QWORD *)v177 + 24) = *(_QWORD *)v636;
                      if (v181)
                        v181 = (CVPixelBufferRef)CFRetain(v181);
                      *((_QWORD *)v177 + 26) = v181;
                      if (v637[0])
                        v232 = CFRetain(v637[0]);
                      else
                        v232 = 0;
                      *((_QWORD *)v177 + 27) = v232;
                      v20 = CMPhotoDecompressionPluginDecode(*(_QWORD *)(v137 + 16));
                      if (!(_DWORD)v20)
                      {
                        v14 = v559;
LABEL_412:
                        v10 = v535;
                        if (v628.i64[0])
                          CFRelease((CFTypeRef)v628.i64[0]);
                        if (v637[0])
                          CFRelease(v637[0]);
                        if (DictionaryRepresentation)
                          CFRelease(DictionaryRepresentation);
                        if (!(_DWORD)v20)
                          goto LABEL_419;
                        v189 = 0;
                        goto LABEL_720;
                      }
                      v14 = v559;
LABEL_407:
                      _asyncCanvasDecodeFinished(v137, v177, v20, 0);
                      v233 = (const void *)*((_QWORD *)v177 + 26);
                      if (v233)
                      {
                        CFRelease(v233);
                        *((_QWORD *)v177 + 26) = 0;
                      }
                      v234 = (const void *)*((_QWORD *)v177 + 27);
                      if (v234)
                      {
                        CFRelease(v234);
                        *((_QWORD *)v177 + 27) = 0;
                      }
                      goto LABEL_412;
                    }
                    v20 = v179;
                    DictionaryRepresentation = 0;
LABEL_586:
                    v14 = v559;
                    goto LABEL_407;
                  }
                }
                else if (!*(_BYTE *)(v137 + 158))
                {
                  v181 = 0;
                  DictionaryRepresentation = 0;
                  goto LABEL_400;
                }
                v184 = CFGetAllocator(*(CFTypeRef *)&v636[8]);
                v185 = CFDictionaryCreateMutable(v184, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v637[0] = v185;
                if (v185)
                {
                  v186 = v185;
                  v641.origin.x = (double)*((unint64_t *)v535 + 1);
                  v641.origin.y = (double)*((unint64_t *)v535 + 2);
                  v641.size.width = (double)*((unint64_t *)v535 + 3);
                  v641.size.height = (double)*((unint64_t *)v535 + 4);
                  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v641);
                  if (DictionaryRepresentation)
                  {
                    CFDictionaryAddValue(v186, CFSTR("CanvasPixelBuffer"), *(const void **)v535);
                    CFDictionaryAddValue(v186, CFSTR("CanvasOrigin"), DictionaryRepresentation);
                    v181 = *(CVPixelBufferRef *)v535;
                    if (*(_QWORD *)v535)
                      v181 = (CVPixelBufferRef)CFRetain(v181);
                    v628.i64[0] = (uint64_t)v181;
                    goto LABEL_400;
                  }
                }
                else
                {
                  DictionaryRepresentation = 0;
                }
                v20 = 4294950305;
                goto LABEL_586;
              }
              *(_QWORD *)&v634[0] = 0;
              v637[0] = 0;
              memset(size, 0, 32);
              if (*(_BYTE *)(v137 + 156))
              {
                if (*(_QWORD *)v636)
                  v182 = *(_QWORD *)v636;
                else
                  v182 = *(_QWORD *)&v636[8];
                BufferAndOptionsForTileDecoding = _createBufferAndOptionsForTileDecoding(*(const void **)&v636[24], v182, v636[49], *(_QWORD *)(v137 + 160), *(_QWORD *)(v137 + 168), *(unsigned int *)(v137 + 152), (int *)(v137 + 92), *(const __CFDictionary **)(v137 + 32), v637, (__CFDictionary **)v634);
                if ((_DWORD)BufferAndOptionsForTileDecoding)
                  goto LABEL_726;
              }
              else
              {
                v187 = *(_DWORD *)(v137 + 152);
                if (v187 == 825306677 || v187 == 1932996149 || v187 == 825437747)
                {
                  v188 = CFGetAllocator(*(CFTypeRef *)&v636[8]);
                  *(_QWORD *)&v634[0] = CFDictionaryCreateMutable(v188, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (!*(_QWORD *)&v634[0])
                    goto LABEL_724;
                  BufferAndOptionsForTileDecoding = FigCFDictionarySetInt();
                  if ((_DWORD)BufferAndOptionsForTileDecoding)
                    goto LABEL_726;
                }
              }
              *(_QWORD *)&size[24] = *(_QWORD *)v636;
              if (*(_BYTE *)(v137 + 208) || (*(_QWORD *)&size[8] = dispatch_semaphore_create(0)) != 0)
              {
                BufferAndOptionsForTileDecoding = CMPhotoDecompressionPluginDecode(*(_QWORD *)(v137 + 16));
                if (!(_DWORD)BufferAndOptionsForTileDecoding)
                {
                  if (!*(_BYTE *)(v137 + 208))
                    dispatch_semaphore_wait(*(dispatch_semaphore_t *)&size[8], 0xFFFFFFFFFFFFFFFFLL);
                  v20 = *(unsigned int *)&size[16];
                  if (*(_DWORD *)&size[16])
                    goto LABEL_727;
                  v189 = *(__CVBuffer **)size;
                  if (*(CFTypeRef *)size != v637[0] && *(_BYTE *)(v137 + 156))
                  {
                    BufferAndOptionsForTileDecoding = FigSignalErrorAt();
                  }
                  else
                  {
                    if (v524)
                    {
LABEL_304:
                      v20 = 0;
                      *(_QWORD *)size = 0;
                      goto LABEL_305;
                    }
                    BufferAndOptionsForTileDecoding = CMPhotoSetPixelBufferCLAPFromRect(*(__CVBuffer **)size, 1, 1, (double)*(unint64_t *)(v137 + 176), (double)*(unint64_t *)(v137 + 184), (double)*(unint64_t *)(v137 + 192), (double)*(unint64_t *)(v137 + 200));
                    if (!(_DWORD)BufferAndOptionsForTileDecoding)
                    {
                      v189 = *(__CVBuffer **)size;
                      goto LABEL_304;
                    }
                  }
                }
LABEL_726:
                v20 = BufferAndOptionsForTileDecoding;
LABEL_727:
                v189 = 0;
LABEL_305:
                if (v637[0])
                  CFRelease(v637[0]);
                if (*(_QWORD *)&v634[0])
                  CFRelease(*(CFTypeRef *)&v634[0]);
                if (*(_QWORD *)size)
                  CFRelease(*(CFTypeRef *)size);
                if (*(_QWORD *)&size[8])
                  dispatch_release(*(dispatch_object_t *)&size[8]);
                if (!(_DWORD)v20)
                {
                  if (!(theDictb | v553) && !((unint64_t)theArraya | v538)
                    || (v190 = CMPhotoSetPixelBufferCLAPFromRect(v189, 1, 1, (double)theDictb, (double)v553, (double)(unint64_t)theArraya, (double)v538), !(_DWORD)v190))
                  {
                    pixelBuffer = v189;
LABEL_419:
                    v20 = 0;
                    v235 = v10 != 0;
LABEL_420:
                    v189 = 0;
                    v236 = v20 != 0;
                    goto LABEL_421;
                  }
                  v20 = v190;
                }
                goto LABEL_720;
              }
LABEL_724:
              v189 = 0;
              v20 = 4294950305;
              goto LABEL_305;
            }
            if (v136)
            {
              HEIFItemDecoderRelease(v136);
              *(_QWORD *)&v610 = 0;
            }
            *(_OWORD *)&size[56] = v624[1];
            *(_OWORD *)&size[72] = v624[2];
            *(_OWORD *)&size[88] = v625[0];
            *(_OWORD *)&size[97] = *(_OWORD *)((char *)v625 + 9);
            v622.i32[3] = 1;
            size[0] = v524;
            *(_DWORD *)&size[1] = v632.i32[0];
            *(_DWORD *)&size[4] = *(__int32 *)((char *)v632.i32 + 3);
            *(_QWORD *)&size[8] = theDictb;
            *(_QWORD *)&size[16] = v553;
            *(_QWORD *)&size[24] = theArraya;
            *(_QWORD *)&size[32] = v538;
            *(_OWORD *)&size[40] = v624[0];
            size[113] = v65;
            *(_QWORD *)&size[128] = *(_QWORD *)&v626[14];
            *(_OWORD *)&size[114] = *(_OWORD *)v626;
            SampleBufferFromPictureReader = HEIFItemDecoderCreate((uint64_t)&v620, a3, v15, 0, (uint64_t)size, 0, 1uLL, 1uLL, 0, 0, 0, &v610, (__CVBuffer **)v10);
            if (!(_DWORD)SampleBufferFromPictureReader)
            {
              v137 = v610;
              goto LABEL_256;
            }
          }
          v20 = SampleBufferFromPictureReader;
          v189 = 0;
LABEL_720:
          v280 = a4;
          goto LABEL_721;
        }
LABEL_582:
        v20 = ImageGeometryFromPictureReader;
        v235 = 0;
        v137 = 0;
        goto LABEL_420;
      }
      v20 = ImageOrientation;
      v189 = 0;
LABEL_573:
      v280 = a4;
      v137 = a4;
LABEL_721:
      v235 = 0;
      if (v280)
        *(_DWORD *)(v280 + 14580) = v20;
      v236 = 1;
LABEL_421:
      if ((_QWORD)v610)
      {
        v237 = HEIFItemDecoderWaitForFinishAndReturnStatus(v610, (uint64_t *)(v137 + 160), 0, 0);
        HEIFItemDecoderRelease(v610);
        v20 = v236 ? v20 : v237;
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
      }
      v78 = v235;
      if (v189)
        CFRelease(v189);
      v238 = v638[0];
      if (!v638[0])
        goto LABEL_431;
      goto LABEL_430;
    }
    v67 = *((_OWORD *)v14 + 3);
    *(_OWORD *)&v636[32] = *((_OWORD *)v14 + 2);
    *(_OWORD *)&v636[48] = v67;
    v68 = *((_OWORD *)v14 + 5);
    *(_OWORD *)&v636[64] = *((_OWORD *)v14 + 4);
    *(_OWORD *)&v636[80] = v68;
    v69 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v636 = *(_OWORD *)v14;
    *(_OWORD *)&v636[16] = v69;
    v70 = *a5;
    v525 = a5[1];
    v590 = *(_DWORD *)(a5 + 2);
    v591 = *((_WORD *)a5 + 3);
    v71 = *((_QWORD *)a5 + 1);
    v72 = *((_QWORD *)a5 + 2);
    v73 = *((_QWORD *)a5 + 3);
    theArrayb = (CFArrayRef)*((_QWORD *)a5 + 4);
    v74 = *(_OWORD *)(a5 + 56);
    v634[0] = *(_OWORD *)(a5 + 40);
    v634[1] = v74;
    v634[2] = *(_OWORD *)(a5 + 72);
    *(_QWORD *)v562 = *((_QWORD *)a5 + 11);
    theDictc = *((_QWORD *)a5 + 12);
    v502 = *((_QWORD *)a5 + 13);
    v539 = a5[112];
    v497 = a5[113];
    v520 = a5[114];
    v589 = a5[119];
    v588 = *(_DWORD *)(a5 + 115);
    *(_QWORD *)v515 = *((_QWORD *)a5 + 15);
    v491 = *((_QWORD *)a5 + 16);
    v619 = 0;
    v618 = 0;
    v617 = 0;
    v616 = 0;
    v615 = 0;
    v614 = 0;
    v604 = 0;
    v603 = 0;
    v602 = 0;
    v601 = -1;
    v600 = -1;
    v599 = 0;
    BOOLean = 0;
    v75 = *(_QWORD *)v636;
    if (!*(_QWORD *)v636)
      v75 = *(_QWORD *)&v636[8];
    v506 = v75;
    v597 = 0;
    v554 = CFGetAllocator(*(CFTypeRef *)&v636[8]);
    TileGeometryFromPictureTileCursorService = _getImageOrientation(*(uint64_t *)&v636[8], a2, 0, &v592);
    if ((_DWORD)TileGeometryFromPictureTileCursorService)
      goto LABEL_60;
    v77 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v77)
    {
      v78 = 0;
      v20 = 4294954514;
      goto LABEL_527;
    }
    TileGeometryFromPictureTileCursorService = v77(a2, &v618);
    if ((_DWORD)TileGeometryFromPictureTileCursorService)
      goto LABEL_60;
    v632 = 0uLL;
    v630 = 0uLL;
    v613 = 0uLL;
    v612 = 0uLL;
    memset(v637, 0, 32);
    TileGeometryFromPictureTileCursorService = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(*(_QWORD *)&v636[8] + 28), (unint64_t)v637, (unint64_t)&v612);
    if ((_DWORD)TileGeometryFromPictureTileCursorService)
      goto LABEL_60;
    TileGeometryFromPictureTileCursorService = _getTileGeometryFromPictureTileCursorService(v618, &v632, (unint64_t *)&v630, (unint64_t)&v613);
    if ((_DWORD)TileGeometryFromPictureTileCursorService)
      goto LABEL_60;
    TileGeometryFromPictureTileCursorService = CMPhotoPictureReaderGetImageCodecTypeFromReader(a2, &v597);
    if ((_DWORD)TileGeometryFromPictureTileCursorService)
      goto LABEL_60;
    if (v70)
    {
      v637[1] = 0;
      v637[0] = 0;
      *(_OWORD *)&v637[2] = v613;
    }
    v475 = v70;
    if (v71 | v72 || v73 | (unint64_t)theArrayb && ((CFTypeRef)v73 != v637[2] || theArrayb != v637[3]))
    {
      *(_QWORD *)size = v71;
      *(_QWORD *)&size[8] = v72;
      *(_QWORD *)&size[16] = v73;
      *(_QWORD *)&size[24] = theArrayb;
      TileGeometryFromPictureTileCursorService = CMPhotoApplyCropCMPhotoRectToRect(v637, (unint64_t *)size);
      if ((_DWORD)TileGeometryFromPictureTileCursorService)
      {
LABEL_60:
        v20 = TileGeometryFromPictureTileCursorService;
        v78 = 0;
        goto LABEL_527;
      }
    }
    v473 = v73;
    v152 = v630;
    v513 = (unint64_t)v637[0] / v630.i64[0] * v630.i64[0];
    v510 = (unint64_t)v637[1] / v630.i64[1] * v630.i64[1];
    v637[0] = (CFTypeRef)((unint64_t)v637[0] % v630.i64[0]);
    v637[1] = (CFTypeRef)((unint64_t)v637[1] % v630.i64[1]);
    v612.i64[0] = (uint64_t)v637[2] + (unint64_t)v637[0];
    v612.i64[1] = (uint64_t)v637[3] + (unint64_t)v637[1];
    v153 = ((unint64_t)v637[2]
          + (unint64_t)v637[0]
          + v630.i64[0]
          + ~(((unint64_t)v637[2] + (unint64_t)v637[0] - 1) % v630.i64[0]))
         / v630.i64[0];
    v154 = ((unint64_t)v637[3]
          + (unint64_t)v637[1]
          + v630.i64[1]
          + ~(((unint64_t)v637[3] + (unint64_t)v637[1] - 1) % v630.i64[1]))
         / v630.i64[1];
    v632.i64[0] = v153;
    v632.i64[1] = v154;
    if (v597 != 1936484717 || (v78 = 0, v20 = 4294950297, v154 <= 4) && v153 == 1)
    {
      *(_QWORD *)&v613 = v153 * v630.i64[0];
      *((_QWORD *)&v613 + 1) = v154 * v630.i64[1];
      if (v525)
        v155 = v592 == 1;
      else
        v155 = 1;
      v157 = !v155 || ((v72 % v630.i64[1]) | (v71 % v630.i64[0])) != 0 || v10 == 0;
      v158 = !v157;
      v500 = v158;
      if (!v157
        && (!*(_QWORD *)v10
         || *(__int128 *)((char *)v10 + 8) != 0
         || *(__int128 *)((char *)v10 + 24) != 0
         || !*((_QWORD *)v10 + 5)))
      {
        v78 = 0;
        v20 = 4294950304;
        goto LABEL_527;
      }
      if (*(_QWORD *)v562 | theDictc && *(_OWORD *)&v630 != __PAIR128__(theDictc, *(unint64_t *)v562))
      {
        v163 = *(_QWORD *)v562;
        value.i64[0] = *(_QWORD *)v562;
        v162 = theDictc;
        value.i64[1] = theDictc;
        v486 = 1;
      }
      else
      {
        v486 = 0;
        value = v630;
        v162 = v630.i64[1];
        v163 = v630.i64[0];
      }
      v460 = v162 * v154;
      v463 = v163 * v153;
      *(_QWORD *)&v606 = v163 * v153;
      *((_QWORD *)&v606 + 1) = v162 * v154;
      v628 = 0uLL;
      *(_QWORD *)v629 = (char *)v637[2] + (unint64_t)v637[0];
      *(_QWORD *)&v629[8] = (char *)v637[3] + (unint64_t)v637[1];
      _getScaledEvenCropRect((uint64_t)&v628, v630.u64[0], v630.u64[1], v163, v162, (uint64_t)v638);
      v605 = *(_OWORD *)&v638[2];
      v610 = 0u;
      v611 = 0u;
      *(_OWORD *)size = *(_OWORD *)v637;
      *(_OWORD *)&size[16] = *(_OWORD *)&v637[2];
      _getScaledEvenCropRect((uint64_t)size, v152.u64[0], v152.u64[1], v163, v162, (uint64_t)&v610);
      v191 = _copyColorInfoForItem(*(_BYTE **)&v636[8], a2, 0, v539, (CMVideoFormatDescriptionRef *)&v599, 0, &v614, &v604, &v603, &v602, &v601, &v600, 0);
      if ((_DWORD)v191)
      {
        v20 = v191;
        v78 = 0;
        v14 = v559;
        goto LABEL_527;
      }
      v192 = FigPictureReaderGetFigBaseObject();
      v193 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      v14 = v559;
      if (v193)
      {
        v194 = v193(v192, *MEMORY[0x1E0CC4B68], v554, &BOOLean);
        if ((_DWORD)v194)
          goto LABEL_732;
        allocatora = CFBooleanGetValue(BOOLean);
        if (v597 == 1936484717 && !allocatora)
        {
          v194 = FigSignalErrorAt();
          goto LABEL_732;
        }
        if (BOOLean)
        {
          CFRelease(BOOLean);
          BOOLean = 0;
        }
        v195 = FigPictureReaderGetFigBaseObject();
        v196 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v196)
        {
          v194 = v196(v195, *MEMORY[0x1E0CC4B60], v554, &BOOLean);
          if (!(_DWORD)v194)
          {
            if (CFBooleanGetValue(BOOLean))
              v197 = 1;
            else
              v197 = v486;
            if (v500)
            {
              dispatch_retain(*((dispatch_object_t *)v10 + 5));
              v198 = *((_QWORD *)v10 + 5);
            }
            else
            {
              v198 = dispatch_queue_create("com.apple.cmphoto.canvasTransferQueue", 0);
            }
            if (!v198)
            {
              v78 = 0;
              v20 = 4294950305;
              goto LABEL_527;
            }
            v199 = v618;
            v200 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v200)
            {
              v78 = 0;
              v274 = 0;
              v20 = 4294954514;
              goto LABEL_526;
            }
            queuea = v198;
            v201 = v200(v199, &v617);
            if ((_DWORD)v201)
            {
              v20 = v201;
              v78 = 0;
              v274 = 0;
              goto LABEL_526;
            }
            memset(v626, 0, 37);
            v595 = 0;
            v596 = 0;
            memset(&v594[1], 0, 7);
            v202 = v632.u64[1];
            if (!v632.i64[1])
              goto LABEL_513;
            v203 = 0;
            v204 = 0;
            v205 = 0;
            v206 = v502;
            if (!(_DWORD)v502)
              v206 = 875704422;
            v455 = v206;
            v487 = v605;
            v479 = *MEMORY[0x1E0CC4C00];
            v482 = *((_QWORD *)&v605 + 1);
            v458 = v197 ^ 1;
            v207 = v632.i64[0];
            while (!v207)
            {
LABEL_395:
              if (++v205 >= v202)
              {
                if (v203)
                {
                  v226 = HEIFItemDecoderWaitForFinishAndReturnStatus((uint64_t)v203, v612.i64, v630.i64, value.i64);
                  v198 = queuea;
                  if ((_DWORD)v226)
                  {
                    v20 = v226;
                    v78 = 0;
                    a5 = v558;
                    goto LABEL_525;
                  }
                  v227 = 1;
                  goto LABEL_514;
                }
LABEL_513:
                v227 = 0;
                v198 = queuea;
LABEL_514:
                dispatch_barrier_sync(v198, &__block_literal_global_8_0);
                v275 = (int *)MEMORY[0x1E0CA1FC0];
                v276 = *MEMORY[0x1E0CA1FC0];
                if (v227 && v276 == 1)
                {
                  kdebug_trace();
                  v276 = *v275;
                }
                a5 = v558;
                if (v276 == 1)
                  kdebug_trace();
                if (v619)
                {
                  v277 = CMPhotoSetPixelBufferCLAPFromRect((__CVBuffer *)v619, 1, 1, (double)(unint64_t)v610, (double)*((unint64_t *)&v610 + 1), (double)(unint64_t)v611, (double)*((unint64_t *)&v611 + 1));
                  v78 = v277 == 0;
                  v278 = v500;
                  if ((_DWORD)v277)
                    v278 = 1;
                  if ((v278 & 1) != 0)
                  {
                    v20 = v277;
                  }
                  else
                  {
                    v78 = 0;
                    v20 = 0;
                    pixelBuffer = (CVPixelBufferRef)v619;
                    v619 = 0;
                  }
                }
                else
                {
                  v78 = 0;
                  v20 = 4294950305;
                }
                goto LABEL_525;
              }
            }
            v208 = 0;
            while (1)
            {
              if (v616)
              {
                CFRelease(v616);
                v616 = 0;
              }
              if (v204)
              {
                v20 = v204[3645];
                if ((_DWORD)v20)
                {
                  v78 = 0;
LABEL_512:
                  v198 = queuea;
LABEL_525:
                  v274 = v615;
LABEL_526:
                  HEIFItemDecoderRelease((uint64_t)v274);
                  dispatch_release(v198);
                  goto LABEL_527;
                }
              }
              v209 = v630;
              v210 = v617;
              v211 = *(uint64_t (**)(CFTypeRef, unint64_t, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 24);
              if (!v211)
                goto LABEL_510;
              v212 = v211(v210, v513 + v209.i64[0] * v208, v510 + v209.i64[1] * v205);
              if ((_DWORD)v212)
              {
LABEL_1049:
                v20 = v212;
                v78 = 0;
                goto LABEL_511;
              }
              CMBaseObject = FigPictureTileCursorGetCMBaseObject();
              v214 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
              if (!v214)
              {
LABEL_510:
                v78 = 0;
                v20 = 4294954514;
LABEL_511:
                a5 = v558;
                v14 = v559;
                goto LABEL_512;
              }
              v212 = v214(CMBaseObject, v479, v554, &v616);
              if ((_DWORD)v212)
                goto LABEL_1049;
              if (v619)
              {
                v14 = v559;
                goto LABEL_372;
              }
              v14 = v559;
              if (!v500)
                break;
              v215 = *(CFTypeRef *)v535;
              if (*(_QWORD *)v535)
                v215 = CFRetain(v215);
              v619 = v215;
              if (allocatora && !v204)
                goto LABEL_362;
LABEL_365:
              if (*MEMORY[0x1E0CA1FC0] == 1)
              {
                kdebug_trace();
                v203 = (unsigned int *)v615;
                if (v615 && *MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
              }
              else
              {
                v203 = (unsigned int *)v615;
              }
              if (!v619)
              {
                v78 = 0;
                v20 = 4294950305;
                goto LABEL_552;
              }
              CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v614, v604, v603, v602, (CVBufferRef)v619);
              CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v601, v600, (__CVBuffer *)v619);
              CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)v599, (__CVBuffer *)v619);
              v204 = v203;
LABEL_372:
              v217 = value.i64[1] * v205;
              v218 = v487 - value.i64[0] * v208;
              if (value.i64[0] >= v218)
                v219 = v487 - value.i64[0] * v208;
              else
                v219 = value.i64[0];
              if (value.i64[1] >= (unint64_t)(v482 - v217))
                v220 = v482 - v217;
              else
                v220 = value.i64[1];
              if (v219 && v220)
              {
                v221 = value.i64[0] > v218 || value.i64[1] > (unint64_t)(v482 - v217);
                v222 = v221;
                v223 = !v222;
                v224 = v222 ? v220 : 0;
                v225 = v223 ? 0 : v219;
                *(_QWORD *)&v624[0] = v619;
                *((_QWORD *)&v624[0] + 1) = value.i64[0] * v208;
                *(_QWORD *)&v624[1] = value.i64[1] * v205;
                *((_QWORD *)&v624[1] + 1) = v219;
                *(_QWORD *)&v624[2] = v220;
                *((_QWORD *)&v624[2] + 1) = queuea;
                v622 = *(uint64x2_t *)&v636[32];
                *(_OWORD *)v623 = *(_OWORD *)&v636[48];
                *(_OWORD *)&v623[16] = *(_OWORD *)&v636[64];
                *(_OWORD *)&v623[32] = *(_OWORD *)&v636[80];
                v620 = *(_OWORD *)v636;
                v621 = *(_OWORD *)&v636[16];
                *(_WORD *)size = 256;
                size[2] = 0;
                *(_OWORD *)&size[3] = *(_OWORD *)v626;
                *(_OWORD *)&size[19] = *(_OWORD *)&v626[16];
                *(_QWORD *)&size[32] = *(_QWORD *)&v626[29];
                *(_QWORD *)&size[40] = 0;
                *(_QWORD *)&size[48] = 0;
                *(_QWORD *)&size[56] = v225;
                *(_QWORD *)&size[64] = v224;
                *(_QWORD *)&size[72] = v612.i64[0] - v209.i64[0] * v208;
                *(_QWORD *)&size[80] = v612.i64[1] - v209.i64[1] * v205;
                *(_QWORD *)&size[88] = *(_QWORD *)v562;
                *(_QWORD *)&size[96] = theDictc;
                *(_QWORD *)&size[104] = 0;
                *(_WORD *)&size[112] = v539;
                size[114] = v520;
                *(_DWORD *)&size[115] = v595;
                size[119] = v596;
                *(_QWORD *)&size[120] = *(_QWORD *)v515;
                size[128] = 0;
                *(_DWORD *)&size[129] = v594[1];
                *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v594[1] + 3);
                v216 = _decodeItem(&v620, v616, 0, v203, size, 0, v624, 0, 0);
                v204 = v203;
                if ((_DWORD)v216)
                {
LABEL_551:
                  v20 = v216;
                  v78 = 0;
LABEL_552:
                  a5 = v558;
                  goto LABEL_512;
                }
              }
              ++v208;
              v207 = v632.i64[0];
              a5 = v558;
              if (v208 >= v632.i64[0])
              {
                v202 = v632.u64[1];
                goto LABEL_395;
              }
            }
            if (!allocatora || v204)
            {
              v607 = 0uLL;
              *(_QWORD *)&v608 = v487;
              *((_QWORD *)&v608 + 1) = v482;
              v216 = _createPixelBuffer(*(const void **)&v636[24], v506, v636[49], v455, value.i64[0], value.i64[1], v463, v460, (unint64_t *)&v607, 0, 0, &v619);
              if ((_DWORD)v216)
                goto LABEL_551;
              goto LABEL_365;
            }
LABEL_362:
            size[0] = v475;
            size[1] = v525;
            *(_DWORD *)&size[2] = v590;
            *(_WORD *)&size[6] = v591;
            *(_QWORD *)&size[8] = v71;
            *(_QWORD *)&size[16] = v72;
            *(_QWORD *)&size[24] = v473;
            *(_QWORD *)&size[32] = theArrayb;
            *(_OWORD *)&size[40] = v634[0];
            *(_OWORD *)&size[56] = v634[1];
            *(_OWORD *)&size[72] = v634[2];
            *(_QWORD *)&size[88] = *(_QWORD *)v562;
            *(_QWORD *)&size[96] = theDictc;
            *(_QWORD *)&size[104] = v502;
            size[112] = v539;
            size[113] = v497;
            size[114] = v520;
            size[119] = v589;
            *(_DWORD *)&size[115] = v588;
            *(_QWORD *)&size[120] = *(_QWORD *)v515;
            *(_QWORD *)&size[128] = v491;
            v216 = HEIFItemDecoderCreate((uint64_t)v636, a2, v616, 0, (uint64_t)size, v458, v632.u64[0], v632.u64[1], &v605, (size_t *)&v606, value.i64, &v615, (__CVBuffer **)&v619);
            if ((_DWORD)v216)
              goto LABEL_551;
            goto LABEL_365;
          }
LABEL_732:
          v20 = v194;
          v78 = 0;
          goto LABEL_527;
        }
      }
      v78 = 0;
      v20 = 4294954514;
    }
LABEL_527:
    if (v599)
      CFRelease(v599);
    if (v614)
      CFRelease(v614);
    if (v604)
      CFRelease(v604);
    if (v603)
      CFRelease(v603);
    if (v602)
      CFRelease(v602);
    if (v618)
      CFRelease(v618);
    if (v617)
      CFRelease(v617);
    if (v619)
      CFRelease(v619);
    if (v616)
      CFRelease(v616);
    v238 = BOOLean;
    if (!BOOLean)
      goto LABEL_431;
LABEL_430:
    CFRelease(v238);
    goto LABEL_431;
  }
  if (v594[0] != 1768912492)
  {
    if (v594[0] != 1953325424)
      goto LABEL_45;
    v36 = *((_DWORD *)v14 + 14);
    v37 = *((unsigned __int8 *)v14 + 68);
    v38 = a5;
    v39 = *((unsigned __int8 *)v14 + 69);
    if (v36 == 6)
      v40 = a8;
    else
      v40 = 0;
    v480 = v40;
    v41 = v14;
    v42 = *v14;
    v43 = (_BYTE *)v41[1];
    v484 = v41[2];
    theDicta = (const void *)v41[3];
    v505 = v41[4];
    v638[0] = (CFTypeRef)v41[5];
    LOBYTE(v638[1]) = *((_BYTE *)v41 + 48);
    v537 = *((unsigned __int8 *)v41 + 49);
    v44 = *((_BYTE *)v41 + 50);
    v561 = *((unsigned __int8 *)v41 + 51);
    v552 = *((_BYTE *)v41 + 52);
    LOWORD(v617) = *(_WORD *)((char *)v41 + 53);
    BYTE2(v617) = *((_BYTE *)v41 + 55);
    v45 = *((unsigned __int8 *)v41 + 60);
    v523 = *((_BYTE *)v41 + 61);
    v519 = *((_BYTE *)v41 + 62);
    v514 = *((_BYTE *)v41 + 63);
    v46 = *((float *)v41 + 16);
    v496 = *((_DWORD *)v41 + 17);
    v511 = v41[9];
    theArray = (CFArrayRef)v41[10];
    v490 = v41[11];
    v508 = v38[1];
    v47 = v38[2];
    v48 = *(_OWORD *)(v38 + 19);
    v634[0] = *(_OWORD *)(v38 + 3);
    v634[1] = v48;
    *(_QWORD *)((char *)&v634[1] + 13) = *((_QWORD *)v38 + 4);
    v501 = v38[114];
    v499 = *((_QWORD *)v38 + 15);
    v49 = CFGetAllocator(v43);
    *(_QWORD *)&v610 = 0;
    if (v42)
      v50 = v42;
    else
      v50 = (int)v43;
    v477 = v50;
    *(_QWORD *)&v607 = 0;
    v632.i64[0] = 0;
    v630.i64[0] = 0;
    *(_QWORD *)&v613 = 0;
    v612.i64[0] = 0;
    value.i64[0] = 0;
    *(_QWORD *)&v606 = 0;
    *(_QWORD *)&v605 = 0;
    if (v45)
      goto LABEL_567;
    v628 = 0uLL;
    memset(v636, 0, 80);
    HEIFOrientation = _copyFlexRangeDetails((uint64_t)v49, (uint64_t)a2, &v628, v636, (__CFDictionary **)&v613, 0, &v632, &v630);
    if ((_DWORD)HEIFOrientation)
      goto LABEL_568;
    LODWORD(v619) = 1;
    LODWORD(v618) = 1;
    HEIFOrientation = CMPhotoPictureReaderGetHEIFOrientation((const void *)v630.i64[0], 0, (int *)&v618);
    if ((_DWORD)HEIFOrientation)
      goto LABEL_568;
    HEIFOrientation = CMPhotoPictureReaderGetHEIFOrientation((const void *)v632.i64[0], 0, (int *)&v619);
    if ((_DWORD)HEIFOrientation)
      goto LABEL_568;
    memset(size, 0, 32);
    CropPostOrientation = CMPhotoPictureReaderGetImageGeometryFromPictureReader((const void *)v630.i64[0], 0, (unint64_t)size, 0);
    if ((_DWORD)CropPostOrientation)
      goto LABEL_558;
    v472 = *(_QWORD *)&size[24];
    v474 = *(_QWORD *)&size[16];
    CropPostOrientation = CMPhotoPictureReaderGetImageGeometryFromPictureReader((const void *)v632.i64[0], 0, (unint64_t)size, 0);
    if ((_DWORD)CropPostOrientation
      || (v54 = *(_QWORD *)&size[16],
          v53 = *(_QWORD *)&size[24],
          v620 = *(_OWORD *)size,
          v621 = *(_OWORD *)&size[16],
          CropPostOrientation = CMPhotoGetCropPostOrientation(*(uint64_t *)&size[16], *(uint64_t *)&size[24], &v620, (int)v619, size), (_DWORD)CropPostOrientation))
    {
LABEL_558:
      v20 = CropPostOrientation;
      a5 = v558;
      v14 = v559;
      v146 = 0;
LABEL_489:
      if ((_QWORD)v610)
        CFRelease((CFTypeRef)v610);
LABEL_491:
      if ((_QWORD)v607)
        CFRelease((CFTypeRef)v607);
      if (v632.i64[0])
        CFRelease((CFTypeRef)v632.i64[0]);
      if (v630.i64[0])
        CFRelease((CFTypeRef)v630.i64[0]);
      if ((_QWORD)v613)
        CFRelease((CFTypeRef)v613);
      if (v612.i64[0])
        CFRelease((CFTypeRef)v612.i64[0]);
      if (v146)
        CFRelease(v146);
      if (value.i64[0])
        CFRelease((CFTypeRef)value.i64[0]);
      if ((_QWORD)v606)
        CFRelease((CFTypeRef)v606);
      v160 = (const void *)v605;
      if ((_QWORD)v605)
        goto LABEL_224;
      goto LABEL_225;
    }
    v55 = *(_QWORD *)&size[16];
    if (v628.i64[0] == *(_QWORD *)&size[16] && (v56 = *(_QWORD *)&size[24], v628.i64[1] == *(_QWORD *)&size[24]))
    {
      memset(v626, 0, 32);
      if (!v47
        || (*(_OWORD *)size = *(_OWORD *)((char *)v634 + 5),
            *(_OWORD *)&size[16] = *(_OWORD *)((char *)&v634[1] + 5),
            HEIFOrientation = CMPhotoGetCropPreOrientation(v55, v56, size, (int)v619, v626),
            !(_DWORD)HEIFOrientation))
      {
        if (v39)
          v592 = (int)v619;
        else
          v508 = 1;
        a5 = v558;
        if (v37)
        {
          if (v36 == 6)
            goto LABEL_164;
          v151 = FigSignalErrorAt();
        }
        else
        {
          BYTE4(v624[0]) = 0;
          LODWORD(v624[0]) = 0;
          size[119] = 0;
          *(_DWORD *)&size[115] = 0;
          *(_DWORD *)&size[129] = 0;
          *(_DWORD *)&size[132] = 0;
          *(_OWORD *)((char *)v624 + 5) = *(_OWORD *)v626;
          *(_OWORD *)((char *)&v624[1] + 5) = *(_OWORD *)&v626[16];
          *(_QWORD *)&v620 = v42;
          *((_QWORD *)&v620 + 1) = v43;
          *(_QWORD *)&v621 = v484;
          *((_QWORD *)&v621 + 1) = theDicta;
          v622.i64[0] = v505;
          v622.i64[1] = (uint64_t)v638[0];
          v623[0] = v638[1];
          v623[1] = v537;
          v623[2] = v44;
          v623[3] = v561;
          v623[4] = v552;
          *(_WORD *)&v623[5] = (_WORD)v617;
          v623[7] = BYTE2(v617);
          *(_DWORD *)&v623[8] = v36;
          v623[12] = 0;
          v623[13] = v523;
          v623[14] = v519;
          v623[15] = v514;
          *(float *)&v623[16] = v46;
          *(_DWORD *)&v623[20] = v496;
          *(_QWORD *)&v623[24] = v511;
          *(_QWORD *)&v623[32] = theArray;
          *(_QWORD *)&v623[40] = v490;
          size[0] = 0;
          *(_WORD *)&size[1] = v508;
          *(_QWORD *)&size[32] = *(_QWORD *)&v626[24];
          *(_OWORD *)&size[19] = v624[1];
          *(_OWORD *)&size[3] = v624[0];
          memset(&size[40], 0, 74);
          size[114] = v501;
          *(_QWORD *)&size[120] = v499;
          size[128] = 0;
          v151 = _decodeItem(&v620, v632.i64[0], 0, 0, size, 0, 0, 0, &v610);
          if (!(_DWORD)v151)
          {
LABEL_164:
            v145 = (v36 - 3) < 3;
            if (*(float *)&v636[8] == 0.0)
              v145 = v36 == 2;
            if (v145)
            {
              v20 = 0;
              v146 = 0;
              pixelBuffer = (CVPixelBufferRef)v610;
              *(_QWORD *)&v610 = 0;
              v14 = v559;
              goto LABEL_491;
            }
            allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v147 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v147)
            {
              v146 = 0;
              v20 = 4294950305;
              goto LABEL_488;
            }
            v148 = v147;
            if (!v37)
            {
              v149 = CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(v505, v44, v561, v552, (__CVBuffer **)&v610);
              if ((_DWORD)v149)
                goto LABEL_559;
              FigCFDictionarySetValue();
              v149 = FigCFDictionarySetInt();
              if ((_DWORD)v149)
                goto LABEL_559;
            }
            FigCFDictionarySetValue();
            memset(v637, 0, 32);
            if (*(_OWORD *)v626 != 0 || *(_OWORD *)&v626[16] != 0)
            {
              *(_OWORD *)size = *(_OWORD *)v626;
              *(_OWORD *)&size[16] = *(_OWORD *)&v626[16];
              v149 = CMPhotoTranslateAndScalePreOrientationCrop(v54, v53, (uint64x2_t *)size, (int)v619, v474, v472, (int)v618, v637);
              if ((_DWORD)v149)
                goto LABEL_559;
              v146 = 0;
              v20 = 4294950306;
              if (!v637[2] || !v637[3])
                goto LABEL_487;
            }
            BYTE4(v624[0]) = 0;
            LODWORD(v624[0]) = 0;
            size[119] = 0;
            *(_DWORD *)&size[115] = 0;
            *(_DWORD *)&size[129] = 0;
            *(_DWORD *)&size[132] = 0;
            *(_OWORD *)((char *)v624 + 5) = *(_OWORD *)v637;
            *(_OWORD *)((char *)&v624[1] + 5) = *(_OWORD *)&v637[2];
            *(_QWORD *)&v620 = v42;
            *((_QWORD *)&v620 + 1) = v43;
            *(_QWORD *)&v621 = v484;
            *((_QWORD *)&v621 + 1) = theDicta;
            v622.i64[0] = v505;
            v622.i64[1] = (uint64_t)v638[0];
            v623[0] = v638[1];
            v623[1] = v537;
            v623[2] = v44;
            v623[3] = v561;
            v623[4] = v552;
            *(_WORD *)&v623[5] = (_WORD)v617;
            v623[7] = BYTE2(v617);
            *(_DWORD *)&v623[8] = v36;
            v623[12] = 0;
            v623[13] = v523;
            v623[14] = v519;
            v623[15] = v514;
            *(float *)&v623[16] = v46;
            *(_DWORD *)&v623[20] = v496;
            *(_QWORD *)&v623[24] = v511;
            *(_QWORD *)&v623[32] = theArray;
            *(_QWORD *)&v623[40] = v490;
            size[0] = 0;
            *(_WORD *)&size[1] = v508;
            *(CFTypeRef *)&size[32] = v637[3];
            *(_OWORD *)&size[19] = v624[1];
            *(_OWORD *)&size[3] = v624[0];
            memset(&size[40], 0, 74);
            size[114] = v501;
            *(_QWORD *)&size[120] = v499;
            size[128] = 1;
            v149 = _decodeItem(&v620, v630.i64[0], 0, 0, size, 0, 0, 0, &v607);
            if (!(_DWORD)v149)
            {
              v149 = CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(v505, v44, v561, v552, (__CVBuffer **)&v607);
              if (!(_DWORD)v149)
              {
                FigCFDictionarySetValue();
                v149 = FigCFDictionarySetInt();
                if (!(_DWORD)v149)
                {
                  v149 = _copyColorInfoForItem(v43, a2, 0, 0, 0, 0, (CFTypeRef *)&v612, (CFTypeRef *)&value, (CFTypeRef *)&v606, (CFTypeRef *)&v605, 0, 0, 0);
                  if (!(_DWORD)v149)
                  {
                    if (theArray)
                    {
                      FigCFDictionarySetValue();
                      if ((_QWORD)v605)
                      {
                        v146 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        if (v146)
                        {
                          v150 = (const void *)v605;
LABEL_483:
                          CFDictionarySetValue(v146, CFSTR("YCbCrMatrix"), v150);
LABEL_484:
                          CFDictionarySetValue(v148, CFSTR("NclxColor"), v146);
                          goto LABEL_485;
                        }
                        goto LABEL_728;
                      }
                    }
                    else
                    {
                      if (v612.i64[0])
                        FigCFDictionarySetValue();
                      if (value.i64[0] || (_QWORD)v606 || (_QWORD)v605)
                      {
                        v272 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        v146 = v272;
                        if (v272)
                        {
                          if (value.i64[0])
                            CFDictionarySetValue(v272, CFSTR("ColorPrimaries"), (const void *)value.i64[0]);
                          if ((_QWORD)v606)
                            CFDictionarySetValue(v146, CFSTR("TransferFunction"), (const void *)v606);
                          v150 = (const void *)v605;
                          if (!(_QWORD)v605)
                            goto LABEL_484;
                          goto LABEL_483;
                        }
LABEL_728:
                        v273 = FigSignalErrorAt();
                        goto LABEL_486;
                      }
                    }
                    v146 = 0;
LABEL_485:
                    v273 = CMPhotoGainMapCreateOutputFromConstituents(v505, theDicta, v537, (uint64_t)theArray, v477, v148, v36, 0, v46, v523, v519, v514, v511, &pixelBuffer, v480);
LABEL_486:
                    v20 = v273;
LABEL_487:
                    CFRelease(v148);
LABEL_488:
                    v14 = v559;
                    goto LABEL_489;
                  }
                }
              }
            }
LABEL_559:
            v20 = v149;
            v146 = 0;
            goto LABEL_487;
          }
        }
        v20 = v151;
        v146 = 0;
        v14 = v559;
        goto LABEL_489;
      }
    }
    else
    {
LABEL_567:
      HEIFOrientation = FigSignalErrorAt();
    }
LABEL_568:
    v20 = HEIFOrientation;
    v146 = 0;
    a5 = v558;
    goto LABEL_488;
  }
  v79 = (const void *)v14[1];
  v448 = v14[2];
  v468 = (const void *)v14[3];
  *(_QWORD *)&v469 = *v14;
  v630 = *((uint64x2_t *)v14 + 2);
  v631 = *((_BYTE *)v14 + 48);
  queue = *((unsigned __int8 *)v14 + 49);
  v80 = *(_OWORD *)((char *)v14 + 66);
  v628 = *(uint64x2_t *)((char *)v14 + 50);
  *(_OWORD *)v629 = v80;
  *(_OWORD *)&v629[14] = *((_OWORD *)v14 + 5);
  v454 = *a5;
  v449 = a5[1];
  LODWORD(BOOLean) = *(_DWORD *)(a5 + 2);
  WORD2(BOOLean) = *((_WORD *)a5 + 3);
  *(_QWORD *)&v498 = *((_QWORD *)a5 + 2);
  *((_QWORD *)&v498 + 1) = *((_QWORD *)a5 + 1);
  *(_QWORD *)&v462 = *((_QWORD *)a5 + 4);
  *((_QWORD *)&v462 + 1) = *((_QWORD *)a5 + 3);
  v81 = *(_OWORD *)(a5 + 40);
  v82 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v626[32] = *(_OWORD *)(a5 + 72);
  v627 = v82;
  v83 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)v626 = v81;
  *(_OWORD *)&v626[16] = v83;
  v446 = *((_QWORD *)a5 + 13);
  v507 = a5[112];
  v444 = a5[113];
  v512 = a5[114];
  v596 = a5[119];
  v595 = *(_DWORD *)(a5 + 115);
  v509 = *((_QWORD *)a5 + 15);
  v443 = *((_QWORD *)a5 + 16);
  v603 = 0;
  *((_QWORD *)&v469 + 1) = v79;
  v84 = CFGetAllocator(v79);
  v85 = FigPictureReaderGetFigBaseObject();
  v86 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v86)
  {
    v78 = 0;
    v20 = 4294954514;
    goto LABEL_1014;
  }
  v87 = v86(v85, *MEMORY[0x1E0CC4B28], v84, &v603);
  if ((_DWORD)v87)
  {
    v20 = v87;
    v78 = 0;
    goto LABEL_1014;
  }
  v625[0] = 0u;
  memset(v624, 0, sizeof(v624));
  v88 = (const __CFDictionary *)v603;
  *(_QWORD *)&v620 = 0;
  *(_QWORD *)v636 = 0;
  *(_QWORD *)&v634[0] = 0;
  v563 = CFGetAllocator(v603);
  CFDictionaryGetValue(v88, (const void *)*MEMORY[0x1E0CC4B48]);
  v89 = FigCFEqual();
  v90 = (const void **)MEMORY[0x1E0CC4B40];
  if (!v89)
    goto LABEL_574;
  v91 = (const __CFDictionary *)CFDictionaryGetValue(v88, (const void *)*MEMORY[0x1E0CC4B38]);
  if (!v91)
  {
LABEL_575:
    v97 = 0;
    v161 = 1;
LABEL_580:
    v281 = (unsigned __int8 *)*((_QWORD *)&v469 + 1);
    goto LABEL_592;
  }
  v92 = v91;
  *(_OWORD *)size = *MEMORY[0x1E0C9D820];
  v485 = *MEMORY[0x1E0CC4BB8];
  if (!FigCFDictionaryGetCGSizeIfPresent()
    || (v93 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)size)), (v503 = v93.i64[0]) == 0)
    || (v492 = v93.i64[1]) == 0)
  {
LABEL_574:
    FigSignalErrorAt();
    goto LABEL_575;
  }
  *(uint64x2_t *)theDictd = v93;
  v94 = (const __CFArray *)CFDictionaryGetValue(v92, (const void *)*MEMORY[0x1E0CC4BB0]);
  if (v94)
  {
    v95 = CFArrayGetCount(v94);
    v96 = (char *)malloc_type_malloc(4 * v95, 0x100004052888210uLL);
    v97 = v96;
    if (!v95)
      goto LABEL_74;
    v98 = 0;
    v99 = v96;
    while (FigCFArrayGetInt32AtIndex())
    {
      ++v98;
      v99 += 4;
      if (v95 == v98)
      {
        v14 = v559;
        goto LABEL_74;
      }
    }
    v14 = v559;
  }
  else
  {
    v97 = 0;
  }
  v279 = FigSignalErrorAt();
  free(v97);
  v97 = 0;
  if (v279)
    goto LABEL_579;
  v95 = 0;
LABEL_74:
  v100 = (const __CFArray *)CFDictionaryGetValue(v88, *v90);
  if (!v100)
    goto LABEL_579;
  v101 = v100;
  v102 = CFArrayGetCount(v100);
  if (v95 != 2 * v102)
  {
    FigSignalErrorAt();
LABEL_579:
    v161 = 1;
    goto LABEL_580;
  }
  v555 = v97;
  v103 = *(_OWORD *)theDictd;
  if (!v102)
  {
    v107 = 0;
    v106 = 0;
    *(_QWORD *)v516 = 0;
    *(_QWORD *)v521 = 0;
    v120 = 0;
    v121 = 0;
LABEL_228:
    v161 = 0;
    *(_QWORD *)&v624[0] = v107;
    *((_QWORD *)&v624[0] + 1) = v106;
    *(_QWORD *)&v624[1] = *(_QWORD *)v521;
    *((_QWORD *)&v624[1] + 1) = *(_QWORD *)v516;
    *(_QWORD *)&v624[2] = v120;
    *((_QWORD *)&v624[2] + 1) = v121;
    v625[0] = v103;
    a5 = v558;
    v14 = v559;
    v10 = v535;
    goto LABEL_591;
  }
  v104 = 0;
  theArrayc = 0;
  v526 = 0;
  v464 = 0;
  v478 = 0;
  v481 = 0;
  v105 = 0;
  *(_QWORD *)v516 = 0;
  *(_QWORD *)v521 = 0;
  v106 = 0;
  v107 = 0;
  v108 = *MEMORY[0x1E0CC4B18];
  v476 = v503 - 1;
  while (1)
  {
    v109 = v102;
    v110 = v101;
    v111 = CFArrayGetValueAtIndex(v101, v104);
    if (!v111)
    {
LABEL_589:
      FigSignalErrorAt();
      goto LABEL_590;
    }
    v112 = v111;
    v637[0] = 0;
    v113 = *(unsigned int (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v113 || v113(v112, v637))
      goto LABEL_590;
    if ((uint64_t)v637[0] >= 1)
      break;
LABEL_93:
    if ((_QWORD)v620)
    {
      CFRelease((CFTypeRef)v620);
      *(_QWORD *)&v620 = 0;
    }
    v118 = FigPictureReaderGetFigBaseObject();
    v119 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (!v119 || v119(v118, v485, v563, &v620))
      goto LABEL_590;
    if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v620, (CGSize *)size))
      goto LABEL_589;
    v120 = vcvtad_u64_f64(*(double *)size);
    if (!v120)
      goto LABEL_589;
    v121 = vcvtad_u64_f64(*(double *)&size[8]);
    if (!v121)
      goto LABEL_589;
    v103 = *(_OWORD *)theDictd;
    if (v104)
    {
      v122 = v107 - 1;
      if (v526 < (int)(v107 - 1) && theArrayc < (int)(v106 - 1))
      {
        v123 = *(_QWORD *)v521;
        goto LABEL_132;
      }
      if (v526 == v122 && !theArrayc)
      {
        if (*(_QWORD *)v521 < v120 || v478 > v120)
          goto LABEL_590;
        goto LABEL_134;
      }
      if (v526 || theArrayc != v106 - 1)
      {
        if (v526 == v122)
        {
          if (theArrayc == v106 - 1)
          {
            v130 = v481;
            goto LABEL_129;
          }
          v123 = v481;
LABEL_132:
          if (v123 != v120)
            goto LABEL_590;
          v120 = v481;
LABEL_134:
          v131 = *(_QWORD *)v516 == v121;
        }
        else
        {
          v130 = *(_QWORD *)v521;
LABEL_129:
          if (v130 != v120)
            goto LABEL_590;
          v120 = v481;
          v131 = v105 == v121;
        }
        v121 = v105;
        if (!v131)
          goto LABEL_590;
        goto LABEL_137;
      }
      if (*(_QWORD *)v521 != v120)
        goto LABEL_590;
      if (*(_QWORD *)v516 < v121)
        goto LABEL_590;
      v120 = v481;
      if (v464 > v121)
        goto LABEL_590;
    }
    else
    {
      v107 = (unsigned __int16)((v476 + v120) / v120);
      v106 = (unsigned __int16)((v492 - 1 + v121) / v121);
      if (v109 != v106 * v107)
        goto LABEL_590;
      if ((unsigned __int16)((v492 - 1 + v121) / v121))
      {
        v124 = 0;
        v125 = 0;
        v126 = 0;
        while (!(unsigned __int16)((v476 + v120) / v120))
        {
LABEL_117:
          v126 += v121;
          if (++v124 == v106)
            goto LABEL_118;
        }
        v127 = &v555[4 * v125 + 4];
        v128 = -(int)v120;
        v129 = (unsigned __int16)((v476 + v120) / v120);
        while (1)
        {
          v128 += v120;
          if (v128 != *((_DWORD *)v127 - 1) || *(_DWORD *)v127 != v126)
            goto LABEL_590;
          v125 += 2;
          v127 += 8;
          if (!--v129)
            goto LABEL_117;
        }
      }
LABEL_118:
      v478 = v503 - (int)(v107 - 1) * v120;
      v464 = v492 - (int)(v106 - 1) * v121;
      *(_QWORD *)v516 = v121;
      *(_QWORD *)v521 = v120;
    }
LABEL_137:
    v132 = v526 + 1 == v107;
    if (v526 + 1 == v107)
      v133 = 0;
    else
      v133 = v526 + 1;
    v526 = v133;
    v134 = theArrayc;
    if (v132)
      v134 = theArrayc + 1;
    theArrayc = v134;
    ++v104;
    v105 = v121;
    v481 = v120;
    v102 = v109;
    v101 = v110;
    if (v104 == v109)
      goto LABEL_228;
  }
  v114 = 0;
  while (1)
  {
    if (*(_QWORD *)v636)
    {
      CFRelease(*(CFTypeRef *)v636);
      *(_QWORD *)v636 = 0;
    }
    if (*(_QWORD *)&v634[0])
    {
      CFRelease(*(CFTypeRef *)&v634[0]);
      *(_QWORD *)&v634[0] = 0;
    }
    v115 = *(unsigned int (**)(const void *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 40);
    if (!v115)
      break;
    if (v115(v112, v114, v636))
      break;
    v116 = FigPictureReaderGetFigBaseObject();
    v117 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v117 || v117(v116, v108, v563, v634) || CMPhotoGetAuxiliaryImageTypeFromURN() == 3)
      break;
    if (++v114 >= (uint64_t)v637[0])
      goto LABEL_93;
  }
LABEL_590:
  v161 = 1;
  a5 = v558;
  v14 = v559;
  v10 = v535;
LABEL_591:
  v281 = (unsigned __int8 *)*((_QWORD *)&v469 + 1);
  v97 = v555;
LABEL_592:
  free(v97);
  if ((_QWORD)v620)
    CFRelease((CFTypeRef)v620);
  if (*(_QWORD *)v636)
    CFRelease(*(CFTypeRef *)v636);
  if (*(_QWORD *)&v634[0])
    CFRelease(*(CFTypeRef *)&v634[0]);
  if ((v161 & 1) != 0)
  {
    v488 = 0;
    v282 = a2;
LABEL_905:
    v385 = (const __CFDictionary *)v603;
    v632 = v630;
    v633 = v631;
    *(uint64x2_t *)v636 = v628;
    *(_OWORD *)&v636[16] = *(_OWORD *)v629;
    *(_OWORD *)&v636[30] = *(_OWORD *)&v629[14];
    v619 = 0;
    v618 = 0;
    v617 = 0;
    v616 = 0;
    v615 = 0;
    v614 = 0;
    v565 = CFGetAllocator(v281);
    memset(v638, 0, 32);
    v613 = 0uLL;
    v386 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v282, v281[28], (unint64_t)v638, (unint64_t)&v613);
    if (!(_DWORD)v386)
    {
      v386 = _getImageOrientation((uint64_t)v281, v282, 0, &v592);
      if (!(_DWORD)v386)
      {
        v387 = (const __CFDictionary *)CFDictionaryGetValue(v385, (const void *)*MEMORY[0x1E0CC4B38]);
        if (!v387)
        {
          v557 = 0;
          v399 = 0;
          theDictg = 0;
          v20 = 4294950304;
          goto LABEL_997;
        }
        v388 = v387;
        v389 = (const __CFDictionary *)CFDictionaryGetValue(v387, (const void *)*MEMORY[0x1E0CC4BB8]);
        if (v389)
        {
          v612 = 0uLL;
          if (CMPhotoSizeMakeWithDictionaryRepresentation(v389, &v612) && *(_OWORD *)&v612 == v613)
          {
            v390 = CFDictionaryGetValue(v388, (const void *)*MEMORY[0x1E0CC4BA8]);
            v541 = v385;
            if (v390 && (v391 = (CGColor *)CFRetain(v390)) != 0)
            {
              v392 = v391;
              v393 = (const __CFArray *)CFDictionaryGetValue(v388, (const void *)*MEMORY[0x1E0CC4BB0]);
              if (v393 && (v394 = CFArrayGetCount(v393)) != 0)
              {
                v395 = v394;
                v396 = (char *)malloc_type_malloc(4 * v394, 0x100004052888210uLL);
                v397 = 0;
                v398 = v396;
                while (FigCFArrayGetInt32AtIndex())
                {
                  ++v397;
                  v398 += 4;
                  if (v395 == v397)
                  {
                    v557 = v396;
                    v14 = v559;
                    v399 = v392;
                    goto LABEL_921;
                  }
                }
              }
              else
              {
                v396 = 0;
              }
              v20 = FigSignalErrorAt();
              CFRelease(v392);
              v14 = v559;
              v400 = v396;
            }
            else
            {
              v20 = FigSignalErrorAt();
              v400 = 0;
            }
            free(v400);
            v399 = 0;
            v557 = 0;
            theDictg = 0;
            if ((_DWORD)v20)
              goto LABEL_997;
LABEL_921:
            v401 = v613;
            *(_QWORD *)&v620 = 0;
            *(_QWORD *)&v634[0] = 0;
            v637[0] = 0;
            *(_QWORD *)&v610 = 0;
            LODWORD(v606) = -1;
            LODWORD(v605) = -1;
            *(_QWORD *)&v607 = 0;
            value.i64[0] = 0;
            v402 = _copyColorInfoForItem(v281, v282, 0, 0, (CMVideoFormatDescriptionRef *)&value, 0, (CFTypeRef *)&v620, (CFTypeRef *)v634, v637, (CFTypeRef *)&v610, &v606, &v605, 0);
            if ((_DWORD)v402)
            {
              v20 = v402;
              goto LABEL_1035;
            }
            if ((_QWORD)v469)
              v403 = v469;
            else
              v403 = (uint64_t)v281;
            memset(size, 0, 32);
            v404 = _createPixelBuffer(v468, v403, queue, 1111970369, v401, *((uint64_t *)&v401 + 1), v401, *((size_t *)&v401 + 1), (unint64_t *)size, 0, 0, &v607);
            v405 = (__CVBuffer *)v607;
            if ((_DWORD)v404)
            {
              v20 = v404;
              if ((_QWORD)v607)
              {
                a5 = v558;
                goto LABEL_1034;
              }
              v412 = 0;
              a5 = v558;
LABEL_930:
              v14 = v559;
            }
            else if ((_QWORD)v607)
            {
              v406 = CVPixelBufferLockBaseAddress((CVPixelBufferRef)v607, 0);
              if ((_DWORD)v406)
              {
                v20 = v406;
              }
              else
              {
                BytesPerRow = CVPixelBufferGetBytesPerRow(v405);
                Height = CVPixelBufferGetHeight(v405);
                Width = CVPixelBufferGetWidth(v405);
                BaseAddress = CVPixelBufferGetBaseAddress(v405);
                v411 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, (CGColorSpaceRef)v620, 0x2006u);
                if (v411)
                {
                  v412 = v411;
                  CGContextSetFillColorWithColor(v411, v399);
                  v642.size.width = (double)(unint64_t)v401;
                  v642.size.height = (double)*((unint64_t *)&v401 + 1);
                  v642.origin.x = 0.0;
                  v642.origin.y = 0.0;
                  CGContextFillRect(v412, v642);
                  CMPhotoAddColorInformationToPixelBufferAccordingToFormat((CFTypeRef)v620, *(const void **)&v634[0], v637[0], (const void *)v610, v405);
                  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v606, v605, v405);
                  CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)value.i64[0], v405);
                  v20 = 0;
                  *(_QWORD *)&v607 = 0;
                  goto LABEL_930;
                }
                v20 = FigSignalErrorAt();
                CVPixelBufferUnlockBaseAddress(v405, 0);
              }
LABEL_1034:
              v14 = v559;
              CFRelease(v405);
LABEL_1035:
              v412 = 0;
              v405 = 0;
            }
            else
            {
              v412 = 0;
              v20 = 4294950305;
            }
            if (value.i64[0])
              CFRelease((CFTypeRef)value.i64[0]);
            if ((_QWORD)v620)
              CFRelease((CFTypeRef)v620);
            if (*(_QWORD *)&v634[0])
              CFRelease(*(CFTypeRef *)&v634[0]);
            if (v637[0])
              CFRelease(v637[0]);
            if ((_QWORD)v610)
              CFRelease((CFTypeRef)v610);
            theDictg = v412;
            if ((_DWORD)v20)
            {
LABEL_990:
              if (v405)
                goto LABEL_991;
            }
            else
            {
              v528 = CVPixelBufferGetPixelFormatType(v405);
              v413 = (const __CFArray *)CFDictionaryGetValue(v541, (const void *)*MEMORY[0x1E0CC4B40]);
              if (!v413)
              {
                v20 = FigSignalErrorAt();
                goto LABEL_990;
              }
              memset(v634, 0, 37);
              v594[1] = 0;
              LOBYTE(v594[2]) = 0;
              LODWORD(v602) = 0;
              *(_DWORD *)((char *)&v602 + 3) = 0;
              v610 = 0u;
              v611 = 0u;
              value = 0uLL;
              memset(v637, 0, 37);
              LOBYTE(v591) = 0;
              v590 = 0;
              *(_DWORD *)((char *)&v599 + 3) = 0;
              LODWORD(v599) = 0;
              v607 = 0u;
              v608 = 0u;
              v606 = 0uLL;
              v605 = 0uLL;
              theArraye = v413;
              v414 = v557;
              v495 = CFArrayGetCount(v413);
              if (v495)
              {
                v415 = 0;
                v416 = *MEMORY[0x1E0CC4B18];
                while (1)
                {
                  if (v619)
                  {
                    CFRelease(v619);
                    v619 = 0;
                  }
                  if (v615)
                  {
                    CFRelease(v615);
                    v615 = 0;
                  }
                  if (v618)
                  {
                    CFRelease(v618);
                    v618 = 0;
                  }
                  if (v614)
                  {
                    CFRelease(v614);
                    v614 = 0;
                  }
                  v417 = (int32x2_t *)&v414[8 * v415];
                  v418 = *v417;
                  v542 = v613;
                  v419 = CFArrayGetValueAtIndex(theArraye, v415);
                  if (!v419)
                  {
                    WrappedPixelBufferForType = FigSignalErrorAt();
LABEL_1023:
                    v20 = WrappedPixelBufferForType;
                    goto LABEL_989;
                  }
                  v420 = v419;
                  v620 = v469;
                  *(_QWORD *)&v621 = v448;
                  *((_QWORD *)&v621 + 1) = v468;
                  v622 = v632;
                  v623[0] = v633;
                  v623[1] = queue;
                  *(_OWORD *)&v623[2] = *(_OWORD *)v636;
                  *(_OWORD *)&v623[18] = *(_OWORD *)&v636[16];
                  *(_OWORD *)&v623[32] = *(_OWORD *)&v636[30];
                  *(_WORD *)size = 256;
                  size[2] = 0;
                  *(_OWORD *)&size[3] = v634[0];
                  *(_OWORD *)&size[19] = v634[1];
                  *(_QWORD *)&size[32] = *(_QWORD *)((char *)&v634[1] + 13);
                  *(_OWORD *)&size[40] = v610;
                  *(_OWORD *)&size[56] = v611;
                  *(int64x2_t *)&size[72] = vsubw_s32((int64x2_t)v542, v418);
                  *(uint64x2_t *)&size[88] = value;
                  *(_QWORD *)&size[104] = v528;
                  *(_WORD *)&size[112] = 0;
                  size[114] = v512;
                  size[119] = v594[2];
                  *(_DWORD *)&size[115] = v594[1];
                  *(_QWORD *)&size[120] = v509;
                  size[128] = 0;
                  *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v602 + 3);
                  *(_DWORD *)&size[129] = (_DWORD)v602;
                  WrappedPixelBufferForType = _decodeItem(&v620, v419, a2, 0, size, 0, 0, 0, &v619);
                  if ((_DWORD)WrappedPixelBufferForType)
                    goto LABEL_1023;
                  WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v565, (CVPixelBufferRef)v619, 1, 4, (CGImageRef *)&v615);
                  if ((_DWORD)WrappedPixelBufferForType)
                    goto LABEL_1023;
                  v604 = 0;
                  v422 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
                  if (!v422)
                  {
                    v20 = 4294954514;
                    goto LABEL_989;
                  }
                  v423 = v422(v420, &v604);
                  if ((_DWORD)v423)
                    break;
                  if ((uint64_t)v604 >= 1)
                  {
                    v424 = 0;
                    while (1)
                    {
                      if (v617)
                      {
                        CFRelease(v617);
                        v617 = 0;
                      }
                      if (v616)
                      {
                        CFRelease(v616);
                        v616 = 0;
                      }
                      v425 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 40);
                      if (!v425)
                        goto LABEL_987;
                      v423 = v425(v420, v424, &v617);
                      if ((_DWORD)v423)
                        goto LABEL_1037;
                      v426 = FigPictureReaderGetFigBaseObject();
                      v427 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (!v427)
                      {
LABEL_987:
                        v20 = 4294954514;
                        goto LABEL_988;
                      }
                      v423 = v427(v426, v416, v565, &v616);
                      if ((_DWORD)v423)
                        goto LABEL_1037;
                      if (CMPhotoGetAuxiliaryImageTypeFromURN() == 3)
                        break;
                      if (++v424 >= (uint64_t)v604)
                        goto LABEL_973;
                    }
                    v620 = v469;
                    *(_QWORD *)&v621 = v448;
                    *((_QWORD *)&v621 + 1) = v468;
                    v622 = v632;
                    v623[0] = v633;
                    v623[1] = queue;
                    *(_OWORD *)&v623[2] = *(_OWORD *)v636;
                    *(_OWORD *)&v623[18] = *(_OWORD *)&v636[16];
                    *(_OWORD *)&v623[32] = *(_OWORD *)&v636[30];
                    *(_WORD *)size = 256;
                    size[2] = 0;
                    *(_OWORD *)&size[3] = *(_OWORD *)v637;
                    *(_OWORD *)&size[19] = *(_OWORD *)&v637[2];
                    *(CFTypeRef *)&size[32] = *(CFTypeRef *)((char *)&v637[3] + 5);
                    *(_OWORD *)&size[40] = v607;
                    *(_OWORD *)&size[56] = v608;
                    *(_OWORD *)&size[72] = v606;
                    *(_OWORD *)&size[88] = v605;
                    *(_QWORD *)&size[104] = 1278226488;
                    *(_WORD *)&size[112] = 1;
                    size[114] = v512;
                    size[119] = v591;
                    *(_DWORD *)&size[115] = v590;
                    *(_QWORD *)&size[120] = v509;
                    size[128] = 0;
                    *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v599 + 3);
                    *(_DWORD *)&size[129] = (_DWORD)v599;
                    v423 = _decodeItem(&v620, v617, 0, 0, size, 0, 0, 0, &v618);
                    if ((_DWORD)v423)
                      break;
                    v423 = CMPhotoCreateWrappedPixelBufferForType(v565, (CVPixelBufferRef)v618, 1, 4, (CGImageRef *)&v614);
                    if ((_DWORD)v423)
                      break;
                  }
LABEL_973:
                  v428 = (void *)v615;
                  if (v614)
                  {
                    v429 = CGImageCreateWithMask((CGImageRef)v615, (CGImageRef)v614);
                    v414 = v557;
                    if (!v429)
                    {
                      v423 = FigSignalErrorAt();
                      break;
                    }
                    v428 = v429;
                    if (v615)
                      CFRelease(v615);
                    v615 = v428;
                  }
                  else
                  {
                    v414 = v557;
                  }
                  v430 = (double)CGImageGetWidth((CGImageRef)v428);
                  v643.size.height = (double)CGImageGetHeight((CGImageRef)v615);
                  v643.origin.x = (double)v417->i32[0];
                  v643.origin.y = (double)(unint64_t)(*((_QWORD *)&v613 + 1) - *(int *)&v414[4 * ((2 * v415) | 1)])
                                - v643.size.height;
                  v412 = theDictg;
                  v643.size.width = v430;
                  CGContextDrawImage(theDictg, v643, (CGImageRef)v615);
                  ++v415;
                  a5 = v558;
                  v14 = v559;
                  if (v415 == v495)
                    goto LABEL_980;
                }
LABEL_1037:
                v20 = v423;
LABEL_988:
                v14 = v559;
LABEL_989:
                a5 = v558;
                goto LABEL_990;
              }
LABEL_980:
              CGContextFlush(v412);
              if (v412)
                CFRelease(v412);
              CVPixelBufferUnlockBaseAddress(v405, 0);
              if (v454)
              {
                v638[1] = 0;
                v638[0] = 0;
                *(_OWORD *)&v638[2] = v613;
              }
              if (v498 != 0 || v462 != 0 && v462 != __PAIR128__((unint64_t)v638[2], (unint64_t)v638[3]))
              {
                *(_QWORD *)size = *((_QWORD *)&v498 + 1);
                *(_QWORD *)&size[8] = v498;
                *(_QWORD *)&size[16] = *((_QWORD *)&v462 + 1);
                *(_QWORD *)&size[24] = v462;
                v431 = CMPhotoApplyCropCMPhotoRectToRect(v638, (unint64_t *)size);
                if ((_DWORD)v431)
                {
                  v20 = v431;
                  goto LABEL_1038;
                }
              }
              v20 = CMPhotoSetPixelBufferCLAPFromRect(v405, 1, 1, (double)(unint64_t)v638[0], (double)(unint64_t)v638[1], (double)(unint64_t)v638[2], (double)(unint64_t)v638[3]);
              if (!(_DWORD)v20)
              {
                theDictg = 0;
                pixelBuffer = v405;
                goto LABEL_997;
              }
LABEL_1038:
              theDictg = 0;
              if (!v405)
                goto LABEL_997;
LABEL_991:
              CVPixelBufferUnlockBaseAddress(v405, 0);
              CFRelease(v405);
            }
LABEL_997:
            if (v619)
              CFRelease(v619);
            v78 = v488;
            if (v618)
              CFRelease(v618);
            if (theDictg)
              CFRelease(theDictg);
            if (v399)
              CFRelease(v399);
            if (v617)
              CFRelease(v617);
            if (v616)
              CFRelease(v616);
            if (v615)
              CFRelease(v615);
            if (v614)
              CFRelease(v614);
            free(v557);
            goto LABEL_1014;
          }
        }
        v386 = FigSignalErrorAt();
      }
    }
    v20 = v386;
    v557 = 0;
    v399 = 0;
    theDictg = 0;
    goto LABEL_997;
  }
  theDicte = (const __CFDictionary *)v603;
  *(_QWORD *)v636 = v469;
  *(_QWORD *)&v636[8] = v281;
  *(_QWORD *)&v636[16] = v448;
  *(_QWORD *)&v636[24] = v468;
  *(uint64x2_t *)&v636[32] = v630;
  v636[48] = v631;
  v636[49] = queue;
  *(uint64x2_t *)&v636[50] = v628;
  *(_OWORD *)&v636[66] = *(_OWORD *)v629;
  *(_OWORD *)&v636[80] = *(_OWORD *)&v629[14];
  LODWORD(v616) = (_DWORD)BOOLean;
  WORD2(v616) = WORD2(BOOLean);
  v634[0] = *(_OWORD *)v626;
  v634[1] = *(_OWORD *)&v626[16];
  v634[2] = *(_OWORD *)&v626[32];
  v635 = v627;
  LODWORD(v614) = v595;
  BYTE4(v614) = v596;
  *(_QWORD *)&v606 = 0;
  *(_QWORD *)&v605 = 0;
  if ((_QWORD)v469)
    v283 = (unsigned __int8 *)v469;
  else
    v283 = v281;
  v453 = (uint64_t)v283;
  v619 = 0;
  v282 = a2;
  LayerReaderAtPosition = _getImageOrientation((uint64_t)v281, a2, 0, &v592);
  if (LayerReaderAtPosition)
    goto LABEL_715;
  v285 = v624[0];
  v286 = *((_QWORD *)&v624[1] + 1);
  *(_QWORD *)v564 = *(_QWORD *)&v624[1];
  v287 = v624[2];
  v613 = v625[0];
  v611 = 0u;
  v610 = 0u;
  v288 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(*(_QWORD *)&v636[8] + 28), (unint64_t)&v610, 0);
  if (v288)
    goto LABEL_609;
  v289 = v285 - 1;
  v290 = *((_QWORD *)&v285 + 1) - 1;
  if (v454)
  {
    v610 = 0uLL;
    *(_QWORD *)&v611 = v287 + *(_QWORD *)v564 * v289;
    *((_QWORD *)&v611 + 1) = *((_QWORD *)&v287 + 1) + v286 * v290;
  }
  if (v498 != 0 || v462 != 0 && v462 != __PAIR128__(v611, *((unint64_t *)&v611 + 1)))
  {
    *(_QWORD *)size = *((_QWORD *)&v498 + 1);
    *(_QWORD *)&size[8] = v498;
    *(_QWORD *)&size[16] = *((_QWORD *)&v462 + 1);
    *(_QWORD *)&size[24] = v462;
    v288 = CMPhotoApplyCropCMPhotoRectToRect(&v610, (unint64_t *)size);
    if (v288)
    {
LABEL_609:
      v291 = v288;
      v78 = 0;
      a5 = v558;
      v282 = a2;
      goto LABEL_899;
    }
  }
  v292 = (unint64_t)v610 / *(_QWORD *)v564;
  v442 = *((_QWORD *)&v610 + 1) / v286;
  *(_QWORD *)&v610 = (unint64_t)v610 % *(_QWORD *)v564;
  *((_QWORD *)&v610 + 1) %= v286;
  *(_QWORD *)&v613 = v611 + v610;
  *((_QWORD *)&v613 + 1) = *((_QWORD *)&v611 + 1) + *((_QWORD *)&v610 + 1);
  theArrayd = (CFArrayRef)(v611 + v610);
  v441 = v611 + v610 + *(_QWORD *)v564 + ~((unint64_t)(v611 + v610 - 1) % *(_QWORD *)v564);
  v556 = (_BYTE *)(*((_QWORD *)&v611 + 1) + *((_QWORD *)&v610 + 1));
  v612.i64[0] = *(_QWORD *)v564;
  v612.i64[1] = v286;
  v493 = *((_QWORD *)&v611 + 1)
       + *((_QWORD *)&v610 + 1)
       + v286
       + ~((*((_QWORD *)&v611 + 1) + *((_QWORD *)&v610 + 1) - 1) % v286);
  v452 = v493 / v286;
  v439 = v493 / v286 * v286;
  v440 = v441 / *(_QWORD *)v564 * *(_QWORD *)v564;
  v632.i64[0] = v440;
  v632.i64[1] = v439;
  v540 = v292;
  v447 = v441 / *(_QWORD *)v564;
  if (v441 / *(_QWORD *)v564 + v292 == (_QWORD)v285)
  {
    v440 = v440 - *(_QWORD *)v564 + v287;
    v632.i64[0] = v440;
  }
  if (v452 + v442 == *((_QWORD *)&v285 + 1))
  {
    v439 += *((_QWORD *)&v287 + 1) - v286;
    v632.i64[1] = v439;
  }
  if (v292 == v289)
    v612.i64[0] = v287;
  a5 = v558;
  if (v442 == v290)
    v612.i64[1] = *((_QWORD *)&v287 + 1);
  v293 = (const __CFArray *)CFDictionaryGetValue(theDicte, (const void *)*MEMORY[0x1E0CC4B40]);
  v282 = a2;
  if (!v293)
  {
    v78 = 0;
    v291 = 0;
    goto LABEL_899;
  }
  v618 = 0;
  theDictf = v293;
  LayerReaderAtPosition = _getLayerReaderAtPosition(v293, v540, v442, v624, &v618);
  if (LayerReaderAtPosition)
  {
LABEL_715:
    v291 = LayerReaderAtPosition;
    v78 = 0;
    goto LABEL_899;
  }
  v294 = v618;
  v295 = *(_BYTE **)&v636[8];
  *(_QWORD *)size = 0;
  *(_QWORD *)&v620 = 0;
  v637[0] = 0;
  v638[0] = 0;
  LODWORD(v607) = -1;
  value.i32[0] = -1;
  LOBYTE(v617) = 0;
  v296 = _copyColorInfoForItem(*(_BYTE **)&v636[8], a2, 0, v507, 0, 0, (CFTypeRef *)size, (CFTypeRef *)&v620, v637, v638, &v607, &value, &v617);
  if (v296)
  {
    v291 = v296;
    v298 = *(const void **)size;
    if (*(_QWORD *)size)
LABEL_646:
      CFRelease(v298);
LABEL_647:
    v457 = 0;
    v459 = 0;
    v299 = 0;
    v461 = 0;
    v308 = -1;
    v451 = -1;
  }
  else
  {
    v297 = v638[0];
    if ((_BYTE)v617 && v638[0])
    {
      CFRelease(v638[0]);
      v297 = 0;
      v638[0] = 0;
    }
    v298 = *(const void **)size;
    v299 = (const void *)v620;
    v300 = v637[0];
    if (!*(_QWORD *)size || !(_QWORD)v620 || !v637[0] || !v297)
    {
      if (*(_QWORD *)size)
        v301 = 0;
      else
        v301 = (CFTypeRef *)size;
      if ((_QWORD)v620)
        v302 = 0;
      else
        v302 = (CFTypeRef *)&v620;
      v303 = v637;
      if (v637[0])
        v303 = 0;
      v304 = v638;
      if (v297)
        v304 = 0;
      v305 = &v607;
      if ((_DWORD)v607 != -1)
        v305 = 0;
      p_value = (__int128 *)&value;
      if (value.i32[0] != -1)
        p_value = 0;
      v307 = _copyColorInfoForItem(v295, v294, 0, v507, 0, 0, v301, v302, v303, v304, v305, p_value, 0);
      v298 = *(const void **)size;
      if (v307)
      {
        v291 = v307;
        if (*(_QWORD *)size)
          goto LABEL_646;
        goto LABEL_647;
      }
      v299 = (const void *)v620;
      v300 = v637[0];
      v297 = v638[0];
    }
    v457 = v300;
    v459 = v298;
    v461 = v297;
    v291 = 0;
    *(_QWORD *)size = 0;
    *(_QWORD *)&v620 = 0;
    v637[0] = 0;
    v638[0] = 0;
    v451 = v607;
    v308 = value.i32[0];
  }
  v450 = v308;
  if ((_QWORD)v620)
    CFRelease((CFTypeRef)v620);
  if (v637[0])
    CFRelease(v637[0]);
  if (v638[0])
    CFRelease(v638[0]);
  v456 = v299;
  if (v291)
  {
LABEL_1045:
    v78 = 0;
    goto LABEL_891;
  }
  LODWORD(v604) = 0;
  ImageCodecTypeFromReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(v618, &v604);
  if (ImageCodecTypeFromReader)
  {
LABEL_1044:
    v291 = ImageCodecTypeFromReader;
    goto LABEL_1045;
  }
  if ((_DWORD)v604 == 1936484717)
  {
    v78 = 0;
    v291 = -16999;
    if (v447 != 1 || v452 > 4)
      goto LABEL_891;
  }
  v310 = *((_QWORD *)&v285 + 1);
  if (v449)
    v311 = v592 == 1;
  else
    v311 = 1;
  v313 = !v311 || (((unint64_t)v498 % v286) | (*((_QWORD *)&v498 + 1) % *(_QWORD *)v564)) != 0 || v10 == 0;
  v314 = !v313;
  v465 = v314;
  if (!v313
    && (!*(_QWORD *)v10
     || *(__int128 *)((char *)v10 + 8) != 0
     || *(__int128 *)((char *)v10 + 24) != 0
     || !*((_QWORD *)v10 + 5)))
  {
    v78 = 0;
    v291 = -16992;
    goto LABEL_891;
  }
  v637[0] = 0;
  v638[0] = 0;
  memset(size, 0, 24);
  v620 = 0uLL;
  *(_QWORD *)&v621 = 0;
  v315 = CFGetAllocator(theDictf);
  *(_QWORD *)v527 = v286;
  if (v286 <= v493)
  {
    v316 = v315;
    v317 = 0;
    v489 = 0;
    v318 = *MEMORY[0x1E0CC4B58];
    while (*(_QWORD *)v564 > v441)
    {
LABEL_683:
      if (++v317 == v452)
      {
        v489 = 1;
        goto LABEL_736;
      }
    }
    v319 = 0;
    while (1)
    {
      *(_QWORD *)&v607 = 0;
      if (_getLayerReaderAtPosition(theDictf, v319 + v540, v317 + v442, v624, &v607))
        break;
      value.i32[0] = 0;
      if (CMPhotoPictureReaderGetItemTypeFromReader((const void *)v607, &value))
        break;
      v320 = value.i32[0] == 1735551332 || value.i32[0] == 1768187246;
      if (v320 || value.i32[0] == 1768912492)
        break;
      if (v319 | v317)
      {
        if (v637[0])
        {
          CFRelease(v637[0]);
          v637[0] = 0;
        }
        v322 = FigPictureReaderGetFigBaseObject();
        v323 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (!v323 || v323(v322, v318, v316, v637))
          goto LABEL_735;
        v286 = *(_QWORD *)v527;
        if (value.i32[0] == 1936484717)
        {
          if (_getDecoderReusableInfoForOverlay((const void *)v607, (CMFormatDescriptionRef)v637[0], (uint64_t)size))break;
          v324 = v620;
          if ((_DWORD)v620 != *(_DWORD *)size)
          {
            v489 = 0;
LABEL_735:
            v286 = *(_QWORD *)v527;
            break;
          }
          v325 = FigCFEqual();
          v489 = 0;
          if (v324 != 1936484717)
            goto LABEL_735;
          v286 = *(_QWORD *)v527;
          if (!v325)
            break;
          if ((_DWORD)v621 != *(_DWORD *)&size[16])
          {
LABEL_733:
            v489 = 0;
            break;
          }
          v489 = 1;
        }
        else
        {
          v489 = CMFormatDescriptionEqualIgnoringExtensionKeys((CMFormatDescriptionRef)v638[0], (CMFormatDescriptionRef)v637[0], 0, 0);
          if (!v489)
            goto LABEL_733;
        }
      }
      else
      {
        v326 = FigPictureReaderGetFigBaseObject();
        v327 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (!v327 || v327(v326, v318, v316, v638))
          goto LABEL_735;
        v286 = *(_QWORD *)v527;
        if (value.i32[0] == 1936484717
          && _getDecoderReusableInfoForOverlay((const void *)v607, (CMFormatDescriptionRef)v638[0], (uint64_t)&v620))
        {
          break;
        }
      }
      if (v447 == ++v319)
        goto LABEL_683;
    }
LABEL_736:
    a5 = v558;
    v14 = v559;
    v10 = v535;
    v310 = *((_QWORD *)&v285 + 1);
  }
  else
  {
    v489 = 1;
  }
  if (v637[0])
    CFRelease(v637[0]);
  if (v638[0])
    CFRelease(v638[0]);
  if (*(_QWORD *)&size[8])
    CFRelease(*(CFTypeRef *)&size[8]);
  if (*((_QWORD *)&v620 + 1))
    CFRelease(*((CFTypeRef *)&v620 + 1));
  if ((_DWORD)v604 == 1936484717 && !v489)
  {
    ImageCodecTypeFromReader = FigSignalErrorAt();
    goto LABEL_1044;
  }
  if (v489)
  {
    v329 = *(_QWORD *)v564 != (_QWORD)v287 && v447 == (_QWORD)v285;
    v522 = v329;
    if (*((_QWORD *)&v287 + 1) != v286)
    {
      v434 = v452 == v310;
      goto LABEL_758;
    }
  }
  else
  {
    v522 = 0;
  }
  v434 = 0;
LABEL_758:
  if (v286 > v493)
  {
    v330 = 0;
    goto LABEL_792;
  }
  v331 = 0;
  v332 = *MEMORY[0x1E0CA8D50];
  *(_QWORD *)v517 = *MEMORY[0x1E0CC4BC8];
  v504 = *MEMORY[0x1E0CC4B98];
  while (*(_QWORD *)v564 > v441)
  {
LABEL_788:
    if (++v331 == v452)
    {
      v330 = 0;
      goto LABEL_791;
    }
  }
  v333 = 0;
  v334 = v441 / *(_QWORD *)v564;
  while (2)
  {
    v637[0] = 0;
    if (!_getLayerReaderAtPosition(theDictf, v333 + v540, v331 + v442, v624, v637))
    {
      v335 = v637[0];
      *(_QWORD *)size = 0;
      *(_QWORD *)&v620 = 0;
      v336 = CFGetAllocator(v637[0]);
      v337 = FigPictureReaderGetFigBaseObject();
      v338 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (!v338 || v338(v337, v332, v336, size) != -12783)
        goto LABEL_781;
      v339 = CFGetAllocator(v335);
      v340 = FigPictureReaderGetFigBaseObject();
      v341 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v341)
      {
        v342 = v341(v340, *(_QWORD *)v517, v339, &v620);
        v343 = (const void *)v620;
        if (!v342)
        {
          if (!CMPhotoCFNumberGetInt((const __CFBoolean *)v620))
          {
            v343 = (const void *)v620;
            goto LABEL_770;
          }
LABEL_781:
          v348 = 1;
LABEL_782:
          if (*(_QWORD *)size)
            CFRelease(*(CFTypeRef *)size);
          if ((_QWORD)v620)
            CFRelease((CFTypeRef)v620);
          if (v348)
            break;
          ++v333;
          if (!--v334)
            goto LABEL_788;
          continue;
        }
LABEL_770:
        if (v343)
        {
          CFRelease(v343);
          *(_QWORD *)&v620 = 0;
        }
      }
      v344 = CFGetAllocator(v335);
      v345 = FigPictureReaderGetFigBaseObject();
      v346 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v346
        && !v346(v345, v504, v344, &v620)
        && CMPhotoCFNumberGetInt32((const __CFNumber *)v620) != -1)
      {
        goto LABEL_781;
      }
      LODWORD(v638[0]) = 0;
      if (CMPhotoPictureReaderGetItemTypeFromReader(v335, v638))
        v347 = 1;
      else
        v347 = LODWORD(v638[0]) == 1768187246;
      v348 = v347;
      goto LABEL_782;
    }
    break;
  }
  v330 = 1;
LABEL_791:
  v14 = v559;
  v10 = v535;
  v286 = *(_QWORD *)v527;
LABEL_792:
  if ((unint64_t)v610 % *(_QWORD *)v564)
    v349 = 1;
  else
    v349 = *((_QWORD *)&v610 + 1) % v286 != 0;
  if ((_QWORD)v611 + (_QWORD)v610 == v440 && *((_QWORD *)&v611 + 1) + *((_QWORD *)&v610 + 1) == v439)
  {
    v350 = 0;
  }
  else if ((unint64_t)v611 % *(_QWORD *)v564)
  {
    v350 = 1;
  }
  else
  {
    v350 = *((_QWORD *)&v611 + 1) % v286 != 0;
  }
  if (v465)
  {
    dispatch_retain(*((dispatch_object_t *)v10 + 5));
    v351 = *((_QWORD *)v10 + 5);
  }
  else
  {
    v351 = dispatch_queue_create("com.apple.cmphoto.canvasTransferQueue", 0);
  }
  if (!v351)
  {
    v78 = 0;
    v291 = -16991;
    a5 = v558;
    goto LABEL_891;
  }
  v352 = 0;
  memset(v638, 0, 37);
  LODWORD(v615) = 0;
  BYTE4(v615) = 0;
  LODWORD(v617) = 0;
  *(_DWORD *)((char *)&v617 + 3) = 0;
  value = 0uLL;
  v353 = (int *)MEMORY[0x1E0CA1FC0];
  if (v286 > v493)
  {
LABEL_806:
    dispatch_barrier_sync(v351, &__block_literal_global_20);
    v354 = *v353;
    if (v352)
    {
      a5 = v558;
      if (v354 == 1)
      {
        kdebug_trace();
        v354 = *v353;
      }
    }
    else
    {
      a5 = v558;
    }
    if (v354 == 1)
      kdebug_trace();
    if ((_QWORD)v606)
    {
      v383 = CMPhotoSetPixelBufferCLAPFromRect((__CVBuffer *)v606, 1, 1, (double)(unint64_t)v610, (double)*((unint64_t *)&v610 + 1), (double)(unint64_t)v611, (double)*((unint64_t *)&v611 + 1));
      v78 = v383 == 0;
      v384 = v465;
      if (v383)
        v384 = 1;
      if ((v384 & 1) != 0)
      {
        v291 = v383;
      }
      else
      {
        v78 = 0;
        v291 = 0;
        pixelBuffer = (CVPixelBufferRef)v606;
        *(_QWORD *)&v606 = 0;
      }
    }
    else
    {
      v78 = 0;
      v291 = -16991;
    }
    goto LABEL_890;
  }
  v483 = v351;
  v355 = 0;
  v356 = v522;
  if (v434)
    v356 = 1;
  v438 = v356;
  v357 = v441 / *(_QWORD *)v564;
  if (v447 <= 1)
    v357 = 1;
  v432 = v357;
  v437 = (v330 | v350 | v349) ^ 1;
  v445 = *MEMORY[0x1E0CC4B58];
  if (v452 <= 1)
    v358 = 1;
  else
    v358 = v452;
  v433 = v358;
  v359 = v446;
  if (!(_DWORD)v446)
    v359 = 875704422;
  v435 = v359;
  while (1)
  {
    v436 = v355;
    if (*(_QWORD *)v564 <= v441)
      break;
LABEL_873:
    v355 = v436 + 1;
    if (v436 + 1 == v433)
    {
      if ((_QWORD)v605)
      {
        v382 = HEIFItemDecoderWaitForFinishAndReturnStatus(v605, (uint64_t *)&v613, v612.i64, v612.i64);
        v14 = v559;
        v351 = v483;
        if (v382)
        {
          v291 = v382;
          v78 = 0;
          a5 = v558;
          goto LABEL_890;
        }
        v352 = 1;
      }
      else
      {
        v352 = 0;
        v14 = v559;
        v351 = v483;
      }
      v353 = (int *)MEMORY[0x1E0CA1FC0];
      goto LABEL_806;
    }
  }
  v360 = 0;
  v361 = 0;
  v362 = 0;
  v363 = v355 * *(_QWORD *)v527;
  v518 = v355 + v442;
  v364 = v432;
  v366 = v434 && v355 == v452 - 1;
  v494 = v366;
  v367 = v447 - 1;
  while (2)
  {
    v368 = v605;
    if ((_QWORD)v605)
    {
      v291 = *(_DWORD *)(v605 + 14580);
      if (v291)
        goto LABEL_879;
    }
    v369 = _getLayerReaderAtPosition(theDictf, v362 + v540, v518, v624, &v618);
    if (v369)
      goto LABEL_878;
    if (v367)
      v370 = 0;
    else
      v370 = v522;
    if ((_QWORD)v606)
    {
LABEL_856:
      v377 = *(char **)v564;
      if (*(_QWORD *)v564 >= (unint64_t)theArrayd + v360)
        v377 = (char *)theArrayd + v360;
      v378 = &v556[-v363];
      if (*(_QWORD *)v527 < (unint64_t)&v556[-v363])
        v378 = *(_BYTE **)v527;
      if (v377 && v378)
      {
        v379 = (char *)v612.i64[0] == v377 && v612.i64[1] == (_QWORD)v378;
        v380 = v379 ? 0 : v377;
        v381 = v379 ? 0 : v378;
        v637[0] = (CFTypeRef)v606;
        v637[1] = v361;
        v637[2] = (CFTypeRef)v363;
        v637[3] = v377;
        v637[4] = v378;
        v637[5] = v483;
        v622 = *(uint64x2_t *)&v636[32];
        *(_OWORD *)v623 = *(_OWORD *)&v636[48];
        *(_OWORD *)&v623[16] = *(_OWORD *)&v636[64];
        *(_OWORD *)&v623[32] = *(_OWORD *)&v636[80];
        v620 = *(_OWORD *)v636;
        v621 = *(_OWORD *)&v636[16];
        *(_WORD *)size = 256;
        size[2] = 0;
        *(_OWORD *)&size[3] = *(_OWORD *)v638;
        *(_OWORD *)&size[19] = *(_OWORD *)&v638[2];
        *(CFTypeRef *)&size[32] = *(CFTypeRef *)((char *)&v638[3] + 5);
        *(_QWORD *)&size[40] = 0;
        *(_QWORD *)&size[48] = 0;
        *(_QWORD *)&size[56] = v380;
        *(_QWORD *)&size[64] = v381;
        *(_QWORD *)&size[72] = (char *)theArrayd + v360;
        *(_QWORD *)&size[80] = &v556[-v363];
        *(uint64x2_t *)&size[88] = value;
        *(_QWORD *)&size[104] = 0;
        size[112] = v507;
        size[113] = v370 | v494;
        size[114] = v512;
        size[119] = BYTE4(v615);
        *(_DWORD *)&size[115] = (_DWORD)v615;
        *(_QWORD *)&size[120] = v509;
        size[128] = 0;
        *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v617 + 3);
        *(_DWORD *)&size[129] = (_DWORD)v617;
        v369 = _decodeItem(&v620, v618, a2, v605, size, 0, v637, 0, 0);
        if (v369)
          goto LABEL_878;
      }
      ++v362;
      --v367;
      v361 += *(_QWORD *)v564;
      v360 -= *(_QWORD *)v564;
      if (!--v364)
        goto LABEL_873;
      continue;
    }
    break;
  }
  if (v465)
  {
    v371 = *(CFTypeRef *)v535;
    if (*(_QWORD *)v535)
      v371 = CFRetain(v371);
    *(_QWORD *)&v606 = v371;
    if (!v489 || v368)
      goto LABEL_848;
LABEL_842:
    v372 = 0;
    *(_QWORD *)&v620 = 0;
    if (v438)
    {
      v369 = _getLayerReaderAtPosition(theDictf, v447 - 1 + v540, v452 - 1 + v442, v624, &v620);
      if (v369)
        goto LABEL_878;
      v372 = (const void *)v620;
    }
    size[0] = v454;
    size[1] = v449;
    *(_DWORD *)&size[2] = (_DWORD)v616;
    *(_WORD *)&size[6] = WORD2(v616);
    *(_QWORD *)&size[8] = *((_QWORD *)&v498 + 1);
    *(_QWORD *)&size[16] = v498;
    *(_QWORD *)&size[24] = *((_QWORD *)&v462 + 1);
    *(_QWORD *)&size[32] = v462;
    *(_OWORD *)&size[40] = v634[0];
    *(_OWORD *)&size[56] = v634[1];
    *(_OWORD *)&size[72] = v634[2];
    *(_OWORD *)&size[88] = v635;
    *(_QWORD *)&size[104] = v446;
    size[112] = v507;
    size[113] = v444;
    size[114] = v512;
    size[119] = BYTE4(v614);
    *(_DWORD *)&size[115] = (_DWORD)v614;
    *(_QWORD *)&size[120] = v509;
    *(_QWORD *)&size[128] = v443;
    v369 = HEIFItemDecoderCreate((uint64_t)v636, a2, v618, v372, (uint64_t)size, v437, v447, v452, &v613, (size_t *)&v632, v612.i64, &v605, (__CVBuffer **)&v606);
    if (v369)
    {
LABEL_878:
      v291 = v369;
LABEL_879:
      v78 = 0;
      goto LABEL_880;
    }
  }
  else
  {
    if (v489 && !v368)
      goto LABEL_842;
    v607 = 0uLL;
    *(_QWORD *)&v608 = theArrayd;
    *((_QWORD *)&v608 + 1) = v556;
    v369 = _createPixelBuffer(*(const void **)&v636[24], v453, v636[49], v435, v612.i64[0], v612.i64[1], v440, v439, (unint64_t *)&v607, 0, 0, &v606);
    if (v369)
      goto LABEL_878;
  }
LABEL_848:
  v373 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    if ((_QWORD)v605)
    {
      if (*v373 == 1)
        kdebug_trace();
    }
  }
  if ((_QWORD)v606)
  {
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v459, v456, v457, v461, (CVBufferRef)v606);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v451, v450, (__CVBuffer *)v606);
    v374 = CFGetAllocator(*(CFTypeRef *)&v636[8]);
    v375 = FigPictureReaderGetFigBaseObject();
    v376 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v376)
    {
      v78 = 0;
      v291 = -12782;
      goto LABEL_880;
    }
    v369 = v376(v375, v445, v374, &v619);
    if (v369)
      goto LABEL_878;
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)v619, (__CVBuffer *)v606);
    v556 = (_BYTE *)*((_QWORD *)&v613 + 1);
    theArrayd = (CFArrayRef)v613;
    goto LABEL_856;
  }
  v78 = 0;
  v291 = -16991;
LABEL_880:
  a5 = v558;
  v14 = v559;
  v351 = v483;
LABEL_890:
  HEIFItemDecoderRelease(v605);
  dispatch_release(v351);
LABEL_891:
  if (v459)
    CFRelease(v459);
  v282 = a2;
  if (v456)
    CFRelease(v456);
  if (v457)
    CFRelease(v457);
  if (v461)
    CFRelease(v461);
LABEL_899:
  if ((_QWORD)v606)
    CFRelease((CFTypeRef)v606);
  if (v619)
    CFRelease(v619);
  if (v291)
  {
    v488 = v78;
    v281 = (unsigned __int8 *)*((_QWORD *)&v469 + 1);
    goto LABEL_905;
  }
  v20 = 0;
LABEL_1014:
  v238 = v603;
  if (v603)
    goto LABEL_430;
LABEL_431:
  if (!(_DWORD)v20)
    goto LABEL_432;
LABEL_460:
  v247 = 0;
LABEL_461:
  v243 = pixelBuffer;
  if (pixelBuffer)
LABEL_462:
    CFRelease(v243);
  if (v247)
    goto LABEL_475;
  return v20;
}

uint64_t _createSampleBufferFromPictureReader(CFTypeRef cf, const void *a2, _QWORD *a3, BOOL *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *v9;
  uint64_t v10;
  uint64_t (*v11)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  uint64_t v12;
  const opaqueCMFormatDescription *v13;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, _QWORD, const __CFAllocator *, const opaqueCMFormatDescription **);
  _BOOL8 v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  __CFDictionary *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __CFDictionary *v24;
  uint64_t v25;
  const __CFArray *Count;
  int v27;
  __CFDictionary *Mutable;
  uint64_t v29;
  CMSampleTimingInfo sampleTimingArray;
  CMBlockBufferRef blockBufferOut;
  size_t sampleSizeArray;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const __CFArray *v38;
  __int128 v39;
  const opaqueCMFormatDescription *v40;
  CFTypeRef v41;
  __CFData *v42;
  CMSampleBufferRef v43;

  if (cf)
    v8 = CFGetAllocator(cf);
  else
    v8 = 0;
  v9 = 0;
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0uLL;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v10 = 4294950306;
  if (!cf || !a3)
    goto LABEL_60;
  v11 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 96);
  if (!v11)
    goto LABEL_19;
  v12 = v11(cf, &v37, &v36, &v35, &v41, 0);
  if ((_DWORD)v12)
    goto LABEL_78;
  if (a2)
  {
    v13 = (const opaqueCMFormatDescription *)CFRetain(a2);
    v40 = v13;
    goto LABEL_13;
  }
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v15 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v15)
  {
LABEL_19:
    v9 = 0;
    v10 = 4294954514;
    goto LABEL_60;
  }
  v12 = v15(FigBaseObject, *MEMORY[0x1E0CC4B58], v8, &v40);
  if ((_DWORD)v12)
    goto LABEL_78;
  v13 = v40;
  if (CMFormatDescriptionGetMediaSubType(v13) != 1635135537)
    goto LABEL_20;
LABEL_13:
  v12 = _copyMultilayerProperties((uint64_t)v8, (uint64_t)cf, (CFTypeRef *)&v39 + 1, &v39, &v38, a4);
  if ((_DWORD)v12)
    goto LABEL_78;
  if (*((_QWORD *)&v39 + 1) && CMPhotoCFNumberGetInt32(*((const __CFNumber **)&v39 + 1)) == 0xFFFF)
  {
    v16 = v38 != 0;
    if (*((_QWORD *)&v39 + 1))
    {
      CFRelease(*((CFTypeRef *)&v39 + 1));
      *((_QWORD *)&v39 + 1) = 0;
    }
  }
  else
  {
LABEL_20:
    v16 = 0;
  }
  v34 = 0;
  v12 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v8, v37, (uint64_t)v36, (uint64_t)v35, (uint64_t)v41, v16, &v34, &v42);
  if ((_DWORD)v12)
    goto LABEL_78;
  sampleSizeArray = CMBlockBufferGetDataLength(v42);
  if (v38)
    v17 = v34 == 0;
  else
    v17 = 1;
  v18 = !v17;
  if (v17)
    goto LABEL_45;
  v19 = v37;
  if (v37 >= 1)
  {
    v20 = 0;
    v21 = (uint64_t *)v35;
    while (1)
    {
      v23 = *v21++;
      v22 = v23;
      if (__CFADD__(v20, v23))
        break;
      v20 = (__CFDictionary *)((char *)v20 + v22);
      if (!--v19)
        goto LABEL_35;
    }
    v12 = FigSignalErrorAt();
    goto LABEL_78;
  }
  v20 = 0;
LABEL_35:
  v24 = 0;
  v25 = 0;
  do
  {
    v9 = v24;
    Count = v38;
    if (v38)
      Count = (const __CFArray *)CFArrayGetCount(v38);
    if (v25 >= (uint64_t)Count)
      break;
    LODWORD(blockBufferOut) = 0;
    FigCFArrayGetInt32AtIndex();
    v24 = v20;
    ++v25;
  }
  while ((unint64_t)v20 <= v34);
  if (!v9)
  {
    v29 = FigSignalErrorAt();
LABEL_80:
    v10 = v29;
    goto LABEL_60;
  }
  blockBufferOut = 0;
  v12 = CMBlockBufferCreateWithBufferReference(v8, v42, 0, (size_t)v9, 0, &blockBufferOut);
  if ((_DWORD)v12)
  {
LABEL_78:
    v10 = v12;
    v9 = 0;
    goto LABEL_60;
  }
  if (v42)
    CFRelease(v42);
  v42 = blockBufferOut;
  sampleSizeArray = (size_t)v9;
LABEL_45:
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMTimeMake(&sampleTimingArray.duration, 1, 1);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  v12 = CMSampleBufferCreate(v8, v42, 1u, 0, 0, v40, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v43);
  if ((_DWORD)v12)
    goto LABEL_78;
  if (v39 == 0)
    v27 = v18;
  else
    v27 = 1;
  if (v27 != 1)
  {
    v9 = 0;
    goto LABEL_59;
  }
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
  {
    if (*((_QWORD *)&v39 + 1))
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC4B88], *((const void **)&v39 + 1));
    if ((_QWORD)v39)
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CC4BA0], (const void *)v39);
    if (!v18 || (v29 = CMPhotoCFDictionarySetInt32(v9, CFSTR("IncompleteSample"), 1), !(_DWORD)v29))
    {
      CMSetAttachments(v43, v9, 1u);
LABEL_59:
      v10 = 0;
      *a3 = v43;
      v43 = 0;
      goto LABEL_60;
    }
    goto LABEL_80;
  }
  v10 = 4294950305;
LABEL_60:
  free(v36);
  free(v35);
  if (v43)
    CFRelease(v43);
  if (v42)
    CFRelease(v42);
  if (v41)
    CFRelease(v41);
  if (v40)
    CFRelease(v40);
  if (*((_QWORD *)&v39 + 1))
    CFRelease(*((CFTypeRef *)&v39 + 1));
  if ((_QWORD)v39)
    CFRelease((CFTypeRef)v39);
  if (v38)
    CFRelease(v38);
  if (v9)
    CFRelease(v9);
  return v10;
}

uint64_t CMPhotoDecompressionPluginDecode(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 32))();
  else
    return 4294950306;
}

uint64_t _createBufferAndOptionsForTileDecoding(const void *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, int *a7, const __CFDictionary *a8, _QWORD *a9, __CFDictionary **a10)
{
  const __CFAllocator *v18;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  uint64_t v21;
  void *v22;
  CFDictionaryRef DictionaryRepresentation;
  __CFDictionary *v24;
  uint64_t v25;
  unint64_t v27[4];
  void *value;
  CGRect v29;

  value = 0;
  v18 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v20 = Mutable;
  v27[0] = 0;
  v27[1] = 0;
  v27[2] = a4;
  v27[3] = a5;
  v21 = _createPixelBuffer(a1, a2, a3, a6, a4, a5, a4, a5, v27, a7, a8, &value);
  v22 = value;
  if ((_DWORD)v21)
  {
    v25 = v21;
    goto LABEL_10;
  }
  CFDictionaryAddValue(v20, CFSTR("CanvasPixelBuffer"), value);
  v29.size.width = (double)a4;
  v29.size.height = (double)a5;
  v29.origin.x = 0.0;
  v29.origin.y = 0.0;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v29);
  if (!DictionaryRepresentation)
  {
    v25 = 4294950305;
LABEL_10:
    if (v22)
      CFRelease(v22);
    goto LABEL_5;
  }
  v24 = DictionaryRepresentation;
  CFDictionaryAddValue(v20, CFSTR("CanvasOrigin"), DictionaryRepresentation);
  v25 = 0;
  *a9 = v22;
  *a10 = v20;
  v20 = v24;
LABEL_5:
  CFRelease(v20);
  return v25;
}

uint64_t _getScaledEvenCropRect@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (a2 == a4 && a3 == a5)
  {
    v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a6 = *(_OWORD *)result;
    *(_OWORD *)(a6 + 16) = v6;
  }
  else
  {
    v7 = (a4 << 16) / a2;
    v8 = *(_QWORD *)(result + 8);
    v9 = *(_QWORD *)(result + 24) + v8;
    v10 = (a5 << 16) / a3;
    v11 = ((*(_QWORD *)result * v7 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    v12 = ((v8 * v10 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    v13 = (((*(_QWORD *)(result + 16) + *(_QWORD *)result) * v7 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    v14 = ((v9 * v10 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    *(_QWORD *)a6 = v11;
    *(_QWORD *)(a6 + 8) = v12;
    v15 = v13 - v11;
    *(_QWORD *)(a6 + 16) = v15;
    *(_QWORD *)(a6 + 24) = v14 - v12;
    if (!v15)
      *(_QWORD *)(a6 + 16) = 2;
    if (v14 == v12)
      *(_QWORD *)(a6 + 24) = 2;
  }
  return result;
}

double CMPhotoCodecSessionPoolClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t RegisterCMPhotoScaleAndRotateSession()
{
  uint64_t result;

  sCMPhotoScaleAndRotateSessionClass = 0;
  unk_1ECEF22E0 = "CMPhotoScaleAndRotateSession";
  qword_1ECEF22E8 = (uint64_t)CMPhotoScaleAndRotateSessionClass_Init;
  unk_1ECEF22F0 = 0;
  qword_1ECEF22F8 = (uint64_t)CMPhotoScaleAndRotateSessionClass_Finalize;
  unk_1ECEF2300 = 0;
  qword_1ECEF2308 = 0;
  unk_1ECEF2310 = CMPhotoScaleAndRotateSessionClass_CopyFormattingDesc;
  qword_1ECEF2318 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoScaleAndRotateSessionTypeID = result;
  return result;
}

uint64_t RegisterCMPhotoSurfacePoolClass()
{
  uint64_t result;

  sCMPhotoSurfacePoolClass = 0;
  unk_1ECEF2390 = "CMPhotoSurfacePoolClass";
  qword_1ECEF2398 = (uint64_t)CMPhotoSurfacePoolClass_Init;
  unk_1ECEF23A0 = 0;
  qword_1ECEF23A8 = (uint64_t)CMPhotoSurfacePoolClass_Finalize;
  unk_1ECEF23B0 = 0;
  qword_1ECEF23B8 = 0;
  unk_1ECEF23C0 = 0;
  qword_1ECEF23C8 = (uint64_t)CMPhotoSurfacePoolClass_CopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sCMPhotoSurfacePoolTypeID = result;
  return result;
}

uint64_t RegisterCMPhotoDecompressionContainer()
{
  uint64_t result;

  sCMPhotoDecompressionContainerClass = 0;
  unk_1ECEF2280 = "CMPhotoDecompressionContainer";
  qword_1ECEF2288 = (uint64_t)CMPhotoDecompressionContainerClass_Init;
  unk_1ECEF2290 = 0;
  qword_1ECEF2298 = (uint64_t)CMPhotoDecompressionContainerClass_Finalize;
  unk_1ECEF22A0 = 0;
  qword_1ECEF22A8 = 0;
  unk_1ECEF22B0 = CMPhotoDecompressionContainerClass_CopyFormattingDesc;
  qword_1ECEF22B8 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionContainerTypeID = result;
  return result;
}

uint64_t CMPhotoPixelBufferIsOpaque(__CVBuffer *a1, uint64_t Value)
{
  OSType PixelFormatType;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  CFTypeID v7;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CMPhotoPixelFormatContainsAlpha(PixelFormatType))
  {
    v5 = (const __CFBoolean *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CA8], 0);
    if (v5)
    {
      v6 = v5;
      v7 = CFGetTypeID(v5);
      if (v7 == CFBooleanGetTypeID())
        Value = CFBooleanGetValue(v6);
      CFRelease(v6);
    }
  }
  return Value;
}

uint64_t CMPhotoPixelFormatContainsAlpha(signed int pixelFormat)
{
  int v1;
  CFDictionaryRef v3;
  unsigned __int8 v4;

  v4 = 0;
  if (pixelFormat > 843264309)
  {
    if (pixelFormat == 843264310)
      return 1;
    v1 = 1380401729;
  }
  else
  {
    if (!pixelFormat)
      return v4;
    v1 = 843264056;
  }
  if (pixelFormat == v1)
    return 1;
  v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  FigCFDictionaryGetBooleanIfPresent();
  if (v3)
    CFRelease(v3);
  return v4;
}

uint64_t CMPhotoJPEGDecodeSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  __CFString *Value;
  __CFString *v9;
  CFTypeID v10;
  const void *v11;
  const void *v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  int NumberOfScalerCores;
  intptr_t v17;
  intptr_t v18;
  CFMutableSetRef Mutable;
  IONotificationPort *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t MachPort;
  uint64_t result;
  uint64_t v26;

  if (!a3)
    return 4294951226;
  pthread_once(&CMPhotoJPEGDecodeSessionGetTypeID_sRegisterCMPhotoJPEGDecodeSessionOnce, (void (*)(void))fjds_register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294951225;
  v7 = Instance;
  *(_BYTE *)(Instance + 160) = 0;
  *(_BYTE *)(Instance + 180) = 1;
  *(_QWORD *)(Instance + 200) = 0;
  *(_QWORD *)(Instance + 208) = 0;
  if (a2)
  {
    *(_BYTE *)(Instance + 160) = _getBoolValue_0(a2, CFSTR("AsyncDecode"), *(_BYTE *)(Instance + 160));
    *(_BYTE *)(v7 + 180) = _getBoolValue_0(a2, CFSTR("ColorSpaceAware"), *(_BYTE *)(v7 + 180));
    Value = (__CFString *)CFDictionaryGetValue(a2, CFSTR("SurfacePool"));
    if (Value)
    {
      v9 = Value;
      v10 = CFGetTypeID(Value);
      if (v10 == CMPhotoSurfacePoolGetTypeID() || v9 == CFSTR("SurfacePoolOneShot"))
      {
        v11 = *(const void **)(v7 + 200);
        if (v11)
        {
          CFRelease(v11);
          *(_QWORD *)(v7 + 200) = 0;
        }
        *(_QWORD *)(v7 + 200) = CFRetain(v9);
      }
    }
    v12 = CFDictionaryGetValue(a2, CFSTR("ScaleAndRotateSession"));
    if (v12)
    {
      v13 = v12;
      v14 = CFGetTypeID(v12);
      if (v14 == CMPhotoScaleAndRotateSessionGetTypeID())
      {
        v15 = *(const void **)(v7 + 208);
        if (v15)
        {
          CFRelease(v15);
          *(_QWORD *)(v7 + 208) = 0;
        }
        *(_QWORD *)(v7 + 208) = CFRetain(v13);
      }
    }
  }
  *(_DWORD *)(v7 + 20) = JPEGDeviceInterface_numberOfJPEGCores();
  NumberOfScalerCores = FigGetNumberOfScalerCores();
  *(_DWORD *)(v7 + 24) = NumberOfScalerCores;
  v17 = 2 * *(int *)(v7 + 20);
  v18 = NumberOfScalerCores + ((NumberOfScalerCores + 1) >> 1);
  *(_QWORD *)(v7 + 56) = dispatch_semaphore_create(v17 + v18);
  *(_QWORD *)(v7 + 64) = dispatch_queue_create("com.apple.coremedia.jpegdecodesession.waitqueue", 0);
  *(_QWORD *)(v7 + 72) = dispatch_queue_create("com.apple.coremedia.jpegdecodesession.executionqueue", MEMORY[0x1E0C80D50]);
  *(_QWORD *)(v7 + 80) = dispatch_semaphore_create(v17);
  *(_QWORD *)(v7 + 88) = dispatch_semaphore_create(v18);
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  Mutable = CFSetCreateMutable(a1, 0, 0);
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 32) = Mutable;
  *(_DWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 104) = v7 + 96;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = v7 + 112;
  *(_BYTE *)(v7 + 132) = 1;
  if (*(_BYTE *)(v7 + 160))
  {
    *(_QWORD *)(v7 + 168) = 0;
    *(_DWORD *)(v7 + 176) = 0;
    *(_QWORD *)(v7 + 184) = FigDispatchQueueCreateWithPriority();
    v20 = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
    *(_QWORD *)(v7 + 192) = v20;
    IONotificationPortSetDispatchQueue(v20, *(dispatch_queue_t *)(v7 + 184));
  }
  *(_DWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = dispatch_semaphore_create(*(int *)(v7 + 20));
  *(_QWORD *)(v7 + 136) = CFArrayCreateMutable(a1, *(int *)(v7 + 20), 0);
  if (*(int *)(v7 + 20) < 1)
  {
LABEL_23:
    result = 0;
    *a3 = v7;
  }
  else
  {
    v21 = 0;
    while (1)
    {
      v22 = JPEGDeviceInterface_openDriverConnection();
      if (!(_DWORD)v22)
        break;
      v23 = v22;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 136), (const void *)v22);
      if (*(_BYTE *)(v7 + 160))
      {
        MachPort = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v7 + 192));
        MEMORY[0x1A85D0270](v23, 0, MachPort, 0);
      }
      if (++v21 >= *(_DWORD *)(v7 + 20))
        goto LABEL_23;
    }
    v26 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v7);
    return v26;
  }
  return result;
}

uint64_t _encodeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, unint64_t *a10, uint64_t a11, CMSampleBufferRef *a12, __CFData *a13)
{
  uint64_t v13;
  const __CFDictionary *v14;
  __CVBuffer *v15;
  int v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  signed int PixelFormatType;
  int v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  char v45;
  char v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  __CVBuffer *v53;
  double v54;
  double v55;
  double v56;
  uint64_t Capabilities;
  int v58;
  uint64_t v59;
  double PixelBufferCLAPAsRect;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  const void *Value;
  void *Int;
  int v67;
  const void *v68;
  uint64_t v69;
  int v70;
  int v71;
  _OWORD *v72;
  void *v73;
  char v75;
  char v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  void *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 IsNon601YCbCr;
  unsigned int v86;
  int UncompressedPixelFormatFromCompressedPixelFormat;
  _BOOL4 v88;
  int v89;
  IOSurfaceRef IOSurface;
  unsigned int v91;
  uint64_t MemorySurface;
  IOSurfaceRef v93;
  double v94;
  double v95;
  double v96;
  double v97;
  OpaqueCMBlockBuffer *SampleBufferWrappingIOSurface;
  unint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  int v102;
  int v103;
  BOOL v104;
  _BOOL4 v105;
  int v106;
  char *v107;
  __IOSurface *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int AllocSize;
  uint64_t v114;
  char *v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  size_t v123;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v125;
  size_t DataLength;
  int v127;
  uint64_t (*v128)(__CFData *, _QWORD, __IOSurface **);
  uint64_t v129;
  int v130;
  BOOL v131;
  char v132;
  _BOOL4 v133;
  unint64_t v134;
  int v135;
  OSStatus DataPointer;
  int v137;
  uint64_t (*v138)(uint64_t, uint64_t, int, unsigned int, uint64_t);
  uint64_t (*v139)(uint64_t, uint64_t, int, uint64_t, uint64_t);
  size_t v140;
  size_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(__CFData *, uint64_t, uint64_t, uint64_t, char **);
  unsigned int v148;
  unsigned int v149;
  CMSampleBufferRef v150;
  size_t TotalSampleSize;
  unint64_t v152;
  uint64_t v153;
  size_t v154;
  unsigned int v156;
  uint64_t v157;
  mach_port_t v158;
  int v159;
  int v160;
  int v161;
  __CVBuffer *pixelBuffer;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  int v172[4];
  _OWORD v173[3];
  __int128 v174;
  _OWORD bytes[8];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  CMSampleBufferRef sbuf;
  char v183;
  char v184;
  CVPixelBufferRef v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  unsigned int v192;
  size_t lengthAtOffsetOut[2];
  uint64_t (*v194)(uint64_t, uint64_t);
  void *v195;
  __CFData *v196;
  int v197[2];
  uint64_t v198;
  __int128 v199;
  char *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  size_t v205;
  int v206;
  int v207;
  _BOOL4 v208;
  char *dataPointerOut;
  __IOSurface *v210[2];

  v13 = MEMORY[0x1E0C80A78](a1);
  v160 = v20;
  v161 = v19;
  sbuf = 0;
  v180 = 0u;
  v181 = 0u;
  v178 = 0u;
  v179 = 0u;
  v176 = 0u;
  v177 = 0u;
  v174 = 0u;
  memset(bytes, 0, 120);
  *(_OWORD *)v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = 0u;
  if ((a12 == 0) == (a13 != 0))
  {
    v21 = v18;
    v22 = v17;
    v23 = v14;
    v170 = v13;
    pixelBuffer = v15;
    v159 = v16;
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v25 = *v22;
    v24 = v22[1];
    *(_QWORD *)&v167 = v22[3];
    *((_QWORD *)&v167 + 1) = v22[2];
    v27 = *a10;
    v26 = a10[1];
    v28 = a10[2];
    v29 = a10[3];
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (PixelFormatType <= 1717855599)
    {
      if (((PixelFormatType - 1278226488) > 0x30
         || ((1 << (PixelFormatType - 56)) & 0x1400000000001) == 0)
        && ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0))
      {
LABEL_18:
        *(_QWORD *)&v172[2] = a11;
        WORD2(v171) = 257;
        LODWORD(v173[0]) = -1;
        v172[0] = v161;
        LODWORD(v171) = v21;
        *((_QWORD *)&v171 + 1) = 0x10000000101;
        if (v23)
        {
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("IncreaseRoundingPoint"), (_BYTE *)((unint64_t)&v171 | 0xD));
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("ForceHighSpeed"), (_BYTE *)&v171 + 8);
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("DisableMSRForTransfer"), (_BYTE *)((unint64_t)&v171 | 0xA));
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("DisableGPUForTransfer"), (_BYTE *)((unint64_t)&v171 | 0xC));
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("AllowPixelTransfer"), (_BYTE *)((unint64_t)&v171 | 9));
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("PoolCompressedSurfaces"), (_BYTE *)((unint64_t)&v171 | 0xE));
          CMPhotoCFDictionaryGetBooleanIfPresent(v23, CFSTR("LogJPEGBufferOverruns"), (_BYTE *)((unint64_t)&v171 | 0xF));
        }
        if (v27 | v26 || v28 | v29)
        {
          if (!(v25 | v24) && v167 == 0)
          {
            CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
            if (v28 != vcvtad_u64_f64(v33) || v29 != vcvtad_u64_f64(v32))
              goto LABEL_68;
          }
          else if (*((_QWORD *)&v167 + 1) != v28
                 || (v28 = *((_QWORD *)&v167 + 1), v44 = (_QWORD)v167 == v29, v29 = v167, !v44))
          {
LABEL_68:
            Capabilities = FigSignalErrorAt();
            v58 = v159;
            v53 = pixelBuffer;
            v59 = v170;
            goto LABEL_128;
          }
          v34 = 0;
          v35 = v29 + v26;
          if ((unint64_t)a9 >= v28 + v27)
            v36 = v28 + v27;
          else
            v36 = a9;
          if (*((_QWORD *)&a9 + 1) >= v35)
            v37 = v29 + v26;
          else
            v37 = *((_QWORD *)&a9 + 1);
          v38 = v36 - v27;
          if (v36 <= v27)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
          }
          else
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = v37 > v26;
            v43 = v37 - v26;
            if (v42)
            {
              v34 = v43;
              v39 = v38;
              v40 = v26;
              v41 = v27;
            }
          }
          if (v27 != v41 || v26 != v40 || v28 != v39 || v29 != v34)
            goto LABEL_68;
          BYTE4(v171) = (v27 | v26) == 0;
          v44 = v28 + v27 == (_QWORD)a9 && v35 == *((_QWORD *)&a9 + 1);
          v45 = v44;
          BYTE5(v171) = v45;
          if (v27 | v26)
          {
            v47 = v21 == 5 || v21 == 2;
            v48 = v47;
            v49 = 7;
            if (v47)
              v49 = 15;
            if ((v49 & v26) != 0)
              goto LABEL_68;
            v46 = 0;
            v44 = v48 == 0;
            v50 = 3;
            if (!v44)
              v50 = 4;
            LODWORD(v173[0]) = (v26 >> v50) - 1;
          }
          else
          {
            v46 = v45 ^ 1;
          }
          BYTE7(v171) = v46;
        }
        if (!(v25 | v24) && v167 == 0)
        {
          v53 = pixelBuffer;
          PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
          v64 = vcvtad_u64_f64(v63);
          *((_QWORD *)&v173[0] + 1) = vcvtad_u64_f64(PixelBufferCLAPAsRect);
          *(_QWORD *)&v173[1] = vcvtad_u64_f64(v61);
          *((_QWORD *)&v173[1] + 1) = vcvtad_u64_f64(v62);
          v173[2] = v64;
          *(_QWORD *)&v174 = 0;
          *((_QWORD *)&v174 + 1) = *((_QWORD *)&v173[1] + 1);
          *(_QWORD *)&bytes[0] = v64;
        }
        else
        {
          *((_QWORD *)&v173[2] + 1) = v25;
          *(_QWORD *)&v174 = v24;
          *((_QWORD *)&v174 + 1) = *((_QWORD *)&v167 + 1);
          *(_QWORD *)&bytes[0] = v167;
          v51 = v24;
          v52 = v25;
          v53 = pixelBuffer;
          *((_QWORD *)&v173[0] + 1) = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer));
          *(_QWORD *)&v173[1] = vcvtad_u64_f64(v54);
          *((_QWORD *)&v173[1] + 1) = vcvtad_u64_f64(v55);
          *(_QWORD *)&v173[2] = vcvtad_u64_f64(v56);
          *(_QWORD *)v197 = v52;
          v198 = v51;
          *(_QWORD *)&v199 = *((_QWORD *)&v167 + 1);
          *((_QWORD *)&v199 + 1) = v167;
          CMPhotoApplyCropCMPhotoRectToRect((_QWORD *)v173 + 1, (unint64_t *)v197);
        }
        v58 = v159;
        v59 = v170;
        if (a9 == 0)
          *(_OWORD *)((char *)bytes + 8) = *(_OWORD *)((char *)&v173[1] + 8);
        else
          *(_OWORD *)((char *)bytes + 8) = a9;
        v197[0] = 4;
        if (v23 && CMPhotoCFDictionaryGetIntIfPresent(v23, CFSTR("QualityControllerType"), v197))
        {
          Value = CFDictionaryGetValue(v23, CFSTR("QualityControllerParameters"));
          if (!Value)
          {
            v68 = 0;
LABEL_82:
            v69 = CMPhotoJPEGQualityControllerParse(*(_QWORD *)v170, *((uint64_t *)&v174 + 1), *(uint64_t *)&bytes[0], v21, v197[0], v68, v160, (_OWORD *)((char *)&bytes[1] + 8));
            if (!(_DWORD)v69)
            {
              v70 = LOBYTE(bytes[3]);
              v71 = v160;
              if (!LOBYTE(bytes[3]))
              {
LABEL_86:
                if (!BYTE4(v171))
                {
                  Capabilities = 0;
LABEL_117:
                  if (v159 || v71 == 1)
                  {
                    BYTE6(v171) = 0;
                  }
                  else
                  {
                    if (v71)
                    {
                      v82 = 1;
                    }
                    else
                    {
                      if (_isHWAvailableHelper_onceToken_0 != -1)
                        dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                      v82 = _isHWAvailableHelper_sHWAvailable_0;
                    }
                    BYTE6(v171) = v82;
                  }
                  goto LABEL_126;
                }
                v72 = (_OWORD *)(v170 + 32);
                v73 = *(void **)(v170 + 64);
                if (v73)
                {
                  *(_QWORD *)(v170 + 64) = 0;
                  free(v73);
                  v70 = LOBYTE(bytes[3]);
                }
                *(_QWORD *)(v170 + 64) = 0;
                *v72 = 0u;
                *(_OWORD *)(v170 + 48) = 0u;
                v75 = *(_QWORD *)&bytes[1] * *((_QWORD *)&bytes[0] + 1) > 0x2DC6BFuLL && v70 == 0;
                *(_BYTE *)v72 = v75;
                if (v71 == 1)
                {
                  Capabilities = 0;
                }
                else
                {
                  if (_isHWAvailableHelper_onceToken_0 != -1)
                    dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                  LOBYTE(lengthAtOffsetOut[0]) = 0;
                  if (_isHWAvailableHelper_sIsParavirtualized_0)
                  {
                    Capabilities = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, 0, 0, 0, lengthAtOffsetOut, 0);
                    if ((_DWORD)Capabilities)
                      v76 = 0;
                    else
                      v76 = lengthAtOffsetOut[0];
                  }
                  else
                  {
                    v76 = JPEGDeviceInterface_supportsRSTLogging();
                    Capabilities = 0;
                  }
                  v75 = *(_BYTE *)v72 & v76;
                  *(_BYTE *)v72 = v75;
                }
                if (!v75)
                  goto LABEL_117;
                v77 = v21 == 5 || v21 == 2;
                v78 = 8;
                if (v77)
                  v78 = 16;
                v79 = 3;
                if (v77)
                  v79 = 4;
                v80 = (*(_QWORD *)&bytes[1] + v78 + ~((*(_QWORD *)&bytes[1] - 1) & (unint64_t)(v78 - 1))) >> v79;
                *(_QWORD *)(v170 + 56) = v80 - 1;
                if (v80 == 1)
                {
                  Capabilities = 4294950304;
                }
                else
                {
                  v81 = malloc_type_calloc(v80 - 1, 4uLL, 0x100004052888210uLL);
                  *(_QWORD *)(v170 + 64) = v81;
                  if (v81)
                    goto LABEL_117;
                  Capabilities = 4294950305;
                }
LABEL_126:
                if (v68)
                  CFRelease(v68);
LABEL_128:
                if (*MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                if ((_DWORD)Capabilities)
                  goto LABEL_369;
                if (v161 == 1 && *(_QWORD *)&bytes[4])
                  goto LABEL_367;
                CVPixelBufferGetPixelFormatType(v53);
                CMPhotoGetPixelBufferSize(v53);
                if (!BYTE6(v171))
                  goto LABEL_329;
                if (*MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                v192 = 0;
                dataPointerOut = 0;
                v210[0] = 0;
                v190 = 0u;
                v191 = 0u;
                v188 = 0u;
                v189 = 0u;
                v186 = 0u;
                v187 = 0u;
                v185 = 0;
                v184 = 0;
                if (_isHWAvailableHelper_onceToken_0 != -1)
                  dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                if (!_isHWAvailableHelper_sHWAvailable_0)
                {
                  Capabilities = FigSignalErrorAt();
                  SampleBufferWrappingIOSurface = 0;
                  v83 = 0;
                  goto LABEL_242;
                }
                v164 = _isHWAvailableHelper_sIsParavirtualized_0;
                v158 = *(_DWORD *)(v59 + 24);
                if (v158 | _isHWAvailableHelper_sIsParavirtualized_0)
                {
                  v83 = 0;
                }
                else
                {
                  v83 = JPEGDeviceInterface_openDriverConnection();
                  v158 = v83;
                  if (!(_DWORD)v83)
                    goto LABEL_361;
                }
                v168 = *(_QWORD *)&v173[1];
                v169 = *((_QWORD *)&v173[0] + 1);
                v165 = *(_QWORD *)&v173[2];
                v166 = *((_QWORD *)&v173[1] + 1);
                v84 = CVPixelBufferGetPixelFormatType(v53);
                v183 = 0;
                IsNon601YCbCr = CMPhotoPixelBufferIsNon601YCbCr(v53, &v183);
                v86 = v171;
                UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(v84);
                v88 = 1;
                if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
                {
                  if (UncompressedPixelFormatFromCompressedPixelFormat <= 2037741157)
                  {
                    if (UncompressedPixelFormatFromCompressedPixelFormat != 1111970369)
                    {
                      v89 = 1380401729;
                      goto LABEL_152;
                    }
LABEL_158:
                    if (v88 && (v169 & 1) == 0 && (v168 & 1) == 0 && !IsNon601YCbCr)
                    {
                      IOSurface = CVPixelBufferGetIOSurface(v53);
                      if (IOSurface)
                      {
                        v210[0] = (__IOSurface *)CFRetain(IOSurface);
                        if (v210[0])
                          goto LABEL_177;
                      }
                      else
                      {
                        v210[0] = 0;
                      }
                      MemorySurface = CMPhotoCreateImageSurfaceWrappingPixelBuffer(v53, &v184, v210);
                      if (v210[0])
                      {
LABEL_177:
                        v99 = (*((_QWORD *)&bytes[3] + 1) + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
                        if (v99 <= 0x8000)
                          v99 = 0x8000;
                        if (*(_QWORD *)&bytes[4])
                          v100 = *(_QWORD *)&bytes[4];
                        else
                          v100 = v99;
                        if (BYTE14(v171))
                          v101 = (uint64_t *)(v59 + 8);
                        else
                          v101 = (uint64_t *)&kFigPhotoSurfacePoolOneShot;
                        v157 = *v101;
                        MemorySurface = CMPhotoSurfacePoolCreateMemorySurface(*v101, v100, 1, (IOSurfaceRef *)&dataPointerOut);
                        if (!(_DWORD)MemorySurface)
                        {
                          v156 = v83;
                          if ((v171 - 1) > 5)
                            v163 = 0;
                          else
                            v163 = dword_1A8295AC8[(int)v171 - 1];
                          IOSurfaceBindAccel();
                          v102 = 0;
                          while (1)
                          {
                            v103 = BYTE8(v171) != 0;
                            if (BYTE13(v171))
                              v103 |= 0x10u;
                            v104 = !*(_BYTE *)(v59 + 32) || BYTE4(v171) == 0;
                            v105 = !v104 && BYTE5(v171) != 0;
                            v106 = v103 | 8;
                            v107 = dataPointerOut;
                            v108 = v210[0];
                            v109 = v172[2];
                            v111 = *((_QWORD *)&bytes[5] + 1);
                            v110 = *(_QWORD *)&bytes[6];
                            if (v164)
                            {
                              v112 = CMPhotoParavirtualizedGuestJPEGHardwareEncode((int)v210[0], (int)dataPointerOut, v172[2], v166, v165, v169, v168, v163, v106, v105, *((UInt8 **)&bytes[5] + 1), *(UInt8 **)&bytes[6], (uint64_t)&v192);
                              v59 = v170;
                            }
                            else
                            {
                              bzero(&v198, 0xD98uLL);
                              bzero(lengthAtOffsetOut, 0xDA0uLL);
                              LODWORD(v205) = v109;
                              v197[0] = IOSurfaceGetID(v108);
                              AllocSize = IOSurfaceGetAllocSize(v108);
                              v114 = 0;
                              v197[1] = AllocSize;
                              DWORD1(v199) = v166;
                              v201 = __PAIR64__(v163, v168);
                              v200 = (char *)__PAIR64__(v169, v106);
                              *((_QWORD *)&v199 + 1) = v165;
                              v207 = 1;
                              v208 = v105;
                              do
                              {
                                v115 = (char *)v197 + 2 * v114;
                                *((_WORD *)v115 + 46) = *(unsigned __int8 *)(v111 + v114);
                                *((_WORD *)v115 + 110) = *(unsigned __int8 *)(v110 + v114++);
                              }
                              while (v114 != 64);
                              LODWORD(v198) = IOSurfaceGetID((IOSurfaceRef)v107);
                              HIDWORD(v198) = IOSurfaceGetAllocSize((IOSurfaceRef)v107);
                              if (*MEMORY[0x1E0CA1FC0] == 1)
                                kdebug_trace();
                              v112 = JPEGDeviceInterface_encodeJPEG2024(v158, v197, lengthAtOffsetOut);
                              v59 = v170;
                              if (*MEMORY[0x1E0CA1FC0] == 1)
                                kdebug_trace();
                              if (!v112)
                                v192 = v194;
                            }
                            ++v102;
                            if (v112 != -536870168)
                              break;
                            if (v172[0])
                            {
                              if (v172[0] == 2)
                                goto LABEL_234;
                              if (*(_QWORD *)&bytes[4])
                              {
                                SampleBufferWrappingIOSurface = 0;
                                v123 = 0;
                                Capabilities = 4294950306;
                                goto LABEL_238;
                              }
                              v116 = IOSurfaceGetAllocSize((IOSurfaceRef)dataPointerOut);
                              v117 = *MEMORY[0x1E0C85AD8] - 1;
                              v118 = -*MEMORY[0x1E0C85AD8];
                              v119 = (v117 + 2 * *((_QWORD *)&v174 + 1) * *(_QWORD *)&bytes[0]) & v118;
                              if (v119 <= 0x8000)
                                v119 = 0x8000;
                              if (v119 >= (3 * v116) >> 1)
                                v119 = (3 * v116) >> 1;
                              v120 = (v119 + v117) & v118;
                              if (v120 <= 0x8000)
                                v121 = 0x8000;
                              else
                                v121 = v120;
                              if (v121 <= v116)
                              {
                                v122 = FigSignalErrorAt();
LABEL_237:
                                Capabilities = v122;
                                SampleBufferWrappingIOSurface = 0;
                                v123 = 0;
LABEL_238:
                                v83 = v156;
                                goto LABEL_239;
                              }
                              IOSurfaceDecrementUseCount((IOSurfaceRef)dataPointerOut);
                              if (dataPointerOut)
                              {
                                CFRelease(dataPointerOut);
                                dataPointerOut = 0;
                              }
                              v122 = CMPhotoSurfacePoolCreateMemorySurface(v157, v121, 1, (IOSurfaceRef *)&dataPointerOut);
                              if ((_DWORD)v122)
                                goto LABEL_237;
                            }
                            else
                            {
                              v122 = CMPhotoJPEGQualityControllerDecrementQuality((_OWORD *)((char *)&bytes[1] + 8), &v186);
                              if ((_DWORD)v122)
                                goto LABEL_237;
                              CMPhotoJPEGQualitySettingsReleaseStorage((_QWORD *)&bytes[1] + 1);
                              *(_OWORD *)((char *)&bytes[3] + 8) = v188;
                              *(_OWORD *)((char *)&bytes[4] + 8) = v189;
                              *(_OWORD *)((char *)&bytes[5] + 8) = v190;
                              *(_OWORD *)((char *)&bytes[6] + 8) = v191;
                              *(_OWORD *)((char *)&bytes[1] + 8) = v186;
                              *(_OWORD *)((char *)&bytes[2] + 8) = v187;
                              v186 = 0u;
                              v187 = 0u;
                              v188 = 0u;
                              v189 = 0u;
                              v190 = 0u;
                              v191 = 0u;
                            }
                            if (v102 == 10)
                              goto LABEL_229;
                          }
                          if (v112)
                          {
LABEL_234:
                            SampleBufferWrappingIOSurface = 0;
                            v123 = 0;
                            Capabilities = 4294950302;
                            goto LABEL_238;
                          }
LABEL_229:
                          v83 = v156;
                          if (v192)
                          {
                            SampleBufferWrappingIOSurface = CMPhotoCreateSampleBufferWrappingIOSurface(*(const __CFAllocator **)v59, (__IOSurface *)dataPointerOut, 0, v192, SBYTE14(v171), 1u);
                            if (SampleBufferWrappingIOSurface)
                            {
                              _attachSizeHintIfNeeded((uint64_t)&v171, v192, SampleBufferWrappingIOSurface);
                              v123 = IOSurfaceGetAllocSize((IOSurfaceRef)dataPointerOut);
                              if (dataPointerOut)
                              {
                                CFRelease(dataPointerOut);
                                dataPointerOut = 0;
                              }
                              Capabilities = 0;
                              *(_BYTE *)(v59 + 73) = 1;
                              sbuf = SampleBufferWrappingIOSurface;
                            }
                            else
                            {
                              v123 = 0;
                              Capabilities = 4294950305;
                            }
                          }
                          else
                          {
                            SampleBufferWrappingIOSurface = 0;
                            v123 = 0;
                            Capabilities = 4294950304;
                          }
LABEL_239:
                          if (HIBYTE(v171))
                          {
                            *(_QWORD *)v197 = MEMORY[0x1E0C809B0];
                            v198 = 0x40000000;
                            *(_QWORD *)&v199 = ___encodeHW_block_invoke;
                            *((_QWORD *)&v199 + 1) = &__block_descriptor_tmp_12_1;
                            v200 = (char *)&v171;
                            v201 = v169;
                            v202 = v168;
                            v203 = v166;
                            v204 = v165;
                            v205 = v123;
                            v206 = v102;
                            v207 = v192;
                            analytics_send_event_lazy();
                          }
                          v58 = v159;
                          v53 = pixelBuffer;
                          goto LABEL_242;
                        }
                      }
LABEL_362:
                      Capabilities = MemorySurface;
                      SampleBufferWrappingIOSurface = 0;
                      goto LABEL_242;
                    }
LABEL_165:
                    if ((v171 - 1) > 5)
                      v91 = 875704422;
                    else
                      v91 = dword_1A8295AB0[(int)v171 - 1];
                    if (BYTE9(v171))
                    {
                      MemorySurface = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(*(_QWORD *)(v59 + 16), v53, 0, 1, 1, v91, 1, 0, (double)*((unint64_t *)&v173[2] + 1), (double)(unint64_t)v174, (double)*((unint64_t *)&v174 + 1), (double)*(unint64_t *)&bytes[0], 0, 0, 0, 0, 1u, SBYTE10(v171), SBYTE11(v171),
                                        SBYTE12(v171),
                                        &v185);
                      if ((_DWORD)MemorySurface)
                        goto LABEL_362;
                      v93 = CVPixelBufferGetIOSurface(v185);
                      if (v93)
                      {
                        v210[0] = (__IOSurface *)CFRetain(v93);
                        if (v210[0])
                        {
                          v94 = CMPhotoGetPixelBufferCLAPAsRect(v185);
                          v168 = vcvtad_u64_f64(v95);
                          v169 = vcvtad_u64_f64(v94);
                          v165 = vcvtad_u64_f64(v97);
                          v166 = vcvtad_u64_f64(v96);
                          goto LABEL_177;
                        }
                        SampleBufferWrappingIOSurface = 0;
                      }
                      else
                      {
                        SampleBufferWrappingIOSurface = 0;
                        v210[0] = 0;
                      }
                      Capabilities = 4294950305;
LABEL_242:
                      if (v184)
                      {
                        CVPixelBufferUnlockBaseAddress(v53, 1uLL);
                        v184 = 0;
                      }
                      CMPhotoJPEGQualitySettingsReleaseStorage(&v186);
                      JPEGDeviceInterface_closeDriverConnection(v83);
                      if (v210[0])
                        CFRelease(v210[0]);
                      if (v185)
                        CFRelease(v185);
                      if (dataPointerOut)
                      {
                        IOSurfaceDecrementUseCount((IOSurfaceRef)dataPointerOut);
                        if (dataPointerOut)
                          CFRelease(dataPointerOut);
                      }
                      if (*MEMORY[0x1E0CA1FC0] == 1)
                        kdebug_trace();
                      if (a13 && !(_DWORD)Capabilities)
                      {
                        DataBuffer = CMSampleBufferGetDataBuffer(SampleBufferWrappingIOSurface);
                        if (!DataBuffer)
                        {
                          Capabilities = 4294950304;
                          goto LABEL_370;
                        }
                        v125 = DataBuffer;
                        if (*MEMORY[0x1E0CA1FC0] == 1)
                          kdebug_trace();
                        *(_QWORD *)&v186 = 0;
                        DataLength = CMBlockBufferGetDataLength(v125);
                        if (LODWORD(v173[0]) + 8 <= 0)
                          v127 = -(-(LODWORD(v173[0]) + 8) & 7);
                        else
                          LOBYTE(v127) = (LOBYTE(v173[0]) + 8) & 7;
                        if (BYTE4(v171))
                        {
                          ++LODWORD(v173[0]);
                          if (!BYTE7(v171) && BYTE5(v171) && v127 == 7)
                          {
                            Capabilities = CMByteStreamAppendBlockBuffer();
                            goto LABEL_325;
                          }
                        }
                        v210[0] = 0;
                        v128 = *(uint64_t (**)(__CFData *, _QWORD, __IOSurface **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 24);
                        if (!v128)
                        {
LABEL_323:
                          Capabilities = 4294954514;
LABEL_324:
                          CMPhotoJFIFScannerDispose((void *)v186);
LABEL_325:
                          if (*MEMORY[0x1E0CA1FC0] == 1)
                            kdebug_trace();
                          if ((_DWORD)Capabilities)
                            goto LABEL_369;
LABEL_328:
                          if (BYTE6(v171))
                            goto LABEL_350;
                          goto LABEL_329;
                        }
                        v129 = v128(a13, 0, v210);
                        if ((_DWORD)v129)
                          goto LABEL_353;
                        v130 = BYTE4(v171);
                        if (BYTE4(v171))
                          v131 = 1;
                        else
                          v131 = v127 == 7;
                        v132 = !v131;
                        v199 = 0uLL;
                        v198 = 0;
                        *(_QWORD *)v197 = v125;
                        v133 = !v131 || *(_BYTE *)(v59 + 32) != 0;
                        LOBYTE(v198) = v133;
                        BYTE1(v198) = v132;
                        BYTE2(v198) = v127;
                        BYTE3(v198) = BYTE5(v171) == 0;
                        BYTE4(v198) = BYTE4(v171) == 0;
                        if (BYTE7(v171))
                          v199 = *(_OWORD *)((char *)bytes + 8);
                        else
                          v199 = 0uLL;
                        v134 = *(_QWORD *)(v59 + 56);
                        v200 = (char *)v210[0] - *(_QWORD *)(v59 + 48);
                        v201 = v134;
                        v203 = 0;
                        v202 = 0;
                        v204 = *(_QWORD *)(v59 + 64);
                        v205 = SLODWORD(v173[0]);
                        if (BYTE5(v171))
                        {
                          v135 = 0;
                          v203 = DataLength;
                          if (BYTE7(v171))
                            goto LABEL_299;
                        }
                        else
                        {
                          lengthAtOffsetOut[0] = 0;
                          dataPointerOut = 0;
                          DataPointer = CMBlockBufferGetDataPointer(v125, DataLength - 2, lengthAtOffsetOut, 0, &dataPointerOut);
                          v135 = 1;
                          if (!DataPointer && lengthAtOffsetOut[0] >= 2)
                          {
                            if (*dataPointerOut == 255 && dataPointerOut[1] == 217)
                            {
                              v135 = 0;
                              v203 = DataLength - 2;
                              BYTE3(v198) = 0;
                            }
                            else
                            {
                              v135 = 1;
                            }
                          }
                          v130 = BYTE4(v171);
                          if (BYTE7(v171))
                            goto LABEL_299;
                        }
                        if (v130)
                        {
                          if (v135)
                            v137 = 1;
                          else
                            v137 = v133;
                          if (v137 != 1)
                          {
LABEL_309:
                            if (!*(_BYTE *)(v59 + 32) || !BYTE4(v171))
                              goto LABEL_313;
                            *(_QWORD *)(v59 + 48) = v202;
                            dataPointerOut = 0;
                            v142 = *(unsigned __int16 *)(v59 + 56);
                            v143 = *(_QWORD *)(v59 + 64);
                            lengthAtOffsetOut[0] = MEMORY[0x1E0C809B0];
                            lengthAtOffsetOut[1] = 0x40000000;
                            v194 = ___postProcessStripToStream_block_invoke;
                            v195 = &__block_descriptor_tmp_13;
                            v196 = a13;
                            v129 = _writeRestartMarkerSegmentWithHandler(1, 1, v142, v143, (uint64_t *)(v59 + 40), &dataPointerOut, (uint64_t)lengthAtOffsetOut);
                            if (!(_DWORD)v129)
                            {
                              *(_QWORD *)(v59 + 48) = &dataPointerOut[*(_QWORD *)(v59 + 48) - 2];
LABEL_313:
                              Capabilities = CMByteStreamAppendBlockBuffer();
                              if ((_DWORD)Capabilities || !*(_BYTE *)(v59 + 32) || !BYTE5(v171))
                                goto LABEL_324;
                              dataPointerOut = 0;
                              v144 = *(_QWORD *)(v59 + 40);
                              v146 = *(_QWORD *)(v59 + 56);
                              v145 = *(_QWORD *)(v59 + 64);
                              v147 = *(uint64_t (**)(__CFData *, uint64_t, uint64_t, uint64_t, char **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                              if (v147)
                              {
                                v148 = v147(a13, 4 * v146, v144, v145, &dataPointerOut);
                                if (dataPointerOut == (char *)(4 * v146))
                                  v149 = 0;
                                else
                                  v149 = -16992;
                                if (v148)
                                  Capabilities = v148;
                                else
                                  Capabilities = v149;
                                goto LABEL_324;
                              }
                              goto LABEL_323;
                            }
LABEL_353:
                            Capabilities = v129;
                            goto LABEL_324;
                          }
                          if (!v135)
                          {
                            v138 = 0;
                            goto LABEL_300;
                          }
                        }
LABEL_299:
                        v138 = _scannerCallbackMarker;
LABEL_300:
                        if (v133)
                          v139 = _scannerCallbackRestartMarker;
                        else
                          v139 = 0;
                        v129 = CMPhotoJFIFScannerCreate((uint64_t)v138, (uint64_t)v197, (uint64_t)v139, (uint64_t)v197, &v186);
                        if ((_DWORD)v129)
                          goto LABEL_353;
                        if (DataLength)
                        {
                          v140 = 0;
                          v141 = DataLength;
                          while (1)
                          {
                            lengthAtOffsetOut[0] = 0;
                            dataPointerOut = 0;
                            v129 = CMBlockBufferGetDataPointer(v125, v140, (size_t *)&dataPointerOut, 0, (char **)lengthAtOffsetOut);
                            if ((_DWORD)v129)
                              goto LABEL_353;
                            v129 = CMPhotoJFIFScannerRun(v186, lengthAtOffsetOut[0], (unint64_t)dataPointerOut);
                            if ((_DWORD)v129)
                              goto LABEL_353;
                            v140 += (size_t)dataPointerOut;
                            v141 -= (unint64_t)dataPointerOut;
                            if (!v141)
                              goto LABEL_309;
                          }
                        }
                        goto LABEL_309;
                      }
                      if (v160 || !(_DWORD)Capabilities)
                        goto LABEL_328;
                      BYTE6(v171) = 0;
LABEL_329:
                      if (*MEMORY[0x1E0CA1FC0] == 1)
                        kdebug_trace();
                      Capabilities = _encodeSW(v59, v53, (uint64_t)&v171, v58, (CFTypeRef *)&sbuf, a13);
                      if (*MEMORY[0x1E0CA1FC0] == 1)
                        kdebug_trace();
                      if ((_DWORD)Capabilities)
                        goto LABEL_369;
                      v150 = sbuf;
                      if (sbuf)
                      {
                        TotalSampleSize = CMSampleBufferGetTotalSampleSize(sbuf);
                        Capabilities = 0;
                        if (*(_QWORD *)&bytes[4])
                        {
                          v152 = TotalSampleSize;
                          if (TotalSampleSize > *(_QWORD *)&bytes[4])
                          {
                            if (!v161)
                            {
                              while (1)
                              {
                                if (v150)
                                {
                                  CFRelease(v150);
                                  sbuf = 0;
                                }
                                v153 = CMPhotoJPEGQualityControllerDecrementByteBudgetQualityGivenSize((_OWORD *)((char *)&bytes[1] + 8), v152, 1, &v176);
                                if ((_DWORD)v153)
                                  goto LABEL_368;
                                CMPhotoJPEGQualitySettingsReleaseStorage((_QWORD *)&bytes[1] + 1);
                                *(_OWORD *)((char *)&bytes[3] + 8) = v178;
                                *(_OWORD *)((char *)&bytes[4] + 8) = v179;
                                *(_OWORD *)((char *)&bytes[5] + 8) = v180;
                                *(_OWORD *)((char *)&bytes[6] + 8) = v181;
                                *(_OWORD *)((char *)&bytes[1] + 8) = v176;
                                *(_OWORD *)((char *)&bytes[2] + 8) = v177;
                                v176 = 0u;
                                v177 = 0u;
                                v178 = 0u;
                                v179 = 0u;
                                v180 = 0u;
                                v181 = 0u;
                                LODWORD(v173[0]) = -1;
                                if (*MEMORY[0x1E0CA1FC0] == 1)
                                  kdebug_trace();
                                Capabilities = _encodeSW(v59, v53, (uint64_t)&v171, v58, (CFTypeRef *)&sbuf, a13);
                                if (*MEMORY[0x1E0CA1FC0] == 1)
                                  kdebug_trace();
                                if ((_DWORD)Capabilities)
                                  goto LABEL_369;
                                v150 = sbuf;
                                v154 = CMSampleBufferGetTotalSampleSize(sbuf);
                                if (*(_QWORD *)&bytes[4])
                                {
                                  v152 = v154;
                                  if (v154 > *(_QWORD *)&bytes[4])
                                    continue;
                                }
                                goto LABEL_350;
                              }
                            }
LABEL_367:
                            v153 = FigSignalErrorAt();
LABEL_368:
                            Capabilities = v153;
                            goto LABEL_369;
                          }
                        }
                      }
                      else
                      {
                        Capabilities = 0;
                      }
LABEL_350:
                      if (a12)
                      {
                        *a12 = sbuf;
                        goto LABEL_372;
                      }
                      goto LABEL_369;
                    }
LABEL_361:
                    MemorySurface = FigSignalErrorAt();
                    goto LABEL_362;
                  }
                  if (UncompressedPixelFormatFromCompressedPixelFormat != 2037741171
                    && UncompressedPixelFormatFromCompressedPixelFormat != 2037741158)
                  {
                    goto LABEL_165;
                  }
                }
                else
                {
                  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704933)
                  {
                    if (UncompressedPixelFormatFromCompressedPixelFormat != 32)
                    {
                      if (UncompressedPixelFormatFromCompressedPixelFormat != 875704422)
                        goto LABEL_165;
                      v88 = v86 - 5 < 2;
                    }
                    goto LABEL_158;
                  }
                  if (UncompressedPixelFormatFromCompressedPixelFormat != 875704934)
                  {
                    v89 = 875836518;
LABEL_152:
                    if (UncompressedPixelFormatFromCompressedPixelFormat != v89)
                      goto LABEL_165;
                    goto LABEL_158;
                  }
                }
                if (v86 > 6)
                  goto LABEL_165;
                v88 = 1;
                if (((1 << v86) & 0x68) == 0)
                  goto LABEL_165;
                goto LABEL_158;
              }
              if (v160 != 2)
              {
                v71 = 1;
                goto LABEL_86;
              }
              v69 = FigSignalErrorAt();
            }
            Capabilities = v69;
            goto LABEL_126;
          }
          Int = (void *)CFRetain(Value);
        }
        else
        {
          if (*(_QWORD *)&bytes[1] * *((_QWORD *)&bytes[0] + 1) < 0xF42400uLL)
            v67 = 5;
          else
            v67 = 0;
          Int = CMPhotoCFNumberCreateInt(v67);
        }
        v68 = Int;
        goto LABEL_82;
      }
LABEL_17:
      v21 = 6;
      goto LABEL_18;
    }
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType == 1751411059)
        goto LABEL_17;
      v31 = 1751410032;
    }
    else
    {
      if (PixelFormatType == 1717855600)
        goto LABEL_17;
      v31 = 1717856627;
    }
    if (PixelFormatType != v31)
      goto LABEL_18;
    goto LABEL_17;
  }
  FigSignalErrorAt();
  Capabilities = 0;
LABEL_369:
  SampleBufferWrappingIOSurface = sbuf;
LABEL_370:
  if (SampleBufferWrappingIOSurface)
    CFRelease(SampleBufferWrappingIOSurface);
LABEL_372:
  CMPhotoJPEGQualitySettingsReleaseStorage((_QWORD *)&bytes[1] + 1);
  CMPhotoJPEGQualitySettingsReleaseStorage(&v176);
  return Capabilities;
}

void CMPhotoJPEGQualitySettingsReleaseStorage(_QWORD *a1)
{
  void *v2;
  const void *v3;

  if (a1)
  {
    a1[8] = 0;
    a1[9] = 0;
    a1[10] = 0;
    v2 = (void *)a1[11];
    if (v2)
    {
      a1[11] = 0;
      free(v2);
    }
    v3 = (const void *)a1[7];
    if (v3)
    {
      CFRelease(v3);
      a1[7] = 0;
    }
  }
}

uint64_t ___isHWAvailableHelper_block_invoke()
{
  uint64_t v0;
  uint64_t result;

  v0 = JPEGDeviceInterface_openDriverConnection();
  _isHWAvailableHelper_sHWAvailable = (_DWORD)v0 != 0;
  JPEGDeviceInterface_closeDriverConnection(v0);
  if (_isHWAvailableHelper_sHWAvailable)
  {
    result = JPEGDeviceInterface_numberOfJPEGCores();
    _isHWAvailableHelper_sNumCores = result;
  }
  else
  {
    result = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, &_isHWAvailableHelper_sNumCores, 0, 0, 0, 0);
    _isHWAvailableHelper_sIsParavirtualized = (_DWORD)result == 0;
    _isHWAvailableHelper_sHWAvailable = (_DWORD)result == 0;
  }
  return result;
}

uint64_t ___isHWAvailableHelper_block_invoke_0()
{
  uint64_t v0;
  uint64_t result;

  v0 = JPEGDeviceInterface_openDriverConnection();
  _isHWAvailableHelper_sHWAvailable_0 = (_DWORD)v0 != 0;
  result = JPEGDeviceInterface_closeDriverConnection(v0);
  if (!_isHWAvailableHelper_sHWAvailable_0)
  {
    result = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, 0, 0, 0, 0, 0);
    _isHWAvailableHelper_sIsParavirtualized_0 = (_DWORD)result == 0;
    _isHWAvailableHelper_sHWAvailable_0 = (_DWORD)result == 0;
  }
  return result;
}

uint64_t JPEGDecompressSurface(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, __int128 a12)
{
  int v13;
  uint64_t v15;
  uint64_t v16;
  __IOSurface *v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *BaseAddress;
  NSObject *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  int v38;
  unsigned __int8 *v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v45;
  int v46;
  int v47;
  IONotificationPort *v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t MachPort;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int8x8_t *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  _WORD *v78;
  __IOSurface *buffer;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *queue;
  dispatch_queue_t queuea;
  int v87;
  _DWORD *v88;
  int v89;
  __int32 v90;
  IONotificationPort *notify;
  unsigned int notifya;
  NSObject *group;
  int groupa;
  __IOSurface *v95;
  char *v96;
  _DWORD v98[6];
  _QWORD v99[3];

  v13 = a7;
  v15 = a5;
  v16 = a4;
  v17 = (__IOSurface *)a3;
  v99[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if ((int)JPEGDeviceInterface_numberOfJPEGCores() < 2)
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    v19 = JPEGDeviceInterface_supportsRSTLogging();
    if (a1)
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    if (a11)
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    if (!v19)
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    if (!*((_BYTE *)a6 + 33))
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    v21 = *a6;
    v20 = a6[1];
    if (v20 * (unint64_t)v21 < 0x3D0901 || v21 != a9 || v20 != a10)
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    v89 = a8;
    v87 = -536870165;
    v99[0] = 0;
    *(_QWORD *)v98 = 0;
    v22 = JPEGDeviceInterface_numberOfJPEGCores();
    v23 = a6[17];
    if (v22 >= v23)
      v24 = a6[17];
    else
      v24 = v22;
    v95 = v17;
    if (v24 < 2)
    {
      if (!v24)
      {
        a8 = v89;
        return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
      }
      v90 = v13;
      v84 = v16;
      v96 = 0;
      notify = 0;
      group = 0;
      queue = 0;
      v25 = 1;
LABEL_81:
      v71 = 0;
      v72 = 4 * v25;
      v17 = v95;
      do
      {
        v73 = *(unsigned int *)((char *)v99 + v71);
        if ((_DWORD)v73)
          JPEGDeviceInterface_closeDriverConnection(v73);
        v71 += 4;
      }
      while (v72 != v71);
      if (notify)
      {
        IONotificationPortSetDispatchQueue(notify, 0);
        IONotificationPortDestroy(notify);
      }
      v16 = v84;
      a8 = v89;
      v13 = v90;
      if (queue)
        dispatch_release(queue);
      if (group)
        dispatch_release(group);
      if (v96)
        free(v96);
      if (!v87)
        return 0;
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, v16, v15, *a6, a6[1], a6[4], a6[16], a6[17], v13, a8, v74, a9, SHIDWORD(a9), a10, a11, (_QWORD *)a12, *((_QWORD **)&a12 + 1));
    }
    v96 = (char *)malloc_type_calloc(0xDA0uLL, 4uLL, 0xABB951BBuLL);
    v84 = v16;
    v90 = v13;
    if (v96)
    {
      if (a6[7] == a6[16])
      {
        buffer = (__IOSurface *)v15;
        v26 = (v23 + 1) >> 1;
        IOSurfaceLock(v17, 1u, 0);
        BaseAddress = IOSurfaceGetBaseAddress(v17);
        v28 = 0;
        v80 = (char *)BaseAddress + a6[10];
        v76 = (unsigned __int8 *)(BaseAddress + 1);
        v78 = BaseAddress;
        v29 = v96;
        v83 = v26;
        while (2)
        {
          v30 = (_QWORD)v28 * v26;
          if (v28 == 1)
            v31 = a6[17];
          else
            v31 = v26 + v30;
          if ((_DWORD)v30)
            v32 = *(_DWORD *)&v80[4 * v30 - 4];
          else
            v32 = 0;
          v98[(_QWORD)v28 + 4] = v32;
          if (v28 == 1)
          {
            v98[3] = IOSurfaceGetAllocSize(v17) - a6[13];
            v33 = a6[1] - a6[3] * v30;
          }
          else
          {
            v98[(_QWORD)v28 + 2] = *(_DWORD *)&v80[4 * (v31 - 1)];
            v33 = a6[3] * (v31 - v30);
          }
          notifya = v33;
          queuea = v28;
          v34 = &v29[3488 * (_QWORD)v28 + 132];
          v35 = a6[14];
          v36 = v35 & 7;
          v82 = (int)v34;
          if ((v35 & 7) != 0)
          {
            memset(v34, 255, 8 - v36);
            v37 = &v34[8 - v36];
            v38 = v36 | 0xBF8;
          }
          else
          {
            v38 = 3072;
            v37 = v34;
          }
          groupa = 0;
          v39 = v76;
          *(_WORD *)v37 = *v78;
          v40 = v37 + 2;
          v41 = v38 - 2;
          do
          {
            while (1)
            {
              while (*v39 != 255)
                ++v39;
              v42 = __rev16(*((unsigned __int16 *)v39 + 1));
              v43 = v42 + 2;
              if (v39[1] - 192 <= 0x1D && ((1 << (v39[1] + 64)) & 0x2C000011) != 0)
                break;
              v39 += v43;
            }
            v45 = v41 >= v43;
            v41 -= v43;
            if (!v45)
              goto LABEL_73;
            memcpy(v40, v39, v42 + 2);
            v46 = v39[1];
            if (v46 == 218)
            {
              v47 = 1;
            }
            else if (v46 == 192)
            {
              if (v42 != 3 * *((unsigned __int8 *)a6 + 32) + 8)
                goto LABEL_73;
              v47 = 0;
              *(_WORD *)((char *)v40 + 5) = bswap32(notifya) >> 16;
              groupa = 1;
            }
            else
            {
              v47 = 0;
            }
            v39 += v43;
            v40 = (_WORD *)((char *)v40 + v43);
          }
          while (!v47);
          if (groupa)
          {
            v26 = v83;
            v17 = v95;
            v29 = v96;
            *(_DWORD *)&v96[3488 * (_QWORD)queuea + 124] = (_DWORD)v40 - v82;
            v28 = ((char *)&queuea->isa + 1);
            if (queuea != (dispatch_queue_t)1)
              continue;
            IOSurfaceUnlock(v95, 1u, 0);
            group = dispatch_group_create();
            if (group)
            {
              queue = dispatch_queue_create("com.apple.coremedia.jpegdecode.callbackqueue", 0);
              if (queue)
              {
                v48 = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
                if (v48)
                {
                  notify = v48;
                  IONotificationPortSetDispatchQueue(v48, queue);
                  v49 = 0;
                  v50 = 1;
                  v25 = 2;
                  while (1)
                  {
                    v51 = v50;
                    v52 = JPEGDeviceInterface_openDriverConnection();
                    *((_DWORD *)v99 + v49) = v52;
                    if (!(_DWORD)v52)
                      break;
                    v53 = v52;
                    MachPort = IONotificationPortGetMachPort(notify);
                    MEMORY[0x1A85D0270](v53, 0, MachPort, 0);
                    v50 = 0;
                    v49 = 1;
                    if ((v51 & 1) == 0)
                    {
                      v55 = 0;
                      v56 = 0;
                      v57 = 0;
                      v58 = 0;
                      v59 = 6976;
                      v88 = v98;
                      do
                      {
                        v77 = v59;
                        if (v58 == 1)
                          v60 = a6[17];
                        else
                          v60 = v83 + v56;
                        v75 = v60;
                        v61 = v56;
                        v62 = (int8x8_t *)&v96[v57];
                        *(_DWORD *)&v96[v57] = IOSurfaceGetID(v95);
                        v62[1].i32[0] = IOSurfaceGetID(buffer);
                        v62->i32[1] = IOSurfaceGetAllocSize(v95);
                        v62[1].i32[1] = IOSurfaceGetAllocSize(buffer);
                        v62[5].i32[1] = a6[4];
                        v62[9].i32[1] = a9;
                        v62[10].i32[0] = a10;
                        v62[4].i32[0] = v90;
                        v62[4].i32[1] = 0;
                        v63 = a6[3];
                        v81 = v61;
                        v62[5].i32[0] = v63 * v61;
                        v62[2].i32[1] = *a6;
                        v64 = a6[1] - v63 * v61;
                        v65 = v63 * (v75 + v55);
                        if (v64 < v65)
                          v65 = v64;
                        v62[3].i32[0] = v65;
                        v62[14] = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(vdupq_n_s64(v58), (int64x2_t)xmmword_1A828F180))), (int8x8_t)0x100000001);
                        v66 = v98[v58 + 4];
                        v62[15].i32[0] = v98[v58 + 2] - v66;
                        v62[16].i32[0] = a6[13] + v66;
                        v62[6] = (int8x8_t)_stripDecodeCompleteCallback;
                        v62[7] = (int8x8_t)group;
                        v62[8] = (int8x8_t)v88;
                        dispatch_group_enter(group);
                        v67 = JPEGDeviceInterface_decodeJPEG2024(*((_DWORD *)v99 + v58), v62, &v96[v77]);
                        v68 = v67;
                        if (v67)
                        {
                          syslog(5, "JPEGDecompressSurfaceParallel : Picture decode failed: %08x", v67);
                          v98[v58] = v68;
                          dispatch_group_leave(group);
                        }
                        v59 = v77 + 3488;
                        v57 += 3488;
                        ++v88;
                        v56 = v81 + v83;
                        v55 -= v83;
                      }
                      while (!(v68 | v58++));
                      dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
                      v70 = v98[0];
                      if (!v98[0])
                      {
                        v70 = v98[1];
                        if (!v98[1])
                          v70 = v68;
                      }
                      v87 = v70;
                      goto LABEL_76;
                    }
                  }
LABEL_77:
                  v15 = (uint64_t)buffer;
                  goto LABEL_81;
                }
                notify = 0;
LABEL_76:
                v25 = 2;
                goto LABEL_77;
              }
              notify = 0;
LABEL_75:
              queue = 0;
              goto LABEL_76;
            }
          }
          else
          {
LABEL_73:
            IOSurfaceUnlock(v95, 1u, 0);
          }
          break;
        }
        notify = 0;
        group = 0;
        goto LABEL_75;
      }
    }
    else
    {
      v96 = 0;
    }
    notify = 0;
    group = 0;
    queue = 0;
    v25 = 2;
    goto LABEL_81;
  }
  if (a12 == 0)
    return CMPhotoParavirtualizedGuestJPEGHardwareDecode(a3, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a9, a10, (unint64_t *)a11);
  else
    return 4294950302;
}

uint64_t JPEGDeviceInterface_numberOfJPEGCores()
{
  if (!_jpegService)
    pthread_once(&jpegService_once, (void (*)(void))_initializeService);
  if (_numberOfJPEGCores <= 1)
    return 1;
  else
    return _numberOfJPEGCores;
}

uint64_t JPEGDeviceInterface_supportsRSTLogging()
{
  pthread_once(&JPEGDeviceInterface_supportsRSTLogging_once, (void (*)(void))_checkSupportsRSTLogging);
  return _supportsRSTLogging;
}

uint64_t JPEGDecompressSurfaceHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, uint64_t *a16, _QWORD *a17, _QWORD *a18)
{
  mach_port_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __IOSurface *v25;
  __IOSurface *v26;
  size_t v27;
  size_t v28;
  __IOSurface *v29;
  __IOSurface *v30;
  size_t AllocSize;
  IOSurfaceID ID;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  int v41;
  mach_port_t connection;
  _BYTE outputStruct[20];
  unsigned int v44;
  unsigned int v45;
  _DWORD inputStruct[4];
  _DWORD v47[870];

  v18 = MEMORY[0x1E0C80A78]();
  v40 = v19;
  v41 = v20;
  connection = v18;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  bzero(v47, 0xD90uLL);
  bzero(outputStruct, 0xDA0uLL);
  AllocSize = IOSurfaceGetAllocSize(v30);
  inputStruct[0] = IOSurfaceGetID(v30);
  ID = IOSurfaceGetID(v26);
  v47[1] = v24;
  v47[2] = v22;
  if (AllocSize >= v28)
    v33 = v28;
  else
    v33 = AllocSize;
  if (!v28)
    v33 = AllocSize;
  inputStruct[2] = ID;
  inputStruct[1] = v33;
  inputStruct[3] = IOSurfaceGetAllocSize(v26);
  v47[4] = a10;
  v47[14] = a11;
  v47[7] = v41;
  v47[15] = a13;
  v47[16] = a15;
  if (a16)
  {
    v35 = *a16;
    v34 = a16[1];
    v36 = a16[2];
    if (*a16 || v34 || v36 != v40 || a16[3] != a9)
    {
      v47[19] = 1;
      v47[20] = v35;
      v47[21] = v34;
      v47[22] = v36;
      v47[23] = a16[3];
      v47[17] = v40;
      v47[18] = a9;
    }
  }
  v37 = JPEGDeviceInterface_decodeJPEG2024(connection, inputStruct, outputStruct);
  v38 = v37;
  if (a17)
    *a17 = v44;
  if (a18)
    *a18 = v45;
  if ((_DWORD)v37)
    syslog(5, "JPEGDecompressSurface : Picture decode failed: %08x", v37);
  return v38;
}

uint64_t _openDriverConnection()
{
  uint64_t result;
  io_connect_t connect;

  connect = 0;
  LODWORD(result) = _jpegService;
  if (_jpegService
    || (pthread_once(&jpegService_once, (void (*)(void))_initializeService),
        result = _jpegService,
        _jpegService))
  {
    if (IOServiceOpen(result, *MEMORY[0x1E0C83DA0], 0, &connect))
      return 0;
    else
      return connect;
  }
  return result;
}

uint64_t JPEGDeviceInterface_closeDriverConnection(uint64_t connect)
{
  if ((_DWORD)connect)
    return IOServiceClose(connect);
  return connect;
}

uint64_t CMPhotoApplyCropCMPhotoRectToRect(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  v2 = a1[2];
  v3 = v2 > *a2;
  v4 = v2 - *a2;
  if (!v3)
    return 4294950193;
  v5 = a2[1];
  v6 = a1[3];
  if (v6 <= v5 || a2[2] > v4 || a2[3] > v6 - v5)
    return 4294950193;
  v7 = 0;
  v8 = a1[1] + v5;
  *a1 += *a2;
  a1[1] = v8;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  return v7;
}

uint64_t RegisterCMPhotoDecompressionSession()
{
  uint64_t result;

  sCMPhotoDecompressionSessionClass = 0;
  unk_1ECEF2220 = "CMPhotoDecompressionSession";
  qword_1ECEF2228 = (uint64_t)CMPhotoDecompressionSessionClass_Init;
  unk_1ECEF2230 = 0;
  qword_1ECEF2238 = (uint64_t)CMPhotoDecompressionSessionClass_Finalize;
  unk_1ECEF2240 = 0;
  qword_1ECEF2248 = 0;
  unk_1ECEF2250 = CMPhotoDecompressionSessionClass_CopyFormattingDesc;
  qword_1ECEF2258 = (uint64_t)CMPhotoDecompressionSession_CopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionSessionTypeID = result;
  return result;
}

uint64_t CMPhotoDecompressionSessionDetachSurface(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (!a1)
    return 4294950306;
  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v5 = CMPhotoSurfacePoolDetachImageSurface(*(_QWORD *)(a1 + 272), a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t CMPhotoSurfacePoolDetachImageSurface(uint64_t a1, void *a2)
{
  return SurfacePool_DetachSurface(a1, a2, 1);
}

uint64_t SurfacePool_DetachSurface(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64x2_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const void *v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;

  v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    v5 = defaultSurfacePool;
  }
  if ((__CFString *)v5 != CFSTR("SurfacePoolOneShot"))
  {
    result = pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 312));
    if ((_DWORD)result)
      return result;
    v7 = 168;
    if (a3)
    {
      v8 = (int64x2_t *)(v5 + 168);
    }
    else
    {
      v7 = 24;
      v8 = (int64x2_t *)(v5 + 24);
    }
    v9 = *(_QWORD **)(v5 + v7);
    if (v9)
    {
      while ((void *)*v9 != a2)
      {
        v9 = (_QWORD *)v9[7];
        if (!v9)
          goto LABEL_26;
      }
      if (a2)
        CFRetain(a2);
      v10 = v9[7];
      v11 = (_QWORD *)v9[8];
      if (v10)
      {
        *(_QWORD *)(v10 + 64) = v11;
        v11 = (_QWORD *)v9[8];
      }
      else
      {
        v8->i64[1] = (uint64_t)v11;
      }
      *v11 = v10;
      v12 = v9[5];
      v13 = (_QWORD *)v9[6];
      if (v12)
      {
        *(_QWORD *)(v12 + 48) = v13;
        v13 = (_QWORD *)v9[6];
      }
      else
      {
        *(_QWORD *)(v9[4] + 8) = v13;
      }
      *v13 = v12;
      CMPhotoGetEncodeAccelerationModeOverride(*v9, CFSTR("CMPhoto dropped"));
      if (*v9)
        CFRelease((CFTypeRef)*v9);
      v14 = (const void *)v9[2];
      if (v14)
        CFRelease(v14);
      v15 = v8[7];
      v16.i64[0] = -1;
      v16.i64[1] = -1;
      v17.i64[1] = -1;
      v17.i64[0] = v9[1];
      v17.i64[0] = vsubq_s64(v15, v17).u64[0];
      v17.i64[1] = vaddq_s64(v15, v16).i64[1];
      v8[7] = v17;
      v18 = v9[4];
      --*(_QWORD *)(v18 + 24);
      ++*(_QWORD *)(v18 + 48);
      free(v9);
      IOSurfaceDecrementUseCount((IOSurfaceRef)a2);
      IOSurfaceRemoveValue((IOSurfaceRef)a2, (CFStringRef)*MEMORY[0x1E0CBC048]);
      CMPhotoGetEncodeAccelerationModeOverride(a2, CFSTR("CMPhoto detached"));
      if (a2)
        CFRelease(a2);
    }
LABEL_26:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 312));
  }
  return 0;
}

void _once_setDefaultPool()
{
  int v0;
  CFTypeRef v1;
  CFTypeRef cf;

  cf = 0;
  v0 = CMPhotoCodecSessionPoolCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (uint64_t *)&cf);
  v1 = cf;
  if (!v0)
  {
    while (!__ldxr((unint64_t *)&defaultPool))
    {
      if (!__stxr((unint64_t)v1, (unint64_t *)&defaultPool))
        return;
    }
    __clrex();
  }
  if (v1)
    CFRelease(v1);
}

void _once_CMPhotoSurfacePoolGetDefault()
{
  int v0;
  CFTypeRef v1;
  CFTypeRef cf;

  cf = 0;
  v0 = CMPhotoSurfacePoolCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (uint64_t *)&cf);
  v1 = cf;
  if (!v0)
  {
    while (!__ldxr((unint64_t *)&defaultSurfacePool))
    {
      if (!__stxr((unint64_t)v1, (unint64_t *)&defaultSurfacePool))
        return;
    }
    __clrex();
  }
  if (v1)
    CFRelease(v1);
}

uint64_t CMPhotoCodecSessionPoolCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  BOOL v12;
  int Int64IfPresent;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_semaphore_t v23;
  NSObject *v24;
  NSObject *v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  dispatch_time_t v32;
  int64_t v33;
  dispatch_time_t v34;
  uint64_t v35;
  _QWORD v37[5];
  uint64_t v38;

  pthread_once(&CMPhotoCodecSessionPoolGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCodecSessionPool);
  if (!a3)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v7 = Instance;
  v8 = 10000000000;
  if (a2)
  {
    v38 = 0;
    v9 = CMPhotoCFDictionaryGetInt64IfPresent(a2, CFSTR("IdleTimeoutMilliseconds"), &v38) != 0;
    v10 = v38 >= 0;
    v11 = 1000000 * v38;
    if (!v38)
      v11 = -1;
    v12 = v9 && v10;
    if (v9 && v10)
      v8 = v11;
    Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(a2, CFSTR("MaxSimultaneousCompressionSessions"), &v38);
    if (v38)
      v14 = v38;
    else
      v14 = -1;
    if (v38 <= -1 || Int64IfPresent == 0)
      v16 = 8;
    else
      v16 = v14;
    v17 = CMPhotoCFDictionaryGetInt64IfPresent(a2, CFSTR("MaxSimultaneousDecompressionSessions"), &v38);
    if (v38)
      v18 = v38;
    else
      v18 = -1;
    if (v38 <= -1 || v17 == 0)
      v20 = 16;
    else
      v20 = v18;
  }
  else
  {
    v12 = 0;
    v20 = 16;
    v16 = 8;
  }
  v21 = FigSimpleMutexCreate();
  *(_QWORD *)(v7 + 24) = v21;
  if (!v21)
    goto LABEL_43;
  *(_QWORD *)(v7 + 32) = v16;
  *(_QWORD *)(v7 + 40) = v20;
  v22 = CodecSessionPool_Init(a1, (const __CFAllocator **)(v7 + 48));
  if ((_DWORD)v22 || (v22 = CodecSessionPool_Init(a1, (const __CFAllocator **)(v7 + 88)), (_DWORD)v22))
  {
    v35 = v22;
    goto LABEL_45;
  }
  v23 = dispatch_semaphore_create(0);
  *(_QWORD *)(v7 + 168) = v23;
  if (!v23
    || (v24 = dispatch_queue_create("com.apple.coremedia.photo.codecsessionpool-eventqueue", 0),
        (*(_QWORD *)(v7 + 144) = v24) == 0)
    || (v25 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v24), (*(_QWORD *)(v7 + 136) = v25) == 0))
  {
LABEL_43:
    v35 = 4294950305;
LABEL_45:
    CFRelease((CFTypeRef)v7);
    return v35;
  }
  dispatch_set_context(v25, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 136), (dispatch_function_t)CMPhotoCodecSessionPool_CleanupTimerHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v7 + 136), (dispatch_function_t)CMPhotoCodecSessionPool_CleanupTimerCanceled);
  if (v8 == -1)
  {
    v29 = -1;
    v32 = -1;
    v33 = 0;
  }
  else
  {
    v26 = +[CMPhotoProcessMonitor isForegroundApp](CMPhotoProcessMonitor, "isForegroundApp");
    v27 = v26 | +[CMPhotoProcessMonitor isCameraCaptured](CMPhotoProcessMonitor, "isCameraCaptured");
    v28 = v27 | +[CMPhotoProcessMonitor isDeferredMediad](CMPhotoProcessMonitor, "isDeferredMediad");
    if (v12)
      v28 = 1;
    if (v28)
      v29 = v8;
    else
      v29 = 1000000000;
    v30 = +[CMPhotoProcessMonitor getShared](CMPhotoProcessMonitor, "getShared");
    v31 = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v7 + 176) = v30;
    v37[0] = v31;
    v37[1] = 3221225472;
    v37[2] = __CMPhotoCodecSessionPoolCreate_block_invoke;
    v37[3] = &__block_descriptor_40_e5_v8__0l;
    v37[4] = v7;
    *(_QWORD *)(v7 + 184) = objc_msgSend(v37, "copy");
    v32 = 0;
    v33 = v29;
  }
  v34 = dispatch_time(v32, v33);
  dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 136), v34, v29, v29 >> 3);
  v35 = 0;
  *(_BYTE *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 152) = v29;
  *a3 = v7;
  return v35;
}

uint64_t CodecSessionPool_Init(const __CFAllocator *cf, const __CFAllocator **a2)
{
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;
  CFMutableArrayRef v7;

  v3 = cf;
  if (cf)
    cf = (const __CFAllocator *)CFRetain(cf);
  *a2 = cf;
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  a2[1] = Mutable;
  if (!Mutable)
    return 4294950305;
  v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a2[2] = v5;
  if (!v5)
    return 4294950305;
  v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], 0);
  a2[3] = v6;
  if (!v6)
    return 4294950305;
  v7 = CFArrayCreateMutable(v3, 0, 0);
  a2[4] = v7;
  if (v7)
    return 0;
  else
    return 4294950305;
}

uint64_t CMPhotoSurfacePoolCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  const __CFDictionary *Value;
  uint64_t v9;
  int IntIfPresent;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;
  unint64_t v15;
  CFMutableDictionaryRef Mutable;
  uint64_t v18;
  dispatch_semaphore_t v19;
  NSObject *v20;
  NSObject *v21;
  dispatch_time_t v22;
  int64_t v23;
  dispatch_time_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[5];
  int v30;

  pthread_once(&CMPhotoSurfacePoolGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoSurfacePoolClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v7 = Instance;
  v30 = 0;
  if (a2)
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("MemoryPoolAttributes"));
  else
    Value = 0;
  v9 = Pool_SetOptions(v7 + 24, Value, (uint64_t)&kMemoryPoolDefaults, 0);
  if ((_DWORD)v9)
    goto LABEL_40;
  IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(Value, CFSTR("IdleTimeout"), &v30);
  v11 = IntIfPresent;
  if (v30)
    v12 = 1000000 * v30;
  else
    v12 = -1;
  if (IntIfPresent)
    v13 = v12;
  else
    v13 = 1000000000;
  if (a2)
    v14 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("ImagePoolAttributes"));
  else
    v14 = 0;
  Pool_SetOptions(v7 + 168, v14, (uint64_t)&kImagePoolDefaults, 0x10uLL);
  if (CMPhotoCFDictionaryGetIntIfPresent(v14, CFSTR("IdleTimeout"), &v30))
  {
    v15 = v30 ? 1000000 * v30 : -1;
    if (v13 > v15 || v11 == 0)
      v13 = v15;
  }
  v9 = Pool_Create(a1, v7 + 24, 0);
  if ((_DWORD)v9)
  {
LABEL_40:
    v27 = v9;
    goto LABEL_41;
  }
  *(_DWORD *)(v7 + 184) = 1;
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 176) = v7 + 168;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], 0);
  *(_QWORD *)(v7 + 192) = Mutable;
  if (!Mutable)
    goto LABEL_39;
  v18 = FigSimpleMutexCreate();
  *(_QWORD *)(v7 + 312) = v18;
  if (!v18
    || (v19 = dispatch_semaphore_create(0), (*(_QWORD *)(v7 + 344) = v19) == 0)
    || (v20 = dispatch_queue_create("com.apple.coremedia.photo.surfacepool-eventqueue", 0),
        (*(_QWORD *)(v7 + 336) = v20) == 0)
    || (v21 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v20), (*(_QWORD *)(v7 + 328) = v21) == 0))
  {
LABEL_39:
    v27 = 4294950305;
LABEL_41:
    CFRelease((CFTypeRef)v7);
    return v27;
  }
  dispatch_set_context(v21, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 328), (dispatch_function_t)SurfacePool_CleanupTimerHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v7 + 328), (dispatch_function_t)SurfacePool_CleanupTimerCanceled);
  if (v13 == -1)
  {
    v22 = -1;
    v23 = 0;
  }
  else
  {
    v22 = 0;
    v23 = v13;
  }
  v24 = dispatch_time(v22, v23);
  dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 328), v24, v13, v13 >> 3);
  *(_BYTE *)(v7 + 320) = 1;
  *(_QWORD *)(v7 + 368) = v13;
  *(_QWORD *)(v7 + 376) = 10000000000;
  if (v13 != -1)
  {
    if (!+[CMPhotoProcessMonitor isForegroundApp](CMPhotoProcessMonitor, "isForegroundApp"))
      *(_QWORD *)(v7 + 376) = v13;
    v25 = +[CMPhotoProcessMonitor getShared](CMPhotoProcessMonitor, "getShared");
    v26 = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v7 + 352) = v25;
    v29[0] = v26;
    v29[1] = 3221225472;
    v29[2] = __CMPhotoSurfacePoolCreate_block_invoke;
    v29[3] = &__block_descriptor_40_e5_v8__0l;
    v29[4] = v7;
    *(_QWORD *)(v7 + 360) = objc_msgSend(v29, "copy");
  }
  v27 = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *a3 = v7;
  return v27;
}

uint64_t Pool_Create(const __CFAllocator *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;

  *(_DWORD *)(a2 + 16) = a3;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a2;
  if (a3 == 1)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(a2 + 24) = Mutable;
    if (Mutable)
      return 0;
    else
      return 4294950305;
  }
  else
  {
    if (a3)
      return 0;
    v4 = 88 * *(_QWORD *)(a2 + 40);
    v5 = CFAllocatorAllocate(a1, v4, 0);
    bzero(v5, v4);
    *(_QWORD *)(a2 + 24) = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 40);
      if (v6)
      {
        v7 = 0;
        v8 = *(uint64_t **)(a2 + 32);
        do
        {
          *(_QWORD *)(*(_QWORD *)(a2 + 24) + v7) = 0;
          v9 = *v8++;
          *(_QWORD *)(*(_QWORD *)(a2 + 24) + v7 + 8) = *(_QWORD *)(a2 + 24) + v7;
          *(_QWORD *)(*(_QWORD *)(a2 + 24) + v7 + 16) = v9;
          v7 += 88;
          --v6;
        }
        while (v6);
      }
      return 0;
    }
    return 4294950305;
  }
}

uint64_t Pool_SetOptions(uint64_t a1, const __CFDictionary *cf, uint64_t a3, unint64_t a4)
{
  const __CFDictionary *v7;
  CFTypeID v8;
  uint64_t v9;
  int IntIfPresent;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int Int64IfPresent;
  uint64_t v27;
  char v28;
  int BooleanIfPresent;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  const __CFData *Value;
  const __CFData *v35;
  CFTypeID v36;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t result;
  uint64_t v45;

  if (cf && (v7 = cf, v8 = CFGetTypeID(cf), v8 == CFDictionaryGetTypeID()))
  {
    v9 = *(_QWORD *)(a3 + 16);
    LODWORD(v45) = 0;
    IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("HighWaterBytes"), &v45);
    LODWORD(v11) = v45;
    if (!(_DWORD)v45)
      LODWORD(v11) = -1;
    v11 = (int)v11;
    if (!IntIfPresent)
      v11 = v9;
    *(_QWORD *)(a1 + 56) = v11;
    v12 = *(_QWORD *)(a3 + 24);
    LODWORD(v45) = 0;
    v13 = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("LowWaterBytes"), &v45);
    v14 = v45;
    if (!(_DWORD)v45)
      v14 = -1;
    if (v13)
      v12 = v14;
    *(_QWORD *)(a1 + 64) = v12;
    LODWORD(v45) = 0;
    v15 = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("MinBytes"), &v45);
    LODWORD(v16) = v45;
    if (!(_DWORD)v45)
      LODWORD(v16) = -1;
    v16 = (int)v16;
    if (!v15)
      v16 = v12;
    *(_QWORD *)(a1 + 72) = v16;
    v17 = *(_QWORD *)(a3 + 32);
    LODWORD(v45) = 0;
    v18 = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("HighWaterBufferCount"), &v45);
    LODWORD(v19) = v45;
    if (!(_DWORD)v45)
      LODWORD(v19) = -1;
    v19 = (int)v19;
    if (!v18)
      v19 = v17;
    *(_QWORD *)(a1 + 80) = v19;
    v20 = *(_QWORD *)(a3 + 40);
    LODWORD(v45) = 0;
    v21 = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("LowWaterBufferCount"), &v45);
    v22 = v45;
    if (!(_DWORD)v45)
      v22 = -1;
    if (v21)
      v20 = v22;
    *(_QWORD *)(a1 + 88) = v20;
    LODWORD(v45) = 0;
    v23 = CMPhotoCFDictionaryGetIntIfPresent(v7, CFSTR("MinCount"), &v45);
    LODWORD(v24) = v45;
    if (!(_DWORD)v45)
      LODWORD(v24) = -1;
    v24 = (int)v24;
    if (!v23)
      v24 = v20;
    *(_QWORD *)(a1 + 96) = v24;
    v25 = *(_QWORD *)(a3 + 56);
    v45 = 0;
    Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(v7, CFSTR("IOSurfaceAllocateFromSuperbufferID"), &v45);
    v27 = v45;
    if (!Int64IfPresent)
      v27 = v25;
    *(_QWORD *)(a1 + 136) = v27;
    v28 = *(_BYTE *)(a3 + 48);
    LOBYTE(v45) = 0;
    BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v7, CFSTR("IOSurfaceWiringAssertion"), &v45);
    v30 = 0;
    v31 = v45;
    if (!BooleanIfPresent)
      v31 = v28;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 16);
    v32 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a1 + 64) = v32;
    *(_QWORD *)(a1 + 72) = v32;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    v33 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a1 + 88) = v33;
    *(_QWORD *)(a1 + 96) = v33;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 56);
    v31 = *(_BYTE *)(a3 + 48);
    v30 = 1;
  }
  *(_BYTE *)(a1 + 104) = v31;
  *(_BYTE *)(a1 + 128) = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(v7, CFSTR("HighWaterBufferCount_HardLimit"), (_BYTE *)(a1 + 128));
  *(_BYTE *)(a1 + 129) = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(v7, CFSTR("HighWaterBytes_HardLimit"), (_BYTE *)(a1 + 129));
  if ((v30 & 1) != 0 || (Value = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("Sizes"))) == 0)
  {
    result = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v35 = Value;
    v36 = CFGetTypeID(Value);
    if (v36 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v35);
      Length = CFDataGetLength(v35);
      v39 = Length >> 2;
      v40 = malloc_type_malloc(8 * (Length >> 2), 0x100004000313F17uLL);
      *(_QWORD *)(a1 + 32) = v40;
      if (v40)
      {
        *(_QWORD *)(a1 + 40) = v39;
        *(_BYTE *)(a1 + 48) = 1;
        if (Length >= 4)
        {
          if (v39 <= 1)
            v41 = 1;
          else
            v41 = Length >> 2;
          do
          {
            v43 = *(_DWORD *)BytePtr;
            BytePtr += 4;
            v42 = v43;
            if (a4)
              v42 += a4 + ~((v42 - 1) % a4);
            *v40++ = v42;
            --v41;
          }
          while (v41);
        }
        return 0;
      }
      else
      {
        return 4294950305;
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t CMPhotoSurfacePoolFlushCaches(uint64_t result, int a2)
{
  uint64_t v3;
  _BOOL4 v4;
  void *v5;

  v3 = result;
  if (!result)
  {
    result = pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    v3 = defaultSurfacePool;
  }
  if ((__CFString *)v3 != CFSTR("SurfacePoolOneShot"))
  {
    result = pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 312));
    if (!(_DWORD)result)
    {
      v4 = a2 == 0;
      Pool_DropBuffers(v3 + 24, v4);
      Pool_DropBuffers(v3 + 168, v4);
      if (!*(_QWORD *)(v3 + 144) && !*(_QWORD *)(v3 + 288))
      {
        v5 = *(void **)(v3 + 352);
        if (v5)
        {
          objc_msgSend(v5, "unregisterBackgroundNotificationForContext:", v3);
          objc_msgSend(*(id *)(v3 + 352), "releaseAssertionForContext:", v3);
        }
      }
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 312));
    }
  }
  return result;
}

void Pool_DropBuffers(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    while (1)
    {
      v5 = (_QWORD *)v2[7];
      v6 = v5;
      if (!a2)
        goto LABEL_5;
      if (!IOSurfaceIsInUse((IOSurfaceRef)*v2))
        break;
LABEL_16:
      v2 = v5;
      if (!v5)
        return;
    }
    v6 = (_QWORD *)v2[7];
LABEL_5:
    v7 = (_QWORD *)v2[8];
    if (v6)
    {
      v6[8] = v7;
      v7 = (_QWORD *)v2[8];
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v7;
    }
    *v7 = v6;
    v8 = v2[5];
    v9 = (_QWORD *)v2[6];
    if (v8)
    {
      *(_QWORD *)(v8 + 48) = v9;
      v9 = (_QWORD *)v2[6];
    }
    else
    {
      *(_QWORD *)(v2[4] + 8) = v9;
    }
    *v9 = v8;
    CMPhotoGetEncodeAccelerationModeOverride(*v2, CFSTR("CMPhoto dropped"));
    if (*v2)
      CFRelease((CFTypeRef)*v2);
    v10 = (const void *)v2[2];
    if (v10)
      CFRelease(v10);
    v11 = *(int64x2_t *)(a1 + 112);
    v12.i64[1] = -1;
    v12.i64[0] = v2[1];
    v12.i64[0] = vsubq_s64(v11, v12).u64[0];
    v13.i64[0] = -1;
    v13.i64[1] = -1;
    v12.i64[1] = vaddq_s64(v11, v13).i64[1];
    *(int64x2_t *)(a1 + 112) = v12;
    v14 = v2[4];
    --*(_QWORD *)(v14 + 24);
    ++*(_QWORD *)(v14 + 48);
    free(v2);
    goto LABEL_16;
  }
}

void _once_CMPhotoScaleAndRotateSessionGetDefault()
{
  int v0;
  CFTypeRef v1;
  CFTypeRef cf;

  cf = 0;
  v0 = CMPhotoScaleAndRotateSessionCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (uint64_t *)&cf);
  v1 = cf;
  if (!v0)
  {
    while (!__ldxr((unint64_t *)&defaultSession))
    {
      if (!__stxr((unint64_t)v1, (unint64_t *)&defaultSession))
        return;
    }
    __clrex();
  }
  if (v1)
    CFRelease(v1);
}

uint64_t CMPhotoScaleAndRotateSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  int NumberOfScalerCores;
  uint64_t Instance;
  uint64_t v8;
  __CFString *Value;
  __CFString *v10;
  CFTypeID v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef Mutable;
  uint64_t result;

  if (!a3)
    return 4294950306;
  NumberOfScalerCores = FigGetNumberOfScalerCores();
  pthread_once(&CMPhotoScaleAndRotateSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoScaleAndRotateSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v8 = Instance;
  if (a2)
  {
    Value = (__CFString *)CFDictionaryGetValue(a2, CFSTR("SurfacePool"));
    if (Value)
    {
      v10 = Value;
      v11 = CFGetTypeID(Value);
      if (v11 == CMPhotoSurfacePoolGetTypeID() || v10 == CFSTR("SurfacePoolOneShot"))
        *(_QWORD *)(v8 + 16) = CFRetain(v10);
    }
  }
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = dispatch_semaphore_create(NumberOfScalerCores);
  v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *(_QWORD *)(v8 + 40) = CFArrayCreateMutable(a1, NumberOfScalerCores, MEMORY[0x1E0C9B378]);
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = dispatch_semaphore_create(NumberOfScalerCores);
  Mutable = CFArrayCreateMutable(a1, NumberOfScalerCores, v12);
  result = 0;
  *(_QWORD *)(v8 + 64) = Mutable;
  *a3 = v8;
  return result;
}

double CMPhotoCompressionSessionClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  *(_BYTE *)(a1 + 72) = 0;
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 32);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t _closeContainerAndCopyBacking(uint64_t a1, _DWORD *a2, size_t *a3, unint64_t a4)
{
  const __CFAllocator *v8;
  _DWORD *v9;
  int v10;
  CFMutableDataRef Mutable;
  uint64_t WritableWithCFMutableData;
  uint64_t v13;
  opaqueCMSampleBuffer *v14;
  const __CFArray *v15;
  CFDataRef *v16;
  opaqueCMSampleBuffer *v17;
  size_t v18;
  uint64_t v19;
  CFIndex i;
  const __CFArray *Count;
  CMSampleBufferRef *ValueAtIndex;
  const __CFData *v23;
  CFIndex Length;
  const __CFData *v25;
  CFIndex v26;
  const __CFData *v27;
  unint64_t v28;
  uint64_t MemorySurface;
  opaqueCMSampleBuffer *v30;
  const __CFAllocator *v31;
  _BOOL4 v32;
  __CFDictionary *MutableCopy;
  opaqueCMSampleBuffer *v34;
  uint64_t v35;
  const __CFData *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  uint64_t (*v40)(_QWORD, _QWORD, size_t *);
  const void *v41;
  const __CFArray *v42;
  const UInt8 *BytePtr;
  CFIndex v44;
  uint64_t (*v45)(_QWORD, CFIndex, _QWORD, const UInt8 *, _QWORD);
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v48;
  size_t SampleSize;
  size_t DataLength;
  size_t v51;
  int v52;
  CFMutableDictionaryRef theDict;
  CFTypeRef cf;
  CFDataRef theData;

  v8 = CFGetAllocator((CFTypeRef)a1);
  DataLength = 0;
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!(a4 | *(_QWORD *)(a1 + 264)))
  {
LABEL_111:
    v13 = 0;
    goto LABEL_112;
  }
  if (!*(_BYTE *)(a1 + 376) && !*(_QWORD *)(a1 + 280))
  {
    v15 = *(const __CFArray **)(a1 + 312);
    if ((!v15 || !CFArrayGetCount(v15)) && !*(_BYTE *)(a1 + 320) && !*(_QWORD *)(a1 + 288))
    {
      if (*(_BYTE *)(a1 + 304))
      {
        v16 = (CFDataRef *)(a1 + 248);
        if (!*(_QWORD *)(a1 + 248))
        {
          v10 = *(_DWORD *)(a1 + 240);
          if (v10 != 4)
          {
            if (v10 == 2)
            {
              DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a1 + 264));
              if (DataBuffer)
              {
                v48 = DataBuffer;
                DataLength = CMBlockBufferGetDataLength(DataBuffer);
                *v16 = (CFDataRef)CFRetain(v48);
                goto LABEL_105;
              }
              v13 = 4294950304;
              goto LABEL_112;
            }
            if (v10 == 1)
            {
              WritableWithCFMutableData = CMPhotoDataCreateFromSampleBuffer(v8, *(CMSampleBufferRef *)(a1 + 264), 0, (CFDataRef *)(a1 + 248));
              if (!(_DWORD)WritableWithCFMutableData)
              {
                DataLength = CFDataGetLength(*v16);
                goto LABEL_105;
              }
LABEL_13:
              v13 = WritableWithCFMutableData;
              goto LABEL_112;
            }
            goto LABEL_7;
          }
          theData = 0;
          WritableWithCFMutableData = CMPhotoSampleBufferCopyIOSurfaceBacking(*(_QWORD *)(a1 + 264), (_QWORD *)(a1 + 248), &theData, &DataLength);
          if ((_DWORD)WritableWithCFMutableData)
            goto LABEL_13;
          if (*v16)
          {
LABEL_105:
            if (a2)
              *a2 = *(_DWORD *)(a1 + 240);
            if (a3)
              *a3 = DataLength;
            if (a4)
            {
              v13 = 0;
              *(_QWORD *)a4 = *(_QWORD *)(a1 + 248);
              *(_QWORD *)(a1 + 248) = 0;
              goto LABEL_112;
            }
            goto LABEL_111;
          }
        }
      }
    }
  }
  v10 = *(_DWORD *)(a1 + 240);
LABEL_7:
  switch(v10)
  {
    case 1:
      if (!*(_QWORD *)(a1 + 248))
      {
        Mutable = CFDataCreateMutable(v8, 0);
        *(_QWORD *)(a1 + 248) = Mutable;
        if (!Mutable)
        {
          v13 = 4294950305;
          goto LABEL_112;
        }
      }
      WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (!(_DWORD)WritableWithCFMutableData)
        goto LABEL_57;
      goto LABEL_13;
    case 2:
      if (!*(_QWORD *)(a1 + 248))
      {
        WritableWithCFMutableData = CMBlockBufferCreateEmpty(v8, 0, 0, (CMBlockBufferRef *)(a1 + 248));
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_13;
      }
      WritableWithCFMutableData = CMByteStreamCreateWritableForBlockBuffer();
      if ((_DWORD)WritableWithCFMutableData)
        goto LABEL_13;
      goto LABEL_57;
    case 3:
      WritableWithCFMutableData = CMByteStreamCreateForFileURL();
      if ((_DWORD)WritableWithCFMutableData)
        goto LABEL_13;
      goto LABEL_57;
    case 4:
      if (*(_QWORD *)(a1 + 248))
        goto LABEL_56;
      v14 = *(opaqueCMSampleBuffer **)(a1 + 264);
      if (v14)
        SampleSize = CMSampleBufferGetSampleSize(v14, 0);
      else
        SampleSize = 0;
      v17 = *(opaqueCMSampleBuffer **)(a1 + 280);
      if (v17)
        v18 = CMSampleBufferGetSampleSize(v17, 0);
      else
        v18 = 0;
      v19 = 0;
      for (i = 0; ; ++i)
      {
        Count = *(const __CFArray **)(a1 + 312);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (i >= (uint64_t)Count)
          break;
        ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), i);
        v19 += CMSampleBufferGetSampleSize(*ValueAtIndex, 0);
      }
      v23 = *(const __CFData **)(a1 + 288);
      if (v23)
        Length = CFDataGetLength(v23);
      else
        Length = 0;
      v25 = *(const __CFData **)(a1 + 344);
      if (v25)
        v26 = CFDataGetLength(v25);
      else
        v26 = 0;
      v27 = *(const __CFData **)(a1 + 352);
      if (v27)
        v27 = (const __CFData *)CFDataGetLength(v27);
      if (*(_QWORD *)(a1 + 256) <= (unint64_t)v27 + v26 + SampleSize + v18 + v19 + Length + 0x10000)
        v28 = (unint64_t)v27 + v26 + SampleSize + v18 + v19 + Length + 0x10000;
      else
        v28 = *(_QWORD *)(a1 + 256);
      MemorySurface = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)CFSTR("SurfacePoolOneShot"), v28, 1, (IOSurfaceRef *)(a1 + 248));
      if ((_DWORD)MemorySurface)
      {
        v13 = MemorySurface;
        v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        goto LABEL_112;
      }
      IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1 + 248));
      v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_56:
      WritableWithCFMutableData = FigByteStreamCreateWritableWithIOSurface();
      if ((_DWORD)WritableWithCFMutableData)
        goto LABEL_13;
LABEL_57:
      cf = 0;
      theData = 0;
      theDict = 0;
      if (*(_BYTE *)(a1 + 376))
      {
        v30 = *(opaqueCMSampleBuffer **)(a1 + 272);
        v31 = v8;
        v32 = 0;
      }
      else
      {
        v30 = *(opaqueCMSampleBuffer **)(a1 + 264);
        v32 = *(_BYTE *)(a1 + 304) == 0;
        v31 = v8;
      }
      v13 = CMPhotoDataCreateFromSampleBuffer(v31, v30, v32, &theData);
      if ((_DWORD)v13)
      {
        MutableCopy = 0;
        goto LABEL_96;
      }
      if (*(_BYTE *)(a1 + 376)
        || *(_QWORD *)(a1 + 280)
        || *(_BYTE *)(a1 + 320)
        || *(_QWORD *)(a1 + 288)
        || (v42 = *(const __CFArray **)(a1 + 312)) != 0 && CFArrayGetCount(v42))
      {
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v13 = 4294950305;
          goto LABEL_96;
        }
        v34 = *(opaqueCMSampleBuffer **)(a1 + 280);
        if (v34)
        {
          v35 = CMPhotoDataCreateFromSampleBuffer(v8, v34, *(_BYTE *)(a1 + 305) == 0, (CFDataRef *)&cf);
          if ((_DWORD)v35)
          {
LABEL_115:
            v13 = v35;
            goto LABEL_96;
          }
        }
        v36 = *(const __CFData **)(a1 + 336);
        if (*(_OWORD *)(a1 + 328) == 0)
        {
          if (!*(_QWORD *)(a1 + 344) && !*(_QWORD *)(a1 + 352))
          {
            v41 = *(const void **)(a1 + 288);
            if (v41)
              CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC770], v41);
LABEL_82:
            v13 = CMPhotoJFIFUtilitiesMergeImageComponents(v8, 0, (int)theData, (int)cf, *(CFArrayRef *)(a1 + 312), MutableCopy);
            if ((_DWORD)v13)
              goto LABEL_96;
            goto LABEL_83;
          }
          v36 = 0;
        }
        v35 = CMPhotoCreateImagePropertiesFromData(v8, 0, 0, *(_QWORD *)(a1 + 328), v36, 0, *(const void **)(a1 + 288), 0, &theDict);
        if ((_DWORD)v35)
          goto LABEL_115;
        v37 = *(const void **)(a1 + 352);
        if (v37)
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CBCEB0], v37);
        v38 = *(const void **)(a1 + 344);
        if (v38)
          CFDictionarySetValue(theDict, CFSTR("iOS_Debug"), v38);
        if (!*(_QWORD *)(a1 + 328))
        {
          LODWORD(v51) = 1;
          v39 = (const void *)*MEMORY[0x1E0CBCFF0];
          CMPhotoCFDictionaryGetIntIfPresent(MutableCopy, (const void *)*MEMORY[0x1E0CBCFF0], &v51);
          v52 = 1;
          CMPhotoCFDictionaryGetIntIfPresent(theDict, v39, &v52);
          if ((_DWORD)v51 != 1 && v52 != (_DWORD)v51)
            CMPhotoCFDictionarySetInt(theDict, v39, v51);
        }
        v35 = CMPhotoMergeDictionaryEntries((uint64_t)v8, (uint64_t)MutableCopy, theDict, 1u);
        if ((_DWORD)v35)
          goto LABEL_115;
        goto LABEL_82;
      }
      BytePtr = CFDataGetBytePtr(theData);
      v44 = CFDataGetLength(theData);
      v45 = *(uint64_t (**)(_QWORD, CFIndex, _QWORD, const UInt8 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 16);
      if (!v45)
      {
        MutableCopy = 0;
        goto LABEL_95;
      }
      v13 = v45(0, v44, 0, BytePtr, 0);
      MutableCopy = 0;
      if ((_DWORD)v13)
        goto LABEL_96;
LABEL_83:
      v51 = 0;
      v40 = *(uint64_t (**)(_QWORD, _QWORD, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v40)
      {
LABEL_95:
        v13 = 4294954514;
        goto LABEL_96;
      }
      v35 = v40(0, 0, &v51);
      if ((_DWORD)v35)
        goto LABEL_115;
      if ((v51 & 0x8000000000000000) != 0)
      {
        v13 = 4294950190;
      }
      else
      {
        v13 = 0;
        DataLength = v51;
      }
LABEL_96:
      if (theData)
        CFRelease(theData);
      if (cf)
        CFRelease(cf);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (theDict)
        CFRelease(theDict);
      if (!(_DWORD)v13)
        goto LABEL_105;
LABEL_112:
      _releaseAllContainerResources(a1);
      if (*v9 == 1)
        kdebug_trace();
      return v13;
    default:
      WritableWithCFMutableData = FigSignalErrorAt();
      goto LABEL_13;
  }
}

uint64_t _closeContainerAndCopyBacking_0(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (uint64_t *)(a1 + 88);
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v10 = (uint64_t)_finishAsyncEncoding((_QWORD *)a1);
  if (!(_DWORD)v10)
  {
    v10 = _copyMainAndAuxImageSamplesIfNeeded(a1);
    if (!(_DWORD)v10)
      v10 = CMPhotoHEIFFileWriterCloseAndCopyBacking(*v8, a2, a3, a4);
  }
  v11 = v10;
  *(_BYTE *)(a1 + 104) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  if (*v9 == 1)
    kdebug_trace();
  return v11;
}

void _releaseAllContainerResources(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v3 = *(const void **)(a1 + 272);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v4 = *(const void **)(a1 + 280);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 280) = 0;
  }
  v5 = *(const void **)(a1 + 288);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 296) = 0;
  }
  *(_WORD *)(a1 + 304) = 0;
  _releaseAuxImages(a1 + 240);
  v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v8 = *(const void **)(a1 + 336);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v9 = *(const void **)(a1 + 344);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v10 = *(const void **)(a1 + 352);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 352) = 0;
  }
  v11 = *(const void **)(a1 + 360);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 360) = 0;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  v12 = *(const void **)(a1 + 248);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 248) = 0;
  }
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
}

void _releaseAuxImages(uint64_t a1)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void **ValueAtIndex;
  const void *v7;

  v1 = *(const __CFArray **)(a1 + 72);
  if (v1)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v1, i);
        CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
      }
    }
    v7 = *(const void **)(a1 + 72);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
}

void ___canvasItemDecodeCallback_block_invoke(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  __CVBuffer *v12;
  __CVBuffer *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  _QWORD *v21;
  const void *v22;
  const void *v23;
  _OWORD v24[2];
  _OWORD v25[8];
  uint64_t v26;

  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned __int8 *)(v4 + 49);
  v7 = *(_BYTE *)(v4 + 50);
  v8 = *(_BYTE *)(v4 + 51);
  v9 = *(_BYTE *)(v4 + 52);
  v10 = *(_BYTE *)(v4 + 48);
  v11 = *(unsigned int *)(v4 + 88);
  v12 = *(__CVBuffer **)(a1 + 56);
  LODWORD(v4) = *(_DWORD *)(v3 + 184);
  v13 = *(__CVBuffer **)v3;
  v14 = *(unsigned int *)(a1 + 64);
  v15 = *(_OWORD *)(v3 + 160);
  v25[6] = *(_OWORD *)(v3 + 144);
  v25[7] = v15;
  v26 = *(_QWORD *)(v3 + 176);
  v16 = *(_OWORD *)(v3 + 96);
  v25[2] = *(_OWORD *)(v3 + 80);
  v25[3] = v16;
  v17 = *(_OWORD *)(v3 + 128);
  v25[4] = *(_OWORD *)(v3 + 112);
  v25[5] = v17;
  v18 = *(_OWORD *)(v3 + 64);
  v25[0] = *(_OWORD *)(v3 + 48);
  v25[1] = v18;
  v19 = *(_OWORD *)(v3 + 24);
  v24[0] = *(_OWORD *)(v3 + 8);
  v24[1] = v19;
  v20 = _transferToCanvas(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)v25, v4, (unint64_t *)v24, v13, 0, v14);
  v21 = *(_QWORD **)(a1 + 48);
  v22 = (const void *)v21[26];
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 208) = 0;
    v21 = *(_QWORD **)(a1 + 48);
  }
  v23 = (const void *)v21[27];
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 216) = 0;
    v21 = *(_QWORD **)(a1 + 48);
  }
  _asyncCanvasDecodeFinished(*(_QWORD *)(a1 + 40), v21, v20, *(unsigned __int8 *)(a1 + 68));
  if (*v2 == 1)
    kdebug_trace();
}

uint64_t RegisterCMPhotoCodecSessionPool()
{
  uint64_t result;

  sCMPhotoCodecSessionPoolClass = 0;
  *(_QWORD *)algn_1ECEF2138 = "CMPhotoCodecSessionPool";
  qword_1ECEF2140 = (uint64_t)CMPhotoCodecSessionPoolClass_Init;
  unk_1ECEF2148 = 0;
  qword_1ECEF2150 = (uint64_t)CMPhotoCodecSessionPoolClass_Finalize;
  unk_1ECEF2158 = 0;
  qword_1ECEF2160 = 0;
  unk_1ECEF2168 = CMPhotoCodecSessionPoolClass_CopyFormattingDesc;
  qword_1ECEF2170 = (uint64_t)CMPhotoCodecSessionPool_CopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sCMPhotoCodecSessionPoolTypeID = result;
  return result;
}

uint64_t ___getAvailableFreeMemory_block_invoke()
{
  uint64_t result;

  getpid();
  result = sandbox_check();
  _getAvailableFreeMemory_sSyscallAllowed = (_DWORD)result == 0;
  return result;
}

vImage_Error CMPhotoCreateImageFromAlphaAndMainBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, int a4, int a5, int a6, CGImageRef *a7)
{
  double PixelBufferCLAPAsRect;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  signed int PixelFormatType;
  uint64_t v29;
  double v30;
  double v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  vImagePixelCount v37;
  vImagePixelCount v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t WrappedPixelBufferForType;
  unint64_t v46;
  double v47;
  unint64_t v48;
  double v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  vImage_Error v56;
  int v57;
  uint64_t PixelBufferDataPointers;
  CGImageRef *v59;
  vImage_Error v60;
  int v61;
  uint64_t i;
  char *v63;
  _BYTE *v64;
  vImagePixelCount v65;
  char v66;
  uint64_t v67;
  char *data;
  uint64_t v69;
  void *v70;
  char *v71;
  __int16 *v72;
  char *v73;
  vImagePixelCount v74;
  __int16 v75;
  __CVBuffer *v77;
  CVPixelBufferLockFlags v78;
  int v79;
  int v80;
  uint64_t v81;
  vImage_Buffer dest;
  vImage_Buffer newSrc;
  vImage_Buffer origSrc;
  CFTypeRef cf;

  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = CMPhotoGetPixelBufferCLAPAsRect(a2);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  cf = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v29 = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType > 1279340599)
  {
    if (PixelFormatType != 1815491698 && PixelFormatType != 1279340854)
    {
      v32 = 1279340600;
LABEL_8:
      if (PixelFormatType != v32)
      {
LABEL_62:
        WrappedPixelBufferForType = FigSignalErrorAt();
        goto LABEL_73;
      }
      goto LABEL_9;
    }
  }
  else
  {
    if (PixelFormatType == 843264056)
    {
LABEL_9:
      v33 = 1278226488;
      goto LABEL_11;
    }
    if (PixelFormatType != 843264310)
    {
      v32 = 1111970369;
      goto LABEL_8;
    }
  }
  v33 = 1278226742;
LABEL_11:
  if ((_DWORD)v29 != v33)
    goto LABEL_62;
  v80 = a3;
  v34 = a5;
  v79 = a6;
  v35 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  v36 = vcvtad_u64_f64(v16);
  v37 = vcvtad_u64_f64(v18);
  v38 = vcvtad_u64_f64(v20);
  v39 = vcvtad_u64_f64(v23);
  v40 = vcvtad_u64_f64(v25);
  v41 = vcvtad_u64_f64(v27);
  if (v35 == vcvtad_u64_f64(v21) && v36 == v39 && v37 == v40 && v38 == v41)
  {
    v52 = v38;
    v50 = v37;
    v48 = v36;
    v46 = v35;
  }
  else
  {
    WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSize(0, a2, 1, 1, v29, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)v37, (double)v38, v30, v31, 0, 1u, (__CVBuffer **)&cf);
    if ((_DWORD)WrappedPixelBufferForType)
      goto LABEL_73;
    a2 = (__CVBuffer *)cf;
    v46 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)cf));
    v48 = vcvtad_u64_f64(v47);
    v50 = vcvtad_u64_f64(v49);
    v52 = vcvtad_u64_f64(v51);
  }
  if (v46 != v35 || v48 != v36 || v50 != v37 || v52 != v38)
    goto LABEL_62;
  WrappedPixelBufferForType = CVPixelBufferLockBaseAddress(a1, 0);
  if ((_DWORD)WrappedPixelBufferForType)
  {
LABEL_73:
    v60 = WrappedPixelBufferForType;
    goto LABEL_74;
  }
  v56 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if ((_DWORD)v56)
  {
    v60 = v56;
    v77 = a1;
    v78 = 0;
    goto LABEL_80;
  }
  if (PixelFormatType > 1279340599)
  {
    if (PixelFormatType != 1279340600 && PixelFormatType != 1279340854)
    {
      v57 = 1815491698;
LABEL_45:
      if (PixelFormatType == v57)
      {
        origSrc.data = 0;
        origSrc.height = v38;
        origSrc.width = v37;
        origSrc.rowBytes = 0;
        PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v35, v36, 0, (uint64_t)&origSrc, (uint64_t)&origSrc.rowBytes, 0);
        if (!(_DWORD)PixelBufferDataPointers)
        {
          newSrc.data = 0;
          newSrc.height = v38;
          newSrc.width = v37;
          newSrc.rowBytes = 0;
          PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, v35, v36, 0, (uint64_t)&newSrc, (uint64_t)&newSrc.rowBytes, 0);
          if (!(_DWORD)PixelBufferDataPointers)
          {
            dest = origSrc;
            v59 = a7;
            if (PixelFormatType == 1111970369)
            {
              v60 = vImageOverwriteChannels_ARGB8888(&newSrc, &origSrc, &dest, 1u, 0);
              v61 = v80;
              if ((_DWORD)v60)
                goto LABEL_79;
            }
            else
            {
              v60 = vImageOverwriteChannels_ARGB16U();
              v61 = v80;
              if ((_DWORD)v60)
                goto LABEL_79;
            }
LABEL_70:
            CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 0, v61);
            CVPixelBufferUnlockBaseAddress(a1, 0);
            CVPixelBufferUnlockBaseAddress(a2, 1uLL);
            if (!a4
              || (WrappedPixelBufferForType = CMPhotoPixelBufferPremultiplyWithAlpha(a1),
                  !(_DWORD)WrappedPixelBufferForType))
            {
              WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, v34, v79, v59);
            }
            goto LABEL_73;
          }
        }
      }
      else
      {
        PixelBufferDataPointers = FigSignalErrorAt();
      }
      goto LABEL_78;
    }
  }
  else if (PixelFormatType != 843264056 && PixelFormatType != 843264310)
  {
    v57 = 1111970369;
    goto LABEL_45;
  }
  origSrc.data = 0;
  newSrc.data = 0;
  PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v35, v36, 0, (uint64_t)&newSrc, (uint64_t)&origSrc, 0);
  if (!(_DWORD)PixelBufferDataPointers)
  {
    v81 = 0;
    dest.data = 0;
    PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, v35, v36, 0, (uint64_t)&v81, (uint64_t)&dest, 0);
    if (!(_DWORD)PixelBufferDataPointers)
    {
      if (PixelFormatType == 843264056 || PixelFormatType == 1279340600)
      {
        if (v38)
        {
          for (i = 0; i != v38; ++i)
          {
            if (v37)
            {
              v63 = (char *)(v81 + (uint64_t)dest.data * i);
              v64 = (char *)newSrc.data + (uint64_t)origSrc.data * i + 1;
              v65 = v37;
              do
              {
                v66 = *v63++;
                *v64 = v66;
                v64 += 2;
                --v65;
              }
              while (v65);
            }
          }
        }
      }
      else if (v38)
      {
        v67 = 0;
        data = (char *)origSrc.data;
        v69 = v81;
        v70 = dest.data;
        v71 = (char *)newSrc.data + 2;
        do
        {
          if (v37)
          {
            v72 = (__int16 *)(v69 + (_QWORD)v70 * v67);
            v73 = v71;
            v74 = v37;
            do
            {
              v75 = *v72++;
              *(_WORD *)v73 = v75;
              v73 += 4;
              --v74;
            }
            while (v74);
          }
          ++v67;
          v71 = &data[(_QWORD)v71];
        }
        while (v67 != v38);
      }
      v59 = a7;
      v61 = v80;
      goto LABEL_70;
    }
  }
LABEL_78:
  v60 = PixelBufferDataPointers;
LABEL_79:
  CVPixelBufferUnlockBaseAddress(a1, 0);
  v77 = a2;
  v78 = 1;
LABEL_80:
  CVPixelBufferUnlockBaseAddress(v77, v78);
LABEL_74:
  if (cf)
    CFRelease(cf);
  return v60;
}

uint64_t CMPhotoGetPixelBufferDataPointers(__CVBuffer *a1, unint64_t a2, unint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  signed int PixelFormatType;
  size_t PlaneCount;
  uint64_t v16;
  double PixelBufferSize;
  double v18;
  unint64_t v19;
  uint64_t BytesPerPixelForPixelFormat;
  size_t v22;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  size_t HeightOfPlane;
  size_t v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  size_t v32;
  size_t v33;
  size_t v34;
  uint64_t result;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  size_t extraRowsOnBottom;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CMPhotoGetPixelFormatCompressionType(PixelFormatType))
    return 4294950306;
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount <= 1)
    v16 = 1;
  else
    v16 = PlaneCount;
  if (PlaneCount >= 2 && v16 != 2)
    return 4294950301;
  PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  v19 = vcvtad_u64_f64(v18);
  if (a2 >= vcvtad_u64_f64(PixelBufferSize) || a3 >= v19)
    return 4294950306;
  v36 = a4;
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(a1, 0, 0, 0, &extraRowsOnBottom);
  v22 = 0;
  v41 = a3;
  v39 = 2 * a2;
  v40 = (a3 + 1) >> 1;
  v37 = a2;
  v38 = BytesPerPixelForPixelFormat * a2;
  do
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v22);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v22);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v22);
    v26 = extraRowsOnBottom + HeightOfPlane;
    if (!v22)
    {
      v28 = v41;
      v29 = v38;
LABEL_55:
      v32 = v29 + BytesPerRowOfPlane * v28;
      goto LABEL_56;
    }
    v27 = HeightOfPlane;
    if (PixelFormatType <= 1937126451)
    {
      if (PixelFormatType > 1751527983)
      {
        if (PixelFormatType > 1936077875)
        {
          if (PixelFormatType == 1936077876)
            goto LABEL_54;
          if (PixelFormatType != 1937125936)
          {
            v30 = 1937125938;
LABEL_46:
            if (PixelFormatType != v30)
              return 4294950301;
LABEL_47:
            v32 = v39 + BytesPerRowOfPlane * v40;
            goto LABEL_56;
          }
        }
        else if (PixelFormatType != 1751527984 && PixelFormatType != 1936077360)
        {
          v30 = 1936077362;
          goto LABEL_46;
        }
      }
      else
      {
        if (PixelFormatType > 875704949)
        {
          if (PixelFormatType == 875704950)
            goto LABEL_47;
          if (PixelFormatType == 875836518)
            goto LABEL_54;
          v31 = 875836534;
LABEL_53:
          if (PixelFormatType != v31)
            return 4294950301;
LABEL_54:
          v28 = v41;
          v29 = v39;
          goto LABEL_55;
        }
        if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
        {
          v30 = 875704934;
          goto LABEL_46;
        }
      }
    }
    else if (PixelFormatType <= 1953903667)
    {
      if (PixelFormatType > 1952855091)
      {
        if (PixelFormatType == 1952855092)
          goto LABEL_54;
        if (PixelFormatType != 1953903152)
        {
          v30 = 1953903154;
          goto LABEL_46;
        }
      }
      else
      {
        if (PixelFormatType == 1937126452)
          goto LABEL_54;
        if (PixelFormatType != 1952854576)
        {
          v30 = 1952854578;
          goto LABEL_46;
        }
      }
    }
    else
    {
      if (PixelFormatType > 2016687155)
      {
        if (PixelFormatType <= 2019963441)
        {
          if (PixelFormatType == 2016687156)
            goto LABEL_54;
          if (PixelFormatType != 2019963440)
            return 4294950301;
          goto LABEL_48;
        }
        if (PixelFormatType == 2019963442)
          goto LABEL_47;
        v31 = 2019963956;
        goto LABEL_53;
      }
      if (PixelFormatType == 1953903668)
        goto LABEL_54;
      if (PixelFormatType != 2016686640)
      {
        v30 = 2016686642;
        goto LABEL_46;
      }
    }
LABEL_48:
    v33 = CVPixelBufferGetHeightOfPlane(a1, 0);
    v32 = v37 + BytesPerRowOfPlane * v40;
    v34 = v33 + extraRowsOnBottom + 1;
    if (v27 <= v34 >> 1)
      v26 = v34 >> 1;
    else
      v26 = v27;
LABEL_56:
    if (a5)
      *(_QWORD *)(a5 + 8 * v22) = &BaseAddressOfPlane[v32];
    if (a6)
      *(_QWORD *)(a6 + 8 * v22) = BytesPerRowOfPlane;
    if (a7)
      *(_QWORD *)(a7 + 8 * v22) = v26 * BytesPerRowOfPlane - v32;
    ++v22;
  }
  while (v16 != v22);
  result = 0;
  if (v36)
    *v36 = v16;
  return result;
}

void CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(__CVBuffer *a1, int a2, int a3)
{
  CFTypeRef *v5;
  const __CFString *v6;
  CFTypeRef *v7;

  if (a1)
  {
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!a2)
      v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CA8], *v5, kCVAttachmentMode_ShouldPropagate);
    v6 = (const __CFString *)*MEMORY[0x1E0CA8CB0];
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CB0]);
    if (a3 != 2)
    {
      v7 = (CFTypeRef *)MEMORY[0x1E0CA8CC0];
      if (a3)
        v7 = (CFTypeRef *)MEMORY[0x1E0CA8CB8];
      CVBufferSetAttachment(a1, v6, *v7, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t CMPhotoJPEGQualityControllerParse(int a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, CFTypeRef cf, int a7, _OWORD *a8)
{
  CFTypeRef v15;
  uint64_t v16;
  CFTypeID v17;
  _OWORD *v18;
  _OWORD *v19;
  const void *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  BOOL v28;
  CFTypeID v29;
  float v30;
  CFTypeID v31;
  float v32;
  double v33;
  CFTypeID v35;
  const __CFDictionary *Value;
  const __CFDictionary *v37;
  CFTypeID v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  CFTypeID v42;
  CFIndex Count;
  CFIndex v44;
  _OWORD *v45;
  _OWORD *v46;
  unint64_t v47;
  const void *ValueAtIndex;
  const void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t valuePtr;
  float v62;

  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  if (a8)
  {
    *(_QWORD *)&v54 = a2;
    *((_QWORD *)&v54 + 1) = a3;
    *(_QWORD *)&v55 = __PAIR64__(a5, a4);
    if (cf)
      v15 = CFRetain(cf);
    else
      v15 = 0;
    *((_QWORD *)&v57 + 1) = v15;
    v16 = 4294950196;
    switch(a5)
    {
      case 2u:
        if (!v15)
          goto LABEL_64;
        v17 = CFGetTypeID(v15);
        if (v17 == CFDataGetTypeID())
        {
          v18 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
          *((_QWORD *)&v59 + 1) = v18;
          if (v18)
          {
            v19 = v18;
            *((_QWORD *)&v58 + 1) = v18;
            *(_QWORD *)&v59 = v18;
            *(_QWORD *)&v58 = v18;
            v20 = v15;
            v21 = v19;
            goto LABEL_10;
          }
          goto LABEL_72;
        }
        v42 = CFGetTypeID(v15);
        if (v42 == CFArrayGetTypeID()
          && (Count = CFArrayGetCount((CFArrayRef)v15), (Count & 0xFFFFFFFFFFFFFFFELL) == 2))
        {
          v44 = Count;
          v45 = malloc_type_malloc(Count << 6, 0x1000040FA0F61DDuLL);
          *((_QWORD *)&v59 + 1) = v45;
          if (!v45)
          {
LABEL_72:
            v16 = 4294950305;
            break;
          }
          v19 = v45;
          v46 = v45 + 4;
          *(_QWORD *)&v58 = v45;
          *((_QWORD *)&v58 + 1) = v45 + 4;
          v47 = (unint64_t)&v45[4 * (unint64_t)(v44 == 3) + 4];
          *(_QWORD *)&v59 = v47;
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v15, 0);
          v22 = _copyQTableFromData(ValueAtIndex, v19);
          if (!(_DWORD)v22)
          {
            v49 = CFArrayGetValueAtIndex((CFArrayRef)v15, 1);
            v22 = _copyQTableFromData(v49, v46);
            if (!(_DWORD)v22)
            {
              if (v44 != 3)
                goto LABEL_11;
              v20 = CFArrayGetValueAtIndex((CFArrayRef)v15, 2);
              v21 = (_OWORD *)v47;
LABEL_10:
              v22 = _copyQTableFromData(v20, v21);
              if (!(_DWORD)v22)
              {
LABEL_11:
                v23 = 0;
                v24 = 0.8944;
                do
                {
                  if (*((_BYTE *)v19 + v23) != 1)
                    goto LABEL_15;
                  ++v23;
                }
                while (v23 != 64);
                v24 = 0.9944;
LABEL_15:
                *(float *)&v57 = v24;
                v25 = 2 * a3 * a2;
                v26 = v25 / 3;
                v27 = v24;
                v28 = a4 != 1 && v27 < 0.9944;
                goto LABEL_33;
              }
            }
          }
        }
        else
        {
LABEL_64:
          v22 = FigSignalErrorAt();
          if (!(_DWORD)v22)
            goto LABEL_65;
        }
        v16 = v22;
        break;
      case 3u:
        if (!v15)
          goto LABEL_54;
        v29 = CFGetTypeID(v15);
        if (v29 != CFDictionaryGetTypeID())
          goto LABEL_54;
        LODWORD(valuePtr) = 0;
        if (!CMPhotoCFDictionaryGetFloatIfPresent((CFDictionaryRef)v15, CFSTR("QualityValue"), &valuePtr))
          goto LABEL_54;
        v30 = *(float *)&valuePtr;
        goto LABEL_53;
      case 4u:
        if (!v15
          || (v31 = CFGetTypeID(v15), v31 != CFNumberGetTypeID())
          || CFNumberIsFloatType((CFNumberRef)v15)
          || (LODWORD(valuePtr) = 0, !CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, &valuePtr))
          || valuePtr >= 6)
        {
LABEL_54:
          v41 = FigSignalErrorAt();
          goto LABEL_55;
        }
        v32 = flt_1A8295310[(int)valuePtr];
        *(_QWORD *)&v58 = *(&off_1E53F5640 + (int)valuePtr);
        *((_QWORD *)&v58 + 1) = v58 + 64;
        v59 = (unint64_t)(v58 + 64);
        *(float *)&v57 = v32;
        v25 = 2 * a3 * a2;
        v26 = v25 / 3;
        v33 = v32;
        v28 = a4 != 1 && v33 <= 0.9 || v33 < 0.9944;
LABEL_33:
        if (v28)
          v25 = v26;
        *(_QWORD *)&v56 = v25;
        BYTE8(v55) = 0;
        goto LABEL_65;
      case 5u:
        BYTE8(v55) = 1;
        *(_QWORD *)&v56 = 0;
        goto LABEL_65;
      case 0xAu:
        v62 = 0.85;
        valuePtr = 0;
        v60 = 0;
        if (!cf)
          goto LABEL_67;
        v35 = CFGetTypeID(cf);
        if (v35 != CFDictionaryGetTypeID()
          || !CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, CFSTR("ByteBudget"), &v60))
        {
          goto LABEL_67;
        }
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ByteBudgetHint"));
        if (!Value)
        {
          v39 = v60;
          v30 = 0.85;
LABEL_52:
          *((_QWORD *)&v56 + 1) = v39;
          goto LABEL_53;
        }
        v37 = Value;
        v38 = CFGetTypeID(Value);
        if (v38 == CFDictionaryGetTypeID())
        {
          if (CMPhotoCFDictionaryGetSizeIfPresent(v37, CFSTR("ByteBudgetHint_Size"), &valuePtr))
          {
            if (CMPhotoCFDictionaryGetFloatIfPresent(v37, CFSTR("ByteBudgetHint_Quality"), &v62))
            {
              v30 = v62;
              if (v62 > 0.0 && v62 <= 1.0)
              {
                v39 = v60;
                if (v60 >= valuePtr)
                {
                  if (a7 == 2)
                    v40 = &_relativeSizeHW;
                  else
                    v40 = &_relativeSizeSW;
                  v30 = _estimateNewQuality(valuePtr, v60, (uint64_t)v40, 0, v62);
                }
                goto LABEL_52;
              }
            }
          }
        }
LABEL_67:
        v16 = FigSignalErrorAt();
        v30 = v62;
        *((_QWORD *)&v56 + 1) = v60;
        if ((_DWORD)v16)
          break;
LABEL_53:
        v41 = _parseQualityParameters_QValue_float((uint64_t)&v54, v30);
LABEL_55:
        v16 = v41;
        if (!(_DWORD)v41)
        {
LABEL_65:
          v16 = 0;
          v50 = v57;
          a8[2] = v56;
          a8[3] = v50;
          v51 = v59;
          a8[4] = v58;
          a8[5] = v51;
          v52 = v55;
          *a8 = v54;
          a8[1] = v52;
          v54 = 0u;
          v55 = 0u;
          v56 = 0u;
          v57 = 0u;
          v58 = 0u;
          v59 = 0u;
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v16 = 4294950306;
  }
  CMPhotoJPEGQualitySettingsReleaseStorage(&v54);
  return v16;
}

uint64_t _parseQualityParameters_QValue_float(uint64_t a1, float a2)
{
  uint64_t result;
  unint64_t v5;
  double v6;

  result = _copyJPEGQTablesForQValue(a1 + 64, a2);
  if (!(_DWORD)result)
  {
    *(float *)(a1 + 48) = a2;
    v5 = 2 * *(_QWORD *)(a1 + 8) * *(_QWORD *)a1;
    v6 = a2;
    if (*(_DWORD *)(a1 + 16) != 1 && v6 <= 0.9 || v6 < 0.9944)
      v5 /= 3uLL;
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t _copyJPEGQTablesForQValue(uint64_t a1, float a2)
{
  __n128 *v5;

  if (a2 < 0.0 || a2 > 1.0)
    return FigSignalErrorAt();
  v5 = (__n128 *)malloc_type_malloc(0x80uLL, 0x1000040FA0F61DDuLL);
  *(_QWORD *)(a1 + 24) = v5;
  if (!v5)
    return 4294950305;
  *(_QWORD *)(a1 + 8) = v5 + 4;
  *(_QWORD *)(a1 + 16) = v5 + 4;
  *(_QWORD *)a1 = v5;
  _copyQTableForQValue(0, v5, a2);
  _copyQTableForQValue(1u, *(__n128 **)(a1 + 8), a2);
  return 0;
}

float32x4_t _copyQTableForQValue(unsigned int a1, __n128 *a2, float a3)
{
  double v3;
  uint64_t v4;
  double v5;
  float32x4_t result;
  float v7;
  float32x4_t v8;
  uint8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;

  v3 = a3;
  if (v3 >= 0.9944)
  {
    result.i64[0] = 0x101010101010101;
    result.i64[1] = 0x101010101010101;
    a2[2] = (__n128)result;
    a2[3] = (__n128)result;
    *a2 = (__n128)result;
    a2[1] = (__n128)result;
  }
  else
  {
    v4 = 0;
    v5 = v3 * 32.0 * v3 * v3 + 1.0;
    result = (float32x4_t)vdupq_n_s32(0x42C80000u);
    v7 = 200.0 / v5;
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v9.i64[0] = 0x101010101010101;
    v9.i64[1] = 0x101010101010101;
    do
    {
      v10 = _QTable_ImageIOBase[4 * (unint64_t)a1 + v4];
      v11 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      v12 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
      v13 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      *(int16x4_t *)v14.i8 = vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v12)), v7), result), v8)));
      v14.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v11)), v7), result), v8)));
      *(int16x4_t *)v10.i8 = vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL))), v7), result), v8)));
      v10.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v13)), v7), result), v8)));
      a2[v4++] = (__n128)vmaxq_u8((uint8x16_t)vuzp1q_s8(v14, v10), v9);
    }
    while (v4 != 4);
  }
  return result;
}

double _estimateNewQuality(unint64_t a1, unint64_t a2, uint64_t a3, _BYTE *a4, double result)
{
  uint64_t v5;
  float v6;
  double v7;
  float v8;
  unint64_t v9;
  _BOOL4 v10;

  v5 = 0;
  v6 = result;
  v7 = v6;
  do
  {
    if (_jpegQualityLevels[v5] > v7)
      break;
    ++v5;
  }
  while (v5 != 20);
  v8 = (float)a1 / (float)a2;
  if (v8 < 1.0 && v8 > 0.92)
  {
    LODWORD(v9) = v5 - 1;
    v10 = 1;
    if (!a4)
      goto LABEL_16;
LABEL_15:
    *a4 = v10;
    goto LABEL_16;
  }
  v9 = 19;
  while ((float)((float)((float)a1 / *(float *)(a3 + 4 * (int)v5)) * *(float *)(a3 + 4 * v9)) >= (float)((float)a2 * 0.92))
  {
    if (v9-- <= 1)
    {
      LODWORD(v9) = 0;
      break;
    }
  }
  if ((_DWORD)v5 == 20)
    LODWORD(v5) = 19;
  v10 = v9 != v5;
  if (a4)
    goto LABEL_15;
LABEL_16:
  if (v10)
  {
    if ((int)v9 < 1)
    {
      return 0.01;
    }
    else
    {
      result = 1.0;
      if (v9 <= 0x13)
        return (_jpegQualityLevels[(v9 - 1)] + _jpegQualityLevels[v9]) * 0.5;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetFloatIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberFloatType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t result;
  uint64_t (**v7)();
  uint64_t (*v8)();
  int v9;

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    v4 = *(_QWORD *)(a1 + 80);
    if (!v4)
      return 4294950195;
    v5 = *(uint64_t (**)(uint64_t))(v4 + 24);
    if (!v5)
      return 4294950302;
    result = v5(a1);
    if ((_DWORD)result)
      return result;
  }
  v7 = CMPhotoCompressionSessionVTableHEIF;
  *(_QWORD *)(a1 + 80) = CMPhotoCompressionSessionVTableHEIF;
  if (!theDict)
    goto LABEL_16;
  v9 = -1;
  if (!CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("ContainerFormat"), &v9))
  {
    v7 = *(uint64_t (***)())(a1 + 80);
    if (v7)
      goto LABEL_16;
    return 4294950195;
  }
  if (v9)
  {
    if (v9 != 1)
      return FigSignalErrorAt();
    v7 = (uint64_t (**)())&CMPhotoCompressionSessionVTableJFIF;
  }
  else
  {
    v7 = CMPhotoCompressionSessionVTableHEIF;
  }
  *(_QWORD *)(a1 + 80) = v7;
LABEL_16:
  v8 = *v7;
  if (!v8)
    return 4294950302;
  result = ((uint64_t (*)(uint64_t, CFDictionaryRef))v8)(a1, theDict);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t _newContainer(uint64_t a1, CFDictionaryRef theDict)
{
  int *v3;
  BOOL v5;
  int v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  uint64_t result;
  int v11;
  int v12;

  *(_DWORD *)(a1 + 240) = 2;
  v3 = (int *)(a1 + 240);
  if (theDict)
  {
    v12 = 0;
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("ImageCountHint"), &v12))
      v5 = v12 <= 1;
    else
      v5 = 1;
    if (!v5)
      return FigSignalErrorAt();
    CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("BackingType"), v3);
    v6 = *v3;
    if (*v3)
    {
      if (v6 == 4)
      {
        CMPhotoCFDictionaryGetSizeIfPresent(theDict, CFSTR("BackingIOSurfaceDestinationSize"), (_QWORD *)(a1 + 256));
      }
      else if (v6 == 3)
      {
        Value = CFDictionaryGetValue(theDict, CFSTR("BackingFileURL"));
        if (!Value)
          return FigSignalErrorAt();
        v8 = Value;
        v9 = CFGetTypeID(Value);
        if (v9 != CFURLGetTypeID())
          return FigSignalErrorAt();
        *(_QWORD *)(a1 + 248) = CFRetain(v8);
      }
    }
    else
    {
      *v3 = 2;
    }
  }
  result = *(unsigned int *)(a1 + 396);
  if (*(_BYTE *)(a1 + 392))
  {
    if ((_DWORD)result)
    {
      return 0;
    }
    else
    {
      v11 = JPEGDeviceInterface_openDriverConnection();
      result = 0;
      *(_DWORD *)(a1 + 396) = v11;
    }
  }
  else if ((_DWORD)result)
  {
    JPEGDeviceInterface_closeDriverConnection(result);
    result = 0;
    *(_DWORD *)(a1 + 396) = 0;
  }
  return result;
}

uint64_t _newContainer_0(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4;
  const void *v5;
  _BYTE *v6;
  _BYTE *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = CFGetAllocator((CFTypeRef)a1);
  v5 = *(const void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  if (v4)
    CFRetain(v4);
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 138) = 0;
  v6 = (_BYTE *)(a1 + 138);
  *(_WORD *)(a1 + 136) = 0;
  v7 = (_BYTE *)(a1 + 136);
  *(_WORD *)(a1 + 112) = 0;
  FigSemaphoreDestroy();
  *(_QWORD *)(a1 + 200) = 0;
  v8 = *(NSObject **)(a1 + 192);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_DWORD *)(a1 + 216) = 0;
  v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v10 = *(const void **)(a1 + 168);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v11 = *(const void **)(a1 + 152);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v12 = *(const void **)(a1 + 160);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v13 = *(const void **)(a1 + 128);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 128) = 0;
  }
  _destroySequenceGroupReaders(*(const __CFArray **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  v14 = CFGetAllocator((CFTypeRef)a1);
  v15 = CMPhotoHEIFFileWriterCreate(v14, a2, (_QWORD *)(a1 + 88));
  v16 = v15;
  if (a2 && !(_DWORD)v15)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("StripExistingMetadata"), v7);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("StripExistingThumbnails"), v6 - 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("StripExistingAuxiliaryImages"), v6);
  }
  return v16;
}

uint64_t _once_CMPhotoDeviceSupportsTileDecodingToCanvas()
{
  uint64_t result;
  mach_port_t v1;
  const __CFDictionary *v2;
  io_object_t v3;
  BOOL v4;
  BOOL v5;
  unsigned int v6;
  char v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  if (sDeviceType == 8)
  {
    v6 = 16;
    v1 = *MEMORY[0x1E0CBBAA8];
    v2 = IOServiceMatching("AppleAVD");
    result = IOServiceGetMatchingService(v1, v2);
    if ((_DWORD)result)
    {
      v3 = result;
      if (MEMORY[0x1A85D02C4](result, "HEVCCanDecodeTileToCanvas", v7, &v6))
        v4 = 1;
      else
        v4 = v6 == 0;
      v5 = !v4 && strncasecmp(v7, "Yes", v6) == 0;
      sDeviceSupportsTileDecodingToCanvas = v5;
      return IOObjectRelease(v3);
    }
    else
    {
      sDeviceSupportsTileDecodingToCanvas = 0;
    }
  }
  else
  {
    sDeviceSupportsTileDecodingToCanvas = 1;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddImage(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v9)();
  uint64_t (*v10)();

  if (!a1)
    return 4294950306;
  result = _verifyMainImageOptions(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v9 = *(uint64_t (***)())(a1 + 80);
      if (!v9)
        return 4294950195;
    }
    else
    {
      v9 = CMPhotoCompressionSessionVTableHEIF;
    }
    v10 = v9[6];
    if (v10)
      return ((uint64_t (*)(uint64_t, const __CFDictionary *, uint64_t, uint64_t))v10)(a1, a2, a3, a4);
    else
      return 4294950302;
  }
  return result;
}

uint64_t _compressImage_0(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4)
{
  return _compressImageInternal_0(a1, a2, a3, 0, a4, 0);
}

uint64_t _encodeSource(const void *a1, int a2, int a3, const void *a4, const __CFDictionary *a5, void *a6, char *a7)
{
  const __CFAllocator *v14;
  const opaqueCMFormatDescription *Value;
  const opaqueCMFormatDescription *v16;
  char v19;
  uint64_t PixelBufferWithSurface;
  int ImageType;
  const void *v22;
  int v23;
  int v24;
  const void *v25;
  const __CFDictionary *v26;
  const opaqueCMFormatDescription *v27;
  uint64_t v28;
  char v30;
  int v31;
  CFTypeRef cf;

  v14 = CFGetAllocator(a1);
  cf = 0;
  if (a5)
  {
    v31 = 0;
    if (CFDictionaryContainsKey(a5, CFSTR("IncludeThumbnailWithOptions")))
      goto LABEL_25;
    Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(a5, CFSTR("DryRun"));
    if ((a6 != 0) != (Value == 0))
    {
      v28 = 4294950306;
      goto LABEL_27;
    }
    v16 = Value;
    if (CMPhotoCFDictionaryGetInt32IfPresent(a5, CFSTR("CodecType"), &v31) && v31 != 1785750887)
      goto LABEL_25;
    if (CFDictionaryContainsKey(a5, CFSTR("ImageOrientation")))
    {
      v30 = 0;
      if (!CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("ApplyTransform"), &v30) || v30 == 0)
        goto LABEL_25;
    }
    if (v16)
    {
      v19 = 1;
      PixelBufferWithSurface = _encodeImageForIndex(a1, a2, a3, a4, a5, 1, v16);
      if ((_DWORD)PixelBufferWithSurface)
        goto LABEL_26;
      goto LABEL_23;
    }
  }
  ImageType = CMPhotoGetImageType(a6);
  if ((ImageType - 2) < 2)
  {
    v22 = a1;
    v23 = a2;
    v24 = a3;
    v25 = a4;
    v26 = a5;
    v27 = (const opaqueCMFormatDescription *)a6;
    goto LABEL_22;
  }
  if (ImageType != 1)
  {
LABEL_25:
    PixelBufferWithSurface = FigSignalErrorAt();
    goto LABEL_26;
  }
  PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(v14, (IOSurfaceRef)a6, 0, (CVPixelBufferRef *)&cf);
  if ((_DWORD)PixelBufferWithSurface)
  {
LABEL_26:
    v28 = PixelBufferWithSurface;
    goto LABEL_27;
  }
  v27 = (const opaqueCMFormatDescription *)cf;
  v22 = a1;
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
LABEL_22:
  PixelBufferWithSurface = _encodeImageForIndex(v22, v23, v24, v25, v26, 0, v27);
  v19 = 0;
  if ((_DWORD)PixelBufferWithSurface)
    goto LABEL_26;
LABEL_23:
  v28 = 0;
  if (a7)
    *a7 = v19;
LABEL_27:
  if (cf)
    CFRelease(cf);
  return v28;
}

uint64_t _encodeImageForIndex(const void *a1, int a2, int a3, const void *a4, const __CFDictionary *a5, int a6, const opaqueCMFormatDescription *ImageBuffer)
{
  uint64_t v11;
  CMVideoDimensions Dimensions;
  double width;
  double height;
  uint64_t MediaSubType;
  char v16;
  CFTypeID v17;
  float64_t v18;
  float64_t v19;
  float64_t v20;
  const __CFDictionary *v21;
  uint64_t v22;
  int v23;
  double v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int UncompressedPixelFormatFromCompressedPixelFormat;
  float64_t v31;
  float64_t v32;
  float64_t v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  int IntIfPresent;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  CFTypeID v44;
  CGColorSpace *v45;
  CGColorSpace *v46;
  CFTypeID v47;
  const void *v48;
  const void *v49;
  uint64_t v50;
  int v51;
  int v52;
  const __CFNumber *v53;
  const void *v54;
  CFTypeID v55;
  int v56;
  __CFDictionary *MutableCopy;
  CFDataRef v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t ColorSpaceFromPixelBuffer;
  _BOOL4 v63;
  CFTypeRef v64;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  CMSampleBufferRef v71;
  CMSampleBufferRef v72;
  int v73;
  uint64_t v74;
  const void *v76;
  CFTypeRef cf;
  unsigned int v80;
  const __CFAllocator *v81;
  int v82;
  unsigned int v83;
  _OWORD v84[2];
  void *value;
  CGRect rect;
  char v87;
  int v88;
  unsigned int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  __int16 v93;
  unsigned __int8 v94;
  __CVBuffer *v95;
  CMSampleBufferRef v96;
  void *v97;
  const void *v98;
  float64x2_t v99;
  float64x2_t v100;

  v11 = (uint64_t)a1;
  v81 = CFGetAllocator(a1);
  v99 = 0u;
  v100 = 0u;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  v96 = 0;
  if (a6)
  {
    Dimensions = CMVideoFormatDescriptionGetDimensions(ImageBuffer);
    width = (double)Dimensions.width;
    height = (double)Dimensions.height;
    MediaSubType = CMFormatDescriptionGetMediaSubType(ImageBuffer);
    ImageBuffer = 0;
    v99 = 0uLL;
    v16 = 1;
    v100.f64[0] = width;
    v100.f64[1] = height;
  }
  else
  {
    v17 = CFGetTypeID(ImageBuffer);
    if (v17 == CMSampleBufferGetTypeID())
      ImageBuffer = CMSampleBufferGetImageBuffer(ImageBuffer);
    MediaSubType = CVPixelBufferGetPixelFormatType(ImageBuffer);
    v99.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(ImageBuffer);
    v99.f64[1] = v18;
    v100.f64[0] = v19;
    v100.f64[1] = v20;
    if (ImageBuffer)
    {
      CFRetain(ImageBuffer);
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
  }
  v94 = 1;
  v93 = 0;
  v92 = 0;
  v91 = 0;
  v90 = 1;
  v88 = 1;
  v89 = 5;
  v87 = 0;
  v83 = MediaSubType;
  if (!a5)
  {
    cf = 0;
    v35 = 0;
    v82 = 0;
    v80 = 0;
    IntIfPresent = 0;
    v46 = 0;
LABEL_66:
    v49 = 0;
    goto LABEL_67;
  }
  v21 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("SourceCropRect"));
  if (v21)
  {
    memset(&rect, 0, sizeof(rect));
    if (CGRectMakeWithDictionaryRepresentation(v21, &rect))
    {
      v22 = CMPhotoApplyCropRectToRect(v99.f64, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      if ((_DWORD)v22)
        goto LABEL_192;
    }
    MediaSubType = MediaSubType;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("ApplyTransform"), &v87);
  if (v87 && !CMPhotoCFDictionaryGetIntIfPresent(a5, CFSTR("ImageOrientation"), &v88))
    goto LABEL_191;
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("ForceHighSpeed"), &v94);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("DisableMSRForTransfer"), (_BYTE *)&v93 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("DisableGPUForTransfer"), &v93);
  CMPhotoCFDictionaryGetIntIfPresent(a5, CFSTR("MaxPixelSize"), &v91);
  v23 = v91;
  if (v91)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("AllowMaxPixelSizeUpscale"), (_BYTE *)&v90 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("UseEvenScalingMode"), &v90);
    LOBYTE(v90) = CMPhotoGetEvenScalingModeDefault(1, v90);
    v23 = v91;
  }
  if (!a6)
  {
    if (v100.f64[0] <= v100.f64[1])
      v24 = v100.f64[1];
    else
      v24 = v100.f64[0];
    v25 = v23 < (unint64_t)v24;
    if (HIBYTE(v90))
      v25 = v23 != (unint64_t)v24;
    if (v23 >= 1 && v25 || v87 && v88 != 1)
    {
      v26 = vcvtad_u64_f64(v100.f64[0]);
      v27 = vcvtad_u64_f64(v100.f64[1]);
      rect.origin.x = 0.0;
      if (v26 <= v27)
        v26 = v27;
      if (!HIBYTE(v90) && v26 < v23)
        goto LABEL_191;
      v28 = *(_QWORD *)(v11 + 32);
      v29 = v88;
      UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(v83);
      v22 = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(v28, ImageBuffer, 0, 1, v29, UncompressedPixelFormatFromCompressedPixelFormat, 0, v91, v99.f64[0], v99.f64[1], v100.f64[0], v100.f64[1], HIBYTE(v90), 0, v90, 0, v94, SHIBYTE(v93), 0,
              v93,
              (__CVBuffer **)&rect);
      if ((_DWORD)v22)
      {
LABEL_192:
        v59 = v22;
        v56 = 0;
        v63 = 0;
        goto LABEL_193;
      }
      if ((v16 & 1) == 0)
        CFRelease(ImageBuffer);
      ImageBuffer = *(const opaqueCMFormatDescription **)&rect.origin.x;
      v99.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(*(__CVBuffer **)&rect.origin.x);
      v99.f64[1] = v31;
      v100.f64[0] = v32;
      v100.f64[1] = v33;
      MediaSubType = v83;
    }
  }
  v34 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("AuxiliaryImagePreserveValue"));
  v35 = v34;
  if (v34)
  {
    v36 = CFGetTypeID(v34);
    if (v36 != CFNumberGetTypeID())
    {
LABEL_191:
      v22 = FigSignalErrorAt();
      goto LABEL_192;
    }
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("IgnoreColorSpace"), (_BYTE *)&v92 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("AllowITUR_2100TFToSDRTransformBeforeEncode"), &v92);
  LODWORD(rect.origin.x) = 0;
  IntIfPresent = FigCFDictionaryGetIntIfPresent();
  if (IntIfPresent)
    v38 = LODWORD(rect.origin.x) == 5;
  else
    v38 = 0;
  v39 = v38;
  v82 = v39;
  LOBYTE(value) = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("PreferSoftwareCodec"), &value))
    v40 = value == 0;
  else
    v40 = 1;
  v41 = !v40;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a5, CFSTR("RequireHardwareCodec"), &value))
    v42 = value == 0;
  else
    v42 = 1;
  if (v42)
    v43 = v41;
  else
    v43 = 2;
  v80 = v43;
  if (!v42 && v41)
    goto LABEL_64;
  CMPhotoCFDictionaryGetInt32IfPresent(a5, CFSTR("Subsampling"), &v89);
  cf = CFDictionaryGetValue(a5, CFSTR("AuxiliaryImageCustomTypeURN"));
  if (cf)
  {
    v44 = CFGetTypeID(cf);
    if (v44 != CFStringGetTypeID())
      goto LABEL_64;
  }
  v45 = (CGColorSpace *)FigCFDictionaryGetValue();
  v46 = v45;
  if (v45)
  {
    v47 = CFGetTypeID(v45);
    if (v47 != CGColorSpaceGetTypeID())
      goto LABEL_64;
  }
  if (a2 != 2)
    goto LABEL_66;
  v48 = CFDictionaryGetValue(a5, CFSTR("AuxiliaryImageTonemapMetadata"));
  v49 = v48;
  if (v48)
  {
    v50 = v11;
    v51 = IntIfPresent;
    v52 = a6;
    v53 = v35;
    v54 = v48;
    v55 = CFGetTypeID(v48);
    v38 = v55 == CFDictionaryGetTypeID();
    v49 = v54;
    v35 = v53;
    a6 = v52;
    IntIfPresent = v51;
    v11 = v50;
    a2 = 2;
    if (!v38)
    {
LABEL_64:
      v56 = 0;
      MutableCopy = 0;
      v58 = 0;
      v59 = 4294950306;
LABEL_198:
      v63 = v82;
      goto LABEL_169;
    }
  }
LABEL_67:
  if (a2 == 2)
  {
    if (a3 == 4 && !cf)
    {
      ColorSpaceFromPixelBuffer = FigSignalErrorAt();
      goto LABEL_195;
    }
    HIBYTE(v92) = 1;
  }
  if (!a6 && (_BYTE)v92 && CMPhotoPixelBufferIsITUR_2100TF(ImageBuffer))
  {
    ColorSpaceFromPixelBuffer = CMPhotoScaleAndRotateSessionTransformForSize(*(_QWORD *)(v11 + 32), ImageBuffer, 1, 1, MediaSubType, 0x100000002, 1, 0, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v60, v61, 0, 1u, &v95);
    if ((_DWORD)ColorSpaceFromPixelBuffer)
      goto LABEL_195;
    if (ImageBuffer)
      CFRelease(ImageBuffer);
    ImageBuffer = v95;
    v95 = 0;
    LODWORD(MediaSubType) = v83;
  }
  v76 = v49;
  if (HIBYTE(v92))
  {
    if (a2 == 2)
    {
      v58 = CGColorSpaceCopyICCData(v46);
      goto LABEL_86;
    }
    if (a2)
    {
LABEL_90:
      v63 = v82;
      if (!*(_QWORD *)(v11 + 288))
      {
        v58 = 0;
        goto LABEL_100;
      }
      v59 = FigSignalErrorAt();
      v56 = 0;
LABEL_193:
      MutableCopy = 0;
      v58 = 0;
      goto LABEL_169;
    }
    v58 = 0;
    goto LABEL_95;
  }
  rect.origin.x = 0.0;
  ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(ImageBuffer, (CGColorSpace **)&rect, 1, 1);
  if ((_DWORD)ColorSpaceFromPixelBuffer)
  {
LABEL_195:
    v59 = ColorSpaceFromPixelBuffer;
    v56 = 0;
    MutableCopy = 0;
    v58 = 0;
    goto LABEL_198;
  }
  v58 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)&rect.origin.x);
  if (*(_QWORD *)&rect.origin.x)
    CFRelease(*(CFTypeRef *)&rect.origin.x);
  LODWORD(MediaSubType) = v83;
  if (!a2)
  {
    if (v58)
    {
      v64 = CFRetain(v58);
LABEL_96:
      v63 = v82;
      *(_QWORD *)(v11 + 288) = v64;
      goto LABEL_100;
    }
LABEL_95:
    v64 = 0;
    goto LABEL_96;
  }
  if (a2 == 2)
  {
LABEL_86:
    if (!v46 && v58)
    {
      v59 = FigSignalErrorAt();
      v56 = 0;
      MutableCopy = 0;
      goto LABEL_198;
    }
    v63 = v82;
    goto LABEL_100;
  }
  if (!v58)
    goto LABEL_90;
  v63 = v82;
  if (!*(_QWORD *)(v11 + 288) || !FigCFEqual())
  {
    v59 = FigSignalErrorAt();
    v56 = 0;
    MutableCopy = 0;
    goto LABEL_169;
  }
LABEL_100:
  if (a6)
  {
    v56 = 0;
    MutableCopy = 0;
    goto LABEL_168;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v56 = 0;
    v59 = 4294950305;
    goto LABEL_169;
  }
  if (a2 == 2 && !IntIfPresent)
  {
    v63 = (_DWORD)MediaSubType == 1278226742 || (_DWORD)MediaSubType == 1278226736 || v35 != 0;
    value = 0;
    rect.origin.x = 0.0;
    v67 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(1785750887, v63, (CFNumberRef *)&rect, (CFNumberRef *)&value);
    if ((_DWORD)v67)
      goto LABEL_163;
    CFDictionarySetValue(MutableCopy, CFSTR("QualityControllerType"), *(const void **)&rect.origin.x);
    if (value)
      CFDictionarySetValue(MutableCopy, CFSTR("QualityControllerParameters"), value);
    LODWORD(MediaSubType) = v83;
    if (*(_QWORD *)&rect.origin.x)
      CFRelease(*(CFTypeRef *)&rect.origin.x);
    if (value)
      CFRelease(value);
  }
  if (*(_DWORD *)(v11 + 240) != 2)
    CMPhotoCFDictionarySetBoolean(MutableCopy, CFSTR("PoolCompressedSurfaces"), 0);
  if (a2 != 2)
    goto LABEL_154;
  if ((int)MediaSubType > 1380411456)
  {
    if ((int)MediaSubType <= 1717856626)
    {
      if ((int)MediaSubType > 1651926375)
      {
        if ((_DWORD)MediaSubType == 1651926376)
          goto LABEL_145;
        v68 = 1717855600;
      }
      else
      {
        if ((_DWORD)MediaSubType == 1380411457)
          goto LABEL_145;
        v68 = 1647719528;
      }
    }
    else if ((int)MediaSubType <= 1751411058)
    {
      if ((_DWORD)MediaSubType == 1717856627)
        goto LABEL_145;
      v68 = 1751410032;
    }
    else
    {
      if ((_DWORD)MediaSubType == 1751411059 || (_DWORD)MediaSubType == 1932996149)
        goto LABEL_145;
      v68 = 1751527984;
    }
LABEL_144:
    if ((_DWORD)MediaSubType != v68)
      goto LABEL_154;
    goto LABEL_145;
  }
  if ((int)MediaSubType > 1278226735)
  {
    if ((MediaSubType - 1278226736) <= 6 && ((1 << (MediaSubType - 48)) & 0x45) != 0)
      goto LABEL_145;
    v68 = 1380410945;
    goto LABEL_144;
  }
  if (((MediaSubType - 1278226488) > 0x30
     || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
    && (_DWORD)MediaSubType != 825306677)
  {
    v68 = 825437747;
    goto LABEL_144;
  }
LABEL_145:
  if (v35 && !v63)
  {
    v67 = FigSignalErrorAt();
    goto LABEL_163;
  }
  if (v63)
    v69 = 16;
  else
    v69 = 8;
  v67 = CMPhotoCreateCompressionCompatiblePixelBuffer(ImageBuffer, *(const void **)(v11 + 24), v69, v35, 1, (CFTypeRef *)&v95, &v98);
  if ((_DWORD)v67)
    goto LABEL_163;
  if (ImageBuffer)
    CFRelease(ImageBuffer);
  ImageBuffer = v95;
  v95 = 0;
LABEL_154:
  v67 = CMPhotoUnifiedJPEGEncoderCreate(v81, *(const void **)(v11 + 32), *(const void **)(v11 + 24), *(_DWORD *)(v11 + 396), &v97);
  if ((_DWORD)v67)
  {
LABEL_163:
    v59 = v67;
    v56 = 0;
    goto LABEL_169;
  }
  v84[0] = vcvtq_u64_f64(vrndaq_f64(v99));
  v84[1] = vcvtq_u64_f64(vrndaq_f64(v100));
  v70 = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v97, (uint64_t)MutableCopy, (uint64_t)ImageBuffer, 0, v84, 0, v80, v89, v11, &v96);
  if ((_DWORD)v70)
  {
    v59 = v70;
    v56 = 1;
    goto LABEL_169;
  }
  if (a2 == 2)
  {
    v67 = _saveAuxImage(v11 + 240, v96, 1, 0, a3, a4, cf, v98, v58, v76);
    goto LABEL_163;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      v71 = v96;
      if (v96)
        v71 = (CMSampleBufferRef)CFRetain(v96);
      v56 = 0;
      v59 = 0;
      *(_QWORD *)(v11 + 264) = v71;
      *(_BYTE *)(v11 + 304) = 1;
      goto LABEL_169;
    }
    v56 = 0;
LABEL_168:
    v59 = 0;
    goto LABEL_169;
  }
  v72 = v96;
  if (v96)
    v72 = (CMSampleBufferRef)CFRetain(v96);
  v56 = 0;
  v59 = 0;
  *(_QWORD *)(v11 + 280) = v72;
  *(_BYTE *)(v11 + 305) = 1;
LABEL_169:
  CMPhotoUnifiedJPEGEncoderDestroy(v97);
  if (v96)
    CFRelease(v96);
  if (ImageBuffer)
    CFRelease(ImageBuffer);
  if (v58)
    CFRelease(v58);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v98)
    CFRelease(v98);
  if (v95)
    CFRelease(v95);
  if (v63)
    v73 = 0;
  else
    v73 = v56;
  if (v73 == 1)
  {
    v74 = *(unsigned int *)(v11 + 396);
    if ((_DWORD)v74)
    {
      JPEGDeviceInterface_closeDriverConnection(v74);
      *(_DWORD *)(v11 + 396) = 0;
    }
  }
  CMPhotoSurfacePoolMarkCachesVolatile(*(_QWORD *)(v11 + 24), 0);
  return v59;
}

uint64_t CMPhotoUnifiedJPEGEncoderEncode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CMSampleBufferRef *a10)
{
  __int128 v10;
  _OWORD v12[2];

  v10 = a5[1];
  v12[0] = *a5;
  v12[1] = v10;
  return _encodeBuffer(a1, a2, a3, a4, (uint64_t)v12, a6, a7, a8, 0, CMPhotoRectZero_0, a9, a10, 0);
}

void CMPhotoUnifiedJPEGEncoderDestroy(void *a1)
{
  const void *v2;
  const __CFAllocator *v3;
  const void *v4;

  if (a1)
  {
    v3 = *(const __CFAllocator **)a1;
    v2 = (const void *)*((_QWORD *)a1 + 1);
    if (v2)
      CFRelease(v2);
    v4 = (const void *)*((_QWORD *)a1 + 2);
    if (v4)
      CFRelease(v4);
    free(*((void **)a1 + 8));
    CFAllocatorDeallocate(v3, a1);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t CMPhotoUnifiedJPEGEncoderCreate(const __CFAllocator *a1, const void *a2, const void *a3, int a4, _QWORD *a5)
{
  _OWORD *v10;
  _OWORD *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t result;

  if (!a5)
    return 4294950306;
  v10 = CFAllocatorAllocate(a1, 80, 0);
  if (!v10)
    return 4294950305;
  v11 = v10;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  *v10 = 0u;
  if (a1)
    v12 = CFRetain(a1);
  else
    v12 = 0;
  *(_QWORD *)v11 = v12;
  if (a2)
    v13 = CFRetain(a2);
  else
    v13 = 0;
  *((_QWORD *)v11 + 2) = v13;
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  result = 0;
  *((_QWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 6) = a4;
  *a5 = v11;
  return result;
}

uint64_t CMPhotoGetSourceDimensions(opaqueCMSampleBuffer *a1, CFDictionaryRef theDict, unint64_t *a3)
{
  opaqueCMSampleBuffer *ImageBuffer;
  int ImageType;
  double PixelBufferSize;
  double v7;
  const opaqueCMFormatDescription *Value;
  const opaqueCMFormatDescription *v9;
  CFTypeID v10;
  uint64_t Dimensions;
  unint64_t v12;
  uint64_t v13;

  if (!((unint64_t)a1 | (unint64_t)theDict))
    return FigSignalErrorAt();
  ImageBuffer = a1;
  if (!a1)
  {
    Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(theDict, CFSTR("DryRun"));
    if (!Value || (v9 = Value, v10 = CFGetTypeID(Value), v10 != CMFormatDescriptionGetTypeID()))
    {
      FigSignalErrorAt();
      return 0;
    }
    Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(v9);
    v12 = (int)Dimensions;
    v13 = Dimensions >> 32;
LABEL_13:
    *a3 = v12;
    a3[1] = v13;
    return 0;
  }
  ImageType = CMPhotoGetImageType(a1);
  switch(ImageType)
  {
    case 3:
      ImageBuffer = CMSampleBufferGetImageBuffer(ImageBuffer);
      if (!ImageBuffer)
        return FigSignalErrorAt();
LABEL_11:
      PixelBufferSize = CMPhotoGetPixelBufferSize(ImageBuffer);
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 1:
      PixelBufferSize = CMPhotoGetSurfaceSize(ImageBuffer);
LABEL_12:
      v12 = vcvtad_u64_f64(PixelBufferSize);
      v13 = vcvtad_u64_f64(v7);
      goto LABEL_13;
  }
  if (FigCFDictionaryGetValue())
  {
    v13 = 0;
    v12 = 0;
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoGetImageType(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  pthread_once(&CMPhotoGetImageType_onceToken, (void (*)(void))_once_CMPhotoGetImageType);
  v2 = CFGetTypeID(a1);
  result = 1;
  while (v2 != sTypes[result])
  {
    if (++result == 5)
      return 0;
  }
  return result;
}

const __CFDictionary *unpackCGImageRequestOptions(const __CFDictionary *result, _BYTE *a2)
{
  const __CFDictionary *v3;
  int BoolValue_0;
  int FourCCValue;

  if (!result)
  {
    LOBYTE(BoolValue_0) = 1;
LABEL_7:
    *a2 = BoolValue_0;
    return result;
  }
  v3 = result;
  BoolValue_0 = _getBoolValue_0(result, CFSTR("BackCGImageWithIOSurface"), 1u);
  FourCCValue = _getFourCCValue(v3);
  result = (const __CFDictionary *)_getBoolValue_0(v3, CFSTR("AllowNonExactOutputDimensions"), 0);
  if (BoolValue_0 || FourCCValue == 1111970369)
  {
    if ((_DWORD)result)
      result = (const __CFDictionary *)FigSignalErrorAt();
    goto LABEL_7;
  }
  return (const __CFDictionary *)FigSignalErrorAt();
}

uint64_t fjds_createPixelBufferFromJPEGData(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFDictionary *a4, _QWORD *a5, int a6)
{
  uint64_t RequestStatus;
  uint64_t v13;
  int FourCCValue;
  int v15;
  int v16;
  int IntValue_0;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int BoolValue_0;
  __IOSurface *Value;
  __IOSurface *v24;
  CFTypeID v25;
  size_t AllocSize;
  uint64_t v27;
  unsigned int ValueAtIndex;
  CFDataRef v29;
  char v30;
  uint64_t v31;
  const __CFAllocator *v32;
  const UInt8 *BaseAddress;
  CFDataRef v34;
  const void *v35;
  const void *v36;
  CFTypeID TypeID;
  _DWORD *v38;
  int v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  OSType PixelFormatType;
  unsigned int v53;
  char v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __IOSurface *v59;
  uint64_t v60;
  uint64_t v61;
  CFIndex v62;
  unint64_t v63;
  __CFString *v64;
  int v65;
  uint64_t v66;
  char *v67;
  const UInt8 *BytePtr;
  size_t v69;
  size_t v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  __CFString *v74;
  uint64_t v75;
  NSObject **v76;
  NSObject *v77;
  IOSurfaceRef v78;
  IOSurfaceRef IOSurface;
  uint64_t v80;
  __IOSurface *v81;
  __IOSurface *v82;
  uint64_t v83;
  dispatch_semaphore_t v84;
  _QWORD *v85;
  IOSurfaceRef v86;
  uint64_t v87;
  double v88;
  double v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  __CVBuffer *v93;
  __int128 v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  _QWORD *v99;
  int v100;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  const __CFData *cf;
  int v105;
  unsigned int v106;
  __IOSurface *buffer;
  CFTypeRef v108;
  CVPixelBufferRef pixelBuffer;
  CFIndex length;
  IOSurfaceRef v111;
  uint64_t v112;
  dispatch_semaphore_t dsema;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[2];
  uint64_t v125;

  v125 = 0;
  memset(v124, 0, sizeof(v124));
  v122 = 0u;
  v123 = 0u;
  v120 = 0;
  v121 = 0;
  v118 = 0;
  v119 = 0;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  v112 = 0;
  dsema = 0;
  v114 = 0;
  length = 0;
  v111 = 0;
  v108 = 0;
  pixelBuffer = 0;
  RequestStatus = fjds_getRequestStatus(a1, a2);
  if ((_DWORD)RequestStatus)
    goto LABEL_20;
  v13 = 875704422;
  if (!a4)
  {
    v100 = a6;
    v103 = a2;
    cf = 0;
    v99 = a5;
    IntValue_0 = 0;
    v18 = 0;
    v19 = 0;
    v106 = 0;
    buffer = 0;
    v105 = 0;
    v20 = 0;
    v101 = 1;
    v102 = 0;
    v21 = 875704422;
    goto LABEL_31;
  }
  FourCCValue = _getFourCCValue(a4);
  v15 = FourCCValue;
  if (FourCCValue > 1111970368)
  {
    if (FourCCValue != 1111970369)
    {
      v16 = 1278555701;
      goto LABEL_9;
    }
  }
  else if (FourCCValue != 875704422)
  {
    v16 = 875704438;
LABEL_9:
    if (FourCCValue == v16)
      goto LABEL_10;
    RequestStatus = FigSignalErrorAt();
LABEL_20:
    v27 = RequestStatus;
    ValueAtIndex = 0;
    buffer = 0;
    v29 = 0;
    v105 = 0;
LABEL_21:
    v30 = 1;
LABEL_146:
    v55 = 1;
    goto LABEL_148;
  }
LABEL_10:
  v100 = a6;
  v103 = a2;
  LODWORD(v20) = _getIntValue_0(a4, CFSTR("OutputBytesPerRowAlignment"));
  BoolValue_0 = _getBoolValue_0(a4, CFSTR("ApplyTransform"), 0);
  IntValue_0 = _getIntValue_0(a4, CFSTR("MaxPixelSize"));
  if (IntValue_0)
    v97 = _getBoolValue_0(a4, CFSTR("RelaxMaxPixelSize"), 0);
  else
    v97 = 0;
  v101 = _getBoolValue_0(a4, CFSTR("AllowNonExactOutputDimensions"), 0) == 0;
  v102 = _getBoolValue_0(a4, CFSTR("ForceHighSpeedDecode"), 0);
  v106 = _getIntValue_0(a4, CFSTR("KTraceArg"));
  Value = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("SourceIOSurface"));
  buffer = Value;
  v99 = a5;
  if (Value)
  {
    v24 = Value;
    v25 = CFGetTypeID(Value);
    if (v25 != IOSurfaceGetTypeID())
    {
LABEL_17:
      v27 = FigSignalErrorAt();
      ValueAtIndex = 0;
      v29 = 0;
      v105 = 0;
LABEL_180:
      v30 = 1;
      goto LABEL_119;
    }
    AllocSize = IOSurfaceGetAllocSize(v24);
    CMPhotoCFDictionaryGetSizeIfPresent(a4, CFSTR("SourceIOSurfaceSize"), &length);
    if (length)
    {
      if (length > AllocSize)
        goto LABEL_17;
    }
    else
    {
      length = AllocSize;
    }
    v30 = 1;
    v31 = IOSurfaceLock(buffer, 1u, 0);
    if ((_DWORD)v31)
    {
      v27 = v31;
      ValueAtIndex = 0;
      v29 = 0;
      v105 = 0;
      goto LABEL_119;
    }
    v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    v34 = CFDataCreateWithBytesNoCopy(v32, BaseAddress, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v29 = v34;
    v105 = 1;
    if (!v34)
    {
      ValueAtIndex = 0;
      v27 = 4294951225;
      goto LABEL_119;
    }
    a3 = v34;
  }
  else
  {
    v29 = 0;
    v105 = 0;
  }
  v20 = (int)v20;
  v35 = CFDictionaryGetValue(a4, CFSTR("ProvidedPixelBuffer"));
  v19 = BoolValue_0;
  cf = v29;
  if (v35)
  {
    v36 = v35;
    TypeID = CVPixelBufferGetTypeID();
    v18 = v97;
    if (TypeID == CFGetTypeID(v36))
      pixelBuffer = (CVPixelBufferRef)CFRetain(v36);
    v21 = v15;
    v13 = 875704422;
  }
  else
  {
    v21 = v15;
    v13 = 875704422;
    v18 = v97;
  }
LABEL_31:
  v38 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v39 = JPEGParseJPEGInfo(a3, (uint64_t)&v122, 1, *(_BYTE *)(a1 + 180) != 0);
  if (*v38 == 1)
    kdebug_trace();
  if (v39)
  {
    v29 = cf;
    v27 = FigSignalErrorAt();
    ValueAtIndex = 0;
    goto LABEL_21;
  }
  if (BYTE12(v124[1])
    || ((JPEGCalculateOutputDimensions(v122, DWORD1(v122), IntValue_0, v18, v19, SDWORD1(v123), &v120, &v118, &v116, &v115, 0), !v115)? ((v41 = v121, v120 == v118) ? (v42 = v121 == v119) : (v42 = 0), v42 ? (v40 = 0) : (v40 = 1)): (v40 = 1, v41 = v121), (v43 = JPEGDeviceInterface_supportsDecodeSize(v122, DWORD1(v122), v123, v120, v41)) == 0))
  {
    v61 = FigSignalErrorAt();
    goto LABEL_173;
  }
  v44 = v43;
  if (v21 == 1111970369)
  {
    v45 = v123;
    v46 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
    if (v46)
      v47 = v40;
    else
      v47 = 0;
    if (v46)
      v48 = 1111970369;
    else
      v48 = 875704422;
    if (v47 == 1)
    {
      if (v45 == 2)
        v49 = 875836518;
      else
        v49 = 875704422;
      if (v45 == 1)
        v13 = 2037741158;
      else
        v13 = v49;
    }
    else
    {
      v13 = v48;
    }
  }
  v98 = v21;
  v50 = v13;
  if (v21 == (_DWORD)v13)
    v51 = v40;
  else
    v51 = 1;
  if (pixelBuffer)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v53 = PixelFormatType == (_DWORD)v50 ? v44 : -16990;
    v54 = PixelFormatType == (_DWORD)v50 ? v51 : 1;
    v27 = v51 ? 4294950194 : v53;
    if ((v54 & 1) != 0)
      goto LABEL_75;
  }
  if (v20)
  {
    v56 = 4;
    v57 = CMPhotoLeastCommonMultiple(4, v20);
    if (v51)
    {
      v58 = v57;
    }
    else
    {
      v56 = v57;
      v58 = 0;
    }
    v96 = v58;
    v59 = buffer;
  }
  else
  {
    v59 = buffer;
    if ((v51 & 1) != 0)
    {
      v96 = 0;
      v56 = 4;
    }
    else
    {
      v56 = CMPhotoLeastCommonMultiple(4, 16);
      v96 = 0;
    }
  }
  v60 = v103;
  v61 = fjds_getRequestStatus(a1, v103);
  if ((_DWORD)v61)
  {
LABEL_173:
    v27 = v61;
LABEL_75:
    ValueAtIndex = 0;
    v30 = 1;
    v55 = 1;
LABEL_95:
    v29 = cf;
    goto LABEL_148;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  if (v59 && BYTE13(v124[1]))
  {
    v111 = (IOSurfaceRef)CFRetain(v59);
  }
  else
  {
    v62 = CFDataGetLength(a3);
    v63 = v62 + 2 * (BYTE13(v124[1]) == 0);
    if (*v38 == 1)
      kdebug_trace();
    v64 = *(__CFString **)(a1 + 200);
    v55 = 1;
    if (v64 == CFSTR("SurfacePoolOneShot"))
      v65 = 2;
    else
      v65 = 1;
    v66 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)v64, v63, v65, &v111);
    if ((_DWORD)v66)
    {
      v27 = v66;
      ValueAtIndex = 0;
      v30 = 0;
      goto LABEL_95;
    }
    if (*v38 == 1)
      kdebug_trace();
    IOSurfaceLock(v111, 0, 0);
    v67 = (char *)IOSurfaceGetBaseAddress(v111);
    BytePtr = CFDataGetBytePtr(a3);
    v69 = CFDataGetLength(a3);
    memcpy(v67, BytePtr, v69);
    if (!BYTE13(v124[1]))
      *(_WORD *)&v67[v63 - 2] = -9729;
    IOSurfaceUnlock(v111, 0, 0);
    v59 = buffer;
  }
  if (*v38 == 1)
    kdebug_trace();
  if (pixelBuffer)
  {
    v27 = 0;
  }
  else
  {
    v70 = v120;
    v71 = v121;
    v72 = DWORD2(v122);
    v73 = HIDWORD(v122);
    v74 = *(__CFString **)(a1 + 200);
    if (v74 == CFSTR("SurfacePoolOneShot"))
    {
      if (v56 <= 1)
        v56 = 1;
      v72 = CMPhotoLeastCommonMultiple(DWORD2(v122), v56);
      v74 = *(__CFString **)(a1 + 200);
    }
    v27 = CMPhotoSurfacePoolCreatePixelBuffer(v74, v50, v70, v71, v101, v72, v73, 0, v56, 0, &pixelBuffer);
    v59 = buffer;
  }
  if (*v38 == 1)
    kdebug_trace();
  v29 = cf;
  if ((_DWORD)v27)
    goto LABEL_175;
  v75 = fjds_getRequestStatus(a1, v103);
  if ((_DWORD)v75)
  {
    v27 = v75;
    goto LABEL_175;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 152), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) <= 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 152));
    ValueAtIndex = 0;
    v30 = 0;
    v27 = 4294951226;
LABEL_119:
    v55 = 1;
    goto LABEL_148;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), 0);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 136), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if (!v100)
  {
    v78 = v111;
    IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
    v80 = JPEGDecompressSurface(ValueAtIndex, 0, (uint64_t)v78, 0, (uint64_t)IOSurface, (unsigned int *)&v122, v102 != 0, v106, v120, v121, 0, 0);
    if (!(_DWORD)v80)
    {
      fjds_enqueueDriverConnection(a1, ValueAtIndex);
      goto LABEL_126;
    }
    v27 = v80;
    goto LABEL_176;
  }
  LODWORD(v114) = v106;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  v76 = *(NSObject ***)(a1 + 168);
  if (v76)
  {
    v77 = *v76;
    *(_QWORD *)(a1 + 168) = v76[1];
    free(v76);
  }
  else
  {
    v77 = dispatch_semaphore_create(0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  dsema = v77;
  if (!v77)
  {
    v83 = FigSignalErrorAt();
    goto LABEL_183;
  }
  v81 = v111;
  v82 = CVPixelBufferGetIOSurface(pixelBuffer);
  *((_QWORD *)&v95 + 1) = &v112;
  *(_QWORD *)&v95 = _asyncDecodeCompleteCallback;
  v83 = JPEGDecompressSurfaceAsync(ValueAtIndex, v81, v82, (uint64_t)&v122, v102 != 0, v106, v120, v121, v95, 0);
  if ((_DWORD)v83)
  {
LABEL_183:
    v27 = v83;
    v30 = 0;
    v55 = 1;
    v29 = cf;
    goto LABEL_148;
  }
  fjds_enqueueDriverConnection(a1, ValueAtIndex);
  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  v84 = dsema;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  v85 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  *v85 = v84;
  v85[1] = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v85;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  v27 = v112;
  v29 = cf;
  v60 = v103;
  if ((_DWORD)v112)
  {
LABEL_175:
    ValueAtIndex = 0;
LABEL_176:
    v30 = 0;
    goto LABEL_119;
  }
LABEL_126:
  v86 = v59;
  if (v111 != v59)
  {
    IOSurfaceDecrementUseCount(v111);
    v86 = v111;
  }
  if (v86)
  {
    CFRelease(v86);
    v111 = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 80));
  CMPhotoAddDefault601709MatrixToBufferIfAllowed(pixelBuffer, 1, 0);
  v87 = fjds_getRequestStatus(a1, v60);
  v27 = v87;
  if (!v51)
  {
    if (!(_DWORD)v87)
    {
      v93 = pixelBuffer;
      *v99 = pixelBuffer;
      pixelBuffer = 0;
      goto LABEL_142;
    }
LABEL_179:
    ValueAtIndex = 0;
    goto LABEL_180;
  }
  if ((_DWORD)v87)
    goto LABEL_179;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL);
  if (v115)
    v90 = DWORD1(v123);
  else
    v90 = 1;
  v30 = 1;
  v91 = CMPhotoScaleAndRotateSessionTransformForSize(*(_QWORD *)(a1 + 208), pixelBuffer, 1, v90, v98, 0, 0, v101, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)v116, (double)v117, v88, v89, v96, v102, (__CVBuffer **)&v108);
  if ((_DWORD)v91)
  {
    v27 = v91;
    ValueAtIndex = 0;
    v55 = 0;
    goto LABEL_148;
  }
  if (pixelBuffer)
  {
    CFRelease(pixelBuffer);
    pixelBuffer = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 88));
  v92 = fjds_getRequestStatus(a1, v60);
  if ((_DWORD)v92)
  {
    v27 = v92;
    ValueAtIndex = 0;
    goto LABEL_146;
  }
  v93 = (__CVBuffer *)v108;
  *v99 = v108;
  v108 = 0;
LABEL_142:
  ValueAtIndex = 0;
  v30 = 1;
  if (*(_BYTE *)(a1 + 180) && *(_QWORD *)((char *)v124 + 12) && v93)
  {
    CVBufferSetAttachment(v93, (CFStringRef)*MEMORY[0x1E0CA8CD8], *(CFTypeRef *)((char *)v124 + 12), kCVAttachmentMode_ShouldPropagate);
    ValueAtIndex = 0;
    v27 = 0;
    goto LABEL_146;
  }
  v55 = 1;
  v27 = 0;
LABEL_148:
  if (*(_QWORD *)((char *)v124 + 12))
    CFRelease(*(CFTypeRef *)((char *)v124 + 12));
  if (ValueAtIndex)
    fjds_enqueueDriverConnection(a1, ValueAtIndex);
  if (v111 && v111 != buffer)
    IOSurfaceDecrementUseCount(v111);
  if (buffer && v105)
    IOSurfaceUnlock(buffer, 1u, 0);
  if (v111)
    CFRelease(v111);
  if (v29)
    CFRelease(v29);
  if ((v30 & 1) == 0)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 80));
  if ((v55 & 1) == 0)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 88));
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  if (v108)
    CFRelease(v108);
  return v27;
}

uint64_t fjds_getRequestStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v4;

  v2 = a2;
  if (a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
    if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)v2))
      v2 = 0;
    else
      v2 = 4294951224;
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

uint64_t _getBoolValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;

  if (a1
    && (Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2)) != 0
    && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
  {
    return CFBooleanGetValue(v5);
  }
  else
  {
    return a3;
  }
}

uint64_t _getBoolValue_0(const __CFDictionary *a1, const void *a2, unsigned __int8 a3)
{
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;
  CFTypeID v8;
  int valuePtr;

  if (a1)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      v5 = Value;
      v6 = CFGetTypeID(Value);
      if (v6 == CFBooleanGetTypeID())
        return CFBooleanGetValue(v5);
      v8 = CFGetTypeID(v5);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
        return valuePtr;
      }
    }
  }
  return a3;
}

uint64_t _getIntValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID TypeID;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

const __CFNumber *_getIntValue_0(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  const __CFNumber *v3;
  CFTypeID TypeID;
  CFTypeID v5;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3))
    {
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      v5 = CFBooleanGetTypeID();
      if (v5 == CFGetTypeID(v3))
        return (const __CFNumber *)CFBooleanGetValue(v3);
      else
        return 0;
    }
  }
  return result;
}

uint64_t _once_getDeviceType()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;

  v4 = 8;
  v5 = 0;
  result = sysctlbyname("hw.cpufamily", &v5, &v4, 0, 0);
  if (v5 > 1741614738)
  {
    if (v5 > 2271604201)
    {
      if (v5 > 3660830780)
      {
        if (v5 == 3660830781)
        {
          v2 = 11;
          goto LABEL_33;
        }
        if (v5 == 3894312694)
        {
          v2 = 7;
          goto LABEL_33;
        }
        v1 = 4197663070;
LABEL_31:
        if (v5 == v1)
          goto LABEL_32;
        goto LABEL_41;
      }
      if (v5 != 2271604202)
      {
        if (v5 == 2465937352)
        {
          v2 = 5;
          goto LABEL_33;
        }
        goto LABEL_41;
      }
LABEL_32:
      v2 = 12;
      goto LABEL_33;
    }
    if (v5 > 1912690737)
    {
      if (v5 != 1912690738)
      {
        if (v5 == 1976872121)
        {
          v2 = 15;
          goto LABEL_33;
        }
        goto LABEL_41;
      }
      goto LABEL_32;
    }
    if (v5 == 1741614739)
    {
      v2 = 6;
      goto LABEL_33;
    }
    v3 = 1867590060;
LABEL_24:
    if (v5 == v3)
    {
      v2 = 13;
      goto LABEL_33;
    }
    goto LABEL_41;
  }
  if (v5 > 747742333)
  {
    if (v5 <= 1176831185)
    {
      if (v5 == 747742334)
      {
        v2 = 4;
        goto LABEL_33;
      }
      if (v5 == 933271106)
      {
        v2 = 3;
        goto LABEL_33;
      }
      goto LABEL_41;
    }
    if (v5 == 1176831186)
    {
      v2 = 9;
      goto LABEL_33;
    }
    v1 = 1598941843;
    goto LABEL_31;
  }
  if (v5 > 541402831)
  {
    if (v5 == 541402832)
    {
      v2 = 14;
      goto LABEL_33;
    }
    v3 = 678884789;
    goto LABEL_24;
  }
  if (v5 == 131287967)
  {
    v2 = 8;
    goto LABEL_33;
  }
  if (v5 == 458787763)
  {
    v2 = 10;
    goto LABEL_33;
  }
LABEL_41:
  result = _isMobileGestaltVirtualDevice();
  if ((_DWORD)result)
    v2 = 10;
  else
    v2 = 0;
LABEL_33:
  sDeviceType = v2;
  return result;
}

uint64_t CMPhotoCompressionSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t Instance;
  _BYTE *v7;
  const void **v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE *v11;
  __CFString *Value;
  __CFString *v13;
  CFTypeID v14;
  _BYTE *v15;
  const void *v16;
  const void *v17;
  _QWORD *v18;
  CFTypeID v19;
  BOOL v20;
  __CFDictionary *Mutable;
  uint64_t v22;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v27;
  void *keys;
  uint64_t v29;

  v29 = -1;
  if (!a3)
    return 4294950306;
  v3 = a3;
  FigKTraceInit();
  pthread_once(&CMPhotoCompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCompressionSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v7 = (_BYTE *)Instance;
  *(_QWORD *)(Instance + 24) = 0;
  v8 = (const void **)(Instance + 24);
  *(_QWORD *)(Instance + 32) = 0;
  v9 = (uint64_t *)(Instance + 32);
  *(_QWORD *)(Instance + 40) = 0;
  v10 = (uint64_t *)(Instance + 40);
  *(_BYTE *)(Instance + 64) = 0;
  v11 = (_BYTE *)(Instance + 64);
  *(_BYTE *)(Instance + 392) = 0;
  *(_DWORD *)(Instance + 396) = 0;
  *(_QWORD *)(Instance + 48) = 0;
  *(_QWORD *)(Instance + 56) = 0;
  LODWORD(keys) = 0;
  getpid();
  v7[65] = proc_can_use_foreground_hw() == 1;
  if (a2)
  {
    v27 = a1;
    Value = (__CFString *)CFDictionaryGetValue(a2, CFSTR("SurfacePool"));
    if (Value)
    {
      v13 = Value;
      v14 = CFGetTypeID(Value);
      if (v14 == CMPhotoSurfacePoolGetTypeID() || v13 == CFSTR("SurfacePoolOneShot"))
        *v8 = CFRetain(v13);
    }
    v15 = v7 + 392;
    v16 = CFDictionaryGetValue(a2, CFSTR("Scaler"));
    if (v16)
    {
      v17 = v16;
      v18 = v3;
      v19 = CFGetTypeID(v16);
      v20 = v19 == CMPhotoScaleAndRotateSessionGetTypeID();
      v3 = v18;
      v15 = v7 + 392;
      if (v20)
        *v9 = (uint64_t)CFRetain(v17);
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseCodecSessionPool"), v11);
    a1 = v27;
    if (*v11)
      CMPhotoCFDictionaryGetInt64IfPresent(a2, CFSTR("CodecSessionPoolTimeoutMilliseconds"), &v29);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ForceHighSpeedEncode"), v7 + 65);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("CacheDriverConnection"), v15);
    a2 = 0;
    if (*v11)
    {
      if (v29 != -1)
      {
        Mutable = CFDictionaryCreateMutable(v27, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        a2 = Mutable;
        if (!Mutable)
        {
          v23 = 0;
LABEL_34:
          v25 = 4294950305;
          goto LABEL_36;
        }
        v22 = CMPhotoCFDictionarySetInt64(Mutable, CFSTR("IdleTimeoutMilliseconds"), v29);
        if ((_DWORD)v22 || (v22 = CMPhotoCodecSessionPoolCreate(v27, a2, v10), (_DWORD)v22))
        {
          v25 = v22;
          v23 = 0;
          goto LABEL_36;
        }
      }
    }
  }
  if (!*v8)
  {
LABEL_22:
    v23 = 0;
    goto LABEL_25;
  }
  if (*v9)
  {
    CMPhotoScaleAndRotateSessionGetSurfacePool(*v9);
    FigCFEqual();
    goto LABEL_22;
  }
  keys = CFSTR("SurfacePool");
  v23 = CFDictionaryCreate(a1, (const void **)&keys, v8, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v23)
    goto LABEL_34;
  v24 = CMPhotoScaleAndRotateSessionCreate(a1, v23, v9);
  if (!(_DWORD)v24)
  {
LABEL_25:
    v25 = 0;
    *v3 = v7;
    if (!a2)
      goto LABEL_27;
    goto LABEL_26;
  }
  v25 = v24;
LABEL_36:
  CFRelease(v7);
  if (a2)
LABEL_26:
    CFRelease(a2);
LABEL_27:
  if (v23)
    CFRelease(v23);
  return v25;
}

uint64_t CMPhotoSurfacePoolGetTypeID()
{
  pthread_once(&CMPhotoSurfacePoolGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoSurfacePoolClass);
  return sCMPhotoSurfacePoolTypeID;
}

uint64_t CMPhotoDecompressionContainerCopyExifForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerCopyExifForIndexWithOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t _copyExifForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, CFTypeRef *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Data;
  CFTypeRef cf;
  unint64_t v14;

  cf = 0;
  v14 = a2;
  v9 = a1 + 40;
  v10 = _checkImageIndex(a1 + 40, &v14, 0);
  if ((_DWORD)v10)
    return v10;
  v10 = _parseExifIfNeeded(v9, 0);
  if ((_DWORD)v10)
    return v10;
  if (!*(_BYTE *)(a1 + 281))
    return 4294950303;
  if (!a6)
    goto LABEL_7;
  Data = CMPhotoByteStreamReadAndCreateData(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), (CFDataRef *)&cf, 0);
  if (!(_DWORD)Data)
  {
    *a6 = cf;
LABEL_7:
    Data = 0;
    if (a5)
      *a5 = 6;
    return Data;
  }
  if (cf)
    CFRelease(cf);
  return Data;
}

uint64_t _copyExifForIndex_0(uint64_t a1, uint64_t a2, CFIndex idx, uint64_t a4, _DWORD *a5, _QWORD *a6)
{
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFTypeRef v12;
  uint64_t result;

  if (a2)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 320);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 4294950303;
  if (a5)
    *a5 = 0;
  if (!a6)
    return 0;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), idx);
  if (ValueAtIndex)
    v12 = CFRetain(ValueAtIndex);
  else
    v12 = 0;
  result = 0;
  *a6 = v12;
  return result;
}

uint64_t _copyExifForIndex_1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __CFData **a6)
{
  return _copyMetadataForIndex(a1, 0, a2, a3, a5, a6);
}

void fjds_runRequestBlockAsynchronously(uint64_t a1, unsigned int a2, const void *a3)
{
  char v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD v11[6];
  _QWORD block[6];

  v6 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0);
  CFRetain((CFTypeRef)a1);
  if (v6)
  {
    if (*(_BYTE *)(a1 + 132))
    {
      v7 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
      *v7 = _Block_copy(a3);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
      v7[1] = 0;
      v8 = a1 + 16 * a2;
      **(_QWORD **)(v8 + 104) = v7;
      *(_QWORD *)(v8 + 104) = v7 + 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 64), (void *)a1, (dispatch_function_t)fjds_scheduleNextRequest);
      return;
    }
    v9 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fjds_runRequestBlockAsynchronously_block_invoke;
    block[3] = &unk_1E53F6980;
    block[4] = a3;
    block[5] = a1;
    v10 = block;
  }
  else
  {
    v9 = *(NSObject **)(a1 + 72);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __fjds_runRequestBlockAsynchronously_block_invoke_3;
    v11[3] = &unk_1E53F69A8;
    v11[4] = a3;
    v11[5] = a1;
    v10 = v11;
  }
  dispatch_async(v9, v10);
}

void fjds_removeRequestIDFromInflightList(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  os_unfair_lock_unlock(v4);
}

uint64_t fjds_register()
{
  uint64_t result;

  sCMPhotoJPEGDecodeSessionClass = 0;
  unk_1ECEF1F50 = "CMPhotoJPEGDecodeSession";
  qword_1ECEF1F58 = (uint64_t)fjds_init;
  unk_1ECEF1F60 = 0;
  qword_1ECEF1F68 = (uint64_t)fjds_finalize;
  unk_1ECEF1F70 = 0;
  qword_1ECEF1F78 = 0;
  unk_1ECEF1F80 = fjds_copyFormattingDesc;
  qword_1ECEF1F88 = (uint64_t)fjds_copyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sCMPhotoJPEGDecodeSessionID = result;
  return result;
}

double fjds_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

const void *fjds_generateRequestIDAndAddToInflightList(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v3 = (const void *)(*(_QWORD *)(a1 + 48) + 1);
  *(_QWORD *)(a1 + 48) = v3;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v3);
  os_unfair_lock_unlock(v2);
  return v3;
}

intptr_t fjds_enqueueDriverConnection(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 136), 0, (const void *)a2);
  os_unfair_lock_unlock(v4);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 152));
}

uint64_t _getFourCCValue(const __CFDictionary *a1)
{
  uint64_t v1;
  const __CFNumber *Value;
  const __CFNumber *v3;
  CFTypeID TypeID;
  unsigned int valuePtr;

  v1 = 875704422;
  valuePtr = 875704422;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("OutputPixelFormat"));
  if (Value)
  {
    v3 = Value;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3))
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
  }
  return v1;
}

uint64_t _dataProviderReleasePixelBufferBacking()
{
  return CGBitmapFreeData();
}

pthread_mutex_t **_callbackDataProviderReleaseBytePointer(pthread_mutex_t **result, uint64_t a2)
{
  pthread_mutex_t **v2;
  int v3;
  __CVBuffer *v4;
  int v5;
  pthread_mutex_t *v6;

  if (a2)
  {
    v2 = result;
    result = (pthread_mutex_t **)pthread_mutex_lock(*result);
    if (!(_DWORD)result)
    {
      v3 = *((_DWORD *)v2 + 7);
      if (v3)
      {
        v4 = (__CVBuffer *)v2[2];
        if (v4)
        {
          v5 = v3 - 1;
          *((_DWORD *)v2 + 7) = v5;
          if (!v5)
          {
            CVPixelBufferUnlockBaseAddress(v4, 0);
            v6 = v2[2];
            if (v6)
            {
              CFRelease(v6);
              v2[2] = 0;
            }
          }
        }
      }
      return (pthread_mutex_t **)pthread_mutex_unlock(*v2);
    }
  }
  return result;
}

void *_callbackDataProviderGetBytePointer(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *Data;
  const __CFAllocator *v7;
  int v8;
  OSStatus v9;
  int v10;
  __CVBuffer *v11;
  uint64_t PixelFormatType;
  int v13;
  void *BaseAddress;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferRef destinationBuffer;

  if (pthread_mutex_lock(*(pthread_mutex_t **)a1))
    return 0;
  pixelBuffer = 0;
  destinationBuffer = 0;
  pixelTransferSessionOut = 0;
  if (*(_QWORD *)(a1 + 16))
    goto LABEL_17;
  CMPhotoGetPixelBufferCLAPAsRect(*(__CVBuffer **)(a1 + 8));
  v3 = v2;
  v5 = v4;
  Data = (void *)CGBitmapAllocateData();
  if (!Data)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_29;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)v3, (unint64_t)v5, *(_DWORD *)(a1 + 24), Data, *(_QWORD *)(a1 + 32), (CVPixelBufferReleaseBytesCallback)_dataProviderReleasePixelBufferBacking, 0, 0, &destinationBuffer);
  if (v8)
  {
LABEL_29:
    v13 = v8;
    goto LABEL_18;
  }
  if (!VTPixelTransferSessionCreate(v7, &pixelTransferSessionOut))
  {
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED7E8], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    if (!VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]))
    {
      v9 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, *(CVPixelBufferRef *)(a1 + 8), destinationBuffer);
      if (v9 != -12905)
        goto LABEL_13;
      if (!CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), *(unsigned int *)(a1 + 24), (unint64_t)v3, (unint64_t)v5, 1, 0, 0, 1, 0, 0, &pixelBuffer))
      {
        v10 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, *(CVPixelBufferRef *)(a1 + 8), pixelBuffer);
        if (v10 == -12905)
        {
          v11 = *(__CVBuffer **)(a1 + 8);
          PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
          v10 = CMPhotoVTPixelTransferWorkaround(v11, PixelFormatType, 0, 1, 1, 1, 0, 0, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), &pixelBuffer);
        }
        if (!v10)
        {
          v9 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, pixelBuffer, destinationBuffer);
LABEL_13:
          if (!v9)
            goto LABEL_15;
        }
      }
    }
  }
  VTFillPixelBufferWithBlack();
LABEL_15:
  CVPixelBufferLockBaseAddress(destinationBuffer, 0);
  *(_QWORD *)(a1 + 16) = destinationBuffer;
  destinationBuffer = 0;
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
LABEL_17:
  v13 = 0;
LABEL_18:
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  if (v13)
  {
    BaseAddress = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 16));
    ++*(_DWORD *)(a1 + 28);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return BaseAddress;
}

void __fjds_runRequestBlockAsynchronously_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 56));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t SurfacePool_CleanupTimerHandler(uint64_t a1)
{
  uint64_t result;
  dispatch_time_t v3;
  dispatch_time_t v4;

  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 368) != -1)
    {
      v3 = dispatch_time(0, 0);
      v4 = dispatch_time(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 368));
      if (dispatch_time(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 376)) >= v3)
      {
        if (v4 < v3 && !*(_BYTE *)(a1 + 392))
        {
          ++*(_QWORD *)(a1 + 400);
          *(_BYTE *)(a1 + 392) = 1;
          Pool_Cleanup((int64x2_t *)(a1 + 24), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 120), 1, 0);
          Pool_Cleanup((int64x2_t *)(a1 + 168), *(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 264), 1, 0);
        }
      }
      else
      {
        SurfacePool_PerformFullClean(a1);
      }
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  }
  return result;
}

unint64_t JPEGCalculateOutputDimensions(unint64_t result, unint64_t a2, int a3, int a4, int a5, int a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _DWORD *a10, _DWORD *a11)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v37;
  int v38;
  _QWORD *v39;

  v12 = a2;
  v13 = result;
  LODWORD(v14) = 0;
  if (result <= a2)
    v15 = a2;
  else
    v15 = result;
  if (result >= a2)
    v16 = a2;
  else
    v16 = result;
  if (a3 && v15 > a3)
  {
    v37 = a5;
    v38 = a6;
    v39 = a7;
    v18 = 0;
    v19 = (int)(a3 & 0xFFFFFFFE);
    do
    {
      v14 = v18++;
      result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if ((_DWORD)result)
        v20 = v15 >> v18 << v18 == v15;
      else
        v20 = 1;
      if (v20)
        v21 = v15 >> v18;
      else
        v21 = (v15 >> v18) + 1;
      if (v21 < v19)
        break;
      result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      v22 = !(_DWORD)result || v16 >> v18 << v18 == v16;
      v23 = !v22;
    }
    while (v14 <= 2 && v16 >> v18 != v23 << 63 >> 63);
    if ((_DWORD)v14)
    {
      if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
        v24 = v13 >> v14 << v14 == v13;
      else
        v24 = 1;
      if (v24)
        v13 >>= v14;
      else
        v13 = (v13 >> v14) + 1;
      result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if ((_DWORD)result)
        v25 = v12 >> v14 << v14 == v12;
      else
        v25 = 1;
      if (v25)
        v12 >>= v14;
      else
        v12 = (v12 >> v14) + 1;
      if (v13 <= v12)
        v15 = v12;
      else
        v15 = v13;
    }
    v26 = (float)a3 / (float)v15;
    if (v26 > 1.0)
      v26 = 1.0;
    a7 = v39;
    a6 = v38;
    if (a4 && v26 > 0.79)
    {
      v27 = v13;
      v28 = v12;
      a5 = v37;
    }
    else
    {
      v27 = (unint64_t)((float)(v26 * (float)v13) + 0.5);
      v28 = (unint64_t)(float)((float)(v26 * (float)v12) + 0.5);
      v29 = v13 > v27 || v12 > v28;
      a5 = v37;
      if (v29)
      {
        v27 &= ~1uLL;
        v28 &= ~1uLL;
      }
    }
  }
  else
  {
    v27 = result;
    v28 = a2;
  }
  if (a5)
  {
    if ((a6 - 1) > 7)
      v30 = 0;
    else
      v30 = transformMap[a6 - 1];
    v32 = v27 & 0xFFFFFFFFFFFFFFFELL;
    if (v30)
      v28 &= ~1uLL;
    else
      v32 = v27;
    if ((v30 & 4) != 0)
      v27 = v28;
    else
      v27 = v32;
    if ((v30 & 4) != 0)
    {
      v28 = v32;
      v31 = 0;
    }
    else
    {
      v31 = 1;
    }
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  if (v27)
    v33 = v27;
  else
    v33 = 2;
  if (!v28)
    LODWORD(v28) = 2;
  if (a8)
  {
    *a8 = v33;
    a8[1] = (int)v28;
  }
  if (a9)
  {
    v34 = v31 == 0;
    if (v31)
      v35 = v33;
    else
      v35 = v28;
    if (v34)
      LODWORD(v28) = v33;
    *a9 = v35;
    a9[1] = (int)v28;
  }
  if (a7)
  {
    *a7 = (int)v13;
    a7[1] = (int)v12;
  }
  if (a10)
    *a10 = v30;
  if (a11)
    *a11 = v14;
  return result;
}

uint64_t CMPhotoLeastCommonMultiple(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 >= 0)
    v2 = a1;
  else
    v2 = -a1;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if (v2 >= v3)
    v2 = v3;
  if (v2)
  {
    if (v2 < 1)
    {
      v5 = v4;
    }
    else
    {
      do
      {
        v5 = v2;
        v2 = v4 % v2;
        v4 = v5;
      }
      while (v2 > 0);
    }
  }
  else if ((unint64_t)v4 <= 1)
  {
    v5 = 1;
  }
  else
  {
    v5 = v4;
  }
  return a2 * a1 / v5;
}

const void *CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  const void *RequestIDAndAddToInflightList;
  const void *Value;
  CFTypeID v12;
  int v13;
  NSObject *global_queue;
  _QWORD v16[7];
  int v17;
  _QWORD v18[9];
  char v19;
  char v20;

  v20 = 1;
  if (!a1)
    goto LABEL_14;
  if (*(_BYTE *)(a1 + 16))
  {
    v13 = -16076;
    goto LABEL_15;
  }
  if (!a2
    && (!theDict
     || (Value = CFDictionaryGetValue(theDict, CFSTR("SourceIOSurface"))) == 0
     || (v12 = CFGetTypeID(Value), v12 != IOSurfaceGetTypeID()))
    || !a4)
  {
LABEL_14:
    v13 = FigSignalErrorAt();
    if (!v13)
      return 0;
LABEL_15:
    global_queue = dispatch_get_global_queue(0, 0);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke_2;
    v16[3] = &unk_1E53F6910;
    v16[4] = a4;
    v16[5] = a1;
    v16[6] = 0;
    v17 = v13;
    dispatch_async(global_queue, v16);
    return 0;
  }
  v8 = unpackCGImageRequestOptions(theDict, &v20);
  if (v8)
  {
    v13 = v8;
    goto LABEL_15;
  }
  v9 = _getBoolValue_0(theDict, CFSTR("HighPriority"), 0) == 0;
  RequestIDAndAddToInflightList = fjds_generateRequestIDAndAddToInflightList(a1);
  if (a2)
    CFRetain(a2);
  if (theDict)
    CFRetain(theDict);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke;
  v18[3] = &unk_1E53F68E8;
  v18[6] = a1;
  v18[7] = RequestIDAndAddToInflightList;
  v18[8] = a2;
  v19 = v20;
  v18[4] = a4;
  v18[5] = theDict;
  fjds_runRequestBlockAsynchronously(a1, v9, v18);
  return RequestIDAndAddToInflightList;
}

uint64_t SlimXEncodeBlocks_NEON(uint64_t *a1)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t *v20;
  int16x8_t v21;
  int16x8_t v22;
  uint16x8_t v23;
  int16x8_t *v24;
  int16x8_t *v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  uint8x8_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  uint8x8_t *v41;
  int64x2_t v42;
  int64x2_t v43;
  uint8x8_t *v44;
  uint8x8_t *v45;
  int16x8_t v46;
  int16x8_t v47;
  uint8x8_t *v48;
  int16x8_t v49;
  uint8x8_t *v50;
  int16x8_t v51;
  uint8x8_t *v52;
  int16x8_t v53;
  uint8x8_t *v54;
  int16x8_t v55;
  uint8x8_t *v56;
  int16x8_t v57;
  int16x8_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint8x8_t *v65;
  int32x4_t v66;
  uint8x8_t *v67;
  int32x4_t v68;
  uint8x8_t *v69;
  int32x4_t v70;
  uint8x8_t *v71;
  int32x4_t v72;
  uint8x8_t *v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint8x8_t *v84;
  int32x4_t v85;
  int32x4_t v86;
  uint8x8_t *v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int *v101;
  int16x8_t *v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t *v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t *v122;
  int16x8_t v123;
  int16x8_t *v124;
  int16x8_t v125;
  int16x8_t *v126;
  int16x8_t v127;
  int16x8_t *v128;
  int16x8_t v129;
  int16x8_t *v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int16x8_t *v143;
  int16x8_t v144;
  int16x8_t *v145;
  int16x8_t v146;
  int16x8_t *v147;
  int16x8_t v148;
  int16x8_t *v149;
  int16x8_t v150;
  int16x8_t *v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int16x8_t *v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t *v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int16x8_t *v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t *v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t *v182;
  int16x8_t v183;
  int16x8_t *v184;
  int16x8_t v185;
  int16x8_t *v186;
  int16x8_t v187;
  int16x8_t *v188;
  int16x8_t v189;
  int16x8_t *v190;
  int16x8_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t *v204;
  int32x4_t v205;
  int32x4_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  const __int16 *v215;
  const __int16 *v216;
  uint64_t v217;
  const __int16 *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t *v224;
  int16x8_t v225;
  int16x8_t *v226;
  int16x8_t v227;
  int16x8_t *v228;
  int16x8_t v229;
  int16x8_t *v230;
  int16x8_t v231;
  int16x8_t *v232;
  int16x8_t v233;
  int16x8_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t *v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t *v245;
  int16x8_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t *v252;
  int32x4_t v253;
  int32x4_t *v254;
  int32x4_t v255;
  int32x4_t *v256;
  int32x4_t v257;
  int32x4_t *v258;
  int32x4_t v259;
  int32x4_t *v260;
  int32x4_t v261;
  int32x4_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int16x8_t *v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t *v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int v287;
  uint16x8_t v288;
  uint16x8_t v289;
  uint16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  uint16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  _WORD *v301;
  uint16x8_t v302;
  unsigned __int32 v303;
  uint16x8_t v304;
  unsigned int v305;
  _WORD *v306;
  unsigned __int32 v307;
  unsigned int v309;
  __int16 v310;
  uint16x8_t v311;
  unsigned __int32 v312;
  uint16x8_t v313;
  unsigned int v314;
  _WORD *v315;
  unsigned __int32 v316;
  unsigned int v318;
  __int16 v319;
  uint16x8_t v320;
  unsigned __int32 v321;
  uint16x8_t v322;
  unsigned int v323;
  _WORD *v324;
  unsigned __int16 v325;
  unsigned __int32 v326;
  unsigned int v328;
  __int16 v329;
  __int16 v330;
  uint16x8_t v331;
  unsigned __int32 v332;
  uint16x8_t v333;
  unsigned int v334;
  _WORD *v335;
  int v336;
  unsigned __int32 v337;
  unsigned int v338;
  uint64_t v339;
  int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned __int16 *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  unsigned int v349;
  int v350;
  int v351;
  int v352;
  unint64_t *v353;
  unsigned int v354;
  uint64_t v356;
  uint64_t *v357;
  int v358;
  int v359;
  uint64_t v360;
  unint64_t *v361;
  unsigned int v362;
  const __int16 *v363;
  int16x8_t v364;
  int8x16_t v365;
  int8x16_t v366;
  const __int16 *v367;
  int16x8_t v368;
  int8x16_t v369;
  int8x16_t v370;
  const __int16 *v371;
  int16x8_t v372;
  int8x16_t v373;
  int8x16_t v374;
  const __int16 *v375;
  int16x8_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int v379;
  int v380;
  int v381;
  uint16x8_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  unsigned __int32 v391;
  uint64_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  unsigned __int32 v396;
  uint64_t v397;
  uint64_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int v457;
  int v458;
  uint16x8_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  unsigned __int32 v468;
  uint64_t v469;
  uint64_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int8x16_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int v500;
  int8x16_t v501;
  int8x16_t v502;
  int8x16_t v503;
  unsigned __int32 v504;
  uint64_t v505;
  uint64_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  int8x16_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int8x16_t v527;
  int8x16_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int8x16_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  int8x16_t v555;
  int8x16_t v556;
  int8x16_t v557;
  int8x16_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int8x16_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int v565;
  int v566;
  uint16x8_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  unsigned __int32 v576;
  uint64_t v577;
  uint64_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int8x16_t v585;
  int8x16_t v586;
  int8x16_t v587;
  int8x16_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int8x16_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  int8x16_t v618;
  int8x16_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int v637;
  int v638;
  uint16x8_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  uint64_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int8x16_t v656;
  int8x16_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int8x16_t v660;
  int8x16_t v661;
  int8x16_t v662;
  int8x16_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int8x16_t v676;
  int8x16_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int8x16_t v681;
  int8x16_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int8x16_t v687;
  int8x16_t v688;
  int8x16_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  uint64_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  int8x16_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  unint64_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  unint64_t v727;
  int v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  unsigned __int32 v732;
  uint64_t v733;
  uint64_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int8x16_t v746;
  int8x16_t v747;
  int8x16_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int8x16_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  int8x16_t v757;
  int8x16_t v758;
  int8x16_t v759;
  int8x16_t v760;
  unint64_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  unint64_t v765;
  int v766;
  int8x16_t v767;
  int8x16_t v768;
  int8x16_t v769;
  unsigned __int32 v770;
  uint64_t v771;
  uint64_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  int8x16_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  unint64_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  unint64_t v803;
  int v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  unsigned __int32 v808;
  uint64_t v809;
  uint64_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  int8x16_t v817;
  int8x16_t v818;
  int8x16_t v819;
  int8x16_t v820;
  int8x16_t v821;
  int8x16_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  unint64_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int8x16_t v840;
  unint64_t v841;
  int v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  unsigned __int32 v846;
  uint64_t v847;
  uint64_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  int8x16_t v864;
  int8x16_t v865;
  int8x16_t v866;
  int8x16_t v867;
  int8x16_t v868;
  int8x16_t v869;
  int8x16_t v870;
  int8x16_t v871;
  int8x16_t v872;
  int8x16_t v873;
  int8x16_t v874;
  unint64_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  unint64_t v879;
  int v880;
  int8x16_t v881;
  int8x16_t v882;
  int8x16_t v883;
  unsigned __int32 v884;
  uint64_t v885;
  uint64_t v886;
  int8x16_t v887;
  int8x16_t v888;
  int8x16_t v889;
  int8x16_t v890;
  int8x16_t v891;
  int8x16_t v892;
  int8x16_t v893;
  int8x16_t v894;
  int8x16_t v895;
  int8x16_t v896;
  int8x16_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int8x16_t v903;
  int8x16_t v904;
  int8x16_t v905;
  int8x16_t v906;
  int8x16_t v907;
  int8x16_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  unint64_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  unint64_t v917;
  int v918;
  int8x16_t v919;
  int8x16_t v920;
  unsigned __int32 v921;
  uint64_t v922;
  uint64_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int8x16_t v926;
  int8x16_t v927;
  int8x16_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int8x16_t v932;
  int8x16_t v933;
  int8x16_t v934;
  int8x16_t v935;
  int8x16_t v936;
  int8x16_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int8x16_t v941;
  int8x16_t v942;
  unint64_t v943;
  int8x16_t v944;
  int8x16_t v945;
  unint64_t v946;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint16x8_t v952;
  uint16x8_t v953;
  int8x16_t v954;
  int64x2_t v955;
  int16x8_t v956;
  int8x16_t v957;
  int8x16_t v958;
  uint16x8_t v959;
  int8x16_t v960;
  int64x2_t v961;
  int16x8_t v962;
  int8x16_t v963;
  int8x16_t v964;
  uint16x8_t v965;
  int8x16_t v966;
  int8x16_t v967;
  int64x2_t v968;
  int16x8_t v969;
  int8x16_t v970;
  int8x16_t v971;
  int8x16_t v972;
  uint16x8_t v973;
  int8x16_t v974;
  int8x16_t v975;
  int8x16_t v976;
  int64x2_t v977;
  int16x8_t v978;
  int8x16_t v979;
  int8x16_t v980;
  int8x16_t v981;
  uint16x8_t v982;
  int8x16_t v983;
  int8x16_t v984;
  int8x16_t v985;
  int8x16_t v986;
  int64x2_t v987;
  int16x8_t v988;
  int8x16_t v989;
  int8x16_t v990;
  int8x16_t v991;
  int8x16_t v992;
  uint16x8_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int8x16_t v998;
  int64x2_t v999;
  int16x8_t v1000;
  int8x16_t v1001;
  int8x16_t v1002;
  int8x16_t v1003;
  int8x16_t v1004;
  uint16x8_t v1005;
  int8x16_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  int8x16_t v1009;
  int8x16_t v1010;
  int8x16_t v1011;
  int8x16_t v1012;
  int8x16_t v1013;
  int8x16_t v1014;
  int8x16_t v1015;
  int8x16_t v1016;
  int8x16_t v1017;
  int8x16_t v1018;
  int8x16_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  int8x16_t v1024;
  int8x16_t v1025;
  int8x16_t v1026;
  int8x16_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  uint64_t v1030;
  int16x4x3_t v1031;
  int16x4x3_t v1032;

  v1030 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_BYTE *)a1[2];
  v5 = *((unsigned int *)a1 + 8);
  v4 = *((_DWORD *)a1 + 9);
  v6 = *((_DWORD *)a1 + 2);
  v7 = *((int *)a1 + 3);
  v8 = predictionPattern[v5];
  v9 = a1[10];
  v10 = *(_QWORD *)(v9 + 128);
  if (v10 && *(_QWORD *)(v9 + 88) + v10 - (uint64_t)v3 < 160)
    return 4294951888;
  v11 = 4294951891;
  v12 = (uint16x8_t)vdupq_n_s16(-v4);
  switch((int)v5)
  {
    case 0:
      v34 = (int64x2_t)vmovl_u8(*(uint8x8_t *)v2);
      v35 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      v36 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      v37 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      v38 = (uint8x8_t *)(v2 + v7 + v7);
      v39 = (int64x2_t)vmovl_u8(*v38);
      v40 = (int64x2_t)vmovl_u8(v38[1]);
      v41 = (uint8x8_t *)((char *)v38 + v7);
      v42 = (int64x2_t)vmovl_u8(*v41);
      v43 = (int64x2_t)vmovl_u8(v41[1]);
      goto LABEL_22;
    case 1:
      v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v2);
      v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      v44 = (uint8x8_t *)(v2 + v7 + v7);
      v18 = (int16x8_t)vmovl_u8(*v44);
      v19 = (int16x8_t)vmovl_u8(v44[1]);
      v45 = (uint8x8_t *)((char *)v44 + v7);
      v21 = (int16x8_t)vmovl_u8(*v45);
      v22 = (int16x8_t)vmovl_u8(v45[1]);
      goto LABEL_38;
    case 2:
      v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v2);
      v47 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      v48 = (uint8x8_t *)(v2 + v7 + v7);
      v49 = (int16x8_t)vmovl_u8(*v48);
      v50 = (uint8x8_t *)((char *)v48 + v7);
      v51 = (int16x8_t)vmovl_u8(*v50);
      v52 = (uint8x8_t *)((char *)v50 + v7);
      v53 = (int16x8_t)vmovl_u8(*v52);
      v54 = (uint8x8_t *)((char *)v52 + v7);
      v55 = (int16x8_t)vmovl_u8(*v54);
      v56 = (uint8x8_t *)((char *)v54 + v7);
      v57 = (int16x8_t)vmovl_u8(*v56);
      v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v56 + v7));
      v26 = vtrn1q_s16(v46, v53);
      v59 = (int64x2_t)vtrn2q_s16(v46, v53);
      v28 = vtrn1q_s16(v49, v57);
      v60 = (int64x2_t)vtrn2q_s16(v49, v57);
      v61 = (int64x2_t)vtrn1q_s16(v47, v55);
      v31 = vtrn2q_s16(v47, v55);
      v62 = (int64x2_t)vtrn1q_s16(v51, v58);
      v33 = vtrn2q_s16(v51, v58);
      v29 = (int16x8_t)vzip2q_s64(v61, v59);
      v27.i64[0] = v61.i64[0];
      v27.i64[1] = v59.i64[0];
      v32 = (int16x8_t)vzip2q_s64(v62, v60);
      v30.i64[0] = v62.i64[0];
      v30.i64[1] = v60.i64[0];
      goto LABEL_64;
    case 3:
      v63 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v2);
      v64 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      v65 = (uint8x8_t *)(v2 + v7 + v7);
      v66 = (int32x4_t)vmovl_u8(*v65);
      v67 = (uint8x8_t *)((char *)v65 + v7);
      v68 = (int32x4_t)vmovl_u8(*v67);
      v69 = (uint8x8_t *)((char *)v67 + v7);
      v70 = (int32x4_t)vmovl_u8(*v69);
      v71 = (uint8x8_t *)((char *)v69 + v7);
      v72 = (int32x4_t)vmovl_u8(*v71);
      v73 = (uint8x8_t *)((char *)v71 + v7);
      v74 = (int32x4_t)vmovl_u8(*v73);
      v75 = (int32x4_t)vmovl_u8(*(uint8x8_t *)((char *)v73 + v7));
      v26 = (int16x8_t)vtrn1q_s32(v63, v70);
      v76 = (int64x2_t)vtrn2q_s32(v63, v70);
      v28 = (int16x8_t)vtrn1q_s32(v64, v72);
      v77 = (int64x2_t)vtrn2q_s32(v64, v72);
      v78 = (int64x2_t)vtrn1q_s32(v66, v74);
      v31 = (int16x8_t)vtrn2q_s32(v66, v74);
      v79 = (int64x2_t)vtrn1q_s32(v68, v75);
      v33 = (int16x8_t)vtrn2q_s32(v68, v75);
      v27 = (int16x8_t)vzip1q_s64(v78, v76);
      v29 = (int16x8_t)vzip2q_s64(v78, v76);
      v30 = (int16x8_t)vzip1q_s64(v79, v77);
      v32 = (int16x8_t)vzip2q_s64(v79, v77);
      goto LABEL_64;
    case 6:
      v80 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v2);
      v81 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      v82 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      v83 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      v84 = (uint8x8_t *)(v2 + v7 + v7);
      v85 = (int32x4_t)vmovl_u8(*v84);
      v86 = (int32x4_t)vmovl_u8(v84[1]);
      v87 = (uint8x8_t *)((char *)v84 + v7);
      v88 = (int32x4_t)vmovl_u8(*v87);
      v89 = (int32x4_t)vmovl_u8(v87[1]);
      if (v4)
      {
        v80 = (int32x4_t)vshlq_u16((uint16x8_t)v80, v12);
        v82 = (int32x4_t)vshlq_u16((uint16x8_t)v82, v12);
        v85 = (int32x4_t)vshlq_u16((uint16x8_t)v85, v12);
        v88 = (int32x4_t)vshlq_u16((uint16x8_t)v88, v12);
        v81 = (int32x4_t)vshlq_u16((uint16x8_t)v81, v12);
        v83 = (int32x4_t)vshlq_u16((uint16x8_t)v83, v12);
        v86 = (int32x4_t)vshlq_u16((uint16x8_t)v86, v12);
        v89 = (int32x4_t)vshlq_u16((uint16x8_t)v89, v12);
      }
      v90 = (int16x8_t)vtrn1q_s32(v80, v81);
      v91 = (int16x8_t)vtrn2q_s32(v80, v81);
      v92 = (int16x8_t)vtrn1q_s32(v82, v83);
      v93 = (int16x8_t)vtrn2q_s32(v82, v83);
      v94 = (int16x8_t)vtrn1q_s32(v85, v86);
      v95 = (int16x8_t)vtrn2q_s32(v85, v86);
      v96 = (int16x8_t)vtrn1q_s32(v88, v89);
      v97 = (int16x8_t)vtrn2q_s32(v88, v89);
      v26 = vtrn1q_s16(v90, v94);
      v27 = vtrn2q_s16(v90, v94);
      v28 = vtrn1q_s16(v92, v96);
      v30 = vtrn2q_s16(v92, v96);
      v29 = vtrn1q_s16(v91, v95);
      v31 = vtrn2q_s16(v91, v95);
      v32 = vtrn1q_s16(v93, v97);
      v33 = vtrn2q_s16(v93, v97);
      goto LABEL_64;
    case 7:
      v1029 = 0uLL;
      v1028 = 0uLL;
      vectorload_1x16_packed10((unsigned int *)v2, v6, &v1029, &v1028);
      v987 = v1028;
      v999 = v1029;
      v98 = (unsigned int *)(v2 + v7);
      vectorload_1x16_packed10(v98, v6, &v1029, &v1028);
      v968 = v1028;
      v977 = v1029;
      v99 = (unsigned int *)((char *)v98 + v7);
      vectorload_1x16_packed10(v99, v6, &v1029, &v1028);
      v955 = v1028;
      v961 = v1029;
      vectorload_1x16_packed10((unsigned int *)((char *)v99 + v7), v6, &v1029, &v1028);
      v40 = v955;
      v39 = v961;
      v37 = v968;
      v36 = v977;
      v35 = v987;
      v34 = v999;
      v43 = v1028;
      v42 = v1029;
LABEL_22:
      v26.i64[0] = v34.i64[0];
      v26.i64[1] = v39.i64[0];
      v27 = (int16x8_t)vzip2q_s64(v34, v39);
      v28.i64[0] = v36.i64[0];
      v28.i64[1] = v42.i64[0];
      v29.i64[0] = v35.i64[0];
      v29.i64[1] = v40.i64[0];
      v30 = (int16x8_t)vzip2q_s64(v36, v42);
      v31 = (int16x8_t)vzip2q_s64(v35, v40);
      v32.i64[0] = v37.i64[0];
      v32.i64[1] = v43.i64[0];
      v33 = (int16x8_t)vzip2q_s64(v37, v43);
      goto LABEL_64;
    case 8:
      v1029 = 0uLL;
      v1028 = 0uLL;
      vectorload_1x16_packed10((unsigned int *)v2, v6, &v1029, &v1028);
      v988 = (int16x8_t)v1028;
      v1000 = (int16x8_t)v1029;
      v100 = (unsigned int *)(v2 + v7);
      vectorload_1x16_packed10(v100, v6, &v1029, &v1028);
      v969 = (int16x8_t)v1028;
      v978 = (int16x8_t)v1029;
      v101 = (unsigned int *)((char *)v100 + v7);
      vectorload_1x16_packed10(v101, v6, &v1029, &v1028);
      v956 = (int16x8_t)v1028;
      v962 = (int16x8_t)v1029;
      vectorload_1x16_packed10((unsigned int *)((char *)v101 + v7), v6, &v1029, &v1028);
      v19 = v956;
      v18 = v962;
      v16 = v969;
      v15 = v978;
      v14 = v988;
      v13 = v1000;
      v22 = (int16x8_t)v1028;
      v21 = (int16x8_t)v1029;
      goto LABEL_38;
    case 10:
    case 24:
      v13 = *(int16x8_t *)v2;
      v14 = *(int16x8_t *)(v2 + 16);
      v15 = *(int16x8_t *)(v2 + v7);
      v16 = *(int16x8_t *)(v2 + v7 + 16);
      v17 = (int16x8_t *)(v2 + v7 + v7);
      v18 = *v17;
      v19 = v17[1];
      v20 = (int16x8_t *)((char *)v17 + v7);
      v21 = *v20;
      v22 = v20[1];
      if (*((_BYTE *)a1 + 40))
      {
        v23 = vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vshlq_n_s16(v13, 0xCuLL), (uint16x8_t)vshlq_n_s16(v15, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v18, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v21, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v14, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v16, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v19, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v22, 0xCuLL));
        v23.i16[0] = vmaxvq_u16(v23);
        if (v23.i32[0])
          return 4294951887;
      }
      if (v4)
      {
        v13 = (int16x8_t)vshlq_u16((uint16x8_t)v13, v12);
        v15 = (int16x8_t)vshlq_u16((uint16x8_t)v15, v12);
        v18 = (int16x8_t)vshlq_u16((uint16x8_t)v18, v12);
        v21 = (int16x8_t)vshlq_u16((uint16x8_t)v21, v12);
        v14 = (int16x8_t)vshlq_u16((uint16x8_t)v14, v12);
        v16 = (int16x8_t)vshlq_u16((uint16x8_t)v16, v12);
        v19 = (int16x8_t)vshlq_u16((uint16x8_t)v19, v12);
        v22 = (int16x8_t)vshlq_u16((uint16x8_t)v22, v12);
      }
      if ((_DWORD)v5 == 11)
      {
LABEL_38:
        v26 = vtrn1q_s16(v13, v18);
        v27 = vtrn2q_s16(v13, v18);
        v28 = vtrn1q_s16(v15, v21);
        v30 = vtrn2q_s16(v15, v21);
        v29 = vtrn1q_s16(v14, v19);
        v31 = vtrn2q_s16(v14, v19);
        v32 = vtrn1q_s16(v16, v22);
        v33 = vtrn2q_s16(v16, v22);
      }
      else
      {
        v26.i64[0] = v13.i64[0];
        v26.i64[1] = v18.i64[0];
        v27 = (int16x8_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)v18);
        v28.i64[0] = v15.i64[0];
        v28.i64[1] = v21.i64[0];
        v29.i64[0] = v14.i64[0];
        v29.i64[1] = v19.i64[0];
        v30 = (int16x8_t)vzip2q_s64((int64x2_t)v15, (int64x2_t)v21);
        v31 = (int16x8_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v19);
        v32.i64[0] = v16.i64[0];
        v32.i64[1] = v22.i64[0];
        v33 = (int16x8_t)vzip2q_s64((int64x2_t)v16, (int64x2_t)v22);
      }
LABEL_61:
      if (v5 >= 0x11 && *((_DWORD *)a1 + 27))
      {
        v287 = *((unsigned __int16 *)a1 + 56);
        v288 = (uint16x8_t)vdupq_n_s16(16 - v287);
        v289 = (uint16x8_t)vdupq_n_s16(v287 - 1);
        v290 = (uint16x8_t)vdupq_n_s16(-v287);
        v291 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v26));
        v292.i64[0] = -1;
        v292.i64[1] = -1;
        v293.i64[0] = 0x1000100010001;
        v293.i64[1] = 0x1000100010001;
        v26 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v291, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v26, (int16x8_t)vshlq_u16((uint16x8_t)v26, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v291, v292))), (uint16x8_t)vnegq_s16(v291)));
        v294 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v28));
        v28 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v294, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v28, (int16x8_t)vshlq_u16((uint16x8_t)v28, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v294, v292))), (uint16x8_t)vnegq_s16(v294)));
        v295 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v27));
        v27 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v295, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v27, (int16x8_t)vshlq_u16((uint16x8_t)v27, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v295, v292))), (uint16x8_t)vnegq_s16(v295)));
        v296 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v30));
        v30 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v296, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v30, (int16x8_t)vshlq_u16((uint16x8_t)v30, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v296, v292))), (uint16x8_t)vnegq_s16(v296)));
        v297 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v29));
        v29 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v297, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v29, (int16x8_t)vshlq_u16((uint16x8_t)v29, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v297, v292))), (uint16x8_t)vnegq_s16(v297)));
        v298 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v32));
        v32 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v298, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v32, (int16x8_t)vshlq_u16((uint16x8_t)v32, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v298, v292))), (uint16x8_t)vnegq_s16(v298)));
        v299 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v31));
        v31 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v299, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v31, (int16x8_t)vshlq_u16((uint16x8_t)v31, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v299, v292))), (uint16x8_t)vnegq_s16(v299)));
        v300 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v33));
        v33 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v300, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v33, (int16x8_t)vshlq_u16((uint16x8_t)v33, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v300, v292))), (uint16x8_t)vnegq_s16(v300)));
      }
LABEL_64:
      v301 = (_WORD *)a1 + 21;
      v302 = vminq_u16((uint16x8_t)v26, (uint16x8_t)v28);
      v302.i16[0] = vminvq_u16(v302);
      v303 = v302.i32[0];
      v304 = vmaxq_u16((uint16x8_t)v26, (uint16x8_t)v28);
      v304.i16[0] = vmaxvq_u16(v304);
      v305 = 32 - __clz(v304.i32[0] - v303);
      v306 = (_WORD *)((char *)a1 + ((v8 >> 9) & 0x7FFFF8) + 42);
      if (v304.i32[0] == v303)
        LOWORD(v305) = 0;
      *((_WORD *)a1 + 22) = v305 - *v306;
      *((_WORD *)a1 + 21) = v305;
      v307 = (unsigned __int16)v306[2];
      if (v303 < v307 || (int)((1 << v305) + v307) <= v304.i32[0])
      {
        v309 = (v303 - (((1 << v305) - (v304.i32[0] - v303)) >> 1)) & ~((int)(v303
                                                                            - (((1 << v305) - (v304.i32[0] - v303)) >> 1)) >> 31);
        v310 = v309 - v307;
        LOWORD(v307) = v309;
      }
      else
      {
        v310 = 0;
      }
      v311 = vminq_u16((uint16x8_t)v27, (uint16x8_t)v30);
      v311.i16[0] = vminvq_u16(v311);
      v312 = v311.i32[0];
      v313 = vmaxq_u16((uint16x8_t)v27, (uint16x8_t)v30);
      v313.i16[0] = vmaxvq_u16(v313);
      v314 = 32 - __clz(v313.i32[0] - v312);
      *((_WORD *)a1 + 24) = v310;
      *((_WORD *)a1 + 23) = v307;
      v315 = &v301[4 * ((v8 >> 8) & 0xF)];
      if (v313.i32[0] == v312)
        LOWORD(v314) = 0;
      *((_WORD *)a1 + 26) = v314 - *v315;
      *((_WORD *)a1 + 25) = v314;
      v316 = (unsigned __int16)v315[2];
      if (v312 < v316 || (int)((1 << v314) + v316) <= v313.i32[0])
      {
        v318 = (v312 - (((1 << v314) - (v313.i32[0] - v312)) >> 1)) & ~((int)(v312
                                                                            - (((1 << v314) - (v313.i32[0] - v312)) >> 1)) >> 31);
        v319 = v318 - v316;
        LOWORD(v316) = v318;
      }
      else
      {
        v319 = 0;
      }
      v320 = vminq_u16((uint16x8_t)v29, (uint16x8_t)v32);
      v320.i16[0] = vminvq_u16(v320);
      v321 = v320.i32[0];
      v322 = vmaxq_u16((uint16x8_t)v29, (uint16x8_t)v32);
      v322.i16[0] = vmaxvq_u16(v322);
      v323 = 32 - __clz(v322.i32[0] - v321);
      *((_WORD *)a1 + 28) = v319;
      *((_WORD *)a1 + 27) = v316;
      v324 = &v301[4 * (v8 >> 4)];
      if (v322.i32[0] == v321)
        v325 = 0;
      else
        v325 = v323;
      *((_WORD *)a1 + 30) = v325 - *v324;
      *((_WORD *)a1 + 29) = v325;
      v326 = (unsigned __int16)v324[2];
      if (v321 < v326 || (int)((1 << v325) + v326) <= v322.i32[0])
      {
        v328 = (v321 - (((1 << v325) - (v322.i32[0] - v321)) >> 1)) & ~((int)(v321
                                                                            - (((1 << v325) - (v322.i32[0] - v321)) >> 1)) >> 31);
        v329 = v328 - v326;
        LOWORD(v326) = v328;
      }
      else
      {
        v329 = 0;
      }
      *((_WORD *)a1 + 32) = v329;
      *((_WORD *)a1 + 31) = v326;
      if ((_DWORD)v5 == 19)
      {
        v330 = *((_WORD *)a1 + 36);
      }
      else
      {
        v331 = vminq_u16((uint16x8_t)v31, (uint16x8_t)v33);
        v331.i16[0] = vminvq_u16(v331);
        v332 = v331.i32[0];
        v333 = vmaxq_u16((uint16x8_t)v31, (uint16x8_t)v33);
        v333.i16[0] = vmaxvq_u16(v333);
        v334 = 32 - __clz(v333.i32[0] - v332);
        v335 = &v301[4 * (v8 & 0xF)];
        if (v333.i32[0] == v332)
          LOWORD(v334) = 0;
        *((_WORD *)a1 + 34) = v334 - *v335;
        *((_WORD *)a1 + 33) = v334;
        v336 = 1 << v334;
        v337 = (unsigned __int16)v335[2];
        if (v332 < v337 || (int)(v336 + v337) <= v333.i32[0])
        {
          v338 = (v332 - ((v336 - (v333.i32[0] - v332)) >> 1)) & ~((int)(v332 - ((v336 - (v333.i32[0] - v332)) >> 1)) >> 31);
          v330 = v338 - v337;
        }
        else
        {
          v330 = 0;
          LOWORD(v338) = v335[2];
        }
        *((_WORD *)a1 + 36) = v330;
        *((_WORD *)a1 + 35) = v338;
      }
      v339 = 0;
      v340 = 0;
      v341 = 0;
      v342 = 0;
      v343 = v310 != 0;
      if (v319)
        v343 |= 2u;
      if (v329)
        v343 |= 4u;
      if (v330)
        v343 |= 8u;
      v344 = (unsigned __int16 *)a1 + 22;
      break;
    case 11:
    case 25:
      v13 = *(int16x8_t *)v2;
      v14 = *(int16x8_t *)(v2 + 16);
      v15 = *(int16x8_t *)(v2 + v7);
      v16 = *(int16x8_t *)(v2 + v7 + 16);
      v24 = (int16x8_t *)(v2 + v7 + v7);
      v18 = *v24;
      v19 = v24[1];
      v25 = (int16x8_t *)((char *)v24 + v7);
      v21 = *v25;
      v22 = v25[1];
      if (!v4)
        goto LABEL_38;
      goto LABEL_37;
    case 12:
      v102 = (int16x8_t *)(v2 + v7 + v7);
      v103 = *v102;
      v104 = v102[1];
      v105 = (int16x8_t *)((char *)v102 + v7);
      v106 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v107 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v108 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v103) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v103);
      v109 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v105) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v105);
      v110 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      v111 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      v112 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v104) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v104);
      v113 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v105[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v105[1]);
      if (v4)
      {
        v106 = (int32x4_t)vshlq_u16((uint16x8_t)v106, v12);
        v107 = (int32x4_t)vshlq_u16((uint16x8_t)v107, v12);
        v108 = (int32x4_t)vshlq_u16((uint16x8_t)v108, v12);
        v109 = (int32x4_t)vshlq_u16((uint16x8_t)v109, v12);
        v110 = (int32x4_t)vshlq_u16((uint16x8_t)v110, v12);
        v111 = (int32x4_t)vshlq_u16((uint16x8_t)v111, v12);
        v112 = (int32x4_t)vshlq_u16((uint16x8_t)v112, v12);
        v113 = (int32x4_t)vshlq_u16((uint16x8_t)v113, v12);
      }
      v114 = (int16x8_t)vtrn1q_s32(v106, v110);
      v115 = (int16x8_t)vtrn2q_s32(v106, v110);
      v116 = (int16x8_t)vtrn1q_s32(v107, v111);
      v117 = (int16x8_t)vtrn2q_s32(v107, v111);
      v118 = (int16x8_t)vtrn1q_s32(v108, v112);
      v119 = (int16x8_t)vtrn2q_s32(v108, v112);
      v120 = (int16x8_t)vtrn1q_s32(v109, v113);
      v121 = (int16x8_t)vtrn2q_s32(v109, v113);
      v26 = vtrn1q_s16(v114, v118);
      v27 = vtrn2q_s16(v114, v118);
      v28 = vtrn1q_s16(v116, v120);
      v30 = vtrn2q_s16(v116, v120);
      v29 = vtrn1q_s16(v115, v119);
      v31 = vtrn2q_s16(v115, v119);
      v32 = vtrn1q_s16(v117, v121);
      v33 = vtrn2q_s16(v117, v121);
      goto LABEL_64;
    case 13:
      v122 = (int16x8_t *)(v2 + v7 + v7);
      v123 = *v122;
      v124 = (int16x8_t *)((char *)v122 + v7);
      v125 = *v124;
      v126 = (int16x8_t *)((char *)v124 + v7);
      v127 = *v126;
      v128 = (int16x8_t *)((char *)v126 + v7);
      v129 = *v128;
      v130 = (int16x8_t *)((char *)v128 + v7);
      v131 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v132 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v123) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v123);
      v133 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v134 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v125) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v125);
      v135 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v127) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v127);
      v136 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v130) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v130);
      v137 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v129) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v129);
      v138 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)((char *)v130 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)((char *)v130 + v7));
      if (v4)
      {
        v131 = (int16x8_t)vshlq_u16((uint16x8_t)v131, v12);
        v132 = (int16x8_t)vshlq_u16((uint16x8_t)v132, v12);
        v133 = (int16x8_t)vshlq_u16((uint16x8_t)v133, v12);
        v134 = (int16x8_t)vshlq_u16((uint16x8_t)v134, v12);
        v135 = (int16x8_t)vshlq_u16((uint16x8_t)v135, v12);
        v136 = (int16x8_t)vshlq_u16((uint16x8_t)v136, v12);
        v137 = (int16x8_t)vshlq_u16((uint16x8_t)v137, v12);
        v138 = (int16x8_t)vshlq_u16((uint16x8_t)v138, v12);
      }
      v26 = vtrn1q_s16(v131, v135);
      v139 = (int64x2_t)vtrn2q_s16(v131, v135);
      v28 = vtrn1q_s16(v132, v136);
      v140 = (int64x2_t)vtrn2q_s16(v132, v136);
      v141 = (int64x2_t)vtrn1q_s16(v133, v137);
      v31 = vtrn2q_s16(v133, v137);
      v142 = (int64x2_t)vtrn1q_s16(v134, v138);
      v33 = vtrn2q_s16(v134, v138);
      v29 = (int16x8_t)vzip2q_s64(v141, v139);
      v27.i64[0] = v141.i64[0];
      v27.i64[1] = v139.i64[0];
      v32 = (int16x8_t)vzip2q_s64(v142, v140);
      v30.i64[0] = v142.i64[0];
      v30.i64[1] = v140.i64[0];
      goto LABEL_64;
    case 14:
      v143 = (int16x8_t *)(v2 + v7 + v7);
      v144 = *v143;
      v145 = (int16x8_t *)((char *)v143 + v7);
      v146 = *v145;
      v147 = (int16x8_t *)((char *)v145 + v7);
      v148 = *v147;
      v149 = (int16x8_t *)((char *)v147 + v7);
      v150 = *v149;
      v151 = (int16x8_t *)((char *)v149 + v7);
      v152 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v153 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v154 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v144) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v144);
      v155 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v146) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v146);
      v156 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v148) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v148);
      v157 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v150) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v150);
      v158 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v151) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v151);
      v159 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)((char *)v151 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)((char *)v151 + v7));
      if (v4)
      {
        v152 = (int32x4_t)vshlq_u16((uint16x8_t)v152, v12);
        v153 = (int32x4_t)vshlq_u16((uint16x8_t)v153, v12);
        v154 = (int32x4_t)vshlq_u16((uint16x8_t)v154, v12);
        v155 = (int32x4_t)vshlq_u16((uint16x8_t)v155, v12);
        v156 = (int32x4_t)vshlq_u16((uint16x8_t)v156, v12);
        v157 = (int32x4_t)vshlq_u16((uint16x8_t)v157, v12);
        v158 = (int32x4_t)vshlq_u16((uint16x8_t)v158, v12);
        v159 = (int32x4_t)vshlq_u16((uint16x8_t)v159, v12);
      }
      v26 = (int16x8_t)vtrn1q_s32(v152, v156);
      v160 = (int64x2_t)vtrn2q_s32(v152, v156);
      v28 = (int16x8_t)vtrn1q_s32(v153, v157);
      v161 = (int64x2_t)vtrn2q_s32(v153, v157);
      v162 = (int64x2_t)vtrn1q_s32(v154, v158);
      v31 = (int16x8_t)vtrn2q_s32(v154, v158);
      v163 = (int64x2_t)vtrn1q_s32(v155, v159);
      v33 = (int16x8_t)vtrn2q_s32(v155, v159);
      v27 = (int16x8_t)vzip1q_s64(v162, v160);
      v29 = (int16x8_t)vzip2q_s64(v162, v160);
      v30 = (int16x8_t)vzip1q_s64(v163, v161);
      v32 = (int16x8_t)vzip2q_s64(v163, v161);
      goto LABEL_64;
    case 15:
      v164 = (int16x8_t *)(v2 + v7 + v7);
      v165 = *v164;
      v166 = v164[1];
      v167 = (int16x8_t *)((char *)v164 + v7);
      v168 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v169 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v170 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v165) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v165);
      v171 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v167) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v167);
      v172 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      v173 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      v174 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v166) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v166);
      v175 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v167[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v167[1]);
      if (v4)
      {
        v168 = (int64x2_t)vshlq_u16((uint16x8_t)v168, v12);
        v169 = (int64x2_t)vshlq_u16((uint16x8_t)v169, v12);
        v170 = (int64x2_t)vshlq_u16((uint16x8_t)v170, v12);
        v171 = (int64x2_t)vshlq_u16((uint16x8_t)v171, v12);
        v172 = (int64x2_t)vshlq_u16((uint16x8_t)v172, v12);
        v173 = (int64x2_t)vshlq_u16((uint16x8_t)v173, v12);
        v174 = (int64x2_t)vshlq_u16((uint16x8_t)v174, v12);
        v175 = (int64x2_t)vshlq_u16((uint16x8_t)v175, v12);
      }
      v26.i64[0] = v168.i64[0];
      v26.i64[1] = v170.i64[0];
      v27 = (int16x8_t)vzip2q_s64(v168, v170);
      v28.i64[0] = v169.i64[0];
      v28.i64[1] = v171.i64[0];
      v29.i64[0] = v172.i64[0];
      v29.i64[1] = v174.i64[0];
      v30 = (int16x8_t)vzip2q_s64(v169, v171);
      v31 = (int16x8_t)vzip2q_s64(v172, v174);
      v32.i64[0] = v173.i64[0];
      v32.i64[1] = v175.i64[0];
      v33 = (int16x8_t)vzip2q_s64(v173, v175);
      goto LABEL_64;
    case 16:
      v176 = (int16x8_t *)(v2 + v7 + v7);
      v177 = *v176;
      v178 = v176[1];
      v179 = (int16x8_t *)((char *)v176 + v7);
      v13 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v15 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v18 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v177) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v177);
      v21 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v179) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v179);
      v14 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      v16 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      v19 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v178) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v178);
      v22 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v179[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v179[1]);
      if (v4)
      {
LABEL_37:
        v13 = (int16x8_t)vshlq_u16((uint16x8_t)v13, v12);
        v15 = (int16x8_t)vshlq_u16((uint16x8_t)v15, v12);
        v18 = (int16x8_t)vshlq_u16((uint16x8_t)v18, v12);
        v21 = (int16x8_t)vshlq_u16((uint16x8_t)v21, v12);
        v14 = (int16x8_t)vshlq_u16((uint16x8_t)v14, v12);
        v16 = (int16x8_t)vshlq_u16((uint16x8_t)v16, v12);
        v19 = (int16x8_t)vshlq_u16((uint16x8_t)v19, v12);
        v22 = (int16x8_t)vshlq_u16((uint16x8_t)v22, v12);
      }
      goto LABEL_38;
    case 17:
      v180 = *(int16x8_t *)v2;
      v181 = *(int16x8_t *)(v2 + v7);
      v182 = (int16x8_t *)(v2 + v7 + v7);
      v183 = *v182;
      v184 = (int16x8_t *)((char *)v182 + v7);
      v185 = *v184;
      v186 = (int16x8_t *)((char *)v184 + v7);
      v187 = *v186;
      v188 = (int16x8_t *)((char *)v186 + v7);
      v189 = *v188;
      v190 = (int16x8_t *)((char *)v188 + v7);
      v191 = *v190;
      v192 = *(int16x8_t *)((char *)v190 + v7);
      if (v4)
      {
        v180 = (int16x8_t)vshlq_u16((uint16x8_t)v180, v12);
        v183 = (int16x8_t)vshlq_u16((uint16x8_t)v183, v12);
        v187 = (int16x8_t)vshlq_u16((uint16x8_t)v187, v12);
        v191 = (int16x8_t)vshlq_u16((uint16x8_t)v191, v12);
        v181 = (int16x8_t)vshlq_u16((uint16x8_t)v181, v12);
        v185 = (int16x8_t)vshlq_u16((uint16x8_t)v185, v12);
        v189 = (int16x8_t)vshlq_u16((uint16x8_t)v189, v12);
        v192 = (int16x8_t)vshlq_u16((uint16x8_t)v192, v12);
      }
      v27 = vtrn1q_s16(v187, v180);
      v193 = (int32x4_t)vtrn2q_s16(v187, v180);
      v30 = vtrn1q_s16(v191, v183);
      v194 = (int32x4_t)vtrn2q_s16(v191, v183);
      v195 = (int32x4_t)vtrn1q_s16(v181, v189);
      v31 = vtrn2q_s16(v181, v189);
      v196 = (int32x4_t)vtrn1q_s16(v185, v192);
      v33 = vtrn2q_s16(v185, v192);
      v26 = (int16x8_t)vtrn1q_s32(v193, v195);
      v29 = (int16x8_t)vtrn2q_s32(v193, v195);
      v28 = (int16x8_t)vtrn1q_s32(v194, v196);
      v32 = (int16x8_t)vtrn2q_s32(v194, v196);
      goto LABEL_61;
    case 18:
      v197 = *(int32x4_t *)v2;
      v198 = *(int32x4_t *)(v2 + 16);
      v199 = *(int32x4_t *)(v2 + v7);
      v200 = *(int32x4_t *)(v2 + v7 + 16);
      v201 = (int32x4_t *)(v2 + v7 + v7);
      v202 = *v201;
      v203 = v201[1];
      v204 = (int32x4_t *)((char *)v201 + v7);
      v205 = *v204;
      v206 = v204[1];
      if (v4)
      {
        v197 = (int32x4_t)vshlq_u16((uint16x8_t)v197, v12);
        v199 = (int32x4_t)vshlq_u16((uint16x8_t)v199, v12);
        v202 = (int32x4_t)vshlq_u16((uint16x8_t)v202, v12);
        v205 = (int32x4_t)vshlq_u16((uint16x8_t)v205, v12);
        v198 = (int32x4_t)vshlq_u16((uint16x8_t)v198, v12);
        v200 = (int32x4_t)vshlq_u16((uint16x8_t)v200, v12);
        v203 = (int32x4_t)vshlq_u16((uint16x8_t)v203, v12);
        v206 = (int32x4_t)vshlq_u16((uint16x8_t)v206, v12);
      }
      v207 = (int16x8_t)vtrn1q_s32(v197, v198);
      v208 = (int16x8_t)vtrn2q_s32(v197, v198);
      v209 = (int16x8_t)vtrn1q_s32(v199, v200);
      v210 = (int16x8_t)vtrn2q_s32(v199, v200);
      v211 = (int16x8_t)vtrn1q_s32(v202, v203);
      v212 = (int16x8_t)vtrn2q_s32(v202, v203);
      v213 = (int16x8_t)vtrn1q_s32(v205, v206);
      v214 = (int16x8_t)vtrn2q_s32(v205, v206);
      v26 = vtrn1q_s16(v207, v211);
      v27 = vtrn2q_s16(v207, v211);
      v28 = vtrn1q_s16(v209, v213);
      v30 = vtrn2q_s16(v209, v213);
      v29 = vtrn1q_s16(v208, v212);
      v31 = vtrn2q_s16(v208, v212);
      v32 = vtrn1q_s16(v210, v214);
      v33 = vtrn2q_s16(v210, v214);
      goto LABEL_61;
    case 19:
      *(int16x4x3_t *)v26.i8 = vld3_s16((const __int16 *)v2);
      v215 = (const __int16 *)(v2 + v7);
      v1031 = vld3_s16(v215);
      v216 = (const __int16 *)((char *)v215 + v7);
      v26.i64[1] = (uint64_t)v1031.val[0];
      v27.i64[0] = v217;
      v27.i64[1] = (uint64_t)v1031.val[1];
      *(int16x4x3_t *)v28.i8 = vld3_s16(v216);
      v218 = (const __int16 *)((char *)v216 + v7);
      v1032 = vld3_s16(v218);
      v29.i64[0] = v219;
      v29.i64[1] = (uint64_t)v1031.val[2];
      v28.i64[1] = (uint64_t)v1032.val[0];
      v30.i64[0] = v220;
      v30.i64[1] = (uint64_t)v1032.val[1];
      v32.i64[0] = v221;
      v32.i64[1] = (uint64_t)v1032.val[2];
      v33 = 0uLL;
      if (v4)
      {
        v26 = (int16x8_t)vshlq_u16((uint16x8_t)v26, v12);
        v28 = (int16x8_t)vshlq_u16((uint16x8_t)v28, v12);
        v27 = (int16x8_t)vshlq_u16((uint16x8_t)v27, v12);
        v30 = (int16x8_t)vshlq_u16((uint16x8_t)v30, v12);
        v29 = (int16x8_t)vshlq_u16((uint16x8_t)v29, v12);
        v32 = (int16x8_t)vshlq_u16((uint16x8_t)v32, v12);
      }
      v31 = 0uLL;
      goto LABEL_61;
    case 20:
      v222 = *(int16x8_t *)v2;
      v223 = *(int16x8_t *)(v2 + v7);
      v224 = (int16x8_t *)(v2 + v7 + v7);
      v225 = *v224;
      v226 = (int16x8_t *)((char *)v224 + v7);
      v227 = *v226;
      v228 = (int16x8_t *)((char *)v226 + v7);
      v229 = *v228;
      v230 = (int16x8_t *)((char *)v228 + v7);
      v231 = *v230;
      v232 = (int16x8_t *)((char *)v230 + v7);
      v233 = *v232;
      v234 = *(int16x8_t *)((char *)v232 + v7);
      if (v4)
      {
        v222 = (int16x8_t)vshlq_u16((uint16x8_t)v222, v12);
        v225 = (int16x8_t)vshlq_u16((uint16x8_t)v225, v12);
        v223 = (int16x8_t)vshlq_u16((uint16x8_t)v223, v12);
        v227 = (int16x8_t)vshlq_u16((uint16x8_t)v227, v12);
        v229 = (int16x8_t)vshlq_u16((uint16x8_t)v229, v12);
        v233 = (int16x8_t)vshlq_u16((uint16x8_t)v233, v12);
        v231 = (int16x8_t)vshlq_u16((uint16x8_t)v231, v12);
        v234 = (int16x8_t)vshlq_u16((uint16x8_t)v234, v12);
      }
      v26 = vtrn1q_s16(v222, v229);
      v235 = (int64x2_t)vtrn2q_s16(v222, v229);
      v28 = vtrn1q_s16(v225, v233);
      v236 = (int64x2_t)vtrn2q_s16(v225, v233);
      v237 = (int64x2_t)vtrn1q_s16(v223, v231);
      v31 = vtrn2q_s16(v223, v231);
      v30 = vtrn1q_s16(v227, v234);
      v33 = vtrn2q_s16(v227, v234);
      v29 = (int16x8_t)vzip2q_s64(v237, v235);
      v27.i64[0] = v237.i64[0];
      v27.i64[1] = v235.i64[0];
      v32 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v236);
      goto LABEL_54;
    case 21:
      v238 = *(int16x8_t *)v2;
      v239 = *(int16x8_t *)(v2 + 16);
      v240 = *(int16x8_t *)(v2 + v7);
      v241 = *(int16x8_t *)(v2 + v7 + 16);
      v242 = (int16x8_t *)(v2 + v7 + v7);
      v243 = *v242;
      v244 = v242[1];
      v245 = (int16x8_t *)((char *)v242 + v7);
      v246 = *v245;
      v30 = v245[1];
      if (v4)
      {
        v238 = (int16x8_t)vshlq_u16((uint16x8_t)v238, v12);
        v243 = (int16x8_t)vshlq_u16((uint16x8_t)v243, v12);
        v240 = (int16x8_t)vshlq_u16((uint16x8_t)v240, v12);
        v246 = (int16x8_t)vshlq_u16((uint16x8_t)v246, v12);
        v239 = (int16x8_t)vshlq_u16((uint16x8_t)v239, v12);
        v244 = (int16x8_t)vshlq_u16((uint16x8_t)v244, v12);
        v241 = (int16x8_t)vshlq_u16((uint16x8_t)v241, v12);
        v30 = (int16x8_t)vshlq_u16((uint16x8_t)v30, v12);
      }
      v26 = vtrn1q_s16(v238, v239);
      v247 = (int64x2_t)vtrn2q_s16(v238, v239);
      v28 = vtrn1q_s16(v243, v244);
      v236 = (int64x2_t)vtrn2q_s16(v243, v244);
      v248 = (int64x2_t)vtrn1q_s16(v240, v241);
      v31 = vtrn2q_s16(v240, v241);
      v249 = (int64x2_t)vtrn1q_s16(v246, v30);
      v33 = vtrn2q_s16(v246, v30);
      v29 = (int16x8_t)vzip2q_s64(v248, v247);
      v27.i64[0] = v248.i64[0];
      v27.i64[1] = v247.i64[0];
      v32 = (int16x8_t)vzip2q_s64(v249, v236);
      v30.i64[0] = v249.i64[0];
LABEL_54:
      v30.i64[1] = v236.i64[0];
      goto LABEL_61;
    case 22:
      v250 = *(int32x4_t *)v2;
      v251 = *(int32x4_t *)(v2 + v7);
      v252 = (int32x4_t *)(v2 + v7 + v7);
      v253 = *v252;
      v254 = (int32x4_t *)((char *)v252 + v7);
      v255 = *v254;
      v256 = (int32x4_t *)((char *)v254 + v7);
      v257 = *v256;
      v258 = (int32x4_t *)((char *)v256 + v7);
      v259 = *v258;
      v260 = (int32x4_t *)((char *)v258 + v7);
      v261 = *v260;
      v262 = *(int32x4_t *)((char *)v260 + v7);
      if (v4)
      {
        v250 = (int32x4_t)vshlq_u16((uint16x8_t)v250, v12);
        v251 = (int32x4_t)vshlq_u16((uint16x8_t)v251, v12);
        v253 = (int32x4_t)vshlq_u16((uint16x8_t)v253, v12);
        v255 = (int32x4_t)vshlq_u16((uint16x8_t)v255, v12);
        v257 = (int32x4_t)vshlq_u16((uint16x8_t)v257, v12);
        v259 = (int32x4_t)vshlq_u16((uint16x8_t)v259, v12);
        v261 = (int32x4_t)vshlq_u16((uint16x8_t)v261, v12);
        v262 = (int32x4_t)vshlq_u16((uint16x8_t)v262, v12);
      }
      v26 = (int16x8_t)vtrn1q_s32(v250, v257);
      v263 = (int64x2_t)vtrn2q_s32(v250, v257);
      v28 = (int16x8_t)vtrn1q_s32(v251, v259);
      v264 = (int64x2_t)vtrn2q_s32(v251, v259);
      v265 = (int64x2_t)vtrn1q_s32(v253, v261);
      v31 = (int16x8_t)vtrn2q_s32(v253, v261);
      v266 = (int64x2_t)vtrn1q_s32(v255, v262);
      v33 = (int16x8_t)vtrn2q_s32(v255, v262);
      v27 = (int16x8_t)vzip1q_s64(v265, v263);
      v29 = (int16x8_t)vzip2q_s64(v265, v263);
      v30 = (int16x8_t)vzip1q_s64(v266, v264);
      v32 = (int16x8_t)vzip2q_s64(v266, v264);
      goto LABEL_61;
    case 23:
      v267 = (int16x8_t *)(v2 + v7 + v7);
      v268 = *v267;
      v269 = v267[1];
      v270 = (int16x8_t *)((char *)v267 + v7);
      v271 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      v272 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      v273 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v268) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v268);
      v274 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v270) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v270);
      v275 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      v276 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      v277 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v269) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v269);
      v278 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v270[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v270[1]);
      if (v4)
      {
        v271 = (int32x4_t)vshlq_u16((uint16x8_t)v271, v12);
        v272 = (int32x4_t)vshlq_u16((uint16x8_t)v272, v12);
        v273 = (int32x4_t)vshlq_u16((uint16x8_t)v273, v12);
        v274 = (int32x4_t)vshlq_u16((uint16x8_t)v274, v12);
        v275 = (int32x4_t)vshlq_u16((uint16x8_t)v275, v12);
        v276 = (int32x4_t)vshlq_u16((uint16x8_t)v276, v12);
        v277 = (int32x4_t)vshlq_u16((uint16x8_t)v277, v12);
        v278 = (int32x4_t)vshlq_u16((uint16x8_t)v278, v12);
      }
      v279 = (int16x8_t)vtrn1q_s32(v271, v275);
      v280 = (int16x8_t)vtrn2q_s32(v271, v275);
      v281 = (int16x8_t)vtrn1q_s32(v272, v276);
      v282 = (int16x8_t)vtrn2q_s32(v272, v276);
      v283 = (int16x8_t)vtrn1q_s32(v273, v277);
      v284 = (int16x8_t)vtrn2q_s32(v273, v277);
      v285 = (int16x8_t)vtrn1q_s32(v274, v278);
      v286 = (int16x8_t)vtrn2q_s32(v274, v278);
      v26 = vtrn1q_s16(v279, v283);
      v27 = vtrn2q_s16(v279, v283);
      v28 = vtrn1q_s16(v281, v285);
      v30 = vtrn2q_s16(v281, v285);
      v29 = vtrn1q_s16(v280, v284);
      v31 = vtrn2q_s16(v280, v284);
      v32 = vtrn1q_s16(v282, v286);
      v33 = vtrn2q_s16(v282, v286);
      goto LABEL_61;
    default:
      return v11;
  }
  do
  {
    v346 = *v344;
    v344 += 4;
    v345 = v346;
    if ((unsigned __int16)(v346 + 2) >= 5u)
    {
      v348 = (unsigned __int16)v305;
      if ((unsigned __int16)v305 <= 0xFu)
      {
        if ((unsigned __int16)v314 <= 0xFu)
        {
          if (v325 <= 0xFu)
          {
            v349 = *((unsigned __int16 *)a1 + 33);
            if (v349 <= 0xF)
            {
              *v3 = v343 + 64;
              v3[1] = *((_BYTE *)a1 + 42) + 16 * *((_BYTE *)a1 + 50);
              v353 = (unint64_t *)(v3 + 3);
              v3[2] = *((_BYTE *)a1 + 58) + 16 * *((_BYTE *)a1 + 66);
              goto LABEL_130;
            }
            goto LABEL_120;
          }
          if (v325 != 16)
            return 4294951894;
LABEL_119:
          v349 = *((unsigned __int16 *)a1 + 33);
LABEL_120:
          if (v349 <= 0x10)
          {
            *v3 = v343 + 80;
            v350 = *((unsigned __int16 *)a1 + 21) + (*((unsigned __int16 *)a1 + 25) << 6);
            v351 = v350 + (*((unsigned __int16 *)a1 + 29) << 12);
            v352 = v351 + (*((unsigned __int16 *)a1 + 33) << 18);
            v3[1] = v350;
            v3[2] = BYTE1(v351);
            v353 = (unint64_t *)(v3 + 4);
            v3[3] = BYTE2(v352);
            goto LABEL_130;
          }
          return 4294951894;
        }
        v11 = 4294951894;
        if ((unsigned __int16)v314 != 16)
          return v11;
      }
      else
      {
        v11 = 4294951894;
        if (v348 != 16 || (unsigned __int16)v314 > 0x10u)
          return v11;
      }
      if (v325 > 0x10u)
        return v11;
      goto LABEL_119;
    }
    if (v345)
    {
      v340 = v339;
      ++v342;
    }
    v341 = 5 * v341 + v345 + 2;
    ++v339;
  }
  while (v339 != 4);
  if (v342 == 1)
  {
    v354 = (unsigned __int16)v301[4 * v340 + 1];
    if (v354 != 0xFFFF && v354 != 1)
      goto LABEL_129;
    v347 = ((v354 >> 11) & 0x10 | (32 * v340)) + v343 + 128;
LABEL_128:
    *v3 = v347;
    v353 = (unint64_t *)(v3 + 1);
  }
  else
  {
    if (!v342)
    {
      LOBYTE(v347) = v343 + 48;
      goto LABEL_128;
    }
LABEL_129:
    *v3 = ((v341 >> 4) & 0xF0) + v343;
    v353 = (unint64_t *)(v3 + 2);
    v3[1] = v341;
  }
LABEL_130:
  v356 = 0;
  while (2)
  {
    if ((v343 & 1) != 0)
    {
      v357 = &a1[v356];
      if (v5 <= 5)
      {
        LOWORD(v357) = *((_WORD *)v357 + 23);
        goto LABEL_139;
      }
      v358 = *((__int16 *)v357 + 24);
      if (v358 >= 0)
        LOWORD(v357) = *((_WORD *)v357 + 24);
      else
        LODWORD(v357) = -v358;
      v359 = (v358 >> 9) & 0x40;
      if ((unsigned __int16)v357 > 0x3Fu)
      {
        if (((unsigned __int16)v357 & 0xC000) != 0)
        {
          v362 = HIWORD(a1[v356 + 5]);
          *(_BYTE *)v353 = 0;
          v361 = (unint64_t *)((char *)v353 + 2);
          *((_BYTE *)v353 + 1) = v362;
          LODWORD(v357) = v362 >> 8;
          v360 = 3;
        }
        else
        {
          *(_BYTE *)v353 = v357 & 0x3F | v359 | 0x80;
          v361 = (unint64_t *)((char *)v353 + 1);
          LOWORD(v357) = (unsigned __int16)v357 >> 6;
          v360 = 2;
        }
      }
      else
      {
        LOBYTE(v357) = v359 + (_BYTE)v357;
LABEL_139:
        v360 = 1;
        v361 = v353;
      }
      v353 = (unint64_t *)((char *)v353 + v360);
      *(_BYTE *)v361 = (_BYTE)v357;
    }
    v343 >>= 1;
    if (++v356 != 4)
      continue;
    break;
  }
  if (!v353)
    return 4294951894;
  v363 = (const __int16 *)a1 + 23;
  v364 = vld1q_dup_s16(v363);
  v365 = (int8x16_t)vsubq_s16(v26, v364);
  v366 = (int8x16_t)vsubq_s16(v28, v364);
  v367 = (const __int16 *)a1 + 27;
  v368 = vld1q_dup_s16(v367);
  v369 = (int8x16_t)vsubq_s16(v27, v368);
  v370 = (int8x16_t)vsubq_s16(v30, v368);
  v371 = (const __int16 *)a1 + 31;
  v372 = vld1q_dup_s16(v371);
  v373 = (int8x16_t)vsubq_s16(v29, v372);
  v374 = (int8x16_t)vsubq_s16(v32, v372);
  v375 = (const __int16 *)a1 + 35;
  v376 = vld1q_dup_s16(v375);
  v377 = (int8x16_t)vsubq_s16(v31, v376);
  v378 = (int8x16_t)vsubq_s16(v33, v376);
  v379 = *((unsigned __int16 *)a1 + 21);
  if (v5 <= 0x10 && (v380 = *((_DWORD *)a1 + 27)) != 0)
  {
    v381 = v379 - v380 * v379 / 8;
    v382 = (uint16x8_t)vdupq_n_s16(v380 * v379 / -8);
    v383 = (int8x16_t)vshlq_u16((uint16x8_t)v365, v382);
    switch(v381)
    {
      case 0:
        break;
      case 1:
        v384 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xFuLL), v383);
        v385.i64[0] = 0xFFFFLL;
        v385.i64[1] = 0xFFFFLL;
        v386 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v384, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v384, v385));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v386, v386, 8uLL).i64[0], 4uLL), *(int8x8_t *)v386.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 1);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_151:
        v388 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xFuLL), v387);
        v389.i64[0] = 0xFFFFLL;
        v389.i64[1] = 0xFFFFLL;
        v390 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v388, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v388, v389));
        v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v390, v390, 8uLL).i64[0], 4uLL), *(int8x8_t *)v390.i8).u32[0];
        v392 = 1;
        goto LABEL_166;
      case 2:
        v399 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xEuLL), v383);
        v400.i64[0] = 0xFFFFLL;
        v400.i64[1] = 0xFFFFLL;
        v401 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v399, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v399, v400));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v401, v401, 8uLL).i64[0], 8uLL), *(int8x8_t *)v401.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 2);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_163:
        v402 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xEuLL), v387);
        v403.i64[0] = 0xFFFFLL;
        v403.i64[1] = 0xFFFFLL;
        v404 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v402, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v402, v403));
        v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v404, v404, 8uLL).i64[0], 8uLL), *(int8x8_t *)v404.i8).u32[0];
        v392 = 2;
        goto LABEL_166;
      case 3:
        v405 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xDuLL), v383);
        v406.i64[0] = 0xFFFFLL;
        v406.i64[1] = 0xFFFFLL;
        v407 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v405, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v405, v406));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v407, v407, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v407.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 3);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_165:
        v408 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xDuLL), v387);
        v409.i64[0] = 0xFFFFLL;
        v409.i64[1] = 0xFFFFLL;
        v410 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v408, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v408, v409));
        v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v410, v410, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v410.i8).u32[0];
        v392 = 3;
LABEL_166:
        *(_DWORD *)v353 = v391;
        v353 = (unint64_t *)((char *)v353 + v392);
        break;
      case 4:
        v411 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xCuLL), v383);
        v412.i64[0] = 16776960;
        v412.i64[1] = 16776960;
        v413 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v411, 0x18uLL), v412);
        v412.i64[0] = 0xFFFFLL;
        v412.i64[1] = 0xFFFFLL;
        v414 = vorrq_s8(v413, vandq_s8(v411, v412));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v414, v414, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v414.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_168:
        v415 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xCuLL), v387);
        v416.i64[0] = 16776960;
        v416.i64[1] = 16776960;
        v417 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v415, 0x18uLL), v416);
        v416.i64[0] = 0xFFFFLL;
        v416.i64[1] = 0xFFFFLL;
        v418 = vorrq_s8(v417, vandq_s8(v415, v416));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v418, v418, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v418.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v419 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xBuLL), v383);
        v420.i64[0] = 0xFFFFLL;
        v420.i64[1] = 0xFFFFLL;
        v421 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v419, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v419, v420));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v421, v421, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v421.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_170:
        v422 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xBuLL), v387);
        v423.i64[0] = 0xFFFFLL;
        v423.i64[1] = 0xFFFFLL;
        v424 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v422, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v422, v423));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v424, v424, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v424.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v425 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xAuLL), v383);
        v426.i64[0] = 0xFFFFLL;
        v426.i64[1] = 0xFFFFLL;
        v427 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v425, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v425, v426));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v427, v427, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v427.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_172:
        v428 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xAuLL), v387);
        v429.i64[0] = 0xFFFFLL;
        v429.i64[1] = 0xFFFFLL;
        v430 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v428, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v428, v429));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v430, v430, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v430.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v431 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 9uLL), v383);
        v432.i64[0] = 0xFFFFLL;
        v432.i64[1] = 0xFFFFLL;
        v433 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v431, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v431, v432));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v433, v433, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v433.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_174:
        v434 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 9uLL), v387);
        v435.i64[0] = 0xFFFFLL;
        v435.i64[1] = 0xFFFFLL;
        v436 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v434, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v434, v435));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v436, v436, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v436.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v437 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 8uLL), v383);
        v438.i64[0] = 4294901760;
        v438.i64[1] = 4294901760;
        v439 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v437, 0x10uLL), v438);
        v438.i64[0] = 0xFFFFLL;
        v438.i64[1] = 0xFFFFLL;
        v440 = vorrq_s8(v439, vandq_s8(v437, v438));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v440, v440, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v440.i8);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_176:
        v441 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 8uLL), v387);
        v442.i64[0] = 4294901760;
        v442.i64[1] = 4294901760;
        v443 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v441, 0x10uLL), v442);
        v442.i64[0] = 0xFFFFLL;
        v442.i64[1] = 0xFFFFLL;
        v444 = vorrq_s8(v443, vandq_s8(v441, v442));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v444, v444, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v444.i8);
        break;
      case 9:
        v445.i64[0] = 0xFFFF0000FFFFLL;
        v445.i64[1] = 0xFFFF0000FFFFLL;
        v446 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v383, v445));
        v447 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v446, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v446, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v445.i64[0] = vextq_s8(v447, v447, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v445.i64[0], 0x24uLL), *(int8x8_t *)v447.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v445.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_178:
        v448.i64[0] = 0xFFFF0000FFFFLL;
        v448.i64[1] = 0xFFFF0000FFFFLL;
        v449 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v387, v448));
        v450 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v449, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v449, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v448.i64[0] = vextq_s8(v450, v450, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v448.i64[0], 0x24uLL), *(int8x8_t *)v450.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v448.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v451.i64[0] = 0xFFFF0000FFFFLL;
        v451.i64[1] = 0xFFFF0000FFFFLL;
        v452 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v383, v451));
        v453 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v452, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v452, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v451.i64[0] = vextq_s8(v453, v453, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v451.i64[0], 0x28uLL), *(int8x8_t *)v453.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v451.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_180:
        v454.i64[0] = 0xFFFF0000FFFFLL;
        v454.i64[1] = 0xFFFF0000FFFFLL;
        v455 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v387, v454));
        v456 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v455, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v455, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v454.i64[0] = vextq_s8(v456, v456, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v454.i64[0], 0x28uLL), *(int8x8_t *)v456.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v454.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v952 = v382;
        v953 = (uint16x8_t)v366;
        v957 = v369;
        v963 = v370;
        v970 = v373;
        v979 = v374;
        v989 = v377;
        v1001 = v378;
        v398 = 0;
        v1029 = 0uLL;
        do
        {
          v1019 = v383;
          v1029.i16[v398] = *(_WORD *)((unint64_t)&v1019 & 0xFFFFFFFFFFFFFFF1 | (2 * (v398 & 7)));
          ++v398;
        }
        while (v398 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v381);
        v387 = (int8x16_t)vshlq_u16(v953, v952);
        v377 = v989;
        v378 = v1001;
        v373 = v970;
        v374 = v979;
        v369 = v957;
        v370 = v963;
        switch(v381)
        {
          case 0:
            goto LABEL_181;
          case 1:
            goto LABEL_151;
          case 2:
            goto LABEL_163;
          case 3:
            goto LABEL_165;
          case 4:
            goto LABEL_168;
          case 5:
            goto LABEL_170;
          case 6:
            goto LABEL_172;
          case 7:
            goto LABEL_174;
          case 8:
            goto LABEL_176;
          case 9:
            goto LABEL_178;
          case 10:
            goto LABEL_180;
          default:
            v948 = 0;
            v1029 = 0uLL;
            do
            {
              v1018 = v387;
              v1029.i16[v948] = *(_WORD *)((unint64_t)&v1018 & 0xFFFFFFFFFFFFFFF1 | (2 * (v948 & 7)));
              ++v948;
            }
            while (v948 != 8);
            v353 = vectorWritePacked(v353, (uint64_t)&v1029, v381);
            v377 = v989;
            v378 = v1001;
            v373 = v970;
            v374 = v979;
            v369 = v957;
            v370 = v963;
            break;
        }
        break;
    }
LABEL_181:
    v457 = *((unsigned __int16 *)a1 + 25);
    v458 = v457 - *((_DWORD *)a1 + 27) * v457 / 8;
    v459 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v457 / -8);
    v460 = (int8x16_t)vshlq_u16((uint16x8_t)v369, v459);
    switch(v458)
    {
      case 0:
        break;
      case 1:
        v461 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xFuLL), v460);
        v462.i64[0] = 0xFFFFLL;
        v462.i64[1] = 0xFFFFLL;
        v463 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v461, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v461, v462));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v463, v463, 8uLL).i64[0], 4uLL), *(int8x8_t *)v463.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 1);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_183:
        v465 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xFuLL), v464);
        v466.i64[0] = 0xFFFFLL;
        v466.i64[1] = 0xFFFFLL;
        v467 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v465, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v465, v466));
        v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v467, v467, 8uLL).i64[0], 4uLL), *(int8x8_t *)v467.i8).u32[0];
        v469 = 1;
        goto LABEL_206;
      case 2:
        v507 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xEuLL), v460);
        v508.i64[0] = 0xFFFFLL;
        v508.i64[1] = 0xFFFFLL;
        v509 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v507, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v507, v508));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v509, v509, 8uLL).i64[0], 8uLL), *(int8x8_t *)v509.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 2);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_203:
        v510 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xEuLL), v464);
        v511.i64[0] = 0xFFFFLL;
        v511.i64[1] = 0xFFFFLL;
        v512 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v510, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v510, v511));
        v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v512, v512, 8uLL).i64[0], 8uLL), *(int8x8_t *)v512.i8).u32[0];
        v469 = 2;
        goto LABEL_206;
      case 3:
        v513 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xDuLL), v460);
        v514.i64[0] = 0xFFFFLL;
        v514.i64[1] = 0xFFFFLL;
        v515 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v513, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v513, v514));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v515, v515, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v515.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 3);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_205:
        v516 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xDuLL), v464);
        v517.i64[0] = 0xFFFFLL;
        v517.i64[1] = 0xFFFFLL;
        v518 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v516, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v516, v517));
        v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v518, v518, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v518.i8).u32[0];
        v469 = 3;
LABEL_206:
        *(_DWORD *)v353 = v468;
        v353 = (unint64_t *)((char *)v353 + v469);
        break;
      case 4:
        v519 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xCuLL), v460);
        v520.i64[0] = 16776960;
        v520.i64[1] = 16776960;
        v521 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v519, 0x18uLL), v520);
        v520.i64[0] = 0xFFFFLL;
        v520.i64[1] = 0xFFFFLL;
        v522 = vorrq_s8(v521, vandq_s8(v519, v520));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v522, v522, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v522.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_208:
        v523 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xCuLL), v464);
        v524.i64[0] = 16776960;
        v524.i64[1] = 16776960;
        v525 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v523, 0x18uLL), v524);
        v524.i64[0] = 0xFFFFLL;
        v524.i64[1] = 0xFFFFLL;
        v526 = vorrq_s8(v525, vandq_s8(v523, v524));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v526, v526, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v526.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v527 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xBuLL), v460);
        v528.i64[0] = 0xFFFFLL;
        v528.i64[1] = 0xFFFFLL;
        v529 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v527, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v527, v528));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v529, v529, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v529.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_210:
        v530 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xBuLL), v464);
        v531.i64[0] = 0xFFFFLL;
        v531.i64[1] = 0xFFFFLL;
        v532 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v530, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v530, v531));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v532, v532, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v532.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v533 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xAuLL), v460);
        v534.i64[0] = 0xFFFFLL;
        v534.i64[1] = 0xFFFFLL;
        v535 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v533, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v533, v534));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v535, v535, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v535.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_212:
        v536 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xAuLL), v464);
        v537.i64[0] = 0xFFFFLL;
        v537.i64[1] = 0xFFFFLL;
        v538 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v536, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v536, v537));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v538, v538, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v538.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v539 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 9uLL), v460);
        v540.i64[0] = 0xFFFFLL;
        v540.i64[1] = 0xFFFFLL;
        v541 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v539, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v539, v540));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v541, v541, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v541.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_214:
        v542 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 9uLL), v464);
        v543.i64[0] = 0xFFFFLL;
        v543.i64[1] = 0xFFFFLL;
        v544 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v542, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v542, v543));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v544, v544, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v544.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v545 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 8uLL), v460);
        v546.i64[0] = 4294901760;
        v546.i64[1] = 4294901760;
        v547 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v545, 0x10uLL), v546);
        v546.i64[0] = 0xFFFFLL;
        v546.i64[1] = 0xFFFFLL;
        v548 = vorrq_s8(v547, vandq_s8(v545, v546));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v548, v548, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v548.i8);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_216:
        v549 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 8uLL), v464);
        v550.i64[0] = 4294901760;
        v550.i64[1] = 4294901760;
        v551 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v549, 0x10uLL), v550);
        v550.i64[0] = 0xFFFFLL;
        v550.i64[1] = 0xFFFFLL;
        v552 = vorrq_s8(v551, vandq_s8(v549, v550));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v552, v552, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v552.i8);
        break;
      case 9:
        v553.i64[0] = 0xFFFF0000FFFFLL;
        v553.i64[1] = 0xFFFF0000FFFFLL;
        v554 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v460, v553));
        v555 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v554, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v554, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v553.i64[0] = vextq_s8(v555, v555, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v553.i64[0], 0x24uLL), *(int8x8_t *)v555.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v553.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_218:
        v556.i64[0] = 0xFFFF0000FFFFLL;
        v556.i64[1] = 0xFFFF0000FFFFLL;
        v557 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v464, v556));
        v558 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v557, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v557, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v556.i64[0] = vextq_s8(v558, v558, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v556.i64[0], 0x24uLL), *(int8x8_t *)v558.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v556.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v559.i64[0] = 0xFFFF0000FFFFLL;
        v559.i64[1] = 0xFFFF0000FFFFLL;
        v560 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v460, v559));
        v561 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v560, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v560, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v559.i64[0] = vextq_s8(v561, v561, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v559.i64[0], 0x28uLL), *(int8x8_t *)v561.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v559.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_220:
        v562.i64[0] = 0xFFFF0000FFFFLL;
        v562.i64[1] = 0xFFFF0000FFFFLL;
        v563 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v464, v562));
        v564 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v563, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v563, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v562.i64[0] = vextq_s8(v564, v564, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v562.i64[0], 0x28uLL), *(int8x8_t *)v564.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v562.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v959 = v459;
        v965 = (uint16x8_t)v370;
        v972 = v373;
        v981 = v374;
        v991 = v377;
        v1003 = v378;
        v506 = 0;
        v1029 = 0uLL;
        do
        {
          v1017 = v460;
          v1029.i16[v506] = *(_WORD *)((unint64_t)&v1017 & 0xFFFFFFFFFFFFFFF1 | (2 * (v506 & 7)));
          ++v506;
        }
        while (v506 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v458);
        v464 = (int8x16_t)vshlq_u16(v965, v959);
        v377 = v991;
        v378 = v1003;
        v373 = v972;
        v374 = v981;
        switch(v458)
        {
          case 0:
            goto LABEL_221;
          case 1:
            goto LABEL_183;
          case 2:
            goto LABEL_203;
          case 3:
            goto LABEL_205;
          case 4:
            goto LABEL_208;
          case 5:
            goto LABEL_210;
          case 6:
            goto LABEL_212;
          case 7:
            goto LABEL_214;
          case 8:
            goto LABEL_216;
          case 9:
            goto LABEL_218;
          case 10:
            goto LABEL_220;
          default:
            v949 = 0;
            v1029 = 0uLL;
            do
            {
              v1016 = v464;
              v1029.i16[v949] = *(_WORD *)((unint64_t)&v1016 & 0xFFFFFFFFFFFFFFF1 | (2 * (v949 & 7)));
              ++v949;
            }
            while (v949 != 8);
            v353 = vectorWritePacked(v353, (uint64_t)&v1029, v458);
            v377 = v991;
            v378 = v1003;
            v373 = v972;
            v374 = v981;
            break;
        }
        break;
    }
LABEL_221:
    v565 = *((unsigned __int16 *)a1 + 29);
    v566 = v565 - *((_DWORD *)a1 + 27) * v565 / 8;
    v567 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v565 / -8);
    v568 = (int8x16_t)vshlq_u16((uint16x8_t)v373, v567);
    switch(v566)
    {
      case 0:
        break;
      case 1:
        v569 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xFuLL), v568);
        v570.i64[0] = 0xFFFFLL;
        v570.i64[1] = 0xFFFFLL;
        v571 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v569, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v569, v570));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v571, v571, 8uLL).i64[0], 4uLL), *(int8x8_t *)v571.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 1);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_223:
        v573 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xFuLL), v572);
        v574.i64[0] = 0xFFFFLL;
        v574.i64[1] = 0xFFFFLL;
        v575 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v573, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v573, v574));
        v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v575, v575, 8uLL).i64[0], 4uLL), *(int8x8_t *)v575.i8).u32[0];
        v577 = 1;
        goto LABEL_231;
      case 2:
        v579 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xEuLL), v568);
        v580.i64[0] = 0xFFFFLL;
        v580.i64[1] = 0xFFFFLL;
        v581 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v579, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v579, v580));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v581, v581, 8uLL).i64[0], 8uLL), *(int8x8_t *)v581.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 2);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_228:
        v582 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xEuLL), v572);
        v583.i64[0] = 0xFFFFLL;
        v583.i64[1] = 0xFFFFLL;
        v584 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v582, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v582, v583));
        v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v584, v584, 8uLL).i64[0], 8uLL), *(int8x8_t *)v584.i8).u32[0];
        v577 = 2;
        goto LABEL_231;
      case 3:
        v585 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xDuLL), v568);
        v586.i64[0] = 0xFFFFLL;
        v586.i64[1] = 0xFFFFLL;
        v587 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v585, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v585, v586));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v587, v587, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v587.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 3);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_230:
        v588 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xDuLL), v572);
        v589.i64[0] = 0xFFFFLL;
        v589.i64[1] = 0xFFFFLL;
        v590 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v588, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v588, v589));
        v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v590, v590, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v590.i8).u32[0];
        v577 = 3;
LABEL_231:
        *(_DWORD *)v353 = v576;
        v353 = (unint64_t *)((char *)v353 + v577);
        break;
      case 4:
        v591 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xCuLL), v568);
        v592.i64[0] = 16776960;
        v592.i64[1] = 16776960;
        v593 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v591, 0x18uLL), v592);
        v592.i64[0] = 0xFFFFLL;
        v592.i64[1] = 0xFFFFLL;
        v594 = vorrq_s8(v593, vandq_s8(v591, v592));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v594, v594, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v594.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_233:
        v595 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xCuLL), v572);
        v596.i64[0] = 16776960;
        v596.i64[1] = 16776960;
        v597 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v595, 0x18uLL), v596);
        v596.i64[0] = 0xFFFFLL;
        v596.i64[1] = 0xFFFFLL;
        v598 = vorrq_s8(v597, vandq_s8(v595, v596));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v598, v598, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v598.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v599 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xBuLL), v568);
        v600.i64[0] = 0xFFFFLL;
        v600.i64[1] = 0xFFFFLL;
        v601 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v599, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v599, v600));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v601, v601, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v601.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_235:
        v602 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xBuLL), v572);
        v603.i64[0] = 0xFFFFLL;
        v603.i64[1] = 0xFFFFLL;
        v604 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v602, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v602, v603));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v604, v604, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v604.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v605 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xAuLL), v568);
        v606.i64[0] = 0xFFFFLL;
        v606.i64[1] = 0xFFFFLL;
        v607 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v605, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v605, v606));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v607, v607, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v607.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_237:
        v608 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xAuLL), v572);
        v609.i64[0] = 0xFFFFLL;
        v609.i64[1] = 0xFFFFLL;
        v610 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v608, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v608, v609));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v610, v610, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v610.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v611 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 9uLL), v568);
        v612.i64[0] = 0xFFFFLL;
        v612.i64[1] = 0xFFFFLL;
        v613 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v611, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v611, v612));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v613, v613, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v613.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_239:
        v614 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 9uLL), v572);
        v615.i64[0] = 0xFFFFLL;
        v615.i64[1] = 0xFFFFLL;
        v616 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v614, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v614, v615));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v616, v616, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v616.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v617 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 8uLL), v568);
        v618.i64[0] = 4294901760;
        v618.i64[1] = 4294901760;
        v619 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v617, 0x10uLL), v618);
        v618.i64[0] = 0xFFFFLL;
        v618.i64[1] = 0xFFFFLL;
        v620 = vorrq_s8(v619, vandq_s8(v617, v618));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v620, v620, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v620.i8);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_241:
        v621 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 8uLL), v572);
        v622.i64[0] = 4294901760;
        v622.i64[1] = 4294901760;
        v623 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v621, 0x10uLL), v622);
        v622.i64[0] = 0xFFFFLL;
        v622.i64[1] = 0xFFFFLL;
        v624 = vorrq_s8(v623, vandq_s8(v621, v622));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v624, v624, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v624.i8);
        break;
      case 9:
        v625.i64[0] = 0xFFFF0000FFFFLL;
        v625.i64[1] = 0xFFFF0000FFFFLL;
        v626 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v568, v625));
        v627 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v626, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v626, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v625.i64[0] = vextq_s8(v627, v627, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v625.i64[0], 0x24uLL), *(int8x8_t *)v627.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v625.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_243:
        v628.i64[0] = 0xFFFF0000FFFFLL;
        v628.i64[1] = 0xFFFF0000FFFFLL;
        v629 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v572, v628));
        v630 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v629, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v629, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v628.i64[0] = vextq_s8(v630, v630, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v628.i64[0], 0x24uLL), *(int8x8_t *)v630.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v628.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v631.i64[0] = 0xFFFF0000FFFFLL;
        v631.i64[1] = 0xFFFF0000FFFFLL;
        v632 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v568, v631));
        v633 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v632, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v632, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v631.i64[0] = vextq_s8(v633, v633, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v631.i64[0], 0x28uLL), *(int8x8_t *)v633.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v631.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_245:
        v634.i64[0] = 0xFFFF0000FFFFLL;
        v634.i64[1] = 0xFFFF0000FFFFLL;
        v635 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v572, v634));
        v636 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v635, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v635, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v634.i64[0] = vextq_s8(v636, v636, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v634.i64[0], 0x28uLL), *(int8x8_t *)v636.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v634.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v973 = v567;
        v982 = (uint16x8_t)v374;
        v992 = v377;
        v1004 = v378;
        v578 = 0;
        v1029 = 0uLL;
        do
        {
          v1015 = v568;
          v1029.i16[v578] = *(_WORD *)((unint64_t)&v1015 & 0xFFFFFFFFFFFFFFF1 | (2 * (v578 & 7)));
          ++v578;
        }
        while (v578 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v566);
        v572 = (int8x16_t)vshlq_u16(v982, v973);
        v377 = v992;
        v378 = v1004;
        switch(v566)
        {
          case 0:
            goto LABEL_246;
          case 1:
            goto LABEL_223;
          case 2:
            goto LABEL_228;
          case 3:
            goto LABEL_230;
          case 4:
            goto LABEL_233;
          case 5:
            goto LABEL_235;
          case 6:
            goto LABEL_237;
          case 7:
            goto LABEL_239;
          case 8:
            goto LABEL_241;
          case 9:
            goto LABEL_243;
          case 10:
            goto LABEL_245;
          default:
            v950 = 0;
            v1029 = 0uLL;
            do
            {
              v1014 = v572;
              v1029.i16[v950] = *(_WORD *)((unint64_t)&v1014 & 0xFFFFFFFFFFFFFFF1 | (2 * (v950 & 7)));
              ++v950;
            }
            while (v950 != 8);
            v353 = vectorWritePacked(v353, (uint64_t)&v1029, v566);
            v377 = v992;
            v378 = v1004;
            break;
        }
        break;
    }
LABEL_246:
    v637 = *((unsigned __int16 *)a1 + 33);
    v638 = v637 - *((_DWORD *)a1 + 27) * v637 / 8;
    v639 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v637 / -8);
    v640 = (int8x16_t)vshlq_u16((uint16x8_t)v377, v639);
    switch(v638)
    {
      case 0:
        break;
      case 1:
        v641 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xFuLL), v640);
        v642.i64[0] = 0xFFFFLL;
        v642.i64[1] = 0xFFFFLL;
        v643 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v641, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v641, v642));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v643, v643, 8uLL).i64[0], 4uLL), *(int8x8_t *)v643.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 1);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_248:
        v645 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xFuLL), v644);
        v646 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v645, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL));
        goto LABEL_361;
      case 2:
        v648 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xEuLL), v640);
        v649.i64[0] = 0xFFFFLL;
        v649.i64[1] = 0xFFFFLL;
        v650 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v648, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v648, v649));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v650, v650, 8uLL).i64[0], 8uLL), *(int8x8_t *)v650.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 2);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_253:
        v651 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xEuLL), v644);
        v652 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v651, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL));
        goto LABEL_366;
      case 3:
        v653 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xDuLL), v640);
        v654.i64[0] = 0xFFFFLL;
        v654.i64[1] = 0xFFFFLL;
        v655 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v653, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v653, v654));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v655, v655, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v655.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 3);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_255:
        v656 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xDuLL), v644);
        v657 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v656, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL));
        goto LABEL_368;
      case 4:
        v658 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xCuLL), v640);
        v659.i64[0] = 16776960;
        v659.i64[1] = 16776960;
        v660 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v658, 0x18uLL), v659);
        v659.i64[0] = 0xFFFFLL;
        v659.i64[1] = 0xFFFFLL;
        v661 = vorrq_s8(v660, vandq_s8(v658, v659));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v661, v661, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v661.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_257:
        v662 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xCuLL), v644);
        goto LABEL_371;
      case 5:
        v663 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xBuLL), v640);
        v664.i64[0] = 0xFFFFLL;
        v664.i64[1] = 0xFFFFLL;
        v665 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v663, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v663, v664));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v665, v665, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v665.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_259:
        v666 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xBuLL), v644);
        v667 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v666, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL));
        goto LABEL_373;
      case 6:
        v668 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xAuLL), v640);
        v669.i64[0] = 0xFFFFLL;
        v669.i64[1] = 0xFFFFLL;
        v670 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v668, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v668, v669));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v670, v670, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v670.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_261:
        v671 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xAuLL), v644);
        v672 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v671, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL));
        goto LABEL_375;
      case 7:
        v673 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 9uLL), v640);
        v674.i64[0] = 0xFFFFLL;
        v674.i64[1] = 0xFFFFLL;
        v675 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v673, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v673, v674));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v675, v675, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v675.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_263:
        v676 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 9uLL), v644);
        v677 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v676, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL));
        goto LABEL_377;
      case 8:
        v678 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 8uLL), v640);
        v679.i64[0] = 4294901760;
        v679.i64[1] = 4294901760;
        v680 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v678, 0x10uLL), v679);
        v679.i64[0] = 0xFFFFLL;
        v679.i64[1] = 0xFFFFLL;
        v681 = vorrq_s8(v680, vandq_s8(v678, v679));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v681, v681, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v681.i8);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_265:
        v682 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 8uLL), v644);
        goto LABEL_379;
      case 9:
        v683.i64[0] = 0xFFFF0000FFFFLL;
        v683.i64[1] = 0xFFFF0000FFFFLL;
        v684 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v640, v683));
        v685 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v684, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v684, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v683.i64[0] = vextq_s8(v685, v685, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v683.i64[0], 0x24uLL), *(int8x8_t *)v685.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v683.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_267:
        v686.i64[0] = 0xFFFF0000FFFFLL;
        v686.i64[1] = 0xFFFF0000FFFFLL;
        v687 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v644, v686));
        v688 = vandq_s8(v687, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL));
        v689 = (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL);
        v690 = (int8x16_t)vshrq_n_u64((uint64x2_t)v687, 0xEuLL);
        goto LABEL_381;
      case 10:
        v691.i64[0] = 0xFFFF0000FFFFLL;
        v691.i64[1] = 0xFFFF0000FFFFLL;
        v692 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v640, v691));
        v693 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v692, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v692, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v691.i64[0] = vextq_s8(v693, v693, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v691.i64[0], 0x28uLL), *(int8x8_t *)v693.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v691.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_269:
        v694.i64[0] = 0xFFFF0000FFFFLL;
        v694.i64[1] = 0xFFFF0000FFFFLL;
        v695 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v644, v694));
        goto LABEL_383;
      default:
        v993 = v639;
        v1005 = (uint16x8_t)v378;
        v647 = 0;
        v1029 = 0uLL;
        do
        {
          v1013 = v640;
          v1029.i16[v647] = *(_WORD *)((unint64_t)&v1013 & 0xFFFFFFFFFFFFFFF1 | (2 * (v647 & 7)));
          ++v647;
        }
        while (v647 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v638);
        v644 = (int8x16_t)vshlq_u16(v1005, v993);
        switch(v638)
        {
          case 0:
            goto LABEL_384;
          case 1:
            goto LABEL_248;
          case 2:
            goto LABEL_253;
          case 3:
            goto LABEL_255;
          case 4:
            goto LABEL_257;
          case 5:
            goto LABEL_259;
          case 6:
            goto LABEL_261;
          case 7:
            goto LABEL_263;
          case 8:
            goto LABEL_265;
          case 9:
            goto LABEL_267;
          case 10:
            goto LABEL_269;
          default:
            v951 = 0;
            v1029 = 0uLL;
            do
            {
              v1012 = v644;
              v1029.i16[v951] = *(_WORD *)((unint64_t)&v1012 & 0xFFFFFFFFFFFFFFF1 | (2 * (v951 & 7)));
              ++v951;
            }
            while (v951 != 8);
            v918 = v638;
            goto LABEL_364;
        }
    }
  }
  else
  {
    switch(*((_WORD *)a1 + 21))
    {
      case 0:
        goto LABEL_283;
      case 1:
        v393 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xFuLL), v365);
        v394.i64[0] = 0xFFFFLL;
        v394.i64[1] = 0xFFFFLL;
        v395 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v393, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v393, v394));
        v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v395, v395, 8uLL).i64[0], 4uLL), *(int8x8_t *)v395.i8).u32[0];
        v397 = 1;
        goto LABEL_189;
      case 2:
        v471 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xEuLL), v365);
        v472.i64[0] = 0xFFFFLL;
        v472.i64[1] = 0xFFFFLL;
        v473 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v471, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v471, v472));
        v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v473, v473, 8uLL).i64[0], 8uLL), *(int8x8_t *)v473.i8).u32[0];
        v397 = 2;
        goto LABEL_189;
      case 3:
        v474 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xDuLL), v365);
        v475.i64[0] = 0xFFFFLL;
        v475.i64[1] = 0xFFFFLL;
        v476 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v474, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v474, v475));
        v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v476, v476, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v476.i8).u32[0];
        v397 = 3;
LABEL_189:
        *(_DWORD *)v353 = v396;
        v353 = (unint64_t *)((char *)v353 + v397);
        break;
      case 4:
        v477 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xCuLL), v365);
        v478.i64[0] = 16776960;
        v478.i64[1] = 16776960;
        v479 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v477, 0x18uLL), v478);
        v478.i64[0] = 0xFFFFLL;
        v478.i64[1] = 0xFFFFLL;
        v480 = vorrq_s8(v479, vandq_s8(v477, v478));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v480, v480, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v480.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v481 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xBuLL), v365);
        v482.i64[0] = 0xFFFFLL;
        v482.i64[1] = 0xFFFFLL;
        v483 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v481, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v481, v482));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v483, v483, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v483.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v484 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xAuLL), v365);
        v485.i64[0] = 0xFFFFLL;
        v485.i64[1] = 0xFFFFLL;
        v486 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v484, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v484, v485));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v486, v486, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v486.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v487 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 9uLL), v365);
        v488.i64[0] = 0xFFFFLL;
        v488.i64[1] = 0xFFFFLL;
        v489 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v487, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v487, v488));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v489, v489, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v489.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v490 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 8uLL), v365);
        v491.i64[0] = 4294901760;
        v491.i64[1] = 4294901760;
        v492 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v490, 0x10uLL), v491);
        v491.i64[0] = 0xFFFFLL;
        v491.i64[1] = 0xFFFFLL;
        v493 = vorrq_s8(v492, vandq_s8(v490, v491));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v493, v493, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v493.i8);
        break;
      case 9:
        v494.i64[0] = 0xFFFF0000FFFFLL;
        v494.i64[1] = 0xFFFF0000FFFFLL;
        v495 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v365, v494));
        v496 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v495, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v495, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v494.i64[0] = vextq_s8(v496, v496, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v494.i64[0], 0x24uLL), *(int8x8_t *)v496.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v494.u64[0], 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v497.i64[0] = 0xFFFF0000FFFFLL;
        v497.i64[1] = 0xFFFF0000FFFFLL;
        v498 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v365, v497));
        v499 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v498, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v498, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v497.i64[0] = vextq_s8(v499, v499, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v497.i64[0], 0x28uLL), *(int8x8_t *)v499.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v497.u64[0], 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v954 = v366;
        v958 = v369;
        v964 = v370;
        v971 = v373;
        v980 = v374;
        v990 = v377;
        v1002 = v378;
        v470 = 0;
        v1029 = 0uLL;
        do
        {
          v1027 = v365;
          v1029.i16[v470] = *(_WORD *)((unint64_t)&v1027 & 0xFFFFFFFFFFFFFFF1 | (2 * (v470 & 7)));
          ++v470;
        }
        while (v470 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v379);
        v377 = v990;
        v378 = v1002;
        v373 = v971;
        v374 = v980;
        v369 = v958;
        v370 = v964;
        v366 = v954;
        break;
    }
    v500 = (unsigned __int16)*v301;
    switch(*v301)
    {
      case 0:
        break;
      case 1:
        v501 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xFuLL), v366);
        v502.i64[0] = 0xFFFFLL;
        v502.i64[1] = 0xFFFFLL;
        v503 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v501, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v501, v502));
        v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v503, v503, 8uLL).i64[0], 4uLL), *(int8x8_t *)v503.i8).u32[0];
        v505 = 1;
        goto LABEL_275;
      case 2:
        v697 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xEuLL), v366);
        v698.i64[0] = 0xFFFFLL;
        v698.i64[1] = 0xFFFFLL;
        v699 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v697, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v697, v698));
        v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v699, v699, 8uLL).i64[0], 8uLL), *(int8x8_t *)v699.i8).u32[0];
        v505 = 2;
        goto LABEL_275;
      case 3:
        v700 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xDuLL), v366);
        v701.i64[0] = 0xFFFFLL;
        v701.i64[1] = 0xFFFFLL;
        v702 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v700, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v700, v701));
        v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v702, v702, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v702.i8).u32[0];
        v505 = 3;
LABEL_275:
        *(_DWORD *)v353 = v504;
        v353 = (unint64_t *)((char *)v353 + v505);
        break;
      case 4:
        v703 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xCuLL), v366);
        v704.i64[0] = 16776960;
        v704.i64[1] = 16776960;
        v705 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v703, 0x18uLL), v704);
        v704.i64[0] = 0xFFFFLL;
        v704.i64[1] = 0xFFFFLL;
        v706 = vorrq_s8(v705, vandq_s8(v703, v704));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v706, v706, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v706.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v707 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xBuLL), v366);
        v708.i64[0] = 0xFFFFLL;
        v708.i64[1] = 0xFFFFLL;
        v709 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v707, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v707, v708));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v709, v709, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v709.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v710 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xAuLL), v366);
        v711.i64[0] = 0xFFFFLL;
        v711.i64[1] = 0xFFFFLL;
        v712 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v710, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v710, v711));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v712, v712, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v712.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v713 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 9uLL), v366);
        v714.i64[0] = 0xFFFFLL;
        v714.i64[1] = 0xFFFFLL;
        v715 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v713, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v713, v714));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v715, v715, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v715.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v716 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 8uLL), v366);
        v717.i64[0] = 4294901760;
        v717.i64[1] = 4294901760;
        v718 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v716, 0x10uLL), v717);
        v717.i64[0] = 0xFFFFLL;
        v717.i64[1] = 0xFFFFLL;
        v719 = vorrq_s8(v718, vandq_s8(v716, v717));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v719, v719, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v719.i8);
        break;
      case 9:
        v720.i64[0] = 0xFFFF0000FFFFLL;
        v720.i64[1] = 0xFFFF0000FFFFLL;
        v721 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v366, v720));
        v722 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v721, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v721, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v723 = vextq_s8(v722, v722, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v723, 0x24uLL), *(int8x8_t *)v722.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v723, 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v724.i64[0] = 0xFFFF0000FFFFLL;
        v724.i64[1] = 0xFFFF0000FFFFLL;
        v725 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v366, v724));
        v726 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v725, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v725, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v727 = vextq_s8(v726, v726, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v727, 0x28uLL), *(int8x8_t *)v726.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v727, 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v960 = v369;
        v966 = v370;
        v974 = v373;
        v983 = v374;
        v994 = v377;
        v1006 = v378;
        v696 = 0;
        v1029 = 0uLL;
        do
        {
          v1026 = v366;
          v1029.i16[v696] = *(_WORD *)((unint64_t)&v1026 & 0xFFFFFFFFFFFFFFF1 | (2 * (v696 & 7)));
          ++v696;
        }
        while (v696 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v500);
        v377 = v994;
        v378 = v1006;
        v373 = v974;
        v374 = v983;
        v369 = v960;
        v370 = v966;
        break;
    }
LABEL_283:
    v728 = *((unsigned __int16 *)a1 + 25);
    switch(*((_WORD *)a1 + 25))
    {
      case 0:
        goto LABEL_313;
      case 1:
        v729 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xFuLL), v369);
        v730.i64[0] = 0xFFFFLL;
        v730.i64[1] = 0xFFFFLL;
        v731 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v729, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v729, v730));
        v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v731, v731, 8uLL).i64[0], 4uLL), *(int8x8_t *)v731.i8).u32[0];
        v733 = 1;
        goto LABEL_290;
      case 2:
        v735 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xEuLL), v369);
        v736.i64[0] = 0xFFFFLL;
        v736.i64[1] = 0xFFFFLL;
        v737 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v735, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v735, v736));
        v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v737, v737, 8uLL).i64[0], 8uLL), *(int8x8_t *)v737.i8).u32[0];
        v733 = 2;
        goto LABEL_290;
      case 3:
        v738 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xDuLL), v369);
        v739.i64[0] = 0xFFFFLL;
        v739.i64[1] = 0xFFFFLL;
        v740 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v738, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v738, v739));
        v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v740, v740, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v740.i8).u32[0];
        v733 = 3;
LABEL_290:
        *(_DWORD *)v353 = v732;
        v353 = (unint64_t *)((char *)v353 + v733);
        break;
      case 4:
        v741 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xCuLL), v369);
        v742.i64[0] = 16776960;
        v742.i64[1] = 16776960;
        v743 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v741, 0x18uLL), v742);
        v742.i64[0] = 0xFFFFLL;
        v742.i64[1] = 0xFFFFLL;
        v744 = vorrq_s8(v743, vandq_s8(v741, v742));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v744, v744, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v744.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v745 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xBuLL), v369);
        v746.i64[0] = 0xFFFFLL;
        v746.i64[1] = 0xFFFFLL;
        v747 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v745, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v745, v746));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v747, v747, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v747.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v748 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xAuLL), v369);
        v749.i64[0] = 0xFFFFLL;
        v749.i64[1] = 0xFFFFLL;
        v750 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v748, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v748, v749));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v750, v750, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v750.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v751 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 9uLL), v369);
        v752.i64[0] = 0xFFFFLL;
        v752.i64[1] = 0xFFFFLL;
        v753 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v751, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v751, v752));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v753, v753, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v753.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v754 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 8uLL), v369);
        v755.i64[0] = 4294901760;
        v755.i64[1] = 4294901760;
        v756 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v754, 0x10uLL), v755);
        v755.i64[0] = 0xFFFFLL;
        v755.i64[1] = 0xFFFFLL;
        v757 = vorrq_s8(v756, vandq_s8(v754, v755));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v757, v757, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v757.i8);
        break;
      case 9:
        v758.i64[0] = 0xFFFF0000FFFFLL;
        v758.i64[1] = 0xFFFF0000FFFFLL;
        v759 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v369, v758));
        v760 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v759, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v759, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v761 = vextq_s8(v760, v760, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v761, 0x24uLL), *(int8x8_t *)v760.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v761, 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v762.i64[0] = 0xFFFF0000FFFFLL;
        v762.i64[1] = 0xFFFF0000FFFFLL;
        v763 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v369, v762));
        v764 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v763, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v763, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v765 = vextq_s8(v764, v764, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v765, 0x28uLL), *(int8x8_t *)v764.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v765, 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v967 = v370;
        v975 = v373;
        v984 = v374;
        v995 = v377;
        v1007 = v378;
        v734 = 0;
        v1029 = 0uLL;
        do
        {
          v1025 = v369;
          v1029.i16[v734] = *(_WORD *)((unint64_t)&v1025 & 0xFFFFFFFFFFFFFFF1 | (2 * (v734 & 7)));
          ++v734;
        }
        while (v734 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v728);
        v377 = v995;
        v378 = v1007;
        v373 = v975;
        v374 = v984;
        v370 = v967;
        break;
    }
    v766 = *((unsigned __int16 *)a1 + 25);
    switch(*((_WORD *)a1 + 25))
    {
      case 0:
        break;
      case 1:
        v767 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xFuLL), v370);
        v768.i64[0] = 0xFFFFLL;
        v768.i64[1] = 0xFFFFLL;
        v769 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v767, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v767, v768));
        v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v769, v769, 8uLL).i64[0], 4uLL), *(int8x8_t *)v769.i8).u32[0];
        v771 = 1;
        goto LABEL_305;
      case 2:
        v773 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xEuLL), v370);
        v774.i64[0] = 0xFFFFLL;
        v774.i64[1] = 0xFFFFLL;
        v775 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v773, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v773, v774));
        v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v775, v775, 8uLL).i64[0], 8uLL), *(int8x8_t *)v775.i8).u32[0];
        v771 = 2;
        goto LABEL_305;
      case 3:
        v776 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xDuLL), v370);
        v777.i64[0] = 0xFFFFLL;
        v777.i64[1] = 0xFFFFLL;
        v778 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v776, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v776, v777));
        v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v778, v778, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v778.i8).u32[0];
        v771 = 3;
LABEL_305:
        *(_DWORD *)v353 = v770;
        v353 = (unint64_t *)((char *)v353 + v771);
        break;
      case 4:
        v779 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xCuLL), v370);
        v780.i64[0] = 16776960;
        v780.i64[1] = 16776960;
        v781 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v779, 0x18uLL), v780);
        v780.i64[0] = 0xFFFFLL;
        v780.i64[1] = 0xFFFFLL;
        v782 = vorrq_s8(v781, vandq_s8(v779, v780));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v782, v782, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v782.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v783 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xBuLL), v370);
        v784.i64[0] = 0xFFFFLL;
        v784.i64[1] = 0xFFFFLL;
        v785 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v783, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v783, v784));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v785, v785, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v785.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v786 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xAuLL), v370);
        v787.i64[0] = 0xFFFFLL;
        v787.i64[1] = 0xFFFFLL;
        v788 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v786, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v786, v787));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v788, v788, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v788.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v789 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 9uLL), v370);
        v790.i64[0] = 0xFFFFLL;
        v790.i64[1] = 0xFFFFLL;
        v791 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v789, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v789, v790));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v791, v791, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v791.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v792 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 8uLL), v370);
        v793.i64[0] = 4294901760;
        v793.i64[1] = 4294901760;
        v794 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v792, 0x10uLL), v793);
        v793.i64[0] = 0xFFFFLL;
        v793.i64[1] = 0xFFFFLL;
        v795 = vorrq_s8(v794, vandq_s8(v792, v793));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v795, v795, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v795.i8);
        break;
      case 9:
        v796.i64[0] = 0xFFFF0000FFFFLL;
        v796.i64[1] = 0xFFFF0000FFFFLL;
        v797 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v370, v796));
        v798 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v797, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v797, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v799 = vextq_s8(v798, v798, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v799, 0x24uLL), *(int8x8_t *)v798.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v799, 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v800.i64[0] = 0xFFFF0000FFFFLL;
        v800.i64[1] = 0xFFFF0000FFFFLL;
        v801 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v370, v800));
        v802 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v801, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v801, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v803 = vextq_s8(v802, v802, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v803, 0x28uLL), *(int8x8_t *)v802.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v803, 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v976 = v373;
        v985 = v374;
        v996 = v377;
        v1008 = v378;
        v772 = 0;
        v1029 = 0uLL;
        do
        {
          v1024 = v370;
          v1029.i16[v772] = *(_WORD *)((unint64_t)&v1024 & 0xFFFFFFFFFFFFFFF1 | (2 * (v772 & 7)));
          ++v772;
        }
        while (v772 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v766);
        v377 = v996;
        v378 = v1008;
        v373 = v976;
        v374 = v985;
        break;
    }
LABEL_313:
    v804 = *((unsigned __int16 *)a1 + 29);
    switch(*((_WORD *)a1 + 29))
    {
      case 0:
        goto LABEL_343;
      case 1:
        v805 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xFuLL), v373);
        v806.i64[0] = 0xFFFFLL;
        v806.i64[1] = 0xFFFFLL;
        v807 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v805, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v805, v806));
        v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v807, v807, 8uLL).i64[0], 4uLL), *(int8x8_t *)v807.i8).u32[0];
        v809 = 1;
        goto LABEL_320;
      case 2:
        v811 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xEuLL), v373);
        v812.i64[0] = 0xFFFFLL;
        v812.i64[1] = 0xFFFFLL;
        v813 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v811, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v811, v812));
        v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v813, v813, 8uLL).i64[0], 8uLL), *(int8x8_t *)v813.i8).u32[0];
        v809 = 2;
        goto LABEL_320;
      case 3:
        v814 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xDuLL), v373);
        v815.i64[0] = 0xFFFFLL;
        v815.i64[1] = 0xFFFFLL;
        v816 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v814, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v814, v815));
        v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v816, v816, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v816.i8).u32[0];
        v809 = 3;
LABEL_320:
        *(_DWORD *)v353 = v808;
        v353 = (unint64_t *)((char *)v353 + v809);
        break;
      case 4:
        v817 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xCuLL), v373);
        v818.i64[0] = 16776960;
        v818.i64[1] = 16776960;
        v819 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v817, 0x18uLL), v818);
        v818.i64[0] = 0xFFFFLL;
        v818.i64[1] = 0xFFFFLL;
        v820 = vorrq_s8(v819, vandq_s8(v817, v818));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v820, v820, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v820.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v821 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xBuLL), v373);
        v822.i64[0] = 0xFFFFLL;
        v822.i64[1] = 0xFFFFLL;
        v823 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v821, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v821, v822));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v823, v823, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v823.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v824 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xAuLL), v373);
        v825.i64[0] = 0xFFFFLL;
        v825.i64[1] = 0xFFFFLL;
        v826 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v824, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v824, v825));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v826, v826, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v826.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v827 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 9uLL), v373);
        v828.i64[0] = 0xFFFFLL;
        v828.i64[1] = 0xFFFFLL;
        v829 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v827, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v827, v828));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v829, v829, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v829.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v830 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 8uLL), v373);
        v831.i64[0] = 4294901760;
        v831.i64[1] = 4294901760;
        v832 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v830, 0x10uLL), v831);
        v831.i64[0] = 0xFFFFLL;
        v831.i64[1] = 0xFFFFLL;
        v833 = vorrq_s8(v832, vandq_s8(v830, v831));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v833, v833, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v833.i8);
        break;
      case 9:
        v834.i64[0] = 0xFFFF0000FFFFLL;
        v834.i64[1] = 0xFFFF0000FFFFLL;
        v835 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v373, v834));
        v836 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v835, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v835, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v837 = vextq_s8(v836, v836, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v837, 0x24uLL), *(int8x8_t *)v836.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v837, 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v838.i64[0] = 0xFFFF0000FFFFLL;
        v838.i64[1] = 0xFFFF0000FFFFLL;
        v839 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v373, v838));
        v840 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v839, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v839, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v841 = vextq_s8(v840, v840, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v841, 0x28uLL), *(int8x8_t *)v840.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v841, 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v986 = v374;
        v997 = v377;
        v1009 = v378;
        v810 = 0;
        v1029 = 0uLL;
        do
        {
          v1023 = v373;
          v1029.i16[v810] = *(_WORD *)((unint64_t)&v1023 & 0xFFFFFFFFFFFFFFF1 | (2 * (v810 & 7)));
          ++v810;
        }
        while (v810 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v804);
        v377 = v997;
        v378 = v1009;
        v374 = v986;
        break;
    }
    v842 = *((unsigned __int16 *)a1 + 29);
    switch(*((_WORD *)a1 + 29))
    {
      case 0:
        break;
      case 1:
        v843 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xFuLL), v374);
        v844.i64[0] = 0xFFFFLL;
        v844.i64[1] = 0xFFFFLL;
        v845 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v843, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v843, v844));
        v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v845, v845, 8uLL).i64[0], 4uLL), *(int8x8_t *)v845.i8).u32[0];
        v847 = 1;
        goto LABEL_335;
      case 2:
        v849 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xEuLL), v374);
        v850.i64[0] = 0xFFFFLL;
        v850.i64[1] = 0xFFFFLL;
        v851 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v849, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v849, v850));
        v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v851, v851, 8uLL).i64[0], 8uLL), *(int8x8_t *)v851.i8).u32[0];
        v847 = 2;
        goto LABEL_335;
      case 3:
        v852 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xDuLL), v374);
        v853.i64[0] = 0xFFFFLL;
        v853.i64[1] = 0xFFFFLL;
        v854 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v852, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v852, v853));
        v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v854, v854, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v854.i8).u32[0];
        v847 = 3;
LABEL_335:
        *(_DWORD *)v353 = v846;
        v353 = (unint64_t *)((char *)v353 + v847);
        break;
      case 4:
        v855 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xCuLL), v374);
        v856.i64[0] = 16776960;
        v856.i64[1] = 16776960;
        v857 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v855, 0x18uLL), v856);
        v856.i64[0] = 0xFFFFLL;
        v856.i64[1] = 0xFFFFLL;
        v858 = vorrq_s8(v857, vandq_s8(v855, v856));
        *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v858, v858, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v858.i8).u32[0];
        v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        v859 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xBuLL), v374);
        v860.i64[0] = 0xFFFFLL;
        v860.i64[1] = 0xFFFFLL;
        v861 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v859, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v859, v860));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v861, v861, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v861.i8);
        v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        v862 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xAuLL), v374);
        v863.i64[0] = 0xFFFFLL;
        v863.i64[1] = 0xFFFFLL;
        v864 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v862, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v862, v863));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v864, v864, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v864.i8);
        v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        v865 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 9uLL), v374);
        v866.i64[0] = 0xFFFFLL;
        v866.i64[1] = 0xFFFFLL;
        v867 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v865, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v865, v866));
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v867, v867, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v867.i8);
        v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        v868 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 8uLL), v374);
        v869.i64[0] = 4294901760;
        v869.i64[1] = 4294901760;
        v870 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v868, 0x10uLL), v869);
        v869.i64[0] = 0xFFFFLL;
        v869.i64[1] = 0xFFFFLL;
        v871 = vorrq_s8(v870, vandq_s8(v868, v869));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v871, v871, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v871.i8);
        break;
      case 9:
        v872.i64[0] = 0xFFFF0000FFFFLL;
        v872.i64[1] = 0xFFFF0000FFFFLL;
        v873 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v374, v872));
        v874 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v873, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v873, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v875 = vextq_s8(v874, v874, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v875, 0x24uLL), *(int8x8_t *)v874.i8);
        *((_BYTE *)v353 + 8) = vshrd_n_u64(v875, 0x1CuLL);
        v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v876.i64[0] = 0xFFFF0000FFFFLL;
        v876.i64[1] = 0xFFFF0000FFFFLL;
        v877 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v374, v876));
        v878 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v877, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v877, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v879 = vextq_s8(v878, v878, 8uLL).u64[0];
        *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v879, 0x28uLL), *(int8x8_t *)v878.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v879, 0x18uLL);
        v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        v998 = v377;
        v1010 = v378;
        v848 = 0;
        v1029 = 0uLL;
        do
        {
          v1022 = v374;
          v1029.i16[v848] = *(_WORD *)((unint64_t)&v1022 & 0xFFFFFFFFFFFFFFF1 | (2 * (v848 & 7)));
          ++v848;
        }
        while (v848 != 8);
        v353 = vectorWritePacked(v353, (uint64_t)&v1029, v842);
        v377 = v998;
        v378 = v1010;
        break;
    }
LABEL_343:
    if ((_DWORD)v5 != 19)
    {
      v880 = *((unsigned __int16 *)a1 + 33);
      switch(*((_WORD *)a1 + 33))
      {
        case 0:
          goto LABEL_384;
        case 1:
          v881 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xFuLL), v377);
          v882.i64[0] = 0xFFFFLL;
          v882.i64[1] = 0xFFFFLL;
          v883 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v881, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v881, v882));
          v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v883, v883, 8uLL).i64[0], 4uLL), *(int8x8_t *)v883.i8).u32[0];
          v885 = 1;
          goto LABEL_351;
        case 2:
          v887 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xEuLL), v377);
          v888.i64[0] = 0xFFFFLL;
          v888.i64[1] = 0xFFFFLL;
          v889 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v887, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v887, v888));
          v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v889, v889, 8uLL).i64[0], 8uLL), *(int8x8_t *)v889.i8).u32[0];
          v885 = 2;
          goto LABEL_351;
        case 3:
          v890 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xDuLL), v377);
          v891.i64[0] = 0xFFFFLL;
          v891.i64[1] = 0xFFFFLL;
          v892 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v890, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v890, v891));
          v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v892, v892, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v892.i8).u32[0];
          v885 = 3;
LABEL_351:
          *(_DWORD *)v353 = v884;
          v353 = (unint64_t *)((char *)v353 + v885);
          break;
        case 4:
          v893 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xCuLL), v377);
          v894.i64[0] = 16776960;
          v894.i64[1] = 16776960;
          v895 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v893, 0x18uLL), v894);
          v894.i64[0] = 0xFFFFLL;
          v894.i64[1] = 0xFFFFLL;
          v896 = vorrq_s8(v895, vandq_s8(v893, v894));
          *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v896, v896, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v896.i8).u32[0];
          v353 = (unint64_t *)((char *)v353 + 4);
          break;
        case 5:
          v897 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xBuLL), v377);
          v898.i64[0] = 0xFFFFLL;
          v898.i64[1] = 0xFFFFLL;
          v899 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v897, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v897, v898));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v899, v899, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v899.i8);
          v353 = (unint64_t *)((char *)v353 + 5);
          break;
        case 6:
          v900 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xAuLL), v377);
          v901.i64[0] = 0xFFFFLL;
          v901.i64[1] = 0xFFFFLL;
          v902 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v900, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v900, v901));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v902, v902, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v902.i8);
          v353 = (unint64_t *)((char *)v353 + 6);
          break;
        case 7:
          v903 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 9uLL), v377);
          v904.i64[0] = 0xFFFFLL;
          v904.i64[1] = 0xFFFFLL;
          v905 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v903, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v903, v904));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v905, v905, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v905.i8);
          v353 = (unint64_t *)((char *)v353 + 7);
          break;
        case 8:
          v906 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 8uLL), v377);
          v907.i64[0] = 4294901760;
          v907.i64[1] = 4294901760;
          v908 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v906, 0x10uLL), v907);
          v907.i64[0] = 0xFFFFLL;
          v907.i64[1] = 0xFFFFLL;
          v909 = vorrq_s8(v908, vandq_s8(v906, v907));
          *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v909, v909, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v909.i8);
          break;
        case 9:
          v910.i64[0] = 0xFFFF0000FFFFLL;
          v910.i64[1] = 0xFFFF0000FFFFLL;
          v911 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v377, v910));
          v912 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v911, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v911, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
          v913 = vextq_s8(v912, v912, 8uLL).u64[0];
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v913, 0x24uLL), *(int8x8_t *)v912.i8);
          *((_BYTE *)v353 + 8) = vshrd_n_u64(v913, 0x1CuLL);
          v353 = (unint64_t *)((char *)v353 + 9);
          break;
        case 0xA:
          v914.i64[0] = 0xFFFF0000FFFFLL;
          v914.i64[1] = 0xFFFF0000FFFFLL;
          v915 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v377, v914));
          v916 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v915, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v915, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
          v917 = vextq_s8(v916, v916, 8uLL).u64[0];
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v917, 0x28uLL), *(int8x8_t *)v916.i8);
          *((_WORD *)v353 + 4) = vshrd_n_u64(v917, 0x18uLL);
          v353 = (unint64_t *)((char *)v353 + 10);
          break;
        default:
          v1011 = v378;
          v886 = 0;
          v1029 = 0uLL;
          do
          {
            v1021 = v377;
            v1029.i16[v886] = *(_WORD *)((unint64_t)&v1021 & 0xFFFFFFFFFFFFFFF1 | (2 * (v886 & 7)));
            ++v886;
          }
          while (v886 != 8);
          v353 = vectorWritePacked(v353, (uint64_t)&v1029, v880);
          v378 = v1011;
          break;
      }
      v918 = *((unsigned __int16 *)a1 + 33);
      switch(*((_WORD *)a1 + 33))
      {
        case 0:
          break;
        case 1:
          v645 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xFuLL), v378);
          v646 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v645, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL));
LABEL_361:
          v919.i64[0] = 0xFFFFLL;
          v919.i64[1] = 0xFFFFLL;
          v920 = vorrq_s8(v646, vandq_s8(v645, v919));
          v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v920, v920, 8uLL).i64[0], 4uLL), *(int8x8_t *)v920.i8).u32[0];
          v922 = 1;
          goto LABEL_369;
        case 2:
          v651 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xEuLL), v378);
          v652 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v651, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL));
LABEL_366:
          v924.i64[0] = 0xFFFFLL;
          v924.i64[1] = 0xFFFFLL;
          v925 = vorrq_s8(v652, vandq_s8(v651, v924));
          v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v925, v925, 8uLL).i64[0], 8uLL), *(int8x8_t *)v925.i8).u32[0];
          v922 = 2;
          goto LABEL_369;
        case 3:
          v656 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xDuLL), v378);
          v657 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v656, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL));
LABEL_368:
          v926.i64[0] = 0xFFFFLL;
          v926.i64[1] = 0xFFFFLL;
          v927 = vorrq_s8(v657, vandq_s8(v656, v926));
          v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v927, v927, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v927.i8).u32[0];
          v922 = 3;
LABEL_369:
          *(_DWORD *)v353 = v921;
          v353 = (unint64_t *)((char *)v353 + v922);
          break;
        case 4:
          v662 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xCuLL), v378);
LABEL_371:
          v928.i64[0] = 16776960;
          v928.i64[1] = 16776960;
          v929 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v662, 0x18uLL), v928);
          v928.i64[0] = 0xFFFFLL;
          v928.i64[1] = 0xFFFFLL;
          v930 = vorrq_s8(v929, vandq_s8(v662, v928));
          *(_DWORD *)v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v930, v930, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v930.i8).u32[0];
          v353 = (unint64_t *)((char *)v353 + 4);
          break;
        case 5:
          v666 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xBuLL), v378);
          v667 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v666, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL));
LABEL_373:
          v931.i64[0] = 0xFFFFLL;
          v931.i64[1] = 0xFFFFLL;
          v932 = vorrq_s8(v667, vandq_s8(v666, v931));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v932, v932, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v932.i8);
          v353 = (unint64_t *)((char *)v353 + 5);
          break;
        case 6:
          v671 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xAuLL), v378);
          v672 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v671, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL));
LABEL_375:
          v933.i64[0] = 0xFFFFLL;
          v933.i64[1] = 0xFFFFLL;
          v934 = vorrq_s8(v672, vandq_s8(v671, v933));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v934, v934, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v934.i8);
          v353 = (unint64_t *)((char *)v353 + 6);
          break;
        case 7:
          v676 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 9uLL), v378);
          v677 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v676, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL));
LABEL_377:
          v935.i64[0] = 0xFFFFLL;
          v935.i64[1] = 0xFFFFLL;
          v936 = vorrq_s8(v677, vandq_s8(v676, v935));
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v936, v936, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v936.i8);
          v353 = (unint64_t *)((char *)v353 + 7);
          break;
        case 8:
          v682 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 8uLL), v378);
LABEL_379:
          v937.i64[0] = 4294901760;
          v937.i64[1] = 4294901760;
          v938 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v682, 0x10uLL), v937);
          v937.i64[0] = 0xFFFFLL;
          v937.i64[1] = 0xFFFFLL;
          v939 = vorrq_s8(v938, vandq_s8(v682, v937));
          *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v939, v939, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v939.i8);
          break;
        case 9:
          v940.i64[0] = 0xFFFF0000FFFFLL;
          v940.i64[1] = 0xFFFF0000FFFFLL;
          v941 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v378, v940));
          v688 = vandq_s8(v941, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL));
          v690 = (int8x16_t)vshrq_n_u64((uint64x2_t)v941, 0xEuLL);
          v689 = (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL);
LABEL_381:
          v942 = vorrq_s8(vandq_s8(v690, v689), v688);
          v943 = vextq_s8(v942, v942, 8uLL).u64[0];
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v943, 0x24uLL), *(int8x8_t *)v942.i8);
          *((_BYTE *)v353 + 8) = vshrd_n_u64(v943, 0x1CuLL);
          v353 = (unint64_t *)((char *)v353 + 9);
          break;
        case 0xA:
          v944.i64[0] = 0xFFFF0000FFFFLL;
          v944.i64[1] = 0xFFFF0000FFFFLL;
          v695 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v378, v944));
LABEL_383:
          v945 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v695, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v695, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
          v946 = vextq_s8(v945, v945, 8uLL).u64[0];
          *v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v946, 0x28uLL), *(int8x8_t *)v945.i8);
          *((_WORD *)v353 + 4) = vshrd_n_u64(v946, 0x18uLL);
          v353 = (unint64_t *)((char *)v353 + 10);
          break;
        default:
          v923 = 0;
          v1029 = 0uLL;
          do
          {
            v1020 = v378;
            v1029.i16[v923] = *(_WORD *)((unint64_t)&v1020 & 0xFFFFFFFFFFFFFFF1 | (2 * (v923 & 7)));
            ++v923;
          }
          while (v923 != 8);
LABEL_364:
          v353 = vectorWritePacked(v353, (uint64_t)&v1029, v918);
          break;
      }
    }
  }
LABEL_384:
  v11 = 0;
  a1[2] = (uint64_t)v353;
  return v11;
}

unsigned int *vectorload_1x16_packed10(unsigned int *result, int a2, _WORD *a3, _WORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = *result;
  if (a2 == 2)
  {
    *a3 = (v4 >> 20) & 0x3FF;
    v10 = result[1];
    v11 = result[2];
    a3[1] = v10 & 0x3FF;
    a3[2] = (v10 >> 10) & 0x3FF;
    a3[3] = (v10 >> 20) & 0x3FF;
    a3[4] = v11 & 0x3FF;
    a3[5] = (v11 >> 10) & 0x3FF;
    a3[6] = (v11 >> 20) & 0x3FF;
    v12 = result[3];
    v13 = result[4];
    a3[7] = v12 & 0x3FF;
    *a4 = (v12 >> 10) & 0x3FF;
    a4[1] = (v12 >> 20) & 0x3FF;
    a4[2] = v13 & 0x3FF;
    a4[3] = (v13 >> 10) & 0x3FF;
    LOWORD(v12) = (v13 >> 20) & 0x3FF;
    v14 = result[5];
    a4[4] = v12;
    a4[5] = v14 & 0x3FF;
    v9 = v14 >> 20;
    a4[6] = (v14 >> 10) & 0x3FF;
  }
  else if (a2 == 1)
  {
    *a3 = (v4 >> 10) & 0x3FF;
    a3[1] = (v4 >> 20) & 0x3FF;
    v15 = result[1];
    v16 = result[2];
    a3[2] = v15 & 0x3FF;
    a3[3] = (v15 >> 10) & 0x3FF;
    a3[4] = (v15 >> 20) & 0x3FF;
    a3[5] = v16 & 0x3FF;
    a3[6] = (v16 >> 10) & 0x3FF;
    a3[7] = (v16 >> 20) & 0x3FF;
    v17 = result[3];
    v18 = result[4];
    *a4 = v17 & 0x3FF;
    a4[1] = (v17 >> 10) & 0x3FF;
    a4[2] = (v17 >> 20) & 0x3FF;
    a4[3] = v18 & 0x3FF;
    a4[4] = (v18 >> 10) & 0x3FF;
    a4[5] = (v18 >> 20) & 0x3FF;
    v19 = result[5];
    LOWORD(v18) = v19 & 0x3FF;
    v9 = v19 >> 10;
    a4[6] = v18;
  }
  else
  {
    if (a2)
      vectorload_1x16_packed10_cold_1();
    *a3 = v4 & 0x3FF;
    a3[1] = (v4 >> 10) & 0x3FF;
    a3[2] = (v4 >> 20) & 0x3FF;
    v5 = result[1];
    v6 = result[2];
    a3[3] = v5 & 0x3FF;
    a3[4] = (v5 >> 10) & 0x3FF;
    a3[5] = (v5 >> 20) & 0x3FF;
    a3[6] = v6 & 0x3FF;
    a3[7] = (v6 >> 10) & 0x3FF;
    *a4 = (v6 >> 20) & 0x3FF;
    v7 = result[3];
    v8 = result[4];
    a4[1] = v7 & 0x3FF;
    a4[2] = (v7 >> 10) & 0x3FF;
    a4[3] = (v7 >> 20) & 0x3FF;
    a4[4] = v8 & 0x3FF;
    a4[5] = (v8 >> 10) & 0x3FF;
    a4[6] = (v8 >> 20) & 0x3FF;
    v9 = result[5];
  }
  a4[7] = v9 & 0x3FF;
  return result;
}

int *SlimXDecodeBlocks_NEON(int *result, double a2, uint32x4_t a3, uint32x4_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint16x8_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  unsigned __int16 v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  _WORD *v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  __int16 v45;
  __int16 v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int64_t v54;
  int v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unsigned __int128 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint16x8_t v68;
  int16x8_t v69;
  uint16x8_t v70;
  __int16 v71;
  int v72;
  uint16x8_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  __int16 v78;
  __int16 v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int16x8_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int64_t v90;
  int v91;
  int v92;
  uint16x8_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  __int16 v107;
  int v108;
  uint16x8_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  __int16 v114;
  __int16 v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  int16x8_t v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int64_t v126;
  int v127;
  int v128;
  uint16x8_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  __int16 v143;
  int v144;
  uint16x8_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  __int16 v150;
  __int16 v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  int16x8_t v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int64_t v162;
  int v163;
  int v164;
  uint16x8_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  uint16x8_t v179;
  int16x8_t v180;
  __int16 v181;
  int v182;
  uint16x8_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  __int16 v190;
  __int16 v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  int v198;
  int16x8_t v199;
  uint16x8_t v200;
  uint16x8_t v201;
  uint16x8_t v202;
  uint16x8_t v203;
  int16x8_t v204;
  uint16x8_t v205;
  int16x8_t v206;
  uint16x8_t v207;
  int16x8_t v208;
  uint16x8_t v209;
  int16x8_t v210;
  uint16x8_t v211;
  int16x8_t v212;
  uint16x8_t v213;
  int16x8_t v214;
  uint16x8_t v215;
  int16x8_t v216;
  uint16x8_t v217;
  int16x8_t v218;
  uint16x8_t v219;
  uint16x8_t v220;
  uint16x8_t v221;
  uint16x8_t v222;
  uint16x8_t v223;
  uint16x8_t v224;
  uint16x8_t v225;
  uint16x8_t v226;
  uint8x8_t *v227;
  uint8x8_t *v228;
  uint8x8_t *v229;
  uint8x8_t v230;
  uint8x8_t v231;
  __int16 *v232;
  __int16 *v233;
  __int16 *v234;
  uint16x8_t v235;
  uint16x8_t v236;
  uint16x8_t v237;
  uint16x8_t v238;
  uint16x8_t v239;
  uint16x8_t v240;
  uint16x8_t v241;
  uint16x8_t v242;
  uint16x8_t *v243;
  uint16x8_t *v244;
  uint16x8_t *v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int8x16_t *v263;
  int8x16_t *v264;
  int8x16_t *v265;
  uint16x8_t *v266;
  uint16x8_t *v267;
  uint16x8_t *v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  uint16x8_t v273;
  uint8x8_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  uint16x8_t v287;
  uint16x8_t v288;
  uint16x8_t v289;
  uint16x8_t v290;
  uint16x8_t v291;
  uint16x8_t v292;
  uint16x8_t v293;
  uint16x8_t v294;
  uint8x8_t *v295;
  uint8x8_t *v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  unsigned __int128 v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int8x16_t v317;
  int8x16_t *v318;
  int8x16_t *v319;
  int8x16_t *v320;
  int8x16_t *v321;
  int8x16_t *v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int16x8_t v335;
  unsigned __int128 v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int8x16_t *v343;
  int8x16_t *v344;
  int8x16_t *v345;
  int8x16_t *v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int8x16_t *v356;
  int8x16_t *v357;
  int8x16_t *v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  uint16x8_t v363;
  uint16x8_t v364;
  uint16x8_t v365;
  uint16x8_t v366;
  uint16x8_t v367;
  uint16x8_t v368;
  uint16x8_t v369;
  uint16x8_t v370;
  uint16x8_t *v371;
  uint16x8_t *v372;
  uint16x8_t *v373;
  uint16x8_t *v374;
  uint16x8_t *v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int32x4_t v383;
  uint16x8_t v384;
  uint16x8_t v385;
  uint16x8_t v386;
  uint16x8_t v387;
  uint16x8_t v388;
  uint16x8_t v389;
  uint16x8_t v390;
  uint16x8_t *v391;
  uint16x8_t *v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  uint16x8_t v397;
  uint16x8_t v398;
  uint16x8_t v399;
  uint16x8_t v400;
  uint16x8_t v401;
  uint16x8_t v402;
  uint16x8_t v403;
  uint16x8_t v404;
  uint16x8_t *v405;
  uint16x8_t *v406;
  uint16x8_t *v407;
  uint16x8_t *v408;
  uint16x8_t *v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  uint16x8_t v414;
  uint16x8_t v415;
  uint16x8_t v416;
  uint16x8_t v417;
  uint16x8_t v418;
  uint16x8_t v419;
  uint16x8_t v420;
  uint16x8_t v421;
  uint16x8_t *v422;
  uint16x8_t *v423;
  uint16x8_t *v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  uint16x8_t v429;
  uint16x8_t v430;
  uint16x8_t v431;
  uint16x8_t v432;
  uint16x8_t v433;
  uint16x8_t v434;
  uint16x8_t v435;
  uint16x8_t v436;
  uint16x8_t *v437;
  uint16x8_t *v438;
  uint16x8_t *v439;
  uint16x8_t *v440;
  uint16x8_t *v441;
  uint16x8_t v442;
  uint16x8_t v443;
  uint16x8_t v444;
  uint16x8_t v445;
  uint16x8_t v446;
  uint16x8_t v447;
  uint16x8_t v448;
  int16x8_t v449;
  uint64_t v450;
  int16x4x3_t v451;
  int16x4x3_t v452;

  v450 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 2);
  v5 = *((_QWORD *)result + 3);
  if (v4 >= v5)
    goto LABEL_282;
  v6 = *(_QWORD *)result;
  v7 = result[2];
  v8 = result[3];
  v10 = result[8];
  v9 = result[9];
  v11 = (uint16x8_t)vdupq_n_s16(v9);
  v12 = (char *)result + 42;
  v13 = predictionPattern[v10];
  v14 = v5 - v4;
  v15 = (unsigned __int8 *)(v4 + 2);
  while (1)
  {
    v16 = v15 - 1;
    *((_QWORD *)result + 2) = v15 - 1;
    v17 = *(v15 - 2);
    v18 = v17 & 0xF;
    v19 = v17 >> 4;
    if (v17 >> 4 != 6)
      break;
    if (v18 < 8)
    {
      v20 = 10 - v18;
      if ((v17 & 0xF) == 0)
        v20 = 0;
      result[27] = v18;
      result[28] = v20;
      ++v15;
      if (--v14)
        continue;
    }
    goto LABEL_282;
  }
  switch(v19)
  {
    case 0u:
    case 1u:
    case 2u:
      if ((unint64_t)v16 >= v5)
        goto LABEL_282;
      *((_QWORD *)result + 2) = v15;
      v21 = *(v15 - 1) | (v19 << 8);
      v22 = (unsigned __int16)(*(v15 - 1) | (unsigned __int16)((_WORD)v19 << 8));
      v23 = v21 - (4 * (v22 / 5) + ((52429 * v22) >> 18));
      *((_WORD *)result + 34) = v21 - (4 * (v22 / 5) + (unsigned __int16)v22 / 5u);
      v24 = (v22 / 5 - 5 * (((52429 * v22) >> 18) / 5u));
      *((_WORD *)result + 30) = v24;
      v25 = ((((unsigned __int16)(v21 - ((18351 * v22) >> 16)) >> 1) + ((18351 * v22) >> 16)) >> 4)
          % 5u;
      *((_WORD *)result + 26) = v25;
      LODWORD(v17) = (((unsigned __int16)(v21 - ((1573 * v22) >> 16)) >> 1) + ((1573 * v22) >> 16)) >> 6;
      if (v22 >= 0x271)
        LOWORD(v17) = v17 - 5;
      *((_WORD *)result + 22) = v17;
LABEL_24:
      v26 = v17 + *(_WORD *)&v12[(v13 >> 9) & 0x7FFFF8] - 2;
      *((_WORD *)result + 21) = v26;
      LOWORD(v27) = v25 + *(_WORD *)&v12[8 * ((v13 >> 8) & 0xF)] - 2;
      *((_WORD *)result + 25) = v27;
      LOWORD(v28) = v24 + *(_WORD *)&v12[8 * (v13 >> 4)] - 2;
      *((_WORD *)result + 29) = v28;
      LOWORD(v29) = v23 + *(_WORD *)&v12[8 * (v13 & 0xF)] - 2;
      *((_WORD *)result + 33) = v29;
      break;
    case 3u:
      v26 = *(_WORD *)&v12[(v13 >> 9) & 0x7FFFF8];
      *((_WORD *)result + 21) = v26;
      LOWORD(v27) = *(_WORD *)&v12[8 * ((v13 >> 8) & 0xF)];
      *((_WORD *)result + 25) = v27;
      LOWORD(v28) = *(_WORD *)&v12[8 * (v13 >> 4)];
      *((_WORD *)result + 29) = v28;
      LOWORD(v29) = *(_WORD *)&v12[8 * (v13 & 0xF)];
      goto LABEL_22;
    case 4u:
      if ((unint64_t)v16 >= v5)
        goto LABEL_282;
      *((_QWORD *)result + 2) = v15;
      v30 = *(v15 - 1);
      v26 = v30 & 0xF;
      *((_WORD *)result + 21) = v26;
      v27 = v30 >> 4;
      *((_WORD *)result + 25) = v27;
      if ((unint64_t)v15 >= v5)
        goto LABEL_282;
      v31 = v15 + 1;
      *((_QWORD *)result + 2) = v15 + 1;
      v32 = *v15;
      LOWORD(v28) = v32 & 0xF;
      *((_WORD *)result + 29) = v28;
      v29 = v32 >> 4;
      *((_WORD *)result + 33) = v32 >> 4;
      v15 = v31;
      break;
    case 5u:
      if ((unint64_t)v16 >= v5)
        goto LABEL_282;
      *((_QWORD *)result + 2) = v15;
      if ((unint64_t)v15 >= v5)
        goto LABEL_282;
      v33 = *(v15 - 1);
      *((_QWORD *)result + 2) = v15 + 1;
      if ((unint64_t)(v15 + 1) >= v5)
        goto LABEL_282;
      v34 = *v15;
      v16 = v15 + 2;
      *((_QWORD *)result + 2) = v15 + 2;
      v35 = v15[1];
      v36 = (v34 << 8) | (v35 << 16);
      v26 = v33 & 0x3F;
      *((_WORD *)result + 21) = v26;
      v27 = ((v33 & 0xFFFF00FF | (v34 << 8)) >> 6) & 0x3F;
      *((_WORD *)result + 25) = v27;
      v28 = (v36 >> 12) & 0x3F;
      *((_WORD *)result + 29) = (v36 >> 12) & 0x3F;
      v29 = v35 >> 2;
LABEL_22:
      *((_WORD *)result + 33) = v29;
      v15 = v16;
      break;
    case 7u:
      goto LABEL_282;
    default:
      *((_WORD *)result + 34) = 2;
      *((_WORD *)result + 30) = 2;
      *((_WORD *)result + 26) = 2;
      *((_WORD *)result + 22) = 2;
      *(_WORD *)&v12[8 * ((v17 >> 5) & 3) + 2] = (2 * ((v17 & 0x10) != 0)) ^ 3;
      LOWORD(v17) = *((_WORD *)result + 22);
      v25 = *((_WORD *)result + 26);
      v24 = *((_WORD *)result + 30);
      LOWORD(v23) = *((_WORD *)result + 34);
      --v15;
      goto LABEL_24;
  }
  if (v10 >= 6)
    v37 = 16;
  else
    v37 = 8;
  if (v37 < v26
    || (v38 = (unsigned __int16)v27, v37 < (unsigned __int16)v27)
    || (v39 = (unsigned __int16)v28, v37 < (unsigned __int16)v28)
    || (v40 = (unsigned __int16)v29, v37 < (unsigned __int16)v29))
  {
LABEL_282:
    longjmp(result + 29, -15407);
  }
  v41 = (_WORD *)result + 23;
  v42 = 16;
  do
  {
    if ((v18 & 1) == 0)
    {
      LOWORD(v43) = 0;
LABEL_35:
      *v41 = *(_WORD *)&v12[8 * ((v13 >> (v42 - 4)) & 3) + 4] + v43;
      goto LABEL_49;
    }
    if ((unint64_t)v15 >= v5)
      goto LABEL_282;
    v44 = v15 + 1;
    *((_QWORD *)result + 2) = v15 + 1;
    v45 = *v15;
    if (v10 > 5)
    {
      if (*v15)
      {
        if ((v45 & 0x80) != 0)
        {
          if ((unint64_t)v44 >= v5)
            goto LABEL_282;
          v47 = v15 + 2;
          *((_QWORD *)result + 2) = v15 + 2;
          v48 = v45 & 0x3F | (v15[1] << 6);
          if ((v45 & 0x40) != 0)
            v43 = -v48;
          else
            LOWORD(v43) = v48;
          v15 = v47;
        }
        else
        {
          if ((v45 & 0x40) != 0)
            v43 = -(v45 & 0x3F);
          else
            LOWORD(v43) = v45 & 0x3F;
          ++v15;
        }
        goto LABEL_35;
      }
      if ((unint64_t)v44 >= v5)
        goto LABEL_282;
      *((_QWORD *)result + 2) = v15 + 2;
      v46 = v15[1];
      *v41 = v46;
      if ((unint64_t)(v15 + 2) >= v5)
        goto LABEL_282;
      v44 = v15 + 3;
      *((_QWORD *)result + 2) = v15 + 3;
      *v41 = v46 | (v15[2] << 8);
    }
    else
    {
      *v41 = v45;
    }
    v15 = v44;
LABEL_49:
    v18 >>= 1;
    v41 += 4;
    v42 -= 4;
  }
  while (v42);
  v49 = result[27];
  if (v10 <= 0x10 && v49)
  {
    if (v10 >= 0xC || (_DWORD)v10 == 6)
      v51 = 0;
    else
      v51 = -1;
    v52 = v49 * v26 + 7;
    v53 = v49 * v26 / 8;
    v54 = v26 - v53;
    v55 = 1 << (v53 - 1);
    if (v52 < 0xF)
      v55 = 0;
    if (v54 <= 0x10 && (uint64_t)(v5 - (_QWORD)v15) >= v54)
    {
      a3.i32[0] = v10;
      a4.i32[0] = 6;
      v56 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a4, a3), 0);
      v57 = (int8x16_t)vdupq_n_s16(v51);
      v58 = vbicq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0x3FF03FF03FF03FFLL, 0x3FF03FF03FF03FFLL)), v57), v56);
      v59 = *(_OWORD *)&v56 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      v60 = v55 + *((unsigned __int16 *)result + 23);
      if (v54 < 5)
      {
        v61 = 0;
        v63 = 0;
      }
      else
      {
        v62 = *(_DWORD *)v15;
        v15 += 4;
        v61 = v62;
        v63 = 32;
      }
      v67 = 0;
      v68 = (uint16x8_t)vdupq_n_s16(v53);
      v69 = vdupq_n_s16(v60);
      v70 = (uint16x8_t)vorrq_s8((int8x16_t)v59, v58);
      v71 = ~(unsigned __int16)(-1 << v54);
      v449 = 0uLL;
      do
      {
        while (v63 < v54)
        {
          v72 = *v15++;
          v61 += v72 << v63;
          v63 += 8;
        }
        v449.i16[v67] = v61 & v71;
        v61 >>= v54;
        v63 -= v54;
        ++v67;
      }
      while (v67 != 8);
      *((_QWORD *)result + 2) = v15;
      if ((uint64_t)(v5 - (_QWORD)v15) >= v54)
      {
        v73 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v68), v69);
        if (v54 < 5)
        {
          v74 = 0;
          v76 = 0;
        }
        else
        {
          v75 = *(_DWORD *)v15;
          v15 += 4;
          v74 = v75;
          v76 = 32;
        }
        v84 = 0;
        v85 = (int16x8_t)vminq_u16(v73, v70);
        v449 = 0uLL;
        do
        {
          while (v76 < v54)
          {
            v86 = *v15++;
            v74 += v86 << v76;
            v76 += 8;
          }
          v449.i16[v84] = v74 & v71;
          v74 >>= v54;
          v76 -= v54;
          ++v84;
        }
        while (v84 != 8);
        *((_QWORD *)result + 2) = v15;
        v87 = v49 * v38 + 7;
        v88 = v49 * (int)v38 >= 0 ? v49 * v38 : v49 * (int)v38 + 7;
        v89 = v88 >> 3;
        v90 = (v38 - (v88 >> 3));
        v91 = 1 << ((v88 >> 3) - 1);
        v92 = v87 >= 0xF ? v91 : 0;
        if (v90 <= 0x10 && (uint64_t)(v5 - (_QWORD)v15) >= v90)
        {
          v93 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v68), v69);
          v94 = v92 + *((unsigned __int16 *)result + 27);
          if (v90 < 5)
          {
            v95 = 0;
            v97 = 0;
          }
          else
          {
            v96 = *(_DWORD *)v15;
            v15 += 4;
            v95 = v96;
            v97 = 32;
          }
          v103 = 0;
          v104 = (uint16x8_t)vdupq_n_s16(v89);
          v105 = vdupq_n_s16(v94);
          v106 = (int16x8_t)vminq_u16(v93, v70);
          v107 = ~(unsigned __int16)(-1 << v90);
          v449 = 0uLL;
          do
          {
            while (v97 < v90)
            {
              v108 = *v15++;
              v95 += v108 << v97;
              v97 += 8;
            }
            v449.i16[v103] = v95 & v107;
            v95 >>= v90;
            v97 -= v90;
            ++v103;
          }
          while (v103 != 8);
          *((_QWORD *)result + 2) = v15;
          if ((uint64_t)(v5 - (_QWORD)v15) >= v90)
          {
            v109 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v104), v105);
            if (v90 < 5)
            {
              v110 = 0;
              v112 = 0;
            }
            else
            {
              v111 = *(_DWORD *)v15;
              v15 += 4;
              v110 = v111;
              v112 = 32;
            }
            v120 = 0;
            v121 = (int16x8_t)vminq_u16(v109, v70);
            v449 = 0uLL;
            do
            {
              while (v112 < v90)
              {
                v122 = *v15++;
                v110 += v122 << v112;
                v112 += 8;
              }
              v449.i16[v120] = v110 & v107;
              v110 >>= v90;
              v112 -= v90;
              ++v120;
            }
            while (v120 != 8);
            *((_QWORD *)result + 2) = v15;
            v123 = v49 * v39 + 7;
            v124 = v49 * (int)v39 >= 0 ? v49 * v39 : v49 * (int)v39 + 7;
            v125 = v124 >> 3;
            v126 = (v39 - (v124 >> 3));
            v127 = 1 << ((v124 >> 3) - 1);
            v128 = v123 >= 0xF ? v127 : 0;
            if (v126 <= 0x10 && (uint64_t)(v5 - (_QWORD)v15) >= v126)
            {
              v129 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v104), v105);
              v130 = v128 + *((unsigned __int16 *)result + 31);
              if (v126 < 5)
              {
                v131 = 0;
                v133 = 0;
              }
              else
              {
                v132 = *(_DWORD *)v15;
                v15 += 4;
                v131 = v132;
                v133 = 32;
              }
              v139 = 0;
              v140 = (uint16x8_t)vdupq_n_s16(v125);
              v141 = vdupq_n_s16(v130);
              v142 = (int16x8_t)vminq_u16(v129, v70);
              v143 = ~(unsigned __int16)(-1 << v126);
              v449 = 0uLL;
              do
              {
                while (v133 < v126)
                {
                  v144 = *v15++;
                  v131 += v144 << v133;
                  v133 += 8;
                }
                v449.i16[v139] = v131 & v143;
                v131 >>= v126;
                v133 -= v126;
                ++v139;
              }
              while (v139 != 8);
              *((_QWORD *)result + 2) = v15;
              if ((uint64_t)(v5 - (_QWORD)v15) >= v126)
              {
                v145 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v140), v141);
                if (v126 < 5)
                {
                  v146 = 0;
                  v148 = 0;
                }
                else
                {
                  v147 = *(_DWORD *)v15;
                  v15 += 4;
                  v146 = v147;
                  v148 = 32;
                }
                v156 = 0;
                v157 = (int16x8_t)vminq_u16(v145, v70);
                v449 = 0uLL;
                do
                {
                  while (v148 < v126)
                  {
                    v158 = *v15++;
                    v146 += v158 << v148;
                    v148 += 8;
                  }
                  v449.i16[v156] = v146 & v143;
                  v146 >>= v126;
                  v148 -= v126;
                  ++v156;
                }
                while (v156 != 8);
                *((_QWORD *)result + 2) = v15;
                v159 = v49 * v40 + 7;
                v160 = v49 * (int)v40 >= 0 ? v49 * v40 : v49 * (int)v40 + 7;
                v161 = v160 >> 3;
                v162 = (v40 - (v160 >> 3));
                v163 = 1 << ((v160 >> 3) - 1);
                v164 = v159 >= 0xF ? v163 : 0;
                if (v162 <= 0x10 && (uint64_t)(v5 - (_QWORD)v15) >= v162)
                {
                  v165 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v140), v141);
                  v166 = v164 + *((unsigned __int16 *)result + 35);
                  if (v162 < 5)
                  {
                    v167 = 0;
                    v169 = 0;
                  }
                  else
                  {
                    v168 = *(_DWORD *)v15;
                    v15 += 4;
                    v167 = v168;
                    v169 = 32;
                  }
                  v178 = 0;
                  v179 = (uint16x8_t)vdupq_n_s16(v161);
                  v180 = vdupq_n_s16(v166);
                  v172 = (int16x8_t)vminq_u16(v165, v70);
                  v181 = ~(unsigned __int16)(-1 << v162);
                  v449 = 0uLL;
                  do
                  {
                    while (v169 < v162)
                    {
                      v182 = *v15++;
                      v167 += v182 << v169;
                      v169 += 8;
                    }
                    v449.i16[v178] = v167 & v181;
                    v167 >>= v162;
                    v169 -= v162;
                    ++v178;
                  }
                  while (v178 != 8);
                  *((_QWORD *)result + 2) = v15;
                  if ((uint64_t)(v5 - (_QWORD)v15) >= v162)
                  {
                    v183 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v179), v180);
                    if (v162 < 5)
                    {
                      v184 = 0;
                      v186 = 0;
                    }
                    else
                    {
                      v185 = *(_DWORD *)v15;
                      v15 += 4;
                      v184 = v185;
                      v186 = 32;
                    }
                    v187 = 0;
                    v173 = (int16x8_t)vminq_u16(v183, v70);
                    v449 = 0uLL;
                    do
                    {
                      while (v186 < v162)
                      {
                        v188 = *v15++;
                        v184 += v188 << v186;
                        v186 += 8;
                      }
                      v449.i16[v187] = v184 & v181;
                      v184 >>= v162;
                      v186 -= v162;
                      ++v187;
                    }
                    while (v187 != 8);
                    *((_QWORD *)result + 2) = v15;
                    v174 = (int16x8_t)vminq_u16((uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v449, v179), v180), v70);
                    goto LABEL_225;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_282;
  }
  if (v26 > 0x10u || (uint64_t)(v5 - (_QWORD)v15) < v26)
    goto LABEL_282;
  if (v26 < 5u)
  {
    v64 = 0;
    v66 = 0;
  }
  else
  {
    v65 = *(_DWORD *)v15;
    v15 += 4;
    v64 = v65;
    v66 = 32;
  }
  v77 = 0;
  v78 = *((_WORD *)result + 23);
  v79 = ~(unsigned __int16)(-1 << v26);
  v449 = 0uLL;
  do
  {
    while (v66 < v26)
    {
      v80 = *v15++;
      v64 += v80 << v66;
      v66 += 8;
    }
    v449.i16[v77] = v78 + (v64 & v79);
    v64 >>= v26;
    v66 -= v26;
    ++v77;
  }
  while (v77 != 8);
  *((_QWORD *)result + 2) = v15;
  if ((uint64_t)(v5 - (_QWORD)v15) < v26)
    goto LABEL_282;
  if (v26 < 5u)
  {
    v81 = 0;
    v83 = 0;
  }
  else
  {
    v82 = *(_DWORD *)v15;
    v15 += 4;
    v81 = v82;
    v83 = 32;
  }
  v98 = 0;
  v85 = v449;
  v449 = 0uLL;
  do
  {
    while (v83 < v26)
    {
      v99 = *v15++;
      v81 += v99 << v83;
      v83 += 8;
    }
    v449.i16[v98] = v78 + (v81 & v79);
    v81 >>= v26;
    v83 -= v26;
    ++v98;
  }
  while (v98 != 8);
  *((_QWORD *)result + 2) = v15;
  if (v38 > 0x10 || (uint64_t)(v5 - (_QWORD)v15) < v38)
    goto LABEL_282;
  if (v38 < 5)
  {
    v100 = 0;
    v102 = 0;
  }
  else
  {
    v101 = *(_DWORD *)v15;
    v15 += 4;
    v100 = v101;
    v102 = 32;
  }
  v113 = 0;
  v106 = v449;
  v114 = *((_WORD *)result + 27);
  v115 = ~(unsigned __int16)(-1 << v38);
  v449 = 0uLL;
  do
  {
    while (v102 < v38)
    {
      v116 = *v15++;
      v100 += v116 << v102;
      v102 += 8;
    }
    v449.i16[v113] = v114 + (v100 & v115);
    v100 >>= v38;
    v102 -= v38;
    ++v113;
  }
  while (v113 != 8);
  *((_QWORD *)result + 2) = v15;
  if ((uint64_t)(v5 - (_QWORD)v15) < v38)
    goto LABEL_282;
  if (v38 < 5)
  {
    v117 = 0;
    v119 = 0;
  }
  else
  {
    v118 = *(_DWORD *)v15;
    v15 += 4;
    v117 = v118;
    v119 = 32;
  }
  v134 = 0;
  v121 = v449;
  v449 = 0uLL;
  do
  {
    while (v119 < v38)
    {
      v135 = *v15++;
      v117 += v135 << v119;
      v119 += 8;
    }
    v449.i16[v134] = v114 + (v117 & v115);
    v117 >>= v38;
    v119 -= v38;
    ++v134;
  }
  while (v134 != 8);
  *((_QWORD *)result + 2) = v15;
  if (v39 > 0x10 || (uint64_t)(v5 - (_QWORD)v15) < v39)
    goto LABEL_282;
  if (v39 < 5)
  {
    v136 = 0;
    v138 = 0;
  }
  else
  {
    v137 = *(_DWORD *)v15;
    v15 += 4;
    v136 = v137;
    v138 = 32;
  }
  v149 = 0;
  v142 = v449;
  v150 = *((_WORD *)result + 31);
  v151 = ~(unsigned __int16)(-1 << v39);
  v449 = 0uLL;
  do
  {
    while (v138 < v39)
    {
      v152 = *v15++;
      v136 += v152 << v138;
      v138 += 8;
    }
    v449.i16[v149] = v150 + (v136 & v151);
    v136 >>= v39;
    v138 -= v39;
    ++v149;
  }
  while (v149 != 8);
  *((_QWORD *)result + 2) = v15;
  if ((uint64_t)(v5 - (_QWORD)v15) < v39)
    goto LABEL_282;
  if (v39 < 5)
  {
    v153 = 0;
    v155 = 0;
  }
  else
  {
    v154 = *(_DWORD *)v15;
    v15 += 4;
    v153 = v154;
    v155 = 32;
  }
  v170 = 0;
  v157 = v449;
  v449 = 0uLL;
  do
  {
    while (v155 < v39)
    {
      v171 = *v15++;
      v153 += v171 << v155;
      v155 += 8;
    }
    v449.i16[v170] = v150 + (v153 & v151);
    v153 >>= v39;
    v155 -= v39;
    ++v170;
  }
  while (v170 != 8);
  *((_QWORD *)result + 2) = v15;
  v172 = v449;
  if ((_DWORD)v10 == 19)
  {
    v173 = 0uLL;
    v174 = 0uLL;
    if (!v49)
    {
LABEL_233:
      if (v9)
      {
        v85 = (int16x8_t)vshlq_u16((uint16x8_t)v85, v11);
        v106 = (int16x8_t)vshlq_u16((uint16x8_t)v106, v11);
        v121 = (int16x8_t)vshlq_u16((uint16x8_t)v121, v11);
        v142 = (int16x8_t)vshlq_u16((uint16x8_t)v142, v11);
        v157 = (int16x8_t)vshlq_u16((uint16x8_t)v157, v11);
        v172 = (int16x8_t)vshlq_u16((uint16x8_t)v172, v11);
      }
      v452.val[0] = (int16x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
      v452.val[1] = (int16x4_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
      vst3_s16((__int16 *)v6, *(int16x4x3_t *)v85.i8);
      v232 = (__int16 *)(v6 + v8);
      v452.val[2] = (int16x4_t)vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
      vst3_s16(v232, v452);
      v233 = (__int16 *)((char *)v232 + v8);
      v451.val[0] = (int16x4_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
      vst3_s16(v233, *(int16x4x3_t *)v106.i8);
      v234 = (__int16 *)((char *)v233 + v8);
      v451.val[1] = (int16x4_t)vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
      v451.val[2] = (int16x4_t)vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
      vst3_s16(v234, v451);
      return result;
    }
LABEL_226:
    v198 = result[28];
    if (v198)
    {
      v199 = vdupq_n_s16(v198 - 1);
      v200 = (uint16x8_t)vnegq_s16(v199);
      v201 = (uint16x8_t)vdupq_n_s16(-v198);
      v202.i64[0] = 0x1000100010001;
      v202.i64[1] = 0x1000100010001;
      v203 = vqsubq_u16(vshlq_u16((uint16x8_t)v85, v200), v202);
      v204 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v85, (int16x8_t)vshlq_u16(v203, (uint16x8_t)v199)), v203);
      v85 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v204, v201), v204);
      v205 = vqsubq_u16(vshlq_u16((uint16x8_t)v106, v200), v202);
      v206 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v106, (int16x8_t)vshlq_u16(v205, (uint16x8_t)v199)), v205);
      v106 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v206, v201), v206);
      v207 = vqsubq_u16(vshlq_u16((uint16x8_t)v121, v200), v202);
      v208 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v121, (int16x8_t)vshlq_u16(v207, (uint16x8_t)v199)), v207);
      v121 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v208, v201), v208);
      v209 = vqsubq_u16(vshlq_u16((uint16x8_t)v142, v200), v202);
      v210 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v142, (int16x8_t)vshlq_u16(v209, (uint16x8_t)v199)), v209);
      v142 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v210, v201), v210);
      v211 = vqsubq_u16(vshlq_u16((uint16x8_t)v157, v200), v202);
      v212 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v157, (int16x8_t)vshlq_u16(v211, (uint16x8_t)v199)), v211);
      v157 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v212, v201), v212);
      v213 = vqsubq_u16(vshlq_u16((uint16x8_t)v172, v200), v202);
      v214 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v172, (int16x8_t)vshlq_u16(v213, (uint16x8_t)v199)), v213);
      v172 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v214, v201), v214);
      v215 = vqsubq_u16(vshlq_u16((uint16x8_t)v173, v200), v202);
      v216 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v173, (int16x8_t)vshlq_u16(v215, (uint16x8_t)v199)), v215);
      v173 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v216, v201), v216);
      v217 = vqsubq_u16(vshlq_u16((uint16x8_t)v174, v200), v202);
      v218 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v174, (int16x8_t)vshlq_u16(v217, (uint16x8_t)v199)), v217);
      v174 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v218, v201), v218);
    }
  }
  else
  {
    if (v40 > 0x10 || (uint64_t)(v5 - (_QWORD)v15) < v40)
      goto LABEL_282;
    if (v40 < 5)
    {
      v175 = 0;
      v177 = 0;
    }
    else
    {
      v176 = *(_DWORD *)v15;
      v15 += 4;
      v175 = v176;
      v177 = 32;
    }
    v189 = 0;
    v190 = *((_WORD *)result + 35);
    v191 = ~(unsigned __int16)(-1 << v40);
    v449 = 0uLL;
    do
    {
      while (v177 < v40)
      {
        v192 = *v15++;
        v175 += v192 << v177;
        v177 += 8;
      }
      v449.i16[v189] = v190 + (v175 & v191);
      v175 >>= v40;
      v177 -= v40;
      ++v189;
    }
    while (v189 != 8);
    *((_QWORD *)result + 2) = v15;
    if ((uint64_t)(v5 - (_QWORD)v15) < v40)
      goto LABEL_282;
    if (v40 < 5)
    {
      v193 = 0;
      v195 = 0;
    }
    else
    {
      v194 = *(_DWORD *)v15;
      v15 += 4;
      v193 = v194;
      v195 = 32;
    }
    v196 = 0;
    v173 = v449;
    v449 = 0uLL;
    do
    {
      while (v195 < v40)
      {
        v197 = *v15++;
        v193 += v197 << v195;
        v195 += 8;
      }
      v449.i16[v196] = v190 + (v193 & v191);
      v193 >>= v40;
      v195 -= v40;
      ++v196;
    }
    while (v196 != 8);
    *((_QWORD *)result + 2) = v15;
    v174 = v449;
    if (v49)
    {
LABEL_225:
      if (v10 > 0x10)
        goto LABEL_226;
    }
  }
  switch((int)v10)
  {
    case 0:
    case 7:
      v219 = (uint16x8_t)vzip1q_s64((int64x2_t)v85, (int64x2_t)v121);
      v220 = (uint16x8_t)vzip2q_s64((int64x2_t)v85, (int64x2_t)v121);
      v221 = (uint16x8_t)vzip1q_s64((int64x2_t)v106, (int64x2_t)v142);
      v222 = (uint16x8_t)vzip2q_s64((int64x2_t)v106, (int64x2_t)v142);
      v223 = (uint16x8_t)vzip1q_s64((int64x2_t)v157, (int64x2_t)v173);
      v224 = (uint16x8_t)vzip2q_s64((int64x2_t)v157, (int64x2_t)v173);
      v225 = (uint16x8_t)vzip1q_s64((int64x2_t)v172, (int64x2_t)v174);
      v226 = (uint16x8_t)vzip2q_s64((int64x2_t)v172, (int64x2_t)v174);
      if (!v9)
        goto LABEL_231;
      goto LABEL_230;
    case 1:
    case 8:
    case 11:
    case 25:
      v219 = (uint16x8_t)vtrn1q_s16(v85, v121);
      v220 = (uint16x8_t)vtrn2q_s16(v85, v121);
      v221 = (uint16x8_t)vtrn1q_s16(v106, v142);
      v222 = (uint16x8_t)vtrn2q_s16(v106, v142);
      v223 = (uint16x8_t)vtrn1q_s16(v157, v173);
      v224 = (uint16x8_t)vtrn2q_s16(v157, v173);
      v225 = (uint16x8_t)vtrn1q_s16(v172, v174);
      v226 = (uint16x8_t)vtrn2q_s16(v172, v174);
      if (v9)
      {
LABEL_230:
        v219 = vshlq_u16(v219, v11);
        v221 = vshlq_u16(v221, v11);
        v220 = vshlq_u16(v220, v11);
        v222 = vshlq_u16(v222, v11);
        v223 = vshlq_u16(v223, v11);
        v225 = vshlq_u16(v225, v11);
        v224 = vshlq_u16(v224, v11);
        v226 = vshlq_u16(v226, v11);
      }
LABEL_231:
      if (v10 > 5)
      {
        if ((v10 - 7) > 1)
        {
          *(uint16x8_t *)v6 = v219;
          *(uint16x8_t *)(v6 + 16) = v223;
          v266 = (uint16x8_t *)(v6 + v8);
          *v266 = v221;
          v266[1] = v225;
          v267 = (uint16x8_t *)(v6 + v8 + v8);
          *v267 = v220;
          v267[1] = v224;
          v268 = (uint16x8_t *)((char *)v267 + v8);
          *v268 = v222;
LABEL_272:
          v268[1] = v226;
        }
        else
        {
          v448 = v223;
          v449 = (int16x8_t)v219;
          v446 = v222;
          v447 = v226;
          v444 = v220;
          v445 = v224;
          v442 = v221;
          v443 = v225;
          vectorstore_1x16_packed10((int *)v6, v7, (unsigned __int16 *)&v449, (unsigned __int16 *)&v448);
          v448 = v443;
          v449 = (int16x8_t)v442;
          vectorstore_1x16_packed10((int *)(v6 + v8), v7, (unsigned __int16 *)&v449, (unsigned __int16 *)&v448);
          v448 = v445;
          v449 = (int16x8_t)v444;
          vectorstore_1x16_packed10((int *)(v6 + 2 * (int)v8), v7, (unsigned __int16 *)&v449, (unsigned __int16 *)&v448);
          v448 = v447;
          v449 = (int16x8_t)v446;
          result = vectorstore_1x16_packed10((int *)(v6 + 3 * v8), v7, (unsigned __int16 *)&v449, (unsigned __int16 *)&v448);
        }
      }
      else
      {
        *(uint8x8_t *)v6 = vqmovn_u16(v219);
        *(uint8x8_t *)(v6 + 8) = vqmovn_u16(v223);
        v227 = (uint8x8_t *)(v6 + v8);
        *v227 = vqmovn_u16(v221);
        v227[1] = vqmovn_u16(v225);
        v228 = (uint8x8_t *)(v6 + v8 + v8);
        *v228 = vqmovn_u16(v220);
        v228[1] = vqmovn_u16(v224);
        v229 = (uint8x8_t *)((char *)v228 + v8);
        v230 = vqmovn_u16(v222);
        v231 = vqmovn_u16(v226);
LABEL_253:
        *v229 = v230;
        v229[1] = v231;
      }
      break;
    case 2:
      v269 = (int16x8_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v270 = (int16x8_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v271 = (int16x8_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v272 = (int16x8_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      *(uint8x8_t *)v6 = vqmovn_u16((uint16x8_t)vtrn1q_s16(v85, v270));
      *(uint8x8_t *)(v6 + v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v269, v173));
      *(uint8x8_t *)(v6 + 2 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v106, v272));
      *(uint8x8_t *)(v6 + 3 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v271, v174));
      v273 = (uint16x8_t)vtrn2q_s16(v271, v174);
      *(uint8x8_t *)(v6 + 4 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s16(v85, v270));
      *(uint8x8_t *)(v6 + 5 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s16(v269, v173));
      v274 = vqmovn_u16((uint16x8_t)vtrn2q_s16(v106, v272));
      goto LABEL_249;
    case 3:
      v275 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v276 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v277 = (int32x4_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v278 = (int32x4_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      *(uint8x8_t *)v6 = vqmovn_u16((uint16x8_t)vtrn1q_s32((int32x4_t)v85, v276));
      *(uint8x8_t *)(v6 + v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32((int32x4_t)v106, v278));
      *(uint8x8_t *)(v6 + 2 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32(v275, (int32x4_t)v173));
      *(uint8x8_t *)(v6 + 3 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32(v277, (int32x4_t)v174));
      v273 = (uint16x8_t)vtrn2q_s32(v277, (int32x4_t)v174);
      *(uint8x8_t *)(v6 + 4 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s32((int32x4_t)v85, v276));
      *(uint8x8_t *)(v6 + 5 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s32((int32x4_t)v106, v278));
      v274 = vqmovn_u16((uint16x8_t)vtrn2q_s32(v275, (int32x4_t)v173));
LABEL_249:
      *(uint8x8_t *)(v6 + 6 * (int)v8) = v274;
      *(uint8x8_t *)(v6 - v8 + 8 * v8) = vqmovn_u16(v273);
      return result;
    case 6:
      v279 = (int32x4_t)vtrn1q_s16(v85, v121);
      v280 = (int32x4_t)vtrn2q_s16(v85, v121);
      v281 = (int32x4_t)vtrn1q_s16(v106, v142);
      v282 = (int32x4_t)vtrn2q_s16(v106, v142);
      v283 = (int32x4_t)vtrn1q_s16(v157, v173);
      v284 = (int32x4_t)vtrn2q_s16(v157, v173);
      v285 = (int32x4_t)vtrn1q_s16(v172, v174);
      v286 = (int32x4_t)vtrn2q_s16(v172, v174);
      v287 = (uint16x8_t)vtrn1q_s32(v279, v283);
      v288 = (uint16x8_t)vtrn2q_s32(v279, v283);
      v289 = (uint16x8_t)vtrn1q_s32(v281, v285);
      v290 = (uint16x8_t)vtrn2q_s32(v281, v285);
      v291 = (uint16x8_t)vtrn1q_s32(v280, v284);
      v292 = (uint16x8_t)vtrn2q_s32(v280, v284);
      v293 = (uint16x8_t)vtrn1q_s32(v282, v286);
      v294 = (uint16x8_t)vtrn2q_s32(v282, v286);
      if (v9)
      {
        v287 = vshlq_u16(v287, v11);
        v289 = vshlq_u16(v289, v11);
        v291 = vshlq_u16(v291, v11);
        v293 = vshlq_u16(v293, v11);
        v288 = vshlq_u16(v288, v11);
        v290 = vshlq_u16(v290, v11);
        v292 = vshlq_u16(v292, v11);
        v294 = vshlq_u16(v294, v11);
      }
      *(uint8x8_t *)v6 = vqmovn_u16(v287);
      *(uint8x8_t *)(v6 + 8) = vqmovn_u16(v288);
      v295 = (uint8x8_t *)(v6 + v8);
      *v295 = vqmovn_u16(v289);
      v295[1] = vqmovn_u16(v290);
      v296 = (uint8x8_t *)(v6 + v8 + v8);
      *v296 = vqmovn_u16(v291);
      v296[1] = vqmovn_u16(v292);
      v229 = (uint8x8_t *)((char *)v296 + v8);
      v230 = vqmovn_u16(v293);
      v231 = vqmovn_u16(v294);
      goto LABEL_253;
    case 10:
    case 24:
      v235 = (uint16x8_t)vzip1q_s64((int64x2_t)v85, (int64x2_t)v121);
      v236 = (uint16x8_t)vzip2q_s64((int64x2_t)v85, (int64x2_t)v121);
      v237 = (uint16x8_t)vzip1q_s64((int64x2_t)v106, (int64x2_t)v142);
      v238 = (uint16x8_t)vzip2q_s64((int64x2_t)v106, (int64x2_t)v142);
      v239 = (uint16x8_t)vzip1q_s64((int64x2_t)v157, (int64x2_t)v173);
      v240 = (uint16x8_t)vzip2q_s64((int64x2_t)v157, (int64x2_t)v173);
      v241 = (uint16x8_t)vzip1q_s64((int64x2_t)v172, (int64x2_t)v174);
      v242 = (uint16x8_t)vzip2q_s64((int64x2_t)v172, (int64x2_t)v174);
      if (v9)
      {
        v235 = vshlq_u16(v235, v11);
        v237 = vshlq_u16(v237, v11);
        v236 = vshlq_u16(v236, v11);
        v238 = vshlq_u16(v238, v11);
        v239 = vshlq_u16(v239, v11);
        v241 = vshlq_u16(v241, v11);
        v240 = vshlq_u16(v240, v11);
        v242 = vshlq_u16(v242, v11);
      }
      *(uint16x8_t *)v6 = v235;
      *(uint16x8_t *)(v6 + 16) = v239;
      v243 = (uint16x8_t *)(v6 + v8);
      *v243 = v237;
      v243[1] = v241;
      v244 = (uint16x8_t *)(v6 + v8 + v8);
      *v244 = v236;
      v244[1] = v240;
      v245 = (uint16x8_t *)((char *)v244 + v8);
      *v245 = v238;
      v245[1] = v242;
      return result;
    case 12:
    case 23:
      v246 = (int32x4_t)vtrn1q_s16(v85, v121);
      v247 = (int32x4_t)vtrn2q_s16(v85, v121);
      v248 = (int32x4_t)vtrn1q_s16(v106, v142);
      v249 = (int32x4_t)vtrn2q_s16(v106, v142);
      v250 = (int32x4_t)vtrn1q_s16(v157, v173);
      v251 = (int32x4_t)vtrn2q_s16(v157, v173);
      v252 = (int32x4_t)vtrn1q_s16(v172, v174);
      v253 = (int32x4_t)vtrn2q_s16(v172, v174);
      v254 = (int16x8_t)vtrn1q_s32(v246, v250);
      v255 = (int16x8_t)vtrn2q_s32(v246, v250);
      v256 = (int16x8_t)vtrn1q_s32(v248, v252);
      v257 = (int16x8_t)vtrn2q_s32(v248, v252);
      v258 = (int16x8_t)vtrn1q_s32(v247, v251);
      v259 = (int16x8_t)vtrn2q_s32(v247, v251);
      v260 = (int16x8_t)vtrn1q_s32(v249, v253);
      v261 = (int16x8_t)vtrn2q_s32(v249, v253);
      if (v9)
      {
        v254 = (int16x8_t)vshlq_u16((uint16x8_t)v254, v11);
        v256 = (int16x8_t)vshlq_u16((uint16x8_t)v256, v11);
        v258 = (int16x8_t)vshlq_u16((uint16x8_t)v258, v11);
        v260 = (int16x8_t)vshlq_u16((uint16x8_t)v260, v11);
        v255 = (int16x8_t)vshlq_u16((uint16x8_t)v255, v11);
        v257 = (int16x8_t)vshlq_u16((uint16x8_t)v257, v11);
        v259 = (int16x8_t)vshlq_u16((uint16x8_t)v259, v11);
        v261 = (int16x8_t)vshlq_u16((uint16x8_t)v261, v11);
      }
      v262.i64[0] = -1;
      v262.i64[1] = -1;
      *(int8x16_t *)v6 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v254, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v254);
      *(int8x16_t *)(v6 + 16) = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v255, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v255);
      v263 = (int8x16_t *)(v6 + v8);
      *v263 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v256, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v256);
      v263[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v257, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v257);
      v264 = (int8x16_t *)(v6 + v8 + v8);
      *v264 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v258, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v258);
      v264[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v259, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v259);
      v265 = (int8x16_t *)((char *)v264 + v8);
      *v265 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v260, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v260);
      v265[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v261, v262) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v261);
      return result;
    case 13:
      v297 = (int16x8_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v298 = (int16x8_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v299 = (int16x8_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v300 = (int16x8_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      v301 = vtrn1q_s16(v85, v298);
      v302 = vtrn2q_s16(v85, v298);
      v303 = vtrn1q_s16(v106, v300);
      v304 = vtrn2q_s16(v106, v300);
      v305 = vtrn1q_s16(v297, v173);
      v306 = vtrn2q_s16(v297, v173);
      v307 = vtrn1q_s16(v299, v174);
      v308 = vtrn2q_s16(v299, v174);
      if (v9)
      {
        v301 = (int16x8_t)vshlq_u16((uint16x8_t)v301, v11);
        v303 = (int16x8_t)vshlq_u16((uint16x8_t)v303, v11);
        v305 = (int16x8_t)vshlq_u16((uint16x8_t)v305, v11);
        v307 = (int16x8_t)vshlq_u16((uint16x8_t)v307, v11);
        v302 = (int16x8_t)vshlq_u16((uint16x8_t)v302, v11);
        v304 = (int16x8_t)vshlq_u16((uint16x8_t)v304, v11);
        v306 = (int16x8_t)vshlq_u16((uint16x8_t)v306, v11);
        v308 = (int16x8_t)vshlq_u16((uint16x8_t)v308, v11);
      }
      v309.i64[0] = -1;
      v309.i64[1] = -1;
      v310 = *(_OWORD *)&vcgtq_s16(v307, v309) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
      v311 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v301, v309) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v301);
      v312 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v303, v309) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v303);
      v313 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v305, v309) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v305);
      v314 = vcgtq_s16(v302, v309);
      v315 = vcgtq_s16(v304, v309);
      v316 = vcgtq_s16(v306, v309);
      v317 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v308, v309) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v308);
      *(int8x16_t *)v6 = v311;
      *(int8x16_t *)(v6 + v8) = v313;
      v318 = (int8x16_t *)(v6 + v8 + v8);
      *v318 = v312;
      v319 = (int8x16_t *)((char *)v318 + v8);
      *v319 = veorq_s8((int8x16_t)v310, (int8x16_t)v307);
      v320 = (int8x16_t *)((char *)v319 + v8);
      *v320 = veorq_s8((int8x16_t)(*(_OWORD *)&v314 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v302);
      v321 = (int8x16_t *)((char *)v320 + v8);
      *v321 = veorq_s8((int8x16_t)(*(_OWORD *)&v316 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v306);
      v322 = (int8x16_t *)((char *)v321 + v8);
      *v322 = veorq_s8((int8x16_t)(*(_OWORD *)&v315 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v304);
      goto LABEL_260;
    case 14:
      v323 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v324 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v325 = (int32x4_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v326 = (int32x4_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      v327 = (int16x8_t)vtrn1q_s32((int32x4_t)v85, v324);
      v328 = (int16x8_t)vtrn2q_s32((int32x4_t)v85, v324);
      v329 = (int16x8_t)vtrn1q_s32((int32x4_t)v106, v326);
      v330 = (int16x8_t)vtrn2q_s32((int32x4_t)v106, v326);
      v331 = (int16x8_t)vtrn1q_s32(v323, (int32x4_t)v173);
      v332 = (int16x8_t)vtrn2q_s32(v323, (int32x4_t)v173);
      v333 = (int16x8_t)vtrn1q_s32(v325, (int32x4_t)v174);
      v334 = (int16x8_t)vtrn2q_s32(v325, (int32x4_t)v174);
      if (v9)
      {
        v327 = (int16x8_t)vshlq_u16((uint16x8_t)v327, v11);
        v329 = (int16x8_t)vshlq_u16((uint16x8_t)v329, v11);
        v331 = (int16x8_t)vshlq_u16((uint16x8_t)v331, v11);
        v333 = (int16x8_t)vshlq_u16((uint16x8_t)v333, v11);
        v328 = (int16x8_t)vshlq_u16((uint16x8_t)v328, v11);
        v330 = (int16x8_t)vshlq_u16((uint16x8_t)v330, v11);
        v332 = (int16x8_t)vshlq_u16((uint16x8_t)v332, v11);
        v334 = (int16x8_t)vshlq_u16((uint16x8_t)v334, v11);
      }
      v335.i64[0] = -1;
      v335.i64[1] = -1;
      v336 = *(_OWORD *)&vcgtq_s16(v333, v335) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
      v337 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v327, v335) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v327);
      v338 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v329, v335) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v329);
      v339 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v331, v335) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v331);
      v340 = vcgtq_s16(v328, v335);
      v341 = vcgtq_s16(v330, v335);
      v342 = vcgtq_s16(v332, v335);
      v317 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v334, v335) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v334);
      *(int8x16_t *)v6 = v337;
      *(int8x16_t *)(v6 + v8) = v338;
      v343 = (int8x16_t *)(v6 + v8 + v8);
      *v343 = v339;
      v344 = (int8x16_t *)((char *)v343 + v8);
      *v344 = veorq_s8((int8x16_t)v336, (int8x16_t)v333);
      v345 = (int8x16_t *)((char *)v344 + v8);
      *v345 = veorq_s8((int8x16_t)(*(_OWORD *)&v340 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v328);
      v346 = (int8x16_t *)((char *)v345 + v8);
      *v346 = veorq_s8((int8x16_t)(*(_OWORD *)&v341 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v330);
      v322 = (int8x16_t *)((char *)v346 + v8);
      *v322 = veorq_s8((int8x16_t)(*(_OWORD *)&v342 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v332);
LABEL_260:
      *(int8x16_t *)((char *)v322 + v8) = v317;
      return result;
    case 15:
      v347 = (int16x8_t)vzip1q_s64((int64x2_t)v85, (int64x2_t)v121);
      v348 = (int16x8_t)vzip2q_s64((int64x2_t)v85, (int64x2_t)v121);
      v349 = (int16x8_t)vzip1q_s64((int64x2_t)v106, (int64x2_t)v142);
      v350 = (int16x8_t)vzip2q_s64((int64x2_t)v106, (int64x2_t)v142);
      v351 = (int16x8_t)vzip1q_s64((int64x2_t)v157, (int64x2_t)v173);
      v352 = (int16x8_t)vzip2q_s64((int64x2_t)v157, (int64x2_t)v173);
      v353 = (int16x8_t)vzip1q_s64((int64x2_t)v172, (int64x2_t)v174);
      v354 = (int16x8_t)vzip2q_s64((int64x2_t)v172, (int64x2_t)v174);
      if (!v9)
        goto LABEL_265;
      goto LABEL_264;
    case 16:
      v347 = vtrn1q_s16(v85, v121);
      v348 = vtrn2q_s16(v85, v121);
      v349 = vtrn1q_s16(v106, v142);
      v350 = vtrn2q_s16(v106, v142);
      v351 = vtrn1q_s16(v157, v173);
      v352 = vtrn2q_s16(v157, v173);
      v353 = vtrn1q_s16(v172, v174);
      v354 = vtrn2q_s16(v172, v174);
      if (v9)
      {
LABEL_264:
        v347 = (int16x8_t)vshlq_u16((uint16x8_t)v347, v11);
        v349 = (int16x8_t)vshlq_u16((uint16x8_t)v349, v11);
        v348 = (int16x8_t)vshlq_u16((uint16x8_t)v348, v11);
        v350 = (int16x8_t)vshlq_u16((uint16x8_t)v350, v11);
        v351 = (int16x8_t)vshlq_u16((uint16x8_t)v351, v11);
        v353 = (int16x8_t)vshlq_u16((uint16x8_t)v353, v11);
        v352 = (int16x8_t)vshlq_u16((uint16x8_t)v352, v11);
        v354 = (int16x8_t)vshlq_u16((uint16x8_t)v354, v11);
      }
LABEL_265:
      v355.i64[0] = -1;
      v355.i64[1] = -1;
      *(int8x16_t *)v6 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v347, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v347);
      *(int8x16_t *)(v6 + 16) = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v351, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v351);
      v356 = (int8x16_t *)(v6 + v8);
      *v356 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v349, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v349);
      v356[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v353, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v353);
      v357 = (int8x16_t *)(v6 + v8 + v8);
      *v357 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v348, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v348);
      v357[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v352, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v352);
      v358 = (int8x16_t *)((char *)v357 + v8);
      *v358 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v350, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v350);
      v358[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v354, v355) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v354);
      return result;
    case 17:
      v359 = (int16x8_t)vtrn1q_s32((int32x4_t)v85, (int32x4_t)v157);
      v360 = (int16x8_t)vtrn2q_s32((int32x4_t)v85, (int32x4_t)v157);
      v361 = (int16x8_t)vtrn1q_s32((int32x4_t)v106, (int32x4_t)v172);
      v362 = (int16x8_t)vtrn2q_s32((int32x4_t)v106, (int32x4_t)v172);
      v363 = (uint16x8_t)vtrn1q_s16(v121, v359);
      v364 = (uint16x8_t)vtrn2q_s16(v121, v359);
      v365 = (uint16x8_t)vtrn1q_s16(v142, v361);
      v366 = (uint16x8_t)vtrn2q_s16(v142, v361);
      v367 = (uint16x8_t)vtrn1q_s16(v360, v173);
      v368 = (uint16x8_t)vtrn2q_s16(v360, v173);
      v369 = (uint16x8_t)vtrn1q_s16(v362, v174);
      v370 = (uint16x8_t)vtrn2q_s16(v362, v174);
      if (v9)
      {
        v364 = vshlq_u16(v364, v11);
        v366 = vshlq_u16(v366, v11);
        v363 = vshlq_u16(v363, v11);
        v365 = vshlq_u16(v365, v11);
        v367 = vshlq_u16(v367, v11);
        v369 = vshlq_u16(v369, v11);
        v368 = vshlq_u16(v368, v11);
        v370 = vshlq_u16(v370, v11);
      }
      *(uint16x8_t *)v6 = v364;
      *(uint16x8_t *)(v6 + v8) = v367;
      v371 = (uint16x8_t *)(v6 + v8 + v8);
      *v371 = v366;
      v372 = (uint16x8_t *)((char *)v371 + v8);
      *v372 = v369;
      v373 = (uint16x8_t *)((char *)v372 + v8);
      *v373 = v363;
      v374 = (uint16x8_t *)((char *)v373 + v8);
      *v374 = v368;
      v375 = (uint16x8_t *)((char *)v374 + v8);
      *v375 = v365;
      *(uint16x8_t *)((char *)v375 + v8) = v370;
      return result;
    case 18:
      v376 = (int32x4_t)vtrn1q_s16(v85, v121);
      v377 = (int32x4_t)vtrn2q_s16(v85, v121);
      v378 = (int32x4_t)vtrn1q_s16(v106, v142);
      v379 = (int32x4_t)vtrn2q_s16(v106, v142);
      v380 = (int32x4_t)vtrn1q_s16(v157, v173);
      v381 = (int32x4_t)vtrn2q_s16(v157, v173);
      v382 = (int32x4_t)vtrn1q_s16(v172, v174);
      v383 = (int32x4_t)vtrn2q_s16(v172, v174);
      v384 = (uint16x8_t)vtrn1q_s32(v376, v380);
      v385 = (uint16x8_t)vtrn2q_s32(v376, v380);
      v386 = (uint16x8_t)vtrn1q_s32(v378, v382);
      v387 = (uint16x8_t)vtrn2q_s32(v378, v382);
      v388 = (uint16x8_t)vtrn1q_s32(v377, v381);
      v389 = (uint16x8_t)vtrn2q_s32(v377, v381);
      v390 = (uint16x8_t)vtrn1q_s32(v379, v383);
      v226 = (uint16x8_t)vtrn2q_s32(v379, v383);
      if (v9)
      {
        v384 = vshlq_u16(v384, v11);
        v386 = vshlq_u16(v386, v11);
        v388 = vshlq_u16(v388, v11);
        v390 = vshlq_u16(v390, v11);
        v385 = vshlq_u16(v385, v11);
        v387 = vshlq_u16(v387, v11);
        v389 = vshlq_u16(v389, v11);
        v226 = vshlq_u16(v226, v11);
      }
      *(uint16x8_t *)v6 = v384;
      *(uint16x8_t *)(v6 + 16) = v385;
      v391 = (uint16x8_t *)(v6 + v8);
      *v391 = v386;
      v391[1] = v387;
      v392 = (uint16x8_t *)(v6 + v8 + v8);
      *v392 = v388;
      v392[1] = v389;
      v268 = (uint16x8_t *)((char *)v392 + v8);
      *v268 = v390;
      goto LABEL_272;
    case 19:
      goto LABEL_233;
    case 20:
      v393 = (int16x8_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v394 = (int16x8_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v395 = (int16x8_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v396 = (int16x8_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      v397 = (uint16x8_t)vtrn1q_s16(v85, v394);
      v398 = (uint16x8_t)vtrn2q_s16(v85, v394);
      v399 = (uint16x8_t)vtrn1q_s16(v106, v396);
      v400 = (uint16x8_t)vtrn2q_s16(v106, v396);
      v401 = (uint16x8_t)vtrn1q_s16(v393, v173);
      v402 = (uint16x8_t)vtrn2q_s16(v393, v173);
      v403 = (uint16x8_t)vtrn1q_s16(v395, v174);
      v404 = (uint16x8_t)vtrn2q_s16(v395, v174);
      if (v9)
      {
        v397 = vshlq_u16(v397, v11);
        v399 = vshlq_u16(v399, v11);
        v401 = vshlq_u16(v401, v11);
        v403 = vshlq_u16(v403, v11);
        v398 = vshlq_u16(v398, v11);
        v400 = vshlq_u16(v400, v11);
        v402 = vshlq_u16(v402, v11);
        v404 = vshlq_u16(v404, v11);
      }
      *(uint16x8_t *)v6 = v397;
      *(uint16x8_t *)(v6 + v8) = v401;
      v405 = (uint16x8_t *)(v6 + v8 + v8);
      *v405 = v399;
      v406 = (uint16x8_t *)((char *)v405 + v8);
      *v406 = v403;
      v407 = (uint16x8_t *)((char *)v406 + v8);
      *v407 = v398;
      v408 = (uint16x8_t *)((char *)v407 + v8);
      *v408 = v402;
      v409 = (uint16x8_t *)((char *)v408 + v8);
      *v409 = v400;
      *(uint16x8_t *)((char *)v409 + v8) = v404;
      return result;
    case 21:
      v410 = (int16x8_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v411 = (int16x8_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v412 = (int16x8_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v413 = (int16x8_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      v414 = (uint16x8_t)vtrn1q_s16(v85, v411);
      v415 = (uint16x8_t)vtrn2q_s16(v85, v411);
      v416 = (uint16x8_t)vtrn1q_s16(v106, v413);
      v417 = (uint16x8_t)vtrn2q_s16(v106, v413);
      v418 = (uint16x8_t)vtrn1q_s16(v410, v173);
      v419 = (uint16x8_t)vtrn2q_s16(v410, v173);
      v420 = (uint16x8_t)vtrn1q_s16(v412, v174);
      v421 = (uint16x8_t)vtrn2q_s16(v412, v174);
      if (v9)
      {
        v414 = vshlq_u16(v414, v11);
        v416 = vshlq_u16(v416, v11);
        v418 = vshlq_u16(v418, v11);
        v420 = vshlq_u16(v420, v11);
        v415 = vshlq_u16(v415, v11);
        v417 = vshlq_u16(v417, v11);
        v419 = vshlq_u16(v419, v11);
        v421 = vshlq_u16(v421, v11);
      }
      *(uint16x8_t *)v6 = v414;
      *(uint16x8_t *)(v6 + 16) = v415;
      v422 = (uint16x8_t *)(v6 + v8);
      *v422 = v418;
      v422[1] = v419;
      v423 = (uint16x8_t *)(v6 + v8 + v8);
      *v423 = v416;
      v423[1] = v417;
      v424 = (uint16x8_t *)((char *)v423 + v8);
      *v424 = v420;
      v424[1] = v421;
      return result;
    case 22:
      v425 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v157);
      v426 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v157);
      v427 = (int32x4_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v172);
      v428 = (int32x4_t)vzip2q_s64((int64x2_t)v142, (int64x2_t)v172);
      v429 = (uint16x8_t)vtrn1q_s32((int32x4_t)v85, v426);
      v430 = (uint16x8_t)vtrn2q_s32((int32x4_t)v85, v426);
      v431 = (uint16x8_t)vtrn1q_s32((int32x4_t)v106, v428);
      v432 = (uint16x8_t)vtrn2q_s32((int32x4_t)v106, v428);
      v433 = (uint16x8_t)vtrn1q_s32(v425, (int32x4_t)v173);
      v434 = (uint16x8_t)vtrn2q_s32(v425, (int32x4_t)v173);
      v435 = (uint16x8_t)vtrn1q_s32(v427, (int32x4_t)v174);
      v436 = (uint16x8_t)vtrn2q_s32(v427, (int32x4_t)v174);
      if (v9)
      {
        v429 = vshlq_u16(v429, v11);
        v431 = vshlq_u16(v431, v11);
        v433 = vshlq_u16(v433, v11);
        v435 = vshlq_u16(v435, v11);
        v430 = vshlq_u16(v430, v11);
        v432 = vshlq_u16(v432, v11);
        v434 = vshlq_u16(v434, v11);
        v436 = vshlq_u16(v436, v11);
      }
      *(uint16x8_t *)v6 = v429;
      *(uint16x8_t *)(v6 + v8) = v431;
      v437 = (uint16x8_t *)(v6 + v8 + v8);
      *v437 = v433;
      v438 = (uint16x8_t *)((char *)v437 + v8);
      *v438 = v435;
      v439 = (uint16x8_t *)((char *)v438 + v8);
      *v439 = v430;
      v440 = (uint16x8_t *)((char *)v439 + v8);
      *v440 = v432;
      v441 = (uint16x8_t *)((char *)v440 + v8);
      *v441 = v434;
      *(uint16x8_t *)((char *)v441 + v8) = v436;
      return result;
    default:
      longjmp(result + 29, -15405);
  }
  return result;
}

int *vectorstore_1x16_packed10(int *result, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  switch(a2)
  {
    case 2:
      v7 = a3[1] + (a3[2] << 10) + (a3[3] << 20);
      *result = *result & 0xFFFFF | (*a3 << 20);
      result[1] = v7;
      v8 = a3[7] + (*a4 << 10) + (a4[1] << 20);
      result[2] = a3[4] + (a3[5] << 10) + (a3[6] << 20);
      result[3] = v8;
      v9 = a4[2] + (a4[3] << 10) + (a4[4] << 20);
      v10 = a4[5] + (a4[6] << 10) + (a4[7] << 20);
LABEL_7:
      result[4] = v9;
      result[5] = v10;
      return result;
    case 1:
      v11 = a3[2] + (a3[3] << 10) + (a3[4] << 20);
      *result = (*result & 0x3FF | (*a3 << 10)) + (a3[1] << 20);
      result[1] = v11;
      v12 = *a4 + (a4[1] << 10) + (a4[2] << 20);
      result[2] = a3[5] + (a3[6] << 10) + (a3[7] << 20);
      result[3] = v12;
      v9 = a4[3] + (a4[4] << 10) + (a4[5] << 20);
      v10 = a4[6] + (a4[7] << 10);
      goto LABEL_7;
    case 0:
      v4 = a3[3] + (a3[4] << 10) + (a3[5] << 20);
      *result = *a3 + (a3[1] << 10) + (a3[2] << 20);
      result[1] = v4;
      v5 = a4[1] + (a4[2] << 10) + (a4[3] << 20);
      result[2] = a3[6] + (a3[7] << 10) + (*a4 << 20);
      result[3] = v5;
      v6 = a4[7];
      result[4] = a4[4] + (a4[5] << 10) + (a4[6] << 20);
      result[5] = v6;
      break;
  }
  return result;
}

uint64_t CMPhotoQualityControllerNeedsImageAnalysis()
{
  return 0;
}

uint64_t CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(int a1, int a2, CFNumberRef *a3, CFNumberRef *a4)
{
  int v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t result;
  CFNumberRef Int;
  CFNumberRef v12;
  CFMutableDictionaryRef Mutable;

  if (a1 != 1752589105)
  {
    if (a1 != 1936484717)
    {
      if (a1 != 1785750887)
        return FigSignalErrorAt();
      if (a2)
      {
        v6 = 5;
        goto LABEL_9;
      }
      Int = CMPhotoCFNumberCreateInt(4);
      if (Int)
      {
        v8 = Int;
        v9 = CMPhotoCFNumberCreateInt(5);
        if (v9)
          goto LABEL_11;
        goto LABEL_19;
      }
      return 4294950305;
    }
    v6 = 9;
LABEL_9:
    v7 = CMPhotoCFNumberCreateInt(v6);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
LABEL_11:
      result = 0;
      *a3 = v8;
      *a4 = v9;
      return result;
    }
    return 4294950305;
  }
  if (a2)
  {
    v6 = 6;
    goto LABEL_9;
  }
  v12 = CMPhotoCFNumberCreateInt(0);
  if (v12)
  {
    v8 = v12;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v9 = Mutable;
      FigCFDictionarySetFloat();
      goto LABEL_11;
    }
LABEL_19:
    CFRelease(v8);
  }
  return 4294950305;
}

uint64_t CMPhotoComputeWPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, double *a3, uint64_t a4, signed int a5, double *a6, CVPixelBufferRef *a7, CVPixelBufferRef *a8, CVPixelBufferRef *a9)
{
  const __CFAllocator *v14;
  const CFDictionaryKeyCallBacks *v15;
  const CFDictionaryValueCallBacks *v16;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v18;
  OSType PixelFormatType;
  int v20;
  signed int v21;
  signed int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  double *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  OSType v33;
  int BytesPerPixelForPixelFormat;
  uint64_t v35;
  double v36;
  uint64_t v37;
  int v38;
  int v39;
  size_t v40;
  void *BaseAddress;
  size_t v42;
  void *v43;
  double v44;
  size_t v45;
  void *v46;
  size_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  void *BaseAddressOfPlane;
  void *v53;
  size_t v54;
  void *v55;
  void *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  size_t BytesPerRowOfPlane;
  float *v80;
  float *v81;
  float *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  float *v89;
  int v90;
  float v91;
  size_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int *v97;
  unint64_t v98;
  int *v99;
  _DWORD *i;
  int v101;
  size_t v102;
  float *v103;
  int v104;
  uint64_t j;
  uint64_t v106;
  float *v107;
  int v108;
  float v109;
  int v110;
  int v111;
  size_t v113;
  size_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  size_t v118;
  int v119;
  const __CFAllocator *allocator;
  __CFDictionary *cf;
  __CFDictionary *v123;
  double *v124;
  CVPixelBufferRef *v125;
  int BitDepthForPixelFormat;
  __CVBuffer *pixelBuffer;
  uint64_t v129;
  int *v130;
  __CVBuffer *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  CVPixelBufferRef v136;
  CVPixelBufferRef v137;
  CVPixelBufferRef pixelBufferOut;

  v137 = 0;
  pixelBufferOut = 0;
  v136 = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  allocator = v14;
  v18 = CFDictionaryCreateMutable(v14, 0, v15, v16);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v18);
  pixelBuffer = a2;
  if (CMPhotoPixelBufferHasCLAP(a1)
    || CMPhotoPixelBufferHasCLAP(a2)
    || a3 && (a5 < 1 || a5 > (unint64_t)a3))
  {
    FigSignalErrorAt();
    v110 = 0;
    v111 = 0;
    v130 = 0;
    v28 = 0;
    a3 = 0;
    v63 = 0;
LABEL_120:
    v36 = 0.0;
    goto LABEL_103;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2))
    goto LABEL_119;
  v20 = CVPixelBufferGetPixelFormatType(a2);
  v134 = 0;
  v135 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v134, &v135);
  v132 = 0;
  v133 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v132, &v133);
  v21 = v134;
  if (v134 != v132 || (v22 = v135, v135 != v133))
  {
LABEL_119:
    v63 = FigSignalErrorAt();
    v110 = 0;
    v111 = 0;
    v130 = 0;
    v28 = 0;
    a3 = 0;
    goto LABEL_120;
  }
  v131 = a1;
  v129 = (uint64_t)a3;
  v123 = Mutable;
  v124 = a6;
  cf = v18;
  if (a3)
  {
    if ((int)v135 < 1)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      if (a5 > (int)v135)
        v22 = a5;
      v24 = (v22 - 1) / a5 + 1;
      do
        ++v23;
      while (v24 != v23);
    }
    if ((int)v134 < 1)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      if (a5 > (int)v134)
        v21 = a5;
      v27 = (v21 - 1) / a5 + 1;
      do
        ++v25;
      while (v27 != v25);
    }
    v26 = v25 * v23;
    if (v25 * v23)
    {
      a3 = (double *)malloc_type_calloc(v25 * v23, 8uLL, 0x100004000313F17uLL);
      if (!a3)
        goto LABEL_121;
      if (a8)
      {
LABEL_29:
        v130 = (int *)malloc_type_calloc(v132 * v133, 4uLL, 0x100004052888210uLL);
        if (v130)
          goto LABEL_30;
LABEL_121:
        v110 = 0;
        v111 = 0;
        v130 = 0;
        v28 = 0;
        v36 = 0.0;
        v63 = 4294950305;
        goto LABEL_102;
      }
    }
    else
    {
      a3 = 0;
      if (a8)
        goto LABEL_29;
    }
  }
  else
  {
    v25 = 0;
    v23 = 0;
    v26 = 0;
    if (a8)
      goto LABEL_29;
  }
  v130 = 0;
LABEL_30:
  v125 = a8;
  v28 = 0;
  if (a9)
  {
    if (v26)
    {
      v28 = (double *)malloc_type_calloc(v26, 8uLL, 0x100004000313F17uLL);
      if (!v28)
      {
        v110 = 0;
        v111 = 0;
        v63 = 4294950305;
        v36 = 0.0;
        goto LABEL_102;
      }
    }
  }
  v29 = CMPhotoPixelFormatContainsYCbCr(v20);
  v30 = CMPhotoPixelFormatContainsRGB(v20);
  v31 = CMPhotoPixelFormatContainsGrayScale(v20);
  v32 = CVPixelBufferGetPixelFormatType(a2);
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v32);
  v33 = CVPixelBufferGetPixelFormatType(a2);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v33);
  v35 = CVPixelBufferLockBaseAddress(v131, 0);
  v36 = 0.0;
  if ((_DWORD)v35)
  {
    v63 = v35;
    v110 = 0;
    v111 = 0;
    goto LABEL_102;
  }
  v37 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v37)
  {
    v63 = v37;
    v111 = 0;
    v110 = 1;
    goto LABEL_102;
  }
  if (v31)
  {
    if ((v20 - 1278226736) <= 6 && ((1 << (v20 - 48)) & 0x45) != 0)
    {
      v38 = 16 - BitDepthForPixelFormat;
LABEL_46:
      v40 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
      BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
      v42 = CVPixelBufferGetBytesPerRow(v131) / BytesPerPixelForPixelFormat;
      v43 = CVPixelBufferGetBaseAddress(v131);
      if (v129)
        calc_wpsnr((uint64_t)BaseAddress, v40, (uint64_t)v43, v42, BitDepthForPixelFormat, v132, v133, v129, a5, 1u, v38, (uint64_t)a3, v25, 0, (uint64_t)v28);
      calc_wpsnr((uint64_t)BaseAddress, v40, (uint64_t)v43, v42, BitDepthForPixelFormat, v132, v133, 8, 8u, 1u, v38, 0, 0, (uint64_t)v130, 0);
      v36 = v44;
      goto LABEL_75;
    }
    if (v20 == 1278226488)
    {
      v38 = 0;
      goto LABEL_46;
    }
LABEL_65:
    FigSignalErrorAt();
LABEL_100:
    v63 = 0;
    goto LABEL_101;
  }
  if (v29)
  {
    if (v20 > 2016686639)
    {
      if (v20 != 2019963440 && v20 != 2016686640)
        goto LABEL_65;
      v39 = 6;
    }
    else
    {
      v39 = 0;
      if (v20 != 875704422 && v20 != 875704438)
        goto LABEL_65;
    }
    v119 = v39;
    v116 = v132 >> 1;
    v117 = v133 >> 1;
    v118 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
    v51 = 2 * BytesPerPixelForPixelFormat;
    v114 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) / v51;
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    v53 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
    v115 = BytesPerPixelForPixelFormat;
    v54 = CVPixelBufferGetBytesPerRowOfPlane(v131, 0) / BytesPerPixelForPixelFormat;
    v113 = CVPixelBufferGetBytesPerRowOfPlane(v131, 1uLL) / v51;
    v55 = CVPixelBufferGetBaseAddressOfPlane(v131, 0);
    v56 = CVPixelBufferGetBaseAddressOfPlane(v131, 1uLL);
    if (v129)
      calc_wpsnr((uint64_t)BaseAddressOfPlane, v118, (uint64_t)v55, v54, BitDepthForPixelFormat, v132, v133, v129, a5, 1u, v119, (uint64_t)a3, v25, 0, (uint64_t)v28);
    calc_wpsnr((uint64_t)BaseAddressOfPlane, v118, (uint64_t)v55, v54, BitDepthForPixelFormat, v132, v133, 8, 8u, 1u, v119, 0, 0, (uint64_t)v130, 0);
    v58 = v57;
    calc_wpsnr((uint64_t)v53, v114, (uint64_t)v56, v113, BitDepthForPixelFormat, v116, v117, 8, 8u, 2u, v119, 0, 0, 0, 0);
    v60 = v59;
    calc_wpsnr((uint64_t)v53 + v115, v114, (uint64_t)v56 + v115, v113, BitDepthForPixelFormat, v116, v117, 8, 8u, 2u, v119, 0, 0, 0, 0);
    v36 = (v60 + v58 * 6.0 + v61) * 0.125;
  }
  else
  {
    if (!v30)
    {
      v62 = FigSignalErrorAt();
      goto LABEL_67;
    }
    if (v20 != 1111970369 && v20 != 1380401729 && v20 != 1815491698)
      goto LABEL_65;
    v45 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
    v46 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    v47 = CVPixelBufferGetBytesPerRow(v131) / BytesPerPixelForPixelFormat;
    v48 = CVPixelBufferGetBaseAddress(v131);
    if (v129)
    {
      v49 = BitDepthForPixelFormat;
      v50 = 1;
      if (BitDepthForPixelFormat > 8)
        v50 = 2;
      calc_wpsnr((uint64_t)v46 + v50, v45, (uint64_t)v48 + v50, v47, BitDepthForPixelFormat, v132, v133, v129, a5, 4u, 0, (uint64_t)a3, v25, 0, (uint64_t)v28);
    }
    else
    {
      v49 = BitDepthForPixelFormat;
    }
    v64 = v47;
    v65 = v45;
    v66 = 1;
    if (v49 > 8)
      v66 = 2;
    v67 = (uint64_t)v46 + v66;
    v68 = (uint64_t)v48 + v66;
    v69 = (uint64_t)v48;
    v70 = (uint64_t)v46;
    v71 = v49;
    if (v49 <= 8)
      v72 = 2;
    else
      v72 = 4;
    v73 = v64;
    calc_wpsnr(v67, v65, v68, v64, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, (uint64_t)v130, 0);
    v75 = v74;
    calc_wpsnr(v70, v65, v69, v73, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, 0, 0);
    v77 = v76;
    calc_wpsnr(v70 + v72, v65, v69 + v72, v73, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, 0, 0);
    v36 = (v75 + v77 + v78) / 3.0;
  }
LABEL_75:
  if (v129)
  {
    v62 = CVPixelBufferCreate(allocator, v25, v23, 0x72673366u, 0, &pixelBufferOut);
    if ((_DWORD)v62)
      goto LABEL_67;
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    v80 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    v81 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    v82 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    if (v23)
    {
      v83 = 0;
      v84 = 0;
      v85 = 4 * (BytesPerRowOfPlane >> 2);
      do
      {
        v86 = v25;
        v87 = v80;
        v88 = v81;
        v89 = v82;
        v90 = v83;
        if (v25)
        {
          do
          {
            v91 = a3[v90];
            *v87++ = v91;
            *v88++ = v91;
            *v89++ = v91;
            ++v90;
            --v86;
          }
          while (v86);
        }
        ++v84;
        v83 += v25;
        v82 = (float *)((char *)v82 + v85);
        v81 = (float *)((char *)v81 + v85);
        v80 = (float *)((char *)v80 + v85);
      }
      while (v84 != v23);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    if (a7)
    {
      *a7 = pixelBufferOut;
      pixelBufferOut = 0;
    }
  }
  if (!v125)
    goto LABEL_92;
  v62 = CVPixelBufferCreate(allocator, v132, v133, 0x4C303066u, 0, &v137);
  if ((_DWORD)v62)
  {
LABEL_67:
    v63 = v62;
LABEL_101:
    v110 = 1;
    v111 = 1;
LABEL_102:
    a1 = v131;
    Mutable = v123;
    a6 = v124;
    v18 = cf;
    goto LABEL_103;
  }
  CVPixelBufferLockBaseAddress(v137, 0);
  v92 = CVPixelBufferGetBytesPerRowOfPlane(v137, 0);
  v93 = (char *)CVPixelBufferGetBaseAddressOfPlane(v137, 0);
  v94 = v133;
  if (v133)
  {
    v95 = 0;
    v96 = v132;
    v97 = v130;
    do
    {
      v98 = v96;
      v99 = v97;
      for (i = v93; v98; --v98)
      {
        v101 = *v99++;
        *i++ = v101;
      }
      ++v95;
      v93 += 4 * (v92 >> 2);
      v97 += v96;
    }
    while (v95 != v94);
  }
  CVPixelBufferUnlockBaseAddress(v137, 0);
  *v125 = v137;
  v137 = 0;
LABEL_92:
  if (!a9)
    goto LABEL_100;
  v63 = CVPixelBufferCreate(allocator, v25, v23, 0x4C303066u, 0, &v136);
  if (!(_DWORD)v63)
  {
    CVPixelBufferLockBaseAddress(v136, 0);
    v102 = CVPixelBufferGetBytesPerRowOfPlane(v136, 0);
    v103 = (float *)CVPixelBufferGetBaseAddressOfPlane(v136, 0);
    if (v23)
    {
      v104 = 0;
      for (j = 0; j != v23; ++j)
      {
        v106 = v25;
        v107 = v103;
        v108 = v104;
        if (v25)
        {
          do
          {
            v109 = v28[v108];
            *v107++ = v109;
            ++v108;
            --v106;
          }
          while (v106);
        }
        v104 += v25;
        v103 += v102 >> 2;
      }
    }
    CVPixelBufferUnlockBaseAddress(v136, 0);
    v63 = 0;
    *a9 = v136;
    v136 = 0;
    goto LABEL_101;
  }
  a1 = v131;
  Mutable = v123;
  a6 = v124;
  v18 = cf;
  if (v136)
    CFRelease(v136);
  v110 = 1;
  v111 = 1;
LABEL_103:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v137)
    CFRelease(v137);
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
  free(a3);
  free(v28);
  free(v130);
  if (a6)
    *a6 = v36;
  if (v110)
    CVPixelBufferUnlockBaseAddress(a1, 0);
  if (v111)
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  return v63;
}

void calc_wpsnr(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15)
{
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  uint64_t v119;
  double *v120;
  double v121;
  float v122;
  double v123;
  uint64_t v124;
  double v125;
  double v126;
  BOOL v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  long double v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v23 = ldexp(1.0, a5 - 6);
  v24 = ldexp(1.0, a5);
  v198 = a5;
  if (a7)
  {
    v172 = a15;
    v25 = a14;
    v179 = a12;
    v193 = a11;
    v26 = sqrt(8294400.0 / (double)(a6 * a7)) * v24;
    v27 = a6 * a10;
    v171 = a6 * a10;
    v28 = (int)a10 * (uint64_t)a2;
    v29 = (int)a10 * (uint64_t)a4;
    v170 = (int)(a10 * a9);
    v155 = a9;
    v148 = a13;
    v30 = -(uint64_t)(int)a10;
    v31 = 0;
    v162 = (double)(~(-1 << a5) * (unint64_t)~(-1 << a5));
    v161 = a3 + v30 - v29;
    v32 = -2 * (int)a10;
    v195 = 2 * v29;
    v196 = v29;
    v160 = a3 + v32 - 2 * v29;
    v153 = (int)a9 * v29;
    v152 = 2 * v153;
    v169 = 2 * v170;
    v189 = a10;
    v147 = v30;
    v159 = a1 + v30 - v28;
    v194 = 2 * v28;
    v197 = v28;
    v158 = a1 + v32 - 2 * v28;
    v151 = (int)a9 * v28;
    v150 = 2 * v151;
    v174 = (int)a8;
    v154 = (int)a9;
    v149 = a6 * (int)a9;
    v33 = 0.0;
    v34 = a7;
    v35 = 0;
    v163 = 0;
    v190 = 0;
    v167 = a6;
    v177 = a14;
    v173 = a8;
    do
    {
      v157 = v34;
      if ((int)a8 >= v34)
        v36 = v34;
      else
        v36 = a8;
      v156 = v35;
      if (v27)
      {
        v37 = 0;
        v38 = 0;
        v165 = v36;
        v164 = v36 + 1;
        v39 = a7 - v190;
        if ((int)a7 - (int)v190 >= (int)a8)
          v39 = a8;
        v40 = (double)v39;
        v176 = v35 * v148;
        v41 = v39;
        v42 = v39 + 2;
        if (v25)
          v43 = v39 < 1;
        else
          v43 = 1;
        v44 = v43;
        v166 = v44;
        v45 = v147;
        v188 = v158;
        v187 = v159;
        v186 = v160;
        v185 = v161;
        v175 = v42;
        do
        {
          v184 = v37;
          v182 = v31;
          v181 = &v146;
          v46 = (v171 - (int)v38) / (int)v189;
          v183 = v46;
          if ((int)v46 >= (int)a8)
            a8 = a8;
          else
            a8 = v46;
          v178 = (a8 + 2);
          v47 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
          v49 = (char *)&v146 - ((v48 + 15) & 0xFFFFFFFF0);
          v50 = MEMORY[0x1E0C80A78](v47);
          v53 = (char *)&v146 - v52;
          if ((int)v51 >= 1)
          {
            v54 = 8 * v51;
            bzero(v49, 8 * v51);
            bzero(v53, v54);
          }
          v180 = (a8 * v41);
          MEMORY[0x1E0C80A78](v50);
          v56 = (double *)((char *)&v146 - v55);
          v57 = 0.0;
          if ((int)v41 >= -1)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v61 = 0;
            v192 = v53 + 8;
            v191 = v49 + 8;
            v168 = (a8 + 1);
            v62 = v168 + 1;
            v63 = -1;
            v64 = -1;
            v66 = v187;
            v65 = v188;
            v67 = v186;
            v68 = v185;
            do
            {
              if ((int)a8 >= -1)
              {
                v69 = 0;
                v70 = 0;
                v71 = v64 + v190;
                v72 = (v64 + v190);
                v73 = &v192[8 * v63];
                v74 = &v191[8 * v63];
                do
                {
                  if ((v71 & 0x8000000000000000) != 0)
                  {
                    v61 = 1;
                  }
                  else if ((uint64_t)(v38 + v70 - 1) < 0)
                  {
                    v59 = 1;
                  }
                  else if (a7 <= v72)
                  {
                    v60 = 1;
                  }
                  else if (v27 <= v45 + v69)
                  {
                    v58 = 1;
                  }
                  else
                  {
                    if (v198 < 9)
                    {
                      *(_QWORD *)&v74[8 * v70] = *(unsigned __int8 *)(v66 + v69);
                      v76 = *(unsigned __int8 *)(v68 + v69);
                    }
                    else
                    {
                      v75 = v193;
                      *(_QWORD *)&v74[8 * v70] = *(unsigned __int16 *)(v65 + 2 * v69) >> v193;
                      v76 = *(unsigned __int16 *)(v67 + 2 * v69) >> v75;
                    }
                    *(_QWORD *)&v73[8 * v70] = v76;
                  }
                  ++v70;
                  v69 += (int)a10;
                }
                while (v62 != v70);
                v63 += v70;
              }
              v68 += v196;
              v67 += v195;
              v66 += v197;
              v65 += v194;
              v43 = v64++ < v41;
            }
            while (v43);
            v77 = v175;
            v78 = v178;
            if ((int)a8 >= -1 && (v61 & 1) != 0)
            {
              if ((int)v178 <= 1)
                v79 = 1;
              else
                v79 = v178;
              v80 = (int)v183;
              if ((int)v183 >= v174)
                v80 = v174;
              v81 = 8 * v80 + 16;
              v82 = v53;
              v83 = v49;
              do
              {
                *v83 = *(_QWORD *)((char *)v83 + v81);
                ++v83;
                *v82 = *(_QWORD *)((char *)v82 + v81);
                ++v82;
                --v79;
              }
              while (v79);
            }
            v84 = v167;
            v25 = v177;
            v85 = v168;
            if ((int)a8 >= -1 && (v60 & 1) != 0)
            {
              if (v78 <= 1)
                v86 = 1;
              else
                v86 = v78;
              v87 = 8 * v164 * v78;
              v88 = 8 * v165 * v78;
              do
              {
                *(_QWORD *)&v49[v87] = *(_QWORD *)&v49[v88];
                *(_QWORD *)&v53[v87] = *(_QWORD *)&v53[v88];
                v87 += 8;
                v88 += 8;
                --v86;
              }
              while (v86);
            }
            if ((int)v41 >= -1 && (v59 & 1) != 0)
            {
              v89 = 0;
              v90 = 0;
              v91 = (int)v183;
              if ((int)v183 >= v174)
                v91 = v174;
              v92 = 8 * v91 + 16;
              do
              {
                *(_QWORD *)&v49[v89] = *(_QWORD *)&v49[v89 + 8];
                *(_QWORD *)&v53[v89] = *(_QWORD *)&v53[v89 + 8];
                ++v90;
                v89 += v92;
              }
              while (v90 < v77);
            }
            if ((int)v41 >= -1 && (v58 & 1) != 0)
            {
              v93 = 0;
              v94 = 0;
              do
              {
                *(_QWORD *)&v49[8 * (int)v85 + v93] = *(_QWORD *)&v49[8 * (int)a8 + v93];
                *(_QWORD *)&v53[8 * (int)v85 + v93] = *(_QWORD *)&v53[8 * (int)a8 + v93];
                ++v94;
                v93 += 8 * (int)a8 + 16;
              }
              while (v94 < v77);
            }
            if ((int)v41 >= 1)
            {
              v95 = v85 - 1;
              v96 = v49 + 8;
              v97 = 8 * v78;
              v57 = 0.0;
              v98 = 1;
              do
              {
                if ((int)a8 <= 0)
                {
                  v99 = v98 + 1;
                }
                else
                {
                  v99 = v98 + 1;
                  v100 = a8 * (v98 - 1);
                  v101 = &v96[v97 * (v98 + 1)];
                  v102 = (uint64_t *)&v96[v97 * v98];
                  v103 = v95;
                  v104 = &v96[v97 * (v98 - 1)];
                  do
                  {
                    v105 = *v102;
                    v106 = *(v102 - 1);
                    v107 = v102[1];
                    ++v102;
                    v108 = (double)(v107 + v106 + *(_QWORD *)v104 + *(_QWORD *)v101) * -2.0 + (double)v105 * 12.0;
                    v109 = *((_QWORD *)v104 - 1);
                    v110 = *((_QWORD *)v104 + 1);
                    v104 += 8;
                    v111 = v110 + v109;
                    v112 = *((_QWORD *)v101 - 1);
                    v113 = *((_QWORD *)v101 + 1);
                    v101 += 8;
                    v114 = (v108 - (double)(v111 + v112 + v113)) * 0.25;
                    v115 = -v114;
                    if (v114 >= 0.0)
                      v115 = v114;
                    v56[v100] = v115;
                    v57 = v57 + v114 * v114;
                    ++v100;
                    --v103;
                  }
                  while (v103);
                }
                v43 = v98 < v41;
                v98 = v99;
              }
              while (v43);
              if ((v166 & 1) == 0)
              {
                v116 = 0;
                v117 = v163;
                do
                {
                  if ((int)a8 >= 1)
                  {
                    v118 = (float *)(v25 + 4 * (v117 + (int)v38 / (int)v189));
                    v119 = a8;
                    v120 = v56;
                    do
                    {
                      v121 = *v120++;
                      v122 = v121;
                      *v118++ = v122;
                      --v119;
                    }
                    while (v119);
                  }
                  ++v116;
                  v117 += v84;
                  v56 += (int)a8;
                }
                while (v116 < v41);
              }
            }
          }
          v123 = v57 / (v40 * (double)(int)a8);
          v124 = v184;
          if (v172)
            *(double *)(v172 + 8 * (v184 + v176)) = v123;
          if (v123 < v23)
            v123 = v23;
          v125 = v26 / v123;
          v126 = fabs(sqrt(v125));
          v127 = v125 == -INFINITY;
          v128 = INFINITY;
          if (!v127)
            v128 = v126;
          if ((int)v41 < 1)
          {
            v129 = 0;
            v135 = v182;
          }
          else
          {
            v129 = 0;
            if ((int)v183 >= v174)
              v130 = v174;
            else
              v130 = (int)v183;
            v131 = (uint64_t)&v49[8 * v130 + 24];
            v132 = 8 * v130 + 16;
            v133 = (uint64_t)&v53[8 * v130 + 24];
            v134 = 1;
            v135 = v182;
            do
            {
              v136 = (a8 + 1) - 1;
              v137 = (uint64_t *)v133;
              v138 = (uint64_t *)v131;
              if ((int)a8 >= 1)
              {
                do
                {
                  v140 = *v138++;
                  v139 = v140;
                  v141 = *v137++;
                  v129 += (v139 - v141) * (v139 - v141);
                  --v136;
                }
                while (v136);
              }
              v131 += v132;
              v133 += v132;
              v43 = v134++ < v41;
            }
            while (v43);
          }
          v142 = v128 * ((double)v129 / (double)(int)v180);
          LODWORD(a8) = v173;
          if (v179)
          {
            if (v142 == 0.0)
            {
              v143 = INFINITY;
            }
            else
            {
              v144 = log10(v162 / v142);
              v124 = v184;
              v25 = v177;
              v143 = v144 * 10.0;
            }
            *(double *)(v179 + 8 * (v124 + v176)) = v143;
          }
          v37 = v124 + 1;
          v33 = v33 + v142;
          v31 = v135 + 1;
          v38 += v170;
          v185 += v170;
          v186 += v169;
          v187 += v170;
          v188 += v169;
          v45 += v170;
        }
        while (v27 > v38);
      }
      v35 = v156 + 1;
      v161 += v153;
      v160 += v152;
      v159 += v151;
      v158 += v150;
      v34 = v157 - v155;
      v163 += v149;
      v190 += v154;
    }
    while (a7 > v190);
  }
  else
  {
    v31 = 0;
    v33 = 0.0;
  }
  v145 = v33 / (double)v31;
  if (v145 != 0.0)
    log10((double)(~(-1 << v198) * (unint64_t)~(-1 << v198)) / v145);
}

uint64_t _computeFLIPForRGB(__CVBuffer *a1, __CVBuffer *a2, int a3, CFTypeRef *a4, _DWORD *a5, unint64_t a6, _QWORD *a7, float a8, float a9, float a10)
{
  const __CFAllocator *v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  __CFDictionary *Mutable;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  float v38;
  float v39;
  float v40;
  float v41;
  __CVBuffer *v42;
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v45;
  float *v46;
  float *v47;
  __CVBuffer *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  int v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  __CVBuffer *v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;
  float *v79;
  uint64_t i;
  __CVBuffer *v81;
  __CVBuffer *v82;
  __CVBuffer *v83;
  int v84;
  float *v85;
  float *v86;
  int v87;
  float *v88;
  float *v89;
  float *v90;
  float *v91;
  float *v92;
  float *v93;
  float v94;
  __CVBuffer *v95;
  float v96;
  int v97;
  uint64_t v98;
  float v99;
  uint64_t j;
  float v101;
  float v102;
  size_t v103;
  __CVBuffer *v104;
  __CVBuffer *v105;
  __CVBuffer *v106;
  __CVBuffer *v107;
  __CVBuffer *v108;
  float *v109;
  float *v110;
  float *v111;
  __CVBuffer *v112;
  float *v113;
  float *v114;
  float *v115;
  float *v116;
  float *v117;
  __CVBuffer *v118;
  float *v119;
  float *v120;
  float *v121;
  __CVBuffer *v122;
  __CVBuffer *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t k;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  BOOL v136;
  float v137;
  __CVBuffer *v138;
  __CVBuffer *v139;
  __CVBuffer *v140;
  float *v141;
  float *v142;
  float *v143;
  float *v144;
  float *v145;
  float *v146;
  int v147;
  float *v148;
  __CVBuffer *v149;
  float *v150;
  __CVBuffer *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float *v161;
  float *v162;
  float *v163;
  float *v164;
  float *v165;
  float *v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float v171;
  double v172;
  double v173;
  const void *v174;
  CGFloat v175;
  CGFloat v176;
  CGFloat v177;
  __CVBuffer *v178;
  double PixelBufferSize;
  double v180;
  double v181;
  float *v182;
  __CFArray *v183;
  _DWORD *v184;
  size_t v185;
  uint64_t v186;
  uint64_t v187;
  size_t v188;
  uint64_t v189;
  float v190;
  double v191;
  float *v192;
  size_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  unint64_t v197;
  int v198;
  double v199;
  uint64_t m;
  size_t v201;
  float *v202;
  uint64_t v203;
  float v204;
  double v205;
  double v206;
  uint64_t appended;
  uint64_t v208;
  float *v210;
  float *v211;
  __CVBuffer *v212;
  float v213;
  double v214;
  CFTypeRef *v215;
  int v216;
  CFMutableDictionaryRef v217;
  double v219;
  double v220;
  double v221;
  double v222;
  CFAllocatorRef allocator;
  double v225;
  CFDictionaryRef pixelBufferAttributes;
  unint64_t v227;
  unsigned int v228;
  uint64_t v229;
  __CVBuffer *v230;
  size_t v231;
  float v232;
  __CVBuffer *v233;
  __CVBuffer *v234;
  __CVBuffer *v235;
  int v236;
  __CVBuffer *v237;
  __CVBuffer *v238;
  int v239;
  __CVBuffer *v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  CVPixelBufferRef v244;
  __CVBuffer *v245;
  CVPixelBufferRef v246;
  float v247;
  CVPixelBufferRef v248;
  __CVBuffer *v249;
  CVPixelBufferRef v250;
  float v251;
  CVPixelBufferRef v252;
  __CVBuffer *v253;
  CVPixelBufferRef v254;
  float v255;
  int v256;
  CVPixelBufferRef v257;
  __CVBuffer *v258;
  int v259;
  CVPixelBufferRef v260;
  float v261;
  float v262;
  CVPixelBufferRef v263;
  __CVBuffer *v264;
  int v265;
  CVPixelBufferRef v266;
  uint64_t v267;
  uint64_t v268;
  size_t v269;
  size_t v270;
  CFTypeRef cf;
  CVPixelBufferRef v272;
  CVPixelBufferRef v273;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferRef v275;
  CVPixelBufferRef v276;
  CVPixelBufferRef v277;
  CVPixelBufferRef v278;
  CVPixelBufferRef v279;
  CVPixelBufferRef v280;
  CVPixelBufferRef v281;
  CVPixelBufferRef v282;
  CVPixelBufferRef v283;
  CVPixelBufferRef v284;
  CVPixelBufferRef v285;
  CVPixelBufferRef v286;
  CVPixelBufferRef pixelBufferOut;
  __CVBuffer *v288;
  __CVBuffer *v289;
  uint64_t v290;
  __CVBuffer *v291;
  uint64_t v292;
  float v293;
  uint64_t v294;
  float v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;

  v300 = *MEMORY[0x1E0C80C00];
  v288 = 0;
  v289 = 0;
  v286 = 0;
  pixelBufferOut = 0;
  v284 = 0;
  v285 = 0;
  v282 = 0;
  v283 = 0;
  v280 = 0;
  v281 = 0;
  v278 = 0;
  v279 = 0;
  v276 = 0;
  v277 = 0;
  pixelBuffer = 0;
  v275 = 0;
  v272 = 0;
  v273 = 0;
  cf = 0;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v217 = CFDictionaryCreateMutable(v18, 0, v19, v20);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v217);
  if (CMPhotoPixelBufferHasCLAP(a1) || CMPhotoPixelBufferHasCLAP(a2))
  {
    v186 = 4294950306;
    goto LABEL_195;
  }
  v269 = 0;
  v270 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v269, &v270);
  v267 = 0;
  v268 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v267, &v268);
  if (v269 != v267 || v270 != v268)
  {
    v30 = FigSignalErrorAt();
    goto LABEL_248;
  }
  v261 = a8;
  v227 = a6;
  v216 = a3;
  v215 = a4;
  v25 = *MEMORY[0x1E0C9D628];
  v24 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v26 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v29 = *MEMORY[0x1E0C9D820];
  v28 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v30 = CMPhotoScaleAndRotateSessionTransformForSize(0, a1, 1, 1, 1919365990, 0, 0, 1u, *MEMORY[0x1E0C9D628], v24, v26, v27, *MEMORY[0x1E0C9D820], v28, v22, v23, 0, 1u, &v289);
  if ((_DWORD)v30)
    goto LABEL_248;
  v220 = v26;
  v221 = v24;
  v33 = v24;
  v219 = v27;
  v34 = v28;
  v30 = CMPhotoScaleAndRotateSessionTransformForSize(0, a2, 1, 1, 1919365990, 0, 0, 1u, v25, v33, v26, v27, v29, v28, v31, v32, 0, 1u, &v288);
  if ((_DWORD)v30)
    goto LABEL_248;
  v35 = v29;
  v30 = _computesRGB2LinearRGB(v289, v289);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesRGB2LinearRGB(v288, v288);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesLinearRGB2XYZ(v289, v289);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesLinearRGB2XYZ(v288, v288);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &pixelBufferOut);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v286);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2YCxCz(v289, pixelBufferOut);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2YCxCz(v288, v286);
  if ((_DWORD)v30)
    goto LABEL_248;
  if (v289)
  {
    CFRelease(v289);
    v289 = 0;
  }
  v36 = v28;
  v37 = v25;
  if (v288)
  {
    CFRelease(v288);
    v288 = 0;
  }
  v38 = 0.25;
  if (v261 != 0.0)
    v38 = v261;
  v39 = 0.718;
  if (a9 != 0.0)
    v39 = a9;
  if (a10 == 0.0)
  {
    v40 = (float)v269;
    if ((float)v269 <= (float)v270)
      v40 = (float)v270;
    a10 = 4096.0;
    if (v40 <= 4096.0)
      a10 = v40;
  }
  v41 = (float)(v38 * (float)(a10 / v39)) * 0.017453;
  v228 = vcvtps_s32_f32(v41 * 0.13505);
  v30 = CVPixelBufferCreate(v18, (int)((2 * v228) | 1), (int)((2 * v228) | 1), 0x72673366u, Mutable, &pixelBuffer);
  if ((_DWORD)v30)
    goto LABEL_248;
  v42 = pixelBuffer;
  pixelBufferAttributes = Mutable;
  v222 = v34;
  v225 = v25;
  allocator = v18;
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1919365990)
  {
    v290 = 0;
    v291 = 0;
    CMPhotoGetPixelBufferCLAP(v42, 0, 0, &v290, &v291);
    CVPixelBufferLockBaseAddress(v42, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v42, 0);
    BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 0);
    v45 = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 1uLL);
    v46 = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 2uLL);
    if (v291)
    {
      v47 = v46;
      v212 = v42;
      v214 = v35;
      v48 = 0;
      v49 = 0.00001;
      v50 = 25.854;
      v51 = 0.0053;
      v211 = BaseAddressOfPlane;
      v210 = v45;
      v52 = v46;
      v53 = 0.0;
      v54 = 0.0;
      v55 = 0.0;
      v56 = v290;
      v213 = v41;
      v57 = 1.0 / v41;
      v229 = v290;
      v230 = v291;
      v231 = BytesPerRowOfPlane;
      v232 = 1.0 / v41;
      do
      {
        if (v56)
        {
          v58 = -v228;
          v247 = (float)(v57 * (float)(int)((_DWORD)v48 - v228)) * (float)(v57 * (float)(int)((_DWORD)v48 - v228));
          v59 = BaseAddressOfPlane;
          v60 = v45;
          v61 = v52;
          v62 = v56;
          do
          {
            v251 = v55;
            v255 = v54;
            v262 = v53;
            v63 = (float)(v247 + (float)((float)(v57 * (float)v58) * (float)(v57 * (float)v58))) * -9.8696;
            v64 = expf(v63 / 0.0047);
            v65 = (float)(expf(v63 / v49) * 0.0) + (float)(v64 * v50);
            v66 = expf(v63 / v51);
            v67 = v51;
            v68 = v50;
            v69 = v49;
            v70 = expf(v63 / 0.025) * 151.33;
            v71 = v70 + (float)(v66 * 24.347);
            v72 = expf(v63 / 0.04);
            v57 = v232;
            v73 = v70 + (float)(v72 * 302.2);
            v49 = v69;
            v50 = v68;
            v51 = v67;
            *v59++ = v65;
            *v60++ = v71;
            *v61++ = v73;
            v55 = v251 + v65;
            v54 = v255 + v71;
            v53 = v262 + v73;
            ++v58;
            --v62;
          }
          while (v62);
        }
        v48 = (__CVBuffer *)((char *)v48 + 1);
        v52 = (float *)((char *)v52 + v231);
        v45 = (float *)((char *)v45 + v231);
        BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v231);
        v56 = v229;
      }
      while (v48 != v230);
      v74 = 0;
      Mutable = pixelBufferAttributes;
      v35 = v214;
      v36 = v222;
      v18 = allocator;
      v41 = v213;
      v75 = v211;
      v42 = v212;
      v76 = v210;
      do
      {
        v77 = v75;
        v78 = v76;
        v79 = v47;
        for (i = v229; i; --i)
        {
          *v77 = *v77 / v55;
          ++v77;
          *v78 = *v78 / v54;
          ++v78;
          *v79 = *v79 / v53;
          ++v79;
        }
        v74 = (__CVBuffer *)((char *)v74 + 1);
        v47 = (float *)((char *)v47 + v231);
        v76 = (float *)((char *)v76 + v231);
        v75 = (float *)((char *)v75 + v231);
      }
      while (v74 != v230);
    }
    CVPixelBufferUnlockBaseAddress(v42, 0);
  }
  else
  {
    v186 = FigSignalErrorAt();
    if ((_DWORD)v186)
      goto LABEL_195;
  }
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(pixelBufferOut, v285, pixelBuffer);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(v286, v284, pixelBuffer);
  if ((_DWORD)v30)
    goto LABEL_248;
  if (pixelBuffer)
  {
    CFRelease(pixelBuffer);
    pixelBuffer = 0;
  }
  v30 = _computesYCxCz2XYZ(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesYCxCz2XYZ(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2LinearRGB(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2LinearRGB(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesClamp(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesClamp(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesLinearRGB2XYZ(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesLinearRGB2XYZ(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2CIELab(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesXYZ2CIELab(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesHunt(v285, v285);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesHunt(v284, v284);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v277);
  if ((_DWORD)v30)
    goto LABEL_248;
  v82 = v284;
  v81 = v285;
  v83 = v277;
  if (CVPixelBufferGetPixelFormatType(v285) == 1919365990
    && CVPixelBufferGetPixelFormatType(v82) == 1919365990
    && CVPixelBufferGetPixelFormatType(v83) == 1919365990)
  {
    CVPixelBufferLockBaseAddress(v81, 0);
    CVPixelBufferLockBaseAddress(v82, 0);
    CVPixelBufferLockBaseAddress(v83, 0);
    v290 = 0;
    v291 = 0;
    CMPhotoGetPixelBufferCLAP(v81, 0, 0, &v290, &v291);
    v84 = CVPixelBufferGetBytesPerRowOfPlane(v81, 0);
    v263 = (CVPixelBufferRef)CVPixelBufferGetBaseAddressOfPlane(v81, 0);
    v85 = (float *)CVPixelBufferGetBaseAddressOfPlane(v81, 1uLL);
    v235 = v81;
    v86 = (float *)CVPixelBufferGetBaseAddressOfPlane(v81, 2uLL);
    v87 = CVPixelBufferGetBytesPerRowOfPlane(v82, 0);
    v88 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 0);
    v89 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 1uLL);
    v233 = v82;
    v90 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 2uLL);
    v256 = CVPixelBufferGetBytesPerRowOfPlane(v83, 0);
    v91 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 0);
    v92 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 1uLL);
    v238 = v83;
    v93 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 2uLL);
    v295 = 0.0;
    v294 = 0;
    v293 = 0.0;
    v292 = 0;
    v298 = 0x3F37163B3EB7163BLL;
    v299 = 1039408548;
    v296 = 0x3D93D3363E38C803;
    v297 = 1064520606;
    XYZ2CIELab((float *)&v298, (float *)&v294);
    XYZ2CIELab((float *)&v296, (float *)&v292);
    v94 = powf(vabds_f32(*(float *)&v294, *(float *)&v292)+ sqrtf((float)((float)((float)((float)(*(float *)&v294 * 0.01) * v295)- (float)((float)(*(float *)&v292 * 0.01) * v293))* (float)((float)((float)(*(float *)&v294 * 0.01) * v295)- (float)((float)(*(float *)&v292 * 0.01) * v293)))+ (float)((float)((float)((float)(*(float *)&v294 * 0.01) * *((float *)&v294 + 1))- (float)((float)(*(float *)&v292 * 0.01) * *((float *)&v292 + 1)))* (float)((float)((float)(*(float *)&v294 * 0.01) * *((float *)&v294 + 1))- (float)((float)(*(float *)&v292 * 0.01) * *((float *)&v292 + 1))))), 0.7);
    v252 = v291;
    if (v291)
    {
      v95 = 0;
      v96 = v94 * 0.4;
      v97 = v84 + 3;
      if (v84 >= 0)
        v97 = v84;
      v98 = v290;
      v99 = v94 - v96;
      v244 = (CVPixelBufferRef)(4 * (v87 / 4));
      v248 = (CVPixelBufferRef)(4 * (v256 / 4));
      v241 = 4 * (v97 >> 2);
      do
      {
        v257 = v95;
        if (v98)
        {
          for (j = 0; j != v98; ++j)
          {
            v101 = powf(vabds_f32(*((float *)v263 + j), v88[j])+ sqrtf((float)((float)(v86[j] - v90[j]) * (float)(v86[j] - v90[j]))+ (float)((float)(v85[j] - v89[j]) * (float)(v85[j] - v89[j]))), 0.7);
            if (v101 >= v96)
              v102 = (float)((float)((float)(v101 - v96) / v99) * 0.05) + 0.95;
            else
              v102 = (float)(0.95 / v96) * v101;
            v91[j] = v102;
            v92[j] = v102;
            v93[j] = v102;
          }
        }
        v95 = (CVPixelBufferRef)((char *)v257 + 1);
        v93 = (float *)((char *)v248 + (_QWORD)v93);
        v92 = (float *)((char *)v248 + (_QWORD)v92);
        v91 = (float *)((char *)v248 + (_QWORD)v91);
        v90 = (float *)((char *)v244 + (_QWORD)v90);
        v89 = (float *)((char *)v244 + (_QWORD)v89);
        v88 = (float *)((char *)v244 + (_QWORD)v88);
        v86 = (float *)((char *)v86 + v241);
        v85 = (float *)((char *)v85 + v241);
        v263 = (CVPixelBufferRef)((char *)v263 + v241);
      }
      while ((CVPixelBufferRef)((char *)v257 + 1) != v252);
    }
    CVPixelBufferUnlockBaseAddress(v233, 0);
    CVPixelBufferUnlockBaseAddress(v235, 0);
    CVPixelBufferUnlockBaseAddress(v238, 0);
    Mutable = pixelBufferAttributes;
    v36 = v222;
    v37 = v225;
    v18 = allocator;
  }
  else
  {
    v30 = FigSignalErrorAt();
    if ((_DWORD)v30)
      goto LABEL_248;
  }
  v103 = (int)((2 * vcvtps_s32_f32((float)(v41 * 0.041) * 3.0)) | 1);
  v30 = CVPixelBufferCreate(v18, v103, v103, 0x72673366u, Mutable, &v273);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v103, v103, 0x72673366u, Mutable, &v272);
  if ((_DWORD)v30)
    goto LABEL_248;
  setFeatureFilter(v273, 1, v41);
  setFeatureFilter(v272, 0, v41);
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v283);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v282);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesCIELab2Gray(pixelBufferOut, v283);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = _computesCIELab2Gray(v286, v282);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v281);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v279);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v280);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v278);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(v283, v281, v273);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(v282, v280, v273);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(v283, v279, v272);
  if ((_DWORD)v30)
    goto LABEL_248;
  v30 = convolve(v282, v278, v272);
  if ((_DWORD)v30)
    goto LABEL_248;
  if (v273)
  {
    CFRelease(v273);
    v273 = 0;
  }
  if (v272)
  {
    CFRelease(v272);
    v272 = 0;
  }
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v276);
  if ((_DWORD)v30)
    goto LABEL_248;
  v105 = v280;
  v104 = v281;
  v107 = v278;
  v106 = v279;
  v108 = v276;
  if (CVPixelBufferGetPixelFormatType(v281) == 1919365990
    && CVPixelBufferGetPixelFormatType(v105) == 1919365990
    && CVPixelBufferGetPixelFormatType(v106) == 1919365990
    && CVPixelBufferGetPixelFormatType(v107) == 1919365990
    && CVPixelBufferGetPixelFormatType(v108) == 1919365990)
  {
    v290 = 0;
    v291 = 0;
    CMPhotoGetPixelBufferCLAP(v104, 0, 0, &v290, &v291);
    CVPixelBufferLockBaseAddress(v104, 0);
    CVPixelBufferLockBaseAddress(v105, 0);
    CVPixelBufferLockBaseAddress(v106, 0);
    CVPixelBufferLockBaseAddress(v107, 0);
    CVPixelBufferLockBaseAddress(v108, 0);
    v242 = CVPixelBufferGetBytesPerRowOfPlane(v104, 0);
    v109 = (float *)CVPixelBufferGetBaseAddressOfPlane(v104, 0);
    v110 = (float *)CVPixelBufferGetBaseAddressOfPlane(v104, 1uLL);
    v258 = v104;
    CVPixelBufferGetBaseAddressOfPlane(v104, 2uLL);
    v111 = (float *)CVPixelBufferGetBaseAddressOfPlane(v106, 0);
    v112 = v108;
    v113 = (float *)CVPixelBufferGetBaseAddressOfPlane(v106, 1uLL);
    v249 = v106;
    CVPixelBufferGetBaseAddressOfPlane(v106, 2uLL);
    v239 = CVPixelBufferGetBytesPerRowOfPlane(v105, 0);
    v114 = (float *)CVPixelBufferGetBaseAddressOfPlane(v105, 0);
    v115 = (float *)CVPixelBufferGetBaseAddressOfPlane(v105, 1uLL);
    v253 = v105;
    CVPixelBufferGetBaseAddressOfPlane(v105, 2uLL);
    v116 = (float *)CVPixelBufferGetBaseAddressOfPlane(v107, 0);
    v117 = (float *)CVPixelBufferGetBaseAddressOfPlane(v107, 1uLL);
    v245 = v107;
    CVPixelBufferGetBaseAddressOfPlane(v107, 2uLL);
    v236 = CVPixelBufferGetBytesPerRowOfPlane(v112, 0);
    v118 = v112;
    v264 = v112;
    v119 = (float *)CVPixelBufferGetBaseAddressOfPlane(v112, 0);
    v120 = (float *)CVPixelBufferGetBaseAddressOfPlane(v118, 1uLL);
    v121 = (float *)CVPixelBufferGetBaseAddressOfPlane(v264, 2uLL);
    v122 = v291;
    if (v291)
    {
      v123 = 0;
      v124 = v290;
      v125 = 4 * (v236 / 4);
      v126 = 4 * (v239 / 4);
      v127 = 4 * (v242 / 4);
      do
      {
        if (v124)
        {
          for (k = 0; k != v124; ++k)
          {
            v129 = sqrtf((float)(v113[k] * v113[k]) + (float)(v111[k] * v111[k]));
            v130 = sqrtf((float)(v117[k] * v117[k]) + (float)(v116[k] * v116[k]));
            v131 = sqrtf((float)(v110[k] * v110[k]) + (float)(v109[k] * v109[k]))
                 - sqrtf((float)(v115[k] * v115[k]) + (float)(v114[k] * v114[k]));
            if (v131 < 0.0)
              v131 = -v131;
            v132 = v129 - v130;
            v133 = -(float)(v129 - v130);
            if (v132 < 0.0)
              v132 = v133;
            if (v131 <= v132)
              v131 = v132;
            v134 = v131 * 0.70711;
            v135 = fabsf(sqrtf(v134));
            v136 = v134 == -INFINITY;
            v137 = INFINITY;
            if (!v136)
              v137 = v135;
            v119[k] = v137;
            v120[k] = v137;
            v121[k] = v137;
          }
        }
        v123 = (__CVBuffer *)((char *)v123 + 1);
        v121 = (float *)((char *)v121 + v125);
        v120 = (float *)((char *)v120 + v125);
        v119 = (float *)((char *)v119 + v125);
        v117 = (float *)((char *)v117 + v126);
        v116 = (float *)((char *)v116 + v126);
        v115 = (float *)((char *)v115 + v126);
        v114 = (float *)((char *)v114 + v126);
        v113 = (float *)((char *)v113 + v127);
        v111 = (float *)((char *)v111 + v127);
        v110 = (float *)((char *)v110 + v127);
        v109 = (float *)((char *)v109 + v127);
      }
      while (v123 != v122);
    }
    CVPixelBufferUnlockBaseAddress(v245, 0);
    CVPixelBufferUnlockBaseAddress(v249, 0);
    CVPixelBufferUnlockBaseAddress(v253, 0);
    CVPixelBufferUnlockBaseAddress(v258, 0);
    CVPixelBufferUnlockBaseAddress(v264, 0);
    Mutable = pixelBufferAttributes;
    v18 = allocator;
  }
  else
  {
    v30 = FigSignalErrorAt();
    if ((_DWORD)v30)
      goto LABEL_248;
  }
  v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v275);
  if ((_DWORD)v30)
  {
LABEL_248:
    v186 = v30;
    goto LABEL_195;
  }
  v139 = v276;
  v138 = v277;
  v140 = v275;
  if (CVPixelBufferGetPixelFormatType(v277) != 1919365990
    || CVPixelBufferGetPixelFormatType(v139) != 1919365990
    || CVPixelBufferGetPixelFormatType(v140) != 1919365990)
  {
    v30 = FigSignalErrorAt();
    if (!(_DWORD)v30)
      goto LABEL_125;
    goto LABEL_248;
  }
  v290 = 0;
  v291 = 0;
  CMPhotoGetPixelBufferCLAP(v138, 0, 0, &v290, &v291);
  CVPixelBufferLockBaseAddress(v138, 0);
  CVPixelBufferLockBaseAddress(v139, 0);
  CVPixelBufferLockBaseAddress(v140, 0);
  v265 = CVPixelBufferGetBytesPerRowOfPlane(v138, 0);
  v141 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 0);
  v142 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 1uLL);
  v237 = v138;
  v143 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 2uLL);
  v259 = CVPixelBufferGetBytesPerRowOfPlane(v139, 0);
  v144 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 0);
  v145 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 1uLL);
  v234 = v139;
  v146 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 2uLL);
  v147 = CVPixelBufferGetBytesPerRowOfPlane(v140, 0);
  v148 = (float *)CVPixelBufferGetBaseAddressOfPlane(v140, 0);
  v149 = (__CVBuffer *)CVPixelBufferGetBaseAddressOfPlane(v140, 1uLL);
  v240 = v140;
  v150 = (float *)CVPixelBufferGetBaseAddressOfPlane(v140, 2uLL);
  v254 = v291;
  if (v291)
  {
    v151 = 0;
    v152 = v147 / 4;
    v153 = v290;
    v246 = (CVPixelBufferRef)(4 * (v259 / 4));
    v250 = (CVPixelBufferRef)(4 * v152);
    v243 = 4 * (v265 / 4);
    do
    {
      v260 = v151;
      if (v153)
      {
        v154 = 0;
        v266 = v149;
        do
        {
          v155 = v141[v154];
          v156 = v142[v154];
          v157 = v143[v154];
          v158 = v145[v154];
          v159 = v146[v154];
          v160 = 1.0 - v144[v154];
          v161 = v148;
          v162 = v146;
          v163 = v145;
          v164 = v144;
          v165 = v143;
          v166 = v142;
          v167 = v141;
          v168 = v150;
          v169 = powf(v155, v160);
          v170 = powf(v156, 1.0 - v158);
          v171 = powf(v157, 1.0 - v159);
          v150 = v168;
          v141 = v167;
          v142 = v166;
          v143 = v165;
          v144 = v164;
          v145 = v163;
          v146 = v162;
          v148 = v161;
          v149 = v266;
          v148[v154] = v169;
          *((float *)v266 + v154) = v170;
          v150[v154++] = v171;
        }
        while (v153 != v154);
      }
      v151 = (CVPixelBufferRef)((char *)v260 + 1);
      v150 = (float *)((char *)v250 + (_QWORD)v150);
      v149 = (CVPixelBufferRef)((char *)v250 + (_QWORD)v149);
      v148 = (float *)((char *)v250 + (_QWORD)v148);
      v146 = (float *)((char *)v246 + (_QWORD)v146);
      v145 = (float *)((char *)v246 + (_QWORD)v145);
      v144 = (float *)((char *)v246 + (_QWORD)v144);
      v143 = (float *)((char *)v143 + v243);
      v142 = (float *)((char *)v142 + v243);
      v141 = (float *)((char *)v141 + v243);
    }
    while ((CVPixelBufferRef)((char *)v260 + 1) != v254);
  }
  CVPixelBufferUnlockBaseAddress(v234, 0);
  CVPixelBufferUnlockBaseAddress(v237, 0);
  CVPixelBufferUnlockBaseAddress(v240, 0);
  Mutable = pixelBufferAttributes;
  v37 = v225;
LABEL_125:
  if (v276)
  {
    CFRelease(v276);
    v276 = 0;
  }
  v174 = (const void *)v227;
  if (a5 || v227)
  {
    v178 = v275;
    if (v275)
    {
      if (!a5 && !v227)
        goto LABEL_252;
      if (v227 && (v227 == 1 || !a7))
      {
        v186 = FigSignalErrorAt();
        v174 = 0;
        v182 = 0;
        v183 = 0;
        v184 = 0;
        goto LABEL_182;
      }
      if (CVPixelBufferGetPixelFormatType(v275) == 1919365990)
      {
        PixelBufferSize = CMPhotoGetPixelBufferSize(v178);
        v181 = v180;
        if (v227)
        {
          v182 = (float *)malloc_type_calloc(v227, 4uLL, 0x100004052888210uLL);
          if (!v182)
          {
            v174 = 0;
            v183 = 0;
            v184 = 0;
LABEL_144:
            v186 = 4294950305;
            goto LABEL_182;
          }
        }
        else
        {
          v182 = 0;
        }
        v185 = (unint64_t)(PixelBufferSize * v181 * 3.0);
        if (a5)
        {
          v184 = malloc_type_malloc(4 * v185, 0x100004052888210uLL);
          if (!v184)
          {
            v174 = 0;
            v183 = 0;
            goto LABEL_144;
          }
        }
        else
        {
          v184 = 0;
        }
        v187 = CVPixelBufferLockBaseAddress(v178, 1uLL);
        if ((_DWORD)v187)
        {
          v186 = v187;
          v174 = 0;
          v183 = 0;
        }
        else
        {
          v188 = 0;
          v189 = 0;
          v186 = v227;
          v190 = 1.0 / (float)v227;
          v191 = 0.0;
          do
          {
            v192 = (float *)CVPixelBufferGetBaseAddressOfPlane(v178, v188);
            v193 = CVPixelBufferGetBytesPerRowOfPlane(v178, v188);
            if (v181 > 0.0)
            {
              v194 = 0;
              do
              {
                if (PixelBufferSize > 0.0)
                {
                  v195 = 0;
                  do
                  {
                    v196 = v192[v195];
                    if (v184)
                      *(float *)&v184[v189++] = v196;
                    if (v182)
                    {
                      LODWORD(v197) = (int)(float)(fminf(fmaxf(v196, 0.0), 1.0) / v190);
                      if (v227 - 1 >= (int)v197)
                        v197 = (int)v197;
                      else
                        v197 = v227 - 1;
                      v182[v197] = v182[v197] + 1.0;
                    }
                    v191 = v191 + v196;
                    ++v195;
                  }
                  while (PixelBufferSize > (double)(int)v195);
                }
                ++v194;
                v192 = (float *)((char *)v192 + v193);
              }
              while (v181 > (double)(int)v194);
            }
            ++v188;
          }
          while (v188 != 3);
          v36 = v222;
          v37 = v225;
          if (a5)
          {
            qsort_b(v184, v185, 4uLL, &__block_literal_global);
            v198 = 0;
            *a5 = *v184;
            a5[4] = v184[v185 - 1];
            v199 = 0.0;
            for (m = 1; m != 4; ++m)
            {
              if (v185 > v198)
              {
                v201 = v185 - v198;
                v202 = (float *)&v184[v198];
                while (1)
                {
                  v199 = v199 + *v202;
                  if (v199 > v191 * ((double)(int)m * 0.25))
                    break;
                  ++v198;
                  ++v202;
                  if (!--v201)
                  {
                    v198 = (unint64_t)(PixelBufferSize * v181 * 3.0);
                    goto LABEL_170;
                  }
                }
                a5[m] = *(_DWORD *)v202;
              }
LABEL_170:
              ;
            }
          }
          if (v182)
          {
            v183 = CFArrayCreateMutable(0, v227, MEMORY[0x1E0C9B378]);
            if (v183)
            {
              if (v227)
              {
                v203 = 0;
                v204 = PixelBufferSize * v181 * 0.000000953674316;
                v205 = v190;
                v206 = v204;
                while (1)
                {
                  appended = CMPhotoCFArrayAppendDouble(v183, ((double)(int)v203 + 0.5) * v205 * v182[v203] / v206);
                  if ((_DWORD)appended)
                    break;
                  if (v227 == ++v203)
                  {
                    v186 = 0;
                    goto LABEL_178;
                  }
                }
                v186 = appended;
                v174 = 0;
              }
              else
              {
LABEL_178:
                v174 = v183;
                v183 = 0;
              }
            }
            else
            {
              v174 = 0;
              v186 = 4294950305;
            }
          }
          else
          {
            v174 = 0;
            v183 = 0;
            v186 = 0;
          }
          CVPixelBufferUnlockBaseAddress(v178, 1uLL);
        }
LABEL_182:
        free(v184);
        free(v182);
        if (v183)
          CFRelease(v183);
        v176 = v220;
        v175 = v221;
        v177 = v219;
        if ((_DWORD)v186)
          goto LABEL_193;
        goto LABEL_185;
      }
    }
    v174 = 0;
LABEL_252:
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v186 = 4294950306;
    goto LABEL_182;
  }
  v176 = v220;
  v175 = v221;
  v177 = v219;
LABEL_185:
  if (!v216 || (v208 = CMPhotoApplyMagmaMap(v275, v275), v177 = v219, v176 = v220, v175 = v221, !(_DWORD)v208))
  {
    v208 = CMPhotoScaleAndRotateSessionTransformForSize(0, v275, 1, 1, 1111970369, 0, 0, 1u, v37, v175, v176, v177, v35, v36, v172, v173, 0, 1u, (__CVBuffer **)&cf);
    if (!(_DWORD)v208)
    {
      if (v215)
      {
        *v215 = cf;
        cf = 0;
      }
      if (a7)
      {
        v186 = 0;
        *a7 = v174;
        goto LABEL_195;
      }
      v186 = 0;
LABEL_193:
      if (!v174)
        goto LABEL_195;
      goto LABEL_194;
    }
  }
  v186 = v208;
  if (v174)
LABEL_194:
    CFRelease(v174);
LABEL_195:
  if (cf)
    CFRelease(cf);
  if (v275)
    CFRelease(v275);
  if (v276)
    CFRelease(v276);
  if (v277)
    CFRelease(v277);
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  if (v273)
    CFRelease(v273);
  if (v272)
    CFRelease(v272);
  if (v281)
    CFRelease(v281);
  if (v280)
    CFRelease(v280);
  if (v279)
    CFRelease(v279);
  if (v278)
    CFRelease(v278);
  if (v283)
    CFRelease(v283);
  if (v282)
    CFRelease(v282);
  if (v285)
    CFRelease(v285);
  if (v284)
    CFRelease(v284);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v286)
    CFRelease(v286);
  if (v289)
    CFRelease(v289);
  if (v288)
    CFRelease(v288);
  if (v217)
    CFRelease(v217);
  if (Mutable)
    CFRelease(Mutable);
  return v186;
}

uint64_t _computesRGB2LinearRGB(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t v3;
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  size_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  uint64_t i;
  float v17;
  float v18;
  __CVBuffer *v20;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v25 = 0;
  v26 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v25, &v26);
  v23 = 0;
  v24 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v23, &v24);
  if (v25 != v23 || v26 != v24)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  v3 = 0;
  v20 = a2;
  do
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v3);
    BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, v3);
    v6 = CVPixelBufferGetBytesPerRowOfPlane(a2, v3);
    v22 = v3;
    v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, v3);
    v8 = v26;
    if (v26)
    {
      v9 = v7;
      v10 = 0;
      v11 = v25;
      v12 = 4 * (v6 >> 2);
      v13 = 4 * (BytesPerRowOfPlane >> 2);
      do
      {
        v14 = BaseAddressOfPlane;
        v15 = v9;
        for (i = v11; i; --i)
        {
          v17 = *v14;
          if (*v14 <= 0.04045)
            v18 = v17 / 12.92;
          else
            v18 = powf((float)(v17 + 0.055) / 1.055, 2.4);
          *v15++ = v18;
          ++v14;
        }
        ++v10;
        v9 = (float *)((char *)v9 + v12);
        BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v13);
      }
      while (v10 != v8);
    }
    v3 = v22 + 1;
    a2 = v20;
  }
  while (v22 != 2);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(v20, 0);
  return 0;
}

uint64_t _computesLinearRGB2XYZ(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  float *v7;
  size_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v30 = 0;
  v31 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
  v28 = 0;
  v29 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
  if (v30 != v28 || v31 != v29)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v12 = v31;
  if (v31)
  {
    v13 = 0;
    v14 = v30;
    do
    {
      v15 = BaseAddressOfPlane;
      v16 = v6;
      v17 = v7;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      for (i = v14; i; --i)
      {
        v22 = *v15++;
        v23 = v22;
        v24 = *v16++;
        v25 = v24;
        v26 = *v17++;
        *v18++ = (float)((float)(v25 * 0.35759) + (float)(v23 * 0.41239)) + (float)(v26 * 0.18045);
        *v19++ = (float)((float)(v25 * 0.71518) + (float)(v23 * 0.21264)) + (float)(v26 * 0.07218);
        *v20++ = (float)((float)(v25 * 0.1192) + (float)(v23 * 0.019331)) + (float)(v26 * 0.95037);
      }
      ++v13;
      v11 = (float *)((char *)v11 + v8);
      v10 = (float *)((char *)v10 + v8);
      v9 = (float *)((char *)v9 + v8);
      v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v13 != v12);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t _computesXYZ2YCxCz(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  float *v7;
  size_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v30 = 0;
  v31 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
  v28 = 0;
  v29 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
  if (v30 != v28 || v31 != v29)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v12 = v31;
  if (v31)
  {
    v13 = 0;
    v14 = v30;
    do
    {
      v15 = BaseAddressOfPlane;
      v16 = v6;
      v17 = v7;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      for (i = v14; i; --i)
      {
        v22 = *v15++;
        v23 = v22;
        v24 = *v16++;
        v25 = v24;
        v26 = *v17++;
        *v18++ = (float)(v25 * 116.0) + -16.0;
        *v19++ = (float)((float)(v23 * 1.0522) - v25) * 500.0;
        *v20++ = (float)(v25 + (float)(v26 * -0.91836)) * 200.0;
      }
      ++v13;
      v11 = (float *)((char *)v11 + v8);
      v10 = (float *)((char *)v10 + v8);
      v9 = (float *)((char *)v9 + v8);
      v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v13 != v12);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t convolve(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  __CVBuffer *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int BytesPerRowOfPlane;
  int v12;
  float *BaseAddressOfPlane;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  __CVBuffer *v19;
  int v20;
  int v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v54;
  int v55;
  __CVBuffer *v56;
  __CVBuffer *v57;
  __CVBuffer *pixelBuffer;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990
    || CVPixelBufferGetPixelFormatType(a3) != 1919365990
    || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
  {
    return FigSignalErrorAt();
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(a3, 0);
  v68 = 0;
  v69 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v68, &v69);
  v66 = 0;
  v67 = 0;
  CMPhotoGetPixelBufferCLAP(a3, 0, 0, &v66, &v67);
  v6 = a3;
  v7 = v66;
  v8 = v67;
  if ((int)v66 >= 0)
    v9 = v66;
  else
    v9 = v66 + 1;
  v64 = v9;
  if ((int)v67 >= 0)
    v10 = v67;
  else
    v10 = v67 + 1;
  v61 = v10;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v12 = BytesPerRowOfPlane + 3;
  if (BytesPerRowOfPlane >= 0)
    v12 = BytesPerRowOfPlane;
  v59 = v12;
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v14 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v57 = a1;
  v15 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v55 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v16 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v17 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v56 = a2;
  v18 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v19 = v6;
  pixelBuffer = v6;
  v20 = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
  v21 = v20 + 3;
  if (v20 >= 0)
    v21 = v20;
  v54 = v21;
  v22 = (float *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
  v23 = (float *)CVPixelBufferGetBaseAddressOfPlane(v19, 1uLL);
  v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
  v63 = v69;
  if (v69)
  {
    v25 = 0;
    v26 = v64 >> 1;
    v27 = v61 >> 1;
    v28 = v59 >> 2;
    if (v55 >= 0)
      v29 = v55;
    else
      v29 = v55 + 3;
    v30 = v68;
    v65 = -v27;
    v31 = v69 - 1;
    v62 = -v26;
    if (v26 >= 0)
      v32 = v26;
    else
      v32 = -v26;
    v33 = v26 + v32;
    v34 = v68 - 1;
    if (v27 >= 0)
      v35 = v27;
    else
      v35 = -v27;
    v60 = (uint64_t)v29 >> 2;
    v36 = v33 + 1;
    do
    {
      if (v30)
      {
        v37 = 0;
        v38 = v25 * v60;
        v39 = v62;
        do
        {
          v40 = 0.0;
          v41 = 0.0;
          v42 = 0.0;
          if (v8 >= -1)
          {
            v43 = 0;
            v44 = v65;
            do
            {
              if (v7 >= -1)
              {
                v45 = (v44 + v25) & ~((v44 + (int)v25) >> 31);
                if (v45 >= v31)
                  v45 = v31;
                v46 = v45 * v28;
                v47 = v36;
                v48 = v43;
                v49 = v39;
                do
                {
                  v50 = v49 & ~(v49 >> 31);
                  if (v50 >= v34)
                    v50 = v34;
                  v51 = v50 + v46;
                  v40 = v40 + (float)(v22[v48] * BaseAddressOfPlane[v51]);
                  v41 = v41 + (float)(v23[v48] * v14[v51]);
                  v42 = v42 + (float)(v24[v48] * v15[v51]);
                  ++v49;
                  ++v48;
                  --v47;
                }
                while (v47);
              }
              v43 += v54 >> 2;
            }
            while (v44++ != v35);
          }
          v16[v37 + v38] = v40;
          v17[v37 + v38] = v41;
          v18[v37 + v38] = v42;
          ++v37;
          ++v39;
        }
        while (v37 != v30);
      }
      ++v25;
    }
    while (v25 != v63);
  }
  CVPixelBufferUnlockBaseAddress(v56, 0);
  CVPixelBufferUnlockBaseAddress(v57, 0);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  return 0;
}

uint64_t _computesYCxCz2XYZ(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  size_t v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t i;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v27 = 0;
  v28 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v27, &v28);
  v25 = 0;
  v26 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v25, &v26);
  if (v27 != v25 || v28 != v26)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v7 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v11 = v28;
  if (v28)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      v14 = BaseAddressOfPlane;
      v15 = v6;
      v16 = v8;
      v17 = v9;
      v18 = v10;
      for (i = v13; i; --i)
      {
        v20 = *v14++;
        v21 = v20;
        v22 = *v15++;
        v23 = (float)(v21 + 16.0) / 116.0;
        *v16++ = (float)(v23 + (float)(v22 / 500.0)) * 0.95043;
        *v17++ = v23;
        *v18++ = (float)(v23 + (float)(v21 / -200.0)) * 1.0889;
      }
      ++v12;
      v10 = (float *)((char *)v10 + v7);
      v9 = (float *)((char *)v9 + v7);
      v8 = (float *)((char *)v8 + v7);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v12 != v11);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t _computesXYZ2LinearRGB(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  float *v7;
  size_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v30 = 0;
  v31 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
  v28 = 0;
  v29 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
  if (v30 != v28 || v31 != v29)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v12 = v31;
  if (v31)
  {
    v13 = 0;
    v14 = v30;
    do
    {
      v15 = BaseAddressOfPlane;
      v16 = v6;
      v17 = v7;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      for (i = v14; i; --i)
      {
        v22 = *v15++;
        v23 = v22;
        v24 = *v16++;
        v25 = v24;
        v26 = *v17++;
        *v18++ = (float)((float)(v25 * -1.5374) + (float)(v23 * 3.241)) + (float)(v26 * -0.49862);
        *v19++ = (float)((float)(v25 * 1.8759) + (float)(v23 * -0.96922)) + (float)(v26 * 0.041554);
        *v20++ = (float)((float)(v25 * -0.20401) + (float)(v23 * 0.055639)) + (float)(v26 * 1.0571);
      }
      ++v13;
      v11 = (float *)((char *)v11 + v8);
      v10 = (float *)((char *)v10 + v8);
      v9 = (float *)((char *)v9 + v8);
      v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v13 != v12);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t _computesClamp(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  float *v7;
  size_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v31 = 0;
  v32 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v31, &v32);
  v29 = 0;
  v30 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v29, &v30);
  if (v31 != v29 || v32 != v30)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v12 = v32;
  if (v32)
  {
    v13 = 0;
    v14 = v31;
    do
    {
      v15 = BaseAddressOfPlane;
      v16 = v9;
      v17 = v6;
      v18 = v10;
      v19 = v7;
      v20 = v11;
      for (i = v14; i; --i)
      {
        v22 = *v15++;
        v23 = v22;
        if (v22 > 1.0)
          v23 = 1.0;
        if (v23 < 0.0)
          v23 = 0.0;
        *v16++ = v23;
        v24 = *v17++;
        v25 = v24;
        if (v24 > 1.0)
          v25 = 1.0;
        if (v25 < 0.0)
          v25 = 0.0;
        *v18++ = v25;
        v26 = *v19++;
        v27 = v26;
        if (v26 > 1.0)
          v27 = 1.0;
        if (v27 < 0.0)
          v27 = 0.0;
        *v20++ = v27;
      }
      ++v13;
      v11 = (float *)((char *)v11 + v8);
      v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
      v10 = (float *)((char *)v10 + v8);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      v9 = (float *)((char *)v9 + v8);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v13 != v12);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t _computesXYZ2CIELab(__CVBuffer *a1, __CVBuffer *a2)
{
  float *BaseAddressOfPlane;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t i;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __CVBuffer *pixelBuffer;
  __CVBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t BytesPerRowOfPlane;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35[3];
  float v36[3];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v33 = 0;
  v34 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v33, &v34);
  v31 = 0;
  v32 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v31, &v32);
  if (v33 != v31 || v34 != v32)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v5 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  pixelBuffer = a1;
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v25 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v22 = a2;
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v24 = v34;
  if (v34)
  {
    v10 = v9;
    v11 = 0;
    v23 = v33;
    do
    {
      v29 = v5;
      v30 = BaseAddressOfPlane;
      v27 = v7;
      v28 = v6;
      v12 = v8;
      v13 = v10;
      for (i = v23; i; --i)
      {
        v15 = *BaseAddressOfPlane++;
        v16 = v15;
        v17 = *v5++;
        v36[0] = v16;
        v36[1] = v17;
        v18 = *v6++;
        v36[2] = v18;
        XYZ2CIELab(v36, v35);
        v19 = v35[1];
        *v7++ = v35[0];
        *v12++ = v19;
        *v13++ = v35[2];
      }
      ++v11;
      v10 = (float *)((char *)v10 + v25);
      v8 = (float *)((char *)v8 + v25);
      v7 = (float *)((char *)v27 + v25);
      v6 = (float *)((char *)v28 + BytesPerRowOfPlane);
      v5 = (float *)((char *)v29 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)v30 + BytesPerRowOfPlane);
    }
    while (v11 != v24);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(v22, 0);
  return 0;
}

uint64_t _computesHunt(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v6;
  float *v7;
  size_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v30 = 0;
  v31 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
  v28 = 0;
  v29 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
  if (v30 != v28 || v31 != v29)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v12 = v31;
  if (v31)
  {
    v13 = 0;
    v14 = v30;
    do
    {
      v15 = BaseAddressOfPlane;
      v16 = v6;
      v17 = v7;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      for (i = v14; i; --i)
      {
        v22 = *v15++;
        v23 = v22;
        v24 = *v16++;
        v25 = v24;
        v26 = *v17++;
        *v18++ = v23;
        *v19++ = (float)(v23 * 0.01) * v25;
        *v20++ = (float)(v23 * 0.01) * v26;
      }
      ++v13;
      v11 = (float *)((char *)v11 + v8);
      v10 = (float *)((char *)v10 + v8);
      v9 = (float *)((char *)v9 + v8);
      v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
      v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v13 != v12);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

uint64_t setFeatureFilter(__CVBuffer *a1, int a2, float a3)
{
  __CVBuffer *v5;
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  float *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float *v21;
  float *v22;
  _DWORD *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float *v35;
  float *i;
  float v37;
  float v38;
  float *v40;
  float *v41;
  __CVBuffer *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1;
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990)
    return FigSignalErrorAt();
  v49 = 0;
  v50 = 0;
  CMPhotoGetPixelBufferCLAP(v5, 0, 0, &v49, &v50);
  CVPixelBufferLockBaseAddress(v5, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(v5, 0);
  v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
  v9 = CVPixelBufferGetBaseAddressOfPlane(v5, 2uLL);
  if (v50)
  {
    v10 = v9;
    v42 = v5;
    v11 = 0;
    v12 = a3 * 0.041;
    v13 = v49;
    v47 = v12 * v12;
    v48 = v12 * (float)(v12 + v12);
    v43 = vcvtps_s32_f32((float)(a3 * 0.041) * 3.0);
    v40 = v8;
    v41 = BaseAddressOfPlane;
    v14 = v8;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v44 = v49;
    v45 = v50;
    v46 = BytesPerRowOfPlane;
    do
    {
      if (v13)
      {
        v19 = -v43;
        v20 = (float)(int)(v11 - v43) * (float)(int)(v11 - v43);
        v21 = BaseAddressOfPlane;
        v22 = v14;
        v23 = v10;
        do
        {
          v24 = (float)v19;
          v25 = expf((float)-(float)(v20 + (float)(v24 * v24)) / v48);
          if (a2)
          {
            v26 = (float)((float)((float)(v24 * v24) / v47) + -1.0) * v25;
            v27 = (float)((float)(v20 / v47) + -1.0) * v25;
          }
          else
          {
            v26 = -(float)(v24 * v25);
            v27 = v25 * (float)-(float)(int)(v11 - v43);
          }
          *v21++ = v26;
          *v22++ = v27;
          *v23++ = 0;
          if (v26 <= 0.0)
            v28 = v26;
          else
            v28 = 0.0;
          v18 = v18 - v28;
          if (v26 <= 0.0)
            v26 = -0.0;
          v17 = v17 + v26;
          if (v27 <= 0.0)
            v29 = v27;
          else
            v29 = 0.0;
          v16 = v16 - v29;
          if (v27 <= 0.0)
            v27 = -0.0;
          v15 = v15 + v27;
          ++v19;
          --v13;
        }
        while (v13);
      }
      ++v11;
      v10 = (_DWORD *)((char *)v10 + v46);
      v14 = (float *)((char *)v14 + v46);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v46);
      v13 = v44;
    }
    while (v11 != v45);
    v30 = 0;
    v31 = v49;
    v32 = v41;
    v5 = v42;
    v33 = v40;
    do
    {
      v34 = v31;
      v35 = v32;
      for (i = v33; v34; --v34)
      {
        if (*v35 <= 0.0)
          v37 = v18;
        else
          v37 = v17;
        *v35 = *v35 / v37;
        ++v35;
        if (*i <= 0.0)
          v38 = v16;
        else
          v38 = v15;
        *i = *i / v38;
        ++i;
      }
      ++v30;
      v33 = (float *)((char *)v33 + v46);
      v32 = (float *)((char *)v32 + v46);
    }
    while (v30 != v45);
  }
  return CVPixelBufferUnlockBaseAddress(v5, 0);
}

uint64_t _computesCIELab2Gray(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t BytesPerRowOfPlane;
  float *BaseAddressOfPlane;
  size_t v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t i;
  float v18;
  float v19;
  float v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990 || CVPixelBufferGetPixelFormatType(a2) != 1919365990)
    return FigSignalErrorAt();
  v24 = 0;
  v25 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v24, &v25);
  v22 = 0;
  v23 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v22, &v23);
  if (v24 != v22 || v25 != v23)
    return FigSignalErrorAt();
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  v6 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  v10 = v25;
  if (v25)
  {
    v11 = 0;
    v12 = v24;
    do
    {
      v13 = BaseAddressOfPlane;
      v14 = v7;
      v15 = v8;
      v16 = v9;
      for (i = v12; i; --i)
      {
        v18 = *v13++;
        v19 = (float)(v18 + 16.0) / 116.0;
        *v14 = v19;
        *v15++ = v19;
        v20 = *v14++;
        *v16++ = v20;
      }
      ++v11;
      v9 = (float *)((char *)v9 + v6);
      v8 = (float *)((char *)v8 + v6);
      v7 = (float *)((char *)v7 + v6);
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
    }
    while (v11 != v10);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

float XYZ2CIELab(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;

  v3 = a1[1];
  v4 = *a1 * 1.0522;
  v5 = a1[2];
  if (v4 <= 0.0088565)
    v6 = (float)(v4 * 7.787) + 0.13793;
  else
    v6 = powf(v4, 0.33333);
  v7 = v5 * 0.91836;
  if (v3 <= 0.0088565)
    v8 = (float)(v3 * 7.787) + 0.13793;
  else
    v8 = powf(v3, 0.33333);
  if (v7 <= 0.0088565)
    v9 = (float)(v7 * 7.787) + 0.13793;
  else
    v9 = powf(v7, 0.33333);
  *a2 = (float)(v8 * 116.0) + -16.0;
  a2[1] = (float)(v6 - v8) * 500.0;
  result = (float)(v8 - v9) * 200.0;
  a2[2] = result;
  return result;
}

uint64_t ___poolFLIP_block_invoke(uint64_t a1, float *a2, float *a3)
{
  if (*a2 > *a3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

BOOL CMPhotoExtensionIsPNG(const __CFString *a1)
{
  uint64_t v2;
  CFRange v4;
  CFRange v5;

  if (!a1)
    return 0;
  v4.length = CFStringGetLength(a1);
  v2 = 1;
  v4.location = 0;
  if (CFStringCompareWithOptions(a1, CFSTR("png"), v4, 1uLL))
  {
    v5.length = CFStringGetLength(a1);
    v5.location = 0;
    return CFStringCompareWithOptions(a1, CFSTR("apng"), v5, 1uLL) == kCFCompareEqualTo;
  }
  return v2;
}

uint64_t CMPhotoPixelBufferGetAlphaMode(__CVBuffer *a1)
{
  CFTypeRef v1;
  const void *v2;
  uint64_t v3;

  if (!a1)
    return 2;
  v1 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CB0], 0);
  if (!v1)
    return 2;
  v2 = v1;
  if (FigCFEqual())
    v3 = 1;
  else
    v3 = 2 * (FigCFEqual() == 0);
  CFRelease(v2);
  return v3;
}

uint64_t CMPhotoGetFullRangeForPixelFormat(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = CMPhotoPixelFormatContainsYCbCr(a1);
  if ((_DWORD)result)
  {
    if (CMPhotoPixelFormatIsPacked(a1) || CMPhotoPixelFormatIsCompressed(a1))
      return 0;
    result = CMPhotoPixelFormatIsFullRange(a1);
    if ((_DWORD)result)
      return a1;
    if ((int)a1 > 1953903151)
    {
      if ((int)a1 > 2016686639)
      {
        if ((_DWORD)a1 == 2016686640)
          return 2019963440;
        if ((_DWORD)a1 != 2016686642)
        {
          if ((_DWORD)a1 != 2016687156)
            return result;
          v3 = 2019963440;
          return (v3 + 516);
        }
        v4 = 2019963440;
      }
      else
      {
        if ((_DWORD)a1 == 1953903152)
          return 1952854576;
        if ((_DWORD)a1 != 1953903154)
        {
          if ((_DWORD)a1 != 1953903668)
            return result;
          v3 = 1952854576;
          return (v3 + 516);
        }
        v4 = 1952854576;
      }
    }
    else
    {
      if ((int)a1 <= 1937125935)
      {
        switch((_DWORD)a1)
        {
          case 0x34323076:
            return 875704422;
          case 0x34323276:
            return 875704934;
          case 0x34343476:
            return 875836518;
        }
        return result;
      }
      if ((_DWORD)a1 == 1937125936)
        return 1936077360;
      if ((_DWORD)a1 != 1937125938)
      {
        if ((_DWORD)a1 != 1937126452)
          return result;
        v3 = 1936077360;
        return (v3 + 516);
      }
      v4 = 1936077360;
    }
    return v4 | 2u;
  }
  return result;
}

uint64_t CMPhotoGetVideoRangeForPixelFormat(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = CMPhotoPixelFormatContainsYCbCr(a1);
  if ((_DWORD)result)
  {
    if (CMPhotoPixelFormatIsPacked(a1) || CMPhotoPixelFormatIsCompressed(a1))
      return 0;
    if (!CMPhotoPixelFormatIsFullRange(a1))
      return a1;
    result = 0;
    if ((int)a1 > 1952854575)
    {
      if ((int)a1 > 2019963439)
      {
        if ((_DWORD)a1 == 2019963440)
          return 2016686640;
        if ((_DWORD)a1 != 2019963442)
        {
          if ((_DWORD)a1 != 2019963956)
            return result;
          v3 = 2016686640;
          return (v3 + 516);
        }
        v4 = 2016686640;
      }
      else
      {
        if ((_DWORD)a1 == 1952854576)
          return 1953903152;
        if ((_DWORD)a1 != 1952854578)
        {
          if ((_DWORD)a1 != 1952855092)
            return result;
          v3 = 1953903152;
          return (v3 + 516);
        }
        v4 = 1953903152;
      }
    }
    else
    {
      if ((int)a1 <= 1936077359)
      {
        switch((_DWORD)a1)
        {
          case 0x34323066:
            return 875704438;
          case 0x34323266:
            return 875704950;
          case 0x34343466:
            return 875836534;
        }
        return result;
      }
      if ((_DWORD)a1 == 1936077360)
        return 1937125936;
      if ((_DWORD)a1 != 1936077362)
      {
        if ((_DWORD)a1 != 1936077876)
          return result;
        v3 = 1937125936;
        return (v3 + 516);
      }
      v4 = 1937125936;
    }
    return v4 | 2u;
  }
  return result;
}

uint64_t CMPhotoGetFixedPointDescriptionFromPixelFormat(int a1, int *a2, int *a3, char *a4)
{
  uint64_t result;
  int v6;
  char v7;
  int v8;

  result = 4294950301;
  if (a1 <= 1278226735)
  {
    if (a1 != 825306677)
    {
      if (a1 == 825437747)
      {
        v7 = 0;
        v8 = 13;
        v6 = 3;
        if (!a2)
          goto LABEL_20;
      }
      else
      {
        if (a1 != 1278226488)
          return result;
        v6 = 0;
        v7 = 0;
        v8 = 8;
        if (!a2)
          goto LABEL_20;
      }
      goto LABEL_19;
    }
    v7 = 0;
    v8 = 11;
  }
  else
  {
    if (a1 <= 1278226741)
    {
      if (a1 == 1278226736)
      {
        v6 = 0;
        v7 = 0;
        v8 = 10;
        if (!a2)
          goto LABEL_20;
      }
      else
      {
        if (a1 != 1278226738)
          return result;
        v6 = 0;
        v7 = 0;
        v8 = 12;
        if (!a2)
          goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (a1 == 1278226742)
    {
      v6 = 0;
      v7 = 0;
      v8 = 16;
      if (!a2)
        goto LABEL_20;
      goto LABEL_19;
    }
    if (a1 != 1932996149)
      return result;
    v7 = 1;
    v8 = 7;
  }
  v6 = 5;
  if (a2)
LABEL_19:
    *a2 = v6;
LABEL_20:
  if (a3)
    *a3 = v8;
  result = 0;
  if (a4)
    *a4 = v7;
  return result;
}

CGColorSpaceRef CMPhotoCreateColorSpaceFromTriplets(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  CFStringRef *v7;
  BOOL v9;
  _BOOL4 v10;

  v6 = FigCFEqual();
  if (FigCFEqual() && FigCFEqual()
    || FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D908];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9E8];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (v6 && (FigCFEqual() || FigCFEqual()))
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9DA10];
    return CGColorSpaceCreateWithName(*v7);
  }
  if ((FigCFEqual() || FigCFEqual()) && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9A0];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9F8];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9E0];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9D8];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D918];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D910];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9C8];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9C0];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual())
  {
    v7 = (CFStringRef *)MEMORY[0x1E0C9D9F0];
    if (!a4)
      v7 = (CFStringRef *)MEMORY[0x1E0C9DA00];
    return CGColorSpaceCreateWithName(*v7);
  }
  if (FigCFEqual())
  {
    v9 = a1 && v6 == 0;
    v10 = !v9;
    if (a4 && v10)
    {
      v7 = (CFStringRef *)MEMORY[0x1E0C9D978];
      return CGColorSpaceCreateWithName(*v7);
    }
  }
  return 0;
}

const __CFDictionary *CMPhotoGetMatrixFromPixelBufferAttachments(const __CFDictionary *result)
{
  const void *Value;

  if (result)
  {
    Value = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA8EE8]);
    if (FigCFEqual())
      return (const __CFDictionary *)*MEMORY[0x1E0CA8F10];
    else
      return (const __CFDictionary *)Value;
  }
  return result;
}

void CMPhotoPropagateColorPropertiesFromSourceBuffer(CVBufferRef buffer, __CVBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  CFTypeRef v9;
  const void *v10;
  CVAttachmentMode attachmentMode;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  if (buffer && a2)
  {
    v4 = 0;
    v5 = *MEMORY[0x1E0CA8E40];
    v12[0] = *MEMORY[0x1E0CA8CD8];
    v12[1] = v5;
    v6 = *MEMORY[0x1E0CA8E98];
    v12[2] = *MEMORY[0x1E0CA8D68];
    v12[3] = v6;
    v7 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
    v12[4] = *MEMORY[0x1E0CA8EE8];
    do
    {
      v8 = (const __CFString *)v12[v4];
      attachmentMode = kCVAttachmentMode_ShouldNotPropagate;
      v9 = CVBufferCopyAttachment(buffer, v8, &attachmentMode);
      if (v9)
      {
        v10 = v9;
        if (v8 == v7)
          CMPhotoAddMatrixToBufferIfAllowed(a2, v9);
        else
          CVBufferSetAttachment(a2, v8, v9, attachmentMode);
        CFRelease(v10);
      }
      ++v4;
    }
    while (v4 != 5);
  }
}

void CMPhotoAddMatrixToBufferIfAllowed(__CVBuffer *a1, const void *a2)
{
  int PixelFormatType;
  int v5;
  _BOOL4 v6;
  _BOOL4 v8;
  int v9;
  unsigned __int16 v10;

  if (!a1 || !a2)
    return;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CMPhotoPixelFormatContainsRGB(PixelFormatType);
  v6 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
    && PixelFormatType != 1717855600
    && PixelFormatType != 1751410032)
  {
LABEL_11:
    v6 = PixelFormatType == 1751411059 || PixelFormatType == 1717856627;
  }
LABEL_17:
  v8 = 1;
  if (PixelFormatType != 825306677 && PixelFormatType != 825437747)
    v8 = PixelFormatType == 1932996149;
  if (PixelFormatType <= 1652056887)
  {
    if (PixelFormatType > 1650946097)
    {
      if (PixelFormatType <= 1651847471)
      {
        if (PixelFormatType == 1650946098)
          return;
        v9 = 1651519798;
      }
      else
      {
        if (PixelFormatType == 1651847472 || PixelFormatType == 1651925816)
          return;
        v9 = 1651926376;
      }
    }
    else if (PixelFormatType <= 1650942775)
    {
      if (PixelFormatType == 1647392369)
        return;
      v9 = 1647719528;
    }
    else
    {
      if (PixelFormatType == 1650942776 || PixelFormatType == 1650943796)
        return;
      v9 = 1650946096;
    }
    goto LABEL_48;
  }
  if (PixelFormatType > 1735549751)
  {
    if (PixelFormatType > 1919378231)
    {
      if (PixelFormatType == 1919378232 || PixelFormatType == 1919379252)
        return;
      v9 = 1919381552;
      goto LABEL_48;
    }
    if (PixelFormatType == 1735549752)
      return;
    v10 = 28720;
  }
  else
  {
    if (PixelFormatType <= 1734504495)
    {
      if (PixelFormatType == 1652056888)
        return;
      v9 = 1734501176;
      goto LABEL_48;
    }
    if (PixelFormatType == 1734504496 || PixelFormatType == 1734505012)
      return;
    v10 = 25140;
  }
  v9 = v10 | 0x67720000;
LABEL_48:
  if (PixelFormatType != v9)
  {
    if (v5)
      v6 = 1;
    if (!v6 && !v8)
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], a2, kCVAttachmentMode_ShouldPropagate);
  }
}

void CMPhotoPropagateChromaLocationFromSourceBuffer(CVBufferRef buffer, __CVBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  CFTypeRef v7;
  const void *v8;
  CVAttachmentMode attachmentMode;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  if (buffer && a2)
  {
    v4 = 0;
    v5 = *MEMORY[0x1E0CA8CE0];
    v10[0] = *MEMORY[0x1E0CA8CE8];
    v10[1] = v5;
    v10[2] = *MEMORY[0x1E0CA8DC8];
    do
    {
      v6 = (const __CFString *)v10[v4];
      attachmentMode = kCVAttachmentMode_ShouldNotPropagate;
      v7 = CVBufferCopyAttachment(buffer, v6, &attachmentMode);
      if (v7)
      {
        v8 = v7;
        CVBufferSetAttachment(a2, v6, v7, attachmentMode);
        CFRelease(v8);
      }
      ++v4;
    }
    while (v4 != 3);
  }
}

void CMPhotoRemoveColorPropertiesFromBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E40]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  }
}

void CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E40]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  }
}

void CMPhotoRemoveChromaInformationFromBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CE8]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CE0]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8DC8]);
  }
}

void CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  if (a1)
  {
    if (a2)
    {
      CMPhotoRemoveColorPropertiesFromBuffer(a2);
      CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, a2);
    }
  }
}

void CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(__CVBuffer *a1, CVBufferRef buffer)
{
  int IsOpaque;
  int AlphaMode;

  if (a1)
  {
    if (buffer)
    {
      CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CA8]);
      CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CB0]);
      IsOpaque = CMPhotoPixelBufferIsOpaque(a1, 1);
      AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
      CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(buffer, IsOpaque, AlphaMode);
    }
  }
}

uint64_t CMPhotoGetMatchingFullPrecisionPixelFormat(int a1)
{
  uint64_t result;

  if (a1 > 1751410031)
  {
    result = 1717855600;
    if (a1 != 1751411059)
    {
      if (a1 == 1751410032)
        return result;
      return 0;
    }
    return 1717856627;
  }
  else
  {
    if (a1 != 16)
    {
      if (a1 == 1278226536)
        return 1278226534;
      return 0;
    }
    return 1111970369;
  }
}

uint64_t CMPhotoFormatFourCharCodeString(unsigned int a1)
{
  return bswap32(a1);
}

double CMPhotoGetSurfaceSize(__IOSurface *a1)
{
  double Width;

  if (!a1)
    return 0.0;
  Width = (double)IOSurfaceGetWidth(a1);
  IOSurfaceGetHeight(a1);
  return Width;
}

uint64_t CMPhotoCreatePixelbufferFromAuxiliaryDataDictionary(const __CFDictionary *a1, int a2, CVPixelBufferRef *a3)
{
  const __CFData *Value;
  const __CFData *v7;
  CFTypeID v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  BOOL v12;
  BOOL v13;
  const UInt8 *BytePtr;
  UInt8 *v15;
  unint64_t Length;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  char *BaseAddress;
  char *v22;
  size_t i;
  uint64_t v24;
  OSType pixelFormatType;
  size_t bytesPerRow;
  size_t v28;
  size_t v29;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = 0;
  Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CBC6C0]);
  if (!Value)
    goto LABEL_32;
  v7 = Value;
  v8 = CFGetTypeID(Value);
  if (v8 != CFDataGetTypeID())
    goto LABEL_32;
  v9 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CBC6C8]);
  if (!v9)
    goto LABEL_32;
  v10 = v9;
  v11 = CFGetTypeID(v9);
  if (v11 != CFDictionaryGetTypeID())
    goto LABEL_32;
  v28 = 0;
  v29 = 0;
  bytesPerRow = 0;
  pixelFormatType = 0;
  v12 = !CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E0CBD128], &v29) || v29 == 0;
  if (v12
    || (CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E0CBCEA8], &v28)
      ? (v13 = v28 == 0)
      : (v13 = 1),
        v13
     || !CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E0CBC888], &bytesPerRow)
     || !bytesPerRow
     || !CMPhotoCFDictionaryGetInt32IfPresent(v10, (const void *)*MEMORY[0x1E0CBD030], &pixelFormatType)
     || (BytePtr = CFDataGetBytePtr(v7)) == 0
     || (v15 = (UInt8 *)BytePtr, Length = CFDataGetLength(v7), Length < bytesPerRow * v28)))
  {
LABEL_32:
    v17 = FigSignalErrorAt();
    goto LABEL_33;
  }
  if (a2)
  {
    if (!CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), pixelFormatType, v29, v28, 1, 0, 0, 1, 64, 0, &pixelBuffer))
    {
      v17 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if ((_DWORD)v17)
        goto LABEL_33;
      v18 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      v19 = v18;
      if (bytesPerRow >= v18)
        v20 = v18;
      else
        v20 = bytesPerRow;
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      if (v28)
      {
        v22 = BaseAddress;
        for (i = 0; i < v28; ++i)
        {
          memcpy(v22, v15, v20);
          v22 += v19;
          v15 += bytesPerRow;
        }
      }
      v17 = CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      if ((_DWORD)v17)
        goto LABEL_33;
LABEL_30:
      v24 = 0;
      *a3 = pixelBuffer;
      return v24;
    }
    goto LABEL_32;
  }
  CFRetain(v7);
  v17 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v29, v28, pixelFormatType, v15, bytesPerRow, (CVPixelBufferReleaseBytesCallback)_auxDataPixelBufferReleaseCallback, v7, 0, &pixelBuffer);
  if (!(_DWORD)v17)
    goto LABEL_30;
LABEL_33:
  v24 = v17;
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  return v24;
}

void _auxDataPixelBufferReleaseCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CMPhotoCreateAuxiliaryDataDictionaryFromPixelbuffer(__CVBuffer *a1, __CFData **a2, __CFDictionary **a3)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  OSType PixelFormatType;
  const __CFAllocator *v10;
  CFMutableDataRef Mutable;
  __CFData *v12;
  uint64_t v13;
  const UInt8 *BaseAddress;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    return 4294950306;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], BytesPerRow * Height);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  v13 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v13
    || (BaseAddress = (const UInt8 *)CVPixelBufferGetBaseAddress(a1),
        CFDataAppendBytes(v12, BaseAddress, BytesPerRow * Height),
        v13 = CVPixelBufferUnlockBaseAddress(a1, 1uLL),
        (_DWORD)v13))
  {
    v18 = v13;
    v16 = 0;
  }
  else
  {
    v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v16 = v15;
    if (v15)
    {
      v17 = CMPhotoCFDictionarySetSize(v15, *MEMORY[0x1E0CBD128], Width);
      if ((_DWORD)v17
        || (v17 = CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E0CBCEA8], Height), (_DWORD)v17)
        || (v17 = CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E0CBC888], BytesPerRow), (_DWORD)v17)
        || (v17 = CMPhotoCFDictionarySetInt32(v16, (const void *)*MEMORY[0x1E0CBD030], PixelFormatType), (_DWORD)v17))
      {
        v18 = v17;
      }
      else
      {
        if (a2)
        {
          *a2 = v12;
          v12 = 0;
        }
        if (a3)
        {
          *a3 = v16;
          v16 = 0;
        }
        v18 = 0;
        if (!v12)
          goto LABEL_16;
      }
    }
    else
    {
      v18 = 4294950305;
    }
  }
  CFRelease(v12);
LABEL_16:
  if (v16)
    CFRelease(v16);
  return v18;
}

uint64_t CMPhotoPixelBufferCopyCropRectToOffset(__CVBuffer *a1, int a2, uint64_t *a3, __CVBuffer *a4, int a5, unint64_t a6, uint64_t a7, int a8)
{
  __CVBuffer *v8;
  uint64_t PixelFormatType;
  uint64_t v16;
  uint64_t v17;
  uint64_t BitDepthForPixelFormat;
  int ChromaSubsamplingFromPixelFormat;
  double Width;
  size_t Height;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t IsSubsampled;
  int v27;
  int v28;
  char *v29;
  size_t BytesPerRow;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *BaseAddressOfPlane;
  char *v43;
  size_t BytesPerRowOfPlane;
  size_t v45;
  uint64_t v46;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  char *v54;
  char *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  char *v59;
  char *v60;
  size_t v61;
  uint64_t v62;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  CVPixelBufferRef pixelBuffer;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *BaseAddress;
  uint64_t BytesPerPixelForPixelFormat;
  __int16 v81;
  _OWORD v82[3];

  if (!a1)
    return FigSignalErrorAt();
  v8 = a4;
  if (!a4)
    return FigSignalErrorAt();
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v16 = CVPixelBufferGetPixelFormatType(v8);
  v17 = v16;
  if (a8)
  {
    if ((_DWORD)PixelFormatType != (_DWORD)v16)
    {
      BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
      if (BitDepthForPixelFormat != CMPhotoGetBitDepthForPixelFormat(v17))
        return FigSignalErrorAt();
      if (!CMPhotoPixelFormatContainsYCbCr(PixelFormatType))
        return FigSignalErrorAt();
      if (!CMPhotoPixelFormatContainsYCbCr(v17))
        return FigSignalErrorAt();
      ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(PixelFormatType);
      if (ChromaSubsamplingFromPixelFormat != CMPhotoGetChromaSubsamplingFromPixelFormat(v17))
        return FigSignalErrorAt();
    }
  }
  else if ((_DWORD)PixelFormatType != (_DWORD)v16)
  {
    return FigSignalErrorAt();
  }
  Width = (double)CVPixelBufferGetWidth(v8);
  Height = CVPixelBufferGetHeight(v8);
  if (a3[2] <= (unint64_t)Width - a6 && a3[3] <= (unint64_t)(double)Height - a7)
  {
    v22 = *((_OWORD *)a3 + 1);
    v82[0] = *(_OWORD *)a3;
    v82[1] = v22;
    if (CMPhotoPixelBufferMemcpySupportedForBuffer(a1, v82, a6, a7))
    {
      if (a2)
      {
        v23 = CVPixelBufferLockBaseAddress(a1, 1uLL);
        if ((_DWORD)v23)
          return v23;
      }
      if (a5)
      {
        v24 = CVPixelBufferLockBaseAddress(v8, 0);
        if ((_DWORD)v24)
        {
          v62 = v24;
          a5 = 0;
          goto LABEL_63;
        }
        a5 = 1;
      }
      v25 = *a3;
      v71 = a3[1];
      BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
      v81 = 0;
      IsSubsampled = CMPhotoPixelFormatIsSubsampled(PixelFormatType, (_BYTE *)&v81 + 1, &v81, 0, 0);
      if ((_DWORD)IsSubsampled)
      {
        v62 = IsSubsampled;
        goto LABEL_63;
      }
      v65 = a5;
      v27 = HIBYTE(v81);
      v28 = v81;
      pixelBuffer = v8;
      if (CVPixelBufferGetPlaneCount(a1) < 2)
      {
        v68 = a7;
        v64 = a2;
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        v29 = (char *)CVPixelBufferGetBaseAddress(v8);
        BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        v31 = CVPixelBufferGetBytesPerRow(v8);
        v32 = a3[3];
        if (v32 >= CVPixelBufferGetHeight(a1))
          v33 = CVPixelBufferGetHeight(a1);
        else
          v33 = a3[3];
        v57 = a3[2];
        if (v57 >= CVPixelBufferGetWidth(a1))
        {
          v58 = CVPixelBufferGetWidth(a1);
          if (v33)
          {
LABEL_57:
            v59 = &BaseAddress[BytesPerPixelForPixelFormat * v25 + BytesPerRow * v71];
            v60 = &v29[BytesPerPixelForPixelFormat * a6 + v31 * v68];
            v61 = v58 * BytesPerPixelForPixelFormat;
            do
            {
              memcpy(v60, v59, v61);
              v59 += BytesPerRow;
              v60 += v31;
              --v33;
            }
            while (v33);
            v62 = 0;
            v8 = pixelBuffer;
            goto LABEL_62;
          }
        }
        else
        {
          v58 = a3[2];
          if (v33)
            goto LABEL_57;
        }
LABEL_61:
        v62 = 0;
LABEL_62:
        a2 = v64;
        a5 = v65;
LABEL_63:
        if (a2)
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
        if (a5)
          CVPixelBufferUnlockBaseAddress(v8, 0);
        return v62;
      }
      if (!CVPixelBufferGetPlaneCount(a1))
      {
        v62 = 0;
        a5 = v65;
        goto LABEL_63;
      }
      v64 = a2;
      v34 = 0;
      v35 = v28 != 0;
      v36 = v71;
      if (v28)
        v36 = v71 + 1;
      v69 = a7;
      if (v28)
        v37 = a7 + 1;
      else
        v37 = a7;
      v38 = v27 != 0;
      if (v27)
        v39 = v25 + 1;
      else
        v39 = v25;
      v40 = v39 >> v38;
      if (v27)
        v41 = a6 + 1;
      else
        v41 = a6;
      v76 = v27 != 0;
      v77 = v28 != 0;
      v75 = 2 * BytesPerPixelForPixelFormat * v40;
      v73 = v36 >> v35;
      v74 = 2 * BytesPerPixelForPixelFormat * (v41 >> v38);
      v72 = v37 >> v35;
      v66 = BytesPerPixelForPixelFormat * a6;
      v67 = BytesPerPixelForPixelFormat * v25;
      while (1)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v34);
        v43 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, v34);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v34);
        v45 = CVPixelBufferGetBytesPerRowOfPlane(v8, v34);
        if (v34)
        {
          v46 = a3[2];
          HeightOfPlane = (unint64_t)(v77 + a3[3]) >> v77;
          if (HeightOfPlane >= CVPixelBufferGetHeightOfPlane(a1, v34))
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v34);
          WidthOfPlane = (unint64_t)(v76 + v46) >> v76;
          if (WidthOfPlane >= CVPixelBufferGetWidthOfPlane(a1, v34))
            WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v34);
          v49 = v75 + BytesPerRowOfPlane * v73;
          v50 = 2 * WidthOfPlane;
          v51 = v74 + v45 * v72;
          if (!HeightOfPlane)
            goto LABEL_52;
        }
        else
        {
          v52 = a3[3];
          if (v52 >= CVPixelBufferGetHeightOfPlane(a1, 0))
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
          else
            HeightOfPlane = a3[3];
          v49 = v67 + BytesPerRowOfPlane * v71;
          v53 = a3[2];
          v51 = v66 + v45 * v69;
          if (v53 >= CVPixelBufferGetWidthOfPlane(a1, 0))
            v50 = CVPixelBufferGetWidthOfPlane(a1, 0);
          else
            v50 = a3[2];
          v8 = pixelBuffer;
          if (!HeightOfPlane)
            goto LABEL_52;
        }
        v54 = &BaseAddressOfPlane[v49];
        v55 = &v43[v51];
        v56 = v50 * BytesPerPixelForPixelFormat;
        do
        {
          memcpy(v55, v54, v56);
          v54 += BytesPerRowOfPlane;
          v55 += v45;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
LABEL_52:
        if (CVPixelBufferGetPlaneCount(a1) <= ++v34)
          goto LABEL_61;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateCVPixelBufferNotBackedByIOSurface(uint64_t a1, OSType a2, size_t a3, size_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, CVPixelBufferRef *a9)
{
  __CFDictionary *MutableCopy;
  const __CFDictionary *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a9)
    return 4294950306;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v16 = MutableCopy;
  if (a5 <= 1)
    v17 = 1;
  else
    v17 = a5;
  if (a6 <= 1)
    v18 = 1;
  else
    v18 = a6;
  v19 = v17 + a3 + ~((a3 - 1) % v17);
  v20 = v18 + a4 + ~((a4 - 1) % v18);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0]);
  if (a7 || v19 != a3 || v20 != a4)
  {
    v27 = 0;
    v28 = 0;
    v21 = *MEMORY[0x1E0CA8FB8];
    CMPhotoCFDictionaryGetSizeIfPresent(v16, (const void *)*MEMORY[0x1E0CA8FB8], &v28);
    v22 = *MEMORY[0x1E0CA8FA0];
    CMPhotoCFDictionaryGetSizeIfPresent(v16, (const void *)*MEMORY[0x1E0CA8FA0], &v27);
    v23 = v28 <= v19 - a3 ? v19 - a3 : v28;
    v24 = v27 <= v20 - a4 ? v20 - a4 : v27;
    CMPhotoCFDictionarySetSize(v16, v21, v23);
    CMPhotoCFDictionarySetSize(v16, v22, v24);
    if (a7)
      CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E0CA8F68], a7);
  }
  v25 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, a4, a2, v16, &pixelBufferOut);
  if ((_DWORD)v25)
  {
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
  }
  else
  {
    *a9 = pixelBufferOut;
    pixelBufferOut = 0;
  }
  CFRelease(v16);
  return v25;
}

uint64_t CMPhotoCreateCGImageWithSurface(const __CFAllocator *a1, __IOSurface *a2, int a3, CGImageRef *a4)
{
  uint64_t PixelBufferWithSurface;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(a1, a2, 0, (CVPixelBufferRef *)&cf);
  if (!(_DWORD)PixelBufferWithSurface)
    PixelBufferWithSurface = CMPhotoCreateCGImageWithPixelBuffer(a1, (CVPixelBufferRef)cf, a3, a4);
  v8 = PixelBufferWithSurface;
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t CMPhotoCreateFormatDescriptionForHEIFWriter(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, int a3, double a4, double a5, double a6, double a7, uint64_t a8, int a9, CMVideoFormatDescriptionRef *a10, const void *a11)
{
  double v17;
  double v18;
  double v22;
  double v23;
  uint64_t v24;
  const __CFDictionary *Extensions;
  __CFDictionary *MutableCopy;
  CMVideoFormatDescriptionRef *v27;
  uint64_t PixelFormatType;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  CFTypeRef v32;
  const __CFString *v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CMVideoFormatDescriptionRef *v36;
  BOOL v37;
  int v38;
  CMVideoFormatDescriptionRef *v39;
  int HasAttachment;
  int v42;
  BOOL v43;
  int v44;
  char v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  uint64_t v49;
  CMVideoFormatDescriptionRef *v50;
  CFTypeRef v51;
  char v52;
  uint64_t v53;
  int v54;
  CGColorSpace *v55;
  int v56;
  char v57;
  CFDataRef v58;
  CFDataRef v59;
  const __CFBoolean *PixelBufferDescriptionKey;
  unsigned int v61;
  const __CFBoolean *v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  char v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t PixelBufferCLAPDictionaryFromRect;
  CMVideoCodecType MediaSubType;
  CGColorSpaceRef v73;
  void *v74;
  const __CFString *v75;
  const __CFString *key;
  char v77;
  const __CFAllocator *v78;
  CFTypeRef cf;
  const __CFString *cfa;
  int value;
  void *valuea;
  CFTypeRef v83;
  CFTypeRef v84;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMVideoFormatDescriptionRef v86;
  void *v87;
  void *v88;
  void *v89;
  CGColorSpaceRef space;

  formatDescriptionOut = 0;
  v86 = 0;
  v84 = 0;
  if (!a10)
  {
    MutableCopy = 0;
    v49 = 0;
    goto LABEL_143;
  }
  v17 = a5;
  v18 = a4;
  if (a4 == *MEMORY[0x1E0C9D820] && a5 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    CMPhotoGetPixelBufferCLAPAsRect(imageBuffer);
    v18 = v22;
    v17 = v23;
  }
  v24 = CMVideoFormatDescriptionCreateForImageBuffer(allocator, imageBuffer, &formatDescriptionOut);
  if ((_DWORD)v24)
  {
    v49 = v24;
    MutableCopy = 0;
    goto LABEL_143;
  }
  Extensions = CMFormatDescriptionGetExtensions(formatDescriptionOut);
  MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, Extensions);
  if (!MutableCopy)
  {
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!MutableCopy)
    {
      v49 = 4294950305;
      goto LABEL_143;
    }
  }
  space = 0;
  if (!imageBuffer)
  {
    v49 = 4294950306;
    goto LABEL_143;
  }
  value = a9;
  cf = a11;
  v27 = a10;
  PixelFormatType = CVPixelBufferGetPixelFormatType(imageBuffer);
  v74 = (void *)*MEMORY[0x1E0CA2210];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA2210]);
  v29 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D68]);
  v30 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8E98]);
  v31 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8EE8]);
  if (!a3)
  {
    key = v29;
    v32 = CVBufferCopyAttachment(imageBuffer, v29, 0);
    v33 = v30;
    v34 = v32;
    v75 = v33;
    v83 = CVBufferCopyAttachment(imageBuffer, v33, 0);
    v35 = CVBufferCopyAttachment(imageBuffer, v31, 0);
    v36 = v27;
    if (!v35)
    {
      if (cf)
        v35 = CFRetain(cf);
      else
        v35 = 0;
    }
    v78 = allocator;
    cfa = v31;
    v37 = 1;
    if ((int)PixelFormatType <= 1278226735)
    {
      v39 = v27;
      v38 = value;
      if ((PixelFormatType - 1278226488) <= 0x30
        && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
      {
        goto LABEL_32;
      }
    }
    else
    {
      v38 = value;
      if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
      {
        v39 = v36;
        goto LABEL_32;
      }
      v39 = v36;
      if ((_DWORD)PixelFormatType == 1717855600 || (_DWORD)PixelFormatType == 1751410032)
        goto LABEL_32;
    }
    v37 = (_DWORD)PixelFormatType == 1751411059 || (_DWORD)PixelFormatType == 1717856627;
LABEL_32:
    HasAttachment = CVBufferHasAttachment(imageBuffer, (CFStringRef)*MEMORY[0x1E0CA8CD8]);
    v42 = CVBufferHasAttachment(imageBuffer, (CFStringRef)*MEMORY[0x1E0CA8E40]);
    valuea = (void *)v34;
    if (v34)
      v43 = v83 == 0;
    else
      v43 = 1;
    v44 = !v43;
    if (v43)
    {
      v77 = 0;
    }
    else
    {
      if (v35)
        v45 = 1;
      else
        v45 = v37;
      v77 = v45;
    }
    if ((v38 & 0xFFFFFFFD) == 1 && v83 && (FigCFEqual() || FigCFEqual()))
    {
      v46 = FigSignalErrorAt();
      v48 = valuea;
      v47 = v83;
      v49 = v46;
      v50 = v39;
      allocator = v78;
      v51 = v35;
LABEL_112:
      CFRelease(v47);
LABEL_113:
      if (v51)
        CFRelease(v51);
      if (v48)
        CFRelease(v48);
      if ((_DWORD)v49)
        goto LABEL_143;
      goto LABEL_118;
    }
    v52 = v77 ^ 1;
    if (v38 != 2)
      v52 = 1;
    if ((v52 & 1) == 0)
    {
      v48 = valuea;
      CFDictionarySetValue(MutableCopy, key, valuea);
      CFDictionarySetValue(MutableCopy, v75, v83);
      v51 = v35;
      FigCFDictionarySetValue();
      v49 = 0;
LABEL_53:
      v50 = v39;
      allocator = v78;
      goto LABEL_111;
    }
    v53 = CMPhotoCreateColorSpaceFromPixelBuffer(imageBuffer, &space, 1, 0);
    if ((_DWORD)v53)
    {
      v49 = v53;
      v50 = v39;
      allocator = v78;
      v48 = valuea;
      v51 = v35;
      v55 = space;
      if (space)
        goto LABEL_110;
    }
    else
    {
      if (v42)
        v54 = 1;
      else
        v54 = v44;
      if (HasAttachment)
        v54 = 1;
      if (v54 != 1 || space)
      {
        v48 = valuea;
        v51 = v35;
        v55 = space;
        v73 = space;
        if (!space)
        {
          v55 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
          space = v55;
          if (!v55)
          {
            v49 = 4294950305;
            goto LABEL_53;
          }
        }
        CGColorSpaceGetName(v55);
        v50 = v39;
        if (v38 == 1)
        {
          v57 = 0;
          v56 = 1;
          allocator = v78;
        }
        else
        {
          allocator = v78;
          if (v38 == 2)
            goto LABEL_82;
          if (v38 == 3)
          {
            v56 = 0;
            v57 = 1;
          }
          else
          {
            if (FigCFEqual())
            {
              if (!CMPhotoPixelFormatIsFullRange(PixelFormatType) && !v51)
              {
                if (*MEMORY[0x1E0CA8F18])
                  v51 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8F18]);
                else
                  v51 = 0;
              }
              _setVUITripletsIfMatching(v55, MutableCopy, PixelFormatType, valuea, v83);
              if (!v73)
                goto LABEL_109;
              if (FigCFEqual())
              {
                FigCFDictionarySetValue();
LABEL_109:
                v49 = 0;
LABEL_110:
                CFRelease(v55);
                goto LABEL_111;
              }
LABEL_148:
              v49 = FigSignalErrorAt();
              goto LABEL_110;
            }
            if (!FigCFEqual()
              && !FigCFEqual()
              && !FigCFEqual()
              && (FigCFEqual()
               || FigCFEqual()
               || FigCFEqual()
               || FigCFEqual()))
            {
LABEL_82:
              PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(imageBuffer, (const void *)*MEMORY[0x1E0CA9180]);
              v61 = CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
              v62 = (const __CFBoolean *)_getPixelBufferDescriptionKey(imageBuffer, (const void *)*MEMORY[0x1E0CA9178]);
              v63 = CMPhotoCFBooleanGetValue(v62);
              v64 = v63;
              if ((v77 & 1) != 0
                || v48 && v61 && v83
                || (v63 ? (v65 = v83 == 0) : (v65 = 1), v65 ? (v66 = 0) : (v66 = 1), v73 || (v66 & 1) != 0))
              {
                v88 = 0;
                v89 = 0;
                v87 = 0;
                if (!CMPhotoGetTripletsForColorSpace(v55, PixelFormatType, &v89, &v88, &v87))
                {
                  v67 = (void *)v48;
                  if (v48 || (v67 = v89) != 0)
                    CFDictionarySetValue(MutableCopy, key, v67);
                  v68 = (void *)v83;
                  if (v83 || (v68 = v88) != 0)
                    CFDictionarySetValue(MutableCopy, v75, v68);
                  if (!(v61 | v64))
                  {
                    v69 = (void *)v51;
                    if (v51 || (v69 = v87) != 0)
                      CFDictionarySetValue(MutableCopy, cfa, v69);
                  }
                  goto LABEL_109;
                }
              }
              goto LABEL_148;
            }
            v57 = 0;
            v56 = 1;
          }
        }
        v58 = CGColorSpaceCopyICCData(v55);
        if (!v58)
        {
          v49 = FigSignalErrorAt();
          v48 = valuea;
          goto LABEL_110;
        }
        v59 = v58;
        CFDictionarySetValue(MutableCopy, v74, v58);
        CFRelease(v59);
        if (v56)
          _setVUITripletsIfMatching(v55, MutableCopy, PixelFormatType, valuea, v83);
        v48 = valuea;
        if ((v57 & 1) == 0)
          goto LABEL_109;
        goto LABEL_82;
      }
      v49 = FigSignalErrorAt();
      v50 = v39;
      allocator = v78;
      v48 = valuea;
      v51 = v35;
    }
LABEL_111:
    v47 = v83;
    if (!v83)
      goto LABEL_113;
    goto LABEL_112;
  }
  v50 = v27;
LABEL_118:
  if (v18 == a6 && v17 == a7)
  {
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D50]);
  }
  else
  {
    PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(allocator, (__CFDictionary **)&v84, v18, v17, 0.0, 0.0, a6, a7);
    if ((_DWORD)PixelBufferCLAPDictionaryFromRect)
    {
      v49 = PixelBufferCLAPDictionaryFromRect;
      goto LABEL_143;
    }
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D50], v84);
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(formatDescriptionOut);
  v49 = CMVideoFormatDescriptionCreate(allocator, MediaSubType, (int)v18, (int)v17, MutableCopy, &v86);
  if (!(_DWORD)v49)
  {
    *v50 = v86;
    v86 = 0;
    goto LABEL_125;
  }
LABEL_143:
  if (v86)
    CFRelease(v86);
LABEL_125:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v84)
    CFRelease(v84);
  return v49;
}

uint64_t CMPhotoWritePixelBufferToY4MURL(__CVBuffer *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  double PixelBufferCLAPAsRect;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t LengthAtOffset;
  unsigned int v18;
  uint64_t v19;
  char v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v3 = 4294950306;
  if (a1 && a2)
  {
    PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    if (CVPixelBufferGetPixelFormatType(a1) != 875704422 || (vcvtad_u64_f64(PixelBufferCLAPAsRect) & 1) != 0)
      return FigSignalErrorAt();
    v13 = vcvtad_u64_f64(v10);
    v14 = vcvtad_u64_f64(v12);
    v15 = (vcvtad_u64_f64(v8) & 1) == 0 && (v13 & 1) == 0;
    if (!v15 || (v14 & 1) != 0)
      return FigSignalErrorAt();
    LengthAtOffset = FigFileForkOpenMainByCFURL();
    if ((_DWORD)LengthAtOffset)
      return LengthAtOffset;
    v23 = 0;
    LengthAtOffset = FigFileForkGetLengthAtOffset();
    if ((_DWORD)LengthAtOffset)
      return LengthAtOffset;
    v22 = 0;
    if (!a3)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)__str = 0u;
      v26 = 0u;
      v18 = snprintf(__str, 0x80uLL, "YUV4MPEG2 W%zd H%zd F25:1 Ip C420jpeg XYSCSS=420JPEG\n", v13, v14);
      if (v18 - 128 < 0xFFFFFF81)
        return 4294950302;
      v19 = v18;
      LengthAtOffset = FigFileForkWrite();
      if ((_DWORD)LengthAtOffset)
        return LengthAtOffset;
      if (v22 != v19)
        return 4294950304;
      v23 += v19;
    }
    strcpy(v21, "FRAME\n");
    LengthAtOffset = FigFileForkWrite();
    if ((_DWORD)LengthAtOffset)
      return LengthAtOffset;
    return 4294950304;
  }
  return v3;
}

uint64_t CMPhotoWritePixelBufferToURL(__CVBuffer *a1, const __CFURL *a2)
{
  return _cmphotoWritePixelBufferToURL(a1, a2, 0);
}

uint64_t _cmphotoWritePixelBufferToURL(__CVBuffer *a1, CFURLRef url, int a3)
{
  uint64_t v3;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;

  v12 = 0;
  v3 = 4294950306;
  if (!a1 || !url)
    return v3;
  v7 = CFURLCopyPathExtension(url);
  v8 = v7;
  if (v7 && CFStringCompare(v7, CFSTR("y4m"), 1uLL) == kCFCompareEqualTo)
  {
    v3 = CMPhotoWritePixelBufferToY4MURL(a1, (uint64_t)url, 0);
  }
  else
  {
    v9 = FigFileForkOpenMainByCFURL();
    if (!(_DWORD)v9)
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = ___cmphotoWritePixelBufferToURL_block_invoke;
      v11[3] = &__block_descriptor_tmp_270;
      v11[4] = v12;
      v9 = _writePixelBufferWithBlock(a1, a3, (uint64_t)v11);
    }
    v3 = v9;
    if (!v8)
      goto LABEL_11;
  }
  CFRelease(v8);
LABEL_11:
  if (v12)
    FigFileForkClose();
  return v3;
}

uint64_t _writePixelBufferWithBlock(__CVBuffer *a1, int a2, uint64_t a3)
{
  __CVBuffer *v4;
  uint64_t PixelFormatType;
  double PixelBufferCLAPAsRect;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t BytesPerPixelForPixelFormat;
  __CVBuffer *v18;
  char *BaseAddress;
  size_t BytesPerRow;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  uint64_t IsSubsampled;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v46;
  __int16 v47;

  if (!a1)
    return 4294950306;
  v4 = a1;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = CVPixelBufferLockBaseAddress(v4, 1uLL);
  if ((_DWORD)v13)
    return v13;
  v14 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  v15 = vcvtad_u64_f64(v8);
  v46 = vcvtad_u64_f64(v10);
  v16 = vcvtad_u64_f64(v12);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  v18 = v4;
  if (CVPixelBufferGetPlaneCount(v4) >= 2 && CVPixelBufferGetPlaneCount(v4) != 1)
  {
    if (CVPixelBufferGetPlaneCount(v4))
    {
      v24 = BytesPerPixelForPixelFormat;
      v25 = 0;
      v26 = 0;
      v43 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v44 = v24;
      v41 = v24 * (v14 & 0xFFFFFFFFFFFFFFFELL);
      v42 = v15 >> 1;
      v40 = PixelFormatType;
      while (1)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v18, v25);
        v4 = v18;
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v18, v25);
        v47 = 0;
        IsSubsampled = CMPhotoPixelFormatIsSubsampled(PixelFormatType, (_BYTE *)&v47 + 1, &v47, 0, 0);
        if ((_DWORD)IsSubsampled)
          goto LABEL_38;
        v30 = v46 + (v46 | 0xFFFFFFFFFFFFFFFELL) + 2;
        if (!HIBYTE(v47))
          v30 = 2 * v46;
        if (v25)
          v31 = v30;
        else
          v31 = v46;
        if (v25 != 0 && (_BYTE)v47 != 0)
          v32 = (v16 + 1) >> 1;
        else
          v32 = v16;
        v33 = v43;
        if (v25 != 0 && (_BYTE)v47 != 0)
          v33 = v42;
        v34 = PixelFormatType;
        v35 = &BaseAddressOfPlane[v41 + v33 * BytesPerRowOfPlane];
        if (CMPhotoPixelFormatIsPackedYUV(v34))
          v36 = (2 * (((v31 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
        else
          v36 = v31 * v44;
        if (a2)
        {
          IsSubsampled = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(a3 + 16))(a3, v35, v32 * BytesPerRowOfPlane, v26);
          if ((_DWORD)IsSubsampled)
            goto LABEL_38;
          v26 += v32 * BytesPerRowOfPlane;
        }
        else if (v32)
        {
          do
          {
            IsSubsampled = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(a3 + 16))(a3, v35, v36, v26);
            if ((_DWORD)IsSubsampled)
              goto LABEL_38;
            v35 += BytesPerRowOfPlane;
            v26 += v36;
          }
          while (--v32);
        }
        ++v25;
        v18 = v4;
        PixelFormatType = v40;
        if (CVPixelBufferGetPlaneCount(v4) <= v25)
          goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v4);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
  v21 = BytesPerPixelForPixelFormat;
  v22 = &BaseAddress[BytesPerPixelForPixelFormat * v14 + BytesPerRow * v15];
  if (CMPhotoPixelFormatIsPackedRAW(PixelFormatType))
  {
    if (CMPhotoGetBitDepthForPixelFormat(PixelFormatType) == 12)
      v23 = (unint64_t)((double)v46 * 1.5);
    else
      v23 = CMPhotoAlignValue(5 * ((v46 + 3) >> 2), 0x140uLL);
  }
  else if ((_DWORD)PixelFormatType == 1647719528)
  {
    v16 >>= 1;
    v23 = 2 * v21 * v46;
  }
  else
  {
    v23 = v21 * v46;
  }
  if (!a2)
  {
    v4 = v18;
    if (v16)
    {
      v38 = 0;
      do
      {
        IsSubsampled = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v22, v23, v38);
        if ((_DWORD)IsSubsampled)
          goto LABEL_38;
        v22 += BytesPerRow;
        v38 += v23;
      }
      while (--v16);
    }
LABEL_43:
    v37 = 0;
    goto LABEL_44;
  }
  v4 = v18;
  IsSubsampled = (*(uint64_t (**)(uint64_t, char *, unint64_t, _QWORD))(a3 + 16))(a3, v22, v16 * BytesPerRow, 0);
LABEL_38:
  v37 = IsSubsampled;
LABEL_44:
  CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  return v37;
}

BOOL CMPhotoIsOutputFormatSupportedForNativeFloatingPoint(int a1, int a2)
{
  _BOOL8 result;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  result = 0;
  if (a1 > 1717856626)
  {
    if (a1 > 1751411058)
    {
      if (a1 != 1751411059)
        return a1 == 1751527984 && a2 == 1751527984;
    }
    else if (a1 != 1717856627)
    {
      v4 = 1751410032;
LABEL_8:
      if (a1 != v4)
        return result;
      v5 = a2 == 1717855600;
      v6 = 1751410032;
      return v5 || a2 == v6;
    }
    v5 = a2 == 1717856627;
    v6 = 1751411059;
    return v5 || a2 == v6;
  }
  if (a1 != 16 && a1 != 1111970369)
  {
    v4 = 1717855600;
    goto LABEL_8;
  }
  result = 1;
  if (a2 <= 1651926375)
  {
    if (a2 <= 1380410944)
    {
      if (a2 == 1278226534)
        return result;
      v7 = 1278226536;
    }
    else
    {
      if (a2 == 1380410945 || a2 == 1380411457)
        return result;
      v7 = 1647719528;
    }
  }
  else if (a2 > 1751410031)
  {
    if (a2 == 1751410032 || a2 == 1751411059)
      return result;
    v7 = 1751527984;
  }
  else
  {
    if (a2 == 1651926376 || a2 == 1717855600)
      return result;
    v7 = 1717856627;
  }
  if (a2 != v7)
    return 0;
  return result;
}

uint64_t CMPhotoPixelBufferIsHLG(__CVBuffer *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  int v4;
  CGColorSpaceRef v5;
  CGColorSpaceRef s;

  s = 0;
  if (!a1)
    return 0;
  v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v2)
    v3 = FigCFEqual();
  else
    v3 = 0;
  v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &s, 1, 0);
  v5 = s;
  if (!v4 && s)
    v3 = v3 | CGColorSpaceIsHLGBased(s);
  if (v2)
    CFRelease(v2);
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t CMPhotoPixelBufferIsPQ(__CVBuffer *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  int v4;
  CGColorSpaceRef v5;
  CGColorSpaceRef s;

  s = 0;
  if (!a1)
    return 0;
  v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v2)
    v3 = FigCFEqual();
  else
    v3 = 0;
  v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &s, 1, 0);
  v5 = s;
  if (!v4 && s)
    v3 = v3 | CGColorSpaceIsPQBased(s);
  if (v2)
    CFRelease(v2);
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t CMPhotoPixelBufferHasDisplayP3Primaries(__CVBuffer *a1)
{
  CGColorSpace *v2;
  uint64_t PixelFormatType;
  uint64_t v4;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  if (!cf)
  {
    if (CMPhotoCreateColorSpaceFromPixelBuffer(a1, (CGColorSpace **)&v6, 1, 0))
    {
      v4 = 0;
      goto LABEL_6;
    }
    v2 = (CGColorSpace *)v6;
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    CMPhotoGetTripletsForColorSpace(v2, PixelFormatType, &cf, 0, 0);
  }
  v4 = FigCFEqual();
  if (cf)
    CFRelease(cf);
LABEL_6:
  if (v6)
    CFRelease(v6);
  return v4;
}

uint64_t CMPhotoPixelBufferHasSRGBPrimaries(__CVBuffer *a1)
{
  CFTypeRef *v2;
  CGColorSpace *v3;
  uint64_t PixelFormatType;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef cf;

  v7 = 0;
  cf = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  v2 = (CFTypeRef *)MEMORY[0x1E0CA8D88];
  if (!cf)
  {
    if (CMPhotoCreateColorSpaceFromPixelBuffer(a1, (CGColorSpace **)&v7, 1, 0))
    {
      v5 = 0;
      goto LABEL_8;
    }
    v3 = (CGColorSpace *)v7;
    if (v7)
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      CMPhotoGetTripletsForColorSpace(v3, PixelFormatType, &cf, 0, 0);
    }
    else
    {
      cf = CFRetain(*v2);
    }
  }
  v5 = FigCFEqual();
  if (cf)
    CFRelease(cf);
LABEL_8:
  if (v7)
    CFRelease(v7);
  return v5;
}

uint64_t CMPhotoPixelBufferIsLinear(__CVBuffer *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  const __CFDictionary *v4;
  int v5;
  CGColorSpaceRef v6;
  CGColorSpace *v7;
  CGColorSpaceRef v8;
  CGColorSpaceRef v9;
  CGColorSpaceRef v10;
  CGColorSpaceRef v11;
  CGColorSpace *v13;

  v13 = 0;
  if (!a1)
    return 0;
  v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v2)
    v3 = FigCFEqual();
  else
    v3 = 0;
  v4 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  v5 = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v4, 0, &v13, 1, 1);
  v6 = 0;
  v7 = v13;
  if (v5 || !v13)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_13;
  }
  v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  if (CGColorSpaceEqualToColorSpace())
  {
    v8 = 0;
LABEL_10:
    v9 = 0;
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9F0]);
  if (CGColorSpaceEqualToColorSpace())
    goto LABEL_10;
  v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D990]);
  if (CGColorSpaceEqualToColorSpace())
    goto LABEL_11;
  v10 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9F8]);
  if (!CGColorSpaceEqualToColorSpace())
  {
    v11 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9E8]);
    v3 = v3 | CGColorSpaceEqualToColorSpace();
    goto LABEL_13;
  }
LABEL_12:
  v11 = 0;
  v3 = v3 | 1;
LABEL_13:
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return v3;
}

uint64_t CMPhotoPixelBufferIsExtendedLinear(__CVBuffer *a1)
{
  const __CFDictionary *v1;
  int ColorSpaceFromPixelBufferAttachments;
  CGColorSpaceRef v3;
  uint64_t v4;
  CFTypeRef v5;
  CGColorSpaceRef v6;
  CGColorSpaceRef v7;
  CGColorSpaceRef v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  ColorSpaceFromPixelBufferAttachments = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v1, 0, (CGColorSpace **)&cf, 1, 1);
  v3 = 0;
  v4 = 0;
  v5 = cf;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (!ColorSpaceFromPixelBufferAttachments && cf)
  {
    v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D958]);
    if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D948]);
      if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
      {
        v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D950]);
        if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
        {
          v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D940]);
          v4 = CGColorSpaceEqualToColorSpace();
          if (!v1)
            goto LABEL_11;
          goto LABEL_10;
        }
        goto LABEL_8;
      }
    }
    v7 = 0;
LABEL_8:
    v8 = 0;
    v4 = 1;
  }
  if (v1)
LABEL_10:
    CFRelease(v1);
LABEL_11:
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  return v4;
}

uint64_t CMPhotoGetDefaultImageSubsamplingForEncodeFromPixelFormat(uint64_t a1, int a2, int a3)
{
  int UncompressedPixelFormatFromCompressedPixelFormat;
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 IsRGBEncodeAvailable;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  result = 5;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952854577)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1932996148)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1751410031)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1751410032)
            goto LABEL_65;
          v11 = 1751411059;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1717855600)
            goto LABEL_65;
          v11 = 1717856627;
        }
        goto LABEL_64;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1936077875)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149)
          goto LABEL_65;
        v8 = 1936077362;
        goto LABEL_52;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876)
        goto LABEL_56;
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938)
        goto LABEL_53;
      v9 = 1937126452;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 2016687155)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963955)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2016687156)
            goto LABEL_56;
          v8 = 2019963442;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963956)
            goto LABEL_56;
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2037741171)
            goto LABEL_53;
          v8 = 2037741158;
        }
LABEL_52:
        if (UncompressedPixelFormatFromCompressedPixelFormat != v8)
          return result;
        goto LABEL_53;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1953903153)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903154)
          goto LABEL_53;
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668)
          goto LABEL_56;
        v8 = 2016686642;
        goto LABEL_52;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854578)
        goto LABEL_53;
      v9 = 1952855092;
    }
LABEL_44:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v9)
      return result;
    goto LABEL_56;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1278226735)
    {
      if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226488) <= 0x30
        && ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 56)) & 0x1400000000001) != 0)
      {
        goto LABEL_65;
      }
      v10 = 1111970369;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1279340599)
      {
        v7 = UncompressedPixelFormatFromCompressedPixelFormat - 1278226736;
        if (v7 > 6 || ((1 << v7) & 0x45) == 0)
          return result;
LABEL_65:
        if (CMPhotoIs400EncodeAvailable(a2))
          return 6;
        else
          return 5;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1279340600
        || UncompressedPixelFormatFromCompressedPixelFormat == 1279340854)
      {
        goto LABEL_65;
      }
      v10 = 1380401729;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat != v10)
      return result;
    goto LABEL_41;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 843264309)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 825437747)
        goto LABEL_65;
      v11 = 843264056;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 32)
      {
LABEL_41:
        IsRGBEncodeAvailable = CMPhotoIsRGBEncodeAvailable(a2);
        goto LABEL_57;
      }
      v11 = 825306677;
    }
LABEL_64:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v11)
      return result;
    goto LABEL_65;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704949)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat == 843264310)
      goto LABEL_65;
    v8 = 875704934;
    goto LABEL_52;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 875704950)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875836518)
    {
      v9 = 875836534;
      goto LABEL_44;
    }
LABEL_56:
    IsRGBEncodeAvailable = CMPhotoIs444EncodeAvailable(a2, a3);
LABEL_57:
    if (IsRGBEncodeAvailable)
      return 1;
    else
      return 5;
  }
LABEL_53:
  if (CMPhotoIs422EncodeAvailable(a2, a3))
    return 3;
  else
    return 5;
}

uint64_t CMPhotoSubsamplingIsSupportedForCodec(int a1, int a2, int a3)
{
  uint64_t result;
  _BOOL4 v4;

  switch(a1)
  {
    case 1:
      v4 = CMPhotoIs444EncodeAvailable(a2, a3);
      goto LABEL_7;
    case 2:
    case 4:
      return a2 == 1785750887;
    case 3:
      v4 = CMPhotoIs422EncodeAvailable(a2, a3);
      goto LABEL_7;
    case 5:
      return 1;
    case 6:
      v4 = CMPhotoIs400EncodeAvailable(a2);
LABEL_7:
      result = v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t CMPhotoGetYUVPixelFormatForParameters(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int *a8)
{
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  int v23;

  v8 = 1111573574;
  switch(a1)
  {
    case 1:
      switch(a2)
      {
        case 8:
          if ((a5 - 3) >= 3)
          {
            if (a3)
              v8 = 875836518;
            else
              v8 = 875836534;
            v9 = 641230388;
            v10 = 641234482;
            goto LABEL_64;
          }
          break;
        case 10:
          if ((a5 - 3) >= 3)
          {
            if (a3)
              v8 = 2019963956;
            else
              v8 = 2016687156;
            v9 = 645424692;
            v10 = 645428786;
            goto LABEL_64;
          }
          break;
        case 12:
          if ((a5 - 3) >= 3)
          {
            if (a3)
              v8 = 1952855092;
            else
              v8 = 1953903668;
            v9 = 645162548;
            v10 = 645166642;
            goto LABEL_64;
          }
          break;
        case 16:
          if ((a5 - 3) >= 3)
          {
            if (a3)
              v8 = 1936077876;
            else
              v8 = 1937126452;
            v9 = 645097012;
            v10 = 645101106;
LABEL_64:
            v12 = v10 + 2;
            goto LABEL_65;
          }
          break;
        default:
          goto LABEL_108;
      }
      break;
    case 2:
    case 5:
      switch(a2)
      {
        case 8:
          switch(a5)
          {
            case 2:
              v8 = 641230384;
              goto LABEL_104;
            case 3:
              v8 = 2084070960;
              goto LABEL_104;
            case 4:
              v8 = 792225328;
              goto LABEL_104;
            case 5:
              v8 = 758670896;
              goto LABEL_104;
            default:
              v8 = 875704422;
              v21 = 875704438;
              break;
          }
          break;
        case 10:
          if (a4)
          {
            v8 = 1882468912;
LABEL_22:
            v15 = v8 + 3276800;
            v16 = a3 == 0;
            goto LABEL_23;
          }
          switch(a5)
          {
            case 2:
              v8 = 645424688;
              goto LABEL_104;
            case 3:
              v8 = 2088265264;
              v23 = 2088265266;
              break;
            case 4:
              v8 = 796419632;
              v23 = 796419634;
              break;
            case 5:
              v8 = 762865200;
              v23 = 762865202;
              break;
            default:
              v8 = 2016686640;
              goto LABEL_22;
          }
          v21 = v23 + 4094;
          break;
        case 12:
          if (a3)
            v17 = 1952854576;
          else
            v17 = 1953903152;
          if (a3)
            v18 = 645162544;
          else
            v18 = 645166640;
          if (a5 == 2)
            v17 = v18;
          if ((a5 - 3) >= 3)
            v8 = v17;
          else
            v8 = 1111573574;
          goto LABEL_108;
        case 16:
          if ((a5 - 3) < 3)
            goto LABEL_108;
          if (a3)
            v19 = 1936077360;
          else
            v19 = 1937125936;
          if (a6)
            v8 = 1751527984;
          else
            v8 = v19;
          v9 = 645097008;
          v12 = 645101104;
LABEL_65:
          v11 = a3 == 0;
          goto LABEL_66;
        default:
          goto LABEL_108;
      }
LABEL_105:
      v20 = a3 == 0;
LABEL_106:
      if (v20)
        v8 = v21;
      break;
    case 3:
      switch(a2)
      {
        case 8:
          if ((a5 - 3) < 3)
            goto LABEL_108;
          v11 = a3 == 0;
          if (a3)
            v8 = 875704934;
          else
            v8 = 875704950;
          v9 = 641230386;
          v12 = 641234482;
          break;
        case 10:
          switch(a5)
          {
            case 2:
              v8 = 645424690;
              v20 = a3 == 0;
              v21 = 645428786;
              goto LABEL_106;
            case 3:
              v8 = 2088265266;
              goto LABEL_104;
            case 4:
              v8 = 796419634;
              goto LABEL_104;
            case 5:
              v8 = 762865202;
LABEL_104:
              v21 = v8 | 0x1000;
              goto LABEL_105;
            default:
              v8 = 2016686642;
              v16 = a3 == 0;
              v15 = 2019963442;
LABEL_23:
              if (!v16)
                v8 = v15;
              goto LABEL_108;
          }
        case 12:
          if ((a5 - 3) < 3)
            goto LABEL_108;
          if (a3)
            v8 = 1952854578;
          else
            v8 = 1953903154;
          v9 = 645162546;
          v11 = a3 == 0;
          v12 = 645166642;
          break;
        case 16:
          if ((a5 - 3) < 3)
            goto LABEL_108;
          if (a3)
            v8 = 1936077362;
          else
            v8 = 1937125938;
          v9 = 645097010;
          v11 = a3 == 0;
          v12 = 645101106;
          break;
        default:
          goto LABEL_108;
      }
LABEL_66:
      if (v11)
        v9 = v12;
      if (a5 == 2)
        v8 = v9;
      break;
    case 6:
      switch(a2)
      {
        case 8:
          v13 = a5 - 2;
          if ((a5 - 2) < 4)
          {
            v14 = &unk_1A8289ED0;
            goto LABEL_86;
          }
          v8 = 1278226488;
          break;
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:
          goto LABEL_108;
        case 10:
          v13 = a5 - 2;
          if ((a5 - 2) < 4)
          {
            v14 = &unk_1A8289EF0;
            goto LABEL_86;
          }
          v8 = 1278226736;
          break;
        case 12:
          v13 = a5 - 2;
          if ((a5 - 2) >= 4)
          {
            v8 = 1278226738;
          }
          else
          {
            v14 = &unk_1A8289EE0;
LABEL_86:
            v8 = v14[v13];
          }
          break;
        case 16:
          if (a6)
          {
            v8 = 1278226536;
          }
          else if ((a5 - 2) >= 4)
          {
            v8 = 1278226742;
          }
          else
          {
            v8 = dword_1A8289F00[a5 - 2];
          }
          break;
        default:
          if (a6)
            v8 = 1278226534;
          else
            v8 = 1111573574;
          if (a2 != 32)
            v8 = 1111573574;
          break;
      }
      break;
    default:
      break;
  }
LABEL_108:
  if (a7)
  {
    if (v8 == 1111573574)
      return FigSignalErrorAt();
  }
  else if (v8 == 1111573574)
  {
    return 4294950302;
  }
  result = 0;
  if (a8)
    *a8 = v8;
  return result;
}

vImage_Error CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(__CVBuffer *a1, const void *a2, int a3, int a4, int a5, __int16 a6, __CVBuffer **a7)
{
  vImage_Error v7;
  signed int PixelFormatType;
  signed int v16;
  int v17;
  size_t Width;
  size_t Height;
  uint64_t v20;
  size_t BytesPerRow;
  char *BaseAddress;
  uint64_t v23;
  __CVBuffer *v24;
  int v25;
  uint64_t v26;
  vImage_Error v27;
  size_t v28;
  char *v29;
  uint64_t i;
  uint64_t j;
  int v32;
  const void *v34;
  int v35;
  int v36;
  __CVBuffer **v37;
  vImage_Buffer dest;
  vImage_Buffer src;
  CVPixelBufferRef v40;

  v40 = 0;
  v7 = 4294950306;
  if (!a1 || !a7)
    return v7;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v16 = PixelFormatType;
  v7 = 4294950301;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      goto LABEL_9;
    v17 = 1717855600;
  }
  else
  {
    if (PixelFormatType == 1278226534)
      goto LABEL_9;
    v17 = 1380410945;
  }
  if (PixelFormatType != v17)
    return v7;
LABEL_9:
  v34 = a2;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v20 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v20)
    return v20;
  v36 = a4;
  v37 = a7;
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (v16 == 1278226534)
  {
    v23 = 1278226536;
  }
  else
  {
    v23 = 1751410032;
    if (v16 == 1717856627)
    {
      v23 = 1751411059;
    }
    else if (v16 != 1717855600)
    {
      v23 = 0;
    }
  }
  v24 = *v37;
  if (*v37)
  {
    v40 = *v37;
    if (_verifyEqualPixelBufferFormatSizeClap(v24, v23, Width, Height))
    {
      v25 = 0;
      goto LABEL_24;
    }
    v32 = 0;
    v25 = 0;
    v7 = 4294950306;
  }
  else
  {
    if (a3)
      v26 = CMPhotoSurfacePoolCreatePixelBuffer(v34, v23, Width, Height, 1, 0, 0, 0, 64, 0, &v40);
    else
      v26 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v23, Width, Height, 0, 0, 64, 0, &v40);
    v7 = v26;
    if (!(_DWORD)v26)
    {
      v25 = 1;
      v24 = v40;
LABEL_24:
      v27 = CVPixelBufferLockBaseAddress(v24, 0);
      if ((_DWORD)v27)
      {
        v7 = v27;
        v32 = 0;
      }
      else
      {
        v35 = v25;
        v28 = CVPixelBufferGetBytesPerRow(v40);
        v29 = (char *)CVPixelBufferGetBaseAddress(v40);
        src.data = BaseAddress;
        src.height = Height;
        src.width = Width;
        src.rowBytes = BytesPerRow;
        dest.data = v29;
        dest.height = Height;
        dest.width = Width;
        dest.rowBytes = v28;
        v7 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        if ((_DWORD)v7)
        {
          v32 = 1;
        }
        else
        {
          if (v36 && Height)
          {
            for (i = 0; i != Height; ++i)
            {
              if (Width)
              {
                for (j = 0; j != Width; ++j)
                {
                  if (*(_DWORD *)&BaseAddress[4 * j] == a5)
                    *(_WORD *)&v29[2 * j] = a6;
                }
              }
              BaseAddress += BytesPerRow;
              v29 += v28;
            }
          }
          CVPixelBufferUnlockBaseAddress(v40, 0);
          v7 = 0;
          v32 = 0;
          *v37 = v40;
          v40 = 0;
        }
        v25 = v35;
      }
      goto LABEL_37;
    }
    v32 = 0;
    v25 = 1;
  }
LABEL_37:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v32 && v40)
    CVPixelBufferUnlockBaseAddress(v40, 0);
  if (v25 && v40)
    CFRelease(v40);
  return v7;
}

BOOL _verifyEqualPixelBufferFormatSizeClap(__CVBuffer *a1, int a2, uint64_t a3, uint64_t a4)
{
  OSType PixelFormatType;
  _BOOL4 v9;
  int HasAttachment;
  _BOOL4 v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v9 = CVPixelBufferGetWidth(a1) == a3 && CVPixelBufferGetHeight(a1) == a4;
  HasAttachment = CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50]);
  v11 = PixelFormatType == a2 && v9;
  return !HasAttachment && v11;
}

uint64_t CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(__CVBuffer *a1, const void *a2, int a3, int a4, int a5, __CVBuffer **a6)
{
  vImage_Error v6;
  OSType PixelFormatType;
  OSType v14;
  size_t Width;
  size_t Height;
  uint64_t v17;
  size_t BytesPerRow;
  unsigned __int16 *BaseAddress;
  uint64_t v20;
  __CVBuffer *v22;
  uint64_t v23;
  vImage_Error v24;
  size_t v25;
  char *v26;
  uint64_t i;
  uint64_t j;
  int v29;
  int v30;
  int v31;
  __CVBuffer **v32;
  vImage_Buffer dest;
  vImage_Buffer src;
  CVPixelBufferRef v35;

  v35 = 0;
  v6 = 4294950306;
  if (a1 && a6)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v14 = PixelFormatType;
    if (PixelFormatType != 1278226536 && PixelFormatType != 1751410032 && PixelFormatType != 1751411059)
      return FigSignalErrorAt();
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    v17 = CVPixelBufferLockBaseAddress(a1, 1uLL);
    if (!(_DWORD)v17)
    {
      v30 = a3;
      v32 = a6;
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
      if (v14 == 1278226536)
      {
        v20 = 1278226534;
      }
      else
      {
        v20 = 1717855600;
        if (v14 == 1751411059)
        {
          v20 = 1717856627;
        }
        else if (v14 != 1751410032)
        {
          v20 = 0;
        }
      }
      v22 = *v32;
      if (*v32)
      {
        v35 = *v32;
        if (!_verifyEqualPixelBufferFormatSizeClap(v22, v20, Width, Height))
        {
          v29 = 0;
          v31 = 0;
          v6 = 4294950306;
          goto LABEL_31;
        }
        v31 = 0;
      }
      else
      {
        v23 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v20, Width, Height, 1, 0, 0, 0, 0, 0, &v35);
        if ((_DWORD)v23)
        {
          v6 = v23;
          v31 = 1;
LABEL_43:
          v29 = 0;
LABEL_31:
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
          if (v29 && v35)
            CVPixelBufferUnlockBaseAddress(v35, 0);
          if (v31)
          {
            if (v35)
              CFRelease(v35);
          }
          return v6;
        }
        v31 = 1;
        v22 = v35;
      }
      v24 = CVPixelBufferLockBaseAddress(v22, 0);
      if (!(_DWORD)v24)
      {
        v25 = CVPixelBufferGetBytesPerRow(v35);
        v26 = (char *)CVPixelBufferGetBaseAddress(v35);
        src.data = BaseAddress;
        src.height = Height;
        src.width = Width;
        src.rowBytes = BytesPerRow;
        dest.data = v26;
        dest.height = Height;
        dest.width = Width;
        dest.rowBytes = v25;
        v6 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if ((_DWORD)v6)
        {
          v29 = 1;
        }
        else
        {
          if (v30 && Height)
          {
            for (i = 0; i != Height; ++i)
            {
              if (Width)
              {
                for (j = 0; j != Width; ++j)
                {
                  if (BaseAddress[j] == a4)
                    *(_DWORD *)&v26[4 * j] = a5;
                }
              }
              BaseAddress = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
              v26 += v25;
            }
          }
          CVPixelBufferUnlockBaseAddress(v35, 0);
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v35);
          v6 = 0;
          v29 = 0;
          *v32 = v35;
          v35 = 0;
        }
        goto LABEL_31;
      }
      v6 = v24;
      goto LABEL_43;
    }
    return v17;
  }
  return v6;
}

uint64_t CMPhotoCreateYUVPixelBufferWithDithering(__CVBuffer *a1, uint64_t a2, int a3, _QWORD *a4)
{
  __CVBuffer *v5;
  size_t Width;
  size_t Height;
  uint64_t v8;
  CVPixelBufferRef v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __CVBuffer *v13;
  size_t v14;
  size_t v15;
  OSType PixelFormatType;
  size_t BytesPerRowOfPlane;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  float v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  signed int v64;
  int v65;
  size_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  signed int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  signed int v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  int v92;
  signed int v93;
  int v94;
  size_t v95;
  int *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  _DWORD *v119;
  int v120;
  int v121;
  uint64_t v122;
  const __CFDictionary *v123;
  const __CFDictionary *v124;
  const __CFDictionary *v125;
  const __CFDictionary *v126;
  _QWORD *v128;
  __CVBuffer *v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  size_t v135;
  uint64_t v136;
  char *BaseAddress;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  size_t v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  size_t BytesPerRow;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  char *v152;
  size_t v153;
  uint64_t v154;
  size_t v155;
  _BYTE *BaseAddressOfPlane;
  char *v157;
  unint64_t v158;
  CVPixelBufferRef v159;

  v159 = 0;
  if (a3 != 875704422)
    return FigSignalErrorAt();
  v5 = a1;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(v5);
  v8 = CMPhotoSurfacePoolCreatePixelBuffer(0, 875704422, Width, Height, 1, 0, 0, 0, 0, 0, &v159);
  v9 = v159;
  if ((_DWORD)v8)
    goto LABEL_88;
  v10 = CVPixelBufferLockBaseAddress(v159, 0);
  if ((_DWORD)v10)
  {
    v8 = v10;
    goto LABEL_87;
  }
  v11 = 1;
  v12 = CVPixelBufferLockBaseAddress(v5, 1uLL);
  if ((_DWORD)v12)
  {
    v8 = v12;
    goto LABEL_84;
  }
  v13 = v159;
  v14 = CVPixelBufferGetWidth(v5);
  v15 = CVPixelBufferGetHeight(v5);
  v143 = v14;
  if (((v14 | v15) & 1) == 0)
  {
    BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v13, 0);
    v135 = CVPixelBufferGetBytesPerRowOfPlane(v13, 1uLL);
    switch(PixelFormatType)
    {
      case 0x18u:
        v146 = 0;
        v18 = 3;
        goto LABEL_11;
      case 0x42475241u:
        v144 = 0;
        v145 = 4;
        v146 = 2;
        goto LABEL_13;
      case 0x52474241u:
        v146 = 0;
        v18 = 4;
LABEL_11:
        v145 = v18;
        v144 = 2;
LABEL_13:
        v153 = v143 >> 1;
        v130 = malloc_type_calloc(3 * v143 + 4 * (v143 >> 1) + 14, 4uLL, 0x100004052888210uLL);
        if (v130)
        {
          v128 = a4;
          v129 = v5;
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(v5);
          BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v13, 0);
          v19 = (char *)CVPixelBufferGetBaseAddressOfPlane(v13, 1uLL);
          v134 = v15 - 1;
          if (v15 != 1)
          {
            v20 = v19;
            v21 = 0;
            v141 = v130 + 1;
            v140 = (uint64_t)&v130[v143 + 1];
            v22 = v140 + 8 + 4 * v143 + 8;
            v23 = (_DWORD *)(v22 + 4 * v143 + 8);
            v24 = (uint64_t)&v23[v153 + 2];
            v25 = (_DWORD *)(v24 + 4 * v153 + 8);
            v157 = (char *)&v130[v143];
            v133 = 4 * v153;
            v26 = &BaseAddressOfPlane[BytesPerRowOfPlane];
            v132 = 4 * v143;
            v27 = (uint64_t)&v25[v153 + 2];
            v158 = v143 - 1;
            v131 = 2 * BytesPerRowOfPlane;
            v155 = v143 - 2;
            v142 = v153 - 2;
            do
            {
              v136 = v21;
              v28 = (_DWORD *)v22;
              v29 = (_DWORD *)v24;
              v30 = (_DWORD *)v27;
              if (v143 != 1)
              {
                v31 = 0;
                v32 = 0;
                v33 = 0;
                v138 = v29 - 1;
                v139 = v27 - 4;
                v154 = v22 + 4;
                v34 = v141 + 1;
                v35 = 0.0;
                v36 = 1;
                v37 = BaseAddress;
                v151 = v23;
                v152 = v20;
                v149 = v29;
                v150 = v25;
                v148 = (_DWORD *)v27;
                do
                {
                  v38 = v26;
                  v39 = v37[v146];
                  v40 = v37[1];
                  v41 = v37[v144];
                  v42 = v37[v145 + v146];
                  v43 = v37[v145 + 1];
                  v44 = v37[v145 + v144];
                  v45 = v37[BytesPerRow + v146];
                  v46 = v37[BytesPerRow + 1];
                  v47 = v37[BytesPerRow + v144];
                  v48 = v37[BytesPerRow + v145 + v146];
                  v49 = v37[BytesPerRow + 1 + v145];
                  v50 = 19595 * v39 + 38470 * v40 + 7471 * v41 + v34[v31 / 4 - 1];
                  v51 = v50 + 0x8000;
                  v52 = v50 - ((v50 + 0x8000) & 0xFFFF0000);
                  v53 = v37[BytesPerRow + v145 + v144];
                  if (v33)
                  {
                    v34[v31 / 4] += 7 * v52 / 16;
                    v54 = (char *)&v130[v143];
                    *(_DWORD *)&v54[v31 + 8] += 3 * v52 / 16;
                    v55 = 5 * v52;
                    v56 = &v157[v31 + 12];
                    v57 = 16;
                  }
                  else
                  {
                    if (v52 >= 0)
                      v58 = v52;
                    else
                      v58 = v52 + 1;
                    v141[1] += v58 >> 1;
                    v55 = 6 * v52;
                    v57 = 8;
                    v56 = (char *)(v140 + 8);
                    v54 = (char *)&v130[v143];
                  }
                  *(_DWORD *)v56 += v55 / 16;
                  v59 = v52 / v57;
                  v60 = &v54[v31];
                  *(_DWORD *)&v54[v31 + 16] += v59;
                  v61 = (v51 >> 16) & ~(v51 >> 31);
                  if (v61 >= 255)
                    LOBYTE(v61) = -1;
                  BaseAddressOfPlane[v33] = v61;
                  v62 = 19595 * v42 + 38470 * v43 + 7471 * v44 + v34[v31 / 4];
                  v63 = v62 + 0x8000;
                  v64 = v62 - ((v62 + 0x8000) & 0xFFFF0000);
                  v65 = 7 * v64 / 16;
                  if (v155 == v33)
                  {
                    *((_DWORD *)v60 + 3) += v65;
                    v64 *= 9;
                    v66 = v143 - 1;
                  }
                  else
                  {
                    v34[v31 / 4 + 1] += v65;
                    v67 = *((_DWORD *)v60 + 4);
                    v66 = v33 + 2;
                    *(_DWORD *)&v54[v31 + 12] += 3 * v64 / 16;
                    *(_DWORD *)&v54[v31 + 16] = v67 + 5 * v64 / 16;
                  }
                  v68 = 19595 * v45 + 38470 * v46 + 7471 * v47;
                  v69 = v154;
                  *(_DWORD *)(v140 + 8 + 4 * v66) += v64 / 16;
                  v70 = (v63 >> 16) & ~(v63 >> 31);
                  if (v70 >= 255)
                    LOBYTE(v70) = -1;
                  BaseAddressOfPlane[v33 + 1] = v70;
                  if (v33)
                  {
                    v71 = *(_DWORD *)&v157[v31 + 8] + (int)v35;
                    v72 = v71 + 0x8000;
                    v73 = v71 - ((v71 + 0x8000) & 0xFFFF0000);
                    v74 = 7 * v73 / 16;
                    if (v143 == v33)
                    {
                      v75 = v33 - 1;
                      v28[v155] += v74;
                      v73 *= 9;
                    }
                    else
                    {
                      *(_DWORD *)&v157[v31 + 12] += v74;
                      v82 = v154 + v31;
                      v83 = 5 * v73 + 15;
                      if (5 * v73 >= 0)
                        v83 = 5 * v73;
                      v84 = *(_DWORD *)(v154 + v31 - 8) + (v83 >> 4);
                      v69 = v154;
                      *(_DWORD *)(v82 - 12) = *(_DWORD *)(v154 + v31 - 12) + 3 * v73 / 16;
                      *(_DWORD *)(v82 - 8) = v84;
                      v75 = v33;
                    }
                    v28[v75] += v73 / 16;
                    v85 = (v72 >> 16) & ~(v72 >> 31);
                    if (v85 >= 255)
                      LOBYTE(v85) = -1;
                    v26 = v38;
                    v38[v33 - 1] = v85;
                    v86 = *(_DWORD *)&v157[v31 + 12] + v68;
                    v77 = v86 + 0x8000;
                    v87 = v86 - ((v86 + 0x8000) & 0xFFFF0000);
                    *((_DWORD *)v60 + 4) += 7 * v87 / 16;
                    v79 = v69;
                    *(_DWORD *)(v69 + v31 - 8) += 3 * v87 / 16;
                    v28[v31 / 4] += 5 * v87 / 16;
                    v81 = v87 / 16;
                  }
                  else
                  {
                    v76 = *(_DWORD *)(v140 + 8) + v68;
                    v77 = v76 + 0x8000;
                    v78 = v76 - ((v76 + 0x8000) & 0xFFFF0000);
                    v79 = v154;
                    if (v78 >= 0)
                      v80 = v78;
                    else
                      v80 = v78 + 1;
                    *(_DWORD *)(v140 + 12) += v80 >> 1;
                    *v28 += 6 * v78 / 16;
                    v81 = v78 / 8;
                  }
                  v88 = 19595 * v48 + 38470 * v49 + 7471 * v53;
                  *(_DWORD *)(v79 + v31) += v81;
                  v89 = (v77 >> 16) & ~(v77 >> 31);
                  if (v89 >= 255)
                    LOBYTE(v89) = -1;
                  v26[v33] = v89;
                  v90 = v33 + 2;
                  if (v33 + 2 >= v158)
                  {
                    v91 = *((_DWORD *)v60 + 4) + v88;
                    v92 = v91 + 0x8000;
                    v93 = v91 - ((v91 + 0x8000) & 0xFFFF0000);
                    v94 = 7 * v93 / 16;
                    if (v155 == v33)
                    {
                      *(_DWORD *)(v79 + v31 - 4) += v94;
                      v93 *= 9;
                      v95 = v143 - 1;
                    }
                    else
                    {
                      *(_DWORD *)&v157[v31 + 20] += v94;
                      v96 = (int *)(v79 + v31);
                      v97 = *(_DWORD *)(v79 + v31) + 5 * v93 / 16;
                      *(v96 - 1) = *(_DWORD *)(v79 + v31 - 4) + 3 * v93 / 16;
                      *v96 = v97;
                      v95 = v33 + 2;
                    }
                    v28[v95] += v93 / 16;
                    v98 = (v92 >> 16) & ~(v92 >> 31);
                    if (v98 >= 255)
                      LOBYTE(v98) = -1;
                    v26[v33 + 1] = v98;
                  }
                  else
                  {
                    v35 = (float)v88;
                  }
                  v23 = v151;
                  v20 = v152;
                  v25 = v150;
                  v34 = v141 + 1;
                  v99 = v44 + v41 + v47 + v53;
                  v100 = v43 + v40 + v46 + v49;
                  v101 = v45 + v42 + v39 + v48;
                  v102 = v151[v32] + ((-21709 * v100 - 11057 * v101 + (v99 << 15) + 0x2000000) >> 2);
                  v103 = v102 + 0x8000;
                  v104 = v102 - ((v102 + 0x8000) & 0xFFFF0000);
                  v30 = v148;
                  v29 = v149;
                  if (v33)
                  {
                    v105 = 7 * v104 / 16;
                    if (v153 == v36)
                    {
                      v149[v142] += v105;
                      v106 = 9 * v104 / 16;
                      v107 = v153 - 1;
                    }
                    else
                    {
                      v151[v32 + 1] += v105;
                      v109 = v138[v32 + 1];
                      v138[v32] += 3 * v104 / 16;
                      v138[v32 + 1] = v109 + 5 * v104 / 16;
                      v106 = v104 / 16;
                      v107 = v36;
                    }
                  }
                  else
                  {
                    if (v104 >= 0)
                      v108 = v104;
                    else
                      v108 = v104 + 1;
                    v151[1] += v108 >> 1;
                    *v149 += 6 * v104 / 16;
                    v106 = v104 / 8;
                    v107 = 1;
                  }
                  v110 = (-27438 * v100 + (v101 << 15) - 5328 * v99 + 0x2000000) >> 2;
                  v149[v107] += v106;
                  v111 = (v103 >> 16) & ~(v103 >> 31);
                  if (v111 >= 255)
                    LOBYTE(v111) = -1;
                  v152[v33] = v111;
                  v112 = v150[v32] + v110;
                  v113 = v112 + 0x8000;
                  v114 = v112 - ((v112 + 0x8000) & 0xFFFF0000);
                  if (v33)
                  {
                    v115 = 7 * v114 / 16;
                    if (v153 == v36)
                    {
                      v148[v142] += v115;
                      v116 = 9 * v114 / 16;
                      v117 = v153 - 1;
                    }
                    else
                    {
                      v150[v32 + 1] += v115;
                      v119 = (_DWORD *)(v139 + v32 * 4);
                      v120 = *(_DWORD *)(v139 + v32 * 4 + 4);
                      *v119 = *(_DWORD *)(v139 + v32 * 4) + 3 * v114 / 16;
                      v119[1] = v120 + 5 * v114 / 16;
                      v116 = v114 / 16;
                      v117 = v36;
                    }
                  }
                  else
                  {
                    if (v114 >= 0)
                      v118 = v114;
                    else
                      v118 = v114 + 1;
                    v150[1] += v118 >> 1;
                    *v148 += 6 * v114 / 16;
                    v116 = v114 / 8;
                    v117 = 1;
                  }
                  v37 += 2 * v145;
                  v148[v117] += v116;
                  v121 = (v113 >> 16) & ~(v113 >> 31);
                  if (v121 >= 255)
                    LOBYTE(v121) = -1;
                  v152[v33 + 1] = v121;
                  ++v32;
                  ++v36;
                  v31 += 8;
                  v33 += 2;
                }
                while (v90 < v158);
              }
              bzero(v23, v133);
              bzero(v25, v133);
              bzero((void *)(v140 + 8), v132);
              v22 = (uint64_t)v141;
              bzero(v141, v132);
              BaseAddressOfPlane += v131;
              v26 += v131;
              v20 += v135;
              BaseAddress += 2 * BytesPerRow;
              v21 = v136 + 2;
              v27 = (uint64_t)v25;
              v25 = v30;
              v24 = (uint64_t)v23;
              v23 = v29;
              v141 = v28;
            }
            while (v136 + 2 < v134);
          }
          free(v130);
          a4 = v128;
          v5 = v129;
          goto LABEL_78;
        }
        v8 = 4294967293;
        goto LABEL_97;
    }
  }
  v122 = FigSignalErrorAt();
  if (!(_DWORD)v122)
  {
LABEL_78:
    CVPixelBufferUnlockBaseAddress(v159, 0);
    v123 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldPropagate);
    if (v123)
    {
      v124 = v123;
      CVBufferSetAttachments(v159, v123, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v124);
    }
    v125 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldNotPropagate);
    if (v125)
    {
      v126 = v125;
      CVBufferSetAttachments(v159, v125, kCVAttachmentMode_ShouldNotPropagate);
      CFRelease(v126);
    }
    v11 = 0;
    v8 = 0;
    *a4 = v159;
    v159 = 0;
    goto LABEL_83;
  }
  v8 = v122;
LABEL_97:
  v11 = 1;
LABEL_83:
  CVPixelBufferUnlockBaseAddress(v5, 1uLL);
LABEL_84:
  v9 = v159;
  if (v11 && v159)
  {
    CVPixelBufferUnlockBaseAddress(v159, 0);
LABEL_87:
    v9 = v159;
  }
LABEL_88:
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t CMPhotoPixelBufferPremultiplyWithAlpha(__CVBuffer *a1)
{
  int AlphaMode;
  OSType PixelFormatType;
  OSType v4;
  OSType v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t PixelBufferDataPointers;
  vImage_Error v12;
  vImage_Error v13;
  vImage_Buffer v15;
  vImage_Buffer src;

  if (a1)
  {
    if (CMPhotoPixelBufferIsOpaque(a1, 0))
      return 0;
    AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    if (PixelFormatType != 1815491698 && PixelFormatType != 1111970369)
      return 0;
    v4 = CVPixelBufferGetPixelFormatType(a1);
    v5 = v4;
    if (v4 != 1815491698 && v4 != 1111970369)
      return 0;
    src.data = 0;
    *(_OWORD *)&src.width = 0u;
    memset(&v15, 0, sizeof(v15));
    v6 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a1));
    v8 = vcvtad_u64_f64(v7);
    src.height = vcvtad_u64_f64(v10);
    src.width = vcvtad_u64_f64(v9);
    CVPixelBufferLockBaseAddress(a1, 0);
    PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v6, v8, 0, (uint64_t)&src, (uint64_t)&src.rowBytes, 0);
    if ((_DWORD)PixelBufferDataPointers)
    {
      v13 = PixelBufferDataPointers;
    }
    else
    {
      v15 = src;
      if (v5 == 1815491698)
      {
        if (AlphaMode == 1)
        {
          v13 = vImageUnpremultiplyData_RGBA16U(&src, &v15, 0);
          if ((_DWORD)v13)
            goto LABEL_20;
        }
        v13 = vImagePremultiplyData_RGBA16U(&src, &v15, 0);
        if ((_DWORD)v13)
          goto LABEL_20;
      }
      else if (v5 == 1111970369)
      {
        v12 = AlphaMode == 1 ? vImageClipToAlpha_RGBA8888(&src, &v15, 0) : vImagePremultiplyData_RGBA8888(&src, &v15, 0);
        v13 = v12;
        if ((_DWORD)v12)
          goto LABEL_20;
      }
      CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 0, 1);
      v13 = 0;
    }
LABEL_20:
    CVPixelBufferUnlockBaseAddress(a1, 0);
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPixelBufferBlendAlphaWithWhite(__CVBuffer *a1)
{
  double PixelBufferCLAPAsRect;
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t PixelBufferDataPointers;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if (CVPixelBufferGetPixelFormatType(a1) != 1111970369 || CMPhotoPixelBufferIsOpaque(a1, 0))
    return 0;
  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  v4 = v3;
  v6 = v5;
  v7 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  v9 = vcvtad_u64_f64(v8);
  CVPixelBufferLockBaseAddress(a1, 0);
  v23 = 0;
  v24 = 0;
  PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v7, v9, 0, (uint64_t)&v24, (uint64_t)&v23, 0);
  if ((_DWORD)PixelBufferDataPointers)
  {
    v21 = PixelBufferDataPointers;
  }
  else
  {
    v11 = vcvtad_u64_f64(v6);
    if (v11)
    {
      v12 = 0;
      v13 = vcvtad_u64_f64(v4);
      do
      {
        if (v13)
        {
          v14 = (_BYTE *)(v24 + v23 * v12 + 3);
          v15 = v13;
          do
          {
            v16 = *v14;
            v17 = v16 ^ 0xFF;
            v18 = (v16 ^ 0xFF) + (unsigned __int16)(*(v14 - 3) * (_WORD)v16 + 127) / 0xFFu;
            if (v18 >= 0xFF)
              LOBYTE(v18) = -1;
            *(v14 - 3) = v18;
            v19 = v17 + (unsigned __int16)(*(v14 - 2) * (_WORD)v16 + 127) / 0xFFu;
            if (v19 >= 0xFF)
              LOBYTE(v19) = -1;
            *(v14 - 2) = v19;
            v20 = v17 + (unsigned __int16)(*(v14 - 1) * (_WORD)v16 + 127) / 0xFFu;
            if (v20 >= 0xFF)
              LOBYTE(v20) = -1;
            *(v14 - 1) = v20;
            *v14 = -1;
            v14 += 4;
            --v15;
          }
          while (v15);
        }
        ++v12;
      }
      while (v12 != v11);
    }
    CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 1, 1);
    v21 = 0;
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return v21;
}

vImage_Error CMPhotoCreateAlphaFromMainBuffer(__CVBuffer *a1, int a2, CVPixelBufferRef *a3)
{
  uint64_t v6;
  signed int PixelFormatType;
  size_t Width;
  size_t Height;
  uint64_t v10;
  vImage_Error v11;
  int v12;
  vImage_Error v13;
  char *BaseAddress;
  char *BaseAddressOfPlane;
  size_t BytesPerRow;
  size_t BytesPerRowOfPlane;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  size_t v23;
  char v24;
  uint64_t v25;
  __int16 *v26;
  char *v27;
  __int16 *v28;
  size_t v29;
  __int16 v30;
  size_t HeightOfPlane;
  size_t v32;
  void *v33;
  __CVBuffer *v34;
  int AlphaMode;
  CVPixelBufferRef v36;
  vImage_Buffer dest;
  vImage_Buffer src;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = 0;
  if (!a1)
    goto LABEL_52;
  v6 = 1278226488;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (PixelFormatType <= 1279340599)
  {
    if (PixelFormatType == 843264056)
      goto LABEL_20;
    if (PixelFormatType == 843264310)
    {
LABEL_16:
      v6 = 1278226736;
      goto LABEL_20;
    }
    if (PixelFormatType != 1111970369)
      goto LABEL_52;
    goto LABEL_17;
  }
  if (PixelFormatType > 1380401728)
  {
    if (PixelFormatType != 1380401729)
    {
      if (PixelFormatType != 1815491698)
      {
LABEL_52:
        v10 = FigSignalErrorAt();
LABEL_53:
        v13 = v10;
LABEL_62:
        v36 = pixelBuffer;
        goto LABEL_63;
      }
      if (a2)
        v6 = 1936077360;
      else
        v6 = 1278226742;
      goto LABEL_20;
    }
LABEL_17:
    if (a2)
      v6 = 875704422;
    else
      v6 = 1278226488;
    goto LABEL_20;
  }
  if (PixelFormatType != 1279340600)
  {
    if (PixelFormatType != 1279340854)
      goto LABEL_52;
    goto LABEL_16;
  }
LABEL_20:
  v10 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v6, Width, Height, 1, 0, 0, 1, 0, 0, &pixelBuffer);
  if ((_DWORD)v10)
    goto LABEL_53;
  v10 = CVPixelBufferLockBaseAddress(a1, 0);
  if ((_DWORD)v10)
    goto LABEL_53;
  v11 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  v12 = v11;
  v13 = v11;
  if (!(_DWORD)v11)
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    if (a2)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    }
    else
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    }
    src.data = BaseAddress;
    src.height = Height;
    src.width = Width;
    src.rowBytes = BytesPerRow;
    dest.data = BaseAddressOfPlane;
    dest.height = Height;
    dest.width = Width;
    dest.rowBytes = BytesPerRowOfPlane;
    if (PixelFormatType <= 1279340599)
    {
      if (PixelFormatType == 843264056)
        goto LABEL_38;
      if (PixelFormatType == 843264310)
        goto LABEL_45;
      v18 = 1111970369;
    }
    else
    {
      if (PixelFormatType <= 1380401728)
      {
        if (PixelFormatType != 1279340600)
        {
LABEL_45:
          if (Height)
          {
            v25 = 0;
            v26 = (__int16 *)(BaseAddress + 2);
            do
            {
              if (Width)
              {
                v27 = &BaseAddressOfPlane[v25 * BytesPerRowOfPlane];
                v28 = v26;
                v29 = Width;
                do
                {
                  v30 = *v28;
                  v28 += 2;
                  *(_WORD *)v27 = v30 & 0xFFC0;
                  v27 += 2;
                  --v29;
                }
                while (v29);
              }
              ++v25;
              v26 = (__int16 *)((char *)v26 + BytesPerRow);
            }
            while (v25 != Height);
          }
LABEL_55:
          if (a2)
          {
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            v32 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            v33 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            bzero(v33, v32 * HeightOfPlane);
          }
          v34 = pixelBuffer;
          AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
          CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(v34, 0, AlphaMode);
          v13 = 0;
          if (a3)
          {
            *a3 = pixelBuffer;
            pixelBuffer = 0;
          }
          goto LABEL_59;
        }
LABEL_38:
        if (Height)
        {
          v19 = 0;
          v20 = BaseAddress + 1;
          do
          {
            if (Width)
            {
              v21 = &BaseAddressOfPlane[v19 * BytesPerRowOfPlane];
              v22 = v20;
              v23 = Width;
              do
              {
                v24 = *v22;
                v22 += 2;
                *v21++ = v24;
                --v23;
              }
              while (v23);
            }
            ++v19;
            v20 += BytesPerRow;
          }
          while (v19 != Height);
        }
        goto LABEL_55;
      }
      if (PixelFormatType == 1815491698)
      {
        v13 = vImageExtractChannel_ARGB16U(&src, &dest, 3, 0);
        if ((_DWORD)v13)
          goto LABEL_59;
        goto LABEL_55;
      }
      v18 = 1380401729;
    }
    if (PixelFormatType != v18)
    {
      v13 = FigSignalErrorAt();
      goto LABEL_59;
    }
    v13 = vImageExtractChannel_ARGB8888(&src, &dest, 3, 0);
    if ((_DWORD)v13)
      goto LABEL_59;
    goto LABEL_55;
  }
LABEL_59:
  CVPixelBufferUnlockBaseAddress(a1, 0);
  v36 = pixelBuffer;
  if (!v12 && pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    goto LABEL_62;
  }
LABEL_63:
  if (v36)
    CFRelease(v36);
  return v13;
}

uint64_t CMPhotoSurfacePoolCreatePixelBufferWithAttributes(const void *a1, uint64_t a2, size_t a3, size_t a4, const __CFDictionary *a5, CVPixelBufferRef *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CVPixelBufferRef v15;
  unint64_t DataSizeFromWidthAndHeight;
  size_t DataSize;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CVPixelBufferRef pixelBuffer;

  v23 = 64;
  pixelBuffer = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  if (!a6)
    return 4294950306;
  CMPhotoCFDictionaryGetSizeIfPresent(a5, (const void *)*MEMORY[0x1E0CA8F68], &v23);
  CMPhotoPixelBufferAttributesGetExtendedPixels(a5, &v21, &v22, &v20, &v19);
  if (v21 || v20)
    return FigSignalErrorAt();
  v12 = v22 + a3;
  v13 = v19 + a4;
  v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, a2, a3, a4, 1, v22 + a3, v19 + a4, 1, v23, a5, &pixelBuffer);
  v15 = pixelBuffer;
  if (!(_DWORD)v14)
  {
    if (!pixelBuffer)
      return 4294950194;
    DataSizeFromWidthAndHeight = CMPhotoGetDataSizeFromWidthAndHeight(a2, v12, v13);
    DataSize = CVPixelBufferGetDataSize(pixelBuffer);
    v15 = pixelBuffer;
    if (DataSize >= DataSizeFromWidthAndHeight)
    {
      v14 = 0;
      *a6 = pixelBuffer;
      return v14;
    }
    v14 = 4294950194;
  }
  if (v15)
    CFRelease(v15);
  return v14;
}

uint64_t CMPhotoPixelBufferAttributesGetExtendedPixels(const __CFDictionary *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E0CA8FB0], &v14);
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E0CA8FB8], &v13);
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E0CA8FC0], &v12);
  result = CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E0CA8FA0], &v11);
  if (a2)
    *a2 = v14;
  if (a3)
    *a3 = v13;
  if (a4)
    *a4 = v12;
  if (a5)
    *a5 = v11;
  return result;
}

uint64_t CMPhotoPixelBufferConvertRGBToYCbCrIdentityMatrix(const void *a1, int a2, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a4)
{
  OSType PixelFormatType;
  double PixelBufferSize;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t PixelBufferDataPointers;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFString *v23;
  CFTypeRef v24;
  const void *v25;
  uint64_t v26;
  __CVBuffer *v27;
  CVPixelBufferLockFlags v28;
  int v30;
  CVPixelBufferRef pixelBuffera;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  pixelBuffera = 0;
  PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBuffer);
  if (!a4)
    return 4294950306;
  *a4 = 0;
  if (PixelFormatType == 1111970369)
    v11 = 875836518;
  else
    v11 = 0;
  if (!PixelFormatType)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v12 = PixelBufferSize;
  v13 = v10;
  if (a2)
  {
    v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, v11, (unint64_t)PixelBufferSize, (unint64_t)v10, 1, 0, 0, 0, 0, 0, &pixelBuffera);
    if ((_DWORD)v14)
      goto LABEL_32;
  }
  else
  {
    v14 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v11, (unint64_t)PixelBufferSize, (unint64_t)v10, 0, 0, 0, 0, &pixelBuffera);
    if ((_DWORD)v14)
      goto LABEL_32;
  }
  v14 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  if (!(_DWORD)v14)
  {
    v15 = CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if ((_DWORD)v15)
    {
      v26 = v15;
    }
    else
    {
      v30 = 0;
      v37[0] = 0;
      v37[1] = 0;
      v36[0] = 0;
      v36[1] = 0;
      v34 = 0;
      v35 = 0;
      v32 = 0;
      v33 = 0;
      PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, &v30, (uint64_t)v37, (uint64_t)v36, 0);
      if ((_DWORD)PixelBufferDataPointers
        || (PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffera, 0, 0, &v30, (uint64_t)&v34, (uint64_t)&v32, 0), (_DWORD)PixelBufferDataPointers))
      {
        v26 = PixelBufferDataPointers;
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        v27 = pixelBuffera;
        v28 = 0;
        goto LABEL_25;
      }
      if (PixelFormatType == 1111970369 && v13 > 0.0)
      {
        v17 = 0;
        do
        {
          if (v12 > 0.0)
          {
            v18 = 0;
            v19 = (_BYTE *)(v37[0] + v36[0] * v17);
            v20 = (_BYTE *)(v35 + v33 * v17);
            v21 = v34 + v32 * v17;
            do
            {
              *v20 = *v19;
              *(_BYTE *)(v21 + v18) = v19[1];
              v20[1] = v19[2];
              ++v18;
              v19 += 4;
              v20 += 2;
            }
            while (v12 > (double)(int)v18);
          }
          ++v17;
        }
        while (v13 > (double)(int)v17);
      }
      CMPhotoPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
      v22 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
      CVBufferRemoveAttachment(pixelBuffera, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
      CVBufferSetAttachment(pixelBuffera, v22, (CFTypeRef)*MEMORY[0x1E0CA8F20], kCVAttachmentMode_ShouldPropagate);
      v23 = (const __CFString *)*MEMORY[0x1E0CA8D50];
      v24 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
      if (v24)
      {
        v25 = v24;
        CVBufferSetAttachment(pixelBuffera, v23, v24, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v25);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
      v26 = 0;
      *a4 = pixelBuffera;
      pixelBuffera = 0;
    }
    v27 = pixelBuffer;
    v28 = 1;
LABEL_25:
    CVPixelBufferUnlockBaseAddress(v27, v28);
    goto LABEL_26;
  }
LABEL_32:
  v26 = v14;
LABEL_26:
  if (pixelBuffera)
    CFRelease(pixelBuffera);
  return v26;
}

uint64_t CMPhotoPixelBufferConvertYCbCrIdentityMatrixToRGB(const void *a1, int a2, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a4)
{
  signed int PixelFormatType;
  double PixelBufferSize;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t PixelBufferDataPointers;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  __int16 *v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  char v42;
  const __CFString *v43;
  CFTypeRef v44;
  const void *v45;
  uint64_t v46;
  __CVBuffer *v47;
  CVPixelBufferLockFlags v48;
  CVPixelBufferRef pixelBuffera;
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  pixelBuffera = 0;
  PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBuffer);
  if (!a4)
    return 4294950306;
  v11 = PixelBufferSize;
  v12 = v10;
  *a4 = 0;
  if (CMPhotoPixelBufferHasUnhandledIdentityMatrix(pixelBuffer))
  {
    v13 = 1815491698;
    if (PixelFormatType > 1952855091)
    {
      if (PixelFormatType == 1952855092)
        goto LABEL_13;
      if (PixelFormatType == 2019963956)
      {
        v13 = 1815162994;
        goto LABEL_13;
      }
    }
    else
    {
      switch(PixelFormatType)
      {
        case 875836518:
          v13 = 1111970369;
          goto LABEL_13;
        case 1936077876:
          goto LABEL_13;
        case 0:
          v14 = FigSignalErrorAt();
LABEL_55:
          v46 = v14;
          goto LABEL_52;
      }
    }
    v13 = 0;
LABEL_13:
    v15 = (unint64_t)v11;
    v16 = (unint64_t)v12;
    if (a2)
    {
      v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, v13, v15, v16, 1, 0, 0, 0, 0, 0, &pixelBuffera);
      if ((_DWORD)v14)
        goto LABEL_55;
    }
    else
    {
      v14 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v13, v15, v16, 0, 0, 0, 0, &pixelBuffera);
      if ((_DWORD)v14)
        goto LABEL_55;
    }
    v14 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    if ((_DWORD)v14)
      goto LABEL_55;
    v17 = CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if ((_DWORD)v17)
    {
      v46 = v17;
LABEL_50:
      v47 = pixelBuffer;
      v48 = 1;
LABEL_51:
      CVPixelBufferUnlockBaseAddress(v47, v48);
      goto LABEL_52;
    }
    v55 = 0;
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v52[0] = 0;
    v52[1] = 0;
    v51[0] = 0;
    v51[1] = 0;
    PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, 0, (uint64_t)&v55, (uint64_t)&v53, 0);
    if ((_DWORD)PixelBufferDataPointers
      || (PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffera, 0, 0, 0, (uint64_t)v52, (uint64_t)v51, 0), (_DWORD)PixelBufferDataPointers))
    {
      v46 = PixelBufferDataPointers;
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      v47 = pixelBuffera;
      v48 = 0;
      goto LABEL_51;
    }
    if (PixelFormatType > 1952855091)
    {
      if (PixelFormatType != 1952855092)
      {
        if (PixelFormatType == 2019963956 && v12 > 0.0)
        {
          v19 = 0;
          do
          {
            if (v11 > 0.0)
            {
              v20 = 0;
              v21 = (unsigned __int16 *)(v56 + v54 * v19);
              v22 = v55 + v53 * v19;
              v23 = v52[0] + v51[0] * v19;
              do
              {
                *(_DWORD *)(v23 + 4 * v20) = (16 * *(unsigned __int16 *)(v22 + 2 * v20)) & 0xFFC00 | (((v21[1] >> 6) & 0x3FF) << 20) | (*v21 >> 6) | 0xC0000000;
                ++v20;
                v21 += 2;
              }
              while (v11 > (double)(int)v20);
            }
            ++v19;
          }
          while (v12 > (double)(int)v19);
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (PixelFormatType == 875836518)
      {
        if (v12 > 0.0)
        {
          v36 = 0;
          do
          {
            if (v11 > 0.0)
            {
              v37 = 0;
              v38 = (_BYTE *)(v52[0] + v51[0] * v36);
              v39 = (_BYTE *)(v56 + v54 * v36);
              v40 = v55 + v53 * v36;
              do
              {
                v41 = *(_BYTE *)(v40 + v37);
                v42 = v39[1];
                *v38 = *v39;
                v38[1] = v41;
                v38[2] = v42;
                v38[3] = -1;
                ++v37;
                v39 += 2;
                v38 += 4;
              }
              while (v11 > (double)(int)v37);
            }
            ++v36;
          }
          while (v12 > (double)(int)v36);
        }
        goto LABEL_47;
      }
      if (PixelFormatType != 1936077876)
      {
LABEL_47:
        CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(pixelBuffera, 1, 2);
        CMPhotoPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
        v43 = (const __CFString *)*MEMORY[0x1E0CA8D50];
        v44 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
        if (v44)
        {
          v45 = v44;
          CVBufferSetAttachment(pixelBuffera, v43, v44, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v45);
        }
        CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
        v46 = 0;
        *a4 = pixelBuffera;
        pixelBuffera = 0;
        goto LABEL_50;
      }
    }
    if (v12 > 0.0)
    {
      v24 = 0;
      v25 = v55;
      v26 = v56;
      v27 = v53;
      v28 = v54;
      v29 = v52[0];
      v30 = v51[0];
      do
      {
        if (v11 > 0.0)
        {
          v31 = 0;
          v32 = (_WORD *)(v29 + v30 * v24);
          v33 = (__int16 *)(v26 + v28 * v24);
          do
          {
            v34 = *(_WORD *)(v25 + 2 * v31);
            v35 = *v33;
            *v32 = v33[1];
            v32[1] = v34;
            v32[2] = v35;
            v32[3] = -1;
            ++v31;
            v33 += 2;
            v32 += 4;
          }
          while (v11 > (double)(int)v31);
        }
        ++v24;
        v25 += v27;
      }
      while (v12 > (double)(int)v24);
    }
    goto LABEL_47;
  }
  v46 = 4294950299;
LABEL_52:
  if (pixelBuffera)
    CFRelease(pixelBuffera);
  return v46;
}

uint64_t CMPhotoGetChromaLocationCodePointForString(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (FigCFEqual())
    return 0;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 2;
  if (FigCFEqual())
    return 3;
  v1 = 4;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
      return 4;
    else
      return 0xFFFFFFFFLL;
  }
  return v1;
}

void CMPhotoRemoveColorInformationGuessedBy(__CVBuffer *a1)
{
  CFTypeRef v2;
  const void *v3;

  if (a1)
  {
    v2 = CVBufferCopyAttachment(a1, CFSTR("ColorInfoGuessedBy"), 0);
    if (v2)
    {
      v3 = v2;
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8]);
      CVBufferRemoveAttachment(a1, CFSTR("ColorInfoGuessedBy"));
      CFRelease(v3);
    }
  }
}

uint64_t CMPhotoPixelFormatToAppleJPEGFormat(int a1, int *a2)
{
  uint64_t result;
  int v4;

  result = 4294950301;
  if (a1 > 1278226735)
  {
    if (a1 > 1380401728)
    {
      if (a1 <= 1815491697)
      {
        if (a1 == 1380401729)
        {
          v4 = 3;
        }
        else
        {
          if (a1 != 1647589490)
            return result;
          v4 = 20;
        }
        goto LABEL_27;
      }
      if (a1 != 1932996149)
      {
        if (a1 != 1815491698)
          return result;
        v4 = 16;
        goto LABEL_27;
      }
    }
    else if ((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0)
    {
      if (a1 != 1278555701)
        return result;
      v4 = 1;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (a1 > 875704421)
  {
    if (a1 > 1111970368)
    {
      if (a1 == 1111970369)
      {
        v4 = 4;
      }
      else
      {
        if (a1 != 1278226488)
          return result;
        v4 = 5;
      }
    }
    else if (a1 == 875704422)
    {
      v4 = 10;
    }
    else
    {
      if (a1 != 875704934)
        return result;
      v4 = 8;
    }
    goto LABEL_27;
  }
  if (a1 == 24)
  {
    v4 = 0;
    goto LABEL_27;
  }
  if (a1 == 825306677 || a1 == 825437747)
  {
LABEL_26:
    v4 = 18;
LABEL_27:
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(const __CFString *a1)
{
  if (!a1)
    return 2;
  if (FigCFEqual())
    return 0;
  return CVYCbCrMatrixGetIntegerCodePointForString(a1);
}

uint64_t CMPhotoCreateEvenPixelBufferWithBacking(__CVBuffer *a1, size_t a2, size_t a3, CVPixelBufferRef *a4)
{
  size_t PlaneCount;
  __CFArray *v9;
  uint64_t v10;
  OSType PixelFormatType;
  unint64_t Width;
  unint64_t Height;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  size_t BytesPerRowOfPlane;
  size_t v18;
  size_t DataSize;
  __IOSurface *IOSurface;
  __IOSurface *v21;
  __IOSurface *v22;
  BOOL v24;
  BOOL v25;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v27;
  void *v28;
  const __CFArray *Value;
  const __CFArray *v30;
  const __CFArray *v31;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v33;
  __CFDictionary *v34;
  uint64_t v35;
  __IOSurface *ChildSurface;
  __CVBuffer *v37;
  uint64_t v38;
  void *key;
  CVPixelBufferRef *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  OSType v45;
  CVPixelBufferRef pixelBufferOut;
  size_t planeBytesPerRow[2];
  size_t v48[2];
  size_t planeWidth[2];
  void *planeBaseAddress[2];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  pixelBufferOut = 0;
  if (!a1)
    return 4294950306;
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v9 = 0;
  v10 = 4294950306;
  if (!a4 || PlaneCount != 2)
    goto LABEL_61;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = (unint64_t)(double)CVPixelBufferGetWidth(a1);
  Height = (unint64_t)(double)CVPixelBufferGetHeight(a1);
  v14 = a2 == Width && a3 == Height;
  if (v14
    || (a2 != Width ? (v15 = a2 == Width + 1) : (v15 = 1),
        !v15 || (a3 != Height ? (v16 = a3 == Height + 1) : (v16 = 1), !v16)))
  {
    v9 = 0;
    goto LABEL_61;
  }
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  if (a2 != Width && BytesPerRowOfPlane < CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType) * a2
    || (DataSize = CVPixelBufferGetDataSize(a1),
        DataSize < BytesPerRowOfPlane * a3 + CVPixelBufferGetHeightOfPlane(a1, 1uLL) * v18))
  {
    v9 = 0;
    v10 = 4294950306;
    goto LABEL_61;
  }
  IOSurface = CVPixelBufferGetIOSurface(a1);
  v43 = v18;
  v44 = BytesPerRowOfPlane;
  if (IOSurface)
  {
    v45 = PixelFormatType;
    v42 = DataSize;
    v21 = (__IOSurface *)IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBBFA0]);
    if (v21)
    {
      v22 = v21;
      *(_OWORD *)planeBaseAddress = 0u;
      v51 = 0u;
      IOSurfaceGetExtendedPixelsOfPlane();
      v9 = 0;
      v24 = a3 != Height && *((_QWORD *)&v51 + 1) == 0;
      if (planeBaseAddress[1])
        v25 = 1;
      else
        v25 = a2 == Width;
      v10 = 4294950306;
      if (!v25)
        goto LABEL_81;
      if (v24)
      {
LABEL_54:
        CFRelease(v22);
        goto LABEL_55;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v22);
      if (MutableCopy)
      {
        v27 = MutableCopy;
        v41 = a4;
        v28 = (void *)*MEMORY[0x1E0CBC158];
        Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC158]);
        if (Value && (v30 = Value, CFArrayGetCount(Value) == 2))
        {
          v31 = CFArrayCreateMutableCopy(0, 0, v30);
          v9 = v31;
          if (v31)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, 0);
            if (ValueAtIndex)
            {
              key = v28;
              v33 = CFDictionaryCreateMutableCopy(0, 0, ValueAtIndex);
              v34 = v33;
              if (v33)
              {
                v35 = CMPhotoCFDictionarySetInt(v33, (const void *)*MEMORY[0x1E0CBC178], a2);
                if ((_DWORD)v35
                  || (v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E0CBC140], a3), (_DWORD)v35)
                  || a2 != Width
                  && (v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E0CBC120], LODWORD(planeBaseAddress[1]) - 1), (_DWORD)v35)|| a3 != Height&& (v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E0CBC118], DWORD2(v51) - 1), (_DWORD)v35)|| (v35 = CMPhotoCFDictionarySetInt(v27, (const void *)*MEMORY[0x1E0CBC1E0], a2), (_DWORD)v35))
                {
                  v10 = v35;
                }
                else
                {
                  v10 = CMPhotoCFDictionarySetInt(v27, (const void *)*MEMORY[0x1E0CBC008], a3);
                  if (!(_DWORD)v10)
                  {
                    CFArraySetValueAtIndex(v9, 0, v34);
                    CFDictionarySetValue(v27, key, v9);
                    CFRelease(v9);
                    v9 = v27;
                    v27 = v34;
                    goto LABEL_51;
                  }
                }
              }
              else
              {
                v10 = 4294950305;
              }
            }
            else
            {
              v34 = 0;
              v10 = 4294950304;
            }
            CFRelease(v27);
            CFRelease(v9);
            v9 = 0;
            v27 = v34;
            if (!v34)
            {
              a4 = v41;
              goto LABEL_81;
            }
          }
          else
          {
            v10 = 4294950305;
          }
        }
        else
        {
          v9 = 0;
          v10 = 4294950304;
        }
LABEL_51:
        CFRelease(v27);
        CFRelease(v22);
        if ((_DWORD)v10)
        {
          a4 = v41;
          PixelFormatType = v45;
        }
        else
        {
          ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
          a4 = v41;
          PixelFormatType = v45;
          if (ChildSurface)
          {
            v22 = ChildSurface;
            v10 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
            goto LABEL_54;
          }
          v10 = 4294950305;
        }
LABEL_55:
        v37 = pixelBufferOut;
        DataSize = v42;
        if (pixelBufferOut)
          goto LABEL_66;
        goto LABEL_58;
      }
      v9 = 0;
      v10 = 4294950305;
LABEL_81:
      PixelFormatType = v45;
      goto LABEL_54;
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
  }
LABEL_58:
  v38 = CVPixelBufferLockBaseAddress(a1, 0);
  if (!(_DWORD)v38)
  {
    planeBaseAddress[0] = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    planeBaseAddress[1] = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    planeWidth[0] = a2;
    planeWidth[1] = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v48[0] = a3;
    v48[1] = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    planeBytesPerRow[0] = v44;
    planeBytesPerRow[1] = v43;
    v10 = CVPixelBufferCreateWithPlanarBytes(0, a2, a3, PixelFormatType, 0, DataSize, 2uLL, planeBaseAddress, planeWidth, v48, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)_wrappingBufferReleaseCallback, a1, 0, &pixelBufferOut);
    if ((_DWORD)v10)
    {
      CVPixelBufferUnlockBaseAddress(a1, 0);
      goto LABEL_61;
    }
    CFRetain(a1);
    v37 = pixelBufferOut;
LABEL_66:
    CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v37);
    *a4 = pixelBufferOut;
    pixelBufferOut = 0;
    if (!v9)
      return v10;
LABEL_67:
    CFRelease(v9);
    return v10;
  }
  v10 = v38;
LABEL_61:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v9)
    goto LABEL_67;
  return v10;
}

void _wrappingBufferReleaseCallback(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CFRelease(a1);
  }
}

uint64_t CMPhotoCreateOtherRangePixelBufferWithBacking(__CVBuffer *a1, CVPixelBufferRef *a2)
{
  size_t PlaneCount;
  __CFDictionary *MutableCopy;
  uint64_t v6;
  uint64_t PixelFormatType;
  OSType FullRangeForPixelFormat;
  OSType v9;
  size_t Width;
  size_t Height;
  size_t BytesPerRowOfPlane;
  size_t v13;
  size_t DataSize;
  __IOSurface *IOSurface;
  CVPixelBufferRef *v16;
  CFTypeRef v17;
  const void *v18;
  __IOSurface *ChildSurface;
  __IOSurface *v20;
  __CVBuffer *v21;
  uint64_t v22;
  size_t v24;
  CVPixelBufferRef pixelBufferOut;
  size_t planeBytesPerRow[2];
  size_t v27[2];
  size_t planeWidth[2];
  void *planeBaseAddress[3];

  planeBaseAddress[2] = *(void **)MEMORY[0x1E0C80C00];
  pixelBufferOut = 0;
  if (!a1)
    return 4294950306;
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  MutableCopy = 0;
  v6 = 4294950306;
  if (!a2 || PlaneCount != 2)
    goto LABEL_23;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (!CMPhotoPixelFormatContainsYCbCr(PixelFormatType)
    || (!CMPhotoPixelFormatIsFullRange(PixelFormatType)
      ? (FullRangeForPixelFormat = CMPhotoGetFullRangeForPixelFormat(PixelFormatType))
      : (FullRangeForPixelFormat = CMPhotoGetVideoRangeForPixelFormat(PixelFormatType)),
        (v9 = FullRangeForPixelFormat) == 0))
  {
    MutableCopy = 0;
    goto LABEL_23;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v13 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  DataSize = CVPixelBufferGetDataSize(a1);
  IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!IOSurface)
  {
    MutableCopy = 0;
    goto LABEL_20;
  }
  v24 = DataSize;
  v16 = a2;
  v17 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBBFA0]);
  if (!v17)
  {
    MutableCopy = 0;
LABEL_19:
    a2 = v16;
    DataSize = v24;
LABEL_20:
    v22 = CVPixelBufferLockBaseAddress(a1, 0);
    if ((_DWORD)v22)
    {
      v6 = v22;
    }
    else
    {
      planeBaseAddress[0] = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      planeBaseAddress[1] = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      planeWidth[0] = (unint64_t)(double)Width;
      planeWidth[1] = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
      v27[0] = (unint64_t)(double)Height;
      v27[1] = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
      planeBytesPerRow[0] = BytesPerRowOfPlane;
      planeBytesPerRow[1] = v13;
      v6 = CVPixelBufferCreateWithPlanarBytes(0, (unint64_t)(double)Width, (unint64_t)(double)Height, v9, 0, DataSize, 2uLL, planeBaseAddress, planeWidth, v27, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)_wrappingBufferReleaseCallback, a1, 0, &pixelBufferOut);
      if (!(_DWORD)v6)
      {
        CFRetain(a1);
        v21 = pixelBufferOut;
        goto LABEL_26;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
    }
LABEL_23:
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
    goto LABEL_27;
  }
  v18 = v17;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFRelease(v18);
  if (!MutableCopy)
    goto LABEL_19;
  CMPhotoCFDictionarySetInt32(MutableCopy, (const void *)*MEMORY[0x1E0CBC070], v9);
  ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
  if (!ChildSurface)
    goto LABEL_19;
  v20 = ChildSurface;
  v6 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
  CFRelease(v20);
  v21 = pixelBufferOut;
  if (!pixelBufferOut)
    goto LABEL_19;
  a2 = v16;
LABEL_26:
  CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v21);
  *a2 = pixelBufferOut;
  pixelBufferOut = 0;
LABEL_27:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v6;
}

uint64_t CMPhotoPixelFormatIsWrappableAsGrayscale(int a1, int *a2)
{
  uint64_t result;
  int v4;

  result = 0;
  v4 = 1278226488;
  if (a1 > 1952854575)
  {
    if (a1 > 2019963439)
    {
      if (a1 == 2019963440 || a1 == 2019963956 || a1 == 2019963442)
      {
        v4 = 1278226736;
        if (!a2)
          return 1;
        goto LABEL_18;
      }
    }
    else if (a1 == 1952854576 || a1 == 1952854578 || a1 == 1952855092)
    {
      v4 = 1278226738;
      if (!a2)
        return 1;
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 <= 1936077359)
    {
      if (a1 != 875704422 && a1 != 875704934 && a1 != 875836518)
        return result;
LABEL_17:
      if (!a2)
        return 1;
LABEL_18:
      *a2 = v4;
      return 1;
    }
    if (a1 == 1936077360 || a1 == 1936077362 || a1 == 1936077876)
    {
      v4 = 1278226742;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t CMPhotoWrapLumaPlaneAsGrayscale(__CVBuffer *a1, CVPixelBufferRef *a2)
{
  uint64_t v2;
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  size_t BytesPerRowOfPlane;
  __IOSurface *IOSurface;
  CFTypeRef v10;
  const void *v11;
  const __CFDictionary *MutableCopy;
  const void *v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  __IOSurface *ChildSurface;
  __IOSurface *v25;
  __CVBuffer *v26;
  uint64_t v28;
  OSType v29;
  void *BaseAddressOfPlane;
  OSType v31;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v2 = 4294950306;
  if (!a1 || !a2)
    return v2;
  if (CMPhotoPixelBufferHasUnhandledIdentityMatrix(a1))
  {
    MutableCopy = 0;
    v2 = 4294950302;
    goto LABEL_31;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v31 = 0;
  if (!CMPhotoPixelFormatIsWrappableAsGrayscale(PixelFormatType, (int *)&v31))
  {
    MutableCopy = 0;
    goto LABEL_31;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = (unint64_t)(double)CVPixelBufferGetHeight(a1);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  IOSurface = CVPixelBufferGetIOSurface(a1);
  v2 = (uint64_t)IOSurface;
  if (!IOSurface)
  {
    MutableCopy = 0;
    goto LABEL_23;
  }
  v10 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBBFA0]);
  if (v10)
  {
    v11 = v10;
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFRelease(v11);
    if (!MutableCopy)
    {
LABEL_34:
      v2 = 4294950305;
      goto LABEL_23;
    }
    v13 = (const void *)*MEMORY[0x1E0CBC158];
    Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC158]);
    if (Value)
    {
      v15 = Value;
      if (CFArrayGetCount(Value) == 2)
      {
        v16 = CFArrayCreateMutableCopy(0, 0, v15);
        if (v16)
        {
          v17 = v16;
          CFDictionarySetValue(MutableCopy, v13, v16);
          CFRelease(v17);
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, 0);
          if (!ValueAtIndex)
          {
            v2 = 4294950304;
            goto LABEL_31;
          }
          v19 = ValueAtIndex;
          CFArrayRemoveValueAtIndex(v17, 1);
          CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E0CBBEE0], BytesPerRowOfPlane * Height);
          CMPhotoCFDictionarySetInt32(MutableCopy, (const void *)*MEMORY[0x1E0CBC070], v31);
          v20 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CBC098]);
          if (v20)
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBBF08], v20);
          v21 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CBC090]);
          if (v21)
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBBF00], v21);
          v22 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CBC110]);
          if (v22)
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBBFC0], v22);
          v23 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CBC108]);
          if (v23)
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBBFB8], v23);
          ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
          if (ChildSurface)
          {
            v25 = ChildSurface;
            v2 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
            CFRelease(v25);
            goto LABEL_23;
          }
        }
        goto LABEL_34;
      }
    }
  }
  else
  {
    MutableCopy = 0;
  }
  v2 = 4294950304;
LABEL_23:
  v26 = pixelBufferOut;
  if (!pixelBufferOut)
  {
    v28 = CVPixelBufferLockBaseAddress(a1, 0);
    if ((_DWORD)v28)
    {
      v2 = v28;
    }
    else
    {
      v29 = v31;
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      v2 = CVPixelBufferCreateWithBytes(0, (unint64_t)(double)Width, Height, v29, BaseAddressOfPlane, BytesPerRowOfPlane, (CVPixelBufferReleaseBytesCallback)_wrappingLumaBufferReleaseCallback, a1, 0, &pixelBufferOut);
      if (!(_DWORD)v2)
      {
        CFRetain(a1);
        v26 = pixelBufferOut;
        goto LABEL_24;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
    }
LABEL_31:
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
    goto LABEL_25;
  }
LABEL_24:
  CVBufferPropagateAttachments(a1, v26);
  CMPhotoRemoveChromaInformationFromBuffer(pixelBufferOut);
  CVBufferRemoveAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
  *a2 = pixelBufferOut;
  pixelBufferOut = 0;
LABEL_25:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v2;
}

void _wrappingLumaBufferReleaseCallback(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CFRelease(a1);
  }
}

const __CFDictionary *CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(const __CFDictionary *result, _QWORD *a2)
{
  if (a2)
    return (const __CFDictionary *)CMPhotoPixelBufferAttributesGetExtendedPixels(result, a2, a2 + 1, a2 + 2, a2 + 3);
  return result;
}

uint64_t CMPhotoApplyMagmaMap(__CVBuffer *a1, __CVBuffer *a2)
{
  OSType PixelFormatType;
  uint64_t v5;
  __CVBuffer *v6;
  double v7;
  double v8;
  char *BaseAddressOfPlane;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  unsigned int v14;
  double v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  double v22;
  double v23;
  float *v24;
  char *v25;
  _DWORD *v26;
  float *v27;
  float *v28;
  char *v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  float v38;
  double v39;
  uint64_t v40;
  int v42;
  int BytesPerRowOfPlane;
  unsigned int v44;
  __CVBuffer *pixelBuffer;
  __CVBuffer *v46;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2
    || (PixelFormatType = CVPixelBufferGetPixelFormatType(a1), PixelFormatType != CVPixelBufferGetPixelFormatType(a2))
    || PixelFormatType != 1919365990)
  {
LABEL_29:
    v5 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v5 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x100uLL, 1uLL, 0x72673366u, 0, &pixelBufferOut);
  if (!(_DWORD)v5)
  {
    v6 = pixelBufferOut;
    if (pixelBufferOut
      && CVPixelBufferGetPixelFormatType(pixelBufferOut) == 1919365990
      && (CMPhotoGetPixelBufferCLAPAsRect(v6), (unint64_t)v8 == 256)
      && (unint64_t)v7 == 1)
    {
      CVPixelBufferLockBaseAddress(v6, 0);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
      v10 = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 1uLL);
      v11 = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 2uLL);
      v12 = 0;
      v13 = &dword_1A8289F88;
      do
      {
        *(_DWORD *)&BaseAddressOfPlane[v12] = *(v13 - 1);
        *(_DWORD *)&v10[v12] = *v13;
        *(_DWORD *)&v11[v12] = v13[1];
        v12 += 4;
        v13 += 3;
      }
      while (v12 != 1024);
      CVPixelBufferUnlockBaseAddress(v6, 0);
      v14 = 0;
    }
    else
    {
      v14 = FigSignalErrorAt();
    }
    CMPhotoGetPixelBufferCLAPAsRect(a1);
    v16 = (unint64_t)v15;
    v18 = (unint64_t)v17;
    CMPhotoGetPixelBufferCLAPAsRect(a2);
    if (v16 == (unint64_t)v20 && v18 == (unint64_t)v19)
    {
      v44 = v14;
      CMPhotoGetPixelBufferCLAPAsRect(pixelBufferOut);
      v23 = v22;
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      v42 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      v26 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
      v27 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      v46 = a1;
      v28 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      v29 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      pixelBuffer = a2;
      v30 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      v31 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
      v32 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
      if (v18)
      {
        v33 = 0;
        v34 = (unint64_t)v23;
        v35 = 4 * (BytesPerRowOfPlane / 4);
        v36 = 4 * (v42 / 4);
        do
        {
          if (v16)
          {
            for (i = 0; i != v16; ++i)
            {
              v38 = v27[i];
              v39 = (float)(v28[i] * 255.0) + 0.5;
              *(_DWORD *)&v25[4 * i] = v26[(int)((int)((float)(v24[i] * 255.0) + 0.5) % v34)];
              *(_DWORD *)&v29[4 * i] = v31[(int)((int)((float)(v38 * 255.0) + 0.5) % v34)];
              *(_DWORD *)&v30[4 * i] = v32[(int)((int)v39 % v34)];
            }
          }
          ++v33;
          v24 = (float *)((char *)v24 + v35);
          v27 = (float *)((char *)v27 + v35);
          v28 = (float *)((char *)v28 + v35);
          v25 += v36;
          v29 += v36;
          v30 += v36;
        }
        while (v33 != v18);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v46, 0);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      v40 = v44;
      goto LABEL_25;
    }
    goto LABEL_29;
  }
LABEL_30:
  v40 = v5;
LABEL_25:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v40;
}

void _callbackDataProviderReleaseSurface(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 1u, 0);
  IOSurfaceDecrementUseCount(a1);
  if (a1)
    CFRelease(a1);
}

void _setVUITripletsIfMatching(CGColorSpace *a1, __CFDictionary *a2, uint64_t a3, const void *a4, const void *a5)
{
  CFIndex v10;
  CFIndex Count;
  CFArrayRef theArray;
  uint64_t v13;

  if (a2)
  {
    FigCFDictionarySetValue();
    theArray = 0;
    v13 = 0;
    CMPhotoGetTripletsForColorSpace(a1, a3, &v13, 0, 0);
    CMPhotoCreateAllowedTransferArrayForColorSpace(a1, &theArray);
    if (a4 && FigCFEqual())
      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0CA8D68], a4);
    if (a5)
    {
      v10 = 0;
      while (1)
      {
        Count = (CFIndex)theArray;
        if (theArray)
          Count = CFArrayGetCount(theArray);
        if (v10 >= Count)
          break;
        CFArrayGetValueAtIndex(theArray, v10++);
        if (FigCFEqual())
        {
          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0CA8E98], a5);
          break;
        }
      }
    }
    if (theArray)
      CFRelease(theArray);
  }
}

uint64_t ___cmphotoWritePixelBufferToURL_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = FigFileForkWrite();
  if (!(_DWORD)result)
  {
    if (a3)
      return FigSignalErrorAt();
    else
      return 0;
  }
  return result;
}

uint64_t VTCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  int v4;
  char *v6;
  uint64x2_t *v7;
  __int128 v8;
  const void *Value;
  uint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  CFTypeRef v14;
  int v15;
  int v16;
  CGPoint v18[10];
  int v19;
  int v20;
  __int8 v21;
  __int16 v22;
  char v23;

  pthread_once(&_checkFigNoteTraceOnce_onceToken, (void (*)(void))_registerFigNoteTrace);
  v23 = 1;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 != 1752589105 && v4 != 1635148593)
    return 4294950298;
  v19 = 1;
  v6 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7759597uLL);
  if (!v6)
    return 4294950305;
  v7 = (uint64x2_t *)v6;
  v8 = *(_OWORD *)(a1 + 84);
  *((_QWORD *)v6 + 19) = *(_QWORD *)(a1 + 100);
  *(_OWORD *)(v6 + 136) = v8;
  *((_OWORD *)v6 + 3) = kCMPhotoMinimumSourceAlignment;
  if (a2)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseCodecSessionPool"), &v22);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ForceHighSpeedEncode"), &v21);
    CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("Priority"), &v20);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("AllowPixelTransfer"), &v23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UsePixelsOutsideCrop"), (_BYTE *)&v22 + 1);
    if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("QualityControllerType"), &v19))
      Value = CFDictionaryGetValue(a2, CFSTR("QualityControllerParameters"));
    else
      Value = 0;
    v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("CustomMinimumSourceAlignment"));
    if (v11)
    {
      v12 = v11;
      v13 = CFGetTypeID(v11);
      if (v13 == CFDictionaryGetTypeID())
      {
        v18[0] = 0uLL;
        CGPointMakeWithDictionaryRepresentation(v12, v18);
        if (v18[0].x > 0.0 && v18[0].y > 0.0)
          v7[3] = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v18[0]));
      }
    }
    if (CFDictionaryContainsKey(a2, CFSTR("SyncEncode")))
    {
      v10 = FigSignalErrorAt();
      v7->i8[0] = (v7->u8[0] | v10) != 0;
      memset(v18, 0, 144);
      v18[9] = (CGPoint)(unint64_t)v7;
      VTCompressionPluginClass_dispose((uint64_t)v18);
      return v10;
    }
  }
  else
  {
    Value = 0;
  }
  v7[2].i32[1] = _getAccelerationMode(a2);
  v7[2].i8[9] = (_BYTE)v22 != 0;
  v7[2].i8[10] = v21;
  v7[2].i8[8] = HIBYTE(v22);
  v7[2].i8[0] = v23;
  v7[10].i32[0] = v19;
  if (Value)
    v14 = CFRetain(Value);
  else
    v14 = 0;
  v7[10].i64[1] = (uint64_t)v14;
  LODWORD(v18[0].x) = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("Priority"), v18);
  v10 = 0;
  if (LODWORD(v18[0].x) == 1)
    v15 = -20;
  else
    v15 = 0;
  if (LODWORD(v18[0].x) == 2)
    v16 = 90;
  else
    v16 = v15;
  v7[4].i32[2] = v16;
  v7[7].i8[0] = 0;
  *(_QWORD *)(a1 + 144) = v7;
  return v10;
}

uint64_t VTCompressionPluginClass_canBeReused(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, const __CFDictionary *a6, _BYTE *a7)
{
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  const void *Value;
  uint64_t v19;
  uint64_t EncoderPropertiesFromSource;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;
  const void *v25;
  int v26;
  char v27;
  char v28;
  char AccelerationMode;
  _BYTE v31[21];
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  _BYTE v37[21];
  CFTypeRef *v38;
  unsigned int v39[3];

  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(const void **)a1;
  v39[0] = 9;
  v38 = 0;
  v9 = a2[1];
  if (v9 == 1752589105 || v9 == 1635148593)
  {
    v39[0] = 1;
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("QualityControllerType"), v39))
      Value = CFDictionaryGetValue(theDict, CFSTR("QualityControllerParameters"));
    else
      Value = 0;
    EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v8, a2[11], v39[0], a3, a4, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), Value, a2[1], *((_BYTE *)a2 + 8), &v38);
    if (!(_DWORD)EncoderPropertiesFromSource)
    {
      v21 = a7;
      memset(v37, 0, sizeof(v37));
      CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v38, (uint64_t)v37);
      AccelerationMode = _getAccelerationMode(theDict);
      v36 = 1;
      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("AllowPixelTransfer"), &v36);
      *(_DWORD *)v31 = 0;
      CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("Priority"), v31);
      v22 = *(_DWORD *)v31 == 1 ? -20 : 0;
      v23 = *(_DWORD *)v31 == 2 ? 90 : v22;
      v35 = 0;
      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("ForceHighSpeedEncode"), &v35);
      v34 = 2;
      v32 = -1;
      v33 = 0x200000002;
      EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a6, *a2, 0, *((unsigned __int8 *)a2 + 8), (uint64_t)&v33, (uint64_t)&v32);
      if (!(_DWORD)EncoderPropertiesFromSource)
      {
        v24 = *(_QWORD *)(a1 + 24);
        v25 = *(const void **)(v7 + 24);
        v26 = *a2;
        v27 = v36;
        v28 = v35;
        if (!*(_BYTE *)(a1 + 48) && _sourceFrameCountEnabled_onceToken != -1)
          dispatch_once(&_sourceFrameCountEnabled_onceToken, &__block_literal_global_0);
        *(_OWORD *)v31 = *(_OWORD *)v37;
        *(_QWORD *)&v31[13] = *(_QWORD *)&v37[13];
        EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCheckIfCompressionSessionReusable(v24, v25, (uint64_t)v31, a3, a4, v26, AccelerationMode, 0, v27, v23, v28, v33, v34, v32, 0, v21);
      }
    }
    v19 = EncoderPropertiesFromSource;
  }
  else
  {
    v19 = 4294950298;
  }
  CMPhotoVideoQualityControllerDispose(v38);
  return v19;
}

void VTCompressionPluginClass_dispose(uint64_t a1)
{
  unsigned __int8 *v2;
  OpaqueVTCompressionSession *v3;
  void *v4;
  const void *v5;
  const void *v6;
  CMTime v7;

  if (a1)
  {
    v2 = *(unsigned __int8 **)(a1 + 144);
    if (v2)
    {
      v3 = (OpaqueVTCompressionSession *)*((_QWORD *)v2 + 3);
      if (v3)
      {
        v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        VTCompressionSessionCompleteFrames(v3, &v7);
        if (v2[41])
          CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v2 + 3), *v2);
        else
          VTCompressionSessionInvalidate(*((VTCompressionSessionRef *)v2 + 3));
      }
      v4 = (void *)*((_QWORD *)v2 + 15);
      if (v4)
      {
        if (!v2[128]
          || (CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v4, 1uLL),
              v2[128] = 0,
              (v4 = (void *)*((_QWORD *)v2 + 15)) != 0))
        {
          CFRelease(v4);
          *((_QWORD *)v2 + 15) = 0;
        }
      }
      v5 = (const void *)*((_QWORD *)v2 + 3);
      if (v5)
      {
        CFRelease(v5);
        *((_QWORD *)v2 + 3) = 0;
      }
      CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v2 + 22));
      v6 = (const void *)*((_QWORD *)v2 + 21);
      if (v6)
        CFRelease(v6);
      free(v2);
    }
  }
}

uint64_t VTCompressionPluginClass_prepare(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  const __CFAllocator *v4;
  unsigned __int8 *v6;
  OpaqueVTCompressionSession *v10;
  const void *v11;
  __CFDictionary *Mutable;
  uint64_t EncoderPropertiesFromSource;
  int *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;
  uint64_t v21;
  const __CFDictionary *v22;
  uint64_t v23;
  const __CFString *URNFromAuxiliaryImageType;
  __CFDictionary *v25;
  uint64_t v26;
  const void *v27;
  const void **v28;
  const void **v29;
  int v30;
  int v31;
  const void **v32;
  uint64_t v33;
  OpaqueVTCompressionSession *v34;
  VTCompressionSessionRef v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  _BYTE v41[21];
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  CMTime completeUntilPresentationTimeStamp;
  char v46;
  __CFDictionary *v47;
  const __CFDictionary *propertyValueOut;
  const __CFDictionary *v49;
  VTCompressionSessionRef v50;
  VTCompressionSessionRef compressionSessionOut[2];

  v4 = *(const __CFAllocator **)a1;
  v50 = 0;
  compressionSessionOut[0] = 0;
  propertyValueOut = 0;
  v49 = 0;
  v47 = 0;
  v46 = 1;
  if (!(a2 | a3))
  {
    v22 = 0;
    Mutable = 0;
    v23 = 4294950306;
    goto LABEL_62;
  }
  v6 = *(unsigned __int8 **)(a1 + 144);
  if (!v6)
  {
    v22 = 0;
    Mutable = 0;
    v23 = 4294950195;
    goto LABEL_62;
  }
  v10 = (OpaqueVTCompressionSession *)*((_QWORD *)v6 + 3);
  if (v10)
  {
    completeUntilPresentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    VTCompressionSessionCompleteFrames(v10, &completeUntilPresentationTimeStamp);
    if (v6[41])
      CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v6 + 3), *v6);
    v11 = (const void *)*((_QWORD *)v6 + 3);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)v6 + 3) = 0;
    }
  }
  CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v6 + 22));
  *((_QWORD *)v6 + 22) = 0;
  *v6 = 0;
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v22 = 0;
    goto LABEL_81;
  }
  v44 = 2;
  v42 = -1;
  v43 = 0x200000002;
  EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a4, *(unsigned int *)(a1 + 44), (uint64_t)Mutable, *(unsigned __int8 *)(a1 + 48), (uint64_t)&v43, (uint64_t)&v42);
  if ((_DWORD)EncoderPropertiesFromSource
    || (EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v4, *(_DWORD *)(a1 + 60), *((_DWORD *)v6 + 40), a2, a3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *((const void **)v6 + 21), *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), &v50), (_DWORD)EncoderPropertiesFromSource)|| (EncoderPropertiesFromSource = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v50), (_DWORD)EncoderPropertiesFromSource))
  {
LABEL_75:
    v23 = EncoderPropertiesFromSource;
    v22 = 0;
    goto LABEL_76;
  }
  memset(v41, 0, sizeof(v41));
  CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v50, (uint64_t)v41);
  v14 = (int *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!v6[41])
  {
    EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCreateEncoderSpecification(v4, *((_DWORD *)v6 + 9), &v47);
    if (!(_DWORD)EncoderPropertiesFromSource)
    {
      v25 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v25;
      if (v25)
      {
        v26 = CMPhotoCFDictionarySetInt32(v25, (const void *)*MEMORY[0x1E0CA9040], *(_DWORD *)(a1 + 44));
        if (!(_DWORD)v26)
        {
          v26 = VTCompressionSessionCreate(v4, a2, a3, *(_DWORD *)(a1 + 40), v47, v22, v4, (VTCompressionOutputCallback)VTCompressionPluginClass_VideoToolbox_callback, (void *)a1, compressionSessionOut);
          if (!(_DWORD)v26)
          {
LABEL_21:
            if (!v46)
            {
              URNFromAuxiliaryImageType = 0;
              goto LABEL_36;
            }
            v27 = (const void *)*MEMORY[0x1E0CECEC8];
            v28 = (const void **)MEMORY[0x1E0CECEB0];
            v29 = (const void **)MEMORY[0x1E0CED0A8];
            if (*(_BYTE *)(a1 + 48))
            {
              CMPhotoCFDictionarySetBoolean(Mutable, v27, 1);
              CMPhotoCFDictionarySetBoolean(Mutable, *v28, 0);
              CMPhotoCFDictionarySetInt(Mutable, *v29, *(_DWORD *)(a1 + 52));
              CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CECFD0], *(_DWORD *)(a1 + 52));
              CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CECF88], *(unsigned __int8 *)(a1 + 56));
              v30 = *(_DWORD *)(a1 + 80);
              if (v30)
              {
                URNFromAuxiliaryImageType = CMPhotoCreateURNFromAuxiliaryImageType(v30);
                if (URNFromAuxiliaryImageType)
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECEE8], URNFromAuxiliaryImageType);
                goto LABEL_29;
              }
            }
            else
            {
              CMPhotoCFDictionarySetBoolean(Mutable, v27, 0);
              CMPhotoCFDictionarySetBoolean(Mutable, *v28, 0);
              CMPhotoCFDictionarySetInt(Mutable, *v29, 1);
            }
            URNFromAuxiliaryImageType = 0;
LABEL_29:
            FigCFDictionarySetInt32();
            v31 = *(_DWORD *)(a1 + 40);
            if (v31 == 1635148593)
            {
              CMPhotoGetAVCProfileForPixelFormat(*(unsigned int *)(a1 + 44));
              FigCFDictionarySetValue();
            }
            else
            {
              if (v31 != 1752589105)
              {
                v23 = 4294950298;
                goto LABEL_58;
              }
              CMPhotoGetHEVCProfileForPixelFormat(*(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
            }
            FigCFDictionarySetValue();
            v32 = (const void **)MEMORY[0x1E0C9AE50];
            if (!v6[32])
              v32 = (const void **)MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CECEC0], *v32);
            FigCFDictionarySetInt32();
            CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CED1A0], v6[42]);
            CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CED060], *(_DWORD *)(a1 + 44));
LABEL_36:
            if (CFDictionaryGetCount(Mutable) >= 1)
            {
              v33 = VTSessionSetProperties(compressionSessionOut[0], Mutable);
              if ((_DWORD)v33)
                goto LABEL_77;
            }
            if (!VTSessionCopyProperty(compressionSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED228], v4, &propertyValueOut))
            {
              CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC28], (_QWORD *)v6 + 6);
              CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC80], (_QWORD *)v6 + 7);
              CMPhotoCFDictionaryGetBooleanIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC20], v6 + 64);
            }
            v33 = VTSessionCopyProperty(compressionSessionOut[0], (CFStringRef)*MEMORY[0x1E0CED268], v4, &v49);
            if ((_DWORD)v33)
            {
LABEL_77:
              v23 = v33;
              goto LABEL_58;
            }
            CMPhotoCFDictionaryGetSizeIfPresent(v49, (const void *)*MEMORY[0x1E0CA8F68], (_QWORD *)v6 + 10);
            CMPhotoCFDictionaryGetSizeIfPresent(v49, (const void *)*MEMORY[0x1E0CA9048], (_QWORD *)v6 + 11);
            CMPhotoPixelBufferAttributesGetExtendedPixels(v49, 0, (_QWORD *)v6 + 12, 0, (_QWORD *)v6 + 13);
            *((_QWORD *)v6 + 1) = a2;
            *((_QWORD *)v6 + 2) = a3;
            v35 = v50;
            v34 = compressionSessionOut[0];
            *((VTCompressionSessionRef *)v6 + 3) = compressionSessionOut[0];
            *((_QWORD *)v6 + 22) = v35;
            v50 = 0;
            compressionSessionOut[0] = 0;
            v36 = *v14;
            if (v46)
            {
              if (v36 == 1)
              {
                kdebug_trace();
                v34 = (OpaqueVTCompressionSession *)*((_QWORD *)v6 + 3);
              }
              v37 = VTCompressionSessionPrepareToEncodeFrames(v34);
              v38 = v37;
              if (*v14 != 1)
              {
                if (v37 == -12782)
                  v23 = 0;
                else
                  v23 = v37;
                goto LABEL_58;
              }
              kdebug_trace();
              if (v38 == -12782)
                v23 = 0;
              else
                v23 = v38;
              if ((_DWORD)v23 || *v14 != 1)
                goto LABEL_58;
            }
            else if (v36 != 1)
            {
LABEL_53:
              v23 = 0;
              goto LABEL_58;
            }
            kdebug_trace();
            goto LABEL_53;
          }
        }
        v23 = v26;
LABEL_76:
        URNFromAuxiliaryImageType = 0;
        goto LABEL_58;
      }
LABEL_81:
      URNFromAuxiliaryImageType = 0;
      v23 = 4294950305;
      goto LABEL_58;
    }
    goto LABEL_75;
  }
  v15 = *(const void **)(a1 + 24);
  v16 = *(_DWORD *)(a1 + 44);
  v17 = *((_DWORD *)v6 + 9);
  v18 = v6[32];
  v19 = *((_DWORD *)v6 + 18);
  v20 = v6[42];
  *(_OWORD *)&completeUntilPresentationTimeStamp.value = *(_OWORD *)v41;
  *(_QWORD *)((char *)&completeUntilPresentationTimeStamp.flags + 1) = *(_QWORD *)&v41[13];
  v21 = CMPhotoCodecSessionPoolCreateCompressionSession(v15, (uint64_t)&completeUntilPresentationTimeStamp, a2, a3, v16, v17, 0, v18, v19, v20, v43, v44, v42, 0, (uint64_t)VTCompressionPluginClass_VideoToolbox_callback, a1, compressionSessionOut, &v46);
  v22 = 0;
  if (!(_DWORD)v21)
    goto LABEL_21;
  v23 = v21;
  URNFromAuxiliaryImageType = 0;
LABEL_58:
  v39 = (v23 | *v6) != 0;
  *v6 = v39;
  if (v6[41])
    CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), compressionSessionOut[0], v39);
  if (URNFromAuxiliaryImageType)
    CFRelease(URNFromAuxiliaryImageType);
LABEL_62:
  if (compressionSessionOut[0])
    CFRelease(compressionSessionOut[0]);
  if (v49)
    CFRelease(v49);
  if (v47)
    CFRelease(v47);
  if (v22)
    CFRelease(v22);
  if (Mutable)
    CFRelease(Mutable);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v50);
  return v23;
}

uint64_t VTCompressionPluginClass_encode(uint64_t a1, CVBufferRef buffer, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  __CVBuffer *v9;
  uint64_t v11;
  size_t v12;
  size_t v13;
  const __CFDictionary *v15;
  uint64_t v16;
  __CFDictionary *Mutable;
  const __CFDictionary *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  OpaqueVTCompressionSession *v27;
  uint64_t v28;
  __int128 v29;
  CMTime rhs;
  CMTime v33;
  _BYTE duration[32];
  _BYTE presentationTimeStamp[32];
  __int16 v36;
  __CVBuffer *v37;

  v9 = buffer;
  v11 = *(_QWORD *)(a1 + 144);
  v37 = 0;
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  v36 = 0;
  if (*(_QWORD *)(a5 + 16) != v12 || *(_QWORD *)(a5 + 24) != v13)
  {
    v15 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
    v16 = VTCompressionPluginClass_prepare(a1, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), v15);
    if (v15)
      CFRelease(v15);
    if ((_DWORD)v16)
    {
      Mutable = 0;
      v18 = 0;
LABEL_9:
      *(_BYTE *)v11 = 1;
      goto LABEL_34;
    }
  }
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v18 = 0;
    goto LABEL_43;
  }
  v18 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v18)
  {
LABEL_43:
    v16 = 4294950305;
    goto LABEL_9;
  }
  v19 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)presentationTimeStamp = *(_OWORD *)a5;
  *(_OWORD *)&presentationTimeStamp[16] = v19;
  v20 = a4[1];
  *(_OWORD *)duration = *a4;
  *(_OWORD *)&duration[16] = v20;
  v21 = _needsPixelBufferCopy(v9, v11, presentationTimeStamp, duration, 0, 0, (BOOL *)&v36 + 1, (BOOL *)&v36, 0, 0);
  if ((_DWORD)v21)
  {
LABEL_41:
    v16 = v21;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a5 + 16) != vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v9))
    || *(_QWORD *)(a5 + 24) != vcvtad_u64_f64(v22))
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v25 = a4[1];
    *(_OWORD *)presentationTimeStamp = *a4;
    *(_OWORD *)&presentationTimeStamp[16] = v25;
    v26 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)duration = *(_OWORD *)a5;
    *(_OWORD *)&duration[16] = v26;
    v16 = _performTileCopy(a1, v9, v12, v13, presentationTimeStamp, (unint64_t *)duration, HIBYTE(v36), v36, (CFTypeRef *)&v37);
    v24 = a7;
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if ((_DWORD)v16)
      goto LABEL_9;
    v9 = v37;
    if (v37)
    {
      v21 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("StillOffsetW"), 0);
      if ((_DWORD)v21)
        goto LABEL_41;
      v21 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("StillOffsetH"), 0);
      if ((_DWORD)v21)
        goto LABEL_41;
      goto LABEL_26;
    }
    goto LABEL_43;
  }
  v23 = *(_QWORD *)(a5 + 8);
  v21 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("StillOffsetW"), *(_DWORD *)a5);
  if ((_DWORD)v21)
    goto LABEL_41;
  v21 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("StillOffsetH"), v23);
  v24 = a7;
  if ((_DWORD)v21)
    goto LABEL_41;
LABEL_26:
  v21 = CMPhotoVideoQualityControllerAnalyzeTile(*(_QWORD *)(v11 + 176));
  if ((_DWORD)v21)
    goto LABEL_41;
  v21 = CMPhotoVideoQualityControllerSetTileProperties(*(_QWORD *)(v11 + 176));
  if ((_DWORD)v21)
    goto LABEL_41;
  if (CFDictionaryGetCount(v18) >= 1)
  {
    v21 = VTSessionSetProperties(*(VTSessionRef *)(v11 + 24), v18);
    if ((_DWORD)v21)
      goto LABEL_41;
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  memset(&v33, 0, sizeof(v33));
  CMTimeMake(&v33, 1, 24);
  v27 = *(OpaqueVTCompressionSession **)(v11 + 24);
  *(_OWORD *)presentationTimeStamp = *(_OWORD *)(v11 + 136);
  *(_QWORD *)&presentationTimeStamp[16] = *(_QWORD *)(v11 + 152);
  *(CMTime *)duration = v33;
  v16 = VTCompressionSessionEncodeFrame(v27, v9, (CMTime *)presentationTimeStamp, (CMTime *)duration, Mutable, v24, 0);
  if ((_DWORD)v16)
    goto LABEL_9;
  v29 = *(_OWORD *)(v11 + 136);
  v28 = v11 + 136;
  *(_OWORD *)duration = v29;
  *(_QWORD *)&duration[16] = *(_QWORD *)(v28 + 16);
  rhs = v33;
  CMTimeAdd((CMTime *)presentationTimeStamp, (CMTime *)duration, &rhs);
  *(_OWORD *)v28 = *(_OWORD *)presentationTimeStamp;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)&presentationTimeStamp[16];
LABEL_34:
  if (v37)
    CFRelease(v37);
  if (Mutable)
    CFRelease(Mutable);
  if (v18)
    CFRelease(v18);
  return v16;
}

uint64_t VTCompressionPluginClass_completeEncodes(uint64_t a1)
{
  uint64_t v1;
  OpaqueVTCompressionSession *v2;
  CMTime v4;

  if (!a1)
    return 4294950306;
  v1 = *(_QWORD *)(a1 + 144);
  if (!v1)
    return 4294950195;
  v2 = *(OpaqueVTCompressionSession **)(v1 + 24);
  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  return VTCompressionSessionCompleteFrames(v2, &v4);
}

uint64_t VTTileCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  int v4;
  char *v6;
  uint64x2_t *v7;
  uint64_t v8;
  const void *Value;
  uint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  CFTypeRef v14;
  int v15;
  int v16;
  CGPoint v18[10];
  int v19;
  int v20;
  __int8 v21;
  __int16 v22;
  char v23;

  pthread_once(&_checkFigNoteTraceOnce_onceToken, (void (*)(void))_registerFigNoteTrace);
  v23 = 1;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 != 1752589105 && v4 != 1635148593)
    return 4294950298;
  v19 = 1;
  v6 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7759597uLL);
  if (!v6)
    return 4294950305;
  v7 = (uint64x2_t *)v6;
  v8 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v6 + 136) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)v6 + 19) = *(_QWORD *)(v8 + 16);
  *((_OWORD *)v6 + 3) = kCMPhotoMinimumSourceAlignment;
  if (a2)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseCodecSessionPool"), &v22);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ForceHighSpeedEncode"), &v21);
    CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("Priority"), &v20);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("AllowPixelTransfer"), &v23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UsePixelsOutsideCrop"), (_BYTE *)&v22 + 1);
    if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("QualityControllerType"), &v19))
      Value = CFDictionaryGetValue(a2, CFSTR("QualityControllerParameters"));
    else
      Value = 0;
    v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("CustomMinimumSourceAlignment"));
    if (v11)
    {
      v12 = v11;
      v13 = CFGetTypeID(v11);
      if (v13 == CFDictionaryGetTypeID())
      {
        v18[0] = 0uLL;
        CGPointMakeWithDictionaryRepresentation(v12, v18);
        if (v18[0].x > 0.0 && v18[0].y > 0.0)
          v7[3] = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v18[0]));
      }
    }
    if (CFDictionaryContainsKey(a2, CFSTR("SyncEncode")))
    {
      v10 = FigSignalErrorAt();
      v7->i8[0] = (v7->u8[0] | v10) != 0;
      memset(v18, 0, 144);
      v18[9] = (CGPoint)(unint64_t)v7;
      VTTileCompressionPluginClass_dispose((uint64_t)v18);
      return v10;
    }
  }
  else
  {
    Value = 0;
  }
  v7[2].i32[1] = _getAccelerationMode(a2);
  v7[2].i8[9] = (_BYTE)v22 != 0;
  v7[2].i8[10] = v21;
  v7[2].i8[8] = HIBYTE(v22);
  v7[2].i8[0] = v23;
  v7[10].i32[0] = v19;
  if (Value)
    v14 = CFRetain(Value);
  else
    v14 = 0;
  v7[10].i64[1] = (uint64_t)v14;
  v7[7].i8[0] = 1;
  LODWORD(v18[0].x) = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("Priority"), v18);
  v10 = 0;
  if (LODWORD(v18[0].x) == 1)
    v15 = -20;
  else
    v15 = 0;
  if (LODWORD(v18[0].x) == 2)
    v16 = 90;
  else
    v16 = v15;
  v7[4].i32[2] = v16;
  *(_QWORD *)(a1 + 144) = v7;
  return v10;
}

void VTTileCompressionPluginClass_dispose(uint64_t a1)
{
  unsigned __int8 *v2;
  void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *(unsigned __int8 **)(a1 + 144);
    if (v2)
    {
      if (*((_QWORD *)v2 + 3))
      {
        VTTileCompressionSessionCompleteTiles();
        if (v2[41])
        {
          VTSessionSetProperty(*((VTSessionRef *)v2 + 3), (CFStringRef)*MEMORY[0x1E0CECFE8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
          CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v2 + 3), *v2);
        }
        else
        {
          VTTileCompressionSessionInvalidate();
        }
      }
      v3 = (void *)*((_QWORD *)v2 + 15);
      if (v3)
      {
        if (!v2[128]
          || (CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v3, 1uLL),
              v2[128] = 0,
              (v3 = (void *)*((_QWORD *)v2 + 15)) != 0))
        {
          CFRelease(v3);
          *((_QWORD *)v2 + 15) = 0;
        }
      }
      v4 = (const void *)*((_QWORD *)v2 + 3);
      if (v4)
      {
        CFRelease(v4);
        *((_QWORD *)v2 + 3) = 0;
      }
      CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v2 + 22));
      v5 = (const void *)*((_QWORD *)v2 + 21);
      if (v5)
        CFRelease(v5);
      free(v2);
    }
  }
}

uint64_t VTTileCompressionPluginClass_prepare(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  const __CFAllocator *v4;
  unsigned __int8 *v6;
  const void *v10;
  __CFDictionary *Mutable;
  uint64_t EncoderPropertiesFromSource;
  int *v13;
  const void *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  int v23;
  CFTypeRef *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BOOL4 v29;
  CFTypeRef v30;
  _BYTE v32[21];
  _BYTE v33[21];
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unint64_t v38;
  __CFDictionary *v39;
  const __CFDictionary *propertyValueOut;
  const __CFDictionary *v41;
  CFTypeRef *v42;
  CFTypeRef v43[2];

  v4 = *(const __CFAllocator **)a1;
  v42 = 0;
  v43[0] = 0;
  propertyValueOut = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 1;
  if (!(a2 | a3))
  {
    v21 = 0;
    Mutable = 0;
    v28 = 4294950306;
    goto LABEL_55;
  }
  v6 = *(unsigned __int8 **)(a1 + 144);
  if (!v6)
  {
    v21 = 0;
    Mutable = 0;
    v28 = 4294950195;
    goto LABEL_55;
  }
  if (*((_QWORD *)v6 + 3))
  {
    VTTileCompressionSessionCompleteTiles();
    if (v6[41])
      CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v6 + 3), *v6);
    v10 = (const void *)*((_QWORD *)v6 + 3);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)v6 + 3) = 0;
    }
  }
  CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v6 + 22));
  *((_QWORD *)v6 + 22) = 0;
  *v6 = 0;
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v21 = 0;
    goto LABEL_71;
  }
  v36 = 2;
  v34 = -1;
  v35 = 0x200000002;
  EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a4, *(unsigned int *)(a1 + 44), (uint64_t)Mutable, *(unsigned __int8 *)(a1 + 48), (uint64_t)&v35, (uint64_t)&v34);
  if ((_DWORD)EncoderPropertiesFromSource
    || (EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v4, *(_DWORD *)(a1 + 60), *((_DWORD *)v6 + 40), a2, a3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *((const void **)v6 + 21), *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), &v42), (_DWORD)EncoderPropertiesFromSource)|| (EncoderPropertiesFromSource = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v42), (_DWORD)EncoderPropertiesFromSource))
  {
LABEL_66:
    v28 = EncoderPropertiesFromSource;
    v21 = 0;
    goto LABEL_51;
  }
  memset(v33, 0, sizeof(v33));
  CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v42, (uint64_t)v33);
  v13 = (int *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (_sourceFrameCountEnabled_onceToken != -1)
    dispatch_once(&_sourceFrameCountEnabled_onceToken, &__block_literal_global_0);
  if (!v6[41])
  {
    EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCreateEncoderSpecification(v4, *((_DWORD *)v6 + 9), &v39);
    if (!(_DWORD)EncoderPropertiesFromSource)
    {
      v22 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v21 = v22;
      if (v22)
      {
        v20 = CMPhotoCFDictionarySetInt32(v22, (const void *)*MEMORY[0x1E0CA9040], *(_DWORD *)(a1 + 44));
        if ((_DWORD)v20)
          goto LABEL_67;
        v38 = __PAIR64__(a3, a2);
        v20 = VTTileCompressionSessionCreate();
        if ((_DWORD)v20)
          goto LABEL_67;
        goto LABEL_23;
      }
LABEL_71:
      v28 = 4294950305;
      goto LABEL_51;
    }
    goto LABEL_66;
  }
  v14 = *(const void **)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 44);
  v16 = *((_DWORD *)v6 + 9);
  v17 = v6[32];
  v18 = *((_DWORD *)v6 + 18);
  v19 = v6[42];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_QWORD *)&v32[13] = *(_QWORD *)&v33[13];
  v20 = CMPhotoCodecSessionPoolCreateCompressionSession(v14, (uint64_t)v32, a2, a3, v15, v16, 1, v17, v18, v19, v35, v36, v34, 0, (uint64_t)VTTileCompressionPluginClass_VideoToolbox_callback, a1, v43, &v37);
  v21 = 0;
  if ((_DWORD)v20)
  {
LABEL_67:
    v28 = v20;
    goto LABEL_51;
  }
LABEL_23:
  if (v37)
  {
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CECEC8], 0);
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CECEB0], 0);
    CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CED0A8], 1);
    CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CED1F8], 0);
    FigCFDictionarySetInt32();
    v23 = *(_DWORD *)(a1 + 40);
    if (v23 == 1635148593)
    {
      CMPhotoGetAVCProfileForPixelFormat(*(unsigned int *)(a1 + 44));
      FigCFDictionarySetValue();
    }
    else
    {
      if (v23 != 1752589105)
      {
        v28 = 4294950298;
        goto LABEL_51;
      }
      CMPhotoGetHEVCProfileForPixelFormat(*(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
    }
    FigCFDictionarySetValue();
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CECEC0], v6[32]);
    FigCFDictionarySetInt32();
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E0CED1A0], v6[42]);
    CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CED060], *(_DWORD *)(a1 + 44));
  }
  if (CFDictionaryGetCount(Mutable) >= 1)
  {
    v20 = VTSessionSetProperties(v43[0], Mutable);
    if ((_DWORD)v20)
      goto LABEL_67;
  }
  if (!VTSessionCopyProperty(v43[0], (CFStringRef)*MEMORY[0x1E0CED228], v4, &propertyValueOut))
  {
    CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC28], (_QWORD *)v6 + 6);
    CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC80], (_QWORD *)v6 + 7);
    CMPhotoCFDictionaryGetBooleanIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E0CEDC20], v6 + 64);
  }
  v20 = VTSessionCopyProperty(v43[0], (CFStringRef)*MEMORY[0x1E0CED268], v4, &v41);
  if ((_DWORD)v20)
    goto LABEL_67;
  CMPhotoCFDictionaryGetSizeIfPresent(v41, (const void *)*MEMORY[0x1E0CA8F68], (_QWORD *)v6 + 10);
  CMPhotoCFDictionaryGetSizeIfPresent(v41, (const void *)*MEMORY[0x1E0CA9048], (_QWORD *)v6 + 11);
  CMPhotoPixelBufferAttributesGetExtendedPixels(v41, 0, (_QWORD *)v6 + 12, 0, (_QWORD *)v6 + 13);
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = a3;
  v24 = v42;
  *((CFTypeRef *)v6 + 3) = v43[0];
  *((_QWORD *)v6 + 22) = v24;
  v42 = 0;
  v43[0] = 0;
  v25 = *v13;
  if (v37)
  {
    if (v25 == 1)
      kdebug_trace();
    v26 = VTTileCompressionSessionPrepareToEncodeTiles();
    v27 = v26;
    if (*v13 != 1)
    {
      if (v26 == -12782)
        v28 = 0;
      else
        v28 = v26;
      goto LABEL_51;
    }
    kdebug_trace();
    if (v27 == -12782)
      v28 = 0;
    else
      v28 = v27;
    if ((_DWORD)v28 || *v13 != 1)
      goto LABEL_51;
    goto LABEL_45;
  }
  if (v25 == 1)
LABEL_45:
    kdebug_trace();
  v28 = 0;
LABEL_51:
  v29 = (v28 | *v6) != 0;
  *v6 = v29;
  v30 = v43[0];
  if (v6[41])
  {
    CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), v43[0], v29);
    v30 = v43[0];
  }
  if (v30)
    CFRelease(v30);
LABEL_55:
  if (v41)
    CFRelease(v41);
  if (v39)
    CFRelease(v39);
  if (v21)
    CFRelease(v21);
  if (Mutable)
    CFRelease(Mutable);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  CMPhotoVideoQualityControllerDispose(v42);
  return v28;
}

uint64_t VTTileCompressionPluginClass_encode(uint64_t a1, CVBufferRef buffer, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __CVBuffer *v9;
  uint64_t v11;
  size_t v12;
  size_t v13;
  const __CFDictionary *v15;
  uint64_t v16;
  const __CFDictionary *v17;
  CFMutableDictionaryRef Mutable;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t Value;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  __int16 v31;
  _QWORD v32[2];
  __CVBuffer *v33;

  v9 = buffer;
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  v32[1] = 0;
  v33 = 0;
  v32[0] = 0;
  v31 = 0;
  v30 = 0;
  *(_QWORD *)(a1 + 152) = a3;
  if (*((_QWORD *)a5 + 2) == v12 && *((_QWORD *)a5 + 3) == v13)
    goto LABEL_9;
  v15 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  v16 = VTTileCompressionPluginClass_prepare(a1, *((_QWORD *)a5 + 2), *((_QWORD *)a5 + 3), v15);
  if (v15)
    CFRelease(v15);
  if (!(_DWORD)v16)
  {
LABEL_9:
    if (a6)
      Value = FigCFDictionaryGetValue();
    else
      Value = 0;
    Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v17 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v17)
      {
        v19 = a5[1];
        v28 = *a5;
        v29 = v19;
        v20 = a4[1];
        v26 = *a4;
        v27 = v20;
        v21 = _needsPixelBufferCopy(v9, v11, &v28, &v26, 1, v32, (BOOL *)&v30 + 1, (BOOL *)&v30, (BOOL *)&v31 + 1, &v31);
        if ((_DWORD)v21)
          goto LABEL_46;
        if (HIBYTE(v31))
        {
          if (!*(_BYTE *)(v11 + 32))
          {
            v16 = FigSignalErrorAt();
            goto LABEL_36;
          }
        }
        else if (!(_BYTE)v31)
        {
          goto LABEL_25;
        }
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        v22 = a4[1];
        v28 = *a4;
        v29 = v22;
        v23 = a5[1];
        v26 = *a5;
        v27 = v23;
        v16 = _performTileCopy(a1, v9, v12, v13, &v28, (unint64_t *)&v26, HIBYTE(v30), v30, (CFTypeRef *)&v33);
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        if ((_DWORD)v16)
          goto LABEL_37;
        v9 = v33;
        if (v33)
        {
LABEL_25:
          CMPhotoVideoQualityControllerAnalyzeTile(*(_QWORD *)(v11 + 176));
          v21 = CMPhotoVideoQualityControllerSetTileProperties(*(_QWORD *)(v11 + 176));
          if (!(_DWORD)v21)
          {
            if (CFDictionaryGetCount(v17) < 1
              || (v21 = VTSessionSetProperties(*(VTSessionRef *)(v11 + 24), v17), !(_DWORD)v21))
            {
              if (*MEMORY[0x1E0CA1FC0] == 1)
                kdebug_trace();
              CMPhotoGetPixelBufferSize(v9);
              CVPixelBufferGetPixelFormatType(v9);
              if (Value)
                FigCFDictionarySetValue();
              if (*MEMORY[0x1E0CA1FC0] == 1)
                kdebug_trace();
              v16 = VTTileCompressionSessionEncodeTile();
              if (*MEMORY[0x1E0CA1FC0] == 1)
                kdebug_trace();
LABEL_36:
              if (!(_DWORD)v16)
                goto LABEL_38;
              goto LABEL_37;
            }
          }
LABEL_46:
          v16 = v21;
          goto LABEL_37;
        }
      }
    }
    else
    {
      v17 = 0;
    }
    v16 = 4294950305;
    goto LABEL_37;
  }
  v17 = 0;
  Mutable = 0;
LABEL_37:
  *(_BYTE *)v11 = 1;
LABEL_38:
  if (v33)
    CFRelease(v33);
  if (Mutable)
    CFRelease(Mutable);
  if (v17)
    CFRelease(v17);
  return v16;
}

uint64_t VTTileCompressionPluginClass_completeEncodes(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if (!a1)
    return 4294950306;
  if (!*(_QWORD *)(a1 + 144))
    return 4294950195;
  v1 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v2 = VTTileCompressionSessionCompleteTiles();
  if (*v1 == 1)
    kdebug_trace();
  return v2;
}

uint64_t VTTileCompressionPluginClass_pixelTransfer(uint64_t a1, __CVBuffer *a2, _OWORD *a3, unint64_t *a4, CVPixelBufferRef *a5)
{
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t PixelFormatType;
  size_t v24;
  size_t v25;
  uint64_t PixelBuffer;
  unint64_t v27;
  unint64_t v29;
  _BYTE *v30;
  _OWORD v31[2];
  _OWORD v32[2];
  __int16 v33;

  v10 = *(_BYTE **)(a1 + 144);
  v33 = 0;
  v11 = a3[1];
  v32[0] = *a3;
  v32[1] = v11;
  v12 = *((_OWORD *)a4 + 1);
  v31[0] = *(_OWORD *)a4;
  v31[1] = v12;
  v13 = _needsPixelBufferCopy(a2, (uint64_t)v10, v32, v31, 1, 0, 0, 0, (BOOL *)&v33 + 1, &v33);
  if ((_DWORD)v13)
  {
    v15 = v13;
    if (!v10)
      return v15;
LABEL_19:
    if ((_DWORD)v15)
      *v10 = 1;
    return v15;
  }
  if (!(HIBYTE(v33) | v33))
    return 0;
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v15 = 4294950306;
  if (a2 && a5)
  {
    v30 = v10;
    v16 = a4[1];
    v29 = *a4;
    v18 = a4[2];
    v17 = a4[3];
    v21 = a3 + 1;
    v20 = *((_QWORD *)a3 + 2);
    v19 = *((_QWORD *)v21 + 1);
    v22 = *(_QWORD *)(a1 + 144);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    v24 = *(_QWORD *)(v22 + 96) + v20;
    v25 = *(_QWORD *)(v22 + 104) + v19;
    PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 8), PixelFormatType, v24, v25, 1, 0, 0, 1, *(_QWORD *)(v22 + 80), 0, a5);
    if ((_DWORD)PixelBuffer
      || (PixelBuffer = CMPhotoScaleAndRotateSessionTransformWithRect(*(_QWORD *)(a1 + 16), a2, 1, 1, *a5, 0, 0, 1u, (double)v29, (double)v16, (double)v18, (double)v17, 0.0, 0.0, (double)v18, (double)v17), (_DWORD)PixelBuffer))
    {
      v15 = PixelBuffer;
      v10 = v30;
    }
    else
    {
      v27 = v17;
      v10 = v30;
      if (v24 == v18 && v25 == v27)
      {
        v15 = 0;
      }
      else
      {
        v15 = VTFillPixelBufferBorderWithBlack();
        if (!(_DWORD)v15)
          *(_BYTE *)(v22 + 40) = 1;
      }
    }
    v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  }
  if (*v14 == 1)
    kdebug_trace();
  if (v10)
    goto LABEL_19;
  return v15;
}

uint64_t VTTileCompressionPluginClass_CopyReconstructionPixelBufferAttributes(uint64_t a1, void *propertyValueOut)
{
  return VTSessionCopyProperty(*(VTSessionRef *)(*(_QWORD *)(a1 + 144) + 24), CFSTR("ReconstructedPixelBufferAttributes"), *(CFAllocatorRef *)a1, propertyValueOut);
}

uint64_t _getAccelerationMode(const __CFDictionary *a1)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  char v7;

  v7 = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, CFSTR("RequireHardwareCodec"), &v7))
    v3 = v7 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, CFSTR("PreferSoftwareCodec"), &v7))
      v4 = v7 == 0;
    else
      v4 = 1;
    v5 = !v4;
  }
  else
  {
    v5 = 2;
  }
  return CMPhotoGetEncodeAccelerationModeOverride(v5, v2);
}

const __CFDictionary *_getEncoderPropertiesFromSource(const __CFDictionary *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  const __CFDictionary *v10;
  const __CFString *Value;
  const void *v12;
  const void *v13;
  CGColorSpace *v14;
  const __CFDictionary *v15;
  uint64_t TripletsForColorSpace;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  CFStringRef transferFunctionString;
  CFStringRef colorPrimariesString;

  *(_QWORD *)a5 = 0x200000002;
  *(_DWORD *)(a5 + 8) = 2;
  *(_QWORD *)a6 = -1;
  if (!result)
    return result;
  v10 = result;
  colorPrimariesString = (CFStringRef)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA8D68]);
  transferFunctionString = (CFStringRef)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA8E98]);
  Value = (const __CFString *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA8EE8]);
  v19 = Value;
  v12 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA8CE8]);
  v13 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA8CE0]);
  if (a4)
  {
    v14 = _copyColorSpaceFromSource(v10);
    v15 = v14;
    if (v14)
    {
      TripletsForColorSpace = CMPhotoGetTripletsForColorSpace(v14, a2, &colorPrimariesString, &transferFunctionString, 0);
      if ((_DWORD)TripletsForColorSpace)
      {
        v17 = TripletsForColorSpace;
        if ((_DWORD)TripletsForColorSpace != -16993)
        {
LABEL_24:
          CFRelease(v15);
          return (const __CFDictionary *)v17;
        }
      }
    }
    if (Value)
      goto LABEL_13;
  }
  else
  {
    v15 = 0;
    if (Value)
      goto LABEL_13;
  }
  if (v15 || (v15 = _copyColorSpaceFromSource(v10)) != 0)
  {
    v18 = CMPhotoGetTripletsForColorSpace(v15, a2, 0, 0, &v19);
    if ((_DWORD)v18)
    {
      v17 = v18;
      if ((_DWORD)v18 != -16993)
        goto LABEL_24;
    }
  }
LABEL_13:
  if (colorPrimariesString)
  {
    *(_DWORD *)a5 = CVColorPrimariesGetIntegerCodePointForString(colorPrimariesString);
    FigCFDictionarySetValue();
  }
  if (transferFunctionString)
  {
    *(_DWORD *)(a5 + 4) = CVTransferFunctionGetIntegerCodePointForString(transferFunctionString);
    FigCFDictionarySetValue();
  }
  if (v19)
  {
    *(_DWORD *)(a5 + 8) = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v19);
    FigCFDictionarySetValue();
  }
  if (v12)
  {
    *(_DWORD *)a6 = CMPhotoGetChromaLocationCodePointForString((uint64_t)v12);
    FigCFDictionarySetValue();
  }
  if (v13)
  {
    *(_DWORD *)(a6 + 4) = CMPhotoGetChromaLocationCodePointForString((uint64_t)v13);
    FigCFDictionarySetValue();
  }
  v17 = 0;
  result = 0;
  if (v15)
    goto LABEL_24;
  return result;
}

const __CFDictionary *_copyColorSpaceFromSource(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const void *Value;

  if (result)
  {
    v1 = result;
    Value = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA8CD8]);
    if (!Value || (result = (const __CFDictionary *)CFRetain(Value)) == 0)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA8E40]);
      if (result)
        JUMPOUT(0x1A85CF43CLL);
    }
  }
  return result;
}

uint64_t VTCompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, int a3, char a4)
{
  int v7;

  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if ((a4 & 2) != 0)
    v7 = -17104;
  else
    v7 = a3;
  if (v7)
    **(_BYTE **)(a1 + 144) = 1;
  return (*(uint64_t (**)(uint64_t))(a1 + 128))(a1);
}

uint64_t _needsPixelBufferCopy(__CVBuffer *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, _QWORD *a6, BOOL *a7, BOOL *a8, BOOL *a9, _BYTE *a10)
{
  double PixelBufferSize;
  double v17;
  double v18;
  size_t *v19;
  size_t BytesPerRowOfPlane;
  size_t v21;
  unint64_t v22;
  OSType v23;
  OSType v24;
  unint64_t BytesPerPixelForPixelFormat;
  size_t v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  _BOOL4 v37;
  __IOSurface *IOSurface;
  __IOSurface *v39;
  size_t PlaneCount;
  char v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v49;
  _BOOL4 v50;
  BOOL v51;
  BOOL *v52;
  uint64_t result;
  int v54;
  int v55;
  size_t v57;
  int v58;
  unsigned int v59;
  double v60;
  unsigned int v61;
  unsigned int v62;
  size_t v63;
  unsigned int v64;
  int ChromaSubsamplingFromPixelFormat;
  char v66;
  char v67;
  uint32x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  uint32x2_t v71;
  int32x2_t v72;
  uint32x2_t v73;
  int32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  int v78;
  int v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  BOOL *v84;
  OSType PixelFormatType;
  size_t v86;
  size_t v89;
  size_t v90;
  size_t extraColumnsOnRight;
  size_t v92;

  if (!a1)
    return 4294950306;
  v82 = a3[3];
  v83 = a3[2];
  PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  v18 = v17;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  extraColumnsOnRight = 0;
  v92 = 0;
  v19 = &v92;
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &v92);
  if (CVPixelBufferIsPlanar(a1))
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  else
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
  v21 = BytesPerRowOfPlane;
  v22 = vcvtad_u64_f64(PixelBufferSize);
  v23 = CVPixelBufferGetPixelFormatType(a1);
  if (!(CMPhotoPixelFormatIsPackedYUV(v23) | a5))
  {
    v24 = CVPixelBufferGetPixelFormatType(a1);
    BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v24);
    v26 = v21 / BytesPerPixelForPixelFormat - v22;
    if (v21 / BytesPerPixelForPixelFormat > v22)
    {
      if (extraColumnsOnRight > v26)
        v26 = extraColumnsOnRight;
      extraColumnsOnRight = v26;
    }
  }
  v84 = a8;
  v27 = vcvtad_u64_f64(v18);
  v29 = *(_QWORD *)(a2 + 96);
  v28 = *(_QWORD *)(a2 + 104);
  v30 = a3[2] + *a3 + v29;
  v31 = a3[3] + a3[1] + v28;
  if (*(_BYTE *)(a2 + 40))
  {
    v32 = extraColumnsOnRight + v22;
    v33 = v27;
  }
  else
  {
    v33 = a4[1];
    v32 = a4[2] + *a4;
    v19 = a4 + 3;
  }
  v80 = v30 > v32;
  v89 = *v19 + v33;
  v81 = v31 > v89;
  if (!a5)
  {
    v78 = 0;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v34 = v22 >= 0x80 && v27 >= 0x40;
    goto LABEL_22;
  }
  if (extraColumnsOnRight >= v29)
  {
    v34 = v92 >= v28;
LABEL_22:
    v35 = !v34;
    goto LABEL_25;
  }
  v35 = 1;
LABEL_25:
  v78 = v35;
LABEL_26:
  v36 = *(_QWORD *)(a2 + 80);
  if (v36)
    v37 = v21 % v36 != 0;
  else
    v37 = 0;
  v90 = v32;
  v79 = a5;
  v77 = v37;
  if (!*(_QWORD *)(a2 + 88))
    goto LABEL_33;
  IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!IOSurface)
  {
    v41 = 1;
    goto LABEL_38;
  }
  v39 = IOSurface;
  if (IOSurfaceGetPlaneCount(IOSurface))
  {
    PlaneCount = IOSurfaceGetPlaneCount(v39);
    if (!PlaneCount)
    {
LABEL_33:
      v41 = 0;
      goto LABEL_38;
    }
  }
  else
  {
    PlaneCount = 1;
  }
  v42 = 0;
  v41 = 0;
  do
    v41 |= (unint64_t)IOSurfaceGetBaseAddressOfPlane(v39, v42++) % *(_QWORD *)(a2 + 88) != 0;
  while (PlaneCount != v42);
LABEL_38:
  v43 = *(_QWORD *)(a2 + 48);
  if (!v43)
    return 4294950306;
  v44 = *(_QWORD *)(a2 + 56);
  if (!v44)
    return 4294950306;
  v45 = 0;
  v46 = a3[1];
  if (*a3 == *a4)
  {
    v47 = PixelFormatType;
    if (v46 == a4[1])
      v45 = a3[2] == a4[2] && a3[3] == a4[3];
  }
  else
  {
    v47 = PixelFormatType;
  }
  if (*a3 % v43 || v46 % v44)
    goto LABEL_51;
  if (v79)
  {
    v54 = !v45;
    if (*(_BYTE *)(a2 + 112))
      v54 = 0;
    if (((v54 | v78) & 1) != 0 || v77)
    {
LABEL_51:
      v49 = v30 > v90 || v31 > v89;
      LOBYTE(v50) = v49;
      v51 = 1;
      goto LABEL_58;
    }
  }
  else
  {
    v55 = v78;
    if (v77)
      v55 = 1;
    if (v55 == 1)
      goto LABEL_51;
  }
  v51 = v41 != 0;
  v50 = v30 > v90 || v31 > v89;
  if (!v41 && v50)
  {
    v57 = v30;
    v58 = *(unsigned __int8 *)(a2 + 64);
    if (CMPhotoPixelFormatIsAGXCompressed(v47) || CMPhotoPixelFormatIsLossyCompressed(v47))
    {
      v59 = vcvtad_u64_f64(CMPhotoGetPixelBufferSize(a1));
      v61 = vcvtad_u64_f64(v60);
      v62 = *((_DWORD *)a4 + 4) + *(_DWORD *)a4;
      v86 = v31;
      v63 = v57;
      v64 = *((_DWORD *)a4 + 6) + *((_DWORD *)a4 + 2);
      ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(v47);
      v66 = ChromaSubsamplingFromPixelFormat == 5;
      v67 = ChromaSubsamplingFromPixelFormat == 3 || ChromaSubsamplingFromPixelFormat == 5;
      v68 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v59, v59 >> v67), (int32x2_t)0x1F0000000FLL);
      v69 = vadd_s32((int32x2_t)__PAIR64__(v61, v61 >> v66), (int32x2_t)0x1F0000000FLL);
      v70 = (int32x2_t)vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)v69, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v68, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000020, v68))),
                         (int8x8_t)vcgt_u32((uint32x2_t)v69, (uint32x2_t)0x3F0000001FLL));
      v69.i32[0] = v62 >> v67;
      v69.i32[1] = v62;
      v71 = (uint32x2_t)vadd_s32(v69, (int32x2_t)0x1F0000000FLL);
      v72.i32[0] = v64 >> v66;
      v72.i32[1] = v64;
      v57 = v63;
      v31 = v86;
      v73 = (uint32x2_t)vadd_s32(v72, (int32x2_t)0x1F0000000FLL);
      v74 = vceq_s32(v70, (int32x2_t)vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v73, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v71, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000020, v71))),
                           (int8x8_t)vcgt_u32(v73, (uint32x2_t)0x3F0000001FLL)));
      v58 &= v74.i32[1] & v74.i32[0] & 1;
    }
    if (v58)
    {
      if (v57 <= v90)
        v75 = a3[2];
      else
        v75 = a4[2] + *a4 - *a3;
      v83 = v75;
      v49 = v31 > v89;
      v52 = v84;
      LOBYTE(v50) = 0;
      if (v49)
        v76 = a4[3] + a4[1] - a3[1];
      else
        v76 = a3[3];
      v82 = v76;
      goto LABEL_59;
    }
    LOBYTE(v50) = 1;
  }
LABEL_58:
  v52 = v84;
LABEL_59:
  if ((CMPhotoPixelFormatIsLossyCompressed(v47) || CMPhotoPixelFormatIsAGXCompressed(v47))
    && (a3[2] < 0xA0uLL || a3[3] <= 0x3FuLL))
  {
    LOBYTE(v50) = 1;
  }
  if (a6)
  {
    *a6 = v83;
    a6[1] = v82;
  }
  if (a7)
    *a7 = v80;
  if (v52)
    *v52 = v81;
  if (a9)
    *a9 = v51;
  result = 0;
  if (a10)
    *a10 = v50;
  return result;
}

uint64_t _performTileCopy(uint64_t a1, __CVBuffer *a2, size_t a3, size_t a4, _QWORD *a5, unint64_t *a6, int a7, int a8, CFTypeRef *a9)
{
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t PixelFormatType;
  const void *v28;
  uint64_t UncompressedPixelFormatFromCompressedPixelFormat;
  uint64_t PixelBufferWithAttributes;
  unint64_t v31;
  unint64_t v32;
  signed int v33;
  int v34;
  __CVBuffer *v35;
  __CVBuffer *v36;
  CGFloat v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef cf;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v16 = *(_QWORD *)(a1 + 144);
  cf = 0;
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v18 = Mutable;
  v19 = a3;
  if (a7)
    v19 = a5[2] + *a5 - *a6;
  v20 = a4;
  if (a8)
    v20 = a5[3] + a5[1] - a6[1];
  v21 = *(_QWORD *)(v16 + 96);
  if (v21)
  {
    v22 = CMPhotoAlignValue(v21 + a3, *(_QWORD *)(v16 + 80));
    v23 = *(_QWORD *)(v16 + 96);
    v24 = v18;
    if (v23)
      CMPhotoCFDictionarySetSize(v18, *MEMORY[0x1E0CA8FB8], v23);
  }
  else
  {
    v22 = *(_QWORD *)(v16 + 80);
    v24 = Mutable;
  }
  v25 = v19;
  v26 = *(_QWORD *)(v16 + 104);
  if (v26)
    CMPhotoCFDictionarySetSize(v24, *MEMORY[0x1E0CA8FA0], v26);
  CMPhotoCFDictionarySetSize(v24, *MEMORY[0x1E0CA8F68], v22);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v28 = *(const void **)(a1 + 8);
  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(PixelFormatType);
  PixelBufferWithAttributes = CMPhotoSurfacePoolCreatePixelBufferWithAttributes(v28, UncompressedPixelFormatFromCompressedPixelFormat, a3, a4, v24, (CVPixelBufferRef *)&cf);
  if ((_DWORD)PixelBufferWithAttributes)
    goto LABEL_55;
  v32 = *a6;
  v31 = a6[1];
  v33 = CVPixelBufferGetPixelFormatType(a2);
  if (v33 <= 1380401728)
  {
    if (v33 <= 1278226487)
    {
      if (v33 == 875704422 || v33 == 875704438)
        goto LABEL_33;
      v34 = 1111970369;
    }
    else
    {
      if ((v33 - 1278226736) <= 6 && ((1 << (v33 - 48)) & 0x45) != 0)
        goto LABEL_33;
      v34 = 1278226488;
    }
  }
  else if (v33 > 1952854575)
  {
    if (v33 > 2016686639)
    {
      if (v33 == 2019963440)
        goto LABEL_33;
      v34 = 2016686640;
    }
    else
    {
      if (v33 == 1952854576)
        goto LABEL_33;
      v34 = 1953903152;
    }
  }
  else if (v33 > 1936077359)
  {
    if (v33 == 1936077360)
      goto LABEL_33;
    v34 = 1937125936;
  }
  else
  {
    if (v33 == 1380401729)
      goto LABEL_33;
    v34 = 1751527984;
  }
  if (v33 != v34)
  {
LABEL_41:
    PixelBufferWithAttributes = CMPhotoSetPixelBufferCLAP((__CVBuffer *)cf, 0, 0, v25, v20, 0, 1);
    if (!(_DWORD)PixelBufferWithAttributes)
    {
      v37 = (double)v25;
      v38 = *(_QWORD *)(a1 + 16);
      v39 = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
      PixelBufferWithAttributes = CMPhotoScaleAndRotateSessionTransformForSize(v38, a2, 1, 1, v39, 0, 0, 1u, (double)v32, (double)v31, v37, (double)v20, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v40, v41, *(_QWORD *)(v16 + 80), 1u, (__CVBuffer **)&cf);
      if (!(_DWORD)PixelBufferWithAttributes)
      {
        PixelBufferWithAttributes = CMPhotoRemovePixelBufferCLAP((__CVBuffer *)cf);
        if (!(_DWORD)PixelBufferWithAttributes)
        {
LABEL_49:
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, (__CVBuffer *)cf);
          CMPhotoPropagateChromaLocationFromSourceBuffer(a2, (__CVBuffer *)cf);
          v42 = VTFillPixelBufferBorderWithBlack();
          v43 = v42;
          if (a9 && !(_DWORD)v42)
          {
            *a9 = cf;
            cf = 0;
          }
          goto LABEL_52;
        }
      }
    }
    goto LABEL_55;
  }
LABEL_33:
  v47 = v32;
  v48 = v31;
  v49 = v25;
  v50 = v20;
  if (!CMPhotoPixelBufferMemcpySupportedForBuffer(a2, &v47, 0, 0))
    goto LABEL_41;
  v35 = *(__CVBuffer **)(v16 + 120);
  if (v35 != a2)
  {
    if (v35)
    {
      if (!*(_BYTE *)(v16 + 128)
        || (CVPixelBufferUnlockBaseAddress(v35, 1uLL),
            *(_BYTE *)(v16 + 128) = 0,
            (v35 = *(__CVBuffer **)(v16 + 120)) != 0))
      {
        CFRelease(v35);
        *(_QWORD *)(v16 + 120) = 0;
      }
    }
    if (a2)
      v36 = (__CVBuffer *)CFRetain(a2);
    else
      v36 = 0;
    *(_QWORD *)(v16 + 120) = v36;
    PixelBufferWithAttributes = CVPixelBufferLockBaseAddress(v36, 1uLL);
    if ((_DWORD)PixelBufferWithAttributes)
      goto LABEL_55;
    *(_BYTE *)(v16 + 128) = 1;
  }
  v47 = v32;
  v48 = v31;
  v49 = v25;
  v50 = v20;
  PixelBufferWithAttributes = CMPhotoPixelBufferCopyCropRectToOffset(a2, 0, (uint64_t *)&v47, (__CVBuffer *)cf, 1, 0, 0, 0);
  if (!(_DWORD)PixelBufferWithAttributes)
    goto LABEL_49;
LABEL_55:
  v43 = PixelBufferWithAttributes;
LABEL_52:
  CFRelease(v24);
  if (cf)
    CFRelease(cf);
  return v43;
}

uint64_t VTTileCompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  int v9;

  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if ((a6 & 2) != 0)
    v9 = -17104;
  else
    v9 = a5;
  if (v9)
    **(_BYTE **)(a1 + 144) = 1;
  return (*(uint64_t (**)(uint64_t))(a1 + 128))(a1);
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities(CFAllocatorRef allocator, CFDictionaryRef *a2)
{
  uint64_t result;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = allocator;
  if (CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_onceToken != -1)
    dispatch_once(&CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_onceToken, block);
  result = CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err;
  if (a2 && !CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err)
  {
    if (CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_sCapabilities)
    {
      *a2 = CFDictionaryCreateCopy(allocator, (CFDictionaryRef)CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_sCapabilities);
      return CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err;
    }
  }
  return result;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(_DWORD *a1, _DWORD *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v15;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  v12 = VTParavirtualizedJPEGSessionCreate();
  if ((_DWORD)v12 || (v12 = VTParavirtualizedJPEGSessionCopyCapabilities(), (_DWORD)v12))
  {
    v13 = v12;
  }
  else
  {
    v15 = 0;
    if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("Version"), &v15))
    {
      if (a1)
        *a1 = v15;
      if (a2)
      {
        *a2 = 1;
        CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("NumberOfCores"), a2);
      }
      if (a3)
      {
        *a3 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, CFSTR("SupportsInterchangeFormats"), a3);
      }
      if (a4)
      {
        *a4 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, CFSTR("SupportsMissingEOI"), a4);
      }
      if (a5)
      {
        *a5 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, CFSTR("SupportsRSTLogging"), a5);
      }
      if (a6)
      {
        *a6 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, CFSTR("Supports16BitQuantizationTables"), a6);
      }
      v13 = 0;
    }
    else
    {
      v13 = 4294950302;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v13;
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareEncode()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  const void *v3;
  const void *v4;
  __IOSurface *v5;
  __IOSurface *v6;
  __IOSurface *v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  const void *Value;
  uint64_t QuantizationValuesFromData;
  const void *v13;
  uint64_t v14;
  int v16;
  _BYTE outputStruct[16];
  int v18;
  _DWORD inputStruct[5];
  int v20;
  _DWORD v21[2];
  uint64_t v22;
  _DWORD v23[12];
  int v24;
  UInt8 v25[128];
  UInt8 v26[3268];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (__IOSurface *)v0;
  bzero(inputStruct, 0xDA0uLL);
  bzero(outputStruct, 0xDA0uLL);
  v8 = 0;
  v9 = 4294950306;
  if (!v7 || !v6 || !v4)
    goto LABEL_20;
  v10 = CFGetTypeID(v4);
  if (v10 != CFDictionaryGetTypeID())
  {
    v8 = 0;
    goto LABEL_20;
  }
  v8 = JPEGDeviceInterface_openDriverConnection();
  if (!(_DWORD)v8)
  {
    QuantizationValuesFromData = FigSignalErrorAt();
    goto LABEL_24;
  }
  v23[11] = 1;
  v21[1] = 0;
  v23[8] = 0;
  inputStruct[0] = IOSurfaceGetID(v7);
  inputStruct[1] = IOSurfaceGetAllocSize(v7);
  inputStruct[2] = IOSurfaceGetID(v6);
  inputStruct[3] = IOSurfaceGetAllocSize(v6);
  if (!CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("PixelsX"), &v20)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("PixelsY"), v21)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("XOffset"), (char *)&v22 + 4)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("YOffset"), v23)
    || (v16 = 0, !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("Subsampling"), &v16))
    || (v23[1] = v16, !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("Flags"), &v22))
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, CFSTR("RecordRSTOffsets"), &v24))
  {
    v9 = 4294950306;
    goto LABEL_20;
  }
  if (v24 && !JPEGDeviceInterface_supportsRSTLogging())
  {
    v9 = 4294950302;
    goto LABEL_20;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("LumaQuant"));
  QuantizationValuesFromData = _extractQuantizationValuesFromData(Value, v25);
  if ((_DWORD)QuantizationValuesFromData
    || (v13 = CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ChromaQuant")),
        QuantizationValuesFromData = _extractQuantizationValuesFromData(v13, v26),
        (_DWORD)QuantizationValuesFromData))
  {
LABEL_24:
    v9 = QuantizationValuesFromData;
    goto LABEL_20;
  }
  v14 = JPEGDeviceInterface_encodeJPEG2024(v8, inputStruct, outputStruct);
  v9 = v14;
  if (v2 && !(_DWORD)v14)
    *v2 = v18;
LABEL_20:
  JPEGDeviceInterface_closeDriverConnection(v8);
  return v9;
}

uint64_t _extractQuantizationValuesFromData(const void *a1, UInt8 *a2)
{
  CFTypeID v4;
  const UInt8 *BytePtr;
  uint64_t i;
  CFRange v8;

  if (!a1)
    return 4294950306;
  v4 = CFGetTypeID(a1);
  if (v4 == CFDataGetTypeID())
  {
    if (CFDataGetLength((CFDataRef)a1) == 64)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      for (i = 0; i != 64; ++i)
        *(_WORD *)&a2[2 * i] = BytePtr[i];
      return 0;
    }
    if (CFDataGetLength((CFDataRef)a1) == 128)
    {
      v8.location = 0;
      v8.length = 128;
      CFDataGetBytes((CFDataRef)a1, v8, a2);
      return 0;
    }
  }
  return 4294950306;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareEncode(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned __int8 a10, UInt8 *bytes, UInt8 *a12, uint64_t a13)
{
  uint64_t v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  uint64_t v21;
  CFDataRef v22;
  CFDataRef v23;
  uint64_t v24;

  v18 = VTParavirtualizedJPEGSessionCreate();
  if ((_DWORD)v18)
  {
    v24 = v18;
    v23 = 0;
    v22 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v20 = Mutable;
      v21 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("PixelsX"), a4);
      if (!(_DWORD)v21)
      {
        v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("PixelsY"), a5);
        if (!(_DWORD)v21)
        {
          v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("XOffset"), a6);
          if (!(_DWORD)v21)
          {
            v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("YOffset"), a7);
            if (!(_DWORD)v21)
            {
              v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Subsampling"), a8);
              if (!(_DWORD)v21)
              {
                v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Flags"), a9);
                if (!(_DWORD)v21)
                {
                  v21 = CMPhotoCFDictionarySetSize(v20, CFSTR("RecordRSTOffsets"), a10);
                  if (!(_DWORD)v21)
                  {
                    v22 = CFDataCreate(0, bytes, 64);
                    if (v22)
                    {
                      v23 = CFDataCreate(0, a12, 64);
                      if (v23)
                      {
                        CFDictionarySetValue(v20, CFSTR("LumaQuant"), v22);
                        CFDictionarySetValue(v20, CFSTR("ChromaQuant"), v23);
                        v24 = VTParavirtualizedJPEGSessionEncodeImage();
LABEL_13:
                        CFRelease(v20);
                        goto LABEL_14;
                      }
                    }
                    else
                    {
                      v23 = 0;
                    }
                    v24 = 4294950305;
                    goto LABEL_13;
                  }
                }
              }
            }
          }
        }
      }
      v24 = v21;
      v22 = 0;
      v23 = 0;
      goto LABEL_13;
    }
    v23 = 0;
    v22 = 0;
    v24 = 4294950305;
  }
LABEL_14:
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  return v24;
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareDecode(__IOSurface *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeID v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  CGSize v10;
  size_t AllocSize;
  uint64_t v12;
  void *BaseAddress;
  const void *v14;
  void *v15;
  uint64x2_t *v16;
  int v18;
  CGRect rect;
  uint64x2_t v20;
  uint64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  IOSurfaceRef v31;

  v31 = 0;
  v3 = 4294950306;
  if (a1 && a2 && cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      v30 = 0;
      CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, CFSTR("InputSize"), &v30);
      v29 = 0;
      if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("Width"), &v29))
      {
        v28 = 0;
        if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("Height"), &v28))
        {
          v27 = 0;
          if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("Subsampling"), &v27))
          {
            v26 = 0;
            if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("MCUsHor"), &v26))
            {
              v25 = 0;
              if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("MCUsVer"), &v25))
              {
                v24 = 0;
                if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, CFSTR("Flags"), &v24))
                {
                  v23 = 0;
                  if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, CFSTR("DecodeWidth"), &v23))
                  {
                    v22 = 0;
                    if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, CFSTR("DecodeHeight"), &v22))
                    {
                      v20 = 0u;
                      v21 = 0u;
                      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("CropRect"));
                      v9 = Value;
                      if (!Value)
                      {
LABEL_16:
                        AllocSize = IOSurfaceGetAllocSize(a1);
                        v12 = CMPhotoSurfacePoolCreateMemorySurface(0, AllocSize, 0, &v31);
                        if ((_DWORD)v12)
                        {
LABEL_22:
                          v3 = v12;
                          goto LABEL_23;
                        }
                        IOSurfaceLock(a1, 1u, 0);
                        IOSurfaceLock(v31, 0, 0);
                        BaseAddress = IOSurfaceGetBaseAddress(a1);
                        if (BaseAddress)
                        {
                          v14 = BaseAddress;
                          v15 = IOSurfaceGetBaseAddress(v31);
                          if (v15)
                          {
                            memcpy(v15, v14, AllocSize);
                            IOSurfaceUnlock(v31, 0, 0);
                            IOSurfaceUnlock(a1, 1u, 0);
                            v16 = &v20;
                            if (!v9)
                              v16 = 0;
                            v12 = JPEGDecompressSurfaceHelper(0, (uint64_t)v31, v30, a2, v29, v28, v27, v26, v25, v24, 0, v18, v23, SHIDWORD(v23), v22, v16->i64, 0, 0);
                            goto LABEL_22;
                          }
                        }
                        goto LABEL_26;
                      }
                      v10 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
                      rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
                      rect.size = v10;
                      if (CGRectMakeWithDictionaryRepresentation(Value, &rect))
                      {
                        v20 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)rect.origin));
                        v21 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)rect.size));
                        goto LABEL_16;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    v3 = 4294950306;
  }
LABEL_23:
  if (v31)
    CFRelease(v31);
  return v3;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareDecode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  uint64_t v18;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  uint64_t v21;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v23;
  uint64_t v24;
  CGRect v26;

  v18 = VTParavirtualizedJPEGSessionCreate();
  if ((_DWORD)v18)
    return v18;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v20 = Mutable;
  if (!a2 || (v21 = CMPhotoCFDictionarySetSize(Mutable, CFSTR("InputSize"), a2), !(_DWORD)v21))
  {
    v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Width"), a4);
    if (!(_DWORD)v21)
    {
      v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Height"), a5);
      if (!(_DWORD)v21)
      {
        v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Subsampling"), a6);
        if (!(_DWORD)v21)
        {
          v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("MCUsHor"), a7);
          if (!(_DWORD)v21)
          {
            v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("MCUsVer"), a8);
            if (!(_DWORD)v21)
            {
              v21 = CMPhotoCFDictionarySetInt32(v20, CFSTR("Flags"), a9);
              if (!(_DWORD)v21)
              {
                v21 = CMPhotoCFDictionarySetSize(v20, CFSTR("DecodeWidth"), a10);
                if (!(_DWORD)v21)
                {
                  v21 = CMPhotoCFDictionarySetSize(v20, CFSTR("DecodeHeight"), a11);
                  if (!(_DWORD)v21)
                  {
                    if (a12)
                    {
                      v26.origin.x = (double)*a12;
                      v26.origin.y = (double)a12[1];
                      v26.size.width = (double)a12[2];
                      v26.size.height = (double)a12[3];
                      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v26);
                      if (!DictionaryRepresentation)
                      {
                        v24 = 4294950305;
                        goto LABEL_18;
                      }
                      v23 = DictionaryRepresentation;
                      CFDictionarySetValue(v20, CFSTR("CropRect"), DictionaryRepresentation);
                      CFRelease(v23);
                    }
                    v21 = VTParavirtualizedJPEGSessionDecodeImage();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v24 = v21;
LABEL_18:
  CFRelease(v20);
  return v24;
}

CFTypeID _once_CMPhotoGetImageType()
{
  CFTypeID result;

  sTypes = 0;
  qword_1ECEF23F8 = IOSurfaceGetTypeID();
  qword_1ECEF2400 = CVPixelBufferGetTypeID();
  qword_1ECEF2408 = CMSampleBufferGetTypeID();
  result = CGImageGetTypeID();
  qword_1ECEF2410 = result;
  return result;
}

uint64_t CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN(uint64_t result, const __CFString **a2)
{
  const __CFString *v3;
  int v4;
  BOOL v5;

  if (!result)
  {
    v3 = 0;
    goto LABEL_6;
  }
  v3 = CFSTR("urn:mpeg:hevc:2015:auxid:2");
  if (FigCFEqual()
    || (v3 = CFSTR("urn:mpeg:mpegB:cicp:systems:auxiliary:depth"), FigCFEqual()))
  {
    result = 2;
    goto LABEL_6;
  }
  if (FigCFEqual())
  {
    v3 = CFSTR("urn:mpeg:hevc:2015:auxid:2");
LABEL_12:
    result = 1;
    goto LABEL_6;
  }
  if (FigCFEqual())
    goto LABEL_12;
  v3 = CFSTR("urn:mpeg:hevc:2015:auxid:1");
  if (FigCFEqual()
    || (v3 = CFSTR("urn:mpeg:mpegB:cicp:systems:auxiliary:alpha"), FigCFEqual()))
  {
    result = 3;
  }
  else
  {
    v3 = CFSTR("urn:com:apple:photo:2018:aux:portraiteffectsmatte");
    if (FigCFEqual())
    {
      result = 5;
    }
    else
    {
      v3 = CFSTR("urn:com:apple:photo:2019:aux:semanticskinmatte");
      if (FigCFEqual())
        goto LABEL_27;
      v3 = CFSTR("urn:com:apple:photo:2019:aux:semantichairmatte");
      if (FigCFEqual()
        || (v3 = CFSTR("urn:com:apple:photo:2019:aux:semanticteethmatte"), FigCFEqual())
        || (v3 = CFSTR("urn:com:apple:photo:2020:aux:semanticskymatte"), FigCFEqual())
        || (v3 = CFSTR("urn:com:apple:photo:2020:aux:semanticglassesmatte"), FigCFEqual())
        || (v3 = CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), FigCFEqual())
        || (v3 = CFSTR("tag:apple.com,2023:photo:aux:linearthumbnail"), FigCFEqual())
        || (v3 = CFSTR("tag:apple.com,2023:photo:aux:deltamap"), FigCFEqual())
        || (v3 = CFSTR("tag:apple.com,2023:photo:aux:styledeltamap"), FigCFEqual()))
      {
LABEL_27:
        result = 4;
      }
      else
      {
        v3 = CFSTR("tag:apple.com,2023:photo:aux:constantcolorconfidencemap");
        v4 = FigCFEqual();
        v5 = v4 == 0;
        result = 4 * (v4 != 0);
        if (v5)
          v3 = 0;
      }
    }
  }
LABEL_6:
  if (a2)
    *a2 = v3;
  return result;
}

uint64_t CMPhotoCreatePixelBufferFromCGImage(CGImage *a1, const __CFString *a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  unint64_t Width;
  unint64_t Height;
  size_t v12;
  CGColorSpaceRef ColorSpace;
  CFStringRef *v14;
  void *v15;
  uint64_t v16;
  CGImageAlphaInfo AlphaInfo;
  __int16 BitmapInfo;
  unsigned int v19;
  _BOOL4 v21;
  CGColorSpaceModel Model;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  size_t BytesPerRow;
  char *BaseAddress;
  int v33;
  int v34;
  CGColorSpace *v35;
  CGImage *CopyWithColorSpace;
  CGContext *v37;
  uint64_t v38;
  CGColorSpace *v39;
  CGContext *v40;
  uint32_t v41;
  CGColorSpace *v42;
  CGContext *v43;
  uint64_t i;
  char *Data;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char v51;
  __CVBuffer *v52;
  uint64_t DefaultTripletsForTransfer;
  int v54;
  double v55;
  double v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  CGContext *cf;
  size_t bitsPerComponent;
  CGImage *image;
  CGColorSpace *space;
  CVBufferRef buffer;
  __CVBuffer *v68;
  CGRect v69;
  CGRect v70;

  buffer = 0;
  v68 = 0;
  if (!a1)
    return FigSignalErrorAt();
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  v12 = CGImageGetBitsPerComponent(a1);
  ColorSpace = CGImageGetColorSpace(a1);
  v14 = (CFStringRef *)MEMORY[0x1E0C9DA10];
  if (ColorSpace && (v15 = (void *)CFRetain(ColorSpace)) != 0 || (v15 = CGColorSpaceCreateWithName(*v14)) != 0)
  {
    v62 = a3;
    v60 = a4;
    if (CGColorSpaceGetModel((CGColorSpaceRef)v15) == kCGColorSpaceModelIndexed)
    {
      v16 = CGColorSpaceCopyBaseColorSpace();
      CFRelease(v15);
      v15 = (void *)v16;
    }
    AlphaInfo = CGImageGetAlphaInfo(a1);
    BitmapInfo = CGImageGetBitmapInfo(a1);
    v19 = AlphaInfo - 1;
    v21 = !CMPhotoExtensionIsPNG(a2) && v19 < 2;
    Model = CGColorSpaceGetModel((CGColorSpaceRef)v15);
    v23 = BitmapInfo & 0x100;
    v24 = 16;
    if (v12 > 0x10)
      v24 = 32;
    if (v12 <= 8)
      v24 = 8;
    bitsPerComponent = v24;
    if (v12 >= 0x11 && !v23)
      goto LABEL_96;
    if (v12 <= 0xA)
      v25 = 1278226736;
    else
      v25 = 1278226742;
    if (v12 <= 0x10)
      v26 = 1380411457;
    else
      v26 = 1380410945;
    if (!v23)
      v26 = 1815491698;
    v27 = v12 <= 8 ? 1278226488 : v25;
    v28 = v12 <= 8 ? 1111970369 : v26;
    v29 = Model ? v28 : v27;
    if (CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v29, Width, Height, 1, 0, 0, 1, 0, 0, &buffer))
    {
LABEL_96:
      v38 = FigSignalErrorAt();
      cf = 0;
      v37 = 0;
      v39 = 0;
    }
    else
    {
      v61 = a5;
      if (Model)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CD8], v15, kCVAttachmentMode_ShouldPropagate);
      if (v19 >= 4)
        v30 = 2;
      else
        v30 = v21;
      CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(buffer, v19 > 3, v30);
      BytesPerRow = CVPixelBufferGetBytesPerRow(buffer);
      CVPixelBufferLockBaseAddress(buffer, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(buffer);
      if (v12 <= 0x10)
        v33 = 4101;
      else
        v33 = 8197;
      if (v12 <= 8)
        v33 = 8198;
      if (Model)
        v34 = v33;
      else
        v34 = 0;
      if (CGColorSpaceSupportsOutput((CGColorSpaceRef)v15))
      {
        if (v15)
          space = (CGColorSpace *)CFRetain(v15);
        else
          space = 0;
        CopyWithColorSpace = (CGImage *)CFRetain(a1);
LABEL_58:
        image = CopyWithColorSpace;
        v40 = CGBitmapContextCreate(BaseAddress, Width, Height, bitsPerComponent, BytesPerRow, space, v34 | v23);
        cf = v40;
        if (v40)
        {
          v69.origin.x = 0.0;
          v69.origin.y = 0.0;
          v69.size.width = (double)Width;
          v69.size.height = (double)Height;
          CGContextDrawImage(v40, v69, image);
          v37 = 0;
          if (v19 > 3 || v23)
            goto LABEL_77;
          if (v12 <= 8)
            v41 = 7;
          else
            v41 = 4097;
          if (v12 <= 8)
            v42 = 0;
          else
            v42 = (CGColorSpace *)v15;
          v43 = CGBitmapContextCreate(0, Width, Height, bitsPerComponent, BytesPerRow, v42, v41);
          v37 = v43;
          if (v43)
          {
            v70.origin.x = 0.0;
            v70.origin.y = 0.0;
            v70.size.width = (double)Width;
            v70.size.height = (double)Height;
            CGContextDrawImage(v43, v70, a1);
            if (Height)
            {
              for (i = 0; i != Height; ++i)
              {
                Data = (char *)CGBitmapContextGetData(v37);
                if (Width)
                {
                  v46 = &Data[i * BytesPerRow];
                  v47 = &BaseAddress[i * BytesPerRow];
                  v48 = Width;
                  v49 = v46;
                  v50 = v47;
                  do
                  {
                    if (v12 < 9)
                    {
                      v51 = *v49++;
                      v50[3] = v51;
                      v50 += 4;
                    }
                    else
                    {
                      *((_WORD *)v47 + 3) = *((_WORD *)v46 + 3);
                      v47 += 8;
                      v46 += 8;
                    }
                    --v48;
                  }
                  while (v48);
                }
              }
            }
LABEL_77:
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            v52 = buffer;
            if (v62)
            {
              DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(buffer, v62);
              v57 = CMPhotoScaleAndRotateSessionTransformForSize(0, buffer, 1, 1, v62, DefaultTripletsForTransfer, v54, 0, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v55, v56, v60, 1u, &v68);
              v58 = v61;
              v39 = space;
              if ((_DWORD)v57)
              {
                v38 = v57;
                FigSignalErrorAt();
                goto LABEL_83;
              }
            }
            else
            {
              buffer = 0;
              v68 = v52;
              v58 = v61;
              v39 = space;
            }
            v38 = 0;
            if (v58)
            {
              *v58 = v68;
              v68 = 0;
            }
            goto LABEL_83;
          }
          v38 = FigSignalErrorAt();
        }
        else
        {
          v38 = FigSignalErrorAt();
          v37 = 0;
        }
        v39 = space;
LABEL_83:
        if (image)
          CFRelease(image);
        goto LABEL_85;
      }
      v35 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (v35)
      {
        space = v35;
        CopyWithColorSpace = CGImageCreateCopyWithColorSpace(a1, v35);
        if (CopyWithColorSpace)
          goto LABEL_58;
        cf = 0;
        v37 = 0;
        v38 = 4294950305;
        v39 = space;
      }
      else
      {
        cf = 0;
        v37 = 0;
        v39 = 0;
        v38 = 4294950305;
      }
    }
LABEL_85:
    if (v15)
      CFRelease(v15);
    if (v39)
      CFRelease(v39);
    if (cf)
      CFRelease(cf);
    if (v37)
      CFRelease(v37);
    goto LABEL_93;
  }
  v38 = FigSignalErrorAt();
LABEL_93:
  if (buffer)
    CFRelease(buffer);
  return v38;
}

uint64_t CMPhotoGetTripletsForColorSpaceUsingColorSync(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  OSType v8;
  uint64_t result;

  v8 = a2;
  CMPhotoPixelFormatIsFullRange(a2);
  CMPhotoPixelFormatContainsRGB(v8);
  CGColorSpaceGetCICPInfo();
  result = FigSignalErrorAt();
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  return result;
}

uint64_t CMPhotoGetTripletsForColorSpace(CGColorSpace *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  int IsFullRange;
  BOOL v11;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  IsFullRange = CMPhotoPixelFormatIsFullRange(a2);
  v11 = 1;
  if ((int)a2 <= 1278226735)
  {
    if ((a2 - 1278226488) <= 0x30 && ((1 << (a2 - 56)) & 0x1400000000001) != 0)
      goto LABEL_15;
    goto LABEL_9;
  }
  if (((a2 - 1278226736) > 6 || ((1 << (a2 - 48)) & 0x45) == 0)
    && (_DWORD)a2 != 1717855600
    && (_DWORD)a2 != 1751410032)
  {
LABEL_9:
    v11 = (_DWORD)a2 == 1751411059 || (_DWORD)a2 == 1717856627;
  }
LABEL_15:
  if (CMPhotoPixelFormatContainsRGB(a2))
    v13 = 1;
  else
    v13 = v11;
  if (!a1)
  {
    result = FigSignalErrorAt();
    goto LABEL_67;
  }
  if (!a3 && !a4 && !a5)
    return 0;
  if (!CGColorSpaceGetName(a1))
    goto LABEL_66;
  if (FigCFEqual())
  {
    v14 = (uint64_t *)MEMORY[0x1E0CA8D88];
LABEL_27:
    v24 = *v14;
    v15 = (uint64_t *)MEMORY[0x1E0CA8EE0];
    goto LABEL_28;
  }
  if (FigCFEqual())
  {
    v14 = (uint64_t *)MEMORY[0x1E0CA8D98];
    goto LABEL_27;
  }
  if (FigCFEqual())
  {
    v24 = *MEMORY[0x1E0CA8D88];
    v18 = (uint64_t *)MEMORY[0x1E0CA8EB0];
LABEL_35:
    v23 = *v18;
    if ((v13 & 1) != 0)
      goto LABEL_29;
    result = 0;
    v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
LABEL_32:
    v22 = *v17;
    goto LABEL_67;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v19 = (uint64_t *)MEMORY[0x1E0CA8D88];
LABEL_40:
    v24 = *v19;
    v15 = (uint64_t *)MEMORY[0x1E0CA8EB8];
    goto LABEL_28;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v19 = (uint64_t *)MEMORY[0x1E0CA8D98];
    goto LABEL_40;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v24 = *MEMORY[0x1E0CA8D80];
    v20 = (uint64_t *)MEMORY[0x1E0CA8EB8];
LABEL_47:
    v23 = *v20;
    if ((v13 & 1) != 0)
      goto LABEL_29;
    result = 0;
    v17 = (uint64_t *)MEMORY[0x1E0CA8F00];
    goto LABEL_32;
  }
  if (FigCFEqual())
  {
    result = 0;
    v21 = (uint64_t *)MEMORY[0x1E0CA8EB8];
LABEL_53:
    v23 = *v21;
    goto LABEL_67;
  }
  if (FigCFEqual())
  {
    v24 = *MEMORY[0x1E0CA8D88];
    v18 = (uint64_t *)MEMORY[0x1E0CA8EC8];
    goto LABEL_35;
  }
  if (FigCFEqual())
  {
    v24 = *MEMORY[0x1E0CA8D98];
    v15 = (uint64_t *)MEMORY[0x1E0CA8EC8];
    goto LABEL_28;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v24 = *MEMORY[0x1E0CA8D80];
      v20 = (uint64_t *)MEMORY[0x1E0CA8EC8];
      goto LABEL_47;
    }
    if (FigCFEqual())
    {
      v24 = *MEMORY[0x1E0CA8D80];
      v20 = (uint64_t *)MEMORY[0x1E0CA8EA8];
      goto LABEL_47;
    }
    if (FigCFEqual())
    {
      result = 0;
      v21 = (uint64_t *)MEMORY[0x1E0CA8EE0];
      goto LABEL_53;
    }
LABEL_66:
    result = CMPhotoGetTripletsForColorSpaceUsingColorSync((uint64_t)a1, a2, &v24, &v23, &v22);
    goto LABEL_67;
  }
  v24 = *MEMORY[0x1E0CA8D98];
  v15 = (uint64_t *)MEMORY[0x1E0CA8EA8];
LABEL_28:
  v23 = *v15;
  if ((v13 & 1) == 0)
  {
    result = 0;
    v17 = (uint64_t *)MEMORY[0x1E0CA8F10];
    if (!IsFullRange)
      v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
    goto LABEL_32;
  }
LABEL_29:
  result = 0;
LABEL_67:
  if (a3)
    *a3 = v24;
  if (a4)
    *a4 = v23;
  if (a5)
    *a5 = v22;
  return result;
}

uint64_t CMPhotoCreateAllowedTransferArrayForColorSpace(CGColorSpace *a1, __CFArray **a2)
{
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  const void **v6;
  uint64_t v7;

  if (!a1)
  {
    v7 = FigSignalErrorAt();
    if (!a2)
      return v7;
    goto LABEL_27;
  }
  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v7 = FigSignalErrorAt();
LABEL_27:
    *a2 = 0;
    return v7;
  }
  v5 = Mutable;
  if (CGColorSpaceGetName(a1))
  {
    if (FigCFEqual() || FigCFEqual())
    {
      CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E0CA8EE0]);
LABEL_8:
      v6 = (const void **)MEMORY[0x1E0CA8EB0];
LABEL_9:
      CFArrayAppendValue(v5, *v6);
      v7 = 0;
      goto LABEL_10;
    }
    if (FigCFEqual())
      goto LABEL_8;
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      v6 = (const void **)MEMORY[0x1E0CA8EB8];
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
LABEL_30:
      v6 = (const void **)MEMORY[0x1E0CA8EC8];
      goto LABEL_9;
    }
    if (FigCFEqual())
      goto LABEL_32;
    if (FigCFEqual())
      goto LABEL_30;
    if (FigCFEqual())
    {
LABEL_32:
      v6 = (const void **)MEMORY[0x1E0CA8EA8];
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
      v6 = (const void **)MEMORY[0x1E0CA8EE0];
      goto LABEL_9;
    }
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = 4294950303;
  }
LABEL_10:
  if (CFArrayGetCount(v5))
  {
    *a2 = v5;
  }
  else
  {
    *a2 = 0;
    CFRelease(v5);
  }
  return v7;
}

const __CFString *CMPhotoGetCGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType(int a1)
{
  uint64_t v1;
  const __CFString **v2;
  const __CFString *result;

  switch(a1)
  {
    case 1:
      v1 = MEMORY[0x1E0CBC708];
      return *(const __CFString **)v1;
    case 2:
      v1 = MEMORY[0x1E0CBC700];
      return *(const __CFString **)v1;
    case 3:
      v1 = MEMORY[0x1E0CBC6F8];
      return *(const __CFString **)v1;
    case 4:
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC720];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC738];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC730];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC748];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC740];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC728];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        v2 = (const __CFString **)MEMORY[0x1E0CBC710];
LABEL_21:
        result = *v2;
        if (*v2)
          return result;
        goto LABEL_22;
      }
      if (FigCFEqual())
        return CFSTR("kCGImageAuxiliaryDataTypeLinearThumbnail");
      if (FigCFEqual())
        return CFSTR("kCGImageAuxiliaryDataTypeDeltaMap");
      if (FigCFEqual())
        return CFSTR("kCGImageAuxiliaryDataTypeStyleDeltaMap");
      if (!FigCFEqual())
      {
LABEL_22:
        FigSignalErrorAt();
        return 0;
      }
      return CFSTR("kCGImageAuxiliaryDataTypeConstantColorConfidenceMap");
    case 5:
      v1 = MEMORY[0x1E0CBC720];
      return *(const __CFString **)v1;
    default:
      goto LABEL_22;
  }
}

uint64_t CMPhotoGetCMPhotoAuxiliaryImageTypeFromCGImageAuxiliaryDataType(uint64_t result, const __CFString **a2, int *a3)
{
  const __CFString *v5;
  int v6;
  __CFString **v7;

  if (result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v5 = CFSTR("urn:mpeg:hevc:2015:auxid:2");
      v6 = 1;
      if (!a2)
        goto LABEL_36;
LABEL_35:
      *a2 = v5;
      goto LABEL_36;
    }
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v5 = CFSTR("urn:mpeg:hevc:2015:auxid:2");
      v6 = 2;
      if (a2)
        goto LABEL_35;
    }
    else
    {
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        v5 = CFSTR("urn:mpeg:hevc:2015:auxid:1");
        v6 = 3;
        if (a2)
          goto LABEL_35;
      }
      else
      {
        result = FigCFEqual();
        if (!(_DWORD)result)
        {
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticSkinMatte;
          }
          else
          {
            result = FigCFEqual();
            if ((_DWORD)result)
            {
              v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticHairMatte;
            }
            else
            {
              result = FigCFEqual();
              if ((_DWORD)result)
              {
                v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticTeethMatte;
              }
              else
              {
                result = FigCFEqual();
                if ((_DWORD)result)
                {
                  v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticSkyMatte;
                }
                else
                {
                  result = FigCFEqual();
                  if ((_DWORD)result)
                  {
                    v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticGlassesMatte;
                  }
                  else
                  {
                    result = FigCFEqual();
                    if ((_DWORD)result)
                    {
                      v7 = kCMPhotoAuxiliaryImageTypeURN_HDRGainMap;
                    }
                    else
                    {
                      result = FigCFEqual();
                      if ((_DWORD)result)
                      {
                        v7 = kCMPhotoAuxiliaryImageTypeURN_LinearThumbnail;
                      }
                      else
                      {
                        result = FigCFEqual();
                        if ((_DWORD)result)
                        {
                          v7 = kCMPhotoAuxiliaryImageTypeURN_DeltaMap;
                        }
                        else
                        {
                          result = FigCFEqual();
                          if (!(_DWORD)result)
                          {
                            result = FigCFEqual();
                            v5 = CFSTR("tag:apple.com,2023:photo:aux:constantcolorconfidencemap");
                            if (!(_DWORD)result)
                              v5 = 0;
                            v6 = 4 * ((_DWORD)result != 0);
                            if (a2)
                              goto LABEL_35;
                            goto LABEL_36;
                          }
                          v7 = kCMPhotoAuxiliaryImageTypeURN_StyleDeltaMap;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v5 = *v7;
          v6 = 4;
          if (!a2)
            goto LABEL_36;
          goto LABEL_35;
        }
        v5 = CFSTR("urn:com:apple:photo:2018:aux:portraiteffectsmatte");
        v6 = 5;
        if (a2)
          goto LABEL_35;
      }
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if (a2)
      goto LABEL_35;
  }
LABEL_36:
  if (a3)
    *a3 = v6;
  return result;
}

uint64_t CMPhotoAddValueToCGMutableImageMetadata(CGImageMetadata *a1, CFTypeRef value, CFStringRef xmlns, CFStringRef prefix, CFStringRef name)
{
  CGImageMetadataTagRef v8;
  CGImageMetadataTag *v9;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  const __CFString *v12;
  uint64_t v13;

  if (!value)
    return 4294950306;
  v8 = CGImageMetadataTagCreate(xmlns, prefix, name, kCGImageMetadataTypeDefault, value);
  if (!v8)
    return 4294950306;
  v9 = v8;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, prefix);
  CFArrayAppendValue(Mutable, name);
  v12 = CFStringCreateByCombiningStrings(v10, Mutable, CFSTR(":"));
  if (CGImageMetadataSetTagWithPath(a1, 0, v12, v9))
    v13 = 0;
  else
    v13 = 4294950306;
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(v9);
  if (v12)
    CFRelease(v12);
  return v13;
}

uint64_t CMPhotoAddMeteorPlusGainMapMetadata(const CGImageMetadata *a1, CGMutableImageMetadataRef metadata)
{
  uint64_t CFNumberFormatter;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  CGImageMetadataTag *ValueAtIndex;
  CFStringRef v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t v14;
  CFTypeRef v15;
  CGImageMetadata *v16;
  const __CFString *v17;
  uint64_t v18;
  CFTypeRef cf;
  CFTypeRef v21;

  cf = 0;
  v21 = 0;
  if (!CGImageMetadataRegisterNamespaceForPrefix(metadata, CFSTR("http://ns.apple.com/HDRGainMap/1.0/"), CFSTR("HDRGainMap"), 0))
  {
    v18 = 4294950304;
    goto LABEL_27;
  }
  CFNumberFormatter = CMPhotoMetadataCreateCFNumberFormatter((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CFNumberFormatterRef *)&v21);
  if ((_DWORD)CFNumberFormatter)
  {
    v18 = CFNumberFormatter;
    goto LABEL_27;
  }
  v5 = CGImageMetadataCopyTags(a1);
  if (!v5)
  {
    v18 = 4294950194;
    goto LABEL_27;
  }
  v6 = v5;
  Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    v18 = 0;
    goto LABEL_26;
  }
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v6, v9);
    v11 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v11)
      break;
LABEL_17:
    if (v8 == ++v9)
    {
      v18 = 0;
      v12 = 0;
      v13 = 0;
      goto LABEL_19;
    }
  }
  v12 = v11;
  v13 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (v13)
  {
    if (FigCFEqual())
    {
      v14 = CMPhotoCopyMetadataTagValue(ValueAtIndex, (__CFNumberFormatter *)v21, 0, (__CFArray **)&cf);
      if ((_DWORD)v14)
        goto LABEL_30;
      if (FigCFEqual())
      {
        v15 = cf;
        v16 = metadata;
        v17 = CFSTR("HDRGainMapHeadroom");
        goto LABEL_14;
      }
      if (FigCFEqual())
      {
        v17 = CFSTR("HDRGainMapVersion");
        v15 = cf;
        v16 = metadata;
LABEL_14:
        v14 = CMPhotoAddValueToCGMutableImageMetadata(v16, v15, CFSTR("http://ns.apple.com/HDRGainMap/1.0/"), CFSTR("HDRGainMap"), v17);
        if ((_DWORD)v14)
        {
LABEL_30:
          v18 = v14;
          goto LABEL_19;
        }
      }
    }
    CFRelease(v12);
    CFRelease(v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_17;
  }
  v18 = 4294950194;
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
LABEL_26:
  CFRelease(v6);
LABEL_27:
  if (v21)
    CFRelease(v21);
  return v18;
}

uint64_t CMPhotoScaleAndRotateSessionGetTypeID()
{
  pthread_once(&CMPhotoScaleAndRotateSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoScaleAndRotateSession);
  return sCMPhotoScaleAndRotateSessionTypeID;
}

uint64_t CMPhotoScaleAndRotateSessionSetSurfacePool(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3;
  unint64_t *v4;
  const void *v5;
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v3 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    v3 = defaultSession;
  }
  v6 = *(const void **)(v3 + 16);
  v4 = (unint64_t *)(v3 + 16);
  v5 = v6;
  if (cf)
  {
    CFRetain(cf);
    while (1)
    {
      v7 = __ldxr(v4);
      if ((const void *)v7 != v5)
        break;
      if (!__stxr((unint64_t)cf, v4))
        goto LABEL_7;
    }
    __clrex();
    v8 = 4294950304;
LABEL_13:
    CFRelease(cf);
    return v8;
  }
  else
  {
    do
    {
      v10 = __ldxr(v4);
      if ((const void *)v10 != v5)
      {
        __clrex();
        return 4294950304;
      }
    }
    while (__stxr(0, v4));
LABEL_7:
    v8 = 0;
    result = 0;
    cf = v5;
    if (v5)
      goto LABEL_13;
  }
  return result;
}

uint64_t CMPhotoScaleAndRotateSessionGetSurfacePool(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSize(uint64_t a1, __CVBuffer *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, unsigned __int8 a18, __CVBuffer **a19)
{
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, 0, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
           0,
           0,
           a19);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSizeWithHW(uint64_t a1, __CVBuffer *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, unsigned __int8 a18, char a19, char a20,char a21,unsigned int a22,__CVBuffer **a23)
{
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v34;
  __CVBuffer *v35;
  int v38;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  int v45;
  __CVBuffer *v46;
  int v47;
  unsigned __int8 v48;
  CGRect v49;

  if (!a23)
    return 4294950306;
  v23 = a8;
  v24 = a6;
  v34 = a1;
  if (!a1)
  {
    v35 = a2;
    v38 = a7;
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    a7 = v38;
    a2 = v35;
    v23 = a8;
    v24 = a6;
    v34 = defaultSession;
  }
  if (a13 == *MEMORY[0x1E0C9D820] && a14 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    v45 = a7;
    v46 = a2;
    v48 = v23;
    v47 = a4;
    v40 = a5;
    v41 = v24;
    v49.origin.x = a9;
    v49.origin.y = a10;
    v49.size.width = a11;
    v49.size.height = a12;
    if (CGRectIsNull(v49))
    {
      CMPhotoGetPixelBufferCLAPAsRect(v46);
      a2 = v46;
      a13 = v42;
      a14 = v43;
      v24 = v41;
      a5 = v40;
      a4 = v47;
      v23 = v48;
    }
    else
    {
      a13 = a11;
      a14 = a12;
      v24 = v41;
      a5 = v40;
      a4 = v47;
      v23 = v48;
      a2 = v46;
    }
    a7 = v45;
  }
  return _convertAndScalePixelBufferOddSafe(v34, a2, 0, a3, a4, a5, v24, a7, a9, a10, a11, a12, a13, a14, a15, a16, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16),
           *(double *)(MEMORY[0x1E0C9D628] + 24),
           v23,
           a17,
           a18,
           a19,
           a21,
           a22,
           a23);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForMaxSideLength(uint64_t a1, __CVBuffer *a2, int a3, int a4, unsigned int a5, int a6, unint64_t a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, __CVBuffer **a17)
{
  return CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(a1, a2, 0, a3, a4, a5, a6, a7, a9, a10, a11, a12, a8, a13, a14, a15, a16, 0, 0,
           0,
           a17);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, unsigned int a6, int a7, unint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16, unsigned __int8 a17, char a18, char a19, char a20,__CVBuffer **a21)
{
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v38;
  unint64_t v39;

  if (CGRectIsNull(*(CGRect *)&a9))
  {
    CMPhotoGetPixelBufferCLAPAsRect(a2);
  }
  else
  {
    v28 = a12;
    v27 = a11;
  }
  v38 = 0;
  v39 = 0;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(v27), vcvtad_u64_f64(v28), a8, 0, 0, a13, a15, &v38, 0, 0);
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, a3, a4, a5, a6, 0, a7, a9, a10, a11, a12, (double)v38, (double)v39, v29, v30, a14, a16, a17,
           a18,
           a20,
           a21);
}

uint64_t CMPhotoScaleAndRotateSessionTransformIntoCanvas(uint64_t a1, __CVBuffer *a2, int a3, int a4, __CVBuffer *a5, int a6, unsigned __int8 a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12, CGFloat a13, CGFloat a14, CGFloat a15)
{
  return CMPhotoScaleAndRotateSessionTransformWithRect(a1, a2, a3, a4, a5, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void CMPhotoScaleAndRotateSessionDiscardCaches(uint64_t a1, uint64_t a2)
{
  CMPhotoScaleAndRotateSessionFlushCaches(a1, a2, 1);
}

uint64_t CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(uint64_t a1, char a2, uint64_t a3, char a4, __CVBuffer **a5)
{
  uint64_t PixelFormatType;
  uint64_t DefaultTripletsForTransfer;
  int v11;
  int v12;
  _BOOL4 v13;
  double v14;
  double v15;
  uint64_t v16;
  __CVBuffer *v18;

  if (!a5 || !*a5)
    return 4294950306;
  if (!CMPhotoPixelBufferHasCLAP(*a5))
    return 0;
  v18 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(*a5);
  DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(*a5, PixelFormatType);
  v12 = v11;
  v13 = CVPixelBufferGetIOSurface(*a5) != 0;
  v16 = _scaleAndRotateSessionTransformForSizeWithOptions(a1, *a5, 0, v13, 1, PixelFormatType, DefaultTripletsForTransfer, v12, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v14, v15, 1u, 0, 0,
          a2,
          a4,
          &v18);
  if (!(_DWORD)v16)
  {
    if (*a5)
      CFRelease(*a5);
    *a5 = v18;
  }
  return v16;
}

void CMPhotoScaleAndRotateSessionClass_Finalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = a1[4];
  if (v3)
  {
    dispatch_release(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_release(v5);
    a1[7] = 0;
  }
  v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
}

CFTypeRef CMPhotoScaleAndRotateSessionClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoScaleAndRotateSession]"));
}

uint64_t JPEGDecompressionPluginClass_create(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v9;
  int v10;
  dispatch_queue_t v11;
  CFTypeRef v12;
  char v14;
  char v15;

  v4 = 0;
  v5 = 4294950306;
  if (!a1 || !a4)
    goto LABEL_17;
  v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040DC7B7DF3uLL);
  v4 = v9;
  if (!v9)
  {
    v5 = 4294950305;
    goto LABEL_17;
  }
  if (a3)
  {
    *(_QWORD *)v9 = CFRetain(a3);
    v4[5] = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("SyncDecode"), (_BYTE *)v4 + 16);
    v15 = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("PreferSoftwareCodec"), &v15);
    v14 = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, CFSTR("RequireHardwareCodec"), &v14);
    if (v15)
    {
      v10 = 1;
LABEL_10:
      v4[5] = v10;
      goto LABEL_11;
    }
    if (v14)
    {
      v10 = 2;
      goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)v9 = 0;
    v9[5] = 0;
  }
LABEL_11:
  if (*((_BYTE *)v4 + 16)
    || (v11 = dispatch_queue_create("com.apple.coremedia.jpeg-decoder", 0), (*((_QWORD *)v4 + 3) = v11) != 0))
  {
    if (a2)
      v12 = CFRetain(a2);
    else
      v12 = 0;
    v5 = 0;
    *((_QWORD *)v4 + 1) = v12;
    *(_QWORD *)(a1 + 64) = v4;
    v4 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
LABEL_17:
  PluginInstance_Dispose((const void **)v4);
  return v5;
}

void JPEGDecompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    PluginInstance_Dispose(*(const void ***)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
  }
}

uint64_t JPEGDecompressionPluginClass_supportsNativeTiling()
{
  return 0;
}

uint64_t JPEGDecompressionPluginClass_decode(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, uint64_t a4)
{
  uint64_t v5;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v10;
  const __CFDictionary *Extension;
  const __CFData *Value;
  const __CFData *v13;
  CFIndex Length;
  size_t v15;
  const __CFAllocator *v16;
  UInt8 *BytePtr;
  uint64_t appended;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID v21;
  char v22;
  uint64_t v23;
  CFTypeRef v24;
  char *v25;
  char *v26;
  CFTypeRef v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  char v32;
  char v34[8];
  uint64_t v35;
  CFTypeRef v36;
  uint64x2_t v37;
  __int128 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  uint64_t v43;
  char DecodeHighSpeedDefault;
  char v45;
  int v46;
  uint64x2_t v47;
  __int128 v48;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (!a1)
    return 4294950306;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if (a3)
    {
      v47 = 0u;
      v48 = 0u;
      v46 = 0;
      v45 = 0;
      DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
      DataBuffer = CMSampleBufferGetDataBuffer(a3);
      if (DataBuffer)
      {
        v10 = DataBuffer;
        Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v5 + 8), (CFStringRef)*MEMORY[0x1E0CA2240]);
        if (Extension)
        {
          Value = (const __CFData *)CFDictionaryGetValue(Extension, CFSTR("jpgC"));
          if (Value)
          {
            v13 = Value;
            Length = CFDataGetLength(Value);
            if (Length)
            {
              v15 = Length;
              v16 = *(const __CFAllocator **)a1;
              BytePtr = (UInt8 *)CFDataGetBytePtr(v13);
              appended = CMBlockBufferCreateWithMemoryBlock(v16, BytePtr, v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, v15, 0, &blockBufferOut);
              if ((_DWORD)appended)
                goto LABEL_18;
              appended = CMBlockBufferAppendBufferReference(blockBufferOut, v10, 0, 0, 0);
              if ((_DWORD)appended)
                goto LABEL_18;
              v10 = blockBufferOut;
            }
          }
        }
        if (a2)
        {
          v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("SourceCropRect"));
          if (v19
            && ((v20 = v19, v21 = CFGetTypeID(v19), v21 != CFDictionaryGetTypeID())
             || !CMPhotoRectMakeWithDictionaryRepresentation(v20, &v47))
            || (FigCFDictionaryGetIntIfPresent(),
                CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ForceHighSpeedDecode"), &DecodeHighSpeedDefault),
                CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("RestrictedDecoding"), &v45),
                v22 = v45,
                *(_DWORD *)(v5 + 20) == 2)
            && v45)
          {
            appended = FigSignalErrorAt();
LABEL_18:
            v23 = appended;
            goto LABEL_31;
          }
        }
        else
        {
          v22 = 0;
        }
        if (*(_BYTE *)(v5 + 16))
        {
          v34[0] = 0;
          v35 = a1;
          if (v10)
          {
            v24 = CFRetain(v10);
            v22 = v45;
          }
          else
          {
            v24 = 0;
          }
          v36 = v24;
          v37 = v47;
          v38 = v48;
          v39 = v46;
          v40 = v22;
          v41 = *(_DWORD *)(v5 + 20);
          v42 = DecodeHighSpeedDefault;
          v43 = a4;
          _dispatch_decode(v34);
LABEL_30:
          v23 = 0;
          goto LABEL_31;
        }
        v25 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00404598759DuLL);
        if (v25)
        {
          v26 = v25;
          if (v10)
            v27 = CFRetain(v10);
          else
            v27 = 0;
          v28 = *(_DWORD *)(v5 + 20);
          v29 = v48;
          *(uint64x2_t *)(v26 + 24) = v47;
          v30 = v46;
          v31 = v45;
          v32 = DecodeHighSpeedDefault;
          *v26 = 1;
          *((_QWORD *)v26 + 1) = a1;
          *((_QWORD *)v26 + 2) = v27;
          *(_OWORD *)(v26 + 40) = v29;
          *((_DWORD *)v26 + 14) = v30;
          v26[60] = v31;
          *((_DWORD *)v26 + 16) = v28;
          v26[68] = v32;
          *((_QWORD *)v26 + 9) = a4;
          dispatch_async_f(*(dispatch_queue_t *)(v5 + 24), v26, (dispatch_function_t)_dispatch_decode);
          goto LABEL_30;
        }
        v23 = 4294950305;
      }
      else
      {
        v23 = 4294950194;
      }
    }
    else
    {
      v23 = 4294950306;
    }
  }
  else
  {
    v23 = 4294950195;
  }
LABEL_31:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v23;
}

void PluginInstance_Dispose(const void **a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[3];
    if (v3)
    {
      dispatch_release(v3);
      a1[3] = 0;
    }
    v4 = a1[1];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

void _dispatch_decode(char *a1)
{
  _DWORD *v2;
  const __CFData *v3;
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, _QWORD, uint64_t *);
  uint64_t ImageInformationFromJFIFByteStream;
  uint64_t v15;
  const opaqueCMFormatDescription *v16;
  uint64_t Dimensions;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD v23[2];
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef cf;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  CFTypeRef v33;

  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v4 = *((_QWORD *)a1 + 1);
  v3 = (const __CFData *)*((_QWORD *)a1 + 2);
  v33 = 0;
  v5 = *(_OWORD *)(a1 + 40);
  v31 = *(_OWORD *)(a1 + 24);
  v32 = v5;
  v6 = *((_DWORD *)a1 + 14);
  v7 = *((_QWORD *)a1 + 9);
  v22 = a1[60];
  v8 = *((_DWORD *)a1 + 16);
  v9 = a1[68];
  if (*a1)
    free(a1);
  v10 = *(_QWORD *)(v4 + 64);
  v30 = 0;
  cf = 0;
  v11 = CMPhotoByteStreamCreateFromSource(v3, 0, 0, 0, &v33, 0);
  if ((_DWORD)v11)
    goto LABEL_19;
  v28 = 0;
  v12 = v33;
  v13 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v13)
  {
    ImageInformationFromJFIFByteStream = v13(v12, 0, &v28);
    if (!(_DWORD)ImageInformationFromJFIFByteStream)
    {
      v15 = v28;
      if (v28 < 0)
      {
        v21 = 4294950190;
        goto LABEL_21;
      }
      v26 = 0;
      v27 = 0;
      v25 = 0;
      ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v33, 0, &v26, (int *)&v25 + 1, 0, 0, &v25, 0);
      if (!(_DWORD)ImageInformationFromJFIFByteStream)
      {
        v24 = 0;
        ImageInformationFromJFIFByteStream = CMPhotoGetYUVPixelFormatForParameters(SHIDWORD(v25), v25, 1, 0, 0, 0, 1, (int *)&v24);
        if (!(_DWORD)ImageInformationFromJFIFByteStream)
        {
          ImageInformationFromJFIFByteStream = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(v4 + 32), *(CFAllocatorRef *)v4, v26, v27, v33, 0, v15, v3, 2, &v30);
          if (!(_DWORD)ImageInformationFromJFIFByteStream)
          {
            v16 = *(const opaqueCMFormatDescription **)(v10 + 8);
            v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            if (!v16
              || (Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(v16), v26 == (int)Dimensions)
              && v27 == Dimensions >> 32)
            {
              if (v6)
                v18 = v6;
              else
                v18 = v24;
              v19 = *(_QWORD *)(v4 + 8);
              v20 = *(_QWORD *)(v4 + 16);
              v23[0] = v31;
              v23[1] = v32;
              v11 = CMPhotoUnifiedJPEGDecoderDecode(v30, v19, v20, v8, v18, v22, v23, 0, v9, (uint64_t)a1, 0, 0, 0, (CVPixelBufferRef *)&cf);
            }
            else
            {
              v11 = FigSignalErrorAt();
            }
LABEL_19:
            v21 = v11;
            goto LABEL_22;
          }
        }
      }
    }
    v21 = ImageInformationFromJFIFByteStream;
  }
  else
  {
    v21 = 4294954514;
  }
LABEL_21:
  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_22:
  CMPhotoUnifiedJPEGDecoderDestroy(v30);
  (*(void (**)(uint64_t, uint64_t, CFTypeRef, _QWORD, uint64_t))(v4 + 48))(v4, v21, cf, *(_QWORD *)(v4 + 56), v7);
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  if (v33)
    CFRelease(v33);
  if (*v2 == 1)
    kdebug_trace();
}

intptr_t SurfacePool_CleanupTimerCanceled(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 344));
}

uint64_t CMPhotoSurfacePoolHandleBackgroundNotification(uint64_t a1)
{
  uint64_t result;

  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (!(_DWORD)result)
  {
    SurfacePool_PerformFullClean(a1);
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  }
  return result;
}

uint64_t CMPhotoSurfacePoolDetachMemorySurface(uint64_t a1, void *a2)
{
  return SurfacePool_DetachSurface(a1, a2, 0);
}

uint64_t CMPhotoSurfacePoolCreateImageSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, int a10, unsigned __int8 a11, IOSurfaceRef *a12, _BYTE *a13)
{
  return CMPhotoSurfacePoolCreateImageSurfaceWithAlignment(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, a10, a11, a12, a13);
}

uint64_t CMPhotoSurfacePoolDiscardCaches(uint64_t a1)
{
  return CMPhotoSurfacePoolFlushCaches(a1, 0);
}

uint64_t CMPhotoSurfacePoolGetStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    v5 = defaultSurfacePool;
  }
  if ((__CFString *)v5 == CFSTR("SurfacePoolOneShot"))
    return 4294950303;
  result = pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 312));
  if (!(_DWORD)result)
  {
    if (a3)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      Pool_TallySubPoolStats(v5 + 24, (int64x2_t *)a3);
    }
    if (a2)
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      Pool_TallySubPoolStats(v5 + 168, (int64x2_t *)a2);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 312));
    return 0;
  }
  return result;
}

void Pool_TallySubPoolStats(uint64_t a1, int64x2_t *context)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)_tallyStatsApplier, context);
  }
  else if (!v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      v4 = 0;
      v5 = *context;
      v7 = context[1].i64[0];
      v6 = context[1].i64[1];
      do
      {
        v8 = *(_QWORD *)(a1 + 24) + v4;
        v6 += *(_QWORD *)(v8 + 48);
        context[1].i64[1] = v6;
        v5 = vaddq_s64(v5, *(int64x2_t *)(v8 + 24));
        *context = v5;
        v7 += *(_QWORD *)(v8 + 40);
        context[1].i64[0] = v7;
        v4 += 88;
        --v3;
      }
      while (v3);
    }
  }
}

void *SurfacePool_PerformFullClean(uint64_t a1)
{
  void *result;

  ++*(_QWORD *)(a1 + 408);
  Pool_DropBuffers(a1 + 24, 0);
  Pool_DropBuffers(a1 + 168, 0);
  if (!*(_BYTE *)(a1 + 320) && !*(_BYTE *)(a1 + 16))
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 328));
    *(_BYTE *)(a1 + 320) = 1;
  }
  result = *(void **)(a1 + 352);
  if (result)
  {
    objc_msgSend(result, "unregisterBackgroundNotificationForContext:", a1);
    return (void *)objc_msgSend(*(id *)(a1 + 352), "releaseAssertionForContext:", a1);
  }
  return result;
}

uint64_t CMPhotoSurfacePoolClass_Finalize(uint64_t a1)
{
  const __CFAllocator *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t result;
  _QWORD block[5];

  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = *(NSObject **)(a1 + 336);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __CMPhotoSurfacePoolClass_Finalize_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v3, block);
  v4 = *(NSObject **)(a1 + 344);
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v5 = *(NSObject **)(a1 + 328);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(a1 + 328) = 0;
    }
    v6 = *(NSObject **)(a1 + 344);
    if (v6)
      dispatch_release(v6);
  }
  v7 = *(NSObject **)(a1 + 336);
  if (v7)
    dispatch_release(v7);
  v8 = *(void **)(a1 + 352);
  if (v8)
  {
    objc_msgSend(v8, "unregisterBackgroundNotificationForContext:", a1);
    objc_msgSend(*(id *)(a1 + 352), "releaseAssertionForContext:", a1);
    objc_msgSend(*(id *)(a1 + 352), "waitForPendingNotifications");

  }
  Pool_FreeAllSubPools(v2, a1 + 24);
  Pool_FreeAllSubPools(v2, a1 + 168);
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 312) = 0;
  return result;
}

__CFString *CMPhotoSurfacePoolClass_CopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<CMPhotoSurfacePool %p> {\n"), a1);
    Pool_AppendDebugDesc(v4, (uint64_t)(a1 + 3));
    Pool_AppendDebugDesc(v4, (uint64_t)(a1 + 21));
    CFStringAppendFormat(v4, 0, CFSTR("  Shallow cleanup count:   %d\n  Full cleanup count:      %d\n"), a1[50], a1[51]);
    CFStringAppendFormat(v4, 0, CFSTR("}"));
  }
  return v4;
}

void Pool_FreeAllSubPools(CFAllocatorRef allocator, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  const void *v8;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)Pool_DestroySubPool, 0);
    v8 = *(const void **)(a2 + 24);
    if (v8)
      CFRelease(v8);
  }
  else if (!v3)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v5 = 0;
      v6 = 0;
      do
      {
        Pool_DestroySubPool(0, (uint64_t *)(*(_QWORD *)(a2 + 24) + v5));
        ++v6;
        v5 += 88;
      }
      while (*(_QWORD *)(a2 + 40) > v6);
    }
    v7 = *(void **)(a2 + 24);
    if (v7)
      CFAllocatorDeallocate(allocator, v7);
  }
  if (*(_BYTE *)(a2 + 48))
    free(*(void **)(a2 + 32));
}

void Pool_DestroySubPool(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;

  v4 = *a2;
  if (*a2)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 40);
      if (*(_QWORD *)v4)
        CFRelease(*(CFTypeRef *)v4);
      v6 = *(const void **)(v4 + 16);
      if (v6)
        CFRelease(v6);
      free((void *)v4);
      v4 = v5;
    }
    while (v5);
  }
  if (a1)
    free(a2);
}

void Pool_AppendDebugDesc(__CFString *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  __int128 context;
  __int128 v12;
  __CFString *v13;

  context = 0u;
  v12 = 0u;
  v13 = a1;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)_collectStatistics, &context);
    v7 = "Image pool";
  }
  else if (v4)
  {
    v7 = 0;
  }
  else if (*(_QWORD *)(a2 + 40))
  {
    v5 = 0;
    v6 = 0;
    v7 = "Memory pool";
    do
    {
      _collectStatistics(0, (int64x2_t *)(*(_QWORD *)(a2 + 24) + v5), (uint64_t)&context);
      ++v6;
      v5 += 88;
    }
    while (*(_QWORD *)(a2 + 40) > v6);
  }
  else
  {
    v7 = "Memory pool";
  }
  v8 = *((_QWORD *)&context + 1);
  v9 = atomic_load((unsigned int *)(a2 + 132));
  if (v8)
    v10 = (double)*((unint64_t *)&context + 1)
        * 100.0
        / (double)(unint64_t)(v12 + *((_QWORD *)&context + 1));
  else
    v10 = 0.0;
  CFStringAppendFormat(a1, 0, CFSTR("  %s: {\n    Subpool count:         %d\n    Total size:            %d bytes\n    Total IOSurface count: %d\n    One-shot allocations:  %d\n    Allocations:           %d\n    Total hits:            %d\n    Total misses:          %d\n    Total deletes:         %d\n    Hit ratio:             %.2f%%\n  },\n"), v7, (_QWORD)context, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), v9, (_QWORD)v12 + *((_QWORD *)&context + 1), *((_QWORD *)&context + 1), v12, *(_QWORD *)&v10);
}

int64x2_t _collectStatistics(uint64_t a1, int64x2_t *a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 32), 0, CFSTR("    subpool: %d\n"), *(_QWORD *)a3);
  v6 = *(__CFString **)(a3 + 32);
  if (a1)
  {
    v7 = a2[4].u32[1];
    v8 = a2[3].u32[2];
    v9 = a2[3].u32[3];
    v10 = a2[4].u32[0];
    v11 = CMPhotoFormatFourCharCodeString(a2[4].u32[2]);
    LODWORD(v17) = v11;
    BYTE4(v17) = BYTE4(v11);
    CFStringAppendFormat(v6, 0, CFSTR("    image:   %d x %d, (%d x %d padded), %s\n"), v8, v9, v10, v7, &v17, v17);
  }
  else
  {
    CFStringAppendFormat(v6, 0, CFSTR("    size:    %d\n"), a2[1].i64[0], v13, v14, v15, v16, v17);
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 32), 0, CFSTR("    count:   %d\n    hits:    %d\n    misses:  %d\n    deletes: %d\n\n"), a2[1].i64[1], a2[2].i64[0], a2[2].i64[1], a2[3].i64[0]);
  ++*(_QWORD *)a3;
  result = vaddq_s64(*(int64x2_t *)(a3 + 8), a2[2]);
  *(int64x2_t *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) += a2[3].i64[0];
  return result;
}

int64x2_t _tallyStatsApplier(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  uint64_t v3;
  int64x2_t result;

  v3 = a3[1].i64[0];
  a3[1].i64[1] += *(_QWORD *)(a2 + 48);
  result = vaddq_s64(*a3, *(int64x2_t *)(a2 + 24));
  *a3 = result;
  a3[1].i64[0] = v3 + *(_QWORD *)(a2 + 40);
  return result;
}

double CMPhotoComputePSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v19;

  v19 = 0.0;
  if (CGRectIsNull(*(CGRect *)&a4))
  {
    v14 = *MEMORY[0x1E0C9D628];
    v15 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v17 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v14 = 0.0;
    v15 = 0.0;
    v16 = a6;
    v17 = a7;
  }
  _computeMinimumBlockPSNRForPixelBuffer(a1, a2, a3, 0, 0, 0, 0, &v19, v14, v15, v16, v17, a4, a5, a6, a7, 0);
  return v19;
}

uint64_t _computeMinimumBlockPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, unsigned int a4, unint64_t a5, uint64_t a6, double *a7, double *a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, double *a17)
{
  signed int PixelFormatType;
  _BOOL4 v30;
  int v31;
  unsigned __int16 v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  int v36;
  signed int v37;
  unsigned __int16 v38;
  int v39;
  OSType v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64x2_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64x2_t v60;
  uint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  int v64;
  unsigned __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  size_t v72;
  size_t v73;
  char *v74;
  char *v75;
  double v78;
  int v79;
  unint64_t v80;
  char *v81;
  size_t v82;
  char *v83;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  float64x2_t v99;
  double v100;
  uint64_t k;
  unint64_t v102;
  double v103;
  double v104;
  int v105;
  double v106;
  double v107;
  int v108;
  int v109;
  double v110;
  float64x2_t v111;
  float v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  size_t v123;
  size_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t j;
  unint64_t v131;
  uint64_t v132;
  float v133;
  float v134;
  double v135;
  uint64_t v136;
  float v137;
  float v138;
  double v139;
  float v140;
  float v141;
  uint64_t v142;
  float v143;
  float v144;
  float v145;
  double v146;
  float64x2_t v147;
  float v148;
  double v149;
  double v150;
  double v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v160;
  uint64_t v165;
  uint64_t v166;
  uint64_t v169;
  uint64_t v170;
  double v178;
  double v182;
  double v191;
  double v192;
  float64x2_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  double v199;
  double v200;
  double v201;
  uint64_t i;
  double v209;
  int v210;
  long double v211;
  uint64_t v212;
  int v213;
  uint64_t m;
  unint64_t v215;
  double v216;
  double v217;
  double v218;
  double v219;
  int v220;
  int v221;
  uint64_t v222;
  double v223;
  double v224;
  double v225;
  float64x2_t v226;
  unsigned __int16 v227;
  int v228;
  double v229;
  long double v230;
  double v231;
  long double v232;
  long double v233;
  unsigned __int16 v234;
  long double v235;
  long double v236;
  double v237;
  double v238;
  unsigned __int16 v239;
  long double v240;
  long double v241;
  long double v242;
  long double v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *BaseAddress;
  char *v249;
  uint64_t v250;
  uint64_t BytesPerPixelForPixelFormat;
  uint64_t BitDepthForPixelFormat;
  int v253;
  double v254;
  double v255;
  size_t BytesPerRow;
  size_t v257;
  uint64_t v258;
  double v259;
  double v260;
  double v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  int32x2_t v265;
  int64x2_t v266;
  float64x2_t v267;
  double v268;
  double v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  size_t v275;
  size_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  double v280;
  uint64_t v281;
  unint64_t v282;
  int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  double v287;
  double v288;
  int v289;
  uint64_t v290;
  double v291;
  double v292;
  long double v293;
  double *v294;
  double *v295;
  uint64_t v296;
  uint64_t v297;
  double v298;
  double *v299;
  unint64_t v301;
  double *v302;
  double *v303;
  int v304;
  unint64_t v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  double *v311;
  uint64_t v312;
  double *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  int v319;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  int v325;
  unint64_t v326;
  int v327;
  unint64_t v328;
  uint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  char v333;
  double v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  CGFloat v338;
  uint64_t v339;
  float64_t v340;
  double v341;
  float64_t v342;
  float64_t v343;
  float64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64x2_t v353;
  __int128 v354;
  uint64x2_t v355;
  __int128 v356;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v30 = 0;
  v319 = PixelFormatType;
  if (PixelFormatType > 1717856626)
  {
    if (PixelFormatType <= 1936077875)
    {
      if (PixelFormatType <= 1815162993)
      {
        if (PixelFormatType <= 1735549751)
        {
          if (PixelFormatType > 1734505011)
          {
            if (PixelFormatType == 1734505012)
              goto LABEL_101;
            v31 = 1735549492;
          }
          else
          {
            if (PixelFormatType == 1717856627)
              goto LABEL_101;
            v31 = 1734501176;
          }
          goto LABEL_94;
        }
        if (PixelFormatType <= 1751411058)
        {
          if (PixelFormatType == 1735549752)
            goto LABEL_101;
          v31 = 1751410032;
          goto LABEL_94;
        }
        if (PixelFormatType == 1751411059)
          goto LABEL_101;
        v39 = 1751527984;
        goto LABEL_83;
      }
      if (PixelFormatType <= 1919381559)
      {
        if (PixelFormatType > 1919378231)
        {
          if (PixelFormatType == 1919378232)
            goto LABEL_101;
          v31 = 1919379252;
        }
        else
        {
          if (PixelFormatType == 1815162994)
            goto LABEL_101;
          v31 = 1815491698;
        }
        goto LABEL_94;
      }
      if (PixelFormatType <= 1936077359)
      {
        if (PixelFormatType == 1919381560)
          goto LABEL_101;
        v31 = 1932996149;
        goto LABEL_94;
      }
      if (PixelFormatType != 1936077360)
      {
        v33 = 1936077362;
        goto LABEL_99;
      }
LABEL_100:
      v30 = a3 == 0;
      goto LABEL_101;
    }
    if (PixelFormatType > 1953903153)
    {
      if (PixelFormatType > 2016687155)
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956)
            goto LABEL_100;
          v38 = 12850;
        }
        else
        {
          if (PixelFormatType == 2016687156)
            goto LABEL_100;
          v38 = 12848;
        }
        v33 = v38 | 0x78660000;
LABEL_99:
        v36 = 0;
        if (PixelFormatType != v33)
        {
LABEL_480:
          v45 = FigSignalErrorAt();
          v295 = 0;
          v294 = 0;
          v42 = 0.0;
          v304 = v36;
          goto LABEL_481;
        }
        goto LABEL_100;
      }
      if (PixelFormatType > 2016686639)
      {
        if (PixelFormatType != 2016686640)
        {
          v33 = 2016686642;
          goto LABEL_99;
        }
        goto LABEL_100;
      }
      if (PixelFormatType == 1953903154)
        goto LABEL_100;
      v35 = 13364;
    }
    else
    {
      if (PixelFormatType <= 1952854575)
      {
        if (PixelFormatType > 1937125937)
        {
          if (PixelFormatType == 1937125938)
            goto LABEL_100;
          v32 = 13364;
        }
        else
        {
          if (PixelFormatType == 1936077876)
            goto LABEL_100;
          v32 = 12848;
        }
        v33 = v32 | 0x73760000;
        goto LABEL_99;
      }
      if (PixelFormatType <= 1952855091)
      {
        if (PixelFormatType != 1952854576)
        {
          v33 = 1952854578;
          goto LABEL_99;
        }
        goto LABEL_100;
      }
      if (PixelFormatType == 1952855092)
        goto LABEL_100;
      v35 = 12848;
    }
    v33 = v35 | 0x74760000;
    goto LABEL_99;
  }
  if (PixelFormatType > 1278226735)
  {
    if (PixelFormatType > 1647719527)
    {
      if (PixelFormatType <= 1651847471)
      {
        if (PixelFormatType > 1650943795)
        {
          if (PixelFormatType == 1650943796)
            goto LABEL_101;
          v31 = 1651519798;
        }
        else
        {
          if (PixelFormatType == 1647719528)
            goto LABEL_101;
          v31 = 1650942776;
        }
      }
      else if (PixelFormatType <= 1651926375)
      {
        if (PixelFormatType == 1651847472)
          goto LABEL_101;
        v31 = 1651925816;
      }
      else
      {
        if (PixelFormatType == 1651926376 || PixelFormatType == 1652056888)
          goto LABEL_101;
        v31 = 1717855600;
      }
      goto LABEL_94;
    }
    if (PixelFormatType > 1380401728)
    {
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType == 1380411457)
          goto LABEL_101;
        v31 = 1647589490;
      }
      else
      {
        if (PixelFormatType == 1380401729)
          goto LABEL_101;
        v31 = 1380410945;
      }
LABEL_94:
      v36 = 0;
      if (PixelFormatType != v31)
        goto LABEL_480;
      goto LABEL_101;
    }
    if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
      goto LABEL_101;
    v34 = 1278555701;
    goto LABEL_41;
  }
  if (PixelFormatType <= 875836533)
  {
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
        goto LABEL_101;
      v39 = 875704422;
LABEL_83:
      v36 = 0;
      if (PixelFormatType != v39)
        goto LABEL_480;
      goto LABEL_100;
    }
    if (PixelFormatType > 875704949)
    {
      if (PixelFormatType != 875704950)
      {
        v33 = 875836518;
        goto LABEL_99;
      }
    }
    else if (PixelFormatType != 875704438)
    {
      v33 = 875704934;
      goto LABEL_99;
    }
    goto LABEL_100;
  }
  if (PixelFormatType > 1111970368)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_101;
    }
    v34 = 1111970369;
LABEL_41:
    v36 = 0;
    v37 = PixelFormatType;
    goto LABEL_66;
  }
  if (PixelFormatType == 875836534)
    goto LABEL_100;
  v37 = PixelFormatType;
  if (PixelFormatType == 1094862674)
    goto LABEL_101;
  v34 = 1095911234;
  v36 = 0;
LABEL_66:
  if (v37 != v34)
    goto LABEL_480;
LABEL_101:
  v40 = CVPixelBufferGetPixelFormatType(a1);
  v36 = 0;
  if (v40 != CVPixelBufferGetPixelFormatType(a2) || (a5 & 1) != 0)
    goto LABEL_480;
  v338 = a16;
  v41 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  v42 = 0.0;
  if ((_DWORD)v41)
  {
    v45 = v41;
    v36 = 0;
LABEL_476:
    v304 = 0;
    v295 = 0;
    v294 = 0;
LABEL_481:
    v298 = 0.0;
    goto LABEL_464;
  }
  v36 = 1;
  v43 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if ((_DWORD)v43)
  {
    v45 = v43;
    goto LABEL_476;
  }
  v355 = 0u;
  v356 = 0u;
  _computeCropRectForPixelBuffer(a1, &v355, a9, a10, a11, a12);
  v353 = 0u;
  v354 = 0u;
  _computeCropRectForPixelBuffer(a2, &v353, a13, a14, a15, v338);
  v44 = v356;
  v45 = 4294950194;
  v36 = 1;
  if ((_QWORD)v356 != (_QWORD)v354)
  {
    v304 = 1;
    v298 = 0.0;
    v295 = 0;
    v294 = 0;
    goto LABEL_464;
  }
  v303 = a8;
  v46 = *((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1) != *((_QWORD *)&v354 + 1))
  {
    v304 = 1;
    v298 = 0.0;
    v295 = 0;
    v294 = 0;
    goto LABEL_485;
  }
  if (a5)
  {
    if (*((_QWORD *)&v356 + 1) / a5 <= 1)
      v47 = 1;
    else
      v47 = *((_QWORD *)&v356 + 1) / a5;
    if ((unint64_t)v356 / a5 <= 1)
      v48 = 1;
    else
      v48 = (unint64_t)v356 / a5;
  }
  else
  {
    if ((unint64_t)v356 <= *((_QWORD *)&v356 + 1))
      a5 = *((_QWORD *)&v356 + 1);
    else
      a5 = v356;
    v47 = 1;
    v48 = 1;
  }
  v318 = v48;
  v49 = 3;
  if (!v30)
    v49 = 1;
  v305 = v48 * v47;
  v50 = v48 * v47 * v49;
  if (!a7)
  {
    v51 = v50;
    v52 = (double *)malloc_type_calloc(v50, 8uLL, 0x100004000313F17uLL);
    v50 = v51;
    a7 = v52;
    v302 = v52;
    if (v52)
      goto LABEL_124;
    v295 = 0;
    v294 = 0;
    v45 = 4294950305;
    v36 = 1;
    v298 = 0.0;
    v304 = 1;
LABEL_485:
    a8 = v303;
    goto LABEL_464;
  }
  if (a6 != 8 * v50)
  {
    v36 = 1;
    a8 = v303;
    goto LABEL_480;
  }
  v302 = 0;
LABEL_124:
  v301 = v50;
  v304 = 1;
  v311 = (double *)malloc_type_calloc(v50, 8uLL, 0x100004000313F17uLL);
  if (!v311)
  {
    v295 = 0;
    v45 = 4294950305;
    v36 = 1;
    v298 = 0.0;
    a8 = v303;
    v299 = a17;
    v294 = v302;
    goto LABEL_465;
  }
  v308 = 0;
  v335 = 0;
  v53 = 0;
  v317 = v44 + v355.i64[0];
  v316 = v46 + v355.i64[1];
  v54 = v318;
  v315 = v47 - 1;
  v307 = v319 - 1278226488;
  v306 = v319 - 1278226736;
  v313 = a7;
  v314 = a5;
  v312 = v47;
  do
  {
    v55 = 0;
    v56 = 0;
    v322 = v53 * a5;
    v323 = v53;
    v321 = v53 * v54;
    do
    {
      v337 = v55;
      v57 = v355;
      v58 = v355.i64[0] + v56 * a5;
      v59 = v355.i64[1] + v322;
      v60 = v353;
      v61 = v353.i64[0] + v56 * a5;
      if (v323 == v315)
        v62 = v316 - (v355.i64[1] + v322);
      else
        v62 = a5;
      if (v56 == v318 - 1)
        a5 = v317 - v58;
      v339 = v56;
      v336 = v56 + v321;
      v63 = 1;
      if (v319 <= 1380410944)
      {
        if (v319 <= 1111970368)
        {
          if (v319 != 1094862674 && v319 != 1095911234)
          {
LABEL_185:
            if (a3)
              goto LABEL_186;
            if (v319 > 1651925815)
            {
              if (v319 <= 1735549491)
              {
                if (v319 <= 1717855599)
                {
                  if (v319 == 1651925816 || v319 == 1651926376)
                    goto LABEL_186;
                  v210 = 1652056888;
                }
                else if (v319 > 1734501175)
                {
                  if (v319 == 1734501176)
                    goto LABEL_186;
                  v210 = 1734505012;
                }
                else
                {
                  if (v319 == 1717855600)
                    goto LABEL_186;
                  v210 = 1717856627;
                }
              }
              else if (v319 > 1815162993)
              {
                if (v319 > 1919379251)
                {
                  if (v319 == 1932996149)
                    goto LABEL_186;
                  v239 = 26420;
                }
                else
                {
                  if (v319 == 1815162994)
                  {
                    v247 = v62;
                    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
                    v249 = (char *)CVPixelBufferGetBaseAddress(a2);
                    v250 = CVPixelBufferGetPixelFormatType(a1);
                    BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v250);
                    BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v250);
                    v253 = -16995;
                    v254 = 0.0;
                    v255 = 0.0;
                    if (BytesPerPixelForPixelFormat && BitDepthForPixelFormat)
                    {
                      v333 = BitDepthForPixelFormat;
                      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
                      v257 = CVPixelBufferGetBytesPerRow(a2);
                      if (v247)
                      {
                        v258 = 0;
                        v259 = 0.0;
                        v260 = 0.0;
                        v261 = 0.0;
                        do
                        {
                          if (a5)
                          {
                            v262 = 0;
                            do
                            {
                              v263 = *(_DWORD *)&BaseAddress[4 * v262
                                                           + BytesPerPixelForPixelFormat * (v57.i64[0] + v337)
                                                           + BytesPerRow * (v308 + v57.i64[1])];
                              v264 = *(_DWORD *)&v249[4 * v262
                                                    + BytesPerPixelForPixelFormat * (v60.i64[0] + v337)
                                                    + v257 * (v308 + v60.i64[1])];
                              v265 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v263), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v264), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                              v266.i64[0] = v265.i32[0];
                              v266.i64[1] = v265.i32[1];
                              v267 = vcvtq_f64_s64(v266);
                              v268 = (double)(int)((v263 & 0x3FF) - (v264 & 0x3FF))
                                   * (double)(int)((v263 & 0x3FF) - (v264 & 0x3FF))
                                   + vaddvq_f64(vmulq_f64(v267, v267));
                              if (!v258 || a5 - 1 == v262 || v247 - 1 == v258 || !v262)
                              {
                                v261 = v261 + v268;
                                v260 = v260 + 3.0;
                              }
                              v259 = v259 + v268;
                              ++v262;
                            }
                            while (a5 != v262);
                          }
                          ++v258;
                        }
                        while (v258 != v247);
                        v269 = (double)~(-1 << v333);
                        if (v259 == 0.0)
                        {
                          v255 = INFINITY;
                        }
                        else
                        {
                          v334 = log10((double)~(-1 << v333));
                          v255 = log10(v259 / ((double)(v247 * a5) * 3.0)) * -10.0 + v334 * 20.0;
                        }
                        if (v261 == 0.0)
                        {
                          v253 = 0;
                          v254 = INFINITY;
                        }
                        else
                        {
                          v292 = log10(v269);
                          v293 = log10(v261 / v260);
                          v253 = 0;
                          v254 = v293 * -10.0 + v292 * 20.0;
                        }
                      }
                      else
                      {
                        v253 = 0;
                        v254 = INFINITY;
                        v255 = INFINITY;
                      }
                    }
                    v93 = v313;
                    a5 = v314;
                    v94 = v337;
                    v313[v336] = v255;
                    v92 = v312;
                    v311[v336] = v254;
                    v335 |= v253;
                    v54 = v318;
                    v56 = v339;
                    goto LABEL_404;
                  }
                  v239 = 25400;
                }
                v210 = v239 | 0x72670000;
              }
              else if (v319 > 1751410031)
              {
                if (v319 == 1751410032)
                  goto LABEL_186;
                v210 = 1751411059;
              }
              else
              {
                if (v319 == 1735549492)
                  goto LABEL_186;
                v210 = 1735549752;
              }
            }
            else
            {
              if (v319 <= 1278555700)
              {
                if (v319 <= 1278226735)
                {
                  if ((v307 > 0x30 || ((1 << v307) & 0x1400000000001) == 0) && v319 != 825306677)
                  {
                    v210 = 825437747;
                    goto LABEL_415;
                  }
LABEL_186:
                  v349 = v58;
                  v350 = v355.i64[1] + v322;
                  v93 = v313;
                  v351 = a5;
                  v352 = v62;
                  v345 = v61;
                  v346 = v353.i64[1] + v322;
                  v347 = a5;
                  v348 = v62;
                  v127 = _computePSNRForPlane(a1, (unint64_t *)&v349, a2, &v345, a4, &v313[v336], &v311[v336]) | v335;
LABEL_187:
                  v335 = v127;
LABEL_367:
                  a5 = v314;
                  v92 = v312;
                  v54 = v318;
                  v94 = v337;
                  goto LABEL_404;
                }
                if (v306 <= 6 && ((1 << v306) & 0x45) != 0)
                  goto LABEL_186;
LABEL_416:
                v349 = v58;
                v350 = v355.i64[1] + v322;
                v351 = a5;
                v352 = v62;
                v345 = v61;
                v346 = v353.i64[1] + v322;
                v347 = a5;
                v348 = v62;
                v244 = v62;
                v245 = v61;
                v246 = v353.i64[1] + v322;
                v332 = v353.i64[1] + v322;
                v330 = _computePSNRForPlane(a1, (unint64_t *)&v349, a2, &v345, 0, &v313[v336], &v311[v336]);
                v349 = v58;
                v350 = v59;
                v351 = a5;
                v352 = v244;
                v345 = v245;
                v346 = v246;
                v347 = a5;
                v348 = v244;
                v327 = _computePSNRForPlane(a1, (unint64_t *)&v349, a2, &v345, 1u, &v313[v336 + v305], &v311[v336 + v305]);
                v349 = v58;
                v350 = v59;
                v93 = v313;
                v351 = a5;
                v352 = v244;
                v345 = v245;
                v346 = v332;
                v347 = a5;
                v348 = v244;
                v127 = v330 | v327 | _computePSNRForPlane(a1, (unint64_t *)&v349, a2, &v345, 2u, &v313[2 * v305 + v336], &v311[2 * v305 + v336]) | v335;
                goto LABEL_187;
              }
              if (v319 <= 1650943795)
              {
                if (v319 == 1278555701)
                {
                  v270 = v353.i64[1] + v322;
                  v271 = v61;
                  v272 = v62;
                  v273 = (char *)CVPixelBufferGetBaseAddress(a1);
                  v274 = (char *)CVPixelBufferGetBaseAddress(a2);
                  v275 = CVPixelBufferGetBytesPerRow(a1);
                  v276 = CVPixelBufferGetBytesPerRow(a2);
                  if (v272)
                  {
                    v277 = 0;
                    v278 = &v274[2 * v271 + v276 * v270];
                    v279 = &v273[2 * v58 + v275 * v59];
                    v280 = 0.0;
                    do
                    {
                      if (a5)
                      {
                        v281 = 0;
                        v282 = a5;
                        do
                        {
                          v283 = v279[v281];
                          v284 = v279[v281 + 1];
                          v285 = v278[v281];
                          v286 = v278[v281 + 1];
                          v287 = (double)(int)((((v283 | (v284 << 8)) >> 5) & 0x3F)
                                             - (((v285 | (v286 << 8)) >> 5) & 0x3F));
                          v288 = v280
                               + (double)(int)(((v284 >> 2) & 0x3E) - ((v286 >> 2) & 0x3E))
                               * (double)(int)(((v284 >> 2) & 0x3E) - ((v286 >> 2) & 0x3E))
                               + v287 * v287;
                          v289 = 2 * (v283 & 0x1F) - 2 * (v285 & 0x1F);
                          v280 = (double)v289 * (double)v289 + v288;
                          v281 += 2;
                          --v282;
                        }
                        while (v282);
                      }
                      v279 += v275;
                      v278 += v276;
                      ++v277;
                    }
                    while (v277 != v272);
                    v92 = v312;
                    v93 = v313;
                    v94 = v337;
                    v56 = v339;
                    v290 = v336;
                    if (v280 <= 0.0)
                      v291 = INFINITY;
                    else
                      v291 = log10(v280 / (double)(3 * v272 * a5)) * -10.0 + 35.986811;
                    v54 = v318;
                  }
                  else
                  {
                    v291 = INFINITY;
                    v92 = v312;
                    v93 = v313;
                    v54 = v318;
                    v94 = v337;
                    v56 = v339;
                    v290 = v336;
                  }
                  v93[v290] = v291;
                  a5 = v314;
                  goto LABEL_404;
                }
                if (v319 == 1647392369)
                  goto LABEL_186;
                v234 = 25400;
LABEL_395:
                v210 = v234 | 0x62670000;
              }
              else
              {
                if (v319 <= 1651519797)
                {
                  if (v319 == 1650943796)
                    goto LABEL_186;
                  v234 = 28722;
                  goto LABEL_395;
                }
                if (v319 == 1651519798)
                  goto LABEL_186;
                v210 = 1651847472;
              }
            }
LABEL_415:
            if (v319 == v210)
              goto LABEL_186;
            goto LABEL_416;
          }
LABEL_143:
          v63 = v319 == 1380410945;
          goto LABEL_148;
        }
        if (v319 == 1111970369)
          goto LABEL_148;
        v65 = 16961;
        goto LABEL_146;
      }
      if (v319 <= 1647589489)
      {
        if (v319 == 1380410945)
          goto LABEL_143;
        v65 = 26689;
LABEL_146:
        v64 = v65 | 0x52470000;
        goto LABEL_147;
      }
      if (v319 == 1647589490)
        goto LABEL_148;
      if (v319 == 1647719528)
      {
        v115 = v353.i64[1] + v322;
        v329 = v61;
        v116 = v62;
        v117 = CVPixelBufferGetPixelFormatType(a1);
        v118 = CMPhotoGetBytesPerPixelForPixelFormat(v117);
        v119 = CMPhotoGetBitDepthForPixelFormat(v117);
        v120 = -16995;
        v121 = 0.0;
        v122 = 0.0;
        if (v118 && v119)
        {
          v123 = CVPixelBufferGetBytesPerRow(a1);
          v124 = CVPixelBufferGetBytesPerRow(a2);
          v125 = (char *)CVPixelBufferGetBaseAddress(a1);
          v126 = (char *)CVPixelBufferGetBaseAddress(a2);
          if (v116 >= 2)
          {
            v194 = 0;
            v195 = 2 * a5;
            v196 = &v126[2 * v118 * v329 + v124 * (v115 >> 1)];
            v197 = &v125[2 * v118 * v58 + v123 * (v59 >> 1)];
            if (v116 >> 1 <= 1)
              v198 = 1;
            else
              v198 = v116 >> 1;
            v199 = 0.0;
            v200 = 0.0;
            v201 = 0.0;
            do
            {
              if (v195)
              {
                for (i = 0; i != v195; ++i)
                {
                  _H1 = *(_WORD *)&v197[2 * i];
                  _H2 = *(_WORD *)&v196[2 * i];
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S1, H1
                  }
                  _S1 = _S1 - _S2;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            D1, H1
                  }
                  v209 = _D1 * _D1;
                  if (!v194 || 2 * a5 - 1 == i || (v116 >> 1) - 1 == v194 || !i)
                  {
                    v201 = v201 + v209;
                    v200 = v200 + 1.0;
                  }
                  v199 = v199 + v209;
                }
              }
              v197 += v123;
              v196 += v124;
              ++v194;
            }
            while (v194 != v198);
            if (v199 == 0.0)
              v122 = INFINITY;
            else
              v122 = log10(v199 / (double)((v116 >> 1) * v195)) * -10.0 + 0.0;
            v56 = v339;
            if (v201 == 0.0)
            {
              v120 = 0;
              v121 = INFINITY;
            }
            else
            {
              v233 = log10(v201 / v200);
              v120 = 0;
              v121 = v233 * -10.0 + 0.0;
            }
          }
          else
          {
            v120 = 0;
            v121 = INFINITY;
            v122 = INFINITY;
            v56 = v339;
          }
        }
        v93 = v313;
        v313[v336] = v122;
        v311[v336] = v121;
        v335 |= v120;
        goto LABEL_367;
      }
      v64 = 1815491698;
LABEL_147:
      if (v319 != v64)
        goto LABEL_185;
LABEL_148:
      v325 = v63;
      v328 = v62;
      v331 = v353.i64[1] + v322;
      v66 = v61;
      v326 = a5;
      v67 = v58;
      v68 = CVPixelBufferGetPixelFormatType(a1);
      v69 = CMPhotoGetBytesPerPixelForPixelFormat(v68);
      v70 = v68;
      v71 = CMPhotoGetBitDepthForPixelFormat(v68);
      v72 = CVPixelBufferGetBytesPerRow(a1);
      v73 = CVPixelBufferGetBytesPerRow(a2);
      v74 = (char *)CVPixelBufferGetBaseAddress(a1);
      v75 = (char *)CVPixelBufferGetBaseAddress(a2);
      v78 = 0.0;
      v79 = -16995;
      if (!v69 || !v71)
      {
        v149 = 0.0;
        v93 = v313;
        a5 = v314;
        v92 = v312;
        v94 = v337;
        v56 = v339;
        v95 = v336;
        goto LABEL_403;
      }
      v80 = v71;
      v81 = &v74[v69 * v67 + v72 * v59];
      v82 = v73;
      v83 = &v75[v69 * v66 + v73 * v331];
      __asm { FMOV            V0.2D, #3.0 }
      v89 = v69 / (v71 >> 3);
      if (v71 == 32)
      {
        v91 = v68;
        v90 = v328;
        if ((int)v68 <= 1717855599)
        {
          v92 = v312;
          v93 = v313;
          v95 = v336;
          v94 = v337;
          v96 = v326;
          if (v70 != 1278226534)
          {
            v113 = 1380410945;
            goto LABEL_190;
          }
          goto LABEL_191;
        }
        v92 = v312;
        v93 = v313;
        v95 = v336;
        v94 = v337;
        v96 = v326;
        if (v70 == 1717856627)
          goto LABEL_191;
        v113 = 1717855600;
LABEL_190:
        if (v70 == v113)
        {
LABEL_191:
          if (v328)
          {
            v128 = 0;
            if (v89 == 4)
              v129 = v325;
            else
              v129 = 0;
            if (v89 == 3)
              v129 = 1;
            v99 = 0uLL;
            v100 = 0.0;
            v112 = 0.0;
            v56 = v339;
            do
            {
              if (v96)
              {
                for (j = 0; j != v96; ++j)
                {
                  v131 = j * v89;
                  if (v129)
                  {
                    v132 = 4 * v131 + 8;
                    v133 = *(float *)&v81[v132];
                    v134 = *(float *)&v83[v132];
                    v135 = (float)(v133 - v134) * (float)(v133 - v134);
                    v136 = 4 * v131 + 4;
                    v137 = *(float *)&v81[v136];
                    v138 = *(float *)&v83[v136];
                    v139 = (float)(v137 - v138) * (float)(v137 - v138);
                    v140 = *(float *)&v81[4 * v131];
                    v141 = *(float *)&v83[4 * v131];
                  }
                  else
                  {
                    if (((v89 == 4) & ~v325) == 0)
                    {
LABEL_337:
                      FigSignalErrorAt();
                      v79 = 0;
                      v78 = 0.0;
                      v149 = 0.0;
                      a5 = v314;
                      goto LABEL_403;
                    }
                    v142 = 4 * v131;
                    v133 = *(float *)&v81[v142 + 4];
                    v134 = *(float *)&v83[v142 + 4];
                    v137 = *(float *)&v81[v142 + 8];
                    v135 = (float)(v133 - v134) * (float)(v133 - v134);
                    v138 = *(float *)&v83[v142 + 8];
                    v139 = (float)(v137 - v138) * (float)(v137 - v138);
                    v142 += 12;
                    v140 = *(float *)&v81[v142];
                    v141 = *(float *)&v83[v142];
                  }
                  if (v133 <= v137)
                    v133 = v137;
                  if (v112 <= v140)
                    v143 = v140;
                  else
                    v143 = v112;
                  if (v112 <= v133)
                    v112 = v133;
                  if (v133 <= v140)
                    v112 = v143;
                  if (v134 <= v138)
                    v144 = v138;
                  else
                    v144 = v134;
                  if (v112 <= v141)
                    v145 = v141;
                  else
                    v145 = v112;
                  if (v112 <= v144)
                    v112 = v144;
                  if (v144 <= v141)
                    v112 = v145;
                  v146 = v135 + v139 + (float)(v140 - v141) * (float)(v140 - v141);
                  if (!v128 || v96 - 1 == j || v328 - 1 == v128 || !j)
                  {
                    v147.f64[1] = *((float64_t *)&_Q0 + 1);
                    v147.f64[0] = v146;
                    v99 = vaddq_f64(v99, v147);
                  }
                  v100 = v100 + v146;
                }
              }
              v81 += v72;
              v83 += v82;
              ++v128;
            }
            while (v128 != v328);
LABEL_230:
            v148 = 0.0;
            goto LABEL_286;
          }
          v112 = 0.0;
          v150 = 0.0;
          v100 = 0.0;
          v151 = 0.0;
          v99.f64[0] = 0.0;
LABEL_238:
          if (v91 <= 1717855599)
          {
            a5 = v314;
            v56 = v339;
            if (v91 != 1278226534)
            {
              v152 = 1380410945;
              goto LABEL_314;
            }
            goto LABEL_315;
          }
          a5 = v314;
          v56 = v339;
          if (v91 == 1717856627)
            goto LABEL_315;
          v152 = 1717855600;
LABEL_314:
          if (v91 == v152)
          {
LABEL_315:
            v211 = v112;
LABEL_351:
            if (v100 == 0.0)
            {
              v78 = INFINITY;
            }
            else
            {
              v340 = v99.f64[0];
              v229 = log10(v211);
              v230 = log10(v100 / v150);
              v99.f64[0] = v340;
              v78 = v230 * -10.0 + v229 * 20.0;
            }
            if (v99.f64[0] != 0.0)
            {
              v341 = v99.f64[0];
              v231 = log10(v211);
              v232 = log10(v341 / v151);
              v79 = 0;
              v149 = v232 * -10.0 + v231 * 20.0;
              goto LABEL_403;
            }
          }
          else
          {
            if (v100 == 0.0)
            {
              v78 = INFINITY;
            }
            else
            {
              v342 = v99.f64[0];
              v235 = log10(v100 / v150);
              v99.f64[0] = v342;
              v78 = v235 * -10.0 + 192.659197;
            }
            if (v99.f64[0] != 0.0)
            {
              v236 = log10(v99.f64[0] / v151);
              v79 = 0;
              v237 = v236 * -10.0;
              v238 = 192.659197;
              goto LABEL_402;
            }
          }
LABEL_355:
          v79 = 0;
          v149 = INFINITY;
          goto LABEL_403;
        }
LABEL_231:
        FigSignalErrorAt();
        v79 = 0;
        v149 = 0.0;
LABEL_236:
        a5 = v314;
        v56 = v339;
        goto LABEL_403;
      }
      v90 = v328;
      v91 = v68;
      if (v71 != 16)
      {
        v92 = v312;
        v93 = v313;
        v95 = v336;
        v94 = v337;
        v96 = v326;
        if (v80 != 8)
          goto LABEL_231;
        if (!v328)
        {
          v79 = 0;
          v78 = INFINITY;
          v149 = INFINITY;
          goto LABEL_236;
        }
        v97 = 0;
        if (v89 == 4)
          v98 = v325;
        else
          v98 = 0;
        if (v89 == 3)
          v98 = 1;
        v99 = 0uLL;
        v100 = 0.0;
        v56 = v339;
        do
        {
          if (v326)
          {
            for (k = 0; k != v326; ++k)
            {
              v102 = k * v89;
              if (v98)
              {
                v103 = (double)(v81[v102 + 2] - v83[v102 + 2]);
                v104 = v103 * v103;
                v105 = v81[v102 + 1] - v83[v102 + 1];
                v106 = (double)v105 * (double)v105;
              }
              else
              {
                if (((v89 == 4) & ~v325) == 0)
                  goto LABEL_337;
                v107 = (double)(v81[v102 + 1] - v83[v102 + 1]);
                v104 = v107 * v107;
                v108 = v81[v102 + 2] - v83[v102 + 2];
                v106 = (double)v108 * (double)v108;
                v102 += 3;
              }
              v109 = v81[v102] - v83[v102];
              v110 = v104 + v106 + (double)v109 * (double)v109;
              if (!v97 || v326 - 1 == k || v328 - 1 == v97 || !k)
              {
                v111.f64[1] = *((float64_t *)&_Q0 + 1);
                v111.f64[0] = v110;
                v99 = vaddq_f64(v99, v111);
              }
              v100 = v100 + v110;
            }
          }
          v81 += v72;
          v83 += v82;
          ++v97;
        }
        while (v97 != v328);
LABEL_173:
        v112 = 0.0;
        goto LABEL_230;
      }
      v92 = v312;
      v93 = v313;
      v95 = v336;
      v94 = v337;
      v96 = v326;
      if (v70 <= 1651926375)
      {
        if (v70 == 1278226536 || v70 == 1380411457)
          goto LABEL_244;
        v114 = 1647719528;
LABEL_243:
        if (v70 == v114)
          goto LABEL_244;
        if (v328)
        {
          v212 = 0;
          if (v89 == 4)
            v213 = v325;
          else
            v213 = 0;
          if (v89 == 3)
            v213 = 1;
          v99 = 0uLL;
          v100 = 0.0;
          v56 = v339;
          do
          {
            if (v326)
            {
              for (m = 0; m != v326; ++m)
              {
                v215 = m * v89;
                if (v213)
                {
                  v216 = (double)(*(unsigned __int16 *)&v81[2 * v215 + 4] - *(unsigned __int16 *)&v83[2 * v215 + 4]);
                  v217 = v216 * v216;
                  v218 = (double)(*(unsigned __int16 *)&v81[2 * v215 + 2] - *(unsigned __int16 *)&v83[2 * v215 + 2]);
                  v219 = v218 * v218;
                  v220 = *(unsigned __int16 *)&v81[2 * v215];
                  v221 = *(unsigned __int16 *)&v83[2 * v215];
                }
                else
                {
                  if (((v89 == 4) & ~v325) == 0)
                    goto LABEL_337;
                  v222 = 2 * v215;
                  v223 = (double)(*(unsigned __int16 *)&v81[v222 + 2] - *(unsigned __int16 *)&v83[v222 + 2]);
                  v217 = v223 * v223;
                  v224 = (double)(*(unsigned __int16 *)&v81[v222 + 4] - *(unsigned __int16 *)&v83[v222 + 4]);
                  v219 = v224 * v224;
                  v222 += 6;
                  v220 = *(unsigned __int16 *)&v81[v222];
                  v221 = *(unsigned __int16 *)&v83[v222];
                }
                v225 = v217 + v219 + (double)(v220 - v221) * (double)(v220 - v221);
                if (!v212 || v326 - 1 == m || v328 - 1 == v212 || !m)
                {
                  v226.f64[1] = *((float64_t *)&_Q0 + 1);
                  v226.f64[0] = v225;
                  v99 = vaddq_f64(v99, v226);
                }
                v100 = v100 + v225;
              }
            }
            v81 += v72;
            v83 += v82;
            ++v212;
          }
          while (v212 != v328);
          goto LABEL_173;
        }
LABEL_338:
        v148 = 0.0;
        v150 = 0.0;
        v100 = 0.0;
        v151 = 0.0;
        v99.f64[0] = 0.0;
        a5 = v314;
        v56 = v339;
LABEL_339:
        if (v91 <= 1651926375)
        {
          if (v91 == 1278226536 || v91 == 1380411457)
            goto LABEL_350;
          v228 = 1647719528;
        }
        else
        {
          if (v91 <= 1751411058)
          {
            if (v91 != 1651926376)
            {
              v227 = 25968;
              goto LABEL_348;
            }
LABEL_350:
            v211 = v148;
            goto LABEL_351;
          }
          if (v91 == 1751527984)
            goto LABEL_350;
          v227 = 26995;
LABEL_348:
          v228 = v227 | 0x68640000;
        }
        if (v91 != v228)
        {
          if (v100 == 0.0)
          {
            v78 = INFINITY;
          }
          else
          {
            v343 = v99.f64[0];
            v240 = log10(v100 / v150);
            v99.f64[0] = v343;
            v78 = v240 * -10.0 + 96.3294661;
          }
          if (v99.f64[0] != 0.0)
          {
            v241 = log10(v99.f64[0] / v151);
            v79 = 0;
            v237 = v241 * -10.0;
            v238 = 96.3294661;
            goto LABEL_402;
          }
          goto LABEL_355;
        }
        goto LABEL_350;
      }
      if (v70 > 1751411058)
      {
        if (v70 != 1751411059)
        {
          v114 = 1751527984;
          goto LABEL_243;
        }
      }
      else if (v70 != 1651926376)
      {
        v114 = 1751410032;
        goto LABEL_243;
      }
LABEL_244:
      if (!v328)
        goto LABEL_338;
      v153 = 0;
      if (v89 == 4)
        v154 = v325;
      else
        v154 = 0;
      if (v89 == 3)
        v154 = 1;
      v99 = 0uLL;
      v100 = 0.0;
      v148 = 0.0;
      v56 = v339;
      do
      {
        if (v326)
        {
          v155 = 0;
          while (1)
          {
            v156 = v155 * v89;
            if (v154)
            {
              v157 = 2 * v156 + 4;
              LOWORD(_S5) = *(_WORD *)&v81[v157];
              __asm { FCVT            S2, H5 }
              v160 = 2 * v156 + 2;
              LOWORD(_S6) = *(_WORD *)&v81[v160];
              _H4 = *(_WORD *)&v81[2 * v156];
              __asm
              {
                FCVT            S3, H6
                FCVT            S4, H4
              }
              if (_S2 <= _S3)
                _S5 = _S6;
              __asm { FCVT            S5, H5 }
              if (_S5 <= _S4)
              {
                _S5 = _S4;
                if (v148 <= _S4)
                  goto LABEL_266;
              }
              else
              {
                if (v148 > _S5)
                  goto LABEL_267;
LABEL_266:
                v148 = _S5;
              }
LABEL_267:
              LOWORD(_S6) = *(_WORD *)&v83[v157];
              __asm { FCVT            S7, H6 }
              _S2 = _S2 - _S7;
              __asm
              {
                FCVT            H2, S2
                FCVT            D2, H2
              }
              v178 = _D2 * _D2;
              LOWORD(_S16) = *(_WORD *)&v83[v160];
              __asm { FCVT            S17, H16 }
              _S3 = _S3 - _S17;
              __asm
              {
                FCVT            H3, S3
                FCVT            D3, H3
              }
              v182 = _D3 * _D3;
              _H5 = *(_WORD *)&v83[2 * v156];
              goto LABEL_271;
            }
            if (((v89 == 4) & ~v325) == 0)
              goto LABEL_337;
            v165 = 2 * v156;
            v166 = v165 + 2;
            LOWORD(_S5) = *(_WORD *)&v81[v165 + 2];
            __asm { FCVT            S2, H5 }
            v169 = v165 + 4;
            LOWORD(_S6) = *(_WORD *)&v81[v165 + 4];
            v170 = v165 + 6;
            _H4 = *(_WORD *)&v81[v170];
            __asm
            {
              FCVT            S3, H6
              FCVT            S4, H4
            }
            if (_S2 <= _S3)
              _S5 = _S6;
            __asm { FCVT            S5, H5 }
            if (_S5 > _S4)
              break;
            _S5 = _S4;
            if (v148 <= _S4)
              goto LABEL_269;
LABEL_270:
            LOWORD(_S6) = *(_WORD *)&v83[v166];
            __asm { FCVT            S7, H6 }
            _S2 = _S2 - _S7;
            __asm
            {
              FCVT            H2, S2
              FCVT            D2, H2
            }
            v178 = _D2 * _D2;
            LOWORD(_S16) = *(_WORD *)&v83[v169];
            __asm { FCVT            S17, H16 }
            _S3 = _S3 - _S17;
            __asm
            {
              FCVT            H3, S3
              FCVT            D3, H3
            }
            v182 = _D3 * _D3;
            _H5 = *(_WORD *)&v83[v170];
LABEL_271:
            __asm { FCVT            S5, H5 }
            _S4 = _S4 - _S5;
            __asm
            {
              FCVT            H4, S4
              FCVT            D4, H4
            }
            v191 = _D4 * _D4;
            if (_S7 <= _S17)
              _S6 = _S16;
            __asm { FCVT            S6, H6 }
            if (_S6 <= _S5)
            {
              _S6 = _S5;
              if (v148 > _S5)
                goto LABEL_278;
LABEL_277:
              v148 = _S6;
              goto LABEL_278;
            }
            if (v148 <= _S6)
              goto LABEL_277;
LABEL_278:
            v192 = v178 + v182 + v191;
            if (!v153 || v326 - 1 == v155 || v328 - 1 == v153 || !v155)
            {
              v193.f64[1] = *((float64_t *)&_Q0 + 1);
              v193.f64[0] = v192;
              v99 = vaddq_f64(v99, v193);
            }
            v100 = v100 + v192;
            if (v326 == ++v155)
              goto LABEL_284;
          }
          if (v148 > _S5)
            goto LABEL_270;
LABEL_269:
          v148 = _S5;
          goto LABEL_270;
        }
LABEL_284:
        v81 += v72;
        v83 += v82;
        ++v153;
      }
      while (v153 != v328);
      v112 = 0.0;
LABEL_286:
      v150 = (double)(3 * v90 * v96);
      v151 = v99.f64[1];
      if (v80 == 32)
        goto LABEL_238;
      a5 = v314;
      if (v80 == 16)
        goto LABEL_339;
      if (v100 == 0.0)
      {
        v78 = INFINITY;
      }
      else
      {
        v344 = v99.f64[0];
        v242 = log10(v100 / v150);
        v99.f64[0] = v344;
        v78 = v242 * -10.0 + 48.1308036;
      }
      if (v99.f64[0] == 0.0)
        goto LABEL_355;
      v243 = log10(v99.f64[0] / v151);
      v79 = 0;
      v237 = v243 * -10.0;
      v238 = 48.1308036;
LABEL_402:
      v149 = v237 + v238;
LABEL_403:
      v93[v95] = v78;
      v311[v95] = v149;
      v335 |= v79;
      v54 = v318;
LABEL_404:
      ++v56;
      v55 = v94 + a5;
    }
    while (v56 != v54);
    v53 = v323 + 1;
    v308 += a5;
  }
  while (v323 + 1 != v92);
  v294 = v302;
  a8 = v303;
  if (v335)
  {
    v45 = 0;
    v42 = 0.0;
    v36 = 1;
    v304 = 1;
    v298 = 0.0;
    v299 = a17;
    v295 = v311;
  }
  else
  {
    v295 = v311;
    if (v305)
    {
      v296 = 0;
      v297 = v301;
      if (v301 <= 1)
        v297 = 1;
      v298 = INFINITY;
      v42 = INFINITY;
      do
      {
        if (v298 >= v93[v296])
          v298 = v93[v296];
        if (v42 >= v311[v296])
          v42 = v311[v296];
        ++v296;
      }
      while (v297 != v296);
      v45 = 0;
      v36 = 1;
      v304 = 1;
    }
    else
    {
      v45 = 0;
      v36 = 1;
      v42 = INFINITY;
      v304 = 1;
      v298 = INFINITY;
    }
LABEL_464:
    v299 = a17;
  }
LABEL_465:
  if (a8)
    *a8 = v298;
  if (v299)
    *v299 = v42;
  if (v36)
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v304)
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  free(v294);
  free(v295);
  return v45;
}

double CMPhotoComputeMinimumBlockPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, unint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double v21;

  v21 = 0.0;
  if (CGRectIsNull(*(CGRect *)&a5))
  {
    v16 = *MEMORY[0x1E0C9D628];
    v17 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v19 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    v16 = 0.0;
    v17 = 0.0;
    v18 = a7;
    v19 = a8;
  }
  _computeMinimumBlockPSNRForPixelBuffer(a1, a2, a3, 0, a4, 0, 0, &v21, v16, v17, v18, v19, a5, a6, a7, a8, 0);
  return v21;
}

uint64_t CMPhotoComputePSNRForPixelBufferBlockBased(__CVBuffer *a1, __CVBuffer *a2, unsigned int a3, unint64_t a4, uint64_t a5, double *a6)
{
  OSType PixelFormatType;
  double v13;
  uint64_t v15;

  v15 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferGetPixelFormatType(a2) == PixelFormatType
    && a6
    && (v13 = log2((double)a4), (unint64_t)exp2(ceil(v13)) == a4))
  {
    return _computeMinimumBlockPSNRForPixelBuffer(a1, a2, 1, a3, a4, a5, a6, (double *)&v15, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void CMPhotoComputePSNRForFloatingPointPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, float a8)
{
  __CVBuffer *v15;
  signed int PixelFormatType;
  signed int v17;
  int v18;
  signed int v19;
  signed int v20;
  int v21;
  unsigned __int16 v22;
  int v23;
  unsigned __int16 v24;
  int v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  uint64_t v30;
  uint64_t v31;
  char *BaseAddress;
  char *v33;
  size_t BytesPerRow;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t i;
  int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  char *v52;
  double v53;
  uint64_t j;
  CVPixelBufferRef v55;
  CVPixelBufferRef pixelBuffer;
  uint64x2_t v57;
  __int128 v58;
  uint64x2_t v59;
  __int128 v60;
  CGRect v61;

  v15 = a1;
  v55 = 0;
  pixelBuffer = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v17 = PixelFormatType;
  if (PixelFormatType > 1651926375)
  {
    if (PixelFormatType <= 1751410031)
    {
      if (PixelFormatType == 1651926376 || PixelFormatType == 1717855600)
        goto LABEL_21;
      v18 = 1717856627;
    }
    else if (PixelFormatType > 1751527983)
    {
      if (PixelFormatType == 1751527984)
        goto LABEL_21;
      v18 = 1932996149;
    }
    else
    {
      if (PixelFormatType == 1751410032)
        goto LABEL_21;
      v18 = 1751411059;
    }
  }
  else if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
      goto LABEL_21;
    v18 = 1278226534;
  }
  else if (PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457)
      goto LABEL_21;
    v18 = 1647719528;
  }
  else
  {
    if (PixelFormatType == 1278226536)
      goto LABEL_21;
    v18 = 1380410945;
  }
  if (PixelFormatType != v18)
  {
LABEL_95:
    FigSignalErrorAt();
    goto LABEL_98;
  }
LABEL_21:
  v19 = CVPixelBufferGetPixelFormatType(a2);
  v20 = v19;
  if (v19 <= 1651926375)
  {
    if (v19 <= 1380410944)
    {
      if (v19 == 1278226534)
        goto LABEL_36;
      v21 = 1278226536;
    }
    else
    {
      if (v19 == 1380410945 || v19 == 1380411457)
        goto LABEL_36;
      v21 = 1647719528;
    }
  }
  else if (v19 > 1751410031)
  {
    if (v19 == 1751410032 || v19 == 1751411059)
      goto LABEL_36;
    v21 = 1751527984;
  }
  else
  {
    if (v19 == 1651926376 || v19 == 1717855600)
      goto LABEL_36;
    v21 = 1717856627;
  }
  if (v19 != v21 && v19 != 825306677 && v19 != 825437747 && v19 != 1932996149)
    goto LABEL_95;
LABEL_36:
  if (v17 <= 1651926375)
  {
    if (v17 != 1278226536 && v17 != 1380411457)
    {
      v23 = 1647719528;
      goto LABEL_46;
    }
  }
  else if (v17 > 1751411058)
  {
    if (v17 != 1751527984)
    {
      v22 = 26995;
      goto LABEL_45;
    }
  }
  else if (v17 != 1651926376)
  {
    v22 = 25968;
LABEL_45:
    v23 = v22 | 0x68640000;
LABEL_46:
    if (v17 != v23)
      goto LABEL_49;
  }
  if (CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(v15, 0, a3, 0x7FFF, 2143289344, &pixelBuffer))goto LABEL_98;
  v15 = pixelBuffer;
  v17 = CVPixelBufferGetPixelFormatType(pixelBuffer);
LABEL_49:
  if (v20 <= 1651926375)
  {
    if (v20 != 1278226536 && v20 != 1380411457)
    {
      v25 = 1647719528;
      goto LABEL_59;
    }
  }
  else if (v20 > 1751411058)
  {
    if (v20 != 1751527984)
    {
      v24 = 26995;
      goto LABEL_58;
    }
  }
  else if (v20 != 1651926376)
  {
    v24 = 25968;
LABEL_58:
    v25 = v24 | 0x68640000;
LABEL_59:
    if (v20 != v25)
      goto LABEL_62;
  }
  if (CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(a2, 0, a3, 0x7FFF, 2143289344, &v55))
    goto LABEL_98;
  a2 = v55;
  v20 = CVPixelBufferGetPixelFormatType(v55);
LABEL_62:
  if (v17 != v20)
    goto LABEL_95;
  if (!CVPixelBufferLockBaseAddress(v15, 1uLL))
  {
    if (CVPixelBufferLockBaseAddress(a2, 1uLL))
    {
      CVPixelBufferUnlockBaseAddress(v15, 1uLL);
      goto LABEL_98;
    }
    v61.origin.x = a4;
    v61.origin.y = a5;
    v61.size.width = a6;
    v61.size.height = a7;
    if (CGRectIsNull(v61))
    {
      v26 = *MEMORY[0x1E0C9D628];
      v27 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v28 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v29 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    }
    else
    {
      v26 = 0.0;
      v27 = 0.0;
      v28 = a6;
      v29 = a7;
    }
    if (v17 == 825306677 || v17 == 1932996149 || v17 == 825437747)
    {
      v59 = 0u;
      v60 = 0u;
      _computeCropRectForPixelBuffer(v15, &v59, v26, v27, v28, v29);
      v57 = 0u;
      v58 = 0u;
      _computeCropRectForPixelBuffer(a2, &v57, a4, a5, a6, a7);
      v30 = v60;
      if ((_QWORD)v60 != (_QWORD)v58)
        goto LABEL_97;
      v31 = *((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1) != *((_QWORD *)&v58 + 1))
        goto LABEL_97;
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v15);
      v33 = (char *)CVPixelBufferGetBaseAddress(a2);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
      v35 = CVPixelBufferGetBytesPerRow(a2);
      if (!v31)
        goto LABEL_97;
      v36 = 0;
      v37 = 0;
      v38 = &v33[2 * v57.i64[0] + v57.i64[1] * v35];
      v39 = &BaseAddress[2 * v59.i64[0] + v59.i64[1] * BytesPerRow];
      do
      {
        if (v30)
        {
          for (i = 0; i != v30; ++i)
          {
            v41 = *(unsigned __int16 *)&v39[2 * i] - *(unsigned __int16 *)&v38[2 * i];
            v37 += (v41 * v41);
          }
        }
        v39 += BytesPerRow;
        v38 += v35;
        ++v36;
      }
      while (v36 != v31);
      if (!v37)
        goto LABEL_97;
      log10(a8);
      v42 = (double)v37 / (double)(unint64_t)(v31 * v30);
    }
    else
    {
      v59 = 0u;
      v60 = 0u;
      _computeCropRectForPixelBuffer(v15, &v59, v26, v27, v28, v29);
      v57 = 0u;
      v58 = 0u;
      _computeCropRectForPixelBuffer(a2, &v57, a4, a5, a6, a7);
      v43 = v60;
      if ((_QWORD)v60 != (_QWORD)v58)
        goto LABEL_97;
      v44 = *((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1) != *((_QWORD *)&v58 + 1))
        goto LABEL_97;
      v45 = (char *)CVPixelBufferGetBaseAddress(v15);
      v46 = (char *)CVPixelBufferGetBaseAddress(a2);
      v47 = CVPixelBufferGetBytesPerRow(v15);
      v48 = CVPixelBufferGetBytesPerRow(a2);
      if (!v44)
        goto LABEL_97;
      v49 = 0;
      v50 = 0;
      v51 = &v46[4 * v57.i64[0] + v57.i64[1] * v48];
      v52 = &v45[4 * v59.i64[0] + v59.i64[1] * v47];
      v53 = 0.0;
      do
      {
        if (v43)
        {
          for (j = 0; j != v43; ++j)
          {
            v53 = v53
                + (float)(*(float *)&v52[4 * j] - *(float *)&v51[4 * j])
                * (float)(*(float *)&v52[4 * j] - *(float *)&v51[4 * j]);
            ++v50;
          }
        }
        v52 += v47;
        v51 += v48;
        ++v49;
      }
      while (v49 != v44);
      if (v53 <= 0.0)
        goto LABEL_97;
      log10(a8);
      v42 = v53 / (double)v50;
    }
    log10(v42);
LABEL_97:
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  }
LABEL_98:
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  if (v55)
    CFRelease(v55);
}

void CMPhotoComputeSSIMForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, int a4, double *a5, double *a6, double *a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  signed int PixelFormatType;
  int v23;
  int v24;
  int v25;
  CVReturn v26;
  _BOOL4 v27;
  CVReturn v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  int v33;
  unsigned __int16 v34;
  uint64_t v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  float64x2_t *v40;
  CVPixelBufferRef *v41;
  double v47;
  __CVBuffer *v48;
  CVPixelBufferLockFlags v49;
  double v50;
  double v51;
  double v52;
  NSObject *v53;
  uint64_t v54;
  _QWORD v57[16];
  _QWORD v58[16];
  _QWORD block[16];
  _QWORD v60[4];
  CVPixelBufferRef v61;
  CVPixelBufferRef v62;
  float64x2_t v63[3];
  float64x2_t v64;
  double v65;
  uint64_t v66;
  CGRect v67;

  v66 = *MEMORY[0x1E0C80C00];
  v65 = 0.0;
  v64 = 0u;
  memset(v63, 0, sizeof(v63));
  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x2000000000;
  v60[3] = v63;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v23 = PixelFormatType;
  if (PixelFormatType <= 1380411456)
  {
    if (PixelFormatType > 1278226487)
    {
      if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0
        || PixelFormatType == 1278226488)
      {
        a4 = 1;
        goto LABEL_24;
      }
      v24 = 1380410945;
    }
    else
    {
      if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
        goto LABEL_24;
      v24 = 1111970369;
    }
  }
  else if (PixelFormatType <= 1937125935)
  {
    if (PixelFormatType > 1815491697)
    {
      if (PixelFormatType == 1815491698)
        goto LABEL_24;
      v24 = 1936077360;
    }
    else
    {
      if (PixelFormatType == 1380411457)
        goto LABEL_24;
      v24 = 1751527984;
    }
  }
  else if (PixelFormatType <= 1953903151)
  {
    if (PixelFormatType == 1937125936)
      goto LABEL_24;
    v24 = 1952854576;
  }
  else
  {
    if (PixelFormatType == 1953903152 || PixelFormatType == 2016686640)
      goto LABEL_24;
    v24 = 2019963440;
  }
  if (PixelFormatType != v24)
  {
    v25 = FigSignalErrorAt();
LABEL_72:
    v33 = v25;
    if (!a5)
      goto LABEL_59;
    goto LABEL_56;
  }
LABEL_24:
  v25 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v25)
    goto LABEL_72;
  v26 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if (v26)
  {
    v33 = v26;
    v48 = a1;
    v49 = 1;
    goto LABEL_54;
  }
  v27 = a3 != 0;
  if (a3)
  {
    v28 = CVPixelBufferLockBaseAddress(a3, 0);
    if (v28)
    {
      v33 = v28;
      v27 = 0;
      goto LABEL_52;
    }
  }
  v67.origin.x = a8;
  v67.origin.y = a9;
  v67.size.width = a10;
  v67.size.height = a11;
  v29 = 0.0;
  v30 = 0.0;
  v31 = a10;
  v32 = a11;
  if (CGRectIsNull(v67))
  {
    v29 = *MEMORY[0x1E0C9D628];
    v30 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v31 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v32 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  if (!a4)
  {
    if (v23 > 1380411456)
    {
      if (v23 == 1815491698)
        goto LABEL_38;
      v34 = 26689;
    }
    else
    {
      if (v23 == 1111970369)
        goto LABEL_38;
      v34 = 26177;
    }
    if (v23 != (v34 | 0x52470000))
    {
      v53 = CMPhotoComputeSSIMForPixelBuffer_queue;
      if (!CMPhotoComputeSSIMForPixelBuffer_queue)
      {
        v53 = dispatch_queue_create("com.apple.coremedia.psnr", MEMORY[0x1E0C80D50]);
        CMPhotoComputeSSIMForPixelBuffer_queue = (uint64_t)v53;
        if (!v53)
        {
          v33 = -16991;
          goto LABEL_52;
        }
      }
      v54 = MEMORY[0x1E0C809B0];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke;
      block[3] = &unk_1E53F5158;
      *(CGFloat *)&block[6] = v29;
      *(CGFloat *)&block[7] = v30;
      *(CGFloat *)&block[8] = v31;
      *(CGFloat *)&block[9] = v32;
      block[10] = a2;
      *(CGFloat *)&block[11] = a8;
      *(CGFloat *)&block[12] = a9;
      *(CGFloat *)&block[13] = a10;
      *(CGFloat *)&block[14] = a11;
      block[15] = a3;
      block[4] = v60;
      block[5] = a1;
      dispatch_async(v53, block);
      v58[0] = v54;
      v58[1] = 0x40000000;
      v58[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke_2;
      v58[3] = &unk_1E53F5180;
      *(CGFloat *)&v58[6] = v29;
      *(CGFloat *)&v58[7] = v30;
      *(CGFloat *)&v58[8] = v31;
      *(CGFloat *)&v58[9] = v32;
      v58[10] = a2;
      *(CGFloat *)&v58[11] = a8;
      *(CGFloat *)&v58[12] = a9;
      *(CGFloat *)&v58[13] = a10;
      *(CGFloat *)&v58[14] = a11;
      v58[15] = a3;
      v58[4] = v60;
      v58[5] = a1;
      dispatch_async((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, v58);
      v57[0] = v54;
      v57[1] = 0x40000000;
      v57[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke_3;
      v57[3] = &unk_1E53F51A8;
      *(CGFloat *)&v57[6] = v29;
      *(CGFloat *)&v57[7] = v30;
      *(CGFloat *)&v57[8] = v31;
      *(CGFloat *)&v57[9] = v32;
      v57[10] = a2;
      *(CGFloat *)&v57[11] = a8;
      *(CGFloat *)&v57[12] = a9;
      *(CGFloat *)&v57[13] = a10;
      *(CGFloat *)&v57[14] = a11;
      v57[15] = a3;
      v57[4] = v60;
      v57[5] = a1;
      dispatch_async((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, v57);
      dispatch_barrier_sync((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, &__block_literal_global_2);
      v33 = 0;
      __asm
      {
        FMOV            V2.2D, #6.0
        FMOV            V1.2D, #0.125
      }
      v63[0] = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)((char *)&v63[1] + 8), _Q2, v63[0]), v64), _Q1);
      v47 = (v63[2].f64[1] + v63[1].f64[0] * 6.0 + v65) * 0.125;
      goto LABEL_51;
    }
LABEL_38:
    v61 = 0;
    v62 = 0;
    if (!_createMonochromeBufferFromRGB(a1, a2, &v62, &v61, v29, v30, v31, v32, a8, a9, a10, a11)
      && !CVPixelBufferLockBaseAddress(v62, 0))
    {
      if (CVPixelBufferLockBaseAddress(v61, 0))
      {
        v41 = &v62;
      }
      else
      {
        v35 = 0;
        v36 = *MEMORY[0x1E0C9D628];
        v37 = *(double *)(MEMORY[0x1E0C9D628] + 8);
        v38 = *(double *)(MEMORY[0x1E0C9D628] + 16);
        v39 = *(double *)(MEMORY[0x1E0C9D628] + 24);
        v40 = v63;
        do
        {
          if (_extractRGBComponentAndCopyIntoMonochromeBuffer(a1, a2, v62, v61, v35))
            break;
          _computeSSIMForPlane(v62, v61, 0, 0, (uint64_t)v40, v36, v37, v38, v39, v36, v37, v38, v39);
          ++v35;
          v40 = (float64x2_t *)((char *)v40 + 24);
        }
        while (v35 != 3);
        CVPixelBufferUnlockBaseAddress(v62, 0);
        v41 = &v61;
      }
      CVPixelBufferUnlockBaseAddress(*v41, 0);
    }
    if (v62)
      CFRelease(v62);
    if (v61)
      CFRelease(v61);
    v33 = 0;
    __asm { FMOV            V1.2D, #3.0 }
    v63[0] = vdivq_f64(vaddq_f64(vaddq_f64(v63[0], *(float64x2_t *)((char *)&v63[1] + 8)), v64), _Q1);
    v47 = (v63[1].f64[0] + v63[2].f64[1] + v65) / 3.0;
LABEL_51:
    v63[1].f64[0] = v47;
    goto LABEL_52;
  }
  _computeSSIMForPlane(a1, a2, 0, 0, (uint64_t)v63, v29, v30, v31, v32, a8, a9, a10, a11);
  v33 = 0;
LABEL_52:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (!v27)
    goto LABEL_55;
  v48 = a3;
  v49 = 0;
LABEL_54:
  CVPixelBufferUnlockBaseAddress(v48, v49);
LABEL_55:
  if (!a5)
    goto LABEL_59;
LABEL_56:
  v50 = v63[0].f64[0];
  if (v33)
    v50 = 0.0;
  *a5 = v50;
LABEL_59:
  if (a6)
  {
    v51 = v63[0].f64[1];
    if (v33)
      v51 = 0.0;
    *a6 = v51;
  }
  if (a7)
  {
    v52 = v63[1].f64[0];
    if (v33)
      v52 = 0.0;
    *a7 = v52;
  }
  _Block_object_dispose(v60, 8);
}

void _computeSSIMForPlane(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, unsigned int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  uint64_t PixelFormatType;
  int v27;
  uint64_t BitDepthForPixelFormat;
  int v29;
  int v30;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *BaseAddressOfPlane;
  int64x2_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  OSType v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  char *v44;
  char *v45;
  char *v46;
  double v47;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  size_t v53;
  char *v54;
  float *v55;
  float *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  double v61;
  double v62;
  double v63;
  size_t v64;
  size_t v65;
  double v66;
  double v67;
  size_t v68;
  unsigned int v69;
  unsigned int v70;
  double *v71;
  double *v72;
  unint64_t v73;
  float *v74;
  float *v75;
  double v76;
  double *v77;
  double *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  double *v89;
  double *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  double v94;
  double *v95;
  double *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  double v100;
  unint64_t v101;
  uint64_t v102;
  float64x2_t *v103;
  unint64_t v104;
  float64x2_t *v105;
  float64x2_t v106;
  unint64_t v107;
  uint64_t v108;
  double v110;
  double v111;
  _BYTE *v112;
  double v117;
  double v118;
  double v119;
  double v120;
  float64x2_t *v121;
  unint64_t v122;
  float64x2_t *v123;
  float64x2_t v124;
  unint64_t v125;
  uint64_t v126;
  double v128;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  int64x2_t v145;
  char *v146;
  unint64_t BytesPerPixelForPixelFormat;
  size_t v148;
  size_t v149;
  uint64_t v150;
  size_t BytesPerRowOfPlane;
  _BOOL8 v152;
  unint64_t v153;
  uint64_t v154;
  uint64x2_t v155;
  __int128 v156;
  int64x2_t v157;
  __int128 v158;
  int64x2_t v159;
  __int128 v160;
  _OWORD v161[4];
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v27 = PixelFormatType;
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
  LODWORD(v154) = 1;
  if (v27 <= 1651926375)
  {
    if (v27 == 1278226536 || v27 == 1380411457)
      goto LABEL_12;
    v29 = 1647719528;
  }
  else if (v27 > 1751411058)
  {
    if (v27 == 1751411059)
      goto LABEL_12;
    v29 = 1751527984;
  }
  else
  {
    if (v27 == 1651926376)
      goto LABEL_12;
    v29 = 1751410032;
  }
  if (v27 != v29)
    LODWORD(v154) = 0;
LABEL_12:
  HIDWORD(v154) = 1;
  v153 = BitDepthForPixelFormat;
  if (v27 > 1717855599)
  {
    if (v27 == 1717855600)
      goto LABEL_19;
    v30 = 1717856627;
  }
  else
  {
    if (v27 == 1278226534)
      goto LABEL_19;
    v30 = 1380410945;
  }
  if (v27 != v30)
    HIDWORD(v154) = 0;
LABEL_19:
  v31 = a4 != 0;
  if (a4)
    v32 = 2;
  else
    v32 = 1;
  v162 = 0;
  v152 = a4 > 1;
  memset(v161, 0, sizeof(v161));
  if (a4 > 2)
    goto LABEL_88;
  v159 = 0uLL;
  v160 = 0uLL;
  _computeCropRectForPixelBuffer(a1, (uint64x2_t *)&v159, a6, a7, a8, a9);
  v157 = 0u;
  v158 = 0u;
  _computeCropRectForPixelBuffer(a2, (uint64x2_t *)&v157, a10, a11, a12, a13);
  v33 = v160;
  if ((_QWORD)v160 != (_QWORD)v158)
    goto LABEL_88;
  v34 = *((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1) != *((_QWORD *)&v158 + 1))
    goto LABEL_88;
  if (a3)
  {
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
    v155 = 0u;
    v156 = 0u;
    _computeCropRectForPixelBuffer(a3, &v155, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24));
    if (v156 != __PAIR128__(v34, v33))
    {
LABEL_88:
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      v139 = 0.0;
      goto LABEL_89;
    }
    if (!a4)
      goto LABEL_29;
    goto LABEL_28;
  }
  BytesPerRowOfPlane = 0;
  BaseAddressOfPlane = 0;
  if (a4)
  {
LABEL_28:
    v33 = (v33 + 1) >> 1;
    v34 = (v34 + 1) >> 1;
    *(_QWORD *)&v160 = v33;
    *((_QWORD *)&v160 + 1) = v34;
    v36 = vdupq_n_s64(1uLL);
    v159 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v159, v36), 1uLL);
    v157 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v157, v36), 1uLL);
  }
LABEL_29:
  v150 = a5;
  v148 = CVPixelBufferGetBytesPerRowOfPlane(a1, a4 != 0);
  v149 = CVPixelBufferGetBytesPerRowOfPlane(a2, a4 != 0);
  v37 = (char *)malloc_type_calloc(360 * v33 + 2880, 1uLL, 0x927E5FDuLL);
  v38 = 0;
  v39 = v37 + 320;
  do
  {
    *(_QWORD *)((char *)v161 + v38) = v39;
    v38 += 8;
    v39 += 40 * v33 + 320;
  }
  while (v38 != 72);
  v40 = CVPixelBufferGetPixelFormatType(a1);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v40);
  v41 = CVPixelBufferGetPixelFormatType(a1);
  v42 = CMPhotoGetBitDepthForPixelFormat(v41);
  v145 = v159;
  v43 = v157;
  v146 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  v144 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  v143 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  v142 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  v141 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  v44 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  v45 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  v46 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  if (!v34)
  {
    free(v37);
    a5 = v150;
    goto LABEL_88;
  }
  v140 = v37;
  v49 = 0;
  v50 = 0;
  v51 = (v43.i64[0] << v31) + v152 + v43.i64[1] * v149 / BytesPerPixelForPixelFormat;
  v52 = &v46[2 * v51];
  v53 = (v145.i64[0] << v31) + v152 + v145.i64[1] * v148 / BytesPerPixelForPixelFormat;
  v54 = &v45[2 * v53];
  v55 = (float *)&v44[4 * v51];
  v56 = (float *)&v141[4 * v53];
  v57 = &v142[2 * v51];
  v58 = &v143[2 * v53];
  v59 = &v144[v51];
  v60 = &v146[v53];
  v61 = (double)(1 << (16 - v42));
  v62 = dbl_1A828AC50[v153 > 8];
  v63 = dbl_1A828AC60[v153 > 8];
  v64 = v148 / BytesPerPixelForPixelFormat;
  v65 = BytesPerRowOfPlane << v31;
  v66 = 0.0;
  v67 = 0.0;
  v68 = v149 / BytesPerPixelForPixelFormat;
  do
  {
    v69 = ((int)v49 + 8) % 9u;
    v70 = v49 % 9;
    if (HIDWORD(v154))
    {
      if (v33)
      {
        v71 = (double *)*((_QWORD *)v161 + v70);
        v72 = (double *)*((_QWORD *)v161 + v69);
        v73 = v33;
        v74 = v56;
        v75 = v55;
        do
        {
          v76 = *v74;
          _D16 = *v75;
          *v71 = *v72 + v76;
          v71[1] = v72[1] + _D16;
          v71[2] = v72[2] + v76 * v76;
          v71[3] = v72[3] + _D16 * _D16;
          v47 = v72[4] + v76 * _D16;
          v71[4] = v47;
          v74 += v32;
          v75 += v32;
          v72 += 5;
          v71 += 5;
          --v73;
        }
        while (v73);
      }
    }
    else if ((_DWORD)v154)
    {
      if (v33)
      {
        v77 = (double *)*((_QWORD *)v161 + v70);
        v78 = (double *)*((_QWORD *)v161 + v69);
        v79 = v33;
        v80 = v54;
        v81 = v52;
        do
        {
          _H7 = *(_WORD *)v80;
          __asm { FCVT            D7, H7 }
          _H16 = *(_WORD *)v81;
          __asm { FCVT            D16, H16 }
          *v77 = *v78 + _D7;
          v77[1] = v78[1] + _D16;
          v77[2] = v78[2] + _D7 * _D7;
          v77[3] = v78[3] + _D16 * _D16;
          v47 = v78[4] + _D7 * _D16;
          v77[4] = v47;
          v80 += 2 * v32;
          v81 += 2 * v32;
          v78 += 5;
          v77 += 5;
          --v79;
        }
        while (v79);
      }
    }
    else if (v153 < 9)
    {
      if (v33)
      {
        v95 = (double *)*((_QWORD *)v161 + v70);
        v96 = (double *)*((_QWORD *)v161 + v69);
        v97 = v33;
        v98 = v60;
        v99 = v59;
        do
        {
          LOBYTE(v47) = *v98;
          v100 = (double)*(unint64_t *)&v47;
          LOBYTE(_D16) = *v99;
          _D16 = (double)*(unint64_t *)&_D16;
          *v95 = *v96 + v100;
          v95[1] = v96[1] + _D16;
          v95[2] = v96[2] + v100 * v100;
          v95[3] = v96[3] + _D16 * _D16;
          v98 += v32;
          v47 = v96[4] + v100 * _D16;
          v95[4] = v47;
          v99 += v32;
          v96 += 5;
          v95 += 5;
          --v97;
        }
        while (v97);
      }
    }
    else if (v33)
    {
      v89 = (double *)*((_QWORD *)v161 + v70);
      v90 = (double *)*((_QWORD *)v161 + v69);
      v91 = v33;
      v92 = v57;
      v93 = v58;
      do
      {
        LOWORD(v47) = *(_WORD *)v93;
        v94 = (double)*(unint64_t *)&v47;
        LOWORD(_D16) = *(_WORD *)v92;
        _D16 = (double)*(unint64_t *)&_D16;
        if (v42 != 16)
        {
          v94 = v94 / v61;
          _D16 = _D16 / v61;
        }
        *v89 = v94 + *v90;
        v89[1] = _D16 + v90[1];
        v89[2] = v90[2] + v94 * v94;
        v89[3] = v90[3] + _D16 * _D16;
        v47 = v90[4] + v94 * _D16;
        v89[4] = v47;
        v93 += 2 * v32;
        v92 += 2 * v32;
        v90 += 5;
        v89 += 5;
        --v91;
      }
      while (v91);
    }
    v101 = v49 + 1;
    if (v49 >= 7)
    {
      v102 = *((_QWORD *)v161 + v101 % 9);
      if (v154)
      {
        if (v33)
        {
          v103 = (float64x2_t *)*((_QWORD *)v161 + v70);
          v104 = v33;
          v105 = (float64x2_t *)*((_QWORD *)v161 + v101 % 9);
          do
          {
            v106 = v105[1];
            *v105 = vsubq_f64(*v103, *v105);
            v105[1] = vsubq_f64(v103[1], v106);
            v105[2].f64[0] = v103[2].f64[0] - v105[2].f64[0];
            v103 = (float64x2_t *)((char *)v103 + 40);
            v105 = (float64x2_t *)((char *)v105 + 40);
            --v104;
          }
          while (v104);
          v107 = 0;
          v108 = v102 - 320;
          _Q18 = 0uLL;
          v47 = 0.0;
          _D16 = 0.0;
          v110 = 0.0;
          v111 = 0.0;
          v112 = BaseAddressOfPlane;
          _Q20 = 0uLL;
          do
          {
            v111 = v111 + *(double *)(v108 + 320) - *(double *)v108;
            _Q20 = vaddq_f64(_Q20, vsubq_f64(*(float64x2_t *)(v108 + 344), *(float64x2_t *)(v108 + 24)));
            _Q18 = vaddq_f64(_Q18, vsubq_f64(*(float64x2_t *)(v108 + 328), *(float64x2_t *)(v108 + 8)));
            if (v107 >= 7)
            {
              _D25 = 0x4050000000000000;
              __asm
              {
                FMLA            D24, D25, V18.D[1]
                FMLA            D27, D25, V20.D[1]
              }
              v117 = (v111 * _Q18.f64[0] * 2.0 + 0.4096)
                   / (v111 * v111 + vmuld_n_f64(_Q18.f64[0], _Q18.f64[0]) + 0.4096);
              v118 = _D24 + vmlad_n_f64(-(_Q18.f64[0] * _Q18.f64[0]), 64.0, _Q20.f64[0]) + 3.6864;
              v119 = (_D27 * 2.0 + 3.6864) / v118;
              if (v112)
              {
                LOBYTE(v118) = *v112;
                v120 = (double)*(unint64_t *)&v118;
                _D16 = _D16 + v120 * v117;
                v47 = v47 + v120 * v119;
                v110 = v110 + v120;
                v112 += v32;
              }
              else
              {
                _D16 = _D16 + v117;
                v47 = v47 + v119;
              }
            }
            v108 += 40;
            ++v107;
          }
          while (v33 != v107);
          goto LABEL_76;
        }
      }
      else if (v33)
      {
        v121 = (float64x2_t *)*((_QWORD *)v161 + v70);
        v122 = v33;
        v123 = (float64x2_t *)*((_QWORD *)v161 + v101 % 9);
        do
        {
          v124 = v123[1];
          *v123 = vsubq_f64(*v121, *v123);
          v123[1] = vsubq_f64(v121[1], v124);
          v123[2].f64[0] = v121[2].f64[0] - v123[2].f64[0];
          v121 = (float64x2_t *)((char *)v121 + 40);
          v123 = (float64x2_t *)((char *)v123 + 40);
          --v122;
        }
        while (v122);
        v125 = 0;
        v126 = v102 - 320;
        _Q18 = 0uLL;
        v47 = 0.0;
        _D16 = 0.0;
        v110 = 0.0;
        v128 = 0.0;
        v112 = BaseAddressOfPlane;
        _Q20 = 0uLL;
        do
        {
          v128 = v128 + *(double *)(v126 + 320) - *(double *)v126;
          _Q20 = vaddq_f64(_Q20, vsubq_f64(*(float64x2_t *)(v126 + 344), *(float64x2_t *)(v126 + 24)));
          _Q18 = vaddq_f64(_Q18, vsubq_f64(*(float64x2_t *)(v126 + 328), *(float64x2_t *)(v126 + 8)));
          if (v125 >= 7)
          {
            _D25 = 0x4050000000000000;
            __asm
            {
              FMLA            D24, D25, V18.D[1]
              FMLA            D27, D25, V20.D[1]
            }
            v133 = (v62 + v128 * _Q18.f64[0] * 2.0) / (v62 + v128 * v128 + vmuld_n_f64(_Q18.f64[0], _Q18.f64[0]));
            v134 = v63 + _D24 + vmlad_n_f64(-(_Q18.f64[0] * _Q18.f64[0]), 64.0, _Q20.f64[0]);
            v135 = (v63 + _D27 * 2.0) / v134;
            if (v112)
            {
              LOBYTE(v134) = *v112;
              v136 = (double)*(unint64_t *)&v134;
              _D16 = _D16 + v136 * v133;
              v47 = v47 + v136 * v135;
              v110 = v110 + v136;
              v112 += v32;
            }
            else
            {
              _D16 = _D16 + v133;
              v47 = v47 + v135;
            }
          }
          v126 += 40;
          ++v125;
        }
        while (v33 != v125);
        goto LABEL_76;
      }
      v110 = 0.0;
      v112 = BaseAddressOfPlane;
      _D16 = 0.0;
      v47 = 0.0;
LABEL_76:
      if (!v112)
        v110 = (double)(v33 - 7);
      v50 = (unint64_t)(v110 + (double)v50);
      v67 = v67 + _D16;
      v66 = v66 + v47;
    }
    v58 += 2 * v64;
    v57 += 2 * v68;
    v56 += v64;
    v55 += v68;
    v60 += v64;
    v59 += v68;
    v54 += 2 * v64;
    if (BaseAddressOfPlane)
      BaseAddressOfPlane += v65;
    else
      BaseAddressOfPlane = 0;
    v49 = v101;
    v52 += 2 * v68;
  }
  while (v101 != v34);
  free(v140);
  a5 = v150;
  if (!v50)
    goto LABEL_88;
  v137 = v67 / (double)v50;
  v138 = v66 / (double)v50;
  *(double *)(v150 + 8) = v137;
  *(double *)(v150 + 16) = v138;
  v139 = v137 * v138;
LABEL_89:
  *(double *)a5 = v139;
}

uint64_t CMPhotoComputeSSIMForPixelBufferBlockBased(__CVBuffer *a1, __CVBuffer *a2, unsigned int a3, unint64_t a4, size_t a5, double *a6)
{
  __CVBuffer *v11;
  signed int PixelFormatType;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  CVPixelBufferRef *p_pixelBuffer;
  uint64_t v27;
  __CVBuffer *v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __CVBuffer *v39;
  __CVBuffer *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  CVPixelBufferRef v46;
  CVPixelBufferRef pixelBuffer;
  double v48[5];

  v11 = a1;
  v48[3] = *(double *)MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferGetPixelFormatType(a2) != PixelFormatType)
    return FigSignalErrorAt();
  if (PixelFormatType > 1380410944)
  {
    if (PixelFormatType != 1380410945 && PixelFormatType != 1380411457)
    {
      v13 = 1815491698;
LABEL_9:
      if (PixelFormatType != v13)
        return FigSignalErrorAt();
    }
  }
  else if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
  {
    v13 = 1111970369;
    goto LABEL_9;
  }
  if (a6)
  {
    v14 = log2((double)a4);
    if ((unint64_t)exp2(ceil(v14)) == a4)
    {
      v15 = CVPixelBufferLockBaseAddress(v11, 1uLL);
      if ((_DWORD)v15)
        return v15;
      v16 = CVPixelBufferLockBaseAddress(a2, 1uLL);
      if ((_DWORD)v16)
      {
        v27 = v16;
        v28 = v11;
        goto LABEL_43;
      }
      v44 = 0;
      v45 = 0;
      CMPhotoGetPixelBufferCLAP(v11, 0, 0, &v45, &v44);
      v42 = 0;
      v43 = 0;
      CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v43, &v42);
      v41 = v45;
      if (v45 != v43 || (v17 = v44, v44 != v42) || (v18 = v45 / a4, v19 = v44 / a4, a5 < 8 * v45 / a4 * (v44 / a4)))
      {
        v27 = FigSignalErrorAt();
        goto LABEL_42;
      }
      v39 = v11;
      v40 = a2;
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType == 1380411457)
          goto LABEL_23;
        v20 = 1815491698;
      }
      else
      {
        if (PixelFormatType == 1111970369)
          goto LABEL_23;
        v20 = 1380410945;
      }
      if (PixelFormatType != v20)
      {
        if (v44 >= a4)
        {
          v38 = 0;
          if (v18 <= 1)
            v30 = 1;
          else
            v30 = v45 / a4;
          if (v19 <= 1)
            v31 = 1;
          else
            v31 = v44 / a4;
          v35 = v30;
          v36 = v31;
          do
          {
            if (v41 >= a4)
            {
              v32 = 0;
              v33 = 0;
              v34 = v35;
              do
              {
                _computeSSIMForPlane(v39, v40, 0, a3, (uint64_t)v48, (double)v32, (double)(v38 * a4), (double)a4, (double)a4, (double)v32, (double)(v38 * a4), (double)a4, (double)a4);
                a6[v33 + v38 * v18] = v48[0];
                ++v33;
                v32 += a4;
                --v34;
              }
              while (v34);
            }
            ++v38;
          }
          while (v38 != v36);
          v27 = 0;
          v11 = v39;
          a2 = v40;
          goto LABEL_42;
        }
        goto LABEL_41;
      }
LABEL_23:
      bzero(a6, a5);
      memset(v48, 0, 24);
      v46 = 0;
      pixelBuffer = 0;
      if (!_createMonochromeBufferFromRGB(v11, a2, &pixelBuffer, &v46, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24))&& !CVPixelBufferLockBaseAddress(pixelBuffer, 0))
      {
        if (CVPixelBufferLockBaseAddress(v46, 0))
        {
          p_pixelBuffer = &pixelBuffer;
        }
        else
        {
          v21 = 0;
          v37 = v17;
          do
          {
            if (_extractRGBComponentAndCopyIntoMonochromeBuffer(v11, a2, pixelBuffer, v46, v21))
              break;
            if (v17 >= a4)
            {
              v22 = 0;
              do
              {
                if (v41 >= a4)
                {
                  v23 = 0;
                  v24 = 0;
                  v25 = v18;
                  do
                  {
                    _computeSSIMForPlane(pixelBuffer, v46, 0, 0, (uint64_t)v48, (double)v23, (double)(v22 * a4), (double)a4, (double)a4, (double)v23, (double)(v22 * a4), (double)a4, (double)a4);
                    a6[v24 + v22 * v18] = a6[v24 + v22 * v18] + v48[0] / 3.0;
                    ++v24;
                    v23 += a4;
                    --v25;
                  }
                  while (v25);
                }
                ++v22;
              }
              while (v22 != v19);
            }
            ++v21;
            v11 = v39;
            a2 = v40;
            v17 = v37;
          }
          while (v21 != 3);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          p_pixelBuffer = &v46;
        }
        CVPixelBufferUnlockBaseAddress(*p_pixelBuffer, 0);
      }
      if (pixelBuffer)
        CFRelease(pixelBuffer);
      if (v46)
        CFRelease(v46);
LABEL_41:
      v27 = 0;
LABEL_42:
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
      v28 = a2;
LABEL_43:
      CVPixelBufferUnlockBaseAddress(v28, 1uLL);
      return v27;
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompare(void *a1, void *a2, int a3, CFDictionaryRef theDict, double *a5, CGImageRef *a6, __CFDictionary *a7)
{
  uint64_t PixelBufferFromCMPhotoImageType;
  size_t Width;
  size_t Height;
  uint64_t PixelFormatType;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __CVBuffer *v22;
  __CVBuffer *v23;
  double v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  _BOOL4 IsNull;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t CGImageWithPixelBuffer;
  unint64_t v35;
  unint64_t v36;
  CVPixelBufferRef *v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  CVPixelBufferRef *v41;
  unint64_t v42;
  unint64_t v43;
  CVPixelBufferRef *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  CVPixelBufferRef *v49;
  CFMutableArrayRef Mutable;
  uint64_t i;
  uint64_t v52;
  __CVBuffer *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  double v61;
  double v62;
  uint64_t v64;
  uint64_t v65;
  void *value;
  __int16 v67;
  unsigned int v68;
  CVPixelBufferRef v69;
  CVPixelBufferRef v70;
  CVPixelBufferRef v71;
  CVPixelBufferRef pixelBuffer;
  double v73;
  double v74;
  int v75;
  unsigned int v76;
  signed int v77;
  __CVBuffer *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  CGRect v82;

  v81 = *MEMORY[0x1E0C80C00];
  v76 = 8;
  v77 = 8;
  v75 = 2;
  v73 = 2.22507386e-308;
  v74 = 1.79769313e308;
  v71 = 0;
  pixelBuffer = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v67 = 0;
  value = 0;
  if (!a1)
  {
    v52 = FigSignalErrorAt();
    goto LABEL_154;
  }
  if (!a2)
    goto LABEL_35;
  if (theDict)
  {
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("BlockSize"), &v77);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("diffImageType"), &v75);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("OutputPixelFormat"), &v68);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("BlockStride"), &v76);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseMagma"), (_BYTE *)&v67 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseMinMaxForDiffMap"), &v67);
  }
  PixelBufferFromCMPhotoImageType = _getPixelBufferFromCMPhotoImageType(a1, (CFTypeRef *)&pixelBuffer);
  if ((_DWORD)PixelBufferFromCMPhotoImageType)
    goto LABEL_105;
  PixelBufferFromCMPhotoImageType = _getPixelBufferFromCMPhotoImageType(a2, (CFTypeRef *)&v71);
  if ((_DWORD)PixelBufferFromCMPhotoImageType)
    goto LABEL_105;
  if ((Width = CVPixelBufferGetWidth(pixelBuffer),
        Height = CVPixelBufferGetHeight(pixelBuffer),
        PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer),
        Width == CVPixelBufferGetWidth(v71))
    && Height == CVPixelBufferGetHeight(v71)
    && (_DWORD)PixelFormatType == CVPixelBufferGetPixelFormatType(v71)
    && (!a6 || (Width >= Height ? (v21 = Height) : (v21 = Width), v77 >= 2 && v21 > v77)))
  {
    switch(a3)
    {
      case 1:
        v78 = 0;
        v23 = v71;
        v22 = pixelBuffer;
        v24 = *MEMORY[0x1E0C9D628];
        v25 = *(double *)(MEMORY[0x1E0C9D628] + 8);
        v26 = *(double *)(MEMORY[0x1E0C9D628] + 16);
        v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
        v82.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
        v82.origin.y = v25;
        v82.size.width = v26;
        v82.size.height = v27;
        IsNull = CGRectIsNull(v82);
        v29 = 0.0;
        if (IsNull)
          v30 = v24;
        else
          v30 = 0.0;
        if (IsNull)
          v29 = v25;
        if (_computeMinimumBlockPSNRForPixelBuffer(v22, v23, 0, 0, 0, 0, 0, a5, v30, v29, v26, v27, v24, v25, v26, v27, (double *)&v78))
        {
          v33 = 0;
          goto LABEL_147;
        }
        if (!a7
          || (PixelBufferFromCMPhotoImageType = CMPhotoCFDictionarySetDouble(a7, CFSTR("Edges"), *(double *)&v78),
              !(_DWORD)PixelBufferFromCMPhotoImageType))
        {
          if (!a6)
          {
LABEL_131:
            v33 = 0;
LABEL_132:
            if (a3 != 8)
            {
              if (HIBYTE(v67))
              {
                CGImageWithPixelBuffer = CMPhotoApplyMagmaMap(v70, v70);
                if ((_DWORD)CGImageWithPixelBuffer)
                  goto LABEL_148;
              }
            }
            if (a6)
            {
              v60 = v68;
              if (v68)
              {
                if (v60 != CVPixelBufferGetPixelFormatType(v70))
                {
                  v78 = 0;
                  CGImageWithPixelBuffer = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(0, v70, 0, 1, 1, v68, 0, 0, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v61, v62, 0, 0, 1u,
                                             0,
                                             0,
                                             0,
                                             &v78);
                  if ((_DWORD)CGImageWithPixelBuffer)
                    goto LABEL_148;
                  if (v70)
                    CFRelease(v70);
                  v70 = v78;
                }
LABEL_143:
                if (v75 != 4)
                {
                  if (v75 == 2)
                  {
                    v52 = 0;
                    *a6 = v70;
                    v70 = 0;
                    goto LABEL_150;
                  }
                  goto LABEL_147;
                }
                CGImageWithPixelBuffer = CMPhotoCreateCGImageWithPixelBuffer((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v70, 1, a6);
LABEL_148:
                v52 = CGImageWithPixelBuffer;
                goto LABEL_150;
              }
            }
            if (a6)
              goto LABEL_143;
            v52 = 0;
            goto LABEL_150;
          }
          if (Width / v77 <= 1)
            v31 = 1;
          else
            v31 = Width / v77;
          if (Height / v77 <= 1)
            v32 = 1;
          else
            v32 = Height / v77;
          v33 = malloc_type_malloc(8 * v31 * v32, 0x8FA4386FuLL);
          bzero(v33, 8 * v31 * v32);
          if (v33
            && !CMPhotoComputePSNRForPixelBufferBlockBased(pixelBuffer, v71, 0, v77, 8 * v31 * v32, (double *)v33))
          {
            CGImageWithPixelBuffer = _copyAndNormalizeArrayToPixelBuffer(&v70, (uint64_t)v33, 1, v67, PixelFormatType, Width, Height, v31, v32, v77, &v74, &v73);
LABEL_46:
            if ((_DWORD)CGImageWithPixelBuffer)
              goto LABEL_148;
            if (a7)
            {
              CGImageWithPixelBuffer = CMPhotoCFDictionarySetDouble(a7, CFSTR("Min"), v74);
              if ((_DWORD)CGImageWithPixelBuffer)
                goto LABEL_148;
              CGImageWithPixelBuffer = CMPhotoCFDictionarySetDouble(a7, CFSTR("Max"), v73);
              if ((_DWORD)CGImageWithPixelBuffer)
                goto LABEL_148;
            }
            goto LABEL_132;
          }
LABEL_147:
          CGImageWithPixelBuffer = FigSignalErrorAt();
          goto LABEL_148;
        }
        break;
      case 2:
        CMPhotoComputeSSIMForPixelBuffer(pixelBuffer, v71, 0, 0, a5, 0, 0, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24));
        if (!a6)
          goto LABEL_131;
        if (Width / v77 <= 1)
          v35 = 1;
        else
          v35 = Width / v77;
        if (Height / v77 <= 1)
          v36 = 1;
        else
          v36 = Height / v77;
        v33 = malloc_type_malloc(8 * v35 * v36, 0xABD3AA1DuLL);
        bzero(v33, 8 * v35 * v36);
        if (!v33
          || CMPhotoComputeSSIMForPixelBufferBlockBased(pixelBuffer, v71, 0, v77, 8 * v35 * v36, (double *)v33))
        {
          goto LABEL_147;
        }
        CGImageWithPixelBuffer = _copyAndNormalizeArrayToPixelBuffer(&v70, (uint64_t)v33, 2, v67, PixelFormatType, Width, Height, v35, v36, v77, &v74, &v73);
        goto LABEL_46;
      case 5:
        if (a6)
          v37 = &v69;
        else
          v37 = 0;
        if (CMPhotoComputeWPSNRForPixelBuffer(pixelBuffer, v71, (double *)v77, 0, v76, a5, v37, 0, 0))goto LABEL_35;
        if (!a6)
          goto LABEL_131;
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990)
          goto LABEL_35;
        v38 = Height - (v77 - 1);
        if (v38 < 1)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if ((int)v76 > v38)
            v38 = v76;
          v40 = (v38 - 1) / v76 + 1;
          do
            ++v39;
          while (v40 != v39);
        }
        v54 = Width - (v77 - 1);
        if (v54 < 1)
        {
          v55 = 0;
        }
        else
        {
          LODWORD(v55) = 0;
          if ((int)v76 > v54)
            v54 = v76;
          v56 = (v54 - 1) / v76 + 1;
          do
            v55 = (v55 + 1);
          while (v56 != (_DWORD)v55);
        }
        PixelBufferFromCMPhotoImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 5, v67, PixelFormatType, Width, Height, v55, v39, v77, &v74, &v73);
        goto LABEL_126;
      case 6:
        if (a6)
          v41 = &v69;
        else
          v41 = 0;
        if (CMPhotoComputePSNRHVSForPixelBuffer(pixelBuffer, v71, 0, v77, a5, v41))
          goto LABEL_35;
        if (!a6)
          goto LABEL_131;
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990)
          goto LABEL_35;
        if (Width / v77 <= 1)
          v42 = 1;
        else
          v42 = Width / v77;
        v43 = Height / v77;
        if (v43 <= 1)
          v43 = 1;
        PixelBufferFromCMPhotoImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 6, v67, PixelFormatType, Width, Height, v42, v43, v77, &v74, &v73);
        goto LABEL_126;
      case 7:
        if (a6)
          v44 = &v69;
        else
          v44 = 0;
        if (CMPhotoComputeMSEForPixelBuffer(pixelBuffer, v71, v77, 0, v76, a5, v44))
          goto LABEL_35;
        if (!a6)
          goto LABEL_131;
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990)
          goto LABEL_35;
        v45 = Height - (v77 - 1);
        if (v45 < 1)
        {
          v46 = 0;
        }
        else
        {
          v46 = 0;
          if ((int)v76 > v45)
            v45 = v76;
          v47 = (v45 - 1) / v76 + 1;
          do
            ++v46;
          while (v47 != v46);
        }
        v57 = Width - (v77 - 1);
        if (v57 < 1)
        {
          v58 = 0;
        }
        else
        {
          LODWORD(v58) = 0;
          if ((int)v76 > v57)
            v57 = v76;
          v59 = (v57 - 1) / v76 + 1;
          do
            v58 = (v58 + 1);
          while (v59 != (_DWORD)v58);
        }
        PixelBufferFromCMPhotoImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 7, v67, PixelFormatType, Width, Height, v58, v46, v77, &v74, &v73);
LABEL_126:
        if ((_DWORD)PixelBufferFromCMPhotoImageType)
          break;
        if (!a7)
          goto LABEL_131;
        PixelBufferFromCMPhotoImageType = CMPhotoCFDictionarySetDouble(a7, CFSTR("Min"), v74);
        if ((_DWORD)PixelBufferFromCMPhotoImageType)
          break;
        CGImageWithPixelBuffer = CMPhotoCFDictionarySetDouble(a7, CFSTR("Max"), v73);
        v33 = 0;
        if ((_DWORD)CGImageWithPixelBuffer)
          goto LABEL_148;
        goto LABEL_132;
      case 8:
        v64 = 0;
        v65 = 0;
        if (theDict)
        {
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, CFSTR("MonitorDistance"), (char *)&v65 + 4);
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, CFSTR("MonitorWidth"), &v65);
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, CFSTR("monitorResolutionX"), (char *)&v64 + 4);
          CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("HistogramSize"), &v64);
          v18.n128_u32[0] = HIDWORD(v65);
          v19.n128_u32[0] = v65;
          v20.n128_u32[0] = HIDWORD(v64);
          v48 = v64;
        }
        else
        {
          v48 = 0;
          v20.n128_u32[0] = 0;
          v19.n128_u32[0] = 0;
          v18.n128_u32[0] = 0;
        }
        v78 = 0;
        v79 = 0;
        v80 = 0.0;
        if (a6)
          v49 = &v69;
        else
          v49 = 0;
        if (CMPhotoComputeFLIPForPixelBufferWithPooling(pixelBuffer, v71, HIBYTE(v67), v49, &v78, v48, &value, v18, v19, v20))goto LABEL_35;
        if (a5)
          *a5 = *(float *)&v79;
        if (a7)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B378]);
          for (i = 0; i != 20; i += 4)
            FigCFArrayAppendDouble();
          CFDictionaryAddValue(a7, CFSTR("FlipWeightedPercentiles"), Mutable);
          if (Mutable)
            CFRelease(Mutable);
          if ((_DWORD)v64)
            CFDictionaryAddValue(a7, CFSTR("Histogram"), value);
          PixelBufferFromCMPhotoImageType = CMPhotoCFDictionarySetDouble(a7, CFSTR("Min"), *(float *)&v78);
          if ((_DWORD)PixelBufferFromCMPhotoImageType)
            break;
          PixelBufferFromCMPhotoImageType = CMPhotoCFDictionarySetDouble(a7, CFSTR("Max"), v80);
          if ((_DWORD)PixelBufferFromCMPhotoImageType)
            break;
        }
        if (a6)
        {
          v53 = v69;
          v69 = 0;
          v70 = v53;
        }
        goto LABEL_131;
      default:
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    PixelBufferFromCMPhotoImageType = FigSignalErrorAt();
  }
LABEL_105:
  v52 = PixelBufferFromCMPhotoImageType;
  v33 = 0;
LABEL_150:
  if (value)
    CFRelease(value);
  if (v33)
    free(v33);
LABEL_154:
  if (v69)
    CFRelease(v69);
  if (v70)
    CFRelease(v70);
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  if (v71)
    CFRelease(v71);
  return v52;
}

uint64_t _getPixelBufferFromCMPhotoImageType(void *a1, CFTypeRef *a2)
{
  int ImageType;

  if (a1 && a2)
  {
    ImageType = CMPhotoGetImageType(a1);
    if (ImageType == 4)
      return CMPhotoCreatePixelBufferFromCGImage((CGImage *)a1, 0, 0, 64, a2);
    if (ImageType == 2)
    {
      *a2 = CFRetain(a1);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _copyAndNormalizePixelBufferToPixelBuffer(__CVBuffer *a1, CVPixelBufferRef *a2, int a3, int a4, uint64_t a5, size_t a6, size_t a7, unint64_t a8, unint64_t a9, unint64_t a10, double *a11, double *a12)
{
  double v19;
  unint64_t BitDepthForPixelFormat;
  double MaxSNRThatMakesSense;
  uint64_t result;
  float *v23;
  float *v24;
  float *v25;
  size_t v26;
  char *v27;
  size_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  double v35;
  CVPixelBufferRef *v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  float v44;
  float v45;
  float v46;
  size_t BytesPerRowOfPlane;
  int v48;
  int v49;
  size_t v50;
  unint64_t v51;
  CVPixelBufferRef *v52;
  size_t v53;
  char *BaseAddressOfPlane;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMPhotoGetBitDepthForPixelFormat(a5);
  if ((a3 - 1) > 6)
    v19 = 2.22507386e-308;
  else
    v19 = dbl_1A828ACB0[a3 - 1];
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(a5);
  MaxSNRThatMakesSense = _findMaxSNRThatMakesSense(a3, BitDepthForPixelFormat);
  result = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 1919365990, a6, a7, 1, 0, 0, 1, 64, 0, a2);
  if (!(_DWORD)result)
  {
    v48 = a3;
    v49 = a4;
    v50 = a7;
    v51 = a8;
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(*a2, 0);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    v53 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) >> 2;
    v23 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 0);
    v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 1uLL);
    v25 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 2uLL);
    v52 = a2;
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a2, 0);
    if (CVPixelBufferGetHeight(a1))
    {
      v26 = 0;
      v27 = BaseAddressOfPlane;
      do
      {
        if (CVPixelBufferGetWidth(a1))
        {
          v28 = 0;
          do
          {
            v29 = *(float *)&v27[4 * v28];
            v30 = *a12;
            if (*a12 < v29)
              v30 = *(float *)&v27[4 * v28];
            *a12 = v30;
            if (*a11 <= v29)
              v29 = *a11;
            *a11 = v29;
            ++v28;
          }
          while (CVPixelBufferGetWidth(a1) > v28);
        }
        ++v26;
        v27 += 4 * v53;
      }
      while (CVPixelBufferGetHeight(a1) > v26);
    }
    if (!v49)
    {
      v32 = v51;
      v36 = v52;
      v33 = v50;
      v34 = a9;
LABEL_28:
      if (v33)
      {
        v38 = 0;
        v39 = 4 * (BytesPerRowOfPlane >> 2);
        do
        {
          if (v38 / a10 >= v34)
            v40 = v34 - 1;
          else
            v40 = v38 / a10;
          if (a6)
          {
            v41 = 0;
            v42 = &BaseAddressOfPlane[4 * v40 * v53];
            do
            {
              v43 = v41 / a10;
              if (v41 / a10 >= v32)
                v43 = v32 - 1;
              v44 = *(float *)&v42[4 * v43];
              if (v19 >= v44)
                v44 = v19;
              if (MaxSNRThatMakesSense <= v44)
                v44 = MaxSNRThatMakesSense;
              v45 = (v44 - v19) / (MaxSNRThatMakesSense - v19);
              v46 = 1.0 - v45;
              v23[v41] = v46;
              v24[v41] = v46;
              v25[v41++] = v46;
            }
            while (a6 != v41);
          }
          ++v38;
          v25 = (float *)((char *)v25 + v39);
          v24 = (float *)((char *)v24 + v39);
          v23 = (float *)((char *)v23 + v39);
        }
        while (v38 != v33);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(*v36, 0);
      return 0;
    }
    v31 = *a11;
    v33 = v50;
    v32 = v51;
    v34 = a9;
    if (v48 == 7)
    {
      v37 = 4.0;
    }
    else
    {
      if (v48 != 2)
      {
        v35 = fmax(v31, 10.0);
        if (v48 == 1)
          v19 = v35;
        else
          v19 = *a11;
        goto LABEL_27;
      }
      v37 = 0.1;
    }
    v19 = fmax(v31, v37);
LABEL_27:
    v36 = v52;
    MaxSNRThatMakesSense = _limitMaxSNR(v48, *a12);
    goto LABEL_28;
  }
  return result;
}

uint64_t _copyAndNormalizeArrayToPixelBuffer(CVPixelBufferRef *a1, uint64_t a2, int a3, int a4, uint64_t a5, size_t a6, size_t a7, unint64_t a8, unint64_t a9, unint64_t a10, double *a11, double *a12)
{
  double v19;
  unint64_t BitDepthForPixelFormat;
  double MaxSNRThatMakesSense;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  float *BaseAddressOfPlane;
  float *v32;
  float *v33;
  size_t BytesPerRowOfPlane;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float v42;
  float v43;
  float v44;

  if (!a1)
    return FigSignalErrorAt();
  CMPhotoGetBitDepthForPixelFormat(a5);
  v19 = (a3 - 1) > 6 ? 2.22507386e-308 : dbl_1A828ACB0[a3 - 1];
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(a5);
  MaxSNRThatMakesSense = _findMaxSNRThatMakesSense(a3, BitDepthForPixelFormat);
  if (CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 1919365990, a6, a7, 1, 0, 0, 1, 64, 0, a1))return FigSignalErrorAt();
  if (a7)
  {
    v22 = 0;
    do
    {
      if (a6)
      {
        v23 = 0;
        v24 = v22 / a10;
        if (v22 / a10 >= a9)
          v24 = a9 - 1;
        v25 = v24 * a8;
        do
        {
          v26 = v23 / a10;
          if (v23 / a10 >= a8)
            v26 = a8 - 1;
          v27 = v26 + v25;
          v28 = *(double *)(a2 + 8 * v27);
          v29 = *a12;
          if (v28 > *a12)
            v29 = *(double *)(a2 + 8 * v27);
          *a12 = v29;
          if (v28 >= *a11)
            v28 = *a11;
          *a11 = v28;
          ++v23;
        }
        while (a6 != v23);
      }
      ++v22;
    }
    while (v22 != a7);
  }
  if (a4)
  {
    v19 = *a11;
    switch(a3)
    {
      case 7:
        v30 = 4.0;
        break;
      case 2:
        v30 = 0.1;
        break;
      case 1:
        v30 = 10.0;
        break;
      default:
LABEL_28:
        MaxSNRThatMakesSense = _limitMaxSNR(a3, *a12);
        goto LABEL_29;
    }
    v19 = fmax(v19, v30);
    goto LABEL_28;
  }
LABEL_29:
  CVPixelBufferLockBaseAddress(*a1, 0);
  BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 0);
  v32 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 1uLL);
  v33 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 2uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a1, 0);
  v35 = CVPixelBufferGetBytesPerRowOfPlane(*a1, 1uLL);
  v36 = CVPixelBufferGetBytesPerRowOfPlane(*a1, 2uLL);
  if (a7)
  {
    v37 = 0;
    do
    {
      if (a6)
      {
        v38 = 0;
        v39 = v37 / a10;
        if (v37 / a10 >= a9)
          v39 = a9 - 1;
        v40 = v39 * a8;
        do
        {
          v41 = v38 / a10;
          if (v38 / a10 >= a8)
            v41 = a8 - 1;
          v42 = *(double *)(a2 + 8 * (v41 + v40));
          if (v19 >= v42)
            v42 = v19;
          if (MaxSNRThatMakesSense <= v42)
            v42 = MaxSNRThatMakesSense;
          v43 = (v42 - v19) / (MaxSNRThatMakesSense - v19);
          v44 = 1.0 - v43;
          BaseAddressOfPlane[v38] = v44;
          v32[v38] = v44;
          v33[v38++] = v44;
        }
        while (a6 != v38);
      }
      BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
      v32 = (float *)((char *)v32 + v35);
      v33 = (float *)((char *)v33 + v36);
      ++v37;
    }
    while (v37 != a7);
  }
  CVPixelBufferUnlockBaseAddress(*a1, 0);
  return 0;
}

CFStringRef CMPhotoCompareMethodToStringCopy(unsigned int a1)
{
  const char *v1;

  if (a1 > 8)
    v1 = "Unrecognized";
  else
    v1 = off_1E53F51E8[a1];
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, 0x8000100u);
}

__CFDictionary *CMPhotoCompareCopySupportedMetricList()
{
  __CFDictionary *Mutable;
  uint64_t v1;
  int v2;
  CFNumberRef Int;
  CFStringRef v4;
  CFStringRef v5;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = 0;
    while (1)
    {
      v2 = dword_1A828AC98[v1];
      Int = CMPhotoCFNumberCreateInt(v2);
      v4 = CMPhotoCompareMethodToStringCopy(v2);
      v5 = v4;
      if (Int && v4 != 0)
        break;
      if (Int)
        goto LABEL_13;
      if (v4)
        goto LABEL_10;
LABEL_11:
      if (++v1 == 6)
        return Mutable;
    }
    CFDictionarySetValue(Mutable, Int, v4);
LABEL_13:
    CFRelease(Int);
    if (!v5)
      goto LABEL_11;
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
  return Mutable;
}

uint64x2_t _computeCropRectForPixelBuffer@<Q0>(__CVBuffer *a1@<X0>, uint64x2_t *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  float64_t PixelBufferCLAPAsRect;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  uint64x2_t result;
  float64_t v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  CGRect v26;

  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  v20 = v12;
  v21 = PixelBufferCLAPAsRect;
  v24.f64[0] = PixelBufferCLAPAsRect;
  v24.f64[1] = v12;
  v22 = v14;
  v23 = v13;
  v25.f64[0] = v13;
  v25.f64[1] = v14;
  v26.origin.x = a3;
  v26.origin.y = a4;
  v26.size.width = a5;
  v26.size.height = a6;
  if (CGRectIsNull(v26))
  {
    v15.f64[0] = v21;
    v15.f64[1] = v20;
    v16.f64[0] = v23;
    v16.f64[1] = v22;
  }
  else
  {
    if (a5 >= v23 - a3)
      v17 = v23 - a3;
    else
      v17 = a5;
    if (a6 >= v22 - a4)
      v18 = v22 - a4;
    else
      v18 = a6;
    CMPhotoApplyCropRectToRect(v24.f64, a3, a4, v17, v18);
    v15 = v24;
    v16 = v25;
  }
  result = vcvtq_u64_f64(vrndaq_f64(v15));
  *a2 = result;
  a2[1] = vcvtq_u64_f64(vrndaq_f64(v16));
  return result;
}

uint64_t _computePSNRForPlane(__CVBuffer *a1, unint64_t *a2, __CVBuffer *a3, _DWORD *a4, unsigned int a5, double *a6, double *a7)
{
  double *v8;
  double v9;
  uint64_t PixelFormatType;
  uint64_t BytesPerPixelForPixelFormat;
  char v16;
  int v17;
  size_t v18;
  _BOOL8 v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  double v23;
  size_t BytesPerRowOfPlane;
  size_t v25;
  char *BaseAddressOfPlane;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  double v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  double *v57;
  double *v58;
  unint64_t BitDepthForPixelFormat;
  __int16 v61;

  v8 = a6;
  v9 = 0.0;
  if (a5 > 2)
  {
    result = 4294950306;
    v23 = 0.0;
    if (a6)
      goto LABEL_73;
    goto LABEL_74;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
  v16 = 0;
  v58 = v8;
  if ((int)PixelFormatType <= 1734505011)
  {
    if ((_DWORD)PixelFormatType == 1650943796)
      goto LABEL_12;
    v17 = 1651847472;
  }
  else
  {
    if ((_DWORD)PixelFormatType == 1734505012 || (_DWORD)PixelFormatType == 1735549492)
      goto LABEL_12;
    v17 = 1919379252;
  }
  if ((_DWORD)PixelFormatType != v17)
  {
    if (BitDepthForPixelFormat <= 8)
      v16 = 0;
    else
      v16 = 16 - BitDepthForPixelFormat;
  }
LABEL_12:
  v18 = a5 != 0;
  v19 = a5 > 1;
  v61 = 0;
  result = CMPhotoPixelFormatIsSubsampled(PixelFormatType, &v61, (_BYTE *)&v61 + 1, 0, 0);
  if ((_DWORD)result || (result = 4294950301, !BytesPerPixelForPixelFormat) || !BitDepthForPixelFormat)
  {
LABEL_22:
    v23 = 0.0;
    v8 = v58;
    if (!v58)
      goto LABEL_74;
    goto LABEL_73;
  }
  if (a5)
  {
    if ((_BYTE)v61)
    {
      v21 = *a2;
      if (((*a2 | *a4) & 1) != 0)
      {
LABEL_21:
        result = 4294950306;
        goto LABEL_22;
      }
      a2[2] = (a2[2] + 1) >> 1;
      *a2 = (v21 + 1) >> 1;
      *(_QWORD *)a4 = (unint64_t)(*(_QWORD *)a4 + 1) >> 1;
    }
    if (HIBYTE(v61))
    {
      v22 = a2[1];
      if (((v22 | a4[2]) & 1) != 0)
        goto LABEL_21;
      a2[3] = (a2[3] + 1) >> 1;
      a2[1] = (v22 + 1) >> 1;
      *((_QWORD *)a4 + 1) = (unint64_t)(*((_QWORD *)a4 + 1) + 1) >> 1;
    }
  }
  v57 = a7;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a5 != 0);
  v25 = CVPixelBufferGetBytesPerRowOfPlane(a3, v18);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v18);
  v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, v18);
  v28 = a2[3];
  if (v28)
  {
    v29 = 0;
    v30 = &v27[*((_QWORD *)a4 + 1) * v25 + ((*(_QWORD *)a4 << v18) + v19) * BytesPerPixelForPixelFormat];
    v31 = &BaseAddressOfPlane[a2[1] * BytesPerRowOfPlane + ((*a2 << v18) + v19) * BytesPerPixelForPixelFormat];
    v32 = a2[2];
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
    v8 = v58;
    while (!v32)
    {
LABEL_52:
      v31 += BytesPerRowOfPlane;
      v30 += v25;
      if (++v29 == v28)
        goto LABEL_55;
    }
    v36 = 0;
    while (1)
    {
      v37 = v36 << v18;
      if (BytesPerPixelForPixelFormat == 1)
        break;
      if ((int)PixelFormatType <= 1651926375)
      {
        if ((_DWORD)PixelFormatType != 1278226536
          && (_DWORD)PixelFormatType != 1380411457
          && (_DWORD)PixelFormatType != 1647719528)
        {
LABEL_51:
          v38 = *(unsigned __int16 *)&v31[2 * v37] >> v16;
          v39 = *(unsigned __int16 *)&v30[2 * v37] >> v16;
          goto LABEL_31;
        }
      }
      else if ((int)PixelFormatType > 1751411058)
      {
        if ((_DWORD)PixelFormatType != 1751527984 && (_DWORD)PixelFormatType != 1751411059)
          goto LABEL_51;
      }
      else if ((_DWORD)PixelFormatType != 1651926376 && (_DWORD)PixelFormatType != 1751410032)
      {
        goto LABEL_51;
      }
      _H1 = *(_WORD *)&v31[2 * v37];
      _H2 = *(_WORD *)&v30[2 * v37];
      __asm
      {
        FCVT            S2, H2
        FCVT            S1, H1
      }
      _S1 = _S1 - _S2;
      __asm
      {
        FCVT            H1, S1
        FCVT            D1, H1
      }
LABEL_44:
      v50 = _D1 * _D1;
      if (!v29 || v28 - 1 == v29 || !v36 || v32 - 1 == v36)
      {
        v35 = v35 + v50;
        v34 = v34 + 1.0;
      }
      v33 = v33 + v50;
      if (v32 == ++v36)
        goto LABEL_52;
    }
    v38 = v31[v37];
    v39 = v30[v37];
LABEL_31:
    _D1 = (double)(v38 - v39);
    goto LABEL_44;
  }
  v35 = 0.0;
  v34 = 0.0;
  v33 = 0.0;
  v8 = v58;
LABEL_55:
  v51 = (double)~(-1 << BitDepthForPixelFormat);
  if ((int)PixelFormatType <= 1651926375)
  {
    a7 = v57;
    if ((_DWORD)PixelFormatType == 1278226536 || (_DWORD)PixelFormatType == 1380411457)
      goto LABEL_65;
    v52 = 1647719528;
    goto LABEL_64;
  }
  a7 = v57;
  if ((int)PixelFormatType > 1751411058)
  {
    if ((_DWORD)PixelFormatType == 1751411059)
      goto LABEL_65;
    v52 = 1751527984;
LABEL_64:
    if ((_DWORD)PixelFormatType != v52)
      goto LABEL_66;
    goto LABEL_65;
  }
  if ((_DWORD)PixelFormatType != 1651926376)
  {
    v52 = 1751410032;
    goto LABEL_64;
  }
LABEL_65:
  v51 = 1.0;
LABEL_66:
  if (v33 == 0.0)
  {
    v9 = INFINITY;
  }
  else
  {
    v53 = (double)(a2[2] * v28);
    v54 = log10(v51);
    v9 = log10(v33 / v53) * -10.0 + v54 * 20.0;
  }
  if (v35 != 0.0)
  {
    v55 = log10(v51);
    v56 = log10(v35 / v34);
    result = 0;
    v23 = v56 * -10.0 + v55 * 20.0;
    if (!v8)
      goto LABEL_74;
    goto LABEL_73;
  }
  result = 0;
  v23 = INFINITY;
  if (v8)
LABEL_73:
    *v8 = v9;
LABEL_74:
  if (a7)
    *a7 = v23;
  return result;
}

uint64_t _createMonochromeBufferFromRGB(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef *a3, CVPixelBufferRef *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  unint64_t v20;
  unint64_t v21;
  size_t Width;
  size_t Height;
  uint64_t v25;
  signed int PixelFormatType;
  uint64_t PixelBuffer;
  uint64_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  uint64x2_t v33;
  __CVBuffer *v34;
  char *BaseAddress;
  char *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  uint64x2_t v42;
  __int128 v43;
  uint64x2_t v44;
  __int128 v45;

  v44 = 0u;
  v45 = 0u;
  _computeCropRectForPixelBuffer(a1, &v44, a5, a6, a7, a8);
  v42 = 0u;
  v43 = 0u;
  _computeCropRectForPixelBuffer(a2, &v42, a9, a10, a11, a12);
  v21 = *((_QWORD *)&v45 + 1);
  v20 = v45;
  if ((_QWORD)v45 != (_QWORD)v43 || *((_QWORD *)&v45 + 1) != *((_QWORD *)&v43 + 1))
    goto LABEL_15;
  Width = CVPixelBufferGetWidth(a1);
  if (Width != CVPixelBufferGetWidth(a2))
    goto LABEL_15;
  Height = CVPixelBufferGetHeight(a1);
  if (Height != CVPixelBufferGetHeight(a2))
    goto LABEL_15;
  v25 = 1278226488;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457)
    {
      v25 = 1278226536;
      goto LABEL_22;
    }
    if (PixelFormatType == 1815491698)
    {
      v25 = 1278226742;
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (PixelFormatType != 1111970369)
  {
    if (PixelFormatType == 1380410945)
    {
      v25 = 1278226534;
      goto LABEL_22;
    }
LABEL_15:
    PixelBuffer = FigSignalErrorAt();
LABEL_16:
    v28 = PixelBuffer;
    goto LABEL_17;
  }
LABEL_22:
  if (CVPixelBufferGetWidth(a1) < 9)
    v29 = 8;
  else
    v29 = CVPixelBufferGetWidth(a1);
  if (CVPixelBufferGetHeight(a1) < 9)
    v30 = 8;
  else
    v30 = CVPixelBufferGetHeight(a1);
  PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v25, v29, v30, 1, 0, 0, 1, 0, 0, a3);
  if ((_DWORD)PixelBuffer)
    goto LABEL_16;
  v31 = CVPixelBufferGetWidth(a1) < 9 ? 8 : CVPixelBufferGetWidth(a1);
  v32 = CVPixelBufferGetHeight(a1) < 9 ? 8 : CVPixelBufferGetHeight(a1);
  PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v25, v31, v32, 1, 0, 0, 1, 0, 0, a4);
  if ((_DWORD)PixelBuffer)
    goto LABEL_16;
  if (CVPixelBufferGetWidth(a1) < 8 || CVPixelBufferGetHeight(a1) <= 7)
  {
    if (v20 <= 8)
      v20 = 8;
    if (v21 <= 8)
      v21 = 8;
  }
  v33 = v44;
  CMPhotoSetPixelBufferCLAP(*a3, v44.u64[0], v44.u64[1], v20, v21, 0, 1);
  CMPhotoSetPixelBufferCLAP(*a4, v33.u64[0], v33.u64[1], v20, v21, 0, 1);
  if (CVPixelBufferGetWidth(a1) >= 8 && CVPixelBufferGetHeight(a1) > 7)
    return 0;
  PixelBuffer = CVPixelBufferLockBaseAddress(*a3, 0);
  if ((_DWORD)PixelBuffer)
    goto LABEL_16;
  v28 = CVPixelBufferLockBaseAddress(*a4, 0);
  v34 = *a3;
  if (!(_DWORD)v28)
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(v34);
    v36 = (char *)CVPixelBufferGetBaseAddress(*a4);
    if (CVPixelBufferGetWidth(a1) < 9)
      v37 = 8;
    else
      v37 = CVPixelBufferGetWidth(a1);
    v38 = 0;
    v39 = CMPhotoGetBytesPerPixelForPixelFormat(v25) * v37;
    while (1)
    {
      v40 = CVPixelBufferGetHeight(a1) < 9 ? 8 : CVPixelBufferGetHeight(a1);
      if (v40 <= v38)
        break;
      bzero(BaseAddress, v39);
      bzero(v36, v39);
      BaseAddress += CVPixelBufferGetBytesPerRow(*a3);
      v36 += CVPixelBufferGetBytesPerRow(*a4);
      ++v38;
    }
    CVPixelBufferUnlockBaseAddress(*a3, 0);
    CVPixelBufferUnlockBaseAddress(*a4, 0);
    return 0;
  }
  CVPixelBufferUnlockBaseAddress(v34, 0);
LABEL_17:
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  if (*a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  return v28;
}

uint64_t _extractRGBComponentAndCopyIntoMonochromeBuffer(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5)
{
  OSType PixelFormatType;
  OSType v10;
  signed int v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  size_t v16;
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  size_t v28;
  size_t v29;
  char *v30;
  char *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  _BYTE *v43;
  size_t v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  char *BaseAddress;
  char *v49;
  size_t v50;
  size_t v51;
  char *v52;
  char *v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  size_t v73;
  size_t BytesPerRow;
  uint64_t v75;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2))
  {
    v10 = CVPixelBufferGetPixelFormatType(a3);
    if (v10 == CVPixelBufferGetPixelFormatType(a4))
    {
      v11 = CVPixelBufferGetPixelFormatType(a1);
      if (v11 > 1380411456)
      {
        if (v11 == 1815491698)
        {
          if (CVPixelBufferGetPixelFormatType(a3) == 1278226742)
          {
            BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
            v47 = CVPixelBufferGetBytesPerRow(a2);
            BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
            v49 = (char *)CVPixelBufferGetBaseAddress(a2);
            v50 = CVPixelBufferGetBytesPerRow(a3);
            v51 = CVPixelBufferGetBytesPerRow(a4);
            v52 = (char *)CVPixelBufferGetBaseAddress(a3);
            v53 = (char *)CVPixelBufferGetBaseAddress(a4);
            if (CVPixelBufferGetHeight(a1))
            {
              v54 = 0;
              v55 = BytesPerRow >> 1;
              v68 = 2 * (v50 >> 1);
              v75 = 2 * (v51 >> 1);
              v56 = 2 * v55;
              v64 = 2 * a5;
              v57 = 2 * (v47 >> 1);
              do
              {
                if (CVPixelBufferGetWidth(a2))
                {
                  v58 = 0;
                  v59 = v64;
                  do
                  {
                    *(_WORD *)&v52[2 * v58] = *(_WORD *)&BaseAddress[v59];
                    *(_WORD *)&v53[2 * v58++] = *(_WORD *)&v49[v59];
                    v59 += 8;
                  }
                  while (CVPixelBufferGetWidth(a2) > v58);
                }
                ++v54;
                v53 += v75;
                v52 += v68;
                BaseAddress += v56;
                v49 += v57;
              }
              while (CVPixelBufferGetHeight(a1) > v54);
            }
            return 0;
          }
        }
        else if (v11 == 1380411457 && CVPixelBufferGetPixelFormatType(a3) == 1278226536)
        {
          v71 = CVPixelBufferGetBytesPerRow(a1);
          v25 = CVPixelBufferGetBytesPerRow(a2);
          v26 = (char *)CVPixelBufferGetBaseAddress(a1);
          v27 = (char *)CVPixelBufferGetBaseAddress(a2);
          v28 = CVPixelBufferGetBytesPerRow(a3);
          v29 = CVPixelBufferGetBytesPerRow(a4);
          v30 = (char *)CVPixelBufferGetBaseAddress(a3);
          v31 = (char *)CVPixelBufferGetBaseAddress(a4);
          if (CVPixelBufferGetHeight(a1))
          {
            v32 = 0;
            v33 = v71 >> 1;
            v66 = 2 * (v28 >> 1);
            v72 = 2 * (v29 >> 1);
            v34 = 2 * v33;
            v62 = 2 * a5;
            v35 = 2 * (v25 >> 1);
            do
            {
              if (CVPixelBufferGetWidth(a2))
              {
                v36 = 0;
                v37 = v62;
                do
                {
                  *(_WORD *)&v30[2 * v36] = *(_WORD *)&v26[v37];
                  *(_WORD *)&v31[2 * v36++] = *(_WORD *)&v27[v37];
                  v37 += 8;
                }
                while (CVPixelBufferGetWidth(a2) > v36);
              }
              ++v32;
              v31 += v72;
              v30 += v66;
              v26 += v34;
              v27 += v35;
            }
            while (CVPixelBufferGetHeight(a1) > v32);
          }
          return 0;
        }
      }
      else if (v11 == 1111970369)
      {
        if (CVPixelBufferGetPixelFormatType(a3) == 1278226488)
        {
          v73 = CVPixelBufferGetBytesPerRow(a1);
          v67 = CVPixelBufferGetBytesPerRow(a2);
          v38 = CVPixelBufferGetBaseAddress(a1);
          v39 = CVPixelBufferGetBaseAddress(a2);
          v40 = CVPixelBufferGetBytesPerRow(a3);
          v41 = CVPixelBufferGetBytesPerRow(a4);
          v42 = CVPixelBufferGetBaseAddress(a3);
          v43 = CVPixelBufferGetBaseAddress(a4);
          if (CVPixelBufferGetHeight(a1))
          {
            v44 = 0;
            v63 = a5;
            do
            {
              if (CVPixelBufferGetWidth(a2))
              {
                v45 = 0;
                v46 = v63;
                do
                {
                  v42[v45] = v38[v46];
                  v43[v45++] = v39[v46];
                  v46 += 4;
                }
                while (CVPixelBufferGetWidth(a2) > v45);
              }
              v38 += v73;
              v39 += v67;
              v42 += v40;
              v43 += v41;
              ++v44;
            }
            while (CVPixelBufferGetHeight(a1) > v44);
          }
          return 0;
        }
      }
      else if (v11 == 1380410945 && CVPixelBufferGetPixelFormatType(a3) == 1278226534)
      {
        v69 = CVPixelBufferGetBytesPerRow(a1);
        v12 = CVPixelBufferGetBytesPerRow(a2);
        v13 = (char *)CVPixelBufferGetBaseAddress(a1);
        v14 = (char *)CVPixelBufferGetBaseAddress(a2);
        v15 = CVPixelBufferGetBytesPerRow(a3);
        v16 = CVPixelBufferGetBytesPerRow(a4);
        v17 = (char *)CVPixelBufferGetBaseAddress(a3);
        v18 = (char *)CVPixelBufferGetBaseAddress(a4);
        if (CVPixelBufferGetHeight(a1))
        {
          v19 = 0;
          v20 = v69 >> 2;
          v65 = 4 * (v15 >> 2);
          v70 = 4 * (v16 >> 2);
          v21 = 4 * v20;
          v61 = 4 * a5;
          v22 = 4 * (v12 >> 2);
          do
          {
            if (CVPixelBufferGetWidth(a2))
            {
              v23 = 0;
              v24 = v61;
              do
              {
                *(_DWORD *)&v17[4 * v23] = *(_DWORD *)&v13[v24];
                *(_DWORD *)&v18[4 * v23++] = *(_DWORD *)&v14[v24];
                v24 += 16;
              }
              while (CVPixelBufferGetWidth(a2) > v23);
            }
            ++v19;
            v18 += v70;
            v17 += v65;
            v13 += v21;
            v14 += v22;
          }
          while (CVPixelBufferGetHeight(a1) > v19);
        }
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

double _findMaxSNRThatMakesSense(int a1, unint64_t a2)
{
  double result;
  double v3;

  result = 1.79769313e308;
  switch(a1)
  {
    case 1:
    case 5:
      if (a2 < 9)
      {
        v3 = 50.0;
        goto LABEL_9;
      }
      if (a2 < 0xB)
        result = 52.5;
      else
        result = dbl_1A828AC70[a2 > 0xC];
      break;
    case 2:
      result = 0.998;
      break;
    case 6:
      v3 = 80.0;
      goto LABEL_9;
    case 7:
      v3 = 2048.0;
LABEL_9:
      result = v3;
      break;
    default:
      return result;
  }
  return result;
}

double _limitMaxSNR(int a1, double result)
{
  uint64_t v2;
  double v3;

  switch(a1)
  {
    case 1:
    case 5:
      v2 = 0x4054000000000000;
      goto LABEL_5;
    case 2:
      v3 = 1.0;
      goto LABEL_6;
    case 6:
      v2 = 0x4059000000000000;
LABEL_5:
      v3 = *(double *)&v2;
LABEL_6:
      result = fmin(result, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VideoQualityControllerClass_create()
{
  return 0;
}

uint64_t VideoQualityControllerClass_setTileProperties()
{
  return 0;
}

uint64_t CMPhotoVTPixelTransferWorkaround(__CVBuffer *a1, uint64_t a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, CVPixelBufferRef *a15)
{
  CVPixelBufferRef *v29;
  signed int PixelFormatType;
  __CVBuffer *v32;
  uint64_t v33;
  __CVBuffer *v34;
  unsigned __int16 v35;
  __CVBuffer *v36;
  size_t v37;
  char *v38;
  size_t v39;
  char *v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  size_t v45;
  char *v46;
  int v47;
  const __CFDictionary *v48;
  const __CFDictionary *v49;
  int v50;
  __CVBuffer *v51;
  size_t Width;
  size_t Height;
  size_t v54;
  char *v55;
  _BYTE *v56;
  size_t v57;
  uint64_t m;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  __int16 v64;
  int v65;
  __CVBuffer *v66;
  __CVBuffer *v67;
  __CVBuffer *v68;
  size_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t BytesPerPixelForPixelFormat;
  size_t v73;
  unint64_t v74;
  size_t v75;
  size_t v76;
  size_t v77;
  float *v78;
  float *v79;
  float *v80;
  char *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  char *v86;
  __CVBuffer *v87;
  uint64_t v88;
  uint64_t v89;
  __CVBuffer *v90;
  size_t v91;
  char *v92;
  char *v93;
  size_t v94;
  size_t v95;
  uint64_t v96;
  char v97;
  size_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  char v104;
  __CVBuffer *v105;
  __CVBuffer *v106;
  __CVBuffer *v107;
  int v108;
  int v109;
  int v110;
  __CVBuffer *v111;
  __CVBuffer *v112;
  __CVBuffer *v113;
  uint64_t v114;
  uint64_t v115;
  __CVBuffer *v116;
  uint64_t v117;
  size_t BytesPerRowOfPlane;
  size_t v119;
  char *BaseAddressOfPlane;
  char *v121;
  size_t v122;
  size_t v123;
  char *v124;
  char *v125;
  size_t v126;
  uint64_t v127;
  size_t v128;
  char *v129;
  size_t v130;
  char *v131;
  unsigned int v132;
  size_t v137;
  size_t v138;
  size_t i;
  char *v140;
  char *v141;
  float v143;
  __CVBuffer *v145;
  __CVBuffer *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 BitDepthForPixelFormat;
  unsigned __int8 v150;
  int v151;
  int v152;
  size_t v153;
  char *v154;
  char *v155;
  size_t v156;
  size_t v157;
  size_t v158;
  size_t v159;
  char *v160;
  size_t v161;
  char *v162;
  char *v163;
  size_t v164;
  size_t v165;
  char *v166;
  char *v167;
  size_t v168;
  char *v169;
  uint64_t v170;
  size_t v171;
  char *v172;
  size_t v173;
  __int16 *v174;
  size_t v175;
  size_t v176;
  __int16 *v177;
  char *v178;
  size_t v203;
  size_t v204;
  uint64_t v205;
  int v206;
  size_t v207;
  char *v208;
  char *v209;
  size_t v210;
  size_t v211;
  size_t v212;
  size_t v213;
  char *v214;
  size_t v215;
  char *v216;
  char *v217;
  int v218;
  int v219;
  int v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  int v235;
  int v236;
  uint64_t v237;
  void *v238;
  void *v239;
  int v240;
  int v241;
  size_t v242;
  char *v243;
  size_t v244;
  char *v245;
  size_t v246;
  size_t v247;
  size_t v248;
  char *v249;
  _BYTE *v250;
  size_t v251;
  _BYTE *v252;
  char *v253;
  char v254;
  __CVBuffer *v255;
  __CVBuffer *v256;
  __CVBuffer *v257;
  uint64_t v258;
  uint64_t v259;
  __CVBuffer *v260;
  int v261;
  size_t v262;
  char *v263;
  size_t v264;
  char *v265;
  size_t v266;
  uint64_t v267;
  size_t v268;
  __int16 *v269;
  _WORD *v270;
  _WORD *v271;
  __int16 *v272;
  size_t i2;
  __int16 v274;
  const __CFDictionary *v275;
  const __CFDictionary *v276;
  int v277;
  size_t v278;
  size_t v279;
  size_t v280;
  char *v281;
  char *v282;
  size_t v283;
  uint64_t n;
  size_t v285;
  uint64_t v286;
  char *v287;
  int v288;
  uint64_t v289;
  unsigned int v290;
  char *v291;
  size_t v292;
  size_t v293;
  char *v294;
  _BYTE *v295;
  size_t v296;
  size_t v297;
  char *v298;
  char *v299;
  unsigned int v301;
  size_t v302;
  uint64_t v303;
  size_t v304;
  char *v305;
  size_t v306;
  char *v307;
  unsigned int v308;
  size_t v309;
  size_t v310;
  size_t i1;
  char *v312;
  uint64_t v314;
  __CVBuffer *v315;
  CVPixelBufferRef *v316;
  __CVBuffer *v317;
  uint64_t v318;
  size_t ii;
  size_t v320;
  float *v321;
  size_t v322;
  char *v323;
  size_t v324;
  uint64_t v325;
  size_t v326;
  char *v327;
  float *v328;
  size_t v329;
  char *jj;
  unsigned int v331;
  float v332;
  __CVBuffer *v333;
  CVPixelBufferLockFlags v334;
  __CVBuffer *v335;
  size_t v336;
  char *v337;
  char *v338;
  size_t v339;
  size_t v340;
  size_t v341;
  size_t v342;
  char *v343;
  size_t v344;
  char *v345;
  char *v346;
  size_t v347;
  uint64_t v348;
  size_t v349;
  float *v350;
  size_t v351;
  char *v352;
  size_t v353;
  uint64_t v354;
  size_t v355;
  char *v356;
  char *v357;
  float *v358;
  size_t mm;
  unsigned int v360;
  float v361;
  __CVBuffer *v362;
  __CVBuffer *v363;
  uint64_t v364;
  size_t v365;
  uint64_t v366;
  char *v367;
  size_t v368;
  __CVBuffer *v369;
  CVPixelBufferLockFlags v370;
  uint64_t v371;
  uint64_t v372;
  size_t j;
  size_t v374;
  float *v375;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v378;
  uint64_t v379;
  size_t v380;
  char *v381;
  float *v382;
  size_t v383;
  char *k;
  unsigned int v385;
  float v386;
  size_t v387;
  char *v388;
  size_t v389;
  char *v390;
  size_t v391;
  uint64_t v392;
  size_t v393;
  char *v394;
  size_t v395;
  char *v396;
  uint64_t v397;
  size_t v398;
  char *v399;
  size_t v400;
  char *v401;
  size_t v402;
  uint64_t v403;
  size_t v404;
  char *v405;
  size_t v406;
  char *v407;
  size_t v408;
  char *v409;
  size_t v410;
  char *v411;
  size_t v412;
  uint64_t v413;
  size_t v414;
  char *v415;
  size_t v416;
  char *v417;
  __int16 v418;
  size_t v419;
  size_t v420;
  char *v421;
  char *v422;
  size_t v423;
  size_t v424;
  _BYTE *v425;
  char *v426;
  float v427;
  size_t v428;
  size_t v429;
  size_t v430;
  size_t v431;
  size_t v438;
  size_t v439;
  size_t v440;
  char *v441;
  char *v450;
  int v453;
  size_t v457;
  char *v458;
  size_t v459;
  char *v460;
  size_t v461;
  uint64_t v462;
  size_t v463;
  char *v464;
  size_t v465;
  char *v466;
  __int16 v467;
  __CVBuffer *v468;
  CVPixelBufferLockFlags v469;
  size_t v470;
  size_t v471;
  char *v472;
  char *v473;
  size_t v474;
  size_t v475;
  char *v476;
  char *v477;
  float v478;
  size_t v479;
  uint64_t v480;
  size_t v481;
  char *v482;
  size_t v483;
  char *v484;
  __int16 v485;
  size_t v492;
  size_t v493;
  size_t kk;
  char *v495;
  char *v498;
  int v506;
  __int16 v508;
  size_t v512;
  uint64_t v513;
  size_t v514;
  float *v515;
  size_t v516;
  char *v517;
  size_t v518;
  uint64_t v519;
  size_t v520;
  char *v521;
  char *v522;
  float *v523;
  size_t nn;
  unsigned int v525;
  float v526;
  CVPixelBufferRef *v527;
  size_t v528;
  size_t v529;
  char *v530;
  char *v531;
  size_t v532;
  char *v533;
  size_t v534;
  uint64_t v535;
  uint64_t v536;
  size_t v537;
  int v538;
  char v539;
  uint64_t v540;
  int v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  int v546;
  int v547;
  uint64_t v549;
  signed int v550;
  float v556;
  float v558;
  uint64_t v561;
  float v566;
  float v568;
  float v574;
  float v575;
  float v577;
  size_t v589;
  size_t v590;
  char *v591;
  unsigned int v592;
  size_t v593;
  char *v594;
  uint64_t v595;
  size_t v596;
  char *v597;
  size_t v598;
  char *v599;
  char *v607;
  char *v609;
  uint64_t v610;
  size_t v611;
  size_t v612;
  _WORD *v613;
  char *v614;
  void *v664;
  CVPixelBufferRef *v665;
  void *v666;
  int v667;
  int HeightOfPlane;
  unsigned int v669;
  int v670;
  unint64_t v671;
  size_t v672;
  int v673;
  unsigned int v674;
  unsigned int v675;
  size_t v676;
  char *v677;
  int WidthOfPlane;
  int v679;
  unsigned int v680;
  uint64_t v681;
  size_t v682;
  int v683;
  int v684;
  int v685;
  char *v686;
  _WORD *v687;
  __CVBuffer *pixelBuffer;
  int pixelBuffera;
  __int16 v690[3];
  __int16 v691[3];
  __int16 v692[3];
  __int16 v693;
  __int16 v694;
  __int16 v695;
  size_t v696;
  size_t v697;
  CVPixelBufferRef v698;
  CVPixelBufferRef buffer;
  uint64_t v700;
  uint64_t v701;
  __int16 v702;
  __int16 v703;
  __int16 v704;
  __int16 v705;
  uint64_t v706;
  CGRect v707;

  v29 = a15;
  v706 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v698 = 0;
  buffer = 0;
  v696 = 0;
  v697 = 0;
  v707.origin.x = a9;
  v707.origin.y = a10;
  v707.size.width = a11;
  v707.size.height = a12;
  if (!CGRectIsNull(v707) || a4 != 1)
    goto LABEL_620;
  if (a13 != *MEMORY[0x1E0C9D820] || a14 != *(double *)(MEMORY[0x1E0C9D820] + 8))
    goto LABEL_620;
  pixelBuffer = a1;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v696, &v697);
  v32 = *a15;
  if (*a15)
  {
    v700 = 0;
    v701 = 0;
    CMPhotoGetPixelBufferCLAP(v32, 0, 0, &v700, &v701);
    if (v696 != v700
      || v697 != v701
      || CVPixelBufferGetPixelFormatType(*a15) != (_DWORD)a2
      || a3 && CVPixelBufferGetBytesPerRow(*a15) % a3)
    {
      goto LABEL_620;
    }
    buffer = *a15;
  }
  else
  {
    v33 = _vtWorkaroundCreatePixelBufferHelper(a5, a2, v696, v697, a3, &buffer);
    if ((_DWORD)v33)
      goto LABEL_621;
  }
  if (PixelFormatType > 1651519797)
  {
    if (PixelFormatType > 1751411058)
    {
      if (PixelFormatType > 1919378231)
      {
        if (PixelFormatType > 1952854575)
        {
          if (PixelFormatType <= 2016686639)
          {
            if (PixelFormatType != 1952854576 && PixelFormatType != 1953903152)
              goto LABEL_620;
            if ((_DWORD)a2 != 1278226742)
            {
              if ((_DWORD)a2 == 1278226488)
              {
                v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v696, v697, a3, &v698);
                if (!(_DWORD)v33)
                  goto LABEL_100;
                goto LABEL_621;
              }
LABEL_620:
              v33 = FigSignalErrorAt();
              goto LABEL_621;
            }
            v113 = buffer;
            v114 = v696;
            v115 = v697;
            v116 = pixelBuffer;
            goto LABEL_441;
          }
          if (PixelFormatType != 2016686640 && PixelFormatType != 2019963440)
            goto LABEL_620;
          if ((int)a2 <= 1882468911)
          {
            v68 = pixelBuffer;
            if ((_DWORD)a2 == 1278226488)
            {
              v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v696, v697, a3, &v698);
              if (!(_DWORD)v33)
              {
LABEL_100:
                v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
                if ((_DWORD)v33)
                  goto LABEL_621;
                goto LABEL_353;
              }
LABEL_621:
              v397 = v33;
              goto LABEL_622;
            }
            if ((_DWORD)a2 != 1278226742)
            {
              if ((_DWORD)a2 != 1751527984 || PixelFormatType != 2019963440)
                goto LABEL_620;
              CVPixelBufferLockBaseAddress(pixelBuffer, 0);
              CVPixelBufferLockBaseAddress(buffer, 0);
              BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
              v119 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
              BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
              v121 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
              v122 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
              v123 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
              v124 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
              v125 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
              v126 = v697;
              if (v697)
              {
                v127 = 0;
                v128 = v696;
                do
                {
                  if (v128)
                  {
                    v129 = &v124[v127 * v122];
                    v130 = v128;
                    v131 = &BaseAddressOfPlane[v127 * BytesPerRowOfPlane];
                    do
                    {
                      v132 = *(unsigned __int16 *)v131;
                      v131 += 2;
                      _S2 = fminf((float)(v132 >> 6) / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      *(_WORD *)v129 = LOWORD(_S2);
                      v129 += 2;
                      --v130;
                    }
                    while (v130);
                  }
                  ++v127;
                }
                while (v127 != v126);
                v137 = 0;
                v138 = v696;
                do
                {
                  if (v138)
                  {
                    for (i = 0; i < v138; i += 2)
                    {
                      v140 = &v121[2 * i];
                      v141 = &v125[2 * i];
                      _S2 = fminf((float)(*(unsigned __int16 *)v140 >> 6) / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      v143 = (float)(*((unsigned __int16 *)v140 + 1) >> 6);
                      *(_WORD *)v141 = LOWORD(_S2);
                      _S2 = fminf(v143 / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      *((_WORD *)v141 + 1) = LOWORD(_S2);
                    }
                  }
                  v137 += 2;
                  v125 += v123;
                  v121 += v119;
                }
                while (v126 > v137);
              }
              goto LABEL_538;
            }
            v113 = buffer;
            v114 = v696;
            v115 = v697;
            v116 = pixelBuffer;
LABEL_441:
            v117 = 0;
            goto LABEL_442;
          }
          if ((_DWORD)a2 == 1882468912)
            goto LABEL_292;
          if ((_DWORD)a2 != 1919365990)
          {
            if ((_DWORD)a2 != 1885745712)
              goto LABEL_620;
LABEL_292:
            if (PixelFormatType == 2019963440)
              v218 = 1885745712;
            else
              v218 = 1882468912;
            if (v218 != (_DWORD)a2)
              goto LABEL_620;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            v683 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            v673 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            v219 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            v220 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            v221 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            v222 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            v36 = pixelBuffer;
            v223 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            v224 = CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            v225 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            v226 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            _frameLinear2Packed((uint64_t)v221, (uint64_t)v223, WidthOfPlane, HeightOfPlane, v219, v225, 0);
            _frameLinear2Packed((uint64_t)v222, (uint64_t)v224, v683, v673, v220, v226, 1);
            goto LABEL_476;
          }
          v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1815491698, v696, v697, a3, &v698);
          if ((_DWORD)v33)
            goto LABEL_621;
          v316 = a15;
          v371 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
          if (!(_DWORD)v371)
          {
            CVPixelBufferLockBaseAddress(v698, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v372 = 0;
            for (j = 0; j != 3; ++j)
            {
              v374 = CVPixelBufferGetBytesPerRowOfPlane(buffer, j);
              v375 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, j);
              BytesPerRow = CVPixelBufferGetBytesPerRow(v698);
              BaseAddress = (char *)CVPixelBufferGetBaseAddress(v698);
              v378 = v697;
              if (v697)
              {
                v379 = 0;
                v380 = v696;
                v381 = &BaseAddress[v372];
                do
                {
                  v382 = v375;
                  v383 = v380;
                  for (k = v381; v383; --v383)
                  {
                    v385 = *(unsigned __int16 *)k;
                    k += 8;
                    v386 = (double)v385 / 65535.0;
                    *v382++ = v386;
                  }
                  ++v379;
                  v381 += BytesPerRow;
                  v375 = (float *)((char *)v375 + v374);
                }
                while (v379 != v378);
              }
              v372 += 2;
            }
LABEL_513:
            v468 = v698;
            v469 = 0;
LABEL_551:
            CVPixelBufferUnlockBaseAddress(v468, v469);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            v363 = v698;
            v362 = buffer;
            goto LABEL_552;
          }
          goto LABEL_629;
        }
        if (PixelFormatType != 1919378232)
        {
          if (PixelFormatType != 1919379252)
          {
            if (PixelFormatType != 1919381552 || (_DWORD)a2 != 1919378232)
              goto LABEL_620;
            v51 = pixelBuffer;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            Width = CVPixelBufferGetWidth(pixelBuffer);
            Height = CVPixelBufferGetHeight(pixelBuffer);
            v54 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            v55 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
            v56 = CVPixelBufferGetBaseAddress(buffer);
            v57 = CVPixelBufferGetBytesPerRow(buffer);
            if (Height)
            {
              for (m = 0; m != Height; ++m)
              {
                if (Width + 3 >= 4)
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = &v55[m * v54];
                  do
                  {
                    v62 = 0;
                    v63 = v61[v59 + 4];
                    LOWORD(v700) = v63 & 3 | (4 * v61[v59]);
                    WORD1(v700) = (v63 >> 2) & 3 | (4 * v61[v59 + 1]);
                    WORD2(v700) = (v63 >> 4) & 3 | (4 * v61[v59 + 2]);
                    HIWORD(v700) = (v63 >> 6) | (4 * v61[v59 + 3]);
                    do
                    {
                      v64 = *((_WORD *)&v700 + v62);
                      *((_WORD *)&v700 + v62) = 4 * v64;
                      v56[v60 + v62++] = LUT_compand_12b_to_8b[4 * (v64 & 0x3FFF)];
                    }
                    while (v62 != 4);
                    v59 += 5;
                    v60 += 4;
                  }
                  while (5 * ((Width + 3) >> 2) > v59);
                }
                v56 += v57;
              }
            }
            goto LABEL_381;
          }
          goto LABEL_166;
        }
        if ((int)a2 > 1278226487)
        {
          v51 = pixelBuffer;
          if ((_DWORD)a2 != 1278226488)
          {
            if ((_DWORD)a2 != 1919381552)
              goto LABEL_620;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v278 = CVPixelBufferGetWidth(pixelBuffer);
            v279 = CVPixelBufferGetHeight(pixelBuffer);
            v280 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            v281 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
            v282 = (char *)CVPixelBufferGetBaseAddress(buffer);
            v283 = CVPixelBufferGetBytesPerRow(buffer);
            if (v279)
            {
              for (n = 0; n != v279; ++n)
              {
                if (v278)
                {
                  v285 = 0;
                  v286 = 0;
                  v287 = v281;
                  do
                  {
                    v288 = 0;
                    v289 = 0;
                    BYTE4(v700) = 0;
                    do
                    {
                      v290 = LUT_expand_8b_to_12b[v287[v289]];
                      *((_BYTE *)&v700 + v289) = v290 >> 4;
                      BYTE4(v700) |= ((v290 >> 2) & 3) << v288;
                      ++v289;
                      v288 += 2;
                    }
                    while (v289 != 4);
                    v291 = &v282[v283 * n + v286];
                    *(_DWORD *)v291 = v700;
                    v291[4] = BYTE4(v700);
                    v286 += 5;
                    v285 += 4;
                    v287 += 4;
                  }
                  while (v278 > v285);
                }
                v281 += v280;
              }
            }
LABEL_381:
            CVPixelBufferUnlockBaseAddress(v51, 0);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            goto LABEL_616;
          }
        }
        else
        {
          v51 = pixelBuffer;
          if ((_DWORD)a2 != 875704422 && (_DWORD)a2 != 1111970369)
            goto LABEL_620;
        }
        v107 = buffer;
        v108 = a6;
        v109 = a7;
        v110 = a8;
        v111 = v51;
        goto LABEL_164;
      }
      if (PixelFormatType <= 1882468911)
      {
        if (PixelFormatType != 1751411059)
        {
          if (PixelFormatType != 1751527984)
          {
            if (PixelFormatType != 1815491698)
              goto LABEL_620;
            if ((_DWORD)a2 != 1919365990)
            {
              v36 = pixelBuffer;
              if ((_DWORD)a2 != 1647589490)
                goto LABEL_620;
              CVPixelBufferLockBaseAddress(pixelBuffer, 0);
              CVPixelBufferLockBaseAddress(buffer, 0);
              v37 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              v38 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
              v39 = CVPixelBufferGetBytesPerRow(buffer);
              v40 = (char *)CVPixelBufferGetBaseAddress(buffer);
              v41 = v697;
              if (v697)
              {
                v42 = 0;
                v43 = v696;
                do
                {
                  if (v43)
                  {
                    v44 = &v40[v42 * v39];
                    v45 = v43;
                    v46 = &v38[v42 * v37];
                    do
                    {
                      *(_WORD *)v44 = *(_WORD *)v46;
                      *((_WORD *)v44 + 1) = *((_WORD *)v46 + 1);
                      *((_WORD *)v44 + 2) = *((_WORD *)v46 + 2);
                      v46 += 8;
                      v44 += 6;
                      --v45;
                    }
                    while (v45);
                  }
                  ++v42;
                }
                while (v42 != v41);
              }
              goto LABEL_476;
            }
            v316 = a15;
            v317 = pixelBuffer;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v318 = 0;
            for (ii = 0; ii != 3; ++ii)
            {
              v320 = CVPixelBufferGetBytesPerRowOfPlane(buffer, ii);
              v321 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, ii);
              v322 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              v323 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
              v324 = v697;
              if (v697)
              {
                v325 = 0;
                v326 = v696;
                v327 = &v323[v318];
                do
                {
                  v328 = v321;
                  v329 = v326;
                  for (jj = v327; v329; --v329)
                  {
                    v331 = *(unsigned __int16 *)jj;
                    jj += 8;
                    v332 = (double)v331 / 65535.0;
                    *v328++ = v332;
                  }
                  ++v325;
                  v327 += v322;
                  v321 = (float *)((char *)v321 + v320);
                }
                while (v325 != v324);
              }
              v318 += 2;
            }
            v333 = pixelBuffer;
            v334 = 0;
LABEL_430:
            CVPixelBufferUnlockBaseAddress(v333, v334);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            v362 = buffer;
            v363 = v317;
LABEL_552:
            CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v363, v362);
            v29 = v316;
            goto LABEL_616;
          }
          if ((int)a2 > 1647589489)
          {
            v68 = pixelBuffer;
            if ((_DWORD)a2 != 2019963440)
            {
              v152 = 1647589490;
LABEL_367:
              if ((_DWORD)a2 == v152)
              {
                v275 = CVBufferCopyAttachments(v68, kCVAttachmentMode_ShouldPropagate);
                if (v275)
                {
                  v276 = v275;
                  CMPhotoGetMatrixFromPixelBufferAttachments(v275);
                  if (FigCFEqual())
                    v277 = 2;
                  else
                    v277 = FigCFEqual() != 0;
                  v527 = a15;
                  CFRelease(v276);
                }
                else
                {
                  v527 = a15;
                  v277 = 0;
                }
                CVPixelBufferLockBaseAddress(v68, 0);
                CVPixelBufferLockBaseAddress(buffer, 0);
                v528 = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
                v529 = CVPixelBufferGetBytesPerRowOfPlane(v68, 1uLL);
                v530 = (char *)CVPixelBufferGetBaseAddressOfPlane(v68, 0);
                v531 = (char *)CVPixelBufferGetBaseAddressOfPlane(v68, 1uLL);
                v532 = CVPixelBufferGetBytesPerRow(buffer);
                v533 = (char *)CVPixelBufferGetBaseAddress(buffer);
                v534 = v697;
                if (v697)
                {
                  v535 = 0;
                  v536 = 0;
                  v537 = v696;
                  do
                  {
                    if ((int)v536 >= 0)
                      v538 = v536;
                    else
                      v538 = v536 + 1;
                    if (v537)
                    {
                      v539 = 0;
                      v540 = 0;
                      v541 = 2 * (v536 & 1) + (v538 >> 1) - 1;
                      v542 = &v531[(v529 * ((uint64_t)v538 >> 1)) & 0xFFFFFFFFFFFFFFFELL];
                      v543 = &v531[(v529 * v541) & 0xFFFFFFFFFFFFFFFELL];
                      v544 = &v533[(v536 * v532) & 0xFFFFFFFFFFFFFFFELL];
                      v545 = v544;
                      do
                      {
                        if ((int)v540 >= 0)
                          v546 = v540;
                        else
                          v546 = v540 + 1;
                        v547 = (v539 & 2) + (v546 >> 1);
                        _H21 = *(_WORD *)&v530[2 * v540 + (v535 & 0xFFFFFFFFFFFFFFFELL)];
                        v549 = (uint64_t)v546 >> 1;
                        v550 = v546 & 0xFFFFFFFE;
                        _H22 = *(_WORD *)&v542[2 * v550];
                        __asm { FCVT            S22, H22 }
                        v547 *= 2;
                        _H23 = *(_WORD *)&v542[2 * v547 - 4];
                        __asm { FCVT            S23, H23 }
                        _H24 = *(_WORD *)&v543[2 * v550];
                        v556 = (float)(_S23 * 3.0) + (float)(_S22 * 9.0);
                        __asm { FCVT            S23, H24 }
                        v558 = v556 + (float)(_S23 * 3.0);
                        LOWORD(_S23) = *(_WORD *)&v543[2 * v547 - 4];
                        __asm { FCVT            S23, H23 }
                        _S22 = (float)(v558 + _S23) * 0.0625;
                        v561 = (4 * v549) | 2;
                        _H24 = *(_WORD *)&v542[v561];
                        __asm
                        {
                          FCVT            H22, S22
                          FCVT            S24, H24
                        }
                        _H25 = *(_WORD *)&v542[2 * --v547];
                        __asm { FCVT            S25, H25 }
                        v566 = (float)(_S25 * 3.0) + (float)(_S24 * 9.0);
                        LOWORD(_S25) = *(_WORD *)&v543[v561];
                        __asm { FCVT            S25, H25 }
                        v568 = v566 + (float)(_S25 * 3.0);
                        LOWORD(_S25) = *(_WORD *)&v543[2 * v547];
                        __asm { FCVT            S25, H25 }
                        _S23 = (float)(v568 + _S25) * 0.0625;
                        __asm
                        {
                          FCVT            H23, S23
                          FCVT            S21, H21
                          FCVT            S24, H22
                          FCVT            S22, H23
                        }
                        v574 = (float)(_S24 * 0.0) + _S21;
                        if (v277 == 2)
                        {
                          v575 = v574 + (float)(_S22 * 1.5748);
                          _S23 = (float)(_S21 + (float)(_S24 * -0.18732)) + (float)(_S22 * -0.46812);
                          v577 = 1.8556;
                        }
                        else
                        {
                          v575 = v574 + (float)(_S22 * 1.402);
                          _S23 = (float)(_S21 + (float)(_S24 * -0.34414)) + (float)(_S22 * -0.71414);
                          v577 = 1.772;
                        }
                        _S21 = (float)((float)(v577 * _S24) + _S21) + (float)(_S22 * 0.0);
                        if (v575 >= 0.0)
                          _S22 = v575;
                        else
                          _S22 = 0.0;
                        if (_S22 > 1.0)
                          _S22 = 1.0;
                        __asm { FCVT            H22, S22 }
                        if ((_DWORD)a2 == 1380411457)
                        {
                          *(_WORD *)v545 = _H22;
                          if (_S23 >= 0.0)
                            _S22 = _S23;
                          else
                            _S22 = 0.0;
                          if (_S22 > 1.0)
                            _S22 = 1.0;
                          __asm { FCVT            H22, S22 }
                          *((_WORD *)v545 + 1) = _H22;
                          if (_S21 < 0.0)
                            _S21 = 0.0;
                          if (_S21 > 1.0)
                            _S21 = 1.0;
                          __asm { FCVT            H21, S21 }
                          *((_WORD *)v545 + 2) = _H21;
                          v545 += 8;
                        }
                        else
                        {
                          if (_S23 < 0.0)
                            _S23 = 0.0;
                          if (_S23 > 1.0)
                            _S23 = 1.0;
                          __asm { FCVT            H23, S23 }
                          if (_S21 < 0.0)
                            _S21 = 0.0;
                          if (_S21 > 1.0)
                            _S21 = 1.0;
                          __asm
                          {
                            FCVT            H21, S21
                            FCVT            D22, H22
                          }
                          *(_WORD *)v544 = (int)(_D22 * 65535.0);
                          __asm { FCVT            D22, H23 }
                          *((_WORD *)v544 + 1) = (int)(_D22 * 65535.0);
                          __asm { FCVT            D21, H21 }
                          *((_WORD *)v544 + 2) = (int)(_D21 * 65535.0);
                          v544 += 6;
                        }
                        ++v540;
                        v539 += 2;
                      }
                      while (v537 != v540);
                    }
                    ++v536;
                    v535 += v528;
                  }
                  while (v536 != v534);
                }
                CVPixelBufferUnlockBaseAddress(v68, 0);
                CVPixelBufferUnlockBaseAddress(buffer, 0);
                CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v68, buffer);
                v29 = v527;
                goto LABEL_616;
              }
              goto LABEL_620;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v470 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            v471 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            v472 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            v473 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            v474 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            v475 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            v476 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            v477 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            v479 = v697;
            if (v697)
            {
              v480 = 0;
              v481 = v696;
              LOWORD(v478) = 25598;
              do
              {
                if (v481)
                {
                  v482 = &v476[v480 * v474];
                  v483 = v481;
                  v484 = &v472[v480 * v470];
                  do
                  {
                    v485 = *(_WORD *)v484;
                    v484 += 2;
                    _H3 = v485;
                    __asm { FCVT            S3, H3 }
                    _S3 = _S3 * 1023.0;
                    __asm
                    {
                      FCVT            H3, S3
                      FCVT            S4, H3
                    }
                    if (_S4 >= 1023.0)
                      _S3 = v478;
                    __asm { FCVT            S4, H3 }
                    if (_S4 < 0.0)
                      _S3 = 0.0;
                    __asm { FCVT            S3, H3 }
                    *(_WORD *)v482 = (unsigned __int16)(int)_S3 << 6;
                    v482 += 2;
                    --v483;
                  }
                  while (v483);
                }
                ++v480;
              }
              while (v480 != v479);
              v492 = 0;
              v493 = v696;
              do
              {
                if (v493)
                {
                  for (kk = 0; kk < v493; kk += 2)
                  {
                    v495 = &v473[2 * kk];
                    _H3 = *(_WORD *)v495;
                    __asm { FCVT            S3, H3 }
                    v498 = &v477[2 * kk];
                    _S3 = _S3 * 1023.0;
                    __asm { FCVT            H3, S3 }
                    _H4 = *((_WORD *)v495 + 1);
                    __asm { FCVT            S4, H4 }
                    _S4 = _S4 * 1023.0;
                    __asm
                    {
                      FCVT            H4, S4
                      FCVT            S5, H3
                    }
                    if (_S5 >= 1023.0)
                      _S3 = v478;
                    __asm { FCVT            S5, H3 }
                    if (_S5 < 0.0)
                      _S3 = 0.0;
                    __asm { FCVT            S3, H3 }
                    v506 = (int)_S3;
                    __asm { FCVT            S3, H4 }
                    v508 = (_WORD)v506 << 6;
                    if (_S3 >= 1023.0)
                      _S3 = v478;
                    else
                      _S3 = _S4;
                    __asm { FCVT            S4, H3 }
                    if (_S4 < 0.0)
                      _S3 = 0.0;
                    __asm { FCVT            S3, H3 }
                    *(_WORD *)v498 = v508;
                    *((_WORD *)v498 + 1) = (unsigned __int16)(int)_S3 << 6;
                  }
                }
                v492 += 2;
                v477 += v475;
                v473 += v471;
              }
              while (v479 > v492);
            }
          }
          else
          {
            v68 = pixelBuffer;
            if ((_DWORD)a2 != 875704422)
            {
              v152 = 1380411457;
              goto LABEL_367;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v419 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            v420 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            v421 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            v422 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            v423 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            v424 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            v425 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            v426 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            v428 = v697;
            if (v697)
            {
              v429 = 0;
              v430 = v696;
              LOWORD(v427) = 23544;
              do
              {
                if (v430)
                {
                  v431 = 0;
                  do
                  {
                    _H2 = *(_WORD *)&v421[2 * v431];
                    __asm { FCVT            S2, H2 }
                    _S2 = _S2 * 255.0;
                    __asm
                    {
                      FCVT            H2, S2
                      FCVT            S4, H2
                    }
                    if (_S4 >= 255.0)
                      _S2 = v427;
                    __asm { FCVT            S3, H2 }
                    if (_S3 < 0.0)
                      _S2 = 0.0;
                    __asm { FCVT            S2, H2 }
                    v425[v431++] = (int)_S2;
                    v430 = v696;
                  }
                  while (v696 > v431);
                  v428 = v697;
                }
                ++v429;
                v425 += v423;
                v421 += v419;
              }
              while (v428 > v429);
              if (v428)
              {
                v438 = 0;
                v439 = v696;
                do
                {
                  if (v439)
                  {
                    v440 = 0;
                    do
                    {
                      v441 = &v422[2 * v440];
                      _H2 = *(_WORD *)v441;
                      __asm { FCVT            S2, H2 }
                      _S2 = _S2 * 255.0;
                      __asm { FCVT            H2, S2 }
                      _H4 = *((_WORD *)v441 + 1);
                      __asm { FCVT            S4, H4 }
                      _S4 = _S4 * 255.0;
                      __asm
                      {
                        FCVT            H4, S4
                        FCVT            S5, H2
                      }
                      if (_S5 >= 255.0)
                        _S2 = v427;
                      __asm { FCVT            S5, H2 }
                      v450 = &v426[v440];
                      if (_S5 < 0.0)
                        _S2 = 0.0;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S5, H4
                      }
                      v453 = (int)_S2;
                      if (_S5 >= 255.0)
                        _S2 = v427;
                      else
                        _S2 = _S4;
                      __asm { FCVT            S3, H2 }
                      if (_S3 < 0.0)
                        _S2 = 0.0;
                      __asm { FCVT            S2, H2 }
                      *v450 = v453;
                      v450[1] = (int)_S2;
                      v440 += 2;
                      v439 = v696;
                    }
                    while (v696 > v440);
                    v428 = v697;
                  }
                  v438 += 2;
                  v426 += v424;
                  v422 += v420;
                }
                while (v428 > v438);
              }
            }
          }
LABEL_538:
          v369 = v68;
          v370 = 0;
LABEL_539:
          CVPixelBufferUnlockBaseAddress(v369, v370);
          CVPixelBufferUnlockBaseAddress(buffer, 0);
          v105 = buffer;
          v106 = v68;
          goto LABEL_540;
        }
        goto LABEL_141;
      }
      if (PixelFormatType != 1882468912 && PixelFormatType != 1885745712)
      {
        if (PixelFormatType != 1919365990 || (_DWORD)a2 != 1815491698 && (_DWORD)a2 != 1111970369)
          goto LABEL_620;
        v68 = pixelBuffer;
        v69 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        v70 = v69 / CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        v71 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
        BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        v73 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
        v74 = CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        if (v70 % CMPhotoGetBytesPerPixelForPixelFormat(1919365990))
          goto LABEL_620;
        v75 = v71 / BytesPerPixelForPixelFormat;
        if (v71 / BytesPerPixelForPixelFormat % CMPhotoGetBytesPerPixelForPixelFormat(1919365990))
          goto LABEL_620;
        v76 = v73 / v74;
        if (v73 / v74 % CMPhotoGetBytesPerPixelForPixelFormat(1919365990))
          goto LABEL_620;
        v77 = CVPixelBufferGetBytesPerRow(buffer);
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        CVPixelBufferLockBaseAddress(buffer, 0);
        v78 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
        v79 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
        v80 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
        v81 = (char *)CVPixelBufferGetBaseAddress(buffer);
        v82 = v697;
        if ((_DWORD)a2 == 1111970369)
        {
          if (v697)
          {
            v83 = 0;
            v84 = v696;
            do
            {
              if (v84)
              {
                v85 = 0;
                v86 = &v81[v83 * v77];
                do
                {
                  *v86 = (int)fmin(v80[v85 + v83 * v76] * 255.0 + 0.5, 255.0);
                  v86[1] = (int)fmin(v79[v85 + v83 * v75] * 255.0 + 0.5, 255.0);
                  v86[2] = (int)fmin(v78[v85 + v83 * v70] * 255.0 + 0.5, 255.0);
                  v86[3] = -1;
                  v86 += 4;
                  ++v85;
                  v84 = v696;
                }
                while (v696 > v85);
                v82 = v697;
              }
              ++v83;
            }
            while (v82 > v83);
          }
        }
        else if (v697)
        {
          v364 = 0;
          v365 = v696;
          do
          {
            if (v365)
            {
              v366 = 0;
              v367 = &v81[v364 * v77];
              v368 = v365;
              do
              {
                *(_WORD *)v367 = (int)fmin(v80[v366 + v364 * v76] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v367 + 1) = (int)fmin(v79[v366 + v364 * v75] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v367 + 2) = (int)fmin(v78[v366 + v364 * v70] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v367 + 3) = -1;
                ++v366;
                v367 += 8;
                --v368;
              }
              while (v368);
            }
            ++v364;
          }
          while (v364 != v82);
        }
        v369 = pixelBuffer;
        v370 = 1;
        goto LABEL_539;
      }
      if ((int)a2 <= 1815491697)
      {
        v146 = pixelBuffer;
        if ((_DWORD)a2 != 875704422 && (_DWORD)a2 != 875704438 && (_DWORD)a2 != 1111970369)
          goto LABEL_620;
        goto LABEL_309;
      }
      v146 = pixelBuffer;
      if ((_DWORD)a2 == 1815491698)
      {
LABEL_309:
        if (PixelFormatType == 1885745712)
          v237 = 2019963440;
        else
          v237 = 2016686640;
        v33 = _vtWorkaroundCreatePixelBufferHelper(a5, v237, v696, v697, a3, &v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        CVPixelBufferLockBaseAddress(v146, 0);
        CVPixelBufferLockBaseAddress(v698, 0);
        v685 = CVPixelBufferGetWidthOfPlane(v146, 0);
        pixelBuffera = CVPixelBufferGetWidthOfPlane(v146, 1uLL);
        v675 = CVPixelBufferGetHeightOfPlane(v146, 0);
        v680 = CVPixelBufferGetHeightOfPlane(v146, 1uLL);
        v667 = CVPixelBufferGetBytesPerRowOfPlane(v146, 0);
        v670 = CVPixelBufferGetBytesPerRowOfPlane(v146, 1uLL);
        v664 = CVPixelBufferGetBaseAddressOfPlane(v146, 0);
        v666 = CVPixelBufferGetBaseAddressOfPlane(v146, 1uLL);
        v238 = CVPixelBufferGetBaseAddressOfPlane(v698, 0);
        v239 = CVPixelBufferGetBaseAddressOfPlane(v698, 1uLL);
        v240 = CVPixelBufferGetBytesPerRowOfPlane(v698, 0);
        v241 = CVPixelBufferGetBytesPerRowOfPlane(v698, 1uLL);
        _framePacked2Linear((uint64_t)v664, (uint64_t)v238, v685, v675, v667, v240, 0);
        _framePacked2Linear((uint64_t)v666, (uint64_t)v239, pixelBuffera, v680, v670, v241, 1);
        CVPixelBufferUnlockBaseAddress(v146, 0);
        CVPixelBufferUnlockBaseAddress(v698, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v146, v698);
        goto LABEL_353;
      }
      if ((_DWORD)a2 != 2019963440 && (_DWORD)a2 != 2016686640)
        goto LABEL_620;
      v228 = PixelFormatType == 1885745712 ? 2019963440 : 2016686640;
      if (v228 != (_DWORD)a2)
        goto LABEL_620;
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(buffer, 0);
      v679 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
      v684 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
      v669 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
      v674 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
      v229 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      v230 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v231 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      v232 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v36 = pixelBuffer;
      v233 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
      v234 = CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
      v235 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
      v236 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
      _framePacked2Linear((uint64_t)v231, (uint64_t)v233, v679, v669, v229, v235, 0);
      _framePacked2Linear((uint64_t)v232, (uint64_t)v234, v684, v674, v230, v236, 1);
LABEL_476:
      CVPixelBufferUnlockBaseAddress(v36, 0);
      CVPixelBufferUnlockBaseAddress(buffer, 0);
      v105 = buffer;
      v106 = v36;
      goto LABEL_540;
    }
    if (PixelFormatType <= 1717856626)
    {
      if (PixelFormatType <= 1651926375)
      {
        if (PixelFormatType != 1651519798)
        {
          if (PixelFormatType == 1651847472)
          {
            if ((_DWORD)a2 != 1815491698 && (_DWORD)a2 != 1278226742)
              goto LABEL_620;
            v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226736, v696, v697, a3, &v698);
            if ((_DWORD)v33)
              goto LABEL_621;
            v88 = v697;
            v87 = v698;
            v89 = v696;
            v90 = pixelBuffer;
            v147 = 6;
            goto LABEL_351;
          }
          if (PixelFormatType != 1651925816)
            goto LABEL_620;
          goto LABEL_160;
        }
        v145 = pixelBuffer;
        if ((int)a2 > 1651519797)
        {
          if ((_DWORD)a2 != 2019963440 && (_DWORD)a2 != 1815491698)
          {
            v227 = 1651519798;
            goto LABEL_345;
          }
          goto LABEL_347;
        }
        if ((_DWORD)a2 != 1278226488)
        {
          v151 = 1278226736;
          goto LABEL_299;
        }
        goto LABEL_347;
      }
      if (PixelFormatType == 1651926376)
      {
        v145 = pixelBuffer;
        if ((_DWORD)a2 != 1815491698 && (_DWORD)a2 != 1278226742)
          goto LABEL_620;
        v203 = v696;
        v204 = v697;
        v205 = 1278226536;
        v206 = a5;
        goto LABEL_348;
      }
      if (PixelFormatType == 1652056888)
        goto LABEL_160;
      v65 = 1717855600;
      goto LABEL_132;
    }
    if (PixelFormatType > 1735549491)
    {
      if (PixelFormatType != 1735549492)
      {
        if (PixelFormatType != 1735549752)
        {
          if (PixelFormatType != 1751410032)
            goto LABEL_620;
LABEL_141:
          if ((_DWORD)a2 != 1278226488)
            goto LABEL_620;
          v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226536, v696, v697, a3, &v698);
          if ((_DWORD)v33)
            goto LABEL_621;
          v88 = v697;
          v87 = v698;
          v89 = v696;
          v90 = pixelBuffer;
          goto LABEL_350;
        }
LABEL_160:
        if ((_DWORD)a2 != 875704422 && (_DWORD)a2 != 1278226488 && (_DWORD)a2 != 1111970369)
          goto LABEL_620;
        v107 = buffer;
        v108 = a6;
        v109 = a7;
        v110 = a8;
        v111 = pixelBuffer;
LABEL_164:
        v33 = _convert8bitsRAWTo8BitsReadableFormat(v108, v109, v110, v111, v107, a5);
        if ((_DWORD)v33)
          goto LABEL_621;
        goto LABEL_616;
      }
    }
    else
    {
      if (PixelFormatType == 1717856627)
      {
LABEL_133:
        if ((int)a2 > 1278226741)
        {
          if ((_DWORD)a2 != 1278226742)
          {
            if ((_DWORD)a2 == 2019963440)
            {
              v314 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226736, v696, v697, a3, &v698);
              if ((_DWORD)v314
                || (v314 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, 0xAu, 1, 0, 0, 0, &v698, 0), (_DWORD)v314))
              {
                v397 = v314;
                goto LABEL_622;
              }
              if (!v32)
              {
                if (buffer)
                  CFRelease(buffer);
                v315 = v698;
                v698 = 0;
                buffer = v315;
                goto LABEL_616;
              }
              goto LABEL_353;
            }
            if ((_DWORD)a2 == 1815491698)
            {
              v148 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
              if ((_DWORD)v148
                || (BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(1278226742),
                    v148 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, BitDepthForPixelFormat, 1, 0, 0, 0, &v698, 0), (_DWORD)v148))
              {
                v397 = v148;
                goto LABEL_622;
              }
              v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v698, buffer);
              if ((_DWORD)v33)
                goto LABEL_621;
              goto LABEL_616;
            }
            goto LABEL_620;
          }
        }
        else if ((_DWORD)a2 != 1278226488)
        {
          if ((_DWORD)a2 == 1278226536)
          {
            v33 = CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(pixelBuffer, 0, a5, 0, 0, 0, &buffer);
            if ((_DWORD)v33)
              goto LABEL_621;
            goto LABEL_616;
          }
          if ((_DWORD)a2 != 1278226736)
            goto LABEL_620;
        }
        v150 = CMPhotoGetBitDepthForPixelFormat(a2);
        v33 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, v150, 1, 0, 0, 0, &buffer, 0);
        if ((_DWORD)v33)
          goto LABEL_621;
LABEL_616:
        v397 = 0;
        *v29 = buffer;
        buffer = 0;
        goto LABEL_617;
      }
      if (PixelFormatType == 1734501176)
        goto LABEL_160;
      if (PixelFormatType != 1734505012)
        goto LABEL_620;
    }
LABEL_166:
    if ((int)a2 > 1815162993)
    {
      v112 = pixelBuffer;
      if ((_DWORD)a2 != 1815162994 && (_DWORD)a2 != 1815491698)
        goto LABEL_620;
    }
    else
    {
      v112 = pixelBuffer;
      if ((_DWORD)a2 != 1111970369)
      {
        if ((_DWORD)a2 != 1278226742)
          goto LABEL_620;
        v113 = buffer;
        v114 = v696;
        v115 = v697;
        v116 = pixelBuffer;
        v117 = 2;
LABEL_442:
        v33 = _directPixelBufferCopy(v116, v113, v117, 0, v114, v115);
        if ((_DWORD)v33)
          goto LABEL_621;
        goto LABEL_616;
      }
    }
    v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
    if ((_DWORD)v33)
      goto LABEL_621;
    v88 = v697;
    v87 = v698;
    v89 = v696;
    v90 = v112;
    v147 = 2;
    goto LABEL_351;
  }
  if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType > 875704949)
    {
      if (PixelFormatType <= 1111970368)
      {
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518)
        {
LABEL_98:
          if ((_DWORD)a2 == 1278226488)
          {
            v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v696, v697, a3, &v698);
            if (!(_DWORD)v33)
              goto LABEL_100;
            goto LABEL_621;
          }
          goto LABEL_620;
        }
        v47 = 875836534;
LABEL_97:
        if (PixelFormatType != v47)
          goto LABEL_620;
        goto LABEL_98;
      }
      if (PixelFormatType == 1111970369)
      {
        if ((_DWORD)a2 != 1919365990)
        {
          v36 = pixelBuffer;
          if ((_DWORD)a2 != 1380401729)
            goto LABEL_620;
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v207 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v208 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v209 = (char *)CVPixelBufferGetBaseAddress(buffer);
          v210 = CVPixelBufferGetBytesPerRow(buffer);
          v211 = v697;
          if (v697)
          {
            v212 = 0;
            v213 = v696;
            v214 = v208 + 1;
            do
            {
              if (v213)
              {
                v215 = 0;
                v216 = &v209[v212 * v210];
                v217 = v214;
                do
                {
                  *v216 = v217[1];
                  v216[1] = *v217;
                  v216[2] = *(v217 - 1);
                  v216[3] = v217[2];
                  v216 += 4;
                  ++v215;
                  v213 = v696;
                  v217 += 4;
                }
                while (v696 > v215);
                v211 = v697;
              }
              ++v212;
              v214 += v207;
            }
            while (v211 > v212);
          }
          goto LABEL_476;
        }
        v316 = a15;
        v317 = pixelBuffer;
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        CVPixelBufferLockBaseAddress(buffer, 0);
        v347 = 0;
        v348 = 2;
        do
        {
          v349 = CVPixelBufferGetBytesPerRowOfPlane(buffer, v347);
          v350 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, v347);
          v351 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v352 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v353 = v697;
          if (v697)
          {
            v354 = 0;
            v355 = v696;
            v356 = &v352[v348];
            do
            {
              v357 = v356;
              v358 = v350;
              for (mm = v355; mm; --mm)
              {
                v360 = *v357;
                v357 += 4;
                v361 = (double)v360 / 255.0;
                *v358++ = v361;
              }
              ++v354;
              v350 = (float *)((char *)v350 + v349);
              v356 += v351;
            }
            while (v354 != v353);
          }
          ++v347;
          --v348;
        }
        while (v347 != 3);
        v333 = pixelBuffer;
        v334 = 1;
        goto LABEL_430;
      }
      if (PixelFormatType != 1278226488)
      {
        v65 = 1278226534;
LABEL_132:
        if (PixelFormatType != v65)
          goto LABEL_620;
        goto LABEL_133;
      }
      v36 = pixelBuffer;
      if ((_DWORD)a2 != 1279340600)
      {
        if ((_DWORD)a2 == 1278226742)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v408 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v409 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v410 = CVPixelBufferGetBytesPerRow(buffer);
          v411 = (char *)CVPixelBufferGetBaseAddress(buffer);
          v412 = v697;
          if (v697)
          {
            v413 = 0;
            v414 = v696;
            do
            {
              if (v414)
              {
                v415 = &v411[v413 * v410];
                v416 = v414;
                v417 = &v409[v413 * v408];
                do
                {
                  v418 = *v417++;
                  *(_WORD *)v415 = v418 | (v418 << 8);
                  v415 += 2;
                  --v416;
                }
                while (v416);
              }
              ++v413;
            }
            while (v413 != v412);
          }
          goto LABEL_476;
        }
        if ((_DWORD)a2 != 843264056)
          goto LABEL_620;
      }
      v66 = buffer;
      v67 = pixelBuffer;
LABEL_287:
      v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(v67, v66);
      if ((_DWORD)v33)
        goto LABEL_621;
      goto LABEL_616;
    }
    if (PixelFormatType <= 843264309)
    {
      if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
      {
        if ((int)a2 > 1278226741)
        {
          v145 = pixelBuffer;
          if ((_DWORD)a2 != 1815491698)
          {
            v151 = 1815162994;
LABEL_299:
            if ((_DWORD)a2 != v151)
            {
              v227 = 1278226742;
LABEL_345:
              if ((_DWORD)a2 != v227)
                goto LABEL_620;
              v113 = buffer;
              v114 = v696;
              v115 = v697;
              v116 = v145;
              goto LABEL_441;
            }
          }
        }
        else
        {
          v145 = pixelBuffer;
          if ((_DWORD)a2 != 1111970369 && (_DWORD)a2 != 1278226488 && (_DWORD)a2 != 1278226736)
            goto LABEL_620;
        }
LABEL_347:
        v203 = v696;
        v204 = v697;
        v206 = a5;
        v205 = 1278226742;
LABEL_348:
        v33 = _vtWorkaroundCreatePixelBufferHelper(v206, v205, v203, v204, a3, &v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v88 = v697;
        v87 = v698;
        v89 = v696;
        v90 = v145;
LABEL_350:
        v147 = 0;
LABEL_351:
        v261 = 0;
LABEL_352:
        v33 = _directPixelBufferCopy(v90, v87, v147, v261, v89, v88);
        if ((_DWORD)v33)
          goto LABEL_621;
LABEL_353:
        v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v698, buffer);
        if ((_DWORD)v33)
          goto LABEL_621;
        goto LABEL_616;
      }
      if (PixelFormatType != 843264056)
        goto LABEL_620;
      goto LABEL_194;
    }
    if (PixelFormatType != 843264310)
    {
      if (PixelFormatType != 875704422)
      {
        v47 = 875704934;
        goto LABEL_97;
      }
      if ((int)a2 <= 1751527983)
      {
        if ((_DWORD)a2 == 1278226738)
        {
          v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
          if ((_DWORD)v33)
            goto LABEL_621;
          v316 = a15;
          v371 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
          if (!(_DWORD)v371)
          {
            CVPixelBufferLockBaseAddress(v698, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            v457 = CVPixelBufferGetBytesPerRow(v698);
            v458 = (char *)CVPixelBufferGetBaseAddress(v698);
            v459 = CVPixelBufferGetBytesPerRow(buffer);
            v460 = (char *)CVPixelBufferGetBaseAddress(buffer);
            v461 = v697;
            if (v697)
            {
              v462 = 0;
              v463 = v696;
              do
              {
                if (v463)
                {
                  v464 = &v460[v462 * v459];
                  v465 = v463;
                  v466 = &v458[v462 * v457];
                  do
                  {
                    v467 = *(_WORD *)v466;
                    v466 += 2;
                    *(_WORD *)v464 = v467 & 0xFFF0;
                    v464 += 2;
                    --v465;
                  }
                  while (v465);
                }
                ++v462;
              }
              while (v462 != v461);
            }
            goto LABEL_513;
          }
LABEL_629:
          v397 = v371;
          v29 = v316;
          goto LABEL_622;
        }
        if ((_DWORD)a2 != 1278555701)
          goto LABEL_620;
        v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v696, v697, a3, &v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v33 = _convertBGRAToL565(v698, buffer);
        if ((_DWORD)v33)
          goto LABEL_621;
        v106 = v698;
        v105 = buffer;
LABEL_540:
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v106, v105);
        goto LABEL_616;
      }
      if ((_DWORD)a2 == 1919365990)
      {
        v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v696, v697, a3, &v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v316 = a15;
        v371 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
        if (!(_DWORD)v371)
        {
          CVPixelBufferLockBaseAddress(v698, 1uLL);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v512 = 0;
          v513 = 2;
          do
          {
            v514 = CVPixelBufferGetBytesPerRowOfPlane(buffer, v512);
            v515 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, v512);
            v516 = CVPixelBufferGetBytesPerRow(v698);
            v517 = (char *)CVPixelBufferGetBaseAddress(v698);
            v518 = v697;
            if (v697)
            {
              v519 = 0;
              v520 = v696;
              v521 = &v517[v513];
              do
              {
                v522 = v521;
                v523 = v515;
                for (nn = v520; nn; --nn)
                {
                  v525 = *v522;
                  v522 += 4;
                  v526 = (double)v525 / 255.0;
                  *v523++ = v526;
                }
                ++v519;
                v515 = (float *)((char *)v515 + v514);
                v521 += v516;
              }
              while (v519 != v518);
            }
            ++v512;
            --v513;
          }
          while (v512 != 3);
          v468 = v698;
          v469 = 1;
          goto LABEL_551;
        }
        goto LABEL_629;
      }
      if ((_DWORD)a2 != 1751527984)
        goto LABEL_620;
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(buffer, 0);
      v292 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      v293 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v294 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      v295 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v296 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
      v297 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
      v298 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
      v299 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
      v302 = v697;
      if (v697)
      {
        v303 = 0;
        v304 = v696;
        do
        {
          if (v304)
          {
            v305 = &v298[v303 * v296];
            v306 = v304;
            v307 = &v294[v303 * v292];
            do
            {
              v308 = *v307++;
              _S1 = fminf((float)v308 / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              *(_WORD *)v305 = LOWORD(_S1);
              v305 += 2;
              --v306;
            }
            while (v306);
          }
          ++v303;
        }
        while (v303 != v302);
        v309 = 0;
        v310 = v696;
        do
        {
          if (v310)
          {
            for (i1 = 0; i1 < v310; i1 += 2)
            {
              v312 = &v299[2 * i1];
              LOBYTE(_S1) = v295[i1];
              _S1 = fminf((float)LODWORD(_S1) / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              LOBYTE(v301) = v295[i1 + 1];
              *(_WORD *)v312 = LOWORD(_S1);
              _S1 = fminf((float)v301 / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v312 + 1) = LOWORD(_S1);
            }
          }
          v309 += 2;
          v299 += v297;
          v295 += v293;
        }
        while (v302 > v309);
      }
LABEL_159:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(buffer, 0);
      v105 = buffer;
      v106 = pixelBuffer;
      goto LABEL_540;
    }
LABEL_108:
    if ((_DWORD)a2 != 1278226736)
    {
      if ((_DWORD)a2 == 1815491698)
      {
        v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(pixelBuffer, v698);
        if ((_DWORD)v33)
          goto LABEL_621;
        v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v698, buffer);
        if ((_DWORD)v33)
          goto LABEL_621;
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        v262 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v263 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v264 = CVPixelBufferGetBytesPerRow(buffer);
        v265 = (char *)CVPixelBufferGetBaseAddress(buffer);
        v266 = v697;
        if (v697)
        {
          v267 = 0;
          v268 = v696;
          v269 = (__int16 *)(v263 + 2);
          v270 = v265 + 6;
          do
          {
            v271 = v270;
            v272 = v269;
            for (i2 = v268; i2; --i2)
            {
              v274 = *v272;
              v272 += 2;
              *v271 = v274;
              v271 += 4;
            }
            ++v267;
            v269 = (__int16 *)((char *)v269 + v262);
            v270 = (_WORD *)((char *)v270 + v264);
          }
          while (v267 != v266);
        }
LABEL_325:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(buffer, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
        v255 = buffer;
        v256 = pixelBuffer;
LABEL_361:
        CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(v256, v255);
        goto LABEL_616;
      }
      if ((_DWORD)a2 != 1278226742)
        goto LABEL_620;
    }
    v66 = buffer;
    v67 = pixelBuffer;
    goto LABEL_287;
  }
  if (PixelFormatType <= 1380401728)
  {
    if (PixelFormatType > 1278226741)
    {
      if (PixelFormatType != 1278226742)
      {
        if (PixelFormatType == 1279340600)
        {
LABEL_194:
          if ((_DWORD)a2 != 1111970369)
          {
            v67 = pixelBuffer;
            if ((_DWORD)a2 != 1278226488)
              goto LABEL_620;
            v66 = buffer;
            goto LABEL_287;
          }
          v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226488, v696, v697, a3, &v698);
          if ((_DWORD)v33)
            goto LABEL_621;
          v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(pixelBuffer, v698);
          if ((_DWORD)v33)
            goto LABEL_621;
          v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v698, buffer);
          if ((_DWORD)v33)
            goto LABEL_621;
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v242 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v243 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v244 = CVPixelBufferGetBytesPerRow(buffer);
          v245 = (char *)CVPixelBufferGetBaseAddress(buffer);
          v246 = v697;
          if (v697)
          {
            v247 = 0;
            v248 = v696;
            v249 = v243 + 1;
            v250 = v245 + 3;
            do
            {
              if (v248)
              {
                v251 = 0;
                v252 = v250;
                v253 = v249;
                do
                {
                  v254 = *v253;
                  v253 += 2;
                  *v252 = v254;
                  v252 += 4;
                  ++v251;
                  v248 = v696;
                }
                while (v696 > v251);
                v246 = v697;
              }
              ++v247;
              v249 += v242;
              v250 += v244;
            }
            while (v246 > v247);
          }
          goto LABEL_325;
        }
        if (PixelFormatType != 1279340854)
          goto LABEL_620;
        goto LABEL_108;
      }
      if ((a2 | 2) != 0x4C303132)
        goto LABEL_620;
      goto LABEL_362;
    }
    if (PixelFormatType == 1278226536)
    {
      if ((_DWORD)a2 != 1278226534)
        goto LABEL_620;
      v33 = CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(pixelBuffer, 0, 0, 0, 0, &buffer);
      if ((_DWORD)v33)
        goto LABEL_621;
      goto LABEL_616;
    }
    if (PixelFormatType != 1278226736)
    {
      if (PixelFormatType != 1278226738)
        goto LABEL_620;
      if ((int)a2 > 1278226741)
      {
        v34 = pixelBuffer;
        if ((_DWORD)a2 != 1815491698 && (_DWORD)a2 != 1815162994)
        {
          v35 = 12598;
          goto LABEL_329;
        }
      }
      else
      {
        v34 = pixelBuffer;
        if ((_DWORD)a2 != 1111970369 && (_DWORD)a2 != 1278226488)
        {
          v35 = 12592;
LABEL_329:
          if ((_DWORD)a2 != (v35 | 0x4C300000))
            goto LABEL_620;
          v257 = buffer;
          v258 = v696;
          v259 = v697;
          v260 = v34;
LABEL_363:
          v33 = _directPixelBufferCopyForMonochrome16(v260, v257, v258, v259);
          if ((_DWORD)v33)
            goto LABEL_621;
          goto LABEL_616;
        }
      }
      v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
      if ((_DWORD)v33)
        goto LABEL_621;
      v88 = v697;
      v87 = v698;
      v89 = v696;
      v90 = v34;
      v147 = 0;
      v261 = 65472;
      goto LABEL_352;
    }
    if ((int)a2 > 1278226741)
    {
      if ((_DWORD)a2 == 1278226742)
      {
LABEL_362:
        v257 = buffer;
        v258 = v696;
        v259 = v697;
        v260 = pixelBuffer;
        goto LABEL_363;
      }
      if ((_DWORD)a2 != 1279340854)
        goto LABEL_620;
    }
    else if ((_DWORD)a2 != 843264310)
    {
      if ((_DWORD)a2 != 1278226738)
        goto LABEL_620;
      goto LABEL_362;
    }
    v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v696, v697, a3, &v698);
    if ((_DWORD)v33)
      goto LABEL_621;
    v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v698);
    if ((_DWORD)v33)
      goto LABEL_621;
    v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(v698, buffer);
    if ((_DWORD)v33)
      goto LABEL_621;
    CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
    v255 = buffer;
    v256 = pixelBuffer;
    goto LABEL_361;
  }
  if (PixelFormatType > 1650942775)
  {
    if (PixelFormatType == 1650942776)
      goto LABEL_160;
    if (PixelFormatType == 1650943796)
      goto LABEL_166;
    if (PixelFormatType != 1650946098 || (a2 - 1278226736) > 6 || ((1 << (a2 - 48)) & 0x45) == 0)
      goto LABEL_620;
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(buffer, 0);
    v91 = CVPixelBufferGetHeight(pixelBuffer);
    v92 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    v93 = (char *)CVPixelBufferGetBaseAddress(buffer);
    v94 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    v95 = CVPixelBufferGetBytesPerRow(buffer);
    if (v91)
    {
      v96 = 0;
      if ((_DWORD)a2 == 1278226736)
        v97 = 6;
      else
        v97 = 4;
      do
      {
        if (v94)
        {
          v98 = 0;
          v99 = 0;
          v100 = &v92[v96 * v94];
          do
          {
            v101 = 0;
            v102 = v100[v98 + 2];
            LOWORD(v700) = v102 & 0xF | (16 * v100[v98]);
            WORD1(v700) = (v102 >> 4) | (16 * v100[v98 + 1]);
            v103 = 1;
            do
            {
              v104 = v103;
              *(_WORD *)&v93[2 * v99++] = *((unsigned __int16 *)&v700 + v101) << v97;
              v101 = 1;
              v103 = 0;
            }
            while ((v104 & 1) != 0);
            v98 += 3;
          }
          while (v94 > v98);
        }
        ++v96;
        v93 += v95;
      }
      while (v96 != v91);
    }
    goto LABEL_159;
  }
  switch(PixelFormatType)
  {
    case 1380401729:
      if ((_DWORD)a2 != 875704422)
      {
        v36 = pixelBuffer;
        if ((_DWORD)a2 != 1111970369)
          goto LABEL_620;
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        v153 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v154 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v155 = (char *)CVPixelBufferGetBaseAddress(buffer);
        v156 = CVPixelBufferGetBytesPerRow(buffer);
        v157 = v697;
        if (v697)
        {
          v158 = 0;
          v159 = v696;
          v160 = v154 + 1;
          do
          {
            if (v159)
            {
              v161 = 0;
              v162 = &v155[v158 * v156];
              v163 = v160;
              do
              {
                *v162 = v163[1];
                v162[1] = *v163;
                v162[2] = *(v163 - 1);
                v162[3] = v163[2];
                v162 += 4;
                ++v161;
                v159 = v696;
                v163 += 4;
              }
              while (v696 > v161);
              v157 = v697;
            }
            ++v158;
            v160 += v153;
          }
          while (v157 > v158);
        }
        goto LABEL_476;
      }
      v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v696, v697, a3, &v698);
      v335 = pixelBuffer;
      if ((_DWORD)v33)
        goto LABEL_621;
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v698, 0);
      v336 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      v337 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      v338 = (char *)CVPixelBufferGetBaseAddress(v698);
      v339 = CVPixelBufferGetBytesPerRow(v698);
      v340 = v697;
      if (v697)
      {
        v341 = 0;
        v342 = v696;
        v343 = v337 + 1;
        do
        {
          if (v342)
          {
            v344 = 0;
            v345 = &v338[v341 * v339];
            v346 = v343;
            do
            {
              *v345 = v346[1];
              v345[1] = *v346;
              v345[2] = *(v346 - 1);
              v345[3] = v346[2];
              v345 += 4;
              ++v344;
              v342 = v696;
              v346 += 4;
            }
            while (v696 > v344);
            v340 = v697;
          }
          ++v341;
          v343 += v336;
        }
        while (v340 > v341);
      }
      break;
    case 1380411457:
      if ((_DWORD)a2 != 1751527984 || (v696 & 1) != 0)
        goto LABEL_620;
      v665 = a15;
      if ((v697 & 1) == 0)
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        v164 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v677 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v165 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
        v672 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
        v166 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
        v167 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
        v168 = v697;
        if (v697)
        {
          v169 = v167;
          v170 = 0;
          v171 = v696;
          do
          {
            if (v171)
            {
              v172 = &v166[v170 * v165];
              v173 = v171;
              v174 = (__int16 *)&v677[v170 * v164];
              do
              {
                _convert_one_Color_to_YCC_half(0, &v700, v174);
                *(_WORD *)v172 = v700;
                v172 += 2;
                v174 += 4;
                --v173;
              }
              while (v173);
            }
            ++v170;
          }
          while (v170 != v168);
          v682 = 0;
          v175 = v696;
          do
          {
            if (v175)
            {
              v176 = 0;
              v177 = (__int16 *)&v677[v682 * v164];
              do
              {
                v178 = &v169[2 * v176];
                _convert_one_Color_to_YCC_half(0, &v700, v177);
                _convert_one_Color_to_YCC_half(0, (_WORD *)&v700 + 3, v177 + 4);
                _convert_one_Color_to_YCC_half(0, (_WORD *)&v701 + 2, (__int16 *)((char *)v177 + v164));
                _convert_one_Color_to_YCC_half(0, &v703, (__int16 *)((char *)v177 + v164 + 8));
                _H0 = WORD1(v700);
                _H1 = v701;
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                _S0 = _S0 + _S1;
                LOWORD(_S1) = HIWORD(v701);
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = _S0 + _S1;
                __asm { FCVT            H0, S0 }
                LOWORD(_S1) = v704;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = _S0 + _S1;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                _S0 = _S0 * 0.25;
                __asm { FCVT            H0, S0 }
                *(_WORD *)v178 = LOWORD(_S0);
                LOWORD(_S0) = WORD2(v700);
                LOWORD(_S1) = WORD1(v701);
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                _S0 = _S0 + _S1;
                __asm { FCVT            H0, S0 }
                LOWORD(_S1) = v702;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = _S0 + _S1;
                __asm { FCVT            H0, S0 }
                LOWORD(_S1) = v705;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = _S0 + _S1;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                _S0 = _S0 * 0.25;
                __asm { FCVT            H0, S0 }
                *((_WORD *)v178 + 1) = LOWORD(_S0);
                v177 += 8;
                v176 += 2;
              }
              while (v175 > v176);
            }
            v169 += v672;
            v682 += 2;
          }
          while (v168 > v682);
        }
        goto LABEL_615;
      }
LABEL_628:
      v397 = FigSignalErrorAt();
      v29 = v665;
      goto LABEL_622;
    case 1647589490:
      if ((_DWORD)a2 != 2019963440)
      {
        v36 = pixelBuffer;
        if ((_DWORD)a2 == 1815491698)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v398 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v399 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v400 = CVPixelBufferGetBytesPerRow(buffer);
          v401 = (char *)CVPixelBufferGetBaseAddress(buffer);
          v402 = v697;
          if (v697)
          {
            v403 = 0;
            v404 = v696;
            do
            {
              if (v404)
              {
                v405 = &v401[v403 * v400];
                v406 = v404;
                v407 = &v399[v403 * v398];
                do
                {
                  *(_WORD *)v405 = *(_WORD *)v407;
                  *((_WORD *)v405 + 1) = *((_WORD *)v407 + 1);
                  *((_WORD *)v405 + 2) = *((_WORD *)v407 + 2);
                  *((_WORD *)v405 + 3) = -1;
                  v407 += 6;
                  v405 += 8;
                  --v406;
                }
                while (v406);
              }
              ++v403;
            }
            while (v403 != v402);
          }
          goto LABEL_476;
        }
        if ((_DWORD)a2 != 1751527984)
          goto LABEL_620;
        v48 = CVBufferCopyAttachments(pixelBuffer, kCVAttachmentMode_ShouldPropagate);
        if (v48)
        {
          v49 = v48;
          CMPhotoGetMatrixFromPixelBufferAttachments(v48);
          v50 = FigCFEqual() ? 2 : FigCFEqual() != 0;
          CFRelease(v49);
        }
        else
        {
          v50 = 0;
        }
        if ((v696 & 1) != 0)
          goto LABEL_620;
        v665 = a15;
        if ((v697 & 1) == 0)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          v589 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v686 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v590 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
          v591 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
          v593 = v697;
          if (v697)
          {
            v594 = v591;
            v595 = 0;
            v596 = v696;
            do
            {
              if (v596)
              {
                v597 = &v594[v595 * v590];
                v598 = v596;
                v599 = &v686[v595 * v589];
                do
                {
                  LOWORD(v592) = *(_WORD *)v599;
                  _S0 = (float)v592;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v693 = LOWORD(_D0);
                  LOWORD(_D0) = *((_WORD *)v599 + 1);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v694 = LOWORD(_D0);
                  LOWORD(_D0) = *((_WORD *)v599 + 2);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v695 = LOWORD(_D0);
                  v592 = _convert_one_Color_to_YCC_half(v50, &v700, &v693);
                  *(_WORD *)v597 = v700;
                  v597 += 2;
                  v599 += 6;
                  --v598;
                }
                while (v598);
              }
              ++v595;
            }
            while (v595 != v593);
          }
          v676 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
          v607 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
          v671 = v697;
          if (v697)
          {
            v609 = v607;
            v610 = 0;
            v611 = v696;
            v687 = v686 + 6;
            do
            {
              v681 = v610;
              if (v611)
              {
                v612 = 0;
                v613 = v687;
                do
                {
                  v614 = &v609[2 * v612];
                  LOWORD(_S0) = *(v613 - 3);
                  _S0 = (float)LODWORD(_S0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v693 = LOWORD(_D0);
                  LOWORD(_D0) = *(v613 - 2);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v694 = LOWORD(_D0);
                  LOWORD(_D0) = *(v613 - 1);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v695 = LOWORD(_D0);
                  LOWORD(_D0) = *v613;
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v692[0] = LOWORD(_D0);
                  LOWORD(_D0) = v613[1];
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v692[1] = LOWORD(_D0);
                  LOWORD(_D0) = v613[2];
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v692[2] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589 - 6);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v691[0] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589 - 4);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v691[1] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589 - 2);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v691[2] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v690[0] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589 + 2);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v690[1] = LOWORD(_D0);
                  LOWORD(_D0) = *(_WORD *)((char *)v613 + v589 + 4);
                  *(float *)&_D0 = (float)LODWORD(_D0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            D0, H0
                  }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v690[2] = LOWORD(_D0);
                  _convert_one_Color_to_YCC_half(v50, &v700, &v693);
                  _convert_one_Color_to_YCC_half(v50, (_WORD *)&v700 + 3, v692);
                  _convert_one_Color_to_YCC_half(v50, (_WORD *)&v701 + 2, v691);
                  _convert_one_Color_to_YCC_half(v50, &v703, v690);
                  _H0 = WORD1(v700);
                  _H1 = v701;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + _S1;
                  LOWORD(_S1) = HIWORD(v701);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S0, H0
                    FCVT            S1, H1
                  }
                  _S0 = _S0 + _S1;
                  __asm { FCVT            H0, S0 }
                  LOWORD(_S1) = v704;
                  __asm
                  {
                    FCVT            S0, H0
                    FCVT            S1, H1
                  }
                  _S0 = _S0 + _S1;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S0, H0
                  }
                  _S0 = _S0 * 0.25;
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)v614 = LOWORD(_S0);
                  LOWORD(_S0) = WORD2(v700);
                  LOWORD(_S1) = WORD1(v701);
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + _S1;
                  __asm { FCVT            H0, S0 }
                  LOWORD(_S1) = v702;
                  __asm
                  {
                    FCVT            S0, H0
                    FCVT            S1, H1
                  }
                  _S0 = _S0 + _S1;
                  __asm { FCVT            H0, S0 }
                  LOWORD(_S1) = v705;
                  __asm
                  {
                    FCVT            S0, H0
                    FCVT            S1, H1
                  }
                  _S0 = _S0 + _S1;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S0, H0
                  }
                  _S0 = _S0 * 0.25;
                  __asm { FCVT            H0, S0 }
                  *((_WORD *)v614 + 1) = LOWORD(_S0);
                  v612 += 2;
                  v613 += 6;
                }
                while (v611 > v612);
              }
              v610 = v681 + 2;
              v609 += v676;
              v687 += v589;
            }
            while (v671 > v681 + 2);
          }
LABEL_615:
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          CVPixelBufferUnlockBaseAddress(buffer, 0);
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
          v29 = v665;
          goto LABEL_616;
        }
        goto LABEL_628;
      }
      v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1815491698, v696, v697, a3, &v698);
      v335 = pixelBuffer;
      if ((_DWORD)v33)
        goto LABEL_621;
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v698, 0);
      v387 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      v388 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      v389 = CVPixelBufferGetBytesPerRow(v698);
      v390 = (char *)CVPixelBufferGetBaseAddress(v698);
      v391 = v697;
      if (v697)
      {
        v392 = 0;
        v393 = v696;
        do
        {
          if (v393)
          {
            v394 = &v390[v392 * v389];
            v395 = v393;
            v396 = &v388[v392 * v387];
            do
            {
              *(_WORD *)v394 = *(_WORD *)v396;
              *((_WORD *)v394 + 1) = *((_WORD *)v396 + 1);
              *((_WORD *)v394 + 2) = *((_WORD *)v396 + 2);
              *((_WORD *)v394 + 3) = -1;
              v396 += 6;
              v394 += 8;
              --v395;
            }
            while (v395);
          }
          ++v392;
        }
        while (v392 != v391);
      }
      break;
    default:
      goto LABEL_620;
  }
  CVPixelBufferUnlockBaseAddress(v335, 0);
  CVPixelBufferUnlockBaseAddress(v698, 0);
  CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v335, v698);
  v397 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v698, buffer);
  if (!(_DWORD)v397)
    goto LABEL_616;
LABEL_622:
  if (buffer && buffer != *v29)
    CFRelease(buffer);
LABEL_617:
  if (v698)
    CFRelease(v698);
  return v397;
}

uint64_t _vtWorkaroundCreatePixelBufferHelper(int a1, uint64_t a2, size_t a3, size_t a4, uint64_t a5, CVPixelBufferRef *a6)
{
  if (a1)
    return CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), a2, a3, a4, 1, 0, 0, 1, a5, 0, a6);
  else
    return CMPhotoCreateCVPixelBufferNotBackedByIOSurface(0, a2, a3, a4, 0, 0, a5, 0, a6);
}

uint64_t _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(__CVBuffer *a1, __CVBuffer *a2)
{
  signed int PixelFormatType;
  uint64_t v5;
  size_t v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char BitDepthForPixelFormat;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  __int16 v26;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  __int16 v37;
  BOOL v38;
  size_t v39;
  char *v40;
  size_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;

  if (a1 && a2)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v5 = CVPixelBufferGetPixelFormatType(a2);
    v53 = 0;
    v54 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v53, &v54);
    v51 = 0;
    v52 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v51, &v52);
    if (v53 != v51 || v54 != v52)
      return FigSignalErrorAt();
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (PixelFormatType > 1278226741)
    {
      if (PixelFormatType == 1278226742)
      {
        if ((_DWORD)v5 == 1279340854 || (_DWORD)v5 == 843264310)
        {
          BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
          v29 = CVPixelBufferGetBytesPerRow(a2);
          v30 = (char *)CVPixelBufferGetBaseAddress(a2);
          v31 = v54;
          if (v54)
          {
            v32 = 0;
            v33 = v53;
            do
            {
              if (v33)
              {
                v34 = &v30[v32 * v29];
                v35 = v33;
                v36 = &BaseAddress[v32 * BytesPerRow];
                do
                {
                  v37 = *(_WORD *)v36;
                  v36 += 2;
                  *(_WORD *)v34 = v37;
                  *((_WORD *)v34 + 1) = -1;
                  v34 += 4;
                  --v35;
                }
                while (v35);
              }
              ++v32;
            }
            while (v32 != v31);
          }
          goto LABEL_52;
        }
        goto LABEL_39;
      }
      if (PixelFormatType != 1279340854)
      {
LABEL_39:
        v38 = PixelFormatType == 1279340600 || PixelFormatType == 843264056;
        if (!v38 || (_DWORD)v5 != 1278226488)
        {
          v49 = FigSignalErrorAt();
          goto LABEL_54;
        }
        v39 = CVPixelBufferGetBytesPerRow(a1);
        v40 = (char *)CVPixelBufferGetBaseAddress(a1);
        v41 = CVPixelBufferGetBytesPerRow(a2);
        v42 = CVPixelBufferGetBaseAddress(a2);
        v43 = v54;
        if (v54)
        {
          v44 = 0;
          v45 = v53;
          do
          {
            if (v45)
            {
              v46 = 0;
              v47 = &v40[v44 * v39];
              do
              {
                v48 = *v47;
                v47 += 2;
                v42[v46++] = v48;
                v45 = v53;
              }
              while (v53 > v46);
              v43 = v54;
            }
            ++v44;
            v42 += v41;
          }
          while (v43 > v44);
        }
LABEL_52:
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(a1, a2);
        CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(a1, a2);
        v49 = 0;
LABEL_54:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        CVPixelBufferUnlockBaseAddress(a2, 0);
        return v49;
      }
    }
    else if (PixelFormatType != 843264310)
    {
      if (PixelFormatType == 1278226488 && ((_DWORD)v5 == 1279340600 || (_DWORD)v5 == 843264056))
      {
        v6 = CVPixelBufferGetBytesPerRow(a1);
        v7 = CVPixelBufferGetBaseAddress(a1);
        v8 = CVPixelBufferGetBytesPerRow(a2);
        v9 = (char *)CVPixelBufferGetBaseAddress(a2);
        v10 = v54;
        if (v54)
        {
          v11 = 0;
          v12 = v53;
          do
          {
            if (v12)
            {
              v13 = 0;
              v14 = &v9[v11 * v8];
              do
              {
                *v14 = v7[v13];
                v14[1] = -1;
                v14 += 2;
                ++v13;
                v12 = v53;
              }
              while (v53 > v13);
              v10 = v54;
            }
            ++v11;
            v7 += v6;
          }
          while (v10 > v11);
        }
        goto LABEL_52;
      }
      goto LABEL_39;
    }
    if ((_DWORD)v5 == 1278226742 || (_DWORD)v5 == 1278226736)
    {
      v15 = CVPixelBufferGetBytesPerRow(a1);
      v16 = (char *)CVPixelBufferGetBaseAddress(a1);
      v17 = CVPixelBufferGetBytesPerRow(a2);
      v18 = (char *)CVPixelBufferGetBaseAddress(a2);
      BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v5);
      v20 = v54;
      if (v54)
      {
        v21 = 0;
        v22 = v53;
        do
        {
          if (v22)
          {
            v23 = &v18[v21 * v17];
            v24 = v22;
            v25 = &v16[v21 * v15];
            do
            {
              v26 = *(_WORD *)v25;
              v25 += 4;
              *(_WORD *)v23 = v26 & (-1 << (16 - BitDepthForPixelFormat));
              v23 += 2;
              --v24;
            }
            while (v24);
          }
          ++v21;
        }
        while (v21 != v20);
      }
      goto LABEL_52;
    }
    goto LABEL_39;
  }
  return FigSignalErrorAt();
}

uint64_t _vtTransferHelperForWorkaround(int a1, int a2, int a3, int a4, __CVBuffer *a5, __CVBuffer *a6)
{
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  VTPixelTransferSessionRef v15;
  double PixelBufferSize;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  pixelTransferSessionOut = 0;
  if (!a5)
    return FigSignalErrorAt();
  if (a6)
  {
    v12 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
    if (!(_DWORD)v12)
    {
      v12 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]);
      if (!(_DWORD)v12)
      {
        v13 = CVBufferCopyAttachment(a6, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
        v14 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED7B8], v13);
        if (!(_DWORD)v14)
        {
          v15 = pixelTransferSessionOut;
          PixelBufferSize = CMPhotoGetPixelBufferSize(a5);
          v18 = v17;
          v19 = CMPhotoGetPixelBufferSize(a6);
          v14 = CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(v15, a1, a2, a3, a4, 0, PixelBufferSize, v18, v19, v20);
          if (!(_DWORD)v14)
            v14 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a5, a6);
        }
        v21 = v14;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  v21 = v12;
  v13 = 0;
LABEL_9:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v13)
    CFRelease(v13);
  return v21;
}

uint64_t _convert8bitsRAWTo8BitsReadableFormat(int a1, int a2, int a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, int a6)
{
  signed int PixelFormatType;
  OSType v13;
  int v14;
  uint64_t v15;
  int v16;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v19;
  char *v20;
  char *v21;
  size_t i;
  uint64_t v23;
  int v25;
  size_t __n;
  size_t v27;
  CVPixelBufferRef pixelBuffera;

  v27 = 0;
  pixelBuffera = 0;
  __n = 0;
  if (!pixelBuffer || !a5)
    goto LABEL_19;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v13 = CVPixelBufferGetPixelFormatType(a5);
  CMPhotoGetPixelBufferCLAP(pixelBuffer, 0, 0, &__n, &v27);
  if (PixelFormatType > 1734501175)
  {
    if (PixelFormatType == 1734501176 || PixelFormatType == 1735549752)
      goto LABEL_11;
    v14 = 1919378232;
  }
  else
  {
    if (PixelFormatType == 1650942776 || PixelFormatType == 1651925816)
      goto LABEL_11;
    v14 = 1652056888;
  }
  if (PixelFormatType != v14)
  {
LABEL_19:
    v15 = FigSignalErrorAt();
    goto LABEL_20;
  }
LABEL_11:
  if (v13 != 875704422 && v13 != 1278226488 && v13 != 1111970369)
    goto LABEL_19;
  v15 = _vtWorkaroundCreatePixelBufferHelper(a6, 1278226488, __n, v27, 64, &pixelBuffera);
  if (!(_DWORD)v15)
  {
    v25 = a6;
    v16 = a3;
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    v19 = CVPixelBufferGetBytesPerRow(pixelBuffera);
    v20 = (char *)CVPixelBufferGetBaseAddress(pixelBuffera);
    if (v27)
    {
      v21 = v20;
      for (i = 0; i < v27; ++i)
      {
        memcpy(v21, BaseAddress, __n);
        v21 += v19;
        BaseAddress += BytesPerRow;
      }
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
    v15 = _vtTransferHelperForWorkaround(a1, a2, v16, v25, pixelBuffera, a5);
  }
LABEL_20:
  v23 = v15;
  if (pixelBuffera)
    CFRelease(pixelBuffera);
  return v23;
}

uint64_t _directPixelBufferCopy(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  size_t BytesPerRowOfPlane;
  size_t v14;
  char *BaseAddressOfPlane;
  char *v16;
  size_t BytesPerRow;
  size_t v18;
  char *BaseAddress;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int16 v30;
  OSType PixelFormatType;
  uint64_t BytesPerPixelForPixelFormat;
  size_t v33;

  result = 4294950306;
  if (pixelBuffer && a2)
  {
    if (a3 && a4)
    {
      return FigSignalErrorAt();
    }
    else
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      if (CVPixelBufferIsPlanar(pixelBuffer))
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      else
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
      v14 = BytesPerRowOfPlane;
      if (CVPixelBufferIsPlanar(pixelBuffer))
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      else
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      v16 = BaseAddressOfPlane;
      if (CVPixelBufferIsPlanar(a2))
        BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      else
        BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
      v18 = BytesPerRow;
      if (CVPixelBufferIsPlanar(a2))
        BaseAddress = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      else
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
      v20 = BaseAddress;
      if (a3)
      {
        if (a6)
        {
          v21 = 0;
          do
          {
            if (a5)
            {
              v22 = &BaseAddress[v21 * v18];
              v23 = a5;
              v24 = &v16[v21 * v14];
              do
              {
                v25 = *(unsigned __int16 *)v24;
                v24 += 2;
                *(_WORD *)v22 = v25 << a3;
                v22 += 2;
                --v23;
              }
              while (v23);
            }
            ++v21;
          }
          while (v21 != a6);
        }
      }
      else if (a4)
      {
        if (a6)
        {
          v26 = 0;
          do
          {
            if (a5)
            {
              v27 = &BaseAddress[v26 * v18];
              v28 = a5;
              v29 = &v16[v26 * v14];
              do
              {
                v30 = *(_WORD *)v29;
                v29 += 2;
                *(_WORD *)v27 = v30 & a4;
                v27 += 2;
                --v28;
              }
              while (v28);
            }
            ++v26;
          }
          while (v26 != a6);
        }
      }
      else
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
        BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
        if (a6)
        {
          v33 = BytesPerPixelForPixelFormat * a5;
          do
          {
            memcpy(v20, v16, v33);
            v16 += v14;
            v20 += v18;
            --a6;
          }
          while (a6);
        }
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, a2);
      return 0;
    }
  }
  return result;
}

uint64_t _directPixelBufferCopyForMonochrome16(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t PixelFormatType;
  unint64_t BitDepthForPixelFormat;
  uint64_t v11;
  unint64_t v12;
  size_t BytesPerRowOfPlane;
  size_t v14;
  char *BaseAddressOfPlane;
  char *v16;
  size_t BytesPerRow;
  size_t v18;
  unint64_t v19;
  char v20;
  char *BaseAddress;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int16 v33;
  OSType v34;
  uint64_t BytesPerPixelForPixelFormat;
  size_t v36;
  __CVBuffer *pixelBuffera;

  result = 4294950306;
  if (pixelBuffer && a2)
  {
    if ((CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226488
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226736
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226738
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226742)
      && (CVPixelBufferGetPixelFormatType(a2) == 1278226488
       || CVPixelBufferGetPixelFormatType(a2) == 1278226736
       || CVPixelBufferGetPixelFormatType(a2) == 1278226738
       || CVPixelBufferGetPixelFormatType(a2) == 1278226742))
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
      BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
      v11 = CVPixelBufferGetPixelFormatType(a2);
      v12 = CMPhotoGetBitDepthForPixelFormat(v11);
      result = 4294950306;
      if (BitDepthForPixelFormat >= 9 && v12 >= 9)
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        if (CVPixelBufferIsPlanar(pixelBuffer))
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        else
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v14 = BytesPerRowOfPlane;
        if (CVPixelBufferIsPlanar(pixelBuffer))
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
        else
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v16 = BaseAddressOfPlane;
        if (CVPixelBufferIsPlanar(a2))
          BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
        else
          BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
        v18 = BytesPerRow;
        v19 = v12;
        v20 = 16 - v12;
        pixelBuffera = a2;
        if (CVPixelBufferIsPlanar(a2))
          BaseAddress = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        else
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
        v22 = BaseAddress;
        v23 = -1 << v20;
        if (v19 <= BitDepthForPixelFormat)
        {
          if (v19 >= BitDepthForPixelFormat)
          {
            v34 = CVPixelBufferGetPixelFormatType(pixelBuffer);
            BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v34);
            if (a4)
            {
              v36 = BytesPerPixelForPixelFormat * a3;
              do
              {
                memcpy(v22, v16, v36);
                v16 += v14;
                v22 += v18;
                --a4;
              }
              while (a4);
            }
          }
          else if (a4)
          {
            v29 = 0;
            do
            {
              if (a3)
              {
                v30 = &BaseAddress[v29 * v18];
                v31 = a3;
                v32 = &v16[v29 * v14];
                do
                {
                  v33 = *(_WORD *)v32;
                  v32 += 2;
                  *(_WORD *)v30 = v33 & v23;
                  v30 += 2;
                  --v31;
                }
                while (v31);
              }
              ++v29;
            }
            while (v29 != a4);
          }
        }
        else if (a4)
        {
          v24 = 0;
          do
          {
            if (a3)
            {
              v25 = &BaseAddress[v24 * v18];
              v26 = a3;
              v27 = &v16[v24 * v14];
              do
              {
                v28 = *(unsigned __int16 *)v27;
                v27 += 2;
                *(_WORD *)v25 = ((((~(-1 << (v19 - BitDepthForPixelFormat)) << (16 - (v19 - BitDepthForPixelFormat))) & (-1 << (16 - BitDepthForPixelFormat)) & v28) >> BitDepthForPixelFormat) | (-1 << (16 - BitDepthForPixelFormat)) & v28) & v23;
                v25 += 2;
                --v26;
              }
              while (v26);
            }
            ++v24;
          }
          while (v24 != a4);
        }
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
        return 0;
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

__int16 _convert_one_Color_to_YCC_half@<H0>(int a1@<W0>, _WORD *a2@<X1>, __int16 *a3@<X2>)
{
  float v14;
  double v16;
  float v19;
  __int16 result;

  _H6 = *a3;
  __asm { FCVT            S4, H6 }
  _H0 = a3[1];
  __asm { FCVT            S1, H0 }
  _H3 = a3[2];
  __asm { FCVT            S2, H3 }
  if (a1 == 2)
  {
    _S0 = (float)((float)(_S1 * 0.7152) + (float)(_S4 * 0.2126)) + (float)(_S2 * 0.0722);
    v14 = (float)((float)(_S1 * -0.38543) + (float)(_S4 * -0.11457)) + (float)(_S2 * 0.5);
    __asm { FCVT            D2, H3 }
    v16 = (float)((float)(_S1 * -0.45415) + (float)(_S4 * 0.5)) + _D2 * -0.045847;
  }
  else
  {
    _S0 = (float)((float)(_S1 * 0.587) + (float)(_S4 * 0.299)) + (float)(_S2 * 0.114);
    __asm { FCVT            D3, H3 }
    v14 = (float)((float)(_S1 * -0.33126) + (float)(_S4 * -0.16874)) + _D3 * 0.5;
    __asm { FCVT            D3, H6 }
    v16 = (float)(_S1 * -0.41869) + _D3 * 0.5 + (float)(_S2 * -0.081312);
  }
  v19 = v16;
  if (_S0 < 0.0)
    _S0 = 0.0;
  if (_S0 > 1.0)
    _S0 = 1.0;
  __asm { FCVT            H0, S0 }
  *a2 = _H0;
  _D0 = v14;
  if (v14 < -0.5)
    _D0 = -0.5;
  if (_D0 >= 0.5)
    _D0 = 0.5;
  __asm { FCVT            H0, D0 }
  a2[1] = _H0;
  _D0 = v19;
  if (v19 < -0.5)
    _D0 = -0.5;
  if (_D0 >= 0.5)
    _D0 = 0.5;
  __asm { FCVT            H0, D0 }
  a2[2] = result;
  return result;
}

void _framePacked2Linear(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, char a7)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  _WORD *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t __n;
  uint64_t v26;
  _WORD __src[3];

  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = a3 << a7;
    LODWORD(v14) = (a3 << a7) / 3u;
    v15 = (a3 << a7) % 3u;
    if (v14 <= 1)
      v14 = 1;
    else
      v14 = v14;
    v26 = v14;
    v16 = a4;
    v24 = a2 + 4;
    __n = 2 * (v15 - 1) + 2;
    do
    {
      if (v13 >= 3)
      {
        v18 = (unsigned int *)(a1 + v11);
        v19 = v26;
        v20 = (_WORD *)(v24 + v10);
        do
        {
          v21 = *v18++;
          *v20 = (v21 >> 14) & 0xFFC0;
          *(v20 - 1) = (v21 >> 4) & 0xFFC0;
          *(v20 - 2) = (_WORD)v21 << 6;
          v20 += 3;
          --v19;
        }
        while (v19);
        v17 = v26;
        if (v15)
        {
LABEL_12:
          if (v15 >= 1)
            bzero(__src, __n);
          v22 = *(_DWORD *)(a1 + (v12 * a5) + 4 * v17);
          __src[2] = (v22 >> 14) & 0xFFC0;
          __src[1] = (v22 >> 4) & 0xFFC0;
          __src[0] = (_WORD)v22 << 6;
          if (v15 >= 1)
            memcpy((void *)(a2 + (v12 * a6) + 6 * v17), __src, __n);
        }
      }
      else
      {
        v17 = 0;
        if (v15)
          goto LABEL_12;
      }
      ++v12;
      v11 += a5;
      v10 += a6;
    }
    while (v12 != v16);
  }
}

uint64_t _frameLinear2Packed(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, char a7)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  unsigned __int16 v21;
  unsigned int v22;
  int v23;
  unsigned __int16 v24;

  if (a4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a3 << a7;
    LODWORD(v11) = (a3 << a7) / 3u;
    v12 = 3 * v11;
    v13 = (a3 << a7) % 3u;
    if (v11 <= 1)
      v11 = 1;
    else
      v11 = v11;
    v14 = 3 * (((a3 << a7) * (unsigned __int128)0x5555555555555556uLL) >> 64);
    do
    {
      if (v10 >= 3)
      {
        v16 = (int *)(a2 + v8);
        v17 = v11;
        v18 = (unsigned __int16 *)(result + 4 + v7);
        do
        {
          *v16++ = (*v18 << 14) & 0x3FF00000 | (((*(v18 - 1) >> 6) & 0x3FF) << 10) | (*(v18 - 2) >> 6);
          v18 += 3;
          --v17;
        }
        while (v17);
        v15 = v11;
      }
      else
      {
        v15 = 0;
      }
      if (v10 != v12)
      {
        v24 = 0;
        v23 = 0;
        if (v13 < 1)
        {
          v22 = 0;
          v21 = 0;
          v20 = 0;
        }
        else
        {
          v19 = 0;
          do
          {
            *((_WORD *)&v23 + v19) = *(_WORD *)(result + (v9 * a5) + 2 * (v14 + v19));
            ++v19;
          }
          while (v14 - v10 + v19);
          v20 = v24;
          v21 = HIWORD(v23);
          v22 = (unsigned __int16)v23;
        }
        *(_DWORD *)(a2 + (v9 * a6) + 4 * v15) = (v20 << 14) & 0x3FF00000 | (v21 >> 6 << 10) | (v22 >> 6);
      }
      ++v9;
      v8 += a6;
      v7 += a5;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t _convertBGRAToL565(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v2;
  unint64_t v5;
  double v6;
  unint64_t v7;
  double PixelBufferSize;
  double v9;
  unint64_t v10;
  uint64_t PixelBufferDataPointers;
  uint64_t i;
  _BYTE *v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v2 = 4294950306;
  if (a1
    && a2
    && CVPixelBufferGetPixelFormatType(a1) == 1111970369
    && CVPixelBufferGetPixelFormatType(a2) == 1278555701)
  {
    v5 = vcvtad_u64_f64(CMPhotoGetPixelBufferSize(a1));
    v7 = vcvtad_u64_f64(v6);
    PixelBufferSize = CMPhotoGetPixelBufferSize(a2);
    v10 = vcvtad_u64_f64(v9);
    if (v5 == vcvtad_u64_f64(PixelBufferSize) && v7 == v10)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      v25[0] = 0;
      v25[1] = 0;
      v24[0] = 0;
      v24[1] = 0;
      PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, 0, 0, 0, (uint64_t)v25, (uint64_t)v24, 0);
      if ((_DWORD)PixelBufferDataPointers
        || (v23[0] = 0,
            v23[1] = 0,
            v22[0] = 0,
            v22[1] = 0,
            PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, 0, 0, 0, (uint64_t)v23, (uint64_t)v22, 0), (_DWORD)PixelBufferDataPointers))
      {
        v2 = PixelBufferDataPointers;
      }
      else
      {
        if (v7)
        {
          for (i = 0; i != v7; ++i)
          {
            if (v5)
            {
              v14 = (_BYTE *)(v23[0] + v22[0] * i);
              v15 = (unsigned int *)(v25[0] + v24[0] * i);
              v16 = v5;
              do
              {
                v17 = *v15++;
                v18 = ((v17 & 0xFC) + 4) >> 3;
                v19 = (((v17 >> 8) & 0xFE) + 2) >> 2;
                v20 = ((HIWORD(v17) & 0xFC) + 4) >> 3;
                if (v18 >= 0x1F)
                  LOBYTE(v18) = 31;
                if (v19 >= 0x3F)
                  LOWORD(v19) = 63;
                if (v20 >= 0x1F)
                  LOWORD(v20) = 31;
                *v14 = v18 | (32 * v19);
                v14[1] = (unsigned __int16)(((_WORD)v20 << 11) | (32 * v19)) >> 8;
                v14 += 2;
                --v16;
              }
              while (v16);
            }
          }
        }
        v2 = 0;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
    }
  }
  return v2;
}

uint64_t CMPhotoCodecSessionPool_CleanupTimerHandler(uint64_t a1)
{
  uint64_t result;
  const __CFArray *v3;
  _BOOL4 v4;
  const __CFArray *v5;
  int v6;
  _BOOL4 v7;
  void *v8;
  _BOOL4 v9;
  dispatch_time_t v10;

  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 152) != -1)
    {
      v10 = dispatch_time(0, 0);
      CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(a1 + 48), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale, (uint64_t)&v10, 0);
      v10 = dispatch_time(0, 0);
      CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(a1 + 88), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale, (uint64_t)&v10, 0);
      v3 = *(const __CFArray **)(a1 + 56);
      if (v3 && CFArrayGetCount(v3))
      {
        v4 = 0;
      }
      else
      {
        v5 = *(const __CFArray **)(a1 + 96);
        if (v5)
          v4 = CFArrayGetCount(v5) == 0;
        else
          v4 = 1;
      }
      v6 = *(unsigned __int8 *)(a1 + 128);
      if (!*(_BYTE *)(a1 + 128))
      {
        if (*(_BYTE *)(a1 + 16))
          v7 = 0;
        else
          v7 = v4;
        if (v7)
        {
          dispatch_suspend(*(dispatch_object_t *)(a1 + 136));
          v6 = 1;
          *(_BYTE *)(a1 + 128) = 1;
        }
        else
        {
          v6 = 0;
        }
      }
      v8 = *(void **)(a1 + 176);
      if (v8)
        v9 = v4;
      else
        v9 = 0;
      if (v9)
      {
        objc_msgSend(v8, "unregisterBackgroundNotificationForContext:", a1);
        objc_msgSend(*(id *)(a1 + 176), "releaseAssertionForContext:", a1);
      }
      else if (v8)
      {
        if (!v6)
        {
          objc_msgSend(*(id *)(a1 + 176), "takeAssertionUntilTime:forContext:", dispatch_time(0, *(_QWORD *)(a1 + 152) + 5000000000), a1);
          objc_msgSend(*(id *)(a1 + 176), "registerBackgroundNotificationHandlerForContext:handler:", a1, *(_QWORD *)(a1 + 184));
        }
      }
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  }
  return result;
}

intptr_t CMPhotoCodecSessionPool_CleanupTimerCanceled(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 168));
}

uint64_t CMPhotoCodecSessionPoolFlush(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, (void (*)(void))_once_setDefaultPool);
    v3 = defaultPool;
    if (!defaultPool)
      return 4294950305;
  }
  v4 = pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 24));
  if ((_DWORD)v4)
    return v4;
  if ((a2 & 1) == 0)
    goto LABEL_7;
  v5 = CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(v3 + 48), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 0);
  if (!(_DWORD)v5)
  {
    CodecSessionPool_MarkAllSessionsForNonReuse(v3 + 48);
LABEL_7:
    if ((a2 & 2) != 0)
    {
      v6 = CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(v3 + 88), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 0);
      if (!(_DWORD)v6)
        CodecSessionPool_MarkAllSessionsForNonReuse(v3 + 88);
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_11;
  }
  v6 = v5;
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 24));
  return v6;
}

uint64_t CodecSessionPool_MarkAllSessionsForNonReuse(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;
  const void *ValueAtIndex;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
      result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), ValueAtIndex);
      if (result)
        *(_BYTE *)(result + 49) = 1;
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolCreateEncoderSpecification(const __CFAllocator *a1, int a2, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  BOOL v7;
  const void *v8;
  const void *v9;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v6 = Mutable;
  v7 = a2 == 2 || a2 == 0;
  v8 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v7)
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDD20], v9);
  if (a2 == 2)
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CEDD38], v8);
  result = 0;
  *a3 = v6;
  return result;
}

uint64_t CMPhotoCodecSessionPoolCreateCompressionSession(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, char a7, char a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, _BYTE *a18)
{
  CFTypeRef v25;
  const __CFAllocator *v26;
  CFDataRef v27;
  uint64_t v28;
  VTSessionRef v29;
  uint64_t v30;
  OSStatus v31;
  char v33;
  uint64_t v34;
  const __CFAllocator *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  CFDictionaryRef supportedPropertyDictionaryOut;
  VTSessionRef session;
  _BYTE bytes[21];
  int v43;
  int v44;
  unsigned int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  if (cf)
  {
    v25 = cf;
    supportedPropertyDictionaryOut = 0;
    session = 0;
    v39 = 0;
  }
  else
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    v25 = (CFTypeRef)defaultPool;
    supportedPropertyDictionaryOut = 0;
    session = 0;
    v39 = 0;
    if (!defaultPool)
    {
      v27 = 0;
      v30 = 4294950305;
      goto LABEL_25;
    }
  }
  if (!a15)
  {
    v27 = 0;
    v30 = 4294950306;
    goto LABEL_23;
  }
  if (!a17)
  {
    v27 = 0;
LABEL_22:
    v30 = 0;
    goto LABEL_23;
  }
  v34 = (uint64_t)v25;
  v26 = CFGetAllocator(v25);
  *(_OWORD *)bytes = *(_OWORD *)a2;
  *(_QWORD *)&bytes[13] = *(_QWORD *)(a2 + 13);
  v43 = a3;
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v33 = a7;
  v47 = a7;
  v48 = a8;
  v49 = a9;
  v50 = a10;
  v51 = a11;
  v52 = a12;
  v53 = a13;
  v54 = a14;
  v27 = CFDataCreate(v26, bytes, 69);
  if (v27)
  {
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
    v35 = v26;
    LODWORD(v36) = *(_DWORD *)a2;
    *((_QWORD *)&v36 + 1) = a3;
    *(_QWORD *)&v37 = a4;
    *((_QWORD *)&v37 + 1) = __PAIR64__(a6, a5);
    LOBYTE(v38) = v33;
    v28 = CMPhotoCodecSessionPool_CreateSession(v34, 0, v27, a15, a16, (uint64_t (*)(_QWORD *, uint64_t, void **))_callback_CreateCompressionSession, (uint64_t)&v35, (void **)&session, &v39);
    if (!(_DWORD)v28)
    {
      v29 = session;
      if (v39
        || (v31 = VTSessionCopySupportedPropertyDictionary(session, &supportedPropertyDictionaryOut), v31 == -12900)
        || !v31)
      {
LABEL_9:
        *a17 = v29;
        session = 0;
        if (a18)
        {
          v30 = 0;
          *a18 = v39;
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      v28 = CMPhotoCodecSessionPoolRecycleSession(v34, v29, 1);
      if (!(_DWORD)v28)
      {
        if (v29)
        {
          CFRelease(v29);
          session = 0;
        }
        v28 = CMPhotoCodecSessionPoolFlush(v34, 3);
        if (!(_DWORD)v28)
        {
          v28 = CMPhotoCodecSessionPool_CreateSession(v34, 0, v27, a15, a16, (uint64_t (*)(_QWORD *, uint64_t, void **))_callback_CreateCompressionSession, (uint64_t)&v35, (void **)&session, &v39);
          if (!(_DWORD)v28)
          {
            v29 = session;
            goto LABEL_9;
          }
        }
      }
    }
    v30 = v28;
    goto LABEL_23;
  }
  v30 = 4294950305;
LABEL_23:
  if (supportedPropertyDictionaryOut)
    CFRelease(supportedPropertyDictionaryOut);
LABEL_25:
  if (session)
    CFRelease(session);
  if (v27)
    CFRelease(v27);
  return v30;
}

uint64_t _callback_CreateCompressionSession(void *a1, uint64_t a2, VTCompressionSessionRef *a3)
{
  const __CFAllocator *v6;
  CMVideoCodecType v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CFNumberRef v12;
  CFNumberRef v13;
  void *v14;
  const __CFDictionary *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  CFDictionaryRef encoderSpecification;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  encoderSpecification = 0;
  v6 = *(const __CFAllocator **)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 32);
  v11 = CMPhotoCodecSessionPoolCreateEncoderSpecification(*(const __CFAllocator **)a2, *(_DWORD *)(a2 + 36), &encoderSpecification);
  if ((_DWORD)v11)
  {
    v18 = v11;
  }
  else
  {
    valuePtr = v10;
    v12 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
    if (v12)
    {
      v13 = v12;
      v14 = (void *)*MEMORY[0x1E0CA9040];
      values = v12;
      keys[0] = v14;
      v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFRelease(v13);
      if (v15)
      {
        v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        v17 = *MEMORY[0x1E0CA1FC0];
        if (*(_BYTE *)(a2 + 40))
        {
          if (v17 == 1)
            kdebug_trace();
          v18 = VTTileCompressionSessionCreate();
          if (*v16 != 1)
            goto LABEL_13;
        }
        else
        {
          if (v17 == 1)
            kdebug_trace();
          v18 = VTCompressionSessionCreate(v6, v8, v9, v7, encoderSpecification, v15, v6, (VTCompressionOutputCallback)VTCompressionOutputCallback_Gateway, a1, a3);
          if (*v16 != 1)
            goto LABEL_13;
        }
        kdebug_trace();
LABEL_13:
        CFRelease(v15);
        goto LABEL_14;
      }
    }
    v18 = 4294950305;
  }
LABEL_14:
  if (encoderSpecification)
    CFRelease(encoderSpecification);
  return v18;
}

uint64_t CMPhotoCodecSessionPoolCheckIfCompressionSessionReusable(uint64_t a1, const void *a2, uint64_t a3, int a4, int a5, int a6, char a7, char a8, char a9, int a10, char a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, _BYTE *a16)
{
  uint64_t v16;
  const __CFAllocator *v24;
  CFDataRef v25;
  CFDataRef v26;
  uint64_t v27;
  _QWORD *Value;
  char v29;
  _BYTE bytes[21];
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  v16 = 4294950306;
  if (a1 && a2)
  {
    v24 = CFGetAllocator((CFTypeRef)a1);
    *(_OWORD *)bytes = *(_OWORD *)a3;
    *(_QWORD *)&bytes[13] = *(_QWORD *)(a3 + 13);
    v33 = a4;
    v34 = a5;
    v35 = a6;
    v36 = a7;
    v37 = a8;
    v38 = a9;
    v39 = a10;
    v40 = a11;
    v41 = a12;
    v42 = a13;
    v43 = a14;
    v44 = a15;
    v25 = CFDataCreate(v24, bytes, 69);
    if (v25)
    {
      v26 = v25;
      v27 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
      if ((_DWORD)v27)
      {
        v16 = v27;
      }
      else
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
        if (Value && Value[4])
        {
          v29 = FigCFEqual();
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
          v16 = 0;
          if (a16)
            *a16 = v29;
        }
        else
        {
          v16 = FigSignalErrorAt();
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        }
      }
      CFRelease(v26);
    }
    else
    {
      return 4294950305;
    }
  }
  return v16;
}

uint64_t CMPhotoCodecSessionPoolSetDecompressionSessionAttachment(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t result;
  __CFDictionary **Value;
  __CFDictionary **v10;
  __CFDictionary *MutableCopyWithCFTypeCallbacks;

  if (!a3)
    return 4294950306;
  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!(_DWORD)result)
  {
    Value = (__CFDictionary **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
    if (Value)
    {
      v10 = Value;
      MutableCopyWithCFTypeCallbacks = Value[5];
      if (MutableCopyWithCFTypeCallbacks
        || (CFGetAllocator((CFTypeRef)a1),
            MutableCopyWithCFTypeCallbacks = (__CFDictionary *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks(),
            (v10[5] = MutableCopyWithCFTypeCallbacks) != 0))
      {
        if (a4)
          CFDictionarySetValue(MutableCopyWithCFTypeCallbacks, a3, a4);
        else
          CFDictionaryRemoveValue(MutableCopyWithCFTypeCallbacks, a3);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        return 0;
      }
      else
      {
        return 4294950305;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolCopyDecompressionSessionAttachments(uint64_t a1, const void *a2, CFDictionaryRef *a3)
{
  uint64_t result;
  _QWORD *Value;
  _QWORD *v8;
  const __CFAllocator *v9;
  CFDictionaryRef Copy;

  if (!a3)
    return 0;
  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!(_DWORD)result)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
    if (Value)
    {
      v8 = Value;
      if (Value[5])
      {
        v9 = CFGetAllocator((CFTypeRef)a1);
        Copy = CFDictionaryCreateCopy(v9, (CFDictionaryRef)v8[5]);
      }
      else
      {
        Copy = 0;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
      result = 0;
      *a3 = Copy;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolClass_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  uint64_t result;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __CMPhotoCodecSessionPoolClass_Finalize_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v2, block);
  if (*(_QWORD *)(a1 + 136))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 168), 0xFFFFFFFFFFFFFFFFLL);
    v3 = *(NSObject **)(a1 + 136);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(a1 + 136) = 0;
    }
  }
  v4 = *(NSObject **)(a1 + 168);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 144);
  if (v5)
    dispatch_release(v5);
  v6 = *(void **)(a1 + 176);
  if (v6)
  {
    objc_msgSend(v6, "unregisterBackgroundNotificationForContext:", a1);
    objc_msgSend(*(id *)(a1 + 176), "releaseAssertionForContext:", a1);
    objc_msgSend(*(id *)(a1 + 176), "waitForPendingNotifications");

  }
  CodecSessionPool_Destroy((CFTypeRef *)(a1 + 48));
  CodecSessionPool_Destroy((CFTypeRef *)(a1 + 88));
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

CFTypeRef CMPhotoCodecSessionPoolClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoCodecSessionPool]"));
}

__CFString *CMPhotoCodecSessionPool_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  CFIndex Count;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  CFIndex v10;
  dispatch_time_t v11;
  uint64_t context;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<CMPhotoCodecSessionPool %p> {\n"), a1);
    if (!pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24)))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
      context = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 104), (CFDictionaryApplierFunction)CodecSessionPool_GetIdleSessionCountApplier, &context);
      v6 = context;
      v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 120));
      CFStringAppendFormat(v4, 0, CFSTR("\tDecompressionPool: { allSessions: %zd; idleSessions: %zd; waitingClients: %zd }\n"),
        Count,
        v6,
        v7);
      v8 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      context = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)CodecSessionPool_GetIdleSessionCountApplier, &context);
      v9 = context;
      v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
      CFStringAppendFormat(v4, 0, CFSTR("\tCompressionPool: { allSessions: %zd; idleSessions: %zd; waitingClients: %zd }\n"),
        v8,
        v9,
        v10);
      v11 = dispatch_time(0, 0);
      CFStringAppendFormat(v4, 0, CFSTR("\tStatus { invalid: %d; maxCompressionSessions: %zd; maxDecompressionSessions: %zd; timeout: %lld; lastActivity: %.1lf ms ago }\n"),
        *(unsigned __int8 *)(a1 + 16),
        *(_QWORD *)(a1 + 32),
        *(_QWORD *)(a1 + 40),
        *(_QWORD *)(a1 + 152),
        (double)(v11 - *(_QWORD *)(a1 + 160)) / 1000000000.0 * 1000.0);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
      CFStringAppendFormat(v4, 0, CFSTR("}"));
    }
  }
  return v4;
}

void CodecSessionPool_Destroy(CFTypeRef *a1)
{
  CFTypeRef v2;
  const __CFArray *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFRange v7;
  CFRange v8;

  if (a1)
  {
    v7.length = CFArrayGetCount((CFArrayRef)a1[4]);
    v7.location = 0;
    CFArrayApplyFunction((CFArrayRef)a1[4], v7, (CFArrayApplierFunction)CodecSessionPool_DestroyApplier_NotifyAndDestroyWaitingClients, a1);
    v2 = a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    v3 = (const __CFArray *)a1[1];
    if (v3)
    {
      v8.length = CFArrayGetCount(v3);
      v8.location = 0;
      CFArrayApplyFunction((CFArrayRef)a1[1], v8, (CFArrayApplierFunction)CodecSessionPool_DestroyApplier_DestroyGateway, a1);
      v4 = a1[1];
      if (v4)
      {
        CFRelease(v4);
        a1[1] = 0;
      }
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    v5 = a1[2];
    if (v5)
    {
      CFRelease(v5);
      a1[2] = 0;
    }
    v6 = a1[3];
    if (v6)
    {
      CFRelease(v6);
      a1[3] = 0;
    }
  }
}

void CodecSessionPool_DestroyApplier_NotifyAndDestroyWaitingClients(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
  WaitingClient_Destroy((const void **)a1);
}

void CodecSessionPool_DestroyApplier_DestroyGateway(const void *a1, uint64_t a2)
{
  CodecSessionPool_DestroyGatewayForSession(a2, a1);
}

void CodecSessionPool_DestroyGatewayForSession(uint64_t a1, const void *a2)
{
  const void **Value;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFRange v9;

  Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  v5 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), Value[4]);
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);
    v9.location = 0;
    v9.length = Count;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v9, a2);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
      CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
    if (Count == 1)
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), Value[4]);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), a2);
  CodecGateway_Destroy(Value);
}

CFIndex CodecSessionPool_GetIdleSessionCountApplier(int a1, CFArrayRef theArray, _QWORD *a3)
{
  CFIndex result;

  if (theArray)
    result = CFArrayGetCount(theArray);
  else
    result = 0;
  *a3 += result;
  return result;
}

uint64_t CodecSessionPool_PurgeSessionsWithCriteria(CFAllocatorRef *a1, unsigned int (*a2)(const void *, const void *, uint64_t), uint64_t a3, int a4)
{
  CFIndex Count;
  CFIndex v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  int v14;
  const void *ValueAtIndex;
  const void *Value;
  BOOL v17;
  CFAllocatorRef v18;
  dispatch_semaphore_t *v19;

  Count = CFArrayGetCount(a1[1]);
  if (Count < 1)
    return 0;
  v9 = Count;
  Mutable = CFArrayCreateMutable(*a1, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v11 = Mutable;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1[1], v12);
      Value = CFDictionaryGetValue(a1[3], ValueAtIndex);
      if (a2(ValueAtIndex, Value, a3))
        v17 = v14 == 0;
      else
        v17 = 1;
      if (v17)
      {
        CFArrayAppendValue(v11, ValueAtIndex);
      }
      else
      {
        CodecSessionPool_DestroyGatewayForSession((uint64_t)a1, ValueAtIndex);
        ++v13;
        if (a4)
          v14 = 0;
      }
      ++v12;
    }
    while (v9 != v12);
    v18 = a1[1];
    if (v18)
      CFRelease(v18);
    a1[1] = v11;
    if (v13 >= CFArrayGetCount(a1[4]))
      v13 = CFArrayGetCount(a1[4]);
    if (v13 >= 1)
    {
      do
      {
        v19 = (dispatch_semaphore_t *)CFArrayGetValueAtIndex(a1[4], 0);
        dispatch_semaphore_signal(v19[1]);
        CodecSessionPool_DequeueWaitingClient((uint64_t)a1, v19);
        --v13;
      }
      while (v13);
    }
    return 0;
  }
  return 4294950305;
}

BOOL _callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return *(_BYTE *)(a2 + 48) && *(_QWORD *)(a2 + 56) < *a3;
}

void CodecSessionPool_DequeueWaitingClient(uint64_t a1, const void *a2)
{
  CFIndex FirstIndexOfValue;
  CFRange v5;

  v5.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v5.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 32), v5, a2);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), FirstIndexOfValue);
}

uint64_t _callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 48);
}

uint64_t VTTileCompressionOutputCallback_Gateway(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t VTCompressionOutputCallback_Gateway(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t VTDecompressionOutputCallback_Gateway(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (result && *(_DWORD *)result == 1)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(result + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(result + 8);
      v11 = *a6;
      v12 = *((_QWORD *)a6 + 2);
      v9 = *a7;
      v10 = *((_QWORD *)a7 + 2);
      return v7(v8, a2, a3, a4, a5, &v11, &v9);
    }
  }
  return result;
}

CFIndex CodecSessionPool_PurgeIdleSessionFromLargestGroupApplier(int a1, CFArrayRef theArray, CFIndex *a3)
{
  CFIndex result;

  result = CFArrayGetCount(theArray);
  if (result > *a3)
  {
    *a3 = result;
    a3[1] = (CFIndex)theArray;
  }
  return result;
}

uint64_t CMPhotoScalingUtilitiesScaleBuffer_U8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, double a9, double a10, double a11, double a12, _BYTE *a13)
{
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  char *v33;
  size_t v34;
  float v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  float *v44;
  float v45;
  uint64_t *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t i;
  signed int v69;
  unint64_t *v70;
  _BYTE v71[528];
  void *v72;
  int v73;
  int v74;
  _QWORD v75[64];
  void *v76;
  uint64_t v77;

  v70 = (unint64_t *)a4;
  v77 = *MEMORY[0x1E0C80C00];
  bzero(&v73, 0x218uLL);
  bzero(v71, 0x218uLL);
  v67 = 0;
  v64 = a2;
  v22 = 4294950306;
  if ((a2 - 5) >= 0xFFFFFFFC)
  {
    if (a1)
    {
      v63 = a13;
      if (a13)
      {
        v67 = 0;
        if (a3)
        {
          if (v70)
          {
            v67 = 0;
            if (a6)
            {
              if (a7)
              {
                v67 = 0;
                v23 = a3 * v64;
                if (v23 <= a5 && a6 * v64 <= a8)
                {
                  v24 = CMPhotoScalingUtilitiesInitializeFilter(a3, a6, (uint64_t)v71);
                  if ((_DWORD)v24
                    || (v24 = CMPhotoScalingUtilitiesInitializeFilter((unint64_t)v70, a7, (uint64_t)&v73),
                        (_DWORD)v24))
                  {
                    v22 = v24;
                    v67 = 0;
                  }
                  else
                  {
                    v25 = (char *)malloc_type_calloc(v23 * a7, 4uLL, 0x100004052888210uLL);
                    v67 = v25;
                    if (v25)
                    {
                      v65 = v64;
                      v66 = a3;
                      v61 = a6;
                      v62 = a8;
                      v26 = 0;
                      v27 = a9 * 0.5 + a12 + -0.5;
                      v28 = (_DWORD)v70 - 1;
                      for (i = a7; i != v26; v50 = i)
                      {
                        v70 = &v61;
                        v29 = v74;
                        v30 = v73;
                        v69 = llround((v27 + a9 * (double)(int)v26) * (double)v74);
                        v31 = v69 / v74;
                        MEMORY[0x1E0C80A78](v25);
                        v33 = (char *)&v61 - ((v32 + 15) & 0xFFFFFFFF0);
                        if (v32 >= 0x200)
                          v34 = 512;
                        else
                          v34 = v32;
                        bzero((char *)&v61 - ((v32 + 15) & 0xFFFFFFFF0), v34);
                        v36 = v73;
                        if (v73 >= 1)
                        {
                          if (v30 >= 0)
                            v37 = v30;
                          else
                            v37 = v30 + 1;
                          v38 = v31 - (v37 >> 1) + 1;
                          v39 = v73;
                          v40 = v33;
                          do
                          {
                            v41 = v38 & ~(v38 >> 31);
                            if (v41 >= v28)
                              v41 = v28;
                            *v40++ = a1 + v41 * a5;
                            ++v38;
                            --v39;
                          }
                          while (v39);
                        }
                        if (v23)
                        {
                          v42 = 0;
                          v43 = (_DWORD *)v75[(v29 & ((v69 - v31 * v29) >> 31)) + v69 - v31 * v29];
                          v44 = (float *)&v67[4 * v66 * v26 * v65];
                          do
                          {
                            v45 = 0.0;
                            if (v36)
                            {
                              v46 = (uint64_t *)v33;
                              v47 = v43;
                              v48 = v36;
                              do
                              {
                                v49 = *v46++;
                                LOBYTE(v35) = *(_BYTE *)(v49 + v42);
                                v35 = (float)LODWORD(v35);
                                LODWORD(v49) = *v47++;
                                v45 = v45 + (float)(v35 * *(float *)&v49);
                                --v48;
                              }
                              while (v48);
                            }
                            *v44++ = v45;
                            ++v42;
                          }
                          while (v42 != v23);
                        }
                        ++v26;
                      }
                      v52 = v63;
                      v51 = v64;
                      v54 = v66;
                      v53 = v67;
                      v55 = 4 * v66 * (int)v64;
                      v57 = v61;
                      v56 = v62;
                      do
                      {
                        CMPhotoConvolveRowHorizontally_F_to_U8((uint64_t)v71, v51, v54, (uint64_t)v53, v57, v52);
                        v52 += v56;
                        v53 += v55;
                        --v50;
                      }
                      while (v50);
                      v22 = 0;
                    }
                    else
                    {
                      v67 = 0;
                      v22 = 4294950305;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v58 = v76;
  if (v76)
  {
    v76 = 0;
    free(v58);
  }
  v59 = v72;
  if (v72)
  {
    v72 = 0;
    free(v59);
  }
  free(v67);
  return v22;
}

uint64_t CMPhotoScalingUtilitiesInitializeFilter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  double v4;
  float v5;
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  int v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  float v29;
  uint64_t v30;
  float v31;
  _QWORD v33[3];
  double v34;

  if (!a3)
    return 4294950306;
  v4 = (double)a2 / (double)a1;
  v5 = 1.0 / v4;
  v6 = 133 - (LODWORD(v5) >> 23);
  if (v6 >= 6)
    v6 = 6;
  v7 = 3.0;
  v8 = 1.0 / v4 * 3.0;
  if (v4 >= 1.0)
    v8 = 3.0;
  v9 = (int)fmin(v8 * 2.0 + 0.5, 64.0);
  v10 = (1 << v6);
  *(_DWORD *)a3 = v9;
  *(_DWORD *)(a3 + 4) = v10;
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = ~(-1 << v6);
  v11 = malloc_type_malloc(4 * (int)((_DWORD)v9 << v6), 0x100004052888210uLL);
  *(_QWORD *)(a3 + 528) = v11;
  if (!v11)
    return 4294950305;
  v33[1] = v33;
  v12 = 0;
  v13 = 0;
  v14 = 1.0 / (double)(int)v10;
  v15 = fmin(v4, 1.0);
  if ((int)v9 >= 0)
    v16 = v9;
  else
    v16 = v9 + 1;
  v17 = 1.0 - (double)(v16 >> 1);
  v18 = v15;
  v33[2] = 0x400921FB54442D18;
  v19 = -3.0;
  do
  {
    v20 = *(_QWORD *)(a3 + 528);
    *(_QWORD *)(a3 + 8 * v13 + 16) = v20 + 4 * v13 * (int)v9;
    if ((int)v9 >= 1)
    {
      v21 = 0;
      v22 = 0.0;
      do
      {
        v23 = (v17 + (double)(int)v21 + -(double)(int)v13 * v14) * v18;
        v24 = v23 > v19 && v23 < v7;
        v25 = 0.0;
        if (v24)
        {
          v25 = 1.0;
          if (v23 != 0.0)
          {
            v26 = v14;
            v27 = v18;
            v34 = sin(v23 * 3.14159265) / (v23 * 3.14159265);
            v28 = sin(v23 / 3.0 * 3.14159265);
            v19 = -3.0;
            v18 = v27;
            v14 = v26;
            v25 = v34 * (v28 / (v23 / 3.0 * 3.14159265));
            v7 = 3.0;
          }
        }
        v29 = v25;
        *(float *)(v20 + v12 + 4 * v21) = v29;
        v22 = v25 + v22;
        ++v21;
      }
      while (v9 != v21);
      v30 = v9;
      do
      {
        v31 = *(float *)(v20 + v12) / v22;
        *(float *)(v20 + v12) = v31;
        v20 += 4;
        --v30;
      }
      while (v30);
    }
    ++v13;
    v12 += 4 * (int)v9;
  }
  while (v13 != v10);
  return 0;
}

uint64_t CMPhotoConvolveRowHorizontally_F_to_U8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  float v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  float *v35;
  float v36;
  int v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v7 = (int *)result;
    v8 = 4 * (int)a2;
    v9 = a2;
    v10 = -4 * (int)a2;
    v38[2] = a4;
    v39 = a5;
    v38[0] = a2;
    v38[1] = a3;
    do
    {
      result = MEMORY[0x1E0C80A78](v38);
      v21 = (float *)((char *)v38 - v20);
      v23 = (v17 >> 31) & ~v22;
      v24 = *v7;
      if (*v7 + v17 <= v12)
        v25 = 0;
      else
        v25 = *v7 + v17 - v12;
      if (v23 | v25)
      {
        v41 = v16;
        v42 = v15;
        v43 = v19;
        v44 = result;
        v45 = v18;
        v26 = (v23 * v11);
        v40 = (v24 - v23 - v25);
        memcpy(&v21[(int)v26], (const void *)(v13 + 4 * (v23 + v17) * v11), v8 * (int)v40);
        v11 = v38[0];
        if ((int)v26 >= 1)
        {
          v27 = LODWORD(v38[0]) + LODWORD(v38[0]) * v23 - 1;
          do
          {
            v28 = v21[v27--];
            v21[(int)--v26] = v28;
          }
          while (v26);
        }
        v29 = (v25 * v11);
        if ((int)v29 < 1)
        {
          v14 = v39;
          result = v44;
          v18 = v45;
          v15 = v42;
          v19 = v43;
          v16 = v41;
        }
        else
        {
          v14 = v39;
          v30 = (char *)&v21[((int)v40 + v23) * v11];
          result = v44;
          v18 = v45;
          v15 = v42;
          v19 = v43;
          v16 = v41;
          do
          {
            *(_DWORD *)v30 = *(_DWORD *)&v30[v10];
            v30 += 4;
            --v29;
          }
          while (v29);
        }
      }
      else
      {
        v21 = (float *)(v13 + 4 * v17 * v11);
      }
      if (v11 >= 1)
      {
        v31 = 0;
        do
        {
          v32 = *v7;
          if ((_DWORD)v32)
          {
            v33 = *(float **)&v7[2 * (v19 & ((v15 - v16 * v19) >> 31)) + 4 + 2 * (v15 - v16 * v19)];
            v34 = 0.0;
            v35 = v21;
            do
            {
              v36 = *v33++;
              v34 = v34 + (float)(*v35 * v36);
              v35 = (float *)((char *)v35 + v8);
              --v32;
            }
            while (v32);
          }
          else
          {
            v34 = 0.0;
          }
          v37 = llroundf(v34);
          if (v37 >= 255)
            v37 = 255;
          *a6++ = v37 & ~(v37 >> 31);
          ++v31;
          ++v21;
        }
        while (v31 != v9);
      }
    }
    while (v18 + 1 != v14);
  }
  return result;
}

uint64_t CMPhotoScalingUtilitiesLinear2XUpscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  signed int v15;
  int32x2_t v16;
  int32x2_t v17;
  signed int v18;
  signed int v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int32x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;

  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0)
    return 4294950306;
  v11 = 4294950306;
  if (!a3 || !a4 || a6 != 2 * a3 || a7 != 2 * a4)
    return v11;
  v12 = a2;
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8)
    return 4294950306;
  if (a7)
  {
    v14 = 0;
    v15 = a4 - 1;
    v16 = vdup_n_s32((int)a3 - 1);
    v17 = vdup_n_s32(a2);
    do
    {
      v18 = v14 >> 1;
      if ((v14 & 1) != 0)
        v19 = v18 + 1;
      else
        v19 = (v14 >> 1) - 1;
      if (v18 >= v15)
        v20 = a4 - 1;
      else
        v20 = v14 >> 1;
      if (v19 >= v15)
        v19 = a4 - 1;
      if (a6)
      {
        v21 = 0;
        v22 = a1 + (v20 & ~(v20 >> 31)) * a5;
        v23 = a1 + (v19 & ~(v19 >> 31)) * a5;
        v24 = a9 + v14 * a8;
        do
        {
          v25 = 0;
          v26 = v21 >> 1;
          v27 = (v21 >> 1) - 1;
          if ((v21 & 1) != 0)
            v27 = v26 + 1;
          v28 = vmul_s32(vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v27, v26), v16), 0), v17);
          v29.i64[0] = v28.i32[0];
          v29.i64[1] = v28.i32[1];
          v30 = v29;
          do
          {
            v31 = vaddq_s64(vdupq_n_s64(v25), v30);
            *(_BYTE *)(v24 + v25++) = (9 * *(unsigned __int8 *)(v22 + v31.i64[0])
                                     + *(unsigned __int8 *)(v23 + v31.i64[1])
                                     + 3
                                     * (*(unsigned __int8 *)(v23 + v31.i64[0])
                                      + *(unsigned __int8 *)(v22 + v31.i64[1]))
                                     + 8) >> 4;
          }
          while (v12 != v25);
          ++v21;
          v24 += v25;
        }
        while (v21 != a6);
      }
      ++v14;
    }
    while (v14 != a7);
  }
  return 0;
}

uint64_t CMPhotoScalingUtilitiesNearest2XUpscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  signed int v19;
  char *v20;
  uint64_t v21;
  char v22;

  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0)
    return 4294950306;
  v11 = 4294950306;
  if (!a3 || !a4 || !a6 || !a7)
    return v11;
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8)
    return 4294950306;
  for (i = 0; i != a7; ++i)
  {
    v14 = 0;
    v15 = i >> 1;
    if ((int)(i >> 1) >= (int)a4 - 1)
      v15 = a4 - 1;
    v16 = v15 & ~(v15 >> 31);
    v17 = (_BYTE *)(a9 + i * a8);
    v18 = a1 + a5 * v16;
    do
    {
      v19 = v14 >> 1;
      if ((int)(v14 >> 1) >= (int)a3 - 1)
        v19 = a3 - 1;
      v20 = (char *)(v18 + (int)(a2 * (v19 & ~(v19 >> 31))));
      v21 = a2;
      do
      {
        v22 = *v20++;
        *v17++ = v22;
        --v21;
      }
      while (v21);
      ++v14;
    }
    while (v14 != a6);
  }
  return 0;
}

uint64_t CMPhotoScalingUtilitiesNearest2XDownscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v11;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  char v26;

  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0)
    return 4294950306;
  v11 = 4294950306;
  if (!a3 || !a4 || !a6 || !a7)
    return v11;
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8)
    return 4294950306;
  v13 = 0;
  v14 = 0;
  v15 = a4 - 1;
  v16 = a3 - 1;
  do
  {
    v17 = 0;
    v18 = 0;
    if (v13 >= v15)
      v19 = v15;
    else
      v19 = v13;
    v20 = v19 & ~(v19 >> 31);
    v21 = (_BYTE *)(a9 + v14 * a8);
    v22 = a1 + a5 * v20;
    do
    {
      if (v17 >= v16)
        v23 = v16;
      else
        v23 = v17;
      v24 = (char *)(v22 + (int)(a2 * (v23 & ~(v23 >> 31))));
      v25 = a2;
      do
      {
        v26 = *v24++;
        *v21++ = v26;
        --v25;
      }
      while (v25);
      ++v18;
      v17 += 2;
    }
    while (v18 != a6);
    ++v14;
    v13 += 2;
  }
  while (v14 != a7);
  return 0;
}

uint64_t VideoQualityControllerClass_create_0(uint64_t a1, int a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeID v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (!cf)
    return FigSignalErrorAt();
  v9 = CFGetTypeID(cf);
  if (v9 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040F7F8B94BuLL);
  if (!v10)
    return 4294950305;
  v11 = v10;
  *(_DWORD *)v10 = a2;
  v10[1] = 0;
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("ByteBudget"))
    && (v13 = 0, CMPhotoCFDictionaryGetInt64IfPresent((CFDictionaryRef)cf, CFSTR("ByteBudget"), &v13)))
  {
    v12 = 0;
    v11[1] = v13;
    *(_QWORD *)(a1 + 56) = v11;
  }
  else
  {
    v12 = FigSignalErrorAt();
    free(v11);
  }
  return v12;
}

void VideoQualityControllerClass_dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 56);
  if (v1)
    free(v1);
}

uint64_t VideoQualityControllerClass_setSessionProperties(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    return 4294950194;
  if ((*(_QWORD *)(v1 + 8) & 0x8000000000000000) == 0)
    FigCFDictionarySetInt64();
  return 0;
}

uint64_t CMPhotoDecompressionCreateNativePixelFormatArray()
{
  return FigSignalErrorAt();
}

BOOL CMPhotoDecompressionDetectContainerFormat(const __CFData *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v7;
  CFTypeRef cf;

  cf = 0;
  v7 = -1;
  v3 = CMPhotoByteStreamCreateFromSource(a1, 0, 0, 0, &cf, 0);
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    v4 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, &v7);
    v5 = v4;
    if (a2 && !v4)
      *a2 = v7;
  }
  if (cf)
    CFRelease(cf);
  return v5 == 0;
}

uint64_t CMPhotoDecompressionDetectContainerFormatAndCodec(const __CFData *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t BrandsFromByteStream;
  int v6;
  uint64_t v7;
  int Int32;
  CFIndex v10;
  int v11;
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  v13 = 0;
  v11 = -1;
  v12 = -1;
  BrandsFromByteStream = CMPhotoByteStreamCreateFromSource(a1, 0, 0, 0, &cf, 0);
  if ((_DWORD)BrandsFromByteStream)
    goto LABEL_28;
  BrandsFromByteStream = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, &v12);
  if ((_DWORD)BrandsFromByteStream)
    goto LABEL_28;
  if (v12 == 2)
  {
    v6 = 1786276896;
    goto LABEL_7;
  }
  if (v12 != 1)
  {
    if (!a3)
      goto LABEL_8;
    BrandsFromByteStream = FigPictureCollectionCreateBrandsFromByteStream();
    if (!(_DWORD)BrandsFromByteStream)
    {
      Int32 = CMPhotoCFNumberGetInt32((const __CFNumber *)v14);
      if (_getCodecForBrand(Int32, &v11))
        goto LABEL_8;
      v10 = 0;
      while (v13 && CFArrayGetCount((CFArrayRef)v13) > v10)
      {
        FigCFArrayGetInt32AtIndex();
        ++v10;
        if (_getCodecForBrand(0, &v11))
          goto LABEL_8;
      }
      BrandsFromByteStream = FigSignalErrorAt();
    }
LABEL_28:
    v7 = BrandsFromByteStream;
    goto LABEL_12;
  }
  v6 = 1785750887;
LABEL_7:
  v11 = v6;
LABEL_8:
  if (a2)
    *a2 = v12;
  v7 = 0;
  if (a3)
    *a3 = v11;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  return v7;
}

uint64_t _getCodecForBrand(int a1, int *a2)
{
  uint64_t result;
  int v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;

  result = 0;
  v4 = 1752589105;
  if (a1 <= 1635150181)
  {
    if (a1 > 1298745408)
    {
      if ((a1 - 1298745409) <= 4 && ((1 << (a1 - 65)) & 0x13) != 0)
        goto LABEL_28;
      if (a1 == 1635148649)
        goto LABEL_26;
      v5 = 1635148659;
LABEL_25:
      if (a1 != v5)
        return result;
LABEL_26:
      v7 = 25393;
      goto LABEL_27;
    }
    if ((a1 - 1296118081) >= 2)
    {
      v5 = 1298743618;
      goto LABEL_25;
    }
LABEL_16:
    v7 = 12337;
LABEL_27:
    v4 = v7 | 0x61760000;
    goto LABEL_28;
  }
  if (a1 > 1751479906)
  {
    if (a1 > 1785750886)
    {
      if (a1 != 1785750887 && a1 != 1785751411)
        return result;
      v4 = 1785750887;
LABEL_28:
      *a2 = v4;
      return 1;
    }
    if (a1 == 1751479907)
      goto LABEL_28;
    v6 = 30328;
LABEL_19:
    if (a1 != (v6 | 0x68650000))
      return result;
    goto LABEL_28;
  }
  if (a1 > 1751476578)
  {
    if (a1 == 1751476579)
      goto LABEL_28;
    v6 = 27000;
    goto LABEL_19;
  }
  if (a1 == 1635150182 || a1 == 1635150195)
    goto LABEL_16;
  return result;
}

uint64_t CMPhotoDecompressionGetImageCount(const __CFData *a1, _QWORD *a2)
{
  CFTypeRef DecompressionSession;
  const void *v5;
  uint64_t Container;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v7 = FigSignalErrorAt();
LABEL_12:
    v5 = 0;
    goto LABEL_7;
  }
  if (!a2)
  {
    v7 = 0;
    goto LABEL_12;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v5 = DecompressionSession;
  if (DecompressionSession)
  {
    Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!(_DWORD)Container)
      Container = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)cf, 0, a2);
    v7 = Container;
  }
  else
  {
    v7 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v5);
  if (cf)
    CFRelease(cf);
  return v7;
}

const __CFData *CMPhotoDecompressionDetectSourceIsMIAF(const __CFData *a1)
{
  const __CFData *IsMIAF;
  CFTypeRef DecompressionSession;
  const void *v3;
  CFTypeRef cf;

  IsMIAF = a1;
  cf = 0;
  if (a1)
  {
    DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
    v3 = DecompressionSession;
    if (!DecompressionSession
      || CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, IsMIAF, 0, (uint64_t *)&cf))
    {
      IsMIAF = 0;
    }
    else
    {
      IsMIAF = (const __CFData *)CMPhotoDecompressionContainerDetectSourceIsMIAF((uint64_t)cf);
    }
  }
  else
  {
    FigSignalErrorAt();
    v3 = 0;
  }
  CMPhotoOneShotSessionPoolRecycleSession(v3);
  if (cf)
    CFRelease(cf);
  return IsMIAF;
}

uint64_t CMPhotoDecompressionGetImageGeometryForIndex(const __CFData *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef DecompressionSession;
  const void *v11;
  uint64_t Container;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v13 = FigSignalErrorAt();
LABEL_14:
    v11 = 0;
    goto LABEL_9;
  }
  if (!a3 && !a4 && !a5)
  {
    v13 = 0;
    goto LABEL_14;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v11 = DecompressionSession;
  if (DecompressionSession)
  {
    Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!(_DWORD)Container)
      Container = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(cf, a2, 0, a3, a4, a5);
    v13 = Container;
  }
  else
  {
    v13 = 4294950195;
  }
LABEL_9:
  CMPhotoOneShotSessionPoolRecycleSession(v11);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t CMPhotoDecompressionCreateCGImageForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef DecompressionSession;
  const void *v9;
  uint64_t Container;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v11 = FigSignalErrorAt();
LABEL_12:
    v9 = 0;
    goto LABEL_7;
  }
  if (!a4)
  {
    v11 = 0;
    goto LABEL_12;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v9 = DecompressionSession;
  if (DecompressionSession)
  {
    Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!(_DWORD)Container)
      Container = CMPhotoDecompressionContainerCreateImageForIndex(cf, a2, a3, 4, a4);
    v11 = Container;
  }
  else
  {
    v11 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v9);
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t CMPhotoDecompressionCreateCVPixelBufferForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef DecompressionSession;
  const void *v9;
  uint64_t Container;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v11 = FigSignalErrorAt();
LABEL_12:
    v9 = 0;
    goto LABEL_7;
  }
  if (!a4)
  {
    v11 = 0;
    goto LABEL_12;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v9 = DecompressionSession;
  if (DecompressionSession)
  {
    Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, a3, a1, 0, (uint64_t *)&cf);
    if (!(_DWORD)Container)
      Container = CMPhotoDecompressionContainerCreateImageForIndex(cf, a2, a3, 2, a4);
    v11 = Container;
  }
  else
  {
    v11 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v9);
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t CMPhotoDecompressionCreateCVPixelBufferForThumbnailIndexAndImageIndex(const __CFData *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  CFTypeRef DecompressionSession;
  const void *v11;
  uint64_t Container;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v13 = FigSignalErrorAt();
LABEL_12:
    v11 = 0;
    goto LABEL_7;
  }
  if (!a5)
  {
    v13 = 0;
    goto LABEL_12;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v11 = DecompressionSession;
  if (DecompressionSession)
  {
    Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, a4, a1, 0, (uint64_t *)&cf);
    if (!(_DWORD)Container)
      Container = CMPhotoDecompressionContainerCreateThumbnailImageForIndex(cf, a2, a3, a4, 2, a5);
    v13 = Container;
  }
  else
  {
    v13 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v11);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t CMPhotoDecompressionDecodeIntoRGBSurfaceForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, IOSurfaceRef buffer)
{
  OSType PixelFormat;
  CFTypeRef DecompressionSession;
  const void *v10;
  uint64_t Container;
  const __CFAllocator *v12;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v14;
  uint64_t ImageForIndex;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  if (!a1
    || !buffer
    || (PixelFormat = IOSurfaceGetPixelFormat(buffer), PixelFormat != 1111970369) && PixelFormat != 1380401729)
  {
    ImageForIndex = FigSignalErrorAt();
    v10 = 0;
LABEL_11:
    v14 = 0;
    goto LABEL_12;
  }
  DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  v10 = DecompressionSession;
  if (!DecompressionSession)
  {
    v14 = 0;
    ImageForIndex = 4294950195;
    goto LABEL_12;
  }
  Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
  if ((_DWORD)Container
    || (v12 = CFGetAllocator(buffer),
        Container = CMPhotoCreatePixelBufferWithSurface(v12, buffer, 0, (CVPixelBufferRef *)&value),
        (_DWORD)Container))
  {
    ImageForIndex = Container;
    goto LABEL_11;
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  v14 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, CFSTR("UseProvidedPixelBuffer"), value);
    ImageForIndex = CMPhotoDecompressionContainerCreateImageForIndex(cf, a2, v14, 2, (uint64_t)&value);
  }
  else
  {
    ImageForIndex = 4294950305;
  }
LABEL_12:
  CMPhotoOneShotSessionPoolRecycleSession(v10);
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (v14)
    CFRelease(v14);
  return ImageForIndex;
}

uint64_t pack_bgg4_arm(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  return bitstream_write_start_bgg4(a1, a2, a3, a4, (__n128)vdupq_n_s16(0x3FFu));
}

uint64_t bitstream_write_start_bgg4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_bgg4(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_bgg4(_QWORD *a1, _QWORD *a2, int a3, int16x8_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint16x8_t *v8;
  uint16x4_t v9;
  uint64_t v10;
  int v11;

  v9 = *(uint16x4_t *)a1;
  v8 = (uint16x8_t *)(a1 + 1);
  *(uint16x4_t *)a4.i8 = vshr_n_u16(v9, 4uLL);
  *a2 = a4.i64[0];
  v10 = (uint64_t)(a2 + 1);
  v11 = a3 - 4;
  if ((v11 & 7) != 0)
    return sub_1A81FF3D0();
  else
    return sub_1A81FF3F0(v8, v10, v11, a4, a5, a6, a7, a8);
}

uint64_t sub_1A81FF3D0(uint16x4_t *a1, uint64_t a2, int a3, uint64_t a4, int16x4_t a5, double a6, double a7, double a8, int8x8_t a9)
{
  int16x4_t v9;

  v9 = (int16x4_t)vshr_n_u16(*a1, 4uLL);
  return process_pixel_blue0_4((uint64_t)&a1[1], a2, (a3 - 4), a4, *(double *)&v9, *(double *)&v9, a7, *(float *)vshll_n_u16((uint16x4_t)vand_s8((int8x8_t)vsub_s16(v9, a5), a9), 2uLL).i32);
}

uint64_t sub_1A81FF3F0(uint16x8_t *a1, uint64_t a2, int a3, int16x8_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  __n128 v8;
  uint16x8_t v9;

  v8 = (__n128)vshrq_n_u16(*a1, 4uLL);
  a4.i64[1] = v8.n128_u64[0];
  v9 = (uint16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)v8, a4), a8);
  return process_pixel_blue0(&a1[1], a2, (a3 - 8), v8.n128_f64[1], v8, (__n128)vshll_n_u16(*(uint16x4_t *)v9.i8, 2uLL), (__n128)vshll_high_n_u16(v9, 2uLL));
}

uint64_t process_pixel_blue0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float a7)
{
  return bitstream_write_code_blue0(a1, a2, a3, a4, (*(int *)(a4 + LODWORD(a7)) >> 16), *(_DWORD *)(a4 + LODWORD(a7)));
}

uint64_t bitstream_write_code_blue0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11)
{
  BOOL v11;
  int v12;

  v11 = __OFSUB__(a8, (_DWORD)a6);
  v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0))
    return full_buffer_blue0(a1, a2, a3, a4, a5, a6, a7, v12);
  else
    return process_pixel_green0(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
}

uint64_t full_buffer_blue0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green0(a1, a2 + 1);
}

uint64_t process_pixel_green0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_green0(a1, a2, a3, a4, (*(int *)(a4 + HIDWORD(a8)) >> 16), *(_DWORD *)(a4 + HIDWORD(a8)), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_green0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, __n128 a11)
{
  BOOL v11;
  int v12;

  v11 = __OFSUB__(a8, (_DWORD)a6);
  v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0))
    return full_buffer_green0(a1, a2, a3, a4, a5, a6, a7, v12);
  else
    return process_pixel_green1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
}

uint64_t full_buffer_green0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green1(a1, a2 + 1);
}

uint64_t process_pixel_green1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, __n128 a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_green1(a1, a2, a3, a4, (*(int *)(a4 + a8.n128_u32[2]) >> 16), *(_DWORD *)(a4 + a8.n128_u32[2]), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_green1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, __n128 a11)
{
  BOOL v11;
  int v12;

  v11 = __OFSUB__(a8, (_DWORD)a6);
  v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0))
    return full_buffer_green1(a1, a2, a3, a4, a5, a6, a7, v12);
  else
    return process_pixel_red0(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
}

uint64_t full_buffer_green1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_red0(a1, a2 + 1);
}

uint64_t process_pixel_red0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, __n128 a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_red0(a1, a2, a3, a4, (*(int *)(a4 + a8.n128_u32[3]) >> 16), *(_DWORD *)(a4 + a8.n128_u32[3]), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_red0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8;
  int v9;

  v8 = __OFSUB__(a8, (_DWORD)a6);
  v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0))
    return full_buffer_red0(a1, a2, a3, a4, a5, a6, a7, v9);
  else
    return process_pixel_blue1();
}

uint64_t full_buffer_red0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_blue1(a1, a2 + 1);
}

uint64_t process_pixel_blue1()
{
  return process_pixel_blue0_4();
}

uint64_t process_pixel_blue0_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8)
{
  return bitstream_write_code_blue1(a1, a2, a3, a4, (*(int *)(a4 + LODWORD(a8)) >> 16), *(_DWORD *)(a4 + LODWORD(a8)));
}

uint64_t bitstream_write_code_blue1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12)
{
  BOOL v12;
  int v13;

  v12 = __OFSUB__(a8, (_DWORD)a6);
  v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0))
    return full_buffer_blue1(a1, a2, a3, a4, a5, a6, a7, v13);
  else
    return process_pixel_green2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
}

uint64_t full_buffer_blue1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green2(a1, a2 + 1);
}

uint64_t process_pixel_green2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_green2(a1, a2, a3, a4, (*(int *)(a4 + HIDWORD(a9)) >> 16), *(_DWORD *)(a4 + HIDWORD(a9)), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_green2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, __n128 a12)
{
  BOOL v12;
  int v13;

  v12 = __OFSUB__(a8, (_DWORD)a6);
  v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0))
    return full_buffer_green2(a1, a2, a3, a4, a5, a6, a7, v13);
  else
    return process_pixel_green3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
}

uint64_t full_buffer_green2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green3(a1, a2 + 1);
}

uint64_t process_pixel_green3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_green3(a1, a2, a3, a4, (*(int *)(a4 + a9.n128_u32[2]) >> 16), *(_DWORD *)(a4 + a9.n128_u32[2]), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_green3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, __n128 a12)
{
  BOOL v12;
  int v13;

  v12 = __OFSUB__(a8, (_DWORD)a6);
  v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0))
    return full_buffer_green3(a1, a2, a3, a4, a5, a6, a7, v13);
  else
    return process_pixel_red1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
}

uint64_t full_buffer_green3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_red1(a1, a2 + 1);
}

uint64_t process_pixel_red1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_red1(a1, a2, a3, a4, (*(int *)(a4 + a9.n128_u32[3]) >> 16), *(_DWORD *)(a4 + a9.n128_u32[3]), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_red1(uint16x8_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int16x8_t a9, double a10, double a11, double a12, int8x16_t a13)
{
  BOOL v13;
  int v14;

  v13 = __OFSUB__(a8, (_DWORD)a6);
  v14 = a8 - a6;
  if ((v14 < 0) ^ v13 | (v14 == 0))
    return full_buffer_red1((uint64_t)a1, a2, a3, a4, a5, a6, a7, v14);
  else
    return finish_quad_bgg4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v14, a9, a10, a11, a12, a13);
}

uint64_t full_buffer_red1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_bgg4(a1, a2 + 1);
}

uint64_t finish_quad_bgg4(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int16x8_t a9, double a10, double a11, double a12, int8x16_t a13)
{
  uint64_t v13;

  v13 = a7 | (a5 << a8);
  if ((_DWORD)a3)
    return sub_1A81FF3F0(a1, a2, a3, a9, a10, a11, a12, a13);
  else
    return bitstream_write_flush_bgg4(a1, a2, a3, a4, a5, a6, v13);
}

uint64_t bitstream_write_flush_bgg4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  int v10;

  if (a8 < 8)
    return bitstream_write_quad_bgg4(a1, a2, a3, a4, a5, a6, a7);
  v10 = a9 - a8;
  if (v10)
    return flush_loop_bgg4(a1, a2, a3, a4, a5, a6, a7, v10);
  else
    return done_bgg4(a1, (uint64_t)a2);
}

uint64_t flush_loop_bgg4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v8;
  BOOL v9;

  do
  {
    HIDWORD(v8) = a7;
    LODWORD(v8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_bgg4();
}

uint64_t done_bgg4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return a2 - v2;
}

uint64_t bitstream_write_quad_bgg4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_bgg4(a1, (uint64_t)(a2 + 1));
}

uint64_t CMPhotoInterchangeCompactEncode(__CVBuffer *a1, unsigned int *a2, uint64_t a3)
{
  id v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  const __CFDictionary *v9;
  int v10;
  uint64_t v11;
  int v12;
  CMPhotoInterchangeCompactMetal *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  CMPhotoInterchangeCompactMetal *v19;
  unint64_t WidthInCompressedTilesOfPlane;
  uint64_t HeightInCompressedTilesOfPlane;
  uint64_t CompressedTileWidthOfPlane;
  unint64_t v23;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  _WORD *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _WORD *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint8x8_t *v35;
  _WORD *v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int16x8_t v40;
  uint8x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint32x4_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint8x8_t *v50;
  _WORD *v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int16x8_t v55;
  unint64_t v56;
  __int128 v57;
  uint8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint32x4_t v65;
  uint8x8_t *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  const __CFDictionary *v77;
  id v78;
  const __CFDictionary *v79;
  CMPhotoInterchangeCompactMetal *v80;
  uint64_t v81;
  uint8x8_t *v82;
  unint64_t v83;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  unint64_t BytesPerTileDataOfPlane;
  int v86;
  int v87;
  unint64_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int v91;
  void *values;
  void *keys;
  CFTypeRef v94;
  CVPixelBufferRef pixelBufferOut[2];

  pixelBufferOut[0] = 0;
  v6 = MTLCreateSystemDefaultDevice();
  v94 = 0;
  v7 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = v7;
  if (!v7)
  {
    v9 = 0;
    goto LABEL_12;
  }
  keys = (void *)*MEMORY[0x1E0CA8FF0];
  values = v7;
  v9 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v9)
  {
LABEL_12:
    v11 = 4294951895;
    goto LABEL_13;
  }
  v10 = a2[8];
  v11 = 4294951891;
  if (v10 <= 1651519797)
  {
    if (v10 == 1278226488)
    {
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2, a2[1], 0x264C3038u, v9, pixelBufferOut))
      {
        v13 = [CMPhotoInterchangeCompactMetal alloc];
        goto LABEL_33;
      }
      goto LABEL_12;
    }
    if (v10 != 1278226536)
      goto LABEL_13;
    goto LABEL_26;
  }
  if (v10 == 1651519798)
  {
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26526841u, v9, pixelBufferOut))
    {
      v13 = [CMPhotoInterchangeCompactMetal alloc];
      v14 = v6;
      v15 = 1;
      goto LABEL_30;
    }
    goto LABEL_12;
  }
  if (v10 == 1751411059)
  {
LABEL_26:
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2, a2[1], 0x264C3068u, v9, pixelBufferOut))
    {
      v13 = [CMPhotoInterchangeCompactMetal alloc];
      v14 = v6;
      v15 = 0;
LABEL_30:
      v16 = 0;
      v18 = 16;
      goto LABEL_36;
    }
    goto LABEL_12;
  }
  if (v10 != 1652056888)
    goto LABEL_13;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26424741u, v9, pixelBufferOut))
  {
    goto LABEL_12;
  }
  v12 = a2[2090];
  if (v12 != 8 && v12 != 5)
  {
    v13 = [CMPhotoInterchangeCompactMetal alloc];
    if (v12 <= 3)
    {
      v14 = v6;
      v15 = 1;
      goto LABEL_34;
    }
LABEL_33:
    v14 = v6;
    v15 = 0;
LABEL_34:
    v16 = 0;
    goto LABEL_35;
  }
  v13 = [CMPhotoInterchangeCompactMetal alloc];
  v14 = v6;
  v15 = 0;
  v16 = 1;
LABEL_35:
  v18 = 8;
LABEL_36:
  v19 = -[CMPhotoInterchangeCompactMetal initWithDevice:encode:bayer:quadra:depth:](v13, "initWithDevice:encode:bayer:quadra:depth:", v14, 1, v15, v16, v18);
  v11 = IOSurfaceAcceleratorCreate();
  if (!(_DWORD)v11)
  {
    -[CMPhotoInterchangeCompactMetal prepareSrc:](v19, "prepareSrc:", CVPixelBufferGetIOSurface(a1));
    -[CMPhotoInterchangeCompactMetal prepareDst:](v19, "prepareDst:", CVPixelBufferGetIOSurface(pixelBufferOut[0]));
    -[CMPhotoInterchangeCompactMetal prepareData](v19, "prepareData");
    v80 = v19;
    -[CMPhotoInterchangeCompactMetal sendRenderCommand](v19, "sendRenderCommand");
    CVPixelBufferGetIOSurface(pixelBufferOut[0]);
    v82 = *(uint8x8_t **)(a3 + 16);
    WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
    HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
    BytesPerTileDataOfPlane = IOSurfaceGetBytesPerTileDataOfPlane();
    CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
    v23 = (unint64_t)(IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane) >> 5;
    BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    v25 = malloc_type_malloc(2 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane, 0x1000040BDFB0063uLL);
    v26 = HeightInCompressedTilesOfPlane;
    v83 = v23 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane;
    v27 = 32 - __clz(WidthInCompressedTilesOfPlane - 1);
    if (WidthInCompressedTilesOfPlane >= 2)
      v28 = v27;
    else
      v28 = 0;
    v29 = 32 - __clz(HeightInCompressedTilesOfPlane - 1);
    if (HeightInCompressedTilesOfPlane >= 2)
      v30 = v29;
    else
      v30 = 0;
    v88 = HeightInCompressedTilesOfPlane;
    v31 = v25;
    v81 = a3;
    if (v23 == 8)
    {
      if (v26)
      {
        v77 = v9;
        v78 = v6;
        v79 = v8;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v82;
        v36 = v25;
        v89 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 3) - 1);
        do
        {
          v86 = v34;
          if (WidthInCompressedTilesOfPlane)
          {
            v37 = 0;
            v38 = 1;
            do
            {
              v39 = _agxXBiasedTwiddle(v37, v32, v28, v30);
              v40.i64[0] = 0x1000100010001;
              v40.i64[1] = 0x1000100010001;
              v41 = *(uint8x8_t *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 8 * v39);
              v42 = (int16x8_t)vmovl_u8(v41);
              v43 = vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)v42), v40), (int8x16_t)vceqzq_s16(v42));
              *(int16x4_t *)v43.i8 = vadd_s16(*(int16x4_t *)v43.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
              v44 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8);
              v45 = vaddw_u16((uint32x4_t)vextq_s8(v44, v44, 8uLL), *(uint16x4_t *)v43.i8);
              v33 += (unsigned __int16)(v45.i16[0] + v45.i16[2]);
              *v36++ = v45.i16[0] + v45.i16[2];
              *v35++ = v41;
              v37 = v38;
              v46 = WidthInCompressedTilesOfPlane > v38++;
            }
            while (v46);
          }
          v32 = (v86 + 1);
          v34 = v86 + 1;
          v47 = v88;
        }
        while (v88 > v32);
        goto LABEL_59;
      }
    }
    else if (v26)
    {
      v77 = v9;
      v78 = v6;
      v79 = v8;
      v48 = 0;
      v33 = 0;
      v49 = 0;
      v50 = v82;
      v51 = v25;
      v90 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 5) - 1);
      do
      {
        v87 = v49;
        if (WidthInCompressedTilesOfPlane)
        {
          v52 = 0;
          v53 = 1;
          do
          {
            v54 = _agxXBiasedTwiddle(v52, v48, v28, v30);
            v55.i64[0] = 0x1000100010001;
            v55.i64[1] = 0x1000100010001;
            v56 = BaseAddressOfCompressedTileHeaderRegionOfPlane + 32 * v54;
            v57 = *(_OWORD *)v56;
            v58 = *(uint8x16_t *)(v56 + 16);
            v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8);
            v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v56);
            v61 = (int16x8_t)vmovl_high_u8(v58);
            v62 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v56);
            v63 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v60), v55), (int8x16_t)vceqzq_s16(v60)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v59), v55), (int8x16_t)vceqzq_s16(v59))), vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v62), v55), (int8x16_t)vceqzq_s16(v62)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v61), v55), (int8x16_t)vceqzq_s16(v61))));
            *(int16x4_t *)v63.i8 = vadd_s16(*(int16x4_t *)v63.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
            v64 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8);
            v65 = vaddw_u16((uint32x4_t)vextq_s8(v64, v64, 8uLL), *(uint16x4_t *)v63.i8);
            v33 += (unsigned __int16)(v65.i16[0] + v65.i16[2]);
            *v51++ = v65.i16[0] + v65.i16[2];
            v66 = v50 + 4;
            *(_OWORD *)v50->i8 = v57;
            *(uint8x16_t *)v50[2].i8 = v58;
            v52 = v53;
            v46 = WidthInCompressedTilesOfPlane > v53++;
            v50 += 4;
          }
          while (v46);
        }
        else
        {
          v66 = v50;
        }
        v48 = (v87 + 1);
        v50 = v66;
        v49 = v87 + 1;
        v47 = v88;
      }
      while (v88 > v48);
LABEL_59:
      if (v47)
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = (char *)v82 + v83;
        v25 = v31;
        do
        {
          v91 = v68;
          if (WidthInCompressedTilesOfPlane)
          {
            v71 = 0;
            v72 = v67 * WidthInCompressedTilesOfPlane;
            v73 = 1;
            do
            {
              v74 = v71 + v72;
              v75 = (unsigned __int16)v25[v74];
              memcpy(v70, (const void *)(BaseAddressOfCompressedTileDataRegionOfPlane + v74 * BytesPerTileDataOfPlane), v75);
              v25 = v31;
              v70 += v75;
              v69 += v75;
              v71 = v73;
              v46 = WidthInCompressedTilesOfPlane > v73++;
            }
            while (v46);
          }
          v67 = (v91 + 1);
          v68 = v91 + 1;
        }
        while (v88 > v67);
        v6 = v78;
        v8 = v79;
        v9 = v77;
      }
      else
      {
        v69 = 0;
        v6 = v78;
        v8 = v79;
        v9 = v77;
        v25 = v31;
      }
      goto LABEL_68;
    }
    v33 = 0;
    v69 = 0;
LABEL_68:
    free(v25);
    if (v69 != v33)
      CMPhotoInterchangeCompactEncode_cold_1();
    v11 = 0;
    v76 = v69 + v83;
    v19 = v80;
    *(_QWORD *)(v81 + 16) += v76;
  }
  if (v19)

LABEL_13:
  if (v6)

  if (v94)
    CFRelease(v94);
  if (pixelBufferOut[0])
    CFRelease(pixelBufferOut[0]);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  return v11;
}

uint64_t CMPhotoInterchangeCompactDecode(__CVBuffer *a1, unsigned int *a2, uint64_t a3)
{
  id v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  void *v9;
  const __CFDictionary *v10;
  int v11;
  uint64_t v12;
  int v13;
  CMPhotoInterchangeCompactMetal *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t WidthInCompressedTilesOfPlane;
  uint64_t HeightInCompressedTilesOfPlane;
  uint64_t CompressedTileWidthOfPlane;
  unint64_t v23;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  _WORD *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  _WORD *v32;
  unint64_t v33;
  int v34;
  int v35;
  _WORD *v36;
  uint8x8_t *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int16x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint32x4_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint8x8_t *v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int16x8_t v57;
  __int128 v58;
  uint8x16_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint32x4_t v66;
  uint8x8_t *v67;
  _OWORD *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  size_t v77;
  __CVBuffer *pixelBuffer;
  const __CFDictionary *v79;
  id v80;
  const __CFDictionary *v81;
  unint64_t v82;
  CMPhotoInterchangeCompactMetal *v83;
  uint64_t v84;
  uint8x8_t *v85;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  unint64_t BytesPerTileDataOfPlane;
  int v88;
  int v89;
  unint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int v93;
  void *values;
  void *keys;
  CFTypeRef v96;
  CVPixelBufferRef pixelBufferOut[2];

  pixelBufferOut[0] = 0;
  v6 = MTLCreateSystemDefaultDevice();
  v96 = 0;
  v7 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = v7;
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v9 = (void *)*MEMORY[0x1E0CA8FF0];
  values = v7;
  keys = v9;
  v10 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v10)
  {
LABEL_12:
    v12 = 4294951895;
    goto LABEL_13;
  }
  v11 = a2[8];
  v12 = 4294951891;
  if (v11 <= 1651519797)
  {
    if (v11 == 1278226488)
    {
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2, a2[1], 0x264C3038u, v10, pixelBufferOut))
      {
        pixelBuffer = a1;
        v14 = [CMPhotoInterchangeCompactMetal alloc];
        goto LABEL_33;
      }
      goto LABEL_12;
    }
    if (v11 != 1278226536)
      goto LABEL_13;
    goto LABEL_26;
  }
  if (v11 == 1651519798)
  {
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26526841u, v10, pixelBufferOut))
    {
      pixelBuffer = a1;
      v14 = [CMPhotoInterchangeCompactMetal alloc];
      v15 = v6;
      v16 = 1;
      goto LABEL_30;
    }
    goto LABEL_12;
  }
  if (v11 == 1751411059)
  {
LABEL_26:
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2, a2[1], 0x264C3068u, v10, pixelBufferOut))
    {
      pixelBuffer = a1;
      v14 = [CMPhotoInterchangeCompactMetal alloc];
      v15 = v6;
      v16 = 0;
LABEL_30:
      v17 = 0;
      v19 = 16;
      goto LABEL_36;
    }
    goto LABEL_12;
  }
  if (v11 != 1652056888)
    goto LABEL_13;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26424741u, v10, pixelBufferOut))
  {
    goto LABEL_12;
  }
  v13 = a2[2090];
  pixelBuffer = a1;
  if (v13 != 8 && v13 != 5)
  {
    v14 = [CMPhotoInterchangeCompactMetal alloc];
    if (v13 <= 3)
    {
      v15 = v6;
      v16 = 1;
      goto LABEL_34;
    }
LABEL_33:
    v15 = v6;
    v16 = 0;
LABEL_34:
    v17 = 0;
    goto LABEL_35;
  }
  v14 = [CMPhotoInterchangeCompactMetal alloc];
  v15 = v6;
  v16 = 0;
  v17 = 1;
LABEL_35:
  v19 = 8;
LABEL_36:
  v83 = -[CMPhotoInterchangeCompactMetal initWithDevice:encode:bayer:quadra:depth:](v14, "initWithDevice:encode:bayer:quadra:depth:", v15, 0, v16, v17, v19);
  CVPixelBufferGetIOSurface(pixelBufferOut[0]);
  v84 = a3;
  v85 = *(uint8x8_t **)(a3 + 16);
  WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  BytesPerTileDataOfPlane = IOSurfaceGetBytesPerTileDataOfPlane();
  CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
  v23 = (unint64_t)(IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane) >> 5;
  BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v25 = malloc_type_malloc(2 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane, 0x1000040BDFB0063uLL);
  v26 = HeightInCompressedTilesOfPlane;
  v27 = v23 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane;
  v28 = 32 - __clz(WidthInCompressedTilesOfPlane - 1);
  if (WidthInCompressedTilesOfPlane >= 2)
    v29 = v28;
  else
    v29 = 0;
  v30 = 32 - __clz(v26 - 1);
  if (v26 >= 2)
    v31 = v30;
  else
    v31 = 0;
  v90 = v26;
  v32 = v25;
  if (v23 == 8)
  {
    if (v26)
    {
      v81 = v8;
      v82 = v27;
      v79 = v10;
      v80 = v6;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = v25;
      v37 = v85;
      v91 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 3) - 1);
      do
      {
        v88 = v35;
        if (WidthInCompressedTilesOfPlane)
        {
          v38 = 0;
          v39 = 1;
          do
          {
            v40 = _agxXBiasedTwiddle(v38, v33, v29, v31);
            v41.i64[0] = 0x1000100010001;
            v41.i64[1] = 0x1000100010001;
            v42 = v40;
            v43 = *v37++;
            v44 = (int16x8_t)vmovl_u8(v43);
            v45 = vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v91, (int8x16_t)v44), v41), (int8x16_t)vceqzq_s16(v44));
            *(int16x4_t *)v45.i8 = vadd_s16(*(int16x4_t *)v45.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
            v46 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8);
            v47 = vaddw_u16((uint32x4_t)vextq_s8(v46, v46, 8uLL), *(uint16x4_t *)v45.i8);
            *v36++ = v47.i16[0] + v47.i16[2];
            v34 += (unsigned __int16)(v47.i16[0] + v47.i16[2]);
            v38 = v39;
            v48 = WidthInCompressedTilesOfPlane > v39++;
            *(uint8x8_t *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 8 * v42) = v43;
          }
          while (v48);
        }
        v33 = (v88 + 1);
        v35 = v88 + 1;
        v49 = v90;
      }
      while (v90 > v33);
      goto LABEL_58;
    }
  }
  else if (v26)
  {
    v81 = v8;
    v82 = v27;
    v79 = v10;
    v80 = v6;
    v50 = 0;
    v34 = 0;
    v51 = 0;
    v52 = v25;
    v53 = v85;
    v92 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 5) - 1);
    do
    {
      v89 = v51;
      if (WidthInCompressedTilesOfPlane)
      {
        v54 = 0;
        v55 = 1;
        do
        {
          v56 = _agxXBiasedTwiddle(v54, v50, v29, v31);
          v57.i64[0] = 0x1000100010001;
          v57.i64[1] = 0x1000100010001;
          v58 = *(_OWORD *)v53->i8;
          v59 = *(uint8x16_t *)v53[2].i8;
          v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8);
          v61 = (int16x8_t)vmovl_u8(*v53);
          v62 = (int16x8_t)vmovl_high_u8(v59);
          v63 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v53->i8);
          v64 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v61), v57), (int8x16_t)vceqzq_s16(v61)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v60), v57), (int8x16_t)vceqzq_s16(v60))), vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v63), v57), (int8x16_t)vceqzq_s16(v63)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v62), v57), (int8x16_t)vceqzq_s16(v62))));
          *(int16x4_t *)v64.i8 = vadd_s16(*(int16x4_t *)v64.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
          v65 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8);
          v66 = vaddw_u16((uint32x4_t)vextq_s8(v65, v65, 8uLL), *(uint16x4_t *)v64.i8);
          v67 = v53 + 4;
          v68 = (_OWORD *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 32 * v56);
          v54 = v55;
          *v52++ = v66.i16[0] + v66.i16[2];
          v34 += (unsigned __int16)(v66.i16[0] + v66.i16[2]);
          v48 = WidthInCompressedTilesOfPlane > v55++;
          v53 += 4;
          *v68 = v58;
          v68[1] = v59;
        }
        while (v48);
      }
      else
      {
        v67 = v53;
      }
      v50 = (v89 + 1);
      v53 = v67;
      v51 = v89 + 1;
      v49 = v90;
    }
    while (v90 > v50);
LABEL_58:
    if (v49)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = (char *)v85 + v82;
      v25 = v32;
      do
      {
        v93 = v70;
        if (WidthInCompressedTilesOfPlane)
        {
          v73 = 0;
          v74 = v69 * WidthInCompressedTilesOfPlane;
          v75 = 1;
          do
          {
            v76 = v73 + v74;
            v77 = (unsigned __int16)v25[v76];
            memcpy((void *)(BaseAddressOfCompressedTileDataRegionOfPlane + v76 * BytesPerTileDataOfPlane), v72, v77);
            v25 = v32;
            v72 += v77;
            v71 += v77;
            v73 = v75;
            v48 = WidthInCompressedTilesOfPlane > v75++;
          }
          while (v48);
        }
        v69 = (v93 + 1);
        v70 = v93 + 1;
      }
      while (v90 > v69);
      v6 = v80;
      v8 = v81;
      v27 = v82;
      v10 = v79;
    }
    else
    {
      v71 = 0;
      v6 = v80;
      v8 = v81;
      v10 = v79;
      v27 = v82;
      v25 = v32;
    }
    goto LABEL_67;
  }
  v34 = 0;
  v71 = 0;
LABEL_67:
  free(v25);
  if (v71 != v34)
    CMPhotoInterchangeCompactDecode_cold_1();
  if (*(_QWORD *)(v84 + 24) - *(_QWORD *)(v84 + 16) == v71 + v27)
  {
    v12 = IOSurfaceAcceleratorCreate();
    if (!(_DWORD)v12)
    {
      -[CMPhotoInterchangeCompactMetal prepareSrc:](v83, "prepareSrc:", CVPixelBufferGetIOSurface(pixelBufferOut[0]));
      -[CMPhotoInterchangeCompactMetal prepareDst:](v83, "prepareDst:", CVPixelBufferGetIOSurface(pixelBuffer));
      -[CMPhotoInterchangeCompactMetal sendRenderCommand](v83, "sendRenderCommand");
    }
  }
  else
  {
    v12 = 4294951889;
  }
  if (v83)

LABEL_13:
  if (v6)

  if (v96)
    CFRelease(v96);
  if (pixelBufferOut[0])
    CFRelease(pixelBufferOut[0]);
  if (v10)
    CFRelease(v10);
  if (v8)
    CFRelease(v8);
  return v12;
}

unint64_t _agxXBiasedTwiddle(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64x2_t v5;
  uint64x2_t v6;
  unint64_t v7;
  int64x2_t v8;
  uint64x2_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int64x2_t v14;
  uint64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x8_t v18;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (v4)
  {
    v5 = (uint64x2_t)vdupq_n_s64(v4 - 1);
    v6 = (uint64x2_t)vdupq_n_s64(a1);
    v7 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v8 = (int64x2_t)xmmword_1A828F180;
    v9 = (uint64x2_t)vdupq_n_s64(a2);
    v10 = 0uLL;
    v11 = (int8x16_t)vdupq_n_s64(1uLL);
    v12 = vdupq_n_s64(2uLL);
    do
    {
      v13 = v10;
      v14 = v8;
      v15 = (uint64x2_t)vnegq_s64(v8);
      v16 = (int8x16_t)vaddq_s64(v14, v14);
      v10 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v6, v15), v11), (uint64x2_t)v16), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v15), v11), (uint64x2_t)vorrq_s8(v16, v11))), v13);
      v8 = vaddq_s64(v8, v12);
      v7 -= 2;
    }
    while (v7);
    v17 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v14, v5), v13, v10);
    v18 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  }
  else
  {
    v18 = 0;
  }
  return *(_QWORD *)&v18 | ((a2 | a1) >> v4 << (2 * v4));
}

uint64_t CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(int a1, int a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;

  result = 4294950301;
  if (a1 <= 1278226735)
  {
    if (a1 > 875704933)
    {
      if (a1 > 1111970368)
      {
        if (a1 == 1111970369)
        {
          v6 = 4;
        }
        else
        {
          if (a1 != 1278226488)
            return result;
          v6 = 5;
        }
      }
      else if (a1 == 875704934)
      {
        v6 = 8;
      }
      else
      {
        if (a1 != 875836518)
          return result;
        v6 = 24;
      }
      goto LABEL_21;
    }
    if (a1 != 825306677 && a1 != 825437747)
    {
      if (a1 != 875704422)
        return result;
      v6 = 10;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (a1 <= 1815491697)
  {
    if (a1 > 1278555700)
    {
      if (a1 == 1278555701)
      {
        v6 = 2;
      }
      else
      {
        if (a1 != 1380401729)
          return result;
        v6 = 3;
      }
      goto LABEL_21;
    }
    if (a1 == 1278226736)
      goto LABEL_20;
    v5 = 1278226742;
LABEL_14:
    if (a1 != v5)
      return result;
LABEL_20:
    v6 = 18;
    goto LABEL_21;
  }
  if (a1 <= 1952854575)
  {
    if (a1 != 1815491698)
    {
      v5 = 1932996149;
      goto LABEL_14;
    }
    v6 = 16;
LABEL_21:
    result = 0;
    if (a3)
      *a3 = v6;
    return result;
  }
  if ((a1 == 1952854576 || a1 == 2019963440) && !a2)
  {
    v6 = 19;
    goto LABEL_21;
  }
  return result;
}

uint64_t _copyFormatDescriptionForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CMVideoFormatDescriptionRef *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;
  uint64_t v14;
  CFDataRef v15;
  CFDataRef v16;
  CMVideoCodecType v17;
  uint64_t v18;
  unsigned __int8 v20;
  unint64_t v21;
  CGColorSpaceRef space;
  CMVideoFormatDescriptionRef formatDescriptionOut;

  v21 = a2;
  v6 = a1 + 40;
  v20 = 0;
  v7 = _checkImageIndex(a1 + 40, &v21, &v20);
  if ((_DWORD)v7)
    return v7;
  v8 = v20;
  space = 0;
  formatDescriptionOut = 0;
  v9 = CFGetAllocator((CFTypeRef)a1);
  v10 = _parseImageSizeAndTypeIfNeeded(v6);
  if (!(_DWORD)v10)
  {
    v11 = _parseICCProfileIfNeeded(v6);
    if ((_DWORD)v11)
    {
      v18 = v11;
      v13 = 0;
      goto LABEL_17;
    }
    if (*(_BYTE *)(a1 + 457))
    {
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      v13 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_27;
      if (v8)
      {
        v14 = _copyColorSpaceForIndex(a1, 1uLL, &space);
        if ((_DWORD)v14)
        {
          v18 = v14;
LABEL_17:
          if (space)
            CFRelease(space);
          goto LABEL_19;
        }
        v15 = CGColorSpaceCopyICCData(space);
        if (v15)
        {
          v16 = v15;
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0CA2210], v15);
          CFRelease(v16);
          goto LABEL_12;
        }
LABEL_27:
        v18 = 4294950305;
        goto LABEL_17;
      }
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA2210], *(const void **)(a1 + 464));
    }
    else
    {
      v13 = 0;
    }
LABEL_12:
    if (v8)
      v17 = 1953325424;
    else
      v17 = 1785750887;
    v18 = CMVideoFormatDescriptionCreate(v9, v17, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 120), v13, &formatDescriptionOut);
    if (!(_DWORD)v18)
    {
      *a4 = formatDescriptionOut;
      formatDescriptionOut = 0;
    }
    goto LABEL_17;
  }
  v18 = v10;
  v13 = 0;
LABEL_19:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v13)
    CFRelease(v13);
  return v18;
}

uint64_t _getThumbnailCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v8 = a2;
  v6 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!(_DWORD)result)
  {
    result = _parseExifIfNeeded(v6, 0);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_BYTE *)(a1 + 312) != 0;
    }
  }
  return result;
}

uint64_t _createThumbnailImageForIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  unint64_t v16;

  cf = 0;
  v16 = a2;
  v11 = a1 + 40;
  v12 = _checkImageIndex(a1 + 40, &v16, 0);
  if ((_DWORD)v12)
    return v12;
  v12 = _parseExifIfNeeded(v11, 0);
  if ((_DWORD)v12)
    return v12;
  if (*(_BYTE *)(a1 + 312) && !a3)
  {
    v13 = _decodeImage(*(const __CFAllocator **)(a1 + 40), a1, *(const void **)(a1 + 64), 1, 0, a4, 0, 0, a5, 0, (CGImageRef *)&cf);
    if ((_DWORD)v13)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a6 = cf;
    }
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t _decodeThumbnailForIndexAsync(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, int a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v16;

  v16 = a2;
  result = _checkImageIndex(a1 + 40, &v16, 0);
  if (!(_DWORD)result)
  {
    if (a3)
      return FigSignalErrorAt();
    else
      return _queueAsyncImageDecode(a1, 1, 0, a4, 0, a5, a6, a7, a8);
  }
  return result;
}

uint64_t _decodeAuxiliaryImageForIndexAsync(uint64_t a1, unint64_t a2, unint64_t a3, const __CFDictionary *a4, int a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t result;
  unint64_t v17;

  v17 = a2;
  v15 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v17, 0);
  if (!(_DWORD)result)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = (uint64_t)_checkForbiddenAuxOptions(a4);
      if (!(_DWORD)result)
      {
        result = _parseMPOIfNeeded(v15);
        if (!(_DWORD)result)
        {
          if (*(_QWORD *)(a1 + 264) <= a3)
            return 4294950303;
          else
            return _queueAsyncImageDecode(a1, 2, a3, a4, 0, a5, a6, a7, a8);
        }
      }
    }
  }
  return result;
}

uint64_t _cancelAsyncRequest(uint64_t a1, const void *a2)
{
  CMPhotoDecompressionSessionCancelAsyncRequest(*(_QWORD *)(a1 + 16), a2);
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _DWORD *a7)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  unint64_t v17;

  v17 = a2;
  v12 = a1 + 40;
  v16 = 0;
  result = _checkImageIndex(a1 + 40, &v17, &v16);
  if (!(_DWORD)result)
  {
    v15 = 0;
    result = _getAuxiliaryImageStorageForIndex(v12, v16, a3, &v15);
    if (!(_DWORD)result)
    {
      result = _getImageGeometryForIndex(a1, v17, v14, 0, 0, a7);
      if (!(_DWORD)result)
      {
        if (a5)
          *a5 = *v15;
        result = 0;
        if (a6)
          *a6 = v15[1];
      }
    }
  }
  return result;
}

uint64_t _copyAuxiliaryImageTypeInfoForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;

  v13 = a2;
  v7 = a1 + 40;
  v12 = 0;
  result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!(_DWORD)result)
  {
    v11 = 0;
    result = _getAuxiliaryImageStorageForIndex(v7, v12, a3, &v11);
    if (!(_DWORD)result)
    {
      v9 = *(const void **)(v11 + 32);
      if (v9)
      {
        if (a5)
        {
          v10 = CFRetain(v9);
          result = 0;
          *a5 = v10;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _copyAuxiliaryImageMetadataForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;

  v13 = a2;
  v7 = a1 + 40;
  v12 = 0;
  result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!(_DWORD)result)
  {
    v11 = 0;
    result = _getAuxiliaryImageStorageForIndex(v7, v12, a3, &v11);
    if (a5)
    {
      if (!(_DWORD)result)
      {
        v9 = *(const void **)(v11 + 24);
        if (v9)
          v10 = CFRetain(v9);
        else
          v10 = 0;
        result = 0;
        *a5 = v10;
      }
    }
  }
  return result;
}

uint64_t _copyAuxiliaryColorSpaceForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;

  v12 = a2;
  v6 = a1 + 40;
  v11 = 0;
  result = _checkImageIndex(a1 + 40, &v12, &v11);
  if (!(_DWORD)result)
  {
    v10 = 0;
    result = _getAuxiliaryImageStorageForIndex(v6, v11, a3, &v10);
    if (a4)
    {
      if (!(_DWORD)result)
      {
        if (*(_QWORD *)(v10 + 72) && (v8 = MEMORY[0x1A85CF43C]()) != 0)
        {
          v9 = v8;
          result = 0;
          *a4 = v9;
        }
        else
        {
          return 4294950303;
        }
      }
    }
  }
  return result;
}

uint64_t _createOutputBufferAttributesForImageIndex(uint64_t a1, unint64_t a2, const __CFDictionary *a3, CFDictionaryRef *a4)
{
  uint64_t result;
  int v8;
  unint64_t v9;
  unint64_t v10;

  v9 = 0;
  v10 = 0;
  v8 = 1;
  result = _getImageGeometryForIndex(a1, a2, (uint64_t)a3, &v9, &v10, &v8);
  if (!(_DWORD)result)
  {
    result = _parseImageSizeAndTypeIfNeeded(a1 + 40);
    if (!(_DWORD)result)
      return _createOutputBufferAttributesForImageGeometry(a1, 0, v9, v10, *(_BYTE *)(a1 + 133), a3, a4);
  }
  return result;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = 1;
  result = _getThumbnailGeometryForIndex(a1, a2, a3, &v10, &v11, &v9);
  if (!(_DWORD)result)
    return _createOutputBufferAttributesForImageGeometry(a1, 1, v10, v11, 0, a4, a5);
  return result;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex(uint64_t a1, unint64_t a2, unint64_t a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = 1;
  result = _getAuxiliaryImageGeometryForIndex(a1, a2, a3, (uint64_t)a4, &v10, &v11, &v9);
  if (!(_DWORD)result)
    return _createOutputBufferAttributesForImageGeometry(a1, 2, v10, v11, 0, a4, a5);
  return result;
}

uint64_t _transcodeToJFIF(uint64_t a1, const __CFDictionary *a2, unint64_t a3, uint64_t a4, __CFData **a5)
{
  uint64_t v8;
  uint64_t PictureCollectionCodecPool;
  uint64_t v10;
  __CFDictionary *Value;
  __CFDictionary *v12;
  CFTypeID v13;
  const void *v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  CGSize v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  CGFloat v26;
  unint64_t v27;
  CGFloat v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const __CFDictionary *v40;
  __CFDictionary *v41;
  char v42;
  CFMutableDictionaryRef Mutable;
  const void *v44;
  uint64_t ThumbnailImageForIndex;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  unsigned __int8 v55;
  __CFDictionary *MutableCopy;
  BOOL v57;
  int v58;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  __CFData **v65;
  const __CFAllocator *allocator;
  uint64x2_t v67;
  CGFloat v68;
  CGFloat v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __CFDictionary *v73;
  unint64_t v74;
  uint64_t v75;
  CFIndex v76;
  __int128 v77;
  unint64_t v78;
  unsigned __int8 v79;
  CGRect rect;
  __int128 v81;
  uint64_t v82;
  CFNumberRef Int;
  __int16 v84;
  unint64_t v85;
  unsigned int v86;
  char v87;
  unsigned __int8 v88;
  __int16 v89;
  __int16 v90;
  const void *v91;
  const void *v92;
  uint64_t v93;
  _QWORD v94[5];
  int v95;
  const __CFDictionary *v96;
  CFTypeRef v97;
  CFTypeRef v98;
  unint64_t v99[3];
  CGRect v100;

  v99[0] = a3;
  v8 = a1 + 40;
  allocator = CFGetAllocator((CFTypeRef)a1);
  v97 = 0;
  v98 = 0;
  v96 = 0;
  v95 = 1;
  memset(v94, 0, 32);
  v92 = 0;
  v93 = 0;
  v91 = 0;
  v90 = 0;
  v89 = 1;
  v88 = 1;
  v87 = 1;
  v86 = 875704422;
  v85 = 0;
  v84 = 0;
  v82 = 0;
  Int = 0;
  PictureCollectionCodecPool = _checkImageIndex(v8, v99, 0);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  v99[0] = 0;
  if (!a5)
  {
    MutableCopy = 0;
    v41 = 0;
    v36 = 0;
    goto LABEL_129;
  }
  PictureCollectionCodecPool = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(*(_QWORD *)(a1 + 16), &v93);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  PictureCollectionCodecPool = CMPhotoDecompressionSessionCopyScaler(*(_QWORD *)(a1 + 16), &v92);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  PictureCollectionCodecPool = CMPhotoDecompressionSessionCopySurfacePool(*(_QWORD *)(a1 + 16), &v91);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  v81 = 0uLL;
  PictureCollectionCodecPool = _getImageGeometryForIndex(a1, 0, v10, &v81, (_QWORD *)&v81 + 1, 0);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  v64 = v8;
  v65 = a5;
  if (!a2)
  {
    v25 = 0;
    v24 = 0;
    v28 = 0.0;
    v16 = 0;
    v19 = 0;
    v12 = 0;
    v26 = 0.0;
    goto LABEL_41;
  }
  CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("OutputPixelFormat"), &v86);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("IncludeThumbnail"), &v89);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("IncludeAuxiliaryImages"), &v88);
  Value = (__CFDictionary *)CFDictionaryGetValue(a2, CFSTR("PreserveAndModifyGainMap"));
  v12 = Value;
  if (Value)
  {
    v13 = CFGetTypeID(Value);
    if (v13 != CFDictionaryGetTypeID())
      goto LABEL_126;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("IncludeMetadata"), &v87);
  if (CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("MaxPixelSize"), &v85))
  {
    if (!v85)
      goto LABEL_126;
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseMaxPixelSizeForShortEdge"), &v84);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("AllowMaxPixelSizeUpscale"), (_BYTE *)&v84 + 1);
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("UseEvenScalingMode"), (_BYTE *)&v90 + 1);
  HIBYTE(v90) = CMPhotoGetEvenScalingModeDefault(0, HIBYTE(v90));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("ApplyTransform"), (_BYTE *)&v89 + 1);
  if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("QualityControllerType"), (char *)&v82 + 4))
    LOBYTE(v82) = 1;
  v14 = CFDictionaryGetValue(a2, CFSTR("QualityControllerParameters"));
  if (v14)
    v14 = CFRetain(v14);
  Int = (CFNumberRef)v14;
  v15 = CFDictionaryGetValue(a2, CFSTR("ReplacementImageProperties"));
  v16 = v15;
  if (v15 && (v17 = CFGetTypeID(v15), v17 != CFDictionaryGetTypeID())
    || (v18 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("ColorConverter")), (v19 = v18) != 0)
    && (v20 = CFGetTypeID(v18), v20 != CFDictionaryGetTypeID()))
  {
    MutableCopy = 0;
    v41 = 0;
    v36 = 4294950306;
    goto LABEL_129;
  }
  v21 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("SourceCropRect"));
  if (v21)
  {
    v22 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    rect.size = v22;
    if (CGRectMakeWithDictionaryRepresentation(v21, &rect))
    {
      v23 = 0;
      v24 = vcvtad_u64_f64(rect.origin.x);
      v25 = vcvtad_u64_f64(rect.origin.y);
      *(_QWORD *)&v26 = vcvtad_u64_f64(rect.size.width);
      v27 = *(_QWORD *)&v26 + v24;
      *(_QWORD *)&v28 = vcvtad_u64_f64(rect.size.height);
      if ((unint64_t)v81 < *(_QWORD *)&v26 + v24)
        v27 = v81;
      if (*((_QWORD *)&v81 + 1) >= *(_QWORD *)&v28 + v25)
        v29 = *(_QWORD *)&v28 + v25;
      else
        v29 = *((_QWORD *)&v81 + 1);
      v30 = v27 - v24;
      if (v27 <= v24)
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = v29 > v25;
        v35 = v29 - v25;
        if (v34)
        {
          v23 = v35;
          v31 = v30;
          v32 = v25;
          v33 = v24;
        }
      }
      v36 = 4294950306;
      if (v33 != v24 || v32 != v25 || v31 != *(_QWORD *)&v26 || v23 != *(_QWORD *)&v28)
        goto LABEL_128;
      if (v81 != __PAIR128__(*(unint64_t *)&v28, *(unint64_t *)&v26))
        goto LABEL_40;
      goto LABEL_39;
    }
LABEL_126:
    PictureCollectionCodecPool = FigSignalErrorAt();
    goto LABEL_127;
  }
LABEL_39:
  v25 = 0;
  v24 = 0;
  v28 = 0.0;
  v26 = 0.0;
LABEL_40:
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("RestrictedTranscoding"), &v90);
LABEL_41:
  v79 = 0;
  v78 = -1;
  PictureCollectionCodecPool = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions((_QWORD *)a1, 0, 0, 4, (uint64_t)CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), (char *)&v79, (uint64_t *)&v78);
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  if (v16)
  {
    v96 = (const __CFDictionary *)CFRetain(v16);
  }
  else
  {
    PictureCollectionCodecPool = CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex(a1, 0, 0, 0, 0, (CFTypeRef *)&v96);
    if ((_DWORD)PictureCollectionCodecPool)
      goto LABEL_127;
  }
  v37 = _copyColorSpaceForIndex(a1, 0, &v98);
  if ((_DWORD)v37)
  {
    v36 = v37;
    if ((_DWORD)v37 != -16993)
      goto LABEL_128;
  }
  v38 = (void *)v98;
  if (!v98)
  {
    PictureCollectionCodecPool = _parseICCProfileIfNeeded(v64);
    if (!(_DWORD)PictureCollectionCodecPool)
    {
      v38 = (void *)v98;
      goto LABEL_50;
    }
LABEL_127:
    v36 = PictureCollectionCodecPool;
LABEL_128:
    MutableCopy = 0;
    v41 = 0;
    goto LABEL_129;
  }
LABEL_50:
  PictureCollectionCodecPool = CMPhotoDecompressionContainerInitColorController(v94, v19, v38, *(_QWORD *)(a1 + 464));
  if ((_DWORD)PictureCollectionCodecPool)
    goto LABEL_127;
  if (!(_BYTE)v82)
  {
    if (Int)
    {
      CFRelease(Int);
      Int = 0;
    }
    HIDWORD(v82) = 4;
    Int = CMPhotoCFNumberCreateInt(2);
  }
  if (!CMPhotoCFDictionaryGetIntIfPresent(v96, (const void *)*MEMORY[0x1E0CBCFF0], &v95))
  {
    v40 = (const __CFDictionary *)CFDictionaryGetValue(v96, (const void *)*MEMORY[0x1E0CBD090]);
    CMPhotoCFDictionaryGetIntIfPresent(v40, (const void *)*MEMORY[0x1E0CBD0C0], &v95);
  }
  if (!v87 && v96)
  {
    CFRelease(v96);
    v96 = 0;
  }
  if ((_BYTE)v89)
  {
    if (!*(_BYTE *)(a1 + 312) || v24 | v25 || *(_QWORD *)&v26 | *(_QWORD *)&v28)
    {
      v41 = 0;
      v42 = 1;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v41 = Mutable;
      if (!Mutable)
      {
        MutableCopy = 0;
LABEL_149:
        v36 = 4294950305;
        goto LABEL_129;
      }
      CMPhotoCFDictionarySetSize(Mutable, CFSTR("MaxPixelSize"), 160);
      CMPhotoCFDictionarySetBoolean(v41, CFSTR("ApplyTransform"), HIBYTE(v89));
      if (a2 && v19 && CFDictionaryContainsKey(a2, CFSTR("OutputPixelFormat")))
      {
        v44 = CFDictionaryGetValue(a2, CFSTR("OutputPixelFormat"));
        CFDictionarySetValue(v41, CFSTR("OutputPixelFormat"), v44);
      }
      ThumbnailImageForIndex = CMPhotoDecompressionContainerCreateThumbnailImageForIndex((_QWORD *)a1, 0, 0, v41, 2, (uint64_t)&v97);
      if ((_DWORD)ThumbnailImageForIndex)
        goto LABEL_125;
      v42 = 0;
    }
  }
  else
  {
    v42 = 0;
    v41 = 0;
  }
  v77 = v81;
  if (v24 | v25 || *(_QWORD *)&v26 | *(_QWORD *)&v28)
  {
    *(CGFloat *)&v77 = v26;
    *((CGFloat *)&v77 + 1) = v28;
    *(_QWORD *)&rect.origin.x = v24;
    *(_QWORD *)&rect.origin.y = v25;
    rect.size.width = v26;
    rect.size.height = v28;
    ThumbnailImageForIndex = CMPhotoGetTwoPassCropRects(v86, (unint64_t *)&rect, v81, *((unint64_t *)&v81 + 1), 0, 0);
    if ((_DWORD)ThumbnailImageForIndex)
      goto LABEL_125;
  }
  v46 = v85;
  if (v85 && (_BYTE)v84)
  {
    v47 = v77;
    if ((unint64_t)v77 <= *((_QWORD *)&v77 + 1))
      v48 = *((_QWORD *)&v77 + 1);
    else
      v48 = v77;
    if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
      v47 = *((_QWORD *)&v77 + 1);
    v49 = vcvtps_s32_f32((float)((float)v48 / (float)v47) * (float)v85);
    v50 = (v49 - 1) & 1;
    if (v49 < 1)
      v50 = -v50;
    v51 = v49 - v50 + 1;
    v46 = v51;
    v85 = v51;
  }
  if (v46)
  {
    v52 = (unint64_t)v77 <= *((_QWORD *)&v77 + 1) ? *((_QWORD *)&v77 + 1) : v77;
    if (v46 < v52 || HIBYTE(v84))
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(v77, *((unint64_t *)&v77 + 1), v46, 0, 0, HIBYTE(v84), HIBYTE(v90), (unint64_t *)&v77, 0, 0);
  }
  if (v96)
  {
    ThumbnailImageForIndex = CMPhotoUpdateImageProperties(&v96, HIBYTE(v89), 0, (double)(unint64_t)v77, (double)*((unint64_t *)&v77 + 1));
    if ((_DWORD)ThumbnailImageForIndex)
      goto LABEL_125;
  }
  v76 = 0;
  if (v88)
  {
    ThumbnailImageForIndex = _getAuxiliaryImageCountForIndex(a1, 0, v46, &v76);
    if ((_DWORD)ThumbnailImageForIndex)
      goto LABEL_125;
    v53 = v79;
    v54 = v88;
  }
  else
  {
    v54 = 0;
    v53 = v79;
    if (v12 && v79)
    {
      v54 = 0;
      v53 = 1;
      v76 = 1;
    }
  }
  v72 = a1;
  v73 = 0;
  v74 = v78;
  v75 = 0;
  v55 = v90;
  BYTE1(v75) = v90;
  if (v12)
  {
    if (v53)
    {
      v73 = v12;
      if (!v54)
        LOBYTE(v75) = 1;
    }
  }
  MutableCopy = 0;
  if (v12)
    v57 = 0;
  else
    v57 = v54 == 0;
  v58 = !v57;
  if (!v53 || !v58)
    goto LABEL_121;
  if (!(v24 | v25) && !(*(_QWORD *)&v26 | *(_QWORD *)&v28))
  {
    MutableCopy = 0;
    goto LABEL_121;
  }
  memset(&rect, 0, sizeof(rect));
  v70 = 0;
  v71 = 0;
  ThumbnailImageForIndex = _getAuxiliaryImageGeometryForIndex(a1, 0, v78, v39, &v70, &v71, 0);
  if ((_DWORD)ThumbnailImageForIndex
    || (v67.i64[0] = v24,
        v67.i64[1] = v25,
        v68 = v26,
        v69 = v28,
        ThumbnailImageForIndex = CMPhotoTranslateAndScalePreOrientationCrop(v81, *((uint64_t *)&v81 + 1), &v67, 1, v70, v71, 1, &rect), (_DWORD)ThumbnailImageForIndex))
  {
LABEL_125:
    v36 = ThumbnailImageForIndex;
    MutableCopy = 0;
    goto LABEL_129;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    goto LABEL_149;
  v100.origin.x = (double)*(unint64_t *)&rect.origin.x;
  v100.origin.y = (double)*(unint64_t *)&rect.origin.y;
  v100.size.width = (double)*(unint64_t *)&rect.size.width;
  v100.size.height = (double)*(unint64_t *)&rect.size.height;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v100);
  if (!DictionaryRepresentation)
    goto LABEL_149;
  v60 = DictionaryRepresentation;
  CFDictionarySetValue(MutableCopy, CFSTR("SourceCropRect"), DictionaryRepresentation);
  CFRelease(v60);
  v73 = MutableCopy;
  v55 = v90;
LABEL_121:
  if (HIBYTE(v89))
    v61 = v95;
  else
    v61 = 1;
  v62 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&rect.origin.x = v24;
  *(_QWORD *)&rect.origin.y = v25;
  rect.size.width = v26;
  rect.size.height = v28;
  v36 = CMPhotoJFIFTranscodeFromJFIF(allocator, v81, *((uint64_t *)&v81 + 1), (uint64_t *)&rect, v61, v77, *((unint64_t *)&v77 + 1), v86, HIDWORD(v82), Int, v42, (uint64_t)v97, v76, (uint64_t (*)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *))_transcodeAuxiliaryImageCallback, (uint64_t)&v72, v62, v96, (uint64_t)v94, v91,
          v92,
          v93,
          0,
          v55,
          0,
          v65);
LABEL_129:
  if (v98)
    CFRelease(v98);
  if (v97)
    CFRelease(v97);
  if (v96)
    CFRelease(v96);
  if (v41)
    CFRelease(v41);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (Int)
    CFRelease(Int);
  if (v92)
    CFRelease(v92);
  if (v91)
    CFRelease(v91);
  return v36;
}

uint64_t _initTileIteratorForIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = CMPhotoSoftwareJFIFTileIteratorCreate();
  if (!(_DWORD)result)
    *(_QWORD *)(a3 + 48) = &CMPhotoSoftwareJFIFTileIteratorVTable;
  return result;
}

uint64_t _finalizeTileIterator(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;

  v3 = *(const void **)(a2 + 56);
  if (v3)
  {
    CFRelease(v3);
    v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(_QWORD *)(a2 + 56) = 0;
      free(v4);
    }
  }
  *(_QWORD *)(a2 + 48) = 0;
  return 0;
}

uint64_t _copyXMPForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, CFDataRef *a5)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  v9 = a2;
  v7 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v9, 0);
  if (!(_DWORD)result)
  {
    result = _parseXMPIfNeeded(v7);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 369))
        return CMPhotoByteStreamReadAndCreateData(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 376), a5, 0);
      else
        return 4294950303;
    }
  }
  return result;
}

uint64_t _getDebugMetadataCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v8 = a2;
  v6 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!(_DWORD)result)
  {
    result = _parseDebugMetadataIfNeeded(v6);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_BYTE *)(a1 + 393) != 0;
    }
  }
  return result;
}

uint64_t _copyDebugMetadataForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  const void *v9;
  CFTypeRef v10;
  unint64_t v11;

  v11 = a2;
  v7 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v11, 0);
  if (!(_DWORD)result)
  {
    result = _parseDebugMetadataIfNeeded(v7);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 393))
      {
        if (a5)
        {
          v9 = *(const void **)(a1 + 416);
          if (v9)
            v10 = CFRetain(v9);
          else
            v10 = 0;
          result = 0;
          *a5 = v10;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _getCustomMetadataCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v8 = a2;
  v6 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!(_DWORD)result)
  {
    result = _parseCustomMetadataIfNeeded(v6);
    if (a4)
    {
      if (!(_DWORD)result)
        *a4 = *(_BYTE *)(a1 + 425) != 0;
    }
  }
  return result;
}

uint64_t _copyCustomMetadataForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  v9 = a2;
  v7 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v9, 0);
  if (!(_DWORD)result)
  {
    result = _parseCustomMetadataIfNeeded(v7);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 425))
        return CMPhotoJFIFCopyCustomMetadataFromCFData(*(const __CFData **)(a1 + 448), a5);
      else
        return 4294950303;
    }
  }
  return result;
}

uint64_t _copyImageSubsamplingForIndex(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v7 = a2;
  if (!a3)
    return 0;
  v5 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v7, 0);
  if (!(_DWORD)result)
  {
    result = _parseImageSizeAndTypeIfNeeded(v5);
    if (!(_DWORD)result)
      *a3 = *(_DWORD *)(a1 + 128);
  }
  return result;
}

uint64_t _copyImageIsRGBForIndex(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v7 = a2;
  if (!a3)
    return 0;
  v5 = a1 + 40;
  result = _checkImageIndex(a1 + 40, &v7, 0);
  if (!(_DWORD)result)
  {
    result = _parseImageSizeAndTypeIfNeeded(v5);
    if (!(_DWORD)result)
      *a3 = *(_BYTE *)(a1 + 132);
  }
  return result;
}

uint64_t _getThumbnailGeometryForIndex(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v15 = a2;
  if (!a4 && !a5 && !a6)
    return 0;
  result = _checkImageIndex(a1 + 40, &v15, 0);
  if (!(_DWORD)result)
  {
    if (a3)
      return FigSignalErrorAt();
    result = _parseExifIfNeeded(a1 + 40, 0);
    if (!(_DWORD)result)
    {
      if (!*(_BYTE *)(a1 + 312))
        return 4294950306;
      v14 = *(_QWORD *)(a1 + 320);
      v13 = *(_QWORD *)(a1 + 328);
      result = _getImageGeometryForIndex(a1, v15, v12, 0, 0, a6);
      if (!(_DWORD)result)
      {
        if (a4)
          *a4 = v14;
        if (a5)
        {
          result = 0;
          *a5 = v13;
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _copyThumbnailBitDepthForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t BitDepthArray;
  CFTypeRef cf;
  unint64_t v12;

  cf = 0;
  v12 = a2;
  if (!a4)
    return 0;
  v7 = a1 + 40;
  v8 = _checkImageIndex(a1 + 40, &v12, 0);
  if ((_DWORD)v8)
    return v8;
  if (!a3)
  {
    v8 = _parseExifIfNeeded(v7, 0);
    if (!(_DWORD)v8)
    {
      if (!*(_BYTE *)(a1 + 312))
        return 4294950303;
      BitDepthArray = _createBitDepthArray(*(const __CFAllocator **)(a1 + 40), *(_DWORD *)(a1 + 336), *(_DWORD *)(a1 + 360), (__CFArray **)&cf);
      if ((_DWORD)BitDepthArray)
      {
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a4 = cf;
      }
      return BitDepthArray;
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t _copyAuxiliaryImageBitDepthForIndex(uint64_t a1, unint64_t a2, unint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t BitDepthArray;
  const __CFAllocator *v9;
  int v10;
  uint64_t v11;
  char v13;
  CFTypeRef cf;
  unint64_t v15;

  cf = 0;
  v15 = a2;
  v13 = 0;
  if (!a4)
    return 0;
  v7 = a1 + 40;
  BitDepthArray = _checkImageIndex(a1 + 40, &v15, &v13);
  if ((_DWORD)BitDepthArray)
    goto LABEL_16;
  BitDepthArray = _parseMPOIfNeeded(v7);
  if ((_DWORD)BitDepthArray)
    goto LABEL_16;
  if (v13)
  {
    if (!*(_BYTE *)(a1 + 153))
    {
      v11 = 4294950304;
      goto LABEL_17;
    }
    v9 = *(const __CFAllocator **)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 228);
    goto LABEL_10;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    BitDepthArray = FigSignalErrorAt();
LABEL_16:
    v11 = BitDepthArray;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 264) > a3)
  {
    v9 = *(const __CFAllocator **)(a1 + 40);
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 96 * a3 + 68);
LABEL_10:
    BitDepthArray = _createBitDepthArray(v9, 6, v10, (__CFArray **)&cf);
    if (!(_DWORD)BitDepthArray)
    {
      v11 = 0;
      *a4 = cf;
      return v11;
    }
    goto LABEL_16;
  }
  v11 = 4294950303;
LABEL_17:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t _copyColorSpaceForIndex(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  char v10;
  unint64_t v11;

  v11 = a2;
  if (!a3)
    return 0;
  v5 = a1 + 40;
  v10 = 0;
  result = _checkImageIndex(a1 + 40, &v11, &v10);
  if (!(_DWORD)result)
  {
    result = _parseICCProfileIfNeeded(v5);
    if (!(_DWORD)result)
    {
      if (v10)
      {
        if (!*(_BYTE *)(a1 + 153))
          return 4294950304;
        v7 = *(_QWORD *)(a1 + 232);
        if (!v7)
        {
          v8 = *(const void **)(a1 + 240);
          if (v8)
          {
            v9 = CFRetain(v8);
LABEL_12:
            result = 0;
            *a3 = v9;
            return result;
          }
          return FigSignalErrorAt();
        }
      }
      else
      {
        if (!*(_BYTE *)(a1 + 457))
          return 4294950303;
        v7 = *(_QWORD *)(a1 + 464);
      }
      v9 = (CFTypeRef)MEMORY[0x1A85CF43C](v7);
      if (v9)
        goto LABEL_12;
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t _copyIPTCForIndex(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  unint64_t v9;
  CFTypeRef cf;

  v9 = a2;
  v5 = _checkImageIndex(a1 + 40, &v9, 0);
  if ((_DWORD)v5)
    return v5;
  cf = 0;
  v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  if ((_DWORD)v5)
    return v5;
  if (*(_BYTE *)(a1 + 472))
  {
    v6 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 472) = 1;
    v6 = CMPhotoCopyIPTCFromJFIFByteStream(*(const __CFAllocator **)(a1 + 40), *(_QWORD *)(a1 + 64), 0, (_BYTE *)(a1 + 473), (__CFData **)&cf);
    if (!(_DWORD)v6)
    {
      *(_QWORD *)(a1 + 480) = cf;
      cf = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v6)
  {
    if (*(_BYTE *)(a1 + 473))
    {
      if (a3)
      {
        v7 = *(CFTypeRef *)(a1 + 480);
        if (v7)
          v7 = CFRetain(v7);
        v6 = 0;
        *a3 = v7;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294950303;
    }
  }
  return v6;
}

uint64_t _parseMPOIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int FlexRangeMetadataDictionaryFromBinaryMetadata;
  int v12;
  _BOOL4 v13;
  int v14;
  CGColorSpaceRef v15;
  const __CFString *v16;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  _OWORD *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const __CFString *name;
  size_t v40;
  size_t v41;
  void *v42;
  char v43;
  _QWORD block[5];
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  const void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;

  v41 = 1;
  v42 = 0;
  v2 = _parseImageSizeAndTypeIfNeeded(a1);
  if ((_DWORD)v2)
    return v2;
  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(a1 + 112)
    || (*(_WORD *)(a1 + 112) = 1,
        *(_OWORD *)(a1 + 216) = xmmword_1A828F190,
        CMPhotoCopyImageCountAndRangesFromJFIFByteStream(*(_QWORD *)(a1 + 24), 0, &v41, &v42)))
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_5;
  }
  v40 = v41;
  v4 = v41 - 1;
  if (v41 == 1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  v5 = malloc_type_calloc(v41 - 1, 0x60uLL, 0x10600403F7110D9uLL);
  if (!v5)
  {
    v3 = 4294950305;
    goto LABEL_6;
  }
  v8 = 0;
  v38 = *MEMORY[0x1E0C9D978];
  v37 = *MEMORY[0x1E0C9DA10];
  name = (const __CFString *)*MEMORY[0x1E0C9D9C8];
  v9 = 1;
  while (v40 != v9)
  {
    v10 = *((_OWORD *)v42 + v9);
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0;
    v47 = 0;
    v48 = &v47;
    v49 = 0x2000000000;
    v50 = 0;
    v46 = 0;
    v45 = 0;
    v55 = v10;
    if (CMPhotoGetImageInformationFromJFIFByteStream(*(_QWORD *)(a1 + 24), v10, &v52, &v45, 0, &v46, (_DWORD *)&v56 + 1, &v51))goto LABEL_85;
    LOBYTE(v56) = v46 == 195;
    if (v51)
    {
      FlexRangeMetadataDictionaryFromBinaryMetadata = CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(v51, 0, (__CFDictionary **)&v57 + 1);
      if (FlexRangeMetadataDictionaryFromBinaryMetadata)
        goto LABEL_86;
    }
    v12 = CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(*(const __CFAllocator **)a1, *(_QWORD *)(a1 + 24), v55, (int *)&v53, (CGImageMetadata **)&v53 + 1, &v54, (const __CFDictionary **)&v54 + 1);
    if (v12 && *((_QWORD *)&v57 + 1))
    {
      LODWORD(v53) = 4;
    }
    else if (v12 && !*((_QWORD *)&v57 + 1))
    {
LABEL_85:
      FlexRangeMetadataDictionaryFromBinaryMetadata = FigSignalErrorAt();
LABEL_86:
      v31 = FlexRangeMetadataDictionaryFromBinaryMetadata;
      v15 = 0;
      goto LABEL_74;
    }
    if (!FigCFDictionaryGetInt32IfPresent()
      && CMPhotoGetYUVPixelFormatForParameters(v45, SDWORD1(v56), 1, 0, 0, 0, 1, (int *)&v53 + 1))
    {
      goto LABEL_85;
    }
    FlexRangeMetadataDictionaryFromBinaryMetadata = CMPhotoCopyICCProfileFromJFIFByteStream(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), v55, 0, 0, (_QWORD *)&v56 + 1);
    if (FlexRangeMetadataDictionaryFromBinaryMetadata)
      goto LABEL_86;
    if (!*(_BYTE *)(a1 + 113))
    {
      if (*((_QWORD *)&v57 + 1))
        goto LABEL_30;
      if ((_DWORD)v53 == 4)
      {
        if (FigCFEqual())
        {
LABEL_30:
          *((_BYTE *)v48 + 24) = 1;
          goto LABEL_36;
        }
        if (FigCFEqual() && *((_QWORD *)&v53 + 1))
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = ___parseAuxImage_block_invoke;
          block[3] = &unk_1E53F5260;
          block[4] = &v47;
          CGImageMetadataEnumerateTagsUsingBlock(*((CGImageMetadataRef *)&v53 + 1), 0, 0, block);
        }
      }
    }
LABEL_36:
    if ((_DWORD)v53 == 4)
      v13 = (_QWORD)v54 != 0;
    else
      v13 = v53 != 0;
    v14 = *((unsigned __int8 *)v48 + 24);
    if (*((_BYTE *)v48 + 24) && !*((_QWORD *)&v56 + 1))
    {
      if (!*(_BYTE *)(a1 + 417) || (v15 = (CGColorSpaceRef)MEMORY[0x1A85CF43C](*(_QWORD *)(a1 + 424))) == 0)
      {
        v16 = (const __CFString *)(*(_DWORD *)(a1 + 88) == 6 ? v38 : v37);
        v15 = CGColorSpaceCreateWithName(v16);
        if (!v15)
        {
LABEL_87:
          v31 = -16991;
          goto LABEL_89;
        }
      }
      v43 = 1;
      CMPhotoCFDictionaryGetBooleanIfPresent(*((CFDictionaryRef *)&v57 + 1), CFSTR("TonemapBaseColorIsWorkingColor"), &v43);
      if (!v43)
      {
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
          goto LABEL_87;
        v18 = MutableCopy;
        CMPhotoCFDictionarySetBoolean(MutableCopy, CFSTR("TonemapBaseColorIsWorkingColor"), 1);
        if (*((_QWORD *)&v57 + 1))
          CFRelease(*((CFTypeRef *)&v57 + 1));
        *((_QWORD *)&v57 + 1) = v18;
      }
      v58 = 0;
      if (!CGColorSpaceGetCICPInfo() || (BYTE1(v58) = 16, (v19 = CGColorSpaceCreateFromCICP()) == 0))
      {
        v19 = (uint64_t)CGColorSpaceCreateWithName(name);
        if (!v19)
        {
          v31 = FigSignalErrorAt();
LABEL_89:
          if (v13)
          {
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
LABEL_74:
          _releaseAuxImageStorage(&v52);
          goto LABEL_75;
        }
      }
      CFRelease(v15);
      *(_QWORD *)&v57 = v19;
      v14 = *((unsigned __int8 *)v48 + 24);
    }
    if (v14)
    {
      v20 = v9 - 1;
      v21 = v57;
      *(_OWORD *)(a1 + 184) = v56;
      *(_OWORD *)(a1 + 200) = v21;
      v22 = v55;
      *(_OWORD *)(a1 + 152) = v54;
      *(_OWORD *)(a1 + 168) = v22;
      v23 = v53;
      *(_OWORD *)(a1 + 120) = v52;
      *(_OWORD *)(a1 + 136) = v23;
      *(_BYTE *)(a1 + 113) = 1;
      if (!v13)
        v20 = -1;
      *(_QWORD *)(a1 + 216) = v20;
      v24 = *(const void **)(a1 + 144);
      if (v24)
        CFRetain(v24);
      v25 = *(const void **)(a1 + 160);
      if (v25)
        CFRetain(v25);
      v26 = *(const void **)(a1 + 152);
      if (v26)
        CFRetain(v26);
      v27 = *(const void **)(a1 + 192);
      if (v27)
        CFRetain(v27);
      v28 = *(const void **)(a1 + 200);
      if (v28)
        CFRetain(v28);
      v29 = *(const void **)(a1 + 208);
      if (v29)
        CFRetain(v29);
    }
    v30 = &v5[12 * v8];
    v15 = 0;
    v31 = 0;
    if (!v13)
    {
      v30[4] = 0u;
      v30[5] = 0u;
      v30[2] = 0u;
      v30[3] = 0u;
      *v30 = 0u;
      v30[1] = 0u;
      goto LABEL_74;
    }
    v32 = v53;
    *v30 = v52;
    v30[1] = v32;
    v33 = v54;
    v34 = v55;
    v35 = v57;
    v30[4] = v56;
    v30[5] = v35;
    v30[2] = v33;
    v30[3] = v34;
    v36 = 1;
LABEL_76:
    if (v51)
      CFRelease(v51);
    if (v15)
      CFRelease(v15);
    _Block_object_dispose(&v47, 8);
    if (v31)
      v3 = FigSignalErrorAt();
    else
      v3 = 0;
    v8 += v36;
    ++v9;
    if ((_DWORD)v3)
      goto LABEL_6;
  }
  v3 = 0;
  if (v8)
  {
    *(_QWORD *)(a1 + 224) = v8;
    *(_QWORD *)(a1 + 232) = v5;
LABEL_5:
    v5 = 0;
  }
LABEL_6:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  free(v42);
  if (v5)
  {
    if (v4)
    {
      v6 = v5;
      do
      {
        _releaseAuxImageStorage(v6);
        v6 += 12;
        --v4;
      }
      while (v4);
    }
    free(v5);
  }
  return v3;
}

void _releaseAuxImageStorage(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    v3 = (const void *)a1[5];
    if (v3)
    {
      CFRelease(v3);
      a1[5] = 0;
    }
    v4 = (const void *)a1[4];
    if (v4)
    {
      CFRelease(v4);
      a1[4] = 0;
    }
    v5 = (const void *)a1[9];
    if (v5)
    {
      CFRelease(v5);
      a1[9] = 0;
    }
    v6 = (const void *)a1[10];
    if (v6)
    {
      CFRelease(v6);
      a1[10] = 0;
    }
    v7 = (const void *)a1[11];
    if (v7)
    {
      CFRelease(v7);
      a1[11] = 0;
    }
  }
}

BOOL ___parseAuxImage_block_invoke(uint64_t a1, int a2, CGImageMetadataTagRef tag)
{
  CFStringRef v4;
  int v5;

  v4 = CGImageMetadataTagCopyNamespace(tag);
  v5 = FigCFEqual();
  if (v5)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (v4)
    CFRelease(v4);
  return v5 == 0;
}

uint64_t _checkImageIndex(uint64_t a1, unint64_t *a2, _BYTE *a3)
{
  unint64_t v3;

  v3 = *a2;
  if (!*(_BYTE *)(a1 + 113))
  {
    if (!v3)
      goto LABEL_5;
    return FigSignalErrorAt();
  }
  if (v3 >= 2)
    return FigSignalErrorAt();
  LOBYTE(v3) = v3 == 1;
  *a2 = 0;
LABEL_5:
  if (a3)
    *a3 = v3;
  return 0;
}

uint64_t _getAuxiliaryImageStorageForIndex(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;

  if (!a4)
    return 4294950306;
  if (a3 == -128)
  {
    if (!a2 || !*(_BYTE *)(a1 + 113))
      return 4294950304;
    v4 = 0;
    v5 = a1 + 120;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      v6 = *(_QWORD *)(a1 + 216);
      if (v6 == -1)
      {
        v9 = 0;
        v7 = 0;
        v8 = 0;
      }
      else
      {
        v9 = __OFSUB__(v6, a3);
        v7 = v6 == a3;
        v8 = (uint64_t)(v6 - a3) < 0;
      }
      if (v8 ^ v9 | v7)
        ++a3;
    }
    if (a3 >= *(_QWORD *)(a1 + 224))
      return 4294950303;
    v10 = *(_QWORD *)(a1 + 232);
    if (v10)
    {
      v4 = 0;
      v5 = v10 + 96 * a3;
LABEL_16:
      *a4 = v5;
      return v4;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _createOutputBufferAttributesForImageGeometry(uint64_t a1, int a2, unint64_t a3, unint64_t a4, char a5, const __CFDictionary *a6, CFDictionaryRef *a7)
{
  uint64_t v11;
  void *v12;
  CFNumberRef Size;
  uint64_t v14;
  CFDictionaryRef v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  CFTypeRef cf;
  void *values[3];
  void *keys[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v11 = _parseOptionsForJPEGDecoding(a1, a6, a3, a4, a2, a5, (uint64_t)&v21);
  if ((_DWORD)v11)
    goto LABEL_17;
  v11 = CMPhotoDecompressionSessionCopySurfacePool(*(_QWORD *)(a1 + 16), &cf);
  if ((_DWORD)v11)
    goto LABEL_17;
  v20 = 0uLL;
  v39 = v27;
  v40 = v28;
  v41 = v29;
  v42 = v30;
  v35 = v23;
  v36 = v24;
  v37 = v25;
  v38 = v26;
  *(_OWORD *)keys = v21;
  v34 = v22;
  v11 = _determineDecodeStrategy(a1, 0, (uint64_t)keys, a3, a4, (uint64_t)cf, 0, 0, &v20, 0, 0);
  if ((_DWORD)v11)
  {
LABEL_17:
    v16 = v11;
  }
  else
  {
    v12 = (void *)*MEMORY[0x1E0CA8FD8];
    keys[0] = *(void **)MEMORY[0x1E0CA90E0];
    keys[1] = v12;
    *(_QWORD *)&v34 = *MEMORY[0x1E0CA8F68];
    values[0] = CMPhotoCFNumberCreateSize(v20.i64[0]);
    values[1] = CMPhotoCFNumberCreateSize(v20.i64[1]);
    Size = CMPhotoCFNumberCreateSize(16);
    v14 = 0;
    values[2] = Size;
    while (values[v14])
    {
      if (++v14 == 3)
      {
        v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *a7 = v15;
        if (v15)
        {
          v16 = 0;
          goto LABEL_9;
        }
        break;
      }
    }
    v16 = FigSignalErrorAt();
LABEL_9:
    for (i = 0; i != 3; ++i)
    {
      v18 = values[i];
      if (v18)
        CFRelease(v18);
    }
  }
  if (cf)
    CFRelease(cf);
  return v16;
}

uint64_t _transcodeAuxiliaryImageCallback(unint64_t a1, uint64_t a2, CFTypeRef *a3, _QWORD *a4, _DWORD *a5, CFTypeRef *a6, CFTypeRef *a7, CFDataRef *a8, _QWORD *a9)
{
  _QWORD *v17;
  uint64_t v18;
  const __CFAllocator *v19;
  uint64_t AuxiliaryImageTypeForIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *MutableCopyWithCFTypeCallbacks;
  CFMutableDictionaryRef Mutable;
  uint64_t v26;
  uint64_t AuxiliaryImageForIndex;
  uint64_t v28;
  CFTypeRef v29;
  _DWORD *v31;
  CGColorSpaceRef space;
  int v33;
  int v34;
  CFTypeRef cf;
  CFTypeRef v36;
  CFTypeRef v37;

  v17 = *(_QWORD **)a2;
  v19 = CFGetAllocator(*(CFTypeRef *)a2);
  v36 = 0;
  v37 = 0;
  cf = 0;
  v34 = 0;
  v31 = a5;
  if (*(_BYTE *)(a2 + 24))
  {
    if (a1)
    {
      AuxiliaryImageTypeForIndex = FigSignalErrorAt();
      goto LABEL_43;
    }
    a1 = *(_QWORD *)(a2 + 16);
  }
  v33 = 0;
  AuxiliaryImageTypeForIndex = _getAuxiliaryImageTypeForIndex((uint64_t)v17, 0, a1, v18, &v34, &v33);
  if ((_DWORD)AuxiliaryImageTypeForIndex)
  {
LABEL_43:
    v23 = AuxiliaryImageTypeForIndex;
    goto LABEL_33;
  }
  v22 = _copyAuxiliaryImageMetadataForIndex((uint64_t)v17, 0, a1, v21, &v36);
  if ((_DWORD)v22)
  {
    v23 = v22;
    if ((_DWORD)v22 != -16993)
      goto LABEL_33;
  }
  if (v34 == 4)
  {
    if (*(_QWORD *)(a2 + 16) == a1 && *(_QWORD *)(a2 + 8))
    {
      MutableCopyWithCFTypeCallbacks = (const void *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks();
      if (!MutableCopyWithCFTypeCallbacks)
        goto LABEL_44;
    }
    else
    {
      MutableCopyWithCFTypeCallbacks = 0;
    }
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v19, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
LABEL_44:
      v23 = 4294950305;
      goto LABEL_33;
    }
    MutableCopyWithCFTypeCallbacks = Mutable;
    v26 = FigCFDictionarySetInt();
    if ((_DWORD)v26)
    {
      v23 = v26;
      goto LABEL_32;
    }
  }
  if (*(_BYTE *)(a2 + 25) && (AuxiliaryImageForIndex = FigCFDictionarySetInt(), (_DWORD)AuxiliaryImageForIndex)
    || (AuxiliaryImageForIndex = _createAuxiliaryImageForIndex((uint64_t)v17, 0, a1, (const __CFDictionary *)MutableCopyWithCFTypeCallbacks, 2, (uint64_t)&v37), (_DWORD)AuxiliaryImageForIndex))
  {
    v23 = AuxiliaryImageForIndex;
    if (!MutableCopyWithCFTypeCallbacks)
      goto LABEL_33;
LABEL_32:
    CFRelease(MutableCopyWithCFTypeCallbacks);
    goto LABEL_33;
  }
  if (a6)
    _copyAuxiliaryImageTypeInfoForIndex((uint64_t)v17, 0, a1, v28, &cf);
  if (a8)
  {
    space = 0;
    if (!_copyAuxiliaryColorSpaceForIndex((uint64_t)v17, 0, a1, (uint64_t *)&space))
    {
      *a8 = CGColorSpaceCopyICCData(space);
      if (space)
        CFRelease(space);
    }
  }
  if (a9)
  {
    v29 = *(CFTypeRef *)(v17[34] + 96 * a1 + 88);
    if (v29)
      v29 = CFRetain(v29);
    *a9 = v29;
  }
  *a7 = v37;
  *a3 = v36;
  v36 = 0;
  v37 = 0;
  *a4 = 0;
  if (a6)
  {
    *a6 = cf;
    cf = 0;
  }
  v23 = 0;
  *v31 = v34;
  if (MutableCopyWithCFTypeCallbacks)
    goto LABEL_32;
LABEL_33:
  if (cf)
    CFRelease(cf);
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  return v23;
}

uint64_t _parseXMPIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t XMPLocationFromJFIFByteStream;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(a1 + 328))
  {
    XMPLocationFromJFIFByteStream = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 328) = 1;
    v9 = 0;
    v7 = 0;
    v8 = 0;
    XMPLocationFromJFIFByteStream = CMPhotoGetXMPLocationFromJFIFByteStream(*(_QWORD *)(a1 + 24), 0, &v9, &v8, &v7);
    if (!(_DWORD)XMPLocationFromJFIFByteStream)
    {
      v4 = v9;
      *(_BYTE *)(a1 + 329) = v9;
      if (v4)
      {
        v5 = v7;
        *(_QWORD *)(a1 + 336) = v8;
        *(_QWORD *)(a1 + 344) = v5;
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return XMPLocationFromJFIFByteStream;
}

uint64_t _parseDebugMetadataIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(a1 + 352))
  {
    v3 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 352) = 1;
    v3 = CMPhotoCopyDebugMetadataFromJFIFByteStream(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), 0, (_BYTE *)(a1 + 353), (_OWORD *)(a1 + 360), (CFDataRef *)(a1 + 376));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

uint64_t _parseCustomMetadataIfNeeded(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if ((_DWORD)v2)
    return v2;
  if (*(_BYTE *)(a1 + 384))
  {
    v3 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 384) = 1;
    v3 = CMPhotoCopyCustomMetadataFromJFIFByteStream(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), 0, (_BYTE *)(a1 + 385), (_OWORD *)(a1 + 392), (_QWORD *)(a1 + 408));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

uint64_t _createMainImageDescription(uint64_t a1, const __CFNumber *a2, __CFDictionary **a3)
{
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, __int128 *);
  uint64_t ImageGeometryForIndex;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  __CFArray *v18;
  CFMutableArrayRef v19;
  __CFArray *v20;
  int v21;
  CFIndex v22;
  __CFArray *v23;
  uint64_t MainImageDescription;
  uint64_t v25;
  CFStringRef v26;
  CFStringRef v27;
  uint64_t v28;
  int ChromaSubsamplingFromPixelFormat;
  CFDictionaryRef v30;
  CFDictionaryRef v31;
  const void *v32;
  __CFDictionary *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFMutableDictionaryRef v38;
  CFMutableDictionaryRef v39;
  uint64_t BitDepthArray;
  CFDictionaryRef v41;
  CFDictionaryRef v42;
  void *v43;
  uint64_t v44;
  uint64_t AuxiliaryImageCountForIndex;
  unint64_t v46;
  uint64_t AuxiliaryImageStorageForIndex;
  CFMutableDictionaryRef v48;
  CFMutableDictionaryRef v49;
  CFDictionaryRef v50;
  CFDictionaryRef v51;
  const void *v52;
  void *v53;
  CFStringRef v54;
  CFStringRef v55;
  uint64_t v56;
  __CFDictionary **v58;
  __CFArray *v59;
  __CFArray *v60;
  _BOOL4 v61;
  uint64_t v62;
  CFIndex capacity;
  int v64;
  void *value;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  CFTypeRef v69;
  const __CFNumber *v70;
  CFTypeRef cf[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __CFDictionary *v81;
  CGSize v82;
  CGSize v83;
  CGSize v84;
  CGSize v85;

  v69 = 0;
  v70 = a2;
  v3 = *(const __CFAllocator **)(a1 + 40);
  v62 = a1 + 40;
  v67 = 0;
  v68 = 0;
  value = 0;
  v66 = 0;
  v64 = 0;
  if (!a3)
  {
    Mutable = 0;
    v18 = 0;
    v17 = 4294950306;
    goto LABEL_146;
  }
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v17 = 4294950305;
    goto LABEL_140;
  }
  if (a2 != (const __CFNumber *)-1
    || (v8 = CMPhotoDecompressionContainerExternalToInternalIndex((_QWORD *)a1, 0, -1, 0, &v70, 0, 0),
        !(_DWORD)v8))
  {
    *(_QWORD *)&v76 = 0;
    if (*(_QWORD *)(a1 + 264))
    {
      *(_QWORD *)&v76 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(uint64_t (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v10)
      {
        v23 = 0;
        v17 = 4294954514;
LABEL_45:
        v20 = 0;
        v19 = 0;
        v18 = 0;
        goto LABEL_138;
      }
      ImageGeometryForIndex = v10(v9, 0, &v76);
      if ((_DWORD)ImageGeometryForIndex)
        goto LABEL_163;
    }
    ImageGeometryForIndex = CMPhotoCFDictionarySetInt64(Mutable, CFSTR("DataOffset"), 0);
    if (!(_DWORD)ImageGeometryForIndex)
    {
      if ((v76 & 0x8000000000000000) != 0)
      {
        v23 = 0;
        v17 = 4294950190;
        goto LABEL_45;
      }
      ImageGeometryForIndex = CMPhotoCFDictionarySetSize(Mutable, CFSTR("DataLength"), v76);
      if (!(_DWORD)ImageGeometryForIndex)
      {
        v82.width = (double)*(unint64_t *)(a1 + 112);
        v82.height = (double)*(unint64_t *)(a1 + 120);
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v82);
        if (!DictionaryRepresentation)
        {
          v23 = 0;
          goto LABEL_172;
        }
        v13 = DictionaryRepresentation;
        CFDictionarySetValue(Mutable, CFSTR("Dimensions"), DictionaryRepresentation);
        CFRelease(v13);
        ImageGeometryForIndex = _getImageGeometryForIndex(a1, 0, v14, 0, 0, &v64);
        if (!(_DWORD)ImageGeometryForIndex)
        {
          ImageGeometryForIndex = FigCFDictionarySetInt();
          if (!(_DWORD)ImageGeometryForIndex)
          {
            ImageGeometryForIndex = CMPhotoCFDictionarySetInt64(Mutable, CFSTR("ItemID"), 1);
            if (!(_DWORD)ImageGeometryForIndex)
            {
              ImageGeometryForIndex = _createBitDepthArray(v3, *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 136), (__CFArray **)&value);
              if (!(_DWORD)ImageGeometryForIndex)
              {
                v15 = value;
                CFDictionarySetValue(Mutable, CFSTR("BitDepth"), value);
                if (v15)
                {
                  CFRelease(v15);
                  value = 0;
                }
                if (a2 != (const __CFNumber *)-1)
                {
                  if (v70)
                    v16 = 1953325424;
                  else
                    v16 = 1785750887;
                  ImageGeometryForIndex = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("CodecType"), v16);
                  if (!(_DWORD)ImageGeometryForIndex)
                  {
                    v8 = FigCFDictionarySetCFIndex();
                    if ((_DWORD)v8)
                      goto LABEL_25;
                    goto LABEL_40;
                  }
                  goto LABEL_163;
                }
                ImageGeometryForIndex = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("CodecType"), 1785750887);
                if (!(_DWORD)ImageGeometryForIndex)
                {
                  v21 = *(unsigned __int8 *)(a1 + 153);
                  v22 = *(_BYTE *)(a1 + 153) ? 2 : 1;
                  ImageGeometryForIndex = FigCFDictionarySetInt();
                  if (!(_DWORD)ImageGeometryForIndex)
                  {
                    if (!v21)
                    {
LABEL_40:
                      v23 = 0;
                      goto LABEL_41;
                    }
                    v23 = CFArrayCreateMutable(v3, v22, MEMORY[0x1E0C9B378]);
                    if (v23)
                    {
                      cf[0] = 0;
                      MainImageDescription = _createMainImageDescription(a1, 1, cf);
                      if ((_DWORD)MainImageDescription)
                        goto LABEL_166;
                      CFArrayAppendValue(v23, cf[0]);
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      MainImageDescription = _createMainImageDescription(a1, 0, cf);
                      if ((_DWORD)MainImageDescription)
                      {
LABEL_166:
                        v17 = MainImageDescription;
                        goto LABEL_45;
                      }
                      CFArrayAppendValue(v23, cf[0]);
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      CFDictionarySetValue(Mutable, CFSTR("AlternateImages"), v23);
LABEL_41:
                      cf[0] = 0;
                      if (!_copyColorSpaceForIndex(a1, (unint64_t)v70, cf))
                      {
                        v26 = CGColorSpaceCopyName((CGColorSpaceRef)cf[0]);
                        if (v26)
                        {
                          v27 = v26;
                          CFDictionarySetValue(Mutable, CFSTR("NamedColorSpace"), v26);
                          CFRelease(v27);
                        }
                        else
                        {
                          CFDictionarySetValue(Mutable, CFSTR("ColorSpace"), cf[0]);
                        }
                        if (cf[0])
                          CFRelease(cf[0]);
                      }
                      v61 = v70 == (const __CFNumber *)1;
                      if (v70 != (const __CFNumber *)1)
                      {
LABEL_67:
                        if (!*(_BYTE *)(a1 + 281)
                          || (MainImageDescription = _createMetadataDescriptionArray(v3, *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), (__CFArray **)&v69), !(_DWORD)MainImageDescription))
                        {
                          if (!*(_BYTE *)(a1 + 369)
                            || (MainImageDescription = _createMetadataDescriptionArray(v3, *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), (__CFArray **)&v68), !(_DWORD)MainImageDescription))
                          {
                            if (!*(_BYTE *)(a1 + 393)
                              || (MainImageDescription = _createMetadataDescriptionArray(v3, *(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), (__CFArray **)&v67), !(_DWORD)MainImageDescription))
                            {
                              if (*(_BYTE *)(a1 + 425))
                              {
                                v18 = CFArrayCreateMutable(v3, 1, MEMORY[0x1E0C9B378]);
                                if (!v18)
                                {
                                  v20 = 0;
                                  goto LABEL_176;
                                }
                                v37 = _copyCustomMetadataForIndex(a1, (unint64_t)v70, v35, v36, &v66);
                                if ((_DWORD)v37)
                                {
                                  v17 = v37;
                                  v20 = 0;
                                  goto LABEL_165;
                                }
                                CFArrayAppendValue(v18, v66);
                              }
                              else
                              {
                                v18 = 0;
                              }
                              if (!*(_BYTE *)(a1 + 312))
                              {
                                v60 = 0;
                                v44 = 2;
                                goto LABEL_92;
                              }
                              v20 = CFArrayCreateMutable(v3, 1, MEMORY[0x1E0C9B378]);
                              if (v20)
                              {
                                v38 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                if (v38)
                                {
                                  v39 = v38;
                                  CFArrayAppendValue(v20, v38);
                                  CFRelease(v39);
                                  BitDepthArray = CMPhotoCFDictionarySetInt64(v39, CFSTR("DataOffset"), *(_QWORD *)(a1 + 344) + *(_QWORD *)(a1 + 288));
                                  if ((_DWORD)BitDepthArray
                                    || (BitDepthArray = CMPhotoCFDictionarySetSize(v39, CFSTR("DataLength"), *(_QWORD *)(a1 + 352)), (_DWORD)BitDepthArray))
                                  {
LABEL_164:
                                    v17 = BitDepthArray;
LABEL_165:
                                    v19 = 0;
                                    goto LABEL_138;
                                  }
                                  v84.width = (double)*(unint64_t *)(a1 + 320);
                                  v84.height = (double)*(unint64_t *)(a1 + 328);
                                  v41 = CGSizeCreateDictionaryRepresentation(v84);
                                  if (v41)
                                  {
                                    v42 = v41;
                                    CFDictionarySetValue(v39, CFSTR("Dimensions"), v41);
                                    CFRelease(v42);
                                    BitDepthArray = FigCFDictionarySetInt();
                                    if (!(_DWORD)BitDepthArray)
                                    {
                                      BitDepthArray = CMPhotoCFDictionarySetInt64(v39, CFSTR("ItemID"), 2);
                                      if (!(_DWORD)BitDepthArray)
                                      {
                                        BitDepthArray = _createBitDepthArray(v3, *(_DWORD *)(a1 + 336), *(_DWORD *)(a1 + 360), (__CFArray **)&value);
                                        if (!(_DWORD)BitDepthArray)
                                        {
                                          v43 = value;
                                          CFDictionarySetValue(v39, CFSTR("BitDepth"), value);
                                          if (v43)
                                          {
                                            CFRelease(v43);
                                            value = 0;
                                          }
                                          BitDepthArray = CMPhotoCFDictionarySetInt32(v39, CFSTR("CodecType"), 1785750887);
                                          if (!(_DWORD)BitDepthArray)
                                          {
                                            v60 = v20;
                                            v44 = 3;
LABEL_92:
                                            capacity = 0;
                                            AuxiliaryImageCountForIndex = _getAuxiliaryImageCountForIndex(a1, (unint64_t)v70, v25, &capacity);
                                            if ((_DWORD)AuxiliaryImageCountForIndex)
                                            {
                                              v17 = AuxiliaryImageCountForIndex;
                                              v19 = 0;
                                            }
                                            else
                                            {
                                              v58 = a3;
                                              v59 = v23;
                                              if (capacity < 1)
                                              {
                                                v19 = 0;
LABEL_123:
                                                if (v69)
                                                  CFDictionarySetValue(Mutable, CFSTR("ExifPayloads"), v69);
                                                v23 = v59;
                                                v20 = v60;
                                                if (v68)
                                                  CFDictionarySetValue(Mutable, CFSTR("XMPPayloads"), v68);
                                                if (v67)
                                                  CFDictionarySetValue(Mutable, CFSTR("DebugPayloads"), v67);
                                                if (v18)
                                                  CFDictionarySetValue(Mutable, CFSTR("CustomMetadataPayloads"), v18);
                                                if (v60)
                                                {
                                                  CFDictionarySetValue(Mutable, CFSTR("ThumbnailImages"), v60);
                                                  CFArrayGetCount(v60);
                                                }
                                                v56 = FigCFDictionarySetInt();
                                                if ((_DWORD)v56)
                                                {
                                                  v17 = v56;
                                                }
                                                else
                                                {
                                                  if (v19)
                                                  {
                                                    CFDictionarySetValue(Mutable, CFSTR("AuxiliaryImages"), v19);
                                                    CFArrayGetCount(v19);
                                                  }
                                                  v17 = FigCFDictionarySetInt();
                                                  if (!(_DWORD)v17)
                                                  {
                                                    *v58 = Mutable;
                                                    Mutable = 0;
                                                  }
                                                }
                                                goto LABEL_138;
                                              }
                                              v46 = 0;
                                              v19 = 0;
                                              while (1)
                                              {
                                                *(_QWORD *)&v76 = 0;
                                                AuxiliaryImageStorageForIndex = _getAuxiliaryImageStorageForIndex(v62, v61, v46, &v76);
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                {
LABEL_159:
                                                  v17 = AuxiliaryImageStorageForIndex;
                                                  goto LABEL_161;
                                                }
                                                if (!v19)
                                                {
                                                  v19 = CFArrayCreateMutable(v3, capacity, MEMORY[0x1E0C9B378]);
                                                  if (!v19)
                                                    break;
                                                }
                                                v48 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                                if (!v48)
                                                  break;
                                                v49 = v48;
                                                CFArrayAppendValue(v19, v48);
                                                CFRelease(v49);
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt64(v49, CFSTR("DataOffset"), *(_QWORD *)(v76 + 48));
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetSize(v49, CFSTR("DataLength"), *(_QWORD *)(v76 + 56));
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                v85.width = (double)*(unint64_t *)v76;
                                                v85.height = (double)*(unint64_t *)(v76 + 8);
                                                v50 = CGSizeCreateDictionaryRepresentation(v85);
                                                if (!v50)
                                                  break;
                                                v51 = v50;
                                                CFDictionarySetValue(v49, CFSTR("Dimensions"), v50);
                                                CFRelease(v51);
                                                AuxiliaryImageStorageForIndex = FigCFDictionarySetInt();
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt64(v49, CFSTR("ItemID"), v44 + v46);
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt(v49, CFSTR("AuxiliaryType"), *(_DWORD *)(v76 + 16));
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt32(v49, CFSTR("AuxiliaryNativePixelFormat"), *(_DWORD *)(v76 + 20));
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                v52 = *(const void **)(v76 + 32);
                                                if (v52)
                                                {
                                                  CFDictionarySetValue(v49, CFSTR("AuxiliaryTypeURN"), v52);
                                                  if (*(_DWORD *)(v76 + 16) == 4)
                                                  {
                                                    if (FigCFEqual())
                                                      CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex((_QWORD *)a1, 0, v46, v49);
                                                  }
                                                }
                                                AuxiliaryImageStorageForIndex = _createBitDepthArray(v3, 6, *(_DWORD *)(v76 + 68), (__CFArray **)&value);
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                v53 = value;
                                                CFDictionarySetValue(v49, CFSTR("BitDepth"), value);
                                                if (v53)
                                                {
                                                  CFRelease(v53);
                                                  value = 0;
                                                }
                                                AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt32(v49, CFSTR("CodecType"), 1785750887);
                                                if ((_DWORD)AuxiliaryImageStorageForIndex)
                                                  goto LABEL_159;
                                                cf[0] = 0;
                                                if (!_copyAuxiliaryColorSpaceForIndex(a1, (unint64_t)v70, v46, (uint64_t *)cf))
                                                {
                                                  v54 = CGColorSpaceCopyName((CGColorSpaceRef)cf[0]);
                                                  if (v54)
                                                  {
                                                    v55 = v54;
                                                    CFDictionarySetValue(v49, CFSTR("NamedColorSpace"), v54);
                                                    CFRelease(v55);
                                                  }
                                                  else
                                                  {
                                                    CFDictionarySetValue(v49, CFSTR("ColorSpace"), cf[0]);
                                                  }
                                                  if (cf[0])
                                                    CFRelease(cf[0]);
                                                }
                                                if ((uint64_t)++v46 >= capacity)
                                                  goto LABEL_123;
                                              }
                                              v17 = 4294950305;
LABEL_161:
                                              v23 = v59;
                                            }
                                            v20 = v60;
LABEL_138:
                                            if (v23)
                                              CFRelease(v23);
                                            goto LABEL_140;
                                          }
                                        }
                                      }
                                    }
                                    goto LABEL_164;
                                  }
                                }
                              }
LABEL_176:
                              v19 = 0;
                              v17 = 4294950305;
                              goto LABEL_138;
                            }
                          }
                        }
                        goto LABEL_166;
                      }
                      v81 = 0;
                      if (!*(_BYTE *)(a1 + 153))
                      {
                        v20 = 0;
                        v19 = 0;
                        v18 = 0;
                        v17 = 4294950304;
                        goto LABEL_138;
                      }
                      v28 = FigCFDictionarySetInt();
                      if (!(_DWORD)v28)
                      {
                        v28 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("DerivationGainMapPixelFormat"), *(_DWORD *)(a1 + 180));
                        if (!(_DWORD)v28)
                        {
                          ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(*(unsigned int *)(a1 + 180));
                          v28 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("DerivationGainMapChromaFormat"), ChromaSubsamplingFromPixelFormat);
                          if (!(_DWORD)v28)
                          {
                            v83.width = (double)*(unint64_t *)(a1 + 160);
                            v83.height = (double)*(unint64_t *)(a1 + 168);
                            v30 = CGSizeCreateDictionaryRepresentation(v83);
                            if (!v30)
                            {
                              v17 = 4294950305;
LABEL_64:
                              if (v81)
                                CFRelease(v81);
                              if ((_DWORD)v17)
                                goto LABEL_45;
                              goto LABEL_67;
                            }
                            v31 = v30;
                            CFDictionarySetValue(Mutable, CFSTR("DerivationGainMapDimension"), v30);
                            CFRelease(v31);
                            v32 = *(const void **)(a1 + 248);
                            if (v32)
                            {
                              v33 = (__CFDictionary *)CFRetain(v32);
                              v81 = v33;
LABEL_63:
                              CFDictionarySetValue(Mutable, CFSTR("DerivationDetails"), v33);
                              v17 = 0;
                              goto LABEL_64;
                            }
                            v79 = 0u;
                            v80 = 0u;
                            v77 = 0u;
                            v78 = 0u;
                            v76 = 0u;
                            if (ChromaSubsamplingFromPixelFormat == 6)
                              v34 = 1;
                            else
                              v34 = 3;
                            v28 = CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(*(const CGImageMetadata **)(a1 + 184), v34, (uint64_t)&v76);
                            if (!(_DWORD)v28)
                            {
                              v73 = v78;
                              v74 = v79;
                              v75 = v80;
                              *(_OWORD *)cf = v76;
                              v72 = v77;
                              v28 = CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata((uint64_t)cf, &v81);
                              if (!(_DWORD)v28)
                              {
                                v33 = v81;
                                goto LABEL_63;
                              }
                            }
                          }
                        }
                      }
                      v17 = v28;
                      goto LABEL_64;
                    }
LABEL_172:
                    v17 = 4294950305;
                    goto LABEL_45;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_163:
    v17 = ImageGeometryForIndex;
    v23 = 0;
    goto LABEL_45;
  }
LABEL_25:
  v17 = v8;
  v18 = 0;
  v19 = 0;
  v20 = 0;
LABEL_140:
  if (value)
    CFRelease(value);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
LABEL_146:
  if (v69)
    CFRelease(v69);
  if (v68)
    CFRelease(v68);
  if (v67)
    CFRelease(v67);
  if (v66)
    CFRelease(v66);
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
  return v17;
}

uint64_t _createMetadataDescriptionArray(const __CFAllocator *a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  uint64_t v12;
  uint64_t v13;

  Mutable = CFArrayCreateMutable(a1, 1, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v9 = Mutable;
  v10 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v10)
  {
    v13 = 4294950305;
    goto LABEL_10;
  }
  v11 = v10;
  CFArrayAppendValue(v9, v10);
  CFRelease(v11);
  v12 = CMPhotoCFDictionarySetInt64(v11, CFSTR("DataOffset"), a2);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_10;
  }
  v13 = CMPhotoCFDictionarySetSize(v11, CFSTR("DataLength"), a3);
  if ((_DWORD)v13)
  {
LABEL_10:
    CFRelease(v9);
    return v13;
  }
  *a4 = v9;
  return v13;
}

uint64_t CMPhotoSampleBufferCreateFromSource(const __CFAllocator *a1, const __CFData *a2, CFIndex a3, size_t a4, _QWORD *a5, char *a6)
{
  const __CFData *v6;
  size_t version;
  const UInt8 *BytePtr;
  const UInt8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  OpaqueCMBlockBuffer *SampleBufferWrappingIOSurface;
  uint64_t (*v20)(const __CFData *, _QWORD, CFAllocatorContext *);
  uint64_t (*v21)(const __CFData *, size_t, CFIndex, CMBlockBufferRef *, size_t *);
  CFAllocatorContext context;
  char v24;
  CFTypeRef v25;
  CMSampleBufferRef v26;
  CMBlockBufferRef blockBufferOut;
  size_t sampleSizeArray;

  v6 = a2;
  blockBufferOut = 0;
  sampleSizeArray = a4;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (!a2)
  {
    v18 = 4294950306;
    goto LABEL_33;
  }
  if (!a5)
  {
    v6 = 0;
    v18 = 0;
    goto LABEL_33;
  }
  version = a4;
  switch(CMPhotoGetStorageType(a2))
  {
    case 1u:
      if (version + a3 > CFDataGetLength(v6))
        goto LABEL_13;
      if (!version)
      {
        if (CFDataGetLength(v6) < a3)
          goto LABEL_46;
        CFDataGetLength(v6);
        sampleSizeArray = CFDataGetLength(v6) - a3;
      }
      BytePtr = CFDataGetBytePtr(v6);
      if (!BytePtr)
      {
        v6 = 0;
        v18 = 4294950194;
        goto LABEL_33;
      }
      v13 = BytePtr;
      v14 = (void *)CFRetain(v6);
      context.version = 0;
      context.info = v14;
      memset(&context.retain, 0, 24);
      context.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate;
      context.reallocate = 0;
      context.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate;
      context.preferredSize = 0;
      v6 = CFAllocatorCreate(0, &context);
      if (v6)
      {
        v15 = CMBlockBufferCreateWithMemoryBlock(a1, (void *)&v13[a3], sampleSizeArray, v6, 0, 0, sampleSizeArray, 0, &blockBufferOut);
        if (!(_DWORD)v15)
        {
          v16 = CMSampleBufferCreate(a1, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v26);
          if (!(_DWORD)v16)
            goto LABEL_30;
LABEL_45:
          v18 = v16;
LABEL_33:
          if (v26)
            CFRelease(v26);
          goto LABEL_35;
        }
        v18 = v15;
      }
      else
      {
        v18 = 4294950305;
      }
      if (v14)
        CFRelease(v14);
      goto LABEL_33;
    case 2u:
      v16 = CMSampleBufferCreate(a1, v6, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v26);
      goto LABEL_29;
    case 3u:
      v17 = CMByteStreamCreateForFileURL();
      if ((_DWORD)v17)
        goto LABEL_14;
      v16 = CMPhotoSampleBufferCreateFromSource(a1, v25, a3, sampleSizeArray, &v26, &v24);
      goto LABEL_29;
    case 4u:
      if ((a3 & 0x8000000000000000) == 0)
      {
        SampleBufferWrappingIOSurface = CMPhotoCreateSampleBufferWrappingIOSurface(a1, v6, a3, version, 0, 1u);
        v6 = 0;
        v26 = SampleBufferWrappingIOSurface;
        goto LABEL_30;
      }
LABEL_46:
      v6 = 0;
      v18 = 4294950190;
      goto LABEL_33;
    case 5u:
      if (version)
        goto LABEL_26;
      context.version = 0;
      v20 = *(uint64_t (**)(const __CFData *, _QWORD, CFAllocatorContext *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 24);
      if (!v20)
      {
        v18 = 4294954514;
        goto LABEL_15;
      }
      v17 = v20(v6, 0, &context);
      if ((_DWORD)v17)
        goto LABEL_14;
      version = context.version;
      if (context.version < 0)
      {
        v18 = 4294950190;
        goto LABEL_15;
      }
      sampleSizeArray = context.version;
LABEL_26:
      v24 = 1;
      v21 = *(uint64_t (**)(const __CFData *, size_t, CFIndex, CMBlockBufferRef *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v21)
      {
        v6 = 0;
        v18 = 4294954514;
        goto LABEL_33;
      }
      v17 = v21(v6, version, a3, &blockBufferOut, &sampleSizeArray);
      if ((_DWORD)v17)
      {
LABEL_14:
        v18 = v17;
LABEL_15:
        v6 = 0;
        goto LABEL_33;
      }
      v16 = CMSampleBufferCreate(a1, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v26);
LABEL_29:
      v6 = 0;
      if ((_DWORD)v16)
        goto LABEL_45;
LABEL_30:
      *a5 = v26;
      v26 = 0;
      v18 = 0;
      if (a6)
        *a6 = v24;
LABEL_35:
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (v25)
        CFRelease(v25);
      if (v6)
        CFRelease(v6);
      return v18;
    default:
LABEL_13:
      v17 = FigSignalErrorAt();
      goto LABEL_14;
  }
}

uint64_t _cfTypeDeallocator_allocate()
{
  return 0;
}

void _cfTypeDeallocator_deallocate(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CMPhotoDataCreateFromSampleBuffer(const __CFAllocator *a1, CMSampleBufferRef sbuf, int a3, CFDataRef *a4)
{
  UInt8 *v4;
  uint64_t v5;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v10;
  size_t DataLength;
  UInt8 *v12;
  size_t v13;
  unint64_t v14;
  UInt8 *v15;
  uint64_t DataPointer;
  size_t version;
  CFDataRef v18;
  uint64_t v19;
  void *v20;
  CFAllocatorContext lengthAtOffsetOut;
  size_t v23;
  char *dataPointerOut;

  v4 = 0;
  v5 = 4294950306;
  if (!sbuf || !a4)
    goto LABEL_23;
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (!DataBuffer)
  {
    v4 = 0;
    v5 = 4294950194;
    goto LABEL_23;
  }
  v10 = DataBuffer;
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  if (a3 || !CMBlockBufferIsRangeContiguous(v10, 0, DataLength))
  {
    v12 = (UInt8 *)malloc_type_malloc(DataLength, 0xC1325B46uLL);
    v4 = v12;
    if (!v12)
      goto LABEL_25;
    if (DataLength)
    {
      v13 = 0;
      v14 = DataLength;
      v15 = v12;
      while (1)
      {
        lengthAtOffsetOut.version = 0;
        dataPointerOut = 0;
        DataPointer = CMBlockBufferGetDataPointer(v10, v13, (size_t *)&lengthAtOffsetOut, 0, &dataPointerOut);
        if ((_DWORD)DataPointer)
          break;
        if (v14 >= lengthAtOffsetOut.version)
          version = lengthAtOffsetOut.version;
        else
          version = v14;
        lengthAtOffsetOut.version = version;
        memcpy(v15, dataPointerOut, version);
        v13 += version;
        v15 += version;
        v14 -= version;
        if (!v14)
          goto LABEL_13;
      }
      v5 = DataPointer;
      goto LABEL_23;
    }
LABEL_13:
    v18 = CFDataCreateWithBytesNoCopy(a1, v4, DataLength, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (!v18)
    {
LABEL_25:
      v5 = 4294950305;
      goto LABEL_23;
    }
    v4 = 0;
  }
  else
  {
    v23 = 0;
    dataPointerOut = 0;
    v19 = CMBlockBufferGetDataPointer(v10, 0, &v23, 0, &dataPointerOut);
    if ((_DWORD)v19)
    {
      v5 = v19;
      goto LABEL_22;
    }
    if (v23 != DataLength)
    {
      v5 = 4294950194;
      goto LABEL_22;
    }
    v20 = (void *)CFRetain(v10);
    lengthAtOffsetOut.version = 0;
    lengthAtOffsetOut.info = v20;
    memset(&lengthAtOffsetOut.retain, 0, 24);
    lengthAtOffsetOut.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate;
    lengthAtOffsetOut.reallocate = 0;
    lengthAtOffsetOut.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate;
    lengthAtOffsetOut.preferredSize = 0;
    v4 = (UInt8 *)CFAllocatorCreate(0, &lengthAtOffsetOut);
    if (!v4 || (v18 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, v23, (CFAllocatorRef)v4)) == 0)
    {
      if (v20)
        CFRelease(v20);
      v5 = 4294950305;
      if (v4)
        goto LABEL_21;
      goto LABEL_23;
    }
  }
  v5 = 0;
  *a4 = v18;
  if (v4)
  {
LABEL_21:
    CFRelease(v4);
LABEL_22:
    v4 = 0;
  }
LABEL_23:
  free(v4);
  return v5;
}

uint64_t CMPhotoCreateAV1CodecConfigFromSampleBuffer(opaqueCMSampleBuffer *a1, CFMutableDataRef *a2)
{
  CFMutableDataRef Mutable;
  CFMutableDataRef v5;
  uint64_t v6;
  UInt8 *MutableBytePtr;
  uint64_t v8;
  UInt8 v9;
  UInt8 v10;
  UInt8 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  Mutable = CFDataCreateMutable(0, 4);
  if (!Mutable)
    return 4294950305;
  v5 = Mutable;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  v6 = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a1, &v13);
  if ((_DWORD)v6)
  {
LABEL_8:
    v8 = v6;
    CFRelease(v5);
    return v8;
  }
  if (HIDWORD(v16))
  {
    v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  CFDataSetLength(v5, 4);
  MutableBytePtr = CFDataGetMutableBytePtr(v5);
  v8 = 0;
  *MutableBytePtr = -127;
  MutableBytePtr[1] = BYTE4(v14) | (32 * v14);
  v9 = (BYTE12(v14) << 6) | (BYTE8(v14) << 7);
  MutableBytePtr[2] = v9;
  v10 = (32 * v15) | (16 * BYTE4(v15)) | v9;
  MutableBytePtr[2] = v10;
  v11 = (8 * BYTE8(v15)) | (4 * BYTE12(v15)) | v10;
  MutableBytePtr[2] = v11;
  MutableBytePtr[2] = v11 | v16;
  MutableBytePtr[3] = 16 * BYTE4(v16);
  *a2 = v5;
  return v8;
}

uint64_t CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(opaqueCMSampleBuffer *a1, _DWORD *a2)
{
  uint64_t AV1SequenceHeaderInfo;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v5;
  uint64_t DataPointer;
  const __CFAllocator *v7;
  char *v8;
  size_t DataLength;
  CFDataRef v10;
  char *dataPointerOut;

  dataPointerOut = 0;
  AV1SequenceHeaderInfo = 4294950306;
  if (a1 && a2)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(a1);
    if (DataBuffer)
    {
      v5 = DataBuffer;
      DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, 0, 0, &dataPointerOut);
      if ((_DWORD)DataPointer)
      {
        return DataPointer;
      }
      else
      {
        v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v8 = dataPointerOut;
        if (CMBlockBufferGetDataLength(v5) > 0x1F)
          DataLength = 32;
        else
          DataLength = CMBlockBufferGetDataLength(v5);
        v10 = CFDataCreateWithBytesNoCopy(v7, (const UInt8 *)v8, DataLength, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        AV1SequenceHeaderInfo = CMPhotoReadAV1SequenceHeaderInfo((uint64_t)v10, a2);
        if (v10)
          CFRelease(v10);
      }
    }
    else
    {
      return 4294950303;
    }
  }
  return AV1SequenceHeaderInfo;
}

uint64_t CMPhotoReadAV1SequenceHeaderInfo(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  _DWORD *v4;
  uint64_t Bits;
  _QWORD *v6;
  unsigned int *v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];
  CFTypeRef v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v26 = 0;
  v27 = 0;
  if (a2)
  {
    *(_QWORD *)&v3 = 0x200000002;
    *((_QWORD *)&v3 + 1) = 0x200000002;
    *(_OWORD *)a2 = v3;
    v4 = a2 + 3;
    Bits = FigByteStreamCreateWithCFData();
    if ((_DWORD)Bits)
      goto LABEL_140;
    CMPhotoBitStreamReadInit((uint64_t)v31, (uint64_t)v32, 0);
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v30 + 1);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v30);
    if ((_DWORD)Bits)
      goto LABEL_140;
    v6 = a2 + 1;
    while ((_DWORD)v30 == 2)
    {
      v37 = 0;
      v36 = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v37);
      if ((_DWORD)Bits)
        goto LABEL_140;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v36);
      if ((_DWORD)Bits)
        goto LABEL_140;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v33);
      if ((_DWORD)Bits)
        goto LABEL_140;
      if ((_DWORD)v37)
      {
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v33);
        if ((_DWORD)Bits)
          goto LABEL_140;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 2uLL, &v33);
        if ((_DWORD)Bits)
          goto LABEL_140;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v33);
        if ((_DWORD)Bits)
          goto LABEL_140;
      }
      if (v36)
      {
        Bits = CMPhotoBitStreamRead_leb128((uint64_t)v31, &v34);
        if ((_DWORD)Bits)
          goto LABEL_140;
      }
      Bits = CMPhotoBitStreamReadGetBitsRead((uint64_t)v31, &v35);
      if ((_DWORD)Bits)
        goto LABEL_140;
      if ((v35 & 7) != 0)
        goto LABEL_165;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v37 + 1);
      if (!(_DWORD)Bits)
      {
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v30);
        if (!(_DWORD)Bits)
          continue;
      }
      goto LABEL_140;
    }
    if ((_DWORD)v30 != 1)
      goto LABEL_165;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v29 + 1);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v29);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if (HIDWORD(v29))
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 2uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
    }
    if ((_DWORD)v29)
    {
      Bits = CMPhotoBitStreamRead_leb128((uint64_t)v31, &v27);
      if ((_DWORD)Bits)
        goto LABEL_140;
    }
    Bits = CMPhotoBitStreamReadGetBitsRead((uint64_t)v31, &v26);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if ((v26 & 7) != 0)
      goto LABEL_165;
    v25 = 0;
    v7 = a2 + 4;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, a2 + 4);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if (*v7 > 2)
    {
LABEL_165:
      v13 = 4294950194;
      goto LABEL_141;
    }
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits || (Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v25), (_DWORD)Bits))
    {
LABEL_140:
      v13 = Bits;
      goto LABEL_141;
    }
    v24 = 0;
    v23 = 0;
    v22 = 0;
    if (!v25)
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v24);
      if ((_DWORD)Bits)
        goto LABEL_140;
      if (v24)
      {
        LODWORD(v35) = 0;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
        if ((_DWORD)Bits)
          goto LABEL_140;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
        if ((_DWORD)Bits)
          goto LABEL_140;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v35);
        if ((_DWORD)Bits)
          goto LABEL_140;
        if ((_DWORD)v35)
        {
          Bits = CMPhotoBitStreamReadUVLC((uint64_t)v31, &v28);
          if ((_DWORD)Bits)
            goto LABEL_140;
        }
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v23 + 1);
        if ((_DWORD)Bits)
          goto LABEL_140;
        if (HIDWORD(v23))
        {
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v22);
          if ((_DWORD)Bits)
            goto LABEL_140;
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
          if ((_DWORD)Bits)
            goto LABEL_140;
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v28);
          if ((_DWORD)Bits)
            goto LABEL_140;
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v28);
          if ((_DWORD)Bits)
            goto LABEL_140;
        }
      }
      else
      {
        HIDWORD(v23) = 0;
      }
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 13);
      if (!(_DWORD)Bits)
      {
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v23);
        if (!(_DWORD)Bits)
        {
          v8 = -1;
          while (1)
          {
            LODWORD(v35) = 0;
            Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 0xCuLL, &v28);
            if ((_DWORD)Bits)
              break;
            Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v35);
            if ((_DWORD)Bits)
              break;
            v9 = v35;
            if (v8 == -1)
              a2[5] = v35;
            if (v9 >= 8)
            {
              Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
              if ((_DWORD)Bits)
                goto LABEL_140;
              if (v8 == -1)
                a2[6] = v28;
            }
            if (HIDWORD(v23))
            {
              LODWORD(v34) = 0;
              Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
              if ((_DWORD)Bits)
                break;
              if ((_DWORD)v34)
              {
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, (v22 + 1), &v28);
                if ((_DWORD)Bits)
                  break;
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, (v22 + 1), &v28);
                if ((_DWORD)Bits)
                  break;
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                if ((_DWORD)Bits)
                  break;
              }
            }
            if (a2[13])
            {
              LODWORD(v34) = 0;
              Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
              if ((_DWORD)Bits)
                break;
              if ((_DWORD)v34)
              {
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v28);
                if ((_DWORD)Bits)
                  break;
              }
            }
            if (++v8 >= v23)
              goto LABEL_77;
          }
        }
      }
      goto LABEL_140;
    }
    v23 = 0;
    a2[13] = 0;
    a2[6] = 0;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, a2 + 5);
    if ((_DWORD)Bits)
      goto LABEL_140;
LABEL_77:
    v20 = 0;
    v21 = 0;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v21);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v20);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, (v21 + 1), &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, (v20 + 1), &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    v19 = 0;
    if (!v25)
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v19);
      if ((_DWORD)Bits)
        goto LABEL_140;
      if (v19)
      {
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v28);
        if ((_DWORD)Bits)
          goto LABEL_140;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
        if ((_DWORD)Bits)
          goto LABEL_140;
      }
    }
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    v18 = 0;
    if (v25)
    {
      LODWORD(v18) = 2;
      goto LABEL_109;
    }
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v18 + 1);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if (HIDWORD(v18))
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
    }
    LODWORD(v35) = 0;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v35);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if ((_DWORD)v35)
    {
      LODWORD(v18) = 2;
    }
    else
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v18);
      if ((_DWORD)Bits)
        goto LABEL_140;
      if (!(_DWORD)v18)
        goto LABEL_107;
    }
    LODWORD(v34) = 0;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
    if ((_DWORD)Bits)
      goto LABEL_140;
    if (!(_DWORD)v34)
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
    }
LABEL_107:
    if (HIDWORD(v18))
    {
      Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if ((_DWORD)Bits)
        goto LABEL_140;
    }
LABEL_109:
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if ((_DWORD)Bits)
      goto LABEL_140;
    v10 = a2 + 7;
    Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 7);
    if ((_DWORD)Bits)
      goto LABEL_140;
    a2[8] = 0;
    v11 = a2[4];
    if (v11 == 2)
    {
      if (*v10)
      {
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 8);
        if ((_DWORD)Bits)
          goto LABEL_140;
        if (a2[8])
          v12 = 12;
        else
          v12 = 10;
        v11 = *v7;
LABEL_124:
        if (v11 == 1)
        {
          a2[9] = 0;
          goto LABEL_128;
        }
LABEL_127:
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 9);
        if ((_DWORD)Bits)
          goto LABEL_140;
LABEL_128:
        v17 = 0;
        Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v17);
        if ((_DWORD)Bits)
          goto LABEL_140;
        if (v17)
        {
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, a2 + 1);
          if ((_DWORD)Bits)
            goto LABEL_140;
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, a2 + 2);
          if ((_DWORD)Bits)
            goto LABEL_140;
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, v4);
          if ((_DWORD)Bits)
            goto LABEL_140;
        }
        else
        {
          *v6 = 0x200000002;
          *v4 = 2;
        }
        a2[12] = 0;
        if (a2[9])
        {
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2);
          if ((_DWORD)Bits)
            goto LABEL_140;
          *((_QWORD *)a2 + 5) = 0x100000001;
          goto LABEL_138;
        }
        if (*(_DWORD *)v6 == 1 && a2[2] == 13 && !*v4)
        {
          *a2 = 1;
        }
        else
        {
          Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2);
          if ((_DWORD)Bits)
            goto LABEL_140;
          if (*v7 != 1)
          {
            if (*v7)
            {
              if (v12 == 12)
              {
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 10);
                if ((_DWORD)Bits)
                  goto LABEL_140;
                v16 = a2 + 11;
                if (!a2[10])
                {
                  *v16 = 0;
                  goto LABEL_138;
                }
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, v16);
                if ((_DWORD)Bits)
                  goto LABEL_140;
                if (!a2[10])
                  goto LABEL_138;
LABEL_159:
                if (a2[11])
                {
                  Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 12);
                  if ((_DWORD)Bits)
                    goto LABEL_140;
                }
LABEL_138:
                Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                if (!(_DWORD)Bits)
                  Bits = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                goto LABEL_140;
              }
              v15 = 0;
            }
            else
            {
              v15 = 1;
            }
            a2[10] = 1;
            a2[11] = v15;
            goto LABEL_159;
          }
        }
        *((_QWORD *)a2 + 5) = 0;
        goto LABEL_138;
      }
    }
    else
    {
      if (v11 > 2)
      {
        v12 = 0;
        goto LABEL_127;
      }
      if (*v10)
      {
        v12 = 10;
        goto LABEL_124;
      }
    }
    v12 = 8;
    goto LABEL_124;
  }
  v13 = 4294950306;
LABEL_141:
  if (v32)
    CFRelease(v32);
  return v13;
}

uint64_t CMPhotoGetSlimPixelFormatFromFormatDescription(CMFormatDescriptionRef desc, _DWORD *a2)
{
  uint64_t result;
  const __CFDictionary *Extension;
  const __CFData *v6;
  unint64_t Length;
  const UInt8 *BytePtr;
  unsigned int v10;
  int v11;
  int v12;

  result = 4294950306;
  if (desc && a2)
  {
    if (CMFormatDescriptionGetMediaSubType(desc) != 1936484717)
      return 0;
    Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (!Extension)
      return 4294950303;
    result = (uint64_t)CFDictionaryGetValue(Extension, CFSTR("slmC"));
    if (result)
    {
      v6 = (const __CFData *)result;
      Length = CFDataGetLength((CFDataRef)result);
      BytePtr = CFDataGetBytePtr(v6);
      if (Length >= 4 && BytePtr != 0)
      {
        v10 = *(_DWORD *)BytePtr;
        v11 = 0;
        v12 = 6;
        result = Slim_GetPixelBufferInfoFromVersion(v10, &v12, &v11, 0, 0, 0);
        if (!(_DWORD)result)
          *a2 = v11;
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoCopyImageBitDepthFromFormatDescription(const opaqueCMFormatDescription *a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  uint64_t InfoFromFormatDescription;
  uint64_t v7;
  char v8;
  char v9;
  int v11;
  __int16 v12;

  v12 = 0;
  v11 = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v5 = Mutable;
  InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(a1, 0, 0, 0, 0, &v11, (char *)&v12 + 1, (char *)&v12, 0, 0, 0, 0);
  if ((_DWORD)InfoFromFormatDescription)
    goto LABEL_7;
  CMFormatDescriptionGetMediaSubType(a1);
  if (!v11 && HIBYTE(v12) == 255 && v12 == 255)
  {
    InfoFromFormatDescription = FigSignalErrorAt();
LABEL_7:
    v7 = InfoFromFormatDescription;
LABEL_15:
    CFRelease(v5);
    return v7;
  }
  InfoFromFormatDescription = FigCFArrayAppendInt();
  if ((_DWORD)InfoFromFormatDescription)
    goto LABEL_7;
  if ((v11 - 1) <= 4)
  {
    v8 = 1;
    do
    {
      v9 = v8;
      InfoFromFormatDescription = FigCFArrayAppendInt();
      if ((_DWORD)InfoFromFormatDescription)
        goto LABEL_7;
      v8 = 0;
    }
    while ((v9 & 1) != 0);
  }
  v7 = 0;
  if (!a2)
    goto LABEL_15;
  *a2 = v5;
  return v7;
}

uint64_t CMPhotoCompressionSessionGetTypeID()
{
  pthread_once(&CMPhotoCompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCompressionSession);
  return sCMPhotoCompressionSessionTypeID;
}

uint64_t RegisterCMPhotoCompressionSession()
{
  uint64_t result;

  sCMPhotoCompressionSessionClass = 0;
  unk_1ECEF2000 = "CMPhotoCompressionSession";
  qword_1ECEF2008 = (uint64_t)CMPhotoCompressionSessionClass_Init;
  unk_1ECEF2010 = 0;
  qword_1ECEF2018 = (uint64_t)CMPhotoCompressionSessionClass_Finalize;
  unk_1ECEF2020 = 0;
  qword_1ECEF2028 = 0;
  unk_1ECEF2030 = CMPhotoCompressionSessionClass_CopyFormattingDesc;
  qword_1ECEF2038 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoCompressionSessionTypeID = result;
  return result;
}

uint64_t CMPhotoCompressionSessionCloseContainer(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (!*(_BYTE *)(a1 + 72))
    return 0;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  *(_BYTE *)(a1 + 72) = 0;
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 24);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionOpenExistingContainer(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v8 = _copyByteStreamAndSetVTableFromExistingContainer(a1, a2, a3, &cf, 0);
  if ((_DWORD)v8)
  {
    v11 = v8;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 80);
    if (v9)
    {
      v10 = *(uint64_t (**)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t))(v9 + 8);
      if (v10)
      {
        v11 = v10(a1, a2, cf, a3, a4);
        if (!(_DWORD)v11)
          *(_BYTE *)(a1 + 72) = 1;
      }
      else
      {
        v11 = 4294950302;
      }
    }
    else
    {
      v11 = 4294950195;
    }
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t _copyByteStreamAndSetVTableFromExistingContainer(uint64_t a1, const __CFDictionary *a2, CFTypeRef cf, CFTypeRef *a4, int *a5)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  CFTypeID v13;
  CFTypeID v14;
  uint64_t v15;
  int v16;
  uint64_t (**v17)();
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  CFTypeRef cfa;

  v22 = 0;
  cfa = 0;
  v21 = 0;
  if (!a1)
    goto LABEL_32;
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_21;
  if (!cf)
  {
LABEL_32:
    v18 = 4294950306;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_8;
  *(_BYTE *)(a1 + 72) = 0;
  v10 = *(_QWORD *)(a1 + 80);
  if (!v10)
  {
LABEL_21:
    v18 = 4294950195;
    goto LABEL_29;
  }
  v11 = *(uint64_t (**)(uint64_t))(v10 + 24);
  if (!v11)
  {
    v18 = 4294950302;
    goto LABEL_29;
  }
  v12 = v11(a1);
  if ((_DWORD)v12)
    goto LABEL_33;
LABEL_8:
  v13 = CFGetTypeID(cf);
  if (v13 == CFURLGetTypeID())
  {
    v20 = 0;
    CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("BackingType"), &v20);
    if (v20 == 3 && (!CFDictionaryGetValue(a2, CFSTR("BackingFileURL")) || FigCFEqual()))
    {
      v12 = FigSignalErrorAt();
LABEL_33:
      v18 = v12;
      goto LABEL_29;
    }
    goto LABEL_15;
  }
  v14 = CFGetTypeID(cf);
  if (v14 != IOSurfaceGetTypeID())
  {
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }
  CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("BackingIOSurfaceSourceSize"), &v22);
  v15 = v22;
LABEL_16:
  v12 = CMPhotoByteStreamCreateFromSource((const __CFData *)cf, v15, 0, 0, &cfa, 0);
  if ((_DWORD)v12)
    goto LABEL_33;
  v12 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cfa, &v21);
  if ((_DWORD)v12)
    goto LABEL_33;
  v16 = v21;
  if (!v21)
  {
    v17 = CMPhotoCompressionSessionVTableHEIF;
    goto LABEL_23;
  }
  if (v21 == 1)
  {
    v17 = (uint64_t (**)())&CMPhotoCompressionSessionVTableJFIF;
LABEL_23:
    *(_QWORD *)(a1 + 80) = v17;
  }
  if (a4)
  {
    *a4 = cfa;
    cfa = 0;
  }
  v18 = 0;
  if (a5)
    *a5 = v16;
LABEL_29:
  if (cfa)
    CFRelease(cfa);
  return v18;
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModificationF(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  CFTypeRef cf;
  int v18;

  v18 = 0;
  cf = 0;
  v12 = _copyByteStreamAndSetVTableFromExistingContainer(a1, a2, a3, &cf, &v18);
  if ((_DWORD)v12)
  {
    v15 = v12;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (v13)
    {
      v14 = *(uint64_t (**)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t, uint64_t, uint64_t))(v13 + 16);
      if (v14)
      {
        v15 = v14(a1, a2, cf, a3, a4, a5, a6);
        if (!(_DWORD)v15)
          *(_BYTE *)(a1 + 72) = 1;
      }
      else
      {
        v15 = 4294950302;
      }
    }
    else
    {
      v15 = 4294950195;
    }
  }
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModification(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoCompressionSessionOpenExistingContainerForModificationF(a1, a2, a3, a4, (uint64_t)_callbackModificationHandlerWrapper, a5);
}

uint64_t _callbackModificationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

BOOL CMPhotoCompressionSessionIsContainerOpen(_BOOL8 result)
{
  if (result)
    return !*(_BYTE *)(result + 16) && *(_BYTE *)(result + 72) != 0;
  return result;
}

uint64_t _verifyMainImageOptions(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  const void *Value;
  CFTypeID v6;

  if (!theDict)
  {
    if (!a3)
      return FigSignalErrorAt();
    goto LABEL_8;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
  if ((a3 != 0) != (Value == 0))
    return FigSignalErrorAt();
  if (!Value)
  {
LABEL_8:
    if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
      return 4294950195;
    return 0;
  }
  v6 = CFGetTypeID(Value);
  if (v6 == CMFormatDescriptionGetTypeID())
  {
    if (*(_BYTE *)(a1 + 16))
      return 4294950195;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddImageAsync(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (**v11)();
  uint64_t (*v12)();

  if (!a1)
    return 4294950306;
  result = _verifyMainImageOptions(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v11 = *(uint64_t (***)())(a1 + 80);
      if (!v11)
        return 4294950195;
    }
    else
    {
      v11 = CMPhotoCompressionSessionVTableHEIF;
    }
    v12 = v11[27];
    if (v12)
      return ((uint64_t (*)(uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddCompressedImage(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4)
{
  const void *Value;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CFDictionaryRef, uint64_t, uint64_t);

  if (!a1)
    return 4294950306;
  if (!theDict)
  {
    if (a3)
      goto LABEL_5;
    return FigSignalErrorAt();
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
  if (!a3 || Value)
    return FigSignalErrorAt();
LABEL_5:
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    return 4294950195;
  v10 = *(uint64_t (**)(uint64_t, CFDictionaryRef, uint64_t, uint64_t))(v9 + 72);
  if (v10)
    return v10(a1, theDict, a3, a4);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddCompressedThumbnail(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  const void *Value;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFDictionaryRef, uint64_t);

  if (!a1)
    return 4294950306;
  if (!theDict)
  {
    if (a4)
      goto LABEL_5;
    return FigSignalErrorAt();
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
  if (!a4 || Value)
    return FigSignalErrorAt();
LABEL_5:
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    return 4294950195;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef, uint64_t))(v9 + 80);
  if (v10)
    return v10(a1, a2, theDict, a4);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddCompressedAuxiliaryImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFDictionaryRef theDict, uint64_t a8, uint64_t a9)
{
  const void *Value;
  CFTypeID v18;
  uint64_t (**v19)();
  uint64_t (*v21)();

  if (!a1)
    return 4294950306;
  if (!theDict)
  {
    if (!a8)
      return FigSignalErrorAt();
    goto LABEL_9;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
  if ((a8 != 0) != (Value == 0))
    return FigSignalErrorAt();
  if (!Value)
  {
LABEL_9:
    if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
      return 4294950195;
    goto LABEL_11;
  }
  v18 = CFGetTypeID(Value);
  if (v18 != CMFormatDescriptionGetTypeID())
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
LABEL_11:
  if ((a3 - 1) >= 5
    || (_DWORD)a3 != 4 && theDict && CFDictionaryContainsKey(theDict, CFSTR("AuxiliaryImageCustomTypeURN")))
  {
    return FigSignalErrorAt();
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v19 = *(uint64_t (***)())(a1 + 80);
    if (!v19)
      return 4294950195;
  }
  else
  {
    v19 = CMPhotoCompressionSessionVTableHEIF;
  }
  v21 = v19[11];
  if (v21)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFDictionaryRef, uint64_t, uint64_t))v21)(a1, a2, a3, a6, a4, a5, theDict, a8, a9);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddCompressedMovie(uint64_t a1)
{
  uint64_t (**v1)();
  uint64_t (*v3)(void);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 72))
  {
    v1 = *(uint64_t (***)())(a1 + 80);
    if (!v1)
      return 4294950195;
  }
  else
  {
    v1 = CMPhotoCompressionSessionVTableHEIF;
  }
  v3 = v1[12];
  if (v3)
    return v3();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddThumbnail(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v9)();
  uint64_t (*v10)();

  if (!a1)
    return 4294950306;
  result = _verifyMainImageOptions(a1, theDict, a4);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v9 = *(uint64_t (***)())(a1 + 80);
      if (!v9)
        return 4294950195;
    }
    else
    {
      v9 = CMPhotoCompressionSessionVTableHEIF;
    }
    v10 = v9[7];
    if (v10)
      return ((uint64_t (*)(uint64_t, uint64_t, CFDictionaryRef, uint64_t))v10)(a1, a2, theDict, a4);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddThumbnailAsync(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (**v11)();
  uint64_t (*v12)();

  if (!a1)
    return 4294950306;
  result = _verifyMainImageOptions(a1, theDict, a4);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v11 = *(uint64_t (***)())(a1 + 80);
      if (!v11)
        return 4294950195;
    }
    else
    {
      v11 = CMPhotoCompressionSessionVTableHEIF;
    }
    v12 = v11[29];
    if (v12)
      return ((uint64_t (*)(uint64_t, uint64_t, CFDictionaryRef, uint64_t, uint64_t))v12)(a1, a2, theDict, a4, a5);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t (**v15)();
  uint64_t (*v16)();

  if (!a1)
    return 4294950306;
  result = _verifyAuxiliaryOptions(a1, a3, theDict, a6);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v15 = *(uint64_t (***)())(a1 + 80);
      if (!v15)
        return 4294950195;
    }
    else
    {
      v15 = CMPhotoCompressionSessionVTableHEIF;
    }
    v16 = v15[8];
    if (v16)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, CFDictionaryRef, uint64_t, uint64_t))v16)(a1, a2, a3, a4, theDict, a6, a7);
    else
      return 4294950302;
  }
  return result;
}

uint64_t _verifyAuxiliaryOptions(uint64_t a1, int a2, CFDictionaryRef theDict, uint64_t a4)
{
  const void *Value;
  CFTypeID v9;
  uint64_t result;

  if (!theDict)
  {
    if (!a4)
      return FigSignalErrorAt();
    goto LABEL_8;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
  if ((a4 != 0) != (Value == 0))
    return FigSignalErrorAt();
  if (!Value)
  {
LABEL_8:
    if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
      return 4294950195;
    goto LABEL_10;
  }
  v9 = CFGetTypeID(Value);
  if (v9 != CMFormatDescriptionGetTypeID())
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
LABEL_10:
  if ((a2 - 1) > 4)
    return FigSignalErrorAt();
  result = 0;
  if (a2 != 4)
  {
    if (theDict)
    {
      result = CFDictionaryContainsKey(theDict, CFSTR("AuxiliaryImageCustomTypeURN"));
      if ((_DWORD)result)
        return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageMetadata(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  CFTypeID v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef);

  if (!a1)
    return 4294950306;
  if (cf)
  {
    v9 = CFGetTypeID(cf);
    if (v9 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
  }
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  v10 = *(_QWORD *)(a1 + 80);
  if (!v10)
    return 4294950195;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v10 + 144);
  if (v11)
    return v11(a1, a3, a4, cf);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t (**v17)();
  uint64_t (*v18)();

  if (!a1)
    return 4294950306;
  result = _verifyAuxiliaryOptions(a1, a3, theDict, a6);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v17 = *(uint64_t (***)())(a1 + 80);
      if (!v17)
        return 4294950195;
    }
    else
    {
      v17 = CMPhotoCompressionSessionVTableHEIF;
    }
    v18 = v17[28];
    if (v18)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, CFDictionaryRef, uint64_t, uint64_t, uint64_t))v18)(a1, a2, a3, a4, theDict, a6, a7, a8);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageFromDictionaryRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFDictionaryRef theDict, uint64_t a6)
{
  uint64_t v6;
  const void *Value;
  uint64_t v14;
  CFTypeID v15;
  uint64_t PixelbufferFromAuxiliaryDataDictionary;
  CFTypeRef v17;
  CFTypeRef cf;

  cf = 0;
  v6 = 4294950306;
  if (!a1 || !theDict)
    return v6;
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC6D0]);
  v14 = (uint64_t)Value;
  if (!Value || (v15 = CFGetTypeID(Value), v15 == CGImageMetadataGetTypeID()))
  {
    PixelbufferFromAuxiliaryDataDictionary = CMPhotoCreatePixelbufferFromAuxiliaryDataDictionary(theDict, 0, (CVPixelBufferRef *)&cf);
    v17 = cf;
    if ((_DWORD)PixelbufferFromAuxiliaryDataDictionary)
    {
      v6 = PixelbufferFromAuxiliaryDataDictionary;
      if (!cf)
        return v6;
    }
    else
    {
      v6 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, a2, a3, v14, a4, (uint64_t)cf, a6);
      v17 = cf;
      if (!cf)
        return v6;
    }
    CFRelease(v17);
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddExif (uint64_t a1, uint64_t a2, uint64_t a3, CFDataRef theData)
{
  unint64_t Length;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, CFDataRef);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return 4294950195;
  if (!theData)
    return FigSignalErrorAt();
  Length = CFDataGetLength(theData);
  if (!CFDataGetBytePtr(theData) || Length <= 4)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    return 4294950195;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v9 + 104);
  if (v10)
    return v10(a1, a2, a3, theData);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddXMP(_BYTE *cf, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  const __CFAllocator *v8;
  CFTypeID v9;
  const __CFData *ExternalRepresentation;
  CFIndex Length;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t, const __CFData *);
  uint64_t v14;
  uint64_t v15;

  if (!cf)
    return 4294950306;
  if (cf[16] || !cf[72])
    return 4294950195;
  if (!a4)
    return FigSignalErrorAt();
  v8 = CFGetAllocator(cf);
  v9 = CFGetTypeID(a4);
  if (v9 == CFDataGetTypeID())
  {
    ExternalRepresentation = (const __CFData *)CFRetain(a4);
    goto LABEL_9;
  }
  if (v9 != CFStringGetTypeID())
    return FigSignalErrorAt();
  ExternalRepresentation = CFStringCreateExternalRepresentation(v8, a4, 0x8000100u, 0);
  if (!ExternalRepresentation)
    return FigSignalErrorAt();
LABEL_9:
  Length = CFDataGetLength(ExternalRepresentation);
  if (!CFDataGetBytePtr(ExternalRepresentation) || !Length)
  {
    v14 = FigSignalErrorAt();
LABEL_14:
    v15 = v14;
    if (!ExternalRepresentation)
      return v15;
    goto LABEL_20;
  }
  v12 = *((_QWORD *)cf + 10);
  if (!v12)
  {
    v15 = 4294950195;
    if (!ExternalRepresentation)
      return v15;
    goto LABEL_20;
  }
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, const __CFData *))(v12 + 112);
  if (v13)
  {
    v14 = v13(cf, a2, a3, ExternalRepresentation);
    goto LABEL_14;
  }
  v15 = 4294950302;
  if (ExternalRepresentation)
LABEL_20:
    CFRelease(ExternalRepresentation);
  return v15;
}

uint64_t CMPhotoCompressionSessionAddDebugMetadata(uint64_t a1, uint64_t a2, uint64_t a3, CFDataRef theData)
{
  CFIndex Length;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, CFDataRef);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return 4294950195;
  if (!theData)
    return FigSignalErrorAt();
  Length = CFDataGetLength(theData);
  if (!CFDataGetBytePtr(theData) || !Length)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    return 4294950195;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v9 + 120);
  if (v10)
    return v10(a1, a2, a3, theData);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddCustomMetadata(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return 4294950195;
  if (!cf)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(cf);
  if (v8 != CFDictionaryGetTypeID() || (unint64_t)CFDictionaryGetCount((CFDictionaryRef)cf) <= 1)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    return 4294950195;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v9 + 128);
  if (v10)
    return v10(a1, a2, a3, cf);
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddStereoMetadata()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddMetadataFromImageProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(void);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return 4294950195;
  if (!a4)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    return 4294950195;
  v5 = *(uint64_t (**)(void))(v4 + 136);
  if (v5)
    return v5();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionStartImageSequence(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 152);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddImageToSequence(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *Value;
  CFTypeID v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v17;
  uint64_t v18;

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return 4294950195;
  if (!a4)
  {
    if (a5)
      goto LABEL_8;
    return FigSignalErrorAt();
  }
  Value = (const void *)FigCFDictionaryGetValue();
  if ((a5 != 0) != (Value == 0))
    return FigSignalErrorAt();
  if (Value)
  {
    v13 = CFGetTypeID(Value);
    if (v13 != CMFormatDescriptionGetTypeID())
      return FigSignalErrorAt();
  }
LABEL_8:
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
    return 4294950195;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(v14 + 160);
  if (!v15)
    return 4294950302;
  v17 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  return v15(a1, a2, &v17, a4, a5, a6);
}

uint64_t CMPhotoCompressionSessionEndImageSequence(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  if (!*(_BYTE *)(a1 + 72))
    return 4294950195;
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 168);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddGroup(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t (*v4)(void);

  if (!a1 || *(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72) || a3 != 1634497650 && a3 != 1937007986)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 80);
  if (!v3)
    return 4294950195;
  v4 = *(uint64_t (**)(void))(v3 + 176);
  if (v4)
    return v4();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddGroupProperties(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1 || *(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return FigSignalErrorAt();
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 184);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddImageHandleToGroup(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1 || *(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return FigSignalErrorAt();
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 192);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddGroupHandleToGroup(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1 || *(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return FigSignalErrorAt();
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 200);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddTmapImageOneShot(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!a1 || *(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 72))
    return FigSignalErrorAt();
  v1 = *(_QWORD *)(a1 + 80);
  if (!v1)
    return 4294950195;
  v2 = *(uint64_t (**)(void))(v1 + 208);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionSessionReleaseHardwareResources(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294950306;
  result = CMPhotoCodecSessionPoolFlush(*(_QWORD *)(a1 + 40), 1);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 48);
    if (result)
      return CMPhotoCodecSessionPoolFlush(result, 1);
  }
  return result;
}

uint64_t CMPhotoCompressionSessionDiscardCaches(uint64_t a1, uint64_t a2)
{
  return CMPhotoCompressionSessionFlushCachedBuffers(a1, a2, 1);
}

uint64_t CMPhotoCompressionSessionFlushCachedBuffers(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v5;
  uint64_t v6;
  uint64_t result;

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 4294950195;
  CMPhotoScaleAndRotateSessionDiscardCaches(*(_QWORD *)(a1 + 32), a2);
  v5 = CMPhotoUsePurgeableIOSurfaces();
  v6 = *(_QWORD *)(a1 + 24);
  if (a3 || !v5)
    CMPhotoSurfacePoolFlushCaches(v6, a3);
  else
    CMPhotoSurfacePoolMarkCachesVolatile(v6, 1);
  result = *(unsigned int *)(a1 + 396);
  if ((_DWORD)result)
  {
    JPEGDeviceInterface_closeDriverConnection(result);
    result = 0;
    *(_DWORD *)(a1 + 396) = 0;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionInvalidate(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t result;

  if (!a1)
    return 4294950306;
  if (*(_BYTE *)(a1 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(v2 + 24);
      if (v3)
        v3(a1);
    }
  }
  if (off_1ECEF1710)
    off_1ECEF1710(a1);
  if (off_1ECEF1800)
    off_1ECEF1800(a1);
  result = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

const __CFArray *CMPhotoCompressionSessionCheckForIllegalModification(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFArray *result;
  const __CFArray *v4;
  CFTypeID v5;
  const __CFArray *v6;
  CFTypeID v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v10;
  uint64_t v11;
  const void *v12;
  int ValueIfPresent;
  CFIndex v14;
  uint64_t v15;
  void *v16;
  void *value;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  value = 0;
  v16 = 0;
  v18[0] = CFSTR("CodecType");
  v18[1] = CFSTR("TileDimensions");
  v18[2] = CFSTR("PixelInformation");
  v18[3] = CFSTR("ColorSpace");
  result = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("ImageList"));
  if (result)
  {
    v4 = result;
    v5 = CFGetTypeID(result);
    if (v5 != CFArrayGetTypeID())
      goto LABEL_25;
    result = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("ImageList"));
    if (result)
    {
      v6 = result;
      v7 = CFGetTypeID(result);
      if (v7 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v6) < 1)
        {
LABEL_23:
          LOBYTE(result) = 1;
          return (const __CFArray *)result;
        }
        v8 = 0;
LABEL_7:
        v15 = 0;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v8);
        if (!CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, CFSTR("ImageHandle"), (char *)&v15 + 4))
          goto LABEL_22;
        v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
        if (!CMPhotoCFDictionaryGetIntIfPresent(v10, CFSTR("ImageHandle"), &v15))
          goto LABEL_22;
        if ((_DWORD)v15 != HIDWORD(v15))
        {
          if (CFArrayGetCount(v4) >= 1)
          {
            v14 = 0;
            do
            {
              v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v14);
              if (!CMPhotoCFDictionaryGetIntIfPresent(v10, CFSTR("ImageHandle"), &v15))
                break;
              if ((_DWORD)v15 == HIDWORD(v15))
                goto LABEL_10;
              ++v14;
            }
            while (v14 < CFArrayGetCount(v4));
          }
          goto LABEL_22;
        }
LABEL_10:
        if (v10)
        {
          v11 = 0;
          while (1)
          {
            v12 = (const void *)v18[v11];
            ValueIfPresent = CFDictionaryGetValueIfPresent(v10, v12, (const void **)&value);
            if (ValueIfPresent != CFDictionaryGetValueIfPresent(ValueAtIndex, v12, (const void **)&v16)
              || !FigCFEqual())
            {
              break;
            }
            if (++v11 == 4)
            {
              if (++v8 < CFArrayGetCount(v6))
                goto LABEL_7;
              goto LABEL_23;
            }
          }
LABEL_22:
          LOBYTE(result) = FigSignalErrorAt();
          return (const __CFArray *)result;
        }
      }
LABEL_25:
      LOBYTE(result) = 0;
    }
  }
  return (const __CFArray *)result;
}

void CMPhotoCompressionSessionClass_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  CMPhotoCompressionSessionInvalidate((uint64_t)a1);
  v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CMPhotoCodecSessionPoolFlush((uint64_t)v4, 1);
    v4 = (const void *)a1[5];
  }
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
}

CFTypeRef CMPhotoCompressionSessionClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoCompressionSession]"));
}

_QWORD *CMPhotoBitStreamWriteInit(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = 0;
  result[1] = 0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t CMPhotoBitStreamWriteFlushBytes(unint64_t *a1)
{
  unsigned int v1;
  unsigned int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(unint64_t, uint64_t, unint64_t, char *, uint64_t *);
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(unint64_t, uint64_t, unint64_t, unint64_t *, uint64_t *);
  unint64_t v13;
  uint64_t v14;
  char v15;

  v15 = 3;
  v14 = 0;
  v1 = *((_DWORD *)a1 + 2);
  if (v1 < 8)
    return 0;
  v3 = v1 >> 3;
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 3);
  while (1)
  {
    v13 = HIBYTE(v4);
    if (v5 == 2)
    {
      if (!(v4 >> 58))
      {
        v6 = a1[2];
        v7 = a1[3];
        v8 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v8)
          return 4294954514;
        result = v8(v6, 1, v7, &v15, &v14);
        if ((_DWORD)result)
          return result;
        if (v14 != 1)
          return FigSignalErrorAt();
        ++a1[3];
      }
      *((_DWORD *)a1 + 3) = 0;
    }
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v12)
      return 4294954514;
    result = v12(v10, 1, v11, &v13, &v14);
    if ((_DWORD)result)
      return result;
    if (v14 != 1)
      break;
    if (v13)
      v5 = 0;
    else
      v5 = *((_DWORD *)a1 + 3) + 1;
    v4 = *a1 << 8;
    *a1 = v4;
    ++a1[3];
    *((_DWORD *)a1 + 2) -= 8;
    *((_DWORD *)a1 + 3) = v5;
    if (!--v3)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoBitStreamWriteBits(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  uint64_t result;
  BOOL v9;
  char v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = 64 - v6;
  if (64 - v6 < a3)
  {
    result = CMPhotoBitStreamWriteFlushBytes((unint64_t *)a1);
    if ((_DWORD)result)
      return result;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = 64 - v6;
  }
  v9 = v7 >= a3;
  v10 = v7 - a3;
  if (!v9)
    return 4294950304;
  result = 0;
  *(_QWORD *)a1 |= a2 << v10;
  *(_DWORD *)(a1 + 8) = v6 + a3;
  return result;
}

uint64_t CMPhotoBitStreamWriteExpGolomb(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;

  v2 = a2 + 1;
  v3 = -1;
  v4 = v2;
  do
  {
    v3 += 2;
    v5 = v4 > 1;
    v4 >>= 1;
  }
  while (v5);
  return CMPhotoBitStreamWriteBits(a1, v2, v3);
}

uint64_t CMPhotoBitStreamWriteFlush(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  v2 = -*(_DWORD *)(a1 + 8) & 7;
  if (!v2)
    return CMPhotoBitStreamWriteFlushBytes((unint64_t *)a1);
  result = CMPhotoBitStreamWriteBits(a1, (1 << (v2 - 1)), v2);
  if (!(_DWORD)result)
    return CMPhotoBitStreamWriteFlushBytes((unint64_t *)a1);
  return result;
}

uint64_t CMPhotoBitStreamReadUVLC(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  int v7;

  v6 = 0;
  result = CMPhotoBitStreamReadBits(a1, 1uLL, &v6);
  if (!(_DWORD)result)
  {
    v5 = 0;
    while (!v6)
    {
      ++v5;
      v6 = 0;
      result = CMPhotoBitStreamReadBits(a1, 1uLL, &v6);
      if ((_DWORD)result)
        return result;
    }
    v7 = 0;
    if (v5 >= 0x20)
      v7 = -1;
    result = CMPhotoBitStreamReadBits(a1, v5, &v7);
    if (!(_DWORD)result)
      *a2 = v7 + ~(-1 << v5);
  }
  return result;
}

uint64_t CMPhotoBitStreamRead_leb128(uint64_t a1, unint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  int v8;

  v4 = 0;
  v5 = 0;
  while (1)
  {
    v8 = 0;
    result = CMPhotoBitStreamReadBits(a1, 8uLL, &v8);
    if ((_DWORD)result)
      break;
    v5 |= (v8 & 0x7F) << v4;
    if ((v8 & 0x80) != 0)
    {
      v7 = v4 == 49;
      v4 += 7;
      if (!v7)
        continue;
    }
    if (HIDWORD(v5))
      result = 4294950194;
    else
      result = 0;
    *a2 = v5;
    return result;
  }
  return result;
}

uint64_t CMPhotoBitStreamReadGetBitsRead(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t RegisterCMPhotoCache()
{
  uint64_t result;

  sCMPhotoCacheClass = 0;
  *(_QWORD *)algn_1EE999E48 = "CMPhotoCache";
  qword_1EE999E50 = (uint64_t)CMPhotoCacheClass_Init;
  unk_1EE999E58 = 0;
  qword_1EE999E60 = (uint64_t)CMPhotoCacheClass_Finalize;
  unk_1EE999E68 = 0;
  qword_1EE999E70 = 0;
  unk_1EE999E78 = CMPhotoCacheClass_CopyFormattingDesc;
  qword_1EE999E80 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoCacheTypeID = result;
  return result;
}

uint64_t CMPhotoCacheCreate(const __CFAllocator *a1, CFIndex a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t Instance;
  _QWORD *v8;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;

  result = 4294950306;
  if (a2 >= 1 && a3)
  {
    pthread_once(&CMPhotoCacheGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCache);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v8 = (_QWORD *)Instance;
      v9 = FigSimpleMutexCreate();
      v8[2] = v9;
      if (v9)
      {
        v8[5] = 0;
        v8[6] = v8 + 5;
        Mutable = CFDictionaryCreateMutable(a1, a2, MEMORY[0x1E0C9B390], 0);
        v8[4] = Mutable;
        if (Mutable)
        {
          result = 0;
          v8[3] = a2;
          *a3 = v8;
          return result;
        }
      }
      CFRelease(v8);
    }
    return 4294950305;
  }
  return result;
}

uint64_t CMPhotoCacheAddItemForKey(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t result;
  CFIndex Count;
  int v8;
  _QWORD *Value;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  CFTypeRef v19;
  _QWORD *v20;

  if (!a1)
    return 4294950306;
  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if ((_DWORD)result)
    return result;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 32));
  v8 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Count == *(_QWORD *)(a1 + 24) && v8 == 0)
  {
    v14 = *(_QWORD *)(a1 + 40);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)v14);
    v15 = *(const void **)(v14 + 8);
    if (v15)
      CFRelease(v15);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD **)(v14 + 24);
    if (v16)
    {
      *(_QWORD *)(v16 + 24) = v17;
      v17 = *(_QWORD **)(v14 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v17;
    }
    *v17 = v16;
    free((void *)v14);
  }
  else if (v8)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
    v11 = Value;
    v12 = Value[2];
    v13 = (_QWORD *)Value[3];
    if (v12)
    {
      *(_QWORD *)(v12 + 24) = v13;
      v13 = (_QWORD *)Value[3];
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v13;
    }
    *v13 = v12;
LABEL_23:
    v11[2] = 0;
    v20 = *(_QWORD **)(a1 + 48);
    v11[3] = v20;
    *v20 = v11;
    *(_QWORD *)(a1 + 48) = v11 + 2;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  v18 = malloc_type_calloc(1uLL, 0x20uLL, 0xE0040F8A157B5uLL);
  if (v18)
  {
    v11 = v18;
    *v18 = a2;
    if (a3)
      v19 = CFRetain(a3);
    else
      v19 = 0;
    v11[1] = v19;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v11);
    goto LABEL_23;
  }
  return 4294950305;
}

uint64_t CMPhotoCacheGetItemForKey(uint64_t result, const void *a2)
{
  uint64_t v3;
  _QWORD *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (result)
  {
    v3 = result;
    if (pthread_mutex_lock(*(pthread_mutex_t **)(result + 16)))
    {
      return 0;
    }
    else
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), a2);
      if (Value)
      {
        v5 = Value[2];
        v6 = Value[1];
        v7 = (_QWORD *)Value[3];
        if (v5)
        {
          *(_QWORD *)(v5 + 24) = v7;
          v7 = (_QWORD *)Value[3];
        }
        else
        {
          *(_QWORD *)(v3 + 48) = v7;
        }
        *v7 = v5;
        v8 = *(_QWORD **)(v3 + 48);
        Value[2] = 0;
        Value[3] = v8;
        *v8 = Value;
        *(_QWORD *)(v3 + 48) = Value + 2;
      }
      else
      {
        v6 = 0;
      }
      if (pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 16)))
        return 0;
      else
        return v6;
    }
  }
  return result;
}

uint64_t CMPhotoCacheRemoveAllItems(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (!a1)
    return 4294950306;
  result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!(_DWORD)result)
  {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
    v3 = *(_QWORD **)(a1 + 40);
    if (v3)
    {
      do
      {
        v4 = (const void *)v3[1];
        v5 = (_QWORD *)v3[2];
        v6 = v5;
        if (v4)
        {
          CFRelease(v4);
          v6 = (_QWORD *)v3[2];
        }
        v7 = (_QWORD *)v3[3];
        if (v6)
        {
          v6[3] = v7;
          v7 = (_QWORD *)v3[3];
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v7;
        }
        *v7 = v6;
        free(v3);
        v3 = v5;
      }
      while (v5);
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  return result;
}

double CMPhotoCacheClass_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void CMPhotoCacheClass_Finalize(uint64_t a1)
{
  const void *v2;

  CMPhotoCacheRemoveAllItems(a1);
  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

CFTypeRef CMPhotoCacheClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoCache]"));
}

uint64_t CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(__CVBuffer *a1, const void *a2, uint64_t a3, unsigned int a4, int a5, int a6, int a7, uint64_t a8, CVPixelBufferRef *a9, CFMutableDictionaryRef *a10)
{
  float *v10;
  uint64_t v11;
  __CVBuffer *v16;
  signed int PixelFormatType;
  int v18;
  size_t Width;
  size_t Height;
  uint64_t v21;
  size_t BytesPerRow;
  float *BaseAddress;
  int v24;
  int v25;
  __CVBuffer *v26;
  BOOL v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float *v32;
  uint64_t i;
  float v34;
  int v35;
  int v36;
  uint64_t v37;
  float v38;
  float v39;
  int v40;
  size_t v41;
  _BYTE *v42;
  double v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t j;
  float v50;
  int v51;
  float v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t k;
  float v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  float v66;
  unsigned int v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  float v75;
  unsigned int v76;
  CFMutableDictionaryRef Mutable;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  int v81;
  int v82;
  unsigned int v84;
  int v86;
  __CVBuffer *v87;
  int v88;
  dispatch_queue_t v89;
  unsigned int v90;
  CVPixelBufferRef pixelBuffer;

  v10 = 0;
  pixelBuffer = 0;
  v11 = 4294950306;
  if (!a1 || !a9)
    goto LABEL_119;
  v16 = a1;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v10 = 0;
  v11 = 4294950301;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      goto LABEL_9;
    v18 = 1717855600;
  }
  else
  {
    if (PixelFormatType == 1278226534)
      goto LABEL_9;
    v18 = 1380410945;
  }
  if (PixelFormatType != v18)
    goto LABEL_119;
LABEL_9:
  Width = CVPixelBufferGetWidth(v16);
  Height = CVPixelBufferGetHeight(v16);
  v21 = CVPixelBufferLockBaseAddress(v16, 1uLL);
  if ((_DWORD)v21)
  {
    v11 = v21;
    v10 = 0;
    goto LABEL_119;
  }
  v88 = a5;
  BytesPerRow = CVPixelBufferGetBytesPerRow(v16);
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(v16);
  v89 = dispatch_queue_create("com.apple.coremedia.auximage", MEMORY[0x1E0C80D50]);
  if (v89)
  {
    if (a4 <= 8)
      v24 = 1278226488;
    else
      v24 = 1278226736;
    if (a4 <= 0xA)
      v25 = v24;
    else
      v25 = 1278226742;
    v26 = *a9;
    v87 = v16;
    if (!*a9)
    {
      v86 = 1;
LABEL_21:
      v90 = v25;
      v84 = (v25 - 1278226736) & 0xFFFFFF0C;
      v27 = v84 == 0;
      v28 = (float *)malloc_type_calloc(1uLL, 0x50uLL, 0x10100403B4AD1A7uLL);
      v10 = v28;
      if (!v28)
      {
        Mutable = 0;
        v81 = 0;
        v11 = 4294950305;
        goto LABEL_126;
      }
      *((_QWORD *)v28 + 2) = Height;
      if (Height)
      {
        v29 = 0;
        v30 = 3.4028e38;
        v31 = 1.1755e-38;
        v32 = BaseAddress;
        do
        {
          if (Width)
          {
            for (i = 0; i != Width; ++i)
            {
              v34 = v32[i];
              if (a6 && LODWORD(v34) == a7)
                goto LABEL_31;
              if (v34 > v31)
                v31 = v32[i];
              if (v34 >= v30)
LABEL_31:
                v34 = v30;
              v30 = v34;
            }
          }
          else
          {
            v34 = v30;
          }
          v32 = (float *)((char *)v32 + BytesPerRow);
          ++v29;
          v30 = v34;
        }
        while (v29 != Height);
      }
      else
      {
        v31 = 1.1755e-38;
        v34 = 3.4028e38;
      }
      v28[17] = v34;
      v28[18] = v31;
      *((_DWORD *)v28 + 13) = a7;
      *((_BYTE *)v28 + 48) = a6;
      *((_QWORD *)v28 + 3) = Width;
      *((_QWORD *)v28 + 4) = BytesPerRow;
      *(_QWORD *)v28 = BaseAddress;
      v35 = v88;
      *((_BYTE *)v28 + 76) = v88;
      if (a6)
        v36 = 65534;
      else
        v36 = 0xFFFF;
      *((_BYTE *)v28 + 77) = v27;
      if (!v26)
      {
        v37 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v90, Width, Height, 1, 0, 0, 0, 64, 0, &pixelBuffer);
        if ((_DWORD)v37)
        {
LABEL_122:
          v11 = v37;
          Mutable = 0;
          v81 = 0;
LABEL_126:
          v16 = v87;
          goto LABEL_127;
        }
        v26 = pixelBuffer;
      }
      v37 = CVPixelBufferLockBaseAddress(v26, 0);
      if (!(_DWORD)v37)
      {
        v38 = fminf(v34, 3.4028e38);
        v39 = fmaxf(v31, 1.1755e-38);
        v40 = v36 + (1 << a4);
        v41 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v42 = CVPixelBufferGetBaseAddress(pixelBuffer);
        v44 = v39 - v38;
        v10[17] = v38;
        v10[18] = v39;
        *((_QWORD *)v10 + 1) = v42;
        *((_QWORD *)v10 + 5) = v41;
        *((_DWORD *)v10 + 14) = (unsigned __int16)(v40 + 1);
        *((_DWORD *)v10 + 15) = (unsigned __int16)v40;
        *((_DWORD *)v10 + 16) = v90;
        *((_BYTE *)v10 + 76) = v88;
        *((_BYTE *)v10 + 77) = v27;
        v45 = *(_QWORD *)v10;
        if (v90 == 1278226488)
        {
          v46 = *((_QWORD *)v10 + 2);
          if (v88)
          {
            v16 = v87;
            if (v46)
            {
              v47 = 0;
              v48 = *((_QWORD *)v10 + 3);
              do
              {
                if (v48)
                {
                  for (j = 0; j < v48; ++j)
                  {
                    v50 = *(float *)(v45 + 4 * j);
                    if (*((_BYTE *)v10 + 48) && *((_DWORD *)v10 + 13) == LODWORD(v50))
                    {
                      v51 = *((_DWORD *)v10 + 14);
                    }
                    else
                    {
                      *(float *)&v43 = v10[15];
                      v43 = (double)*(unint64_t *)&v43;
                      v52 = fmax(fmin(v50, 1.0), 0.0) * v43;
                      LOBYTE(v51) = llroundf(v52);
                    }
                    v42[j] = v51;
                    v48 = *((_QWORD *)v10 + 3);
                  }
                  v46 = *((_QWORD *)v10 + 2);
                  v41 = *((_QWORD *)v10 + 5);
                }
                v45 += *((_QWORD *)v10 + 4);
                v42 += v41;
                ++v47;
              }
              while (v47 < v46);
            }
          }
          else
          {
            v16 = v87;
            if (v46)
            {
              v54 = 0;
              v55 = *((_QWORD *)v10 + 3);
              do
              {
                if (v55)
                {
                  for (k = 0; k < v55; ++k)
                  {
                    v57 = *(float *)(v45 + 4 * k);
                    if (*((_BYTE *)v10 + 48) && *((_DWORD *)v10 + 13) == LODWORD(v57))
                      v58 = *((_DWORD *)v10 + 14);
                    else
                      LOBYTE(v58) = llroundf((float)((float)(v57 - v10[17]) / v44) * (float)*((unsigned int *)v10 + 15));
                    v42[k] = v58;
                    v55 = *((_QWORD *)v10 + 3);
                  }
                  v46 = *((_QWORD *)v10 + 2);
                  v41 = *((_QWORD *)v10 + 5);
                }
                v45 += *((_QWORD *)v10 + 4);
                v42 += v41;
                ++v54;
              }
              while (v54 < v46);
            }
          }
        }
        else
        {
          if (v84)
          {
            v53 = 0;
          }
          else
          {
            v53 = 16 - CMPhotoGetBitDepthForPixelFormat(v90);
            v35 = *((unsigned __int8 *)v10 + 76);
          }
          v16 = v87;
          v59 = *((_QWORD *)v10 + 2);
          if (v35)
          {
            if (v59)
            {
              v60 = 0;
              v61 = *((_QWORD *)v10 + 3);
              v62 = *((_QWORD *)v10 + 4);
              v63 = *((_QWORD *)v10 + 5);
              do
              {
                if (v61)
                {
                  v64 = 0;
                  v65 = *((unsigned __int8 *)v10 + 48);
                  do
                  {
                    v66 = *(float *)(v45 + 4 * v64);
                    if (v65 && *((_DWORD *)v10 + 13) == LODWORD(v66))
                    {
                      v67 = *((_DWORD *)v10 + 14);
                    }
                    else
                    {
                      *(float *)&v43 = v10[15];
                      v43 = (double)*(unint64_t *)&v43;
                      v68 = fmax(fmin(v66, 1.0), 0.0) * v43;
                      v67 = llroundf(v68);
                    }
                    *(_WORD *)&v42[2 * v64++] = v67 << v53;
                  }
                  while (v61 != v64);
                }
                v45 += v62;
                v42 += v63;
                ++v60;
              }
              while (v60 != v59);
            }
          }
          else if (v59)
          {
            v69 = 0;
            v70 = *((_QWORD *)v10 + 3);
            v71 = *((_QWORD *)v10 + 4);
            v72 = *((_QWORD *)v10 + 5);
            do
            {
              if (v70)
              {
                v73 = 0;
                v74 = *((unsigned __int8 *)v10 + 48);
                do
                {
                  v75 = *(float *)(v45 + 4 * v73);
                  if (v74 && *((_DWORD *)v10 + 13) == LODWORD(v75))
                    v76 = *((_DWORD *)v10 + 14);
                  else
                    v76 = llroundf((float)((float)(v75 - v10[17]) / v44) * (float)*((unsigned int *)v10 + 15));
                  *(_WORD *)&v42[2 * v73++] = v76 << v53;
                }
                while (v70 != v73);
              }
              v45 += v71;
              v42 += v72;
              ++v69;
            }
            while (v69 != v59);
          }
        }
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v78 = FigCFDictionarySetFloat();
          if (!(_DWORD)v78)
          {
            v78 = FigCFDictionarySetFloat();
            if (!(_DWORD)v78)
            {
              v78 = FigCFDictionarySetInt16();
              if (!(_DWORD)v78)
              {
                v78 = FigCFDictionarySetInt16();
                if (!(_DWORD)v78)
                {
                  if (!a6
                    || (v78 = FigCFDictionarySetInt16(), !(_DWORD)v78)
                    && (v78 = FigCFDictionarySetInt32(), !(_DWORD)v78))
                  {
                    v78 = FigCFDictionarySetInt();
                    if (!(_DWORD)v78)
                    {
                      v79 = FigCFDictionarySetInt();
                      v80 = v89;
                      if ((_DWORD)v79)
                      {
                        v11 = v79;
                        v81 = 1;
                      }
                      else
                      {
                        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                        CMPhotoPropagateColorPropertiesFromSourceBuffer(v16, pixelBuffer);
                        *a9 = pixelBuffer;
                        pixelBuffer = 0;
                        v81 = 0;
                        v11 = 0;
                        if (a10)
                        {
                          *a10 = Mutable;
                          Mutable = 0;
                        }
                      }
                      goto LABEL_108;
                    }
                  }
                }
              }
            }
          }
          v11 = v78;
        }
        else
        {
          v11 = 4294950305;
        }
        v81 = 1;
LABEL_127:
        v80 = v89;
LABEL_108:
        v82 = v86;
        goto LABEL_109;
      }
      goto LABEL_122;
    }
    pixelBuffer = *a9;
    if (_isPixelBufferValid(v26, v25, Width, Height))
    {
      v86 = 0;
      goto LABEL_21;
    }
    Mutable = 0;
    v81 = 0;
    v82 = 0;
    v10 = 0;
    v11 = 4294950306;
  }
  else
  {
    Mutable = 0;
    v81 = 0;
    v10 = 0;
    v11 = 4294950194;
    v82 = 1;
  }
  v80 = v89;
LABEL_109:
  CVPixelBufferUnlockBaseAddress(v16, 1uLL);
  if (v81 && pixelBuffer)
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  if (v82 && pixelBuffer)
    CFRelease(pixelBuffer);
  if (Mutable)
    CFRelease(Mutable);
  if (v80)
    dispatch_release(v80);
LABEL_119:
  free(v10);
  return v11;
}

BOOL _isPixelBufferValid(__CVBuffer *a1, int a2, uint64_t a3, uint64_t a4)
{
  OSType PixelFormatType;
  _BOOL4 v9;
  int HasCLAP;
  _BOOL4 v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v9 = CVPixelBufferGetWidth(a1) == a3 && CVPixelBufferGetHeight(a1) == a4;
  HasCLAP = CMPhotoPixelBufferHasCLAP(a1);
  v11 = PixelFormatType == a2 && v9;
  return !HasCLAP && v11;
}

uint64_t CMPhotoCreateCompressionCompatiblePixelBuffer(__CVBuffer *a1, const void *a2, unsigned int a3, const __CFNumber *a4, int a5, CFTypeRef *a6, _QWORD *a7)
{
  return CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType(a1, a2, 0, a3, a4, a5, a6, a7);
}

uint64_t CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType(CVPixelBufferRef pixelBuffer, const void *a2, int a3, unsigned int a4, const __CFNumber *a5, int a6, CFTypeRef *a7, _QWORD *a8)
{
  uint64_t v8;
  int v9;
  _QWORD *v12;
  __CVBuffer *v17;
  size_t Width;
  size_t Height;
  int v20;
  int v21;
  uint64_t PixelFormatType;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t IntegerPixelBufferFromFullPrecisionSource;
  signed int v32;
  unsigned __int16 v33;
  int v34;
  CFTypeRef *v35;
  int v36;
  __CVBuffer *v37;
  size_t v38;
  int v39;
  int v40;
  CFTypeRef v41;
  int v42;
  _BOOL4 isPixelBufferValid;
  OSType v44;
  uint64_t FixedPointDescriptionFromPixelFormat;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v47;
  uint64_t v48;
  __CVBuffer *v49;
  int v50;
  OSType v51;
  uint64_t v52;
  size_t BytesPerRow;
  unsigned __int16 *BaseAddress;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  unsigned __int16 *v59;
  uint64_t i;
  unsigned int v61;
  BOOL v62;
  unsigned __int16 v63;
  BOOL v64;
  char v65;
  int v66;
  __CVBuffer *v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  _BYTE *v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t j;
  int v76;
  char v77;
  uint64_t k;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  CFTypeRef v86;
  CFTypeRef v88;
  int v89;
  _QWORD *v90;
  unsigned int v91;
  CFTypeRef v92;
  size_t v93;
  CFTypeRef *v94;
  int v95;
  int v97;
  __CVBuffer *pixelBuffera;
  unsigned int v99;
  CFTypeRef v100;
  CFTypeRef cf;
  __CVBuffer *v102;
  CVPixelBufferRef valuePtr;
  char v104;
  int v105[4];

  v102 = 0;
  v100 = 0;
  cf = 0;
  v8 = 4294950306;
  v9 = 1;
  if (!pixelBuffer)
    goto LABEL_167;
  if (!a7)
    goto LABEL_167;
  if ((a4 - 17) < 0xF7u)
    goto LABEL_167;
  v12 = a8;
  if (!a8)
    goto LABEL_167;
  v17 = (__CVBuffer *)*a7;
  if (*a7)
  {
    cf = *a7;
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    v20 = a4 <= 8 ? 1278226488 : 1278226736;
    v21 = a4 <= 0xA ? v20 : 1278226742;
    v9 = 0;
    if (!_isPixelBufferValid(v17, v21, Width, Height))
      goto LABEL_75;
  }
  v95 = a6;
  v99 = 0;
  pixelBuffera = pixelBuffer;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v25 = PixelFormatType;
  if (!a5)
  {
    v27 = 0;
    v26 = 0;
    goto LABEL_34;
  }
  v26 = 0;
  v27 = 1;
  if ((int)PixelFormatType > 1717855599)
  {
    if ((int)PixelFormatType <= 1751410031)
    {
      if ((_DWORD)PixelFormatType != 1717855600)
      {
        v28 = 1717856627;
LABEL_31:
        if ((_DWORD)PixelFormatType != v28)
          goto LABEL_34;
      }
LABEL_32:
      if (!CFNumberGetValue(a5, kCFNumberSInt32Type, &v99))
        goto LABEL_75;
      v26 = v99;
      goto LABEL_34;
    }
    if ((_DWORD)PixelFormatType == 1751410032 || (_DWORD)PixelFormatType == 1932996149)
      goto LABEL_27;
    v29 = 1751411059;
LABEL_26:
    if ((_DWORD)PixelFormatType != v29)
      goto LABEL_34;
    goto LABEL_27;
  }
  if ((int)PixelFormatType <= 1278226533)
  {
    if ((_DWORD)PixelFormatType == 825306677)
      goto LABEL_27;
    v29 = 825437747;
    goto LABEL_26;
  }
  if ((_DWORD)PixelFormatType == 1278226534)
    goto LABEL_32;
  if ((_DWORD)PixelFormatType != 1278226536)
  {
    v28 = 1380410945;
    goto LABEL_31;
  }
LABEL_27:
  LOWORD(valuePtr) = 0;
  if (!CFNumberGetValue(a5, kCFNumberSInt16Type, &valuePtr))
    goto LABEL_75;
  v26 = (unsigned __int16)valuePtr;
  v99 = (unsigned __int16)valuePtr;
LABEL_34:
  v94 = a7;
  if ((_DWORD)v25 == 1278226536 || (_DWORD)v25 == 1751411059 || (_DWORD)v25 == 1751410032)
  {
    v30 = 2143289344;
    IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(pixelBuffera, a2, v27, (unsigned __int16)v26, 2143289344, &v102);
    if ((_DWORD)IntegerPixelBufferFromFullPrecisionSource)
    {
LABEL_180:
      v8 = IntegerPixelBufferFromFullPrecisionSource;
      goto LABEL_167;
    }
    pixelBuffera = v102;
    v32 = CVPixelBufferGetPixelFormatType(v102);
    v99 = 2143289344;
  }
  else
  {
    v30 = v26;
    v32 = v25;
  }
  if (v32 <= 1380410944)
  {
    if (v32 != 825306677 && v32 != 825437747)
    {
      v34 = 1278226534;
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  if (v32 <= 1717856626)
  {
    if (v32 == 1380410945)
    {
LABEL_51:
      IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffera, a2, v25, a4, 0, v27, v30, v26, (CVPixelBufferRef *)&cf, (CFMutableDictionaryRef *)&v100);
      goto LABEL_52;
    }
    v33 = 25968;
    goto LABEL_49;
  }
  if (v32 == 1932996149)
  {
LABEL_54:
    valuePtr = 0;
    v37 = pixelBuffera;
    if (pixelBuffera)
    {
      v38 = CVPixelBufferGetWidth(pixelBuffera);
      v93 = CVPixelBufferGetHeight(pixelBuffera);
      v39 = 1278226736;
      if (a4 <= 8)
        v39 = 1278226488;
      v40 = a4 <= 0xA ? v39 : 1278226742;
      v41 = cf;
      if (!cf
        || (valuePtr = (CVPixelBufferRef)cf,
            v42 = v40,
            isPixelBufferValid = _isPixelBufferValid((__CVBuffer *)cf, v40, v38, v93),
            v40 = v42,
            isPixelBufferValid))
      {
        v92 = v41;
        if (a4 == 16)
        {
          v44 = CVPixelBufferGetPixelFormatType(pixelBuffera);
          *(_QWORD *)v105 = 0;
          v104 = 0;
          FixedPointDescriptionFromPixelFormat = CMPhotoGetFixedPointDescriptionFromPixelFormat(v44, &v105[1], v105, &v104);
          if ((_DWORD)FixedPointDescriptionFromPixelFormat)
          {
            v8 = FixedPointDescriptionFromPixelFormat;
          }
          else
          {
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (Mutable)
            {
              v47 = Mutable;
              v48 = FigCFDictionarySetInt();
              if (!(_DWORD)v48)
              {
                v48 = FigCFDictionarySetInt();
                if (!(_DWORD)v48)
                {
                  v48 = FigCFDictionarySetInt();
                  if (!(_DWORD)v48)
                  {
                    v48 = FigCFDictionarySetInt();
                    if (!(_DWORD)v48)
                    {
                      v48 = FigCFDictionarySetInt();
                      if (!(_DWORD)v48)
                      {
                        if (!a5
                          || (v48 = FigCFDictionarySetInt16(), !(_DWORD)v48)
                          && (v48 = FigCFDictionarySetInt16(), !(_DWORD)v48))
                        {
                          if (!valuePtr)
                          {
                            v49 = (__CVBuffer *)CFRetain(pixelBuffera);
                            v50 = 0;
                            valuePtr = v49;
                            v35 = v94;
LABEL_145:
                            CMPhotoPropagateColorPropertiesFromSourceBuffer(v37, v49);
                            v8 = 0;
                            v85 = 0;
                            v100 = v47;
                            cf = valuePtr;
                            valuePtr = 0;
                            v47 = 0;
                            goto LABEL_146;
                          }
                          v8 = 4294950302;
LABEL_152:
                          v35 = v94;
                          goto LABEL_153;
                        }
                      }
                    }
                  }
                }
              }
              v8 = v48;
              v35 = v94;
              v36 = v95;
              CFRelease(v47);
LABEL_187:
              v47 = 0;
              goto LABEL_154;
            }
            v8 = 4294950305;
          }
          v35 = v94;
          v36 = v95;
          goto LABEL_187;
        }
        v91 = v40;
        v51 = CVPixelBufferGetPixelFormatType(pixelBuffera);
        if (v51 != 825306677 && v51 != 1932996149 && v51 != 825437747)
        {
          v47 = 0;
          v8 = 4294950301;
          goto LABEL_152;
        }
        v105[1] = 0;
        LOBYTE(v105[0]) = 0;
        v52 = CMPhotoGetFixedPointDescriptionFromPixelFormat(v51, &v105[1], 0, (char *)v105);
        if (!(_DWORD)v52)
        {
          if (LOBYTE(v105[0]))
          {
            v52 = FigSignalErrorAt();
          }
          else
          {
            v52 = CVPixelBufferLockBaseAddress(pixelBuffera, 1uLL);
            if (!(_DWORD)v52)
            {
              v90 = v12;
              BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffera);
              BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(pixelBuffera);
              v55 = BaseAddress;
              if (v93)
              {
                v56 = 0;
                v57 = 0;
                v58 = -1;
                v59 = BaseAddress;
                do
                {
                  if (v38)
                  {
                    for (i = 0; i != v38; ++i)
                    {
                      v61 = v59[i];
                      v62 = v61 == (unsigned __int16)v30;
                      v63 = v57;
                      if (v61 > v57)
                        v63 = v59[i];
                      if (v61 >= v58)
                        LOWORD(v61) = v58;
                      if (a5 == 0 || !v62)
                      {
                        v58 = v61;
                        v57 = v63;
                      }
                    }
                  }
                  v59 = (unsigned __int16 *)((char *)v59 + BytesPerRow);
                  ++v56;
                }
                while (v56 != v93);
              }
              else
              {
                v57 = 0;
                v58 = -1;
              }
              if (a5)
                v66 = 65534;
              else
                v66 = 0xFFFF;
              v89 = v66;
              v67 = valuePtr;
              if (!valuePtr)
              {
                v68 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v91, v38, v93, 1, 0, 0, 0, 64, 0, &valuePtr);
                if ((_DWORD)v68)
                {
                  v8 = v68;
                  v47 = 0;
                  v85 = 0;
                  v12 = v90;
                  v35 = v94;
                  v37 = pixelBuffera;
                  v50 = 1;
                  goto LABEL_146;
                }
                v67 = valuePtr;
              }
              v69 = CVPixelBufferLockBaseAddress(v67, 0);
              if ((_DWORD)v69)
              {
                v8 = v69;
                v47 = 0;
                v85 = 0;
                v50 = 1;
              }
              else
              {
                v97 = v89 + (1 << a4);
                v70 = CVPixelBufferGetBytesPerRow(valuePtr);
                v71 = CVPixelBufferGetBaseAddress(valuePtr);
                if (v93)
                {
                  v72 = 0;
                  v73 = (float)(unsigned __int16)(v57 - v58);
                  v74 = (float)(unsigned __int16)v97;
                  do
                  {
                    if (v91 == 1278226488)
                    {
                      if (v38)
                      {
                        for (j = 0; j != v38; ++j)
                        {
                          v76 = v55[j];
                          if (!a5 || (v77 = v97 + 1, v76 != (unsigned __int16)v30))
                            v77 = llroundf((float)((float)(v76 - v58) / v73) * v74);
                          v71[j] = v77;
                        }
                      }
                    }
                    else if (v38)
                    {
                      for (k = 0; k != v38; ++k)
                      {
                        v79 = v55[k];
                        if (!a5 || (v80 = v97 + 1, v79 != (unsigned __int16)v30))
                          v80 = llroundf((float)((float)(v79 - v58) / v73) * v74);
                        *(_WORD *)&v71[2 * k] = v80;
                      }
                    }
                    v55 = (unsigned __int16 *)((char *)v55 + BytesPerRow);
                    v71 += v70;
                    ++v72;
                  }
                  while (v72 != v93);
                }
                v47 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v50 = 1;
                if (v47)
                {
                  v81 = FigCFDictionarySetFloat();
                  v37 = pixelBuffera;
                  if ((_DWORD)v81)
                  {
                    v8 = v81;
                    v85 = 1;
                    v12 = v90;
                  }
                  else
                  {
                    v82 = FigCFDictionarySetFloat();
                    v12 = v90;
                    if ((_DWORD)v82)
                    {
                      v8 = v82;
                      v85 = 1;
                    }
                    else
                    {
                      v83 = FigCFDictionarySetInt16();
                      if (!(_DWORD)v83)
                      {
                        v83 = FigCFDictionarySetInt16();
                        if (!(_DWORD)v83)
                        {
                          if (!a5
                            || (v83 = FigCFDictionarySetInt16(), !(_DWORD)v83)
                            && (v83 = FigCFDictionarySetInt16(), !(_DWORD)v83))
                          {
                            v83 = FigCFDictionarySetInt();
                            if (!(_DWORD)v83)
                            {
                              v84 = FigCFDictionarySetInt();
                              v35 = v94;
                              if (!(_DWORD)v84)
                              {
                                CVPixelBufferUnlockBaseAddress(valuePtr, 0);
                                v49 = valuePtr;
                                goto LABEL_145;
                              }
                              v8 = v84;
                              v85 = 1;
LABEL_146:
                              if (v50)
                                CVPixelBufferUnlockBaseAddress(v37, 1uLL);
                              if (v85)
                              {
                                v36 = v95;
                                if (valuePtr)
                                  CVPixelBufferUnlockBaseAddress(valuePtr, 0);
LABEL_154:
                                if (!v92 && valuePtr)
                                  CFRelease(valuePtr);
                                if (v47)
                                  CFRelease(v47);
                                if ((_DWORD)v8)
                                  goto LABEL_167;
                                goto LABEL_160;
                              }
LABEL_153:
                              v36 = v95;
                              goto LABEL_154;
                            }
                          }
                        }
                      }
                      v8 = v83;
                      v85 = 1;
                    }
                  }
LABEL_196:
                  v35 = v94;
                  goto LABEL_146;
                }
                v8 = 4294950305;
                v85 = 1;
              }
              v12 = v90;
              v35 = v94;
              v37 = pixelBuffera;
              goto LABEL_146;
            }
          }
        }
        v8 = v52;
        v47 = 0;
        v50 = 0;
        v85 = 0;
        goto LABEL_196;
      }
    }
LABEL_75:
    v8 = 4294950306;
    goto LABEL_167;
  }
  v33 = 26995;
LABEL_49:
  v34 = v33 | 0x66640000;
LABEL_50:
  if (v32 == v34)
    goto LABEL_51;
  v64 = v32 == 1279340600 || v32 == 1279340854;
  v65 = v64;
  if (a3 != 3
    || !(vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v32), (int32x4_t)xmmword_1A828F1C0))) & 1 | (v32 == 843264310) | v65 & 1))
  {
    v64 = a3 == 4;
    v35 = v94;
    v36 = v95;
    if (v64 && v32 == 1751527984)
    {
      IntegerPixelBufferFromFullPrecisionSource = CMPhotoScaleAndRotateSessionTransformForSize(0, pixelBuffera, 1, 1, 2019963440, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v23, v24, 0, 1u, (__CVBuffer **)&cf);
      if ((_DWORD)IntegerPixelBufferFromFullPrecisionSource)
        goto LABEL_180;
    }
    else
    {
      if (cf)
      {
        v8 = 4294950302;
        goto LABEL_167;
      }
      if (pixelBuffera)
        v88 = CFRetain(pixelBuffera);
      else
        v88 = 0;
      cf = v88;
    }
    goto LABEL_160;
  }
  IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateAlphaFromMainBuffer(pixelBuffera, 0, (CVPixelBufferRef *)&cf);
LABEL_52:
  v35 = v94;
  v36 = v95;
  if ((_DWORD)IntegerPixelBufferFromFullPrecisionSource)
    goto LABEL_180;
LABEL_160:
  v86 = v100;
  if (!v36 || v100)
    goto LABEL_166;
  v100 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v100)
  {
    CVPixelBufferGetPixelFormatType(pixelBuffera);
    IntegerPixelBufferFromFullPrecisionSource = FigCFDictionarySetInt();
    if ((_DWORD)IntegerPixelBufferFromFullPrecisionSource)
      goto LABEL_180;
    CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
    IntegerPixelBufferFromFullPrecisionSource = FigCFDictionarySetInt();
    if ((_DWORD)IntegerPixelBufferFromFullPrecisionSource)
      goto LABEL_180;
    v86 = v100;
LABEL_166:
    v8 = 0;
    *v35 = cf;
    v100 = 0;
    cf = 0;
    *v12 = v86;
    goto LABEL_167;
  }
  v8 = 4294950305;
LABEL_167:
  if (v102)
    CFRelease(v102);
  if (v9 && cf)
    CFRelease(cf);
  if (v100)
    CFRelease(v100);
  return v8;
}

uint64_t CMPhotoCreateFractionalPixelBuffer(__CVBuffer *a1, const void *a2, uint64_t a3, int a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v6;
  CFTypeRef *v8;
  signed int PixelFormatType;
  unsigned __int16 v13;
  double v14;
  double v15;
  _BOOL4 v16;
  OSType MatchingFullPrecisionPixelFormat;
  unsigned __int16 v18;
  int v19;
  OSType v20;
  OSType v21;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource;
  __CVBuffer *v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  size_t Width;
  size_t Height;
  size_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  size_t BytesPerRow;
  unsigned __int8 *BaseAddress;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  float *v42;
  float v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t i;
  int v48;
  float v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t j;
  int v55;
  float v56;
  uint64_t v57;
  size_t v58;
  char *v59;
  uint64_t k;
  uint64_t v61;
  float v62;
  float v63;
  int v64;
  __int16 v65;
  unsigned __int16 v67;
  _BOOL4 v68;
  CFTypeRef *v69;
  CFTypeRef *v70;
  OSType v71;
  CFTypeRef cf;
  CFTypeRef v74;
  char v75;
  float v76;
  int v77;
  int v78;
  uint64_t v79;
  CVPixelBufferRef pixelBuffer;

  cf = 0;
  v74 = 0;
  v6 = 4294950306;
  if (!a1)
    goto LABEL_133;
  if (!a5)
    goto LABEL_133;
  v8 = a6;
  if (!a6)
    goto LABEL_133;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v6 = 4294950301;
  if (PixelFormatType <= 1278226735)
  {
    if (PixelFormatType == 875704422)
      goto LABEL_11;
    v13 = 12344;
  }
  else
  {
    if (PixelFormatType == 1278226736 || PixelFormatType == 2019963440)
      goto LABEL_11;
    v13 = 12598;
  }
  if (PixelFormatType != (v13 | 0x4C300000))
    goto LABEL_133;
LABEL_11:
  if (CFDictionaryContainsKey(a5, CFSTR("IntInvalidValue")))
    v16 = CFDictionaryContainsKey(a5, CFSTR("NativeInvalidValue")) != 0;
  else
    v16 = 0;
  if ((int)a3 <= 1717855599)
  {
    if ((int)a3 <= 1278226533)
    {
      if ((_DWORD)a3 != 825306677 && (_DWORD)a3 != 825437747)
      {
        if ((_DWORD)a3 != 1278226488)
          goto LABEL_113;
LABEL_47:
        HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoScaleAndRotateSessionTransformForSizeWithHW(0, a1, a4 == 0, 1, a3, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v14, v15, 0, 1u, a4,
                                                            0,
                                                            a4,
                                                            0xFFFFFFFF,
                                                            (__CVBuffer **)&cf);
        if (!(_DWORD)HalfPrecisionPixelBufferFromFullPrecisionSource)
        {
          v25 = (__CVBuffer *)cf;
LABEL_132:
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v25);
          v6 = 0;
          *v8 = cf;
          cf = 0;
          goto LABEL_133;
        }
LABEL_114:
        v6 = HalfPrecisionPixelBufferFromFullPrecisionSource;
        goto LABEL_133;
      }
      goto LABEL_49;
    }
    if ((a3 - 1278226736) <= 6 && ((1 << (a3 - 48)) & 0x45) != 0)
      goto LABEL_47;
    MatchingFullPrecisionPixelFormat = a3;
    if ((_DWORD)a3 == 1278226534)
    {
LABEL_34:
      v71 = MatchingFullPrecisionPixelFormat;
      v79 = 0;
      pixelBuffer = 0;
      v78 = 0;
      HIWORD(v77) = 0;
      v76 = 0.0;
      v68 = a4 == 0;
      if (FigCFDictionaryGetFloatIfPresent()
        && FigCFDictionaryGetFloatIfPresent()
        && FigCFDictionaryGetInt16IfPresent()
        && FigCFDictionaryGetInt16IfPresent()
        && *((float *)&v79 + 1) >= *(float *)&v79
        && HIWORD(v78) > (unsigned __int16)v78
        && (!v16 || FigCFDictionaryGetInt16IfPresent() && FigCFDictionaryGetInt32IfPresent()))
      {
        v20 = CVPixelBufferGetPixelFormatType(a1);
        v21 = v20;
        if (v20 == 875704422)
        {
          v67 = HIWORD(v78) - v78;
          WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
        }
        else
        {
          if (v20 != 1278226742 && v20 != 1278226488)
          {
            v25 = 0;
            v50 = 0;
            v6 = 4294950301;
            goto LABEL_105;
          }
          v67 = HIWORD(v78) - v78;
          WidthOfPlane = CVPixelBufferGetWidth(a1);
          HeightOfPlane = CVPixelBufferGetHeight(a1);
        }
        v34 = HeightOfPlane;
        v35 = CVPixelBufferLockBaseAddress(a1, 1uLL);
        if (!(_DWORD)v35)
        {
          v70 = v8;
          if (v21 - 1278226488 <= 0x30 && ((1 << (v21 - 56)) & 0x1400000000001) != 0
            || v21 - 1278226736 <= 6 && ((1 << (v21 - 48)) & 0x45) != 0)
          {
            BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
            BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
          }
          else
          {
            BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
            BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
          }
          v38 = BaseAddress;
          if (a4)
            v39 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v71, WidthOfPlane, v34, 0, 0, 64, 0, &pixelBuffer);
          else
            v39 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v71, WidthOfPlane, v34, 1, 0, 0, 0, 64, 0, &pixelBuffer);
          v6 = v39;
          if (!(_DWORD)v39)
          {
            v40 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            if (!(_DWORD)v40)
            {
              v41 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              v42 = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
              v43 = (float)(*((float *)&v79 + 1) - *(float *)&v79) / (float)v67;
              if (v21 == 875704422 || v21 == 1278226488)
              {
                if (v34)
                {
                  v44 = 0;
                  v45 = BYTE2(v77);
                  v46 = (unsigned __int16)v78;
                  do
                  {
                    if (WidthOfPlane)
                    {
                      for (i = 0; i != WidthOfPlane; ++i)
                      {
                        v48 = v38[i];
                        if (v16 && v48 == v45)
                          v49 = v76;
                        else
                          v49 = *(float *)&v79 + (float)((float)(v48 - v46) * v43);
                        v42[i] = v49;
                      }
                    }
                    v38 += BytesPerRow;
                    v42 = (float *)((char *)v42 + v41);
                    ++v44;
                  }
                  while (v44 != v34);
                }
              }
              else if (v34)
              {
                v51 = 0;
                v52 = HIWORD(v77);
                v53 = (unsigned __int16)v78;
                do
                {
                  if (WidthOfPlane)
                  {
                    for (j = 0; j != WidthOfPlane; ++j)
                    {
                      v55 = *(unsigned __int16 *)&v38[2 * j];
                      if (v16 && v55 == v52)
                        v56 = v76;
                      else
                        v56 = *(float *)&v79 + (float)((float)(v55 - v53) * v43);
                      v42[j] = v56;
                    }
                  }
                  v38 += BytesPerRow;
                  v42 = (float *)((char *)v42 + v41);
                  ++v51;
                }
                while (v51 != v34);
              }
              CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
              CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, pixelBuffer);
              v6 = 0;
              v25 = pixelBuffer;
              cf = pixelBuffer;
              pixelBuffer = 0;
              if (v16)
                v50 = LODWORD(v76);
              else
                v50 = 0;
              goto LABEL_104;
            }
            v6 = v40;
          }
          v25 = 0;
          v50 = 0;
LABEL_104:
          v8 = v70;
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
          goto LABEL_105;
        }
      }
      else
      {
        v35 = FigSignalErrorAt();
      }
      v6 = v35;
      v25 = 0;
      v50 = 0;
LABEL_105:
      if (pixelBuffer)
        CFRelease(pixelBuffer);
      if (!(_DWORD)v6)
      {
        if (v71 == (_DWORD)a3)
          goto LABEL_132;
        HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(v25, a2, v68, v16, v50, v50, (__CVBuffer **)&v74);
        if (!(_DWORD)HalfPrecisionPixelBufferFromFullPrecisionSource)
        {
          if (cf)
            CFRelease(cf);
          v25 = (__CVBuffer *)v74;
          cf = v74;
          v74 = 0;
          goto LABEL_132;
        }
        goto LABEL_114;
      }
      goto LABEL_133;
    }
    v19 = 1278226536;
LABEL_32:
    if ((_DWORD)a3 != v19)
    {
LABEL_113:
      HalfPrecisionPixelBufferFromFullPrecisionSource = FigSignalErrorAt();
      goto LABEL_114;
    }
    MatchingFullPrecisionPixelFormat = CMPhotoGetMatchingFullPrecisionPixelFormat(a3);
    goto LABEL_34;
  }
  if ((int)a3 <= 1751411058)
  {
    MatchingFullPrecisionPixelFormat = a3;
    if ((_DWORD)a3 == 1717855600)
      goto LABEL_34;
    MatchingFullPrecisionPixelFormat = a3;
    if ((_DWORD)a3 == 1717856627)
      goto LABEL_34;
    v18 = 25968;
    goto LABEL_31;
  }
  if ((_DWORD)a3 != 1932996149)
  {
    if ((_DWORD)a3 == 1751527984)
      goto LABEL_47;
    v18 = 26995;
LABEL_31:
    v19 = v18 | 0x68640000;
    goto LABEL_32;
  }
LABEL_49:
  pixelBuffer = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  if (FigCFDictionaryGetFloatIfPresent())
  {
    if (FigCFDictionaryGetFloatIfPresent())
    {
      if (FigCFDictionaryGetInt16IfPresent())
      {
        if (FigCFDictionaryGetInt16IfPresent())
        {
          v26 = v79;
          if (*((float *)&v79 + 1) >= *(float *)&v79)
          {
            v27 = HIWORD(v78) - v78;
            if (HIWORD(v78) > (unsigned __int16)v78
              && (!v16
               || FigCFDictionaryGetInt16IfPresent() && FigCFDictionaryGetInt16IfPresent()))
            {
              if (CVPixelBufferGetPixelFormatType(a1) != 1278226488)
                goto LABEL_133;
              v76 = 0.0;
              v75 = 0;
              HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoGetFixedPointDescriptionFromPixelFormat(a3, (int *)&v76, 0, &v75);
              if ((_DWORD)HalfPrecisionPixelBufferFromFullPrecisionSource)
                goto LABEL_114;
              if (!v75)
              {
                v28 = v27;
                v69 = v8;
                Width = CVPixelBufferGetWidth(a1);
                Height = CVPixelBufferGetHeight(a1);
                HalfPrecisionPixelBufferFromFullPrecisionSource = CVPixelBufferLockBaseAddress(a1, 1uLL);
                if ((_DWORD)HalfPrecisionPixelBufferFromFullPrecisionSource)
                  goto LABEL_114;
                v31 = CVPixelBufferGetBytesPerRow(a1);
                v32 = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
                if (a4)
                  v33 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], a3, Width, Height, 0, 0, 64, 0, &pixelBuffer);
                else
                  v33 = CMPhotoSurfacePoolCreatePixelBuffer(a2, a3, Width, Height, 1, 0, 0, 0, 64, 0, &pixelBuffer);
                v6 = v33;
                if (!(_DWORD)v33)
                {
                  v57 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
                  if (!(_DWORD)v57)
                  {
                    v58 = CVPixelBufferGetBytesPerRow(pixelBuffer);
                    v59 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
                    if (Height)
                    {
                      for (k = 0; k != Height; ++k)
                      {
                        if (Width)
                        {
                          v61 = 0;
                          v62 = *(float *)&v79;
                          v63 = (float)(1 << SLOBYTE(v76));
                          do
                          {
                            v64 = v32[v61];
                            if (v16 && v64 == BYTE2(v77))
                              v65 = v77;
                            else
                              v65 = llroundf((float)(v62+ (float)((float)(v64 - (unsigned __int16)v78)* (float)((float)(*((float *)&v26 + 1) - *(float *)&v26) / (float)v28)))* v63);
                            *(_WORD *)&v59[2 * v61++] = v65;
                          }
                          while (Width != v61);
                        }
                        v32 += v31;
                        v59 += v58;
                      }
                    }
                    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                    CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, pixelBuffer);
                    v6 = 0;
                    v25 = pixelBuffer;
                    cf = pixelBuffer;
                    pixelBuffer = 0;
LABEL_129:
                    v8 = v69;
                    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
                    if (pixelBuffer)
                      CFRelease(pixelBuffer);
                    if (!(_DWORD)v6)
                      goto LABEL_132;
                    goto LABEL_133;
                  }
                  v6 = v57;
                }
                v25 = 0;
                goto LABEL_129;
              }
            }
          }
        }
      }
    }
  }
  v6 = FigSignalErrorAt();
  v25 = 0;
  if (!(_DWORD)v6)
    goto LABEL_132;
LABEL_133:
  if (v74)
    CFRelease(v74);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t CMPhotoAuxiliaryImageMetadataCreateXMPData(int a1, CGImageMetadataRef metadata, const __CFDictionary *a3, int a4, const __CFString *a5, CFDataRef *a6)
{
  CGImageMetadata *MutableCopy;
  CGImageMetadata *v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;
  CFDataRef XMPData;
  _QWORD context[3];
  uint64_t v19;
  CFErrorRef err;

  err = 0;
  if (!a6)
    return 0;
  if (metadata)
    MutableCopy = CGImageMetadataCreateMutableCopy(metadata);
  else
    MutableCopy = CGImageMetadataCreateMutable();
  v11 = MutableCopy;
  if (!MutableCopy)
    return 4294950305;
  if (CGImageMetadataRegisterNamespaceForPrefix(MutableCopy, CFSTR("http://ns.apple.com/pixeldatainfo/1.0/"), CFSTR("apdi"), &err))
  {
    if (!a3
      || CFDictionaryGetCount(a3) < 1
      || (context[0] = v11,
          context[1] = CFSTR("http://ns.apple.com/pixeldatainfo/1.0/"),
          context[2] = CFSTR("apdi"),
          v19 = 0,
          CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)_addMetadataApplierFunction, context),
          v12 = v19,
          !(_DWORD)v19))
    {
      v13 = CFSTR("disparity");
      switch(a4)
      {
        case 1:
          goto LABEL_15;
        case 2:
          v13 = CFSTR("depth");
          goto LABEL_15;
        case 3:
          v13 = CFSTR("alpha");
          goto LABEL_15;
        case 4:
          v13 = a5;
          if (a5)
            goto LABEL_15;
          goto LABEL_17;
        case 5:
          v15 = _addValueToMetadata(v11, CFSTR("depth"), CFSTR("AuxiliaryImageType"), CFSTR("http://ns.apple.com/pixeldatainfo/1.0/"), CFSTR("apdi"));
          if ((_DWORD)v15)
            goto LABEL_28;
          v14 = CFSTR("AuxiliaryImageSubType");
          v13 = CFSTR("portraiteffectsmatte");
          break;
        default:
          v13 = CFSTR("unknown");
LABEL_15:
          v14 = CFSTR("AuxiliaryImageType");
          break;
      }
      v15 = _addValueToMetadata(v11, v13, v14, CFSTR("http://ns.apple.com/pixeldatainfo/1.0/"), CFSTR("apdi"));
      if ((_DWORD)v15)
      {
LABEL_28:
        v12 = v15;
      }
      else
      {
LABEL_17:
        XMPData = CGImageMetadataCreateXMPData(v11, 0);
        if (XMPData)
        {
          v12 = 0;
          *a6 = XMPData;
        }
        else
        {
          v12 = 4294950305;
        }
      }
    }
  }
  else
  {
    v12 = 4294950304;
  }
  CFRelease(v11);
  if (err)
    CFRelease(err);
  return v12;
}

const __CFString *_addMetadataApplierFunction(const __CFString *result, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 24))
  {
    result = (const __CFString *)_addValueToMetadata(*(CGImageMetadata **)a3, a2, result, *(CFStringRef *)(a3 + 8), *(CFStringRef *)(a3 + 16));
    *(_DWORD *)(a3 + 24) = (_DWORD)result;
  }
  return result;
}

uint64_t _addValueToMetadata(CGImageMetadata *a1, CFTypeRef value, const __CFString *a3, CFStringRef xmlns, CFStringRef prefix)
{
  CGImageMetadataTagRef v8;
  CGImageMetadataTag *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v12;

  v8 = CGImageMetadataTagCreate(xmlns, prefix, a3, kCGImageMetadataTypeDefault, value);
  if (!v8)
    return 4294950305;
  v9 = v8;
  v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@:%@"), prefix, a3);
  if (v10)
  {
    v11 = v10;
    if (CGImageMetadataSetTagWithPath(a1, 0, v10, v9))
      v12 = 0;
    else
      v12 = 4294950305;
    CFRelease(v11);
  }
  else
  {
    v12 = 4294950305;
  }
  CFRelease(v9);
  return v12;
}

uint64_t CMPhotoAuxiliaryImageMetadataCreateFromXMPData(const __CFAllocator *a1, const __CFData *a2, int *a3, CGImageMetadata **a4, _QWORD *a5, const __CFDictionary **a6)
{
  const __CFData *v6;
  uint64_t v11;
  const CGImageMetadata *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  uint64_t Count;
  const __CFAllocator *v16;
  const __CFDictionary *Mutable;
  CGMutableImageMetadataRef MutableCopy;
  CFIndex v19;
  CGImageMetadataTag *ValueAtIndex;
  CFStringRef v21;
  CFStringRef v22;
  CFStringRef v23;
  CFStringRef v24;
  uint64_t v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFStringRef v29;
  CFStringRef v30;
  CGImageMetadata *v31;
  int v32;
  const __CFString *v33;
  const void *URNFromAuxiliaryImageType;
  uint64_t v35;
  const __CFDictionary **v37;
  CGImageMetadata **v38;
  int *v39;
  _QWORD *v40;
  const __CFData *v41;
  unsigned int Int32;
  const __CFString *v43;
  CGImageMetadata *metadata;
  const __CFString *cf;
  __CFArray *v46;
  CFNumberFormatterRef v47;

  v6 = a2;
  v46 = 0;
  v47 = 0;
  if (!a2)
  {
    v31 = 0;
    Mutable = 0;
    v14 = 0;
    cf = 0;
    v43 = 0;
    v35 = 4294950306;
    goto LABEL_78;
  }
  v11 = CMPhotoMetadataCreateCFNumberFormatter(a1, &v47);
  if ((_DWORD)v11)
  {
    v35 = v11;
    v6 = 0;
    v31 = 0;
    Mutable = 0;
    v14 = 0;
    cf = 0;
    v43 = 0;
    goto LABEL_78;
  }
  v12 = CGImageMetadataCreateFromXMPData(v6);
  v6 = v12;
  if (!v12)
  {
    v31 = 0;
    Mutable = 0;
    v14 = 0;
LABEL_112:
    cf = 0;
    v43 = 0;
    v35 = 4294950194;
    goto LABEL_78;
  }
  v13 = CGImageMetadataCopyTags(v12);
  v14 = v13;
  if (!v13)
  {
    v31 = 0;
    Mutable = 0;
    goto LABEL_112;
  }
  v39 = a3;
  v40 = a5;
  v37 = a6;
  v38 = a4;
  Count = CFArrayGetCount(v13);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable || (MutableCopy = CGImageMetadataCreateMutableCopy(v6)) == 0)
  {
    v31 = 0;
    cf = 0;
    v43 = 0;
    v35 = 4294950305;
    goto LABEL_78;
  }
  metadata = MutableCopy;
  v41 = v6;
  if (Count < 1)
  {
    cf = 0;
    v43 = 0;
    Int32 = 4;
LABEL_50:
    v6 = v41;
    if (v40 && !cf)
    {
      v35 = FigSignalErrorAt();
      cf = 0;
LABEL_97:
      v31 = metadata;
      goto LABEL_78;
    }
    v31 = metadata;
    v32 = Int32;
    if (!cf)
    {
LABEL_71:
      if (v37 && CFDictionaryGetCount(Mutable) >= 1)
      {
        *v37 = Mutable;
        Mutable = 0;
      }
      if (v38)
      {
        *v38 = metadata;
        v31 = 0;
      }
      v35 = 0;
      if (v39)
        *v39 = v32;
      goto LABEL_78;
    }
    if (CFStringCompare(cf, CFSTR("disparity"), 0))
    {
      if (CFStringCompare(cf, CFSTR("depth"), 0))
      {
        if (CFStringCompare(cf, CFSTR("alpha"), 0) == kCFCompareEqualTo)
        {
          v32 = 3;
          goto LABEL_64;
        }
        v33 = cf;
      }
      else
      {
        v33 = v43;
        if (!v43)
        {
          v32 = 2;
          goto LABEL_64;
        }
      }
      if (CFStringCompare(v33, CFSTR("portraiteffectsmatte"), 0))
      {
        URNFromAuxiliaryImageType = 0;
        v32 = 4;
        goto LABEL_65;
      }
      v32 = 5;
    }
    else
    {
      v32 = 1;
    }
LABEL_64:
    URNFromAuxiliaryImageType = CMPhotoCreateURNFromAuxiliaryImageType(v32);
LABEL_65:
    if (v40)
    {
      if (!URNFromAuxiliaryImageType)
        URNFromAuxiliaryImageType = CFRetain(cf);
      *v40 = URNFromAuxiliaryImageType;
    }
    else if (URNFromAuxiliaryImageType)
    {
      CFRelease(URNFromAuxiliaryImageType);
    }
    goto LABEL_71;
  }
  v19 = 0;
  v43 = 0;
  cf = 0;
  Int32 = 4;
  while (1)
  {
    ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v14, v19);
    v21 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v21)
      break;
LABEL_46:
    if (Count == ++v19)
      goto LABEL_50;
  }
  v22 = v21;
  v23 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (!v23)
  {
    CFRelease(v22);
    v35 = 4294950194;
    v6 = v41;
    goto LABEL_97;
  }
  v24 = v23;
  if (FigCFEqual())
  {
    v25 = CMPhotoCopyMetadataTagValue(ValueAtIndex, v47, 0, &v46);
    if ((_DWORD)v25)
      goto LABEL_98;
    if (FigCFEqual())
    {
      if (!v46)
        goto LABEL_95;
      v26 = CFGetTypeID(v46);
      if (v26 != CFStringGetTypeID())
        goto LABEL_95;
      if (cf)
        CFRelease(cf);
      if (v46)
        cf = (const __CFString *)CFRetain(v46);
      else
        cf = 0;
    }
    else if (FigCFEqual())
    {
      if (!v46)
        goto LABEL_95;
      v28 = CFGetTypeID(v46);
      if (v28 != CFStringGetTypeID())
        goto LABEL_95;
      if (v43)
        CFRelease(v43);
      if (v46)
        v43 = (const __CFString *)CFRetain(v46);
      else
        v43 = 0;
    }
    else
    {
      CFDictionaryAddValue(Mutable, v24, v46);
    }
  }
  else
  {
    if (!FigCFEqual())
    {
      if (!cf)
      {
        if (FigCFEqual())
          cf = (const __CFString *)CFRetain(v22);
        else
          cf = 0;
      }
      goto LABEL_44;
    }
    v25 = CMPhotoCopyMetadataTagValue(ValueAtIndex, v47, 0, &v46);
    if ((_DWORD)v25)
    {
LABEL_98:
      v35 = v25;
LABEL_99:
      v30 = v22;
      v6 = v41;
      v31 = metadata;
      goto LABEL_105;
    }
    if (FigCFEqual())
    {
      if (!v46 || (v27 = CFGetTypeID(v46), v27 != CFNumberGetTypeID()))
      {
LABEL_95:
        v35 = 4294950194;
        goto LABEL_99;
      }
      Int32 = CMPhotoCFNumberGetInt32(v46);
    }
  }
  v29 = CGImageMetadataTagCopyPrefix(ValueAtIndex);
  v30 = CFStringCreateWithFormat(v16, 0, CFSTR("%@:%@"), v29, v24);
  if (!v30)
  {
    v35 = 4294950305;
    goto LABEL_102;
  }
  if (CGImageMetadataRemoveTagWithPath(metadata, 0, v30))
  {
    if (v29)
      CFRelease(v29);
    CFRelease(v30);
LABEL_44:
    CFRelease(v22);
    CFRelease(v24);
    if (v46)
    {
      CFRelease(v46);
      v46 = 0;
    }
    goto LABEL_46;
  }
  v35 = FigSignalErrorAt();
LABEL_102:
  CFRelease(v22);
  v6 = v41;
  if (v29)
    CFRelease(v29);
  v31 = metadata;
  if (v30)
LABEL_105:
    CFRelease(v30);
  CFRelease(v24);
LABEL_78:
  if (v46)
    CFRelease(v46);
  if (v14)
    CFRelease(v14);
  if (v6)
    CFRelease(v6);
  if (v31)
    CFRelease(v31);
  if (v47)
    CFRelease(v47);
  if (Mutable)
    CFRelease(Mutable);
  if (v43)
    CFRelease(v43);
  if (cf)
    CFRelease(cf);
  return v35;
}

const __CFString *CMPhotoCreateURNFromAuxiliaryImageType(int a1)
{
  int v1;
  const __CFString *result;

  v1 = a1 - 1;
  if ((a1 - 1) > 4 || ((0x17u >> v1) & 1) == 0)
  {
    result = CFSTR("unknown");
    return (const __CFString *)CFRetain(result);
  }
  result = *off_1E53F5300[v1];
  if (result)
    return (const __CFString *)CFRetain(result);
  return result;
}

uint64_t CMPhotoCreateDeltaPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, CVPixelBufferRef *a4, __CFDictionary *a5)
{
  CVPixelBufferRef *v5;
  __CVBuffer *v6;
  __CVBuffer *v9;
  OSType PixelFormatType;
  char v11;
  unint64_t BytesPerPixelForPixelFormat;
  uint64_t PixelBufferDataPointers;
  uint64_t v14;
  size_t v15;
  int v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t i;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  size_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  char v35;
  unint64_t v36;
  size_t BytesPerRowOfPlane;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  _BYTE *BaseAddressOfPlane;
  _WORD *v42;
  size_t v43;
  size_t v44;
  char v45;
  uint64_t j;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t k;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  size_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  size_t v60;
  char v61;
  OSType v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  size_t v68;
  size_t v69;
  uint64_t m;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  int v75;
  size_t v76;
  char v77;
  OSType v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  size_t v83;
  size_t v84;
  uint64_t n;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  size_t v90;
  int v91;
  char v92;
  OSType v93;
  uint64_t v94;
  _BYTE *v95;
  size_t v96;
  uint64_t ii;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  size_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  __CFDictionary *v106;
  __CVBuffer *v107;
  CVPixelBufferRef *v108;
  size_t v109;
  size_t v110;
  int v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  __CVBuffer *pixelBuffer;
  int v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  size_t v125;
  int v126;
  CVPixelBufferRef v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD v130[2];
  unint64_t v131;
  unint64_t v132;
  _QWORD v133[4];

  v5 = a4;
  v133[2] = *MEMORY[0x1E0C80C00];
  v127 = 0;
  v126 = 0;
  if (!a1)
    goto LABEL_48;
  v6 = a2;
  if (!a2)
    goto LABEL_48;
  if (!a4)
    goto LABEL_48;
  v9 = a1;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(v6)
    || !a3
    || (FigCFDictionaryGetIntIfPresent(), (v126 - 6) <= 0xFFFFFFFA)
    || CVPixelBufferGetPixelFormatType(v9) != 875704422
    || (v124 = 0,
        v125 = 0,
        CMPhotoGetPixelBufferCLAP(v9, 0, 0, &v124, &v125),
        v122 = 0,
        v123 = 0,
        CMPhotoGetPixelBufferCLAP(v6, 0, 0, &v122, &v123),
        v124 != v122)
    || v125 != v123)
  {
LABEL_48:
    v59 = FigSignalErrorAt();
    goto LABEL_90;
  }
  v11 = 1;
  CVPixelBufferLockBaseAddress(v9, 1uLL);
  CVPixelBufferLockBaseAddress(v6, 1uLL);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
  v121 = 0;
  v133[0] = 0;
  v133[1] = 0;
  v131 = 0;
  v132 = 0;
  v130[0] = 0;
  v130[1] = 0;
  v128 = 0;
  v129 = 0;
  PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v9, 0, 0, &v121, (uint64_t)v133, (uint64_t)&v131, 0);
  if ((_DWORD)PixelBufferDataPointers)
  {
    v59 = PixelBufferDataPointers;
    goto LABEL_88;
  }
  if (v121 == 2)
  {
    v14 = CMPhotoGetPixelBufferDataPointers(v6, 0, 0, &v121, (uint64_t)v130, (uint64_t)&v128, 0);
    if ((_DWORD)v14)
    {
      v59 = v14;
      goto LABEL_94;
    }
    if (v121 == 2)
    {
      v106 = a5;
      v107 = v6;
      pixelBuffer = v9;
      v108 = v5;
      v15 = 0;
      v131 /= BytesPerPixelForPixelFormat;
      v132 /= BytesPerPixelForPixelFormat;
      v16 = 0x80000000;
      v17 = 0x7FFFFFFF;
      v18 = 1;
      v128 /= BytesPerPixelForPixelFormat;
      v129 /= BytesPerPixelForPixelFormat;
      do
      {
        v19 = v18;
        v20 = v133[v15];
        v21 = v130[v15];
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v15);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v15);
        if (HeightOfPlane)
        {
          for (i = 0; i != HeightOfPlane; ++i)
          {
            if (WidthOfPlane << v15)
            {
              v25 = (unsigned __int8 *)(v21 + *(&v128 + v15) * i);
              v26 = (unsigned __int8 *)(v20 + *(&v131 + v15) * i);
              v27 = WidthOfPlane << v15;
              do
              {
                v29 = *v26++;
                v28 = v29;
                v30 = *v25++;
                v31 = v28 - v30;
                if (v17 >= v31)
                  v17 = v31;
                if (v16 <= v31)
                  v16 = v31;
                --v27;
              }
              while (v27);
            }
          }
        }
        v18 = 0;
        v15 = 1;
      }
      while ((v19 & 1) != 0);
      switch(v126)
      {
        case 1:
          v113 = v17 > -129 && v16 < 128;
          if (v113)
            v32 = 875704422;
          else
            v32 = 2019963440;
          v11 = 1;
          v111 = v32;
          v33 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v32, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if ((_DWORD)v33)
            goto LABEL_95;
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          v34 = 0;
          v35 = 1;
          do
          {
            v116 = v35;
            v36 = CMPhotoGetBytesPerPixelForPixelFormat(v111);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v127, v34);
            v38 = v133[v34];
            v39 = v130[v34];
            v40 = BytesPerRowOfPlane / v36;
            BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v127, v34);
            v42 = CVPixelBufferGetBaseAddressOfPlane(v127, v34);
            v43 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v34) << v34;
            v44 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v34);
            if (v113)
            {
              v45 = v116;
              if (v44)
              {
                for (j = 0; j != v44; ++j)
                {
                  if (v43)
                  {
                    v47 = 0;
                    v48 = v38;
                    v49 = v39;
                    v50 = v43;
                    do
                    {
                      BaseAddressOfPlane[v47 + j * v40] = (*(_BYTE *)(v48 + j * *(&v131 + v34))
                                                         - *(_BYTE *)(v49 + j * *(&v128 + v34))) ^ 0x80;
                      ++v47;
                      ++v49;
                      ++v48;
                      --v50;
                    }
                    while (v50);
                  }
                }
              }
            }
            else
            {
              v45 = v116;
              if (v44)
              {
                for (k = 0; k != v44; ++k)
                {
                  if (v43)
                  {
                    v52 = 0;
                    v53 = (unsigned __int8 *)(v39 + *(&v128 + v34) * k);
                    v54 = (unsigned __int8 *)(v38 + *(&v131 + v34) * k);
                    v55 = v43;
                    do
                    {
                      v57 = *v54++;
                      v56 = v57;
                      v58 = *v53++;
                      v42[v52 + k * v40] = ((v56 - v58) << 6) ^ 0x8000;
                      ++v52;
                      --v55;
                    }
                    while (v55);
                  }
                }
              }
            }
            v35 = 0;
            v34 = 1;
          }
          while ((v45 & 1) != 0);
          goto LABEL_86;
        case 2:
          v11 = 1;
          v33 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if ((_DWORD)v33)
            goto LABEL_95;
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          v60 = 0;
          v61 = 1;
          do
          {
            v117 = v61;
            v62 = CVPixelBufferGetPixelFormatType(v127);
            v63 = CMPhotoGetBytesPerPixelForPixelFormat(v62);
            v64 = CVPixelBufferGetBytesPerRowOfPlane(v127, v60);
            v65 = v133[v60];
            v66 = v130[v60];
            v67 = CVPixelBufferGetBaseAddressOfPlane(v127, v60);
            v68 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v60);
            v69 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v60);
            if (v69)
            {
              for (m = 0; m != v69; ++m)
              {
                if (v68 << v60)
                {
                  v71 = 0;
                  v72 = v65;
                  v73 = v66;
                  v74 = v68 << v60;
                  do
                  {
                    v75 = *(unsigned __int8 *)(v72 + m * *(&v131 + v60))
                        - *(unsigned __int8 *)(v73 + m * *(&v128 + v60));
                    v67[v71 + m * (v64 / v63)] = ((v75 + ((unsigned __int16)(v75 & 0x8000) >> 15)) >> 1) ^ 0x80;
                    ++v71;
                    ++v73;
                    ++v72;
                    --v74;
                  }
                  while (v74);
                }
              }
            }
            v61 = 0;
            v60 = 1;
          }
          while ((v117 & 1) != 0);
          goto LABEL_86;
        case 3:
          v11 = 1;
          v33 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if ((_DWORD)v33)
            goto LABEL_95;
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          v76 = 0;
          v77 = 1;
          do
          {
            v118 = v77;
            v78 = CVPixelBufferGetPixelFormatType(v127);
            v114 = CMPhotoGetBytesPerPixelForPixelFormat(v78);
            v79 = CVPixelBufferGetBytesPerRowOfPlane(v127, v76);
            v80 = v133[v76];
            v81 = v130[v76];
            v82 = CVPixelBufferGetBaseAddressOfPlane(v127, v76);
            v83 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v76);
            v84 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v76);
            if (v84)
            {
              for (n = 0; n != v84; ++n)
              {
                if (v83 << v76)
                {
                  v86 = 0;
                  v87 = v80;
                  v88 = v81;
                  v89 = v83 << v76;
                  do
                  {
                    v82[v86 + n * (v79 / v114)] = LUT_compand_9b_to_8b_diff[*(unsigned __int8 *)(v87 + n * *(&v131 + v76))
                                                                          - (unint64_t)*(unsigned __int8 *)(v88 + n * *(&v128 + v76))
                                                                          + 255];
                    ++v86;
                    ++v88;
                    ++v87;
                    --v89;
                  }
                  while (v89);
                }
              }
            }
            v77 = 0;
            v76 = 1;
          }
          while ((v118 & 1) != 0);
          goto LABEL_86;
        case 4:
          v11 = 1;
          v33 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if ((_DWORD)v33)
          {
LABEL_95:
            v59 = v33;
          }
          else
          {
            CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
            CVPixelBufferLockBaseAddress(v127, 0);
            v90 = 0;
            v91 = v16 - v17;
            v92 = 1;
            do
            {
              v119 = v92;
              v93 = CVPixelBufferGetPixelFormatType(v127);
              v112 = CMPhotoGetBytesPerPixelForPixelFormat(v93);
              v110 = CVPixelBufferGetBytesPerRowOfPlane(v127, v90);
              v115 = v133[v90];
              v94 = v130[v90];
              v95 = CVPixelBufferGetBaseAddressOfPlane(v127, v90);
              v109 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v90);
              v96 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v90);
              if (v96)
              {
                for (ii = 0; ii != v96; ++ii)
                {
                  if (v109 << v90)
                  {
                    v98 = 0;
                    v99 = v115;
                    v100 = v94;
                    v101 = v109 << v90;
                    do
                    {
                      v102 = *(unsigned __int8 *)(v99 + ii * *(&v131 + v90))
                           - (v17
                            + *(unsigned __int8 *)(v100 + ii * *(&v128 + v90)));
                      if (v91 >= 256)
                        v102 = llroundf((float)((float)v102 / (float)v91) * 255.0);
                      ++v100;
                      ++v99;
                      v103 = v102 & ~(v102 >> 31);
                      if (v103 >= 0xFF)
                        LOBYTE(v103) = -1;
                      v95[v98 + ii * (v110 / v112)] = v103;
                      ++v98;
                      --v101;
                    }
                    while (v101);
                  }
                }
              }
              v92 = 0;
              v90 = 1;
            }
            while ((v119 & 1) != 0);
            if (v106
              && ((v104 = CMPhotoCFDictionarySetInt(v106, CFSTR("Min"), v17), (_DWORD)v104)
               || (v104 = CMPhotoCFDictionarySetInt(v106, CFSTR("Max"), v16), (_DWORD)v104)))
            {
              v59 = v104;
              v11 = 0;
            }
            else
            {
LABEL_86:
              v11 = 0;
              v59 = 0;
            }
          }
LABEL_87:
          v6 = v107;
          v5 = v108;
          v9 = pixelBuffer;
          break;
        default:
          v59 = FigSignalErrorAt();
          v11 = 1;
          goto LABEL_87;
      }
      goto LABEL_88;
    }
  }
  v59 = 0;
LABEL_94:
  v11 = 1;
LABEL_88:
  CVPixelBufferUnlockBaseAddress(v9, 1uLL);
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  if ((v11 & 1) == 0)
    CVPixelBufferUnlockBaseAddress(v127, 0);
LABEL_90:
  *v5 = v127;
  return v59;
}

uint64_t CMPhotoApplyDeltaPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, CFDictionaryRef theDict, CVPixelBufferRef *a4)
{
  CVPixelBufferRef *v4;
  __CVBuffer *v5;
  OSType PixelFormatType;
  char v8;
  unint64_t BytesPerPixelForPixelFormat;
  unint64_t v10;
  uint64_t PixelBufferDataPointers;
  uint64_t v12;
  size_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  _BYTE *BaseAddressOfPlane;
  size_t v20;
  size_t HeightOfPlane;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  unsigned int v28;
  uint64_t j;
  uint64_t k;
  int v31;
  unsigned int v32;
  uint64_t v33;
  size_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  size_t BytesPerRowOfPlane;
  _BYTE *v39;
  size_t WidthOfPlane;
  size_t v41;
  uint64_t m;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  int v47;
  unsigned int v48;
  size_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  size_t v54;
  size_t v55;
  uint64_t n;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  int v61;
  unsigned int v62;
  size_t v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  size_t v69;
  uint64_t ii;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  __CVBuffer *v79;
  CVPixelBufferRef *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  OSType v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  char v90;
  char v91;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  size_t v99;
  int v100;
  CVPixelBufferRef v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD v104[2];
  unint64_t v105;
  unint64_t v106;
  _QWORD v107[4];

  v4 = a4;
  v107[2] = *MEMORY[0x1E0C80C00];
  v101 = 0;
  v100 = 0;
  if (!a1 || (v5 = a2) == 0)
  {
    v33 = FigSignalErrorAt();
    if (!v4)
      goto LABEL_85;
    goto LABEL_82;
  }
  if (a4)
  {
    if (theDict)
    {
      CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("Mode"), &v100);
      if ((v100 - 6) >= 0xFFFFFFFB)
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
        v84 = CVPixelBufferGetPixelFormatType(v5);
        if (PixelFormatType == 875704422)
        {
          v98 = 0;
          v99 = 0;
          CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v98, &v99);
          v96 = 0;
          v97 = 0;
          CMPhotoGetPixelBufferCLAP(v5, 0, 0, &v96, &v97);
          if (v98 == v96 && v99 == v97)
          {
            v8 = 1;
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(v5, 1uLL);
            BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
            v10 = CMPhotoGetBytesPerPixelForPixelFormat(v84);
            v95 = 0;
            v107[0] = 0;
            v107[1] = 0;
            v105 = 0;
            v106 = 0;
            v104[0] = 0;
            v104[1] = 0;
            v102 = 0;
            v103 = 0;
            PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, 0, 0, &v95, (uint64_t)v107, (uint64_t)&v105, 0);
            if ((_DWORD)PixelBufferDataPointers)
              goto LABEL_88;
            if (v95 == 2)
            {
              v12 = CMPhotoGetPixelBufferDataPointers(v5, 0, 0, &v95, (uint64_t)v104, (uint64_t)&v102, 0);
              if ((_DWORD)v12)
              {
                v33 = v12;
                goto LABEL_91;
              }
              if (v95 == 2)
              {
                v105 /= BytesPerPixelForPixelFormat;
                v106 /= BytesPerPixelForPixelFormat;
                v102 /= v10;
                v103 /= v10;
                v8 = 1;
                PixelBufferDataPointers = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 875704422, v98, v99, 1, 0, 0, 1, 0, 0, &v101);
                if (!(_DWORD)PixelBufferDataPointers)
                {
                  CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(a1, v101);
                  CVPixelBufferLockBaseAddress(v101, 0);
                  v79 = v5;
                  v80 = v4;
                  switch(v100)
                  {
                    case 1:
                      v13 = 0;
                      v14 = 1;
                      do
                      {
                        v88 = v14;
                        v15 = v107[v13];
                        v16 = v104[v13];
                        v17 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        v18 = CVPixelBufferGetBytesPerRowOfPlane(v101, v13) / v17;
                        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v101, v13);
                        v20 = CVPixelBufferGetWidthOfPlane(a1, v13) << v13;
                        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v13);
                        if (v84 == 875704422)
                        {
                          if (HeightOfPlane)
                          {
                            for (i = 0; i != HeightOfPlane; ++i)
                            {
                              if (v20)
                              {
                                v23 = 0;
                                v24 = v15;
                                v25 = v16;
                                v26 = v20;
                                do
                                {
                                  v27 = *(unsigned __int8 *)(v24 + i * *(&v105 + v13))
                                      + *(unsigned __int8 *)(v25 + i * *(&v102 + v13))
                                      - 128;
                                  v28 = v27 & ~(v27 >> 31);
                                  if (v28 >= 0xFF)
                                    LOBYTE(v28) = -1;
                                  BaseAddressOfPlane[v23 + i * v18] = v28;
                                  ++v23;
                                  ++v25;
                                  ++v24;
                                  --v26;
                                }
                                while (v26);
                              }
                            }
                          }
                        }
                        else if (HeightOfPlane)
                        {
                          for (j = 0; j != HeightOfPlane; ++j)
                          {
                            if (v20)
                            {
                              for (k = 0; k != v20; ++k)
                              {
                                v31 = *(unsigned __int8 *)(v15 + j * *(&v105 + v13) + k)
                                    + (*(unsigned __int16 *)(v16 + 2 * (k + j * *(&v102 + v13))) >> 6)
                                    - 512;
                                v32 = v31 & ~(v31 >> 31);
                                if (v32 >= 0xFF)
                                  LOBYTE(v32) = -1;
                                BaseAddressOfPlane[k + j * v18] = v32;
                              }
                            }
                          }
                        }
                        v14 = 0;
                        v13 = 1;
                      }
                      while ((v88 & 1) != 0);
                      goto LABEL_61;
                    case 2:
                      if (v84 != 875704422)
                        goto LABEL_37;
                      v34 = 0;
                      v35 = 1;
                      do
                      {
                        v89 = v35;
                        v36 = v107[v34];
                        v37 = v104[v34];
                        v85 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v101, v34);
                        v39 = CVPixelBufferGetBaseAddressOfPlane(v101, v34);
                        WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v34);
                        v41 = CVPixelBufferGetHeightOfPlane(a1, v34);
                        if (v41)
                        {
                          for (m = 0; m != v41; ++m)
                          {
                            if (WidthOfPlane << v34)
                            {
                              v43 = 0;
                              v44 = v36;
                              v45 = v37;
                              v46 = WidthOfPlane << v34;
                              do
                              {
                                v47 = *(unsigned __int8 *)(v44 + m * *(&v105 + v34))
                                    + 2 * *(unsigned __int8 *)(v45 + m * *(&v102 + v34))
                                    - 256;
                                v48 = v47 & ~(v47 >> 31);
                                if (v48 >= 0xFF)
                                  LOBYTE(v48) = -1;
                                v39[v43 + m * (BytesPerRowOfPlane / v85)] = v48;
                                ++v43;
                                ++v45;
                                ++v44;
                                --v46;
                              }
                              while (v46);
                            }
                          }
                        }
                        v35 = 0;
                        v34 = 1;
                      }
                      while ((v89 & 1) != 0);
                      goto LABEL_61;
                    case 3:
                      if (v84 != 875704422)
                        goto LABEL_37;
                      v49 = 0;
                      v50 = 1;
                      do
                      {
                        v90 = v50;
                        v51 = v107[v49];
                        v52 = v104[v49];
                        v86 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        v82 = CVPixelBufferGetBytesPerRowOfPlane(v101, v49);
                        v53 = CVPixelBufferGetBaseAddressOfPlane(v101, v49);
                        v54 = CVPixelBufferGetWidthOfPlane(a1, v49);
                        v55 = CVPixelBufferGetHeightOfPlane(a1, v49);
                        if (v55)
                        {
                          for (n = 0; n != v55; ++n)
                          {
                            if (v54 << v49)
                            {
                              v57 = 0;
                              v58 = v51;
                              v59 = v52;
                              v60 = v54 << v49;
                              do
                              {
                                v61 = *(unsigned __int8 *)(v58 + n * *(&v105 + v49))
                                    + LUT_expand_8b_to_9b_diff[*(unsigned __int8 *)(v59 + n * *(&v102 + v49))]
                                    - 255;
                                v62 = v61 & ~(v61 >> 31);
                                if (v62 >= 0xFF)
                                  LOBYTE(v62) = -1;
                                v53[v57 + n * (v82 / v86)] = v62;
                                ++v57;
                                ++v59;
                                ++v58;
                                --v60;
                              }
                              while (v60);
                            }
                          }
                        }
                        v50 = 0;
                        v49 = 1;
                      }
                      while ((v90 & 1) != 0);
LABEL_61:
                      v8 = 0;
                      v33 = 0;
                      v5 = v79;
                      v4 = v80;
                      break;
                    case 4:
                      v93 = 0x80000000;
                      v94 = 0x7FFFFFFF;
                      if (!CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("Min"), &v94)
                        || !CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("Max"), &v93)
                        || v84 != 875704422)
                      {
                        goto LABEL_37;
                      }
                      v63 = 0;
                      v64 = v93 - v94;
                      v65 = 1;
                      do
                      {
                        v91 = v65;
                        v66 = v107[v63];
                        v67 = v104[v63];
                        v87 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        v83 = CVPixelBufferGetBytesPerRowOfPlane(v101, v63);
                        v68 = CVPixelBufferGetBaseAddressOfPlane(v101, v63);
                        v81 = CVPixelBufferGetWidthOfPlane(a1, v63);
                        v69 = CVPixelBufferGetHeightOfPlane(a1, v63);
                        if (v69)
                        {
                          for (ii = 0; ii != v69; ++ii)
                          {
                            if (v81 << v63)
                            {
                              v71 = 0;
                              v72 = v66;
                              v73 = v67;
                              v74 = v81 << v63;
                              do
                              {
                                v75 = *(unsigned __int8 *)(v73 + ii * *(&v102 + v63));
                                if (v64 >= 256)
                                  v75 = llroundf((float)((float)v64 * (float)v75) / 255.0);
                                v76 = *(unsigned __int8 *)(v72 + ii * *(&v105 + v63));
                                ++v73;
                                ++v72;
                                v77 = (v75 + v94 + v76) & ~((int)(v75 + v94 + v76) >> 31);
                                if (v77 >= 0xFF)
                                  LOBYTE(v77) = -1;
                                v68[v71 + ii * (v83 / v87)] = v77;
                                ++v71;
                                --v74;
                              }
                              while (v74);
                            }
                          }
                        }
                        v65 = 0;
                        v63 = 1;
                      }
                      while ((v91 & 1) != 0);
                      v33 = 0;
                      goto LABEL_78;
                    default:
LABEL_37:
                      v33 = FigSignalErrorAt();
LABEL_78:
                      v8 = 0;
                      break;
                  }
LABEL_79:
                  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
                  CVPixelBufferUnlockBaseAddress(v5, 1uLL);
                  if ((v8 & 1) == 0)
                    CVPixelBufferUnlockBaseAddress(v101, 0);
                  if (v4)
                    goto LABEL_82;
LABEL_85:
                  if (v101)
                    CFRelease(v101);
                  return v33;
                }
LABEL_88:
                v33 = PixelBufferDataPointers;
                goto LABEL_79;
              }
            }
            v33 = 0;
LABEL_91:
            v8 = 1;
            goto LABEL_79;
          }
        }
      }
    }
    v33 = FigSignalErrorAt();
LABEL_82:
    *v4 = v101;
    return v33;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoSoftwareJFIFTileIteratorCreate()
{
  return FigSignalErrorAt();
}

uint64_t _copyFormatDescriptionForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  void *v6;
  const __CFDictionary *v7;
  uint64_t v8;
  CFTypeRef cf;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a2)
  {
    if (*(_QWORD *)(a1 + 296))
    {
      v6 = (void *)*MEMORY[0x1E0CA2210];
      values = *(void **)(a1 + 296);
      keys[0] = v6;
      v7 = CFDictionaryCreate(*(CFAllocatorRef *)(a1 + 40), (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v7)
        return 4294950305;
    }
    else
    {
      v7 = 0;
    }
    v8 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 40), 0x6A786C20u, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), v7, (CMVideoFormatDescriptionRef *)&cf);
    if ((_DWORD)v8)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a4 = cf;
      cf = 0;
    }
    if (v7)
      CFRelease(v7);
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t _getThumbnailCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t _cancelAsyncRequest_0(uint64_t a1, const void *a2)
{
  CMPhotoDecompressionSessionCancelAsyncRequest(*(_QWORD *)(a1 + 16), a2);
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex_0(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _DWORD *a7)
{
  if (a2 || a3 < 0 || (a1[36] != 0) <= a3)
    return FigSignalErrorAt();
  if (a5)
    *a5 = a1[22];
  if (a6)
    *a6 = a1[23];
  if (a7)
    *a7 = a1[33];
  return 0;
}

uint64_t _copyAuxiliaryImageTypeInfoForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString **a5, _QWORD *a6)
{
  const __CFString *v8;

  if (a2 || a3 < 0 || (*(_DWORD *)(a1 + 144) != 0) <= a3)
    return FigSignalErrorAt();
  if (a5)
  {
    v8 = CFSTR("urn:mpeg:hevc:2015:auxid:1");
    if (CFSTR("urn:mpeg:hevc:2015:auxid:1"))
      v8 = (const __CFString *)CFRetain(CFSTR("urn:mpeg:hevc:2015:auxid:1"));
    *a5 = v8;
  }
  if (a6)
    *a6 = 0;
  return 0;
}

uint64_t _copyAuxiliaryImageMetadataForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 || a3 < 0 || (*(_DWORD *)(a1 + 144) != 0) <= a3)
    return FigSignalErrorAt();
  else
    return 4294950303;
}

uint64_t _createOutputBufferAttributesForImageIndex_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[14];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2)
    return FigSignalErrorAt();
  v19 = v4;
  v20 = v5;
  v10 = *(unsigned int *)(a1 + 88);
  v9 = *(unsigned int *)(a1 + 92);
  v18 = 0;
  v17 = 0u;
  memset(v16, 0, sizeof(v16));
  if (!a4)
    return 0;
  v11 = _determineDecodeStrategy_0(a1, a3, v10, v9, (uint64_t)v16);
  if ((_DWORD)v11)
    return v11;
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v13 = Mutable;
  v14 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CA90E0], *((_QWORD *)&v17 + 1));
  if ((_DWORD)v14 || (v14 = CMPhotoCFDictionarySetSize(v13, *MEMORY[0x1E0CA8FD8], v18), (_DWORD)v14))
  {
    v15 = v14;
    goto LABEL_12;
  }
  v15 = CMPhotoCFDictionarySetSize(v13, *MEMORY[0x1E0CA8F68], 16);
  if ((_DWORD)v15)
  {
LABEL_12:
    CFRelease(v13);
    return v15;
  }
  *a4 = v13;
  return v15;
}

uint64_t _copyXMPForIndex_0(uint64_t a1, uint64_t a2, CFIndex idx, uint64_t a4, _QWORD *a5)
{
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFTypeRef v10;
  uint64_t result;

  if (a2)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 328);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 4294950303;
  if (!a5)
    return 0;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 328), idx);
  if (ValueAtIndex)
    v10 = CFRetain(ValueAtIndex);
  else
    v10 = 0;
  result = 0;
  *a5 = v10;
  return result;
}

uint64_t _copyImageSubsamplingForIndex_0(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;

  if (!a3)
    return 0;
  if (!a2)
  {
    if (*(_DWORD *)(a1 + 136) == 3)
      v3 = 1;
    else
      v3 = 6;
    *a3 = v3;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _copyImageIsRGBForIndex_0(uint64_t a1, uint64_t a2, BOOL *a3)
{
  if (!a3)
    return 0;
  if (!a2)
  {
    *a3 = *(_DWORD *)(a1 + 136) == 3;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _copyColorSpaceForIndex_0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v4;
  CFTypeRef v5;
  uint64_t result;

  if (a2)
    return FigSignalErrorAt();
  if (!a3)
    return 0;
  v4 = *(const void **)(a1 + 288);
  if (!v4)
    return 4294950303;
  v5 = CFRetain(v4);
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t _createPreparedJXLDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a5)
    goto LABEL_18;
  v9 = JxlDecoderCreate();
  if (!v9)
    goto LABEL_19;
  if (!a6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v10 = JxlThreadParallelRunnerCreate();
  if (!v10)
  {
LABEL_19:
    v11 = 4294950305;
    goto LABEL_16;
  }
  if (JxlDecoderSetParallelRunner())
  {
    v11 = 4294950304;
    goto LABEL_16;
  }
LABEL_8:
  if (JxlDecoderSetKeepOrientation())
    goto LABEL_17;
  if (JxlDecoderSetUnpremultiplyAlpha())
    goto LABEL_17;
  if (JxlDecoderSetDecompressBoxes())
    goto LABEL_17;
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 72));
  CFDataGetLength(*(CFDataRef *)(a1 + 72));
  if (JxlDecoderSetInput())
    goto LABEL_17;
  if (JxlDecoderSubscribeEvents())
  {
LABEL_18:
    v11 = 4294950306;
    goto LABEL_16;
  }
  v12 = JxlDecoderProcessInput();
  if ((_DWORD)v12 == 2)
  {
LABEL_17:
    v11 = 4294950194;
    goto LABEL_16;
  }
  v11 = v12;
  *a5 = v9;
  if (a6)
    *a6 = v10;
LABEL_16:
  JxlThreadParallelRunnerDestroy();
  JxlDecoderDestroy();
  return v11;
}

uint64_t _configureJXLColor(const __CFAllocator *a1, uint64_t a2, int a3, unint64_t a4, CFStringRef *a5, __CFData **a6)
{
  uint64_t v11;
  CFStringRef StringForIntegerCodePoint;
  __CFData *Mutable;
  __CFData *v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v18;
  int transferFunctionCodePoint;

  if (!CMPhotoIsMatchedJxlDecodeAPI())
    return FigSignalErrorAt();
  transferFunctionCodePoint = 0;
  v18 = 0u;
  if (JxlDecoderGetColorAsEncodedProfile())
  {
    if (!a3)
    {
      transferFunctionCodePoint = 0;
      v18 = 0u;
      if (!JxlDecoderGetColorAsEncodedProfile())
      {
        transferFunctionCodePoint = 13;
        JxlDecoderSetPreferredColorProfile();
      }
    }
  }
  else if (JxlDecoderSetPreferredColorProfile())
  {
    return 4294950194;
  }
  if (!(a4 | (unint64_t)a5) || JxlDecoderGetColorAsEncodedProfile())
  {
    v11 = 0;
    StringForIntegerCodePoint = 0;
    goto LABEL_10;
  }
  switch(DWORD2(v18))
  {
    case 0xB:
      v16 = (uint64_t *)MEMORY[0x1E0CA8D98];
      break;
    case 9:
      v16 = (uint64_t *)MEMORY[0x1E0CA8D80];
      break;
    case 1:
      v16 = (uint64_t *)MEMORY[0x1E0CA8D88];
      break;
    default:
      v11 = 0;
      goto LABEL_30;
  }
  v11 = *v16;
LABEL_30:
  StringForIntegerCodePoint = CVTransferFunctionGetStringForIntegerCodePoint(transferFunctionCodePoint);
LABEL_10:
  if (a6)
  {
    if (JxlDecoderGetICCProfileSize())
    {
      v14 = 0;
    }
    else
    {
      Mutable = CFDataCreateMutable(a1, 0);
      v14 = Mutable;
      if (!Mutable)
      {
        v15 = 4294950305;
LABEL_35:
        if (v14)
          CFRelease(v14);
        return v15;
      }
      CFDataSetLength(Mutable, 0);
      CFDataGetMutableBytePtr(v14);
      if (!JxlDecoderGetColorAsICCProfile())
      {
        if (!a4)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    v15 = 4294950194;
    goto LABEL_35;
  }
  v14 = 0;
  if (a4)
LABEL_15:
    *(_QWORD *)a4 = v11;
LABEL_16:
  if (a5)
    *a5 = StringForIntegerCodePoint;
  v15 = 0;
  if (!a6)
    goto LABEL_35;
  *a6 = v14;
  return v15;
}

_QWORD *_jxlOutputCallback(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4, char *__src)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!result)
    return (_QWORD *)FigSignalErrorAt();
  v5 = a3 - result[3];
  if (v5 >= 0 && (unint64_t)v5 < result[5])
  {
    v6 = a2 - result[2];
    if (v6 < 0)
    {
      a4 = (v6 + a4) & ~((uint64_t)(v6 + a4) >> 63);
      __src -= v6 * result[6];
      v6 = 0;
      if (!a4)
        return result;
    }
    else if (!a4)
    {
      return result;
    }
    v7 = result[4];
    if (a4 + v6 <= v7 || (a4 = v7 - v6, (uint64_t)(v7 - v6) >= 1))
    {
      if (!*((_DWORD *)result + 16))
      {
        v8 = result[6];
        v9 = result[7] * v5;
        v10 = v8 * v6;
        if (v8 == 8)
          return memcpy((void *)(result[10] + v9 + v10), __src, 8 * a4);
        v11 = 0;
        v12 = v10 + v9;
        do
        {
          *(_DWORD *)(result[10] + v12 + 4 * v11) = *(_DWORD *)&__src[4 * v11] & 0xFF00FF00 | BYTE2(*(_DWORD *)&__src[4 * v11]) | (*(_DWORD *)&__src[4 * v11] << 16);
          ++v11;
        }
        while (v11 < a4);
        return result;
      }
      return (_QWORD *)FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t _createMetadataDescriptionArray_0(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFArrayRef theArray, __CFArray **a5)
{
  CFIndex Count;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  __CFDictionary *v13;
  unint64_t v14;
  unint64_t i;
  __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  __CFArray **v20;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  v20 = a5;
  v13 = 0;
  v14 = 0;
  if (!theArray)
    goto LABEL_7;
LABEL_6:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v14 >= i)
    {
      v18 = 0;
      *v20 = v12;
      if (!v13)
        return v18;
      goto LABEL_17;
    }
    if (v13)
      CFRelease(v13);
    v16 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = v16;
    if (!v16)
      break;
    v17 = CMPhotoCFDictionarySetInt64(v16, CFSTR("DataOffset"), a2);
    if ((_DWORD)v17 || (v17 = CMPhotoCFDictionarySetSize(v13, CFSTR("DataLength"), a3), (_DWORD)v17))
    {
      v18 = v17;
      goto LABEL_21;
    }
    CFArrayAppendValue(v12, v13);
    ++v14;
    if (theArray)
      goto LABEL_6;
LABEL_7:
    ;
  }
  v18 = 4294950305;
LABEL_21:
  CFRelease(v12);
  if (v13)
LABEL_17:
    CFRelease(v13);
  return v18;
}

uint64_t SlimDecompressionPluginClass_create(uint64_t a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t TargetingPThreadRootQueueWithPriority;
  uint64_t v12;
  uint64_t Session;
  _BOOL4 IsSlimX;
  _BOOL4 IsSlimYzip;
  _BOOL4 IsSlimHrlc;
  _BOOL4 IsSlimIntc;
  _BOOL4 IsSlimUncompressed;
  _OWORD v20[6];
  int v21;

  pthread_once(&_checkFigNoteTraceOnce_onceToken_0, (void (*)(void))_registerFigNoteTrace_0);
  v21 = 0;
  if (*(_DWORD *)(a1 + 72) != 1936484717)
    return FigSignalErrorAt();
  v8 = 4294950306;
  if (a2 && a4)
  {
    v9 = malloc_type_calloc(1uLL, 0x40uLL, 0x10600402F076322uLL);
    if (v9)
    {
      v10 = v9;
      if (a3)
      {
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("SyncDecode"), v9 + 8);
        CMPhotoCFDictionaryGetInt32IfPresent(a3, CFSTR("ThreadPriority"), &v21);
      }
      if (v10[8]
        || (TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
            (*((_QWORD *)v10 + 2) = TargetingPThreadRootQueueWithPriority) != 0))
      {
        v12 = 24;
        while (1)
        {
          Session = SlimVideoDecoder_CreateSession(*(_QWORD *)a1, (uint64_t *)&v10[v12]);
          if ((_DWORD)Session)
            break;
          Session = SlimVideoDecoder_StartSessionInternal(*(_QWORD *)&v10[v12], a2);
          if ((_DWORD)Session)
            break;
          v12 += 8;
          if (v12 == 56)
          {
            *((_DWORD *)v10 + 14) = 0;
            IsSlimX = SlimVideoDecoder_SessionIsSlimX(*((_QWORD *)v10 + 3));
            IsSlimYzip = SlimVideoDecoder_SessionIsSlimYzip(*((_QWORD *)v10 + 3));
            IsSlimHrlc = SlimVideoDecoder_SessionIsSlimHrlc(*((_QWORD *)v10 + 3));
            IsSlimIntc = SlimVideoDecoder_SessionIsSlimIntc(*((_QWORD *)v10 + 3));
            IsSlimUncompressed = SlimVideoDecoder_SessionIsSlimUncompressed(*((_QWORD *)v10 + 3));
            if (IsSlimX || IsSlimYzip || IsSlimHrlc || IsSlimIntc || IsSlimUncompressed)
            {
              v8 = 0;
              *(_QWORD *)(a1 + 64) = v10;
              return v8;
            }
            Session = FigSignalErrorAt();
            break;
          }
        }
        v8 = Session;
      }
      else
      {
        v8 = 4294950305;
      }
      v20[5] = 0u;
      memset(v20, 0, 64);
      v20[4] = (unint64_t)v10;
      SlimDecompressionPluginClass_dispose((uint64_t)v20);
    }
    else
    {
      return 4294950305;
    }
  }
  return v8;
}

void SlimDecompressionPluginClass_dispose(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t i;
  const void *v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
    {
      v3 = *(NSObject **)(v2 + 16);
      if (v3)
      {
        dispatch_barrier_sync(v3, &__block_literal_global_4);
        v4 = *(NSObject **)(v2 + 16);
        if (v4)
          dispatch_release(v4);
      }
      for (i = 24; i != 56; i += 8)
      {
        v6 = *(const void **)(v2 + i);
        if (v6)
          CFRelease(v6);
      }
      if (*(_QWORD *)v2)
        CFRelease(*(CFTypeRef *)v2);
      free((void *)v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
}

uint64_t SlimDecompressionPluginClass_supportsNativeTiling()
{
  return 1;
}

uint64_t SlimDecompressionPluginClass_copyPixelBufferAttributes(uint64_t a1, _DWORD *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef cf;

  v5 = *(_QWORD *)(a1 + 64);
  cf = 0;
  v6 = SlimVideoDecoder_CopyPixelBufferAttributesInternal(*(_QWORD *)(v5 + 24), &cf);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else if (FigCFDictionaryGetInt32IfPresent())
  {
    if (a2)
      *a2 = 0;
    v7 = 0;
    if (a3)
    {
      *a3 = cf;
      return v7;
    }
  }
  else
  {
    v7 = 4294950301;
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t SlimDecompressionPluginClass_decode(uint64_t a1, CFDictionaryRef theDict, opaqueCMSampleBuffer *a3, uint64_t a4)
{
  uint64_t v8;
  __CVBuffer *Value;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  CFTypeRef v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;

  v8 = *(_QWORD *)(a1 + 64);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (theDict)
  {
    Value = (__CVBuffer *)CFDictionaryGetValue(theDict, CFSTR("CanvasPixelBuffer"));
    v10 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("CanvasOrigin"));
    if (v10)
      theDict = CFDictionaryCreateCopy(*(CFAllocatorRef *)a1, v10);
    else
      theDict = 0;
  }
  else
  {
    Value = 0;
  }
  if (*(_BYTE *)(v8 + 8))
  {
    v11 = SlimVideoDecoder_DecodeFrameInternal(*(_QWORD *)(v8 + 8 * *(int *)(v8 + 56) + 24), a3, Value, theDict, (void (*)(uint64_t, uint64_t, uint64_t, CVPixelBufferRef))SlimDecompressionPluginClass_callback, a1, a4);
    if ((_DWORD)v11)
    {
      v12 = v11;
      if (!theDict)
        return v12;
      goto LABEL_24;
    }
  }
  else
  {
    v13 = (uint64_t *)malloc_type_calloc(1uLL, 0x30uLL, 0xE004023F974B1uLL);
    if (!v13)
    {
      v12 = 4294950305;
      if (!theDict)
        return v12;
      goto LABEL_24;
    }
    v14 = v13;
    v15 = *(_QWORD *)(v8 + 8 * *(int *)(v8 + 56) + 24);
    if (a3)
      a3 = (opaqueCMSampleBuffer *)CFRetain(a3);
    if (Value)
      Value = (__CVBuffer *)CFRetain(Value);
    if (theDict)
      v16 = CFRetain(theDict);
    else
      v16 = 0;
    *v14 = a1;
    v14[1] = v15;
    v14[2] = (uint64_t)a3;
    v14[3] = a4;
    v14[4] = (uint64_t)Value;
    v14[5] = (uint64_t)v16;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 16), v14, (dispatch_function_t)_dispatch_decodeAsync);
  }
  v12 = 0;
  v17 = *(_DWORD *)(v8 + 56) + 1;
  v18 = -v17 < 0;
  v19 = -v17 & 3;
  v20 = v17 & 3;
  if (!v18)
    v20 = -v19;
  *(_DWORD *)(v8 + 56) = v20;
  if (theDict)
LABEL_24:
    CFRelease(theDict);
  return v12;
}

uint64_t SlimDecompressionPluginClass_getDecoderRestrictions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  BOOL v6;
  CFTypeRef cf;

  cf = 0;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)a2 = 0x1000000010;
  *(_DWORD *)(a2 + 56) = 0x7FFFFFFF;
  *(_QWORD *)(a2 + 48) = 0x7FFFFFFF00000002;
  *(_OWORD *)(a2 + 16) = xmmword_1A828FDF0;
  *(_OWORD *)(a2 + 32) = xmmword_1A828FE00;
  v4 = SlimVideoDecoder_CopyDecoderRestrictionsInternal(*(_QWORD *)(v3 + 24), (CFMutableDictionaryRef *)&cf);
  v5 = cf;
  if ((_DWORD)v4)
    v6 = 1;
  else
    v6 = cf == 0;
  if (!v6)
  {
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CEDC10], (void *)a2);
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CEDC08], (void *)(a2 + 4));
    v5 = cf;
  }
  if (v5)
    CFRelease(v5);
  return v4;
}

uint64_t SlimDecompressionPluginClass_getDecoderRestrictionsOverlay(uint64_t a1, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  uint64_t DecoderRestrictions;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  DecoderRestrictions = SlimDecompressionPluginClass_getDecoderRestrictions(a1, a3);
  if ((_DWORD)DecoderRestrictions)
    return DecoderRestrictions;
  v6 = SlimVideoDecoder_CopyDecoderRestrictionsFromFormatDescript(a2, (CFMutableDictionaryRef *)&cf);
  v7 = cf;
  if (!(_DWORD)v6 && cf)
  {
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CEDC10], (void *)(a3 + 8));
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CEDC08], (void *)(a3 + 12));
    v7 = cf;
  }
  if (v7)
    CFRelease(v7);
  return v6;
}

uint64_t SlimDecompressionPluginClass_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 48))(a1, a3, a4, *(_QWORD *)(a1 + 56), a2);
}

void _dispatch_decodeAsync(void *a1)
{
  uint64_t v2;
  _DWORD *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)a1;
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  SlimVideoDecoder_DecodeFrameInternal(*((_QWORD *)a1 + 1), *((opaqueCMSampleBuffer **)a1 + 2), *((__CVBuffer **)a1 + 4), *((const __CFDictionary **)a1 + 5), (void (*)(uint64_t, uint64_t, uint64_t, CVPixelBufferRef))SlimDecompressionPluginClass_callback, v2, *((_QWORD *)a1 + 3));
  if (*v3 == 1)
    kdebug_trace();
  v4 = (const void *)*((_QWORD *)a1 + 2);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)a1 + 4);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)a1 + 5);
  if (v6)
    CFRelease(v6);
  free(a1);
}

unint64_t *vectorWritePacked(unint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(unsigned __int16 *)(a2 + v3);
    v5 += v6 << v4;
    v4 += a3;
    if (v4 >= 64)
    {
      *result++ = v5;
      v5 = v6 >> (a3 - (v4 - 64));
      v4 -= 64;
    }
    v3 += 2;
  }
  while (v3 != 16);
  if (v4 >= 1)
  {
    v7 = v4 + 8;
    do
    {
      *(_BYTE *)result = v5;
      result = (unint64_t *)((char *)result + 1);
      v5 >>= 8;
      v7 -= 8;
    }
    while (v7 > 8);
  }
  return result;
}

uint64_t YZipEncodeFindFormat(uint64_t a1, int *a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int16 v10;

  if (!a1)
  {
    v5 = 17;
    result = 4294951896;
    goto LABEL_66;
  }
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 > 1936077361)
  {
    if (v3 <= 1953903151)
    {
      if (v3 > 1937126451)
      {
        if (v3 <= 1952854577)
        {
          if (v3 != 1937126452)
          {
            v6 = 1952854576;
            goto LABEL_53;
          }
          goto LABEL_60;
        }
        if (v3 == 1952854578)
          goto LABEL_61;
        v7 = 1952855092;
        goto LABEL_59;
      }
      if (v3 <= 1937125935)
      {
        if (v3 == 1936077362)
          goto LABEL_61;
        v7 = 1936077876;
        goto LABEL_59;
      }
      if (v3 == 1937125936)
        goto LABEL_54;
      v8 = 1937125938;
    }
    else
    {
      if (v3 > 2016686641)
      {
        if (v3 > 2019963439)
        {
          if (v3 != 2019963440)
          {
            if (v3 != 2019963442)
            {
              v7 = 2019963956;
              goto LABEL_59;
            }
LABEL_61:
            result = 0;
            v5 = 11;
            goto LABEL_66;
          }
LABEL_54:
          result = 0;
          v5 = 10;
          goto LABEL_66;
        }
        if (v3 == 2016686642)
          goto LABEL_61;
        v7 = 2016687156;
LABEL_59:
        if (v3 != v7)
          goto LABEL_64;
LABEL_60:
        result = 0;
        v5 = 12;
        goto LABEL_66;
      }
      if (v3 > 1953903667)
      {
        if (v3 != 1953903668)
        {
          v6 = 2016686640;
          goto LABEL_53;
        }
        goto LABEL_60;
      }
      if (v3 == 1953903152)
        goto LABEL_54;
      v8 = 1953903154;
    }
    if (v3 != v8)
      goto LABEL_64;
    goto LABEL_61;
  }
  result = 0;
  if (v3 > 1278226535)
  {
    if (v3 > 1651925815)
    {
      if (v3 > 1751410031)
      {
        if (v3 != 1751410032)
        {
          v5 = 0;
          if (v3 == 1751411059)
            goto LABEL_66;
          v6 = 1936077360;
LABEL_53:
          if (v3 == v6)
            goto LABEL_54;
          goto LABEL_64;
        }
LABEL_27:
        v5 = 0;
        goto LABEL_66;
      }
      if (v3 == 1651925816 || v3 == 1652056888)
      {
        v9 = *(int *)(a1 + 8360);
        if (v9 < 9)
        {
          result = dword_1A828FE50[v9];
          v5 = dword_1A828FE74[v9];
          goto LABEL_66;
        }
      }
LABEL_64:
      v5 = 17;
      result = 4294951891;
      goto LABEL_66;
    }
    if ((v3 - 1278226736) <= 6 && ((1 << (v3 - 48)) & 0x45) != 0)
      goto LABEL_27;
    v10 = 12392;
LABEL_63:
    v5 = 0;
    if (v3 == (v10 | 0x4C300000))
      goto LABEL_66;
    goto LABEL_64;
  }
  if (v3 <= 875836517)
  {
    if (v3 > 875704933)
    {
      if (v3 == 875704934 || v3 == 875704950)
      {
        result = 0;
        v5 = 8;
        goto LABEL_66;
      }
    }
    else if (v3 == 875704422 || v3 == 875704438)
    {
      result = 0;
      v5 = 7;
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  if (v3 <= 1111970368)
  {
    if (v3 == 875836518 || v3 == 875836534)
    {
      result = 0;
      v5 = 9;
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  if (v3 != 1111970369)
  {
    v10 = 12344;
    goto LABEL_63;
  }
  result = 0;
  v5 = 14;
LABEL_66:
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t YZipEncodeFindDataLength(uint64_t a1, uint64_t *a2)
{
  uint64_t max_payload_size;
  uint64_t Format;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  max_payload_size = a1;
  v9 = 17;
  if (a1)
  {
    Format = YZipEncodeFindFormat(a1, &v9);
    if ((_DWORD)Format)
    {
      v5 = Format;
      max_payload_size = 0;
    }
    else
    {
      CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(max_payload_size + 32));
      if (yzip_codec_create())
      {
        v6 = yzip_image_create();
        if (v6)
        {
          v7 = v6;
          max_payload_size = yzip_image_get_max_payload_size();
          if (max_payload_size)
            v5 = 0;
          else
            v5 = 4294951893;
          MEMORY[0x1A85D1410](v7);
        }
        else
        {
          max_payload_size = 0;
          v5 = 4294951895;
        }
        yzip_codec_destroy();
      }
      else
      {
        max_payload_size = 0;
        v5 = 4294951895;
      }
    }
  }
  else
  {
    v5 = 4294951896;
  }
  if (a2)
    *a2 = max_payload_size;
  return v5;
}

uint64_t YZipEncodeFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t Format;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v10 = 17;
  if (!a1
    || (unint64_t)(*(_QWORD *)(a1 + 40) - 3) < 0xFFFFFFFFFFFFFFFELL
    || (*(_DWORD *)(a1 + 48) - 3) < 0xFFFFFFFE)
  {
    return 4294951896;
  }
  Format = YZipEncodeFindFormat(a1, &v10);
  if (!(_DWORD)Format)
  {
    CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(a1 + 32));
    if (yzip_codec_create())
    {
      v6 = yzip_image_create();
      if (v6)
      {
        v7 = v6;
        if (yzip_image_get_max_payload_size())
        {
          if (*(_QWORD *)(a1 + 40))
          {
            v8 = 0;
            do
            {
              yzip_image_set_plane_data();
              ++v8;
            }
            while (*(_QWORD *)(a1 + 40) > v8);
          }
          v9 = yzip_image_encode();
          *a2 = v9;
          if (v9)
            Format = 0;
          else
            Format = 4294951894;
        }
        else
        {
          Format = 4294951893;
        }
        MEMORY[0x1A85D1410](v7);
      }
      else
      {
        Format = 4294951895;
      }
      yzip_codec_destroy();
    }
    else
    {
      return 4294951895;
    }
  }
  return Format;
}

uint64_t UncompressedCopyFrame(unsigned int *a1, CVPixelBufferRef pixelBuffer, OpaqueCMBlockBuffer *a3, size_t *a4)
{
  uint64_t PixelFormatType;
  uint64_t BytesPerPixelForPixelFormat;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int IsPackedRAW;
  uint64_t v14;
  size_t v15;
  uint64_t result;
  size_t v17;
  const __CFAllocator *v18;
  size_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  size_t *v29;
  uint64_t v30;
  size_t v31;
  __int16 v32;

  if (!pixelBuffer)
    return 4294951896;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  if (CVPixelBufferGetPlaneCount(pixelBuffer) >= 2 && CVPixelBufferGetPlaneCount(pixelBuffer) != 1)
  {
    if (!CVPixelBufferGetPlaneCount(pixelBuffer))
      goto LABEL_37;
    v30 = BytesPerPixelForPixelFormat;
    v20 = 0;
    v19 = 0;
    v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v29 = a4;
    while (1)
    {
      v31 = v19;
      v22 = *(char **)&a1[2 * v20 + 16];
      v23 = a1[v20 + 2];
      v32 = 0;
      if (CMPhotoPixelFormatIsSubsampled(PixelFormatType, (_BYTE *)&v32 + 1, &v32, 0, 0))
        return 4294951894;
      v24 = a1[1];
      if (v20)
      {
        if ((_BYTE)v32)
          break;
      }
      if (v20)
        goto LABEL_23;
      v26 = *a1;
LABEL_27:
      v27 = v26;
      if (CMPhotoPixelFormatIsPackedYUV(PixelFormatType))
        v28 = 4 * (((unint64_t)(v27 + 2) * (unsigned __int128)0x5555555555555556uLL) >> 64);
      else
        v28 = v30 * v27;
      if (v24)
      {
        v31 += v24 * v28;
        while (!CMBlockBufferAppendMemoryBlock(a3, v22, v28, v21, 0, 0, v28, 0))
        {
          v22 += v23;
          if (!--v24)
            goto LABEL_34;
        }
        return 4294951894;
      }
LABEL_34:
      a4 = v29;
      v19 = v31;
      if (CVPixelBufferGetPlaneCount(pixelBuffer) <= ++v20)
        goto LABEL_38;
    }
    v24 = (v24 + 1) >> 1;
LABEL_23:
    v25 = *a1;
    if (HIBYTE(v32))
      v26 = v25 + (v25 | 0xFFFFFFFE) + 2;
    else
      v26 = 2 * v25;
    goto LABEL_27;
  }
  v10 = (char *)*((_QWORD *)a1 + 8);
  v12 = a1[1];
  v11 = a1[2];
  IsPackedRAW = CMPhotoPixelFormatIsPackedRAW(PixelFormatType);
  v14 = *a1;
  if (IsPackedRAW)
  {
    v15 = CMPhotoAlignValue(5 * ((v14 + 3) >> 2), 0x140uLL);
    if (!v12)
      goto LABEL_37;
  }
  else
  {
    v17 = BytesPerPixelForPixelFormat * v14;
    if ((_DWORD)PixelFormatType == 1647719528)
    {
      v12 >>= 1;
      v15 = 2 * v17;
    }
    else
    {
      v15 = v17;
    }
    if (!v12)
    {
LABEL_37:
      v19 = 0;
LABEL_38:
      result = 0;
      if (a4)
        *a4 = v19;
      return result;
    }
  }
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v19 = v15 * v12;
  while (!CMBlockBufferAppendMemoryBlock(a3, v10, v15, v18, 0, 0, v15, 0))
  {
    v10 += v11;
    if (!--v12)
      goto LABEL_38;
  }
  return 4294951894;
}

