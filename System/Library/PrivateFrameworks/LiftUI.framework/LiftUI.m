BOOL sub_1B0F52264(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1B0F5227C()
{
  sub_1B103620C();
  sub_1B1036218();
  return sub_1B103623C();
}

uint64_t sub_1B0F522C0()
{
  return sub_1B1036218();
}

uint64_t sub_1B0F522E8()
{
  sub_1B103620C();
  sub_1B1036218();
  return sub_1B103623C();
}

uint64_t sub_1B0F52328()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B10346F4();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1B0F52398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC6LiftUI26RemoteContentRefreshHelper__status;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE388);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1B0F523EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B10346A0();
  *a1 = result;
  return result;
}

uint64_t RemoteContentView.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteContentView.store.getter()
{
  return sub_1B0F5246C((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD88A0]);
}

uint64_t type metadata accessor for RemoteContentView(uint64_t a1)
{
  return sub_1B0F52C7C(a1, (uint64_t *)&unk_1EEEDE1D0);
}

uint64_t RemoteContentView.$store.getter()
{
  return sub_1B0F5246C(MEMORY[0x1E0CD88A8]);
}

uint64_t sub_1B0F5246C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for RemoteContentView(0) + 24));
  v3 = *v2;
  v4 = v2[1];
  v5 = *((unsigned __int8 *)v2 + 16);
  v6 = type metadata accessor for RemoteStateStore(0);
  v7 = sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  return a1(v3, v4, v5, v6, v7);
}

uint64_t RemoteContentView.localStore.getter()
{
  return sub_1B0F52548((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD88A0]);
}

uint64_t sub_1B0F524FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1B5E15188](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RemoteContentView.$localStore.getter()
{
  return sub_1B0F52548(MEMORY[0x1E0CD88A8]);
}

uint64_t sub_1B0F52548(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for RemoteContentView(0) + 28));
  v3 = *v2;
  v4 = v2[1];
  v5 = *((unsigned __int8 *)v2 + 16);
  v6 = type metadata accessor for LocalStateStore(0);
  v7 = sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  return a1(v3, v4, v5, v6, v7);
}

uint64_t RemoteContentView.modifiers.getter()
{
  type metadata accessor for RemoteContentView(0);
  return swift_bridgeObjectRetain();
}

uint64_t RemoteContentView.modifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for RemoteContentView(0) + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*RemoteContentView.modifiers.modify())()
{
  type metadata accessor for RemoteContentView(0);
  return nullsub_1;
}

uint64_t RemoteContentView.init(id:url:stateStore:localStateStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = a4;
  v20 = a5;
  v10 = type metadata accessor for RemoteContent(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
  v14 = *(int *)(v13 + 48);
  v15 = *(int *)(v13 + 64);
  v16 = sub_1B10345E0();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, a3, v16);
  v12[v14] = 8;
  *(_OWORD *)&v12[v15] = xmmword_1B10369A0;
  swift_storeEnumTagMultiPayload();
  sub_1B0F527B8(a1, a2, (uint64_t)v12, v19, v20, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
}

uint64_t type metadata accessor for RemoteContent(uint64_t a1)
{
  return sub_1B0F52C7C(a1, (uint64_t *)&unk_1EEEDE1A0);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E15170]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B0F527B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t result;
  char *v22;

  v11 = (int *)type metadata accessor for RemoteContentView(0);
  v12 = (_QWORD *)((char *)a6 + v11[8]);
  type metadata accessor for RemoteContentRefreshHelper(0);
  swift_allocObject();
  sub_1B10346C4();
  sub_1B0F524FC(&qword_1EEEDE140, type metadata accessor for RemoteContentRefreshHelper, (uint64_t)&unk_1B1036E34);
  *v12 = sub_1B10348E0();
  v12[1] = v13;
  *(_QWORD *)((char *)a6 + v11[9]) = MEMORY[0x1E0DEE9D8];
  v14 = (char *)a6 + v11[11];
  *(_QWORD *)v14 = swift_getKeyPath();
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = (char *)a6 + v11[12];
  *(_QWORD *)v15 = swift_getKeyPath();
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v16 = (char *)a6 + v11[13];
  *(_QWORD *)v16 = swift_getKeyPath();
  v16[8] = 0;
  *a6 = a1;
  a6[1] = a2;
  v17 = (uint64_t)a6 + v11[5];
  sub_1B0F5A42C(a3, v17, type metadata accessor for RemoteContent);
  v18 = type metadata accessor for RemoteContent(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
  v19 = (char *)a6 + v11[10];
  *(_QWORD *)v19 = sub_1B0F571F0;
  *((_QWORD *)v19 + 1) = a4;
  v19[16] = 0;
  v20 = (char *)a6 + v11[6];
  *(_QWORD *)v20 = sub_1B0F560B0;
  *((_QWORD *)v20 + 1) = a4;
  v20[16] = 0;
  swift_retain();
  result = sub_1B0F57B2C(a3, type metadata accessor for RemoteContent);
  v22 = (char *)a6 + v11[7];
  *(_QWORD *)v22 = sub_1B0F560B0;
  *((_QWORD *)v22 + 1) = a5;
  v22[16] = 0;
  return result;
}

uint64_t RemoteContentView.init(id:json:stateStore:localStateStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_1B0F529B0(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RemoteContentView.init(id:data:stateStore:localStateStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_1B0F529B0(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1B0F529B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v14 = type metadata accessor for RemoteContent(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v16 = a3;
  v16[1] = a4;
  swift_storeEnumTagMultiPayload();
  return sub_1B0F527B8(a1, a2, (uint64_t)v16, a5, a6, a7);
}

uint64_t RemoteContentView.init(id:remoteLoader:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BYTE v23[16];

  v8 = (int *)type metadata accessor for RemoteContentView(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (_QWORD *)((char *)v11 + *(int *)(v9 + 32));
  type metadata accessor for RemoteContentRefreshHelper(0);
  swift_allocObject();
  v23[15] = 0;
  sub_1B10346C4();
  sub_1B0F524FC(&qword_1EEEDE140, type metadata accessor for RemoteContentRefreshHelper, (uint64_t)&unk_1B1036E34);
  *v12 = sub_1B10348E0();
  v12[1] = v13;
  *(_QWORD *)((char *)v11 + v8[9]) = MEMORY[0x1E0DEE9D8];
  v14 = (char *)v11 + v8[11];
  *(_QWORD *)v14 = swift_getKeyPath();
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = (char *)v11 + v8[12];
  *(_QWORD *)v15 = swift_getKeyPath();
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v16 = (char *)v11 + v8[13];
  *(_QWORD *)v16 = swift_getKeyPath();
  v16[8] = 0;
  *v11 = a1;
  v11[1] = a2;
  v17 = (char *)v11 + v8[10];
  *(_QWORD *)v17 = sub_1B0F560B0;
  *((_QWORD *)v17 + 1) = a3;
  v17[16] = 0;
  v18 = (char *)v11 + v8[6];
  *(_QWORD *)v18 = sub_1B0F560B8;
  *((_QWORD *)v18 + 1) = a3;
  v18[16] = 0;
  v19 = (char *)v11 + v8[7];
  *(_QWORD *)v19 = sub_1B0F52D0C;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  v20 = (char *)v11 + v8[5];
  v21 = type metadata accessor for RemoteContent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  sub_1B0F5A3E8((uint64_t)v11, a4, type metadata accessor for RemoteContentView);
  return swift_retain();
}

uint64_t type metadata accessor for RemoteContentRefreshHelper(uint64_t a1)
{
  return sub_1B0F52C7C(a1, (uint64_t *)&unk_1EEEDE1B0);
}

uint64_t sub_1B0F52C7C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B0F52CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_remoteState);
  if (v1)
  {
    v2 = v1;
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    swift_allocObject();
    v2 = RemoteStateStore.init()();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1B0F52D10(char a1)
{
  return qword_1B1036F30[a1];
}

uint64_t sub_1B0F52D30(char *a1, char *a2)
{
  return sub_1B100D72C(*a1, *a2);
}

uint64_t sub_1B0F52D3C()
{
  return sub_1B100F4AC();
}

uint64_t sub_1B0F52D44()
{
  return sub_1B1012778();
}

uint64_t sub_1B0F52D4C()
{
  return sub_1B1014A20();
}

uint64_t sub_1B0F52D54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F56F7C();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F52D80@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F52D10(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F52DA8()
{
  char *v0;

  return sub_1B0F52D10(*v0);
}

uint64_t sub_1B0F52DB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F56F7C();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F52DD4()
{
  return 0;
}

void sub_1B0F52DE0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1B0F52DEC()
{
  sub_1B0F560E4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F52E14()
{
  sub_1B0F560E4();
  return sub_1B10362C0();
}

void RemoteContentView.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  int *v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t);
  uint64_t v68;
  _BYTE v69[12];
  int v70;
  int *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t *v89;
  __int128 v90;
  __int128 v91;
  _BYTE *v92;

  v78 = a2;
  v3 = sub_1B1036008();
  *(_QWORD *)&v81 = *(_QWORD *)(v3 - 8);
  *((_QWORD *)&v81 + 1) = v3;
  MEMORY[0x1E0C80A78](v3);
  v82 = &v69[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1B103461C();
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  MEMORY[0x1E0C80A78](v5);
  v84 = &v69[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE148);
  v83 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v69[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (int *)type metadata accessor for RemoteContentView(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)&v69[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (uint64_t *)((char *)v13 + *(int *)(v11 + 32));
  type metadata accessor for RemoteContentRefreshHelper(0);
  swift_allocObject();
  LOBYTE(v90) = 0;
  sub_1B10346C4();
  sub_1B0F524FC(&qword_1EEEDE140, type metadata accessor for RemoteContentRefreshHelper, (uint64_t)&unk_1B1036E34);
  *v14 = sub_1B10348E0();
  v14[1] = v15;
  v87 = v14;
  v85 = v10[9];
  *(uint64_t *)((char *)v13 + v85) = MEMORY[0x1E0DEE9D8];
  v16 = (char *)v13 + v10[11];
  *(_QWORD *)v16 = swift_getKeyPath();
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 0;
  v17 = (uint64_t)v13 + v10[12];
  *(_QWORD *)v17 = swift_getKeyPath();
  *(_QWORD *)(v17 + 8) = 0;
  v86 = v17;
  *(_BYTE *)(v17 + 16) = 0;
  v18 = v10[13];
  v89 = v13;
  v19 = (char *)v13 + v18;
  *(_QWORD *)v19 = swift_getKeyPath();
  v19[8] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F560E4();
  v20 = (uint64_t)v88;
  sub_1B1036278();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v21 = v86;
  }
  else
  {
    v22 = v84;
    v77 = (unint64_t)v19;
    v88 = a1;
    LOBYTE(v90) = 0;
    v23 = sub_1B103608C();
    v25 = v24;
    v75 = v7;
    v76 = v9;
    v26 = v88;
    if (v24)
    {
      v27 = v23;
    }
    else
    {
      sub_1B1034610();
      v27 = sub_1B1034604();
      v25 = v28;
      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v22, v80);
    }
    v29 = v82;
    v30 = v89;
    *v89 = v27;
    v30[1] = v25;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v31 = sub_1B103626C();
    if (qword_1EEEDE090 != -1)
      swift_once();
    v32 = *((_QWORD *)&v81 + 1);
    v33 = __swift_project_value_buffer(*((uint64_t *)&v81 + 1), (uint64_t)qword_1EEF0B9B0);
    v34 = v81;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v81 + 16))(v29, v33, v32);
    v35 = (uint64_t)v29;
    v36 = v76;
    if (*(_QWORD *)(v31 + 16) && (v37 = sub_1B0F56A48(v35), (v38 & 1) != 0))
    {
      sub_1B0F57208(*(_QWORD *)(v31 + 56) + 32 * v37, (uint64_t)&v90);
    }
    else
    {
      v90 = 0u;
      v91 = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v82, v32);
    if (*((_QWORD *)&v91 + 1))
    {
      type metadata accessor for RemoteStateStore(0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v84 = v92;
        LOBYTE(v92) = 1;
        sub_1B0F56A98();
        sub_1B10360BC();
        v82 = (_BYTE *)*((_QWORD *)&v90 + 1);
        v40 = v90;
        v41 = v91;
        v42 = BYTE8(v91);
        LOBYTE(v92) = 2;
        sub_1B10360A4();
        v80 = v40;
        v74 = v41;
        LODWORD(v79) = v42;
        v43 = v91;
        v81 = v90;
        LODWORD(v40) = BYTE8(v91);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE170);
        LOBYTE(v92) = 3;
        sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE178, &qword_1EEEDE170, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
        sub_1B10360A4();
        v44 = v90;
        v87 = (uint64_t *)*((_QWORD *)&v90 + 1);
        v45 = v91;
        v85 = v90;
        v86 = v91;
        v46 = BYTE8(v91);
        v70 = BYTE8(v91);
        v71 = v10;
        v47 = v10[5];
        v48 = v84;
        v49 = v40;
        v73 = v40;
        v50 = (char *)v89 + v47;
        v51 = v80;
        v52 = v82;
        *(_QWORD *)v50 = v80;
        *((_QWORD *)v50 + 1) = v52;
        v72 = v43;
        v53 = v74;
        *((_QWORD *)v50 + 2) = v74;
        LOBYTE(v41) = v79;
        v50[24] = v79;
        *((_OWORD *)v50 + 2) = v81;
        *((_QWORD *)v50 + 6) = v43;
        v50[56] = v49;
        *((_OWORD *)v50 + 4) = v44;
        *((_QWORD *)v50 + 10) = v45;
        v50[88] = v46;
        *((_QWORD *)v50 + 12) = v48;
        v54 = type metadata accessor for RemoteContent(0);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v50, 0, 1, v54);
        swift_retain_n();
        sub_1B0F56B9C(v51, (uint64_t)v52, v53, v41);
        sub_1B0F56C04(v81, *((uint64_t *)&v81 + 1), v72, v73);
        LOBYTE(v43) = v70;
        sub_1B0F56C18(v85, (uint64_t)v87, v86, v70);
        v55 = MEMORY[0x1E0DEE9D8];
        v56 = sub_1B0F557A8(MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
        v77 = sub_1B0F554D8(v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
        v57 = swift_allocObject();
        v58 = qword_1EEEE0760;
        swift_retain();
        *(_QWORD *)(v57 + v58) = sub_1B0F554D8(v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
        v59 = (uint64_t)v84;
        *(_QWORD *)(v57 + qword_1EEEE0768) = v84;
        swift_retain_n();
        swift_release();
        v60 = sub_1B0F55C84(v59);
        swift_retain();
        sub_1B0F56FC4(v56, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v61 = (unint64_t *)(v60 + qword_1EEEE0760);
        swift_beginAccess();
        *v61 = v77;
        swift_bridgeObjectRelease();
        sub_1B0F56ADC(v80, (uint64_t)v82, v53, v41);
        sub_1B0F56B88(v81, *((uint64_t *)&v81 + 1), v72, v73);
        sub_1B0F57190(v85, (uint64_t)v87, v86, v43);
        swift_release();
        v62 = v71;
        v63 = (uint64_t)v89;
        v64 = (char *)v89 + v71[10];
        *(_QWORD *)v64 = sub_1B0F571F0;
        *((_QWORD *)v64 + 1) = v60;
        v64[16] = 0;
        v65 = v62;
        v66 = v63 + v62[6];
        *(_QWORD *)v66 = sub_1B0F560B0;
        *(_QWORD *)(v66 + 8) = v60;
        *(_BYTE *)(v66 + 16) = 0;
        v67 = *(void (**)(_BYTE *, uint64_t))(v83 + 8);
        swift_retain();
        v67(v76, v75);
        v68 = v63 + v65[7];
        *(_QWORD *)v68 = sub_1B0F52D0C;
        *(_QWORD *)(v68 + 8) = 0;
        *(_BYTE *)(v68 + 16) = 0;
        sub_1B0F5A42C(v63, v78, type metadata accessor for RemoteContentView);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
        sub_1B0F57B2C(v63, type metadata accessor for RemoteContentView);
        return;
      }
      v36 = v76;
    }
    else
    {
      sub_1B0F5A3AC((uint64_t)&v90, &qword_1EEEDE158);
    }
    v39 = v83;
    type metadata accessor for RemoteLoaderError(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE160, type metadata accessor for RemoteLoaderError, (uint64_t)&unk_1B10431CC);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v36, v75);
    v21 = v86;
    v19 = (_BYTE *)v77;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F56148(*(_QWORD *)v16, *((_QWORD *)v16 + 1), v16[16]);
  sub_1B0F56148(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
  sub_1B0F56154(*(id *)v19, v19[8]);
}

uint64_t sub_1B0F537D8(uint64_t a1)
{
  id v2;

  v2 = objc_allocWithZone((Class)type metadata accessor for ContentRegistry());
  swift_retain();
  return _s6LiftUI12RemoteLoaderC11remoteState15contentRegistryAcA0cF5StoreC_AA07ContentH0CtcfC_0(a1, objc_msgSend(v2, sel_init));
}

uint64_t sub_1B0F53824()
{
  type metadata accessor for LocalStateStore(0);
  swift_allocObject();
  return LocalStateStore.init()();
}

double sub_1B0F53858@<D0>(_OWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int has_internal_content;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int16 v117;
  double result;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int16 v124;
  char v125;
  _OWORD *v126;
  _QWORD v127[2];
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  unsigned __int8 v144;
  _QWORD v145[6];
  __int128 v146;
  _OWORD v147[5];
  __int128 v148;
  _BYTE v149[72];
  __int16 v150;
  char v151;
  __int128 v152;
  char v153;

  v135 = a1;
  v2 = sub_1B1034C64();
  MEMORY[0x1E0C80A78](v2);
  v127[1] = (char *)v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RemoteContentView(0);
  v132 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v131 = (uint64_t)v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = v6;
  MEMORY[0x1E0C80A78](v5);
  v134 = (uint64_t)v127 - v7;
  v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E8);
  MEMORY[0x1E0C80A78](v130);
  v129 = (char *)v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RemoteContent(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  v128 = (uint64_t)v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v127 - v16;
  v136 = v4;
  v137 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1B10346F4();
  swift_release();
  swift_release();
  swift_release();
  if ((v148 & 1) != 0)
    goto LABEL_4;
  v18 = v136;
  sub_1B0F5A974((uint64_t)&v137[*(int *)(v136 + 20)], (uint64_t)v11, &qword_1EEEDE1C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1B0F5A3AC((uint64_t)v11, &qword_1EEEDE1C8);
LABEL_4:
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v19 = sub_1B103467C();
    __swift_project_value_buffer(v19, (uint64_t)qword_1EEF0BA00);
    v20 = v137;
    v21 = v131;
    sub_1B0F5A42C((uint64_t)v137, v131, type metadata accessor for RemoteContentView);
    v22 = sub_1B1034664();
    v23 = sub_1B1035E34();
    v24 = os_log_type_enabled(v22, v23);
    v25 = v136;
    if (v24)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v128 = swift_slowAlloc();
      *(_QWORD *)&v146 = v128;
      *(_DWORD *)v26 = 136315138;
      v127[0] = v26 + 4;
      type metadata accessor for RemoteLoader(0);
      sub_1B0F524FC(&qword_1EEEDE3F0, type metadata accessor for RemoteLoader, (uint64_t)&protocol conformance descriptor for RemoteLoader);
      sub_1B10347C0();
      swift_getKeyPath();
      swift_getKeyPath();
      sub_1B10346F4();
      swift_release();
      swift_release();
      v25 = v136;
      swift_release();
      v27 = sub_1B0FCE19C();
      v29 = v28;
      sub_1B0F5A378((uint64_t)&v148);
      *(_QWORD *)&v148 = sub_1B0F6B618(v27, v29, (uint64_t *)&v146);
      v20 = v137;
      sub_1B1035E7C();
      swift_bridgeObjectRelease();
      sub_1B0F57B2C(v21, type metadata accessor for RemoteContentView);
      _os_log_impl(&dword_1B0F50000, v22, v23, "Using loader status: %s", v26, 0xCu);
      v30 = v128;
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v30, -1, -1);
      MEMORY[0x1B5E15248](v26, -1, -1);
    }
    else
    {
      sub_1B0F57B2C(v21, type metadata accessor for RemoteContentView);
    }

    type metadata accessor for RemoteLoader(0);
    sub_1B0F524FC(&qword_1EEEDE3F0, type metadata accessor for RemoteLoader, (uint64_t)&protocol conformance descriptor for RemoteLoader);
    sub_1B10347C0();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1B10346F4();
    swift_release();
    swift_release();
    swift_release();
    if (v153)
    {
      if (v153 == 1)
      {
        v31 = (char *)v152;
        has_internal_content = os_variant_has_internal_content();
        v33 = &v20[*(int *)(v25 + 48)];
        v34 = *(_QWORD *)v33;
        v35 = *((_QWORD *)v33 + 1);
        v36 = v33[16];
        sub_1B0F5826C(*(_QWORD *)v33, v35, v36);
        v37 = sub_1B0F56350(v34, v35, v36);
        v39 = v38;
        sub_1B0F56148(v34, v35, v36);
        v137 = v31;
        if (has_internal_content)
        {
          v40 = v132;
          if (!v37
            || (ObjectType = swift_getObjectType(),
                v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 8))(v31, ObjectType, v39),
                swift_unknownObjectRelease(),
                !v42))
          {
            sub_1B1034C58();
            sub_1B1034C4C();
            *(_QWORD *)&v148 = v31;
            v43 = v31;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3F8);
            sub_1B1035BD0();
            sub_1B1034C40();
            swift_bridgeObjectRelease();
            sub_1B1034C4C();
            sub_1B1034C7C();
            *(_QWORD *)&v148 = sub_1B10352C4();
            *((_QWORD *)&v148 + 1) = v44;
            v149[0] = v45 & 1;
            *(_QWORD *)&v149[8] = v46;
            v42 = sub_1B1035840();
          }
          v47 = v134;
          sub_1B0F5A42C((uint64_t)v20, v134, type metadata accessor for RemoteContentView);
          v48 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
          v49 = (v133 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
          v50 = swift_allocObject();
          sub_1B0F5A3E8(v47, v50 + v48, type metadata accessor for RemoteContentView);
          *(_QWORD *)(v50 + v49) = v31;
          *(_QWORD *)&v146 = v42;
          *((_QWORD *)&v146 + 1) = sub_1B0F59DBC;
          *(_QWORD *)&v147[1] = 0;
          v147[0] = (unint64_t)v50;
          BYTE8(v147[1]) = 0;
        }
        else
        {
          v107 = v132;
          if (!v37
            || (v108 = swift_getObjectType(),
                v109 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 8))(v31, v108, v39),
                swift_unknownObjectRelease(),
                !v109))
          {
            v109 = sub_1B1035840();
          }
          v110 = v134;
          sub_1B0F5A42C((uint64_t)v20, v134, type metadata accessor for RemoteContentView);
          v111 = (*(unsigned __int8 *)(v107 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
          v112 = (v133 + v111 + 7) & 0xFFFFFFFFFFFFFFF8;
          v113 = swift_allocObject();
          sub_1B0F5A3E8(v110, v113 + v111, type metadata accessor for RemoteContentView);
          *(_QWORD *)(v113 + v112) = v31;
          *(_QWORD *)&v146 = v109;
          *((_QWORD *)&v146 + 1) = sub_1B0F59DBC;
          *(_QWORD *)&v147[1] = 0;
          v147[0] = (unint64_t)v113;
          BYTE8(v147[1]) = 1;
        }
        v114 = v31;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE200);
        sub_1B0F595DC();
        sub_1B1034EC8();
        v115 = v148;
        v116 = *(_OWORD *)v149;
        v146 = v148;
        v147[0] = *(_OWORD *)v149;
        *(_QWORD *)&v147[1] = *(_QWORD *)&v149[16];
        *((_QWORD *)&v147[1] + 1) = v149[24];
        memset(&v147[2], 0, 41);
        BYTE9(v147[4]) = 1;
        sub_1B0F59DC0(v148, *((uint64_t *)&v148 + 1), *(uint64_t *)v149, *(uint64_t *)&v149[8]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE220);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE2A0);
        sub_1B0F596D4();
        sub_1B0F598F0();
        sub_1B1034EC8();

        sub_1B0F59E18(v115, *((uint64_t *)&v115 + 1), v116, *((uint64_t *)&v116 + 1));
      }
      else
      {
        v94 = &v20[*(int *)(v25 + 48)];
        v95 = *(_QWORD *)v94;
        v96 = *((_QWORD *)v94 + 1);
        v97 = v94[16];
        sub_1B0F5826C(*(_QWORD *)v94, v96, v97);
        v98 = sub_1B0F56350(v95, v96, v97);
        v100 = v99;
        sub_1B0F56148(v95, v96, v97);
        if (!v98
          || (v101 = swift_getObjectType(),
              v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 16))(v101, v100),
              swift_unknownObjectRelease(),
              !v102))
        {
          sub_1B10347F0();
          sub_1B0F5A7E4(&qword_1EEEDE400, &qword_1EEEDE3E8, MEMORY[0x1E0CD8B78]);
          v102 = sub_1B1035840();
        }
        v103 = v132;
        v104 = v134;
        sub_1B0F5A42C((uint64_t)v20, v134, type metadata accessor for RemoteContentView);
        v105 = (*(unsigned __int8 *)(v103 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        v106 = swift_allocObject();
        sub_1B0F5A3E8(v104, v106 + v105, type metadata accessor for RemoteContentView);
        *(_QWORD *)&v148 = v102;
        *((_QWORD *)&v148 + 1) = sub_1B0F5A330;
        *(_QWORD *)v149 = v106;
        memset(&v149[8], 0, 64);
        LOBYTE(v150) = 0;
        swift_retain();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE200);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE230);
        sub_1B0F595DC();
        sub_1B0F596F8();
        sub_1B1034EC8();
        v146 = v138;
        v147[0] = v139;
        v147[1] = v140;
        v147[2] = v141;
        v147[3] = v142;
        *(_QWORD *)&v147[4] = v143;
        WORD4(v147[4]) = v144;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE220);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE2A0);
        sub_1B0F596D4();
        sub_1B0F598F0();
        sub_1B1034EC8();
        swift_release();
        swift_release();
      }
      v93 = *((_QWORD *)&v148 + 1);
      v92 = (char *)v148;
      v91 = *(_QWORD *)&v149[8];
      v90 = *(_QWORD *)v149;
      v82 = *(_QWORD *)&v149[24];
      v81 = *(_QWORD *)&v149[16];
      v84 = *(_QWORD *)&v149[40];
      v83 = *(_QWORD *)&v149[32];
      v85 = *(_QWORD *)&v149[56];
      v87 = *(_QWORD *)&v149[48];
      v86 = *(_QWORD *)&v149[64];
      v88 = v150;
      v89 = HIBYTE(v150);
    }
    else
    {
      sub_1B0F5A0E4(&v152, (uint64_t)v145);
      v70 = __swift_project_boxed_opaque_existential_1(v145, v145[3]);
      MEMORY[0x1E0C80A78](v70);
      (*(void (**)(char *))(v72 + 16))((char *)v127 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
      v137 = (char *)sub_1B1035840();
      type metadata accessor for RemoteStateStore(0);
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      v73 = (uint64_t)v20;
      v130 = sub_1B10347C0();
      v131 = sub_1B1034694();
      v74 = sub_1B10347C0();
      KeyPath = swift_getKeyPath();
      type metadata accessor for LocalStateStore(0);
      sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      v76 = sub_1B10347C0();
      v77 = sub_1B1034694();
      v78 = v134;
      sub_1B0F5A42C(v73, v134, type metadata accessor for RemoteContentView);
      v79 = (*(unsigned __int8 *)(v132 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      v80 = swift_allocObject();
      sub_1B0F5A3E8(v78, v80 + v79, type metadata accessor for RemoteContentView);
      *(_QWORD *)&v148 = v137;
      *((_QWORD *)&v148 + 1) = v131;
      *(_QWORD *)v149 = v130;
      *(_QWORD *)&v149[8] = KeyPath;
      *(_QWORD *)&v149[16] = v74;
      *(_QWORD *)&v149[24] = v77;
      *(_QWORD *)&v149[32] = v76;
      *(_QWORD *)&v149[40] = sub_1B0F5A108;
      *(_QWORD *)&v149[64] = 0;
      *(_OWORD *)&v149[48] = (unint64_t)v80;
      LOBYTE(v150) = 1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B0F59E08((uint64_t)sub_1B0F5A108);
      sub_1B0F59E08(0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE200);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE230);
      sub_1B0F595DC();
      sub_1B0F596F8();
      sub_1B1034EC8();
      v146 = v138;
      v147[0] = v139;
      v147[1] = v140;
      v147[2] = v141;
      v147[3] = v142;
      *(_QWORD *)&v147[4] = v143;
      WORD4(v147[4]) = v144;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE220);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE2A0);
      sub_1B0F596D4();
      sub_1B0F598F0();
      sub_1B1034EC8();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_1B0F59E60((uint64_t)sub_1B0F5A108);
      sub_1B0F59E60(0);
      v136 = *((_QWORD *)&v148 + 1);
      v137 = (char *)v148;
      v81 = *(_QWORD *)&v149[16];
      v133 = *(_QWORD *)&v149[8];
      v134 = *(_QWORD *)v149;
      v82 = *(_QWORD *)&v149[24];
      v84 = *(_QWORD *)&v149[40];
      v83 = *(_QWORD *)&v149[32];
      v85 = *(_QWORD *)&v149[56];
      v87 = *(_QWORD *)&v149[48];
      v86 = *(_QWORD *)&v149[64];
      v88 = v150;
      v89 = HIBYTE(v150);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
      v91 = v133;
      v90 = v134;
      v93 = v136;
      v92 = v137;
    }
    if (v89)
      v117 = 256;
    else
      v117 = 0;
    *(_QWORD *)&v146 = v92;
    *((_QWORD *)&v146 + 1) = v93;
    *(_QWORD *)&v147[0] = v90;
    *((_QWORD *)&v147[0] + 1) = v91;
    *(_QWORD *)&v147[1] = v81;
    *((_QWORD *)&v147[1] + 1) = v82;
    *(_QWORD *)&v147[2] = v83;
    *((_QWORD *)&v147[2] + 1) = v84;
    *(_QWORD *)&v147[3] = v87;
    *((_QWORD *)&v147[3] + 1) = v85;
    *(_QWORD *)&v147[4] = v86;
    WORD4(v147[4]) = v117 | v88;
    BYTE10(v147[4]) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE200);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE210);
    sub_1B0F595DC();
    sub_1B0F59640();
    sub_1B1034EC8();
    goto LABEL_39;
  }
  v131 = v13;
  sub_1B0F5A3E8((uint64_t)v11, (uint64_t)v17, type metadata accessor for RemoteContent);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v51 = sub_1B103467C();
  __swift_project_value_buffer(v51, (uint64_t)qword_1EEF0BA00);
  v52 = sub_1B1034664();
  v53 = sub_1B1035E34();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v54 = 0;
    _os_log_impl(&dword_1B0F50000, v52, v53, "needs refresh and has content", v54, 2u);
    MEMORY[0x1B5E15248](v54, -1, -1);
  }

  v55 = &v137[*(int *)(v18 + 48)];
  v56 = *(_QWORD *)v55;
  v57 = *((_QWORD *)v55 + 1);
  v58 = v55[16];
  sub_1B0F5826C(*(_QWORD *)v55, v57, v58);
  v59 = sub_1B0F56350(v56, v57, v58);
  v61 = v60;
  sub_1B0F56148(v56, v57, v58);
  if (!v59
    || (v62 = swift_getObjectType(),
        v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 16))(v62, v61),
        swift_unknownObjectRelease(),
        !v63))
  {
    sub_1B10347F0();
    sub_1B0F5A7E4(&qword_1EEEDE400, &qword_1EEEDE3E8, MEMORY[0x1E0CD8B78]);
    v63 = sub_1B1035840();
  }
  v64 = v134;
  sub_1B0F5A42C((uint64_t)v137, v134, type metadata accessor for RemoteContentView);
  v65 = v128;
  sub_1B0F5A42C((uint64_t)v17, v128, type metadata accessor for RemoteContent);
  v66 = (*(unsigned __int8 *)(v132 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
  v67 = (uint64_t)v17;
  v68 = (v133 + *(unsigned __int8 *)(v131 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
  v69 = swift_allocObject();
  sub_1B0F5A3E8(v64, v69 + v66, type metadata accessor for RemoteContentView);
  sub_1B0F5A3E8(v65, v69 + v68, type metadata accessor for RemoteContent);
  *(_QWORD *)&v146 = v63;
  *((_QWORD *)&v146 + 1) = sub_1B0F5A784;
  *(_QWORD *)&v147[0] = v69;
  *(_OWORD *)((char *)v147 + 8) = 0u;
  *(_OWORD *)((char *)&v147[1] + 8) = 0u;
  *(_OWORD *)((char *)&v147[2] + 8) = 0u;
  *(_OWORD *)((char *)&v147[3] + 8) = 0u;
  *(_DWORD *)((char *)&v147[4] + 7) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE200);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE210);
  sub_1B0F595DC();
  sub_1B0F59640();
  sub_1B1034EC8();
  sub_1B0F57B2C(v67, type metadata accessor for RemoteContent);
LABEL_39:
  result = *(double *)&v148;
  v119 = *(_OWORD *)v149;
  v120 = *(_OWORD *)&v149[16];
  v121 = *(_OWORD *)&v149[32];
  v122 = *(_OWORD *)&v149[48];
  v123 = *(_QWORD *)&v149[64];
  v124 = v150;
  v125 = v151;
  v126 = v135;
  *v135 = v148;
  v126[1] = v119;
  v126[2] = v120;
  v126[3] = v121;
  v126[4] = v122;
  *((_QWORD *)v126 + 10) = v123;
  *((_WORD *)v126 + 44) = v124;
  *((_BYTE *)v126 + 90) = v125;
  return result;
}

uint64_t sub_1B0F54A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE v27[32];
  _QWORD v28[4];

  v26 = a2;
  v3 = sub_1B1036008();
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RemoteContentView(0);
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v28[0]) = 1;
  swift_retain();
  sub_1B1034700();
  v22 = a1;
  type metadata accessor for RemoteLoader(0);
  sub_1B0F524FC(&qword_1EEEDE3F0, type metadata accessor for RemoteLoader, (uint64_t)&protocol conformance descriptor for RemoteLoader);
  v6 = sub_1B10347C0();
  v7 = a1 + *(int *)(v5 + 44);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  LOBYTE(a1) = *(_BYTE *)(v7 + 16);
  sub_1B0F5826C(*(_QWORD *)v7, v9, a1);
  sub_1B0F56178(v8, v9, a1);
  v11 = v10;
  sub_1B0F56148(v8, v9, a1);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_dataSource + 8) = v11;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  sub_1B10347C0();
  v12 = v22 + *(int *)(v5 + 52);
  v13 = *(id *)v12;
  LOBYTE(v6) = *(_BYTE *)(v12 + 8);
  sub_1B0F58278(*(id *)v12, v6);
  v14 = sub_1B0F56528(v13, v6);
  sub_1B0F56154(v13, v6);
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v15 = v24;
  v16 = __swift_project_value_buffer(v24, (uint64_t)qword_1EEF0BA18);
  v17 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v16, v15);
  v28[3] = type metadata accessor for ContentRegistry();
  v28[0] = v14;
  v18 = v14;
  v19 = (void (*)(_BYTE *, _QWORD))sub_1B10344D8();
  sub_1B0FCE224((uint64_t)v28, v17);
  v19(v27, 0);
  swift_release();

  sub_1B10347C0();
  LOBYTE(v28[0]) = 2;
  RemoteLoader.reload(content:showLoading:reloadtype:)(v26, 1, (char *)v28);
  return swift_release();
}

uint64_t sub_1B0F54D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[32];
  _QWORD v38[4];

  v2 = sub_1B1036008();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x1E0C80A78](v2);
  v34 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RemoteContent(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for RemoteContentView(0);
  v11 = a1;
  v12 = type metadata accessor for RemoteLoader(0);
  v13 = sub_1B0F524FC(&qword_1EEEDE3F0, type metadata accessor for RemoteLoader, (uint64_t)&protocol conformance descriptor for RemoteLoader);
  v35 = v12;
  v31 = v13;
  LOBYTE(v12) = *(_BYTE *)(sub_1B10347C0() + OBJC_IVAR____TtC6LiftUI12RemoteLoader_started);
  result = swift_release();
  if ((v12 & 1) == 0)
  {
    sub_1B0F5A974(a1 + v10[5], (uint64_t)v6, &qword_1EEEDE1C8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      return sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDE1C8);
    }
    else
    {
      sub_1B0F5A3E8((uint64_t)v6, v36, type metadata accessor for RemoteContent);
      v15 = sub_1B10347C0();
      v16 = a1 + v10[11];
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_BYTE *)(v16 + 16);
      sub_1B0F5826C(*(_QWORD *)v16, v18, v19);
      sub_1B0F56178(v17, v18, v19);
      v21 = v20;
      sub_1B0F56148(v17, v18, v19);
      *(_QWORD *)(v15 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_dataSource + 8) = v21;
      swift_unknownObjectWeakAssign();
      swift_release();
      swift_unknownObjectRelease();
      sub_1B10347C0();
      v22 = v11 + v10[13];
      v23 = *(id *)v22;
      LOBYTE(v18) = *(_BYTE *)(v22 + 8);
      sub_1B0F58278(*(id *)v22, v18);
      v24 = sub_1B0F56528(v23, v18);
      sub_1B0F56154(v23, v18);
      if (qword_1EEEDE0B8 != -1)
        swift_once();
      v25 = v33;
      v26 = __swift_project_value_buffer(v33, (uint64_t)qword_1EEF0BA18);
      v27 = (uint64_t)v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v26, v25);
      v38[3] = type metadata accessor for ContentRegistry();
      v38[0] = v24;
      v28 = v24;
      v29 = (void (*)(_BYTE *, _QWORD))sub_1B10344D8();
      sub_1B0FCE224((uint64_t)v38, v27);
      v29(v37, 0);
      swift_release();

      sub_1B10347C0();
      LOBYTE(v38[0]) = 2;
      v30 = v36;
      RemoteLoader.reload(content:showLoading:reloadtype:)(v36, 1, (char *)v38);
      swift_release();
      return sub_1B0F57B2C(v30, type metadata accessor for RemoteContent);
    }
  }
  return result;
}

uint64_t sub_1B0F5512C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t ObjectType;

  v2 = (char *)a1 + *(int *)(type metadata accessor for RemoteContentView(0) + 48);
  v3 = *(_QWORD *)v2;
  v4 = *((_QWORD *)v2 + 1);
  v5 = v2[16];
  sub_1B0F5826C(*(_QWORD *)v2, v4, v5);
  v6 = sub_1B0F56350(v3, v4, v5);
  v8 = v7;
  result = sub_1B0F56148(v3, v4, v5);
  if (v6)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v8 + 24))(*a1, a1[1], ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B0F551E0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t ObjectType;

  v4 = (char *)a1 + *(int *)(type metadata accessor for RemoteContentView(0) + 48);
  v5 = *(_QWORD *)v4;
  v6 = *((_QWORD *)v4 + 1);
  v7 = v4[16];
  sub_1B0F5826C(*(_QWORD *)v4, v6, v7);
  v8 = sub_1B0F56350(v5, v6, v7);
  v10 = v9;
  result = sub_1B0F56148(v5, v6, v7);
  if (v8)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v10 + 32))(*a1, a1[1], a2, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

double RemoteContentView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[5];
  uint64_t v11;
  __int16 v12;
  char v13;

  sub_1B0F53858(v10);
  v2 = v11;
  v3 = v12;
  v4 = v13;
  result = *(double *)v10;
  v6 = v10[1];
  v7 = v10[2];
  v8 = v10[3];
  v9 = v10[4];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = v2;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 90) = v4;
  return result;
}

uint64_t sub_1B0F55310()
{
  return sub_1B10353D8();
}

double sub_1B0F55328@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[5];
  uint64_t v11;
  __int16 v12;
  char v13;

  sub_1B0F53858(v10);
  v2 = v11;
  v3 = v12;
  v4 = v13;
  result = *(double *)v10;
  v6 = v10[1];
  v7 = v10[2];
  v8 = v10[3];
  v9 = v10[4];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = v2;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 90) = v4;
  return result;
}

void sub_1B0F55384(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RemoteContentView.init(from:)(a1, a2);
}

uint64_t sub_1B0F55398@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1B0F553A4(uint64_t a1)
{
  return sub_1B0F554D8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
}

unint64_t sub_1B0F553B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3D8);
  v2 = (_QWORD *)sub_1B1036044();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1B0F56F10(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B0F554CC(uint64_t a1)
{
  return sub_1B0F557A8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
}

unint64_t sub_1B0F554D8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE428);
  v3 = (_QWORD *)sub_1B1036044();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (char *)(a1 + 72);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 5);
    v7 = *((_QWORD *)v5 - 4);
    v8 = *((_QWORD *)v5 - 3);
    v9 = *((_QWORD *)v5 - 2);
    v10 = *((_QWORD *)v5 - 1);
    v11 = *v5;
    swift_bridgeObjectRetain();
    sub_1B0F5A84C(v8, v9, v10, v11);
    result = sub_1B0F56F10(v6, v7, a2);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v3[6] + 16 * result);
    *v14 = v6;
    v14[1] = v7;
    v15 = v3[7] + 32 * result;
    *(_QWORD *)v15 = v8;
    *(_QWORD *)(v15 + 8) = v9;
    *(_QWORD *)(v15 + 16) = v10;
    *(_BYTE *)(v15 + 24) = v11;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v3[2] = v18;
    v5 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B0F55628(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE3A8);
}

unint64_t sub_1B0F55634(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE3B0);
}

unint64_t sub_1B0F55640(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_1B1036044();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v14 = *v5;
    swift_bridgeObjectRetain();
    result = sub_1B0F56F10(v6, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B0F5576C(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE3A0);
}

unint64_t sub_1B0F55778(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE390);
}

unint64_t sub_1B0F55784(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE398);
}

unint64_t sub_1B0F55790(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE468);
}

unint64_t sub_1B0F5579C(uint64_t a1)
{
  return sub_1B0F55640(a1, &qword_1EEEDE470);
}

unint64_t sub_1B0F557A8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E0);
  v4 = (_QWORD *)sub_1B1036044();
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_retain();
    swift_bridgeObjectRetain();
    result = sub_1B0F56F10(v7, v8, a2);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B0F558C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE448);
  v2 = (_QWORD *)sub_1B1036044();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1B0F56F10(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B0F559EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE450);
  v2 = sub_1B1036044();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1B0F5A974(v6, (uint64_t)&v15, &qword_1EEEDE458);
    v7 = v15;
    v8 = v16;
    result = sub_1B0F56F10(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1B0F5A964(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

double sub_1B0F55B34@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_1B0F5A920();
  sub_1B1034B38();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1B0F55B80()
{
  sub_1B0F5A920();
  swift_unknownObjectRetain();
  return sub_1B1034B44();
}

double sub_1B0F55BD8@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_1B0F5A8DC();
  sub_1B1034B38();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1B0F55C24()
{
  sub_1B0F5A8DC();
  swift_unknownObjectRetain();
  return sub_1B1034B44();
}

uint64_t sub_1B0F55C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE408);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  v9 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
  sub_1B10346C4();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8, v7, v4);
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  *(_QWORD *)(v2 + v10) = sub_1B0F553B0(v9);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)) = 0;
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120)) = a1;
  if (a1)
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE418);
    sub_1B0F5A7E4(&qword_1EEEDE420, &qword_1EEEDE418, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    v14 = sub_1B10346A0();
    swift_allocObject();
    swift_weakInit();
    sub_1B10346B8();
    v11 = sub_1B1034718();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)) = v11;
  swift_release();
  return v2;
}

uint64_t sub_1B0F55E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  v9 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3C0);
  sub_1B10346C4();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8, v7, v4);
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  *(_QWORD *)(v2 + v10) = sub_1B0F553B0(v9);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)) = 0;
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120)) = a1;
  if (a1)
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3C8);
    sub_1B0F5A7E4(&qword_1EEEDE3D0, &qword_1EEEDE3C8, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    v14 = sub_1B10346A0();
    swift_allocObject();
    swift_weakInit();
    sub_1B10346B8();
    v11 = sub_1B1034718();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)) = v11;
  swift_release();
  return v2;
}

uint64_t sub_1B0F5600C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1B0F5A898();
  result = sub_1B1034B38();
  *a1 = v3;
  return result;
}

uint64_t sub_1B0F56058(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1B0F5A898();
  v2 = v1;
  return sub_1B1034B44();
}

uint64_t sub_1B0F560B0()
{
  return swift_retain();
}

uint64_t sub_1B0F560B8()
{
  uint64_t v0;

  return sub_1B0F52CB0(v0);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1B0F560E4()
{
  unint64_t result;

  result = qword_1EEEDE150;
  if (!qword_1EEEDE150)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1036DE4, &type metadata for RemoteContentView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE150);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1B0F56148(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_unknownObjectRelease();
  else
    return swift_release();
}

void sub_1B0F56154(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1B0F56178(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  v6 = sub_1B1034B2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    v10 = sub_1B1035E28();
    v11 = sub_1B1035108();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v17 = v14;
      *(_DWORD *)v13 = 136315138;
      v16[0] = v13 + 4;
      v16[1] = sub_1B0F6B618(0xD000000000000010, 0x80000001B104C740, &v17);
      sub_1B1035E7C();
      _os_log_impl(&dword_1B0F50000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v14, -1, -1);
      MEMORY[0x1B5E15248](v13, -1, -1);
    }

    sub_1B1034B20();
    swift_getAtKeyPath();
    sub_1B0F56148(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v17;
  }
  return a1;
}

uint64_t sub_1B0F56350(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  v6 = sub_1B1034B2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    v10 = sub_1B1035E28();
    v11 = sub_1B1035108();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v17 = v14;
      *(_DWORD *)v13 = 136315138;
      v16[0] = v13 + 4;
      v16[1] = sub_1B0F6B618(0xD000000000000018, 0x80000001B104C760, &v17);
      sub_1B1035E7C();
      _os_log_impl(&dword_1B0F50000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v14, -1, -1);
      MEMORY[0x1B5E15248](v13, -1, -1);
    }

    sub_1B1034B20();
    swift_getAtKeyPath();
    sub_1B0F56148(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v17;
  }
  return a1;
}

id sub_1B0F56528(void *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a1;
  v3 = sub_1B1034B2C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return v14;
  swift_retain();
  v7 = sub_1B1035E28();
  v8 = sub_1B1035108();
  v9 = v7;
  if (os_log_type_enabled(v8, v7))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    v15 = sub_1B0F6B618(0x52746E65746E6F43, 0xEF79727473696765, &v16);
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v11, -1, -1);
    MEMORY[0x1B5E15248](v10, -1, -1);
  }

  sub_1B1034B20();
  swift_getAtKeyPath();
  sub_1B0F56154(v14, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (id)v16;
}

uint64_t sub_1B0F56710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v2 = v1;
  v4 = sub_1B1034B2C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE460);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B0F5A974(v2, (uint64_t)v10, &qword_1EEEDE460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1B103479C();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = sub_1B1035E28();
    v14 = sub_1B1035108();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19[1] = a1;
      v18 = v17;
      v20 = v17;
      *(_DWORD *)v16 = 136315138;
      v19[2] = sub_1B0F6B618(0x686353726F6C6F43, 0xEB00000000656D65, &v20);
      sub_1B1035E7C();
      _os_log_impl(&dword_1B0F50000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v18, -1, -1);
      MEMORY[0x1B5E15248](v16, -1, -1);
    }

    sub_1B1034B20();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1B0F56950@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B10346F4();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1B0F569CC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1B1034700();
}

uint64_t sub_1B0F56A3C(uint64_t a1, uint64_t a2)
{
  return sub_1B0F56F10(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B0F56C68);
}

unint64_t sub_1B0F56A48(uint64_t a1)
{
  uint64_t v2;

  sub_1B1036008();
  v2 = sub_1B1035B4C();
  return sub_1B0F56D48(a1, v2);
}

unint64_t sub_1B0F56A98()
{
  unint64_t result;

  result = qword_1EEEDE168;
  if (!qword_1EEEDE168)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for StringResolvable, &type metadata for StringResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDE168);
  }
  return result;
}

uint64_t sub_1B0F56ADC(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;

  v4 = a4 >> 6;
  if (v4 == 2)
    return sub_1B0F56B08(result, a2, a3, a4 & 1);
  if (v4 != 1)
  {
    if (a4 >> 6)
      return result;
    return sub_1B0F56B08(result, a2, a3, a4 & 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F56B08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a4 & 1) != 0)
    return sub_1B0F571D8(a3);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E1517C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B0F56B88(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xFDu)
    return sub_1B0F56ADC(result, a2, a3, a4);
  return result;
}

uint64_t sub_1B0F56B9C(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;

  v4 = a4 >> 6;
  if (v4 == 2)
    return sub_1B0F56BC8(result, a2, a3, a4 & 1);
  if (v4 != 1)
  {
    if (a4 >> 6)
      return result;
    return sub_1B0F56BC8(result, a2, a3, a4 & 1);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F56BC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_bridgeObjectRetain();
  if ((a4 & 1) != 0)
    return sub_1B0F5A880(a3);
  return result;
}

uint64_t sub_1B0F56C04(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xFDu)
    return sub_1B0F56B9C(result, a2, a3, a4);
  return result;
}

uint64_t sub_1B0F56C18(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F56C30(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F56C30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B0F5A880(a3);
}

uint64_t sub_1B0F56C60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B0FEB878(a1, a2, a3);
}

unint64_t sub_1B0F56C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B1036128() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B1036128() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1B0F56D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1B1036008();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1B1035B7C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_1B0F56E70(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    sub_1B0F5A7E4(a4, a3, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B10346A0();
    swift_release();
    sub_1B10346AC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B0F56F10(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;

  sub_1B103620C();
  sub_1B1035C00();
  v5 = sub_1B103623C();
  return a3(a1, a2, v5);
}

uint64_t sub_1B0F56F7C()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B0F56FC4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7)
      return swift_release();
    v16 = *(_QWORD *)(v19 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v7)
        return swift_release();
      v16 = *(_QWORD *)(v19 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v7)
          return swift_release();
        v16 = *(_QWORD *)(v19 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v7)
            return swift_release();
          v16 = *(_QWORD *)(v19 + 8 * v9);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_retain();
    swift_bridgeObjectRetain();
    a2(v13, v14, &v18);
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  v17 = v15 + 4;
  if (v17 >= v7)
    return swift_release();
  v16 = *(_QWORD *)(v19 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v7)
      return swift_release();
    v16 = *(_QWORD *)(v19 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1B0F57190(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F571A8(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F571A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B0F571D8(a3);
}

uint64_t sub_1B0F571D8(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_1B0F571F0()
{
  uint64_t v0;

  return sub_1B0F537D8(v0);
}

uint64_t sub_1B0F57208(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B0F57244()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F57254()
{
  sub_1B0F524FC(&qword_1EEEDE180, type metadata accessor for RemoteContentView, (uint64_t)&protocol conformance descriptor for RemoteContentView);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F572AC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1B0F524FC(&qword_1EEEDE188, type metadata accessor for RemoteContentView, (uint64_t)&protocol conformance descriptor for RemoteContentView);
  a1[2] = sub_1B0F524FC(&qword_1EEEDE190, type metadata accessor for RemoteContentView, (uint64_t)&protocol conformance descriptor for RemoteContentView);
  result = sub_1B0F524FC(&qword_1EEEDE198, type metadata accessor for RemoteContentView, (uint64_t)&protocol conformance descriptor for RemoteContentView);
  a1[3] = result;
  return result;
}

uint64_t sub_1B0F57324()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t dispatch thunk of LiftUIDelegate.view(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of LiftUIDelegate.loadingView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LiftUIDelegate.didFinishLoadingRemoteContentView(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of LiftUIDelegate.didFinishLoadingRemoteContentView(id:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t initializeBufferWithCopyOfBuffer for RemoteContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1B0F573A8 + 4 * byte_1B10369C0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_1B0F57594(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for RemoteContent(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = sub_1B0F576D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      break;
    case 1:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
      v3 = sub_1B10345E0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
      v4 = (uint64_t *)(a1 + *(int *)(result + 64));
      v5 = v4[1];
      if (v5 >> 60 != 15)
        result = sub_1B0F576D8(*v4, v5);
      break;
    case 3:
      sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
      v6 = *(unsigned __int8 *)(a1 + 56);
      if (v6 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v6);
      v7 = *(unsigned __int8 *)(a1 + 88);
      if (v7 != 255)
        sub_1B0F571A8(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v7 & 1);
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B0F576D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void initializeWithCopy for RemoteContent()
{
  char *v0;

  v0 = (char *)sub_1B0F5776C + 4 * byte_1B10369C8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t *sub_1B0F5776C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  sub_1B0F57594(v2, v3);
  *v0 = v2;
  v0[1] = v3;
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for RemoteContent(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1B0F57B2C(result, type metadata accessor for RemoteContent);
    v2 = (char *)&loc_1B0F5797C + 4 * byte_1B10369CC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1B0F57B2C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_BYTE *initializeWithTake for RemoteContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = sub_1B10345E0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for RemoteContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1B0F57B2C((uint64_t)a1, type metadata accessor for RemoteContent);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = sub_1B10345E0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for RemoteContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1B0F57CFC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1B0F57D0C()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[8];

  v2[4] = &unk_1B1036B88;
  v2[5] = &unk_1B1036BA0;
  result = sub_1B10345E0();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[6] = v2;
    v2[7] = &unk_1B1036BE8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1B0F57DA8()
{
  return type metadata accessor for RemoteContentRefreshHelper(0);
}

void sub_1B0F57DB0()
{
  unint64_t v0;

  sub_1B0F57E1C();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1B0F57E1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEEDE1C0)
  {
    v0 = sub_1B103470C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEEDE1C0);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteContentView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  id v51;
  char v52;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for RemoteContent(0);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    swift_bridgeObjectRetain();
    if (!v12(v10, 1, v11))
    {
      v15 = (char *)&loc_1B0F57F5C + 4 * byte_1B10369D0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v16 = a3[6];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = v18[16];
    sub_1B0F58264();
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    v17[16] = v21;
    v22 = a3[7];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(_QWORD *)v24;
    v26 = *((_QWORD *)v24 + 1);
    v27 = v24[16];
    sub_1B0F58264();
    *(_QWORD *)v23 = v25;
    *((_QWORD *)v23 + 1) = v26;
    v23[16] = v27;
    v28 = a3[8];
    v29 = a3[9];
    v30 = (uint64_t *)((char *)v4 + v28);
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    *(uint64_t *)((char *)v4 + v29) = *(uint64_t *)((char *)a2 + v29);
    v33 = a3[10];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    LOBYTE(v23) = v35[16];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B0F58264();
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = (char)v23;
    v38 = a3[11];
    v39 = (char *)v4 + v38;
    v40 = (char *)a2 + v38;
    v41 = *(_QWORD *)v40;
    v42 = *((_QWORD *)v40 + 1);
    LOBYTE(v37) = v40[16];
    sub_1B0F5826C(*(_QWORD *)v40, v42, v37);
    *(_QWORD *)v39 = v41;
    *((_QWORD *)v39 + 1) = v42;
    v39[16] = v37;
    v43 = a3[12];
    v44 = (char *)v4 + v43;
    v45 = (char *)a2 + v43;
    v46 = *(_QWORD *)v45;
    v47 = *((_QWORD *)v45 + 1);
    LOBYTE(v37) = v45[16];
    sub_1B0F5826C(*(_QWORD *)v45, v47, v37);
    *(_QWORD *)v44 = v46;
    *((_QWORD *)v44 + 1) = v47;
    v44[16] = v37;
    v48 = a3[13];
    v49 = (char *)v4 + v48;
    v50 = (char *)a2 + v48;
    v51 = *(id *)v50;
    v52 = v50[8];
    sub_1B0F58278(*(id *)v50, v52);
    *(_QWORD *)v49 = v51;
    v49[8] = v52;
  }
  return v4;
}

uint64_t sub_1B0F58264()
{
  return swift_retain();
}

uint64_t sub_1B0F5826C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_unknownObjectRetain();
  else
    return swift_retain();
}

id sub_1B0F58278(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

void destroy for RemoteContentView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for RemoteContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_1B0F576D8(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        v6 = sub_1B10345E0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
        v7 = (uint64_t *)(v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130) + 64));
        v8 = v7[1];
        if (v8 >> 60 != 15)
          sub_1B0F576D8(*v7, v8);
        break;
      case 3u:
        sub_1B0F56ADC(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
        v9 = *(unsigned __int8 *)(v4 + 56);
        if (v9 <= 0xFD)
          sub_1B0F56ADC(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), v9);
        v10 = *(unsigned __int8 *)(v4 + 88);
        if (v10 != 255)
          sub_1B0F571A8(*(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), v10 & 1);
        swift_release();
        break;
      default:
        break;
    }
  }
  sub_1B0F58458();
  sub_1B0F58458();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F58458();
  sub_1B0F56148(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8), *(_BYTE *)(a1 + a2[11] + 16));
  sub_1B0F56148(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8), *(_BYTE *)(a1 + a2[12] + 16));
  sub_1B0F56154(*(id *)(a1 + a2[13]), *(_BYTE *)(a1 + a2[13] + 8));
}

uint64_t sub_1B0F58458()
{
  return swift_release();
}

_QWORD *initializeWithCopy for RemoteContentView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  char v50;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for RemoteContent(0);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  swift_bridgeObjectRetain();
  if (!v11(v9, 1, v10))
  {
    v13 = (char *)&loc_1B0F58520 + 4 * byte_1B10369D8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *((_QWORD *)v16 + 1);
  v19 = v16[16];
  sub_1B0F58264();
  *(_QWORD *)v15 = v17;
  *((_QWORD *)v15 + 1) = v18;
  v15[16] = v19;
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *((_QWORD *)v22 + 1);
  v25 = v22[16];
  sub_1B0F58264();
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  v21[16] = v25;
  v26 = a3[8];
  v27 = a3[9];
  v28 = (_QWORD *)((char *)a1 + v26);
  v29 = (_QWORD *)((char *)a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  v31 = a3[10];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *((_QWORD *)v33 + 1);
  LOBYTE(v21) = v33[16];
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F58264();
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = (char)v21;
  v36 = a3[11];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = *((_QWORD *)v38 + 1);
  LOBYTE(v35) = v38[16];
  sub_1B0F5826C(*(_QWORD *)v38, v40, v35);
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  v37[16] = v35;
  v41 = a3[12];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  v45 = *((_QWORD *)v43 + 1);
  LOBYTE(v35) = v43[16];
  sub_1B0F5826C(*(_QWORD *)v43, v45, v35);
  *(_QWORD *)v42 = v44;
  *((_QWORD *)v42 + 1) = v45;
  v42[16] = v35;
  v46 = a3[13];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(id *)v48;
  v50 = v48[8];
  sub_1B0F58278(*(id *)v48, v50);
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  return a1;
}

_QWORD *assignWithCopy for RemoteContentView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  char v59;
  void *v60;
  char v61;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RemoteContent(0);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      v13 = (char *)&loc_1B0F588EC + 4 * byte_1B10369DC[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_1B0F57B2C((uint64_t)v7, type metadata accessor for RemoteContent);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1B0F57B2C((uint64_t)v7, type metadata accessor for RemoteContent);
    v15 = (char *)&loc_1B0F5897C + 4 * word_1B10369E0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  v21 = v18[16];
  sub_1B0F58264();
  *(_QWORD *)v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  v17[16] = v21;
  sub_1B0F58458();
  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *((_QWORD *)v24 + 1);
  v27 = v24[16];
  sub_1B0F58264();
  *(_QWORD *)v23 = v25;
  *((_QWORD *)v23 + 1) = v26;
  v23[16] = v27;
  sub_1B0F58458();
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[10];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *((_QWORD *)v33 + 1);
  v36 = v33[16];
  sub_1B0F58264();
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_1B0F58458();
  v37 = a3[11];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)v39;
  v41 = *((_QWORD *)v39 + 1);
  v42 = v39[16];
  sub_1B0F5826C(*(_QWORD *)v39, v41, v42);
  v43 = *(_QWORD *)v38;
  v44 = *((_QWORD *)v38 + 1);
  v45 = v38[16];
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = v42;
  sub_1B0F56148(v43, v44, v45);
  v46 = a3[12];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = *((_QWORD *)v48 + 1);
  v51 = v48[16];
  sub_1B0F5826C(*(_QWORD *)v48, v50, v51);
  v52 = *(_QWORD *)v47;
  v53 = *((_QWORD *)v47 + 1);
  v54 = v47[16];
  *(_QWORD *)v47 = v49;
  *((_QWORD *)v47 + 1) = v50;
  v47[16] = v51;
  sub_1B0F56148(v52, v53, v54);
  v55 = a3[13];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = *(id *)v57;
  v59 = v57[8];
  sub_1B0F58278(*(id *)v57, v59);
  v60 = *(void **)v56;
  v61 = v56[8];
  *(_QWORD *)v56 = v58;
  v56[8] = v59;
  sub_1B0F56154(v60, v61);
  return a1;
}

void sub_1B0F58D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v2 = sub_1B10345E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
  *(_BYTE *)(v0 + *(int *)(v3 + 48)) = *(_BYTE *)(v1 + *(int *)(v3 + 48));
  v4 = *(int *)(v3 + 64);
  v5 = v0 + v4;
  v6 = (uint64_t *)(v1 + v4);
  v7 = v6[1];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)v5 = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_1B0F57594(*v6, v6[1]);
    *(_QWORD *)v5 = v8;
    *(_QWORD *)(v5 + 8) = v7;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1B0F58B4CLL);
}

_OWORD *initializeWithTake for RemoteContentView(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RemoteContent(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v12 = sub_1B10345E0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
      v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
      *(_OWORD *)&v7[*(int *)(v13 + 64)] = *(_OWORD *)&v8[*(int *)(v13 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  v20 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[10];
  v22 = a3[11];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  v25 = *(_OWORD *)v24;
  v23[16] = v24[16];
  *(_OWORD *)v23 = v25;
  v26 = (char *)a1 + v22;
  v27 = (char *)a2 + v22;
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v27[16];
  v28 = a3[12];
  v29 = a3[13];
  v30 = (char *)a1 + v28;
  v31 = (char *)a2 + v28;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  v30[16] = v31[16];
  v32 = (char *)a1 + v29;
  v33 = (char *)a2 + v29;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  return a1;
}

_QWORD *assignWithTake for RemoteContentView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void *v55;
  char v56;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for RemoteContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_1B0F57B2C((uint64_t)v8, type metadata accessor for RemoteContent);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v18 = sub_1B10345E0();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v8, v9, v18);
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
        v8[*(int *)(v19 + 48)] = v9[*(int *)(v19 + 48)];
        *(_OWORD *)&v8[*(int *)(v19 + 64)] = *(_OWORD *)&v9[*(int *)(v19 + 64)];
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v17 = *(_QWORD *)(v11 + 64);
      goto LABEL_8;
    }
    sub_1B0F57B2C((uint64_t)v8, type metadata accessor for RemoteContent);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8) - 8) + 64);
LABEL_8:
    memcpy(v8, v9, v17);
    goto LABEL_14;
  }
  if (v14)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v15 = sub_1B10345E0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
    v8[*(int *)(v16 + 48)] = v9[*(int *)(v16 + 48)];
    *(_OWORD *)&v8[*(int *)(v16 + 64)] = *(_OWORD *)&v9[*(int *)(v16 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(v11 + 64));
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_14:
  v20 = a3[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[16];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v23;
  sub_1B0F58458();
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v26[16];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v27;
  sub_1B0F58458();
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_release();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v33 = a3[10];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = v35[16];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v34[16] = v36;
  sub_1B0F58458();
  v37 = a3[11];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = v39[16];
  v41 = *(_QWORD *)v38;
  v42 = *((_QWORD *)v38 + 1);
  v43 = v38[16];
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v38[16] = v40;
  sub_1B0F56148(v41, v42, v43);
  v44 = a3[12];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = v46[16];
  v48 = *(_QWORD *)v45;
  v49 = *((_QWORD *)v45 + 1);
  v50 = v45[16];
  *(_OWORD *)v45 = *(_OWORD *)v46;
  v45[16] = v47;
  sub_1B0F56148(v48, v49, v50);
  v51 = a3[13];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(_QWORD *)v53;
  LOBYTE(v53) = v53[8];
  v55 = *(void **)v52;
  v56 = v52[8];
  *(_QWORD *)v52 = v54;
  v52[8] = (char)v53;
  sub_1B0F56154(v55, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteContentView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F593B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoteContentView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F5943C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE1C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1B0F594B4()
{
  unint64_t v0;

  sub_1B0F59554();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1B0F59554()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEEDE1E0)
  {
    type metadata accessor for RemoteContent(255);
    v0 = sub_1B1035E64();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEEDE1E0);
  }
}

uint64_t sub_1B0F595A8()
{
  return sub_1B0F59664(&qword_1EEEDE1E8, &qword_1EEEDE1F0, (uint64_t (*)(void))sub_1B0F595DC, sub_1B0F59640);
}

unint64_t sub_1B0F595DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE1F8;
  if (!qword_1EEEDE1F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE200);
    v2[0] = MEMORY[0x1E0CDFD08];
    v2[1] = MEMORY[0x1E0CDC8B0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE1F8);
  }
  return result;
}

uint64_t sub_1B0F59640()
{
  return sub_1B0F59664(&qword_1EEEDE208, &qword_1EEEDE210, sub_1B0F596D4, (uint64_t (*)(void))sub_1B0F598F0);
}

uint64_t sub_1B0F59664(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0F596D4()
{
  return sub_1B0F59664(&qword_1EEEDE218, &qword_1EEEDE220, (uint64_t (*)(void))sub_1B0F595DC, (uint64_t (*)(void))sub_1B0F596F8);
}

unint64_t sub_1B0F596F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE228;
  if (!qword_1EEEDE228)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE230);
    v2[0] = sub_1B0F59764();
    v2[1] = MEMORY[0x1E0CDC8B0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE228);
  }
  return result;
}

unint64_t sub_1B0F59764()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE238;
  if (!qword_1EEEDE238)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE240);
    v2[0] = sub_1B0F597E8();
    v2[1] = sub_1B0F5A7E4(&qword_1EEEDE288, &qword_1EEEDE290, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE238);
  }
  return result;
}

unint64_t sub_1B0F597E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE248;
  if (!qword_1EEEDE248)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE250);
    v2[0] = sub_1B0F5986C();
    v2[1] = sub_1B0F5A7E4(&qword_1EEEDE278, &qword_1EEEDE280, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE248);
  }
  return result;
}

unint64_t sub_1B0F5986C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEDE258;
  if (!qword_1EEEDE258)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE260);
    v2 = sub_1B0F5A7E4(&qword_1EEEDE268, &qword_1EEEDE270, MEMORY[0x1E0CDCF80]);
    v3[0] = MEMORY[0x1E0CDFD08];
    v3[1] = v2;
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEDE258);
  }
  return result;
}

unint64_t sub_1B0F598F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE298;
  if (!qword_1EEEDE298)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE2A0);
    v2[0] = sub_1B0F595DC();
    v2[1] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE298);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteContentView.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteContentView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F59A40 + 4 * byte_1B10369ED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0F59A74 + 4 * byte_1B10369E8[v4]))();
}

uint64_t sub_1B0F59A74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F59A7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F59A84);
  return result;
}

uint64_t sub_1B0F59A90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F59A98);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0F59A9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F59AA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F59AB0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1B0F59AB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteContentView.CodingKeys()
{
  return &type metadata for RemoteContentView.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RemoteContentRefreshHelper.Status(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteContentRefreshHelper.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F59BAC + 4 * byte_1B10369F7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F59BE0 + 4 * byte_1B10369F2[v4]))();
}

uint64_t sub_1B0F59BE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F59BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F59BF0);
  return result;
}

uint64_t sub_1B0F59BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F59C04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F59C08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F59C10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1B0F59C1C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteContentRefreshHelper.Status()
{
  return &type metadata for RemoteContentRefreshHelper.Status;
}

unint64_t sub_1B0F59C3C()
{
  unint64_t result;

  result = qword_1EEEDE368;
  if (!qword_1EEEDE368)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1036CCC, &type metadata for RemoteContentRefreshHelper.Status);
    atomic_store(result, (unint64_t *)&qword_1EEEDE368);
  }
  return result;
}

unint64_t sub_1B0F59C84()
{
  unint64_t result;

  result = qword_1EEEDE370;
  if (!qword_1EEEDE370)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1036DBC, &type metadata for RemoteContentView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE370);
  }
  return result;
}

unint64_t sub_1B0F59CCC()
{
  unint64_t result;

  result = qword_1EEEDE378;
  if (!qword_1EEEDE378)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1036CF4, &type metadata for RemoteContentView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE378);
  }
  return result;
}

unint64_t sub_1B0F59D14()
{
  unint64_t result;

  result = qword_1EEEDE380;
  if (!qword_1EEEDE380)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1036D1C, &type metadata for RemoteContentView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE380);
  }
  return result;
}

uint64_t sub_1B0F59D58()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1B0F59D64()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B0F59D88(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0F56E70(a1, v1, &qword_1EEEDE3C8, &qword_1EEEDE3D0);
}

uint64_t sub_1B0F59DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_1B0F59E08(a2);
  return sub_1B0F59E08(a4);
}

uint64_t sub_1B0F59E08(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1B0F59E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_release();
  sub_1B0F59E60(a2);
  return sub_1B0F59E60(a4);
}

uint64_t sub_1B0F59E60(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;

  v1 = (int *)type metadata accessor for RemoteContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  v6 = v0 + v3 + v1[5];
  v7 = type metadata accessor for RemoteContent(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_1B0F576D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        v9 = sub_1B10345E0();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
        v10 = (uint64_t *)(v6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130) + 64));
        v11 = v10[1];
        if (v11 >> 60 != 15)
          sub_1B0F576D8(*v10, v11);
        break;
      case 3u:
        sub_1B0F56ADC(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_BYTE *)(v6 + 24));
        v12 = *(unsigned __int8 *)(v6 + 56);
        if (v12 <= 0xFD)
          sub_1B0F56ADC(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), v12);
        v13 = *(unsigned __int8 *)(v6 + 88);
        if (v13 != 255)
          sub_1B0F571A8(*(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 80), v13 & 1);
        swift_release();
        break;
      default:
        break;
    }
  }
  sub_1B0F58458();
  sub_1B0F58458();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F58458();
  sub_1B0F56148(*(_QWORD *)(v5 + v1[11]), *(_QWORD *)(v5 + v1[11] + 8), *(_BYTE *)(v5 + v1[11] + 16));
  sub_1B0F56148(*(_QWORD *)(v5 + v1[12]), *(_QWORD *)(v5 + v1[12] + 8), *(_BYTE *)(v5 + v1[12] + 16));
  sub_1B0F56154(*(id *)(v5 + v1[13]), *(_BYTE *)(v5 + v1[13] + 8));

  return swift_deallocObject();
}

uint64_t sub_1B0F5A0A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for RemoteContentView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1B0F551E0((_QWORD *)(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1B0F5A0E4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B0F5A108()
{
  return sub_1B0F5A33C((uint64_t (*)(uint64_t))sub_1B0F5512C);
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  int v11;

  v1 = (int *)type metadata accessor for RemoteContentView(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + v1[5];
  v5 = type metadata accessor for RemoteContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_1B0F576D8(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        v7 = sub_1B10345E0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
        v8 = (uint64_t *)(v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130) + 64));
        v9 = v8[1];
        if (v9 >> 60 != 15)
          sub_1B0F576D8(*v8, v9);
        break;
      case 3u:
        sub_1B0F56ADC(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
        v10 = *(unsigned __int8 *)(v4 + 56);
        if (v10 <= 0xFD)
          sub_1B0F56ADC(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), v10);
        v11 = *(unsigned __int8 *)(v4 + 88);
        if (v11 != 255)
          sub_1B0F571A8(*(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), v11 & 1);
        swift_release();
        break;
      default:
        break;
    }
  }
  sub_1B0F58458();
  sub_1B0F58458();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F58458();
  sub_1B0F56148(*(_QWORD *)(v3 + v1[11]), *(_QWORD *)(v3 + v1[11] + 8), *(_BYTE *)(v3 + v1[11] + 16));
  sub_1B0F56148(*(_QWORD *)(v3 + v1[12]), *(_QWORD *)(v3 + v1[12] + 8), *(_BYTE *)(v3 + v1[12] + 16));
  sub_1B0F56154(*(id *)(v3 + v1[13]), *(_BYTE *)(v3 + v1[13] + 8));
  return swift_deallocObject();
}

uint64_t sub_1B0F5A330()
{
  return sub_1B0F5A33C(sub_1B0F54D74);
}

uint64_t sub_1B0F5A33C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RemoteContentView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1B0F5A378(uint64_t a1)
{
  destroy for RemoteLoader.Status(a1);
  return a1;
}

uint64_t sub_1B0F5A3AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B0F5A3E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B0F5A42C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B0F5A470()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  int v21;

  v1 = (int *)type metadata accessor for RemoteContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for RemoteContent(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v0 + v3;
  swift_bridgeObjectRelease();
  v9 = v0 + v3 + v1[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8 + v1[5], 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_1B0F576D8(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
        v17 = sub_1B10345E0();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v9, v17);
        v18 = (uint64_t *)(v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130) + 64));
        v19 = v18[1];
        if (v19 >> 60 != 15)
          sub_1B0F576D8(*v18, v19);
        break;
      case 3u:
        sub_1B0F56ADC(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_BYTE *)(v9 + 24));
        v20 = *(unsigned __int8 *)(v9 + 56);
        if (v20 <= 0xFD)
          sub_1B0F56ADC(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), v20);
        v21 = *(unsigned __int8 *)(v9 + 88);
        if (v21 != 255)
          sub_1B0F571A8(*(_QWORD *)(v9 + 64), *(_QWORD *)(v9 + 72), *(_QWORD *)(v9 + 80), v21 & 1);
        swift_release();
        break;
      default:
        break;
    }
  }
  sub_1B0F58458();
  sub_1B0F58458();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F58458();
  sub_1B0F56148(*(_QWORD *)(v8 + v1[11]), *(_QWORD *)(v8 + v1[11] + 8), *(_BYTE *)(v8 + v1[11] + 16));
  sub_1B0F56148(*(_QWORD *)(v8 + v1[12]), *(_QWORD *)(v8 + v1[12] + 8), *(_BYTE *)(v8 + v1[12] + 16));
  sub_1B0F56154(*(id *)(v8 + v1[13]), *(_BYTE *)(v8 + v1[13] + 8));
  v10 = v0 + v7;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_1B0F576D8(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      break;
    case 2u:
      v11 = sub_1B10345E0();
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v7, v11);
      v12 = (uint64_t *)(v10 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130) + 64));
      v13 = v12[1];
      if (v13 >> 60 != 15)
        sub_1B0F576D8(*v12, v13);
      break;
    case 3u:
      sub_1B0F56ADC(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_BYTE *)(v10 + 24));
      v14 = *(unsigned __int8 *)(v10 + 56);
      if (v14 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), v14);
      v15 = *(unsigned __int8 *)(v10 + 88);
      if (v15 != 255)
        sub_1B0F571A8(*(_QWORD *)(v10 + 64), *(_QWORD *)(v10 + 72), *(_QWORD *)(v10 + 80), v15 & 1);
      swift_release();
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

uint64_t sub_1B0F5A784()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for RemoteContentView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RemoteContent(0) - 8) + 80);
  return sub_1B0F54A80(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1B0F5A7E4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E15188](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0F5A824(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0F56E70(a1, v1, &qword_1EEEDE418, &qword_1EEEDE420);
}

uint64_t sub_1B0F5A84C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_retain();
  swift_bridgeObjectRetain();
  return sub_1B0F5A880(a3);
}

uint64_t sub_1B0F5A880(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

unint64_t sub_1B0F5A898()
{
  unint64_t result;

  result = qword_1EEEDE430;
  if (!qword_1EEEDE430)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1045C94, &type metadata for ContentRegistryKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDE430);
  }
  return result;
}

unint64_t sub_1B0F5A8DC()
{
  unint64_t result;

  result = qword_1EEEDE438;
  if (!qword_1EEEDE438)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1043B6C, &type metadata for LiftUIDelegateKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDE438);
  }
  return result;
}

unint64_t sub_1B0F5A920()
{
  unint64_t result;

  result = qword_1EEEDE440;
  if (!qword_1EEEDE440)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1043B34, &type metadata for LiftUIDataSourceKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDE440);
  }
  return result;
}

_OWORD *sub_1B0F5A964(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1B0F5A974(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B0F5A9BC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B0F5B664(v5);
  v7 = swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v2 + 24);
  if (!v8)
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B1034ACC();
    __break(1u);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (!v9)
  {
LABEL_11:
    type metadata accessor for LocalStateStore(0);
    sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    swift_retain();
    result = sub_1B1034ACC();
    __break(1u);
    return result;
  }
  v22 = a1;
  v23 = a2(v7);
  v10 = *(_QWORD *)(v6 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(v6 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v12 = v11[3];
      v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(&v20, &v21, v8, v9, v12, v13);
      sub_1B0F5A0E4(&v20, (uint64_t)&v24);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
      sub_1B0F5A0E4(&v24, (uint64_t)&v21);
      v11 += 5;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  sub_1B0F5A0E4(&v21, (uint64_t)&v24);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v14 = __swift_project_boxed_opaque_existential_1(&v24, v25);
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *))(v16 + 16))((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_1B1035840();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  return v17;
}

uint64_t sub_1B0F5AC54()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v1 = sub_1B1035894();
  MEMORY[0x1E0C80A78](v1);
  v2 = *(_OWORD *)(v0 + 48);
  v24 = *(_OWORD *)(v0 + 32);
  v25 = v2;
  v26 = *(_OWORD *)(v0 + 64);
  v27 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 16);
  v22 = *(_OWORD *)v0;
  v23 = v3;
  v4 = *(_QWORD *)(v0 + 56);
  if (!v4)
  {
    sub_1B0F601E4(v0);
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B1034ACC();
    __break(1u);
    goto LABEL_11;
  }
  v5 = swift_retain();
  v6 = sub_1B0F5C7C4(v5);
  swift_release();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1B0F5B664(v7);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 72);
  if (!v9)
  {
LABEL_11:
    type metadata accessor for LocalStateStore(0);
    sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    swift_retain();
    result = sub_1B1034ACC();
    __break(1u);
    return result;
  }
  *((_QWORD *)&v23 + 1) = MEMORY[0x1E0CDFFF0];
  *(_QWORD *)&v24 = sub_1B0F60264();
  *(_QWORD *)&v22 = v6;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(v8 + 32);
    swift_retain();
    swift_retain();
    v19[1] = v6;
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v12 = v11[3];
      v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(&v20, &v22, v4, v9, v12, v13);
      sub_1B0F5A0E4(&v20, (uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
      sub_1B0F5A0E4(v21, (uint64_t)&v22);
      v11 += 5;
      --v10;
    }
    while (v10);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v14 = __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *))(v16 + 16))((char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_1B1035840();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  return v17;
}

uint64_t sub_1B0F5AFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v1 = sub_1B1034A0C();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 88);
  sub_1B0F5D11C((uint64_t)v3);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B0F5B664(v5);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B1034ACC();
    __break(1u);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v0 + 104);
  if (!v7)
  {
LABEL_11:
    type metadata accessor for LocalStateStore(0);
    sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    swift_retain();
    result = sub_1B1034ACC();
    __break(1u);
    return result;
  }
  v21 = v1;
  v22 = sub_1B0F524FC(&qword_1EEEDE5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA070]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  sub_1B0F5FD40((uint64_t)v3, (uint64_t)boxed_opaque_existential_1);
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v18[0] = v3;
    v10 = (_QWORD *)(v6 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v11 = v10[3];
      v12 = v10[4];
      __swift_project_boxed_opaque_existential_1(v10, v11);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(&v19, &v20, v4, v7, v11, v12);
      sub_1B0F5A0E4(&v19, (uint64_t)&v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
      sub_1B0F5A0E4(&v23, (uint64_t)&v20);
      v10 += 5;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    v3 = (char *)v18[0];
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  sub_1B0F5A0E4(&v20, (uint64_t)&v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1B0F5FDC8((uint64_t)v3);
  v13 = __swift_project_boxed_opaque_existential_1(&v23, v24);
  MEMORY[0x1E0C80A78](v13);
  (*(void (**)(char *))(v15 + 16))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1B1035840();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  return v16;
}

uint64_t ShapeContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19[4];

  v18 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v19[-1] - v7;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v10 = sub_1B0F5B664(v9);
  swift_bridgeObjectRelease();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1B0F69B0C(v10, v11, v12, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  v14 = __swift_project_boxed_opaque_existential_1(v19, v19[3]);
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *))(v16 + 16))((char *)&v19[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v18 = sub_1B1035840();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t sub_1B0F5B4C8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v15[40];
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD8D8(0, v1, 0);
    v4 = a1 + 32;
    v2 = v19;
    do
    {
      sub_1B0F5FD84(v4, (uint64_t)v15);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE5D8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE5E0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B0FDD8D8(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v19;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
        sub_1B0FDD8D8(v5 > 1, v6 + 1, 1);
      v7 = v17;
      v8 = v18;
      v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
      MEMORY[0x1E0C80A78](v9);
      v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      (*(void (**)(char *))(v12 + 16))(v11);
      sub_1B0F5E4B4(v6, (uint64_t)v11, &v19, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v2 = v19;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B0F5B664(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  ValueMetadata *v9;
  unint64_t v10;
  _BYTE v11[40];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD8D8(0, v1, 0);
    v2 = v12;
    v4 = a1 + 32;
    do
    {
      sub_1B0F5E52C(v4, (uint64_t)v11);
      v12 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B0FDD8D8(v5 > 1, v6 + 1, 1);
        v2 = v12;
      }
      v9 = &type metadata for AnyViewModifier;
      v10 = sub_1B0F5E568();
      *(_QWORD *)&v8 = swift_allocObject();
      sub_1B0F5E52C((uint64_t)v11, v8 + 16);
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1B0F5A0E4(&v8, v2 + 40 * v6 + 32);
      sub_1B0F5E5D0((uint64_t)v11);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B0F5B780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25[2];

  a6[3] = a4;
  a6[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, v6, a4);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      v14 = v13[3];
      v15 = v13[4];
      __swift_project_boxed_opaque_existential_1(v13, v14);
      v17 = a6[3];
      v16 = a6[4];
      v18 = __swift_project_boxed_opaque_existential_1(a6, v17);
      *((_QWORD *)&v23 + 1) = v17;
      v24 = *(_QWORD *)(v16 + 16);
      v19 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v19, v18, v17);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v25, &v22, a2, a3, v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE5C8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE5D0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v23 + 1))
        {
          sub_1B0F5A0E4(&v22, (uint64_t)v25);
          goto LABEL_4;
        }
      }
      else
      {
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
      }
      sub_1B0F5FD84((uint64_t)a6, (uint64_t)v25);
      sub_1B0F5A3AC((uint64_t)&v22, &qword_1EEEDE5C0);
LABEL_4:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a6);
      sub_1B0F5A0E4(v25, (uint64_t)a6);
      v13 += 5;
      if (!--v12)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B0F5B94C(char a1)
{
  return qword_1B1037A30[a1];
}

uint64_t sub_1B0F5B96C(char *a1, char *a2)
{
  return sub_1B100DDF8(*a1, *a2);
}

uint64_t sub_1B0F5B978()
{
  return sub_1B100F514();
}

uint64_t sub_1B0F5B980()
{
  return sub_1B1012AFC();
}

uint64_t sub_1B0F5B988()
{
  return sub_1B1013BB8();
}

uint64_t sub_1B0F5B990@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5B9C4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F5B94C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F5B9EC()
{
  char *v0;

  return sub_1B0F5B94C(*v0);
}

uint64_t sub_1B0F5B9F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

void sub_1B0F5BA20(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B0F5BA2C()
{
  sub_1B0F5DEEC();
  return sub_1B10362B4();
}

uint64_t sub_1B0F5BA54()
{
  sub_1B0F5DEEC();
  return sub_1B10362C0();
}

uint64_t ShapeContentBox.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48[40];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  char v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v42 = a2;
  v57 = *MEMORY[0x1E0C80C00];
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE478);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B1036008();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = sub_1B103626C();
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v7, (uint64_t)qword_1EEF0BA18);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  if (*(_QWORD *)(v11 + 16) && (v13 = sub_1B0F56A48((uint64_t)v10), (v14 & 1) != 0))
  {
    sub_1B0F57208(*(_QWORD *)(v11 + 56) + 32 * v13, (uint64_t)&v52);
  }
  else
  {
    v52 = 0u;
    v53 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!*((_QWORD *)&v53 + 1))
  {
    sub_1B0F5A3AC((uint64_t)&v52, &qword_1EEEDE158);
    goto LABEL_12;
  }
  type metadata accessor for ContentRegistry();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    type metadata accessor for ContentRegistryError();
    sub_1B0F524FC(&qword_1EEEDE488, (uint64_t (*)(uint64_t))type metadata accessor for ContentRegistryError, (uint64_t)&unk_1B1045C40);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v15 = (void *)v49;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16 = sub_1B0F5DCE4();
  sub_1B1036278();
  if (v2)
  {

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v41 = v15;
  v18 = v47;
  v19 = sub_1B10360C8();
  v20 = v6;
  if (!*(_QWORD *)(v19 + 16))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DynamicKeyError();
    sub_1B0F524FC(&qword_1EEEDE4C0, (uint64_t (*)(uint64_t))type metadata accessor for DynamicKeyError, (uint64_t)&unk_1B103D9EC);
    swift_allocError();
    sub_1B1036074();
    sub_1B1035F30();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v18);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v21 = *(_QWORD *)(v19 + 40);
  v40 = *(_QWORD *)(v19 + 32);
  v39 = *(_QWORD *)(v19 + 48);
  v22 = *(_BYTE *)(v19 + 56);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  v23 = sub_1B1036074();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE498);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
  *(_QWORD *)(inited + 56) = &type metadata for DynamicKey;
  *(_QWORD *)(inited + 64) = v16;
  v25 = v39;
  v26 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v26;
  v27 = v40;
  *(_QWORD *)(v26 + 16) = v40;
  *(_QWORD *)(v26 + 24) = v21;
  *(_QWORD *)(v26 + 32) = v25;
  *(_BYTE *)(v26 + 40) = v22;
  *(_QWORD *)&v52 = v23;
  swift_bridgeObjectRetain();
  sub_1B0F5DD74(inited, (uint64_t (*)(void))sub_1B0FDD418, &qword_1EEEDE4E0);
  v28 = sub_1B0FFD800(v27, v21);
  v37 = v29;
  v38 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v52 = v27;
  *((_QWORD *)&v52 + 1) = v21;
  *(_QWORD *)&v53 = v25;
  BYTE8(v53) = v22;
  sub_1B0F5DEEC();
  v30 = v45;
  v31 = v47;
  sub_1B1036068();
  swift_bridgeObjectRelease();
  LOBYTE(v49) = 1;
  v32 = v44;
  sub_1B1036080();
  sub_1B0F5FD84((uint64_t)&v52, (uint64_t)v48);
  v50 = v38;
  v51 = v37;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  sub_1B1035DB0();
  sub_1B0F5A0E4(&v49, (uint64_t)v54);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4A8);
  v48[0] = 2;
  sub_1B0F5DFA0();
  sub_1B10360A4();
  if ((_QWORD)v49)
    v33 = v49;
  else
    v33 = MEMORY[0x1E0DEE9D8];
  v34 = v55;
  v35 = v56;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v54, v55);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, v34, v35);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v31);
  sub_1B0F5E070((uint64_t)v54, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B0F5E0B0((uint64_t)v54);
}

uint64_t sub_1B0F5C2A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ShapeContentBox.init(from:)(a1, a2);
}

uint64_t sub_1B0F5C2C8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F5C318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F60A68();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F5C340@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B0F5C394(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1B0F5C3A0()
{
  sub_1B0F601A0();
  return sub_1B10362B4();
}

uint64_t sub_1B0F5C3C8()
{
  sub_1B0F601A0();
  return sub_1B10362C0();
}

uint64_t sub_1B0F5C3F0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F756E69746E6F63;
  else
    return 0x72616C7563726963;
}

uint64_t sub_1B0F5C42C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F5A9BC(MEMORY[0x1E0CDFAD0], (uint64_t (*)(uint64_t))sub_1B0F60330);
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5C484()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F5C48C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1B0F5C4B4())()
{
  return nullsub_1;
}

double sub_1B0F5C4CC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F5D0D0(a1, a2);
}

uint64_t sub_1B0F5C4E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F5A9BC(MEMORY[0x1E0CDFE88], (uint64_t (*)(uint64_t))sub_1B0F602EC);
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5C538()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
    return swift_retain();
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5C598()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 40))
    return swift_retain();
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5C5F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  v3 = sub_1B1035894();
  MEMORY[0x1E0C80A78](v3);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  if (*(_QWORD *)(v1 + 56))
  {
    v7 = swift_retain();
    v8 = sub_1B0F5C7C4(v7);
    result = swift_release();
    *a1 = v8;
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 16);
    v11 = v4;
    v12 = v5;
    v13 = v6;
    swift_bridgeObjectRetain();
    sub_1B0F56C04(v10, v11, v12, v13);
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F5C7C4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = a1;
  v3 = sub_1B1034CA0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B1035894();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v1 + 40);
  if (v10 <= 0xFD)
  {
    v18 = v7;
    v19 = v3;
    v11 = *(_QWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v1 + 24);
    v13 = *(_QWORD *)(v1 + 32);
    v20 = v11;
    v21 = v12;
    v22 = v13;
    v23 = v10;
    sub_1B0F56B9C(v11, v12, v13, v10);
    v14 = StringResolvable.resolved(with:)(v24);
    if (v2)

    else
      v24 = v14;
    sub_1B0F56B88(v11, v12, v13, v10);
    v3 = v19;
  }
  v15 = sub_1B103605C();
  swift_bridgeObjectRelease();
  v16 = (unsigned int *)MEMORY[0x1E0CDB0C0];
  if (v15 != 1)
    v16 = (unsigned int *)MEMORY[0x1E0CDB0E0];
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *v16, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  sub_1B0F524FC(&qword_1EEEDE5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE18], MEMORY[0x1E0CDFE08]);
  return sub_1B10358C4();
}

uint64_t sub_1B0F5C9D4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656C797473;
  else
    return 25705;
}

uint64_t sub_1B0F5C9FC(char *a1, char *a2)
{
  return sub_1B100EDD0(*a1, *a2);
}

uint64_t sub_1B0F5CA08()
{
  return sub_1B100F57C();
}

uint64_t sub_1B0F5CA10()
{
  return sub_1B10132B8();
}

uint64_t sub_1B0F5CA18()
{
  return sub_1B1013A84();
}

uint64_t sub_1B0F5CA20@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F5CA7C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F5C9D4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F5CAA4()
{
  char *v0;

  return sub_1B0F5C9D4(*v0);
}

uint64_t sub_1B0F5CAAC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B0F5CB0C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B0F5CB18()
{
  sub_1B0F602A8();
  return sub_1B10362B4();
}

uint64_t sub_1B0F5CB40()
{
  sub_1B0F602A8();
  return sub_1B10362C0();
}

uint64_t sub_1B0F5CB68@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;

  v35 = a2;
  v3 = sub_1B103461C();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE638);
  v5 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v8 = sub_1B1034AD8();
  v34 = v9;
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_retain();
  v10 = sub_1B1034AD8();
  v12 = v11;
  v13 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B0F602A8();
  swift_retain();
  v14 = v39;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    swift_release();
    swift_release();
  }
  else
  {
    v15 = v36;
    v16 = v37;
    v39 = v12;
    LOBYTE(v40) = 0;
    v17 = sub_1B103608C();
    v20 = v18;
    if (v18)
    {
      v31 = v17;
    }
    else
    {
      sub_1B1034610();
      v31 = sub_1B1034604();
      v20 = v21;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
    }
    v44 = 1;
    sub_1B0F56A98();
    swift_bridgeObjectRetain();
    v22 = v20;
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v16);
    v24 = v40;
    v23 = v41;
    v25 = v42;
    v26 = v43;
    sub_1B0F56C04(v40, v41, v42, v43);
    swift_bridgeObjectRetain();
    sub_1B0F56C04(v24, v23, v25, v26);
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B0F56B88(v24, v23, v25, v26);
    swift_bridgeObjectRelease();
    v28 = v35;
    *v35 = v31;
    v28[1] = v22;
    v28[2] = v24;
    v28[3] = v23;
    v28[4] = v25;
    *((_BYTE *)v28 + 40) = v26;
    v28[6] = v27;
    v28[7] = v8;
    v28[8] = v34;
    v28[9] = v10;
    v29 = (uint64_t)v38;
    v28[10] = v39;
    __swift_destroy_boxed_opaque_existential_1(v29);
    swift_bridgeObjectRelease();
    sub_1B0F56B88(v24, v23, v25, v26);
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F5CF10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F5AC54();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5CF64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F5CF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_1B0F5CF94())()
{
  return nullsub_1;
}

uint64_t sub_1B0F5CFA4()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 56))
    return swift_retain();
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5D004()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 72))
    return swift_retain();
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5D064@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F5CB68(a1, a2);
}

uint64_t sub_1B0F5D078@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F5A9BC(MEMORY[0x1E0CE0580], (uint64_t (*)(uint64_t))sub_1B0F5FE94);
  *a1 = result;
  return result;
}

double sub_1B0F5D0D0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B0F5FED8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B0F5D11C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v3 = sub_1B1034CA0();
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1B1034A0C();
  MEMORY[0x1E0C80A78](v35);
  v6 = (double *)((char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v1 + 16);
  v31[0] = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v10 = *(unsigned __int8 *)(v1 + 40);
  v12 = *(_QWORD *)(v1 + 48);
  v11 = *(_QWORD *)(v1 + 56);
  v13 = *(_QWORD *)(v1 + 64);
  v14 = *(unsigned __int8 *)(v1 + 72);
  v15 = *(_QWORD *)(v1 + 88);
  v31[2] = *(_QWORD *)(v1 + 80);
  v31[3] = *(_QWORD *)(v1 + 96);
  v31[1] = *(_QWORD *)(v1 + 104);
  v39 = a1;
  if (v10 == 255)
  {
    v17 = 0.0;
  }
  else
  {
    v32 = v12;
    v33 = v11;
    v34 = v13;
    if (!v15)
    {
      sub_1B0F5FD10(v7, v9, v8, v10);
      swift_bridgeObjectRetain();
      sub_1B0F5FD10(v7, v9, v8, v10);
      sub_1B0F56C04(v32, v33, v34, v14);
      v8 = type metadata accessor for RemoteStateStore(0);
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1034ACC();
      __break(1u);
      goto LABEL_12;
    }
    sub_1B0F5FD10(v7, v9, v8, v10);
    v16 = swift_retain();
    v17 = sub_1B0FD72F8(v16, v7, v9, v8, v10 & 1);
    swift_release();
    sub_1B0F5FD28(v7, v9, v8, v10);
    v11 = v33;
    v13 = v34;
    v12 = v32;
  }
  if (v14 <= 0xFD)
  {
    v40 = v12;
    v41 = v11;
    v42 = v13;
    v43 = v14;
    if (v15)
    {
      v18 = v12;
      v19 = v11;
      v20 = v13;
      sub_1B0F56C04(v12, v11, v13, v14);
      v21 = swift_retain();
      StringResolvable.resolved(with:)(v21);
      sub_1B0F56B88(v18, v19, v20, v14);
      swift_release();
      goto LABEL_8;
    }
LABEL_12:
    v28 = v12;
    v29 = v13;
    v30 = v11;
    swift_bridgeObjectRetain();
    sub_1B0F5FD10(v7, v9, v8, v10);
    sub_1B0F56C04(v28, v30, v29, v14);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B0F56C04(v28, v30, v29, v14);
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
    return result;
  }
LABEL_8:
  v22 = sub_1B103605C();
  swift_bridgeObjectRelease();
  v23 = (unsigned int *)MEMORY[0x1E0CDB0C0];
  v25 = v37;
  v24 = v38;
  if (v22 != 1)
    v23 = (unsigned int *)MEMORY[0x1E0CDB0E0];
  v26 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, *v23, v38);
  *v6 = v17;
  v6[1] = v17;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v6 + *(int *)(v35 + 20), v26, v24);
  return sub_1B0F5FCCC((uint64_t)v6, v39);
}

uint64_t sub_1B0F5D51C(char a1)
{
  return qword_1B1037A60[a1];
}

uint64_t sub_1B0F5D53C(char *a1, char *a2)
{
  return sub_1B100CF60(*a1, *a2);
}

uint64_t sub_1B0F5D548()
{
  return sub_1B100F5EC();
}

uint64_t sub_1B0F5D550()
{
  return sub_1B10123AC();
}

uint64_t sub_1B0F5D558()
{
  return sub_1B1014F7C();
}

uint64_t sub_1B0F5D560@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5D594@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F5D51C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F5D5BC()
{
  char *v0;

  return sub_1B0F5D51C(*v0);
}

uint64_t sub_1B0F5D5C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5D5F0()
{
  sub_1B0F5FE04();
  return sub_1B10362B4();
}

uint64_t sub_1B0F5D618()
{
  sub_1B0F5FE04();
  return sub_1B10362C0();
}

uint64_t sub_1B0F5D640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  int v62;
  char v63;

  v55 = a2;
  v3 = sub_1B103461C();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  MEMORY[0x1E0C80A78](v3);
  v54 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE600);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v9 = sub_1B1034AD8();
  v51 = v10;
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_retain();
  v11 = sub_1B1034AD8();
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 24);
  v56 = a1;
  v15 = (_QWORD *)a1;
  v16 = v11;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  sub_1B0F5FE04();
  swift_retain();
  v17 = v57;
  sub_1B1036278();
  if (v17)
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v56);
  }
  else
  {
    v57 = v6;
    v49 = v13;
    v18 = v54;
    v19 = v55;
    LOBYTE(v58) = 0;
    v20 = sub_1B103608C();
    v23 = v21;
    v50 = v16;
    if (v21)
    {
      v24 = v20;
    }
    else
    {
      sub_1B1034610();
      v24 = sub_1B1034604();
      v23 = v25;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v53);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
    v63 = 1;
    sub_1B0F5FE48();
    swift_bridgeObjectRetain();
    v26 = v5;
    sub_1B10360A4();
    v48 = v24;
    v54 = v23;
    v27 = v58;
    v63 = 2;
    v52 = v60;
    v53 = v59;
    v62 = v61;
    sub_1B0F5FD10(v58, v59, v60, v61);
    sub_1B0F56A98();
    sub_1B10360A4();
    v28 = v9;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v26);
    v29 = v58;
    v30 = v59;
    v47 = v27;
    v57 = v60;
    LODWORD(v26) = v61;
    v45 = v58;
    sub_1B0F56C04(v58, v59, v60, v61);
    swift_bridgeObjectRetain();
    v31 = v27;
    v32 = v52;
    v33 = v62;
    sub_1B0F5FD10(v31, v53, v52, v62);
    v44 = v30;
    v34 = v57;
    sub_1B0F56C04(v29, v30, v57, v26);
    swift_bridgeObjectRetain();
    v46 = v26;
    sub_1B0F56B88(v29, v30, v34, v26);
    v35 = v47;
    v36 = v53;
    sub_1B0F5FD28(v47, v53, v32, v33);
    v37 = v54;
    swift_bridgeObjectRelease();
    v38 = v19;
    *(_QWORD *)v19 = v48;
    *(_QWORD *)(v19 + 8) = v37;
    *(_QWORD *)(v19 + 16) = v35;
    *(_QWORD *)(v19 + 24) = v36;
    *(_QWORD *)(v19 + 32) = v32;
    *(_BYTE *)(v19 + 40) = v33;
    v39 = v45;
    *(_QWORD *)(v19 + 48) = v45;
    v40 = v44;
    v41 = v56;
    v42 = v57;
    *(_QWORD *)(v38 + 56) = v44;
    *(_QWORD *)(v38 + 64) = v42;
    *(_BYTE *)(v38 + 72) = v26;
    *(_QWORD *)(v38 + 80) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v38 + 88) = v28;
    v43 = v50;
    *(_QWORD *)(v38 + 96) = v51;
    *(_QWORD *)(v38 + 104) = v43;
    *(_QWORD *)(v38 + 112) = v49;
    __swift_destroy_boxed_opaque_existential_1(v41);
    swift_bridgeObjectRelease();
    sub_1B0F5FD28(v47, v36, v32, v33);
    sub_1B0F56B88(v39, v40, v57, v46);
  }
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F5DB74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F5AFFC();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F5DBD0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F5DBD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*sub_1B0F5DC00())()
{
  return nullsub_1;
}

uint64_t sub_1B0F5DC10()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 88))
    return swift_retain();
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5DC70()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 104))
    return swift_retain();
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F5DCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F5D640(a1, a2);
}

unint64_t sub_1B0F5DCE4()
{
  unint64_t result;

  result = qword_1EEEDE490;
  if (!qword_1EEEDE490)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DA2C, &type metadata for DynamicKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDE490);
  }
  return result;
}

uint64_t sub_1B0F5DD28()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0F5DD4C(uint64_t a1)
{
  return sub_1B0F5DD74(a1, (uint64_t (*)(void))sub_1B0FDD200, &qword_1EEEDE5D8);
}

uint64_t sub_1B0F5DD60(uint64_t a1)
{
  return sub_1B0F5DD74(a1, (uint64_t (*)(void))sub_1B0FDD418, &qword_1EEEDE4E0);
}

uint64_t sub_1B0F5DD74(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10)
    goto LABEL_21;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v14, v10);
  v16 = v14 + v10;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v16;
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_1B1036050();
  __break(1u);
  return result;
}

unint64_t sub_1B0F5DEEC()
{
  unint64_t result;

  result = qword_1EEEDE4A0;
  if (!qword_1EEEDE4A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10370F0, &type metadata for ShapeContentBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4A0);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1B5E15248);
  return result;
}

unint64_t sub_1B0F5DFA0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EEEDE4B0;
  if (!qword_1EEEDE4B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE4A8);
    v2 = sub_1B0F5E004();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4B0);
  }
  return result;
}

unint64_t sub_1B0F5E004()
{
  unint64_t result;

  result = qword_1EEEDE4B8;
  if (!qword_1EEEDE4B8)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for AnyViewModifier, &type metadata for AnyViewModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4B8);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1B0F5E070(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B0F5E0B0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t dispatch thunk of ShapeContent.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ShapeContent.modifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ShapeContent.modifiers.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ShapeContent.modifiers.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ShapeContent.store.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ShapeContent.localStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t initializeWithCopy for AnyViewModifier(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyViewModifier(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyViewModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeContentBox(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeContentBox(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeContentBox()
{
  return &type metadata for ShapeContentBox;
}

uint64_t sub_1B0F5E3B8()
{
  return MEMORY[0x1E0CDFD08];
}

ValueMetadata *type metadata accessor for ShapeContentBox.CodingKeys()
{
  return &type metadata for ShapeContentBox.CodingKeys;
}

unint64_t sub_1B0F5E3E0()
{
  unint64_t result;

  result = qword_1EEEDE4C8;
  if (!qword_1EEEDE4C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10370C8, &type metadata for ShapeContentBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4C8);
  }
  return result;
}

unint64_t sub_1B0F5E428()
{
  unint64_t result;

  result = qword_1EEEDE4D0;
  if (!qword_1EEEDE4D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037000, &type metadata for ShapeContentBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4D0);
  }
  return result;
}

unint64_t sub_1B0F5E470()
{
  unint64_t result;

  result = qword_1EEEDE4D8;
  if (!qword_1EEEDE4D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037028, &type metadata for ShapeContentBox.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4D8);
  }
  return result;
}

uint64_t sub_1B0F5E4B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_1B0F5A0E4(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1B0F5E52C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyViewModifier(a2, a1);
  return a2;
}

unint64_t sub_1B0F5E568()
{
  unint64_t result;

  result = qword_1EEEDE4E8;
  if (!qword_1EEEDE4E8)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for AnyViewModifier, &type metadata for AnyViewModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4E8);
  }
  return result;
}

uint64_t sub_1B0F5E5AC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1B0F5E5D0(uint64_t a1)
{
  destroy for AnyViewModifier();
  return a1;
}

uint64_t sub_1B0F5E604(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return sub_1B0F5A880(a3);
  }
  return result;
}

uint64_t destroy for RoundedRectangleView(uint64_t a1)
{
  int v2;
  unsigned int v3;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2 & 1);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1B0F5E6A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return sub_1B0F571D8(a3);
  }
  return result;
}

uint64_t initializeWithCopy for RoundedRectangleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v6 = v5 & 1;
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    sub_1B0F5E604(v7, v8, v9, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v6;
  }
  v10 = *(unsigned __int8 *)(a2 + 72);
  if (v10 <= 0xFD)
  {
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 64);
    sub_1B0F56B9C(v11, v12, v13, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    *(_BYTE *)(a1 + 72) = v10;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  }
  v14 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RoundedRectangleView(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 16);
  v5 = (__int128 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      v8 = *v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *v4 = v8;
    }
    else
    {
      v17 = v6 & 1;
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 32);
      sub_1B0F5E604(v18, v19, v20, v6 & 1);
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v19;
      *(_QWORD *)(a1 + 32) = v20;
      *(_BYTE *)(a1 + 40) = v17;
    }
  }
  else if (v6 == 255)
  {
    sub_1B0F5A3AC(a1 + 16, &qword_1EEEDE4F0);
    v7 = *(_OWORD *)(a2 + 25);
    *v4 = *v5;
    *(_OWORD *)(a1 + 25) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    sub_1B0F5E604(v10, v11, v12, v6 & 1);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 40) = v9;
    sub_1B0F5E6A0(v13, v14, v15, v16);
  }
  v21 = (_OWORD *)(a1 + 48);
  v22 = (_OWORD *)(a2 + 48);
  v23 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) <= 0xFDu)
  {
    if (v23 <= 0xFD)
    {
      v29 = *(_QWORD *)(a2 + 48);
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(_QWORD *)(a2 + 64);
      sub_1B0F56B9C(v29, v30, v31, *(_BYTE *)(a2 + 72));
      v32 = *(_QWORD *)(a1 + 48);
      v33 = *(_QWORD *)(a1 + 56);
      v34 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v29;
      *(_QWORD *)(a1 + 56) = v30;
      *(_QWORD *)(a1 + 64) = v31;
      v35 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v23;
      sub_1B0F56ADC(v32, v33, v34, v35);
    }
    else
    {
      sub_1B0F5EA14(a1 + 48);
      v25 = *(_OWORD *)(a2 + 57);
      *v21 = *v22;
      *(_OWORD *)(a1 + 57) = v25;
    }
  }
  else if (v23 <= 0xFD)
  {
    v26 = *(_QWORD *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 56);
    v28 = *(_QWORD *)(a2 + 64);
    sub_1B0F56B9C(v26, v27, v28, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v26;
    *(_QWORD *)(a1 + 56) = v27;
    *(_QWORD *)(a1 + 64) = v28;
    *(_BYTE *)(a1 + 72) = v23;
  }
  else
  {
    v24 = *v22;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *v21 = v24;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t sub_1B0F5EA14(uint64_t a1)
{
  destroy for StringResolvable(a1);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for RoundedRectangleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 == 255)
    goto LABEL_4;
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (v6 == 255)
  {
    sub_1B0F5A3AC(a1 + 16, &qword_1EEEDE4F0);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_6;
  }
  v7 = v5 & 1;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v6 & 1;
  sub_1B0F5E6A0(v9, v10, v11, v7);
LABEL_6:
  v12 = *(unsigned __int8 *)(a1 + 72);
  if (v12 <= 0xFD)
  {
    v13 = *(unsigned __int8 *)(a2 + 72);
    if (v13 <= 0xFD)
    {
      v14 = *(_QWORD *)(a2 + 64);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = v14;
      *(_BYTE *)(a1 + 72) = v13;
      sub_1B0F56ADC(v15, v16, v17, v12);
      goto LABEL_11;
    }
    sub_1B0F5EA14(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
LABEL_11:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v18;
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoundedRectangleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoundedRectangleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoundedRectangleView()
{
  return &type metadata for RoundedRectangleView;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RectangleView()
{
  return &type metadata for RectangleView;
}

uint64_t destroy for CapsuleView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CapsuleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CapsuleView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F56B9C(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F56ADC(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F5EA14(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CapsuleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 <= 0xFD)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 <= 0xFD)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = v7;
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F56ADC(v8, v9, v10, v5);
      goto LABEL_6;
    }
    sub_1B0F5EA14(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for CapsuleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CapsuleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleView()
{
  return &type metadata for CapsuleView;
}

ValueMetadata *type metadata accessor for EllipseView()
{
  return &type metadata for EllipseView;
}

uint64_t initializeBufferWithCopyOfBuffer for IntResolvable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s6LiftUI13RectangleViewVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *_s6LiftUI13RectangleViewVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *_s6LiftUI13RectangleViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  return a1;
}

uint64_t _s6LiftUI13RectangleViewVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t _s6LiftUI13RectangleViewVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B0F5F2F0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleView()
{
  return &type metadata for CircleView;
}

uint64_t sub_1B0F5F34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F360);
}

unint64_t sub_1B0F5F360()
{
  unint64_t result;

  result = qword_1EEEDE4F8;
  if (!qword_1EEEDE4F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10371E8, &type metadata for CircleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE4F8);
  }
  return result;
}

uint64_t sub_1B0F5F3A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F5F3C0, (uint64_t (*)(void))sub_1B0F5F404, (uint64_t (*)(void))sub_1B0F5F448);
}

unint64_t sub_1B0F5F3C0()
{
  unint64_t result;

  result = qword_1EEEDE500;
  if (!qword_1EEEDE500)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10371C0, &type metadata for CircleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE500);
  }
  return result;
}

unint64_t sub_1B0F5F404()
{
  unint64_t result;

  result = qword_1EEEDE508;
  if (!qword_1EEEDE508)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037188, &type metadata for CircleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE508);
  }
  return result;
}

unint64_t sub_1B0F5F448()
{
  unint64_t result;

  result = qword_1EEEDE510;
  if (!qword_1EEEDE510)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037204, &type metadata for CircleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE510);
  }
  return result;
}

uint64_t sub_1B0F5F48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F4A0);
}

unint64_t sub_1B0F5F4A0()
{
  unint64_t result;

  result = qword_1EEEDE518;
  if (!qword_1EEEDE518)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10375F4, &type metadata for CircleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE518);
  }
  return result;
}

uint64_t sub_1B0F5F4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F4F8);
}

unint64_t sub_1B0F5F4F8()
{
  unint64_t result;

  result = qword_1EEEDE520;
  if (!qword_1EEEDE520)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10372B4, &type metadata for EllipseView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE520);
  }
  return result;
}

uint64_t sub_1B0F5F53C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F5F558, (uint64_t (*)(void))sub_1B0F5F59C, (uint64_t (*)(void))sub_1B0F5F5E0);
}

unint64_t sub_1B0F5F558()
{
  unint64_t result;

  result = qword_1EEEDE528;
  if (!qword_1EEEDE528)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103728C, &type metadata for EllipseView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE528);
  }
  return result;
}

unint64_t sub_1B0F5F59C()
{
  unint64_t result;

  result = qword_1EEEDE530;
  if (!qword_1EEEDE530)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037254, &type metadata for EllipseView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE530);
  }
  return result;
}

unint64_t sub_1B0F5F5E0()
{
  unint64_t result;

  result = qword_1EEEDE538;
  if (!qword_1EEEDE538)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10372D0, &type metadata for EllipseView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE538);
  }
  return result;
}

uint64_t sub_1B0F5F624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F638);
}

unint64_t sub_1B0F5F638()
{
  unint64_t result;

  result = qword_1EEEDE540;
  if (!qword_1EEEDE540)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10375D8, &type metadata for EllipseView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE540);
  }
  return result;
}

uint64_t sub_1B0F5F67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F690);
}

unint64_t sub_1B0F5F690()
{
  unint64_t result;

  result = qword_1EEEDE548;
  if (!qword_1EEEDE548)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037380, &type metadata for CapsuleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE548);
  }
  return result;
}

uint64_t sub_1B0F5F6D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F5F6F0, (uint64_t (*)(void))sub_1B0F5F734, (uint64_t (*)(void))sub_1B0F5F778);
}

unint64_t sub_1B0F5F6F0()
{
  unint64_t result;

  result = qword_1EEEDE550;
  if (!qword_1EEEDE550)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037358, &type metadata for CapsuleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE550);
  }
  return result;
}

unint64_t sub_1B0F5F734()
{
  unint64_t result;

  result = qword_1EEEDE558;
  if (!qword_1EEEDE558)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037320, &type metadata for CapsuleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE558);
  }
  return result;
}

unint64_t sub_1B0F5F778()
{
  unint64_t result;

  result = qword_1EEEDE560;
  if (!qword_1EEEDE560)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103739C, &type metadata for CapsuleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE560);
  }
  return result;
}

uint64_t sub_1B0F5F7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F7D0);
}

unint64_t sub_1B0F5F7D0()
{
  unint64_t result;

  result = qword_1EEEDE568;
  if (!qword_1EEEDE568)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10375BC, &type metadata for CapsuleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE568);
  }
  return result;
}

uint64_t sub_1B0F5F814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F828);
}

unint64_t sub_1B0F5F828()
{
  unint64_t result;

  result = qword_1EEEDE570;
  if (!qword_1EEEDE570)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103744C, &type metadata for RectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE570);
  }
  return result;
}

uint64_t sub_1B0F5F86C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F5F888, (uint64_t (*)(void))sub_1B0F5F8CC, (uint64_t (*)(void))sub_1B0F5F910);
}

unint64_t sub_1B0F5F888()
{
  unint64_t result;

  result = qword_1EEEDE578;
  if (!qword_1EEEDE578)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037424, &type metadata for RectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE578);
  }
  return result;
}

unint64_t sub_1B0F5F8CC()
{
  unint64_t result;

  result = qword_1EEEDE580;
  if (!qword_1EEEDE580)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10373EC, &type metadata for RectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE580);
  }
  return result;
}

unint64_t sub_1B0F5F910()
{
  unint64_t result;

  result = qword_1EEEDE588;
  if (!qword_1EEEDE588)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037468, &type metadata for RectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE588);
  }
  return result;
}

uint64_t sub_1B0F5F954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F968);
}

unint64_t sub_1B0F5F968()
{
  unint64_t result;

  result = qword_1EEEDE590;
  if (!qword_1EEEDE590)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10375A0, &type metadata for RectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE590);
  }
  return result;
}

uint64_t sub_1B0F5F9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5F9C0);
}

unint64_t sub_1B0F5F9C0()
{
  unint64_t result;

  result = qword_1EEEDE598;
  if (!qword_1EEEDE598)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037518, &type metadata for RoundedRectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE598);
  }
  return result;
}

uint64_t sub_1B0F5FA04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F5FA64, (uint64_t (*)(void))sub_1B0F5FAA8, (uint64_t (*)(void))sub_1B0F5FAEC);
}

uint64_t sub_1B0F5FA20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1B0F5FA64()
{
  unint64_t result;

  result = qword_1EEEDE5A0;
  if (!qword_1EEEDE5A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10374F0, &type metadata for RoundedRectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE5A0);
  }
  return result;
}

unint64_t sub_1B0F5FAA8()
{
  unint64_t result;

  result = qword_1EEEDE5A8;
  if (!qword_1EEEDE5A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10374B8, &type metadata for RoundedRectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE5A8);
  }
  return result;
}

unint64_t sub_1B0F5FAEC()
{
  unint64_t result;

  result = qword_1EEEDE5B0;
  if (!qword_1EEEDE5B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037534, &type metadata for RoundedRectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE5B0);
  }
  return result;
}

uint64_t sub_1B0F5FB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FB44(a1, a2, a3, (void (*)(void))sub_1B0F5FB84);
}

uint64_t sub_1B0F5FB44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FB84()
{
  unint64_t result;

  result = qword_1EEEDE5B8;
  if (!qword_1EEEDE5B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037584, &type metadata for RoundedRectangleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDE5B8);
  }
  return result;
}

uint64_t sub_1B0F5FBC8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FBD8(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5F9C0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F5FBFC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FC0C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5F828();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F5FC30()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FC40(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5F690();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F5FC64()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FC74(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5F4F8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F5FC98()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F5FCA8(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5F360();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F5FCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B1034A0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F5FD10(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F5E604(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F5FD28(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F5E6A0(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F5FD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B1034A0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F5FD84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B0F5FDC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B1034A0C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B0F5FE04()
{
  unint64_t result;

  result = qword_1EEEDE608;
  if (!qword_1EEEDE608)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10379DC, &type metadata for RoundedRectangleView.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE608);
  }
  return result;
}

unint64_t sub_1B0F5FE48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE610;
  if (!qword_1EEEDE610)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE4F0);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for Referenceable<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE610);
  }
  return result;
}

unint64_t sub_1B0F5FE94()
{
  unint64_t result;

  result = qword_1EEEDE618;
  if (!qword_1EEEDE618)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CE0558], MEMORY[0x1E0CE0580]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE618);
  }
  return result;
}

uint64_t sub_1B0F5FED8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a2;
  v4 = sub_1B103461C();
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE620);
  v33 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v8 = sub_1B1034AD8();
  v32 = v9;
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_retain();
  v10 = sub_1B1034AD8();
  v12 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F601A0();
  swift_retain();
  sub_1B1036278();
  if (v2)
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v33;
    v14 = v34;
    v29 = v12;
    v30 = v8;
    v15 = v35;
    v16 = v36;
    v17 = sub_1B103608C();
    v20 = v18;
    if (v18)
    {
      v21 = v17;
    }
    else
    {
      sub_1B1034610();
      v22 = sub_1B1034604();
      v20 = v23;
      v24 = v14;
      v21 = v22;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v16);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v37);
    v26 = v31;
    v25 = v32;
    swift_bridgeObjectRetain_n();
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    v28 = v30;
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v26 = v21;
    v26[1] = v20;
    v26[2] = v27;
    v26[3] = v28;
    v26[4] = v25;
    v26[5] = v10;
    v26[6] = v29;
  }
  return result;
}

unint64_t sub_1B0F601A0()
{
  unint64_t result;

  result = qword_1EEEDE628;
  if (!qword_1EEEDE628)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103798C, &type metadata for BasicShapeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE628);
  }
  return result;
}

uint64_t sub_1B0F601E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F56C04(v2, v3, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

unint64_t sub_1B0F60264()
{
  unint64_t result;

  result = qword_1EEEDE630;
  if (!qword_1EEEDE630)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFFE0], MEMORY[0x1E0CDFFF0]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE630);
  }
  return result;
}

unint64_t sub_1B0F602A8()
{
  unint64_t result;

  result = qword_1EEEDE640;
  if (!qword_1EEEDE640)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103793C, &type metadata for CapsuleView.CapsuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE640);
  }
  return result;
}

unint64_t sub_1B0F602EC()
{
  unint64_t result;

  result = qword_1EEEDE648;
  if (!qword_1EEEDE648)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFE70], MEMORY[0x1E0CDFE88]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE648);
  }
  return result;
}

unint64_t sub_1B0F60330()
{
  unint64_t result;

  result = qword_1EEEDE650;
  if (!qword_1EEEDE650)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFAA8], MEMORY[0x1E0CDFAD0]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE650);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CapsuleView.CapsuleCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F603C0 + 4 * byte_1B1036F85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F603F4 + 4 * byte_1B1036F80[v4]))();
}

uint64_t sub_1B0F603F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F603FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F60404);
  return result;
}

uint64_t sub_1B0F60410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F60418);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F6041C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F60424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CapsuleView.CapsuleCodingKeys()
{
  return &type metadata for CapsuleView.CapsuleCodingKeys;
}

uint64_t getEnumTagSinglePayload for BasicShapeCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for BasicShapeCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F604D4 + 4 * byte_1B1036F8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F604F4 + 4 * byte_1B1036F8F[v4]))();
}

_BYTE *sub_1B0F604D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F604F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F604FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F60504(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F6050C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F60514(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1B0F60520()
{
  return 0;
}

ValueMetadata *type metadata accessor for BasicShapeCodingKeys()
{
  return &type metadata for BasicShapeCodingKeys;
}

uint64_t getEnumTagSinglePayload for ViewContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6LiftUI15ShapeContentBoxV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0F60614 + 4 * byte_1B1036F99[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0F60648 + 4 * byte_1B1036F94[v4]))();
}

uint64_t sub_1B0F60648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F60650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F60658);
  return result;
}

uint64_t sub_1B0F60664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F6066CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0F60670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F60678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoundedRectangleView.RoundedRectangleCodingKeys()
{
  return &type metadata for RoundedRectangleView.RoundedRectangleCodingKeys;
}

unint64_t sub_1B0F60698()
{
  unint64_t result;

  result = qword_1EEEDE658;
  if (!qword_1EEEDE658)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFAB0], MEMORY[0x1E0CDFAD0]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE658);
  }
  return result;
}

unint64_t sub_1B0F606E0()
{
  unint64_t result;

  result = qword_1EEEDE660;
  if (!qword_1EEEDE660)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFE78], MEMORY[0x1E0CDFE88]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE660);
  }
  return result;
}

unint64_t sub_1B0F60728()
{
  unint64_t result;

  result = qword_1EEEDE668;
  if (!qword_1EEEDE668)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFFD8], MEMORY[0x1E0CDFFF0]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE668);
  }
  return result;
}

unint64_t sub_1B0F60770()
{
  unint64_t result;

  result = qword_1EEEDE670;
  if (!qword_1EEEDE670)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CE0560], MEMORY[0x1E0CE0580]);
    atomic_store(result, (unint64_t *)&qword_1EEEDE670);
  }
  return result;
}

uint64_t sub_1B0F607B4()
{
  return sub_1B0F524FC(&qword_1EEEDE678, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
}

unint64_t sub_1B0F607E4()
{
  unint64_t result;

  result = qword_1EEEDE680;
  if (!qword_1EEEDE680)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037734, &type metadata for RoundedRectangleView.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE680);
  }
  return result;
}

unint64_t sub_1B0F6082C()
{
  unint64_t result;

  result = qword_1EEEDE688;
  if (!qword_1EEEDE688)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037824, &type metadata for BasicShapeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE688);
  }
  return result;
}

unint64_t sub_1B0F60874()
{
  unint64_t result;

  result = qword_1EEEDE690;
  if (!qword_1EEEDE690)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037914, &type metadata for CapsuleView.CapsuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE690);
  }
  return result;
}

unint64_t sub_1B0F608BC()
{
  unint64_t result;

  result = qword_1EEEDE698;
  if (!qword_1EEEDE698)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103784C, &type metadata for CapsuleView.CapsuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE698);
  }
  return result;
}

unint64_t sub_1B0F60904()
{
  unint64_t result;

  result = qword_1EEEDE6A0;
  if (!qword_1EEEDE6A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037874, &type metadata for CapsuleView.CapsuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6A0);
  }
  return result;
}

unint64_t sub_1B0F6094C()
{
  unint64_t result;

  result = qword_1EEEDE6A8;
  if (!qword_1EEEDE6A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103775C, &type metadata for BasicShapeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6A8);
  }
  return result;
}

unint64_t sub_1B0F60994()
{
  unint64_t result;

  result = qword_1EEEDE6B0;
  if (!qword_1EEEDE6B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037784, &type metadata for BasicShapeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6B0);
  }
  return result;
}

unint64_t sub_1B0F609DC()
{
  unint64_t result;

  result = qword_1EEEDE6B8;
  if (!qword_1EEEDE6B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103766C, &type metadata for RoundedRectangleView.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6B8);
  }
  return result;
}

unint64_t sub_1B0F60A24()
{
  unint64_t result;

  result = qword_1EEEDE6C0;
  if (!qword_1EEEDE6C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037694, &type metadata for RoundedRectangleView.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6C0);
  }
  return result;
}

uint64_t sub_1B0F60A68()
{
  return 25705;
}

uint64_t sub_1B0F60A74()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

ValueMetadata *type metadata accessor for ButtonStyleModifier()
{
  return &type metadata for ButtonStyleModifier;
}

uint64_t sub_1B0F60AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_1B1034EBC();
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_1B1034EC8();
}

uint64_t sub_1B0F60BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_1B1034EBC();
  MEMORY[0x1E0C80A78](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_1B1034EC8();
}

void sub_1B0F60C74(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD v55[34];
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v55[33] = a1;
  v56 = a2;
  v55[32] = a5;
  v7 = sub_1B1034BEC();
  v55[13] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v55[12] = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B0F524FC(&qword_1EEEDE6F0, v9, MEMORY[0x1E0CDAEA8]);
  v71 = a3;
  v72 = v7;
  v69 = v10;
  v70 = v7;
  v73 = a4;
  v74 = v10;
  v11 = MEMORY[0x1E0CDDFE8];
  v65 = MEMORY[0x1B5E15134](0, &v71, MEMORY[0x1E0CDDFE8], 0);
  v55[11] = *(_QWORD *)(v65 - 8);
  v12 = MEMORY[0x1E0C80A78](v65);
  v55[14] = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v55[21] = (char *)v55 - v14;
  v15 = sub_1B1034FAC();
  v55[9] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v55[8] = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1B0F524FC(&qword_1EEEDE6E8, v17, MEMORY[0x1E0CDBC70]);
  v71 = a3;
  v72 = v15;
  v59 = v15;
  v73 = a4;
  v74 = v18;
  v68 = v18;
  v19 = MEMORY[0x1B5E15134](0, &v71, v11, 0);
  v55[7] = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v55[10] = (char *)v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v55[20] = (char *)v55 - v22;
  v23 = sub_1B1034A00();
  v24 = sub_1B0F524FC(&qword_1EEEDE6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  v71 = a3;
  v72 = v23;
  v73 = a4;
  v74 = v24;
  v66 = v24;
  v25 = MEMORY[0x1B5E15134](255, &v71, v11, 0);
  v55[24] = v19;
  v26 = sub_1B1034ED4();
  v55[23] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v55[22] = (char *)v55 - v27;
  v64 = swift_checkMetadataState();
  v55[4] = *(_QWORD *)(v64 - 8);
  v28 = MEMORY[0x1E0C80A78](v64);
  v55[3] = (char *)v55 - v29;
  v55[27] = v25;
  v55[5] = *(_QWORD *)(v25 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v55[6] = (char *)v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v55[19] = (char *)v55 - v32;
  v33 = sub_1B10350FC();
  v55[2] = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v55[1] = (char *)v55 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1B0F524FC(&qword_1EEEDE6D8, v35, MEMORY[0x1E0CDCDA0]);
  v71 = a3;
  v72 = v33;
  v62 = v36;
  v63 = v33;
  v73 = a4;
  v74 = v36;
  v37 = MEMORY[0x1B5E15134](0, &v71, v11, 0);
  v55[0] = *(_QWORD *)(v37 - 8);
  v38 = MEMORY[0x1E0C80A78](v37);
  MEMORY[0x1E0C80A78](v38);
  v55[16] = (char *)v55 - v39;
  v40 = sub_1B1034D9C();
  v41 = sub_1B0F524FC(&qword_1EEEDE6D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2B8], MEMORY[0x1E0CDB2A8]);
  v71 = a3;
  v72 = v40;
  v73 = a4;
  v74 = v41;
  v61 = v41;
  v42 = MEMORY[0x1B5E15134](255, &v71, v11, 0);
  v55[26] = v37;
  v43 = sub_1B1034ED4();
  v55[18] = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v55[17] = (char *)v55 - v44;
  v58 = v45;
  v67 = v26;
  v46 = sub_1B1034ED4();
  v55[29] = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v55[28] = (char *)v55 - v47;
  v60 = swift_checkMetadataState();
  v48 = MEMORY[0x1E0C80A78](v60);
  v55[25] = v42;
  v49 = MEMORY[0x1E0C80A78](v48);
  MEMORY[0x1E0C80A78](v49);
  v55[15] = (char *)v55 - v50;
  v57 = v46;
  v51 = sub_1B1034ED4();
  v55[30] = *(_QWORD *)(v51 - 8);
  v55[31] = v51;
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)v55 - v52;
  v54 = v56;
  v56 = v53;
  __asm { BR              X10 }
}

uint64_t sub_1B0F61228()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_1B1034D90();
  v8 = v0[38];
  v9 = v6;
  v10 = v0[39];
  sub_1B1035360();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v8);
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v8;
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v12 = v0[15];
  v13 = v0[25];
  sub_1B0F6D824(v5, v13, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(v5, v13);
  v0[33] = v14;
  sub_1B0F6609C(v12, v13, v5);
  v15 = v0[41];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v15;
  v16 = v0[40];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v16;
  v17 = swift_getOpaqueTypeConformance2();
  v18 = v0[17];
  sub_1B0F60AEC(v5, v13);
  v14(v5, v13);
  v0[53] = OpaqueTypeConformance2;
  v0[54] = v17;
  v19 = MEMORY[0x1E0CDB8A0];
  v20 = v0[36];
  v21 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v20, v0 + 53);
  v22 = v0[42];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v22;
  v23 = v0[44];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  v25 = v0[37];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v25;
  v26 = v0[46];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v26;
  v27 = swift_getOpaqueTypeConformance2();
  v0[51] = v24;
  v0[52] = v27;
  v28 = MEMORY[0x1B5E15188](v19, v0[45], v0 + 51);
  v29 = v0[28];
  sub_1B0F60AEC(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v0[18] + 8))(v18, v20);
  v0[49] = v21;
  v0[50] = v28;
  v30 = v0[35];
  MEMORY[0x1B5E15188](v19, v30, v0 + 49);
  v31 = v0[48];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v31;
  v32 = v0[47];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v32;
  swift_getOpaqueTypeConformance2();
  v33 = v0[34];
  sub_1B0F60AEC(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v29, v30);
  v34 = v0[37];
  ((void (*)(_QWORD, _QWORD))v0[33])(v0[15], v0[25]);
  v35 = v0[38];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v35;
  v36 = v0[39];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v0[41];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v38;
  v39 = v0[40];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v39;
  v40 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v7 - 184) = v37;
  *(_QWORD *)(v7 - 176) = v40;
  v41 = MEMORY[0x1E0CDB8A0];
  v42 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v20, v7 - 184);
  v43 = v0[42];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v43;
  v44 = v0[44];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v34;
  v46 = v0[46];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v46;
  v47 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v7 - 200) = v45;
  *(_QWORD *)(v7 - 192) = v47;
  v48 = MEMORY[0x1B5E15188](v41, v0[45], v7 - 200);
  *(_QWORD *)(v7 - 216) = v42;
  *(_QWORD *)(v7 - 208) = v48;
  v49 = MEMORY[0x1B5E15188](v41, v30, v7 - 216);
  v50 = v0[48];
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v50;
  v51 = v0[47];
  *(_QWORD *)(v7 - 104) = v9;
  *(_QWORD *)(v7 - 96) = v51;
  v52 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v7 - 232) = v49;
  *(_QWORD *)(v7 - 224) = v52;
  v53 = v0[31];
  MEMORY[0x1B5E15188](v41, v53, v7 - 232);
  sub_1B0F6609C(v33, v53, v0[32]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[30] + 8))(v33, v53);
}

uint64_t sub_1B0F61E9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B0F61ED4 + 4 * byte_1B1037A9A[a1]))(0xD000000000000011, 0x80000001B104BF20);
}

uint64_t sub_1B0F61ED4()
{
  return 0x6465726564726F62;
}

uint64_t sub_1B0F61EEC()
{
  return 0x6E69616C70;
}

uint64_t sub_1B0F61F00()
{
  return 0x656C726564726F62;
}

uint64_t sub_1B0F61F1C()
{
  return 0x6974616D6F747561;
}

void sub_1B0F61F38(char *a1)
{
  sub_1B100E0CC(*a1);
}

void sub_1B0F61F44()
{
  char *v0;

  sub_1B100F654(*v0);
}

void sub_1B0F61F4C(uint64_t a1)
{
  char *v1;

  sub_1B1012C70(a1, *v1);
}

void sub_1B0F61F54(uint64_t a1)
{
  char *v1;

  sub_1B1014318(a1, *v1);
}

uint64_t sub_1B0F61F5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F62A54();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F61F88@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F61E9C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F61FB0()
{
  sub_1B0F62AB0();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F6200C()
{
  sub_1B0F62AB0();
  return sub_1B1035CA8();
}

uint64_t sub_1B0F62064@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F620B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F62A9C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F620DC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F62130()
{
  sub_1B0F626B4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F62158()
{
  sub_1B0F626B4();
  return sub_1B10362C0();
}

void sub_1B0F62180(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1[3];
  v5 = a1[4];
  v29 = *v2;
  v28 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v27 = sub_1B1034D9C();
  v26 = sub_1B0F524FC(&qword_1EEEDE6D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2B8], MEMORY[0x1E0CDB2A8]);
  v34 = v4;
  v35 = v27;
  v36 = v5;
  v37 = v26;
  v6 = MEMORY[0x1E0CDDFE8];
  MEMORY[0x1B5E15134](255, &v34, MEMORY[0x1E0CDDFE8], 0);
  v25 = sub_1B10350FC();
  v24 = sub_1B0F524FC(&qword_1EEEDE6D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCDC0], MEMORY[0x1E0CDCDA0]);
  v34 = v4;
  v35 = v25;
  v36 = v5;
  v37 = v24;
  MEMORY[0x1B5E15134](255, &v34, v6, 0);
  v7 = sub_1B1034ED4();
  v23 = sub_1B1034A00();
  v22 = sub_1B0F524FC(&qword_1EEEDE6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  v34 = v4;
  v35 = v23;
  v36 = v5;
  v37 = v22;
  MEMORY[0x1B5E15134](255, &v34, v6, 0);
  v21 = sub_1B1034FAC();
  v20 = sub_1B0F524FC(&qword_1EEEDE6E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBC90], MEMORY[0x1E0CDBC70]);
  v34 = v4;
  v35 = v21;
  v36 = v5;
  v37 = v20;
  MEMORY[0x1B5E15134](255, &v34, v6, 0);
  v8 = sub_1B1034ED4();
  v17 = sub_1B1034ED4();
  v18 = sub_1B1034BEC();
  v9 = sub_1B0F524FC(&qword_1EEEDE6F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDAEB8], MEMORY[0x1E0CDAEA8]);
  v34 = v4;
  v35 = v18;
  v36 = v5;
  v37 = v9;
  MEMORY[0x1B5E15134](255, &v34, v6, 0);
  v10 = sub_1B1034ED4();
  a2[3] = v10;
  v34 = v4;
  v35 = v27;
  v36 = v5;
  v37 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v34 = v4;
  v35 = v25;
  v36 = v5;
  v37 = v24;
  v33[0] = OpaqueTypeConformance2;
  v33[1] = swift_getOpaqueTypeConformance2();
  v12 = MEMORY[0x1E0CDB8A0];
  v13 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v7, v33);
  v34 = v4;
  v35 = v23;
  v36 = v5;
  v37 = v22;
  v14 = swift_getOpaqueTypeConformance2();
  v34 = v4;
  v35 = v21;
  v36 = v5;
  v37 = v20;
  v32[0] = v14;
  v32[1] = swift_getOpaqueTypeConformance2();
  v31[0] = v13;
  v31[1] = MEMORY[0x1B5E15188](v12, v8, v32);
  v15 = MEMORY[0x1B5E15188](v12, v17, v31);
  v34 = v4;
  v35 = v18;
  v36 = v5;
  v37 = v9;
  v30[0] = v15;
  v30[1] = swift_getOpaqueTypeConformance2();
  a2[4] = MEMORY[0x1B5E15188](v12, v10, v30);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  sub_1B0F60C74((uint64_t)v28, (char *)v29, v4, v5, (uint64_t)boxed_opaque_existential_1);
}

_QWORD *sub_1B0F62504@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B0F62594(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

unint64_t sub_1B0F6252C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F62550();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F62550()
{
  unint64_t result;

  result = qword_1EEEDE6C8;
  if (!qword_1EEEDE6C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037AD4, &type metadata for ButtonStyleModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE6C8);
  }
  return result;
}

_QWORD *sub_1B0F62594(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE6F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F626B4();
  sub_1B1036278();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    sub_1B0F626F8();
    sub_1B10360BC();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[15];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1B0F626B4()
{
  unint64_t result;

  result = qword_1EEEDE700;
  if (!qword_1EEEDE700)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037D14, &type metadata for ButtonStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE700);
  }
  return result;
}

unint64_t sub_1B0F626F8()
{
  unint64_t result;

  result = qword_1EEEDE708;
  if (!qword_1EEEDE708)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037CEC, &type metadata for ButtonStyleType);
    atomic_store(result, (unint64_t *)&qword_1EEEDE708);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ButtonStyleModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F6277C + 4 * byte_1B1037A9F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F6279C + 4 * byte_1B1037AA4[v4]))();
}

_BYTE *sub_1B0F6277C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F6279C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F627A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F627AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F627B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F627BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ButtonStyleModifier.CodingKeys()
{
  return &type metadata for ButtonStyleModifier.CodingKeys;
}

uint64_t getEnumTagSinglePayload for MathOperation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6LiftUI15ButtonStyleTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0F628B4 + 4 * byte_1B1037AAE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0F628E8 + 4 * byte_1B1037AA9[v4]))();
}

uint64_t sub_1B0F628E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F628F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F628F8);
  return result;
}

uint64_t sub_1B0F62904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F6290CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0F62910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F62918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonStyleType()
{
  return &type metadata for ButtonStyleType;
}

unint64_t sub_1B0F62938()
{
  unint64_t result;

  result = qword_1EEEDE710;
  if (!qword_1EEEDE710)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037BD4, &type metadata for ButtonStyleType);
    atomic_store(result, (unint64_t *)&qword_1EEEDE710);
  }
  return result;
}

unint64_t sub_1B0F62980()
{
  unint64_t result;

  result = qword_1EEEDE718;
  if (!qword_1EEEDE718)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037CC4, &type metadata for ButtonStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE718);
  }
  return result;
}

unint64_t sub_1B0F629C8()
{
  unint64_t result;

  result = qword_1EEEDE720;
  if (!qword_1EEEDE720)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037BFC, &type metadata for ButtonStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE720);
  }
  return result;
}

unint64_t sub_1B0F62A10()
{
  unint64_t result;

  result = qword_1EEEDE728;
  if (!qword_1EEEDE728)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037C24, &type metadata for ButtonStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE728);
  }
  return result;
}

uint64_t sub_1B0F62A54()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B0F62A9C()
{
  return 0x656C797473;
}

unint64_t sub_1B0F62AB0()
{
  unint64_t result;

  result = qword_1EEEDE730;
  if (!qword_1EEEDE730)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037B5C, &type metadata for ButtonStyleType);
    atomic_store(result, (unint64_t *)&qword_1EEEDE730);
  }
  return result;
}

uint64_t destroy for ViewContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ToolbarModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a2 + 40;
  v7 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 40, v6);
  *(_BYTE *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToolbarModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    v4 = *(_BYTE *)(a2 + 80);
    v5 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
    *(_BYTE *)(a1 + 80) = v4;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t sub_1B0F62D10(uint64_t a1)
{
  destroy for ViewContentType(a1);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ToolbarModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarModifier()
{
  return &type metadata for ToolbarModifier;
}

uint64_t destroy for NavigationBarTitleDisplayModeModifier(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 24);
  if (v1 <= 0xFD)
    return sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v1);
  return result;
}

uint64_t initializeWithCopy for NavigationBarTitleDisplayModeModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 <= 0xFD)
  {
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  return a1;
}

uint64_t assignWithCopy for NavigationBarTitleDisplayModeModifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F56ADC(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F5EA14(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F56B9C(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NavigationBarTitleDisplayModeModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(unsigned __int8 *)(a2 + 24);
    if (v5 <= 0xFD)
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v6;
      *(_BYTE *)(a1 + 24) = v5;
      sub_1B0F56ADC(v7, v8, v9, v4);
      return a1;
    }
    sub_1B0F5EA14(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationBarTitleDisplayModeModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 125);
  v3 = (*(unsigned __int8 *)(a1 + 24) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x1F));
  v4 = v3 ^ 0x7F;
  v5 = 126 - v3;
  if (v4 >= 0x7D)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationBarTitleDisplayModeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = ((a2 ^ 0x7F) >> 1) & 0xFE | ((a2 ^ 0x7F) << 6);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarTitleDisplayModeModifier()
{
  return &type metadata for NavigationBarTitleDisplayModeModifier;
}

uint64_t sub_1B0F631A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;

  v8 = sub_1B1034B68();
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v3 + 24);
  if (v11 <= 0xFD)
  {
    v23 = a3;
    v24 = v8;
    v12 = a2;
    v13 = *(_QWORD *)(v3 + 8);
    v15 = *(_QWORD *)(v3 + 16);
    v26 = *(_QWORD *)v3;
    v14 = v26;
    v27 = v13;
    v28 = v15;
    v29 = v11;
    sub_1B0F56B9C(v26, v13, v15, v11);
    StringResolvable.resolved(with:)(v12);
    if (v4)
    {

      sub_1B0F56B88(v14, v13, v15, v11);
      v30 = 0;
    }
    else
    {
      v30 = 0;
      sub_1B0F56B88(v14, v13, v15, v11);
    }
    a3 = v23;
    v8 = v24;
  }
  else
  {
    v30 = v4;
  }
  v16 = sub_1B103605C();
  swift_bridgeObjectRelease();
  v17 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  if (v16 == 2)
    v19 = 2;
  else
    v19 = v16 == 1;
  v20 = v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v10, **((unsigned int **)&unk_1E629CD18 + v19), v8);
  v26 = v17;
  v27 = v18;
  a3[3] = MEMORY[0x1B5E15134](0, &v26, MEMORY[0x1E0CDED98], 0);
  v26 = v17;
  v27 = v18;
  a3[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a3);
  sub_1B1035534();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

uint64_t sub_1B0F633C8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F63418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F64858();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F63440@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F63494()
{
  sub_1B0F64358();
  return sub_1B10362B4();
}

uint64_t sub_1B0F634BC()
{
  sub_1B0F64358();
  return sub_1B10362C0();
}

uint64_t sub_1B0F634E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE780);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F64358();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F56A98();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F63614@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F631A8(a1, a2, a3);
}

uint64_t sub_1B0F63628@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F634E4(a1, a2);
}

uint64_t sub_1B0F6363C(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)&sub_1B0F63658 + 4 * byte_1B1037D70[a1]))();
}

uint64_t sub_1B0F6368C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B0F636C4 + 4 * byte_1B1037D7D[a1]))(0xD000000000000012, 0x80000001B104BE30);
}

uint64_t sub_1B0F636C4()
{
  return 0x6974616D6F747561;
}

uint64_t sub_1B0F636E0()
{
  return 0x417972616D697270;
}

uint64_t sub_1B0F63784()
{
  return 0x61426D6F74746F62;
}

uint64_t sub_1B0F637A4()
{
  return 0x737574617473;
}

uint64_t sub_1B0F637B8()
{
  return 0x7261646E6F636573;
}

uint64_t sub_1B0F637DC()
{
  return 0x6472616F6279656BLL;
}

uint64_t sub_1B0F637F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B0F6368C(*a1);
  v5 = v4;
  if (v3 == sub_1B0F6368C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B1036128();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B0F6387C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B103620C();
  sub_1B0F6368C(v1);
  sub_1B1035C00();
  swift_bridgeObjectRelease();
  return sub_1B103623C();
}

uint64_t sub_1B0F638DC()
{
  unsigned __int8 *v0;

  sub_1B0F6368C(*v0);
  sub_1B1035C00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F6391C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B103620C();
  sub_1B0F6368C(v1);
  sub_1B1035C00();
  swift_bridgeObjectRelease();
  return sub_1B103623C();
}

uint64_t sub_1B0F63978@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F642B0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F639A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F6368C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F639CC()
{
  sub_1B0F64878();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F63A28()
{
  sub_1B0F64878();
  return sub_1B1035CA8();
}

uint64_t sub_1B0F63A74(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E656D6563616C70;
  else
    return 0x746E65746E6F63;
}

uint64_t sub_1B0F63AB0(char *a1, char *a2)
{
  return sub_1B100DD54(*a1, *a2);
}

uint64_t sub_1B0F63ABC()
{
  return sub_1B100F734();
}

uint64_t sub_1B0F63AC4()
{
  return sub_1B1012AA0();
}

uint64_t sub_1B0F63ACC()
{
  return sub_1B1014550();
}

uint64_t sub_1B0F63AD4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F63B30@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F63A74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F63B58()
{
  char *v0;

  return sub_1B0F63A74(*v0);
}

uint64_t sub_1B0F63B60@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F63BC0()
{
  sub_1B0F641F4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F63BE8()
{
  sub_1B0F641F4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F63C10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v10;
  char v11;
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE768);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F641F4();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12[7] = 0;
  sub_1B0F64238();
  sub_1B10360BC();
  v21[5] = v18;
  v21[6] = v19;
  v21[0] = v13;
  v21[1] = v14;
  v21[2] = v15;
  v22 = v20;
  v21[3] = v16;
  v21[4] = v17;
  LOBYTE(v13) = 1;
  sub_1B10360B0();
  v10 = sub_1B0F642B0();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  if (v10 == 13)
    v11 = 0;
  else
    v11 = v10;
  v23 = v11;
  sub_1B0F642F8((uint64_t)v21, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B0F6432C((uint64_t)v21);
}

uint64_t sub_1B0F63E18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v2 = sub_1B1034F94();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE750);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B0F6363C(*(_BYTE *)(a1 + 120));
  v10 = a1;
  sub_1B0F64174();
  sub_1B10347D8();
  v7 = sub_1B0F6411C();
  MEMORY[0x1B5E13A54](v6, v3, v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B0F63F20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE748);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE750);
  sub_1B0F6411C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = OpaqueTypeConformance2;
  a2[3] = MEMORY[0x1B5E15134](0, &v8, MEMORY[0x1E0CDF0E8], 0);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = OpaqueTypeConformance2;
  a2[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a2);
  return sub_1B1035600();
}

uint64_t sub_1B0F64030@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F63C10(a1, a2);
}

unint64_t sub_1B0F64044(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F64068();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F64068()
{
  unint64_t result;

  result = qword_1EEEDE738;
  if (!qword_1EEEDE738)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037E10, &type metadata for ToolbarModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE738);
  }
  return result;
}

unint64_t sub_1B0F640AC(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F640D0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F640D0()
{
  unint64_t result;

  result = qword_1EEEDE740;
  if (!qword_1EEEDE740)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037DE8, &type metadata for NavigationBarTitleDisplayModeModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE740);
  }
  return result;
}

uint64_t sub_1B0F64114()
{
  uint64_t v0;

  return sub_1B0F63E18(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1B0F6411C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE758;
  if (!qword_1EEEDE758)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE750);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD8918], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE758);
  }
  return result;
}

uint64_t sub_1B0F64168@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1B0F64174()
{
  unint64_t result;

  result = qword_1EEEDE760;
  if (!qword_1EEEDE760)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for ViewContent, &type metadata for ViewContent);
    atomic_store(result, (unint64_t *)&qword_1EEEDE760);
  }
  return result;
}

uint64_t sub_1B0F641B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ViewContent(a2, a1);
  return a2;
}

unint64_t sub_1B0F641F4()
{
  unint64_t result;

  result = qword_1EEEDE770;
  if (!qword_1EEEDE770)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10381BC, &type metadata for ToolbarModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE770);
  }
  return result;
}

unint64_t sub_1B0F64238()
{
  unint64_t result;

  result = qword_1EEEDE778;
  if (!qword_1EEEDE778)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for ViewContent, &type metadata for ViewContent);
    atomic_store(result, (unint64_t *)&qword_1EEEDE778);
  }
  return result;
}

uint64_t sub_1B0F6427C(uint64_t a1)
{
  destroy for ViewContent(a1);
  return a1;
}

uint64_t sub_1B0F642B0()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

uint64_t sub_1B0F642F8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0F6432C(uint64_t a1)
{
  destroy for ViewContent(a1);
  return a1;
}

unint64_t sub_1B0F64358()
{
  unint64_t result;

  result = qword_1EEEDE788;
  if (!qword_1EEEDE788)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103816C, &type metadata for NavigationBarTitleDisplayModeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE788);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationBarTitleDisplayModeModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F643DC + 4 * byte_1B1037D8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F643FC + 4 * byte_1B1037D8F[v4]))();
}

_BYTE *sub_1B0F643DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F643FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F64404(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F6440C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F64414(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F6441C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarTitleDisplayModeModifier.CodingKeys()
{
  return &type metadata for NavigationBarTitleDisplayModeModifier.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ToolbarModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F64484 + 4 * byte_1B1037D99[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F644B8 + 4 * byte_1B1037D94[v4]))();
}

uint64_t sub_1B0F644B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F644C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F644C8);
  return result;
}

uint64_t sub_1B0F644D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F644DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F644E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F644E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarModifier.CodingKeys()
{
  return &type metadata for ToolbarModifier.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ToolbarItemPlacementString(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarItemPlacementString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1B0F645E0 + 4 * byte_1B1037DA3[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1B0F64614 + 4 * byte_1B1037D9E[v4]))();
}

uint64_t sub_1B0F64614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6461C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F64624);
  return result;
}

uint64_t sub_1B0F64630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F64638);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1B0F6463C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F64644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemPlacementString()
{
  return &type metadata for ToolbarItemPlacementString;
}

unint64_t sub_1B0F64664()
{
  unint64_t result;

  result = qword_1EEEDE790;
  if (!qword_1EEEDE790)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037F64, &type metadata for ToolbarItemPlacementString);
    atomic_store(result, (unint64_t *)&qword_1EEEDE790);
  }
  return result;
}

unint64_t sub_1B0F646AC()
{
  unint64_t result;

  result = qword_1EEEDE798;
  if (!qword_1EEEDE798)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038054, &type metadata for ToolbarModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE798);
  }
  return result;
}

unint64_t sub_1B0F646F4()
{
  unint64_t result;

  result = qword_1EEEDE7A0;
  if (!qword_1EEEDE7A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038144, &type metadata for NavigationBarTitleDisplayModeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7A0);
  }
  return result;
}

unint64_t sub_1B0F6473C()
{
  unint64_t result;

  result = qword_1EEEDE7A8;
  if (!qword_1EEEDE7A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103807C, &type metadata for NavigationBarTitleDisplayModeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7A8);
  }
  return result;
}

unint64_t sub_1B0F64784()
{
  unint64_t result;

  result = qword_1EEEDE7B0;
  if (!qword_1EEEDE7B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10380A4, &type metadata for NavigationBarTitleDisplayModeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7B0);
  }
  return result;
}

unint64_t sub_1B0F647CC()
{
  unint64_t result;

  result = qword_1EEEDE7B8;
  if (!qword_1EEEDE7B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037F8C, &type metadata for ToolbarModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7B8);
  }
  return result;
}

unint64_t sub_1B0F64814()
{
  unint64_t result;

  result = qword_1EEEDE7C0;
  if (!qword_1EEEDE7C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037FB4, &type metadata for ToolbarModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7C0);
  }
  return result;
}

uint64_t sub_1B0F64858()
{
  return 0x4D79616C70736964;
}

unint64_t sub_1B0F64878()
{
  unint64_t result;

  result = qword_1EEEDE7C8;
  if (!qword_1EEEDE7C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1037EEC, &type metadata for ToolbarItemPlacementString);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7C8);
  }
  return result;
}

uint64_t destroy for FixedSizeModifier(uint64_t a1)
{
  sub_1B0F5E6A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return sub_1B0F5E6A0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for FixedSizeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F5E604(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_1B0F5E604(v8, v9, v10, v2);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for FixedSizeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F5E604(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F5E6A0(v8, v9, v10, v11);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_1B0F5E604(v12, v13, v14, v2);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v2;
  sub_1B0F5E6A0(v15, v16, v17, v18);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FixedSizeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F5E6A0(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F5E6A0(v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for FixedSizeModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FixedSizeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FixedSizeModifier()
{
  return &type metadata for FixedSizeModifier;
}

uint64_t sub_1B0F64B68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  char v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F651F4();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
  v33 = 0;
  sub_1B0F65238();
  sub_1B10360BC();
  v33 = 1;
  v26 = v29;
  v27 = v28;
  v25 = v30;
  v32 = v31;
  sub_1B0F5E604(v28, v29, v30, v31);
  sub_1B10360BC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v9 = v28;
  v23 = v29;
  v24 = v28;
  v10 = v30;
  v22 = v30;
  v21 = v31;
  v12 = v26;
  v11 = v27;
  v13 = v25;
  v14 = v32;
  sub_1B0F5E604(v27, v26, v25, v32);
  v15 = v9;
  v16 = v23;
  v17 = v10;
  LOBYTE(v10) = v21;
  sub_1B0F5E604(v15, v23, v17, v21);
  sub_1B0F5E6A0(v11, v12, v13, v14);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 40) = v16;
  v18 = v22;
  *(_QWORD *)(a2 + 48) = v22;
  *(_BYTE *)(a2 + 56) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F5E6A0(v11, v12, v13, v14);
  return sub_1B0F5E6A0(v24, v23, v18, v10);
}

uint64_t sub_1B0F64DEC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

uint64_t sub_1B0F64E28(char *a1, char *a2)
{
  return sub_1B100D93C(*a1, *a2);
}

uint64_t sub_1B0F64E34()
{
  return sub_1B100F7B8();
}

uint64_t sub_1B0F64E3C()
{
  return sub_1B1012878();
}

uint64_t sub_1B0F64E44()
{
  return sub_1B10148D8();
}

uint64_t sub_1B0F64E4C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F64EA8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F64DEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F64ED0()
{
  char *v0;

  return sub_1B0F64DEC(*v0);
}

uint64_t sub_1B0F64ED8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F64F38()
{
  sub_1B0F651F4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F64F60()
{
  sub_1B0F651F4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F64F88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t *v20;

  v20 = (uint64_t *)a3;
  v7 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_BYTE *)(v3 + 24);
  v11 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 40);
  v17 = *(_QWORD *)(v3 + 48);
  v12 = *(_BYTE *)(v3 + 56);
  sub_1B0F5E604(v7, v6, v8, v9);
  sub_1B0FD7528(a2, v7, v6, v8, v9);
  if (v4)
  {

    sub_1B0F5E6A0(v7, v6, v8, v9);
    return sub_1B0F5FD84((uint64_t)a1, (uint64_t)v20);
  }
  else
  {
    sub_1B0F5E6A0(v7, v6, v8, v9);
    sub_1B0F5E604(v11, v10, v17, v12);
    sub_1B0FD7528(a2, v11, v10, v17, v12);
    sub_1B0F5E6A0(v11, v10, v17, v12);
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v15 = sub_1B103497C();
    v16 = v20;
    v20[3] = v15;
    v19[0] = v14;
    v19[1] = MEMORY[0x1E0CDA1F0];
    v16[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v15, v19);
    __swift_allocate_boxed_opaque_existential_1(v16);
    return sub_1B1035648();
  }
}

uint64_t sub_1B0F65164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B0F64F88(a1, a2, a3);
}

uint64_t sub_1B0F65178@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F64B68(a1, a2);
}

unint64_t sub_1B0F6518C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F651B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F651B0()
{
  unint64_t result;

  result = qword_1EEEDE7D0;
  if (!qword_1EEEDE7D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038244, &type metadata for FixedSizeModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7D0);
  }
  return result;
}

unint64_t sub_1B0F651F4()
{
  unint64_t result;

  result = qword_1EEEDE7E0;
  if (!qword_1EEEDE7E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038384, &type metadata for FixedSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7E0);
  }
  return result;
}

unint64_t sub_1B0F65238()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE7F0;
  if (!qword_1EEEDE7F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE7E8);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for Referenceable<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FixedSizeModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F652D0 + 4 * byte_1B1038215[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F65304 + 4 * byte_1B1038210[v4]))();
}

uint64_t sub_1B0F65304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6530C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F65314);
  return result;
}

uint64_t sub_1B0F65320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F65328);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F6532C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F65334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FixedSizeModifier.CodingKeys()
{
  return &type metadata for FixedSizeModifier.CodingKeys;
}

unint64_t sub_1B0F65354()
{
  unint64_t result;

  result = qword_1EEEDE7F8;
  if (!qword_1EEEDE7F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103835C, &type metadata for FixedSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE7F8);
  }
  return result;
}

unint64_t sub_1B0F6539C()
{
  unint64_t result;

  result = qword_1EEEDE800;
  if (!qword_1EEEDE800)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038294, &type metadata for FixedSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE800);
  }
  return result;
}

unint64_t sub_1B0F653E4()
{
  unint64_t result;

  result = qword_1EEEDE808;
  if (!qword_1EEEDE808)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10382BC, &type metadata for FixedSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE808);
  }
  return result;
}

uint64_t sub_1B0F65428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1B0F65464(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B10347A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1B0F65498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0F654DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0F65520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0F65564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0F655A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F655B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B0F655F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F655FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B10347A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ControlSizeModifier()
{
  uint64_t result;

  result = qword_1EEEDE810;
  if (!qword_1EEEDE810)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B0F65678()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B10347A8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B0F656E0(char a1)
{
  return *(_QWORD *)&aMini_1[8 * a1];
}

uint64_t sub_1B0F65700(char *a1, char *a2)
{
  return sub_1B100D9E0(*a1, *a2);
}

uint64_t sub_1B0F6570C()
{
  return sub_1B100F83C();
}

uint64_t sub_1B0F65714()
{
  return sub_1B10128D4();
}

uint64_t sub_1B0F6571C()
{
  return sub_1B1014874();
}

uint64_t sub_1B0F65724@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F66000();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F65750@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F656E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F65778()
{
  sub_1B0F66058();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F657D4()
{
  sub_1B0F66058();
  return sub_1B1035CA8();
}

uint64_t sub_1B0F6582C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F6587C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F66048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F658A4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F658F8()
{
  sub_1B0F65CAC();
  return sub_1B10362B4();
}

uint64_t sub_1B0F65920()
{
  sub_1B0F65CAC();
  return sub_1B10362C0();
}

uint64_t sub_1B0F65948@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[1] = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE838);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ControlSizeModifier();
  MEMORY[0x1E0C80A78](v8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F65CAC();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F65CF0();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F65B28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE828);
  v4 = sub_1B103497C();
  a2[3] = v4;
  v6[0] = v3;
  v6[1] = sub_1B0F65C60();
  a2[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v4, v6);
  __swift_allocate_boxed_opaque_existential_1(a2);
  return sub_1B103536C();
}

uint64_t sub_1B0F65BE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F65948(a1, a2);
}

unint64_t sub_1B0F65BF4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F65C18();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F65C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE820;
  if (!qword_1EEEDE820)
  {
    v1 = type metadata accessor for ControlSizeModifier();
    result = MEMORY[0x1B5E15188](&unk_1B1038414, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE820);
  }
  return result;
}

unint64_t sub_1B0F65C60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE830;
  if (!qword_1EEEDE830)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE828);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE830);
  }
  return result;
}

unint64_t sub_1B0F65CAC()
{
  unint64_t result;

  result = qword_1EEEDE840;
  if (!qword_1EEEDE840)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038660, &type metadata for ControlSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE840);
  }
  return result;
}

unint64_t sub_1B0F65CF0()
{
  unint64_t result;

  result = qword_1EEEDE848;
  if (!qword_1EEEDE848)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038638, &type metadata for ControlSizeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDE848);
  }
  return result;
}

uint64_t sub_1B0F65D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ControlSizeModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ControlSizeString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0F65DC4 + 4 * byte_1B10383EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0F65DF8 + 4 * byte_1B10383E5[v4]))();
}

uint64_t sub_1B0F65DF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F65E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F65E08);
  return result;
}

uint64_t sub_1B0F65E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F65E1CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0F65E20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F65E28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ControlSizeString()
{
  return &type metadata for ControlSizeString;
}

uint64_t storeEnumTagSinglePayload for ControlSizeModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F65E84 + 4 * byte_1B10383EF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F65EA4 + 4 * byte_1B10383F4[v4]))();
}

_BYTE *sub_1B0F65E84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F65EA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F65EAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F65EB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F65EBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F65EC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ControlSizeModifier.CodingKeys()
{
  return &type metadata for ControlSizeModifier.CodingKeys;
}

unint64_t sub_1B0F65EE4()
{
  unint64_t result;

  result = qword_1EEEDE850;
  if (!qword_1EEEDE850)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038548, &type metadata for ControlSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE850);
  }
  return result;
}

unint64_t sub_1B0F65F2C()
{
  unint64_t result;

  result = qword_1EEEDE858;
  if (!qword_1EEEDE858)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038610, &type metadata for ControlSizeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDE858);
  }
  return result;
}

unint64_t sub_1B0F65F74()
{
  unint64_t result;

  result = qword_1EEEDE860;
  if (!qword_1EEEDE860)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038480, &type metadata for ControlSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE860);
  }
  return result;
}

unint64_t sub_1B0F65FBC()
{
  unint64_t result;

  result = qword_1EEEDE868;
  if (!qword_1EEEDE868)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10384A8, &type metadata for ControlSizeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE868);
  }
  return result;
}

uint64_t sub_1B0F66000()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B0F66048()
{
  return 1702521203;
}

unint64_t sub_1B0F66058()
{
  unint64_t result;

  result = qword_1EEEDE870;
  if (!qword_1EEEDE870)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038598, &type metadata for ControlSizeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDE870);
  }
  return result;
}

uint64_t sub_1B0F6609C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

void sub_1B0F660B4()
{
  sub_1B0F68748(type metadata accessor for RemoteContentView);
}

void sub_1B0F660D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D784(v0);
  sub_1B0F6D784(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    sub_1B0F6D784(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D7D4(v1);
    sub_1B0F6D7D4(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6D7D4(v0);
    sub_1B0F6D7D4(v0);

  }
}

void sub_1B0F662B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F601E4(v0);
  sub_1B0F601E4(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F601E4(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D704(v1);
    sub_1B0F6D704(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6D704(v0);
    sub_1B0F6D704(v0);

  }
}

void sub_1B0F664AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D598(v0);
  sub_1B0F6D598(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    sub_1B0F6D598(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D650(v1);
    sub_1B0F6D650(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6D650(v0);
    sub_1B0F6D650(v0);

  }
}

void sub_1B0F666A8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[26];
  uint64_t v9;
  _BYTE v10[208];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D4B8(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D4B8((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D4F4((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D4F4((uint64_t)v10);
  }

}

void sub_1B0F66854()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[27];
  uint64_t v9;
  _BYTE v10[216];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CFC0(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6CFC0((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CFFC((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6CFFC((uint64_t)v10);
  }

}

void sub_1B0F66A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6C818(v0);
  sub_1B0F6C818(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    sub_1B0F6C818(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6C898(v1);
    sub_1B0F6C898(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6C898(v0);
    sub_1B0F6C898(v0);

  }
}

void sub_1B0F66BEC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[29];
  uint64_t v9;
  _BYTE v10[232];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D528(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D528((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D564((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D564((uint64_t)v10);
  }

}

void sub_1B0F66D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CED8(v0);
  sub_1B0F6CED8(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    sub_1B0F6CED8(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CF4C(v1);
    sub_1B0F6CF4C(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6CF4C(v0);
    sub_1B0F6CF4C(v0);

  }
}

void sub_1B0F66F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CCA0(v0);
  sub_1B0F6CCA0(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6CCA0(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CD84(v1);
    sub_1B0F6CD84(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6CD84(v0);
    sub_1B0F6CD84(v0);

  }
}

void sub_1B0F6718C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[24];
  uint64_t v9;
  _BYTE v10[192];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D218(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D218((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D254((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D254((uint64_t)v10);
  }

}

void sub_1B0F67338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6C674(v0);
  sub_1B0F6C674(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6C674(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6C740(v1);
    sub_1B0F6C740(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6C740(v0);
    sub_1B0F6C740(v0);

  }
}

void sub_1B0F6752C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6C918(v0);
  sub_1B0F6C918(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6C918(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6C968(v1);
    sub_1B0F6C968(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6C968(v0);
    sub_1B0F6C968(v0);

  }
}

void sub_1B0F67710()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[26];
  uint64_t v9;
  _BYTE v10[208];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D3D8(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D3D8((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D414((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D414((uint64_t)v10);
  }

}

void sub_1B0F678BC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[36];
  uint64_t v9;
  _BYTE v10[288];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CC30(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6CC30((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CC6C((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6CC6C((uint64_t)v10);
  }

}

void sub_1B0F67A68()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[15];
  uint64_t v9;
  _BYTE v10[120];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F641B8(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F641B8((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6427C((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6427C((uint64_t)v10);
  }

}

void sub_1B0F67C14()
{
  __int128 *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  v11 = *v0;
  v10 = *((_QWORD *)v0 + 2);
  v9 = *(__int128 *)((char *)v0 + 24);
  sub_1B0F6CB90((uint64_t)&v11);
  sub_1B0F6CBB8((uint64_t)&v10);
  sub_1B0F6D0E8((uint64_t)&v9);
  sub_1B0F6CB90((uint64_t)&v11);
  sub_1B0F6CBB8((uint64_t)&v10);
  sub_1B0F6D0E8((uint64_t)&v9);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v8 = v5;
    sub_1B0F6CB90((uint64_t)&v11);
    sub_1B0F6CBB8((uint64_t)&v10);
    sub_1B0F6D0E8((uint64_t)&v9);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v8);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CBE0((uint64_t)&v11);
    sub_1B0F6CC08((uint64_t)&v10);
    sub_1B0F6D110((uint64_t)&v9);
    sub_1B0F6CBE0((uint64_t)&v11);
    sub_1B0F6CC08((uint64_t)&v10);
    sub_1B0F6D110((uint64_t)&v9);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6CBE0((uint64_t)&v11);
    sub_1B0F6CC08((uint64_t)&v10);
    sub_1B0F6D110((uint64_t)&v9);
    sub_1B0F6CBE0((uint64_t)&v11);
    sub_1B0F6CC08((uint64_t)&v10);
    sub_1B0F6D110((uint64_t)&v9);
  }

}

void sub_1B0F67E5C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[21];
  uint64_t v9;
  _BYTE v10[168];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D2F8(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D2F8((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D334((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D334((uint64_t)v10);
  }

}

void sub_1B0F68008()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[29];
  uint64_t v9;
  _BYTE v10[232];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CE68(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6CE68((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CEA4((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6CEA4((uint64_t)v10);
  }

}

void sub_1B0F681B4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v0 = sub_1B103467C();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEF0BA00);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v1 = sub_1B1034664();
  v2 = sub_1B1035E1C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315138;
    v7 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = sub_1B1035BD0();
    sub_1B0F6B618(v5, v6, &v7);
    sub_1B1035E7C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0F50000, v1, v2, "Customview %s has neither body nor unmodified body", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v4, -1, -1);
    MEMORY[0x1B5E15248](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void sub_1B0F683A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6CA20(v0);
  sub_1B0F6CA20(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6CA20(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CAD8(v1);
    sub_1B0F6CAD8(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6CAD8(v0);
    sub_1B0F6CAD8(v0);

  }
}

void sub_1B0F6859C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[20];
  uint64_t v9;
  _BYTE v10[160];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D138(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D138((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D174((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D174((uint64_t)v10);
  }

}

void sub_1B0F68748(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  sub_1B0F5A42C(v1, (uint64_t)v8, a1);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_1B0F5A42C((uint64_t)v8, (uint64_t)v6, a1);
    v14 = sub_1B1035BD0();
    v16 = sub_1B0F6B618(v14, v15, &v17);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F57B2C((uint64_t)v8, a1);
    _os_log_impl(&dword_1B0F50000, v10, v11, "Customview %s has neither body nor unmodified body", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }
  else
  {
    sub_1B0F57B2C((uint64_t)v8, a1);
  }

}

void sub_1B0F68958()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[24];
  uint64_t v9;
  _BYTE v10[192];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D448(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D448((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D484((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D484((uint64_t)v10);
  }

}

void sub_1B0F68B04()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[30];
  uint64_t v9;
  _BYTE v10[240];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D1A8(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D1A8((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D1E4((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D1E4((uint64_t)v10);
  }

}

void sub_1B0F68CB0()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  v15 = *v0;
  v2 = *((_QWORD *)v0 + 3);
  v14 = *((_QWORD *)v0 + 2);
  v10 = v0[2];
  v12 = v10;
  v13 = v2;
  sub_1B0F6D0A0((uint64_t)&v10 + 8, (uint64_t)v11);
  sub_1B0F6CB90((uint64_t)&v15);
  sub_1B0F6CBB8((uint64_t)&v14);
  sub_1B0F6CBB8((uint64_t)&v13);
  sub_1B0F6CBB8((uint64_t)&v12);
  sub_1B0F6D0E8((uint64_t)v11);
  sub_1B0F6CB90((uint64_t)&v15);
  sub_1B0F6CBB8((uint64_t)&v14);
  sub_1B0F6CBB8((uint64_t)&v13);
  sub_1B0F6CBB8((uint64_t)&v12);
  sub_1B0F6D0E8((uint64_t)v11);
  v3 = sub_1B1034664();
  v4 = sub_1B1035E1C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136315138;
    sub_1B0F6CB90((uint64_t)&v15);
    sub_1B0F6CBB8((uint64_t)&v14);
    sub_1B0F6CBB8((uint64_t)&v13);
    sub_1B0F6CBB8((uint64_t)&v12);
    sub_1B0F6D0E8((uint64_t)v11);
    v7 = sub_1B1035BD0();
    sub_1B0F6B618(v7, v8, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CBE0((uint64_t)&v15);
    sub_1B0F6CC08((uint64_t)&v14);
    sub_1B0F6CC08((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6D110((uint64_t)v11);
    sub_1B0F6CBE0((uint64_t)&v15);
    sub_1B0F6CC08((uint64_t)&v14);
    sub_1B0F6CC08((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6D110((uint64_t)v11);
    _os_log_impl(&dword_1B0F50000, v3, v4, "Customview %s has neither body nor unmodified body", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v6, -1, -1);
    MEMORY[0x1B5E15248](v5, -1, -1);
  }
  else
  {
    sub_1B0F6CBE0((uint64_t)&v15);
    sub_1B0F6CC08((uint64_t)&v14);
    sub_1B0F6CC08((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6D110((uint64_t)v11);
    sub_1B0F6CBE0((uint64_t)&v15);
    sub_1B0F6CC08((uint64_t)&v14);
    sub_1B0F6CC08((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6D110((uint64_t)v11);
  }

}

void sub_1B0F68F84()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[36];
  uint64_t v9;
  _BYTE v10[288];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D368(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D368((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D3A4((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D3A4((uint64_t)v10);
  }

}

void sub_1B0F69130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = v0;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = sub_1B103467C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6C574(v0);
  sub_1B0F6C574(v0);
  oslog = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    sub_1B0F6C574(v1);
    v6 = sub_1B1035BD0();
    sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6C5F4(v1);
    sub_1B0F6C5F4(v1);
    _os_log_impl(&dword_1B0F50000, oslog, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);

  }
  else
  {
    sub_1B0F6C5F4(v0);
    sub_1B0F6C5F4(v0);

  }
}

void sub_1B0F6931C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[10];
  uint64_t v9;
  _BYTE v10[80];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D030(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D030((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D06C((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D06C((uint64_t)v10);
  }

}

void sub_1B0F694C8()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  v13 = *v0;
  v2 = *((_QWORD *)v0 + 2);
  v11 = *((_QWORD *)v0 + 3);
  v12 = v2;
  v10 = v0[2];
  sub_1B0F6CB90((uint64_t)&v13);
  sub_1B0F6CBB8((uint64_t)&v12);
  sub_1B0F6CBB8((uint64_t)&v11);
  sub_1B0F6D0E8((uint64_t)&v10);
  sub_1B0F6CB90((uint64_t)&v13);
  sub_1B0F6CBB8((uint64_t)&v12);
  sub_1B0F6CBB8((uint64_t)&v11);
  sub_1B0F6D0E8((uint64_t)&v10);
  v3 = sub_1B1034664();
  v4 = sub_1B1035E1C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136315138;
    sub_1B0F6CB90((uint64_t)&v13);
    sub_1B0F6CBB8((uint64_t)&v12);
    sub_1B0F6CBB8((uint64_t)&v11);
    sub_1B0F6D0E8((uint64_t)&v10);
    v7 = sub_1B1035BD0();
    sub_1B0F6B618(v7, v8, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6CBE0((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6CC08((uint64_t)&v11);
    sub_1B0F6D110((uint64_t)&v10);
    sub_1B0F6CBE0((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6CC08((uint64_t)&v11);
    sub_1B0F6D110((uint64_t)&v10);
    _os_log_impl(&dword_1B0F50000, v3, v4, "Customview %s has neither body nor unmodified body", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v6, -1, -1);
    MEMORY[0x1B5E15248](v5, -1, -1);
  }
  else
  {
    sub_1B0F6CBE0((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6CC08((uint64_t)&v11);
    sub_1B0F6D110((uint64_t)&v10);
    sub_1B0F6CBE0((uint64_t)&v13);
    sub_1B0F6CC08((uint64_t)&v12);
    sub_1B0F6CC08((uint64_t)&v11);
    sub_1B0F6D110((uint64_t)&v10);
  }

}

void sub_1B0F6974C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[35];
  uint64_t v9;
  _BYTE v10[280];

  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v1 = sub_1B103467C();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEF0BA00);
  sub_1B0F6D288(v0, (uint64_t)v10);
  v2 = sub_1B1034664();
  v3 = sub_1B1035E1C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_1B0F6D288((uint64_t)v10, (uint64_t)v8);
    v6 = sub_1B1035BD0();
    v8[0] = sub_1B0F6B618(v6, v7, &v9);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F6D2C4((uint64_t)v10);
    _os_log_impl(&dword_1B0F50000, v2, v3, "Customview %s has neither body nor unmodified body", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v5, -1, -1);
    MEMORY[0x1B5E15248](v4, -1, -1);
  }
  else
  {
    sub_1B0F6D2C4((uint64_t)v10);
  }

}

void AnyViewContent.unmodifiedBody.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  uint64_t v18;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v17 - v7;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, v1, a1);
  v11 = sub_1B1034664();
  v12 = sub_1B1035E1C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v18 = v14;
    *(_DWORD *)v13 = 136315138;
    v17[1] = v13 + 4;
    v10(v6, (uint64_t)v8, a1);
    v15 = sub_1B1035BD0();
    v17[2] = sub_1B0F6B618(v15, v16, &v18);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, a1);
    _os_log_impl(&dword_1B0F50000, v11, v12, "Customview %s has neither body nor unmodified body", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v14, -1, -1);
    MEMORY[0x1B5E15248](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, a1);
  }

}

uint64_t sub_1B0F69B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19[2];

  a6[3] = a4;
  a6[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, v6, a4);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v15 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v16 = v15[3];
      v17 = v15[4];
      __swift_project_boxed_opaque_existential_1(v15, v16);
      (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(&v18, a6, a2, a3, v16, v17);
      sub_1B0F5A0E4(&v18, (uint64_t)v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a6);
      sub_1B0F5A0E4(v19, (uint64_t)a6);
      v15 += 5;
      --v14;
    }
    while (v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B0F69C48()
{
  sub_1B0F660D0();
}

void sub_1B0F69C90()
{
  sub_1B0F660D0();
}

void sub_1B0F69CD8()
{
  sub_1B0F662B8();
}

void sub_1B0F69D20()
{
  sub_1B0F660D0();
}

void sub_1B0F69D68()
{
  sub_1B0F664AC();
}

uint64_t AnyViewContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v16 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v13 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v13(v12, v10, AssociatedTypeWitness);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, AssociatedTypeWitness);
  v13(a3, v12, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, AssociatedTypeWitness);
}

uint64_t ViewContent.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ViewContent.modifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ViewContent.modifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ViewContent.modifiers.modify())()
{
  return nullsub_1;
}

uint64_t ViewContent.store.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 88))
    return swift_retain();
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t ViewContent.$store.getter()
{
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  return sub_1B1034AC0();
}

uint64_t ViewContent.localStore.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 104))
    return swift_retain();
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t ViewContent.$localStore.getter()
{
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  return sub_1B1034AC0();
}

uint64_t sub_1B0F6A098(char a1)
{
  return qword_1B10389B0[a1];
}

uint64_t sub_1B0F6A0B8(char *a1, char *a2)
{
  return sub_1B100EC44(*a1, *a2);
}

uint64_t sub_1B0F6A0C4()
{
  return sub_1B10131F8();
}

uint64_t sub_1B0F6A0CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F6C528();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F6A0F8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F6A098(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F6A120()
{
  char *v0;

  return sub_1B0F6A098(*v0);
}

uint64_t sub_1B0F6A128@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F6C528();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F6A14C()
{
  sub_1B0F6BC04();
  return sub_1B10362B4();
}

uint64_t sub_1B0F6A174()
{
  sub_1B0F6BC04();
  return sub_1B10362C0();
}

uint64_t ViewContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  void *v23;
  unint64_t v24;
  id v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78[3];
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  _BYTE v82[48];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v64 = a2;
  v87 = *MEMORY[0x1E0C80C00];
  v3 = sub_1B103461C();
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE878);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  MEMORY[0x1E0C80A78](v6);
  v69 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  MEMORY[0x1E0C80A78](v8);
  v73 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B1036008();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v83 = sub_1B1034AD8();
  v84 = v14;
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v85 = sub_1B1034AD8();
  v86 = v15;
  v16 = a1[3];
  v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v17 = sub_1B103626C();
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
  if (*(_QWORD *)(v17 + 16) && (v19 = sub_1B0F56A48((uint64_t)v13), (v20 & 1) != 0))
  {
    sub_1B0F57208(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v76);
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (!*((_QWORD *)&v77 + 1))
  {
    sub_1B0F5A3AC((uint64_t)&v76, &qword_1EEEDE158);
    v22 = v74;
    goto LABEL_12;
  }
  type metadata accessor for ContentRegistry();
  v21 = swift_dynamicCast();
  v22 = v74;
  if ((v21 & 1) == 0)
  {
LABEL_12:
    type metadata accessor for ContentRegistryError();
    sub_1B0F524FC(&qword_1EEEDE488, (uint64_t (*)(uint64_t))type metadata accessor for ContentRegistryError, (uint64_t)&unk_1B1045C40);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_13;
  }
  *(_QWORD *)&v63 = v5;
  v23 = (void *)v78[0];
  __swift_project_boxed_opaque_existential_1(v74, v74[3]);
  v24 = sub_1B0F5DCE4();
  v25 = v72;
  v26 = v73;
  sub_1B1036278();
  if (v25)
  {

LABEL_13:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    swift_release();
    return swift_release();
  }
  v62 = v24;
  v72 = v23;
  v28 = v71;
  v29 = sub_1B10360C8();
  if (!*(_QWORD *)(v29 + 16))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DynamicKeyError();
    sub_1B0F524FC(&qword_1EEEDE4C0, (uint64_t (*)(uint64_t))type metadata accessor for DynamicKeyError, (uint64_t)&unk_1B103D9EC);
    swift_allocError();
    sub_1B1036074();
    sub_1B1035F30();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v70 + 8))(v26, v28);
    goto LABEL_13;
  }
  v31 = *(_QWORD *)(v29 + 32);
  v30 = *(_QWORD *)(v29 + 40);
  v32 = *(_QWORD *)(v29 + 48);
  v33 = *(unsigned __int8 *)(v29 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v81[2] = v31;
  v81[3] = v30;
  *(_QWORD *)&v76 = v31;
  *((_QWORD *)&v76 + 1) = v30;
  v61 = v32;
  *(_QWORD *)&v77 = v32;
  BYTE8(v77) = v33;
  sub_1B0F6BC04();
  swift_bridgeObjectRetain();
  sub_1B1036068();
  v59 = v33;
  v58 = v31;
  v60 = v30;
  LOBYTE(v76) = 0;
  v34 = sub_1B103608C();
  v36 = v35;
  if (v35)
  {
    v37 = v34;
  }
  else
  {
    v38 = v63;
    sub_1B1034610();
    v37 = sub_1B1034604();
    v36 = v39;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v38, v66);
  }
  v40 = v61;
  v81[0] = v37;
  v81[1] = v36;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4A8);
  LOBYTE(v78[0]) = 2;
  sub_1B0F5DFA0();
  sub_1B10360A4();
  if ((_QWORD)v76)
    v41 = v76;
  else
    v41 = MEMORY[0x1E0DEE9D8];
  v81[4] = v41;
  v42 = v40;
  v43 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = sub_1B1036074();
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE498);
  inited = swift_initStackObject();
  v63 = xmmword_1B1036F70;
  *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
  v46 = v62;
  *(_QWORD *)(inited + 56) = &type metadata for DynamicKey;
  *(_QWORD *)(inited + 64) = v46;
  v47 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v47;
  v48 = v58;
  *(_QWORD *)(v47 + 16) = v58;
  *(_QWORD *)(v47 + 24) = v43;
  *(_QWORD *)(v47 + 32) = v42;
  *(_BYTE *)(v47 + 40) = v59;
  *(_QWORD *)&v76 = v44;
  swift_bridgeObjectRetain();
  sub_1B0F5DD60(inited);
  v66 = 0;
  v49 = sub_1B0FFD800(v48, v43);
  v65 = v50;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  LOBYTE(v78[0]) = 1;
  sub_1B1036080();
  sub_1B0F5FD84((uint64_t)&v76, (uint64_t)&v75);
  v51 = v65;
  v79 = v49;
  v80 = v65;
  __swift_allocate_boxed_opaque_existential_1(v78);
  sub_1B1035DB0();
  v52 = v73;
  v53 = v72;
  v55 = v79;
  v54 = v80;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v78, v79);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v41, v55, v54);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v68);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v52, v71);
  sub_1B0F5FD84((uint64_t)v78, (uint64_t)v82);
  v82[40] = 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  v56 = v74;
  sub_1B0F641B8((uint64_t)v81, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return sub_1B0F6427C((uint64_t)v81);
}

uint64_t ViewContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28[2];
  char v29;

  sub_1B0F6BC84((uint64_t)(v1 + 5), (uint64_t)v28);
  if ((v29 & 1) != 0)
  {
    sub_1B0F5A0E4(v28, (uint64_t)v25);
    v3 = __swift_project_boxed_opaque_existential_1(v25, v26);
    MEMORY[0x1E0C80A78](v3);
    (*(void (**)(char *))(v5 + 16))((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v23 = sub_1B1035840();
    v24 = 1;
LABEL_6:
    sub_1B1034EC8();
    v17 = v20;
    v18 = v21;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    *(_QWORD *)a1 = v17;
    *(_BYTE *)(a1 + 8) = v18;
    return result;
  }
  sub_1B0F5A0E4(v28, (uint64_t)v25);
  v6 = v26;
  v7 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  v8 = sub_1B0F5B664(v1[4]);
  v9 = v1[11];
  if (v9)
  {
    v10 = v1[13];
    if (v10)
    {
      v11 = v8;
      v12 = *(_QWORD *)(v7 + 24);
      swift_retain();
      swift_retain();
      sub_1B0F69B0C(v11, v9, v10, v6, v12, &v20);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v13 = __swift_project_boxed_opaque_existential_1(&v20, v22);
      MEMORY[0x1E0C80A78](v13);
      (*(void (**)(char *))(v15 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      v16 = sub_1B1035840();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
      v23 = v16;
      v24 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B1034ACC();
    __break(1u);
  }
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_retain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F6AFA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ViewContent.init(from:)(a1, a2);
}

unint64_t ViewContent.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[6];
  unint64_t v4;
  unint64_t v5;

  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1B1035F18();
  swift_bridgeObjectRelease();
  v4 = 0xD000000000000016;
  v5 = 0x80000001B104C820;
  sub_1B0F6BC84(v0 + 40, (uint64_t)v3);
  sub_1B1035BD0();
  sub_1B1035C18();
  swift_bridgeObjectRelease();
  sub_1B1035C18();
  v1 = swift_bridgeObjectRetain();
  MEMORY[0x1B5E1472C](v1, &type metadata for AnyViewModifier);
  swift_bridgeObjectRelease();
  sub_1B1035C18();
  swift_bridgeObjectRelease();
  sub_1B1035C18();
  return v4;
}

void sub_1B0F6B0D0()
{
  sub_1B0F694C8();
}

void sub_1B0F6B114()
{
  sub_1B0F67C14();
}

void sub_1B0F6B154()
{
  sub_1B0F69130();
}

void sub_1B0F6B194()
{
  sub_1B0F66D98();
}

void sub_1B0F6B1D4()
{
  sub_1B0F68748((uint64_t (*)(_QWORD))type metadata accessor for LinkView);
}

void sub_1B0F6B1F0()
{
  sub_1B0F67C14();
}

void sub_1B0F6B240()
{
  sub_1B0F694C8();
}

void sub_1B0F6B284()
{
  sub_1B0F694C8();
}

void sub_1B0F6B2C4()
{
  sub_1B0F67C14();
}

void sub_1B0F6B308()
{
  sub_1B0F67338();
}

void sub_1B0F6B350()
{
  sub_1B0F66A00();
}

void sub_1B0F6B390()
{
  sub_1B0F6752C();
}

void sub_1B0F6B3C8()
{
  sub_1B0F683A0();
}

void sub_1B0F6B420()
{
  sub_1B0F683A0();
}

void sub_1B0F6B478()
{
  sub_1B0F68CB0();
}

void sub_1B0F6B4C0()
{
  sub_1B0F681B4();
}

void sub_1B0F6B4CC()
{
  sub_1B0F66F84();
}

void sub_1B0F6B520()
{
  sub_1B0F68748((uint64_t (*)(_QWORD))type metadata accessor for ColorSchemeReader);
}

uint64_t sub_1B0F6B544(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1B0F6B554(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1B0F6B588(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1B0F6B5A8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_1B0F6B618(v6, v7, a3);
  v8 = *a1 + 8;
  sub_1B1035E7C();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1B0F6B618(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1B0F6B6E8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1B0F57208((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1B0F57208((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1B0F6B6E8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1B1035E88();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1B0F6B8A0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1B1035F6C();
  if (!v8)
  {
    sub_1B1036014();
    __break(1u);
LABEL_17:
    result = sub_1B1036050();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1B0F6B8A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1B0F6B934(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B0F6BAA8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1B0F6BAA8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1B0F6B934(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1B0FDD770(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1B1035F24();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1B1036014();
      __break(1u);
LABEL_10:
      v2 = sub_1B1035C24();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1B1036050();
    __break(1u);
LABEL_14:
    result = sub_1B1036014();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B0F6BAA8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE8C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1B1036050();
  __break(1u);
  return result;
}

_BYTE **sub_1B0F6BBF4(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_1B0F6BC04()
{
  unint64_t result;

  result = qword_1EEEDE880;
  if (!qword_1EEEDE880)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103895C, &type metadata for ViewContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE880);
  }
  return result;
}

uint64_t sub_1B0F6BC48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_OWORD *sub_1B0F6BC6C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1B0F6BC84(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ViewContentType(a2, a1);
  return a2;
}

uint64_t sub_1B0F6BCB8()
{
  sub_1B0F6BCF8();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F6BCF8()
{
  unint64_t result;

  result = qword_1EEEDE888;
  if (!qword_1EEEDE888)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for ViewContent, &type metadata for ViewContent);
    atomic_store(result, (unint64_t *)&qword_1EEEDE888);
  }
  return result;
}

unint64_t sub_1B0F6BD3C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1B0F64238();
  a1[2] = sub_1B0F6BD70();
  result = sub_1B0F64174();
  a1[3] = result;
  return result;
}

unint64_t sub_1B0F6BD70()
{
  unint64_t result;

  result = qword_1EEEDE890;
  if (!qword_1EEEDE890)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for ViewContent, &type metadata for ViewContent);
    atomic_store(result, (unint64_t *)&qword_1EEEDE890);
  }
  return result;
}

uint64_t sub_1B0F6BDB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of AnyViewContent.unmodifiedBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t initializeWithCopy for ViewContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a2 + 40;
  v7 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 40, v6);
  *(_BYTE *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ViewContent(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    v4 = *(_BYTE *)(a2 + 80);
    v5 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
    *(_BYTE *)(a1 + 80) = v4;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for ViewContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

ValueMetadata *type metadata accessor for ViewContent()
{
  return &type metadata for ViewContent;
}

uint64_t sub_1B0F6C044()
{
  return MEMORY[0x1E0CE0400];
}

uint64_t sub_1B0F6C050()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

unint64_t sub_1B0F6C0B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDE898;
  if (!qword_1EEEDE898)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE8A0);
    v2[0] = MEMORY[0x1E0CDFD08];
    v2[1] = MEMORY[0x1E0CDFD08];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDE898);
  }
  return result;
}

uint64_t destroy for ViewContentType(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for ViewContentType(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
  }
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for ViewContentType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;

  if (a1 != a2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    if (v4 == 1)
    {
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ViewContentType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;

  if (a1 != a2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v4 == 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewContentType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ViewContentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B0F6C330(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1B0F6C34C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewContentType()
{
  return &type metadata for ViewContentType;
}

uint64_t storeEnumTagSinglePayload for ViewContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0F6C3D0 + 4 * byte_1B103870D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0F6C404 + 4 * byte_1B1038708[v4]))();
}

uint64_t sub_1B0F6C404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6C40C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F6C414);
  return result;
}

uint64_t sub_1B0F6C420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F6C428);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0F6C42C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6C434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewContent.CodingKeys()
{
  return &type metadata for ViewContent.CodingKeys;
}

unint64_t sub_1B0F6C454()
{
  unint64_t result;

  result = qword_1EEEDE8A8;
  if (!qword_1EEEDE8A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038934, &type metadata for ViewContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8A8);
  }
  return result;
}

unint64_t sub_1B0F6C49C()
{
  unint64_t result;

  result = qword_1EEEDE8B0;
  if (!qword_1EEEDE8B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103886C, &type metadata for ViewContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8B0);
  }
  return result;
}

unint64_t sub_1B0F6C4E4()
{
  unint64_t result;

  result = qword_1EEEDE8B8;
  if (!qword_1EEEDE8B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038894, &type metadata for ViewContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8B8);
  }
  return result;
}

uint64_t sub_1B0F6C528()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B0F6C574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F6C5EC(v2, v3, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6C5EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B0F56B9C(a1, a2, a3, a4 & 0xDF);
}

uint64_t sub_1B0F6C5F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1B0F6C66C(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6C66C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1B0F56ADC(a1, a2, a3, a4 & 0xDF);
}

uint64_t sub_1B0F6C674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v2, v3, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6C6F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 <= 0xFDu)
    return sub_1B0F6C708(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B0F6C708(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 0x80) == 0)
    return sub_1B0F5E604(a1, a2, a3, a4 & 1);
  swift_retain();
  return swift_retain();
}

uint64_t sub_1B0F6C740(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  swift_bridgeObjectRelease();
  sub_1B0F6C7C0(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6C7C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 <= 0xFDu)
    return sub_1B0F6C7D4(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B0F6C7D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 0x80) == 0)
    return sub_1B0F5E6A0(a1, a2, a3, a4 & 1);
  swift_release();
  return swift_release();
}

uint64_t sub_1B0F6C818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v2, v3, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6C898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1B0F6C7C0(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6C918(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6C968(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6C9B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void))
{
  uint64_t result;

  if (a4 != 254)
  {
    a9();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a9)(a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1B0F6CA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F6C9B8(v10, v2, v3, v4, v5, v6, v7, v8, (void (*)(void))sub_1B0F5FD10);
  swift_retain();
  return a1;
}

uint64_t sub_1B0F6CAD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B0F6C9B8(v10, v2, v3, v4, v5, v6, v7, v8, (void (*)(void))sub_1B0F5FD28);
  swift_release();
  return a1;
}

uint64_t sub_1B0F6CB90(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6CBB8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6CBE0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0F6CC08(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0F6CC30(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SectionView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6CC6C(uint64_t a1)
{
  destroy for SectionView(a1);
  return a1;
}

uint64_t sub_1B0F6CCA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 96);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 104);
  swift_bridgeObjectRetain();
  sub_1B0F56C04(v2, v3, v4, v8);
  sub_1B0F56C04(v5, v6, v7, v9);
  sub_1B0F56C04(v14, v13, v12, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6CD84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 96);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 104);
  swift_bridgeObjectRelease();
  sub_1B0F56B88(v2, v3, v4, v8);
  sub_1B0F56B88(v5, v6, v7, v9);
  sub_1B0F56B88(v14, v13, v12, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6CE68(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AsyncImageView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6CEA4(uint64_t a1)
{
  destroy for AsyncImageView(a1);
  return a1;
}

uint64_t sub_1B0F6CED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v2, v3, v4, v5);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F6CF4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1B0F6C7C0(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6CFC0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ButtonView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6CFFC(uint64_t a1)
{
  destroy for ButtonView(a1);
  return a1;
}

uint64_t sub_1B0F6D030(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ColorView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D06C(uint64_t a1)
{
  destroy for ColorView(a1);
  return a1;
}

uint64_t sub_1B0F6D0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE8C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F6D0E8(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B0F6D110(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B0F6D138(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigatingView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D174(uint64_t a1)
{
  destroy for NavigatingView(a1);
  return a1;
}

uint64_t sub_1B0F6D1A8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationLinkView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D1E4(uint64_t a1)
{
  destroy for NavigationLinkView(a1);
  return a1;
}

uint64_t sub_1B0F6D218(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToggleView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D254(uint64_t a1)
{
  destroy for ToggleView(a1);
  return a1;
}

uint64_t sub_1B0F6D288(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LabelView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D2C4(uint64_t a1)
{
  destroy for LabelView(a1);
  return a1;
}

uint64_t sub_1B0F6D2F8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollingView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D334(uint64_t a1)
{
  destroy for ScrollingView(a1);
  return a1;
}

uint64_t sub_1B0F6D368(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IfView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D3A4(uint64_t a1)
{
  destroy for IfView(a1);
  return a1;
}

uint64_t sub_1B0F6D3D8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ForEachView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D414(uint64_t a1)
{
  destroy for ForEachView(a1);
  return a1;
}

uint64_t sub_1B0F6D448(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GeometryReaderView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D484(uint64_t a1)
{
  destroy for GeometryReaderView(a1);
  return a1;
}

uint64_t sub_1B0F6D4B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollViewReaderView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D4F4(uint64_t a1)
{
  destroy for ScrollViewReaderView(a1);
  return a1;
}

uint64_t sub_1B0F6D528(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PickerView(a2, a1);
  return a2;
}

uint64_t sub_1B0F6D564(uint64_t a1)
{
  destroy for PickerView(a1);
  return a1;
}

uint64_t sub_1B0F6D598(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  swift_bridgeObjectRetain();
  sub_1B0F5FD10(v2, v3, v4, v8);
  sub_1B0F56C04(v5, v6, v7, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1B0F6D650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  swift_bridgeObjectRelease();
  sub_1B0F5FD28(v2, v3, v4, v8);
  sub_1B0F56B88(v5, v6, v7, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6D704(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1B0F56B88(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1B0F6D784(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1B0F6D7D4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t destroy for MaskModifier(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_release();
  result = swift_release();
  v3 = *(unsigned __int8 *)(a1 + 144);
  if (v3 <= 0xFD)
    return sub_1B0F56ADC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v3);
  return result;
}

uint64_t initializeWithCopy for MaskModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a2 + 40;
  v7 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 40, v6);
  *(_BYTE *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(unsigned __int8 *)(a2 + 144);
  swift_retain();
  swift_retain();
  if (v11 <= 0xFD)
  {
    v12 = *(_QWORD *)(a2 + 120);
    v13 = *(_QWORD *)(a2 + 128);
    v14 = *(_QWORD *)(a2 + 136);
    sub_1B0F56B9C(v12, v13, v14, v11);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = v14;
    *(_BYTE *)(a1 + 144) = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  }
  return a1;
}

uint64_t assignWithCopy for MaskModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    v4 = *(_BYTE *)(a2 + 80);
    v5 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
    *(_BYTE *)(a1 + 80) = v4;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = (_OWORD *)(a1 + 120);
  v7 = (_OWORD *)(a2 + 120);
  v8 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned __int8 *)(a1 + 144) <= 0xFDu)
  {
    if (v8 <= 0xFD)
    {
      v14 = *(_QWORD *)(a2 + 120);
      v15 = *(_QWORD *)(a2 + 128);
      v16 = *(_QWORD *)(a2 + 136);
      sub_1B0F56B9C(v14, v15, v16, v8);
      v17 = *(_QWORD *)(a1 + 120);
      v18 = *(_QWORD *)(a1 + 128);
      v19 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = v15;
      *(_QWORD *)(a1 + 136) = v16;
      v20 = *(_BYTE *)(a1 + 144);
      *(_BYTE *)(a1 + 144) = v8;
      sub_1B0F56ADC(v17, v18, v19, v20);
    }
    else
    {
      sub_1B0F5EA14(a1 + 120);
      v10 = *(_OWORD *)(a2 + 129);
      *v6 = *v7;
      *(_OWORD *)(a1 + 129) = v10;
    }
  }
  else if (v8 <= 0xFD)
  {
    v11 = *(_QWORD *)(a2 + 120);
    v12 = *(_QWORD *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 136);
    sub_1B0F56B9C(v11, v12, v13, v8);
    *(_QWORD *)(a1 + 120) = v11;
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v13;
    *(_BYTE *)(a1 + 144) = v8;
  }
  else
  {
    v9 = *v7;
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    *v6 = v9;
  }
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for MaskModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v7 = *(unsigned __int8 *)(a1 + 144);
  if (v7 <= 0xFD)
  {
    v8 = *(unsigned __int8 *)(a2 + 144);
    if (v8 <= 0xFD)
    {
      v9 = *(_QWORD *)(a2 + 136);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(a1 + 128);
      v12 = *(_QWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = v9;
      *(_BYTE *)(a1 + 144) = v8;
      sub_1B0F56ADC(v10, v11, v12, v7);
      return a1;
    }
    sub_1B0F5EA14(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaskModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaskModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaskModifier()
{
  return &type metadata for MaskModifier;
}

uint64_t sub_1B0F6DD60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  _QWORD v18[2];
  uint64_t *v19;

  v6 = a3;
  v7 = *(unsigned __int8 *)(v3 + 144);
  if (v7 <= 0xFD)
  {
    v19 = a3;
    v10 = *(_QWORD *)(v3 + 120);
    v9 = *(_QWORD *)(v3 + 128);
    v11 = *(_QWORD *)(v3 + 136);
    sub_1B0F56B9C(v10, v9, v11, v7);
    StringResolvable.resolved(with:)(a2);
    if (v4)
    {

      sub_1B0F56B88(v10, v9, v11, v7);
    }
    else
    {
      sub_1B0F56B88(v10, v9, v11, v7);
      v12 = sub_1B1001DC8();
      if (v12 != 9)
      {
        v17 = v12;
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        __asm { BR              X10 }
      }
    }
    v6 = v19;
  }
  v13 = a1[4];
  v14 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  MEMORY[0x1E0C80A78](v14);
  sub_1B1035990();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE8D8);
  v15 = sub_1B103497C();
  v6[3] = v15;
  v18[0] = v13;
  v18[1] = sub_1B0F6E390();
  v6[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v15, v18);
  __swift_allocate_boxed_opaque_existential_1(v6);
  sub_1B0F64174();
  return sub_1B1035558();
}

void sub_1B0F6DF70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = sub_1B1035990();
  MEMORY[0x1E0C80A78](v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE8D8);
  v4 = sub_1B103497C();
  v0[3] = v4;
  v5 = sub_1B0F6E390();
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v5;
  v0[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v4, v2 - 144);
  __swift_allocate_boxed_opaque_existential_1(v0);
  sub_1B0F64174();
  JUMPOUT(0x1B0F6DF08);
}

uint64_t sub_1B0F6E060(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E656D6E67696C61;
  else
    return 1802723693;
}

uint64_t sub_1B0F6E094()
{
  char *v0;

  return sub_1B0F6E060(*v0);
}

uint64_t sub_1B0F6E09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0F6E624(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0F6E0C0()
{
  sub_1B0F6E3DC();
  return sub_1B10362B4();
}

uint64_t sub_1B0F6E0E8()
{
  sub_1B0F6E3DC();
  return sub_1B10362C0();
}

uint64_t sub_1B0F6E110@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE8E8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F6E3DC();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v8 = v5;
  v9 = v26;
  v12 = 0;
  sub_1B0F64238();
  sub_1B10360BC();
  v21[4] = v17;
  v21[5] = v18;
  v21[6] = v19;
  v22 = v20;
  v21[0] = v13;
  v21[1] = v14;
  v21[2] = v15;
  v21[3] = v16;
  v12 = 1;
  sub_1B0F56A98();
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v4);
  v23 = v13;
  v24 = v14;
  v25 = BYTE8(v14);
  sub_1B0F6E420((uint64_t)v21, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B0F6E454((uint64_t)v21);
}

uint64_t sub_1B0F6E300@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F6DD60(a1, a2, a3);
}

uint64_t sub_1B0F6E314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F6E110(a1, a2);
}

unint64_t sub_1B0F6E328(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F6E34C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F6E34C()
{
  unint64_t result;

  result = qword_1EEEDE8D0;
  if (!qword_1EEEDE8D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038A08, &type metadata for MaskModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8D0);
  }
  return result;
}

unint64_t sub_1B0F6E390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE8E0;
  if (!qword_1EEEDE8E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE8D8);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDBC30], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8E0);
  }
  return result;
}

unint64_t sub_1B0F6E3DC()
{
  unint64_t result;

  result = qword_1EEEDE8F0;
  if (!qword_1EEEDE8F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038B10, &type metadata for MaskModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8F0);
  }
  return result;
}

uint64_t sub_1B0F6E420(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MaskModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0F6E454(uint64_t a1)
{
  destroy for MaskModifier(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for MaskModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F6E4CC + 4 * byte_1B10389EE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F6E500 + 4 * byte_1B10389E9[v4]))();
}

uint64_t sub_1B0F6E500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6E508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F6E510);
  return result;
}

uint64_t sub_1B0F6E51C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F6E524);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F6E528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F6E530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MaskModifier.CodingKeys()
{
  return &type metadata for MaskModifier.CodingKeys;
}

unint64_t sub_1B0F6E550()
{
  unint64_t result;

  result = qword_1EEEDE8F8;
  if (!qword_1EEEDE8F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038AE8, &type metadata for MaskModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE8F8);
  }
  return result;
}

unint64_t sub_1B0F6E598()
{
  unint64_t result;

  result = qword_1EEEDE900;
  if (!qword_1EEEDE900)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038A58, &type metadata for MaskModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE900);
  }
  return result;
}

unint64_t sub_1B0F6E5E0()
{
  unint64_t result;

  result = qword_1EEEDE908;
  if (!qword_1EEEDE908)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038A80, &type metadata for MaskModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDE908);
  }
  return result;
}

uint64_t sub_1B0F6E624(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1802723693 && a2 == 0xE400000000000000;
  if (v3 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B0F6E708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RemoteAction.performSynchronousAction(with:localStore:)(a1, a2, a3, a4);
}

uint64_t sub_1B0F6E71C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    v21 = sub_1B0F6B618(0x6974634165766F4DLL, 0xEA00000000006E6FLL, &v22);
    a2 = v20;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = v3[3];
  *(_OWORD *)(v15 + 64) = v3[2];
  *(_OWORD *)(v15 + 80) = v16;
  *(_OWORD *)(v15 + 96) = v3[4];
  *(_OWORD *)(v15 + 105) = *(_OWORD *)((char *)v3 + 73);
  v17 = v3[1];
  *(_OWORD *)(v15 + 32) = *v3;
  *(_OWORD *)(v15 + 48) = v17;
  *(_QWORD *)(v15 + 128) = a1;
  *(_QWORD *)(v15 + 136) = a2;
  sub_1B0F7671C((uint64_t)v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEAE8, v15);
  return swift_release();
}

uint64_t sub_1B0F6E984(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v19 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21 = v13;
    *(_DWORD *)v12 = 136315138;
    v20 = sub_1B0F6B618(0x63416574656C6544, 0xEC0000006E6F6974, &v21);
    a2 = v19;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = v3[1];
  *(_OWORD *)(v15 + 32) = *v3;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v3[2];
  *(_OWORD *)(v15 + 73) = *(_OWORD *)((char *)v3 + 41);
  *(_QWORD *)(v15 + 96) = a1;
  *(_QWORD *)(v15 + 104) = a2;
  sub_1B0F768F4((uint64_t)v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEAF8, v15);
  return swift_release();
}

uint64_t sub_1B0F6EBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v23 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v25 = v13;
    *(_DWORD *)v12 = 136315138;
    v24 = sub_1B0F6B618(0x634164616F6C6552, 0xEC0000006E6F6974, &v25);
    a2 = v23;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(v15 + 160) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v15 + 176) = v16;
  *(_BYTE *)(v15 + 192) = *(_BYTE *)(v3 + 160);
  v17 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v15 + 112) = v17;
  v18 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v15 + 128) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v15 + 144) = v18;
  v19 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v15 + 48) = v19;
  v20 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v15 + 80) = v20;
  *(_QWORD *)(v15 + 200) = a1;
  *(_QWORD *)(v15 + 208) = a2;
  sub_1B0F761FC(v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEAB8, v15);
  return swift_release();
}

uint64_t sub_1B0F6EE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v10 = sub_1B103467C();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA00);
  v11 = sub_1B1034664();
  v12 = sub_1B1035E1C();
  if (os_log_type_enabled(v11, v12))
  {
    v20 = v4;
    v13 = swift_slowAlloc();
    v21 = v3;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v23 = v15;
    *(_DWORD *)v14 = 136315138;
    v22 = sub_1B0F6B618(0x417373696D736944, 0xED00006E6F697463, &v23);
    v4 = v20;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v11, v12, "%s has not implemented a synchronous action. Running async.", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v15, -1, -1);
    MEMORY[0x1B5E15248](v14, -1, -1);
  }

  v16 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v4;
  v17[5] = a1;
  v17[6] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v9, (uint64_t)&unk_1EEEDE9B8, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_1B0F6F0C8(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    v21 = sub_1B0F6B618(0x6F6974616D696E41, 0xEF6E6F697463416ELL, &v22);
    a2 = v20;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = v3[3];
  *(_OWORD *)(v15 + 64) = v3[2];
  *(_OWORD *)(v15 + 80) = v16;
  *(_OWORD *)(v15 + 89) = *(_OWORD *)((char *)v3 + 57);
  v17 = v3[1];
  *(_OWORD *)(v15 + 32) = *v3;
  *(_OWORD *)(v15 + 48) = v17;
  *(_QWORD *)(v15 + 112) = a1;
  *(_QWORD *)(v15 + 120) = a2;
  sub_1B0F764F8((uint64_t)v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEAD8, v15);
  return swift_release();
}

uint64_t sub_1B0F6F330(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v13;
    v19 = v8;
    *(_DWORD *)v12 = 136315138;
    v21 = sub_1B0F6B618(0xD000000000000010, 0x80000001B104CAD0, &v22);
    v8 = v19;
    a2 = v20;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = v3[1];
  *(_OWORD *)(v15 + 32) = *v3;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v3[2];
  *(_OWORD *)(v15 + 73) = *(_OWORD *)((char *)v3 + 41);
  *(_QWORD *)(v15 + 96) = a1;
  *(_QWORD *)(v15 + 104) = a2;
  sub_1B0F76B9C((uint64_t)v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEB20, v15);
  return swift_release();
}

uint64_t sub_1B0F6F59C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v9 = sub_1B103467C();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEF0BA00);
  v10 = sub_1B1034664();
  v11 = sub_1B1035E1C();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v26 = v13;
    *(_DWORD *)v12 = 136315138;
    v25 = sub_1B0F6B618(0xD000000000000011, 0x80000001B104CAB0, &v26);
    a2 = v24;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v10, v11, "%s has not implemented a synchronous action. Running async.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v13, -1, -1);
    MEMORY[0x1B5E15248](v12, -1, -1);
  }

  v14 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(v15 + 160) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v15 + 176) = v16;
  v17 = *(_QWORD *)(v3 + 160);
  v18 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v15 + 112) = v18;
  v19 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v15 + 128) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v15 + 144) = v19;
  v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v15 + 48) = v20;
  v21 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v15 + 80) = v21;
  *(_QWORD *)(v15 + 192) = v17;
  *(_QWORD *)(v15 + 200) = a1;
  *(_QWORD *)(v15 + 208) = a2;
  sub_1B0F75E80(v3);
  swift_retain();
  swift_retain();
  sub_1B0F70150((uint64_t)v8, (uint64_t)&unk_1EEEDEAA0, v15);
  return swift_release();
}

uint64_t sub_1B0F6F814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v14 = sub_1B103467C();
  __swift_project_value_buffer(v14, (uint64_t)qword_1EEF0BA00);
  v15 = sub_1B1034664();
  v16 = sub_1B1035E1C();
  if (os_log_type_enabled(v15, v16))
  {
    v27 = a1;
    v17 = swift_slowAlloc();
    v28 = a4;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc();
    v29 = v5;
    v20 = v19;
    v31 = v19;
    v26 = v13;
    *(_DWORD *)v18 = 136315138;
    v30 = sub_1B0F6B618(0x6E6F697463416649, 0xE800000000000000, &v31);
    v13 = v26;
    a1 = v27;
    sub_1B1035E7C();
    _os_log_impl(&dword_1B0F50000, v15, v16, "%s has not implemented a synchronous action. Running async.", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v20, -1, -1);
    v21 = v18;
    a4 = v28;
    MEMORY[0x1B5E15248](v21, -1, -1);
  }

  v22 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 1, 1, v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a3;
  v23[5] = a4;
  v23[6] = a5;
  v23[7] = a1;
  v23[8] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F70150((uint64_t)v13, (uint64_t)&unk_1EEEDEAC8, (uint64_t)v23);
  return swift_release();
}

uint64_t RemoteAction.performSynchronousAction(with:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a2;
  v5 = v4;
  v36 = a4;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v10);
  v35 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v12 = sub_1B103467C();
  __swift_project_value_buffer(v12, (uint64_t)qword_1EEF0BA00);
  v13 = sub_1B1034664();
  v14 = sub_1B1035E1C();
  if (os_log_type_enabled(v13, v14))
  {
    v34 = v8;
    v15 = swift_slowAlloc();
    v32 = v5;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v33 = v9;
    v18 = v17;
    v40 = v17;
    *(_DWORD *)v16 = 136315138;
    v19 = sub_1B10362D8();
    v39 = sub_1B0F6B618(v19, v20, &v40);
    sub_1B1035E7C();
    v8 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0F50000, v13, v14, "%s has not implemented a synchronous action. Running async.", v16, 0xCu);
    swift_arrayDestroy();
    v21 = v18;
    v9 = v33;
    MEMORY[0x1B5E15248](v21, -1, -1);
    v22 = v16;
    v5 = v32;
    MEMORY[0x1B5E15248](v22, -1, -1);
  }

  v23 = sub_1B1035D80();
  v24 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v35, 1, 1, v23);
  v25 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v37, v5, a3);
  v26 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v27 = (v9 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = 0;
  v29 = v36;
  *((_QWORD *)v28 + 4) = a3;
  *((_QWORD *)v28 + 5) = v29;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v28[v26], v25, a3);
  *(_QWORD *)&v28[v27] = a1;
  *(_QWORD *)&v28[(v27 + 15) & 0xFFFFFFFFFFFFFFF8] = v38;
  swift_retain();
  swift_retain();
  sub_1B0F70150(v24, (uint64_t)&unk_1EEEDE920, (uint64_t)v28);
  return swift_release();
}

uint64_t sub_1B0F6FD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[4] = a4;
  v5[5] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  v5[6] = swift_task_alloc();
  v6 = sub_1B1034634();
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = *(_QWORD *)(v7 + 64);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B0F6FE28()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  void (*v28)(uint64_t);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(NSObject **)(v0 + 40);
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  sub_1B0F767BC(*(_QWORD *)v1, v4, v5, v6, sub_1B0F76F14);
  v7 = sub_1B0FD7724(v2, v3, v4, v5, v6);
  sub_1B0F76648(v3, v4, v5, v6, sub_1B0F76F18);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDEB08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
  sub_1B1035EC4();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 32);
    do
    {
      v10 = *v9++;
      *(_QWORD *)(v0 + 24) = v10;
      sub_1B1035EAC();
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 80);
  v27 = v12;
  v14 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 40);
  v15 = *(_QWORD *)(v0 + 48);
  v17 = *(__int128 **)(v0 + 32);
  v28 = *(void (**)(uint64_t))(v13 + 32);
  v28(v11);
  v18 = sub_1B1035D80();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
  sub_1B1035D68();
  sub_1B0F768F4((uint64_t)v17);
  swift_retain();
  v19 = sub_1B1035D5C();
  v20 = (*(unsigned __int8 *)(v13 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = swift_allocObject();
  v22 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = v22;
  v24 = v17[1];
  v23 = v17[2];
  v25 = *v17;
  *(_OWORD *)(v21 + 73) = *(__int128 *)((char *)v17 + 41);
  *(_OWORD *)(v21 + 48) = v24;
  *(_OWORD *)(v21 + 64) = v23;
  *(_OWORD *)(v21 + 32) = v25;
  *(_QWORD *)(v21 + 96) = v16;
  ((void (*)(unint64_t, uint64_t, uint64_t))v28)(v21 + v20, v27, v14);
  sub_1B0F70150(v15, (uint64_t)&unk_1EEEDEB10, v21);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F700C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 16) + *(_QWORD *)(a8 + 16));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_1B0F76EDC;
  return v15(a5, a6, a7, a8);
}

uint64_t sub_1B0F70150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1B1035D80();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1B1035D74();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1B0F5A3AC(a1, &qword_1EEEDE910);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1035D50();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t RemoteAction.modifyView(_:with:localStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F5FD84(a1, a2);
}

uint64_t Array<A>.performAllAsync(store:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a3;
  v10[5] = a1;
  v10[6] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1B0F706F4((uint64_t)v8, (uint64_t)&unk_1EEEDE930, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1B0F70394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  v6[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B0F703F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v20 = (__int128 *)(v0 + 16);
    v16 = (_QWORD *)(v0 + 56);
    v3 = v1 + 32;
    v4 = sub_1B1035D80();
    v19 = *(_QWORD *)(v4 - 8);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    swift_bridgeObjectRetain();
    v17 = v0;
    while (1)
    {
      v21 = v2;
      v6 = *(_QWORD *)(v0 + 104);
      v5 = *(_QWORD *)(v0 + 112);
      v7 = *(_QWORD *)(v0 + 96);
      v18(v5, 1, 1, v4);
      sub_1B0F5FD84(v3, (uint64_t)v20);
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = 0;
      v9 = v8 + 2;
      v8[3] = 0;
      sub_1B0F5A0E4(v20, (uint64_t)(v8 + 4));
      v8[9] = v7;
      v8[10] = v6;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v5, 1, v4);
      swift_retain();
      swift_retain();
      v11 = *(_QWORD *)(v0 + 112);
      if (v10 == 1)
      {
        sub_1B0F5A3AC(*(_QWORD *)(v0 + 112), &qword_1EEEDE910);
        if (!*v9)
          goto LABEL_9;
      }
      else
      {
        sub_1B1035D74();
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v11, v4);
        if (!*v9)
        {
LABEL_9:
          v12 = 0;
          v14 = 0;
          goto LABEL_10;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_1B1035D50();
      v14 = v13;
      swift_unknownObjectRelease();
LABEL_10:
      v0 = v17;
      if (v14 | v12)
      {
        *v16 = 0;
        v16[1] = 0;
        *(_QWORD *)(v17 + 72) = v12;
        *(_QWORD *)(v17 + 80) = v14;
      }
      swift_task_create();
      swift_release();
      v3 += 40;
      v2 = v21 - 1;
      if (v21 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F70610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_1B0F7062C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_1B0F706AC;
  return v6(v0[3], v0[4], v2, v3);
}

uint64_t sub_1B0F706AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B0F706F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1B1035D80();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1B1035D74();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1B0F5A3AC(a1, &qword_1EEEDE910);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1035D50();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t Array<A>.performAllSync(store:localStore:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v7 = result;
    v8 = (_QWORD *)(a3 + 32);
    swift_bridgeObjectRetain();
    v9 = v5 - 1;
    do
    {
      v10 = v9;
      v11 = v8[3];
      v12 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24))(v7, a2, v11, v12);
      if (v4)
        break;
      v9 = v10 - 1;
      v8 += 5;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RemoteActionBox.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F5FD84(v1, a1);
}

uint64_t RemoteActionBox.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  id v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  v35 = a2;
  v48 = *MEMORY[0x1E0C80C00];
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B1036008();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10 = sub_1B103626C();
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v6, (uint64_t)qword_1EEF0BA18);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  if (*(_QWORD *)(v10 + 16) && (v12 = sub_1B0F56A48((uint64_t)v9), (v13 & 1) != 0))
  {
    sub_1B0F57208(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v43);
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!*((_QWORD *)&v44 + 1))
  {
    sub_1B0F5A3AC((uint64_t)&v43, &qword_1EEEDE158);
    goto LABEL_12;
  }
  type metadata accessor for ContentRegistry();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    type metadata accessor for ContentRegistryError();
    sub_1B0F524FC(&qword_1EEEDE488, (uint64_t (*)(uint64_t))type metadata accessor for ContentRegistryError, (uint64_t)&unk_1B1045C40);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v14 = v42;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v15 = sub_1B0F5DCE4();
  sub_1B1036278();
  if (v2)
  {

  }
  else
  {
    v34 = v14;
    v17 = v37;
    v18 = sub_1B10360C8();
    if (*(_QWORD *)(v18 + 16))
    {
      v19 = *(_QWORD *)(v18 + 40);
      v32 = *(_QWORD *)(v18 + 32);
      v31 = *(_QWORD *)(v18 + 48);
      v33 = *(unsigned __int8 *)(v18 + 56);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      v20 = sub_1B1036074();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE498);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
      *(_QWORD *)(inited + 56) = &type metadata for DynamicKey;
      *(_QWORD *)(inited + 64) = v15;
      v22 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v22;
      v23 = v32;
      *(_QWORD *)(v22 + 16) = v32;
      *(_QWORD *)(v22 + 24) = v19;
      v24 = v31;
      *(_QWORD *)(v22 + 32) = v31;
      *(_BYTE *)(v22 + 40) = v33;
      *(_QWORD *)&v43 = v20;
      swift_bridgeObjectRetain();
      sub_1B0F5DD60(inited);
      v25 = sub_1B0FFDE6C(v23, v19);
      v29 = v26;
      v30 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v23;
      v39 = v19;
      v40 = v24;
      v41 = v33;
      sub_1B1036080();
      swift_bridgeObjectRelease();
      *((_QWORD *)&v44 + 1) = v30;
      v45 = v29;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
      sub_1B1035DB0();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v17);

      sub_1B0F5A0E4(&v43, (uint64_t)v46);
      v27 = v46[1];
      v28 = v35;
      *v35 = v46[0];
      v28[1] = v27;
      *((_QWORD *)v28 + 4) = v47;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for DynamicKeyError();
      sub_1B0F524FC(&qword_1EEEDE4C0, (uint64_t (*)(uint64_t))type metadata accessor for DynamicKeyError, (uint64_t)&unk_1B103D9EC);
      swift_allocError();
      sub_1B1036074();
      sub_1B1035F30();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v17);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F70F10@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return RemoteActionBox.init(from:)(a1, a2);
}

uint64_t static DismissAction.== infix(_:_:)()
{
  return 0;
}

uint64_t sub_1B0F70F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9E8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B103482C();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a1 + OBJC_IVAR____TtC6LiftUI13DismissAction_dismissAction;
  swift_beginAccess();
  sub_1B0F74C80((uint64_t)v6, v9, &qword_1EEEDE9E8);
  return swift_endAccess();
}

uint64_t sub_1B0F71018(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = sub_1B103482C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v6 = sub_1B103467C();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EEF0BA00);
  v7 = sub_1B1034664();
  v8 = sub_1B1035E34();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B0F50000, v7, v8, "Dismiss Action", v9, 2u);
    MEMORY[0x1B5E15248](v9, -1, -1);
  }

  v10 = a1 + OBJC_IVAR____TtC6LiftUI13DismissAction_dismissAction;
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    sub_1B1034820();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_1B0F7119C()
{
  uint64_t v0;

  sub_1B0F5A3AC(v0 + OBJC_IVAR____TtC6LiftUI13DismissAction_dismissAction, &qword_1EEEDE9E8);
  return swift_deallocClassInstance();
}

uint64_t sub_1B0F711D4()
{
  uint64_t v0;

  sub_1B0F744E8();
  return sub_1B0F746E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1B0F7120C(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6EE64(a1, a2);
}

uint64_t sub_1B0F7122C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  swift_getKeyPath();
  v5 = sub_1B103482C();
  v6 = sub_1B0F524FC(&qword_1EEEDE9E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD8E80], (uint64_t)&protocol conformance descriptor for DismissAction);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  a2[3] = MEMORY[0x1B5E15134](0, &v8, MEMORY[0x1E0CDEA68], 0);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  a2[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a2);
  swift_retain();
  sub_1B10354A4();
  swift_release();
  return swift_release();
}

uint64_t sub_1B0F71350@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1(a1);
  v5 = v4 + OBJC_IVAR____TtC6LiftUI13DismissAction_dismissAction;
  v6 = sub_1B103482C();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *a2 = v4;
  return result;
}

void sub_1B0F713D0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  uint8_t *v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  _QWORD v40[2];
  void *v41;
  uint8_t *v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53[3];
  char v54;
  NSObject *v55;
  id v56[3];

  v3 = 0;
  v4 = sub_1B103467C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v1;
  v8 = *(void **)(v1 + 8);
  v10 = *(void **)(v1 + 16);
  v11 = *(void **)(v1 + 24);
  v12 = *(unsigned __int8 *)(v1 + 32);
  v13 = *(_QWORD *)(v1 + 48);
  v50 = *(_QWORD *)(v1 + 40);
  v51 = v13;
  v52 = *(_QWORD *)(v1 + 56);
  v14 = *(unsigned __int8 *)(v1 + 64);
  v48 = v8;
  v49 = v10;
  if (v9)
  {
    v46 = v14;
    v47 = v11;
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1EEF0BA00);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v15, v4);
    swift_bridgeObjectRetain_n();
    v16 = sub_1B1034664();
    v17 = sub_1B1035E34();
    if (os_log_type_enabled(v16, v17))
    {
      v44 = a1;
      v18 = (uint8_t *)swift_slowAlloc();
      v42 = v18;
      v43 = (void *)swift_slowAlloc();
      v53[0] = v43;
      v45 = v12;
      *(_DWORD *)v18 = 136315138;
      v56[0] = (id)sub_1B0F71A68(v9);
      v40[1] = v18 + 4;
      v41 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA88);
      sub_1B0F5A7E4(&qword_1EEEDEA90, &qword_1EEEDEA88, MEMORY[0x1E0DEAF20]);
      v19 = sub_1B1035B64();
      v21 = v20;
      a1 = v44;
      swift_bridgeObjectRelease();
      v56[0] = (id)sub_1B0F6B618(v19, v21, (uint64_t *)v53);
      v12 = v45;
      sub_1B1035E7C();
      swift_bridgeObjectRelease_n();
      v3 = v41;
      swift_bridgeObjectRelease();
      v22 = v17;
      v23 = v42;
      _os_log_impl(&dword_1B0F50000, v16, v22, "Set Action: %s", v42, 0xCu);
      v24 = v43;
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v24, -1, -1);
      MEMORY[0x1B5E15248](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1B0F75844(v9, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B0F75CCC);
    v11 = v47;
    v8 = v48;
    v14 = v46;
    v10 = v49;
  }
  if (v12 != 255 && v14 != 255)
  {
    sub_1B0F75C64((uint64_t)v8, (uint64_t)v10, (uint64_t)v11, v12);
    sub_1B0F75C64(v50, v51, v52, v14);
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EEF0BA00);
    v25 = sub_1B1034664();
    v26 = sub_1B1035E34();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = v3;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1B0F50000, v25, v26, "LiftUI Set Action with reference", v28, 2u);
      v29 = v28;
      v3 = v27;
      MEMORY[0x1B5E15248](v29, -1, -1);
    }

    sub_1B0FD6EFC(a1, v50, v51, v52, v14 & 1, (uint64_t *)v53);
    if (v3)
    {
      v53[0] = v3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3F8);
      sub_1B0F75C7C(0, &qword_1EEEDEA78);
      swift_dynamicCast();
      v33 = v56[0];
      v34 = sub_1B1034664();
      v35 = sub_1B1035E34();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        v37 = swift_slowAlloc();
        v47 = v11;
        v38 = (_QWORD *)v37;
        *(_DWORD *)v36 = 138412290;
        v55 = v33;
        v46 = v14;
        v39 = v33;
        sub_1B1035E7C();
        *v38 = v33;

        _os_log_impl(&dword_1B0F50000, v34, v35, "LiftUI Set Action failed with error %@", v36, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA80);
        swift_arrayDestroy();
        MEMORY[0x1B5E15248](v38, -1, -1);
        MEMORY[0x1B5E15248](v36, -1, -1);
        sub_1B0F75CB4((uint64_t)v48, (uint64_t)v49, (uint64_t)v47, v12);
        sub_1B0F75CB4(v50, v51, v52, v46);
      }
      else
      {
        sub_1B0F75CB4((uint64_t)v48, (uint64_t)v49, (uint64_t)v11, v12);
        sub_1B0F75CB4(v50, v51, v52, v14);

        v34 = v33;
      }

    }
    else
    {
      v30 = v53[0];
      v32 = (uint64_t)v48;
      v31 = (uint64_t)v49;
      v53[0] = v48;
      v53[1] = v49;
      v53[2] = v11;
      v54 = v12 & 1;
      v56[0] = v30;
      RemoteStateStore.set(reference:value:)((uint64_t)v53, (uint64_t *)v56);
      sub_1B0F75CB4(v50, v51, v52, v14);
      swift_release();
      sub_1B0F75CB4(v32, v31, (uint64_t)v11, v12);
    }
  }
}

uint64_t sub_1B0F719CC()
{
  sub_1B1035C18();
  sub_1B1035C18();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA40);
  sub_1B1035FF0();
  return 0;
}

uint64_t sub_1B0F71A68(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v35 = MEMORY[0x1E0DEE9D8];
  sub_1B0FDD884(0, v1, 0);
  v2 = v35;
  result = sub_1B0F74460(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v28 = v3;
  v24 = v3 + 80;
  v25 = v1;
  v26 = v5;
  v27 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v29 = v7;
    v12 = *(_QWORD *)(v3 + 56) + 32 * v6;
    v13 = *(_QWORD *)v12;
    v32 = *(_QWORD *)(v12 + 8);
    v33 = *(_QWORD *)(v12 + 16);
    v34 = *(_BYTE *)(v12 + 24);
    swift_bridgeObjectRetain();
    sub_1B0F5A84C(v13, v32, v33, v34);
    swift_bridgeObjectRetain();
    sub_1B0F5A84C(v13, v32, v33, v34);
    swift_bridgeObjectRelease();
    sub_1B0F74EA4(v13, v32, v33, v34);
    v14 = sub_1B0F719CC();
    v30 = v15;
    v31 = v14;
    swift_bridgeObjectRelease();
    result = sub_1B0F74EA4(v13, v32, v33, v34);
    v17 = *(_QWORD *)(v35 + 16);
    v16 = *(_QWORD *)(v35 + 24);
    if (v17 >= v16 >> 1)
      result = sub_1B0FDD884(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v35 + 16) = v17 + 1;
    v18 = v35 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v31;
    *(_QWORD *)(v18 + 40) = v30;
    v3 = v28;
    v9 = 1 << *(_BYTE *)(v28 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v27;
    v19 = *(_QWORD *)(v27 + 8 * v11);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v26;
    if (*(_DWORD *)(v28 + 36) != v26)
      goto LABEL_27;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v25;
    }
    else
    {
      v21 = v11 + 1;
      v22 = (unint64_t)(v9 + 63) >> 6;
      v10 = v25;
      if (v11 + 1 < v22)
      {
        v23 = *(_QWORD *)(v27 + 8 * v21);
        if (v23)
        {
LABEL_20:
          v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            v23 = *(_QWORD *)(v24 + 8 * v11++);
            if (v23)
            {
              v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v29 + 1;
    v6 = v9;
    if (v29 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1B0F71D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;

  sub_1B0FD6EFC(a4, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_BYTE *)(a3 + 24), &v8);
  v6 = v8;
  swift_bridgeObjectRetain();
  return sub_1B0FEBD74(v6, a1, a2);
}

uint64_t sub_1B0F71DAC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636E657265666572;
  else
    return 0x65756C6176;
}

uint64_t sub_1B0F71DE4(char *a1, char *a2)
{
  return sub_1B100BDE4(*a1, *a2);
}

uint64_t sub_1B0F71DF0()
{
  return sub_1B100F8A4();
}

uint64_t sub_1B0F71DF8()
{
  return sub_1B1011B10();
}

uint64_t sub_1B0F71E00()
{
  return sub_1B1015C9C();
}

uint64_t sub_1B0F71E08@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F71E64@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F71DAC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F71E8C()
{
  char *v0;

  return sub_1B0F71DAC(*v0);
}

uint64_t sub_1B0F71E94@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F71EF4()
{
  sub_1B0F76CF0();
  return sub_1B10362B4();
}

uint64_t sub_1B0F71F1C()
{
  sub_1B0F76CF0();
  return sub_1B10362C0();
}

uint64_t sub_1B0F71F44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned __int8 v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  _QWORD v56[2];
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;

  v57 = a2;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  v58 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v5 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEB30);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEB38);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B0F76CF0();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    sub_1B0F5A3AC((uint64_t)v8, &qword_1EEEDEB30);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    LOBYTE(v67) = 1;
    if ((sub_1B10360D4() & 1) != 0)
    {
      sub_1B0F5FD84((uint64_t)v59, (uint64_t)&v67);
      sub_1B0FA6C84(&v67, (uint64_t *)&v71);
      v48 = (uint64_t)v71;
      v47 = v72;
      v49 = v73;
      LODWORD(v75) = v74;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA40);
      LOBYTE(v71) = 0;
      sub_1B0F5A7E4((unint64_t *)&qword_1EEEDEB48, &qword_1EEEDEA40, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
      sub_1B10360BC();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v50 = 0;
      v51 = v67;
      v52 = v68;
      v53 = v69;
      v54 = v70;
      v55 = v75;
LABEL_24:
      v44 = v57;
      *v57 = v50;
      v44[1] = v48;
      v44[2] = v47;
      v44[3] = v49;
      *((_BYTE *)v44 + 32) = v55;
      v44[5] = v51;
      v44[6] = v52;
      v44[7] = v53;
      *((_BYTE *)v44 + 64) = v54;
      LODWORD(v75) = v55;
      v66 = v53;
      v45 = v54;
      swift_bridgeObjectRetain();
      sub_1B0F75C64(v48, v47, v49, v55);
      sub_1B0F75C64(v51, v52, v53, v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
      swift_bridgeObjectRelease();
      sub_1B0F75CB4(v48, v47, v49, v75);
      return sub_1B0F75CB4(v51, v52, v66, v45);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  __swift_project_boxed_opaque_existential_1(v59, v59[3]);
  sub_1B0F5DCE4();
  sub_1B1036278();
  v14 = 0;
  v15 = sub_1B10360C8();
  v16 = *(_QWORD *)(v15 + 16);
  v56[1] = v15;
  if (!v16)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_23:
    v50 = v19;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v5, v63);
    v52 = 0;
    v51 = 0;
    v53 = 0;
    v49 = 0;
    v47 = 0;
    v48 = 0;
    v55 = 255;
    v54 = -1;
    goto LABEL_24;
  }
  v17 = v15;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA40);
  v61 = sub_1B0F5A7E4((unint64_t *)&qword_1EEEDEB48, &qword_1EEEDEA40, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
  v18 = (_BYTE *)(v17 + 56);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v60 = v5;
  while (1)
  {
    v22 = *((_QWORD *)v18 - 3);
    v23 = *((_QWORD *)v18 - 2);
    v24 = *v18;
    v25 = *((_QWORD *)v18 - 1);
    v71 = (_QWORD *)v22;
    v72 = v23;
    v73 = v25;
    v74 = v24;
    swift_bridgeObjectRetain_n();
    sub_1B10360BC();
    if (v14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v5, v63);
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    }
    v64 = v16;
    v65 = 0;
    swift_bridgeObjectRelease();
    v66 = v67;
    v26 = v69;
    v75 = v68;
    v27 = v70;
    v28 = (uint64_t)v19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v71 = (_QWORD *)v28;
    v31 = sub_1B0F56A3C(v22, v23);
    v32 = *(_QWORD *)(v28 + 16);
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (*(_QWORD *)(v28 + 24) >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v19 = v71;
        if ((v30 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_1B0F9DEA8();
        v19 = v71;
        if ((v35 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_1B0F9C72C(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_1B0F56A3C(v22, v23);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_28;
      v31 = v36;
      v19 = v71;
      if ((v35 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7] + 32 * v31;
        sub_1B0F74EA4(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), *(_BYTE *)(v20 + 24));
        v21 = v75;
        *(_QWORD *)v20 = v66;
        *(_QWORD *)(v20 + 8) = v21;
        *(_QWORD *)(v20 + 16) = v26;
        *(_BYTE *)(v20 + 24) = v27;
        goto LABEL_9;
      }
    }
    v19[(v31 >> 6) + 8] |= 1 << v31;
    v38 = (uint64_t *)(v19[6] + 16 * v31);
    *v38 = v22;
    v38[1] = v23;
    v39 = v19[7] + 32 * v31;
    v40 = v75;
    *(_QWORD *)v39 = v66;
    *(_QWORD *)(v39 + 8) = v40;
    *(_QWORD *)(v39 + 16) = v26;
    *(_BYTE *)(v39 + 24) = v27;
    v41 = v19[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_27;
    v19[2] = v43;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 += 32;
    v14 = v65;
    v16 = v64 - 1;
    v5 = v60;
    if (v64 == 1)
      goto LABEL_23;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = sub_1B10361B8();
  __break(1u);
  return result;
}

uint64_t sub_1B0F725B0(uint64_t a1)
{
  uint64_t v1;

  sub_1B0F755F4(a1);
  return sub_1B0F746E8(*(uint64_t (**)(void))(v1 + 8));
}

void sub_1B0F725E4(uint64_t a1)
{
  sub_1B0F75A58(a1);
}

uint64_t sub_1B0F72608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F5FD84(a1, a2);
}

uint64_t sub_1B0F72630@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B0F71F44(a1, a2);
}

uint64_t sub_1B0F72644()
{
  return 1;
}

uint64_t sub_1B0F7264C()
{
  sub_1B103620C();
  sub_1B1036218();
  return sub_1B103623C();
}

uint64_t sub_1B0F7268C()
{
  return sub_1B1036218();
}

uint64_t sub_1B0F726B0()
{
  sub_1B103620C();
  sub_1B1036218();
  return sub_1B103623C();
}

uint64_t sub_1B0F726F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0F75BE0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B0F72718()
{
  sub_1B0F74CC4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F72740()
{
  sub_1B0F74CC4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F72768(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  int v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40[3];

  v37 = a1;
  v36 = sub_1B103485C();
  v5 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9F8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1B10345E0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v16 = sub_1B103467C();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EEF0BA00);
  swift_bridgeObjectRetain_n();
  v17 = sub_1B1034664();
  v18 = sub_1B1035E34();
  if (os_log_type_enabled(v17, v18))
  {
    v34 = v9;
    v19 = swift_slowAlloc();
    v31 = v14;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v32 = a3;
    v22 = v21;
    v40[0] = v21;
    v33 = v13;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain();
    v39 = sub_1B0F6B618(v37, a2, v40);
    v13 = v33;
    v9 = v34;
    sub_1B1035E7C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0F50000, v17, v18, "Open URL Action: %s", v20, 0xCu);
    swift_arrayDestroy();
    v23 = v22;
    a3 = v32;
    MEMORY[0x1B5E15248](v23, -1, -1);
    v24 = v20;
    v14 = v31;
    MEMORY[0x1B5E15248](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1B10345D4();
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v26 = v38;
  if (v25 == 1)
    return sub_1B0F5A3AC((uint64_t)v12, &qword_1EEEDEA00);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v38, v12, v13);
  v28 = a3 + OBJC_IVAR____TtC6LiftUI13OpenURLAction_openURLAction;
  swift_beginAccess();
  sub_1B0F74AB8(v28, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v36))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    return sub_1B0F5A3AC((uint64_t)v9, &qword_1EEEDE9F8);
  }
  else
  {
    v30 = v35;
    v29 = v36;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v35, v9, v36);
    sub_1B0F5A3AC((uint64_t)v9, &qword_1EEEDE9F8);
    sub_1B1034850();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v26, v13);
  }
}

uint64_t sub_1B0F72B2C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1B0F72B58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1 + OBJC_IVAR____TtC6LiftUI13OpenURLAction_openURLAction;
  v10 = sub_1B103485C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F74CC4();
  sub_1B1036278();
  if (v2)
  {
    sub_1B0F5A3AC(v3 + OBJC_IVAR____TtC6LiftUI13OpenURLAction_openURLAction, &qword_1EEEDE9F8);
    type metadata accessor for OpenURLAction(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1B0F56A98();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v15;
    v13 = v16;
    *(_OWORD *)(v3 + 16) = v14;
    *(_QWORD *)(v3 + 32) = v12;
    *(_BYTE *)(v3 + 40) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t sub_1B0F72D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_1B103485C();
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1B1034B14();
}

uint64_t sub_1B0F72D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v25 = a5;
  v26 = a6;
  v23[1] = a4;
  v24 = a2;
  v8 = sub_1B1035AB0();
  v29 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B1035AC8();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a3(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v23 - v16;
  sub_1B0F75C7C(0, (unint64_t *)&qword_1EEEDE9C0);
  v18 = (void *)sub_1B1035E40();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, v17, v14);
  aBlock[4] = v25;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B0F71014;
  aBlock[3] = v26;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_1B1035ABC();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE9C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9D0);
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE9D8, &qword_1EEEDE9D0, MEMORY[0x1E0DEAF38]);
  sub_1B1035ED0();
  MEMORY[0x1B5E148AC](0, v13, v10, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v28);
}

uint64_t sub_1B0F7300C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9F8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  v10 = sub_1B103485C();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a2, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_1B0F74C38((uint64_t)v9, (uint64_t)v7);
  v12 = a1 + OBJC_IVAR____TtC6LiftUI13OpenURLAction_openURLAction;
  swift_beginAccess();
  sub_1B0F74C80((uint64_t)v7, v12, &qword_1EEEDE9F8);
  return swift_endAccess();
}

uint64_t sub_1B0F73124()
{
  uint64_t v0;

  sub_1B0F56ADC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_1B0F5A3AC(v0 + OBJC_IVAR____TtC6LiftUI13OpenURLAction_openURLAction, &qword_1EEEDE9F8);
  return swift_deallocClassInstance();
}

uint64_t sub_1B0F7316C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1EEEDE9F0 + dword_1EEEDE9F0);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1B0F76EDC;
  return v5(a1);
}

uint64_t sub_1B0F731D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  swift_getKeyPath();
  v5 = sub_1B103485C();
  v6 = sub_1B0F524FC(&qword_1EEEDEA08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], (uint64_t)&protocol conformance descriptor for OpenURLAction);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  a2[3] = MEMORY[0x1B5E15134](0, &v8, MEMORY[0x1E0CDEA68], 0);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  a2[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a2);
  swift_retain();
  sub_1B10354A4();
  swift_release();
  return swift_release();
}

uint64_t sub_1B0F732F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for OpenURLAction(0);
  v5 = swift_allocObject();
  result = sub_1B0F72B58(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B0F73350(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6F59C(a1, a2);
}

uint64_t sub_1B0F733A8(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6F0C8(a1, a2);
}

uint64_t sub_1B0F733E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F73480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + v4);
  v6 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1B0F76EDC;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_1B0F76EDC;
  return v10(v5, v6, v2, v3);
}

uint64_t sub_1B0F73554(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6EBE8(a1, a2);
}

uint64_t sub_1B0F735AC(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6F330(a1, a2);
}

uint64_t sub_1B0F735EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1B0F6F814(a1, a2, *v2, v2[1], v2[2]);
}

uint64_t sub_1B0F73608(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6E71C(a1, a2);
}

uint64_t sub_1B0F73650(uint64_t a1, uint64_t a2)
{
  return sub_1B0F6E984(a1, a2);
}

uint64_t sub_1B0F73690(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B0F736F4;
  return v6(a1);
}

uint64_t sub_1B0F736F4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B0F73740()
{
  return objectdestroy_3Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B0F7374C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F737CC;
  return sub_1B0F70394(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B0F737CC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1B0F73814(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_1B1035E7C();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t sub_1B0F738C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t dispatch thunk of RemoteAction.performAction(with:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1B0F76EDC;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of RemoteAction.performSynchronousAction(with:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for RemoteActionBox()
{
  return &type metadata for RemoteActionBox;
}

uint64_t sub_1B0F73994()
{
  return type metadata accessor for DismissAction(0);
}

uint64_t type metadata accessor for DismissAction(uint64_t a1)
{
  return sub_1B0F52C7C(a1, (uint64_t *)&unk_1EEEDE948);
}

void sub_1B0F739B0()
{
  unint64_t v0;

  sub_1B0F73AD0(319, &qword_1EEEDE958, (void (*)(uint64_t))MEMORY[0x1E0CD8E80]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1B0F73A2C()
{
  return type metadata accessor for OpenURLAction(0);
}

uint64_t type metadata accessor for OpenURLAction(uint64_t a1)
{
  return sub_1B0F52C7C(a1, (uint64_t *)&unk_1EEEDE968);
}

void sub_1B0F73A48()
{
  unint64_t v0;

  sub_1B0F73AD0(319, &qword_1EEEDE978, (void (*)(uint64_t))MEMORY[0x1E0CD9030]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1B0F73AD0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1B1035E64();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B0F73B1C(uint64_t a1)
{
  uint64_t result;

  result = sub_1B0F524FC((unint64_t *)&unk_1EEEDE980, type metadata accessor for OpenURLAction, (uint64_t)&unk_1B1038C70);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F73B58(uint64_t a1)
{
  uint64_t result;

  result = sub_1B0F524FC(&qword_1EEEDE990, type metadata accessor for OpenURLAction, (uint64_t)&unk_1B1038C98);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F73B94(uint64_t a1)
{
  uint64_t result;

  result = sub_1B0F524FC((unint64_t *)&unk_1EEEDE998, type metadata accessor for DismissAction, (uint64_t)&unk_1B1038CD0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F73BD0(uint64_t a1)
{
  uint64_t result;

  result = sub_1B0F524FC(&qword_1EEEDE9A8, type metadata accessor for DismissAction, (uint64_t)&unk_1B1038CF8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0F73C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_BYTE *)(a4 + 24);
  v9 = *(_QWORD *)(a4 + 48);
  v10 = *(_BYTE *)(a4 + 56);
  v11 = *(_QWORD *)(a4 + 80);
  v12 = *(_BYTE *)(a4 + 88);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a4;
  *(_QWORD *)(v5 + 32) = v7;
  *(_BYTE *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v5 + 64) = v9;
  *(_BYTE *)(v5 + 72) = v10;
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a4 + 64);
  *(_QWORD *)(v5 + 96) = v11;
  v15 = (uint64_t (*)(uint64_t))((char *)&dword_1EEEE1850 + dword_1EEEE1850);
  *(_BYTE *)(v5 + 104) = v12;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 112) = v13;
  *v13 = v5;
  v13[1] = sub_1B0F73CBC;
  return v15(a5);
}

uint64_t sub_1B0F73CBC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B0F73D04(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v10;
  _QWORD *v11;

  v10 = a4[1];
  *(_OWORD *)(v5 + 16) = *a4;
  *(_OWORD *)(v5 + 32) = v10;
  *(_OWORD *)(v5 + 48) = a4[2];
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a4 + 41);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 80) = v11;
  *v11 = v5;
  v11[1] = sub_1B0F73DA4;
  return sub_1B0F6FD84(a1, a2, a3, v5 + 16, a5);
}

uint64_t sub_1B0F73DA4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B0F73DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t);

  v7 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 160) = v7;
  *(_BYTE *)(v5 + 176) = *(_BYTE *)(a4 + 160);
  v8 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 96) = v8;
  v9 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v5 + 128) = v9;
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 32) = v10;
  v11 = *(_OWORD *)(a4 + 48);
  v14 = (uint64_t (*)(uint64_t))((char *)&dword_1EEEE1368 + dword_1EEEE1368);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 64) = v11;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 184) = v12;
  *v12 = v5;
  v12[1] = sub_1B0F73E84;
  return v14(a5);
}

uint64_t sub_1B0F73E84()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B0F73ECC()
{
  uint64_t v0;

  sub_1B0F744E8();
  return sub_1B0F746E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1B0F73F04()
{
  return objectdestroy_3Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_3Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 32));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F73F58()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1B0F76EDC;
  return ((uint64_t (__cdecl *)())((char *)&dword_1EEEDE9B0 + dword_1EEEDE9B0))();
}

uint64_t sub_1B0F73FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_1B0FEF8BC(a5, a6);
  return sub_1B0F746E8(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1B0F74064(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;

  *(_QWORD *)(v5 + 80) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  v7 = a4[1];
  *(_OWORD *)(v5 + 16) = *a4;
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)(v5 + 48) = a4[2];
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a4 + 41);
  return swift_task_switch();
}

uint64_t sub_1B0F740DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  sub_1B0F56BC8(v1, v3, v4, v5);
  v6 = sub_1B0FD70A8(v2, v1, v3, v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = v6;
  v10 = v9;
  v11 = *(_QWORD *)(v0 + 80);
  sub_1B0F56B08(v1, v3, v4, v5);
  v12 = sub_1B1035D80();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  sub_1B1035D68();
  sub_1B0F76B9C(v0 + 16);
  swift_retain();
  v13 = sub_1B1035D5C();
  v14 = swift_allocObject();
  v15 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v15;
  v16 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v14 + 48) = v16;
  *(_OWORD *)(v14 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v0 + 57);
  *(_QWORD *)(v14 + 96) = v11;
  *(_QWORD *)(v14 + 104) = v8;
  *(_QWORD *)(v14 + 112) = v10;
  sub_1B0F70150(v7, (uint64_t)&unk_1EEEDEB28, v14);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F74264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v6 + 184) = a5;
  *(_QWORD *)(v6 + 192) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  *(_QWORD *)(v6 + 200) = swift_task_alloc();
  v8 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v6 + 160) = v8;
  *(_QWORD *)(v6 + 176) = *(_QWORD *)(a4 + 160);
  v9 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v6 + 96) = v9;
  v10 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v6 + 128) = v10;
  v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 32) = v11;
  v12 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 64) = v12;
  return swift_task_switch();
}

uint64_t sub_1B0F742F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = sub_1B1035D80();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v5 + 160) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v5 + 176) = v6;
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v5 + 112) = v8;
  v9 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v5 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v5 + 144) = v9;
  v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 48) = v10;
  v11 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 80) = v11;
  *(_QWORD *)(v5 + 192) = v7;
  *(_QWORD *)(v5 + 200) = v3;
  *(_QWORD *)(v5 + 208) = v1;
  sub_1B0F75E80(v0 + 16);
  swift_retain();
  swift_retain();
  sub_1B0F70150(v2, (uint64_t)&unk_1EEEDEAA8, v5);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F743E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v9 = *a4;
  v10 = a4[1];
  v11 = a4[2];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_1B0F737CC;
  return sub_1B1026928(a5, a6, v9, v10, v11);
}

uint64_t sub_1B0F74460(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1B0F744E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v1 = sub_1B1035AB0();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v13 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B1035AC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B0F75C7C(0, (unint64_t *)&qword_1EEEDE9C0);
  v9 = (void *)sub_1B1035E40();
  aBlock[4] = sub_1B0F746F4;
  v15 = v0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B0F71014;
  aBlock[3] = &block_descriptor;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_1B1035ABC();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE9C8, v2, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9D0);
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE9D8, &qword_1EEEDE9D0, MEMORY[0x1E0DEAF38]);
  sub_1B1035ED0();
  MEMORY[0x1B5E148AC](0, v8, v4, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B0F746E8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1B0F746F4()
{
  uint64_t v0;

  return sub_1B0F71018(v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1B0F74714()
{
  return sub_1B1034AFC();
}

uint64_t sub_1B0F74734(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0F72D84(a1, v1, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD8E80], (uint64_t)&unk_1E629D240, (uint64_t)sub_1B0F74778, (uint64_t)&block_descriptor_19);
}

uint64_t sub_1B0F7476C()
{
  return objectdestroy_15Tm_0((uint64_t (*)(_QWORD))MEMORY[0x1E0CD8E80]);
}

uint64_t sub_1B0F74778()
{
  return sub_1B0F74BF4((uint64_t (*)(_QWORD))MEMORY[0x1E0CD8E80], sub_1B0F70F2C);
}

uint64_t sub_1B0F7478C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1B1035AB0();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v4 = sub_1B1035AC8();
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B0F74814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v2 = v0[9];
  v1 = v0[10];
  v17 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = *(_QWORD *)(v1 + 32);
  v20 = *(_BYTE *)(v1 + 40);
  sub_1B0F56B9C(v17, v18, v19, v20);
  v3 = StringResolvable.resolved(with:)(v2);
  v5 = v4;
  v15 = v0[15];
  v16 = v0[14];
  v12 = v0[16];
  v13 = v0[13];
  v6 = v0[11];
  v14 = v0[12];
  v7 = v0[10];
  sub_1B0F56ADC(v17, v18, v19, v20);
  sub_1B0F75C7C(0, (unint64_t *)&qword_1EEEDE9C0);
  v8 = (void *)sub_1B1035E40();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v3;
  v9[3] = v5;
  v9[4] = v7;
  v0[6] = sub_1B0F74AAC;
  v0[7] = v9;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1B0F71014;
  v0[5] = &block_descriptor_27;
  v10 = _Block_copy(v0 + 2);
  swift_retain();
  sub_1B1035ABC();
  v0[8] = MEMORY[0x1E0DEE9D8];
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE9C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9D0);
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE9D8, &qword_1EEEDE9D0, MEMORY[0x1E0DEAF38]);
  sub_1B1035ED0();
  MEMORY[0x1B5E148AC](0, v12, v13, v10);
  _Block_release(v10);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v6);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1B0F74A80()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F74AAC()
{
  uint64_t v0;

  return sub_1B0F72768(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B0F74AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F74B00()
{
  return sub_1B1034B08();
}

uint64_t sub_1B0F74B24(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0F72D84(a1, v1, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD9030], (uint64_t)&unk_1E629D2E0, (uint64_t)sub_1B0F74BE0, (uint64_t)&block_descriptor_36);
}

uint64_t sub_1B0F74B5C()
{
  return objectdestroy_15Tm_0((uint64_t (*)(_QWORD))MEMORY[0x1E0CD9030]);
}

uint64_t objectdestroy_15Tm_0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_1B0F74BE0()
{
  return sub_1B0F74BF4((uint64_t (*)(_QWORD))MEMORY[0x1E0CD9030], sub_1B0F7300C);
}

uint64_t sub_1B0F74BF4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

uint64_t sub_1B0F74C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F74C80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_1B0F74CC4()
{
  unint64_t result;

  result = qword_1EEEDEA18;
  if (!qword_1EEEDEA18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038EC0, &type metadata for OpenURLAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA18);
  }
  return result;
}

uint64_t sub_1B0F74D08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F74D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EEEDEA20 + dword_1EEEDEA20))(a1, v4);
}

uint64_t sub_1B0F74D9C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F74DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1B0F76EDC;
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 16) = v0 + 32;
  return swift_task_switch();
}

uint64_t destroy for SetAction(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 != 255)
    result = sub_1B0F74EA4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v3 & 1);
  v4 = *(unsigned __int8 *)(a1 + 64);
  if (v4 != 255)
    return sub_1B0F74EA4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4 & 1);
  return result;
}

uint64_t sub_1B0F74EA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_release();
  swift_bridgeObjectRelease();
  return sub_1B0F571D8(a3);
}

uint64_t initializeWithCopy for SetAction(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  }
  else
  {
    v6 = v5 & 1;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    sub_1B0F5A84C(v7, v8, v9, v6);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = v6;
  }
  v10 = *(unsigned __int8 *)(a2 + 64);
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
  else
  {
    v11 = v10 & 1;
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    sub_1B0F5A84C(v12, v13, v14, v10 & 1);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 64) = v11;
  }
  return a1;
}

uint64_t assignWithCopy for SetAction(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      v8 = *v5;
      *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
      *v4 = v8;
    }
    else
    {
      v17 = v6 & 1;
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      sub_1B0F5A84C(v18, v19, v20, v6 & 1);
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = v20;
      *(_BYTE *)(a1 + 32) = v17;
    }
  }
  else if (v6 == 255)
  {
    sub_1B0F5A3AC(a1 + 8, &qword_1EEEDEA40);
    v7 = *(_OWORD *)(a2 + 17);
    *v4 = *v5;
    *(_OWORD *)(a1 + 17) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    sub_1B0F5A84C(v10, v11, v12, v6 & 1);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = v9;
    sub_1B0F74EA4(v13, v14, v15, v16);
  }
  v21 = (__int128 *)(a1 + 40);
  v22 = (__int128 *)(a2 + 40);
  v23 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v23 == 255)
    {
      v25 = *v22;
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
      *v21 = v25;
    }
    else
    {
      v34 = v23 & 1;
      v35 = *(_QWORD *)(a2 + 40);
      v36 = *(_QWORD *)(a2 + 48);
      v37 = *(_QWORD *)(a2 + 56);
      sub_1B0F5A84C(v35, v36, v37, v23 & 1);
      *(_QWORD *)(a1 + 40) = v35;
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v37;
      *(_BYTE *)(a1 + 64) = v34;
    }
  }
  else if (v23 == 255)
  {
    sub_1B0F5A3AC(a1 + 40, &qword_1EEEDEA40);
    v24 = *(_OWORD *)(a2 + 49);
    *v21 = *v22;
    *(_OWORD *)(a1 + 49) = v24;
  }
  else
  {
    v26 = v23 & 1;
    v27 = *(_QWORD *)(a2 + 40);
    v28 = *(_QWORD *)(a2 + 48);
    v29 = *(_QWORD *)(a2 + 56);
    sub_1B0F5A84C(v27, v28, v29, v23 & 1);
    v30 = *(_QWORD *)(a1 + 40);
    v31 = *(_QWORD *)(a1 + 48);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_BYTE *)(a1 + 64);
    *(_QWORD *)(a1 + 40) = v27;
    *(_QWORD *)(a1 + 48) = v28;
    *(_QWORD *)(a1 + 56) = v29;
    *(_BYTE *)(a1 + 64) = v26;
    sub_1B0F74EA4(v30, v31, v32, v33);
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SetAction(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 32);
  if (v5 == 255)
  {
    sub_1B0F5A3AC(a1 + 8, &qword_1EEEDEA40);
LABEL_4:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
    goto LABEL_6;
  }
  v6 = v4 & 1;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v5 & 1;
  sub_1B0F74EA4(v8, v9, v10, v6);
LABEL_6:
  v11 = *(unsigned __int8 *)(a1 + 64);
  if (v11 != 255)
  {
    v12 = *(unsigned __int8 *)(a2 + 64);
    if (v12 != 255)
    {
      v13 = v11 & 1;
      v14 = *(_QWORD *)(a2 + 56);
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = v14;
      *(_BYTE *)(a1 + 64) = v12 & 1;
      sub_1B0F74EA4(v15, v16, v17, v13);
      return a1;
    }
    sub_1B0F5A3AC(a1 + 40, &qword_1EEEDEA40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetAction(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 65))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetAction()
{
  return &type metadata for SetAction;
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F753F0 + 4 * byte_1B1038B70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F75410 + 4 * byte_1B1038B75[v4]))();
}

_BYTE *sub_1B0F753F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F75410(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F75418(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F75420(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F75428(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F75430(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OpenURLAction.CodingKeys()
{
  return &type metadata for OpenURLAction.CodingKeys;
}

unint64_t sub_1B0F75450()
{
  unint64_t result;

  result = qword_1EEEDEA48;
  if (!qword_1EEEDEA48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038E38, &type metadata for OpenURLAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA48);
  }
  return result;
}

unint64_t sub_1B0F75494(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F754B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F754B8()
{
  unint64_t result;

  result = qword_1EEEDEA50;
  if (!qword_1EEEDEA50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038E60, &type metadata for SetAction);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA50);
  }
  return result;
}

unint64_t sub_1B0F754FC(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F75520();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F75520()
{
  unint64_t result;

  result = qword_1EEEDEA60;
  if (!qword_1EEEDEA60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038E88, &type metadata for SetAction);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA60);
  }
  return result;
}

unint64_t sub_1B0F75568()
{
  unint64_t result;

  result = qword_1EEEDEA68;
  if (!qword_1EEEDEA68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038DA8, &type metadata for OpenURLAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA68);
  }
  return result;
}

unint64_t sub_1B0F755B0()
{
  unint64_t result;

  result = qword_1EEEDEA70;
  if (!qword_1EEEDEA70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038DD0, &type metadata for OpenURLAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEA70);
  }
  return result;
}

uint64_t sub_1B0F755F4(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v3 = sub_1B1035AB0();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B1035AC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[3];
  v24 = v1[2];
  v25 = v11;
  v26 = *((_BYTE *)v1 + 64);
  v12 = v1[1];
  v22 = *v1;
  v23 = v12;
  sub_1B0F75C7C(0, (unint64_t *)&qword_1EEEDE9C0);
  v13 = (void *)sub_1B1035E40();
  v14 = swift_allocObject();
  v15 = v25;
  *(_OWORD *)(v14 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v15;
  *(_BYTE *)(v14 + 80) = v26;
  v16 = v23;
  *(_OWORD *)(v14 + 16) = v22;
  *(_OWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 88) = a1;
  aBlock[4] = sub_1B0F75D38;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B0F71014;
  aBlock[3] = &block_descriptor_55;
  v17 = _Block_copy(aBlock);
  sub_1B0F75D60((uint64_t)&v22);
  swift_retain();
  swift_release();
  sub_1B1035ABC();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE9C8, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9D0);
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE9D8, &qword_1EEEDE9D0, MEMORY[0x1E0DEAF38]);
  sub_1B1035ED0();
  MEMORY[0x1B5E148AC](0, v10, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1B0F75844(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  _QWORD v23[3];
  char v24;
  uint64_t v25;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  v25 = a1;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v21)
      return swift_release();
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v6;
    if (!v18)
    {
      v6 = v17 + 1;
      if (v17 + 1 >= v21)
        return swift_release();
      v18 = *(_QWORD *)(v20 + 8 * v6);
      if (!v18)
      {
        v6 = v17 + 2;
        if (v17 + 2 >= v21)
          return swift_release();
        v18 = *(_QWORD *)(v20 + 8 * v6);
        if (!v18)
        {
          v6 = v17 + 3;
          if (v17 + 3 >= v21)
            return swift_release();
          v18 = *(_QWORD *)(v20 + 8 * v6);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v18 - 1) & v18;
    v8 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    v9 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v25 + 56) + 32 * v8;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 24);
    v23[0] = *(_QWORD *)v12;
    v13 = v23[0];
    v23[1] = v14;
    v23[2] = v15;
    v24 = v16;
    swift_bridgeObjectRetain();
    sub_1B0F5A84C(v13, v14, v15, v16);
    a2(v10, v11, v23);
    swift_bridgeObjectRelease();
    result = sub_1B0F74EA4(v13, v14, v15, v16);
  }
  v19 = v17 + 4;
  if (v19 >= v21)
    return swift_release();
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v6 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v6 >= v21)
      return swift_release();
    v18 = *(_QWORD *)(v20 + 8 * v6);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1B0F75A58(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint8_t *v6;
  uint64_t v7;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    sub_1B0F713D0(a1);
  }
  else
  {
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v2 = sub_1B103467C();
    __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA00);
    v3 = sub_1B1034664();
    v4 = sub_1B1035E34();
    if (os_log_type_enabled(v3, v4))
    {
      v7 = a1;
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B0F50000, v3, v4, "Synchronous call to SetAction is not on main thread, falling back to default performAction", v5, 2u);
      v6 = v5;
      a1 = v7;
      MEMORY[0x1B5E15248](v6, -1, -1);
    }

    sub_1B0F755F4(a1);
  }
}

uint64_t sub_1B0F75BE0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B1036128();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0F75C54()
{
  return 7107189;
}

uint64_t sub_1B0F75C64(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F5A84C(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F75C7C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1B0F75CB4(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F74EA4(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F75CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B0F71D28(a1, a2, a3, v3);
}

uint64_t sub_1B0F75CD4()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    sub_1B0F74EA4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1 & 1);
  v2 = *(unsigned __int8 *)(v0 + 80);
  if (v2 != 255)
    sub_1B0F74EA4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v2 & 1);
  swift_release();
  return swift_deallocObject();
}

void sub_1B0F75D38()
{
  uint64_t v0;

  sub_1B0F713D0(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1B0F75D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 64);
  swift_bridgeObjectRetain();
  sub_1B0F75C64(v2, v3, v4, v8);
  sub_1B0F75C64(v5, v6, v7, v9);
  return a1;
}

uint64_t sub_1B0F75DEC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[25];
  v7 = v1[26];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EEEDEA98
                                                                                       + dword_1EEEDEA98))(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_1B0F75E80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 112);
  v8 = *(_BYTE *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_BYTE *)(a1 + 120);
  sub_1B0F56B9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F56C04(v2, v3, v4, v8);
  sub_1B0F56C18(v5, v6, v7, v9);
  sub_1B0F56C18(v14, v13, v12, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t objectdestroy_57Tm()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  int v3;

  swift_unknownObjectRelease();
  sub_1B0F56ADC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  v1 = *(unsigned __int8 *)(v0 + 88);
  if (v1 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v1);
  v2 = *(unsigned __int8 *)(v0 + 120);
  if (v2 != 255)
    sub_1B0F76648(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), v2 & 1, sub_1B0F571D8);
  v3 = *(unsigned __int8 *)(v0 + 152);
  if (v3 != 255)
    sub_1B0F76648(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v3 & 1, sub_1B0F571D8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[25];
  v7 = v1[26];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F76EDC;
  return sub_1B0F94938(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_1B0F760C0()
{
  uint64_t v0;
  unsigned int v1;
  int v2;

  swift_unknownObjectRelease();
  swift_release();
  sub_1B0F56ADC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v1);
  v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 != 255)
    sub_1B0F76648(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), v2 & 1, sub_1B0F571D8);
  sub_1B0F5E6A0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 160));
  sub_1B0F56ADC(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 192));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76168(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[25];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EEEDEAB0
                                                                              + dword_1EEEDEAB0))(a1, v4, v5, (uint64_t)(v1 + 4), v6);
}

uint64_t sub_1B0F761FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 152);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 96);
  v15 = *(_BYTE *)(a1 + 160);
  v16 = *(_BYTE *)(a1 + 128);
  swift_retain();
  sub_1B0F56B9C(v2, v3, v4, v8);
  sub_1B0F56C04(v5, v6, v7, v9);
  sub_1B0F56C18(v14, v13, v12, v10);
  sub_1B0F5E604(v19, v18, v17, v16);
  sub_1B0F56B9C(v22, v21, v20, v15);
  return a1;
}

uint64_t sub_1B0F76308()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76354(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1 + 4;
  v8 = v1[7];
  v7 = v1[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&dword_1EEEDEAC0
                                                                                         + dword_1EEEDEAC0))(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_1B0F763E8()
{
  uint64_t v0;
  int v1;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(v0 + 104) != 254)
  {
    sub_1B0F56ADC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
    v1 = *(unsigned __int8 *)(v0 + 104);
    if (v1 != 255)
      sub_1B0F5E6A0(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), v1 & 1);
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76464(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[14];
  v7 = v1[15];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EEEDEAD0
                                                                                       + dword_1EEEDEAD0))(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_1B0F764F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F76580(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t sub_1B0F76580(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 254)
  {
    sub_1B0F56B9C(result, a2, a3, a4);
    return sub_1B0F5FD10(a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1B0F765D4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_1B0F76648(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), sub_1B0F76F18);
  sub_1B0F6C7D4(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  sub_1B0F76648(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120), sub_1B0F76F18);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76648(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t))
{
  if ((a4 & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a5(a3);
}

uint64_t sub_1B0F76688(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[16];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EEEDEAE0
                                                                              + dword_1EEEDEAE0))(a1, v4, v5, (uint64_t)(v1 + 4), v6);
}

uint64_t sub_1B0F7671C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 56);
  sub_1B0F767BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), sub_1B0F76F14);
  sub_1B0F6C708(v2, v3, v4, v9);
  sub_1B0F767BC(v5, v6, v7, v8, sub_1B0F76F14);
  return a1;
}

uint64_t sub_1B0F767BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t))
{
  if ((a4 & 1) == 0)
    return swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(a3);
}

uint64_t sub_1B0F767FC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_1B0F76648(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), sub_1B0F76F18);
  sub_1B0F76648(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), sub_1B0F76F18);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))((char *)&dword_1EEEDEAF0
                                                                               + dword_1EEEDEAF0))(a1, v4, v5, (_OWORD *)(v1 + 32), v6);
}

uint64_t sub_1B0F768F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  sub_1B0F767BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), sub_1B0F76F14);
  sub_1B0F767BC(v2, v3, v4, v5, sub_1B0F76F14);
  return a1;
}

uint64_t sub_1B0F76964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1B1034634();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  sub_1B0F76648(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), sub_1B0F76F18);
  sub_1B0F76648(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), sub_1B0F76F18);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1B0F76A10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1B1034634() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = (uint64_t)(v1 + 4);
  v8 = v1[12];
  v9 = (uint64_t)v1 + ((v4 + 104) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1B0F737CC;
  return sub_1B10288EC(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1B0F76AAC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_1B0F56B08(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  sub_1B0F76648(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), sub_1B0F571D8);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F76B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B0F76EDC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))((char *)&dword_1EEEDEB18
                                                                               + dword_1EEEDEB18))(a1, v4, v5, (_OWORD *)(v1 + 32), v6);
}

uint64_t sub_1B0F76B9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  sub_1B0F56BC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F767BC(v2, v3, v4, v5, sub_1B0F76F14);
  return a1;
}

uint64_t sub_1B0F76C04()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_1B0F56B08(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  sub_1B0F76648(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), sub_1B0F571D8);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0F76C60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[12];
  v8 = v1[13];
  v9 = v1[14];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1B0F76EDC;
  return sub_1B1026048(a1, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_1B0F76CF0()
{
  unint64_t result;

  result = qword_1EEEDEB40;
  if (!qword_1EEEDEB40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039000, &type metadata for SetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SetAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F76D80 + 4 * byte_1B1038B7F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F76DB4 + 4 * byte_1B1038B7A[v4]))();
}

uint64_t sub_1B0F76DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F76DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F76DC4);
  return result;
}

uint64_t sub_1B0F76DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F76DD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F76DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F76DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetAction.CodingKeys()
{
  return &type metadata for SetAction.CodingKeys;
}

unint64_t sub_1B0F76E04()
{
  unint64_t result;

  result = qword_1EEEDEB50;
  if (!qword_1EEEDEB50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038FD8, &type metadata for SetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB50);
  }
  return result;
}

unint64_t sub_1B0F76E4C()
{
  unint64_t result;

  result = qword_1EEEDEB58;
  if (!qword_1EEEDEB58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038F10, &type metadata for SetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB58);
  }
  return result;
}

unint64_t sub_1B0F76E94()
{
  unint64_t result;

  result = qword_1EEEDEB60;
  if (!qword_1EEEDEB60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1038F38, &type metadata for SetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB60);
  }
  return result;
}

uint64_t sub_1B0F76F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F72608(a1, a2);
}

uint64_t destroy for DividerView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for DividerView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DividerView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for DividerView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DividerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DividerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DividerView()
{
  return &type metadata for DividerView;
}

uint64_t destroy for SectionView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 184);
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SectionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v5)
  {
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v18 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v18;
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    v11 = *(_QWORD *)(a2 + 152);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v20 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v20;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v21 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v21;
    v22 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 64, a2 + 64);
  *(_BYTE *)(a1 + 104) = v7;
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_retain();
  swift_retain();
  v11 = *(_QWORD *)(a2 + 152);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 184, a2 + 184);
  *(_BYTE *)(a1 + 224) = v13;
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v15;
  v16 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v16;
  swift_retain();
  swift_retain();
LABEL_6:
  v23 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v23;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SectionView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 64);
        v7 = *(_BYTE *)(a2 + 104);
        v8 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 88) = v8;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 64, a2 + 64);
        *(_BYTE *)(a1 + 104) = v7;
      }
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    }
    else
    {
      sub_1B0F6427C(a1 + 24);
      v11 = *(_OWORD *)(a2 + 72);
      v13 = *v5;
      v12 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v11;
      *v4 = v13;
      *(_OWORD *)(a1 + 40) = v12;
      v15 = *(_OWORD *)(a2 + 104);
      v14 = *(_OWORD *)(a2 + 120);
      v16 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 104) = v15;
      *(_OWORD *)(a1 + 120) = v14;
      *(_OWORD *)(a1 + 88) = v16;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, a2 + 64);
    *(_BYTE *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_retain();
    swift_retain();
  }
  else
  {
    v17 = *v5;
    v18 = *(_OWORD *)(a2 + 40);
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *v4 = v17;
    *(_OWORD *)(a1 + 40) = v18;
    v20 = *(_OWORD *)(a2 + 88);
    v21 = *(_OWORD *)(a2 + 104);
    v22 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v21;
    *(_OWORD *)(a1 + 120) = v22;
    *(_OWORD *)(a1 + 88) = v20;
  }
  v23 = (_OWORD *)(a1 + 144);
  v24 = (__int128 *)(a2 + 144);
  v25 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v25)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 184);
        v26 = *(_BYTE *)(a2 + 224);
        v27 = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 208) = v27;
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 184, a2 + 184);
        *(_BYTE *)(a1 + 224) = v26;
      }
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    }
    else
    {
      sub_1B0F6427C(a1 + 144);
      v30 = *(_OWORD *)(a2 + 192);
      v32 = *v24;
      v31 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v30;
      *v23 = v32;
      *(_OWORD *)(a1 + 160) = v31;
      v34 = *(_OWORD *)(a2 + 224);
      v33 = *(_OWORD *)(a2 + 240);
      v35 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v34;
      *(_OWORD *)(a1 + 240) = v33;
      *(_OWORD *)(a1 + 208) = v35;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v28 = *(_BYTE *)(a2 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v29;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 184, a2 + 184);
    *(_BYTE *)(a1 + 224) = v28;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_retain();
    swift_retain();
  }
  else
  {
    v36 = *v24;
    v37 = *(_OWORD *)(a2 + 160);
    v38 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v38;
    *v23 = v36;
    *(_OWORD *)(a1 + 160) = v37;
    v39 = *(_OWORD *)(a2 + 208);
    v40 = *(_OWORD *)(a2 + 224);
    v41 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v40;
    *(_OWORD *)(a1 + 240) = v41;
    *(_OWORD *)(a1 + 208) = v39;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SectionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_7;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
  {
    sub_1B0F6427C(a1 + 24);
LABEL_7:
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v9;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
LABEL_8:
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_14:
    v15 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v15;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v16 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v16;
    v17 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v17;
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(a2 + 152);
  if (!v12)
  {
    sub_1B0F6427C(a1 + 144);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  }
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  v14 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v14;
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
LABEL_15:
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_release();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionView()
{
  return &type metadata for SectionView;
}

uint64_t destroy for ListView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for ListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ListView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ListView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListView()
{
  return &type metadata for ListView;
}

uint64_t sub_1B0F77D6C()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0F77E24(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7377656976;
  else
    return 25705;
}

uint64_t sub_1B0F77E4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B100C0AC(*a1, *a2);
}

uint64_t sub_1B0F77E58()
{
  unsigned __int8 *v0;

  return sub_1B100F924(*v0);
}

uint64_t sub_1B0F77E60(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1B1011C6C(a1, *v1);
}

uint64_t sub_1B0F77E68(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1B1014D50(a1, *v1);
}

uint64_t sub_1B0F77E70@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F77ECC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F77E24(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F77EF4()
{
  char *v0;

  return sub_1B0F77E24(*v0);
}

uint64_t sub_1B0F77EFC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F77F5C()
{
  sub_1B0F79364();
  return sub_1B10362B4();
}

uint64_t sub_1B0F77F84()
{
  sub_1B0F79364();
  return sub_1B10362C0();
}

uint64_t sub_1B0F77FAC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
  return sub_1B10352AC();
}

double sub_1B0F78040@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B0F79054(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B0F78080()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F78090()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0F78148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F641B8(a1, a2);
}

uint64_t sub_1B0F78150(char a1)
{
  return qword_1B10396E8[a1];
}

uint64_t sub_1B0F78170(char *a1, char *a2)
{
  return sub_1B100ECC8(*a1, *a2);
}

uint64_t sub_1B0F7817C()
{
  return sub_1B100F928();
}

uint64_t sub_1B0F78184()
{
  return sub_1B1013238();
}

uint64_t sub_1B0F7818C()
{
  return sub_1B1013B54();
}

uint64_t sub_1B0F78194@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F79978();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F781C0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F78150(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F781E8()
{
  char *v0;

  return sub_1B0F78150(*v0);
}

uint64_t sub_1B0F781F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F79978();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F78214()
{
  sub_1B0F78F1C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7823C()
{
  sub_1B0F78F1C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F78264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[15];
  _QWORD v27[3];
  uint64_t v28;
  _QWORD v29[19];
  char v30;

  v22 = a2;
  v3 = sub_1B103461C();
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEC08);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[15] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v29[16] = sub_1B1034AD8();
  v29[17] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F78F1C();
  v11 = v25;
  sub_1B1036278();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v21 = a1;
    v25 = v7;
    LOBYTE(v26[0]) = 0;
    v12 = sub_1B103608C();
    v15 = v13;
    if (v13)
    {
      v16 = v12;
    }
    else
    {
      sub_1B1034610();
      v16 = sub_1B1034604();
      v15 = v17;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
    }
    v18 = MEMORY[0x1E0DEE9D8];
    v27[0] = v16;
    v27[1] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v30 = 1;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    sub_1B10360A4();
    v19 = v26[0];
    if (!v26[0])
      v19 = v18;
    v27[2] = v19;
    v30 = 2;
    sub_1B0F64238();
    sub_1B10360A4();
    sub_1B0F79004((uint64_t)v26, (uint64_t)&v28);
    v30 = 3;
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
    sub_1B0F79004((uint64_t)v26, (uint64_t)v29);
    sub_1B0F6CC30((uint64_t)v27, v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return sub_1B0F6CC6C((uint64_t)v27);
  }
}

uint64_t sub_1B0F7860C()
{
  uint64_t v0;
  _BYTE v2[120];
  _BYTE v3[120];

  sub_1B0F78ED4(v0 + 24, (uint64_t)v3);
  sub_1B0F78ED4(v0 + 144, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F78F60((unint64_t *)&qword_1EEEDEBE8, &qword_1EEEDEBD8, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CE0798]);
  sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
  return sub_1B10358B8();
}

uint64_t sub_1B0F78700@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F78264(a1, a2);
}

uint64_t sub_1B0F78714()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F78724@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F78774@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F787C8()
{
  sub_1B0F78E88();
  return sub_1B10362B4();
}

uint64_t sub_1B0F787F0()
{
  sub_1B0F78E88();
  return sub_1B10362C0();
}

double sub_1B0F7881C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B0F78C58(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B0F78860()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F78870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F7887C);
}

unint64_t sub_1B0F7887C()
{
  unint64_t result;

  result = qword_1EEEDEB68;
  if (!qword_1EEEDEB68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10392A8, &type metadata for DividerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB68);
  }
  return result;
}

uint64_t sub_1B0F788C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F788DC, (uint64_t (*)(void))sub_1B0F78920, (uint64_t (*)(void))sub_1B0F78964);
}

unint64_t sub_1B0F788DC()
{
  unint64_t result;

  result = qword_1EEEDEB70;
  if (!qword_1EEEDEB70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039230, &type metadata for DividerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB70);
  }
  return result;
}

unint64_t sub_1B0F78920()
{
  unint64_t result;

  result = qword_1EEEDEB78;
  if (!qword_1EEEDEB78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10391F8, &type metadata for DividerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB78);
  }
  return result;
}

unint64_t sub_1B0F78964()
{
  unint64_t result;

  result = qword_1EEEDEB80;
  if (!qword_1EEEDEB80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039258, &type metadata for DividerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB80);
  }
  return result;
}

uint64_t sub_1B0F789A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F789B4);
}

unint64_t sub_1B0F789B4()
{
  unint64_t result;

  result = qword_1EEEDEB88;
  if (!qword_1EEEDEB88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10392C4, &type metadata for SectionView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB88);
  }
  return result;
}

uint64_t sub_1B0F789F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F78A14, (uint64_t (*)(void))sub_1B0F78A58, (uint64_t (*)(void))sub_1B0F78A9C);
}

unint64_t sub_1B0F78A14()
{
  unint64_t result;

  result = qword_1EEEDEB90;
  if (!qword_1EEEDEB90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039180, &type metadata for SectionView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB90);
  }
  return result;
}

unint64_t sub_1B0F78A58()
{
  unint64_t result;

  result = qword_1EEEDEB98;
  if (!qword_1EEEDEB98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039148, &type metadata for SectionView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEB98);
  }
  return result;
}

unint64_t sub_1B0F78A9C()
{
  unint64_t result;

  result = qword_1EEEDEBA0;
  if (!qword_1EEEDEBA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10391A8, &type metadata for SectionView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBA0);
  }
  return result;
}

uint64_t sub_1B0F78AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F78B2C);
}

uint64_t sub_1B0F78AEC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F78B2C()
{
  unint64_t result;

  result = qword_1EEEDEBA8;
  if (!qword_1EEEDEBA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10392E0, &type metadata for ListView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBA8);
  }
  return result;
}

uint64_t sub_1B0F78B70(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F78B8C, (uint64_t (*)(void))sub_1B0F78BD0, (uint64_t (*)(void))sub_1B0F78C14);
}

unint64_t sub_1B0F78B8C()
{
  unint64_t result;

  result = qword_1EEEDEBB0;
  if (!qword_1EEEDEBB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10390D0, &type metadata for ListView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBB0);
  }
  return result;
}

unint64_t sub_1B0F78BD0()
{
  unint64_t result;

  result = qword_1EEEDEBB8;
  if (!qword_1EEEDEBB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039098, &type metadata for ListView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBB8);
  }
  return result;
}

unint64_t sub_1B0F78C14()
{
  unint64_t result;

  result = qword_1EEEDEBC0;
  if (!qword_1EEEDEBC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10390F8, &type metadata for ListView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBC0);
  }
  return result;
}

uint64_t sub_1B0F78C58@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v28 = a2;
  v3 = sub_1B103461C();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBC8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v10 = sub_1B1034AD8();
  v27 = v11;
  v12 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1B0F78E88();
  swift_retain();
  v13 = v32;
  sub_1B1036278();
  if (v13)
  {
    swift_release_n();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    v14 = v10;
    v15 = v29;
    v16 = v30;
    v17 = sub_1B103608C();
    v20 = v19;
    if (v19)
    {
      v21 = v17;
    }
    else
    {
      v32 = v14;
      v22 = v5;
      sub_1B1034610();
      v21 = sub_1B1034604();
      v20 = v23;
      v24 = v22;
      v14 = v32;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v16);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v25 = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    result = swift_release();
    *v25 = v21;
    v25[1] = v20;
    v25[2] = MEMORY[0x1E0DEE9D8];
    v25[3] = v14;
    v25[4] = v27;
  }
  return result;
}

unint64_t sub_1B0F78E88()
{
  unint64_t result;

  result = qword_1EEEDEBD0;
  if (!qword_1EEEDEBD0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039698, &type metadata for DividerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBD0);
  }
  return result;
}

uint64_t sub_1B0F78ECC()
{
  return sub_1B0F78090();
}

uint64_t sub_1B0F78ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B0F78F1C()
{
  unint64_t result;

  result = qword_1EEEDEC10;
  if (!qword_1EEEDEC10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039648, &type metadata for SectionView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC10);
  }
  return result;
}

uint64_t sub_1B0F78F60(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1B5E15188](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0F78FC4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B0F79004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F7904C()
{
  return sub_1B0F77D6C();
}

uint64_t sub_1B0F79054@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;

  v34 = a2;
  v31 = sub_1B103461C();
  v33 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEC20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v9 = sub_1B1034AD8();
  v32 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v35 = a1;
  v12 = (_QWORD *)a1;
  v13 = v8;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_1B0F79364();
  swift_retain();
  v14 = v36;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v35);
    return swift_release();
  }
  else
  {
    v15 = v33;
    v16 = v34;
    v36 = v6;
    v39 = 0;
    v18 = sub_1B103608C();
    v19 = v13;
    v20 = v5;
    v22 = v17;
    v30 = v19;
    if (v17)
    {
      v23 = v18;
    }
    else
    {
      v24 = v4;
      sub_1B1034610();
      v23 = sub_1B1034604();
      v22 = v25;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v31);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v38 = 1;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v26 = v30;
    sub_1B10360A4();
    v27 = MEMORY[0x1E0DEE9D8];
    if (v37)
      v28 = v37;
    else
      v28 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v20);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1(v35);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v16 = v23;
    v16[1] = v22;
    v16[2] = v28;
    v16[3] = v27;
    v29 = v32;
    v16[4] = v9;
    v16[5] = v29;
  }
  return result;
}

unint64_t sub_1B0F79364()
{
  unint64_t result;

  result = qword_1EEEDEC28;
  if (!qword_1EEEDEC28)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10395F8, &type metadata for ListView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F793F4 + 4 * byte_1B1039055[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F79428 + 4 * byte_1B1039050[v4]))();
}

uint64_t sub_1B0F79428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F79430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F79438);
  return result;
}

uint64_t sub_1B0F79444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F7944CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F79450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F79458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListView.CodingKeys()
{
  return &type metadata for ListView.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SectionView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F794C0 + 4 * byte_1B103905F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0F794F4 + 4 * byte_1B103905A[v4]))();
}

uint64_t sub_1B0F794F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F794FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F79504);
  return result;
}

uint64_t sub_1B0F79510(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F79518);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0F7951C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F79524(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionView.CodingKeys()
{
  return &type metadata for SectionView.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DividerView.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F79580 + 4 * byte_1B1039064[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F795A0 + 4 * byte_1B1039069[v4]))();
}

_BYTE *sub_1B0F79580(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F795A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F795A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F795B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F795B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F795C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DividerView.CodingKeys()
{
  return &type metadata for DividerView.CodingKeys;
}

uint64_t sub_1B0F795DC()
{
  return sub_1B0F524FC(&qword_1EEEDEC30, MEMORY[0x1E0CDFE58], MEMORY[0x1E0CDFE30]);
}

unint64_t sub_1B0F7960C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = qword_1EEEDEC38;
  if (!qword_1EEEDEC38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDEC40);
    v2[0] = sub_1B0F78F60((unint64_t *)&qword_1EEEDEBE8, &qword_1EEEDEBD8, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CE0798]);
    v2[1] = sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
    v2[2] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFF98], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC38);
  }
  return result;
}

uint64_t sub_1B0F796C4()
{
  return sub_1B0F5A7E4(&qword_1EEEDEC48, &qword_1EEEDEC50, MEMORY[0x1E0CDD950]);
}

unint64_t sub_1B0F796F4()
{
  unint64_t result;

  result = qword_1EEEDEC58;
  if (!qword_1EEEDEC58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10393F0, &type metadata for DividerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC58);
  }
  return result;
}

unint64_t sub_1B0F7973C()
{
  unint64_t result;

  result = qword_1EEEDEC60;
  if (!qword_1EEEDEC60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10394E0, &type metadata for SectionView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC60);
  }
  return result;
}

unint64_t sub_1B0F79784()
{
  unint64_t result;

  result = qword_1EEEDEC68;
  if (!qword_1EEEDEC68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10395D0, &type metadata for ListView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC68);
  }
  return result;
}

unint64_t sub_1B0F797CC()
{
  unint64_t result;

  result = qword_1EEEDEC70;
  if (!qword_1EEEDEC70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039508, &type metadata for ListView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC70);
  }
  return result;
}

unint64_t sub_1B0F79814()
{
  unint64_t result;

  result = qword_1EEEDEC78;
  if (!qword_1EEEDEC78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039530, &type metadata for ListView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC78);
  }
  return result;
}

unint64_t sub_1B0F7985C()
{
  unint64_t result;

  result = qword_1EEEDEC80;
  if (!qword_1EEEDEC80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039418, &type metadata for SectionView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC80);
  }
  return result;
}

unint64_t sub_1B0F798A4()
{
  unint64_t result;

  result = qword_1EEEDEC88;
  if (!qword_1EEEDEC88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039440, &type metadata for SectionView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC88);
  }
  return result;
}

unint64_t sub_1B0F798EC()
{
  unint64_t result;

  result = qword_1EEEDEC90;
  if (!qword_1EEEDEC90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039328, &type metadata for DividerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC90);
  }
  return result;
}

unint64_t sub_1B0F79934()
{
  unint64_t result;

  result = qword_1EEEDEC98;
  if (!qword_1EEEDEC98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039350, &type metadata for DividerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEC98);
  }
  return result;
}

uint64_t sub_1B0F79978()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t destroy for NavigationBarBackButtonHiddenModifier(uint64_t a1)
{
  return sub_1B0F5E6A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for NavigationBarBackButtonHiddenModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F5E604(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NavigationBarBackButtonHiddenModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F5E604(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B0F5E6A0(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NavigationBarBackButtonHiddenModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B0F5E6A0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationBarBackButtonHiddenModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationBarBackButtonHiddenModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarBackButtonHiddenModifier()
{
  return &type metadata for NavigationBarBackButtonHiddenModifier;
}

uint64_t sub_1B0F79B8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
    sub_1B0F65238();
    sub_1B1036164();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v8;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F79C8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  sub_1B0F5E604(*(_QWORD *)v3, v9, v10, v11);
  sub_1B0FD7528(a2, v8, v9, v10, v11);
  result = sub_1B0F5E6A0(v8, v9, v10, v11);
  if (!v4)
  {
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    v15 = v13;
    v16 = v14;
    a3[3] = MEMORY[0x1B5E15134](0, &v15, MEMORY[0x1E0CDED88], 0);
    v15 = v13;
    v16 = v14;
    a3[4] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(a3);
    return sub_1B1035528();
  }
  return result;
}

uint64_t sub_1B0F79DB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F79B8C(a1, a2);
}

unint64_t sub_1B0F79DC4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F79DE8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F79DE8()
{
  unint64_t result;

  result = qword_1EEEDECA0;
  if (!qword_1EEEDECA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039768, &type metadata for NavigationBarBackButtonHiddenModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDECA0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ElementColorName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ElementColorName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F79F08 + 4 * byte_1B10397B5[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1B0F79F3C + 4 * byte_1B10397B0[v4]))();
}

uint64_t sub_1B0F79F3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F79F44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F79F4CLL);
  return result;
}

uint64_t sub_1B0F79F58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F79F60);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1B0F79F64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F79F6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ElementColorName()
{
  return &type metadata for ElementColorName;
}

uint64_t sub_1B0F79F88(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B0F79FC4 + 4 * byte_1B10397BA[a1]))(0xD000000000000013, 0x80000001B104C010);
}

uint64_t sub_1B0F79FC4()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1B0F79FD8()
{
  return 0x7261646E6F636573;
}

uint64_t sub_1B0F79FFC()
{
  return 0x7972616974726574;
}

uint64_t sub_1B0F7A020()
{
  return 0x616E726574617571;
}

uint64_t sub_1B0F7A044()
{
  return 0x69466D6574737973;
}

uint64_t sub_1B0F7A060()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_1B0F7A118()
{
  return 0x6F74617261706573;
}

uint64_t sub_1B0F7A134()
{
  return 0x655365757161706FLL;
}

uint64_t sub_1B0F7A158()
{
  return 1802398060;
}

uint64_t sub_1B0F7A168()
{
  return 0x747865546B726164;
}

uint64_t sub_1B0F7A180()
{
  return 0x786554746867696CLL;
}

uint64_t sub_1B0F7A1A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B0F79F88(*a1);
  v5 = v4;
  if (v3 == sub_1B0F79F88(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B1036128();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B0F7A228()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B103620C();
  sub_1B0F79F88(v1);
  sub_1B1035C00();
  swift_bridgeObjectRelease();
  return sub_1B103623C();
}

uint64_t sub_1B0F7A288()
{
  unsigned __int8 *v0;

  sub_1B0F79F88(*v0);
  sub_1B1035C00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F7A2C8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B103620C();
  sub_1B0F79F88(v1);
  sub_1B1035C00();
  swift_bridgeObjectRelease();
  return sub_1B103623C();
}

uint64_t sub_1B0F7A324@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F7A4EC();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7A350@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F79F88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7A378()
{
  sub_1B0F7A4A8();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F7A3D4()
{
  sub_1B0F7A4A8();
  return sub_1B1035CA8();
}

unint64_t sub_1B0F7A424()
{
  unint64_t result;

  result = qword_1EEEDECA8;
  if (!qword_1EEEDECA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039894, &type metadata for ElementColorName);
    atomic_store(result, (unint64_t *)&qword_1EEEDECA8);
  }
  return result;
}

id sub_1B0F7A468(char a1)
{
  return objc_msgSend((id)objc_opt_self(), *off_1E629D768[a1]);
}

unint64_t sub_1B0F7A4A8()
{
  unint64_t result;

  result = qword_1EEEDECB0;
  if (!qword_1EEEDECB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103981C, &type metadata for ElementColorName);
    atomic_store(result, (unint64_t *)&qword_1EEEDECB0);
  }
  return result;
}

uint64_t sub_1B0F7A4EC()
{
  unint64_t v0;

  v0 = sub_1B10361AC();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14)
    return 20;
  else
    return v0;
}

uint64_t destroy for UnitPointResolvable(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFD)
    result = sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 <= 0xFD)
    result = sub_1B0F6C7D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3);
  v4 = *(unsigned __int8 *)(v1 + 88);
  if (v4 <= 0xFD)
    return sub_1B0F6C7D4(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v4);
  return result;
}

uint64_t initializeWithCopy for UnitPointResolvable(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B0F56B9C(*(_QWORD *)a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    sub_1B0F6C708(v9, v10, v11, *(_BYTE *)(a2 + 56));
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  v12 = *(unsigned __int8 *)(a2 + 88);
  if (v12 <= 0xFD)
  {
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    v15 = *(_QWORD *)(a2 + 80);
    sub_1B0F6C708(v13, v14, v15, v12);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_BYTE *)(a1 + 88) = v12;
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  return a1;
}

uint64_t assignWithCopy for UnitPointResolvable(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  _OWORD *v17;
  _OWORD *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _OWORD *v32;
  _OWORD *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F56ADC(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F5EA14(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F56B9C(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  v17 = (_OWORD *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v19 <= 0xFD)
    {
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = *((_QWORD *)a2 + 6);
      sub_1B0F6C708(v25, v26, v27, *((_BYTE *)a2 + 56));
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_QWORD *)(a1 + 40);
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v27;
      v31 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v19;
      sub_1B0F6C7D4(v28, v29, v30, v31);
    }
    else
    {
      sub_1B0F7A924(a1 + 32);
      v21 = *(__int128 *)((char *)a2 + 41);
      *v17 = *v18;
      *(_OWORD *)(a1 + 41) = v21;
    }
  }
  else if (v19 <= 0xFD)
  {
    v22 = *((_QWORD *)a2 + 4);
    v23 = *((_QWORD *)a2 + 5);
    v24 = *((_QWORD *)a2 + 6);
    sub_1B0F6C708(v22, v23, v24, *((_BYTE *)a2 + 56));
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    *(_BYTE *)(a1 + 56) = v19;
  }
  else
  {
    v20 = *v18;
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *v17 = v20;
  }
  v32 = (_OWORD *)(a1 + 64);
  v33 = a2 + 4;
  v34 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) <= 0xFDu)
  {
    if (v34 <= 0xFD)
    {
      v40 = *((_QWORD *)a2 + 8);
      v41 = *((_QWORD *)a2 + 9);
      v42 = *((_QWORD *)a2 + 10);
      sub_1B0F6C708(v40, v41, v42, v34);
      v43 = *(_QWORD *)(a1 + 64);
      v44 = *(_QWORD *)(a1 + 72);
      v45 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v40;
      *(_QWORD *)(a1 + 72) = v41;
      *(_QWORD *)(a1 + 80) = v42;
      v46 = *(_BYTE *)(a1 + 88);
      *(_BYTE *)(a1 + 88) = v34;
      sub_1B0F6C7D4(v43, v44, v45, v46);
    }
    else
    {
      sub_1B0F7A924(a1 + 64);
      v36 = *(__int128 *)((char *)a2 + 73);
      *v32 = *v33;
      *(_OWORD *)(a1 + 73) = v36;
    }
  }
  else if (v34 <= 0xFD)
  {
    v37 = *((_QWORD *)a2 + 8);
    v38 = *((_QWORD *)a2 + 9);
    v39 = *((_QWORD *)a2 + 10);
    sub_1B0F6C708(v37, v38, v39, v34);
    *(_QWORD *)(a1 + 64) = v37;
    *(_QWORD *)(a1 + 72) = v38;
    *(_QWORD *)(a1 + 80) = v39;
    *(_BYTE *)(a1 + 88) = v34;
  }
  else
  {
    v35 = *v33;
    *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
    *v32 = v35;
  }
  return a1;
}

uint64_t sub_1B0F7A924(uint64_t a1)
{
  destroy for IntResolvable(a1);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for UnitPointResolvable(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 > 0xFD)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 > 0xFD)
  {
    sub_1B0F7A924(a1 + 32);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F6C7D4(v13, v14, v15, v10);
LABEL_11:
  v16 = *(unsigned __int8 *)(a1 + 88);
  if (v16 <= 0xFD)
  {
    v17 = *(unsigned __int8 *)(a2 + 88);
    if (v17 <= 0xFD)
    {
      v18 = *(_QWORD *)(a2 + 80);
      v19 = *(_QWORD *)(a1 + 64);
      v20 = *(_QWORD *)(a1 + 72);
      v21 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = v18;
      *(_BYTE *)(a1 + 88) = v17;
      sub_1B0F6C7D4(v19, v20, v21, v16);
      return a1;
    }
    sub_1B0F7A924(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnitPointResolvable(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 126);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if ((v3 & 0x7E) != 0)
    v4 = 126 - (v3 & 0x7E | (v3 >> 7));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitPointResolvable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = (a2 ^ 0x7F) & 0xFE | ((a2 ^ 0x7F) << 7);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitPointResolvable()
{
  return &type metadata for UnitPointResolvable;
}

double sub_1B0F7AB94(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  double v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;

  v4 = *(unsigned __int8 *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(unsigned __int8 *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v32 = *(unsigned __int8 *)(v1 + 88);
  if (v4 <= 0xFD)
  {
    v27 = *(_QWORD *)(v1 + 40);
    v28 = *(_QWORD *)(v1 + 32);
    v29 = *(_QWORD *)(v1 + 80);
    v30 = *(_QWORD *)(v1 + 72);
    v12 = *(_QWORD *)v1;
    v13 = *(_QWORD *)(v1 + 8);
    v14 = *(_QWORD *)(v1 + 16);
    sub_1B0F56B9C(*(_QWORD *)v1, v13, v14, v4);
    v15 = StringResolvable.resolved(with:)(a1);
    if (!v2)
    {
      v24 = v15;
      v25 = v16;
      sub_1B0F56B88(v12, v13, v14, v4);
      sub_1B0F7ADB8(v24, v25);
      v3 = v26;
      swift_bridgeObjectRelease();
      return v3;
    }

    sub_1B0F56B88(v12, v13, v14, v4);
    v10 = v30;
    v5 = v28;
    v11 = v29;
    v6 = v27;
  }
  if (v8 > 0xFD)
    goto LABEL_9;
  v17 = v5;
  sub_1B0F6C708(v5, v6, v7, v8);
  *(double *)&v31 = COERCE_DOUBLE(sub_1B0FA70A4(a1));
  v19 = v18;
  sub_1B0F6C7C0(v17, v6, v7, v8);
  if ((v19 & 1) == 0 && v32 <= 0xFD)
  {
    v20 = v9;
    sub_1B0F6C708(v9, v10, v11, v32);
    sub_1B0FA70A4(a1);
    v22 = v21;
    sub_1B0F6C7C0(v20, v10, v11, v32);
    if ((v22 & 1) == 0)
      return *(double *)&v31;
  }
LABEL_9:
  sub_1B0F7B634();
  swift_allocError();
  swift_willThrow();
  return v3;
}

uint64_t sub_1B0F7ADB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 7368564 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A68();
  if (a1 == 0x696461654C706F74 && a2 == 0xEA0000000000676ELL || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A38();
  if (a1 == 0x6C69617254706F74 && a2 == 0xEB00000000676E69 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A44();
  if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A8C();
  if (a1 == 0x676E696461656CLL && a2 == 0xE700000000000000 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A98();
  if (a1 == 0x676E696C69617274 && a2 == 0xE800000000000000 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035AA4();
  if (a1 == 0x6D6F74746F62 && a2 == 0xE600000000000000 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A80();
  if (a1 == 0x654C6D6F74746F62 && a2 == 0xED0000676E696461 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A50();
  if (a1 == 0x72546D6F74746F62 && a2 == 0xEE00676E696C6961 || (sub_1B1036128() & 1) != 0)
    return sub_1B1035A5C();
  if ((a1 != 1869768058 || a2 != 0xE400000000000000) && (sub_1B1036128() & 1) == 0)
    return sub_1B1035A8C();
  return sub_1B1035A74();
}

uint64_t sub_1B0F7B150(char a1)
{
  if (!a1)
    return 120;
  if (a1 == 1)
    return 121;
  return 1701667182;
}

uint64_t sub_1B0F7B188(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B100D10C(*a1, *a2);
}

uint64_t sub_1B0F7B194()
{
  return sub_1B100F990();
}

uint64_t sub_1B0F7B19C()
{
  return sub_1B1012488();
}

uint64_t sub_1B0F7B1A4()
{
  return sub_1B1014E1C();
}

uint64_t sub_1B0F7B1AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7B1E0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7B150(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7B208()
{
  char *v0;

  return sub_1B0F7B150(*v0);
}

uint64_t sub_1B0F7B210@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7B23C()
{
  sub_1B0F7E5B4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7B264()
{
  sub_1B0F7E5B4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7B28C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  int v50;
  char v51;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDECC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F7E5B4();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1B0F56B88(0, 0, 0, 0xFEu);
    sub_1B0F6C7C0(0, 0, 0, 254);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = -2;
  }
  else
  {
    LOBYTE(v46) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      v51 = 2;
      sub_1B0F56A98();
      sub_1B10360BC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v44 = a2;
      v15 = v46;
      v14 = v47;
      v16 = v48;
      v17 = v49;
      v50 = 254;
      sub_1B0F56B88(0, 0, 0, 0xFEu);
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = -2;
    }
    else
    {
      v51 = 0;
      sub_1B0F7E5F8();
      sub_1B10360BC();
      v44 = a2;
      v23 = v46;
      v22 = v47;
      v21 = v48;
      v50 = v49;
      v51 = 1;
      sub_1B10360BC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v25 = v47;
      v45 = v46;
      v26 = v48;
      v27 = v49;
      v17 = 254;
      sub_1B0F6C7C0(0, 0, 0, 254);
      v24 = v27;
      v20 = v26;
      v19 = v45;
      v18 = v25;
      v16 = 0;
      v14 = 0;
      v15 = 0;
    }
    v39 = v20;
    v40 = v18;
    v28 = v44;
    *v44 = v15;
    v28[1] = v14;
    v29 = v14;
    v42 = v14;
    v43 = v16;
    v28[2] = v16;
    v30 = v16;
    *((_BYTE *)v28 + 24) = v17;
    v31 = v17;
    v41 = v17;
    v28[4] = v23;
    v28[5] = v22;
    v28[6] = v21;
    v32 = v50;
    *((_BYTE *)v28 + 56) = v50;
    v50 = v32;
    v28[8] = v19;
    v28[9] = v18;
    v28[10] = v20;
    *((_BYTE *)v28 + 88) = v24;
    v33 = v19;
    v45 = v19;
    v34 = v24;
    sub_1B0F56C04(v15, v29, v30, v31);
    sub_1B0F6C6F4(v23, v22, v21, v32);
    v35 = v33;
    v37 = v39;
    v36 = v40;
    sub_1B0F6C6F4(v35, v40, v39, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1B0F56B88(v15, v42, v43, v41);
    sub_1B0F6C7C0(v23, v22, v21, v50);
    v9 = v45;
    v10 = v36;
    v11 = v37;
    v12 = v34;
  }
  return sub_1B0F6C7C0(v9, v10, v11, v12);
}

uint64_t sub_1B0F7B620@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F7B28C(a1, a2);
}

unint64_t sub_1B0F7B634()
{
  unint64_t result;

  result = qword_1EEEDECB8;
  if (!qword_1EEEDECB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039B54, &type metadata for UnitPointResolvableError);
    atomic_store(result, (unint64_t *)&qword_1EEEDECB8);
  }
  return result;
}

uint64_t sub_1B0F7B678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19[3];
  char v20;
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_BYTE *)(v1 + 64);
  v19[0] = *(_QWORD *)(v1 + 40);
  v19[1] = v5;
  v19[2] = v6;
  v20 = v7;
  sub_1B0F6C708(v19[0], v5, v6, v7);
  sub_1B0FA70A4(a1);
  LOBYTE(a1) = v8;
  sub_1B0F6C7D4(v19[0], v5, v6, v7);
  if ((a1 & 1) == 0)
    return sub_1B10358D0();
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v10 = sub_1B103467C();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA00);
  swift_retain_n();
  v11 = sub_1B1034664();
  v12 = sub_1B1035E1C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v19[0] = v14;
    *(_DWORD *)v13 = 136315650;
    v21 = sub_1B0F6B618(0xD000000000000071, 0x80000001B104CAF0, v19);
    sub_1B1035E7C();
    *(_WORD *)(v13 + 12) = 2080;
    v21 = sub_1B0F6B618(0xD000000000000013, 0x80000001B104CB70, v19);
    sub_1B1035E7C();
    *(_WORD *)(v13 + 22) = 2080;
    swift_retain();
    v15 = sub_1B1035684();
    v17 = v16;
    swift_release();
    v21 = sub_1B0F6B618(v15, v17, v19);
    sub_1B1035E7C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0F50000, v11, v12, "%s %s Unable to resolve location for gradient stop with color %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v14, -1, -1);
    MEMORY[0x1B5E15248](v13, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_1B0F81080();
  swift_allocError();
  *v18 = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1B0F7B990(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x726F6C6F63;
}

uint64_t sub_1B0F7B9C4(char *a1, char *a2)
{
  return sub_1B100CB80(*a1, *a2);
}

uint64_t sub_1B0F7B9D0()
{
  return sub_1B100FA10();
}

uint64_t sub_1B0F7B9D8()
{
  return sub_1B10121D8();
}

uint64_t sub_1B0F7B9E0()
{
  return sub_1B10151C8();
}

uint64_t sub_1B0F7B9E8@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F7B9F4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7B990(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7BA1C()
{
  char *v0;

  return sub_1B0F7B990(*v0);
}

uint64_t sub_1B0F7BA24@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F7BA30()
{
  sub_1B0F82370();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7BA58()
{
  sub_1B0F82370();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7BA80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  _BYTE v13[40];
  _BYTE v14[40];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEE00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F82370();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v10) = 0;
  sub_1B0F81F08();
  sub_1B10360BC();
  sub_1B0F5FD84((uint64_t)v13, (uint64_t)v14);
  v18 = 1;
  sub_1B0F7E5F8();
  sub_1B10360BC();
  sub_1B0F81F88((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v10;
  v16 = v11;
  v17 = v12;
  sub_1B0F823B4((uint64_t)v14, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B0F823E8((uint64_t)v14);
}

uint64_t sub_1B0F7BC48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F7BA80(a1, a2);
}

uint64_t sub_1B0F7BC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  if (a2)
  {
    swift_retain();
    v6 = sub_1B0F7E80C(a2, a1);
    result = swift_release();
    if (!v3)
      return MEMORY[0x1B5E1433C](v6);
  }
  else if (a3)
  {
    swift_retain();
    v9 = sub_1B0F7E914(a3, a1);
    swift_release();
    return MEMORY[0x1B5E14348](v9);
  }
  else
  {
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v10 = sub_1B103467C();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA00);
    v11 = sub_1B1034664();
    v12 = sub_1B1035E1C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v16 = v14;
      *(_DWORD *)v13 = 136315394;
      sub_1B0F6B618(0xD000000000000071, 0x80000001B104CAF0, &v16);
      sub_1B1035E7C();
      *(_WORD *)(v13 + 12) = 2080;
      sub_1B0F6B618(0x746E656964617267, 0xEF293A6874697728, &v16);
      sub_1B1035E7C();
      _os_log_impl(&dword_1B0F50000, v11, v12, "%s %s Unable to resolve any stops or colors.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v14, -1, -1);
      MEMORY[0x1B5E15248](v13, -1, -1);
    }

    sub_1B0F81080();
    swift_allocError();
    *v15 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B0F7BEBC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73726F6C6F63;
  else
    return 0x73706F7473;
}

uint64_t sub_1B0F7BEEC(char *a1, char *a2)
{
  return sub_1B100D508(*a1, *a2);
}

uint64_t sub_1B0F7BEF8()
{
  return sub_1B100FA8C();
}

uint64_t sub_1B0F7BF00()
{
  return sub_1B1012668();
}

uint64_t sub_1B0F7BF08()
{
  return sub_1B1014BB0();
}

uint64_t sub_1B0F7BF10@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F7BF1C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F7BF74@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7BEBC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7BF9C()
{
  char *v0;

  return sub_1B0F7BEBC(*v0);
}

uint64_t sub_1B0F7BFA4@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F7BFB0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F7C00C()
{
  sub_1B0F81EC4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7C034()
{
  sub_1B0F81EC4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7C05C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B0F7E9E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B0F7C084@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v21 = *(_QWORD *)(v2 + 16);
  v31 = *(_QWORD *)(v2 + 32);
  v32 = *(_QWORD *)(v2 + 24);
  v30 = *(_BYTE *)(v2 + 40);
  v24 = *(_QWORD *)(v2 + 56);
  v25 = *(_QWORD *)(v2 + 48);
  v23 = *(_QWORD *)(v2 + 64);
  v22 = *(_BYTE *)(v2 + 72);
  v27 = *(_QWORD *)(v2 + 88);
  v28 = *(_QWORD *)(v2 + 80);
  v36 = *(_QWORD *)(v2 + 96);
  v26 = *(_BYTE *)(v2 + 104);
  v18 = *(_QWORD *)(v2 + 112);
  v19 = *(_QWORD *)(v2 + 120);
  v20 = *(_QWORD *)(v2 + 128);
  v6 = *(_BYTE *)(v2 + 136);
  v8 = *(_QWORD *)(v2 + 144);
  v7 = *(_QWORD *)(v2 + 152);
  v9 = *(_QWORD *)(v2 + 160);
  v10 = *(_BYTE *)(v2 + 168);
  v11 = *(_QWORD *)(v2 + 176);
  v12 = *(_QWORD *)(v2 + 184);
  v13 = *(_QWORD *)(v2 + 192);
  v14 = *(_BYTE *)(v2 + 200);
  result = sub_1B0F7BC5C(a1, v4, v5);
  if (!v3)
  {
    sub_1B0F56C04(v21, v32, v31, v30);
    sub_1B0F6C6F4(v25, v24, v23, v22);
    sub_1B0F6C6F4(v28, v27, v36, v26);
    sub_1B0F7AB94(a1);
    sub_1B0F56B88(v21, v32, v31, v30);
    sub_1B0F6C7C0(v25, v24, v23, v22);
    sub_1B0F6C7C0(v28, v27, v36, v26);
    sub_1B0F56C04(v18, v19, v20, v6);
    sub_1B0F6C6F4(v8, v7, v9, v10);
    sub_1B0F6C6F4(v11, v12, v13, v14);
    sub_1B0F7AB94(a1);
    sub_1B0F56B88(v18, v19, v20, v6);
    sub_1B0F6C7C0(v8, v7, v9, v10);
    sub_1B0F6C7C0(v11, v12, v13, v14);
    sub_1B10348B0();
    v16 = MEMORY[0x1E0CD93A8];
    a2[3] = MEMORY[0x1E0CD93C0];
    a2[4] = v16;
    result = swift_allocObject();
    *a2 = result;
    *(_OWORD *)(result + 16) = v33;
    *(_OWORD *)(result + 32) = v34;
    *(_QWORD *)(result + 48) = v35;
  }
  return result;
}

uint64_t sub_1B0F7C3D8(char a1)
{
  return *(_QWORD *)&aGradientstartp[8 * a1];
}

uint64_t sub_1B0F7C3F8(char *a1, char *a2)
{
  return sub_1B100C8C4(*a1, *a2);
}

uint64_t sub_1B0F7C404()
{
  return sub_1B100FB04();
}

uint64_t sub_1B0F7C40C()
{
  return sub_1B1012074();
}

uint64_t sub_1B0F7C414()
{
  return sub_1B10153F4();
}

uint64_t sub_1B0F7C41C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7C450@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7C3D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7C478()
{
  char *v0;

  return sub_1B0F7C3D8(*v0);
}

uint64_t sub_1B0F7C480@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7C4AC()
{
  sub_1B0F8142C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7C4D4()
{
  sub_1B0F8142C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7C4FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  char v112;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDED48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v72 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0F8142C();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    return swift_bridgeObjectRelease();
  }
  v62 = a2;
  LOBYTE(v73) = 1;
  sub_1B0F81108();
  sub_1B10360BC();
  v70 = v91;
  v71 = *((_QWORD *)&v90 + 1);
  v11 = v92;
  v61 = v93;
  v12 = v95;
  v68 = v90;
  v69 = v94;
  v13 = v96;
  LOBYTE(v73) = 2;
  v66 = *((_QWORD *)&v87 + 1);
  v67 = v87;
  v65 = v88;
  v64 = v89;
  sub_1B0F56C04(v87, *((uint64_t *)&v87 + 1), v88, v89);
  v111 = v11;
  v14 = v11;
  v15 = v61;
  sub_1B0F6C6F4(v68, v71, v70, v14);
  v60 = v12;
  sub_1B0F6C6F4(v15, v69, v12, v13);
  sub_1B10360BC();
  v63 = 0;
  v50 = v13;
  v16 = v91;
  v59 = v90;
  v17 = v92;
  v19 = v93;
  v18 = v94;
  v20 = v95;
  v53 = v89;
  v54 = v96;
  v112 = 0;
  v51 = v87;
  v52 = v88;
  sub_1B0F56C04(v87, *((uint64_t *)&v87 + 1), v88, v89);
  v56 = v16;
  v57 = v17;
  sub_1B0F6C6F4(v59, *((uint64_t *)&v59 + 1), v16, v17);
  v58 = v19;
  v49 = v18;
  v55 = v20;
  v21 = v20;
  v22 = v54;
  sub_1B0F6C6F4(v19, v18, v21, v54);
  sub_1B0F8114C();
  v23 = v63;
  sub_1B10360BC();
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1B0F56B88(v51, *((uint64_t *)&v51 + 1), v52, v53);
    sub_1B0F6C7C0(v59, *((uint64_t *)&v59 + 1), v56, v57);
    v24 = v49;
    sub_1B0F6C7C0(v58, v49, v55, v22);
    sub_1B0F56B88(v67, v66, v65, v64);
    v25 = v68;
    sub_1B0F6C7C0(v68, v71, v70, v111);
    v27 = v60;
    v26 = v61;
    v28 = v69;
    v29 = v50;
    sub_1B0F6C7C0(v61, v69, v60, v50);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    sub_1B0F56B88(v67, v66, v65, v64);
    sub_1B0F6C7C0(v25, v71, v70, v111);
    sub_1B0F6C7C0(v26, v28, v27, v29);
    if (!v63)
    {
      sub_1B0F56B88(v51, *((uint64_t *)&v51 + 1), v52, v53);
      sub_1B0F6C7C0(v59, *((uint64_t *)&v59 + 1), v56, v57);
      sub_1B0F6C7C0(v58, v24, v55, v54);
    }
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v63 = v110;
  v73 = v110;
  v48 = *((_QWORD *)&v110 + 1);
  *(_QWORD *)&v74 = v67;
  *((_QWORD *)&v74 + 1) = v66;
  *(_QWORD *)&v75 = v65;
  BYTE8(v75) = v64;
  *(_QWORD *)&v76 = v68;
  *((_QWORD *)&v76 + 1) = v71;
  *(_QWORD *)&v77 = v70;
  BYTE8(v77) = v111;
  *(_QWORD *)&v78 = v61;
  *((_QWORD *)&v78 + 1) = v69;
  *(_QWORD *)&v79 = v60;
  BYTE8(v79) = v50;
  v30 = v51;
  v80 = v51;
  v31 = v52;
  *(_QWORD *)&v81 = v52;
  v32 = v53;
  BYTE8(v81) = v53;
  v82 = v59;
  v33 = v55;
  *(_QWORD *)&v83 = v56;
  BYTE8(v83) = v57;
  v34 = v49;
  *(_QWORD *)&v84 = v58;
  *((_QWORD *)&v84 + 1) = v49;
  *(_QWORD *)&v85 = v55;
  BYTE8(v85) = v22;
  v86 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F81470((uint64_t)&v73, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F56C04, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F6C6F4);
  sub_1B0F56B88(v30, *((uint64_t *)&v30 + 1), v31, v32);
  sub_1B0F6C7C0(v59, *((uint64_t *)&v59 + 1), v56, v57);
  sub_1B0F6C7C0(v58, v34, v33, v22);
  sub_1B0F56B88(v67, v66, v65, v64);
  v35 = v70;
  sub_1B0F6C7C0(v68, v71, v70, v111);
  v37 = v60;
  v36 = v61;
  LOBYTE(v31) = v50;
  sub_1B0F6C7C0(v61, v69, v60, v50);
  v38 = v48;
  swift_bridgeObjectRelease();
  v39 = v63;
  swift_bridgeObjectRelease();
  v40 = v84;
  v41 = v62;
  *(_OWORD *)(v62 + 160) = v83;
  *(_OWORD *)(v41 + 176) = v40;
  *(_OWORD *)(v41 + 192) = v85;
  *(_QWORD *)(v41 + 208) = v86;
  v42 = v80;
  *(_OWORD *)(v41 + 96) = v79;
  *(_OWORD *)(v41 + 112) = v42;
  v43 = v82;
  *(_OWORD *)(v41 + 128) = v81;
  *(_OWORD *)(v41 + 144) = v43;
  v44 = v76;
  *(_OWORD *)(v41 + 32) = v75;
  *(_OWORD *)(v41 + 48) = v44;
  v45 = v78;
  *(_OWORD *)(v41 + 64) = v77;
  *(_OWORD *)(v41 + 80) = v45;
  v46 = v74;
  *(_OWORD *)v41 = v73;
  *(_OWORD *)(v41 + 16) = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  *(_QWORD *)&v87 = v39;
  *((_QWORD *)&v87 + 1) = v38;
  v88 = v67;
  v89 = v66;
  *(_QWORD *)&v90 = v65;
  BYTE8(v90) = v64;
  v91 = v68;
  v92 = v71;
  v93 = v35;
  LOBYTE(v94) = v111;
  v95 = v36;
  v96 = v69;
  v97 = v37;
  v98 = v31;
  v99 = v51;
  v100 = v52;
  v101 = v53;
  v102 = v59;
  v103 = v56;
  v104 = v57;
  v105 = v58;
  v106 = v49;
  v107 = v55;
  v108 = v54;
  v109 = MEMORY[0x1E0DEE9D8];
  return sub_1B0F815CC((uint64_t)&v87, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F56B88, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F6C7C0);
}

uint64_t sub_1B0F7CBE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F7C084(a1, a2);
}

uint64_t sub_1B0F7CBF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F7CBFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 208) = a1;
  return result;
}

uint64_t sub_1B0F7CC24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F7C4FC(a1, a2);
}

uint64_t sub_1B0F7CC38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  double v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  _QWORD v45[6];

  v31 = *(_QWORD *)v2;
  v32 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 64);
  v29 = *(_QWORD *)(v2 + 120);
  v30 = *(_QWORD *)(v2 + 112);
  v28 = *(_QWORD *)(v2 + 128);
  v33 = *(unsigned __int8 *)(v2 + 136);
  v23 = *(_QWORD *)(v2 + 144);
  v24 = *(_QWORD *)(v2 + 152);
  v27 = *(unsigned __int8 *)(v2 + 168);
  v22 = *(_QWORD *)(v2 + 176);
  v25 = *(_QWORD *)(v2 + 160);
  v26 = *(_QWORD *)(v2 + 184);
  v20 = *(_QWORD *)(v2 + 192);
  v21 = *(unsigned __int8 *)(v2 + 200);
  v6 = *(_BYTE *)(v2 + 72);
  v36 = *(_QWORD *)(v2 + 16);
  v37 = *(_QWORD *)(v2 + 24);
  v38 = *(_QWORD *)(v2 + 32);
  v39 = *(_BYTE *)(v2 + 40);
  v40 = *(_QWORD *)(v2 + 80);
  v41 = *(_QWORD *)(v2 + 88);
  v42 = *(_QWORD *)(v2 + 96);
  v43 = *(_BYTE *)(v2 + 104);
  sub_1B0F56C04(v36, v37, v38, v39);
  sub_1B0F6C6F4(v3, v4, v5, v6);
  sub_1B0F6C6F4(v40, v41, v42, v43);
  v7 = sub_1B0F7AB94(a1);
  v9 = v8;
  sub_1B0F56B88(v36, v37, v38, v39);
  sub_1B0F6C7C0(v3, v4, v5, v6);
  result = sub_1B0F6C7C0(v40, v41, v42, v43);
  if (!v34)
  {
    if (v33 == 255)
    {
      v11 = 0.0;
      if (v27 == 255)
      {
        v14 = 0.0;
      }
      else
      {
        sub_1B0F5E604(v23, v24, v25, v27 & 1);
        v13 = sub_1B0FD72F8(a1, v23, v24, v25, v27 & 1);
        sub_1B0F5FD28(v23, v24, v25, v27);
        v14 = v13 * 0.0174532925;
      }
      if (v21 != 255)
      {
        sub_1B0F5E604(v22, v26, v20, v21 & 1);
        v15 = sub_1B0FD72F8(a1, v22, v26, v20, v21 & 1);
        sub_1B0F5FD28(v22, v26, v20, v21);
        v11 = v15 * 0.0174532925;
      }
      v12 = (char *)v45;
      v16 = sub_1B0F7BC5C(a1, v31, v32);
      MEMORY[0x1B5E133A0](v45, v16, v7, v9, v14, v11);
    }
    else
    {
      sub_1B0F5E604(v30, v29, v28, v33 & 1);
      sub_1B0FD72F8(a1, v30, v29, v28, v33 & 1);
      sub_1B0F5FD28(v30, v29, v28, v33);
      sub_1B0F7BC5C(a1, v31, v32);
      v12 = &v44;
      sub_1B103494C();
    }
    v17 = MEMORY[0x1E0CD97E8];
    a2[3] = MEMORY[0x1E0CD97F8];
    a2[4] = v17;
    result = swift_allocObject();
    *a2 = result;
    v18 = *((_OWORD *)v12 + 1);
    *(_OWORD *)(result + 16) = *(_OWORD *)v12;
    *(_OWORD *)(result + 32) = v18;
    *(_QWORD *)(result + 48) = *((_QWORD *)v12 + 4);
  }
  return result;
}

uint64_t sub_1B0F7D05C(char a1)
{
  return *(_QWORD *)&aGradientcenter[8 * a1];
}

uint64_t sub_1B0F7D07C(char *a1, char *a2)
{
  return sub_1B100C7BC(*a1, *a2);
}

uint64_t sub_1B0F7D088()
{
  return sub_1B100FB6C();
}

uint64_t sub_1B0F7D090()
{
  return sub_1B1011FF4();
}

uint64_t sub_1B0F7D098()
{
  return sub_1B10154BC();
}

uint64_t sub_1B0F7D0A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F81E34();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7D0CC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7D05C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7D0F4()
{
  char *v0;

  return sub_1B0F7D05C(*v0);
}

uint64_t sub_1B0F7D0FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F81E34();
  *a1 = result;
  return result;
}

void sub_1B0F7D120(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1B0F7D12C()
{
  sub_1B0F813E8();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7D154()
{
  sub_1B0F813E8();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7D17C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _BYTE v110[7];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _BYTE v115[7];
  uint64_t v116;
  char v117;
  __int128 v118;
  _BYTE v119[7];
  _DWORD v120[3];
  _QWORD *v121;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDED38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v121 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0F813E8();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
    return swift_bridgeObjectRelease();
  }
  v64 = a2;
  LOBYTE(v74) = 1;
  sub_1B0F81108();
  sub_1B10360BC();
  v11 = v88;
  v70 = v90;
  v71 = v89;
  v69 = v91;
  v72 = v93;
  v73 = v92;
  v60 = 0;
  v12 = v94;
  v13 = v95;
  v65 = v96;
  v63 = v97;
  v14 = v98;
  v15 = v99;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
  LOBYTE(v74) = 2;
  v66 = v11;
  sub_1B0F56C04(v11, v71, v70, v69);
  v68 = v12;
  v67 = v13;
  sub_1B0F6C6F4(v73, v72, v12, v13);
  v16 = v63;
  v62 = v14;
  v61 = v15;
  sub_1B0F6C6F4(v65, v63, v14, v15);
  v17 = sub_1B0F5FE48();
  v18 = v60;
  sub_1B10360A4();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1B0F56B88(v66, v71, v70, v69);
    sub_1B0F6C7C0(v73, v72, v68, v67);
    v19 = v65;
    v20 = v62;
    v21 = v61;
    sub_1B0F6C7C0(v65, v16, v62, v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
    sub_1B0F56B88(v66, v71, v70, v69);
    sub_1B0F6C7C0(v73, v72, v68, v67);
    sub_1B0F6C7C0(v19, v16, v20, v21);
    return swift_bridgeObjectRelease();
  }
  v22 = v17;
  v23 = v90;
  LOBYTE(v74) = 3;
  v24 = v88;
  v58 = v89;
  LODWORD(v60) = v91;
  sub_1B0F5FD10(v88, v89, v90, v91);
  v57 = v22;
  v49 = 0;
  sub_1B10360A4();
  v53 = v24;
  v54 = v23;
  LODWORD(v23) = v91;
  LOBYTE(v74) = 4;
  v51 = v90;
  v52 = v88;
  v50 = v89;
  sub_1B0F5FD10(v88, v89, v90, v91);
  sub_1B10360A4();
  v48 = v23;
  v25 = v89;
  v117 = 0;
  v59 = v88;
  v57 = v90;
  v56 = v91;
  sub_1B0F5FD10(v88, v89, v90, v91);
  sub_1B0F8114C();
  sub_1B10360BC();
  v26 = v73;
  v27 = v54;
  v55 = v25;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v74 = v118;
  v47 = *((_QWORD *)&v118 + 1);
  v49 = v118;
  *(_QWORD *)&v75 = v66;
  *((_QWORD *)&v75 + 1) = v71;
  *(_QWORD *)&v76 = v70;
  BYTE8(v76) = v69;
  *(_QWORD *)&v77 = v26;
  *((_QWORD *)&v77 + 1) = v72;
  *(_QWORD *)&v78 = v68;
  BYTE8(v78) = v67;
  *(_QWORD *)&v79 = v65;
  *((_QWORD *)&v79 + 1) = v63;
  *(_QWORD *)&v80 = v62;
  BYTE8(v80) = v61;
  v28 = v59;
  *(_QWORD *)&v81 = v53;
  *((_QWORD *)&v81 + 1) = v58;
  *(_QWORD *)&v82 = v27;
  BYTE8(v82) = v60;
  v29 = v51;
  v30 = v50;
  *(_QWORD *)&v83 = v52;
  *((_QWORD *)&v83 + 1) = v50;
  *(_QWORD *)&v84 = v51;
  v31 = v48;
  BYTE8(v84) = v48;
  *(_QWORD *)&v85 = v59;
  *((_QWORD *)&v85 + 1) = v25;
  v32 = v57;
  *(_QWORD *)&v86 = v57;
  v33 = v56;
  BYTE8(v86) = v56;
  v87 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F81470((uint64_t)&v74, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F5FD10, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5FD10);
  sub_1B0F5FD28(v28, v25, v32, v33);
  sub_1B0F5FD28(v52, v30, v29, v31);
  sub_1B0F5FD28(v53, v58, v54, v60);
  sub_1B0F56B88(v66, v71, v70, v69);
  sub_1B0F6C7C0(v73, v72, v68, v67);
  v34 = v65;
  v36 = v62;
  v35 = v63;
  LOBYTE(v30) = v61;
  sub_1B0F6C7C0(v65, v63, v62, v61);
  v37 = v47;
  swift_bridgeObjectRelease();
  v38 = v49;
  swift_bridgeObjectRelease();
  v39 = v85;
  v40 = v64;
  *(_OWORD *)(v64 + 160) = v84;
  *(_OWORD *)(v40 + 176) = v39;
  *(_OWORD *)(v40 + 192) = v86;
  *(_QWORD *)(v40 + 208) = v87;
  v41 = v81;
  *(_OWORD *)(v40 + 96) = v80;
  *(_OWORD *)(v40 + 112) = v41;
  v42 = v83;
  *(_OWORD *)(v40 + 128) = v82;
  *(_OWORD *)(v40 + 144) = v42;
  v43 = v77;
  *(_OWORD *)(v40 + 32) = v76;
  *(_OWORD *)(v40 + 48) = v43;
  v44 = v79;
  *(_OWORD *)(v40 + 64) = v78;
  *(_OWORD *)(v40 + 80) = v44;
  v45 = v75;
  *(_OWORD *)v40 = v74;
  *(_OWORD *)(v40 + 16) = v45;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  v88 = v38;
  v89 = v37;
  v90 = v66;
  v91 = v71;
  v92 = v70;
  LOBYTE(v93) = v69;
  v94 = v73;
  v95 = v72;
  v96 = v68;
  LOBYTE(v97) = v67;
  v98 = v34;
  v99 = v35;
  v100 = v36;
  v101 = v30;
  v102 = v53;
  v103 = v58;
  v104 = v54;
  v105 = v60;
  v106 = v52;
  v107 = v50;
  v108 = v51;
  v109 = v48;
  *(_DWORD *)v110 = v120[0];
  *(_DWORD *)&v110[3] = *(_DWORD *)((char *)v120 + 3);
  v111 = v59;
  v112 = v55;
  v113 = v57;
  v114 = v56;
  *(_DWORD *)v115 = *(_DWORD *)v119;
  *(_DWORD *)&v115[3] = *(_DWORD *)&v119[3];
  v116 = MEMORY[0x1E0DEE9D8];
  return sub_1B0F815CC((uint64_t)&v88, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F5FD28, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5FD28);
}

uint64_t sub_1B0F7DA00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F7CC38(a1, a2);
}

uint64_t sub_1B0F7DA14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F7D17C(a1, a2);
}

uint64_t sub_1B0F7DA28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v44 = a1;
  v28 = *(_QWORD *)(v2 + 8);
  v29 = *(_QWORD *)v2;
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 64);
  v30 = *(_QWORD *)(v2 + 128);
  v31 = *(_QWORD *)(v2 + 120);
  v32 = *(unsigned __int8 *)(v2 + 136);
  v23 = *(_QWORD *)(v2 + 152);
  v24 = *(_QWORD *)(v2 + 144);
  v26 = *(_QWORD *)(v2 + 160);
  v27 = *(_QWORD *)(v2 + 112);
  v25 = *(unsigned __int8 *)(v2 + 168);
  v6 = *(_BYTE *)(v2 + 72);
  v34 = *(_QWORD *)(v2 + 16);
  v35 = *(_QWORD *)(v2 + 24);
  v36 = *(_QWORD *)(v2 + 32);
  v37 = *(_BYTE *)(v2 + 40);
  v38 = *(_QWORD *)(v2 + 80);
  v39 = *(_QWORD *)(v2 + 88);
  v40 = *(_QWORD *)(v2 + 96);
  v41 = *(_BYTE *)(v2 + 104);
  sub_1B0F56C04(v34, v35, v36, v37);
  sub_1B0F6C6F4(v3, v4, v5, v6);
  sub_1B0F6C6F4(v38, v39, v40, v41);
  v7 = sub_1B0F7AB94(v44);
  v9 = v8;
  sub_1B0F56B88(v34, v35, v36, v37);
  sub_1B0F6C7C0(v3, v4, v5, v6);
  result = sub_1B0F6C7C0(v38, v39, v40, v41);
  if (!v33)
  {
    v11 = 0.0;
    if (v32 == 255)
    {
      v18 = 0.0;
      v12 = v29;
      v13 = v28;
      v15 = v23;
      v14 = v24;
      v16 = v26;
      v17 = v25;
      if (v25 == 255)
        goto LABEL_8;
    }
    else
    {
      sub_1B0F5E604(v27, v31, v30, v32 & 1);
      v18 = sub_1B0FD72F8(v44, v27, v31, v30, v32 & 1);
      v12 = v29;
      v13 = v28;
      v15 = v23;
      v14 = v24;
      v16 = v26;
      v17 = v25;
      sub_1B0F5FD28(v27, v31, v30, v32);
      if (v25 == 255)
        goto LABEL_8;
    }
    sub_1B0F5E604(v14, v15, v16, v17 & 1);
    v11 = sub_1B0FD72F8(v44, v14, v15, v16, v17 & 1);
    sub_1B0F5FD28(v14, v15, v16, v17);
LABEL_8:
    v19 = sub_1B0F7BC5C(v44, v12, v13);
    MEMORY[0x1B5E13364](v42, v19, v7, v9, v18, v11);
    v20 = MEMORY[0x1E0CD9590];
    a2[3] = MEMORY[0x1E0CD95A8];
    a2[4] = v20;
    result = swift_allocObject();
    *a2 = result;
    v21 = v42[1];
    *(_OWORD *)(result + 16) = v42[0];
    *(_OWORD *)(result + 32) = v21;
    *(_QWORD *)(result + 48) = v43;
  }
  return result;
}

uint64_t sub_1B0F7DD4C(char a1)
{
  return *(_QWORD *)&aGradientcenter_0[8 * a1];
}

uint64_t sub_1B0F7DD6C(char *a1, char *a2)
{
  return sub_1B100C840(*a1, *a2);
}

uint64_t sub_1B0F7DD78()
{
  return sub_1B100FBD4();
}

uint64_t sub_1B0F7DD80()
{
  return sub_1B1012034();
}

uint64_t sub_1B0F7DD88()
{
  return sub_1B1015458();
}

uint64_t sub_1B0F7DD90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F81E7C();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7DDBC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F7DD4C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F7DDE4()
{
  char *v0;

  return sub_1B0F7DD4C(*v0);
}

uint64_t sub_1B0F7DDEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F81E7C();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F7DE10()
{
  sub_1B0F810C4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F7DE38()
{
  sub_1B0F810C4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F7DE60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  char v96;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDED18);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0F810C4();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v57 = v6;
    v48 = a2;
    LOBYTE(v59) = 1;
    sub_1B0F81108();
    sub_1B10360BC();
    v10 = v71;
    v53 = v73;
    v54 = v72;
    v11 = v74;
    v52 = v75;
    v55 = v77;
    v56 = v76;
    v12 = v78;
    v47 = v79;
    v13 = v81;
    v49 = v80;
    v14 = v82;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
    LOBYTE(v59) = 2;
    v51 = v10;
    v50 = v11;
    sub_1B0F56C04(v10, v54, v53, v11);
    v15 = v47;
    v95 = v12;
    sub_1B0F6C6F4(v52, v56, v55, v12);
    v46 = v13;
    v45 = v14;
    sub_1B0F6C6F4(v15, v49, v13, v14);
    sub_1B0F5FE48();
    sub_1B10360BC();
    v16 = v72;
    LODWORD(v15) = v74;
    LOBYTE(v59) = 3;
    v42 = v73;
    v43 = v71;
    sub_1B0F5E604(v71, v72, v73, v74);
    v38 = 0;
    sub_1B10360BC();
    v41 = v15;
    v40 = v16;
    v17 = v73;
    v96 = 0;
    v18 = v71;
    v44 = v72;
    v39 = v74;
    sub_1B0F5E604(v71, v72, v73, v74);
    sub_1B0F8114C();
    sub_1B10360BC();
    v19 = v55;
    v20 = v56;
    v36 = v17;
    v37 = v18;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v5);
    v57 = v94;
    v59 = v94;
    v38 = *((_QWORD *)&v94 + 1);
    *(_QWORD *)&v60 = v51;
    *((_QWORD *)&v60 + 1) = v54;
    *(_QWORD *)&v61 = v53;
    BYTE8(v61) = v50;
    *(_QWORD *)&v62 = v52;
    *((_QWORD *)&v62 + 1) = v20;
    *(_QWORD *)&v63 = v19;
    BYTE8(v63) = v95;
    *(_QWORD *)&v64 = v47;
    *((_QWORD *)&v64 + 1) = v49;
    *(_QWORD *)&v65 = v46;
    BYTE8(v65) = v45;
    v21 = v42;
    v22 = v40;
    *(_QWORD *)&v66 = v43;
    *((_QWORD *)&v66 + 1) = v40;
    *(_QWORD *)&v67 = v42;
    LOBYTE(v20) = v41;
    BYTE8(v67) = v41;
    v23 = v44;
    *(_QWORD *)&v68 = v18;
    *((_QWORD *)&v68 + 1) = v44;
    *(_QWORD *)&v69 = v17;
    LOBYTE(v10) = v39;
    BYTE8(v69) = v39;
    v70 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B0F81190((uint64_t)&v59);
    sub_1B0F5E6A0(v18, v23, v17, v10);
    sub_1B0F5E6A0(v43, v22, v21, v20);
    sub_1B0F56B88(v51, v54, v53, v50);
    sub_1B0F6C7C0(v52, v56, v55, v95);
    v24 = v46;
    v25 = v47;
    v26 = v49;
    LOBYTE(v10) = v45;
    sub_1B0F6C7C0(v47, v49, v46, v45);
    v27 = v38;
    swift_bridgeObjectRelease();
    v28 = v57;
    swift_bridgeObjectRelease();
    v29 = v68;
    v30 = v48;
    *(_OWORD *)(v48 + 128) = v67;
    *(_OWORD *)(v30 + 144) = v29;
    *(_OWORD *)(v30 + 160) = v69;
    *(_QWORD *)(v30 + 176) = v70;
    v31 = v64;
    *(_OWORD *)(v30 + 64) = v63;
    *(_OWORD *)(v30 + 80) = v31;
    v32 = v66;
    *(_OWORD *)(v30 + 96) = v65;
    *(_OWORD *)(v30 + 112) = v32;
    v33 = v60;
    *(_OWORD *)v30 = v59;
    *(_OWORD *)(v30 + 16) = v33;
    v34 = v62;
    *(_OWORD *)(v30 + 32) = v61;
    *(_OWORD *)(v30 + 48) = v34;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    v71 = v28;
    v72 = v27;
    v73 = v51;
    v74 = v54;
    v75 = v53;
    LOBYTE(v76) = v50;
    v77 = v52;
    v78 = v56;
    v79 = v55;
    LOBYTE(v80) = v95;
    v81 = v25;
    v82 = v26;
    v83 = v24;
    v84 = v10;
    v85 = v43;
    v86 = v40;
    v87 = v42;
    v88 = v41;
    v89 = v37;
    v90 = v44;
    v91 = v36;
    v92 = v39;
    v93 = MEMORY[0x1E0DEE9D8];
    return sub_1B0F812BC((uint64_t)&v71);
  }
}

uint64_t sub_1B0F7E55C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F7DA28(a1, a2);
}

uint64_t sub_1B0F7E570()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F7E578(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 176) = a1;
  return result;
}

uint64_t sub_1B0F7E5A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F7DE60(a1, a2);
}

unint64_t sub_1B0F7E5B4()
{
  unint64_t result;

  result = qword_1EEEDECC8;
  if (!qword_1EEEDECC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039B04, &type metadata for UnitPointResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDECC8);
  }
  return result;
}

unint64_t sub_1B0F7E5F8()
{
  unint64_t result;

  result = qword_1EEEDECD0;
  if (!qword_1EEEDECD0)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for DoubleResolvable, &type metadata for DoubleResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDECD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitPointResolvable.CodingKeys()
{
  return &type metadata for UnitPointResolvable.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UnitPointResolvableError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F7E690 + 4 * byte_1B1039900[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F7E6B0 + 4 * byte_1B1039905[v4]))();
}

_BYTE *sub_1B0F7E690(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F7E6B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F7E6B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F7E6C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F7E6C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F7E6D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UnitPointResolvableError()
{
  return &type metadata for UnitPointResolvableError;
}

unint64_t sub_1B0F7E6F0()
{
  unint64_t result;

  result = qword_1EEEDECD8;
  if (!qword_1EEEDECD8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10399EC, &type metadata for UnitPointResolvableError);
    atomic_store(result, (unint64_t *)&qword_1EEEDECD8);
  }
  return result;
}

unint64_t sub_1B0F7E738()
{
  unint64_t result;

  result = qword_1EEEDECE0;
  if (!qword_1EEEDECE0)
  {
    result = MEMORY[0x1B5E15188]("U>&5", &type metadata for UnitPointResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDECE0);
  }
  return result;
}

unint64_t sub_1B0F7E780()
{
  unint64_t result;

  result = qword_1EEEDECE8;
  if (!qword_1EEEDECE8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039A14, &type metadata for UnitPointResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDECE8);
  }
  return result;
}

unint64_t sub_1B0F7E7C8()
{
  unint64_t result;

  result = qword_1EEEDECF0;
  if (!qword_1EEEDECF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039A3C, &type metadata for UnitPointResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDECF0);
  }
  return result;
}

uint64_t sub_1B0F7E80C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD8A0(0, v3, 0);
    v4 = v16;
    for (i = a1 + 32; ; i += 72)
    {
      v8 = sub_1B0F7B678(a2);
      if (v2)
        break;
      v10 = v8;
      v11 = v9;
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        sub_1B0FDD8A0(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 40) = v11;
      if (!--v3)
        return v4;
    }
    swift_release();
  }
  return v4;
}

uint64_t sub_1B0F7E914(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1B1035F9C();
    v6 = (_QWORD *)(a1 + 32);
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      __swift_project_boxed_opaque_existential_1(v6, v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v7, v8);
      sub_1B1035F78();
      sub_1B1035FA8();
      sub_1B1035FB4();
      sub_1B1035F84();
      v6 += 5;
      --v3;
    }
    while (v3);
    return v9;
  }
  return result;
}

uint64_t sub_1B0F7E9E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[5];
  __int128 v23[2];
  uint64_t v24;
  uint64_t v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEDA8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F81EC4();
  sub_1B1036278();
  if (!v1)
  {
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEDD0);
      LOBYTE(v22[0]) = 0;
      sub_1B0F81FBC(&qword_1EEEDEDD8, &qword_1EEEDEDD0, (uint64_t (*)(void))sub_1B0F82020);
      sub_1B10360BC();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v3 = *(_QWORD *)&v23[0];
    }
    else
    {
      LOBYTE(v23[0]) = 1;
      if ((sub_1B10360D4() & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEDB8);
        LOBYTE(v23[0]) = 1;
        sub_1B0F81FBC(&qword_1EEEDEDC0, &qword_1EEEDEDB8, (uint64_t (*)(void))sub_1B0F81F08);
        sub_1B10360BC();
        v8 = *(_QWORD *)(v25 + 16);
        if (v8)
        {
          v21 = v4;
          v24 = MEMORY[0x1E0DEE9D8];
          v9 = v25;
          sub_1B0FDD95C(0, v8, 0);
          v20[1] = v9;
          v10 = v9 + 32;
          v11 = v24;
          do
          {
            sub_1B0F81F4C(v10, (uint64_t)v22);
            sub_1B0F5FD84((uint64_t)v22, (uint64_t)v23);
            sub_1B0F81F88((uint64_t)v22);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1B0FDD95C(0, *(_QWORD *)(v11 + 16) + 1, 1);
              v11 = v24;
            }
            v13 = *(_QWORD *)(v11 + 16);
            v12 = *(_QWORD *)(v11 + 24);
            if (v13 >= v12 >> 1)
            {
              sub_1B0FDD95C(v12 > 1, v13 + 1, 1);
              v11 = v24;
            }
            *(_QWORD *)(v11 + 16) = v13 + 1;
            sub_1B0F5A0E4(v23, v11 + 40 * v13 + 32);
            v10 += 40;
            --v8;
          }
          while (v8);
          swift_bridgeObjectRelease();
          v4 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        v3 = 0;
      }
      else
      {
        if (qword_1EEEDE0B0 != -1)
          swift_once();
        v14 = sub_1B103467C();
        __swift_project_value_buffer(v14, (uint64_t)qword_1EEF0BA00);
        v15 = sub_1B1034664();
        v16 = sub_1B1035E1C();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc();
          v18 = swift_slowAlloc();
          *(_QWORD *)&v23[0] = v18;
          *(_DWORD *)v17 = 136315394;
          v21 = v4;
          v22[0] = sub_1B0F6B618(0xD000000000000071, 0x80000001B104CAF0, (uint64_t *)v23);
          sub_1B1035E7C();
          *(_WORD *)(v17 + 12) = 2080;
          v22[0] = sub_1B0F6B618(0x6F72662874696E69, 0xEB00000000293A6DLL, (uint64_t *)v23);
          v4 = v21;
          sub_1B1035E7C();
          _os_log_impl(&dword_1B0F50000, v15, v16, "%s %s Unable to decode any stops or colors.", (uint8_t *)v17, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B5E15248](v18, -1, -1);
          MEMORY[0x1B5E15248](v17, -1, -1);
        }

        sub_1B0F81080();
        swift_allocError();
        *v19 = 1;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t destroy for RadialGradientShapeStyle(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
  v4 = *(unsigned __int8 *)(a1 + 104);
  if (v4 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  v5 = *(unsigned __int8 *)(a1 + 136);
  if (v5 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v5 & 1);
  v6 = *(unsigned __int8 *)(a1 + 168);
  if (v6 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), v6 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RadialGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v9 = *(unsigned __int8 *)(a2 + 72);
  if (v9 <= 0xFD)
  {
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v10, v11, v12, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  }
  v13 = *(unsigned __int8 *)(a2 + 104);
  if (v13 <= 0xFD)
  {
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v14, v15, v16, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    *(_BYTE *)(a1 + 104) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  v17 = *(unsigned __int8 *)(a2 + 136);
  if (v17 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  }
  else
  {
    v18 = v17 & 1;
    v19 = *(_QWORD *)(a2 + 112);
    v20 = *(_QWORD *)(a2 + 120);
    v21 = *(_QWORD *)(a2 + 128);
    sub_1B0F5E604(v19, v20, v21, v17 & 1);
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_BYTE *)(a1 + 136) = v18;
  }
  v22 = *(unsigned __int8 *)(a2 + 168);
  if (v22 == 255)
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
  }
  else
  {
    v23 = v22 & 1;
    v24 = *(_QWORD *)(a2 + 144);
    v25 = *(_QWORD *)(a2 + 152);
    v26 = *(_QWORD *)(a2 + 160);
    sub_1B0F5E604(v24, v25, v26, v22 & 1);
    *(_QWORD *)(a1 + 144) = v24;
    *(_QWORD *)(a1 + 152) = v25;
    *(_QWORD *)(a1 + 160) = v26;
    *(_BYTE *)(a1 + 168) = v23;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RadialGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _OWORD *v19;
  _OWORD *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  _OWORD *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 *v49;
  __int128 *v50;
  int v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F56B9C(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F56ADC(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F5EA14(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  v19 = (_OWORD *)(a1 + 48);
  v20 = (_OWORD *)(a2 + 48);
  v21 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) <= 0xFDu)
  {
    if (v21 <= 0xFD)
    {
      v27 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      v29 = *(_QWORD *)(a2 + 64);
      sub_1B0F6C708(v27, v28, v29, *(_BYTE *)(a2 + 72));
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      *(_QWORD *)(a1 + 64) = v29;
      v33 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v21;
      sub_1B0F6C7D4(v30, v31, v32, v33);
    }
    else
    {
      sub_1B0F7A924(a1 + 48);
      v23 = *(_OWORD *)(a2 + 57);
      *v19 = *v20;
      *(_OWORD *)(a1 + 57) = v23;
    }
  }
  else if (v21 <= 0xFD)
  {
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v24, v25, v26, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = v26;
    *(_BYTE *)(a1 + 72) = v21;
  }
  else
  {
    v22 = *v20;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *v19 = v22;
  }
  v34 = (_OWORD *)(a1 + 80);
  v35 = (_OWORD *)(a2 + 80);
  v36 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 104) <= 0xFDu)
  {
    if (v36 <= 0xFD)
    {
      v42 = *(_QWORD *)(a2 + 80);
      v43 = *(_QWORD *)(a2 + 88);
      v44 = *(_QWORD *)(a2 + 96);
      sub_1B0F6C708(v42, v43, v44, *(_BYTE *)(a2 + 104));
      v45 = *(_QWORD *)(a1 + 80);
      v46 = *(_QWORD *)(a1 + 88);
      v47 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 80) = v42;
      *(_QWORD *)(a1 + 88) = v43;
      *(_QWORD *)(a1 + 96) = v44;
      v48 = *(_BYTE *)(a1 + 104);
      *(_BYTE *)(a1 + 104) = v36;
      sub_1B0F6C7D4(v45, v46, v47, v48);
    }
    else
    {
      sub_1B0F7A924(a1 + 80);
      v38 = *(_OWORD *)(a2 + 89);
      *v34 = *v35;
      *(_OWORD *)(a1 + 89) = v38;
    }
  }
  else if (v36 <= 0xFD)
  {
    v39 = *(_QWORD *)(a2 + 80);
    v40 = *(_QWORD *)(a2 + 88);
    v41 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v39, v40, v41, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 88) = v40;
    *(_QWORD *)(a1 + 96) = v41;
    *(_BYTE *)(a1 + 104) = v36;
  }
  else
  {
    v37 = *v35;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    *v34 = v37;
  }
  v49 = (__int128 *)(a1 + 112);
  v50 = (__int128 *)(a2 + 112);
  v51 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v51 == 255)
    {
      v53 = *v50;
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *v49 = v53;
    }
    else
    {
      v62 = v51 & 1;
      v63 = *(_QWORD *)(a2 + 112);
      v64 = *(_QWORD *)(a2 + 120);
      v65 = *(_QWORD *)(a2 + 128);
      sub_1B0F5E604(v63, v64, v65, v51 & 1);
      *(_QWORD *)(a1 + 112) = v63;
      *(_QWORD *)(a1 + 120) = v64;
      *(_QWORD *)(a1 + 128) = v65;
      *(_BYTE *)(a1 + 136) = v62;
    }
  }
  else if (v51 == 255)
  {
    sub_1B0F7F584(a1 + 112);
    v52 = *(_OWORD *)(a2 + 121);
    *v49 = *v50;
    *(_OWORD *)(a1 + 121) = v52;
  }
  else
  {
    v54 = v51 & 1;
    v55 = *(_QWORD *)(a2 + 112);
    v56 = *(_QWORD *)(a2 + 120);
    v57 = *(_QWORD *)(a2 + 128);
    sub_1B0F5E604(v55, v56, v57, v51 & 1);
    v58 = *(_QWORD *)(a1 + 112);
    v59 = *(_QWORD *)(a1 + 120);
    v60 = *(_QWORD *)(a1 + 128);
    v61 = *(_BYTE *)(a1 + 136);
    *(_QWORD *)(a1 + 112) = v55;
    *(_QWORD *)(a1 + 120) = v56;
    *(_QWORD *)(a1 + 128) = v57;
    *(_BYTE *)(a1 + 136) = v54;
    sub_1B0F5E6A0(v58, v59, v60, v61);
  }
  v66 = (__int128 *)(a1 + 144);
  v67 = (__int128 *)(a2 + 144);
  v68 = *(unsigned __int8 *)(a2 + 168);
  if (*(unsigned __int8 *)(a1 + 168) == 255)
  {
    if (v68 == 255)
    {
      v70 = *v67;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
      *v66 = v70;
    }
    else
    {
      v79 = v68 & 1;
      v80 = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_QWORD *)(a2 + 160);
      sub_1B0F5E604(v80, v81, v82, v68 & 1);
      *(_QWORD *)(a1 + 144) = v80;
      *(_QWORD *)(a1 + 152) = v81;
      *(_QWORD *)(a1 + 160) = v82;
      *(_BYTE *)(a1 + 168) = v79;
    }
  }
  else if (v68 == 255)
  {
    sub_1B0F7F584(a1 + 144);
    v69 = *(_OWORD *)(a2 + 153);
    *v66 = *v67;
    *(_OWORD *)(a1 + 153) = v69;
  }
  else
  {
    v71 = v68 & 1;
    v72 = *(_QWORD *)(a2 + 144);
    v73 = *(_QWORD *)(a2 + 152);
    v74 = *(_QWORD *)(a2 + 160);
    sub_1B0F5E604(v72, v73, v74, v68 & 1);
    v75 = *(_QWORD *)(a1 + 144);
    v76 = *(_QWORD *)(a1 + 152);
    v77 = *(_QWORD *)(a1 + 160);
    v78 = *(_BYTE *)(a1 + 168);
    *(_QWORD *)(a1 + 144) = v72;
    *(_QWORD *)(a1 + 152) = v73;
    *(_QWORD *)(a1 + 160) = v74;
    *(_BYTE *)(a1 + 168) = v71;
    sub_1B0F5E6A0(v75, v76, v77, v78);
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0F7F584(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy184_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for RadialGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 72);
  if (v10 > 0xFD)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 72);
  if (v11 > 0xFD)
  {
    sub_1B0F7A924(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v11;
  sub_1B0F6C7D4(v13, v14, v15, v10);
LABEL_11:
  v16 = *(unsigned __int8 *)(a1 + 104);
  if (v16 > 0xFD)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_16;
  }
  v17 = *(unsigned __int8 *)(a2 + 104);
  if (v17 > 0xFD)
  {
    sub_1B0F7A924(a1 + 80);
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v18;
  *(_BYTE *)(a1 + 104) = v17;
  sub_1B0F6C7D4(v19, v20, v21, v16);
LABEL_16:
  v22 = *(unsigned __int8 *)(a1 + 136);
  if (v22 == 255)
  {
LABEL_19:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_21;
  }
  v23 = *(unsigned __int8 *)(a2 + 136);
  if (v23 == 255)
  {
    sub_1B0F7F584(a1 + 112);
    goto LABEL_19;
  }
  v24 = v22 & 1;
  v25 = *(_QWORD *)(a2 + 128);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = v25;
  *(_BYTE *)(a1 + 136) = v23 & 1;
  sub_1B0F5E6A0(v26, v27, v28, v24);
LABEL_21:
  v29 = *(unsigned __int8 *)(a1 + 168);
  if (v29 != 255)
  {
    v30 = *(unsigned __int8 *)(a2 + 168);
    if (v30 != 255)
    {
      v31 = v29 & 1;
      v32 = *(_QWORD *)(a2 + 160);
      v33 = *(_QWORD *)(a1 + 144);
      v34 = *(_QWORD *)(a1 + 152);
      v35 = *(_QWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = v32;
      *(_BYTE *)(a1 + 168) = v30 & 1;
      sub_1B0F5E6A0(v33, v34, v35, v31);
      goto LABEL_26;
    }
    sub_1B0F7F584(a1 + 144);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
LABEL_26:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RadialGradientShapeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 176);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadialGradientShapeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 176) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadialGradientShapeStyle()
{
  return &type metadata for RadialGradientShapeStyle;
}

uint64_t destroy for AngularGradientShapeStyle(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
  v4 = *(unsigned __int8 *)(a1 + 104);
  if (v4 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  v5 = *(unsigned __int8 *)(a1 + 136);
  if (v5 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v5 & 1);
  v6 = *(unsigned __int8 *)(a1 + 168);
  if (v6 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), v6 & 1);
  v7 = *(unsigned __int8 *)(a1 + 200);
  if (v7 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), v7 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AngularGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v9 = *(unsigned __int8 *)(a2 + 72);
  if (v9 <= 0xFD)
  {
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v10, v11, v12, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  }
  v13 = *(unsigned __int8 *)(a2 + 104);
  if (v13 <= 0xFD)
  {
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v14, v15, v16, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    *(_BYTE *)(a1 + 104) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  v17 = *(unsigned __int8 *)(a2 + 136);
  if (v17 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  }
  else
  {
    v18 = v17 & 1;
    v19 = *(_QWORD *)(a2 + 112);
    v20 = *(_QWORD *)(a2 + 120);
    v21 = *(_QWORD *)(a2 + 128);
    sub_1B0F5E604(v19, v20, v21, v17 & 1);
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_BYTE *)(a1 + 136) = v18;
  }
  v22 = *(unsigned __int8 *)(a2 + 168);
  if (v22 == 255)
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
  }
  else
  {
    v23 = v22 & 1;
    v24 = *(_QWORD *)(a2 + 144);
    v25 = *(_QWORD *)(a2 + 152);
    v26 = *(_QWORD *)(a2 + 160);
    sub_1B0F5E604(v24, v25, v26, v22 & 1);
    *(_QWORD *)(a1 + 144) = v24;
    *(_QWORD *)(a1 + 152) = v25;
    *(_QWORD *)(a1 + 160) = v26;
    *(_BYTE *)(a1 + 168) = v23;
  }
  v27 = *(unsigned __int8 *)(a2 + 200);
  if (v27 == 255)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  }
  else
  {
    v28 = v27 & 1;
    v29 = *(_QWORD *)(a2 + 176);
    v30 = *(_QWORD *)(a2 + 184);
    v31 = *(_QWORD *)(a2 + 192);
    sub_1B0F5E604(v29, v30, v31, v27 & 1);
    *(_QWORD *)(a1 + 176) = v29;
    *(_QWORD *)(a1 + 184) = v30;
    *(_QWORD *)(a1 + 192) = v31;
    *(_BYTE *)(a1 + 200) = v28;
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AngularGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _OWORD *v19;
  _OWORD *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  _OWORD *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 *v49;
  __int128 *v50;
  int v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  int v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F56B9C(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F56ADC(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F5EA14(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  v19 = (_OWORD *)(a1 + 48);
  v20 = (_OWORD *)(a2 + 48);
  v21 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) <= 0xFDu)
  {
    if (v21 <= 0xFD)
    {
      v27 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      v29 = *(_QWORD *)(a2 + 64);
      sub_1B0F6C708(v27, v28, v29, *(_BYTE *)(a2 + 72));
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      *(_QWORD *)(a1 + 64) = v29;
      v33 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v21;
      sub_1B0F6C7D4(v30, v31, v32, v33);
    }
    else
    {
      sub_1B0F7A924(a1 + 48);
      v23 = *(_OWORD *)(a2 + 57);
      *v19 = *v20;
      *(_OWORD *)(a1 + 57) = v23;
    }
  }
  else if (v21 <= 0xFD)
  {
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v24, v25, v26, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = v26;
    *(_BYTE *)(a1 + 72) = v21;
  }
  else
  {
    v22 = *v20;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *v19 = v22;
  }
  v34 = (_OWORD *)(a1 + 80);
  v35 = (_OWORD *)(a2 + 80);
  v36 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 104) <= 0xFDu)
  {
    if (v36 <= 0xFD)
    {
      v42 = *(_QWORD *)(a2 + 80);
      v43 = *(_QWORD *)(a2 + 88);
      v44 = *(_QWORD *)(a2 + 96);
      sub_1B0F6C708(v42, v43, v44, *(_BYTE *)(a2 + 104));
      v45 = *(_QWORD *)(a1 + 80);
      v46 = *(_QWORD *)(a1 + 88);
      v47 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 80) = v42;
      *(_QWORD *)(a1 + 88) = v43;
      *(_QWORD *)(a1 + 96) = v44;
      v48 = *(_BYTE *)(a1 + 104);
      *(_BYTE *)(a1 + 104) = v36;
      sub_1B0F6C7D4(v45, v46, v47, v48);
    }
    else
    {
      sub_1B0F7A924(a1 + 80);
      v38 = *(_OWORD *)(a2 + 89);
      *v34 = *v35;
      *(_OWORD *)(a1 + 89) = v38;
    }
  }
  else if (v36 <= 0xFD)
  {
    v39 = *(_QWORD *)(a2 + 80);
    v40 = *(_QWORD *)(a2 + 88);
    v41 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v39, v40, v41, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 88) = v40;
    *(_QWORD *)(a1 + 96) = v41;
    *(_BYTE *)(a1 + 104) = v36;
  }
  else
  {
    v37 = *v35;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    *v34 = v37;
  }
  v49 = (__int128 *)(a1 + 112);
  v50 = (__int128 *)(a2 + 112);
  v51 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v51 == 255)
    {
      v53 = *v50;
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *v49 = v53;
    }
    else
    {
      v62 = v51 & 1;
      v63 = *(_QWORD *)(a2 + 112);
      v64 = *(_QWORD *)(a2 + 120);
      v65 = *(_QWORD *)(a2 + 128);
      sub_1B0F5E604(v63, v64, v65, v51 & 1);
      *(_QWORD *)(a1 + 112) = v63;
      *(_QWORD *)(a1 + 120) = v64;
      *(_QWORD *)(a1 + 128) = v65;
      *(_BYTE *)(a1 + 136) = v62;
    }
  }
  else if (v51 == 255)
  {
    sub_1B0F7F584(a1 + 112);
    v52 = *(_OWORD *)(a2 + 121);
    *v49 = *v50;
    *(_OWORD *)(a1 + 121) = v52;
  }
  else
  {
    v54 = v51 & 1;
    v55 = *(_QWORD *)(a2 + 112);
    v56 = *(_QWORD *)(a2 + 120);
    v57 = *(_QWORD *)(a2 + 128);
    sub_1B0F5E604(v55, v56, v57, v51 & 1);
    v58 = *(_QWORD *)(a1 + 112);
    v59 = *(_QWORD *)(a1 + 120);
    v60 = *(_QWORD *)(a1 + 128);
    v61 = *(_BYTE *)(a1 + 136);
    *(_QWORD *)(a1 + 112) = v55;
    *(_QWORD *)(a1 + 120) = v56;
    *(_QWORD *)(a1 + 128) = v57;
    *(_BYTE *)(a1 + 136) = v54;
    sub_1B0F5E6A0(v58, v59, v60, v61);
  }
  v66 = (__int128 *)(a1 + 144);
  v67 = (__int128 *)(a2 + 144);
  v68 = *(unsigned __int8 *)(a2 + 168);
  if (*(unsigned __int8 *)(a1 + 168) == 255)
  {
    if (v68 == 255)
    {
      v70 = *v67;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
      *v66 = v70;
    }
    else
    {
      v79 = v68 & 1;
      v80 = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_QWORD *)(a2 + 160);
      sub_1B0F5E604(v80, v81, v82, v68 & 1);
      *(_QWORD *)(a1 + 144) = v80;
      *(_QWORD *)(a1 + 152) = v81;
      *(_QWORD *)(a1 + 160) = v82;
      *(_BYTE *)(a1 + 168) = v79;
    }
  }
  else if (v68 == 255)
  {
    sub_1B0F7F584(a1 + 144);
    v69 = *(_OWORD *)(a2 + 153);
    *v66 = *v67;
    *(_OWORD *)(a1 + 153) = v69;
  }
  else
  {
    v71 = v68 & 1;
    v72 = *(_QWORD *)(a2 + 144);
    v73 = *(_QWORD *)(a2 + 152);
    v74 = *(_QWORD *)(a2 + 160);
    sub_1B0F5E604(v72, v73, v74, v68 & 1);
    v75 = *(_QWORD *)(a1 + 144);
    v76 = *(_QWORD *)(a1 + 152);
    v77 = *(_QWORD *)(a1 + 160);
    v78 = *(_BYTE *)(a1 + 168);
    *(_QWORD *)(a1 + 144) = v72;
    *(_QWORD *)(a1 + 152) = v73;
    *(_QWORD *)(a1 + 160) = v74;
    *(_BYTE *)(a1 + 168) = v71;
    sub_1B0F5E6A0(v75, v76, v77, v78);
  }
  v83 = (__int128 *)(a1 + 176);
  v84 = (__int128 *)(a2 + 176);
  v85 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
    if (v85 == 255)
    {
      v87 = *v84;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *v83 = v87;
    }
    else
    {
      v96 = v85 & 1;
      v97 = *(_QWORD *)(a2 + 176);
      v98 = *(_QWORD *)(a2 + 184);
      v99 = *(_QWORD *)(a2 + 192);
      sub_1B0F5E604(v97, v98, v99, v85 & 1);
      *(_QWORD *)(a1 + 176) = v97;
      *(_QWORD *)(a1 + 184) = v98;
      *(_QWORD *)(a1 + 192) = v99;
      *(_BYTE *)(a1 + 200) = v96;
    }
  }
  else if (v85 == 255)
  {
    sub_1B0F7F584(a1 + 176);
    v86 = *(_OWORD *)(a2 + 185);
    *v83 = *v84;
    *(_OWORD *)(a1 + 185) = v86;
  }
  else
  {
    v88 = v85 & 1;
    v89 = *(_QWORD *)(a2 + 176);
    v90 = *(_QWORD *)(a2 + 184);
    v91 = *(_QWORD *)(a2 + 192);
    sub_1B0F5E604(v89, v90, v91, v85 & 1);
    v92 = *(_QWORD *)(a1 + 176);
    v93 = *(_QWORD *)(a1 + 184);
    v94 = *(_QWORD *)(a1 + 192);
    v95 = *(_BYTE *)(a1 + 200);
    *(_QWORD *)(a1 + 176) = v89;
    *(_QWORD *)(a1 + 184) = v90;
    *(_QWORD *)(a1 + 192) = v91;
    *(_BYTE *)(a1 + 200) = v88;
    sub_1B0F5E6A0(v92, v93, v94, v95);
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AngularGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 72);
  if (v10 > 0xFD)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 72);
  if (v11 > 0xFD)
  {
    sub_1B0F7A924(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v11;
  sub_1B0F6C7D4(v13, v14, v15, v10);
LABEL_11:
  v16 = *(unsigned __int8 *)(a1 + 104);
  if (v16 > 0xFD)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_16;
  }
  v17 = *(unsigned __int8 *)(a2 + 104);
  if (v17 > 0xFD)
  {
    sub_1B0F7A924(a1 + 80);
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v18;
  *(_BYTE *)(a1 + 104) = v17;
  sub_1B0F6C7D4(v19, v20, v21, v16);
LABEL_16:
  v22 = *(unsigned __int8 *)(a1 + 136);
  if (v22 == 255)
  {
LABEL_19:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_21;
  }
  v23 = *(unsigned __int8 *)(a2 + 136);
  if (v23 == 255)
  {
    sub_1B0F7F584(a1 + 112);
    goto LABEL_19;
  }
  v24 = v22 & 1;
  v25 = *(_QWORD *)(a2 + 128);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = v25;
  *(_BYTE *)(a1 + 136) = v23 & 1;
  sub_1B0F5E6A0(v26, v27, v28, v24);
LABEL_21:
  v29 = *(unsigned __int8 *)(a1 + 168);
  if (v29 == 255)
  {
LABEL_24:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    goto LABEL_26;
  }
  v30 = *(unsigned __int8 *)(a2 + 168);
  if (v30 == 255)
  {
    sub_1B0F7F584(a1 + 144);
    goto LABEL_24;
  }
  v31 = v29 & 1;
  v32 = *(_QWORD *)(a2 + 160);
  v33 = *(_QWORD *)(a1 + 144);
  v34 = *(_QWORD *)(a1 + 152);
  v35 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v32;
  *(_BYTE *)(a1 + 168) = v30 & 1;
  sub_1B0F5E6A0(v33, v34, v35, v31);
LABEL_26:
  v36 = *(unsigned __int8 *)(a1 + 200);
  if (v36 != 255)
  {
    v37 = *(unsigned __int8 *)(a2 + 200);
    if (v37 != 255)
    {
      v38 = v36 & 1;
      v39 = *(_QWORD *)(a2 + 192);
      v40 = *(_QWORD *)(a1 + 176);
      v41 = *(_QWORD *)(a1 + 184);
      v42 = *(_QWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 192) = v39;
      *(_BYTE *)(a1 + 200) = v37 & 1;
      sub_1B0F5E6A0(v40, v41, v42, v38);
      goto LABEL_31;
    }
    sub_1B0F7F584(a1 + 176);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
LABEL_31:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AngularGradientShapeStyle()
{
  return &type metadata for AngularGradientShapeStyle;
}

uint64_t destroy for LinearGradientShapeStyle(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
  v4 = *(unsigned __int8 *)(a1 + 104);
  if (v4 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  v5 = *(unsigned __int8 *)(a1 + 136);
  if (v5 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v5);
  v6 = *(unsigned __int8 *)(a1 + 168);
  if (v6 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), v6);
  v7 = *(unsigned __int8 *)(a1 + 200);
  if (v7 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), v7);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinearGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v9 = *(unsigned __int8 *)(a2 + 72);
  if (v9 <= 0xFD)
  {
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v10, v11, v12, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  }
  v13 = *(unsigned __int8 *)(a2 + 104);
  if (v13 <= 0xFD)
  {
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v14, v15, v16, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    *(_BYTE *)(a1 + 104) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  v17 = *(unsigned __int8 *)(a2 + 136);
  if (v17 <= 0xFD)
  {
    v18 = *(_QWORD *)(a2 + 112);
    v19 = *(_QWORD *)(a2 + 120);
    v20 = *(_QWORD *)(a2 + 128);
    sub_1B0F56B9C(v18, v19, v20, *(_BYTE *)(a2 + 136));
    *(_QWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v20;
    *(_BYTE *)(a1 + 136) = v17;
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  }
  v21 = *(unsigned __int8 *)(a2 + 168);
  if (v21 <= 0xFD)
  {
    v22 = *(_QWORD *)(a2 + 144);
    v23 = *(_QWORD *)(a2 + 152);
    v24 = *(_QWORD *)(a2 + 160);
    sub_1B0F6C708(v22, v23, v24, *(_BYTE *)(a2 + 168));
    *(_QWORD *)(a1 + 144) = v22;
    *(_QWORD *)(a1 + 152) = v23;
    *(_QWORD *)(a1 + 160) = v24;
    *(_BYTE *)(a1 + 168) = v21;
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
  }
  v25 = *(unsigned __int8 *)(a2 + 200);
  if (v25 <= 0xFD)
  {
    v26 = *(_QWORD *)(a2 + 176);
    v27 = *(_QWORD *)(a2 + 184);
    v28 = *(_QWORD *)(a2 + 192);
    sub_1B0F6C708(v26, v27, v28, *(_BYTE *)(a2 + 200));
    *(_QWORD *)(a1 + 176) = v26;
    *(_QWORD *)(a1 + 184) = v27;
    *(_QWORD *)(a1 + 192) = v28;
    *(_BYTE *)(a1 + 200) = v25;
  }
  else
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinearGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _OWORD *v19;
  _OWORD *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  _OWORD *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _OWORD *v49;
  _OWORD *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  _OWORD *v64;
  _OWORD *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _OWORD *v79;
  _OWORD *v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F56B9C(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F56ADC(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F5EA14(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  v19 = (_OWORD *)(a1 + 48);
  v20 = (_OWORD *)(a2 + 48);
  v21 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) <= 0xFDu)
  {
    if (v21 <= 0xFD)
    {
      v27 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      v29 = *(_QWORD *)(a2 + 64);
      sub_1B0F6C708(v27, v28, v29, *(_BYTE *)(a2 + 72));
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      *(_QWORD *)(a1 + 64) = v29;
      v33 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v21;
      sub_1B0F6C7D4(v30, v31, v32, v33);
    }
    else
    {
      sub_1B0F7A924(a1 + 48);
      v23 = *(_OWORD *)(a2 + 57);
      *v19 = *v20;
      *(_OWORD *)(a1 + 57) = v23;
    }
  }
  else if (v21 <= 0xFD)
  {
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    sub_1B0F6C708(v24, v25, v26, *(_BYTE *)(a2 + 72));
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = v26;
    *(_BYTE *)(a1 + 72) = v21;
  }
  else
  {
    v22 = *v20;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *v19 = v22;
  }
  v34 = (_OWORD *)(a1 + 80);
  v35 = (_OWORD *)(a2 + 80);
  v36 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 104) <= 0xFDu)
  {
    if (v36 <= 0xFD)
    {
      v42 = *(_QWORD *)(a2 + 80);
      v43 = *(_QWORD *)(a2 + 88);
      v44 = *(_QWORD *)(a2 + 96);
      sub_1B0F6C708(v42, v43, v44, *(_BYTE *)(a2 + 104));
      v45 = *(_QWORD *)(a1 + 80);
      v46 = *(_QWORD *)(a1 + 88);
      v47 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 80) = v42;
      *(_QWORD *)(a1 + 88) = v43;
      *(_QWORD *)(a1 + 96) = v44;
      v48 = *(_BYTE *)(a1 + 104);
      *(_BYTE *)(a1 + 104) = v36;
      sub_1B0F6C7D4(v45, v46, v47, v48);
    }
    else
    {
      sub_1B0F7A924(a1 + 80);
      v38 = *(_OWORD *)(a2 + 89);
      *v34 = *v35;
      *(_OWORD *)(a1 + 89) = v38;
    }
  }
  else if (v36 <= 0xFD)
  {
    v39 = *(_QWORD *)(a2 + 80);
    v40 = *(_QWORD *)(a2 + 88);
    v41 = *(_QWORD *)(a2 + 96);
    sub_1B0F6C708(v39, v40, v41, *(_BYTE *)(a2 + 104));
    *(_QWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 88) = v40;
    *(_QWORD *)(a1 + 96) = v41;
    *(_BYTE *)(a1 + 104) = v36;
  }
  else
  {
    v37 = *v35;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    *v34 = v37;
  }
  v49 = (_OWORD *)(a1 + 112);
  v50 = (_OWORD *)(a2 + 112);
  v51 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) <= 0xFDu)
  {
    if (v51 <= 0xFD)
    {
      v57 = *(_QWORD *)(a2 + 112);
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_QWORD *)(a2 + 128);
      sub_1B0F56B9C(v57, v58, v59, *(_BYTE *)(a2 + 136));
      v60 = *(_QWORD *)(a1 + 112);
      v61 = *(_QWORD *)(a1 + 120);
      v62 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 112) = v57;
      *(_QWORD *)(a1 + 120) = v58;
      *(_QWORD *)(a1 + 128) = v59;
      v63 = *(_BYTE *)(a1 + 136);
      *(_BYTE *)(a1 + 136) = v51;
      sub_1B0F56ADC(v60, v61, v62, v63);
    }
    else
    {
      sub_1B0F5EA14(a1 + 112);
      v53 = *(_OWORD *)(a2 + 121);
      *v49 = *v50;
      *(_OWORD *)(a1 + 121) = v53;
    }
  }
  else if (v51 <= 0xFD)
  {
    v54 = *(_QWORD *)(a2 + 112);
    v55 = *(_QWORD *)(a2 + 120);
    v56 = *(_QWORD *)(a2 + 128);
    sub_1B0F56B9C(v54, v55, v56, *(_BYTE *)(a2 + 136));
    *(_QWORD *)(a1 + 112) = v54;
    *(_QWORD *)(a1 + 120) = v55;
    *(_QWORD *)(a1 + 128) = v56;
    *(_BYTE *)(a1 + 136) = v51;
  }
  else
  {
    v52 = *v50;
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    *v49 = v52;
  }
  v64 = (_OWORD *)(a1 + 144);
  v65 = (_OWORD *)(a2 + 144);
  v66 = *(unsigned __int8 *)(a2 + 168);
  if (*(unsigned __int8 *)(a1 + 168) <= 0xFDu)
  {
    if (v66 <= 0xFD)
    {
      v72 = *(_QWORD *)(a2 + 144);
      v73 = *(_QWORD *)(a2 + 152);
      v74 = *(_QWORD *)(a2 + 160);
      sub_1B0F6C708(v72, v73, v74, *(_BYTE *)(a2 + 168));
      v75 = *(_QWORD *)(a1 + 144);
      v76 = *(_QWORD *)(a1 + 152);
      v77 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 144) = v72;
      *(_QWORD *)(a1 + 152) = v73;
      *(_QWORD *)(a1 + 160) = v74;
      v78 = *(_BYTE *)(a1 + 168);
      *(_BYTE *)(a1 + 168) = v66;
      sub_1B0F6C7D4(v75, v76, v77, v78);
    }
    else
    {
      sub_1B0F7A924(a1 + 144);
      v68 = *(_OWORD *)(a2 + 153);
      *v64 = *v65;
      *(_OWORD *)(a1 + 153) = v68;
    }
  }
  else if (v66 <= 0xFD)
  {
    v69 = *(_QWORD *)(a2 + 144);
    v70 = *(_QWORD *)(a2 + 152);
    v71 = *(_QWORD *)(a2 + 160);
    sub_1B0F6C708(v69, v70, v71, *(_BYTE *)(a2 + 168));
    *(_QWORD *)(a1 + 144) = v69;
    *(_QWORD *)(a1 + 152) = v70;
    *(_QWORD *)(a1 + 160) = v71;
    *(_BYTE *)(a1 + 168) = v66;
  }
  else
  {
    v67 = *v65;
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    *v64 = v67;
  }
  v79 = (_OWORD *)(a1 + 176);
  v80 = (_OWORD *)(a2 + 176);
  v81 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned __int8 *)(a1 + 200) <= 0xFDu)
  {
    if (v81 <= 0xFD)
    {
      v87 = *(_QWORD *)(a2 + 176);
      v88 = *(_QWORD *)(a2 + 184);
      v89 = *(_QWORD *)(a2 + 192);
      sub_1B0F6C708(v87, v88, v89, *(_BYTE *)(a2 + 200));
      v90 = *(_QWORD *)(a1 + 176);
      v91 = *(_QWORD *)(a1 + 184);
      v92 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 176) = v87;
      *(_QWORD *)(a1 + 184) = v88;
      *(_QWORD *)(a1 + 192) = v89;
      v93 = *(_BYTE *)(a1 + 200);
      *(_BYTE *)(a1 + 200) = v81;
      sub_1B0F6C7D4(v90, v91, v92, v93);
    }
    else
    {
      sub_1B0F7A924(a1 + 176);
      v83 = *(_OWORD *)(a2 + 185);
      *v79 = *v80;
      *(_OWORD *)(a1 + 185) = v83;
    }
  }
  else if (v81 <= 0xFD)
  {
    v84 = *(_QWORD *)(a2 + 176);
    v85 = *(_QWORD *)(a2 + 184);
    v86 = *(_QWORD *)(a2 + 192);
    sub_1B0F6C708(v84, v85, v86, *(_BYTE *)(a2 + 200));
    *(_QWORD *)(a1 + 176) = v84;
    *(_QWORD *)(a1 + 184) = v85;
    *(_QWORD *)(a1 + 192) = v86;
    *(_BYTE *)(a1 + 200) = v81;
  }
  else
  {
    v82 = *v80;
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
    *v79 = v82;
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LinearGradientShapeStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 72);
  if (v10 > 0xFD)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 72);
  if (v11 > 0xFD)
  {
    sub_1B0F7A924(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v11;
  sub_1B0F6C7D4(v13, v14, v15, v10);
LABEL_11:
  v16 = *(unsigned __int8 *)(a1 + 104);
  if (v16 > 0xFD)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_16;
  }
  v17 = *(unsigned __int8 *)(a2 + 104);
  if (v17 > 0xFD)
  {
    sub_1B0F7A924(a1 + 80);
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v18;
  *(_BYTE *)(a1 + 104) = v17;
  sub_1B0F6C7D4(v19, v20, v21, v16);
LABEL_16:
  v22 = *(unsigned __int8 *)(a1 + 136);
  if (v22 > 0xFD)
  {
LABEL_19:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_21;
  }
  v23 = *(unsigned __int8 *)(a2 + 136);
  if (v23 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 112);
    goto LABEL_19;
  }
  v24 = *(_QWORD *)(a2 + 128);
  v25 = *(_QWORD *)(a1 + 112);
  v26 = *(_QWORD *)(a1 + 120);
  v27 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = v24;
  *(_BYTE *)(a1 + 136) = v23;
  sub_1B0F56ADC(v25, v26, v27, v22);
LABEL_21:
  v28 = *(unsigned __int8 *)(a1 + 168);
  if (v28 > 0xFD)
  {
LABEL_24:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    goto LABEL_26;
  }
  v29 = *(unsigned __int8 *)(a2 + 168);
  if (v29 > 0xFD)
  {
    sub_1B0F7A924(a1 + 144);
    goto LABEL_24;
  }
  v30 = *(_QWORD *)(a2 + 160);
  v31 = *(_QWORD *)(a1 + 144);
  v32 = *(_QWORD *)(a1 + 152);
  v33 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v30;
  *(_BYTE *)(a1 + 168) = v29;
  sub_1B0F6C7D4(v31, v32, v33, v28);
LABEL_26:
  v34 = *(unsigned __int8 *)(a1 + 200);
  if (v34 <= 0xFD)
  {
    v35 = *(unsigned __int8 *)(a2 + 200);
    if (v35 <= 0xFD)
    {
      v36 = *(_QWORD *)(a2 + 192);
      v37 = *(_QWORD *)(a1 + 176);
      v38 = *(_QWORD *)(a1 + 184);
      v39 = *(_QWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 192) = v36;
      *(_BYTE *)(a1 + 200) = v35;
      sub_1B0F6C7D4(v37, v38, v39, v34);
      goto LABEL_31;
    }
    sub_1B0F7A924(a1 + 176);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
LABEL_31:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6LiftUI25AngularGradientShapeStyleVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 208);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B0F80EA0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 208) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearGradientShapeStyle()
{
  return &type metadata for LinearGradientShapeStyle;
}

unint64_t sub_1B0F80F24(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F80F48();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F80F48()
{
  unint64_t result;

  result = qword_1EEEDECF8;
  if (!qword_1EEEDECF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039C4C, &type metadata for RadialGradientShapeStyle);
    atomic_store(result, (unint64_t *)&qword_1EEEDECF8);
  }
  return result;
}

unint64_t sub_1B0F80F8C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F80FB0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F80FB0()
{
  unint64_t result;

  result = qword_1EEEDED00;
  if (!qword_1EEEDED00)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039C24, &type metadata for AngularGradientShapeStyle);
    atomic_store(result, (unint64_t *)&qword_1EEEDED00);
  }
  return result;
}

unint64_t sub_1B0F80FF4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F81018();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F81018()
{
  unint64_t result;

  result = qword_1EEEDED08;
  if (!qword_1EEEDED08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039BFC, &type metadata for LinearGradientShapeStyle);
    atomic_store(result, (unint64_t *)&qword_1EEEDED08);
  }
  return result;
}

uint64_t sub_1B0F8105C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1B0F81080()
{
  unint64_t result;

  result = qword_1EEEDED10;
  if (!qword_1EEEDED10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A154, &type metadata for GradientResolvableError);
    atomic_store(result, (unint64_t *)&qword_1EEEDED10);
  }
  return result;
}

unint64_t sub_1B0F810C4()
{
  unint64_t result;

  result = qword_1EEEDED20;
  if (!qword_1EEEDED20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A104, &type metadata for RadialGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED20);
  }
  return result;
}

unint64_t sub_1B0F81108()
{
  unint64_t result;

  result = qword_1EEEDED28;
  if (!qword_1EEEDED28)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039954, &type metadata for UnitPointResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDED28);
  }
  return result;
}

unint64_t sub_1B0F8114C()
{
  unint64_t result;

  result = qword_1EEEDED30;
  if (!qword_1EEEDED30)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A0DC, &type metadata for GradientResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDED30);
  }
  return result;
}

uint64_t sub_1B0F81190(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 104);
  v12 = *(_BYTE *)(a1 + 136);
  v16 = *(_BYTE *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F56C04(v2, v3, v4, v7);
  sub_1B0F6C6F4(v11, v5, v6, v8);
  sub_1B0F6C6F4(v15, v14, v13, v9);
  sub_1B0F5FD10(v19, v18, v17, v12);
  sub_1B0F5FD10(v22, v21, v20, v16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F812BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 104);
  v12 = *(_BYTE *)(a1 + 136);
  v16 = *(_BYTE *)(a1 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B0F56B88(v2, v3, v4, v7);
  sub_1B0F6C7C0(v11, v5, v6, v8);
  sub_1B0F6C7C0(v15, v14, v13, v9);
  sub_1B0F5FD28(v19, v18, v17, v12);
  sub_1B0F5FD28(v22, v21, v20, v16);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B0F813E8()
{
  unint64_t result;

  result = qword_1EEEDED40;
  if (!qword_1EEEDED40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A08C, &type metadata for AngularGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED40);
  }
  return result;
}

unint64_t sub_1B0F8142C()
{
  unint64_t result;

  result = qword_1EEEDED50;
  if (!qword_1EEEDED50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A03C, &type metadata for LinearGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED50);
  }
  return result;
}

uint64_t sub_1B0F81470(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 160);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 176);
  v26 = *(_QWORD *)(a1 + 192);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 104);
  v11 = *(unsigned __int8 *)(a1 + 136);
  v15 = *(unsigned __int8 *)(a1 + 168);
  v22 = *(unsigned __int8 *)(a1 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0F56C04(v4, v5, v6, v8);
  sub_1B0F6C6F4(v14, v13, v7, v9);
  sub_1B0F6C6F4(v18, v17, v16, v10);
  a2(v21, v20, v19, v11);
  a3(v25, v24, v23, v15);
  a3(v28, v27, v26, v22);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0F815CC(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 160);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 176);
  v26 = *(_QWORD *)(a1 + 192);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 104);
  v11 = *(unsigned __int8 *)(a1 + 136);
  v15 = *(unsigned __int8 *)(a1 + 168);
  v22 = *(unsigned __int8 *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B0F56B88(v4, v5, v6, v8);
  sub_1B0F6C7C0(v14, v13, v7, v9);
  sub_1B0F6C7C0(v18, v17, v16, v10);
  a2(v21, v20, v19, v11);
  a3(v25, v24, v23, v15);
  a3(v28, v27, v26, v22);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6LiftUI19UnitPointResolvableV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0F81774 + 4 * byte_1B103990F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0F817A8 + 4 * byte_1B103990A[v4]))();
}

uint64_t sub_1B0F817A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F817B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F817B8);
  return result;
}

uint64_t sub_1B0F817C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F817CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0F817D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F817D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinearGradientShapeStyle.CodingKeys()
{
  return &type metadata for LinearGradientShapeStyle.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AngularGradientShapeStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0F81840 + 4 * byte_1B1039919[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0F81874 + 4 * byte_1B1039914[v4]))();
}

uint64_t sub_1B0F81874(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8187C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F81884);
  return result;
}

uint64_t sub_1B0F81890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F81898);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0F8189C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F818A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AngularGradientShapeStyle.CodingKeys()
{
  return &type metadata for AngularGradientShapeStyle.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RadialGradientShapeStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8190C + 4 * byte_1B1039923[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0F81940 + 4 * byte_1B103991E[v4]))();
}

uint64_t sub_1B0F81940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F81948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F81950);
  return result;
}

uint64_t sub_1B0F8195C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F81964);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0F81968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F81970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RadialGradientShapeStyle.CodingKeys()
{
  return &type metadata for RadialGradientShapeStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for GradientResolvableError()
{
  return &type metadata for GradientResolvableError;
}

uint64_t destroy for GradientResolvable()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6LiftUI18GradientResolvableVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GradientResolvable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for GradientResolvable(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GradientResolvable(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientResolvable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientResolvable()
{
  return &type metadata for GradientResolvable;
}

unint64_t sub_1B0F81B68()
{
  unint64_t result;

  result = qword_1EEEDED58;
  if (!qword_1EEEDED58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039D44, &type metadata for GradientResolvableError);
    atomic_store(result, (unint64_t *)&qword_1EEEDED58);
  }
  return result;
}

unint64_t sub_1B0F81BB0()
{
  unint64_t result;

  result = qword_1EEEDED60;
  if (!qword_1EEEDED60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039E34, &type metadata for RadialGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED60);
  }
  return result;
}

unint64_t sub_1B0F81BF8()
{
  unint64_t result;

  result = qword_1EEEDED68;
  if (!qword_1EEEDED68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039F24, &type metadata for AngularGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED68);
  }
  return result;
}

unint64_t sub_1B0F81C40()
{
  unint64_t result;

  result = qword_1EEEDED70;
  if (!qword_1EEEDED70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A014, &type metadata for LinearGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED70);
  }
  return result;
}

unint64_t sub_1B0F81C88()
{
  unint64_t result;

  result = qword_1EEEDED78;
  if (!qword_1EEEDED78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039F4C, &type metadata for LinearGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED78);
  }
  return result;
}

unint64_t sub_1B0F81CD0()
{
  unint64_t result;

  result = qword_1EEEDED80;
  if (!qword_1EEEDED80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039F74, &type metadata for LinearGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED80);
  }
  return result;
}

unint64_t sub_1B0F81D18()
{
  unint64_t result;

  result = qword_1EEEDED88;
  if (!qword_1EEEDED88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039E5C, &type metadata for AngularGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED88);
  }
  return result;
}

unint64_t sub_1B0F81D60()
{
  unint64_t result;

  result = qword_1EEEDED90;
  if (!qword_1EEEDED90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039E84, &type metadata for AngularGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED90);
  }
  return result;
}

unint64_t sub_1B0F81DA8()
{
  unint64_t result;

  result = qword_1EEEDED98;
  if (!qword_1EEEDED98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039D6C, &type metadata for RadialGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDED98);
  }
  return result;
}

unint64_t sub_1B0F81DF0()
{
  unint64_t result;

  result = qword_1EEEDEDA0;
  if (!qword_1EEEDEDA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1039D94, &type metadata for RadialGradientShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDA0);
  }
  return result;
}

uint64_t sub_1B0F81E34()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B0F81E7C()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_1B0F81EC4()
{
  unint64_t result;

  result = qword_1EEEDEDB0;
  if (!qword_1EEEDEDB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A2D0, &type metadata for GradientResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDB0);
  }
  return result;
}

unint64_t sub_1B0F81F08()
{
  unint64_t result;

  result = qword_1EEEDEDC8;
  if (!qword_1EEEDEDC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1049790, &type metadata for AnyCodableColor);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDC8);
  }
  return result;
}

uint64_t sub_1B0F81F4C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyViewModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0F81F88(uint64_t a1)
{
  destroy for AnyViewModifier();
  return a1;
}

uint64_t sub_1B0F81FBC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEAF40], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0F82020()
{
  unint64_t result;

  result = qword_1EEEDEDE0;
  if (!qword_1EEEDEDE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A2A8, &type metadata for GradientStopResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientResolvable.CodingKeys()
{
  return &type metadata for GradientResolvable.CodingKeys;
}

uint64_t destroy for GradientStopResolvable(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return sub_1B0F6C7D4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for GradientStopResolvable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  sub_1B0F6C708(v5, v6, v7, v2);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for GradientStopResolvable(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, a2);
  v4 = v2[5];
  v5 = v2[6];
  v6 = v2[7];
  LOBYTE(v2) = *((_BYTE *)v2 + 64);
  sub_1B0F6C708(v4, v5, v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  v10 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = (_BYTE)v2;
  sub_1B0F6C7D4(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GradientStopResolvable(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v5;
  v10 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v6;
  sub_1B0F6C7D4(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GradientStopResolvable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientStopResolvable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientStopResolvable()
{
  return &type metadata for GradientStopResolvable;
}

unint64_t sub_1B0F8229C()
{
  unint64_t result;

  result = qword_1EEEDEDE8;
  if (!qword_1EEEDEDE8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A280, &type metadata for GradientResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDE8);
  }
  return result;
}

unint64_t sub_1B0F822E4()
{
  unint64_t result;

  result = qword_1EEEDEDF0;
  if (!qword_1EEEDEDF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A1B8, &type metadata for GradientResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDF0);
  }
  return result;
}

unint64_t sub_1B0F8232C()
{
  unint64_t result;

  result = qword_1EEEDEDF8;
  if (!qword_1EEEDEDF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A1E0, &type metadata for GradientResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEDF8);
  }
  return result;
}

unint64_t sub_1B0F82370()
{
  unint64_t result;

  result = qword_1EEEDEE08;
  if (!qword_1EEEDEE08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A410, &type metadata for GradientStopResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE08);
  }
  return result;
}

uint64_t sub_1B0F823B4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GradientStopResolvable(a2, a1);
  return a2;
}

uint64_t sub_1B0F823E8(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_1B0F6C7D4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t _s6LiftUI23GradientResolvableErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F82468 + 4 * byte_1B103992D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F8249C + 4 * byte_1B1039928[v4]))();
}

uint64_t sub_1B0F8249C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F824A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F824ACLL);
  return result;
}

uint64_t sub_1B0F824B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F824C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F824C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F824CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GradientStopResolvable.CodingKeys()
{
  return &type metadata for GradientStopResolvable.CodingKeys;
}

unint64_t sub_1B0F824EC()
{
  unint64_t result;

  result = qword_1EEEDEE10;
  if (!qword_1EEEDEE10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A3E8, &type metadata for GradientStopResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE10);
  }
  return result;
}

unint64_t sub_1B0F82534()
{
  unint64_t result;

  result = qword_1EEEDEE18;
  if (!qword_1EEEDEE18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A320, &type metadata for GradientStopResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE18);
  }
  return result;
}

unint64_t sub_1B0F8257C()
{
  unint64_t result;

  result = qword_1EEEDEE20;
  if (!qword_1EEEDEE20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A348, &type metadata for GradientStopResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE20);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyViewView()
{
  return &type metadata for EmptyViewView;
}

ValueMetadata *type metadata accessor for FormView()
{
  return &type metadata for FormView;
}

uint64_t destroy for ForEachView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_release();
  swift_release();
  sub_1B0F571A8(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ForEachView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a2 + 56;
  v8 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, v7);
  *(_BYTE *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 152);
  LOBYTE(v7) = *(_BYTE *)(a2 + 160);
  swift_retain();
  swift_retain();
  sub_1B0F56C30(v12, v13, v14, v7);
  *(_QWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 152) = v14;
  *(_BYTE *)(a1 + 160) = v7;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForEachView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    v4 = *(_BYTE *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 96) = v4;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  v8 = *(_QWORD *)(a2 + 152);
  v9 = *(_BYTE *)(a2 + 160);
  sub_1B0F56C30(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  *(_BYTE *)(a1 + 160) = v9;
  sub_1B0F571A8(v10, v11, v12, v13);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for ForEachView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_release();
  v8 = *(_BYTE *)(a2 + 160);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_BYTE *)(a1 + 160);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  *(_BYTE *)(a1 + 160) = v8;
  sub_1B0F571A8(v9, v10, v11, v12);
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEachView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForEachView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForEachView()
{
  return &type metadata for ForEachView;
}

ValueMetadata *type metadata accessor for GroupView()
{
  return &type metadata for GroupView;
}

uint64_t destroy for ScrollingView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ScrollingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = a2 + 64;
  v8 = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, v7);
  *(_BYTE *)(a1 + 104) = v8;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollingView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 64);
    v4 = *(_BYTE *)(a2 + 104);
    v5 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 64, a2 + 64);
    *(_BYTE *)(a1 + 104) = v4;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ScrollingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  swift_release();
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollingView()
{
  return &type metadata for ScrollingView;
}

uint64_t destroy for LabelView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 176);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for LabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a2 + 56;
  v8 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, v7);
  *(_BYTE *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  v13 = *(_BYTE *)(a2 + 216);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 200) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 176, a2 + 176);
  *(_BYTE *)(a1 + 216) = v13;
  v15 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v15;
  v16 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v16;
  v17 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v17;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LabelView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    v4 = *(_BYTE *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 96) = v4;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 176);
    v6 = *(_BYTE *)(a2 + 216);
    v7 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v7;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 176, a2 + 176);
    *(_BYTE *)(a1 + 216) = v6;
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for LabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 176);
    v9 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v9;
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release();
  v10 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v10;
  swift_release();
  v11 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 280))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 280) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelView()
{
  return &type metadata for LabelView;
}

uint64_t destroy for ToggleView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B0F5E6A0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168));
  return swift_release();
}

uint64_t initializeWithCopy for ToggleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a2 + 56;
  v8 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, v7);
  *(_BYTE *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_BYTE *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F5E604(v12, v13, v14, v15);
  *(_QWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 160) = v14;
  *(_BYTE *)(a1 + 168) = v15;
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToggleView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    v4 = *(_BYTE *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 96) = v4;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 152);
  v8 = *(_QWORD *)(a2 + 160);
  v9 = *(_BYTE *)(a2 + 168);
  sub_1B0F5E604(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 160) = v8;
  *(_BYTE *)(a1 + 168) = v9;
  sub_1B0F5E6A0(v10, v11, v12, v13);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ToggleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_release();
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 160);
  v10 = *(_BYTE *)(a2 + 168);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 160);
  v14 = *(_BYTE *)(a1 + 168);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v9;
  *(_BYTE *)(a1 + 168) = v10;
  sub_1B0F5E6A0(v11, v12, v13, v14);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleView()
{
  return &type metadata for ToggleView;
}

uint64_t destroy for ColorView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ColorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ColorView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ColorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorView()
{
  return &type metadata for ColorView;
}

_QWORD *sub_1B0F83E3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B10345E0();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)((char *)a2 + v16 + 8);
    *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
    *((_QWORD *)v17 + 1) = v19;
    v20 = *(_QWORD *)((char *)a2 + v16 + 24);
    *((_QWORD *)v17 + 2) = *(_QWORD *)((char *)a2 + v16 + 16);
    *((_QWORD *)v17 + 3) = v20;
    *((_QWORD *)v17 + 4) = *(_QWORD *)((char *)a2 + v16 + 32);
    v21 = *((_BYTE *)a2 + v16 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = *((_OWORD *)v18 + 4);
    *((_OWORD *)v17 + 4) = v22;
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)(v17 + 40), (uint64_t)(v18 + 40));
    v17[80] = v21;
    v23 = *((_QWORD *)v18 + 12);
    *((_QWORD *)v17 + 11) = *((_QWORD *)v18 + 11);
    *((_QWORD *)v17 + 12) = v23;
    v24 = *((_QWORD *)v18 + 14);
    *((_QWORD *)v17 + 13) = *((_QWORD *)v18 + 13);
    *((_QWORD *)v17 + 14) = v24;
    v25 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v29 = *v27;
    v28 = v27[1];
    *v26 = v29;
    v26[1] = v28;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1B0F83FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1B10345E0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v7 + 40);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_1B0F840B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B10345E0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a2 + v14 + 8);
  *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
  *((_QWORD *)v15 + 1) = v17;
  v18 = *(_QWORD *)((char *)a2 + v14 + 24);
  *((_QWORD *)v15 + 2) = *(_QWORD *)((char *)a2 + v14 + 16);
  *((_QWORD *)v15 + 3) = v18;
  *((_QWORD *)v15 + 4) = *(_QWORD *)((char *)a2 + v14 + 32);
  v19 = *((_BYTE *)a2 + v14 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 4) = v20;
  (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)(v15 + 40), (uint64_t)(v16 + 40));
  v15[80] = v19;
  v21 = *((_QWORD *)v16 + 12);
  *((_QWORD *)v15 + 11) = *((_QWORD *)v16 + 11);
  *((_QWORD *)v15 + 12) = v21;
  v22 = *((_QWORD *)v16 + 14);
  *((_QWORD *)v15 + 13) = *((_QWORD *)v16 + 13);
  *((_QWORD *)v15 + 14) = v22;
  v23 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1B0F84240(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B10345E0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)((char *)a2 + v15);
  *((_QWORD *)v16 + 1) = *(_QWORD *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
  *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10((uint64_t)(v16 + 40));
    v18 = v17[80];
    v19 = *((_QWORD *)v17 + 8);
    *((_QWORD *)v16 + 8) = v19;
    *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)(v16 + 40), (uint64_t)(v17 + 40));
    v16[80] = v18;
  }
  *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
  swift_retain();
  swift_release();
  *((_QWORD *)v16 + 12) = *((_QWORD *)v17 + 12);
  *((_QWORD *)v16 + 13) = *((_QWORD *)v17 + 13);
  swift_retain();
  swift_release();
  *((_QWORD *)v16 + 14) = *((_QWORD *)v17 + 14);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  swift_retain();
  swift_release();
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  return a1;
}

_OWORD *sub_1B0F844A0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B10345E0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *((_QWORD *)v14 + 14) = *((_QWORD *)v15 + 14);
  v16 = *((_OWORD *)v15 + 6);
  v17 = *((_OWORD *)v15 + 4);
  *((_OWORD *)v14 + 5) = *((_OWORD *)v15 + 5);
  *((_OWORD *)v14 + 6) = v16;
  v18 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v18;
  v19 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v19;
  *((_OWORD *)v14 + 4) = v17;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1B0F845B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B10345E0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)((char *)a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v20 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  *((_QWORD *)v17 + 3) = v20;
  swift_bridgeObjectRelease();
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10((uint64_t)(v17 + 40));
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(v18 + 56);
    *(_OWORD *)(v17 + 65) = *(_OWORD *)(v18 + 65);
  }
  *((_QWORD *)v17 + 11) = *((_QWORD *)v18 + 11);
  swift_release();
  v21 = *((_QWORD *)v18 + 13);
  *((_QWORD *)v17 + 12) = *((_QWORD *)v18 + 12);
  *((_QWORD *)v17 + 13) = v21;
  swift_release();
  *((_QWORD *)v17 + 14) = *((_QWORD *)v18 + 14);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (char *)a1 + v22;
  v24 = (_QWORD *)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = *v24;
  swift_release();
  *((_QWORD *)v23 + 1) = v24[1];
  return a1;
}

uint64_t sub_1B0F84798()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F847A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1B0F84824()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0F84830(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LinkView()
{
  uint64_t result;

  result = qword_1EEEDEE28;
  if (!qword_1EEEDEE28)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B0F848E4()
{
  unint64_t v0;

  sub_1B0F84978();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1B0F84978()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEEDEE38)
  {
    sub_1B10345E0();
    v0 = sub_1B1035E64();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEEDEE38);
  }
}

uint64_t destroy for SpacerView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SpacerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F6C708(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpacerView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F6C708(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F6C7D4(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F7A924(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F6C708(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SpacerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 <= 0xFD)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 <= 0xFD)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = v7;
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F6C7D4(v8, v9, v10, v5);
      goto LABEL_6;
    }
    sub_1B0F7A924(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for SpacerView()
{
  return &type metadata for SpacerView;
}

ValueMetadata *type metadata accessor for ProgressView()
{
  return &type metadata for ProgressView;
}

uint64_t destroy for TextView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1B0F6C66C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F6C5EC(v5, v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_1B0F6C5EC(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  sub_1B0F6C66C(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  sub_1B0F6C66C(v7, v8, v9, v10);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6LiftUI10SpacerViewVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B0F84F68(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextView()
{
  return &type metadata for TextView;
}

uint64_t sub_1B0F84FC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  char v58;
  char v59;
  char *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  char v89;

  v80 = a1;
  v2 = sub_1B1034544();
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B1034550();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B1034568();
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF128);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B1034580();
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v22 = *(_QWORD *)(v1 + 16);
  v23 = *(_QWORD *)(v1 + 24);
  v24 = *(_QWORD *)(v1 + 32);
  v25 = *(unsigned __int8 *)(v1 + 40);
  v26 = *(_QWORD *)(v1 + 48);
  v78 = v23;
  v79 = v24;
  v77 = v22;
  if ((v25 & 0x20) != 0)
  {
    v71 = v5;
    v69 = v21;
    v70 = (char *)&v68 - v19;
    v72 = v20;
    v73 = v18;
    *(_QWORD *)&v86 = v22;
    *((_QWORD *)&v86 + 1) = v23;
    *(_QWORD *)&v87 = v24;
    BYTE8(v87) = v25 & 0xDF;
    if (v26)
    {
      v74 = v25;
      sub_1B0F6C5EC(v22, v23, v24, v25);
      v31 = swift_retain();
      v42 = StringResolvable.resolved(with:)(v31);
      v44 = v43;
      swift_release();
      v45 = sub_1B10345E0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v12, 1, 1, v45);
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CAF048], v71);
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v4, *MEMORY[0x1E0CAF020], v76);
      swift_bridgeObjectRetain();
      sub_1B103455C();
      sub_1B1034574();
      v47 = v72;
      v46 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v15, 0, 1, v73);
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v15, 1, v46);
      v30 = v80;
      if (v48 == 1)
      {
        sub_1B0F5A3AC((uint64_t)v15, &qword_1EEEDF128);
        *(_QWORD *)&v86 = v42;
        *((_QWORD *)&v86 + 1) = v44;
        sub_1B0F8B804();
        v81 = sub_1B10352DC();
        v82 = v50;
        v83 = v49 & 1;
        v84 = v51;
        LOBYTE(v85) = 1;
        sub_1B1034EC8();
        v53 = *((_QWORD *)&v86 + 1);
        v52 = v86;
        v55 = *((_QWORD *)&v87 + 1);
        v54 = v87;
        v56 = v88;
      }
      else
      {
        swift_bridgeObjectRelease();
        v60 = v70;
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v70, v15, v46);
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v69, v60, v46);
        v81 = sub_1B10352D0();
        v82 = v61;
        v83 = v62 & 1;
        v84 = v63;
        LOBYTE(v85) = 0;
        sub_1B1034EC8();
        v53 = *((_QWORD *)&v86 + 1);
        v52 = v86;
        v55 = *((_QWORD *)&v87 + 1);
        v54 = v87;
        v56 = v88;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v60, v46);
      }
      v81 = v52;
      v82 = v53;
      v83 = v54;
      v84 = v55;
      LOBYTE(v85) = v56;
      HIBYTE(v85) = 1;
      sub_1B0F8B848(v52, v53, v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF138);
      sub_1B0F8C114(&qword_1EEEDF140, &qword_1EEEDF138, MEMORY[0x1E0CDDD58]);
      sub_1B1034EC8();
      sub_1B0F6C66C(v77, v78, v79, v74);
      result = sub_1B0F8B880(v52, v53, v54);
      goto LABEL_8;
    }
  }
  else
  {
    *(_QWORD *)&v86 = v22;
    *((_QWORD *)&v86 + 1) = v23;
    *(_QWORD *)&v87 = v24;
    BYTE8(v87) = v25;
    if (v26)
    {
      v27 = v25;
      sub_1B0F6C5EC(v22, v23, v24, v25);
      v28 = swift_retain();
      v29 = StringResolvable.resolved(with:)(v28);
      v30 = v80;
      v32 = v29;
      v34 = v33;
      swift_release();
      *(_QWORD *)&v86 = v32;
      *((_QWORD *)&v86 + 1) = v34;
      sub_1B0F8B804();
      v35 = sub_1B10352DC();
      v37 = v36;
      v81 = v35;
      v82 = v36;
      v39 = v38 & 1;
      v83 = v38 & 1;
      v84 = v40;
      v85 = 0;
      sub_1B0F8B870(v35, v36, v38 & 1);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF138);
      sub_1B0F8C114(&qword_1EEEDF140, &qword_1EEEDF138, MEMORY[0x1E0CDDD58]);
      sub_1B1034EC8();
      sub_1B0F6C66C(v77, v78, v79, v27);
      sub_1B0F8B62C(v35, v37, v39);
      result = swift_bridgeObjectRelease();
LABEL_8:
      v57 = v87;
      v58 = v88;
      v59 = v89;
      *(_OWORD *)v30 = v86;
      *(_OWORD *)(v30 + 16) = v57;
      *(_BYTE *)(v30 + 32) = v58;
      *(_BYTE *)(v30 + 33) = v59;
      return result;
    }
  }
  v64 = v22;
  v65 = v23;
  v66 = v24;
  v67 = v25;
  sub_1B0F6C5EC(v22, v23, v24, v25);
  swift_bridgeObjectRetain();
  sub_1B0F6C5EC(v64, v65, v66, v67);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_bridgeObjectRetain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F8568C(char a1)
{
  return qword_1B103C090[a1];
}

uint64_t sub_1B0F856AC(char *a1, char *a2)
{
  return sub_1B100C138(*a1, *a2);
}

uint64_t sub_1B0F856B8()
{
  return sub_1B100FC3C();
}

uint64_t sub_1B0F856C0()
{
  return sub_1B1011CB4();
}

uint64_t sub_1B0F856C8()
{
  return sub_1B1015990();
}

uint64_t sub_1B0F856D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F85704@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F8568C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F8572C()
{
  char *v0;

  return sub_1B0F8568C(*v0);
}

uint64_t sub_1B0F85734@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F85760()
{
  sub_1B0F8B8A8();
  return sub_1B10362B4();
}

uint64_t sub_1B0F85788()
{
  sub_1B0F8B8A8();
  return sub_1B10362C0();
}

uint64_t sub_1B0F857B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;

  v33 = a2;
  v3 = sub_1B103461C();
  v4 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v36 = v4;
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF148);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v11 = sub_1B1034AD8();
  v34 = v12;
  v13 = a1[3];
  v37 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B0F8B8A8();
  swift_retain();
  v14 = v38;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v36;
    v38 = v11;
    LOBYTE(v39) = 0;
    v16 = sub_1B103608C();
    v19 = v17;
    if (v17)
    {
      v32 = v16;
    }
    else
    {
      sub_1B1034610();
      v32 = sub_1B1034604();
      v19 = v20;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v35);
    }
    v43 = 2;
    sub_1B0F56A98();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v21 = v7;
    v22 = v42;
    if (v42 < 0xFEu)
    {
      v24 = v40;
      v25 = v41;
      v23 = v39;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
      v26 = v22 | 0x20;
    }
    else
    {
      v43 = 1;
      sub_1B10360BC();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v23 = v39;
      v24 = v40;
      v25 = v41;
      v26 = v42;
    }
    swift_bridgeObjectRetain();
    sub_1B0F6C5EC(v23, v24, v25, v26);
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = v33;
    *v33 = v32;
    v28[1] = v19;
    v28[2] = v23;
    v28[3] = v24;
    v28[4] = v25;
    *((_BYTE *)v28 + 40) = v26;
    v29 = (uint64_t)v37;
    v30 = v34;
    v28[6] = v38;
    v28[7] = v30;
    v28[8] = v27;
    __swift_destroy_boxed_opaque_existential_1(v29);
    swift_bridgeObjectRelease();
    sub_1B0F6C66C(v23, v24, v25, v26);
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_1B0F85B44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F857B0(a1, a2);
}

uint64_t sub_1B0F85B58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F85B68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int16 v10;

  v3 = *(unsigned __int8 *)(v1 + 40);
  if (v3 > 0xFD)
    goto LABEL_4;
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 56);
  v9 = v4;
  v10 = v6;
  if (v7)
  {
    swift_retain();
    sub_1B0F6C6F4(v4, v6, v5, v3);
    sub_1B0FA70A4(v7);
    swift_release();
    sub_1B0F6C7C0(v4, v6, v5, v3);
LABEL_4:
    result = sub_1B1034EC8();
    *(_QWORD *)a1 = v9;
    *(_WORD *)(a1 + 8) = v10;
    return result;
  }
  sub_1B0F6C6F4(v4, v6, v5, v3);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v4, v6, v5, v3);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_bridgeObjectRetain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F85CFC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x74676E654C6E696DLL;
  else
    return 25705;
}

uint64_t sub_1B0F85D2C(char *a1, char *a2)
{
  return sub_1B100F0FC(*a1, *a2);
}

uint64_t sub_1B0F85D38()
{
  return sub_1B100FCA4();
}

uint64_t sub_1B0F85D40()
{
  return sub_1B1013440();
}

uint64_t sub_1B0F85D48()
{
  return sub_1B1013868();
}

uint64_t sub_1B0F85D50@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F85D5C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F85CFC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F85D84()
{
  char *v0;

  return sub_1B0F85CFC(*v0);
}

uint64_t sub_1B0F85D8C@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F85D98()
{
  sub_1B0F8B77C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F85DC0()
{
  sub_1B0F8B77C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F85DE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;

  v28 = a2;
  v26 = sub_1B103461C();
  v29 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF108);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v9 = sub_1B1034AD8();
  v27 = v10;
  v11 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1B0F8B77C();
  swift_retain();
  v12 = v31;
  sub_1B1036278();
  if (v12)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    sub_1B0F6C7C0(0, 0, 0, 254);
    swift_release();
  }
  else
  {
    v13 = v29;
    LOBYTE(v32) = 0;
    v14 = sub_1B103608C();
    v17 = v15;
    if (v15)
    {
      v31 = v14;
    }
    else
    {
      sub_1B1034610();
      v31 = sub_1B1034604();
      v17 = v18;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v26);
    }
    v36 = 1;
    sub_1B0F7E5F8();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v32;
    v20 = v33;
    v21 = v34;
    v22 = v35;
    sub_1B0F6C6F4(v32, v33, v34, v35);
    sub_1B0F6C7C0(0, 0, 0, 254);
    swift_bridgeObjectRetain();
    sub_1B0F6C6F4(v19, v20, v21, v22);
    v23 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B0F6C7C0(v19, v20, v21, v22);
    swift_bridgeObjectRelease();
    v24 = v28;
    v25 = (uint64_t)v30;
    *v28 = v31;
    v24[1] = v17;
    v24[2] = v19;
    v24[3] = v20;
    v24[4] = v21;
    *((_BYTE *)v24 + 40) = v22;
    v24[6] = v23;
    v24[7] = v9;
    v24[8] = v27;
    __swift_destroy_boxed_opaque_existential_1(v25);
    swift_bridgeObjectRelease();
    sub_1B0F6C7C0(v19, v20, v21, v22);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F86144@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0F85DE8(a1, a2);
}

uint64_t sub_1B0F86158@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a1;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0E0);
  MEMORY[0x1E0C80A78](v33);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0E8);
  v4 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B10345E0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v33 - v15;
  v17 = type metadata accessor for LinkView();
  sub_1B0F5A974(v1 + *(int *)(v17 + 20), (uint64_t)v9, &qword_1EEEDEA00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B0F5A3AC((uint64_t)v9, &qword_1EEEDEA00);
    sub_1B1034C70();
    v18 = sub_1B10352C4();
    v20 = v19;
    v22 = v21 & 1;
    sub_1B103569C();
    v23 = sub_1B10352B8();
    v25 = v24;
    v27 = v26;
    v29 = v28;
    swift_release();
    sub_1B0F8B62C(v18, v20, v22);
    swift_bridgeObjectRelease();
    *(_QWORD *)v3 = v23;
    *((_QWORD *)v3 + 1) = v25;
    v3[16] = v27 & 1;
    *((_QWORD *)v3 + 3) = v29;
    swift_storeEnumTagMultiPayload();
    sub_1B0F5A7E4(&qword_1EEEDF0F0, &qword_1EEEDF0E8, MEMORY[0x1E0CDD908]);
    return sub_1B1034EC8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    MEMORY[0x1E0C80A78](v31);
    sub_1B0F64174();
    sub_1B10352A0();
    v32 = v34;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v3, v6, v34);
    swift_storeEnumTagMultiPayload();
    sub_1B0F5A7E4(&qword_1EEEDF0F0, &qword_1EEEDF0E8, MEMORY[0x1E0CDD908]);
    sub_1B1034EC8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

uint64_t sub_1B0F864F4(char a1)
{
  return qword_1B103C0C0[a1];
}

uint64_t sub_1B0F86514(char *a1, char *a2)
{
  return sub_1B100C1BC(*a1, *a2);
}

uint64_t sub_1B0F86520()
{
  return sub_1B100FD1C();
}

uint64_t sub_1B0F86528()
{
  return sub_1B1011CF4();
}

uint64_t sub_1B0F86530()
{
  return sub_1B101592C();
}

uint64_t sub_1B0F86538@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8656C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F864F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F86594()
{
  char *v0;

  return sub_1B0F864F4(*v0);
}

uint64_t sub_1B0F8659C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F865C8()
{
  sub_1B0F8B670();
  return sub_1B10362B4();
}

uint64_t sub_1B0F865F0()
{
  sub_1B0F8B670();
  return sub_1B10362C0();
}

uint64_t sub_1B0F86618@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1B103461C();
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0F8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LinkView();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = *(int *)(v12 + 28);
  v40 = v14;
  *(uint64_t *)((char *)v14 + v39) = MEMORY[0x1E0DEE9D8];
  v15 = (uint64_t *)((char *)v14 + *(int *)(v12 + 32));
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  *v15 = sub_1B1034AD8();
  v15[1] = v16;
  v38 = v15;
  v17 = a1[3];
  v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_1B0F8B670();
  v18 = v42;
  sub_1B1036278();
  if (v18)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v19 = (uint64_t)v36;
    v42 = v8;
    v20 = v37;
    LOBYTE(v43) = 0;
    v21 = sub_1B103608C();
    v24 = v22;
    if (!v22)
    {
      v25 = v6;
      sub_1B1034610();
      v26 = sub_1B1034604();
      v24 = v27;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
      v21 = v26;
    }
    v28 = (uint64_t)v40;
    *v40 = v21;
    *(_QWORD *)(v28 + 8) = v24;
    LOBYTE(v43) = 1;
    sub_1B10360B0();
    sub_1B10345D4();
    swift_bridgeObjectRelease();
    sub_1B0F8B6B4(v19, v28 + *(int *)(v11 + 20));
    v51 = 2;
    sub_1B0F64238();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v7);
    v29 = v28 + *(int *)(v11 + 24);
    v30 = v48;
    *(_OWORD *)(v29 + 64) = v47;
    *(_OWORD *)(v29 + 80) = v30;
    *(_OWORD *)(v29 + 96) = v49;
    *(_QWORD *)(v29 + 112) = v50;
    v31 = v44;
    *(_OWORD *)v29 = v43;
    *(_OWORD *)(v29 + 16) = v31;
    v32 = v46;
    *(_OWORD *)(v29 + 32) = v45;
    *(_OWORD *)(v29 + 48) = v32;
    sub_1B0F8B6FC(v28, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return sub_1B0F8B740(v28);
  }
}

uint64_t sub_1B0F86A00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F86618(a1, a2);
}

uint64_t sub_1B0F86A14@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F86A20@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F86A2C()
{
  sub_1B0F8B7C0();
  return sub_1B10362B4();
}

uint64_t sub_1B0F86A54()
{
  sub_1B0F8B7C0();
  return sub_1B10362C0();
}

double sub_1B0F86A80@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F89934(a1, &qword_1EEEDF118, (void (*)(void))sub_1B0F8B7C0, a2);
}

uint64_t sub_1B0F86AAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F86ABC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F86ACC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F86ADC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F6C6F63;
  else
    return 25705;
}

uint64_t sub_1B0F86B04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B100C134(*a1, *a2);
}

uint64_t sub_1B0F86B10()
{
  unsigned __int8 *v0;

  return sub_1B100FD84(*v0);
}

uint64_t sub_1B0F86B18(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1B1011CB0(a1, *v1);
}

uint64_t sub_1B0F86B20(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1B10143F4(a1, *v1);
}

uint64_t sub_1B0F86B28@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F86B34@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F86ADC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F86B5C()
{
  char *v0;

  return sub_1B0F86ADC(*v0);
}

uint64_t sub_1B0F86B64@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F86B70()
{
  sub_1B0F8B5E8();
  return sub_1B10362B4();
}

uint64_t sub_1B0F86B98()
{
  sub_1B0F8B5E8();
  return sub_1B10362C0();
}

uint64_t sub_1B0F86BC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v23 = a2;
  v3 = sub_1B103461C();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0D0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v33 = sub_1B1034AD8();
  v34 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F8B5E8();
  v11 = v24;
  sub_1B1036278();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v12 = v5;
    v24 = v7;
    v13 = v23;
    LOBYTE(v25) = 0;
    v14 = sub_1B103608C();
    v17 = v15;
    if (v15)
    {
      v18 = v14;
    }
    else
    {
      sub_1B1034610();
      v18 = sub_1B1034604();
      v17 = v19;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v22);
    }
    v28[0] = v18;
    v28[1] = v17;
    v35 = 1;
    sub_1B0F81F08();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
    v29 = v25;
    v30 = v26;
    v31 = v27;
    sub_1B0F6D030((uint64_t)v28, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_1B0F6D06C((uint64_t)v28);
  }
}

uint64_t sub_1B0F86E5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  sub_1B0F81F4C(v1 + 16, (uint64_t)v9);
  v3 = v10;
  v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  if (*(_QWORD *)(v1 + 64))
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v6 = swift_retain();
    v7 = v5(v6, v3, v4);
    swift_release();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a1 = v7;
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F86F38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F86BC0(a1, a2);
}

uint64_t sub_1B0F86F4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F86F5C(char a1)
{
  return *(_QWORD *)&aHorizontvertic[8 * a1];
}

uint64_t sub_1B0F86F7C(char *a1, char *a2)
{
  return sub_1B100C2C4(*a1, *a2);
}

uint64_t sub_1B0F86F88()
{
  return sub_1B100FD88();
}

uint64_t sub_1B0F86F90()
{
  return sub_1B1011D74();
}

uint64_t sub_1B0F86F98()
{
  return sub_1B1015864();
}

uint64_t sub_1B0F86FA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F86FD4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F86F5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F86FFC()
{
  sub_1B0F8CCC4();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F87058()
{
  sub_1B0F8CCC4();
  return sub_1B1035CA8();
}

uint64_t sub_1B0F870A4(char a1)
{
  return qword_1B103C130[a1];
}

uint64_t sub_1B0F870C4(char *a1, char *a2)
{
  return sub_1B100E794(*a1, *a2);
}

uint64_t sub_1B0F870D0()
{
  return sub_1B100FDF0();
}

uint64_t sub_1B0F870D8()
{
  return sub_1B1012FA8();
}

uint64_t sub_1B0F870E0()
{
  return sub_1B1013EF0();
}

uint64_t sub_1B0F870E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8711C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F870A4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F87144()
{
  char *v0;

  return sub_1B0F870A4(*v0);
}

uint64_t sub_1B0F8714C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F87178()
{
  sub_1B0F8B4B8();
  return sub_1B10362B4();
}

uint64_t sub_1B0F871A0()
{
  sub_1B0F8B4B8();
  return sub_1B10362C0();
}

uint64_t sub_1B0F871C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v17[2] = a2;
  v3 = sub_1B103461C();
  v18 = *(_QWORD *)(v3 - 8);
  v19 = v3;
  MEMORY[0x1E0C80A78](v3);
  v20 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF090);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v25 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v26 = sub_1B1034AD8();
  v27 = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F8B4B8();
  v8 = v28;
  sub_1B1036278();
  if (!v8)
  {
    v9 = v20;
    v17[1] = v6;
    v28 = a1;
    v21 = 0;
    v10 = sub_1B103608C();
    v13 = v11;
    if (v11)
    {
      v14 = v10;
    }
    else
    {
      sub_1B1034610();
      v14 = sub_1B1034604();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
      v13 = v16;
    }
    v23 = v14;
    v24 = v13;
    v22 = 1;
    sub_1B0F8B4FC();
    sub_1B10360A4();
    __asm { BR              X10 }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B0F87578()
{
  sub_1B0F64174();
  return sub_1B1034784();
}

uint64_t sub_1B0F875DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F871C8(a1, a2);
}

uint64_t sub_1B0F875F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v21 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0B8);
  v19 = *(_QWORD *)(v2 - 8);
  v20 = v2;
  MEMORY[0x1E0C80A78](v2);
  v18 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 152);
  v6 = *(_QWORD *)(v1 + 160);
  v7 = *(_BYTE *)(v1 + 168);
  if (*(_QWORD *)(v1 + 176))
  {
    sub_1B0F5E604(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_BYTE *)(v1 + 168));
    v8 = swift_retain();
    v9 = sub_1B102A208(v8, v5, v4, v6, v7);
    v11 = v10;
    v13 = v12;
    swift_release();
    v14 = sub_1B0F5E6A0(v5, v4, v6, v7);
    v22 = v9;
    v23 = v11;
    v24 = v13 & 1;
    MEMORY[0x1E0C80A78](v14);
    *(&v17 - 2) = v1;
    sub_1B0F64174();
    v15 = v18;
    sub_1B1035834();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v21, v15, v20);
  }
  else
  {
    sub_1B0F5E604(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_BYTE *)(v1 + 168));
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F87804(char a1)
{
  return qword_1B103C170[a1];
}

uint64_t sub_1B0F87824(char *a1, char *a2)
{
  return sub_1B100EEF4(*a1, *a2);
}

uint64_t sub_1B0F87830()
{
  return sub_1B100FE58();
}

uint64_t sub_1B0F87838()
{
  return sub_1B101334C();
}

uint64_t sub_1B0F87840()
{
  return sub_1B10139B0();
}

uint64_t sub_1B0F87848@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8787C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F87804(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F878A4()
{
  char *v0;

  return sub_1B0F87804(*v0);
}

uint64_t sub_1B0F878AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F878D8()
{
  sub_1B0F8B5A4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F87900()
{
  sub_1B0F8B5A4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F87928@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v22 = a2;
  v21 = sub_1B103461C();
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v47 = sub_1B1034AD8();
  v48 = v9;
  v10 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1B0F8B5A4();
  v11 = v49;
  sub_1B1036278();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v12 = v23;
    v49 = v6;
    LOBYTE(v26) = 0;
    v13 = sub_1B103608C();
    v16 = v14;
    if (v14)
    {
      v17 = v13;
    }
    else
    {
      sub_1B1034610();
      v17 = sub_1B1034604();
      v16 = v18;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v21);
    }
    v19 = v22;
    v34[0] = v17;
    v34[1] = v16;
    v25 = 1;
    sub_1B0F64238();
    sub_1B10360BC();
    v39 = v30;
    v40 = v31;
    v41 = v32;
    v42 = v33;
    v35 = v26;
    v36 = v27;
    v37 = v28;
    v38 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
    v25 = 2;
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE7F0, &qword_1EEEDE7E8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v5);
    v44 = v26;
    v45 = v27;
    v46 = BYTE8(v27);
    sub_1B0F6D218((uint64_t)v34, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return sub_1B0F6D254((uint64_t)v34);
  }
}

uint64_t sub_1B0F87C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F87928(a1, a2);
}

uint64_t sub_1B0F87C90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F87CA0(char a1)
{
  return qword_1B103C188[a1];
}

uint64_t sub_1B0F87CC0(char *a1, char *a2)
{
  return sub_1B100C028(*a1, *a2);
}

uint64_t sub_1B0F87CCC()
{
  return sub_1B100FEC0();
}

uint64_t sub_1B0F87CD4()
{
  return sub_1B1011C2C();
}

uint64_t sub_1B0F87CDC()
{
  return sub_1B1015B30();
}

uint64_t sub_1B0F87CE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F87D18@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F87CA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F87D40()
{
  char *v0;

  return sub_1B0F87CA0(*v0);
}

uint64_t sub_1B0F87D48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F87D74()
{
  sub_1B0F8B550();
  return sub_1B10362B4();
}

uint64_t sub_1B0F87D9C()
{
  sub_1B0F8B550();
  return sub_1B10362C0();
}

uint64_t sub_1B0F87DC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v19 = a2;
  v3 = sub_1B103461C();
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF0A8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v50 = sub_1B1034AD8();
  v51 = v10;
  v11 = a1[3];
  v22 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1B0F8B550();
  v12 = v52;
  sub_1B1036278();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v52 = v7;
    LOBYTE(v24) = 0;
    v13 = sub_1B103608C();
    v16 = v14;
    if (v14)
    {
      v17 = v13;
    }
    else
    {
      sub_1B1034610();
      v17 = sub_1B1034604();
      v16 = v18;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
    }
    v32[0] = v17;
    v32[1] = v16;
    v23 = 1;
    sub_1B0F64238();
    sub_1B10360BC();
    v37 = v28;
    v38 = v29;
    v39 = v30;
    v40 = v31;
    v33 = v24;
    v34 = v25;
    v35 = v26;
    v36 = v27;
    v23 = 2;
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v6);
    v45 = v28;
    v46 = v29;
    v47 = v30;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    v48 = v31;
    v44 = v27;
    sub_1B0F6D288((uint64_t)v32, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return sub_1B0F6D2C4((uint64_t)v32);
  }
}

uint64_t sub_1B0F8811C()
{
  sub_1B0F64174();
  return sub_1B10357C8();
}

uint64_t sub_1B0F88180@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F87DC4(a1, a2);
}

uint64_t sub_1B0F88194()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F881A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F881B4@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F881C0@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F881CC()
{
  sub_1B0F8B464();
  return sub_1B10362B4();
}

uint64_t sub_1B0F881F4()
{
  sub_1B0F8B464();
  return sub_1B10362C0();
}

uint64_t sub_1B0F8821C()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

double sub_1B0F882D4@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B0F897B4((void (*)(_OWORD *__return_ptr))sub_1B0F8B160, a1);
}

uint64_t sub_1B0F882F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F88300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[13];
  uint64_t v39;

  v2 = v1;
  v36 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEFE8);
  v33 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v32 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEFF0);
  MEMORY[0x1E0C80A78](v34);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEFF8);
  v31 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 136);
  v10 = *(_QWORD *)(v2 + 144);
  v9 = *(_QWORD *)(v2 + 152);
  v11 = *(_BYTE *)(v2 + 160);
  if (*(_QWORD *)(v2 + 192))
  {
    sub_1B0F56C30(v8, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152), *(_BYTE *)(v2 + 160));
    v12 = swift_retain();
    v13 = sub_1B0FD7B38(v12, v8, v10, v9, v11);
    swift_release();
    sub_1B0F571A8(v8, v10, v9, v11);
    v14 = sub_1B0F8A788(v13);
    swift_bridgeObjectRelease();
    v39 = v14;
    swift_getKeyPath();
    sub_1B0F6D3D8(v2, (uint64_t)v38);
    v15 = (_OWORD *)swift_allocObject();
    v16 = v38[11];
    v15[11] = v38[10];
    v15[12] = v16;
    v15[13] = v38[12];
    v17 = v38[7];
    v15[7] = v38[6];
    v15[8] = v17;
    v18 = v38[9];
    v15[9] = v38[8];
    v15[10] = v18;
    v19 = v38[3];
    v15[3] = v38[2];
    v15[4] = v19;
    v20 = v38[5];
    v15[5] = v38[4];
    v15[6] = v20;
    v21 = v38[1];
    v15[1] = v38[0];
    v15[2] = v21;
    v22 = swift_allocObject();
    if ((v11 & 1) != 0)
    {
      *(_QWORD *)(v22 + 16) = sub_1B0F8AF14;
      *(_QWORD *)(v22 + 24) = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF000);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF008);
      sub_1B0F5A7E4(&qword_1EEEDF010, &qword_1EEEDF000, MEMORY[0x1E0DEAF48]);
      sub_1B0F8AF44();
      sub_1B0F8AF88();
      v23 = v32;
      sub_1B10358AC();
      v24 = v33;
      v25 = v37;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v5, v23, v37);
      swift_storeEnumTagMultiPayload();
      v26 = MEMORY[0x1E0CDFEE8];
      sub_1B0F78F60(&qword_1EEEDF038, &qword_1EEEDEFF8, (uint64_t (*)(void))sub_1B0F8AFEC, MEMORY[0x1E0CDFEE8]);
      sub_1B0F78F60(&qword_1EEEDF040, &qword_1EEEDEFE8, (uint64_t (*)(void))sub_1B0F8AF88, v26);
      sub_1B1034EC8();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v23, v25);
    }
    else
    {
      *(_QWORD *)(v22 + 16) = sub_1B0F8B0F0;
      *(_QWORD *)(v22 + 24) = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF000);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF030);
      sub_1B0F5A7E4(&qword_1EEEDF010, &qword_1EEEDF000, MEMORY[0x1E0DEAF48]);
      sub_1B0F8AF44();
      sub_1B0F8AFEC();
      sub_1B10358AC();
      v28 = v31;
      v29 = v35;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v7, v35);
      swift_storeEnumTagMultiPayload();
      v30 = MEMORY[0x1E0CDFEE8];
      sub_1B0F78F60(&qword_1EEEDF038, &qword_1EEEDEFF8, (uint64_t (*)(void))sub_1B0F8AFEC, MEMORY[0x1E0CDFEE8]);
      sub_1B0F78F60(&qword_1EEEDF040, &qword_1EEEDEFE8, (uint64_t (*)(void))sub_1B0F8AF88, v30);
      sub_1B1034EC8();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    }
  }
  else
  {
    sub_1B0F56C30(v8, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152), *(_BYTE *)(v2 + 160));
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F88904@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[7];
  __int128 v27;

  v4 = a2[24];
  if (v4)
  {
    v6 = *a1;
    v25 = (uint64_t)(a2 + 2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF048);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
    v8 = a2[21];
    v9 = a2[22];
    *(_QWORD *)(inited + 32) = v8;
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 48) = v6;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = sub_1B0F554CC(inited);
    v11 = MEMORY[0x1E0DEE9D8];
    v12 = sub_1B0F553A4(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for RemoteStateStore(0);
    v13 = swift_allocObject();
    v14 = qword_1EEEE0760;
    swift_retain();
    *(_QWORD *)(v13 + v14) = sub_1B0F553A4(v11);
    *(_QWORD *)(v13 + qword_1EEEE0768) = v4;
    swift_retain_n();
    swift_release();
    v15 = sub_1B0F55C84(v4);
    swift_retain();
    sub_1B0F56FC4(v10, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v16 = (unint64_t *)(v15 + qword_1EEEE0760);
    swift_beginAccess();
    *v16 = v12;
    swift_bridgeObjectRelease();
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    v17 = sub_1B1034694();
    result = sub_1B0F641B8(v25, (uint64_t)v26);
    *((_QWORD *)&v27 + 1) = v17;
    *(_QWORD *)(a3 + 128) = v15;
    v19 = v26[3];
    v20 = v26[4];
    *(_OWORD *)(a3 + 32) = v26[2];
    *(_OWORD *)(a3 + 48) = v19;
    v21 = v26[5];
    v22 = v26[6];
    *(_OWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 80) = v21;
    v23 = v26[1];
    *(_OWORD *)a3 = v26[0];
    *(_OWORD *)(a3 + 16) = v23;
    v24 = v27;
    *(_OWORD *)(a3 + 96) = v22;
    *(_OWORD *)(a3 + 112) = v24;
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F88B38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  unsigned __int8 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  char v56;

  v4 = *a2;
  v5 = *(_QWORD *)(a3 + 152);
  v6 = *(_BYTE *)(a3 + 160);
  v46 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)&v47 = v5;
  BYTE8(v47) = v6;
  v55[1] = 0;
  v55[2] = 0;
  v55[0] = a1;
  v56 = 0;
  sub_1B0FC96A0(v55, (uint64_t)&v37);
  if (BYTE8(v38) == 255)
  {
    v21 = *(_QWORD *)(a3 + 192);
    if (v21)
    {
      v22 = a3 + 16;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF048);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
      v24 = *(_QWORD *)(a3 + 168);
      v25 = *(_QWORD *)(a3 + 176);
      *(_QWORD *)(inited + 32) = v24;
      *(_QWORD *)(inited + 40) = v25;
      *(_QWORD *)(inited + 48) = v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v26 = sub_1B0F554CC(inited);
      v27 = MEMORY[0x1E0DEE9D8];
      v28 = sub_1B0F553A4(MEMORY[0x1E0DEE9D8]);
      type metadata accessor for RemoteStateStore(0);
      v29 = swift_allocObject();
      v30 = qword_1EEEE0760;
      swift_retain();
      *(_QWORD *)(v29 + v30) = sub_1B0F553A4(v27);
      *(_QWORD *)(v29 + qword_1EEEE0768) = v21;
      swift_retain_n();
      swift_release();
      v31 = sub_1B0F55C84(v21);
      swift_retain();
      sub_1B0F56FC4(v26, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v32 = (unint64_t *)(v31 + qword_1EEEE0760);
      swift_beginAccess();
      *v32 = v28;
      swift_bridgeObjectRelease();
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      v33 = sub_1B1034694();
      sub_1B0F641B8(v22, (uint64_t)&v37);
      *((_QWORD *)&v44 + 1) = v33;
      v54 = v31;
      v48 = v39;
      v49 = v40;
      v50 = v41;
      v51 = v42;
      v46 = v37;
      v47 = v38;
      v52 = v43;
      v53 = v44;
      sub_1B0F5A974((uint64_t)&v46, (uint64_t)&v37, &qword_1EEEDF030);
      v45 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF030);
      sub_1B0F8AFEC();
      sub_1B1034EC8();
      return sub_1B0F5A3AC((uint64_t)&v46, &qword_1EEEDF030);
    }
  }
  else
  {
    v36 = BYTE8(v38);
    v7 = *(_QWORD *)(a3 + 192);
    if (v7)
    {
      v8 = v37;
      v35 = a3 + 16;
      v9 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF048);
      v10 = swift_initStackObject();
      *(_OWORD *)(v10 + 16) = xmmword_1B1036F70;
      v12 = *(_QWORD *)(a3 + 168);
      v11 = *(_QWORD *)(a3 + 176);
      *(_QWORD *)(v10 + 32) = v12;
      *(_QWORD *)(v10 + 40) = v11;
      *(_QWORD *)(v10 + 48) = v4;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v13 = sub_1B0F554CC(v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF050);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1B1036F70;
      *(_QWORD *)(v14 + 32) = v12;
      *(_QWORD *)(v14 + 40) = v11;
      *(_OWORD *)(v14 + 48) = v8;
      *(_QWORD *)(v14 + 64) = v9;
      *(_BYTE *)(v14 + 72) = v36 & 1;
      swift_bridgeObjectRetain();
      sub_1B0F75C64(v8, *((uint64_t *)&v8 + 1), v9, v36);
      v15 = sub_1B0F553A4(v14);
      type metadata accessor for RemoteStateStore(0);
      v16 = swift_allocObject();
      v17 = qword_1EEEE0760;
      swift_retain();
      *(_QWORD *)(v16 + v17) = sub_1B0F553A4(MEMORY[0x1E0DEE9D8]);
      *(_QWORD *)(v16 + qword_1EEEE0768) = v7;
      swift_retain_n();
      swift_release();
      v18 = sub_1B0F55C84(v7);
      swift_retain();
      sub_1B0F56FC4(v13, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v19 = (unint64_t *)(v18 + qword_1EEEE0760);
      swift_beginAccess();
      *v19 = v15;
      swift_bridgeObjectRelease();
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      v20 = sub_1B1034694();
      sub_1B0F641B8(v35, (uint64_t)&v37);
      *((_QWORD *)&v44 + 1) = v20;
      v54 = v18;
      v48 = v39;
      v49 = v40;
      v50 = v41;
      v51 = v42;
      v46 = v37;
      v47 = v38;
      v52 = v43;
      v53 = v44;
      sub_1B0F5A974((uint64_t)&v46, (uint64_t)&v37, &qword_1EEEDF030);
      v45 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF030);
      sub_1B0F8AFEC();
      sub_1B1034EC8();
      sub_1B0F75CB4(v8, *((uint64_t *)&v8 + 1), v9, v36);
      return sub_1B0F5A3AC((uint64_t)&v46, &qword_1EEEDF030);
    }
  }
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0F89070(char a1)
{
  return qword_1B103C1B8[a1];
}

uint64_t sub_1B0F89090(char *a1, char *a2)
{
  return sub_1B100ED4C(*a1, *a2);
}

uint64_t sub_1B0F8909C()
{
  return sub_1B100FF28();
}

uint64_t sub_1B0F890A4()
{
  return sub_1B1013278();
}

uint64_t sub_1B0F890AC()
{
  return sub_1B1013AF0();
}

uint64_t sub_1B0F890B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F890E8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F89070(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F89110()
{
  char *v0;

  return sub_1B0F89070(*v0);
}

uint64_t sub_1B0F89118@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8CC80();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F89144()
{
  sub_1B0F8B11C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F8916C()
{
  sub_1B0F8B11C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F89194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v25 = a2;
  v24 = sub_1B103461C();
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF060);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v51 = sub_1B1034AD8();
  v52 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F8B11C();
  v10 = v53;
  sub_1B1036278();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v11 = v26;
    v23 = a1;
    v53 = v6;
    LOBYTE(v28) = 0;
    v12 = sub_1B103608C();
    v15 = v13;
    if (v13)
    {
      v16 = v12;
    }
    else
    {
      sub_1B1034610();
      v16 = sub_1B1034604();
      v15 = v17;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v24);
    }
    v18 = v25;
    v36[0] = v16;
    v36[1] = v15;
    v27 = 1;
    sub_1B0F64238();
    sub_1B10360BC();
    v41 = v32;
    v42 = v33;
    v43 = v34;
    v44 = v35;
    v37 = v28;
    v38 = v29;
    v39 = v30;
    v40 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF070);
    v27 = 2;
    sub_1B0F5A7E4(&qword_1EEEDF078, &qword_1EEEDF070, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    v45 = v28;
    v46 = v29;
    v47 = BYTE8(v29);
    LOBYTE(v28) = 3;
    v19 = sub_1B10360B0();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v8, v5);
    v48 = v19;
    v49 = v21;
    sub_1B0F6D3D8((uint64_t)v36, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    return sub_1B0F6D414((uint64_t)v36);
  }
}

void sub_1B0F89564(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B0F89574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F89194(a1, a2);
}

unint64_t sub_1B0F8958C()
{
  unint64_t result;

  result = qword_1EEEDEE40;
  if (!qword_1EEEDEE40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AD04, &type metadata for ForEachView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE40);
  }
  return result;
}

uint64_t sub_1B0F895D0()
{
  return sub_1B0F5A7E4(&qword_1EEEDEE48, &qword_1EEEDE410, MEMORY[0x1E0DEAF50]);
}

uint64_t sub_1B0F895FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F8960C()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0F896C4@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0F896D0@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0F896DC()
{
  sub_1B0F8AECC();
  return sub_1B10362B4();
}

uint64_t sub_1B0F89704()
{
  sub_1B0F8AECC();
  return sub_1B10362C0();
}

uint64_t sub_1B0F8972C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F8A96C();
  return sub_1B1035294();
}

double sub_1B0F89798@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B0F897B4((void (*)(_OWORD *__return_ptr))sub_1B0F8ABBC, a1);
}

double sub_1B0F897B4@<D0>(void (*a1)(_OWORD *__return_ptr)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  a1(v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B0F897F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F89804@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F89810@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F8985C@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F89868@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0F898B8()
{
  sub_1B0F8A920();
  return sub_1B10362B4();
}

uint64_t sub_1B0F898E0()
{
  sub_1B0F8A920();
  return sub_1B10362C0();
}

double sub_1B0F89908@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F89934(a1, &qword_1EEEDEFC8, (void (*)(void))sub_1B0F8A920, a2);
}

double sub_1B0F89934@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  sub_1B0F8A990(a1, a2, a3, (uint64_t *)v8);
  if (!v4)
  {
    result = *(double *)v8;
    v7 = v8[1];
    *(_OWORD *)a4 = v8[0];
    *(_OWORD *)(a4 + 16) = v7;
    *(_QWORD *)(a4 + 32) = v9;
  }
  return result;
}

uint64_t sub_1B0F89984()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F89994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F899A0);
}

unint64_t sub_1B0F899A0()
{
  unint64_t result;

  result = qword_1EEEDEE50;
  if (!qword_1EEEDEE50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AEB4, &type metadata for EmptyViewView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE50);
  }
  return result;
}

uint64_t sub_1B0F899E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89A00, (uint64_t (*)(void))sub_1B0F89A44, (uint64_t (*)(void))sub_1B0F89A88);
}

unint64_t sub_1B0F89A00()
{
  unint64_t result;

  result = qword_1EEEDEE58;
  if (!qword_1EEEDEE58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AE3C, &type metadata for EmptyViewView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE58);
  }
  return result;
}

unint64_t sub_1B0F89A44()
{
  unint64_t result;

  result = qword_1EEEDEE60;
  if (!qword_1EEEDEE60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AE04, &type metadata for EmptyViewView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE60);
  }
  return result;
}

unint64_t sub_1B0F89A88()
{
  unint64_t result;

  result = qword_1EEEDEE68;
  if (!qword_1EEEDEE68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AE64, &type metadata for EmptyViewView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE68);
  }
  return result;
}

uint64_t sub_1B0F89ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F89AD8);
}

unint64_t sub_1B0F89AD8()
{
  unint64_t result;

  result = qword_1EEEDEE70;
  if (!qword_1EEEDEE70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AED0, &type metadata for FormView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE70);
  }
  return result;
}

uint64_t sub_1B0F89B1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89B38, (uint64_t (*)(void))sub_1B0F89B7C, (uint64_t (*)(void))sub_1B0F89BC0);
}

unint64_t sub_1B0F89B38()
{
  unint64_t result;

  result = qword_1EEEDEE78;
  if (!qword_1EEEDEE78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AD8C, &type metadata for FormView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE78);
  }
  return result;
}

unint64_t sub_1B0F89B7C()
{
  unint64_t result;

  result = qword_1EEEDEE80;
  if (!qword_1EEEDEE80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AD54, &type metadata for FormView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE80);
  }
  return result;
}

unint64_t sub_1B0F89BC0()
{
  unint64_t result;

  result = qword_1EEEDEE88;
  if (!qword_1EEEDEE88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ADB4, &type metadata for FormView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE88);
  }
  return result;
}

uint64_t sub_1B0F89C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F89C10);
}

unint64_t sub_1B0F89C10()
{
  unint64_t result;

  result = qword_1EEEDEE90;
  if (!qword_1EEEDEE90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AEEC, &type metadata for ForEachView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE90);
  }
  return result;
}

uint64_t sub_1B0F89C54(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89C70, (uint64_t (*)(void))sub_1B0F89CB4, (uint64_t (*)(void))sub_1B0F8958C);
}

unint64_t sub_1B0F89C70()
{
  unint64_t result;

  result = qword_1EEEDEE98;
  if (!qword_1EEEDEE98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AC9C, &type metadata for ForEachView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEE98);
  }
  return result;
}

unint64_t sub_1B0F89CB4()
{
  unint64_t result;

  result = qword_1EEEDEEA0;
  if (!qword_1EEEDEEA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AC64, &type metadata for ForEachView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEA0);
  }
  return result;
}

uint64_t sub_1B0F89CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F89D04);
}

unint64_t sub_1B0F89D04()
{
  unint64_t result;

  result = qword_1EEEDEEA8;
  if (!qword_1EEEDEEA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AF08, &type metadata for GroupView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEA8);
  }
  return result;
}

uint64_t sub_1B0F89D48(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89D64, (uint64_t (*)(void))sub_1B0F89DA8, (uint64_t (*)(void))sub_1B0F89DEC);
}

unint64_t sub_1B0F89D64()
{
  unint64_t result;

  result = qword_1EEEDEEB0;
  if (!qword_1EEEDEEB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ABEC, &type metadata for GroupView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEB0);
  }
  return result;
}

unint64_t sub_1B0F89DA8()
{
  unint64_t result;

  result = qword_1EEEDEEB8;
  if (!qword_1EEEDEEB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ABB4, &type metadata for GroupView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEB8);
  }
  return result;
}

unint64_t sub_1B0F89DEC()
{
  unint64_t result;

  result = qword_1EEEDEEC0;
  if (!qword_1EEEDEEC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AC14, &type metadata for GroupView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEC0);
  }
  return result;
}

uint64_t sub_1B0F89E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F89E3C);
}

unint64_t sub_1B0F89E3C()
{
  unint64_t result;

  result = qword_1EEEDEEC8;
  if (!qword_1EEEDEEC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AF24, &type metadata for ScrollingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEC8);
  }
  return result;
}

uint64_t sub_1B0F89E80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89E9C, (uint64_t (*)(void))sub_1B0F89EE0, (uint64_t (*)(void))sub_1B0F89F24);
}

unint64_t sub_1B0F89E9C()
{
  unint64_t result;

  result = qword_1EEEDEED0;
  if (!qword_1EEEDEED0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AB3C, &type metadata for ScrollingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEED0);
  }
  return result;
}

unint64_t sub_1B0F89EE0()
{
  unint64_t result;

  result = qword_1EEEDEED8;
  if (!qword_1EEEDEED8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AB04, &type metadata for ScrollingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEED8);
  }
  return result;
}

unint64_t sub_1B0F89F24()
{
  unint64_t result;

  result = qword_1EEEDEEE0;
  if (!qword_1EEEDEEE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AB64, &type metadata for ScrollingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEE0);
  }
  return result;
}

uint64_t sub_1B0F89F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F89F74);
}

unint64_t sub_1B0F89F74()
{
  unint64_t result;

  result = qword_1EEEDEEE8;
  if (!qword_1EEEDEEE8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AF40, &type metadata for LabelView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEE8);
  }
  return result;
}

uint64_t sub_1B0F89FB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F89FD4, (uint64_t (*)(void))sub_1B0F8A018, (uint64_t (*)(void))sub_1B0F8A05C);
}

unint64_t sub_1B0F89FD4()
{
  unint64_t result;

  result = qword_1EEEDEEF0;
  if (!qword_1EEEDEEF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AA8C, &type metadata for LabelView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEF0);
  }
  return result;
}

unint64_t sub_1B0F8A018()
{
  unint64_t result;

  result = qword_1EEEDEEF8;
  if (!qword_1EEEDEEF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AA54, &type metadata for LabelView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEEF8);
  }
  return result;
}

unint64_t sub_1B0F8A05C()
{
  unint64_t result;

  result = qword_1EEEDEF00;
  if (!qword_1EEEDEF00)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AAB4, &type metadata for LabelView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF00);
  }
  return result;
}

uint64_t sub_1B0F8A0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F8A0AC);
}

unint64_t sub_1B0F8A0AC()
{
  unint64_t result;

  result = qword_1EEEDEF08;
  if (!qword_1EEEDEF08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AF5C, &type metadata for ToggleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF08);
  }
  return result;
}

uint64_t sub_1B0F8A0F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F8A10C, (uint64_t (*)(void))sub_1B0F8A150, (uint64_t (*)(void))sub_1B0F8A194);
}

unint64_t sub_1B0F8A10C()
{
  unint64_t result;

  result = qword_1EEEDEF10;
  if (!qword_1EEEDEF10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A9DC, &type metadata for ToggleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF10);
  }
  return result;
}

unint64_t sub_1B0F8A150()
{
  unint64_t result;

  result = qword_1EEEDEF18;
  if (!qword_1EEEDEF18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A9A4, &type metadata for ToggleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF18);
  }
  return result;
}

unint64_t sub_1B0F8A194()
{
  unint64_t result;

  result = qword_1EEEDEF20;
  if (!qword_1EEEDEF20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AA04, &type metadata for ToggleView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF20);
  }
  return result;
}

uint64_t sub_1B0F8A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F8A1E4);
}

unint64_t sub_1B0F8A1E4()
{
  unint64_t result;

  result = qword_1EEEDEF28;
  if (!qword_1EEEDEF28)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AF78, &type metadata for ColorView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF28);
  }
  return result;
}

uint64_t sub_1B0F8A228(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F8A244, (uint64_t (*)(void))sub_1B0F8A288, (uint64_t (*)(void))sub_1B0F8A2CC);
}

unint64_t sub_1B0F8A244()
{
  unint64_t result;

  result = qword_1EEEDEF30;
  if (!qword_1EEEDEF30)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A92C, &type metadata for ColorView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF30);
  }
  return result;
}

unint64_t sub_1B0F8A288()
{
  unint64_t result;

  result = qword_1EEEDEF38;
  if (!qword_1EEEDEF38)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A8F4, &type metadata for ColorView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF38);
  }
  return result;
}

unint64_t sub_1B0F8A2CC()
{
  unint64_t result;

  result = qword_1EEEDEF40;
  if (!qword_1EEEDEF40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A954, &type metadata for ColorView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF40);
  }
  return result;
}

uint64_t sub_1B0F8A310()
{
  sub_1B0F524FC(&qword_1EEEDEF48, (uint64_t (*)(uint64_t))type metadata accessor for LinkView, (uint64_t)&unk_1B103AF94);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F8A368(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1B0F524FC(&qword_1EEEDEF50, (uint64_t (*)(uint64_t))type metadata accessor for LinkView, (uint64_t)&unk_1B103A87C);
  a1[2] = sub_1B0F524FC(&qword_1EEEDEF58, (uint64_t (*)(uint64_t))type metadata accessor for LinkView, (uint64_t)&unk_1B103A844);
  result = sub_1B0F524FC(&qword_1EEEDEF60, (uint64_t (*)(uint64_t))type metadata accessor for LinkView, (uint64_t)&unk_1B103A8A4);
  a1[3] = result;
  return result;
}

uint64_t sub_1B0F8A3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F8A3EC);
}

unint64_t sub_1B0F8A3EC()
{
  unint64_t result;

  result = qword_1EEEDEF68;
  if (!qword_1EEEDEF68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AFB0, &type metadata for SpacerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF68);
  }
  return result;
}

uint64_t sub_1B0F8A430(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F8A44C, (uint64_t (*)(void))sub_1B0F8A490, (uint64_t (*)(void))sub_1B0F8A4D4);
}

unint64_t sub_1B0F8A44C()
{
  unint64_t result;

  result = qword_1EEEDEF70;
  if (!qword_1EEEDEF70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A7CC, &type metadata for SpacerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF70);
  }
  return result;
}

unint64_t sub_1B0F8A490()
{
  unint64_t result;

  result = qword_1EEEDEF78;
  if (!qword_1EEEDEF78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A794, &type metadata for SpacerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF78);
  }
  return result;
}

unint64_t sub_1B0F8A4D4()
{
  unint64_t result;

  result = qword_1EEEDEF80;
  if (!qword_1EEEDEF80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A7F4, &type metadata for SpacerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF80);
  }
  return result;
}

uint64_t sub_1B0F8A518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F8A524);
}

unint64_t sub_1B0F8A524()
{
  unint64_t result;

  result = qword_1EEEDEF88;
  if (!qword_1EEEDEF88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AFCC, &type metadata for ProgressView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF88);
  }
  return result;
}

uint64_t sub_1B0F8A568(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F8A584, (uint64_t (*)(void))sub_1B0F8A5C8, (uint64_t (*)(void))sub_1B0F8A60C);
}

unint64_t sub_1B0F8A584()
{
  unint64_t result;

  result = qword_1EEEDEF90;
  if (!qword_1EEEDEF90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A71C, &type metadata for ProgressView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF90);
  }
  return result;
}

unint64_t sub_1B0F8A5C8()
{
  unint64_t result;

  result = qword_1EEEDEF98;
  if (!qword_1EEEDEF98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A6E4, &type metadata for ProgressView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEF98);
  }
  return result;
}

unint64_t sub_1B0F8A60C()
{
  unint64_t result;

  result = qword_1EEEDEFA0;
  if (!qword_1EEEDEFA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A744, &type metadata for ProgressView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFA0);
  }
  return result;
}

uint64_t sub_1B0F8A650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0F8A65C);
}

unint64_t sub_1B0F8A65C()
{
  unint64_t result;

  result = qword_1EEEDEFA8;
  if (!qword_1EEEDEFA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103AFE8, &type metadata for TextView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFA8);
  }
  return result;
}

uint64_t sub_1B0F8A6A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0F8A6BC, (uint64_t (*)(void))sub_1B0F8A700, (uint64_t (*)(void))sub_1B0F8A744);
}

unint64_t sub_1B0F8A6BC()
{
  unint64_t result;

  result = qword_1EEEDEFB0;
  if (!qword_1EEEDEFB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A66C, &type metadata for TextView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFB0);
  }
  return result;
}

unint64_t sub_1B0F8A700()
{
  unint64_t result;

  result = qword_1EEEDEFB8;
  if (!qword_1EEEDEFB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A634, &type metadata for TextView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFB8);
  }
  return result;
}

unint64_t sub_1B0F8A744()
{
  unint64_t result;

  result = qword_1EEEDEFC0;
  if (!qword_1EEEDEFC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103A694, &type metadata for TextView);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFC0);
  }
  return result;
}

uint64_t sub_1B0F8A788(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (v4)
      {
        result = swift_retain();
        v8 = __OFSUB__(v4--, 1);
        if (v8)
          goto LABEL_30;
      }
      else
      {
        v9 = v2[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_31;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF058);
        v12 = (_QWORD *)swift_allocObject();
        v13 = _swift_stdlib_malloc_size(v12);
        v14 = v13 - 32;
        if (v13 < 32)
          v14 = v13 - 17;
        v15 = v14 >> 4;
        v12[2] = v11;
        v12[3] = 2 * (v14 >> 4);
        v16 = v12 + 4;
        v17 = v2[3] >> 1;
        v6 = &v12[2 * v17 + 4];
        v18 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        if (v2[2])
        {
          v19 = v12 < v2 || v16 >= &v2[2 * v17 + 4];
          if (v19 || v12 != v2)
            memmove(v16, v2 + 4, 16 * v17);
          swift_retain();
          v2[2] = 0;
        }
        else
        {
          swift_retain();
        }
        result = swift_release();
        v2 = v12;
        v8 = __OFSUB__(v18, 1);
        v4 = v18 - 1;
        if (v8)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
      }
      *v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
  }
  v4 = 0;
LABEL_26:
  v20 = v2[3];
  if (v20 >= 2)
  {
    v21 = v20 >> 1;
    v8 = __OFSUB__(v21, v4);
    v22 = v21 - v4;
    if (v8)
      goto LABEL_32;
    v2[2] = v22;
  }
  return (uint64_t)v2;
}

unint64_t sub_1B0F8A920()
{
  unint64_t result;

  result = qword_1EEEDEFD0;
  if (!qword_1EEEDEFD0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C038, &type metadata for EmptyViewView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFD0);
  }
  return result;
}

uint64_t sub_1B0F8A964()
{
  return sub_1B0F8960C();
}

uint64_t sub_1B0F8A96C()
{
  return sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
}

uint64_t sub_1B0F8A990@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(void);
  uint64_t v31;

  v30 = a3;
  v26 = a4;
  v25 = sub_1B103461C();
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v11 = sub_1B1034AD8();
  v13 = v12;
  v14 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v30();
  swift_retain();
  v15 = v31;
  sub_1B1036278();
  if (v15)
  {
    swift_release_n();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v31 = v11;
    v16 = v27;
    v17 = sub_1B103608C();
    v20 = v19;
    if (v19)
    {
      v21 = v17;
    }
    else
    {
      sub_1B1034610();
      v21 = sub_1B1034604();
      v20 = v22;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v25);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
    v23 = v26;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    v24 = v31;
    result = swift_release();
    *v23 = v21;
    v23[1] = v20;
    v23[2] = MEMORY[0x1E0DEE9D8];
    v23[3] = v24;
    v23[4] = v13;
  }
  return result;
}

uint64_t sub_1B0F8ABBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;

  v34 = a2;
  v31 = sub_1B103461C();
  v33 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEFD8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v9 = sub_1B1034AD8();
  v32 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v35 = a1;
  v12 = (_QWORD *)a1;
  v13 = v8;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_1B0F8AECC();
  swift_retain();
  v14 = v36;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v35);
    return swift_release();
  }
  else
  {
    v15 = v33;
    v16 = v34;
    v36 = v6;
    v39 = 0;
    v18 = sub_1B103608C();
    v19 = v13;
    v20 = v5;
    v22 = v17;
    v30 = v19;
    if (v17)
    {
      v23 = v18;
    }
    else
    {
      v24 = v4;
      sub_1B1034610();
      v23 = sub_1B1034604();
      v22 = v25;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v31);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v38 = 1;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v26 = v30;
    sub_1B10360A4();
    v27 = MEMORY[0x1E0DEE9D8];
    if (v37)
      v28 = v37;
    else
      v28 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v20);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1(v35);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v16 = v23;
    v16[1] = v22;
    v16[2] = v28;
    v16[3] = v27;
    v29 = v32;
    v16[4] = v9;
    v16[5] = v29;
  }
  return result;
}

unint64_t sub_1B0F8AECC()
{
  unint64_t result;

  result = qword_1EEEDEFE0;
  if (!qword_1EEEDEFE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BFE8, &type metadata for FormView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDEFE0);
  }
  return result;
}

uint64_t sub_1B0F8AF14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1B0F88B38(a1, a2, v2 + 16);
}

uint64_t sub_1B0F8AF1C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD *))(v1 + 16))(*a1, a1 + 1);
}

unint64_t sub_1B0F8AF44()
{
  unint64_t result;

  result = qword_1EEEDF018;
  if (!qword_1EEEDF018)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for DecodableState, &type metadata for DecodableState);
    atomic_store(result, (unint64_t *)&qword_1EEEDF018);
  }
  return result;
}

unint64_t sub_1B0F8AF88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDF020;
  if (!qword_1EEEDF020)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF008);
    v2[0] = sub_1B0F8AFEC();
    v2[1] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF020);
  }
  return result;
}

unint64_t sub_1B0F8AFEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDF028;
  if (!qword_1EEEDF028)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF030);
    v2[0] = sub_1B0F64174();
    v2[1] = sub_1B0F5A7E4(&qword_1EEEDE268, &qword_1EEEDE270, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF028);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  swift_release();
  sub_1B0F571A8(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 176));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F8B0F0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B0F88904(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1B0F8B0F8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1B0F8B11C()
{
  unint64_t result;

  result = qword_1EEEDF068;
  if (!qword_1EEEDF068)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BF98, &type metadata for ForEachView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF068);
  }
  return result;
}

uint64_t sub_1B0F8B160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;

  v33 = a2;
  v30 = sub_1B103461C();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF080);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v9 = sub_1B1034AD8();
  v31 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v34 = a1;
  v12 = (_QWORD *)a1;
  v13 = v8;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_1B0F8B464();
  swift_retain();
  v14 = v35;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v34);
    return swift_release();
  }
  else
  {
    v15 = v32;
    v16 = v33;
    v35 = v6;
    v38 = 0;
    v18 = sub_1B103608C();
    v19 = v13;
    v21 = v17;
    v29 = v19;
    if (v17)
    {
      v22 = v18;
    }
    else
    {
      v23 = v4;
      sub_1B1034610();
      v22 = sub_1B1034604();
      v21 = v24;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v30);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v37 = 1;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v25 = v29;
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v5);
    v26 = v36;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1(v34);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v16 = v22;
    v16[1] = v21;
    v27 = MEMORY[0x1E0DEE9D8];
    v16[2] = v26;
    v16[3] = v27;
    v28 = v31;
    v16[4] = v9;
    v16[5] = v28;
  }
  return result;
}

unint64_t sub_1B0F8B464()
{
  unint64_t result;

  result = qword_1EEEDF088;
  if (!qword_1EEEDF088)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BF48, &type metadata for GroupView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF088);
  }
  return result;
}

uint64_t sub_1B0F8B4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16) + 24, a1);
}

unint64_t sub_1B0F8B4B8()
{
  unint64_t result;

  result = qword_1EEEDF098;
  if (!qword_1EEEDF098)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BEF8, &type metadata for ScrollingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF098);
  }
  return result;
}

unint64_t sub_1B0F8B4FC()
{
  unint64_t result;

  result = qword_1EEEDF0A0;
  if (!qword_1EEEDF0A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BED0, &type metadata for AxesName);
    atomic_store(result, (unint64_t *)&qword_1EEEDF0A0);
  }
  return result;
}

uint64_t sub_1B0F8B540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16) + 136, a1);
}

unint64_t sub_1B0F8B550()
{
  unint64_t result;

  result = qword_1EEEDF0B0;
  if (!qword_1EEEDF0B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BE80, &type metadata for LabelView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF0B0);
  }
  return result;
}

uint64_t sub_1B0F8B594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16) + 16, a1);
}

unint64_t sub_1B0F8B5A4()
{
  unint64_t result;

  result = qword_1EEEDF0C8;
  if (!qword_1EEEDF0C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BE30, &type metadata for ToggleView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF0C8);
  }
  return result;
}

unint64_t sub_1B0F8B5E8()
{
  unint64_t result;

  result = qword_1EEEDF0D8;
  if (!qword_1EEEDF0D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BDE0, &type metadata for ColorView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF0D8);
  }
  return result;
}

uint64_t sub_1B0F8B62C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F8B63C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(int *)(type metadata accessor for LinkView() + 24);
  return sub_1B0F641B8(v4, a1);
}

unint64_t sub_1B0F8B670()
{
  unint64_t result;

  result = qword_1EEEDF100;
  if (!qword_1EEEDF100)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BD90, &type metadata for LinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF100);
  }
  return result;
}

uint64_t sub_1B0F8B6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F8B6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F8B740(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LinkView();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B0F8B77C()
{
  unint64_t result;

  result = qword_1EEEDF110;
  if (!qword_1EEEDF110)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BD40, &type metadata for SpacerView.SpacerViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF110);
  }
  return result;
}

unint64_t sub_1B0F8B7C0()
{
  unint64_t result;

  result = qword_1EEEDF120;
  if (!qword_1EEEDF120)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BCF0, &type metadata for ProgressView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF120);
  }
  return result;
}

unint64_t sub_1B0F8B804()
{
  unint64_t result;

  result = qword_1EEEDF130;
  if (!qword_1EEEDF130)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEEDF130);
  }
  return result;
}

uint64_t sub_1B0F8B848(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B0F8B870(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F8B870(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F8B880(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B0F8B62C(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B0F8B8A8()
{
  unint64_t result;

  result = qword_1EEEDF150;
  if (!qword_1EEEDF150)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BCA0, &type metadata for TextView.TextViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF150);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextView.TextViewCodingKeys()
{
  return &type metadata for TextView.TextViewCodingKeys;
}

ValueMetadata *type metadata accessor for ProgressView.CodingKeys()
{
  return &type metadata for ProgressView.CodingKeys;
}

ValueMetadata *type metadata accessor for SpacerView.SpacerViewCodingKeys()
{
  return &type metadata for SpacerView.SpacerViewCodingKeys;
}

ValueMetadata *type metadata accessor for LinkView.CodingKeys()
{
  return &type metadata for LinkView.CodingKeys;
}

ValueMetadata *type metadata accessor for ColorView.CodingKeys()
{
  return &type metadata for ColorView.CodingKeys;
}

ValueMetadata *type metadata accessor for ToggleView.CodingKeys()
{
  return &type metadata for ToggleView.CodingKeys;
}

ValueMetadata *type metadata accessor for LabelView.CodingKeys()
{
  return &type metadata for LabelView.CodingKeys;
}

uint64_t _s6LiftUI8TextViewV18TextViewCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8B9C0 + 4 * byte_1B103A539[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0F8B9F4 + 4 * byte_1B103A534[v4]))();
}

uint64_t sub_1B0F8B9F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8B9FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8BA04);
  return result;
}

uint64_t sub_1B0F8BA10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8BA18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0F8BA1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8BA24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxesName()
{
  return &type metadata for AxesName;
}

ValueMetadata *type metadata accessor for ScrollingView.CodingKeys()
{
  return &type metadata for ScrollingView.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupView.CodingKeys()
{
  return &type metadata for GroupView.CodingKeys;
}

uint64_t _s6LiftUI8LinkViewV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8BAAC + 4 * byte_1B103A543[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0F8BAE0 + 4 * byte_1B103A53E[v4]))();
}

uint64_t sub_1B0F8BAE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8BAE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8BAF0);
  return result;
}

uint64_t sub_1B0F8BAFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8BB04);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0F8BB08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8BB10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForEachView.CodingKeys()
{
  return &type metadata for ForEachView.CodingKeys;
}

uint64_t _s6LiftUI10SpacerViewV20SpacerViewCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8BB78 + 4 * byte_1B103A54D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F8BBAC + 4 * byte_1B103A548[v4]))();
}

uint64_t sub_1B0F8BBAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8BBB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8BBBCLL);
  return result;
}

uint64_t sub_1B0F8BBC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8BBD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F8BBD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8BBDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormView.CodingKeys()
{
  return &type metadata for FormView.CodingKeys;
}

uint64_t _s6LiftUI12ProgressViewV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F8BC38 + 4 * byte_1B103A552[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F8BC58 + 4 * byte_1B103A557[v4]))();
}

_BYTE *sub_1B0F8BC38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F8BC58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F8BC60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F8BC68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F8BC70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F8BC78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EmptyViewView.CodingKeys()
{
  return &type metadata for EmptyViewView.CodingKeys;
}

uint64_t destroy for TextView.TextType(uint64_t a1)
{
  return sub_1B0F6C66C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for TextView.TextType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C5EC(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TextView.TextType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C5EC(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B0F6C66C(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for TextView.TextType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B0F6C66C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextView.TextType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1F && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 31);
  v3 = (*(_BYTE *)(a1 + 24) & 0x1E | (*(unsigned __int8 *)(a1 + 24) >> 5) & 1) ^ 0x1F;
  if (v3 >= 0x1E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextView.TextType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 31;
    if (a3 >= 0x1F)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x1F)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * ((((-a2 >> 1) & 0xF) - 16 * a2) & 0x1F);
    }
  }
  return result;
}

uint64_t sub_1B0F8BE68(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) >> 5) & 1;
}

uint64_t sub_1B0F8BE74(uint64_t result)
{
  *(_BYTE *)(result + 24) &= ~0x20u;
  return result;
}

uint64_t sub_1B0F8BE84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 0xC1 | (32 * (a2 & 1));
  return result;
}

ValueMetadata *type metadata accessor for TextView.TextType()
{
  return &type metadata for TextView.TextType;
}

uint64_t sub_1B0F8BEAC()
{
  return MEMORY[0x1E0CE0400];
}

uint64_t sub_1B0F8BEB8()
{
  return sub_1B0F5A7E4(&qword_1EEEDF158, &qword_1EEEDF160, MEMORY[0x1E0CDD898]);
}

unint64_t sub_1B0F8BEE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEDF168;
  if (!qword_1EEEDF168)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF170);
    v2 = MEMORY[0x1E0CDFEE8];
    v3[0] = sub_1B0F78F60(&qword_1EEEDF038, &qword_1EEEDEFF8, (uint64_t (*)(void))sub_1B0F8AFEC, MEMORY[0x1E0CDFEE8]);
    v3[1] = sub_1B0F78F60(&qword_1EEEDF040, &qword_1EEEDEFE8, (uint64_t (*)(void))sub_1B0F8AF88, v2);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEDF168);
  }
  return result;
}

uint64_t sub_1B0F8BF9C()
{
  return sub_1B0F78F60(&qword_1EEEDF178, &qword_1EEEDF180, sub_1B0F8A96C, MEMORY[0x1E0CDF690]);
}

uint64_t sub_1B0F8BFD0()
{
  return sub_1B0F5A7E4(&qword_1EEEDF188, &qword_1EEEDF190, MEMORY[0x1E0CD8558]);
}

uint64_t sub_1B0F8BFFC()
{
  return sub_1B0F5A7E4(&qword_1EEEDF198, &qword_1EEEDF1A0, MEMORY[0x1E0CDF8C8]);
}

uint64_t sub_1B0F8C028()
{
  return sub_1B0F5A7E4(&qword_1EEEDF1A8, &qword_1EEEDF0B8, MEMORY[0x1E0CDFC78]);
}

uint64_t sub_1B0F8C054()
{
  return MEMORY[0x1E0CDF5B0];
}

unint64_t sub_1B0F8C064()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDF1B0;
  if (!qword_1EEEDF1B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF1B8);
    v2[0] = sub_1B0F5A7E4(&qword_1EEEDF0F0, &qword_1EEEDF0E8, MEMORY[0x1E0CDD908]);
    v2[1] = MEMORY[0x1E0CDDD58];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1B0);
  }
  return result;
}

uint64_t sub_1B0F8C0E8()
{
  return sub_1B0F8C114(&qword_1EEEDF1C0, &qword_1EEEDF1C8, MEMORY[0x1E0CDFBE8]);
}

uint64_t sub_1B0F8C114(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3;
    v7[1] = a3;
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0F8C168()
{
  return sub_1B0F5A7E4(&qword_1EEEDE400, &qword_1EEEDE3E8, MEMORY[0x1E0CD8B78]);
}

unint64_t sub_1B0F8C198()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDF1D0;
  if (!qword_1EEEDF1D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF1D8);
    v2[0] = MEMORY[0x1E0CDDD58];
    v2[1] = sub_1B0F8C114(&qword_1EEEDF140, &qword_1EEEDF138, MEMORY[0x1E0CDDD58]);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1D0);
  }
  return result;
}

unint64_t sub_1B0F8C21C()
{
  unint64_t result;

  result = qword_1EEEDF1E0;
  if (!qword_1EEEDF1E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B160, &type metadata for EmptyViewView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1E0);
  }
  return result;
}

unint64_t sub_1B0F8C264()
{
  unint64_t result;

  result = qword_1EEEDF1E8;
  if (!qword_1EEEDF1E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B250, &type metadata for FormView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1E8);
  }
  return result;
}

unint64_t sub_1B0F8C2AC()
{
  unint64_t result;

  result = qword_1EEEDF1F0;
  if (!qword_1EEEDF1F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B340, &type metadata for ForEachView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1F0);
  }
  return result;
}

unint64_t sub_1B0F8C2F4()
{
  unint64_t result;

  result = qword_1EEEDF1F8;
  if (!qword_1EEEDF1F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B430, &type metadata for GroupView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF1F8);
  }
  return result;
}

unint64_t sub_1B0F8C33C()
{
  unint64_t result;

  result = qword_1EEEDF200;
  if (!qword_1EEEDF200)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B520, &type metadata for ScrollingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF200);
  }
  return result;
}

unint64_t sub_1B0F8C384()
{
  unint64_t result;

  result = qword_1EEEDF208;
  if (!qword_1EEEDF208)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B5E8, &type metadata for AxesName);
    atomic_store(result, (unint64_t *)&qword_1EEEDF208);
  }
  return result;
}

unint64_t sub_1B0F8C3CC()
{
  unint64_t result;

  result = qword_1EEEDF210;
  if (!qword_1EEEDF210)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B6D8, &type metadata for LabelView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF210);
  }
  return result;
}

unint64_t sub_1B0F8C414()
{
  unint64_t result;

  result = qword_1EEEDF218;
  if (!qword_1EEEDF218)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B7C8, &type metadata for ToggleView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF218);
  }
  return result;
}

unint64_t sub_1B0F8C45C()
{
  unint64_t result;

  result = qword_1EEEDF220;
  if (!qword_1EEEDF220)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B8B8, &type metadata for ColorView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF220);
  }
  return result;
}

unint64_t sub_1B0F8C4A4()
{
  unint64_t result;

  result = qword_1EEEDF228;
  if (!qword_1EEEDF228)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B9A8, &type metadata for LinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF228);
  }
  return result;
}

unint64_t sub_1B0F8C4EC()
{
  unint64_t result;

  result = qword_1EEEDF230;
  if (!qword_1EEEDF230)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BA98, &type metadata for SpacerView.SpacerViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF230);
  }
  return result;
}

unint64_t sub_1B0F8C534()
{
  unint64_t result;

  result = qword_1EEEDF238;
  if (!qword_1EEEDF238)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BB88, &type metadata for ProgressView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF238);
  }
  return result;
}

unint64_t sub_1B0F8C57C()
{
  unint64_t result;

  result = qword_1EEEDF240;
  if (!qword_1EEEDF240)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BC78, &type metadata for TextView.TextViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF240);
  }
  return result;
}

unint64_t sub_1B0F8C5C4()
{
  unint64_t result;

  result = qword_1EEEDF248;
  if (!qword_1EEEDF248)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BBB0, &type metadata for TextView.TextViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF248);
  }
  return result;
}

unint64_t sub_1B0F8C60C()
{
  unint64_t result;

  result = qword_1EEEDF250;
  if (!qword_1EEEDF250)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BBD8, &type metadata for TextView.TextViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF250);
  }
  return result;
}

unint64_t sub_1B0F8C654()
{
  unint64_t result;

  result = qword_1EEEDF258;
  if (!qword_1EEEDF258)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BAC0, &type metadata for ProgressView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF258);
  }
  return result;
}

unint64_t sub_1B0F8C69C()
{
  unint64_t result;

  result = qword_1EEEDF260;
  if (!qword_1EEEDF260)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103BAE8, &type metadata for ProgressView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF260);
  }
  return result;
}

unint64_t sub_1B0F8C6E4()
{
  unint64_t result;

  result = qword_1EEEDF268;
  if (!qword_1EEEDF268)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B9D0, &type metadata for SpacerView.SpacerViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF268);
  }
  return result;
}

unint64_t sub_1B0F8C72C()
{
  unint64_t result;

  result = qword_1EEEDF270;
  if (!qword_1EEEDF270)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B9F8, &type metadata for SpacerView.SpacerViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF270);
  }
  return result;
}

unint64_t sub_1B0F8C774()
{
  unint64_t result;

  result = qword_1EEEDF278;
  if (!qword_1EEEDF278)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B8E0, &type metadata for LinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF278);
  }
  return result;
}

unint64_t sub_1B0F8C7BC()
{
  unint64_t result;

  result = qword_1EEEDF280;
  if (!qword_1EEEDF280)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B908, &type metadata for LinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF280);
  }
  return result;
}

unint64_t sub_1B0F8C804()
{
  unint64_t result;

  result = qword_1EEEDF288;
  if (!qword_1EEEDF288)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B7F0, &type metadata for ColorView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF288);
  }
  return result;
}

unint64_t sub_1B0F8C84C()
{
  unint64_t result;

  result = qword_1EEEDF290;
  if (!qword_1EEEDF290)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B818, &type metadata for ColorView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF290);
  }
  return result;
}

unint64_t sub_1B0F8C894()
{
  unint64_t result;

  result = qword_1EEEDF298;
  if (!qword_1EEEDF298)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B700, &type metadata for ToggleView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF298);
  }
  return result;
}

unint64_t sub_1B0F8C8DC()
{
  unint64_t result;

  result = qword_1EEEDF2A0;
  if (!qword_1EEEDF2A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B728, &type metadata for ToggleView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2A0);
  }
  return result;
}

unint64_t sub_1B0F8C924()
{
  unint64_t result;

  result = qword_1EEEDF2A8;
  if (!qword_1EEEDF2A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B610, &type metadata for LabelView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2A8);
  }
  return result;
}

unint64_t sub_1B0F8C96C()
{
  unint64_t result;

  result = qword_1EEEDF2B0;
  if (!qword_1EEEDF2B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B638, &type metadata for LabelView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2B0);
  }
  return result;
}

unint64_t sub_1B0F8C9B4()
{
  unint64_t result;

  result = qword_1EEEDF2B8;
  if (!qword_1EEEDF2B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B458, &type metadata for ScrollingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2B8);
  }
  return result;
}

unint64_t sub_1B0F8C9FC()
{
  unint64_t result;

  result = qword_1EEEDF2C0;
  if (!qword_1EEEDF2C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B480, &type metadata for ScrollingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2C0);
  }
  return result;
}

unint64_t sub_1B0F8CA44()
{
  unint64_t result;

  result = qword_1EEEDF2C8;
  if (!qword_1EEEDF2C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B368, &type metadata for GroupView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2C8);
  }
  return result;
}

unint64_t sub_1B0F8CA8C()
{
  unint64_t result;

  result = qword_1EEEDF2D0;
  if (!qword_1EEEDF2D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B390, &type metadata for GroupView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2D0);
  }
  return result;
}

unint64_t sub_1B0F8CAD4()
{
  unint64_t result;

  result = qword_1EEEDF2D8;
  if (!qword_1EEEDF2D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B278, &type metadata for ForEachView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2D8);
  }
  return result;
}

unint64_t sub_1B0F8CB1C()
{
  unint64_t result;

  result = qword_1EEEDF2E0;
  if (!qword_1EEEDF2E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B2A0, &type metadata for ForEachView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2E0);
  }
  return result;
}

unint64_t sub_1B0F8CB64()
{
  unint64_t result;

  result = qword_1EEEDF2E8;
  if (!qword_1EEEDF2E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B188, &type metadata for FormView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2E8);
  }
  return result;
}

unint64_t sub_1B0F8CBAC()
{
  unint64_t result;

  result = qword_1EEEDF2F0;
  if (!qword_1EEEDF2F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B1B0, &type metadata for FormView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2F0);
  }
  return result;
}

unint64_t sub_1B0F8CBF4()
{
  unint64_t result;

  result = qword_1EEEDF2F8;
  if (!qword_1EEEDF2F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B098, &type metadata for EmptyViewView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF2F8);
  }
  return result;
}

unint64_t sub_1B0F8CC3C()
{
  unint64_t result;

  result = qword_1EEEDF300;
  if (!qword_1EEEDF300)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B0C0, &type metadata for EmptyViewView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF300);
  }
  return result;
}

uint64_t sub_1B0F8CC80()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_1B0F8CCC4()
{
  unint64_t result;

  result = qword_1EEEDF308;
  if (!qword_1EEEDF308)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103B570, &type metadata for AxesName);
    atomic_store(result, (unint64_t *)&qword_1EEEDF308);
  }
  return result;
}

uint64_t destroy for IfView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 184);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for IfView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v5)
  {
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v18 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v18;
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    v11 = *(_QWORD *)(a2 + 152);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v20 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v20;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v21 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v21;
    v22 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 64, a2 + 64);
  *(_BYTE *)(a1 + 104) = v7;
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_retain();
  swift_retain();
  v11 = *(_QWORD *)(a2 + 152);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 184, a2 + 184);
  *(_BYTE *)(a1 + 224) = v13;
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v15;
  v16 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v16;
  swift_retain();
  swift_retain();
LABEL_6:
  v23 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v23;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IfView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 64);
        v7 = *(_BYTE *)(a2 + 104);
        v8 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 88) = v8;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 64, a2 + 64);
        *(_BYTE *)(a1 + 104) = v7;
      }
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    }
    else
    {
      sub_1B0F6427C(a1 + 24);
      v11 = *(_OWORD *)(a2 + 72);
      v13 = *v5;
      v12 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v11;
      *v4 = v13;
      *(_OWORD *)(a1 + 40) = v12;
      v15 = *(_OWORD *)(a2 + 104);
      v14 = *(_OWORD *)(a2 + 120);
      v16 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 104) = v15;
      *(_OWORD *)(a1 + 120) = v14;
      *(_OWORD *)(a1 + 88) = v16;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, a2 + 64);
    *(_BYTE *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_retain();
    swift_retain();
  }
  else
  {
    v17 = *v5;
    v18 = *(_OWORD *)(a2 + 40);
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *v4 = v17;
    *(_OWORD *)(a1 + 40) = v18;
    v20 = *(_OWORD *)(a2 + 88);
    v21 = *(_OWORD *)(a2 + 104);
    v22 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v21;
    *(_OWORD *)(a1 + 120) = v22;
    *(_OWORD *)(a1 + 88) = v20;
  }
  v23 = (_OWORD *)(a1 + 144);
  v24 = (__int128 *)(a2 + 144);
  v25 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v25)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 184);
        v26 = *(_BYTE *)(a2 + 224);
        v27 = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 208) = v27;
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 184, a2 + 184);
        *(_BYTE *)(a1 + 224) = v26;
      }
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    }
    else
    {
      sub_1B0F6427C(a1 + 144);
      v30 = *(_OWORD *)(a2 + 192);
      v32 = *v24;
      v31 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v30;
      *v23 = v32;
      *(_OWORD *)(a1 + 160) = v31;
      v34 = *(_OWORD *)(a2 + 224);
      v33 = *(_OWORD *)(a2 + 240);
      v35 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v34;
      *(_OWORD *)(a1 + 240) = v33;
      *(_OWORD *)(a1 + 208) = v35;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v28 = *(_BYTE *)(a2 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v29;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 184, a2 + 184);
    *(_BYTE *)(a1 + 224) = v28;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_retain();
    swift_retain();
  }
  else
  {
    v36 = *v24;
    v37 = *(_OWORD *)(a2 + 160);
    v38 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v38;
    *v23 = v36;
    *(_OWORD *)(a1 + 160) = v37;
    v39 = *(_OWORD *)(a2 + 208);
    v40 = *(_OWORD *)(a2 + 224);
    v41 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v40;
    *(_OWORD *)(a1 + 240) = v41;
    *(_OWORD *)(a1 + 208) = v39;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

uint64_t assignWithTake for IfView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_7;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
  {
    sub_1B0F6427C(a1 + 24);
LABEL_7:
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v9;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
LABEL_8:
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_14:
    v15 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v15;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v16 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v16;
    v17 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v17;
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(a2 + 152);
  if (!v12)
  {
    sub_1B0F6427C(a1 + 144);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  }
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  v14 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v14;
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
LABEL_15:
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_release();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

ValueMetadata *type metadata accessor for IfView()
{
  return &type metadata for IfView;
}

uint64_t sub_1B0F8D644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  _BYTE v5[120];
  char v6;
  _BYTE v7[120];

  v1 = v0;
  if (*(_QWORD *)(v0 + 272))
  {
    v2 = swift_retain();
    v3 = sub_1B10168FC(v2);
    swift_release();
    if ((v3 & 1) != 0)
    {
      sub_1B0F78ED4(v1 + 24, (uint64_t)v7);
      sub_1B0F78ED4((uint64_t)v7, (uint64_t)v5);
      v6 = 0;
    }
    else
    {
      sub_1B0F78ED4(v1 + 144, (uint64_t)v7);
      sub_1B0F78ED4((uint64_t)v7, (uint64_t)v5);
      v6 = 1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
    sub_1B0F8DDE0();
    sub_1B1034EC8();
    return sub_1B0F78FC4((uint64_t)v7);
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0F8D760(char a1)
{
  return qword_1B103C428[a1];
}

uint64_t sub_1B0F8D780(char *a1, char *a2)
{
  return sub_1B100C348(*a1, *a2);
}

uint64_t sub_1B0F8D78C()
{
  return sub_1B100FF90();
}

uint64_t sub_1B0F8D794()
{
  return sub_1B1011DB4();
}

uint64_t sub_1B0F8D79C()
{
  return sub_1B1015800();
}

uint64_t sub_1B0F8D7A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8E094();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8D7D0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F8D760(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F8D7F8()
{
  char *v0;

  return sub_1B0F8D760(*v0);
}

uint64_t sub_1B0F8D800@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8E094();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8D824()
{
  sub_1B0F8DE44();
  return sub_1B10362B4();
}

uint64_t sub_1B0F8D84C()
{
  sub_1B0F8DE44();
  return sub_1B10362C0();
}

uint64_t sub_1B0F8D874@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  _QWORD v27[15];
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[19];
  uint64_t v31;

  v22 = a2;
  v3 = sub_1B103461C();
  v4 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  v24 = v4;
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF330);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[2] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v30[16] = sub_1B1034AD8();
  v30[17] = v11;
  v12 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1B0F8DE44();
  v13 = v31;
  sub_1B1036278();
  if (v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v14 = v24;
    v31 = v8;
    LOBYTE(v27[0]) = 0;
    v15 = sub_1B103608C();
    v18 = v16;
    if (v16)
    {
      v19 = v15;
    }
    else
    {
      sub_1B1034610();
      v19 = sub_1B1034604();
      v18 = v20;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v23);
    }
    v28[0] = v19;
    v28[1] = v18;
    v26 = 1;
    sub_1B0F64238();
    sub_1B10360A4();
    sub_1B0F79004((uint64_t)v27, (uint64_t)&v29);
    v26 = 2;
    sub_1B10360A4();
    sub_1B0F79004((uint64_t)v27, (uint64_t)v30);
    type metadata accessor for Condition();
    v26 = 3;
    sub_1B0F524FC((unint64_t *)&qword_1EEEDF340, (uint64_t (*)(uint64_t))type metadata accessor for Condition, (uint64_t)&unk_1B10472CC);
    sub_1B10360BC();
    (*(void (**)(char *, _QWORD))(v31 + 8))(v10, 0);
    v30[15] = v27[0];
    sub_1B0F6D368((uint64_t)v28, v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    return sub_1B0F6D3A4((uint64_t)v28);
  }
}

uint64_t sub_1B0F8DC38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F8D874(a1, a2);
}

uint64_t sub_1B0F8DC4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0F8DC5C()
{
  sub_1B0F8DC9C();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0F8DC9C()
{
  unint64_t result;

  result = qword_1EEEDF310;
  if (!qword_1EEEDF310)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C2C0, &type metadata for IfView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF310);
  }
  return result;
}

unint64_t sub_1B0F8DCE0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1B0F8DD14();
  a1[2] = sub_1B0F8DD58();
  result = sub_1B0F8DD9C();
  a1[3] = result;
  return result;
}

unint64_t sub_1B0F8DD14()
{
  unint64_t result;

  result = qword_1EEEDF318;
  if (!qword_1EEEDF318)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C248, &type metadata for IfView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF318);
  }
  return result;
}

unint64_t sub_1B0F8DD58()
{
  unint64_t result;

  result = qword_1EEEDF320;
  if (!qword_1EEEDF320)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C210, &type metadata for IfView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF320);
  }
  return result;
}

unint64_t sub_1B0F8DD9C()
{
  unint64_t result;

  result = qword_1EEEDF328;
  if (!qword_1EEEDF328)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C270, &type metadata for IfView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF328);
  }
  return result;
}

unint64_t sub_1B0F8DDE0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EEEDEBE8;
  if (!qword_1EEEDEBE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDEBD8);
    v2 = sub_1B0F64174();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CE0798], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDEBE8);
  }
  return result;
}

unint64_t sub_1B0F8DE44()
{
  unint64_t result;

  result = qword_1EEEDF338;
  if (!qword_1EEEDF338)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C3D8, &type metadata for IfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF338);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IfView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8DED4 + 4 * byte_1B103C1FD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0F8DF08 + 4 * byte_1B103C1F8[v4]))();
}

uint64_t sub_1B0F8DF08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8DF10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8DF18);
  return result;
}

uint64_t sub_1B0F8DF24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8DF2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0F8DF30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8DF38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IfView.CodingKeys()
{
  return &type metadata for IfView.CodingKeys;
}

unint64_t sub_1B0F8DF58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDF348;
  if (!qword_1EEEDF348)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF350);
    v2[0] = sub_1B0F8DDE0();
    v2[1] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF348);
  }
  return result;
}

unint64_t sub_1B0F8DFC0()
{
  unint64_t result;

  result = qword_1EEEDF358;
  if (!qword_1EEEDF358)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C3B0, &type metadata for IfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF358);
  }
  return result;
}

unint64_t sub_1B0F8E008()
{
  unint64_t result;

  result = qword_1EEEDF360;
  if (!qword_1EEEDF360)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C2E8, &type metadata for IfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF360);
  }
  return result;
}

unint64_t sub_1B0F8E050()
{
  unint64_t result;

  result = qword_1EEEDF368;
  if (!qword_1EEEDF368)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C310, &type metadata for IfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF368);
  }
  return result;
}

uint64_t sub_1B0F8E094()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t destroy for PinnedScrollableViewsOptions(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2 & 1);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 != 255)
    return sub_1B0F5E6A0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3 & 1);
  return result;
}

uint64_t initializeWithCopy for PinnedScrollableViewsOptions(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1B0F5E604(*a2, v7, v8, v4 & 1);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v5;
  }
  v9 = *((unsigned __int8 *)a2 + 56);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  else
  {
    v10 = v9 & 1;
    v11 = a2[4];
    v12 = a2[5];
    v13 = a2[6];
    sub_1B0F5E604(v11, v12, v13, v9 & 1);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for PinnedScrollableViewsOptions(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v15 = v4 & 1;
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 2);
      sub_1B0F5E604(*(_QWORD *)a2, v17, v18, v4 & 1);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v15;
    }
  }
  else if (v4 == 255)
  {
    sub_1B0F8E3C0(a1);
    v5 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    sub_1B0F5E604(*(_QWORD *)a2, v9, v10, v4 & 1);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_BYTE *)(a1 + 24);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v7;
    sub_1B0F5E6A0(v11, v12, v13, v14);
  }
  v19 = (__int128 *)(a1 + 32);
  v20 = a2 + 2;
  v21 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v21 == 255)
    {
      v23 = *v20;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *v19 = v23;
    }
    else
    {
      v32 = v21 & 1;
      v33 = *((_QWORD *)a2 + 4);
      v34 = *((_QWORD *)a2 + 5);
      v35 = *((_QWORD *)a2 + 6);
      sub_1B0F5E604(v33, v34, v35, v21 & 1);
      *(_QWORD *)(a1 + 32) = v33;
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 48) = v35;
      *(_BYTE *)(a1 + 56) = v32;
    }
  }
  else if (v21 == 255)
  {
    sub_1B0F8E3C0(a1 + 32);
    v22 = *(__int128 *)((char *)a2 + 41);
    *v19 = *v20;
    *(_OWORD *)(a1 + 41) = v22;
  }
  else
  {
    v24 = v21 & 1;
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 5);
    v27 = *((_QWORD *)a2 + 6);
    sub_1B0F5E604(v25, v26, v27, v21 & 1);
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 48);
    v31 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)(a1 + 48) = v27;
    *(_BYTE *)(a1 + 56) = v24;
    sub_1B0F5E6A0(v28, v29, v30, v31);
  }
  return a1;
}

uint64_t sub_1B0F8E3C0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for PinnedScrollableViewsOptions(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 == 255)
  {
    sub_1B0F8E3C0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = v4 & 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  sub_1B0F5E6A0(v8, v9, v10, v6);
LABEL_6:
  v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 != 255)
  {
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (v12 != 255)
    {
      v13 = v11 & 1;
      v14 = *(_QWORD *)(a2 + 48);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v14;
      *(_BYTE *)(a1 + 56) = v12 & 1;
      sub_1B0F5E6A0(v15, v16, v17, v13);
      return a1;
    }
    sub_1B0F8E3C0(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinnedScrollableViewsOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PinnedScrollableViewsOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinnedScrollableViewsOptions()
{
  return &type metadata for PinnedScrollableViewsOptions;
}

uint64_t sub_1B0F8E59C(char a1)
{
  return qword_1B103C728[a1];
}

uint64_t sub_1B0F8E5BC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65746F6F466E6970;
  else
    return 0x65646165486E6970;
}

uint64_t sub_1B0F8E5F0(char *a1, char *a2)
{
  return sub_1B100E900(*a1, *a2);
}

uint64_t sub_1B0F8E5FC()
{
  return sub_1B1013DD0();
}

uint64_t sub_1B0F8E608()
{
  return sub_1B1013054();
}

uint64_t sub_1B0F8E610()
{
  return sub_1B1013DD0();
}

uint64_t sub_1B0F8E618@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F8EFB8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F8E644@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F8E59C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F8E66C()
{
  sub_1B0F8F3CC();
  return sub_1B1035CB4();
}

uint64_t sub_1B0F8E6C8()
{
  sub_1B0F8F3CC();
  return sub_1B1035CA8();
}

uint64_t sub_1B0F8E714(char *a1, char *a2)
{
  return sub_1B100C4F4(*a1, *a2);
}

uint64_t sub_1B0F8E720()
{
  return sub_1B100FFF8();
}

uint64_t sub_1B0F8E728()
{
  return sub_1B1011E80();
}

uint64_t sub_1B0F8E730()
{
  return sub_1B10156D8();
}

uint64_t sub_1B0F8E738@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F8E794@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F8E5BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F8E7BC()
{
  char *v0;

  return sub_1B0F8E5BC(*v0);
}

uint64_t sub_1B0F8E7C4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F8E824()
{
  sub_1B0F8F040();
  return sub_1B10362B4();
}

uint64_t sub_1B0F8E84C()
{
  sub_1B0F8F040();
  return sub_1B10362C0();
}

uint64_t sub_1B0F8E874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  v5 = sub_1B1034FE8();
  v31 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v30 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v29 = (char *)&v28 - v8;
  v10 = *(_QWORD *)v2;
  v9 = *(_QWORD *)(v2 + 8);
  v11 = *(_QWORD *)(v2 + 16);
  v12 = *(unsigned __int8 *)(v2 + 24);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v2 + 48);
  v33 = *(_QWORD *)(v2 + 32);
  v34 = v13;
  v35 = *(unsigned __int8 *)(v2 + 56);
  v36 = 0;
  sub_1B0F8F000(&qword_1EEEDF370, MEMORY[0x1E0CDBDD8]);
  v32 = a2;
  result = sub_1B10362CC();
  if (v12 == 255)
  {
    v16 = v14;
    v17 = v35;
    v19 = v33;
    v18 = v34;
  }
  else
  {
    sub_1B0F5E604(v10, v9, v11, v12 & 1);
    v20 = sub_1B0FD7528(a1, v10, v9, v11, v12 & 1);
    result = sub_1B0F5FD28(v10, v9, v11, v12);
    v16 = v14;
    v17 = v35;
    v19 = v33;
    v18 = v34;
    if ((v20 & 1) != 0)
    {
      v21 = (uint64_t)v30;
      sub_1B1034FDC();
      v22 = v29;
      sub_1B0F8EB00(v29, v21);
      v23 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v23(v21, v5);
      result = ((uint64_t (*)(char *, uint64_t))v23)(v22, v5);
    }
  }
  if (v17 != 255)
  {
    sub_1B0F5E604(v19, v18, v16, v17 & 1);
    v24 = sub_1B0FD7528(a1, v19, v18, v16, v17 & 1);
    result = sub_1B0F5FD28(v19, v18, v16, v17);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t)v30;
      sub_1B1034FD0();
      v26 = v29;
      sub_1B0F8EB00(v29, v25);
      v27 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v27(v25, v5);
      return ((uint64_t (*)(char *, uint64_t))v27)(v26, v5);
    }
  }
  return result;
}

uint64_t sub_1B0F8EB00(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;

  v28 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF378);
  v5 = MEMORY[0x1E0C80A78](v4);
  v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - v7;
  v9 = sub_1B1034FE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v25 = v2;
  v16(v13, v2, v9);
  sub_1B0F8F000(&qword_1EEEDF380, MEMORY[0x1E0CDBDD0]);
  sub_1B1035EA0();
  sub_1B0F8F000(&qword_1EEEDF388, MEMORY[0x1E0CDBDC8]);
  v24 = a2;
  v17 = sub_1B1035B7C() ^ 1;
  v27 = v4;
  v18 = &v8[*(int *)(v4 + 48)];
  *v8 = v17 & 1;
  if ((v17 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v20 = v24;
    v16(v18, v24, v9);
    v16(v13, v20, v9);
    sub_1B1035EB8();
    v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v18, v15, v9);
  }
  v21 = &v26[*(int *)(v27 + 48)];
  v19(v21, v18, v9);
  v19(v28, v21, v9);
  return v17 & 1;
}

uint64_t sub_1B0F8ED20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  char v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF390);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F8F040();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
  v33 = 0;
  sub_1B0F65238();
  sub_1B10360A4();
  v33 = 1;
  v26 = v29;
  v27 = v28;
  v25 = v30;
  v32 = v31;
  sub_1B0F5FD10(v28, v29, v30, v31);
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v9 = v28;
  v23 = v29;
  v24 = v28;
  v10 = v30;
  v22 = v30;
  v21 = v31;
  v12 = v26;
  v11 = v27;
  v13 = v25;
  v14 = v32;
  sub_1B0F5FD10(v27, v26, v25, v32);
  v15 = v9;
  v16 = v23;
  v17 = v10;
  LOBYTE(v10) = v21;
  sub_1B0F5FD10(v15, v23, v17, v21);
  sub_1B0F5FD28(v11, v12, v13, v14);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 40) = v16;
  v18 = v22;
  *(_QWORD *)(a2 + 48) = v22;
  *(_BYTE *)(a2 + 56) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F5FD28(v11, v12, v13, v14);
  return sub_1B0F5FD28(v24, v23, v18, v10);
}

uint64_t sub_1B0F8EFA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F8ED20(a1, a2);
}

uint64_t sub_1B0F8EFB8()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1B0F8F000(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1B1034FE8();
    result = MEMORY[0x1B5E15188](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0F8F040()
{
  unint64_t result;

  result = qword_1EEEDF398;
  if (!qword_1EEEDF398)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C6D4, &type metadata for PinnedScrollableViewsOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF398);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeSetString(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgeSetString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8F160 + 4 * byte_1B103C475[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B0F8F194 + 4 * byte_1B103C470[v4]))();
}

uint64_t sub_1B0F8F194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8F19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8F1A4);
  return result;
}

uint64_t sub_1B0F8F1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8F1B8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B0F8F1BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8F1C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeSetString()
{
  return &type metadata for EdgeSetString;
}

uint64_t storeEnumTagSinglePayload for PinnedScrollableViewsOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F8F22C + 4 * byte_1B103C47F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F8F260 + 4 * byte_1B103C47A[v4]))();
}

uint64_t sub_1B0F8F260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8F268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F8F270);
  return result;
}

uint64_t sub_1B0F8F27C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F8F284);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F8F288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F8F290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinnedScrollableViewsOptions.CodingKeys()
{
  return &type metadata for PinnedScrollableViewsOptions.CodingKeys;
}

unint64_t sub_1B0F8F2B0()
{
  unint64_t result;

  result = qword_1EEEDF3A0;
  if (!qword_1EEEDF3A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C5BC, &type metadata for PinnedScrollableViewsOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3A0);
  }
  return result;
}

unint64_t sub_1B0F8F2F8()
{
  unint64_t result;

  result = qword_1EEEDF3A8;
  if (!qword_1EEEDF3A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C684, &type metadata for EdgeSetString);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3A8);
  }
  return result;
}

unint64_t sub_1B0F8F340()
{
  unint64_t result;

  result = qword_1EEEDF3B0;
  if (!qword_1EEEDF3B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C4F4, &type metadata for PinnedScrollableViewsOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3B0);
  }
  return result;
}

unint64_t sub_1B0F8F388()
{
  unint64_t result;

  result = qword_1EEEDF3B8;
  if (!qword_1EEEDF3B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C51C, &type metadata for PinnedScrollableViewsOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3B8);
  }
  return result;
}

unint64_t sub_1B0F8F3CC()
{
  unint64_t result;

  result = qword_1EEEDF3C0;
  if (!qword_1EEEDF3C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C60C, &type metadata for EdgeSetString);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BaselineOffsetModifier()
{
  return &type metadata for BaselineOffsetModifier;
}

ValueMetadata *type metadata accessor for TrackingModifier()
{
  return &type metadata for TrackingModifier;
}

ValueMetadata *type metadata accessor for KerningModifier()
{
  return &type metadata for KerningModifier;
}

ValueMetadata *type metadata accessor for MonospacedDigitModifier()
{
  return &type metadata for MonospacedDigitModifier;
}

ValueMetadata *type metadata accessor for MonospacedModifier()
{
  return &type metadata for MonospacedModifier;
}

uint64_t _s6LiftUI18MonospacedModifierVwca_0(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v15 = v4 & 1;
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 2);
      sub_1B0F5E604(*(_QWORD *)a2, v17, v18, v4 & 1);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v15;
    }
  }
  else if (v4 == 255)
  {
    sub_1B0F5A3AC(a1, &qword_1EEEDE7E8);
    v5 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    sub_1B0F5E604(*(_QWORD *)a2, v9, v10, v4 & 1);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_BYTE *)(a1 + 24);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v7;
    sub_1B0F5E6A0(v11, v12, v13, v14);
  }
  return a1;
}

uint64_t _s6LiftUI18MonospacedModifierVwta_0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 != 255)
  {
    v5 = *(unsigned __int8 *)(a2 + 24);
    if (v5 != 255)
    {
      v6 = v4 & 1;
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 24) = v5 & 1;
      sub_1B0F5E6A0(v8, v9, v10, v6);
      return a1;
    }
    sub_1B0F5A3AC(a1, &qword_1EEEDE7E8);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  return a1;
}

ValueMetadata *type metadata accessor for ItalicModifier()
{
  return &type metadata for ItalicModifier;
}

uint64_t destroy for ClippedModifier(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 24);
  if (v1 != 255)
    return sub_1B0F5E6A0(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v1 & 1);
  return result;
}

uint64_t initializeWithCopy for ClippedModifier(uint64_t a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((unsigned __int8 *)a2 + 24);
  if (v3 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v4 = v3 & 1;
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    sub_1B0F5E604(*a2, v6, v7, v3 & 1);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ClippedModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClippedModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BoldModifier()
{
  return &type metadata for BoldModifier;
}

uint64_t destroy for FontModifier(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFD)
    result = sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 88);
  if (v3 != 254)
  {
    v4 = *(unsigned __int8 *)(v1 + 56);
    if (v4 <= 0xFD)
      result = sub_1B0F6C7D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v4);
    if (v3 != 255)
      result = sub_1B0F56B08(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v3 & 1);
    v5 = *(unsigned __int8 *)(v1 + 120);
    if (v5 != 255)
      result = sub_1B0F56B08(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), v5 & 1);
    v6 = *(unsigned __int8 *)(v1 + 152);
    if (v6 != 255)
      return sub_1B0F56B08(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), v6 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for FontModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B0F56B9C(*(_QWORD *)a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  v8 = (_OWORD *)(a1 + 32);
  v9 = (_OWORD *)(a2 + 32);
  v10 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == 254)
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v12 = *(_OWORD *)(a2 + 48);
    *v8 = *v9;
    *(_OWORD *)(a1 + 48) = v12;
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    return a1;
  }
  v14 = *(unsigned __int8 *)(a2 + 56);
  if (v14 <= 0xFD)
  {
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 40);
    v20 = *(_QWORD *)(a2 + 48);
    sub_1B0F6C708(v18, v19, v20, *(_BYTE *)(a2 + 56));
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 48) = v20;
    *(_BYTE *)(a1 + 56) = v14;
    if (v10 != 255)
      goto LABEL_8;
LABEL_10:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_11;
  }
  *v8 = *v9;
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  if (v10 == 255)
    goto LABEL_10;
LABEL_8:
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  sub_1B0F56BC8(v15, v16, v17, v10 & 1);
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = v10 & 1;
LABEL_11:
  v21 = *(unsigned __int8 *)(a2 + 120);
  if (v21 == 255)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  }
  else
  {
    v22 = v21 & 1;
    v23 = *(_QWORD *)(a2 + 96);
    v24 = *(_QWORD *)(a2 + 104);
    v25 = *(_QWORD *)(a2 + 112);
    sub_1B0F56BC8(v23, v24, v25, v21 & 1);
    *(_QWORD *)(a1 + 96) = v23;
    *(_QWORD *)(a1 + 104) = v24;
    *(_QWORD *)(a1 + 112) = v25;
    *(_BYTE *)(a1 + 120) = v22;
  }
  v26 = *(unsigned __int8 *)(a2 + 152);
  if (v26 == 255)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  }
  else
  {
    v27 = v26 & 1;
    v28 = *(_QWORD *)(a2 + 128);
    v29 = *(_QWORD *)(a2 + 136);
    v30 = *(_QWORD *)(a2 + 144);
    sub_1B0F56BC8(v28, v29, v30, v26 & 1);
    *(_QWORD *)(a1 + 128) = v28;
    *(_QWORD *)(a1 + 136) = v29;
    *(_QWORD *)(a1 + 144) = v30;
    *(_BYTE *)(a1 + 152) = v27;
  }
  return a1;
}

uint64_t assignWithCopy for FontModifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  __int128 v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 *v64;
  __int128 *v65;
  int v66;
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  int v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F56ADC(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F5EA14(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F56B9C(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  v17 = (__int128 *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 254)
  {
    if (v19 == 254)
    {
      v20 = *v18;
      v21 = a2[3];
      v22 = a2[5];
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_OWORD *)(a1 + 80) = v22;
      *v17 = v20;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = a2[6];
      v24 = a2[7];
      v25 = a2[8];
      *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
      *(_OWORD *)(a1 + 112) = v24;
      *(_OWORD *)(a1 + 128) = v25;
      *(_OWORD *)(a1 + 96) = v23;
      return a1;
    }
    v32 = *((unsigned __int8 *)a2 + 56);
    if (v32 <= 0xFD)
    {
      v36 = *((_QWORD *)a2 + 4);
      v37 = *((_QWORD *)a2 + 5);
      v38 = *((_QWORD *)a2 + 6);
      sub_1B0F6C708(v36, v37, v38, *((_BYTE *)a2 + 56));
      *(_QWORD *)(a1 + 32) = v36;
      *(_QWORD *)(a1 + 40) = v37;
      *(_QWORD *)(a1 + 48) = v38;
      *(_BYTE *)(a1 + 56) = v32;
    }
    else
    {
      v33 = *v18;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *v17 = v33;
    }
    v39 = *((unsigned __int8 *)a2 + 88);
    if (v39 == 255)
    {
      v40 = a2[4];
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *(_OWORD *)(a1 + 64) = v40;
    }
    else
    {
      v42 = v39 & 1;
      v43 = *((_QWORD *)a2 + 8);
      v44 = *((_QWORD *)a2 + 9);
      v45 = *((_QWORD *)a2 + 10);
      sub_1B0F56BC8(v43, v44, v45, v39 & 1);
      *(_QWORD *)(a1 + 64) = v43;
      *(_QWORD *)(a1 + 72) = v44;
      *(_QWORD *)(a1 + 80) = v45;
      *(_BYTE *)(a1 + 88) = v42;
    }
    v46 = *((unsigned __int8 *)a2 + 120);
    if (v46 == 255)
    {
      v47 = a2[6];
      *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
      *(_OWORD *)(a1 + 96) = v47;
    }
    else
    {
      v48 = v46 & 1;
      v49 = *((_QWORD *)a2 + 12);
      v50 = *((_QWORD *)a2 + 13);
      v51 = *((_QWORD *)a2 + 14);
      sub_1B0F56BC8(v49, v50, v51, v46 & 1);
      *(_QWORD *)(a1 + 96) = v49;
      *(_QWORD *)(a1 + 104) = v50;
      *(_QWORD *)(a1 + 112) = v51;
      *(_BYTE *)(a1 + 120) = v48;
    }
    v52 = *((unsigned __int8 *)a2 + 152);
    if (v52 == 255)
    {
      v53 = a2[8];
      *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
      *(_OWORD *)(a1 + 128) = v53;
      return a1;
    }
LABEL_50:
    v102 = v52 & 1;
    v103 = *((_QWORD *)a2 + 16);
    v104 = *((_QWORD *)a2 + 17);
    v105 = *((_QWORD *)a2 + 18);
    sub_1B0F56BC8(v103, v104, v105, v52 & 1);
    *(_QWORD *)(a1 + 128) = v103;
    *(_QWORD *)(a1 + 136) = v104;
    *(_QWORD *)(a1 + 144) = v105;
    *(_BYTE *)(a1 + 152) = v102;
    return a1;
  }
  if (v19 == 254)
  {
    sub_1B0F8FFB8(a1 + 32);
    v26 = a2[5];
    v28 = *v18;
    v27 = a2[3];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v26;
    *v17 = v28;
    *(_OWORD *)(a1 + 48) = v27;
    v30 = a2[7];
    v29 = a2[8];
    v31 = a2[6];
    *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
    *(_OWORD *)(a1 + 112) = v30;
    *(_OWORD *)(a1 + 128) = v29;
    *(_OWORD *)(a1 + 96) = v31;
    return a1;
  }
  v34 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v34 <= 0xFD)
    {
      v57 = *((_QWORD *)a2 + 4);
      v58 = *((_QWORD *)a2 + 5);
      v59 = *((_QWORD *)a2 + 6);
      sub_1B0F6C708(v57, v58, v59, *((_BYTE *)a2 + 56));
      v60 = *(_QWORD *)(a1 + 32);
      v61 = *(_QWORD *)(a1 + 40);
      v62 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v57;
      *(_QWORD *)(a1 + 40) = v58;
      *(_QWORD *)(a1 + 48) = v59;
      v63 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v34;
      sub_1B0F6C7D4(v60, v61, v62, v63);
    }
    else
    {
      sub_1B0F7A924(a1 + 32);
      v41 = *(__int128 *)((char *)a2 + 41);
      *v17 = *v18;
      *(_OWORD *)(a1 + 41) = v41;
    }
  }
  else if (v34 <= 0xFD)
  {
    v54 = *((_QWORD *)a2 + 4);
    v55 = *((_QWORD *)a2 + 5);
    v56 = *((_QWORD *)a2 + 6);
    sub_1B0F6C708(v54, v55, v56, *((_BYTE *)a2 + 56));
    *(_QWORD *)(a1 + 32) = v54;
    *(_QWORD *)(a1 + 40) = v55;
    *(_QWORD *)(a1 + 48) = v56;
    *(_BYTE *)(a1 + 56) = v34;
  }
  else
  {
    v35 = *v18;
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *v17 = v35;
  }
  v64 = (__int128 *)(a1 + 64);
  v65 = a2 + 4;
  v66 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v66 == 255)
    {
      v68 = *v65;
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v64 = v68;
    }
    else
    {
      v77 = v66 & 1;
      v78 = *((_QWORD *)a2 + 8);
      v79 = *((_QWORD *)a2 + 9);
      v80 = *((_QWORD *)a2 + 10);
      sub_1B0F56BC8(v78, v79, v80, v66 & 1);
      *(_QWORD *)(a1 + 64) = v78;
      *(_QWORD *)(a1 + 72) = v79;
      *(_QWORD *)(a1 + 80) = v80;
      *(_BYTE *)(a1 + 88) = v77;
    }
  }
  else if (v66 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDF3C8);
    v67 = *(__int128 *)((char *)a2 + 73);
    *v64 = *v65;
    *(_OWORD *)(a1 + 73) = v67;
  }
  else
  {
    v69 = v66 & 1;
    v70 = *((_QWORD *)a2 + 8);
    v71 = *((_QWORD *)a2 + 9);
    v72 = *((_QWORD *)a2 + 10);
    sub_1B0F56BC8(v70, v71, v72, v66 & 1);
    v73 = *(_QWORD *)(a1 + 64);
    v74 = *(_QWORD *)(a1 + 72);
    v75 = *(_QWORD *)(a1 + 80);
    v76 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = v70;
    *(_QWORD *)(a1 + 72) = v71;
    *(_QWORD *)(a1 + 80) = v72;
    *(_BYTE *)(a1 + 88) = v69;
    sub_1B0F56B08(v73, v74, v75, v76);
  }
  v81 = (__int128 *)(a1 + 96);
  v82 = a2 + 6;
  v83 = *((unsigned __int8 *)a2 + 120);
  if (*(unsigned __int8 *)(a1 + 120) == 255)
  {
    if (v83 == 255)
    {
      v85 = *v82;
      *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
      *v81 = v85;
    }
    else
    {
      v94 = v83 & 1;
      v95 = *((_QWORD *)a2 + 12);
      v96 = *((_QWORD *)a2 + 13);
      v97 = *((_QWORD *)a2 + 14);
      sub_1B0F56BC8(v95, v96, v97, v83 & 1);
      *(_QWORD *)(a1 + 96) = v95;
      *(_QWORD *)(a1 + 104) = v96;
      *(_QWORD *)(a1 + 112) = v97;
      *(_BYTE *)(a1 + 120) = v94;
    }
  }
  else if (v83 == 255)
  {
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDF3C8);
    v84 = *(__int128 *)((char *)a2 + 105);
    *v81 = *v82;
    *(_OWORD *)(a1 + 105) = v84;
  }
  else
  {
    v86 = v83 & 1;
    v87 = *((_QWORD *)a2 + 12);
    v88 = *((_QWORD *)a2 + 13);
    v89 = *((_QWORD *)a2 + 14);
    sub_1B0F56BC8(v87, v88, v89, v83 & 1);
    v90 = *(_QWORD *)(a1 + 96);
    v91 = *(_QWORD *)(a1 + 104);
    v92 = *(_QWORD *)(a1 + 112);
    v93 = *(_BYTE *)(a1 + 120);
    *(_QWORD *)(a1 + 96) = v87;
    *(_QWORD *)(a1 + 104) = v88;
    *(_QWORD *)(a1 + 112) = v89;
    *(_BYTE *)(a1 + 120) = v86;
    sub_1B0F56B08(v90, v91, v92, v93);
  }
  v98 = (__int128 *)(a1 + 128);
  v99 = a2 + 8;
  v52 = *((unsigned __int8 *)a2 + 152);
  if (*(unsigned __int8 *)(a1 + 152) == 255)
  {
    if (v52 == 255)
    {
      v101 = *v99;
      *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
      *v98 = v101;
      return a1;
    }
    goto LABEL_50;
  }
  if (v52 == 255)
  {
    sub_1B0F5A3AC(a1 + 128, &qword_1EEEDF3C8);
    v100 = *(__int128 *)((char *)a2 + 137);
    *v98 = *v99;
    *(_OWORD *)(a1 + 137) = v100;
  }
  else
  {
    v106 = v52 & 1;
    v107 = *((_QWORD *)a2 + 16);
    v108 = *((_QWORD *)a2 + 17);
    v109 = *((_QWORD *)a2 + 18);
    sub_1B0F56BC8(v107, v108, v109, v52 & 1);
    v110 = *(_QWORD *)(a1 + 128);
    v111 = *(_QWORD *)(a1 + 136);
    v112 = *(_QWORD *)(a1 + 144);
    v113 = *(_BYTE *)(a1 + 152);
    *(_QWORD *)(a1 + 128) = v107;
    *(_QWORD *)(a1 + 136) = v108;
    *(_QWORD *)(a1 + 144) = v109;
    *(_BYTE *)(a1 + 152) = v106;
    sub_1B0F56B08(v110, v111, v112, v113);
  }
  return a1;
}

uint64_t sub_1B0F8FFB8(uint64_t a1)
{
  destroy for SystemFontOptions(a1);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FontModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 88) == 254)
  {
LABEL_9:
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v14 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v14;
    v15 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v15;
    return a1;
  }
  v12 = *(unsigned __int8 *)(a2 + 88);
  if (v12 == 254)
  {
    sub_1B0F8FFB8(a1 + 32);
    goto LABEL_9;
  }
  v16 = *(unsigned __int8 *)(a1 + 56);
  if (v16 > 0xFD)
    goto LABEL_13;
  v17 = *(unsigned __int8 *)(a2 + 56);
  if (v17 > 0xFD)
  {
    sub_1B0F7A924(a1 + 32);
LABEL_13:
    *v10 = *v11;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v18;
  *(_BYTE *)(a1 + 56) = v17;
  sub_1B0F6C7D4(v19, v20, v21, v16);
LABEL_15:
  v22 = *(unsigned __int8 *)(a1 + 88);
  if (v22 == 255)
  {
LABEL_18:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_20;
  }
  if (v12 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDF3C8);
    goto LABEL_18;
  }
  v23 = v22 & 1;
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v24;
  *(_BYTE *)(a1 + 88) = v12 & 1;
  sub_1B0F56B08(v25, v26, v27, v23);
LABEL_20:
  v28 = *(unsigned __int8 *)(a1 + 120);
  if (v28 != 255)
  {
    v29 = *(unsigned __int8 *)(a2 + 120);
    if (v29 != 255)
    {
      v30 = v28 & 1;
      v31 = *(_QWORD *)(a2 + 112);
      v32 = *(_QWORD *)(a1 + 96);
      v33 = *(_QWORD *)(a1 + 104);
      v34 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = v31;
      *(_BYTE *)(a1 + 120) = v29 & 1;
      sub_1B0F56B08(v32, v33, v34, v30);
      goto LABEL_25;
    }
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDF3C8);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
LABEL_25:
  v35 = *(unsigned __int8 *)(a1 + 152);
  if (v35 != 255)
  {
    v36 = *(unsigned __int8 *)(a2 + 152);
    if (v36 != 255)
    {
      v37 = v35 & 1;
      v38 = *(_QWORD *)(a2 + 144);
      v39 = *(_QWORD *)(a1 + 128);
      v40 = *(_QWORD *)(a1 + 136);
      v41 = *(_QWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = v38;
      *(_BYTE *)(a1 + 152) = v36 & 1;
      sub_1B0F56B08(v39, v40, v41, v37);
      return a1;
    }
    sub_1B0F5A3AC(a1 + 128, &qword_1EEEDF3C8);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 88);
  v4 = v3 ^ 0xFF;
  if ((int)(v3 ^ 0xFF) <= 1)
    v4 = 1;
  v5 = v4 - 2;
  if (v3 <= 1)
    v6 = -1;
  else
    v6 = v5;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for FontModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = -2 - a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontModifier()
{
  return &type metadata for FontModifier;
}

uint64_t destroy for SystemFontOptions(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFD)
    result = sub_1B0F6C7D4(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 != 255)
    result = sub_1B0F56B08(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3 & 1);
  v4 = *(unsigned __int8 *)(v1 + 88);
  if (v4 != 255)
    result = sub_1B0F56B08(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v4 & 1);
  v5 = *(unsigned __int8 *)(v1 + 120);
  if (v5 != 255)
    return sub_1B0F56B08(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), v5 & 1);
  return result;
}

uint64_t initializeWithCopy for SystemFontOptions(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B0F6C708(*(_QWORD *)a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  else
  {
    v9 = v8 & 1;
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    sub_1B0F56BC8(v10, v11, v12, v8 & 1);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v9;
  }
  v13 = *(unsigned __int8 *)(a2 + 88);
  if (v13 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    v14 = v13 & 1;
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(_QWORD *)(a2 + 80);
    sub_1B0F56BC8(v15, v16, v17, v13 & 1);
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v17;
    *(_BYTE *)(a1 + 88) = v14;
  }
  v18 = *(unsigned __int8 *)(a2 + 120);
  if (v18 == 255)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  }
  else
  {
    v19 = v18 & 1;
    v20 = *(_QWORD *)(a2 + 96);
    v21 = *(_QWORD *)(a2 + 104);
    v22 = *(_QWORD *)(a2 + 112);
    sub_1B0F56BC8(v20, v21, v22, v18 & 1);
    *(_QWORD *)(a1 + 96) = v20;
    *(_QWORD *)(a1 + 104) = v21;
    *(_QWORD *)(a1 + 112) = v22;
    *(_BYTE *)(a1 + 120) = v19;
  }
  return a1;
}

uint64_t assignWithCopy for SystemFontOptions(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 *v17;
  __int128 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  int v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F6C708(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F6C7D4(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F7A924(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F6C708(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  v17 = (__int128 *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v19 == 255)
    {
      v21 = *v18;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *v17 = v21;
    }
    else
    {
      v30 = v19 & 1;
      v31 = *((_QWORD *)a2 + 4);
      v32 = *((_QWORD *)a2 + 5);
      v33 = *((_QWORD *)a2 + 6);
      sub_1B0F56BC8(v31, v32, v33, v19 & 1);
      *(_QWORD *)(a1 + 32) = v31;
      *(_QWORD *)(a1 + 40) = v32;
      *(_QWORD *)(a1 + 48) = v33;
      *(_BYTE *)(a1 + 56) = v30;
    }
  }
  else if (v19 == 255)
  {
    sub_1B0F5A3AC(a1 + 32, &qword_1EEEDF3C8);
    v20 = *(__int128 *)((char *)a2 + 41);
    *v17 = *v18;
    *(_OWORD *)(a1 + 41) = v20;
  }
  else
  {
    v22 = v19 & 1;
    v23 = *((_QWORD *)a2 + 4);
    v24 = *((_QWORD *)a2 + 5);
    v25 = *((_QWORD *)a2 + 6);
    sub_1B0F56BC8(v23, v24, v25, v19 & 1);
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(_QWORD *)(a1 + 40);
    v28 = *(_QWORD *)(a1 + 48);
    v29 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v24;
    *(_QWORD *)(a1 + 48) = v25;
    *(_BYTE *)(a1 + 56) = v22;
    sub_1B0F56B08(v26, v27, v28, v29);
  }
  v34 = (__int128 *)(a1 + 64);
  v35 = a2 + 4;
  v36 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v36 == 255)
    {
      v38 = *v35;
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v34 = v38;
    }
    else
    {
      v47 = v36 & 1;
      v48 = *((_QWORD *)a2 + 8);
      v49 = *((_QWORD *)a2 + 9);
      v50 = *((_QWORD *)a2 + 10);
      sub_1B0F56BC8(v48, v49, v50, v36 & 1);
      *(_QWORD *)(a1 + 64) = v48;
      *(_QWORD *)(a1 + 72) = v49;
      *(_QWORD *)(a1 + 80) = v50;
      *(_BYTE *)(a1 + 88) = v47;
    }
  }
  else if (v36 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDF3C8);
    v37 = *(__int128 *)((char *)a2 + 73);
    *v34 = *v35;
    *(_OWORD *)(a1 + 73) = v37;
  }
  else
  {
    v39 = v36 & 1;
    v40 = *((_QWORD *)a2 + 8);
    v41 = *((_QWORD *)a2 + 9);
    v42 = *((_QWORD *)a2 + 10);
    sub_1B0F56BC8(v40, v41, v42, v36 & 1);
    v43 = *(_QWORD *)(a1 + 64);
    v44 = *(_QWORD *)(a1 + 72);
    v45 = *(_QWORD *)(a1 + 80);
    v46 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = v40;
    *(_QWORD *)(a1 + 72) = v41;
    *(_QWORD *)(a1 + 80) = v42;
    *(_BYTE *)(a1 + 88) = v39;
    sub_1B0F56B08(v43, v44, v45, v46);
  }
  v51 = (__int128 *)(a1 + 96);
  v52 = a2 + 6;
  v53 = *((unsigned __int8 *)a2 + 120);
  if (*(unsigned __int8 *)(a1 + 120) == 255)
  {
    if (v53 == 255)
    {
      v55 = *v52;
      *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
      *v51 = v55;
    }
    else
    {
      v64 = v53 & 1;
      v65 = *((_QWORD *)a2 + 12);
      v66 = *((_QWORD *)a2 + 13);
      v67 = *((_QWORD *)a2 + 14);
      sub_1B0F56BC8(v65, v66, v67, v53 & 1);
      *(_QWORD *)(a1 + 96) = v65;
      *(_QWORD *)(a1 + 104) = v66;
      *(_QWORD *)(a1 + 112) = v67;
      *(_BYTE *)(a1 + 120) = v64;
    }
  }
  else if (v53 == 255)
  {
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDF3C8);
    v54 = *(__int128 *)((char *)a2 + 105);
    *v51 = *v52;
    *(_OWORD *)(a1 + 105) = v54;
  }
  else
  {
    v56 = v53 & 1;
    v57 = *((_QWORD *)a2 + 12);
    v58 = *((_QWORD *)a2 + 13);
    v59 = *((_QWORD *)a2 + 14);
    sub_1B0F56BC8(v57, v58, v59, v53 & 1);
    v60 = *(_QWORD *)(a1 + 96);
    v61 = *(_QWORD *)(a1 + 104);
    v62 = *(_QWORD *)(a1 + 112);
    v63 = *(_BYTE *)(a1 + 120);
    *(_QWORD *)(a1 + 96) = v57;
    *(_QWORD *)(a1 + 104) = v58;
    *(_QWORD *)(a1 + 112) = v59;
    *(_BYTE *)(a1 + 120) = v56;
    sub_1B0F56B08(v60, v61, v62, v63);
  }
  return a1;
}

uint64_t assignWithTake for SystemFontOptions(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 > 0xFD)
  {
    sub_1B0F7A924(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F6C7D4(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 == 255)
  {
    sub_1B0F5A3AC(a1 + 32, &qword_1EEEDF3C8);
    goto LABEL_9;
  }
  v12 = v10 & 1;
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 56) = v11 & 1;
  sub_1B0F56B08(v14, v15, v16, v12);
LABEL_11:
  v17 = *(unsigned __int8 *)(a1 + 88);
  if (v17 == 255)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_16;
  }
  v18 = *(unsigned __int8 *)(a2 + 88);
  if (v18 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDF3C8);
    goto LABEL_14;
  }
  v19 = v17 & 1;
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v20;
  *(_BYTE *)(a1 + 88) = v18 & 1;
  sub_1B0F56B08(v21, v22, v23, v19);
LABEL_16:
  v24 = *(unsigned __int8 *)(a1 + 120);
  if (v24 != 255)
  {
    v25 = *(unsigned __int8 *)(a2 + 120);
    if (v25 != 255)
    {
      v26 = v24 & 1;
      v27 = *(_QWORD *)(a2 + 112);
      v28 = *(_QWORD *)(a1 + 96);
      v29 = *(_QWORD *)(a1 + 104);
      v30 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = v27;
      *(_BYTE *)(a1 + 120) = v25 & 1;
      sub_1B0F56B08(v28, v29, v30, v26);
      return a1;
    }
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDF3C8);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFontOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemFontOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemFontOptions()
{
  return &type metadata for SystemFontOptions;
}

uint64_t sub_1B0F90B34(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)&sub_1B0F90B50 + 4 * byte_1B103C7A0[a1]))();
}

uint64_t sub_1B0F90B7C(char a1)
{
  return *(_QWORD *)&aSize_2[8 * a1];
}

uint64_t sub_1B0F90B9C(char *a1, char *a2)
{
  return sub_1B100D6A8(*a1, *a2);
}

uint64_t sub_1B0F90BA8()
{
  return sub_1B1010074();
}

uint64_t sub_1B0F90BB0()
{
  return sub_1B1012738();
}

uint64_t sub_1B0F90BB8()
{
  return sub_1B1014A84();
}

uint64_t sub_1B0F90BC0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F93D74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F90BEC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F90B7C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F90C14()
{
  char *v0;

  return sub_1B0F90B7C(*v0);
}

uint64_t sub_1B0F90C1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F93D74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F90C40()
{
  sub_1B0F9331C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F90C68()
{
  sub_1B0F9331C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F90C90@<X0>(_QWORD *a1@<X0>, unsigned __int128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  unsigned __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int128 v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned __int128 v38;
  unsigned __int128 *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int128 v43;
  unsigned __int128 v44;
  unsigned __int128 v45;
  unsigned __int128 v46;
  unsigned __int128 v47;
  unsigned __int128 v48;
  _OWORD v49[2];
  unsigned __int128 v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  char v69;

  v39 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF4A8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F9331C();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v36 = v5;
  v37 = a1;
  LOBYTE(v43) = 0;
  sub_1B0F7E5F8();
  sub_1B10360A4();
  v40 = v7;
  v9 = v50;
  v10 = v51;
  v11 = v52;
  v41 = v51;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF3C8);
  LOBYTE(v43) = 0;
  v38 = v9;
  v68 = v11;
  sub_1B0F6C6F4(v9, *((uint64_t *)&v9 + 1), v10, v11);
  sub_1B0F5A7E4(&qword_1EEEDF4B8, &qword_1EEEDF3C8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
  v12 = v4;
  sub_1B10360A4();
  v13 = *((_QWORD *)&v50 + 1);
  v14 = v51;
  LOBYTE(v43) = 1;
  v42 = v50;
  v15 = v52;
  sub_1B0F92EA8(v50, *((uint64_t *)&v50 + 1), v51, v52);
  v16 = v40;
  sub_1B10360A4();
  v34 = v15;
  v32 = v13;
  v33 = v14;
  v17 = v50;
  v18 = v51;
  v69 = 2;
  v35 = v52;
  sub_1B0F92EA8(v50, *((uint64_t *)&v50 + 1), v51, v52);
  v30 = 0;
  sub_1B10360A4();
  v31 = v17;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v12);
  v36 = *((_QWORD *)&v65 + 1);
  v40 = (char *)v65;
  v30 = v66;
  v29 = v67;
  v43 = v38;
  v19 = v42;
  *(_QWORD *)&v44 = v41;
  BYTE8(v44) = v68;
  v20 = v32;
  *(_QWORD *)&v45 = v42;
  *((_QWORD *)&v45 + 1) = v32;
  *(_QWORD *)&v46 = v33;
  LOBYTE(v10) = v34;
  LOBYTE(v12) = v35;
  BYTE8(v46) = v34;
  v47 = v17;
  *(_QWORD *)&v48 = v18;
  BYTE8(v48) = v35;
  v49[0] = v65;
  *(_QWORD *)&v49[1] = v66;
  BYTE8(v49[1]) = v67;
  sub_1B0F93360((uint64_t)&v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B0F6C6F4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92EA8);
  sub_1B0F92F34(v17, *((uint64_t *)&v17 + 1), v18, v12);
  v21 = v33;
  sub_1B0F92F34(v19, v20, v33, v10);
  v22 = v38;
  v23 = v41;
  LOBYTE(v19) = v68;
  sub_1B0F6C7C0(v38, *((uint64_t *)&v38 + 1), v41, v68);
  v24 = v48;
  v25 = v39;
  v39[4] = v47;
  v25[5] = v24;
  v25[6] = v49[0];
  *(unsigned __int128 *)((char *)v25 + 105) = *(_OWORD *)((char *)v49 + 9);
  v26 = v44;
  *v25 = v43;
  v25[1] = v26;
  v27 = v46;
  v25[2] = v45;
  v25[3] = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  v50 = __PAIR128__(*((unint64_t *)&v38 + 1), v22);
  v51 = v23;
  v52 = v19;
  v53 = v42;
  v54 = v32;
  v55 = v21;
  v56 = v34;
  v57 = v31;
  v58 = *((_QWORD *)&v17 + 1);
  v59 = v18;
  v60 = v35;
  v61 = v40;
  v62 = v36;
  v63 = v30;
  v64 = v29;
  return sub_1B0F93360((uint64_t)&v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B0F6C7C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92F34);
}

void sub_1B0F911C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  _DWORD v20[2];
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF428);
  MEMORY[0x1E0C80A78](v3);
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 16);
  v22 = *(_QWORD *)(v1 + 8);
  v23 = v5;
  v7 = *(unsigned __int8 *)(v1 + 24);
  v8 = *(unsigned __int8 *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v27 = *(_QWORD *)(v1 + 72);
  v28 = v9;
  v10 = *(_QWORD *)(v1 + 80);
  v30 = *(unsigned __int8 *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 96);
  v25 = *(_QWORD *)(v1 + 104);
  v26 = v10;
  v24 = *(_QWORD *)(v1 + 112);
  v12 = *(unsigned __int8 *)(v1 + 120);
  v31 = a1;
  v29 = v11;
  if (v8 != 255)
  {
    v20[1] = v12;
    v21 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = *(_QWORD *)(v1 + 32);
    v14 = *(_QWORD *)(v1 + 40);
    v15 = *(_QWORD *)(v1 + 48);
    sub_1B0F56BC8(v13, v14, v15, v8 & 1);
    sub_1B0FD70A8(a1, v13, v14, v15, v8 & 1);
    sub_1B0F92F34(v13, v14, v15, v8);
    v16 = (char *)&loc_1B0F912E4 + 4 * a17C[sub_1B0F8CC80()];
    __asm { BR              X10 }
  }
  if (v7 <= 0xFD)
  {
    v32 = v23;
    v33 = v22;
    v34 = v6;
    v35 = v7;
    sub_1B0F6C708(v23, v22, v6, v7);
    sub_1B0FA70A4(v31);
    sub_1B0F6C7C0(v23, v22, v6, v7);
  }
  v17 = v25;
  v25 = 0x72616C75676572;
  if (v30 != 255)
  {
    sub_1B0F56BC8(v28, v27, v26, v30 & 1);
    v25 = sub_1B0FD70A8(v31, v28, v27, v26, v30 & 1);
    sub_1B0F92F34(v28, v27, v26, v30);
    v11 = v29;
  }
  if (v12 != 255)
  {
    sub_1B0F56BC8(v11, v17, v24, v12 & 1);
    sub_1B0FD70A8(v31, v11, v17, v24, v12 & 1);
    sub_1B0F92F34(v11, v17, v24, v12);
  }
  v18 = sub_1B0F92E18();
  if (v18 == 9)
    v19 = 5;
  else
    v19 = v18;
  sub_1B0F8CC80();
  __asm { BR              X10 }
}

uint64_t sub_1B0F91580()
{
  unsigned __int8 v0;
  uint64_t v1;

  v1 = sub_1B10351EC();
  return ((uint64_t (*)(uint64_t))((char *)sub_1B0F915E4 + 4 * byte_1B103C7B9[v0]))(v1);
}

uint64_t sub_1B0F915E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *MEMORY[0x1E0CDD548];
  v2 = sub_1B10351BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
  sub_1B10351BC();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 0, 1, v2);
  v3 = sub_1B1035234();
  sub_1B0F5A3AC(v0, &qword_1EEEDF428);
  return v3;
}

uint64_t sub_1B0F916B0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D6574737973;
  else
    return 0x656C797473;
}

uint64_t sub_1B0F916E0@<X0>(_QWORD *a1@<X0>, unsigned __int128 *a2@<X8>)
{
  return sub_1B0F90C90(a1, a2);
}

uint64_t sub_1B0F916F4(char *a1, char *a2)
{
  return sub_1B100EB10(*a1, *a2);
}

uint64_t sub_1B0F91700()
{
  return sub_1B10100DC();
}

uint64_t sub_1B0F91708()
{
  return sub_1B1013154();
}

uint64_t sub_1B0F91710()
{
  return sub_1B1013C94();
}

uint64_t sub_1B0F91718@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F91774@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F916B0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F9179C()
{
  char *v0;

  return sub_1B0F916B0(*v0);
}

uint64_t sub_1B0F917A4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0F91804()
{
  sub_1B0F930E4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F9182C()
{
  sub_1B0F930E4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F91854@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  _BYTE v22[128];
  __int128 v23;
  __int128 v24;
  _OWORD v25[6];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[6];
  _OWORD v40[2];
  int v41;
  char v42;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF490);
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F930E4();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v8 = v5;
  v20 = a2;
  LOBYTE(v23) = 0;
  sub_1B0F56A98();
  v9 = v21;
  sub_1B10360A4();
  v10 = v27;
  v37 = v27;
  *(_QWORD *)&v38 = v28;
  BYTE8(v38) = BYTE8(v28);
  v42 = 1;
  v19 = v28;
  v41 = BYTE8(v28);
  sub_1B0F56C04(v27, *((uint64_t *)&v27 + 1), v28, BYTE8(v28));
  sub_1B0F93128();
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
  sub_1B0F92DBC((uint64_t)&v36, (uint64_t)v22);
  sub_1B0F92DBC((uint64_t)v22, (uint64_t)v39);
  v23 = v10;
  v11 = v19;
  *(_QWORD *)&v24 = v19;
  LOBYTE(v9) = v41;
  BYTE8(v24) = v41;
  sub_1B0F92DBC((uint64_t)v22, (uint64_t)v25);
  sub_1B0F9323C((uint64_t)&v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B0F56C04, (void (*)(void))sub_1B0F6C6F4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92EA8);
  sub_1B0F56B88(v10, *((uint64_t *)&v10 + 1), v11, v9);
  v12 = v25[5];
  v13 = v20;
  v20[6] = v25[4];
  v13[7] = v12;
  v13[8] = v26[0];
  *(_OWORD *)((char *)v13 + 137) = *(_OWORD *)((char *)v26 + 9);
  v14 = v25[1];
  v13[2] = v25[0];
  v13[3] = v14;
  v15 = v25[3];
  v13[4] = v25[2];
  v13[5] = v15;
  v16 = v24;
  *v13 = v23;
  v13[1] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v33 = v39[4];
  v34 = v39[5];
  v35[0] = v40[0];
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v40 + 9);
  v29 = v39[0];
  v30 = v39[1];
  v31 = v39[2];
  v32 = v39[3];
  v27 = v37;
  v28 = v38;
  return sub_1B0F9323C((uint64_t)&v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B0F56B88, (void (*)(void))sub_1B0F6C7C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92F34);
}

uint64_t sub_1B0F91B68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _QWORD v35[3];
  char v36;
  _QWORD v37[2];
  _BYTE v38[128];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  void *v46;

  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(unsigned __int8 *)(v3 + 24);
  sub_1B0F92DBC(v3 + 32, (uint64_t)v38);
  sub_1B0F92DBC((uint64_t)v38, (uint64_t)&v39);
  if (sub_1B0F92E04((uint64_t)&v39) == 1)
  {
    if (v10 <= 0xFD)
    {
      v35[0] = v7;
      v35[1] = v8;
      v35[2] = v9;
      v36 = v10;
      sub_1B0F56B9C(v7, v8, v9, v10);
      v20 = v46;
      StringResolvable.resolved(with:)(a2);
      if (v20)
      {

        sub_1B0F56B88(v7, v8, v9, v10);
        v46 = 0;
      }
      else
      {
        v46 = 0;
        sub_1B0F56B88(v7, v8, v9, v10);
      }
    }
    v21 = sub_1B0F92E60();
    if (v21 == 11)
      v22 = 6;
    else
      v22 = v21;
    v23 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B0F90B34(v22);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF418);
    v24 = sub_1B103497C();
    a3[3] = v24;
    v37[0] = v23;
    v37[1] = sub_1B0F5A7E4(&qword_1EEEDF420, &qword_1EEEDF418, MEMORY[0x1E0CDCF80]);
    a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v24, v37);
    __swift_allocate_boxed_opaque_existential_1(a3);
    sub_1B103554C();
    return swift_release();
  }
  else
  {
    v11 = a1[4];
    v25[1] = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v32 = v43;
    v33 = v44;
    v34[0] = v45[0];
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v45 + 9);
    v27 = v39;
    v28 = v40;
    v30 = v41;
    v31 = v42;
    sub_1B0F92DBC((uint64_t)v38, (uint64_t)v35);
    sub_1B0F93360((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B0F6C6F4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92EA8);
    sub_1B0F911C0(a2);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF418);
    v12 = sub_1B103497C();
    v29 = v12;
    v26[0] = v11;
    v26[1] = sub_1B0F5A7E4(&qword_1EEEDF420, &qword_1EEEDF418, MEMORY[0x1E0CDCF80]);
    *(_QWORD *)&v30 = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v12, v26);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
    sub_1B103554C();
    v14 = swift_release();
    MEMORY[0x1E0C80A78](v14);
    (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))((char *)v25 - v16, boxed_opaque_existential_1, v12);
    v17 = sub_1B1035840();
    v18 = MEMORY[0x1E0CDFD08];
    a3[3] = MEMORY[0x1E0CDFD18];
    a3[4] = v18;
    sub_1B0F92EC0((uint64_t)v38);
    *a3 = v17;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  }
}

uint64_t sub_1B0F91ED4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F91B68(a1, a2, a3);
}

uint64_t sub_1B0F91EE8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B0F91854(a1, a2);
}

uint64_t sub_1B0F91F08@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F91F14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F93DBC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F91F3C@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F91F48()
{
  sub_1B0F930A0();
  return sub_1B10362B4();
}

uint64_t sub_1B0F91F70()
{
  sub_1B0F930A0();
  return sub_1B10362C0();
}

uint64_t sub_1B0F91F98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F9207C(a1, &qword_1EEEDF480, (void (*)(void))sub_1B0F930A0, a2);
}

uint64_t sub_1B0F91FC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F922B8(a1, a2, MEMORY[0x1E0CDEE40], MEMORY[0x1E0CDEE28], a3);
}

uint64_t sub_1B0F91FE8@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F91FF4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F92000()
{
  sub_1B0F9305C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F92028()
{
  sub_1B0F9305C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F92050@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F9207C(a1, &qword_1EEEDF470, (void (*)(void))sub_1B0F9305C, a2);
}

uint64_t sub_1B0F9207C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v15 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v19 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1B1036278();
  if (!v4)
  {
    v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE7F0, &qword_1EEEDE7E8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    v11 = v17;
    v12 = v18;
    *(_OWORD *)v10 = v16;
    *(_QWORD *)(v10 + 16) = v11;
    *(_BYTE *)(v10 + 24) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F921DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F922B8(a1, a2, MEMORY[0x1E0CDEFB0], MEMORY[0x1E0CDEFA8], a3);
}

uint64_t sub_1B0F92200@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F9220C@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F92218()
{
  sub_1B0F93018();
  return sub_1B10362B4();
}

uint64_t sub_1B0F92240()
{
  sub_1B0F93018();
  return sub_1B10362C0();
}

uint64_t sub_1B0F92268@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F9207C(a1, &qword_1EEEDF460, (void (*)(void))sub_1B0F93018, a2);
}

uint64_t sub_1B0F92294@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F922B8(a1, a2, MEMORY[0x1E0CDDF30], MEMORY[0x1E0CDDF28], a3);
}

uint64_t sub_1B0F922B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);

  v10 = *(unsigned __int8 *)(v5 + 24);
  if (v10 == 255)
  {
    v19 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    v23 = v19;
    v24 = v20;
    a5[3] = MEMORY[0x1B5E15134](0, &v23, a3, 0);
    v23 = v19;
    v24 = v20;
    a5[4] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(a5);
    return a4(1, v19, v20);
  }
  else
  {
    v25 = a4;
    v12 = *(_QWORD *)(v5 + 8);
    v13 = *(_QWORD *)(v5 + 16);
    v14 = *(_QWORD *)v5;
    sub_1B0F5E604(v14, v12, v13, v10 & 1);
    v15 = sub_1B0FD7528(a2, v14, v12, v13, v10 & 1);
    result = sub_1B0F5FD28(v14, v12, v13, v10);
    if (!v6)
    {
      v17 = a1[3];
      v18 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v17);
      v23 = v17;
      v24 = v18;
      a5[3] = MEMORY[0x1B5E15134](0, &v23, a3, 0);
      v23 = v17;
      v24 = v18;
      a5[4] = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1(a5);
      return v25(v15 & 1, v17, v18);
    }
  }
  return result;
}

uint64_t sub_1B0F92464@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6 = v3;
  v7 = v4;
  a2[3] = MEMORY[0x1B5E15134](0, &v6, MEMORY[0x1E0CDE548], 0);
  v6 = v3;
  v7 = v4;
  a2[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a2);
  return sub_1B103542C();
}

uint64_t sub_1B0F92508(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1B0F92538@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F92544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F93DD4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F9256C@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F92578()
{
  sub_1B0F92FD4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F925A0()
{
  sub_1B0F92FD4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F925C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F926E0(a1, &qword_1EEEDF450, (void (*)(void))sub_1B0F92FD4, a2);
}

uint64_t sub_1B0F925F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F92950(a1, a2, MEMORY[0x1E0CDF038], MEMORY[0x1E0CDF030], a3);
}

uint64_t sub_1B0F92624@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F92630@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F93DEC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F92658@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F92664()
{
  sub_1B0F92F90();
  return sub_1B10362B4();
}

uint64_t sub_1B0F9268C()
{
  sub_1B0F92F90();
  return sub_1B10362C0();
}

uint64_t sub_1B0F926B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F926E0(a1, &qword_1EEEDF440, (void (*)(void))sub_1B0F92F90, a2);
}

uint64_t sub_1B0F926E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v15 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v19 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1B1036278();
  if (!v4)
  {
    v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE610, &qword_1EEEDE4F0, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    v11 = v17;
    v12 = v18;
    *(_OWORD *)v10 = v16;
    *(_QWORD *)(v10 + 16) = v11;
    *(_BYTE *)(v10 + 24) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F92840@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F92950(a1, a2, MEMORY[0x1E0CDF1D0], MEMORY[0x1E0CDF1C0], a3);
}

uint64_t sub_1B0F92870@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89810(a1);
}

uint64_t sub_1B0F9287C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0F93E04();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F928A4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B0F89868(a1);
}

uint64_t sub_1B0F928B0()
{
  sub_1B0F92F4C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F928D8()
{
  sub_1B0F92F4C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F92900@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F926E0(a1, &qword_1EEEDF430, (void (*)(void))sub_1B0F92F4C, a2);
}

uint64_t sub_1B0F9292C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0F92950(a1, a2, MEMORY[0x1E0CDE3A0], MEMORY[0x1E0CDE398], a3);
}

uint64_t sub_1B0F92950@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t (*a4)(uint64_t, uint64_t, double)@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v11 = *(_QWORD *)v5;
  v12 = *(_QWORD *)(v5 + 8);
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_BYTE *)(v5 + 24);
  sub_1B0F5E604(v11, v12, v13, v14);
  v15 = sub_1B0FD72F8(a2, v11, v12, v13, v14);
  result = sub_1B0F5E6A0(v11, v12, v13, v14);
  if (!v6)
  {
    v17 = a1[3];
    v18 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v17);
    v20 = v17;
    v21 = v18;
    a5[3] = MEMORY[0x1B5E15134](0, &v20, a3, 0);
    v20 = v17;
    v21 = v18;
    a5[4] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(a5);
    return a4(v17, v18, v15);
  }
  return result;
}

unint64_t sub_1B0F92A7C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92AA0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92AA0()
{
  unint64_t result;

  result = qword_1EEEDF3D0;
  if (!qword_1EEEDF3D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C9F4, &type metadata for BaselineOffsetModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3D0);
  }
  return result;
}

unint64_t sub_1B0F92AE4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92B08();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92B08()
{
  unint64_t result;

  result = qword_1EEEDF3D8;
  if (!qword_1EEEDF3D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C9CC, &type metadata for TrackingModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3D8);
  }
  return result;
}

unint64_t sub_1B0F92B4C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92B70();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92B70()
{
  unint64_t result;

  result = qword_1EEEDF3E0;
  if (!qword_1EEEDF3E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C9A4, &type metadata for KerningModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3E0);
  }
  return result;
}

unint64_t sub_1B0F92BB4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92BD8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92BD8()
{
  unint64_t result;

  result = qword_1EEEDF3E8;
  if (!qword_1EEEDF3E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C97C, &type metadata for MonospacedDigitModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3E8);
  }
  return result;
}

unint64_t sub_1B0F92C1C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92C40();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92C40()
{
  unint64_t result;

  result = qword_1EEEDF3F0;
  if (!qword_1EEEDF3F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C954, &type metadata for MonospacedModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3F0);
  }
  return result;
}

unint64_t sub_1B0F92C84(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92CA8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92CA8()
{
  unint64_t result;

  result = qword_1EEEDF3F8;
  if (!qword_1EEEDF3F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C92C, &type metadata for ItalicModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF3F8);
  }
  return result;
}

unint64_t sub_1B0F92CEC(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92D10();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92D10()
{
  unint64_t result;

  result = qword_1EEEDF400;
  if (!qword_1EEEDF400)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C904, &type metadata for BoldModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF400);
  }
  return result;
}

unint64_t sub_1B0F92D54(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F92D78();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F92D78()
{
  unint64_t result;

  result = qword_1EEEDF408;
  if (!qword_1EEEDF408)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C8DC, &type metadata for FontModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF408);
  }
  return result;
}

uint64_t sub_1B0F92DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F92E04(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 56);
  if (v1 <= 1)
    return 0;
  else
    return v1 ^ 0xFF;
}

uint64_t sub_1B0F92E18()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_1B0F92E60()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

uint64_t sub_1B0F92EA8(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F56BC8(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B0F92EC0(uint64_t a1)
{
  sub_1B0F9316C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120), (void (*)(void))sub_1B0F6C7C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F92F34);
  return a1;
}

uint64_t sub_1B0F92F34(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_1B0F56B08(result, a2, a3, a4 & 1);
  return result;
}

unint64_t sub_1B0F92F4C()
{
  unint64_t result;

  result = qword_1EEEDF438;
  if (!qword_1EEEDF438)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D4B8, &type metadata for BaselineOffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF438);
  }
  return result;
}

unint64_t sub_1B0F92F90()
{
  unint64_t result;

  result = qword_1EEEDF448;
  if (!qword_1EEEDF448)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D468, &type metadata for TrackingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF448);
  }
  return result;
}

unint64_t sub_1B0F92FD4()
{
  unint64_t result;

  result = qword_1EEEDF458;
  if (!qword_1EEEDF458)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D418, &type metadata for KerningModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF458);
  }
  return result;
}

unint64_t sub_1B0F93018()
{
  unint64_t result;

  result = qword_1EEEDF468;
  if (!qword_1EEEDF468)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D3C8, &type metadata for MonospacedModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF468);
  }
  return result;
}

unint64_t sub_1B0F9305C()
{
  unint64_t result;

  result = qword_1EEEDF478;
  if (!qword_1EEEDF478)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D378, &type metadata for ItalicModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF478);
  }
  return result;
}

unint64_t sub_1B0F930A0()
{
  unint64_t result;

  result = qword_1EEEDF488;
  if (!qword_1EEEDF488)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D328, &type metadata for BoldModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF488);
  }
  return result;
}

unint64_t sub_1B0F930E4()
{
  unint64_t result;

  result = qword_1EEEDF498;
  if (!qword_1EEEDF498)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D2D8, &type metadata for FontModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF498);
  }
  return result;
}

unint64_t sub_1B0F93128()
{
  unint64_t result;

  result = qword_1EEEDF4A0;
  if (!qword_1EEEDF4A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C8B4, &type metadata for SystemFontOptions);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4A0);
  }
  return result;
}

uint64_t sub_1B0F9316C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, void (*a17)(void), void (*a18)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  if (a8 != 254)
  {
    a17();
    a18(a5, a6, a7, a8);
    a18(a9, a10, a11, a12);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))a18)(a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_1B0F9323C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(void), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_BYTE *)(a1 + 152);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  sub_1B0F9316C(v5, v6, v7, v8, v9, v10, v11, v18, v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v12, v13, a3, a4);
  return a1;
}

unint64_t sub_1B0F9331C()
{
  unint64_t result;

  result = qword_1EEEDF4B0;
  if (!qword_1EEEDF4B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D288, &type metadata for SystemFontOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4B0);
  }
  return result;
}

uint64_t sub_1B0F93360(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 112);
  v11 = *(unsigned __int8 *)(a1 + 56);
  v12 = *(unsigned __int8 *)(a1 + 88);
  v14 = *(unsigned __int8 *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a3(v5, v6, v7, v11);
  a3(v8, v9, v10, v12);
  a3(v17, v16, v15, v14);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SystemFontOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0F93478 + 4 * byte_1B103C7C2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0F934AC + 4 * byte_1B103C7BD[v4]))();
}

uint64_t sub_1B0F934AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F934B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F934BCLL);
  return result;
}

uint64_t sub_1B0F934C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F934D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0F934D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F934DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemFontOptions.CodingKeys()
{
  return &type metadata for SystemFontOptions.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FontModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0F93544 + 4 * byte_1B103C7CC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0F93578 + 4 * byte_1B103C7C7[v4]))();
}

uint64_t sub_1B0F93578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F93580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F93588);
  return result;
}

uint64_t sub_1B0F93594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F9359CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0F935A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F935A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontModifier.CodingKeys()
{
  return &type metadata for FontModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for BoldModifier.CodingKeys()
{
  return &type metadata for BoldModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for ItalicModifier.CodingKeys()
{
  return &type metadata for ItalicModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for MonospacedModifier.CodingKeys()
{
  return &type metadata for MonospacedModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for KerningModifier.CodingKeys()
{
  return &type metadata for KerningModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for TrackingModifier.CodingKeys()
{
  return &type metadata for TrackingModifier.CodingKeys;
}

uint64_t _s6LiftUI12BoldModifierV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0F93658 + 4 * byte_1B103C7D1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0F93678 + 4 * byte_1B103C7D6[v4]))();
}

_BYTE *sub_1B0F93658(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0F93678(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F93680(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F93688(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0F93690(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0F93698(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BaselineOffsetModifier.CodingKeys()
{
  return &type metadata for BaselineOffsetModifier.CodingKeys;
}

unint64_t sub_1B0F936B8()
{
  unint64_t result;

  result = qword_1EEEDF4C0;
  if (!qword_1EEEDF4C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CBD0, &type metadata for BaselineOffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4C0);
  }
  return result;
}

unint64_t sub_1B0F93700()
{
  unint64_t result;

  result = qword_1EEEDF4C8;
  if (!qword_1EEEDF4C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CCC0, &type metadata for TrackingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4C8);
  }
  return result;
}

unint64_t sub_1B0F93748()
{
  unint64_t result;

  result = qword_1EEEDF4D0;
  if (!qword_1EEEDF4D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CDB0, &type metadata for KerningModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4D0);
  }
  return result;
}

unint64_t sub_1B0F93790()
{
  unint64_t result;

  result = qword_1EEEDF4D8;
  if (!qword_1EEEDF4D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CEA0, &type metadata for MonospacedModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4D8);
  }
  return result;
}

unint64_t sub_1B0F937D8()
{
  unint64_t result;

  result = qword_1EEEDF4E0;
  if (!qword_1EEEDF4E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CF90, &type metadata for ItalicModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4E0);
  }
  return result;
}

unint64_t sub_1B0F93820()
{
  unint64_t result;

  result = qword_1EEEDF4E8;
  if (!qword_1EEEDF4E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D080, &type metadata for BoldModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4E8);
  }
  return result;
}

unint64_t sub_1B0F93868()
{
  unint64_t result;

  result = qword_1EEEDF4F0;
  if (!qword_1EEEDF4F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D170, &type metadata for FontModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4F0);
  }
  return result;
}

unint64_t sub_1B0F938B0()
{
  unint64_t result;

  result = qword_1EEEDF4F8;
  if (!qword_1EEEDF4F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D260, &type metadata for SystemFontOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF4F8);
  }
  return result;
}

unint64_t sub_1B0F938F8()
{
  unint64_t result;

  result = qword_1EEEDF500;
  if (!qword_1EEEDF500)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D198, &type metadata for SystemFontOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF500);
  }
  return result;
}

unint64_t sub_1B0F93940()
{
  unint64_t result;

  result = qword_1EEEDF508;
  if (!qword_1EEEDF508)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D1C0, &type metadata for SystemFontOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF508);
  }
  return result;
}

unint64_t sub_1B0F93988()
{
  unint64_t result;

  result = qword_1EEEDF510;
  if (!qword_1EEEDF510)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D0A8, &type metadata for FontModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF510);
  }
  return result;
}

unint64_t sub_1B0F939D0()
{
  unint64_t result;

  result = qword_1EEEDF518;
  if (!qword_1EEEDF518)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D0D0, &type metadata for FontModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF518);
  }
  return result;
}

unint64_t sub_1B0F93A18()
{
  unint64_t result;

  result = qword_1EEEDF520;
  if (!qword_1EEEDF520)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CFB8, &type metadata for BoldModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF520);
  }
  return result;
}

unint64_t sub_1B0F93A60()
{
  unint64_t result;

  result = qword_1EEEDF528;
  if (!qword_1EEEDF528)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CFE0, &type metadata for BoldModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF528);
  }
  return result;
}

unint64_t sub_1B0F93AA8()
{
  unint64_t result;

  result = qword_1EEEDF530;
  if (!qword_1EEEDF530)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CEC8, &type metadata for ItalicModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF530);
  }
  return result;
}

unint64_t sub_1B0F93AF0()
{
  unint64_t result;

  result = qword_1EEEDF538;
  if (!qword_1EEEDF538)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CEF0, &type metadata for ItalicModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF538);
  }
  return result;
}

unint64_t sub_1B0F93B38()
{
  unint64_t result;

  result = qword_1EEEDF540;
  if (!qword_1EEEDF540)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CDD8, &type metadata for MonospacedModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF540);
  }
  return result;
}

unint64_t sub_1B0F93B80()
{
  unint64_t result;

  result = qword_1EEEDF548;
  if (!qword_1EEEDF548)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CE00, &type metadata for MonospacedModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF548);
  }
  return result;
}

unint64_t sub_1B0F93BC8()
{
  unint64_t result;

  result = qword_1EEEDF550;
  if (!qword_1EEEDF550)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CCE8, &type metadata for KerningModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF550);
  }
  return result;
}

unint64_t sub_1B0F93C10()
{
  unint64_t result;

  result = qword_1EEEDF558;
  if (!qword_1EEEDF558)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CD10, &type metadata for KerningModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF558);
  }
  return result;
}

unint64_t sub_1B0F93C58()
{
  unint64_t result;

  result = qword_1EEEDF560;
  if (!qword_1EEEDF560)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CBF8, &type metadata for TrackingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF560);
  }
  return result;
}

unint64_t sub_1B0F93CA0()
{
  unint64_t result;

  result = qword_1EEEDF568;
  if (!qword_1EEEDF568)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CC20, &type metadata for TrackingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF568);
  }
  return result;
}

unint64_t sub_1B0F93CE8()
{
  unint64_t result;

  result = qword_1EEEDF570;
  if (!qword_1EEEDF570)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CB08, &type metadata for BaselineOffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF570);
  }
  return result;
}

unint64_t sub_1B0F93D30()
{
  unint64_t result;

  result = qword_1EEEDF578;
  if (!qword_1EEEDF578)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103CB30, &type metadata for BaselineOffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF578);
  }
  return result;
}

uint64_t sub_1B0F93D74()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B0F93DBC()
{
  return 0x6576697463417369;
}

uint64_t sub_1B0F93DD4()
{
  return 0x676E696E72656BLL;
}

uint64_t sub_1B0F93DEC()
{
  return 0x676E696B63617274;
}

uint64_t sub_1B0F93E04()
{
  return 0x656E696C65736162;
}

LiftUI::HTTPRequestMethod_optional __swiftcall HTTPRequestMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LiftUI::HTTPRequestMethod_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1B103605C();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t HTTPRequestMethod.rawValue.getter()
{
  char *v0;

  return qword_1B103D828[*v0];
}

uint64_t sub_1B0F93EAC(char *a1, char *a2)
{
  return sub_1B100D834(*a1, *a2);
}

unint64_t sub_1B0F93EBC()
{
  unint64_t result;

  result = qword_1EEEDF580;
  if (!qword_1EEEDF580)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for HTTPRequestMethod, &type metadata for HTTPRequestMethod);
    atomic_store(result, (unint64_t *)&qword_1EEEDF580);
  }
  return result;
}

uint64_t sub_1B0F93F00()
{
  return sub_1B10149BC();
}

uint64_t sub_1B0F93F0C()
{
  return sub_1B10127F8();
}

uint64_t sub_1B0F93F14()
{
  return sub_1B10149BC();
}

LiftUI::HTTPRequestMethod_optional sub_1B0F93F1C(Swift::String *a1)
{
  return HTTPRequestMethod.init(rawValue:)(*a1);
}

uint64_t sub_1B0F93F28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HTTPRequestMethod.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0F93F4C()
{
  sub_1B0F93FC0();
  return sub_1B1035CB4();
}

ValueMetadata *type metadata accessor for HTTPRequestMethod()
{
  return &type metadata for HTTPRequestMethod;
}

unint64_t sub_1B0F93FC0()
{
  unint64_t result;

  result = qword_1EEEDF588;
  if (!qword_1EEEDF588)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for HTTPRequestMethod, &type metadata for HTTPRequestMethod);
    atomic_store(result, (unint64_t *)&qword_1EEEDF588);
  }
  return result;
}

uint64_t destroy for HTTPRequestAction(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;

  sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v2);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 != 255)
    sub_1B0F571A8(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v3 & 1);
  v4 = *(unsigned __int8 *)(a1 + 120);
  if (v4 != 255)
    sub_1B0F571A8(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for HTTPRequestAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 56));
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  v12 = *(unsigned __int8 *)(a2 + 88);
  if (v12 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    v13 = v12 & 1;
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    sub_1B0F56C30(v14, v15, v16, v12 & 1);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    *(_BYTE *)(a1 + 88) = v13;
  }
  v17 = *(unsigned __int8 *)(a2 + 120);
  if (v17 == 255)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  }
  else
  {
    v18 = v17 & 1;
    v19 = *(_QWORD *)(a2 + 96);
    v20 = *(_QWORD *)(a2 + 104);
    v21 = *(_QWORD *)(a2 + 112);
    sub_1B0F56C30(v19, v20, v21, v17 & 1);
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(a1 + 112) = v21;
    *(_BYTE *)(a1 + 120) = v18;
  }
  v22 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v22;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequestAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _OWORD *v12;
  _OWORD *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int128 *v27;
  __int128 *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F56ADC(v8, v9, v10, v11);
  v12 = (_OWORD *)(a1 + 32);
  v13 = (_OWORD *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v14 <= 0xFD)
    {
      v20 = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      v22 = *(_QWORD *)(a2 + 48);
      sub_1B0F56B9C(v20, v21, v22, *(_BYTE *)(a2 + 56));
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(_QWORD *)(a1 + 40);
      v25 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 48) = v22;
      v26 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v14;
      sub_1B0F56ADC(v23, v24, v25, v26);
    }
    else
    {
      sub_1B0F5EA14(a1 + 32);
      v16 = *(_OWORD *)(a2 + 41);
      *v12 = *v13;
      *(_OWORD *)(a1 + 41) = v16;
    }
  }
  else if (v14 <= 0xFD)
  {
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 40);
    v19 = *(_QWORD *)(a2 + 48);
    sub_1B0F56B9C(v17, v18, v19, *(_BYTE *)(a2 + 56));
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = v19;
    *(_BYTE *)(a1 + 56) = v14;
  }
  else
  {
    v15 = *v13;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *v12 = v15;
  }
  v27 = (__int128 *)(a1 + 64);
  v28 = (__int128 *)(a2 + 64);
  v29 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v29 == 255)
    {
      v31 = *v28;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *v27 = v31;
    }
    else
    {
      v40 = v29 & 1;
      v41 = *(_QWORD *)(a2 + 64);
      v42 = *(_QWORD *)(a2 + 72);
      v43 = *(_QWORD *)(a2 + 80);
      sub_1B0F56C30(v41, v42, v43, v29 & 1);
      *(_QWORD *)(a1 + 64) = v41;
      *(_QWORD *)(a1 + 72) = v42;
      *(_QWORD *)(a1 + 80) = v43;
      *(_BYTE *)(a1 + 88) = v40;
    }
  }
  else if (v29 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDE170);
    v30 = *(_OWORD *)(a2 + 73);
    *v27 = *v28;
    *(_OWORD *)(a1 + 73) = v30;
  }
  else
  {
    v32 = v29 & 1;
    v33 = *(_QWORD *)(a2 + 64);
    v34 = *(_QWORD *)(a2 + 72);
    v35 = *(_QWORD *)(a2 + 80);
    sub_1B0F56C30(v33, v34, v35, v29 & 1);
    v36 = *(_QWORD *)(a1 + 64);
    v37 = *(_QWORD *)(a1 + 72);
    v38 = *(_QWORD *)(a1 + 80);
    v39 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = v33;
    *(_QWORD *)(a1 + 72) = v34;
    *(_QWORD *)(a1 + 80) = v35;
    *(_BYTE *)(a1 + 88) = v32;
    sub_1B0F571A8(v36, v37, v38, v39);
  }
  v44 = (__int128 *)(a1 + 96);
  v45 = (__int128 *)(a2 + 96);
  v46 = *(unsigned __int8 *)(a2 + 120);
  if (*(unsigned __int8 *)(a1 + 120) == 255)
  {
    if (v46 == 255)
    {
      v48 = *v45;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *v44 = v48;
    }
    else
    {
      v57 = v46 & 1;
      v58 = *(_QWORD *)(a2 + 96);
      v59 = *(_QWORD *)(a2 + 104);
      v60 = *(_QWORD *)(a2 + 112);
      sub_1B0F56C30(v58, v59, v60, v46 & 1);
      *(_QWORD *)(a1 + 96) = v58;
      *(_QWORD *)(a1 + 104) = v59;
      *(_QWORD *)(a1 + 112) = v60;
      *(_BYTE *)(a1 + 120) = v57;
    }
  }
  else if (v46 == 255)
  {
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDE170);
    v47 = *(_OWORD *)(a2 + 105);
    *v44 = *v45;
    *(_OWORD *)(a1 + 105) = v47;
  }
  else
  {
    v49 = v46 & 1;
    v50 = *(_QWORD *)(a2 + 96);
    v51 = *(_QWORD *)(a2 + 104);
    v52 = *(_QWORD *)(a2 + 112);
    sub_1B0F56C30(v50, v51, v52, v46 & 1);
    v53 = *(_QWORD *)(a1 + 96);
    v54 = *(_QWORD *)(a1 + 104);
    v55 = *(_QWORD *)(a1 + 112);
    v56 = *(_BYTE *)(a1 + 120);
    *(_QWORD *)(a1 + 96) = v50;
    *(_QWORD *)(a1 + 104) = v51;
    *(_QWORD *)(a1 + 112) = v52;
    *(_BYTE *)(a1 + 120) = v49;
    sub_1B0F571A8(v53, v54, v55, v56);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 160) = v61;
  return a1;
}

uint64_t assignWithTake for HTTPRequestAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v6, v7, v8, v9);
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 > 0xFD)
    goto LABEL_4;
  v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F56ADC(v13, v14, v15, v10);
LABEL_6:
  v16 = *(unsigned __int8 *)(a1 + 88);
  if (v16 == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_11;
  }
  v17 = *(unsigned __int8 *)(a2 + 88);
  if (v17 == 255)
  {
    sub_1B0F5A3AC(a1 + 64, &qword_1EEEDE170);
    goto LABEL_9;
  }
  v18 = v16 & 1;
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v19;
  *(_BYTE *)(a1 + 88) = v17 & 1;
  sub_1B0F571A8(v20, v21, v22, v18);
LABEL_11:
  v23 = *(unsigned __int8 *)(a1 + 120);
  if (v23 != 255)
  {
    v24 = *(unsigned __int8 *)(a2 + 120);
    if (v24 != 255)
    {
      v25 = v23 & 1;
      v26 = *(_QWORD *)(a2 + 112);
      v27 = *(_QWORD *)(a1 + 96);
      v28 = *(_QWORD *)(a1 + 104);
      v29 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = v26;
      *(_BYTE *)(a1 + 120) = v24 & 1;
      sub_1B0F571A8(v27, v28, v29, v25);
      goto LABEL_16;
    }
    sub_1B0F5A3AC(a1 + 96, &qword_1EEEDE170);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
LABEL_16:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 152);
  v31 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v30;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 160) = v31;
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequestAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequestAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 128) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequestAction()
{
  return &type metadata for HTTPRequestAction;
}

uint64_t sub_1B0F947EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  __int128 v19[2];
  uint64_t v20;

  *(_QWORD *)&v19[0] = *(_QWORD *)(v4 + 136);
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  sub_1B0F5DD4C(v10);
  v11 = swift_bridgeObjectRetain();
  sub_1B0F5DD4C(v11);
  v12 = *(_QWORD *)&v19[0];
  sub_1B0F5FD84(a1, (uint64_t)v19);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v20 = a4;
    v14 = (_QWORD *)(v12 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      v16 = v14[3];
      v15 = v14[4];
      __swift_project_boxed_opaque_existential_1(v14, v16);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 8) + 16))(v18, v19, a2, a3, v16);
      if (v5)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      sub_1B0F5A0E4(v18, (uint64_t)v19);
      v14 += 5;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        a4 = v20;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
LABEL_6:
    sub_1B0F5A0E4(v19, a4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0F94938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  v7 = sub_1B10344C0();
  v6[23] = v7;
  v6[24] = *(_QWORD *)(v7 - 8);
  v6[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  v6[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA00);
  v6[27] = swift_task_alloc();
  v8 = sub_1B10345E0();
  v6[28] = v8;
  v6[29] = *(_QWORD *)(v8 - 8);
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B0F94A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(_QWORD, uint64_t, uint64_t);
  uint64_t v70[3];
  char v71;

  v1 = *(_QWORD *)(v0 + 168);
  sub_1B0F96EA4(*(_QWORD *)(v0 + 160), v0 + 16);
  sub_1B0F96EA4(v0 + 16, v0 + 48);
  sub_1B0F96EE0(v0 + 16);
  StringResolvable.resolved(with:)(v1);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216);
  sub_1B0F96F10(v0 + 16);
  sub_1B10345D4();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    sub_1B0F5A3AC(*(_QWORD *)(v0 + 216), &qword_1EEEDEA00);
    v9 = *(_QWORD *)(v8 + 136);
    v10 = sub_1B1035D80();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v11(v5, 1, 1, v10);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v9;
    v12[5] = v7;
    v12[6] = v6;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1B0F706F4(v5, (uint64_t)&unk_1EEEDE930, (uint64_t)v12);
    swift_release();
    v13 = *(_QWORD *)(v8 + 144);
    v11(v5, 1, 1, v10);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = 0;
    v14[3] = 0;
    v14[4] = v13;
    v14[5] = v7;
    v14[6] = v6;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B0F706F4(v5, (uint64_t)&unk_1EEEDF5B0, (uint64_t)v14);
    swift_release();
    type metadata accessor for RemoteLoaderError(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE160, type metadata accessor for RemoteLoaderError, (uint64_t)&unk_1B10431CC);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 32))(v15, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  v17 = *(_QWORD *)(v16 + 160);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 8))(v15, ObjectType, v17);
  v68 = ObjectType;
  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(unsigned __int8 *)(v19 + 56);
  if (v20 <= 0xFD)
  {
    v21 = *(_QWORD *)(v19 + 40);
    v22 = *(_QWORD *)(v19 + 48);
    v23 = *(_QWORD *)(v0 + 168);
    v70[0] = *(_QWORD *)(v19 + 32);
    v70[1] = v21;
    v70[2] = v22;
    v71 = v20;
    sub_1B0F56B9C(v70[0], v21, v22, v20);
    v24 = StringResolvable.resolved(with:)(v23);
    v26 = v25;
    sub_1B0F56B88(v70[0], v21, v22, v20);
    v27._countAndFlagsBits = v24;
    v27._object = v26;
    HTTPRequestMethod.init(rawValue:)(v27);
    __asm { BR              X10 }
  }
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(unsigned __int8 *)(v28 + 88);
  if (v29 == 255)
  {
LABEL_25:
    v42 = *(unsigned __int8 *)(v28 + 120);
    if (v42 != 255)
    {
      v43 = *(_QWORD *)(v28 + 96);
      v44 = *(_QWORD *)(v28 + 104);
      v45 = *(_QWORD *)(v28 + 112);
      v46 = *(_QWORD *)(v0 + 168);
      sub_1B0F56C30(v43, v44, v45, v42 & 1);
      v48 = sub_1B0FD7904(v46, v43, v44, v45, v42 & 1);
      sub_1B0F57190(v43, v44, v45, v42);
      sub_1B103452C();
      swift_allocObject();
      sub_1B1034520();
      *(_QWORD *)(v0 + 136) = v48;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF5E0);
      sub_1B0F97014();
      sub_1B1034514();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B10344A8();
    }
    v67 = v17;
    if (qword_1EEEDE0B0 == -1)
      goto LABEL_28;
    goto LABEL_33;
  }
  v30 = *(_QWORD *)(v28 + 64);
  v31 = *(_QWORD *)(v28 + 72);
  v32 = *(_QWORD *)(v28 + 80);
  v33 = *(_QWORD *)(v0 + 168);
  sub_1B0F56C30(v30, v31, v32, v29 & 1);
  v34 = sub_1B0FD7904(v33, v30, v31, v32, v29 & 1);
  v67 = v17;
  sub_1B0F57190(v30, v31, v32, v29);
  v35 = *(_QWORD *)(v34 + 64);
  v36 = -1;
  v37 = -1 << *(_BYTE *)(v34 + 32);
  if (-v37 < 64)
    v36 = ~(-1 << -(char)v37);
  if ((v36 & v35) != 0)
  {
    v38 = __clz(__rbit64(v36 & v35));
    goto LABEL_23;
  }
  if ((unint64_t)(63 - v37) >> 6 <= 1)
    goto LABEL_24;
  v39 = *(_QWORD *)(v34 + 72);
  v40 = 1;
  if (v39)
  {
LABEL_22:
    v38 = __clz(__rbit64(v39)) + (v40 << 6);
LABEL_23:
    __asm { BR              X9 }
  }
  v40 = 2;
  if ((unint64_t)(63 - v37) >> 6 <= 2)
  {
LABEL_24:
    swift_release();
    v28 = *(_QWORD *)(v0 + 160);
    v17 = v67;
    goto LABEL_25;
  }
  v39 = *(_QWORD *)(v34 + 80);
  if (v39)
    goto LABEL_22;
  v40 = 3;
  if ((unint64_t)(63 - v37) >> 6 <= 3)
    goto LABEL_24;
  v39 = *(_QWORD *)(v34 + 88);
  if (v39)
    goto LABEL_22;
  v41 = 4;
  if ((unint64_t)(63 - v37) >> 6 <= 4)
    goto LABEL_24;
  v39 = *(_QWORD *)(v34 + 96);
  if (v39)
  {
    v40 = 4;
    goto LABEL_22;
  }
  while (1)
  {
    v40 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v40 >= (uint64_t)((unint64_t)(63 - v37) >> 6))
      goto LABEL_24;
    v39 = *(_QWORD *)(v34 + 64 + 8 * v40);
    ++v41;
    if (v39)
      goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  swift_once();
LABEL_28:
  v50 = *(_QWORD *)(v0 + 248);
  v49 = *(_QWORD *)(v0 + 256);
  v52 = *(_QWORD *)(v0 + 224);
  v51 = *(_QWORD *)(v0 + 232);
  v53 = sub_1B103467C();
  *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v53, (uint64_t)qword_1EEF0BA00);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  *(_QWORD *)(v0 + 272) = v54;
  v54(v50, v49, v52);
  v55 = sub_1B1034664();
  v56 = sub_1B1035E34();
  v57 = os_log_type_enabled(v55, v56);
  v58 = *(_QWORD *)(v0 + 248);
  v60 = *(_QWORD *)(v0 + 224);
  v59 = *(_QWORD *)(v0 + 232);
  if (v57)
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = swift_slowAlloc();
    v70[0] = v62;
    *(_DWORD *)v61 = 136315138;
    sub_1B0F524FC(&qword_1EEEDF5C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v63 = sub_1B10360F8();
    *(_QWORD *)(v0 + 128) = sub_1B0F6B618(v63, v64, v70);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    v65 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v65(v58, v60);
    _os_log_impl(&dword_1B0F50000, v55, v56, "HTTP Request Action: %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v62, -1, -1);
    MEMORY[0x1B5E15248](v61, -1, -1);
  }
  else
  {
    v65 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v65(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  }

  *(_QWORD *)(v0 + 280) = v65;
  v69 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v67 + 16) + *(_QWORD *)(v67 + 16));
  v66 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v66;
  *v66 = v0;
  v66[1] = sub_1B0F9562C;
  return v69(*(_QWORD *)(v0 + 200), v68, v67);
}

uint64_t sub_1B0F9562C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(*(_QWORD *)v3 + 296) = v2;
  swift_task_dealloc();
  if (!v2)
    sub_1B0F576D8(a1, a2);
  return swift_task_switch();
}

uint64_t sub_1B0F956AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v4 + 128);
  v6 = sub_1B1035D80();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v3;
  v8[6] = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F706F4(v1, (uint64_t)&unk_1EEEDF5D0, (uint64_t)v8);
  swift_release();
  v9 = *(_QWORD *)(v4 + 144);
  v7(v1, 1, 1, v6);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v9;
  v10[5] = v3;
  v10[6] = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F706F4(v1, (uint64_t)&unk_1EEEDF5D8, (uint64_t)v10);
  swift_release();
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  v11(v12, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F95848()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 296);
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3F8);
  sub_1B1035FF0();
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v1(v3, v2, v4);
  swift_bridgeObjectRetain();
  v7 = sub_1B1034664();
  v8 = sub_1B1035E34();
  if (os_log_type_enabled(v7, v8))
  {
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    v30 = v5;
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v11 = 136315394;
    sub_1B0F524FC(&qword_1EEEDF5C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v12 = sub_1B10360F8();
    *(_QWORD *)(v0 + 112) = sub_1B0F6B618(v12, v13, &v32);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    v29(v9, v10);
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 120) = sub_1B0F6B618(v30, v6, &v32);
    sub_1B1035E7C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0F50000, v7, v8, "Network request failed with url: %s | Error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v31, -1, -1);
    MEMORY[0x1B5E15248](v11, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
    swift_bridgeObjectRelease_n();
  }

  v14 = *(void **)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v18 + 136);
  v20 = sub_1B1035D80();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v15, 1, 1, v20);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = v19;
  v22[5] = v17;
  v22[6] = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F706F4(v15, (uint64_t)&unk_1EEEDF5B8, (uint64_t)v22);
  swift_release();
  v23 = *(_QWORD *)(v18 + 144);
  v21(v15, 1, 1, v20);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v23;
  v24[5] = v17;
  v24[6] = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B0F706F4(v15, (uint64_t)&unk_1EEEDF5C0, (uint64_t)v24);
  swift_release();

  v25 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  v26 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  v25(v26, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F95C04(char a1)
{
  return qword_1B103D8A8[a1];
}

uint64_t sub_1B0F95C24(char *a1, char *a2)
{
  return sub_1B100D8B8(*a1, *a2);
}

uint64_t sub_1B0F95C30()
{
  return sub_1B1014958();
}

uint64_t sub_1B0F95C3C()
{
  return sub_1B1012838();
}

uint64_t sub_1B0F95C44()
{
  return sub_1B1014958();
}

uint64_t sub_1B0F95C4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F97710();
  *a1 = result;
  return result;
}

uint64_t sub_1B0F95C78@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0F95C04(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0F95CA0()
{
  char *v0;

  return sub_1B0F95C04(*v0);
}

uint64_t sub_1B0F95CA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F97710();
  *a1 = result;
  return result;
}

void sub_1B0F95CCC(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B0F95CD8()
{
  sub_1B0F9723C();
  return sub_1B10362B4();
}

uint64_t sub_1B0F95D00()
{
  sub_1B0F9723C();
  return sub_1B10362C0();
}

uint64_t sub_1B0F95D28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _BYTE v112[7];
  __int128 v113;
  uint64_t v114;
  char v115;
  _BYTE v116[7];
  __int128 v117;
  uint64_t v118;
  char v119;
  _BYTE v120[7];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[7];
  _BYTE v128[7];
  _BYTE v129[7];
  _DWORD v130[5];
  char *v131;

  v92 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF600);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  MEMORY[0x1E0C80A78](v4);
  v131 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B1036008();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10 = sub_1B103626C();
  if (qword_1EEEDE098 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v6, (uint64_t)qword_1EEF0B9C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  if (*(_QWORD *)(v10 + 16) && (v12 = sub_1B0F56A48((uint64_t)v9), (v13 & 1) != 0))
  {
    sub_1B0F57208(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v106);
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!*((_QWORD *)&v107 + 1))
  {
    sub_1B0F5A3AC((uint64_t)&v106, &qword_1EEEDE158);
    goto LABEL_18;
  }
  type metadata accessor for AnyWeakRemoteLoader();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    type metadata accessor for RemoteLoaderError(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE160, type metadata accessor for RemoteLoaderError, (uint64_t)&unk_1B10431CC);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v14 = v95;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_17;
  v16 = Strong;
  v17 = Strong + OBJC_IVAR____TtC6LiftUI12RemoteLoader_dataSource;
  v18 = MEMORY[0x1B5E152E4](Strong + OBJC_IVAR____TtC6LiftUI12RemoteLoader_dataSource);
  if (!v18)
  {
    swift_release();
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  v19 = v18;
  v90 = v16;
  v91 = v14;
  v20 = *(_QWORD *)(v17 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F9723C();
  swift_unknownObjectRetain();
  sub_1B1036278();
  if (v2)
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    v89 = v19;
    v87 = v20;
    LOBYTE(v95) = 0;
    sub_1B0F56A98();
    sub_1B10360BC();
    v22 = *((_QWORD *)&v106 + 1);
    v23 = BYTE8(v107);
    LOBYTE(v95) = 1;
    v24 = v106;
    v88 = v107;
    sub_1B0F56B9C(v106, *((uint64_t *)&v106 + 1), v107, BYTE8(v107));
    sub_1B10360A4();
    v86 = v23;
    v83 = v22;
    v76 = v24;
    v25 = v106;
    v26 = v107;
    LODWORD(v22) = BYTE8(v107);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE170);
    LOBYTE(v95) = 3;
    v82 = *((_QWORD *)&v25 + 1);
    sub_1B0F56C04(v25, *((uint64_t *)&v25 + 1), v26, v22);
    sub_1B0F97280();
    v81 = v27;
    sub_1B10360A4();
    v79 = v22;
    v77 = v25;
    v78 = v26;
    v71 = 0;
    v28 = v106;
    v29 = BYTE8(v107);
    LOBYTE(v95) = 7;
    v85 = v107;
    sub_1B0F56C18(v106, *((uint64_t *)&v106 + 1), v107, BYTE8(v107));
    sub_1B10360A4();
    v75 = v29;
    v84 = v28;
    v30 = v106;
    v31 = v107;
    v74 = BYTE8(v107);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF610);
    LOBYTE(v95) = 4;
    v80 = v30;
    v81 = v31;
    sub_1B0F56C18(v30, *((uint64_t *)&v30 + 1), v31, v74);
    v33 = sub_1B0F972CC();
    v73 = v32;
    sub_1B10360A4();
    v70[1] = v33;
    if ((_QWORD)v106)
      v34 = v106;
    else
      v34 = MEMORY[0x1E0DEE9D8];
    v35 = *(_QWORD *)(v34 + 16);
    if (v35)
    {
      v126 = MEMORY[0x1E0DEE9D8];
      v36 = v35;
      sub_1B0FDD904(0, v35, 0);
      v37 = v36;
      v72 = v34;
      v38 = v34 + 32;
      do
      {
        v39 = v38;
        sub_1B0F97374(v38, (uint64_t)&v95);
        sub_1B0F5FD84((uint64_t)&v95, (uint64_t)&v106);
        sub_1B0F973B0((uint64_t)&v95);
        v40 = v126;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B0FDD904(0, *(_QWORD *)(v40 + 16) + 1, 1);
          v40 = v126;
        }
        v42 = *(_QWORD *)(v40 + 16);
        v41 = *(_QWORD *)(v40 + 24);
        if (v42 >= v41 >> 1)
        {
          sub_1B0FDD904(v41 > 1, v42 + 1, 1);
          v40 = v126;
        }
        *(_QWORD *)(v40 + 16) = v42 + 1;
        sub_1B0F5A0E4(&v106, v40 + 40 * v42 + 32);
        v38 = v39 + 40;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v40 = MEMORY[0x1E0DEE9D8];
    }
    LOBYTE(v95) = 5;
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v73 = v40;
    if ((_QWORD)v106)
      v43 = v106;
    else
      v43 = MEMORY[0x1E0DEE9D8];
    v44 = *(_QWORD *)(v43 + 16);
    if (v44)
    {
      v126 = MEMORY[0x1E0DEE9D8];
      sub_1B0FDD904(0, v44, 0);
      v70[0] = v43;
      v45 = v43 + 32;
      do
      {
        v46 = v45;
        sub_1B0F97374(v45, (uint64_t)&v95);
        sub_1B0F5FD84((uint64_t)&v95, (uint64_t)&v106);
        sub_1B0F973B0((uint64_t)&v95);
        v47 = v126;
        v48 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B0FDD904(0, *(_QWORD *)(v47 + 16) + 1, 1);
          v47 = v126;
        }
        v50 = *(_QWORD *)(v47 + 16);
        v49 = *(_QWORD *)(v47 + 24);
        if (v50 >= v49 >> 1)
        {
          sub_1B0FDD904(v49 > 1, v50 + 1, 1);
          v47 = v126;
        }
        *(_QWORD *)(v47 + 16) = v50 + 1;
        sub_1B0F5A0E4(&v106, v47 + 40 * v50 + 32);
        v45 = v46 + 40;
        v44 = v48 - 1;
      }
      while (v48 != 1);
      v72 = v47;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v72 = MEMORY[0x1E0DEE9D8];
    }
    LOBYTE(v95) = 6;
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v51 = v106;
    if (!(_QWORD)v106)
      v51 = MEMORY[0x1E0DEE9D8];
    v71 = v51;
    v52 = *(_QWORD *)(v51 + 16);
    if (v52)
    {
      v126 = MEMORY[0x1E0DEE9D8];
      sub_1B0FDD904(0, v52, 0);
      v53 = v71 + 32;
      do
      {
        v54 = v53;
        sub_1B0F97374(v53, (uint64_t)&v95);
        sub_1B0F5FD84((uint64_t)&v95, (uint64_t)&v106);
        sub_1B0F973B0((uint64_t)&v95);
        v55 = v126;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B0FDD904(0, *(_QWORD *)(v55 + 16) + 1, 1);
          v55 = v126;
        }
        v57 = *(_QWORD *)(v55 + 16);
        v56 = *(_QWORD *)(v55 + 24);
        if (v57 >= v56 >> 1)
        {
          sub_1B0FDD904(v56 > 1, v57 + 1, 1);
          v55 = v126;
        }
        *(_QWORD *)(v55 + 16) = v57 + 1;
        sub_1B0F5A0E4(&v106, v55 + 40 * v57 + 32);
        v53 = v54 + 40;
        --v52;
      }
      while (v52);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v55 = MEMORY[0x1E0DEE9D8];
    }
    (*(void (**)(char *, uint64_t))(v93 + 8))(v131, v94);
    *(_QWORD *)&v95 = v76;
    *((_QWORD *)&v95 + 1) = v83;
    *(_QWORD *)&v96 = v88;
    BYTE8(v96) = v86;
    *(_QWORD *)&v97 = v77;
    *((_QWORD *)&v97 + 1) = v82;
    *(_QWORD *)&v98 = v78;
    BYTE8(v98) = v79;
    v99 = v84;
    *(_QWORD *)&v100 = v85;
    BYTE8(v100) = v75;
    v58 = v80;
    v101 = v80;
    *(_QWORD *)&v102 = v81;
    BYTE8(v102) = v74;
    *(_QWORD *)&v103 = v73;
    *((_QWORD *)&v103 + 1) = v72;
    *(_QWORD *)&v104 = v55;
    *((_QWORD *)&v104 + 1) = v89;
    v105 = v87;
    sub_1B0F75E80((uint64_t)&v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B0F57190(v58, *((uint64_t *)&v58 + 1), v81, v74);
    sub_1B0F57190(v84, *((uint64_t *)&v84 + 1), v85, v75);
    v59 = v77;
    sub_1B0F56B88(v77, v82, v78, v79);
    v60 = v76;
    v61 = v83;
    v62 = v88;
    v63 = v86;
    sub_1B0F56ADC(v76, v83, v88, v86);
    v64 = v104;
    v65 = v92;
    *(_OWORD *)(v92 + 128) = v103;
    *(_OWORD *)(v65 + 144) = v64;
    *(_QWORD *)(v65 + 160) = v105;
    v66 = v100;
    *(_OWORD *)(v65 + 64) = v99;
    *(_OWORD *)(v65 + 80) = v66;
    v67 = v102;
    *(_OWORD *)(v65 + 96) = v101;
    *(_OWORD *)(v65 + 112) = v67;
    v68 = v96;
    *(_OWORD *)v65 = v95;
    *(_OWORD *)(v65 + 16) = v68;
    v69 = v98;
    *(_OWORD *)(v65 + 32) = v97;
    *(_OWORD *)(v65 + 48) = v69;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    *(_QWORD *)&v106 = v60;
    *((_QWORD *)&v106 + 1) = v61;
    *(_QWORD *)&v107 = v62;
    BYTE8(v107) = v63;
    *(_DWORD *)((char *)&v107 + 9) = v130[0];
    HIDWORD(v107) = *(_DWORD *)((char *)v130 + 3);
    v108 = v59;
    v109 = v82;
    v110 = v78;
    v111 = v79;
    *(_DWORD *)v112 = *(_DWORD *)v129;
    *(_DWORD *)&v112[3] = *(_DWORD *)&v129[3];
    v113 = v84;
    v114 = v85;
    v115 = v75;
    *(_DWORD *)v116 = *(_DWORD *)v128;
    *(_DWORD *)&v116[3] = *(_DWORD *)&v128[3];
    v117 = v80;
    v118 = v81;
    v119 = v74;
    *(_DWORD *)v120 = *(_DWORD *)v127;
    *(_DWORD *)&v120[3] = *(_DWORD *)&v127[3];
    v121 = v73;
    v122 = v72;
    v123 = v55;
    v124 = v89;
    v125 = v87;
    return sub_1B0F973E4((uint64_t)&v106);
  }
}

uint64_t sub_1B0F96C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  v4 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(v2 + 160);
  v5 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v3 + 96) = v5;
  v6 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v3 + 128) = v6;
  v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 32) = v7;
  v8 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v3 + 64) = v8;
  return swift_task_switch();
}

uint64_t sub_1B0F96CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = sub_1B1035D80();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v5 + 160) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v5 + 176) = v6;
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v5 + 112) = v8;
  v9 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v5 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v5 + 144) = v9;
  v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 48) = v10;
  v11 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 80) = v11;
  *(_QWORD *)(v5 + 192) = v7;
  *(_QWORD *)(v5 + 200) = v3;
  *(_QWORD *)(v5 + 208) = v1;
  sub_1B0F75E80(v0 + 16);
  swift_retain();
  swift_retain();
  sub_1B0F70150(v2, (uint64_t)&unk_1EEEDEAA8, v5);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0F96DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B0F947EC(a1, a2, a3, a4);
}

uint64_t sub_1B0F96DC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F95D28(a1, a2);
}

unint64_t sub_1B0F96DD4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F96DF8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F96DF8()
{
  unint64_t result;

  result = qword_1EEEDF590;
  if (!qword_1EEEDF590)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D674, &type metadata for HTTPRequestAction);
    atomic_store(result, (unint64_t *)&qword_1EEEDF590);
  }
  return result;
}

unint64_t sub_1B0F96E3C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F96E60();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F96E60()
{
  unint64_t result;

  result = qword_1EEEDF5A0;
  if (!qword_1EEEDF5A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D69C, &type metadata for HTTPRequestAction);
    atomic_store(result, &qword_1EEEDF5A0);
  }
  return result;
}

uint64_t sub_1B0F96EA4(uint64_t a1, uint64_t a2)
{
  __swift_memcpy25_8(a2, a1);
  return a2;
}

uint64_t sub_1B0F96EE0(uint64_t a1)
{
  sub_1B0F56B9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

uint64_t sub_1B0F96F10(uint64_t a1)
{
  sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

uint64_t sub_1B0F96F44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F76EDC;
  return sub_1B0F70394(a1, v4, v5, v6, v7, v8);
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1B0F97014()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEDF5E8;
  if (!qword_1EEEDF5E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF5E0);
    v2 = sub_1B0F97080();
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEDF5E8);
  }
  return result;
}

unint64_t sub_1B0F97080()
{
  unint64_t result;

  result = qword_1EEEDF5F0;
  if (!qword_1EEEDF5F0)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for DecodableState, &type metadata for DecodableState);
    atomic_store(result, (unint64_t *)&qword_1EEEDF5F0);
  }
  return result;
}

unint64_t sub_1B0F970C4()
{
  unint64_t result;

  result = qword_1EEEDF5F8;
  if (!qword_1EEEDF5F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DD94, &type metadata for DecodableStateError);
    atomic_store(result, (unint64_t *)&qword_1EEEDF5F8);
  }
  return result;
}

uint64_t sub_1B0F97108()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  int v3;

  swift_unknownObjectRelease();
  sub_1B0F56ADC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  v1 = *(unsigned __int8 *)(v0 + 88);
  if (v1 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v1);
  v2 = *(unsigned __int8 *)(v0 + 120);
  if (v2 != 255)
    sub_1B0F571A8(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), v2 & 1);
  v3 = *(unsigned __int8 *)(v0 + 152);
  if (v3 != 255)
    sub_1B0F571A8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v3 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0F971BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[25];
  v7 = v1[26];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B0F737CC;
  return sub_1B0F94938(a1, v4, v5, v6, v8, v7);
}

unint64_t sub_1B0F9723C()
{
  unint64_t result;

  result = qword_1EEEDF608;
  if (!qword_1EEEDF608)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D7D0, &type metadata for HTTPRequestAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF608);
  }
  return result;
}

unint64_t sub_1B0F97280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE178;
  if (!qword_1EEEDE178)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE170);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for Referenceable<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE178);
  }
  return result;
}

unint64_t sub_1B0F972CC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EEEDF618;
  if (!qword_1EEEDF618)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF610);
    v2 = sub_1B0F97330();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDF618);
  }
  return result;
}

unint64_t sub_1B0F97330()
{
  unint64_t result;

  result = qword_1EEEDF620;
  if (!qword_1EEEDF620)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for RemoteActionBox, &type metadata for RemoteActionBox);
    atomic_store(result, (unint64_t *)&qword_1EEEDF620);
  }
  return result;
}

uint64_t sub_1B0F97374(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyViewModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0F973B0(uint64_t a1)
{
  destroy for AnyViewModifier();
  return a1;
}

uint64_t sub_1B0F973E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 112);
  v8 = *(_BYTE *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_BYTE *)(a1 + 120);
  sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F56B88(v2, v3, v4, v8);
  sub_1B0F57190(v5, v6, v7, v9);
  sub_1B0F57190(v14, v13, v12, v10);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6LiftUI17HTTPRequestMethodOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6LiftUI17HTTPRequestMethodOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B0F975B8 + 4 * byte_1B103D545[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B0F975EC + 4 * byte_1B103D540[v4]))();
}

uint64_t sub_1B0F975EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F975F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0F975FCLL);
  return result;
}

uint64_t sub_1B0F97608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0F97610);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B0F97614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0F9761C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequestAction.CodingKeys()
{
  return &type metadata for HTTPRequestAction.CodingKeys;
}

unint64_t sub_1B0F9763C()
{
  unint64_t result;

  result = qword_1EEEDF628;
  if (!qword_1EEEDF628)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D7A8, &type metadata for HTTPRequestAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF628);
  }
  return result;
}

unint64_t sub_1B0F97684()
{
  unint64_t result;

  result = qword_1EEEDF630;
  if (!qword_1EEEDF630)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D6E0, &type metadata for HTTPRequestAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF630);
  }
  return result;
}

unint64_t sub_1B0F976CC()
{
  unint64_t result;

  result = qword_1EEEDF638;
  if (!qword_1EEEDF638)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D708, &type metadata for HTTPRequestAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF638);
  }
  return result;
}

uint64_t sub_1B0F97710()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t *sub_1B0F97758(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_1B1035F54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      v12 = sub_1B1035F54();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1B0F97884(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRelease();
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
      goto LABEL_6;
    case 0:
LABEL_6:
      v3 = sub_1B1035F54();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *sub_1B0F978F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1B1035F54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    v9 = sub_1B1035F54();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_1B0F979F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1B0F97B10((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
      v5 = (char *)a1 + v4;
      v6 = (char *)a2 + v4;
      v7 = sub_1B1035F54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      v8 = sub_1B1035F54();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1B0F97B10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DynamicKeyError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DynamicKeyError()
{
  uint64_t result;

  result = qword_1EEEDF648;
  if (!qword_1EEEDF648)
    return swift_getSingletonMetadata();
  return result;
}

_OWORD *sub_1B0F97B88(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    v7 = sub_1B1035F54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    v8 = sub_1B1035F54();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *sub_1B0F97C4C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1B0F97B10((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF640) + 48);
      v5 = (char *)a1 + v4;
      v6 = (char *)a2 + v4;
      v7 = sub_1B1035F54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      v8 = sub_1B1035F54();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1B0F97D20()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  result = sub_1B1035F54();
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v4 = &v2;
    v5 = v3;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for DynamicKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for DynamicKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicKey()
{
  return &type metadata for DynamicKey;
}

uint64_t sub_1B0F97F28()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B0F97F54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_1B0F97F68()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_1B0F97F74(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_1B0F97F84()
{
  sub_1B0F5DCE4();
  return sub_1B10362B4();
}

uint64_t sub_1B0F97FAC()
{
  sub_1B0F5DCE4();
  return sub_1B10362C0();
}

uint64_t sub_1B0F97FD4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1B1036128();
}

unint64_t sub_1B0F98008()
{
  unint64_t result;

  result = qword_1EEEDF658;
  if (!qword_1EEEDF658)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D964, &type metadata for DynamicKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDF658);
  }
  return result;
}

unint64_t sub_1B0F98050()
{
  unint64_t result;

  result = qword_1EEEDF660;
  if (!qword_1EEEDF660)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103D98C, &type metadata for DynamicKey);
    atomic_store(result, (unint64_t *)&qword_1EEEDF660);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisabledModifier()
{
  return &type metadata for DisabledModifier;
}

uint64_t sub_1B0F980A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE7F0, &qword_1EEEDE7E8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B1036164();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v8;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0F981BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  sub_1B0F5E604(*(_QWORD *)v3, v9, v10, v11);
  sub_1B0FD7528(a2, v8, v9, v10, v11);
  result = sub_1B0F5E6A0(v8, v9, v10, v11);
  if (!v4)
  {
    v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF670);
    v14 = sub_1B103497C();
    a3[3] = v14;
    v15[0] = v13;
    v15[1] = sub_1B0F5A7E4(&qword_1EEEDF678, &qword_1EEEDF670, MEMORY[0x1E0CDD0D8]);
    a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v14, v15);
    __swift_allocate_boxed_opaque_existential_1(a3);
    return sub_1B103560C();
  }
  return result;
}

uint64_t sub_1B0F98300@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0F980A4(a1, a2);
}

unint64_t sub_1B0F98314(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F98338();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0F98338()
{
  unint64_t result;

  result = qword_1EEEDF668;
  if (!qword_1EEEDF668)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DAA4, &type metadata for DisabledModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF668);
  }
  return result;
}

uint64_t sub_1B0F9837C(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD84C(0, v2, 0);
    v3 = v10;
    v5 = a1 + 32;
    while (1)
    {
      v5 += 8;
      swift_retain();
      sub_1B0F995A8();
      if (v1)
        break;
      swift_release();
      v10 = v3;
      v7 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v3 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_1B0FDD84C(v6 > 1, v7 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v7 + 1;
      sub_1B0F5A964(&v9, (_OWORD *)(v3 + 32 * v7 + 32));
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_release();
  }
  return v3;
}

uint64_t sub_1B0F9848C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_1B1035DC8();
  if (!v20)
    return sub_1B1035CF0();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_1B1035FCC();
  v34 = sub_1B1035FD8();
  sub_1B1035F90();
  v37 = v8;
  result = sub_1B1035DBC();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_1B1035DE0();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_1B1035FC0();
      result = sub_1B1035DD4();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1B0F9877C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0F987B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1B0F970C4();
  v1 = swift_allocError();
  v2 = MEMORY[0x1E0DEA968];
  *v3 = v0;
  v3[1] = v2;
  swift_retain();
  swift_willThrow();
  return v1;
}

uint64_t DecodableState.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF680);
  MEMORY[0x1E0C80A78](v5);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (v2)
  {

    v23 = 0;
    memset(v22, 0, sizeof(v22));
    sub_1B0F5A3AC((uint64_t)v22, &qword_1EEEDF688);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B1036254();
    v19 = a2;
    sub_1B0F5A0E4(v22, (uint64_t)&v24);
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    v7 = sub_1B1036110();
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((v7 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
        sub_1B0F9D608();
        sub_1B1036104();
        v14 = *(_QWORD *)&v22[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_1B0FDD0F4(0, v8[2] + 1, 1, v8);
        v16 = v8[2];
        v15 = v8[3];
        if (v16 >= v15 >> 1)
          v8 = sub_1B0FDD0F4((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
        v8[2] = v16 + 1;
        v8[v16 + 4] = v14;
        __swift_project_boxed_opaque_existential_1(&v24, v25);
      }
      while ((sub_1B1036110() & 1) == 0);
    }
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    v13 = v9 | 0x8000000000000000;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    a2 = v19;
  }
  else
  {
    sub_1B0F5A0E4(v22, (uint64_t)&v24);
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    v10 = sub_1B1036134();
    v12 = v11;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  *a2 = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void DecodableState.encode(to:)()
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6A0);
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X11 }
}

uint64_t sub_1B0F99110()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_1B1036290();
  __swift_mutable_project_boxed_opaque_existential_1(v1 - 128, *(_QWORD *)(v1 - 104));
  sub_1B1036170();
  return __swift_destroy_boxed_opaque_existential_1(v1 - 128);
}

void sub_1B0F99324(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v6 - 152) = v1;
  v7 = *(_QWORD *)(a1 + 16);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  sub_1B0F5DCE4();
  swift_bridgeObjectRetain();
  sub_1B103629C();
  v8 = 0;
  v9 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v6 - 144) = v7 + 64;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  *(_QWORD *)(v6 - 136) = (unint64_t)(v10 + 63) >> 6;
  if ((v11 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    *(_QWORD *)(v6 - 88) = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * i);
    *(_QWORD *)(v6 - 128) = v19;
    *(_QWORD *)(v6 - 120) = v20;
    *(_QWORD *)(v6 - 112) = 0;
    *(_BYTE *)(v6 - 104) = 1;
    sub_1B0F97080();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B10360EC();
    if (v2)
      break;
    swift_release();
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= *(_QWORD *)(v6 - 136))
      goto LABEL_24;
    v16 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 8 * v8);
    if (!v16)
    {
      v17 = v8 + 1;
      if (v8 + 1 >= *(_QWORD *)(v6 - 136))
        goto LABEL_24;
      v16 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 8 * v17);
      if (!v16)
      {
        v17 = v8 + 2;
        if (v8 + 2 >= *(_QWORD *)(v6 - 136))
          goto LABEL_24;
        v16 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 8 * v17);
        if (!v16)
        {
          v17 = v8 + 3;
          if (v8 + 3 >= *(_QWORD *)(v6 - 136))
          {
LABEL_24:
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 8))(v4, v3);
LABEL_28:
            JUMPOUT(0x1B0F992FCLL);
          }
          v16 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v8 = v17 + 1;
              if (__OFADD__(v17, 1))
                break;
              if (v8 >= *(_QWORD *)(v6 - 136))
                goto LABEL_24;
              v16 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 8 * v8);
              ++v17;
              if (v16)
                goto LABEL_15;
            }
LABEL_26:
            __break(1u);
            JUMPOUT(0x1B0F99558);
          }
        }
      }
      v8 = v17;
    }
LABEL_15:
    v12 = (v16 - 1) & v16;
  }
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 8))(v4, v3);
  swift_release();
  goto LABEL_28;
}

uint64_t sub_1B0F99570(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  return (*(uint64_t (**)(uint64_t *))(a2 + 16))(&v4);
}

void sub_1B0F995A8()
{
  __asm { BR              X11 }
}

uint64_t sub_1B0F995EC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v1[3] = MEMORY[0x1E0DEA968];
  *v1 = v3;
  v1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0F99784@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return DecodableState.init(from:)(a1, a2);
}

void sub_1B0F99798()
{
  DecodableState.encode(to:)();
}

uint64_t sub_1B0F997B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X11 }
  }
  return 1;
}

uint64_t sub_1B0F99970(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int64_t v17;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = 1 << *(_BYTE *)(a1 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v5 = v4 & *(_QWORD *)(a1 + 64);
    v17 = (unint64_t)(v3 + 63) >> 6;
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
LABEL_22:
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
      v11 = *v10;
      v12 = v10[1];
      swift_retain();
      swift_bridgeObjectRetain();
      v13 = sub_1B0F56A3C(v11, v12);
      v15 = v14;
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        __asm { BR              X9 }
      swift_release();
      return 0;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v17 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v17 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v17 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v17 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1B0F9A364);
          }
          if (v8 >= v17)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

void DecodableState.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_1B0F9A3F8()
{
  sub_1B1036218();
  return sub_1B1035C00();
}

uint64_t sub_1B0F9A424()
{
  sub_1B1036218();
  return sub_1B1036218();
}

uint64_t sub_1B0F9A488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1036218();
  return sub_1B0F9F244(v1, v2);
}

uint64_t sub_1B0F9A4B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1036218();
  return sub_1B0F9E4B8(v1, v2);
}

uint64_t DecodableState.hashValue.getter()
{
  sub_1B103620C();
  DecodableState.hash(into:)();
  return sub_1B103623C();
}

uint64_t sub_1B0F9A524()
{
  sub_1B103620C();
  DecodableState.hash(into:)();
  return sub_1B103623C();
}

uint64_t sub_1B0F9A570()
{
  sub_1B103620C();
  DecodableState.hash(into:)();
  return sub_1B103623C();
}

uint64_t DecodableState.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_1B103461C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1034610();
  v4 = sub_1B1034604();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1B0F9A644@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = sub_1B103461C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1034610();
  v6 = sub_1B1034604();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

uint64_t String.asDecodable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *a3 = v6;
  return swift_bridgeObjectRetain();
}

void static String.create(with:)()
{
  sub_1B0F9877C();
}

uint64_t sub_1B0F9A748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a1 = v5;
  return swift_bridgeObjectRetain();
}

void sub_1B0F9A790(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1B0F9877C();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

uint64_t Int.asDecodable.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *a2 = result | 0x2000000000000000;
  return result;
}

uint64_t static Int.create(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  if ((unint64_t)*a1 >> 61 == 1)
    return *(_QWORD *)(v1 + 16);
  sub_1B0F970C4();
  swift_allocError();
  v3 = MEMORY[0x1E0DEB418];
  *v4 = v1;
  v4[1] = v3;
  swift_retain();
  return swift_willThrow();
}

uint64_t sub_1B0F9A880@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = result | 0x2000000000000000;
  return result;
}

uint64_t *sub_1B0F9A8C0@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *result;
  if ((unint64_t)*result >> 61 == 1)
  {
    *a2 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    sub_1B0F970C4();
    swift_allocError();
    *v4 = v3;
    v4[1] = v2;
    swift_retain();
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t *static Double.create(with:)(uint64_t *a1)
{
  return sub_1B0F9B1CC(a1);
}

uint64_t sub_1B0F9A944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = result | 0x4000000000000000;
  return result;
}

uint64_t *sub_1B0F9A98C@<X0>(uint64_t *result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  _QWORD *v6;

  v3 = *result;
  v4 = (unint64_t)*result >> 61;
  if ((_DWORD)v4 == 1)
  {
    v5 = (double)*(uint64_t *)(v3 + 16);
    goto LABEL_5;
  }
  if ((_DWORD)v4 == 2)
  {
    v5 = *(double *)(v3 + 16);
LABEL_5:
    *a2 = v5;
    return result;
  }
  sub_1B0F970C4();
  swift_allocError();
  *v6 = v3;
  v6[1] = v2;
  swift_retain();
  return (uint64_t *)swift_willThrow();
}

uint64_t Bool.asDecodable.getter@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *a2 = result | 0x6000000000000000;
  return result;
}

uint64_t static Bool.create(with:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  if ((unint64_t)*a1 >> 61 == 3)
  {
    v2 = *(_BYTE *)(v1 + 16);
  }
  else
  {
    sub_1B0F970C4();
    swift_allocError();
    v3 = MEMORY[0x1E0DEAFA0];
    *v4 = v1;
    v4[1] = v3;
    swift_retain();
    swift_willThrow();
  }
  return v2 & 1;
}

uint64_t sub_1B0F9AAC8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v3;
  *a1 = result | 0x6000000000000000;
  return result;
}

uint64_t *sub_1B0F9AB08@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *result;
  if ((unint64_t)*result >> 61 == 3)
  {
    *a2 = *(_BYTE *)(v3 + 16);
  }
  else
  {
    sub_1B0F970C4();
    swift_allocError();
    *v4 = v3;
    v4[1] = v2;
    swift_retain();
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t Array<A>.asDecodable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[6];

  v8 = swift_allocObject();
  v13[5] = a1;
  v13[2] = a2;
  v13[3] = a3;
  v9 = sub_1B1035D20();
  v10 = MEMORY[0x1B5E15188](MEMORY[0x1E0DEAF50], v9);
  result = sub_1B0F9848C((void (*)(char *, char *))sub_1B0F9F4F8, (uint64_t)v13, v9, (uint64_t)&type metadata for DecodableState, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  *(_QWORD *)(v8 + 16) = result;
  *a4 = v8 | 0x8000000000000000;
  return result;
}

uint64_t static Array<A>.create(with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  if ((unint64_t)*a1 >> 61 == 4)
  {
    v14 = *(_QWORD *)(v2 + 16);
    MEMORY[0x1E0C80A78](v14);
    v12[2] = v4;
    v12[3] = v5;
    swift_bridgeObjectRetain();
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3F8);
    v8 = sub_1B0F9F578(&qword_1EEEDEE48, MEMORY[0x1E0DEAF50]);
    v9 = sub_1B0F9848C((void (*)(char *, char *))sub_1B0F9F52C, (uint64_t)v12, v6, a2, v7, v8, MEMORY[0x1E0DEDB38], (uint64_t)&v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
    sub_1B0F970C4();
    swift_allocError();
    *v10 = v2;
    v10[1] = v9;
    swift_retain();
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1B0F9AD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;

  return Array<A>.asDecodable.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_1B0F9ADAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = static Array<A>.create(with:)(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t Dictionary<>.asDecodable.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = swift_allocObject();
  result = sub_1B1035B1C();
  *(_QWORD *)(v2 + 16) = result;
  *a1 = v2 | 0xA000000000000000;
  return result;
}

uint64_t static Dictionary<>.create(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *a1;
  if ((unint64_t)*a1 >> 61 == 5)
  {
    MEMORY[0x1E0C80A78](a1);
    swift_bridgeObjectRetain();
    v2 = sub_1B1035B1C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF5E0);
    sub_1B0F970C4();
    swift_allocError();
    *v3 = v1;
    v3[1] = v2;
    swift_retain();
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1B0F9AF7C@<X0>(unint64_t *a1@<X8>)
{
  return Dictionary<>.asDecodable.getter(a1);
}

uint64_t sub_1B0F9AF90@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = static Dictionary<>.create(with:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t DecodableState.asDecodable.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t static DecodableState.create(with:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1B0F9AFF0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1B0F9B000@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t NSString.asDecodable.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = swift_allocObject();
  result = sub_1B1035B94();
  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = v4;
  *a1 = v2;
  return result;
}

void static NSString.create(with:)()
{
  uint64_t v0;

  sub_1B0F9877C();
  if (!v0)
  {
    sub_1B1035B88();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B0F9B0C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = swift_allocObject();
  result = sub_1B1035B94();
  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = v4;
  *a1 = v2;
  return result;
}

void sub_1B0F9B110(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_1B0F9877C();
  if (!v1)
  {
    v3 = sub_1B1035B88();
    swift_bridgeObjectRelease();
    *a1 = v3;
  }
}

uint64_t CGFloat.asDecodable.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result | 0x4000000000000000;
  return result;
}

uint64_t *static CGFloat.create(with:)(uint64_t *a1)
{
  return sub_1B0F9B1CC(a1);
}

uint64_t *sub_1B0F9B1CC(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *result;
  v2 = (unint64_t)*result >> 61;
  if ((_DWORD)v2 != 1 && (_DWORD)v2 != 2)
  {
    sub_1B0F970C4();
    swift_allocError();
    v3 = MEMORY[0x1E0DEB070];
    *v4 = v1;
    v4[1] = v3;
    swift_retain();
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t *sub_1B0F9B254@<X0>(uint64_t *result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  v3 = (unint64_t)*result >> 61;
  if ((_DWORD)v3 == 1)
  {
    v4 = (double)*(uint64_t *)(v2 + 16);
    goto LABEL_5;
  }
  if ((_DWORD)v3 == 2)
  {
    v4 = *(double *)(v2 + 16);
LABEL_5:
    *a2 = v4;
    return result;
  }
  sub_1B0F970C4();
  swift_allocError();
  v5 = MEMORY[0x1E0DEB070];
  *v6 = v2;
  v6[1] = v5;
  swift_retain();
  return (uint64_t *)swift_willThrow();
}

uint64_t NSDictionary.asDecodable.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v31;
  _QWORD v32[4];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  sub_1B1035DF8();
  swift_retain();
  sub_1B1035E04();
  sub_1B0F9F5F0((uint64_t)&v34, (uint64_t)&v37);
  if (!v38)
  {
    v1 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_24:
    swift_release_n();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
    *a1 = result | 0xA000000000000000;
    return result;
  }
  v1 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v2 = &v39;
  v3 = MEMORY[0x1E0DEE9B8];
  while (1)
  {
    sub_1B0F5A964(v2, v33);
    sub_1B0F5A964(&v37, &v34);
    if ((swift_dynamicCast() & 1) != 0)
      break;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    sub_1B1035E04();
    sub_1B0F9F5F0((uint64_t)&v34, (uint64_t)&v37);
    if (!v38)
      goto LABEL_24;
  }
  v4 = v32[0];
  v5 = v32[1];
  sub_1B0F57208((uint64_t)v33, (uint64_t)v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6B8);
  if (!swift_dynamicCast())
  {
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    sub_1B0F5A3AC((uint64_t)&v34, &qword_1EEEDF6C0);
    swift_bridgeObjectRetain();
    v20 = sub_1B0F56A3C(v4, v5);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v34 = v1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B0F9DC88();
        v1 = (_QWORD *)v34;
      }
      swift_bridgeObjectRelease();
      sub_1B0F9D008(v20, (uint64_t)v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_4;
  }
  v6 = v3;
  v7 = v2;
  v8 = *((_QWORD *)&v35 + 1);
  v9 = v36;
  __swift_project_boxed_opaque_existential_1(&v34, *((uint64_t *)&v35 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 8))(&v31, v8, v9);
  v10 = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v34 = v1;
  v13 = sub_1B0F56A3C(v4, v5);
  v14 = v1[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (!__OFADD__(v14, v15))
  {
    v17 = v12;
    if (v1[3] < v16)
    {
      sub_1B0F9C41C(v16, v11);
      v18 = sub_1B0F56A3C(v4, v5);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_27;
      v13 = v18;
      v1 = (_QWORD *)v34;
      if ((v17 & 1) == 0)
        goto LABEL_20;
LABEL_18:
      v24 = v1[7];
      swift_release();
      *(_QWORD *)(v24 + 8 * v13) = v10;
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v7;
      v3 = v6;
      goto LABEL_4;
    }
    if ((v11 & 1) != 0)
    {
      v1 = (_QWORD *)v34;
      if ((v12 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      sub_1B0F9DC88();
      v1 = (_QWORD *)v34;
      if ((v17 & 1) != 0)
        goto LABEL_18;
    }
LABEL_20:
    v1[(v13 >> 6) + 8] |= 1 << v13;
    v25 = (uint64_t *)(v1[6] + 16 * v13);
    *v25 = v4;
    v25[1] = v5;
    *(_QWORD *)(v1[7] + 8 * v13) = v10;
    v26 = v1[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_26;
    v1[2] = v28;
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = sub_1B10361B8();
  __break(1u);
  return result;
}

uint64_t static NSDictionary.create(with:)(uint64_t *a1)
{
  return sub_1B0F9F638(a1);
}

uint64_t sub_1B0F9B69C@<X0>(unint64_t *a1@<X8>)
{
  return NSDictionary.asDecodable.getter(a1);
}

uint64_t sub_1B0F9B6BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B0F9F638(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t NSArray.asDecodable.getter@<X0>(unint64_t *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char v18[32];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v16 = a1;
  v2 = sub_1B10345A4();
  v15 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v1;
  sub_1B1035E58();

  sub_1B0F9F70C();
  sub_1B1035E70();
  if (v24)
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1B0F5A964(&v23, v22);
      sub_1B0F57208((uint64_t)v22, (uint64_t)v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6B8);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v8 = *((_QWORD *)&v20 + 1);
        v7 = v21;
        __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 8))(&v17, v8, v7);
        v9 = v17;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1B0FDD0F4(0, v6[2] + 1, 1, v6);
        v11 = v6[2];
        v10 = v6[3];
        if (v11 >= v10 >> 1)
          v6 = sub_1B0FDD0F4((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
        v6[2] = v11 + 1;
        v6[v11 + 4] = v9;
      }
      else
      {
        v21 = 0;
        v19 = 0u;
        v20 = 0u;
        sub_1B0F5A3AC((uint64_t)&v19, &qword_1EEEDF6C0);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      }
      sub_1B1035E70();
    }
    while (v24);
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = swift_allocObject();
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v4, v2);
  *(_QWORD *)(v12 + 16) = v6;
  *v16 = v12 | 0x8000000000000000;
  return result;
}

uint64_t static NSArray.create(with:)(uint64_t *a1)
{
  return sub_1B0F9F754(a1);
}

uint64_t sub_1B0F9B93C@<X0>(unint64_t *a1@<X8>)
{
  return NSArray.asDecodable.getter(a1);
}

uint64_t sub_1B0F9B95C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B0F9F754(a1);
  if (!v2)
    *a2 = result;
  return result;
}

id NSNumber.asDecodable.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  id result;
  uint64_t v5;

  v3 = swift_allocObject();
  result = objc_msgSend(v1, sel_doubleValue);
  *(_QWORD *)(v3 + 16) = v5;
  *a1 = v3 | 0x4000000000000000;
  return result;
}

uint64_t static NSNumber.create(with:)(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  double v3;
  id v4;
  uint64_t result;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *a1;
  v2 = (unint64_t)*a1 >> 61;
  if ((_DWORD)v2 == 1)
  {
    v3 = (double)*(uint64_t *)(v1 + 16);
  }
  else
  {
    if ((_DWORD)v2 != 2)
    {
      sub_1B0F970C4();
      swift_allocError();
      v7 = MEMORY[0x1E0DEB070];
      *v8 = v1;
      v8[1] = v7;
      swift_retain();
      return swift_willThrow();
    }
    v3 = *(double *)(v1 + 16);
  }
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v3);
  result = swift_dynamicCastUnknownClass();
  if (result)
    return result;

  sub_1B0F970C4();
  swift_allocError();
  *v6 = xmmword_1B103DDE0;
  return swift_willThrow();
}

id sub_1B0F9BAC8@<X0>(uint64_t *a1@<X8>)
{
  void **v1;
  void *v3;
  uint64_t v4;
  id result;
  uint64_t v6;

  v3 = *v1;
  v4 = swift_allocObject();
  result = objc_msgSend(v3, sel_doubleValue);
  *(_QWORD *)(v4 + 16) = v6;
  *a1 = v4 | 0x4000000000000000;
  return result;
}

uint64_t sub_1B0F9BB24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = static NSNumber.create(with:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B0F9BB4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B0F9BB54(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return sub_1B0FDD84C(result, v5, 0);
  }
  return result;
}

double sub_1B0F9BBB8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1B0F56A48(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B0F9D8A0();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1B1036008();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1B0F5A964((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1B0F9CD84(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1B0F9BCB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1B0F56A3C(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B0F9DC88();
      v12 = v13;
    }
    swift_bridgeObjectRelease();
    *a3 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    sub_1B0F9D008(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0xF000000000000007;
  }
  return result;
}

uint64_t sub_1B0F9BD90(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = sub_1B1036008();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6D8);
  v39 = a2;
  v10 = sub_1B1036038();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_1B0F5A964((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_1B0F57208(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = sub_1B1035B4C();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)sub_1B0F5A964(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1B0F9C114(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3D8);
  v37 = a2;
  v6 = sub_1B1036038();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B103620C();
    sub_1B1035C00();
    result = sub_1B103623C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B0F9C41C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E0);
  v37 = a2;
  v6 = sub_1B1036038();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1B103620C();
    sub_1B1035C00();
    result = sub_1B103623C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B0F9C72C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  int64_t v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE428);
  v44 = a2;
  v6 = sub_1B1036038();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v43 = v5;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v45 = v13;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    v25 = v13 + 1;
    if (!v24)
    {
      v25 = v13 + 2;
      if (v13 + 2 >= v41)
        goto LABEL_33;
      v24 = v42[v25];
      if (!v24)
      {
        v26 = v13 + 3;
        if (v13 + 3 >= v41)
        {
LABEL_33:
          swift_release();
          if ((v44 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v42[v26];
        if (!v24)
        {
          while (1)
          {
            v25 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v25 >= v41)
              goto LABEL_33;
            v24 = v42[v25];
            ++v26;
            if (v24)
              goto LABEL_30;
          }
        }
        v25 = v13 + 3;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v45 = v25;
    v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    v31 = *(_QWORD *)(v5 + 56);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v34 = *v32;
    v33 = v32[1];
    v35 = v31 + 32 * v21;
    v37 = *(_QWORD *)v35;
    v36 = *(_QWORD *)(v35 + 8);
    v38 = *(_QWORD *)(v35 + 16);
    v39 = *(_BYTE *)(v35 + 24);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1B0F5A84C(v37, v36, v38, v39);
    }
    sub_1B103620C();
    sub_1B1035C00();
    result = sub_1B103623C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v34;
    v18[1] = v33;
    v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
    *(_QWORD *)v19 = v37;
    *(_QWORD *)(v19 + 8) = v36;
    *(_QWORD *)(v19 + 16) = v38;
    *(_BYTE *)(v19 + 24) = v39;
    ++*(_QWORD *)(v7 + 16);
    v5 = v43;
    v13 = v45;
  }
  swift_release();
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B0F9CA7C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = sub_1B1036038();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v3;
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_31;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_33;
      v26 = *(_QWORD *)(v38 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v26 = *(_QWORD *)(v38 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_30;
          }
        }
        v15 = v27;
      }
    }
LABEL_30:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_31:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v40 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B103620C();
    sub_1B1035C00();
    result = sub_1B103623C();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v40;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

unint64_t sub_1B0F9CD84(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_1B1036008();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1B1035EDC();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = sub_1B1035B4C();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1B0F9D008(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B1035EDC();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B103620C();
        swift_bridgeObjectRetain();
        sub_1B1035C00();
        v9 = sub_1B103623C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1B0F9D1DC(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1B1036008();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1B0F56A48(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return sub_1B0F5A964(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1B0F9D8A0();
      goto LABEL_7;
    }
    sub_1B0F9BD90(v17, a3 & 1);
    v23 = sub_1B0F56A48(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1B0F9D800(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)sub_1B10361B8();
  __break(1u);
  return result;
}

uint64_t sub_1B0F9D358(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1B0F56A3C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1B0F9DADC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1B0F9C114(result, a4 & 1);
  result = sub_1B0F56A3C(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1B10361B8();
  __break(1u);
  return result;
}

uint64_t sub_1B0F9D4A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1B0F56A3C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1B0F9DC88();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1B0F9C41C(v15, a4 & 1);
  v21 = sub_1B0F56A3C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1B10361B8();
  __break(1u);
  return result;
}

unint64_t sub_1B0F9D608()
{
  unint64_t result;

  result = qword_1EEEDF698;
  if (!qword_1EEEDF698)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for DecodableState, &type metadata for DecodableState);
    atomic_store(result, (unint64_t *)&qword_1EEEDF698);
  }
  return result;
}

uint64_t sub_1B0F9D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1B0F9D664(a1, a2, a3, a4, a5, &qword_1EEEDE3B0);
}

uint64_t sub_1B0F9D658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1B0F9D664(a1, a2, a3, a4, a5, &qword_1EEEDE3A8);
}

uint64_t sub_1B0F9D664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v8 = v6;
  v14 = *v6;
  v16 = sub_1B0F56A3C(a3, a4);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= result && (a5 & 1) != 0)
    goto LABEL_7;
  if (v21 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)sub_1B0F9E098(a6);
LABEL_7:
    v22 = (_QWORD *)*v8;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 16 * v16);
      *v23 = a1;
      v23[1] = a2;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v25 = (uint64_t *)(v22[6] + 16 * v16);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v22[7] + 16 * v16);
    *v26 = a1;
    v26[1] = a2;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1B0F9CA7C(result, a5 & 1, a6);
  result = sub_1B0F56A3C(a3, a4);
  if ((v20 & 1) == (v24 & 1))
  {
    v16 = result;
    v22 = (_QWORD *)*v8;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1B10361B8();
  __break(1u);
  return result;
}

uint64_t sub_1B0F9D7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1B0F9D664(a1, a2, a3, a4, a5, &qword_1EEEDE3A0);
}

uint64_t sub_1B0F9D7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1B0F9D664(a1, a2, a3, a4, a5, &qword_1EEEDE398);
}

uint64_t sub_1B0F9D7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1B0F9D664(a1, a2, a3, a4, a5, &qword_1EEEDE390);
}

_OWORD *sub_1B0F9D800(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B1036008();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1B0F5A964(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_1B0F9D8A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = sub_1B1036008();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6D8);
  v6 = *v0;
  v7 = sub_1B103602C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_1B0F57208(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_1B0F5A964(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B0F9DADC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3D8);
  v2 = *v0;
  v3 = sub_1B103602C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B0F9DC88()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E0);
  v2 = *v0;
  v3 = sub_1B103602C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B0F9DE40()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0F9DE64()
{
  return swift_deallocObject();
}

uint64_t sub_1B0F9DE74()
{
  return swift_deallocObject();
}

uint64_t sub_1B0F9DE84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *sub_1B0F9DEA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE428);
  v29 = v0;
  v1 = *v0;
  v2 = sub_1B103602C();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v12)
      goto LABEL_26;
    v27 = *(_QWORD *)(v5 + 8 * v26);
    ++v8;
    if (!v27)
    {
      v8 = v26 + 1;
      if (v26 + 1 >= v12)
        goto LABEL_26;
      v27 = *(_QWORD *)(v5 + 8 * v8);
      if (!v27)
        break;
    }
LABEL_25:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = *(_QWORD *)(v1 + 56);
    v17 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v18 = v17[1];
    v19 = 32 * v14;
    v20 = *(_QWORD *)(v16 + v19);
    v21 = *(_QWORD *)(v16 + v19 + 8);
    v22 = *(_QWORD *)(v16 + v19 + 16);
    v23 = *(_BYTE *)(v16 + v19 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    *v24 = *v17;
    v24[1] = v18;
    v25 = *(_QWORD *)(v3 + 56) + v19;
    *(_QWORD *)v25 = v20;
    *(_QWORD *)(v25 + 8) = v21;
    *(_QWORD *)(v25 + 16) = v22;
    *(_BYTE *)(v25 + 24) = v23;
    swift_bridgeObjectRetain();
    result = (void *)sub_1B0F5A84C(v20, v21, v22, v23);
  }
  v28 = v26 + 2;
  if (v28 >= v12)
    goto LABEL_26;
  v27 = *(_QWORD *)(v5 + 8 * v28);
  if (v27)
  {
    v8 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v27 = *(_QWORD *)(v5 + 8 * v8);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B0F9E098(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1B103602C();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B0F9E238()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_1B0FDD84C(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

uint64_t sub_1B0F9E280(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE450);
  result = sub_1B103602C();
  v4 = (_QWORD *)result;
  v5 = 0;
  v26 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v23 = v7;
  v24 = (unint64_t)(v9 + 63) >> 6;
  v25 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    v28 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * i);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B0F995A8();
    swift_release();
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(_QWORD *)(v25 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = (_QWORD *)(v4[6] + 16 * i);
    *v20 = v19;
    v20[1] = v18;
    result = (uint64_t)sub_1B0F5A964(&v27, (_OWORD *)(v4[7] + 32 * i));
    v21 = v4[2];
    v14 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v14)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v22;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v5++, 1);
    if (v14)
      goto LABEL_27;
    if (v5 >= v24)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v23 + 8 * v5);
    if (!v15)
      break;
LABEL_15:
    v11 = (v15 - 1) & v15;
  }
  v16 = v5 + 1;
  if (v5 + 1 >= v24)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v5 + 2;
  if (v5 + 2 >= v24)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v5 + 3;
  if (v5 + 3 >= v24)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
  {
LABEL_14:
    v5 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v24)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v23 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B0F9E4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int64_t v12;

  v11 = (_QWORD *)(a2 + 64);
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v12 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = __clz(__rbit64(v4));
    goto LABEL_16;
  }
  if (v12 > 1)
  {
    v6 = v11[1];
    v7 = 1;
    if (v6)
      goto LABEL_15;
    v7 = 2;
    if (v12 <= 2)
      goto LABEL_17;
    v6 = v11[2];
    if (v6)
    {
LABEL_15:
      v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_16:
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B1035C00();
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
    v8 = 3;
    if (v12 > 3)
    {
      v6 = v11[3];
      if (v6)
      {
        v7 = 3;
        goto LABEL_15;
      }
      while (1)
      {
        v7 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          JUMPOUT(0x1B0F9F16CLL);
        }
        if (v7 >= v12)
          break;
        v6 = v11[v7];
        ++v8;
        if (v6)
          goto LABEL_15;
      }
    }
  }
LABEL_17:
  swift_release();
  return sub_1B1036218();
}

uint64_t sub_1B0F9F244(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1B1036218();
  if (v3)
    __asm { BR              X9 }
  return result;
}

void _s6LiftUI14DecodableStateO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B0F9F3BC@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  char v4;

  if (a1 >> 61)
  {
    v4 = 0;
  }
  else
  {
    if (*(_QWORD *)(v1 + 16) != *(_QWORD *)(a1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 24))
      return sub_1B1036128();
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0F9F4F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B0F9F52C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 24);
  v7 = *a1;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 16))(&v7);
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_1B0F9F578(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE410);
    result = MEMORY[0x1B5E15188](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0F9F5BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(v2 + 16))(&v4);
}

uint64_t sub_1B0F9F5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF6B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0F9F638(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *a1;
  if ((unint64_t)*a1 >> 61 == 5)
  {
    v3 = swift_bridgeObjectRetain();
    sub_1B0F9E280(v3);
    result = swift_bridgeObjectRelease();
    if (!v1)
    {
      v5 = sub_1B1035AEC();
      swift_release();
      return v5;
    }
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF5E0);
    sub_1B0F970C4();
    swift_allocError();
    *v7 = v2;
    v7[1] = v6;
    swift_retain();
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1B0F9F70C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDF6C8;
  if (!qword_1EEEDF6C8)
  {
    v1 = sub_1B10345A4();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CAFB80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDF6C8);
  }
  return result;
}

uint64_t sub_1B0F9F754(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a1;
  if ((unint64_t)*a1 >> 61 == 4)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 16);
      swift_bridgeObjectRetain();
      sub_1B0F9BB54(v3);
      __asm { BR              X10 }
    }
    sub_1B0FEE99C(0);
    v1 = sub_1B1035CC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
    sub_1B0F970C4();
    swift_allocError();
    *v6 = v2;
    v6[1] = v5;
    swift_retain();
    swift_willThrow();
  }
  return v1;
}

unint64_t sub_1B0FA1B48()
{
  unint64_t result;

  result = qword_1EEEDF6D0;
  if (!qword_1EEEDF6D0)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for DecodableState, &type metadata for DecodableState);
    atomic_store(result, (unint64_t *)&qword_1EEEDF6D0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DecodableState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for DecodableState()
{
  return swift_release();
}

_QWORD *assignWithCopy for DecodableState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for DecodableState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodableState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DecodableState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B0FA1CF4(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_1B0FA1D00(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_1B0FA1D10(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for DecodableState()
{
  return &type metadata for DecodableState;
}

uint64_t dispatch thunk of StateDecodable.asDecodable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static StateDecodable.create(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for DecodableStateError(uint64_t result)
{
  if (*(_QWORD *)(result + 8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t _s6LiftUI19DecodableStateErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

_QWORD *assignWithCopy for DecodableStateError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t assignWithTake for DecodableStateError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodableStateError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DecodableStateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1B0FA1FA4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1B0FA1FBC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DecodableStateError()
{
  return &type metadata for DecodableStateError;
}

uint64_t destroy for LineLimitModifier(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 24);
  if (v1 <= 0xFD)
    return sub_1B0F6C7D4(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v1);
  return result;
}

uint64_t initializeWithCopy for LineLimitModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 <= 0xFD)
  {
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    sub_1B0F6C708(*(_QWORD *)a2, v5, v6, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  return a1;
}

uint64_t assignWithCopy for LineLimitModifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F6C708(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F6C7D4(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0FA2178(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F6C708(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  return a1;
}

uint64_t sub_1B0FA2178(uint64_t a1)
{
  destroy for IntResolvable(a1);
  return a1;
}

uint64_t assignWithTake for LineLimitModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(unsigned __int8 *)(a2 + 24);
    if (v5 <= 0xFD)
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v6;
      *(_BYTE *)(a1 + 24) = v5;
      sub_1B0F6C7D4(v7, v8, v9, v4);
      return a1;
    }
    sub_1B0FA2178(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineLimitModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 126);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if ((v3 & 0x7E) != 0)
    v4 = 126 - (v3 & 0x7E | (v3 >> 7));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LineLimitModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = (a2 ^ 0x7F) & 0xFE | ((a2 ^ 0x7F) << 7);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineLimitModifier()
{
  return &type metadata for LineLimitModifier;
}

uint64_t sub_1B0FA22E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF700);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA267C();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0FA26C0();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA2414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FA2878(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B0FA243C()
{
  sub_1B0FA267C();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA2464()
{
  sub_1B0FA267C();
  return sub_1B10362C0();
}

uint64_t sub_1B0FA248C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v6 = *(_QWORD *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unsigned __int8 *)(v3 + 24);
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v9 <= 0xFD)
  {
    sub_1B0F6C708(v6, v7, v8, v9);
    sub_1B0FA7470(a2);
    sub_1B0F6C7C0(v6, v7, v8, v9);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF6F0);
  v11 = sub_1B103497C();
  a3[3] = v11;
  v13[0] = v10;
  v13[1] = sub_1B0FA2630();
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v11, v13);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035660();
}

uint64_t sub_1B0FA25B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FA22E0(a1, a2);
}

unint64_t sub_1B0FA25C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FA25EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FA25EC()
{
  unint64_t result;

  result = qword_1EEEDF6E8;
  if (!qword_1EEEDF6E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DE24, &type metadata for LineLimitModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF6E8);
  }
  return result;
}

unint64_t sub_1B0FA2630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDF6F8;
  if (!qword_1EEEDF6F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF6F0);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDF6F8);
  }
  return result;
}

unint64_t sub_1B0FA267C()
{
  unint64_t result;

  result = qword_1EEEDF708;
  if (!qword_1EEEDF708)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DF2C, &type metadata for LineLimitModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF708);
  }
  return result;
}

unint64_t sub_1B0FA26C0()
{
  unint64_t result;

  result = qword_1EEEDF710;
  if (!qword_1EEEDF710)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for IntResolvable, &type metadata for IntResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDF710);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LineLimitModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FA2744 + 4 * byte_1B103DDF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FA2764 + 4 * byte_1B103DDF5[v4]))();
}

_BYTE *sub_1B0FA2744(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FA2764(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FA276C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FA2774(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FA277C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FA2784(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LineLimitModifier.CodingKeys()
{
  return &type metadata for LineLimitModifier.CodingKeys;
}

unint64_t sub_1B0FA27A4()
{
  unint64_t result;

  result = qword_1EEEDF718;
  if (!qword_1EEEDF718)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DF04, &type metadata for LineLimitModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF718);
  }
  return result;
}

unint64_t sub_1B0FA27EC()
{
  unint64_t result;

  result = qword_1EEEDF720;
  if (!qword_1EEEDF720)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DE74, &type metadata for LineLimitModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF720);
  }
  return result;
}

unint64_t sub_1B0FA2834()
{
  unint64_t result;

  result = qword_1EEEDF728;
  if (!qword_1EEEDF728)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103DE9C, &type metadata for LineLimitModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF728);
  }
  return result;
}

uint64_t sub_1B0FA2878(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x73656E696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B1036128();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0FA28F4()
{
  return 0x73656E696CLL;
}

void sub_1B0FA2908(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v3 = *v2;
  if (*(_BYTE *)(a1 + 8) != 1 && !*(_BYTE *)(a2 + 8))
    __asm { BR              X12 }
  __asm { BR              X9 }
}

LiftUI::MathOperation_optional __swiftcall MathOperation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LiftUI::MathOperation_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1B103605C();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t MathOperation.rawValue.getter()
{
  char *v0;

  return qword_1B103E0D8[*v0];
}

uint64_t sub_1B0FA2AF0(char *a1, char *a2)
{
  return sub_1B100E818(*a1, *a2);
}

uint64_t sub_1B0FA2AFC()
{
  return sub_1B1010154();
}

uint64_t sub_1B0FA2B04()
{
  return sub_1B1012FE8();
}

uint64_t sub_1B0FA2B0C()
{
  return sub_1B1013E98();
}

LiftUI::MathOperation_optional sub_1B0FA2B14(Swift::String *a1)
{
  return MathOperation.init(rawValue:)(*a1);
}

uint64_t sub_1B0FA2B20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MathOperation.rawValue.getter();
  *a1 = result;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_1B0FA2B48()
{
  sub_1B0FA30AC();
  return sub_1B1035CB4();
}

uint64_t NumericValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (v2)
  {

    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_1B0FA2D0C((uint64_t)v8);
    sub_1B0F970C4();
    swift_allocError();
    *v5 = 0;
    v5[1] = 0;
    swift_willThrow();
  }
  else
  {
    sub_1B0F5A0E4(v8, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    v6 = sub_1B1036158();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA2D0C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF688);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B0FA2D4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NumericValue.init(from:)(a1, a2);
}

uint64_t *static NumericValue.create(with:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *result;
  v3 = (unint64_t)*result >> 61;
  if ((_DWORD)v3 == 2)
  {
    *(_QWORD *)a2 = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(a2 + 8) = 1;
  }
  else if ((_DWORD)v3 == 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    sub_1B0F970C4();
    swift_allocError();
    v4 = MEMORY[0x1E0DEB070];
    *v5 = v2;
    v5[1] = v4;
    swift_retain();
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t NumericValue.asDecodable.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  v6 = 0x2000000000000000;
  if (v4)
    v6 = 0x4000000000000000;
  *a1 = v6 | result;
  return result;
}

uint64_t sub_1B0FA2E54()
{
  return swift_deallocObject();
}

unint64_t sub_1B0FA2E68()
{
  unint64_t result;

  result = qword_1EEEDF730;
  if (!qword_1EEEDF730)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for MathOperation, &type metadata for MathOperation);
    atomic_store(result, (unint64_t *)&qword_1EEEDF730);
  }
  return result;
}

uint64_t sub_1B0FA2EAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  v6 = 0x2000000000000000;
  if (v4)
    v6 = 0x4000000000000000;
  *a1 = v6 | result;
  return result;
}

uint64_t *sub_1B0FA2F08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return static NumericValue.create(with:)(a1, a2);
}

uint64_t storeEnumTagSinglePayload for MathOperation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0FA2F68 + 4 * byte_1B103DF85[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0FA2F9C + 4 * byte_1B103DF80[v4]))();
}

uint64_t sub_1B0FA2F9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA2FA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FA2FACLL);
  return result;
}

uint64_t sub_1B0FA2FB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FA2FC0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0FA2FC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA2FCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MathOperation()
{
  return &type metadata for MathOperation;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NumericValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NumericValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B0FA3088(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1B0FA3090(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NumericValue()
{
  return &type metadata for NumericValue;
}

unint64_t sub_1B0FA30AC()
{
  unint64_t result;

  result = qword_1EEEDF738;
  if (!qword_1EEEDF738)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for MathOperation, &type metadata for MathOperation);
    atomic_store(result, (unint64_t *)&qword_1EEEDF738);
  }
  return result;
}

uint64_t destroy for StringResolvable(uint64_t a1)
{
  return sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for StringResolvable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for StringResolvable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B0F56ADC(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for StringResolvable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B0F56ADC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StringResolvable(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 24) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for StringResolvable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageScaleModifier()
{
  return &type metadata for ImageScaleModifier;
}

uint64_t destroy for ScaleEffectModifier(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2 & 1);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3 & 1);
  v4 = *(unsigned __int8 *)(v1 + 88);
  if (v4 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v4 & 1);
  v5 = *(unsigned __int8 *)(v1 + 120);
  if (v5 != 255)
    return sub_1B0F5E6A0(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), v5 & 1);
  return result;
}

uint64_t initializeWithCopy for ScaleEffectModifier(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1B0F5E604(*a2, v7, v8, v4 & 1);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v5;
  }
  v9 = *((unsigned __int8 *)a2 + 56);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  else
  {
    v10 = v9 & 1;
    v11 = a2[4];
    v12 = a2[5];
    v13 = a2[6];
    sub_1B0F5E604(v11, v12, v13, v9 & 1);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v10;
  }
  v14 = *((unsigned __int8 *)a2 + 88);
  if (v14 == 255)
  {
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  }
  else
  {
    v15 = v14 & 1;
    v16 = a2[8];
    v17 = a2[9];
    v18 = a2[10];
    sub_1B0F5E604(v16, v17, v18, v14 & 1);
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_BYTE *)(a1 + 88) = v15;
  }
  v19 = *((unsigned __int8 *)a2 + 120);
  if (v19 == 255)
  {
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)a2 + 105);
  }
  else
  {
    v20 = v19 & 1;
    v21 = a2[12];
    v22 = a2[13];
    v23 = a2[14];
    sub_1B0F5E604(v21, v22, v23, v19 & 1);
    *(_QWORD *)(a1 + 96) = v21;
    *(_QWORD *)(a1 + 104) = v22;
    *(_QWORD *)(a1 + 112) = v23;
    *(_BYTE *)(a1 + 120) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for ScaleEffectModifier(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  int v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  int v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v15 = v4 & 1;
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 2);
      sub_1B0F5E604(*(_QWORD *)a2, v17, v18, v4 & 1);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v15;
    }
  }
  else if (v4 == 255)
  {
    sub_1B0F7F584(a1);
    v5 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    sub_1B0F5E604(*(_QWORD *)a2, v9, v10, v4 & 1);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_BYTE *)(a1 + 24);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v7;
    sub_1B0F5E6A0(v11, v12, v13, v14);
  }
  v19 = (__int128 *)(a1 + 32);
  v20 = a2 + 2;
  v21 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v21 == 255)
    {
      v23 = *v20;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *v19 = v23;
    }
    else
    {
      v32 = v21 & 1;
      v33 = *((_QWORD *)a2 + 4);
      v34 = *((_QWORD *)a2 + 5);
      v35 = *((_QWORD *)a2 + 6);
      sub_1B0F5E604(v33, v34, v35, v21 & 1);
      *(_QWORD *)(a1 + 32) = v33;
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 48) = v35;
      *(_BYTE *)(a1 + 56) = v32;
    }
  }
  else if (v21 == 255)
  {
    sub_1B0F7F584(a1 + 32);
    v22 = *(__int128 *)((char *)a2 + 41);
    *v19 = *v20;
    *(_OWORD *)(a1 + 41) = v22;
  }
  else
  {
    v24 = v21 & 1;
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 5);
    v27 = *((_QWORD *)a2 + 6);
    sub_1B0F5E604(v25, v26, v27, v21 & 1);
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 48);
    v31 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)(a1 + 48) = v27;
    *(_BYTE *)(a1 + 56) = v24;
    sub_1B0F5E6A0(v28, v29, v30, v31);
  }
  v36 = (__int128 *)(a1 + 64);
  v37 = a2 + 4;
  v38 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v38 == 255)
    {
      v40 = *v37;
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v36 = v40;
    }
    else
    {
      v49 = v38 & 1;
      v50 = *((_QWORD *)a2 + 8);
      v51 = *((_QWORD *)a2 + 9);
      v52 = *((_QWORD *)a2 + 10);
      sub_1B0F5E604(v50, v51, v52, v38 & 1);
      *(_QWORD *)(a1 + 64) = v50;
      *(_QWORD *)(a1 + 72) = v51;
      *(_QWORD *)(a1 + 80) = v52;
      *(_BYTE *)(a1 + 88) = v49;
    }
  }
  else if (v38 == 255)
  {
    sub_1B0F7F584(a1 + 64);
    v39 = *(__int128 *)((char *)a2 + 73);
    *v36 = *v37;
    *(_OWORD *)(a1 + 73) = v39;
  }
  else
  {
    v41 = v38 & 1;
    v42 = *((_QWORD *)a2 + 8);
    v43 = *((_QWORD *)a2 + 9);
    v44 = *((_QWORD *)a2 + 10);
    sub_1B0F5E604(v42, v43, v44, v38 & 1);
    v45 = *(_QWORD *)(a1 + 64);
    v46 = *(_QWORD *)(a1 + 72);
    v47 = *(_QWORD *)(a1 + 80);
    v48 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = v42;
    *(_QWORD *)(a1 + 72) = v43;
    *(_QWORD *)(a1 + 80) = v44;
    *(_BYTE *)(a1 + 88) = v41;
    sub_1B0F5E6A0(v45, v46, v47, v48);
  }
  v53 = (__int128 *)(a1 + 96);
  v54 = a2 + 6;
  v55 = *((unsigned __int8 *)a2 + 120);
  if (*(unsigned __int8 *)(a1 + 120) == 255)
  {
    if (v55 == 255)
    {
      v57 = *v54;
      *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
      *v53 = v57;
    }
    else
    {
      v66 = v55 & 1;
      v67 = *((_QWORD *)a2 + 12);
      v68 = *((_QWORD *)a2 + 13);
      v69 = *((_QWORD *)a2 + 14);
      sub_1B0F5E604(v67, v68, v69, v55 & 1);
      *(_QWORD *)(a1 + 96) = v67;
      *(_QWORD *)(a1 + 104) = v68;
      *(_QWORD *)(a1 + 112) = v69;
      *(_BYTE *)(a1 + 120) = v66;
    }
  }
  else if (v55 == 255)
  {
    sub_1B0F7F584(a1 + 96);
    v56 = *(__int128 *)((char *)a2 + 105);
    *v53 = *v54;
    *(_OWORD *)(a1 + 105) = v56;
  }
  else
  {
    v58 = v55 & 1;
    v59 = *((_QWORD *)a2 + 12);
    v60 = *((_QWORD *)a2 + 13);
    v61 = *((_QWORD *)a2 + 14);
    sub_1B0F5E604(v59, v60, v61, v55 & 1);
    v62 = *(_QWORD *)(a1 + 96);
    v63 = *(_QWORD *)(a1 + 104);
    v64 = *(_QWORD *)(a1 + 112);
    v65 = *(_BYTE *)(a1 + 120);
    *(_QWORD *)(a1 + 96) = v59;
    *(_QWORD *)(a1 + 104) = v60;
    *(_QWORD *)(a1 + 112) = v61;
    *(_BYTE *)(a1 + 120) = v58;
    sub_1B0F5E6A0(v62, v63, v64, v65);
  }
  return a1;
}

uint64_t assignWithTake for ScaleEffectModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 == 255)
  {
    sub_1B0F7F584(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = v4 & 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  sub_1B0F5E6A0(v8, v9, v10, v6);
LABEL_6:
  v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  v12 = *(unsigned __int8 *)(a2 + 56);
  if (v12 == 255)
  {
    sub_1B0F7F584(a1 + 32);
    goto LABEL_9;
  }
  v13 = v11 & 1;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v12 & 1;
  sub_1B0F5E6A0(v15, v16, v17, v13);
LABEL_11:
  v18 = *(unsigned __int8 *)(a1 + 88);
  if (v18 == 255)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_16;
  }
  v19 = *(unsigned __int8 *)(a2 + 88);
  if (v19 == 255)
  {
    sub_1B0F7F584(a1 + 64);
    goto LABEL_14;
  }
  v20 = v18 & 1;
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v21;
  *(_BYTE *)(a1 + 88) = v19 & 1;
  sub_1B0F5E6A0(v22, v23, v24, v20);
LABEL_16:
  v25 = *(unsigned __int8 *)(a1 + 120);
  if (v25 != 255)
  {
    v26 = *(unsigned __int8 *)(a2 + 120);
    if (v26 != 255)
    {
      v27 = v25 & 1;
      v28 = *(_QWORD *)(a2 + 112);
      v29 = *(_QWORD *)(a1 + 96);
      v30 = *(_QWORD *)(a1 + 104);
      v31 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = v28;
      *(_BYTE *)(a1 + 120) = v26 & 1;
      sub_1B0F5E6A0(v29, v30, v31, v27);
      return a1;
    }
    sub_1B0F7F584(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScaleEffectModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScaleEffectModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScaleEffectModifier()
{
  return &type metadata for ScaleEffectModifier;
}

uint64_t sub_1B0FA3A98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  int v31;

  v5 = a2;
  v6 = *(unsigned __int8 *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v10 = *(unsigned __int8 *)(v3 + 56);
  v27 = *(_QWORD *)(v3 + 72);
  v28 = *(_QWORD *)(v3 + 64);
  v26 = *(_QWORD *)(v3 + 80);
  v30 = *(unsigned __int8 *)(v3 + 88);
  v24 = *(_QWORD *)(v3 + 104);
  v25 = *(_QWORD *)(v3 + 96);
  v23 = *(_QWORD *)(v3 + 112);
  v31 = *(unsigned __int8 *)(v3 + 120);
  if (v6 == 255)
  {
    if (v10 == 255)
      goto LABEL_7;
  }
  else
  {
    v20 = v7;
    v13 = *(_QWORD *)(v3 + 8);
    v12 = *(_QWORD *)(v3 + 16);
    v14 = *(_QWORD *)v3;
    sub_1B0F5E604(v14, v13, v12, v6 & 1);
    sub_1B0FD72F8(a2, v14, v13, v12, v6 & 1);
    v15 = v13;
    v5 = a2;
    result = sub_1B0F5FD28(v14, v15, v12, v6);
    if (v4)
      return result;
    v7 = v20;
    if (v10 == 255)
      goto LABEL_7;
  }
  sub_1B0F5E604(v7, v8, v9, v10 & 1);
  sub_1B0FD72F8(v5, v7, v8, v9, v10 & 1);
  result = sub_1B0F5FD28(v7, v8, v9, v10);
  if (v4)
    return result;
LABEL_7:
  v17 = v31;
  if (v30 != 255)
  {
    sub_1B0F5E604(v28, v27, v26, v30 & 1);
    sub_1B0FD72F8(v5, v28, v27, v26, v30 & 1);
    result = sub_1B0F5FD28(v28, v27, v26, v30);
    if (v4)
      return result;
    v17 = v31;
    if (v31 == 255)
      goto LABEL_13;
LABEL_12:
    sub_1B0F5E604(v25, v24, v23, v17 & 1);
    sub_1B0FD72F8(v5, v25, v24, v23, v17 & 1);
    result = sub_1B0F5FD28(v25, v24, v23, v17);
    if (v4)
      return result;
    goto LABEL_13;
  }
  if (v31 != 255)
    goto LABEL_12;
LABEL_13:
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = sub_1B103497C();
  a3[3] = v19;
  v29[0] = v18;
  v29[1] = MEMORY[0x1E0CD8DA8];
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v19, v29);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035390();
}

uint64_t sub_1B0FA3D88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0FA3DB0 + 4 * byte_1B103E100[a1]))(120, 0xE100000000000000);
}

uint64_t sub_1B0FA3DB0()
{
  return 121;
}

uint64_t sub_1B0FA3DB8()
{
  return 0x58726F68636E61;
}

uint64_t sub_1B0FA3DD0()
{
  return 0x59726F68636E61;
}

BOOL sub_1B0FA3DE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B0FA3DFC()
{
  unsigned __int8 *v0;

  return sub_1B0FA3D88(*v0);
}

uint64_t sub_1B0FA3E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FA4DB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0FA3E28()
{
  sub_1B0FA498C();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA3E50()
{
  sub_1B0FA498C();
  return sub_1B10362C0();
}

uint64_t sub_1B0FA3E78@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  char v69;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF770);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0FA498C();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v41 = a2;
  v42 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
  LOBYTE(v44) = 0;
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE610, &qword_1EEEDE4F0, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
  sub_1B10360A4();
  v10 = v51;
  LOBYTE(v44) = 1;
  v40 = v52;
  v68 = v53;
  sub_1B0F5FD10(v51, *((uint64_t *)&v51 + 1), v52, v53);
  sub_1B10360A4();
  v34 = *((_QWORD *)&v10 + 1);
  v35 = v10;
  v11 = v52;
  v12 = v53;
  LOBYTE(v44) = 2;
  v37 = v51;
  sub_1B0F5FD10(v51, *((uint64_t *)&v51 + 1), v52, v53);
  v33 = 0;
  sub_1B10360A4();
  v36 = v11;
  v31 = v12;
  v13 = *((_QWORD *)&v51 + 1);
  v14 = v52;
  v69 = 3;
  v39 = v51;
  v38 = v53;
  sub_1B0F5FD10(v51, *((uint64_t *)&v51 + 1), v52, v53);
  sub_1B10360A4();
  v32 = v13;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v5);
  v33 = *((_QWORD *)&v65 + 1);
  v42 = v65;
  v30 = v66;
  v29 = v67;
  *(_QWORD *)&v44 = v35;
  *((_QWORD *)&v44 + 1) = v34;
  v15 = v39;
  *(_QWORD *)&v45 = v40;
  BYTE8(v45) = v68;
  v16 = *((_QWORD *)&v37 + 1);
  v17 = v37;
  v46 = v37;
  *(_QWORD *)&v47 = v36;
  v18 = v31;
  BYTE8(v47) = v31;
  *(_QWORD *)&v48 = v39;
  *((_QWORD *)&v48 + 1) = v13;
  *(_QWORD *)&v49 = v14;
  v19 = v38;
  BYTE8(v49) = v38;
  v50[0] = v65;
  *(_QWORD *)&v50[1] = v66;
  BYTE8(v50[1]) = v67;
  sub_1B0FA49D0((uint64_t)&v44, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F5FD10);
  sub_1B0F5FD28(v15, v13, v14, v19);
  sub_1B0F5FD28(v17, v16, v36, v18);
  v21 = v34;
  v20 = v35;
  v22 = v40;
  LOBYTE(v15) = v68;
  sub_1B0F5FD28(v35, v34, v40, v68);
  v23 = v49;
  v24 = v41;
  v41[4] = v48;
  v24[5] = v23;
  v24[6] = v50[0];
  *(_OWORD *)((char *)v24 + 105) = *(_OWORD *)((char *)v50 + 9);
  v25 = v45;
  *v24 = v44;
  v24[1] = v25;
  v26 = v47;
  v24[2] = v46;
  v24[3] = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  *(_QWORD *)&v51 = v20;
  *((_QWORD *)&v51 + 1) = v21;
  v52 = v22;
  v53 = v15;
  v54 = __PAIR128__(*((unint64_t *)&v37 + 1), v17);
  v55 = v36;
  v56 = v31;
  v57 = v39;
  v58 = v32;
  v59 = v14;
  v60 = v38;
  v61 = v42;
  v62 = v33;
  v63 = v30;
  v64 = v29;
  return sub_1B0FA49D0((uint64_t)&v51, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F5FD28);
}

uint64_t sub_1B0FA43A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FA3A98(a1, a2, a3);
}

uint64_t sub_1B0FA43B8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B0FA3E78(a1, a2);
}

uint64_t sub_1B0FA43D8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FA4428@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0FA4F2C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0FA4450@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FA44A4()
{
  sub_1B0FA4948();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA44CC()
{
  sub_1B0FA4948();
  return sub_1B10362C0();
}

uint64_t sub_1B0FA44F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF760);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA4948();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F56A98();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA4624@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v24 = a3;
  v31 = sub_1B10357A4();
  v25 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_BYTE *)(v3 + 24);
  v27 = *(_QWORD *)v3;
  v9 = v27;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  sub_1B0F56B9C(v27, v10, v11, v12);
  StringResolvable.resolved(with:)(a2);
  if (v4)

  sub_1B0F56ADC(v9, v10, v11, v12);
  v13 = sub_1B103605C();
  swift_bridgeObjectRelease();
  v14 = a1[4];
  v23[1] = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v15 = (unsigned int *)MEMORY[0x1E0CDF7D0];
  v16 = (unsigned int *)MEMORY[0x1E0CDF7C0];
  if (v13 != 2)
    v16 = (unsigned int *)MEMORY[0x1E0CDF7D8];
  if (v13)
    v15 = v16;
  v17 = v25;
  v18 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v8, *v15, v31);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDF750);
  v19 = sub_1B103497C();
  v20 = v24;
  v24[3] = v19;
  v21 = sub_1B0F5A7E4(&qword_1EEEDF758, &qword_1EEEDF750, MEMORY[0x1E0CDCF80]);
  v26[0] = v14;
  v26[1] = v21;
  v20[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v19, v26);
  __swift_allocate_boxed_opaque_existential_1(v20);
  sub_1B103533C();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v18);
}

uint64_t sub_1B0FA4850@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FA4624(a1, a2, a3);
}

uint64_t sub_1B0FA4864@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FA44F4(a1, a2);
}

unint64_t sub_1B0FA4878(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FA489C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FA489C()
{
  unint64_t result;

  result = qword_1EEEDF740;
  if (!qword_1EEEDF740)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E17C, &type metadata for ImageScaleModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF740);
  }
  return result;
}

unint64_t sub_1B0FA48E0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FA4904();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FA4904()
{
  unint64_t result;

  result = qword_1EEEDF748;
  if (!qword_1EEEDF748)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E154, &type metadata for ScaleEffectModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF748);
  }
  return result;
}

unint64_t sub_1B0FA4948()
{
  unint64_t result;

  result = qword_1EEEDF768;
  if (!qword_1EEEDF768)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E3E0, &type metadata for ImageScaleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF768);
  }
  return result;
}

unint64_t sub_1B0FA498C()
{
  unint64_t result;

  result = qword_1EEEDF778;
  if (!qword_1EEEDF778)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E390, &type metadata for ScaleEffectModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF778);
  }
  return result;
}

uint64_t sub_1B0FA49D0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v10 = *(unsigned __int8 *)(a1 + 56);
  v11 = *(unsigned __int8 *)(a1 + 88);
  v13 = *(unsigned __int8 *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a2(v4, v5, v6, v10);
  a2(v7, v8, v9, v11);
  a2(v16, v15, v14, v13);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ScaleEffectModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FA4AE4 + 4 * byte_1B103E109[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FA4B18 + 4 * byte_1B103E104[v4]))();
}

uint64_t sub_1B0FA4B18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA4B20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FA4B28);
  return result;
}

uint64_t sub_1B0FA4B34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FA4B3CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FA4B40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA4B48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScaleEffectModifier.CodingKeys()
{
  return &type metadata for ScaleEffectModifier.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ImageScaleModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FA4BA4 + 4 * byte_1B103E10E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FA4BC4 + 4 * byte_1B103E113[v4]))();
}

_BYTE *sub_1B0FA4BA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FA4BC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FA4BCC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FA4BD4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FA4BDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FA4BE4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ImageScaleModifier.CodingKeys()
{
  return &type metadata for ImageScaleModifier.CodingKeys;
}

unint64_t sub_1B0FA4C04()
{
  unint64_t result;

  result = qword_1EEEDF780;
  if (!qword_1EEEDF780)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E2B0, &type metadata for ImageScaleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF780);
  }
  return result;
}

unint64_t sub_1B0FA4C4C()
{
  unint64_t result;

  result = qword_1EEEDF788;
  if (!qword_1EEEDF788)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E368, &type metadata for ScaleEffectModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF788);
  }
  return result;
}

unint64_t sub_1B0FA4C94()
{
  unint64_t result;

  result = qword_1EEEDF790;
  if (!qword_1EEEDF790)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E2D8, &type metadata for ScaleEffectModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF790);
  }
  return result;
}

unint64_t sub_1B0FA4CDC()
{
  unint64_t result;

  result = qword_1EEEDF798;
  if (!qword_1EEEDF798)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E300, &type metadata for ScaleEffectModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF798);
  }
  return result;
}

unint64_t sub_1B0FA4D24()
{
  unint64_t result;

  result = qword_1EEEDF7A0;
  if (!qword_1EEEDF7A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E1E8, &type metadata for ImageScaleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7A0);
  }
  return result;
}

unint64_t sub_1B0FA4D6C()
{
  unint64_t result;

  result = qword_1EEEDF7A8;
  if (!qword_1EEEDF7A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E210, &type metadata for ImageScaleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7A8);
  }
  return result;
}

uint64_t sub_1B0FA4DB0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 120 && a2 == 0xE100000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x58726F68636E61 && a2 == 0xE700000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x59726F68636E61 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B0FA4F2C()
{
  return 0x656C616373;
}

uint64_t destroy for SwiftUIAnimation(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 != 255)
    return sub_1B0F5E6A0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v3 & 1);
  return result;
}

uint64_t initializeWithCopy for SwiftUIAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  else
  {
    v9 = v8 & 1;
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    sub_1B0F5E604(v10, v11, v12, v8 & 1);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for SwiftUIAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F56ADC(v8, v9, v10, v11);
  v12 = (__int128 *)(a1 + 32);
  v13 = (__int128 *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v14 == 255)
    {
      v16 = *v13;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *v12 = v16;
    }
    else
    {
      v25 = v14 & 1;
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = *(_QWORD *)(a2 + 48);
      sub_1B0F5E604(v26, v27, v28, v14 & 1);
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 48) = v28;
      *(_BYTE *)(a1 + 56) = v25;
    }
  }
  else if (v14 == 255)
  {
    sub_1B0F7F584(a1 + 32);
    v15 = *(_OWORD *)(a2 + 41);
    *v12 = *v13;
    *(_OWORD *)(a1 + 41) = v15;
  }
  else
  {
    v17 = v14 & 1;
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 40);
    v20 = *(_QWORD *)(a2 + 48);
    sub_1B0F5E604(v18, v19, v20, v14 & 1);
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 48) = v20;
    *(_BYTE *)(a1 + 56) = v17;
    sub_1B0F5E6A0(v21, v22, v23, v24);
  }
  return a1;
}

uint64_t assignWithTake for SwiftUIAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v6, v7, v8, v9);
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 != 255)
  {
    v11 = *(unsigned __int8 *)(a2 + 56);
    if (v11 != 255)
    {
      v12 = v10 & 1;
      v13 = *(_QWORD *)(a2 + 48);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 56) = v11 & 1;
      sub_1B0F5E6A0(v14, v15, v16, v12);
      return a1;
    }
    sub_1B0F7F584(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwiftUIAnimation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwiftUIAnimation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIAnimation()
{
  return &type metadata for SwiftUIAnimation;
}

uint64_t sub_1B0FA52E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 24);
  v14 = *(_QWORD *)(v1 + 40);
  v15 = *(_QWORD *)(v1 + 32);
  v13 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  sub_1B0F56B9C(*(_QWORD *)v1, v5, v6, v7);
  StringResolvable.resolved(with:)(a1);
  if (v2)
    return sub_1B0F56ADC(v4, v5, v6, v7);
  sub_1B0F56ADC(v4, v5, v6, v7);
  v10 = sub_1B0FA5894();
  if (v10 != 5)
  {
    v12 = v10;
    sub_1B0F5E604(v15, v14, v13, v8 & 1);
    sub_1B0FD72F8(a1, v15, v14, v13, v8 & 1);
    sub_1B0F5FD28(v15, v14, v13, v8);
    __asm { BR              X10 }
  }
  sub_1B0FA58DC();
  swift_allocError();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_BYTE *)(v11 + 32) = 5;
  return swift_willThrow();
}

void sub_1B0FA54A8()
{
  sub_1B10359E4();
  JUMPOUT(0x1B0FA53F0);
}

uint64_t sub_1B0FA5520(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461727564;
  else
    return 0x6F6974616D696E61;
}

uint64_t sub_1B0FA5564@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  char v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF7B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA5920();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v38 = 0;
  sub_1B0F56A98();
  sub_1B10360BC();
  v9 = v33;
  v30 = v34;
  v10 = v35;
  v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
  v38 = 1;
  v31 = v9;
  v32 = v10;
  v11 = v9;
  v12 = v30;
  v13 = v10;
  LOBYTE(v10) = v37;
  sub_1B0F56B9C(v11, v30, v13, v37);
  sub_1B0F5FE48();
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v33;
  v26 = v33;
  v27 = v34;
  v28 = v35;
  v15 = v36;
  v29 = v36;
  v16 = v12;
  v17 = v31;
  v18 = v10;
  v19 = v32;
  sub_1B0F56B9C(v31, v16, v32, v18);
  v20 = v14;
  v21 = v27;
  sub_1B0F5FD10(v20, v27, v28, v15);
  sub_1B0F56ADC(v17, v16, v19, v18);
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v19;
  *(_BYTE *)(a2 + 24) = v18;
  v22 = v26;
  *(_QWORD *)(a2 + 32) = v26;
  *(_QWORD *)(a2 + 40) = v21;
  v23 = v28;
  *(_QWORD *)(a2 + 48) = v28;
  *(_BYTE *)(a2 + 56) = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F56ADC(v17, v16, v19, v18);
  return sub_1B0F5FD28(v22, v27, v23, v29);
}

uint64_t sub_1B0FA5804()
{
  char *v0;

  return sub_1B0FA5520(*v0);
}

uint64_t sub_1B0FA580C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FA5B08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0FA5830()
{
  sub_1B0FA5920();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA5858()
{
  sub_1B0FA5920();
  return sub_1B10362C0();
}

uint64_t sub_1B0FA5880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FA5564(a1, a2);
}

uint64_t sub_1B0FA5894()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

unint64_t sub_1B0FA58DC()
{
  unint64_t result;

  result = qword_1EEEDF7B0;
  if (!qword_1EEEDF7B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042A24, &type metadata for ReferenceableError);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7B0);
  }
  return result;
}

unint64_t sub_1B0FA5920()
{
  unint64_t result;

  result = qword_1EEEDF7C0;
  if (!qword_1EEEDF7C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E550, &type metadata for SwiftUIAnimation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SwiftUIAnimation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FA59B0 + 4 * byte_1B103E43A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FA59E4 + 4 * byte_1B103E435[v4]))();
}

uint64_t sub_1B0FA59E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA59EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FA59F4);
  return result;
}

uint64_t sub_1B0FA5A00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FA5A08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FA5A0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA5A14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIAnimation.CodingKeys()
{
  return &type metadata for SwiftUIAnimation.CodingKeys;
}

unint64_t sub_1B0FA5A34()
{
  unint64_t result;

  result = qword_1EEEDF7C8;
  if (!qword_1EEEDF7C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E528, &type metadata for SwiftUIAnimation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7C8);
  }
  return result;
}

unint64_t sub_1B0FA5A7C()
{
  unint64_t result;

  result = qword_1EEEDF7D0;
  if (!qword_1EEEDF7D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E498, &type metadata for SwiftUIAnimation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7D0);
  }
  return result;
}

unint64_t sub_1B0FA5AC4()
{
  unint64_t result;

  result = qword_1EEEDF7D8;
  if (!qword_1EEEDF7D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E4C0, &type metadata for SwiftUIAnimation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7D8);
  }
  return result;
}

uint64_t sub_1B0FA5B08(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6F6974616D696E61 && a2 == 0xED0000657079546ELL;
  if (v3 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B0FA5C08@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 0;
      v13 = sub_1B10360B0();
      v14 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF8B0);
      LOBYTE(v22) = 1;
      sub_1B0FA9154(&qword_1EEEDF8B8, &qword_1EEEDF8B0);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 = v23[0];
      v16 = 1;
      goto LABEL_8;
    }
    LOBYTE(v23[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 2;
      v12 = sub_1B10360B0();
      v19 = v18;
      sub_1B0FDB2F4((unint64_t)v23, 0xFuLL, v12, v18);
      v13 = v23[0];
      v14 = v23[1];
      v15 = v23[2];
      v21[1] = v19;
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v22, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1B1036164();
  v13 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_8:
  v17 = v25;
  *v25 = v13;
  v17[1] = v14;
  v17[2] = v15;
  *((_BYTE *)v17 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA6028@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 0;
      v13 = sub_1B10360B0();
      v14 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF8C0);
      LOBYTE(v22) = 1;
      sub_1B0FA9154(&qword_1EEEDF8C8, &qword_1EEEDF8C0);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 = v23[0];
      v16 = 1;
      goto LABEL_8;
    }
    LOBYTE(v23[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 2;
      v12 = sub_1B10360B0();
      v19 = v18;
      sub_1B0FDC0E8((uint64_t)v23, 0xFuLL, v12, v18);
      v13 = v23[0];
      v14 = v23[1];
      v15 = v23[2];
      v21[1] = v19;
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v22, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1B1036164();
  v13 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_8:
  v17 = v25;
  *v25 = v13;
  v17[1] = v14;
  v17[2] = v15;
  *((_BYTE *)v17 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA6448@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 0;
      v14 = sub_1B10360B0();
      v13 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF8A0);
      LOBYTE(v22) = 1;
      sub_1B0FA9154(&qword_1EEEDF8A8, &qword_1EEEDF8A0);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 = v23[0];
      v16 = 1;
      goto LABEL_8;
    }
    LOBYTE(v23[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 2;
      v12 = sub_1B10360B0();
      v19 = v18;
      sub_1B0FDC098((uint64_t)v23, 0xFuLL, v12, v18);
      v14 = v23[0];
      v13 = v23[1];
      v15 = v23[2];
      v21[1] = v19;
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v22, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1B1036164();
  v13 = *((_QWORD *)&v22 + 1);
  v14 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v15 = 0;
  v16 = 0;
LABEL_8:
  v17 = v25;
  *v25 = v14;
  v17[1] = v13;
  v17[2] = v15;
  *((_BYTE *)v17 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA6864@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 0;
      v13 = sub_1B10360B0();
      v14 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF8D8);
      LOBYTE(v22) = 1;
      sub_1B0FA9154(&qword_1EEEDF8E0, &qword_1EEEDF8D8);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 = v23[0];
      v16 = 1;
      goto LABEL_8;
    }
    LOBYTE(v23[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 2;
      v12 = sub_1B10360B0();
      v19 = v18;
      sub_1B0FDC138((uint64_t)v23, 0xFuLL, v12, v18);
      v13 = v23[0];
      v14 = v23[1];
      v15 = v23[2];
      v21[1] = v19;
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v22, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1B0FA9110();
  sub_1B1036164();
  v13 = v22;
  v14 = BYTE8(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v15 = 0;
  v16 = 0;
LABEL_8:
  v17 = v25;
  *v25 = v13;
  v17[1] = v14;
  v17[2] = v15;
  *((_BYTE *)v17 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA6C84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    LOBYTE(v23[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 0;
      v13 = sub_1B10360B0();
      v14 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF8E8);
      LOBYTE(v22) = 1;
      sub_1B0FA9154(&qword_1EEEDF8F0, &qword_1EEEDF8E8);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 = v23[0];
      v16 = 1;
      goto LABEL_8;
    }
    LOBYTE(v23[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v23[0]) = 2;
      v12 = sub_1B10360B0();
      v19 = v18;
      sub_1B0FDC188((uint64_t)v23, 0xFuLL, v12, v18);
      v13 = v23[0];
      v14 = v23[1];
      v15 = v23[2];
      v21[1] = v19;
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v22, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1B0F9D608();
  sub_1B1036164();
  v13 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_8:
  v17 = v25;
  *v25 = v13;
  v17[1] = v14;
  v17[2] = v15;
  *((_BYTE *)v17 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FA70A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(char *)(v1 + 24);
  if (v6 < 0)
  {
    v19 = *(_QWORD *)(v1 + 8);
    swift_retain();
    swift_retain();
    sub_1B0FA786C(a1, (uint64_t)&v17);
    v13 = v17;
    v14 = v18;
    sub_1B0FA786C(a1, (uint64_t)&v11);
    swift_release();
    swift_release();
    v9 = v11;
    v10 = v12;
    sub_1B0FA2908((uint64_t)&v13, (uint64_t)&v9);
    if ((_BYTE)v16)
      return v15;
    else
      *(double *)&result = (double)v15;
  }
  else
  {
    sub_1B0F5E604(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), v6 & 1);
    v7 = sub_1B0FD72F8(a1, v4, v3, v5, v6 & 1);
    sub_1B0FA8AFC(v4, v3, v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E6A0);
    *(double *)&result = v7;
  }
  return result;
}

void sub_1B0FA7470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(char *)(v1 + 24);
  if ((v6 & 0x80000000) == 0)
  {
    sub_1B0F5E604(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), v6 & 1);
    sub_1B0FD6CF8(a1, v4, v3, v5, v6 & 1);
    sub_1B0FA8AFC(v4, v3, v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E6A0);
    return;
  }
  v17 = *(_QWORD *)(v1 + 8);
  swift_retain();
  swift_retain();
  sub_1B0FA786C(a1, (uint64_t)&v15);
  v11 = v15;
  v12 = v16;
  sub_1B0FA786C(a1, (uint64_t)&v9);
  swift_release();
  swift_release();
  v7 = v9;
  v8 = v10;
  sub_1B0FA2908((uint64_t)&v11, (uint64_t)&v7);
  if (v14 == 1)
  {
    if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
          return;
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

void sub_1B0FA786C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;

  v6 = *v2;
  if (*v2 < 0)
  {
    v11 = *(_QWORD *)(v6 + 16);
    v20 = *(_BYTE *)(v6 + 24);
    v16 = v11;
    swift_retain();
    swift_retain();
    sub_1B0FA786C(&v18, a1);
    if (v3)
    {
      swift_release();
      swift_release();
    }
    else
    {
      v16 = v18;
      v17 = v19;
      sub_1B0FA786C(&v14, a1);
      swift_release();
      swift_release();
      v12 = v14;
      v13 = v15;
      sub_1B0FA2908((uint64_t)&v16, (uint64_t)&v12);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    v9 = *(_QWORD *)(v6 + 32);
    v10 = *(_BYTE *)(v6 + 40);
    sub_1B0F5E604(v7, v8, v9, v10);
    sub_1B0FD6B00(a1, v7, v8, v9, v10, a2);
    sub_1B0F5E6A0(v7, v8, v9, v10);
  }
}

uint64_t sub_1B0FA79D8(char a1)
{
  return qword_1B103EAA8[a1];
}

uint64_t sub_1B0FA79F8(char *a1, char *a2)
{
  return sub_1B100D7B0(*a1, *a2);
}

uint64_t sub_1B0FA7A04()
{
  return sub_1B10101B0();
}

uint64_t sub_1B0FA7A0C()
{
  return sub_1B10127B8();
}

uint64_t sub_1B0FA7A14()
{
  return sub_1B1013E34();
}

uint64_t sub_1B0FA7A1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA7A50@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FA79D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FA7A78()
{
  char *v0;

  return sub_1B0FA79D8(*v0);
}

uint64_t sub_1B0FA7A80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA7AAC()
{
  sub_1B0FA7E24();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA7AD4()
{
  sub_1B0FA7E24();
  return sub_1B10362C0();
}

uint64_t NumericResolvable.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  _QWORD v20[5];
  __int128 v21;
  uint64_t v22;
  char v23;
  unint64_t *v24;

  v24 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF7E0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF7E8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA7E24();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF7E0);
LABEL_6:
    sub_1B0F5FD84((uint64_t)a1, (uint64_t)v20);
    sub_1B0FA6864(v20, (uint64_t *)&v21);
    v19 = v21;
    v11 = v22;
    v12 = v23;
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = v19;
    *(_QWORD *)(v18 + 32) = v11;
    *(_BYTE *)(v18 + 40) = v12;
    goto LABEL_7;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  LOBYTE(v20[0]) = 1;
  if ((sub_1B10360D4() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_6;
  }
  LOBYTE(v21) = 0;
  sub_1B0FA7E94();
  sub_1B10360BC();
  v14 = v20[0];
  LOBYTE(v21) = 1;
  sub_1B0FA7ED8();
  sub_1B10360BC();
  v15 = v20[0];
  LOBYTE(v21) = 2;
  sub_1B10360BC();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = v20[0];
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v14;
  *(_BYTE *)(v17 + 24) = v15;
  *(_QWORD *)(v17 + 32) = v16;
  v18 = v17 | 0x8000000000000000;
LABEL_7:
  *v24 = v18;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1B0FA7E24()
{
  unint64_t result;

  result = qword_1EEEDF7F0;
  if (!qword_1EEEDF7F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EA50, &type metadata for NumericResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7F0);
  }
  return result;
}

uint64_t sub_1B0FA7E68()
{
  uint64_t v0;

  sub_1B0F5E6A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

unint64_t sub_1B0FA7E94()
{
  unint64_t result;

  result = qword_1EEEDF7F8;
  if (!qword_1EEEDF7F8)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for NumericResolvable, &type metadata for NumericResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEDF7F8);
  }
  return result;
}

unint64_t sub_1B0FA7ED8()
{
  unint64_t result;

  result = qword_1EEEDF800;
  if (!qword_1EEEDF800)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for MathOperation, &type metadata for MathOperation);
    atomic_store(result, (unint64_t *)&qword_1EEEDF800);
  }
  return result;
}

uint64_t sub_1B0FA7F1C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0FA7F50@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return NumericResolvable.init(from:)(a1, a2);
}

uint64_t sub_1B0FA7F64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA7F98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA7FC4()
{
  sub_1B0FA82FC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA7FEC()
{
  sub_1B0FA82FC();
  return sub_1B10362C0();
}

uint64_t DoubleResolvable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v18[40];
  uint64_t v19[3];
  char v20;
  uint64_t *v21;

  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF808);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF810);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA82FC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF808);
LABEL_6:
    sub_1B0F5FD84((uint64_t)a1, (uint64_t)v18);
    sub_1B0FA6028(v18, v19);
    v13 = v19[0];
    v14 = v19[1];
    v15 = v19[2];
    v16 = v20;
    goto LABEL_7;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v18[0] = 1;
  if ((sub_1B10360D4() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_6;
  }
  LOBYTE(v19[0]) = 0;
  sub_1B0FA7E94();
  sub_1B10360BC();
  v13 = *(_QWORD *)v18;
  LOBYTE(v19[0]) = 1;
  sub_1B0FA7ED8();
  sub_1B10360BC();
  v14 = v18[0];
  LOBYTE(v19[0]) = 2;
  sub_1B10360BC();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v15 = *(_QWORD *)v18;
  v16 = 0x80;
LABEL_7:
  v11 = v21;
  *v21 = v13;
  v11[1] = v14;
  v11[2] = v15;
  *((_BYTE *)v11 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1B0FA82FC()
{
  unint64_t result;

  result = qword_1EEEDF818;
  if (!qword_1EEEDF818)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EA00, &type metadata for DoubleResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF818);
  }
  return result;
}

uint64_t DoubleResolvable.description.getter()
{
  return sub_1B0FA874C(&qword_1EEEDE4F0);
}

uint64_t sub_1B0FA834C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DoubleResolvable.init(from:)(a1, a2);
}

uint64_t sub_1B0FA8364@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA8398@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0F60A74();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA83C4()
{
  sub_1B0FA86FC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA83EC()
{
  sub_1B0FA86FC();
  return sub_1B10362C0();
}

uint64_t IntResolvable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v18[40];
  uint64_t v19[3];
  char v20;
  uint64_t *v21;

  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF820);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF828);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA86FC();
  sub_1B1036278();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    sub_1B0F5A3AC((uint64_t)v6, &qword_1EEEDF820);
LABEL_6:
    sub_1B0F5FD84((uint64_t)a1, (uint64_t)v18);
    sub_1B0FA5C08(v18, v19);
    v13 = v19[0];
    v14 = v19[1];
    v15 = v19[2];
    v16 = v20;
    goto LABEL_7;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v18[0] = 1;
  if ((sub_1B10360D4() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_6;
  }
  LOBYTE(v19[0]) = 0;
  sub_1B0FA7E94();
  sub_1B10360BC();
  v13 = *(_QWORD *)v18;
  LOBYTE(v19[0]) = 1;
  sub_1B0FA7ED8();
  sub_1B10360BC();
  v14 = v18[0];
  LOBYTE(v19[0]) = 2;
  sub_1B10360BC();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v15 = *(_QWORD *)v18;
  v16 = 0x80;
LABEL_7:
  v11 = v21;
  *v21 = v13;
  v11[1] = v14;
  v11[2] = v15;
  *((_BYTE *)v11 + 24) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1B0FA86FC()
{
  unint64_t result;

  result = qword_1EEEDF830;
  if (!qword_1EEEDF830)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E9B0, &type metadata for IntResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF830);
  }
  return result;
}

uint64_t IntResolvable.description.getter()
{
  return sub_1B0FA874C(&qword_1EEEDF838);
}

uint64_t sub_1B0FA874C(uint64_t *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 24) < 0)
  {
    swift_retain();
    swift_retain();
    sub_1B1035FF0();
    sub_1B1035C18();
    sub_1B1035FF0();
    sub_1B1035C18();
    sub_1B1035FF0();
    swift_release();
    swift_release();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a1);
    sub_1B1035FF0();
  }
  return 0;
}

uint64_t sub_1B0FA88A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IntResolvable.init(from:)(a1, a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for NumericResolvable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for NumericResolvable()
{
  return swift_release();
}

_QWORD *assignWithCopy for NumericResolvable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for NumericResolvable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NumericResolvable(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NumericResolvable(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B0FA8A14(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *sub_1B0FA8A20(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1B0FA8A30(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NumericResolvable()
{
  return &type metadata for NumericResolvable;
}

uint64_t destroy for IntResolvable(uint64_t a1)
{
  return sub_1B0FA8AFC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E6A0);
}

uint64_t initializeWithCopy for IntResolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0FA8B40(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E604);
}

uint64_t assignWithCopy for IntResolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0FA8BA0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E604, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E6A0);
}

uint64_t assignWithTake for IntResolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0FA8C18(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0F5E6A0);
}

ValueMetadata *type metadata accessor for DoubleResolvable()
{
  return &type metadata for DoubleResolvable;
}

uint64_t sub_1B0FA8AC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a4 & 0x80) == 0)
    return a5(a1, a2, a3, a4 & 1);
  swift_retain();
  return swift_retain();
}

uint64_t sub_1B0FA8AFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a4 & 0x80) == 0)
    return a5(a1, a2, a3, a4 & 1);
  swift_release();
  return swift_release();
}

uint64_t sub_1B0FA8B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 24);
  sub_1B0FA8AC4(*(_QWORD *)a2, v6, v7, v8, a4);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  return a1;
}

uint64_t sub_1B0FA8BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_BYTE *)(a2 + 24);
  sub_1B0FA8AC4(*(_QWORD *)a2, v8, v9, v10, a4);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  v14 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v10;
  sub_1B0FA8AFC(v11, v12, v13, v14, a5);
  return a1;
}

uint64_t sub_1B0FA8C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0FA8AFC(v8, v10, v9, v11, a4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSectionSpacingModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 24) & 0x7E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ListSectionSpacingModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_1B0FA8D14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 7;
}

uint64_t sub_1B0FA8D20(uint64_t result)
{
  *(_BYTE *)(result + 24) &= ~0x80u;
  return result;
}

uint64_t sub_1B0FA8D30(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for IntResolvable()
{
  return &type metadata for IntResolvable;
}

ValueMetadata *type metadata accessor for IntResolvable.CodingKeys()
{
  return &type metadata for IntResolvable.CodingKeys;
}

ValueMetadata *type metadata accessor for DoubleResolvable.CodingKeys()
{
  return &type metadata for DoubleResolvable.CodingKeys;
}

uint64_t _s6LiftUI13IntResolvableO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FA8DC4 + 4 * byte_1B103E5A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FA8DF8 + 4 * byte_1B103E5A0[v4]))();
}

uint64_t sub_1B0FA8DF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA8E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FA8E08);
  return result;
}

uint64_t sub_1B0FA8E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FA8E1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FA8E20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FA8E28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NumericResolvable.CodingKeys()
{
  return &type metadata for NumericResolvable.CodingKeys;
}

unint64_t sub_1B0FA8E48()
{
  unint64_t result;

  result = qword_1EEEDF840;
  if (!qword_1EEEDF840)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E7A8, &type metadata for NumericResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF840);
  }
  return result;
}

unint64_t sub_1B0FA8E90()
{
  unint64_t result;

  result = qword_1EEEDF848;
  if (!qword_1EEEDF848)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E898, &type metadata for DoubleResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF848);
  }
  return result;
}

unint64_t sub_1B0FA8ED8()
{
  unint64_t result;

  result = qword_1EEEDF850;
  if (!qword_1EEEDF850)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E988, &type metadata for IntResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF850);
  }
  return result;
}

unint64_t sub_1B0FA8F20()
{
  unint64_t result;

  result = qword_1EEEDF858;
  if (!qword_1EEEDF858)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E8C0, &type metadata for IntResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF858);
  }
  return result;
}

unint64_t sub_1B0FA8F68()
{
  unint64_t result;

  result = qword_1EEEDF860;
  if (!qword_1EEEDF860)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E8E8, &type metadata for IntResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF860);
  }
  return result;
}

unint64_t sub_1B0FA8FB0()
{
  unint64_t result;

  result = qword_1EEEDF868;
  if (!qword_1EEEDF868)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E7D0, &type metadata for DoubleResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF868);
  }
  return result;
}

unint64_t sub_1B0FA8FF8()
{
  unint64_t result;

  result = qword_1EEEDF870;
  if (!qword_1EEEDF870)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E7F8, &type metadata for DoubleResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF870);
  }
  return result;
}

unint64_t sub_1B0FA9040()
{
  unint64_t result;

  result = qword_1EEEDF878;
  if (!qword_1EEEDF878)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E6E0, &type metadata for NumericResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF878);
  }
  return result;
}

unint64_t sub_1B0FA9088()
{
  unint64_t result;

  result = qword_1EEEDF880;
  if (!qword_1EEEDF880)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103E708, &type metadata for NumericResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF880);
  }
  return result;
}

unint64_t sub_1B0FA90CC()
{
  unint64_t result;

  result = qword_1EEEDF898;
  if (!qword_1EEEDF898)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10429D4, &type metadata for ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF898);
  }
  return result;
}

unint64_t sub_1B0FA9110()
{
  unint64_t result;

  result = qword_1EEEDF8D0;
  if (!qword_1EEEDF8D0)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for NumericValue, &type metadata for NumericValue);
    atomic_store(result, (unint64_t *)&qword_1EEEDF8D0);
  }
  return result;
}

uint64_t sub_1B0FA9154(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for SubReference<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for AlignmentGuideModifier(uint64_t a1)
{
  sub_1B0F6C7D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F56ADC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AlignmentGuideModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C708(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  sub_1B0F56B9C(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AlignmentGuideModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C708(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F6C7D4(v8, v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_BYTE *)(a2 + 56);
  sub_1B0F56B9C(v12, v13, v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  v19 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v15;
  sub_1B0F56ADC(v16, v17, v18, v19);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AlignmentGuideModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F6C7D4(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v10;
  v15 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F56ADC(v12, v13, v14, v15);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlignmentGuideModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlignmentGuideModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlignmentGuideModifier()
{
  return &type metadata for AlignmentGuideModifier;
}

uint64_t sub_1B0FA9478(char a1)
{
  if (!a1)
    return 0x56657475706D6F63;
  if (a1 == 1)
    return 103;
  return 0x6F69736E656D6964;
}

uint64_t sub_1B0FA94D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B100CC1C(*a1, *a2);
}

uint64_t sub_1B0FA94E4()
{
  return sub_1B1010218();
}

uint64_t sub_1B0FA94EC()
{
  return sub_1B101222C();
}

uint64_t sub_1B0FA94F4()
{
  return sub_1B1015124();
}

uint64_t sub_1B0FA94FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FAA6C0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA9528@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FA9478(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FA9550()
{
  char *v0;

  return sub_1B0FA9478(*v0);
}

uint64_t sub_1B0FA9558@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FAA6C0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FA957C()
{
  sub_1B0FAA4D8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FA95A4()
{
  sub_1B0FAA4D8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FA95CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  char v45;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF910);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FAA4D8();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v45 = 0;
  sub_1B0F7E5F8();
  sub_1B10360BC();
  v38 = a2;
  v10 = v41;
  v11 = v42;
  v12 = v43;
  v45 = 1;
  v39 = v40;
  sub_1B0F6C708(v40, v41, v42, v43);
  sub_1B0F56A98();
  sub_1B10360BC();
  v44 = v12;
  v37 = v11;
  v35 = v10;
  v13 = v40;
  v14 = v43;
  LOBYTE(v40) = 2;
  v15 = v13;
  v16 = v41;
  v36 = v42;
  sub_1B0F56B9C(v13, v41, v42, v43);
  v34 = 0;
  v17 = sub_1B103608C();
  v19 = 0x6F69736E656D6964;
  if (v18)
    v19 = v17;
  v34 = v19;
  if (v18)
    v20 = v18;
  else
    v20 = 0xEA0000000000736ELL;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v35;
  v22 = v44;
  sub_1B0F6C708(v39, v35, v37, v44);
  v23 = v15;
  v24 = v15;
  v25 = v16;
  v26 = v16;
  v33 = v16;
  v27 = v36;
  sub_1B0F56B9C(v24, v26, v36, v14);
  swift_bridgeObjectRetain();
  sub_1B0F56ADC(v23, v25, v27, v14);
  v28 = v39;
  v29 = v37;
  sub_1B0F6C7D4(v39, v21, v37, v22);
  v30 = v38;
  *v38 = v28;
  v30[1] = v21;
  v30[2] = v29;
  *((_BYTE *)v30 + 24) = v22;
  v31 = v33;
  v30[4] = v23;
  v30[5] = v31;
  v32 = v36;
  v30[6] = v36;
  *((_BYTE *)v30 + 56) = v14;
  v30[8] = v34;
  v30[9] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F6C7D4(v28, v21, v37, v44);
  sub_1B0F56ADC(v23, v31, v32, v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FA997C(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  char *v8;
  _BYTE v9[24];
  __int128 v10;
  __int128 v11;
  _OWORD v12[3];
  _BYTE v13[48];

  v5 = v2[3];
  v12[0] = v2[2];
  v12[1] = v5;
  v12[2] = v2[4];
  v6 = v2[1];
  v10 = *v2;
  v11 = v6;
  sub_1B0F96EA4((uint64_t)v12, (uint64_t)v13);
  sub_1B0F96EA4((uint64_t)v13, (uint64_t)v9);
  sub_1B0F96EE0((uint64_t)v13);
  StringResolvable.resolved(with:)(a2);
  if (!v3)
  {
    sub_1B0F96F10((uint64_t)v13);
    v8 = (char *)&loc_1B0FA9A44 + 4 * byte_1B103EAE0[sub_1B1001DC8()];
    __asm { BR              X10 }
  }
  return sub_1B0F96F10((uint64_t)v13);
}

uint64_t sub_1B0FA9C50@<X0>(unint64_t *a1@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF908);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B103ECB0;
  *(_QWORD *)(inited + 32) = 0x746867696568;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  sub_1B103491C();
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0x6874646977;
  *(_QWORD *)(inited + 64) = 0xE500000000000000;
  sub_1B1034910();
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 7368564;
  *(_QWORD *)(inited + 88) = 0xE300000000000000;
  v5 = sub_1B1034BA4();
  *(double *)(inited + 96) = MEMORY[0x1B5E13388](v5);
  *(_QWORD *)(inited + 104) = 0xD000000000000018;
  *(_QWORD *)(inited + 112) = 0x80000001B104CB90;
  v6 = sub_1B1034BBC();
  *(double *)(inited + 120) = MEMORY[0x1B5E13388](v6);
  *(_QWORD *)(inited + 128) = 0x6D6F74746F62;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v7 = sub_1B1034BB0();
  *(double *)(inited + 144) = MEMORY[0x1B5E13388](v7);
  *(_QWORD *)(inited + 152) = 0x676E696461656CLL;
  *(_QWORD *)(inited + 160) = 0xE700000000000000;
  v8 = sub_1B1034DCC();
  *(double *)(inited + 168) = MEMORY[0x1B5E13394](v8);
  *(_QWORD *)(inited + 176) = 0x676E696C69617274;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  v9 = sub_1B1034DD8();
  *(double *)(inited + 192) = MEMORY[0x1B5E13394](v9);
  *(_QWORD *)(inited + 200) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 208) = 0x80000001B104CBB0;
  v10 = sub_1B1034DC0();
  *(double *)(inited + 216) = MEMORY[0x1B5E13394](v10);
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x80000001B104CBD0;
  v11 = sub_1B1034B98();
  *(double *)(inited + 240) = MEMORY[0x1B5E13388](v11);
  *(_QWORD *)(inited + 248) = 0xD000000000000010;
  *(_QWORD *)(inited + 256) = 0x80000001B104CBF0;
  v12 = sub_1B1034B8C();
  *(double *)(inited + 264) = MEMORY[0x1B5E13388](v12);
  *(_QWORD *)(inited + 272) = 0xD000000000000017;
  *(_QWORD *)(inited + 280) = 0x80000001B104CC10;
  v13 = sub_1B1034DA8();
  *(double *)(inited + 288) = MEMORY[0x1B5E13394](v13);
  *(_QWORD *)(inited + 296) = 0xD000000000000018;
  *(_QWORD *)(inited + 304) = 0x80000001B104CC30;
  v14 = sub_1B1034DB4();
  *(double *)(inited + 312) = MEMORY[0x1B5E13394](v14);
  v15 = sub_1B0F558C8(inited);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_1B0FAA0C8(v15);
  result = swift_bridgeObjectRelease();
  *a1 = v16 | 0xA000000000000000;
  return result;
}

double sub_1B0FA9E80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  double v16;
  char v17;
  double result;
  _BYTE v19[32];
  _BYTE v20[32];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF048);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(inited + 40) = v8;
  swift_bridgeObjectRetain();
  sub_1B0FA9C50((unint64_t *)(inited + 48));
  v9 = sub_1B0F554CC(inited);
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = sub_1B0F553A4(MEMORY[0x1E0DEE9D8]);
  v12 = swift_allocObject();
  v13 = qword_1EEEE0760;
  swift_retain();
  swift_retain();
  *(_QWORD *)(v12 + v13) = sub_1B0F553A4(v10);
  *(_QWORD *)(v12 + qword_1EEEE0768) = a3;
  swift_retain_n();
  swift_release();
  v14 = sub_1B0F55C84(a3);
  sub_1B0F56FC4(v9, a4);
  swift_bridgeObjectRelease();
  swift_release();
  v15 = (unint64_t *)(v14 + qword_1EEEE0760);
  swift_beginAccess();
  *v15 = v11;
  swift_bridgeObjectRelease();
  sub_1B0FAA408(a2, (uint64_t)v20);
  sub_1B0FAA408((uint64_t)v20, (uint64_t)v19);
  sub_1B0FAA444((uint64_t)v20);
  v16 = COERCE_DOUBLE(sub_1B0FA70A4(v14));
  LOBYTE(v15) = v17;
  sub_1B0FAA474((uint64_t)v20);
  swift_release();
  result = v16;
  if ((v15 & 1) != 0)
    return 0.0;
  return result;
}

uint64_t sub_1B0FAA038(uint64_t a1, uint64_t a2)
{
  return sub_1B0FA997C(a1, a2);
}

uint64_t sub_1B0FAA04C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0FA95CC(a1, a2);
}

unint64_t sub_1B0FAA060(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FAA084();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FAA084()
{
  unint64_t result;

  result = qword_1EEEDF8F8;
  if (!qword_1EEEDF8F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EB18, &type metadata for AlignmentGuideModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF8F8);
  }
  return result;
}

uint64_t sub_1B0FAA0C8(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E0);
  result = sub_1B103602C();
  v3 = (_QWORD *)result;
  v4 = 0;
  v26 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v25 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * i);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v20;
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = (_QWORD *)(v3[6] + 16 * i);
    *v21 = v19;
    v21[1] = v18;
    *(_QWORD *)(v3[7] + 8 * i) = result | 0x4000000000000000;
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v24;
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v25)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v25)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v6 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v25)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v6 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v25)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v25)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v6 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

double sub_1B0FAA2E4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0FA9E80(a1, v1 + 16, *(_QWORD *)(v1 + 96), (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
}

unint64_t sub_1B0FAA308()
{
  unint64_t result;

  result = qword_1EEEDF900;
  if (!qword_1EEEDF900)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC878], MEMORY[0x1E0CDC890]);
    atomic_store(result, (unint64_t *)&qword_1EEEDF900);
  }
  return result;
}

uint64_t sub_1B0FAA34C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  sub_1B0F6C708(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F56B9C(v2, v3, v4, v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  sub_1B0F6C7D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_1B0F56ADC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0FAA408(uint64_t a1, uint64_t a2)
{
  __swift_memcpy25_8(a2, a1);
  return a2;
}

uint64_t sub_1B0FAA444(uint64_t a1)
{
  sub_1B0F6C708(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

uint64_t sub_1B0FAA474(uint64_t a1)
{
  sub_1B0F6C7D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

uint64_t sub_1B0FAA4A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0FAA4C8()
{
  return swift_deallocObject();
}

unint64_t sub_1B0FAA4D8()
{
  unint64_t result;

  result = qword_1EEEDF918;
  if (!qword_1EEEDF918)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EC58, &type metadata for AlignmentGuideModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF918);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AlignmentGuideModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FAA568 + 4 * byte_1B103EAEF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FAA59C + 4 * byte_1B103EAEA[v4]))();
}

uint64_t sub_1B0FAA59C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FAA5A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FAA5ACLL);
  return result;
}

uint64_t sub_1B0FAA5B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FAA5C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FAA5C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FAA5CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlignmentGuideModifier.CodingKeys()
{
  return &type metadata for AlignmentGuideModifier.CodingKeys;
}

unint64_t sub_1B0FAA5EC()
{
  unint64_t result;

  result = qword_1EEEDF920;
  if (!qword_1EEEDF920)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EC30, &type metadata for AlignmentGuideModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF920);
  }
  return result;
}

unint64_t sub_1B0FAA634()
{
  unint64_t result;

  result = qword_1EEEDF928;
  if (!qword_1EEEDF928)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EB68, &type metadata for AlignmentGuideModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF928);
  }
  return result;
}

unint64_t sub_1B0FAA67C()
{
  unint64_t result;

  result = qword_1EEEDF930;
  if (!qword_1EEEDF930)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EB90, &type metadata for AlignmentGuideModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF930);
  }
  return result;
}

uint64_t sub_1B0FAA6C0()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t destroy for AspectRatioModifier(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2 & 1);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 != 255)
    result = sub_1B0F5E6A0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3 & 1);
  v4 = *(unsigned __int8 *)(v1 + 88);
  if (v4 != 255)
    return sub_1B0F5E6A0(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v4 & 1);
  return result;
}

uint64_t initializeWithCopy for AspectRatioModifier(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1B0F5E604(*a2, v7, v8, v4 & 1);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v5;
  }
  v9 = *((unsigned __int8 *)a2 + 56);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  else
  {
    v10 = v9 & 1;
    v11 = a2[4];
    v12 = a2[5];
    v13 = a2[6];
    sub_1B0F5E604(v11, v12, v13, v9 & 1);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v10;
  }
  v14 = *((unsigned __int8 *)a2 + 88);
  if (v14 == 255)
  {
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  }
  else
  {
    v15 = v14 & 1;
    v16 = a2[8];
    v17 = a2[9];
    v18 = a2[10];
    sub_1B0F5E604(v16, v17, v18, v14 & 1);
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_BYTE *)(a1 + 88) = v15;
  }
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  return a1;
}

uint64_t assignWithCopy for AspectRatioModifier(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  int v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v15 = v4 & 1;
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 2);
      sub_1B0F5E604(*(_QWORD *)a2, v17, v18, v4 & 1);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v15;
    }
  }
  else if (v4 == 255)
  {
    sub_1B0F7F584(a1);
    v5 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    sub_1B0F5E604(*(_QWORD *)a2, v9, v10, v4 & 1);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_BYTE *)(a1 + 24);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v7;
    sub_1B0F5E6A0(v11, v12, v13, v14);
  }
  v19 = (__int128 *)(a1 + 32);
  v20 = a2 + 2;
  v21 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v21 == 255)
    {
      v23 = *v20;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *v19 = v23;
    }
    else
    {
      v32 = v21 & 1;
      v33 = *((_QWORD *)a2 + 4);
      v34 = *((_QWORD *)a2 + 5);
      v35 = *((_QWORD *)a2 + 6);
      sub_1B0F5E604(v33, v34, v35, v21 & 1);
      *(_QWORD *)(a1 + 32) = v33;
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 48) = v35;
      *(_BYTE *)(a1 + 56) = v32;
    }
  }
  else if (v21 == 255)
  {
    sub_1B0F7F584(a1 + 32);
    v22 = *(__int128 *)((char *)a2 + 41);
    *v19 = *v20;
    *(_OWORD *)(a1 + 41) = v22;
  }
  else
  {
    v24 = v21 & 1;
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 5);
    v27 = *((_QWORD *)a2 + 6);
    sub_1B0F5E604(v25, v26, v27, v21 & 1);
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 48);
    v31 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)(a1 + 48) = v27;
    *(_BYTE *)(a1 + 56) = v24;
    sub_1B0F5E6A0(v28, v29, v30, v31);
  }
  v36 = (__int128 *)(a1 + 64);
  v37 = a2 + 4;
  v38 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v38 == 255)
    {
      v40 = *v37;
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v36 = v40;
    }
    else
    {
      v49 = v38 & 1;
      v50 = *((_QWORD *)a2 + 8);
      v51 = *((_QWORD *)a2 + 9);
      v52 = *((_QWORD *)a2 + 10);
      sub_1B0F5E604(v50, v51, v52, v38 & 1);
      *(_QWORD *)(a1 + 64) = v50;
      *(_QWORD *)(a1 + 72) = v51;
      *(_QWORD *)(a1 + 80) = v52;
      *(_BYTE *)(a1 + 88) = v49;
    }
  }
  else if (v38 == 255)
  {
    sub_1B0F7F584(a1 + 64);
    v39 = *(__int128 *)((char *)a2 + 73);
    *v36 = *v37;
    *(_OWORD *)(a1 + 73) = v39;
  }
  else
  {
    v41 = v38 & 1;
    v42 = *((_QWORD *)a2 + 8);
    v43 = *((_QWORD *)a2 + 9);
    v44 = *((_QWORD *)a2 + 10);
    sub_1B0F5E604(v42, v43, v44, v38 & 1);
    v45 = *(_QWORD *)(a1 + 64);
    v46 = *(_QWORD *)(a1 + 72);
    v47 = *(_QWORD *)(a1 + 80);
    v48 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = v42;
    *(_QWORD *)(a1 + 72) = v43;
    *(_QWORD *)(a1 + 80) = v44;
    *(_BYTE *)(a1 + 88) = v41;
    sub_1B0F5E6A0(v45, v46, v47, v48);
  }
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AspectRatioModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 == 255)
  {
    sub_1B0F7F584(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = v4 & 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  sub_1B0F5E6A0(v8, v9, v10, v6);
LABEL_6:
  v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  v12 = *(unsigned __int8 *)(a2 + 56);
  if (v12 == 255)
  {
    sub_1B0F7F584(a1 + 32);
    goto LABEL_9;
  }
  v13 = v11 & 1;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v12 & 1;
  sub_1B0F5E6A0(v15, v16, v17, v13);
LABEL_11:
  v18 = *(unsigned __int8 *)(a1 + 88);
  if (v18 != 255)
  {
    v19 = *(unsigned __int8 *)(a2 + 88);
    if (v19 != 255)
    {
      v20 = v18 & 1;
      v21 = *(_QWORD *)(a2 + 80);
      v22 = *(_QWORD *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = v21;
      *(_BYTE *)(a1 + 88) = v19 & 1;
      sub_1B0F5E6A0(v22, v23, v24, v20);
      goto LABEL_16;
    }
    sub_1B0F7F584(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
LABEL_16:
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspectRatioModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 90))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 89);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AspectRatioModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 90) = 0;
    if (a2)
      *(_BYTE *)(result + 89) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AspectRatioModifier()
{
  return &type metadata for AspectRatioModifier;
}

uint64_t sub_1B0FAAD5C(char a1)
{
  if ((a1 & 1) != 0)
    return 7629158;
  else
    return 1819044198;
}

uint64_t sub_1B0FAAD84(char a1)
{
  return *(_QWORD *)&aWidth_3[8 * a1];
}

uint64_t sub_1B0FAADA4(char *a1, char *a2)
{
  return sub_1B100DA64(*a1, *a2);
}

uint64_t sub_1B0FAADB0()
{
  return sub_1B10102C0();
}

uint64_t sub_1B0FAADB8()
{
  return sub_1B1012914();
}

uint64_t sub_1B0FAADC0()
{
  return sub_1B1014808();
}

uint64_t sub_1B0FAADC8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FAAE24@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FAAD5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FAAE4C()
{
  sub_1B0FABC50();
  return sub_1B1035CB4();
}

uint64_t sub_1B0FAAEA8()
{
  sub_1B0FABC50();
  return sub_1B1035CA8();
}

uint64_t sub_1B0FAAEF4(char *a1, char *a2)
{
  return sub_1B100D400(*a1, *a2);
}

uint64_t sub_1B0FAAF00()
{
  return sub_1B1010330();
}

uint64_t sub_1B0FAAF08()
{
  return sub_1B10125E8();
}

uint64_t sub_1B0FAAF10()
{
  return sub_1B1014C88();
}

uint64_t sub_1B0FAAF18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FABC08();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FAAF44@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FAAD84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FAAF6C()
{
  char *v0;

  return sub_1B0FAAD84(*v0);
}

uint64_t sub_1B0FAAF74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FABC08();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FAAF98()
{
  sub_1B0FAB8C8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FAAFC0()
{
  sub_1B0FAB8C8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FAAFE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  int v48;
  char v49;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF940);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FAB8C8();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v43 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
  v49 = 0;
  sub_1B0F5FE48();
  sub_1B10360A4();
  v9 = v47;
  v49 = 1;
  v41 = v45;
  v42 = v44;
  v40 = v46;
  sub_1B0F5FD10(v44, v45, v46, v47);
  sub_1B10360A4();
  v33 = v9;
  v10 = v47;
  v49 = 2;
  v37 = v44;
  v38 = v46;
  v32 = v45;
  sub_1B0F5FD10(v44, v45, v46, v47);
  v31 = 0;
  sub_1B10360A4();
  v34 = v10;
  v11 = v44;
  v12 = v45;
  v49 = 3;
  v39 = v46;
  v48 = v47;
  sub_1B0F5FD10(v44, v45, v46, v47);
  sub_1B0FAB90C();
  sub_1B10360BC();
  v13 = v40;
  v35 = v12;
  v36 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LODWORD(v31) = (v44 & 1) == 0;
  v15 = v11;
  sub_1B0F5FD10(v42, v41, v13, v33);
  v16 = v32;
  v17 = v34;
  sub_1B0F5FD10(v37, v32, v38, v34);
  v18 = v11;
  v19 = v39;
  v20 = v48;
  sub_1B0F5FD10(v18, v12, v39, v48);
  sub_1B0F5FD28(v15, v12, v19, v20);
  v21 = v37;
  v22 = v38;
  sub_1B0F5FD28(v37, v16, v38, v17);
  v24 = v41;
  v23 = v42;
  v25 = v33;
  sub_1B0F5FD28(v42, v41, v13, v33);
  v26 = v43;
  *v43 = v23;
  v26[1] = v24;
  v26[2] = v13;
  *((_BYTE *)v26 + 24) = v25;
  v27 = v32;
  v26[4] = v21;
  v26[5] = v27;
  v26[6] = v22;
  v28 = v34;
  *((_BYTE *)v26 + 56) = v34;
  v29 = v36;
  v26[8] = v36;
  v26[9] = v12;
  v30 = v39;
  v26[10] = v39;
  LOBYTE(v22) = v48;
  *((_BYTE *)v26 + 88) = v48;
  *((_BYTE *)v26 + 89) = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F5FD28(v42, v24, v13, v33);
  sub_1B0F5FD28(v37, v27, v38, v28);
  return sub_1B0F5FD28(v29, v35, v30, v22);
}

uint64_t sub_1B0FAB488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  int v38;

  v5 = v4;
  v7 = a1;
  v10 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(unsigned __int8 *)(v3 + 24);
  v27 = *(_QWORD *)(v3 + 32);
  v28 = *(_QWORD *)(v3 + 40);
  v29 = *(_QWORD *)(v3 + 48);
  v13 = *(unsigned __int8 *)(v3 + 88);
  v14 = *(unsigned __int8 *)(v3 + 89);
  v37 = *(unsigned __int8 *)(v3 + 56);
  v38 = v14;
  v32 = v9;
  v33 = v11;
  if (v13 == 255)
  {
    v18 = a2;
    if (v12 == 255)
      goto LABEL_8;
  }
  else
  {
    v26 = v10;
    v31 = a3;
    v15 = *(_QWORD *)(v3 + 64);
    v16 = *(_QWORD *)(v3 + 72);
    v17 = *(_QWORD *)(v3 + 80);
    sub_1B0F5E604(v15, v16, v17, v13 & 1);
    v18 = a2;
    sub_1B0FD72F8(a2, v15, v16, v17, v13 & 1);
    if (!v4)
    {
      sub_1B0F5FD28(v15, v16, v17, v13);
      v21 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v22 = sub_1B103497C();
      v31[3] = v22;
      v34[0] = v21;
      v34[1] = MEMORY[0x1E0CDB158];
      v31[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v22, v34);
      __swift_allocate_boxed_opaque_existential_1(v31);
      return sub_1B1035348();
    }

    sub_1B0F5FD28(v15, v16, v17, v13);
    v5 = 0;
    v7 = a1;
    a3 = v31;
    v10 = v26;
    if (v12 == 255)
    {
LABEL_8:
      v19 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v7[3]);
      v20 = sub_1B103497C();
      a3[3] = v20;
      v36[0] = v19;
      v36[1] = MEMORY[0x1E0CDB158];
      a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v20, v36);
      __swift_allocate_boxed_opaque_existential_1(a3);
      return sub_1B1035348();
    }
  }
  sub_1B0F5E604(v10, v32, v33, v12 & 1);
  sub_1B0FD72F8(v18, v10, v32, v33, v12 & 1);
  if (v5)
  {

    sub_1B0F5FD28(v10, v32, v33, v12);
    goto LABEL_8;
  }
  sub_1B0F5FD28(v10, v32, v33, v12);
  if (v37 == 255)
    goto LABEL_8;
  sub_1B0F5E604(v27, v28, v29, v37 & 1);
  sub_1B0FD72F8(v18, v27, v28, v29, v37 & 1);
  sub_1B0F5FD28(v27, v28, v29, v37);
  v24 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v25 = sub_1B103497C();
  a3[3] = v25;
  v35[0] = v24;
  v35[1] = MEMORY[0x1E0CDB158];
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v25, v35);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035354();
}

uint64_t sub_1B0FAB838@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FAB488(a1, a2, a3);
}

uint64_t sub_1B0FAB84C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B0FAAFE8(a1, a2);
}

unint64_t sub_1B0FAB860(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FAB884();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FAB884()
{
  unint64_t result;

  result = qword_1EEEDF938;
  if (!qword_1EEEDF938)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ECF4, &type metadata for AspectRatioModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF938);
  }
  return result;
}

unint64_t sub_1B0FAB8C8()
{
  unint64_t result;

  result = qword_1EEEDF948;
  if (!qword_1EEEDF948)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EF40, &type metadata for AspectRatioModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF948);
  }
  return result;
}

unint64_t sub_1B0FAB90C()
{
  unint64_t result;

  result = qword_1EEEDF950;
  if (!qword_1EEEDF950)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EF18, &type metadata for ContentModeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDF950);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentModeString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FAB99C + 4 * byte_1B103ECC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FAB9D0 + 4 * byte_1B103ECC0[v4]))();
}

uint64_t sub_1B0FAB9D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FAB9D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FAB9E0);
  return result;
}

uint64_t sub_1B0FAB9EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FAB9F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FAB9F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FABA00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentModeString()
{
  return &type metadata for ContentModeString;
}

uint64_t storeEnumTagSinglePayload for AspectRatioModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FABA68 + 4 * byte_1B103ECCF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FABA9C + 4 * byte_1B103ECCA[v4]))();
}

uint64_t sub_1B0FABA9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FABAA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FABAACLL);
  return result;
}

uint64_t sub_1B0FABAB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FABAC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FABAC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FABACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AspectRatioModifier.CodingKeys()
{
  return &type metadata for AspectRatioModifier.CodingKeys;
}

unint64_t sub_1B0FABAEC()
{
  unint64_t result;

  result = qword_1EEEDF958;
  if (!qword_1EEEDF958)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EE28, &type metadata for AspectRatioModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF958);
  }
  return result;
}

unint64_t sub_1B0FABB34()
{
  unint64_t result;

  result = qword_1EEEDF960;
  if (!qword_1EEEDF960)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EEF0, &type metadata for ContentModeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDF960);
  }
  return result;
}

unint64_t sub_1B0FABB7C()
{
  unint64_t result;

  result = qword_1EEEDF968;
  if (!qword_1EEEDF968)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ED60, &type metadata for AspectRatioModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF968);
  }
  return result;
}

unint64_t sub_1B0FABBC4()
{
  unint64_t result;

  result = qword_1EEEDF970;
  if (!qword_1EEEDF970)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103ED88, &type metadata for AspectRatioModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF970);
  }
  return result;
}

uint64_t sub_1B0FABC08()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_1B0FABC50()
{
  unint64_t result;

  result = qword_1EEEDF978;
  if (!qword_1EEEDF978)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103EE78, &type metadata for ContentModeString);
    atomic_store(result, (unint64_t *)&qword_1EEEDF978);
  }
  return result;
}

uint64_t sub_1B0FABC94()
{
  return sub_1B10344E4();
}

uint64_t sub_1B0FABCB4()
{
  return sub_1B10344F0();
}

void (*sub_1B0FABCD4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1B10344D8();
  return sub_1B0FABD1C;
}

void sub_1B0FABD1C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t DecodingError.context.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_1B1035F60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B1035F54();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v12 == *MEMORY[0x1E0DEC450] || v12 == *MEMORY[0x1E0DEC460])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v13 = &v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF988) + 48)];
    v14 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v14(v11, v13, v8);
  }
  else if (v12 == *MEMORY[0x1E0DEC448])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF980);
    v14 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v14(v11, &v7[*(int *)(v16 + 48)], v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    if (v12 != *MEMORY[0x1E0DEC458])
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v14 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v14(v11, v7, v8);
  }
  v14(a1, v11, v8);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
}

unint64_t sub_1B0FABF50(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FABF74();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FABF74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDF990;
  if (!qword_1EEEDF990)
  {
    v1 = sub_1B1034508();
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CAE078], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDF990);
  }
  return result;
}

uint64_t dispatch thunk of LiftUIDecoder.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LiftUIDecoder.userInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LiftUIDecoder.userInfo.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_1B0FABFD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t destroy for OffsetModifier(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFD)
    result = sub_1B0F6C7D4(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 <= 0xFD)
    return sub_1B0F6C7D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3);
  return result;
}

uint64_t initializeWithCopy for OffsetModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B0F6C708(*(_QWORD *)a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    sub_1B0F6C708(v9, v10, v11, v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  return a1;
}

uint64_t assignWithCopy for OffsetModifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *v17;
  _OWORD *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F6C708(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F6C7D4(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F7A924(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F6C708(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  v17 = (_OWORD *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v19 <= 0xFD)
    {
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = *((_QWORD *)a2 + 6);
      sub_1B0F6C708(v25, v26, v27, v19);
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_QWORD *)(a1 + 40);
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v27;
      v31 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v19;
      sub_1B0F6C7D4(v28, v29, v30, v31);
    }
    else
    {
      sub_1B0F7A924(a1 + 32);
      v21 = *(__int128 *)((char *)a2 + 41);
      *v17 = *v18;
      *(_OWORD *)(a1 + 41) = v21;
    }
  }
  else if (v19 <= 0xFD)
  {
    v22 = *((_QWORD *)a2 + 4);
    v23 = *((_QWORD *)a2 + 5);
    v24 = *((_QWORD *)a2 + 6);
    sub_1B0F6C708(v22, v23, v24, v19);
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    *(_BYTE *)(a1 + 56) = v19;
  }
  else
  {
    v20 = *v18;
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *v17 = v20;
  }
  return a1;
}

uint64_t assignWithTake for OffsetModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 > 0xFD)
  {
    sub_1B0F7A924(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F6C7D4(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 <= 0xFD)
  {
    v11 = *(unsigned __int8 *)(a2 + 56);
    if (v11 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 56) = v11;
      sub_1B0F6C7D4(v13, v14, v15, v10);
      return a1;
    }
    sub_1B0F7A924(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for OffsetModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 126);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if ((v3 & 0x7E) != 0)
    v4 = 126 - (v3 & 0x7E | (v3 >> 7));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OffsetModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = (a2 ^ 0x7F) & 0xFE | ((a2 ^ 0x7F) << 7);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OffsetModifier()
{
  return &type metadata for OffsetModifier;
}

uint64_t sub_1B0FAC444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;

  v21 = a2;
  v6 = *(unsigned __int8 *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v10 = *(unsigned __int8 *)(v3 + 56);
  if (v6 <= 0xFD)
  {
    v16 = *(_QWORD *)(v3 + 48);
    v17 = *(_QWORD *)(v3 + 32);
    v11 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    v19 = *(_QWORD *)(v3 + 16);
    sub_1B0F6C708(*(_QWORD *)v3, v18, v19, v6);
    sub_1B0FA70A4(v21);
    v12 = v11;
    v7 = v17;
    v9 = v16;
    sub_1B0F6C7C0(v12, v18, v19, v6);
  }
  if (v10 <= 0xFD)
  {
    sub_1B0F6C708(v7, v8, v9, v10);
    sub_1B0FA70A4(v21);
    sub_1B0F6C7C0(v7, v8, v9, v10);
  }
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = sub_1B103497C();
  a3[3] = v14;
  v20[0] = v13;
  v20[1] = MEMORY[0x1E0CD90E0];
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v14, v20);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B10355B8();
}

uint64_t sub_1B0FAC614(char a1)
{
  if ((a1 & 1) != 0)
    return 121;
  else
    return 120;
}

uint64_t sub_1B0FAC628()
{
  char *v0;

  return sub_1B0FAC614(*v0);
}

uint64_t sub_1B0FAC630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FACB90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0FAC654()
{
  sub_1B0FAC9A8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FAC67C()
{
  sub_1B0FAC9A8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FAC6A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF9A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FAC9A8();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = 0;
  sub_1B0F7E5F8();
  sub_1B10360A4();
  v9 = v27;
  v31 = 1;
  v24 = v28;
  v25 = v26;
  v30 = v29;
  sub_1B0F6C6F4(v26, v27, v28, v29);
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v26;
  v22 = v27;
  v23 = v26;
  v11 = v28;
  v21 = v28;
  HIDWORD(v20) = v29;
  v12 = v24;
  v13 = v25;
  v14 = v30;
  sub_1B0F6C6F4(v25, v9, v24, v30);
  v15 = v10;
  v16 = v22;
  v17 = v11;
  LOBYTE(v11) = BYTE4(v20);
  sub_1B0F6C6F4(v15, v22, v17, SBYTE4(v20));
  sub_1B0F6C7C0(v13, v9, v12, v14);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v16;
  v18 = v21;
  *(_QWORD *)(a2 + 48) = v21;
  *(_BYTE *)(a2 + 56) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F6C7C0(v13, v9, v12, v14);
  return sub_1B0F6C7C0(v23, v22, v18, v11);
}

uint64_t sub_1B0FAC918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FAC444(a1, a2, a3);
}

uint64_t sub_1B0FAC92C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FAC6A4(a1, a2);
}

unint64_t sub_1B0FAC940(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FAC964();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FAC964()
{
  unint64_t result;

  result = qword_1EEEDF998;
  if (!qword_1EEEDF998)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F068, &type metadata for OffsetModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDF998);
  }
  return result;
}

unint64_t sub_1B0FAC9A8()
{
  unint64_t result;

  result = qword_1EEEDF9A8;
  if (!qword_1EEEDF9A8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F170, &type metadata for OffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OffsetModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FACA38 + 4 * byte_1B103F04D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FACA6C + 4 * asc_1B103F048[v4]))();
}

uint64_t sub_1B0FACA6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FACA74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FACA7CLL);
  return result;
}

uint64_t sub_1B0FACA88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FACA90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FACA94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FACA9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OffsetModifier.CodingKeys()
{
  return &type metadata for OffsetModifier.CodingKeys;
}

unint64_t sub_1B0FACABC()
{
  unint64_t result;

  result = qword_1EEEDF9B0;
  if (!qword_1EEEDF9B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F148, &type metadata for OffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9B0);
  }
  return result;
}

unint64_t sub_1B0FACB04()
{
  unint64_t result;

  result = qword_1EEEDF9B8;
  if (!qword_1EEEDF9B8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F0B8, &type metadata for OffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9B8);
  }
  return result;
}

unint64_t sub_1B0FACB4C()
{
  unint64_t result;

  result = qword_1EEEDF9C0;
  if (!qword_1EEEDF9C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F0E0, &type metadata for OffsetModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9C0);
  }
  return result;
}

uint64_t sub_1B0FACB90(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 120 && a2 == 0xE100000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B0FACC58(uint64_t a1)
{
  destroy for PinnedScrollableViewsOptions(a1);
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for LazyHStackView()
{
  return &type metadata for LazyHStackView;
}

uint64_t _s6LiftUI14LazyHStackViewVwxx_0(uint64_t a1)
{
  int v2;
  int v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 != 254)
  {
    if (v2 != 255)
      sub_1B0F5E6A0(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80) & 1);
    v3 = *(unsigned __int8 *)(a1 + 112);
    if (v3 != 255)
      sub_1B0F5E6A0(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v3 & 1);
  }
  return swift_release();
}

uint64_t _s6LiftUI14LazyHStackViewVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = (_OWORD *)(a1 + 56);
  v7 = (_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 254)
  {
    v9 = v7[1];
    *v6 = *v7;
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = v7[2];
    *(_OWORD *)(a1 + 97) = *(_OWORD *)((char *)v7 + 41);
  }
  else
  {
    if (v8 == 255)
    {
      *v6 = *v7;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)v7 + 9);
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 56);
      v11 = *(_QWORD *)(a2 + 64);
      v12 = *(_QWORD *)(a2 + 72);
      sub_1B0F5E604(v10, v11, v12, v8 & 1);
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v11;
      *(_QWORD *)(a1 + 72) = v12;
      *(_BYTE *)(a1 + 80) = v8 & 1;
    }
    v13 = *(unsigned __int8 *)(a2 + 112);
    if (v13 == 255)
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
    }
    else
    {
      v14 = v13 & 1;
      v15 = *(_QWORD *)(a2 + 88);
      v16 = *(_QWORD *)(a2 + 96);
      v17 = *(_QWORD *)(a2 + 104);
      sub_1B0F5E604(v15, v16, v17, v13 & 1);
      *(_QWORD *)(a1 + 88) = v15;
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v17;
      *(_BYTE *)(a1 + 112) = v14;
    }
  }
  v18 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_retain();
  return a1;
}

uint64_t _s6LiftUI14LazyHStackViewVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 *v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (__int128 *)(a1 + 56);
  v6 = (__int128 *)(a2 + 56);
  v7 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(unsigned __int8 *)(a2 + 80);
  if (v7 == 254)
  {
    if (v8 == 254)
    {
      v9 = *v6;
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
      *(_OWORD *)(a1 + 72) = v10;
      *(_OWORD *)(a1 + 88) = v11;
LABEL_4:
      *v5 = v9;
      goto LABEL_26;
    }
    if (v8 == 255)
    {
      v15 = *v6;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *v5 = v15;
    }
    else
    {
      v17 = v8 & 1;
      v18 = *(_QWORD *)(a2 + 56);
      v19 = *(_QWORD *)(a2 + 64);
      v20 = *(_QWORD *)(a2 + 72);
      sub_1B0F5E604(v18, v19, v20, v8 & 1);
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 72) = v20;
      *(_BYTE *)(a1 + 80) = v17;
    }
    v21 = *(unsigned __int8 *)(a2 + 112);
    if (v21 == 255)
    {
      v22 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
      *(_OWORD *)(a1 + 88) = v22;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if (v8 == 254)
  {
    sub_1B0FACC58(a1 + 56);
    v13 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    v14 = *v6;
    *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    *v5 = v14;
    goto LABEL_26;
  }
  if (v7 == 255)
  {
    if (v8 == 255)
    {
      v16 = *v6;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *v5 = v16;
    }
    else
    {
      v24 = v8 & 1;
      v25 = *(_QWORD *)(a2 + 56);
      v26 = *(_QWORD *)(a2 + 64);
      v27 = *(_QWORD *)(a2 + 72);
      sub_1B0F5E604(v25, v26, v27, v8 & 1);
      *(_QWORD *)(a1 + 56) = v25;
      *(_QWORD *)(a1 + 64) = v26;
      *(_QWORD *)(a1 + 72) = v27;
      *(_BYTE *)(a1 + 80) = v24;
    }
  }
  else if (v8 == 255)
  {
    sub_1B0F5A3AC(a1 + 56, &qword_1EEEDE7E8);
    v23 = *(_OWORD *)(a2 + 65);
    *v5 = *v6;
    *(_OWORD *)(a1 + 65) = v23;
  }
  else
  {
    v28 = v8 & 1;
    v29 = *(_QWORD *)(a2 + 56);
    v30 = *(_QWORD *)(a2 + 64);
    v31 = *(_QWORD *)(a2 + 72);
    sub_1B0F5E604(v29, v30, v31, v8 & 1);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 64);
    v34 = *(_QWORD *)(a1 + 72);
    v35 = *(_BYTE *)(a1 + 80);
    *(_QWORD *)(a1 + 56) = v29;
    *(_QWORD *)(a1 + 64) = v30;
    *(_QWORD *)(a1 + 72) = v31;
    *(_BYTE *)(a1 + 80) = v28;
    sub_1B0F5E6A0(v32, v33, v34, v35);
  }
  v5 = (__int128 *)(a1 + 88);
  v36 = (__int128 *)(a2 + 88);
  v21 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v21 == 255)
    {
      v9 = *v36;
      *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
      goto LABEL_4;
    }
LABEL_24:
    v38 = v21 & 1;
    v39 = *(_QWORD *)(a2 + 88);
    v40 = *(_QWORD *)(a2 + 96);
    v41 = *(_QWORD *)(a2 + 104);
    sub_1B0F5E604(v39, v40, v41, v21 & 1);
    *(_QWORD *)(a1 + 88) = v39;
    *(_QWORD *)(a1 + 96) = v40;
    *(_QWORD *)(a1 + 104) = v41;
    *(_BYTE *)(a1 + 112) = v38;
    goto LABEL_26;
  }
  if (v21 == 255)
  {
    sub_1B0F5A3AC(a1 + 88, &qword_1EEEDE7E8);
    v37 = *(_OWORD *)(a2 + 97);
    *v5 = *v36;
    *(_OWORD *)(a1 + 97) = v37;
  }
  else
  {
    v42 = v21 & 1;
    v43 = *(_QWORD *)(a2 + 88);
    v44 = *(_QWORD *)(a2 + 96);
    v45 = *(_QWORD *)(a2 + 104);
    sub_1B0F5E604(v43, v44, v45, v21 & 1);
    v46 = *(_QWORD *)(a1 + 88);
    v47 = *(_QWORD *)(a1 + 96);
    v48 = *(_QWORD *)(a1 + 104);
    v49 = *(_BYTE *)(a1 + 112);
    *(_QWORD *)(a1 + 88) = v43;
    *(_QWORD *)(a1 + 96) = v44;
    *(_QWORD *)(a1 + 104) = v45;
    *(_BYTE *)(a1 + 112) = v42;
    sub_1B0F5E6A0(v46, v47, v48, v49);
  }
LABEL_26:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t _s6LiftUI14LazyHStackViewVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 56);
  v6 = (_OWORD *)(a2 + 56);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v7 == 254)
    goto LABEL_4;
  v8 = *(unsigned __int8 *)(a2 + 80);
  if (v8 == 254)
  {
    sub_1B0FACC58(a1 + 56);
LABEL_4:
    v9 = *(_OWORD *)(a2 + 72);
    *v5 = *v6;
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
    goto LABEL_15;
  }
  if (v7 != 255)
  {
    if (v8 != 255)
    {
      v10 = v7 & 1;
      v11 = *(_QWORD *)(a2 + 72);
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(_QWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = v11;
      *(_BYTE *)(a1 + 80) = v8 & 1;
      sub_1B0F5E6A0(v12, v13, v14, v10);
      goto LABEL_10;
    }
    sub_1B0F5A3AC(a1 + 56, &qword_1EEEDE7E8);
  }
  *v5 = *v6;
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
LABEL_10:
  v15 = *(unsigned __int8 *)(a1 + 112);
  if (v15 != 255)
  {
    v16 = *(unsigned __int8 *)(a2 + 112);
    if (v16 != 255)
    {
      v17 = v15 & 1;
      v18 = *(_QWORD *)(a2 + 104);
      v19 = *(_QWORD *)(a1 + 88);
      v20 = *(_QWORD *)(a1 + 96);
      v21 = *(_QWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = v18;
      *(_BYTE *)(a1 + 112) = v16 & 1;
      sub_1B0F5E6A0(v19, v20, v21, v17);
      goto LABEL_15;
    }
    sub_1B0F5A3AC(a1 + 88, &qword_1EEEDE7E8);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
LABEL_15:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t _s6LiftUI14LazyHStackViewVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B0FAD3A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyVStackView()
{
  return &type metadata for LazyVStackView;
}

uint64_t destroy for ZStackView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ZStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ZStackView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ZStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZStackView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZStackView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStackView()
{
  return &type metadata for ZStackView;
}

uint64_t destroy for HStackView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for HStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_1B0F6C708(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HStackView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      sub_1B0F6C708(v12, v13, v14, *(_BYTE *)(a2 + 40));
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F6C7D4(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F7A924(a1 + 16);
      v8 = *(_OWORD *)(a2 + 25);
      *v4 = *v5;
      *(_OWORD *)(a1 + 25) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    sub_1B0F6C708(v9, v10, v11, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *v4 = v7;
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for HStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 <= 0xFD)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 <= 0xFD)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = v7;
      *(_BYTE *)(a1 + 40) = v6;
      sub_1B0F6C7D4(v8, v9, v10, v5);
      goto LABEL_6;
    }
    sub_1B0F7A924(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
LABEL_6:
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for HStackView()
{
  return &type metadata for HStackView;
}

uint64_t destroy for VStackView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for VStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    sub_1B0F6C708(v6, v7, v8, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VStackView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      sub_1B0F6C708(v12, v13, v14, *(_BYTE *)(a2 + 48));
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      v18 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = v6;
      sub_1B0F6C7D4(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F7A924(a1 + 24);
      v8 = *(_OWORD *)(a2 + 33);
      *v4 = *v5;
      *(_OWORD *)(a1 + 33) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    sub_1B0F6C708(v9, v10, v11, *(_BYTE *)(a2 + 48));
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *v4 = v7;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for VStackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a1 + 48);
  if (v5 <= 0xFD)
  {
    v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 <= 0xFD)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = v7;
      *(_BYTE *)(a1 + 48) = v6;
      sub_1B0F6C7D4(v8, v9, v10, v5);
      goto LABEL_6;
    }
    sub_1B0F7A924(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for VStackView()
{
  return &type metadata for VStackView;
}

uint64_t sub_1B0FADD3C(char a1)
{
  return qword_1B103F900[a1];
}

uint64_t sub_1B0FADD5C(char *a1, char *a2)
{
  return sub_1B100D1E4(*a1, *a2);
}

uint64_t sub_1B0FADD68()
{
  return sub_1B1010398();
}

uint64_t sub_1B0FADD70()
{
  return sub_1B10124E0();
}

uint64_t sub_1B0FADD78()
{
  return sub_1B1014DB8();
}

uint64_t sub_1B0FADD80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB13F0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FADDAC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FADD3C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FADDD4()
{
  char *v0;

  return sub_1B0FADD3C(*v0);
}

uint64_t sub_1B0FADDDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB13F0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FADE00()
{
  sub_1B0FB0E58();
  return sub_1B10362B4();
}

uint64_t sub_1B0FADE28()
{
  sub_1B0FB0E58();
  return sub_1B10362C0();
}

uint64_t sub_1B0FADE50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAE0);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAE8);
  v4 = MEMORY[0x1E0C80A78](v36);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v30 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - v12;
  v14 = *(unsigned __int8 *)(v1 + 16);
  v15 = *(unsigned __int8 *)(v1 + 48);
  v16 = *(_QWORD *)(v1 + 56);
  if (v15 > 0xFD)
    goto LABEL_7;
  v32 = *(_QWORD *)(v1 + 56);
  v33 = a1;
  v17 = *(_QWORD *)(v1 + 24);
  v18 = *(_QWORD *)(v1 + 32);
  v19 = *(_QWORD *)(v1 + 40);
  v20 = *(_QWORD *)(v1 + 72);
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v15;
  if (v20)
  {
    swift_retain();
    sub_1B0F6C6F4(v17, v18, v19, v15);
    v31 = sub_1B0FA70A4(v20);
    v22 = v21;
    swift_release();
    sub_1B0F6C7C0(v17, v18, v19, v15);
    v16 = v32;
    if ((v22 & 1) == 0)
    {
      v23 = (uint64_t)v13;
      if (v14)
      {
        if (v14 == 1)
          v24 = sub_1B1034DC0();
        else
          v24 = sub_1B1034DD8();
        v27 = (uint64_t)v37;
      }
      else
      {
        v24 = sub_1B1034DCC();
        v27 = (uint64_t)v37;
      }
      v28 = v31;
      *(_QWORD *)v11 = v24;
      *((_QWORD *)v11 + 1) = v28;
      v11[16] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAF0);
      v38 = v16;
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
      sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
      sub_1B0F64174();
      sub_1B10358AC();
      sub_1B0FB0EE0((uint64_t)v11, (uint64_t)v13, &qword_1EEEDFAE8);
      sub_1B0F5A974((uint64_t)v13, v27, &qword_1EEEDFAE8);
LABEL_18:
      swift_storeEnumTagMultiPayload();
      sub_1B0F5A7E4(&qword_1EEEDFAF8, &qword_1EEEDFAE8, MEMORY[0x1E0CDFCC0]);
      sub_1B1034EC8();
      return sub_1B0F5A3AC(v23, &qword_1EEEDFAE8);
    }
LABEL_7:
    if (v14)
    {
      v23 = (uint64_t)v34;
      if (v14 == 1)
        v25 = sub_1B1034DC0();
      else
        v25 = sub_1B1034DD8();
      v26 = (uint64_t)v37;
    }
    else
    {
      v25 = sub_1B1034DCC();
      v26 = (uint64_t)v37;
      v23 = (uint64_t)v34;
    }
    *(_QWORD *)v6 = v25;
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAF0);
    v38 = v16;
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
    sub_1B0F64174();
    sub_1B10358AC();
    sub_1B0FB0EE0((uint64_t)v6, v23, &qword_1EEEDFAE8);
    sub_1B0F5A974(v23, v26, &qword_1EEEDFAE8);
    goto LABEL_18;
  }
  sub_1B0F6C6F4(v17, v18, v19, v15);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v17, v18, v19, v15);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0FAE2F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;

  v38 = a2;
  v3 = sub_1B103461C();
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAA8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v10 = sub_1B1034AD8();
  v37 = v11;
  v12 = a1[3];
  v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1B0FB0E58();
  swift_retain();
  v13 = v42;
  sub_1B1036278();
  if (v13)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    sub_1B0F6C7C0(0, 0, 0, 254);
    swift_release();
  }
  else
  {
    v42 = v7;
    LOBYTE(v43) = 0;
    v14 = sub_1B103608C();
    v16 = v6;
    v18 = v15;
    if (v15)
    {
      v19 = v14;
    }
    else
    {
      sub_1B1034610();
      v19 = sub_1B1034604();
      v18 = v20;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v40);
    }
    v48 = 1;
    sub_1B0F7E5F8();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v39 = v19;
    v40 = v18;
    v21 = v43;
    v22 = v44;
    v23 = v9;
    v24 = v16;
    v25 = v45;
    v26 = v46;
    sub_1B0F6C6F4(v43, v44, v45, v46);
    sub_1B0F6C7C0(0, 0, 0, 254);
    LOBYTE(v43) = 2;
    sub_1B103608C();
    v35 = v21;
    v36 = v23;
    if (v27)
    {
      v28 = sub_1B103605C();
      swift_bridgeObjectRelease();
      if (v28 >= 3)
        v29 = 1;
      else
        v29 = v28;
    }
    else
    {
      v29 = 1;
    }
    v47 = v29;
    v30 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v48 = 3;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    v31 = v36;
    sub_1B10360A4();
    if (v43)
      v32 = v43;
    else
      v32 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v24);
    v33 = v40;
    swift_bridgeObjectRetain();
    v34 = v35;
    sub_1B0F6C6F4(v35, v22, v25, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B0F6C7C0(v34, v22, v25, v26);
    swift_bridgeObjectRelease();
    *(_QWORD *)v30 = v39;
    *(_QWORD *)(v30 + 8) = v33;
    *(_BYTE *)(v30 + 16) = v47;
    *(_QWORD *)(v30 + 24) = v34;
    *(_QWORD *)(v30 + 32) = v22;
    *(_QWORD *)(v30 + 40) = v25;
    *(_BYTE *)(v30 + 48) = v26;
    *(_QWORD *)(v30 + 56) = v32;
    *(_QWORD *)(v30 + 64) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v30 + 72) = v10;
    *(_QWORD *)(v30 + 80) = v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_bridgeObjectRelease();
    sub_1B0F6C7C0(v34, v22, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FAE824@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FAE2F4(a1, a2);
}

uint64_t sub_1B0FAE838()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FAE848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAC0);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAC8);
  v4 = MEMORY[0x1E0C80A78](v36);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v30 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - v12;
  v14 = *(unsigned __int8 *)(v1 + 40);
  v15 = *(unsigned __int8 *)(v1 + 41);
  v16 = *(_QWORD *)(v1 + 48);
  if (v14 > 0xFD)
    goto LABEL_7;
  v32 = *(_QWORD *)(v1 + 48);
  v33 = a1;
  v17 = *(_QWORD *)(v1 + 16);
  v19 = *(_QWORD *)(v1 + 24);
  v18 = *(_QWORD *)(v1 + 32);
  v20 = *(_QWORD *)(v1 + 64);
  v38 = v17;
  v39 = v19;
  v40 = v18;
  v41 = v14;
  if (v20)
  {
    swift_retain();
    sub_1B0F6C6F4(v17, v19, v18, v14);
    v31 = sub_1B0FA70A4(v20);
    v22 = v21;
    swift_release();
    sub_1B0F6C7C0(v17, v19, v18, v14);
    v16 = v32;
    if ((v22 & 1) == 0)
    {
      v23 = (uint64_t)v13;
      if (v15)
      {
        if (v15 == 1)
          v24 = sub_1B1034BBC();
        else
          v24 = sub_1B1034BB0();
        v27 = (uint64_t)v37;
      }
      else
      {
        v24 = sub_1B1034BA4();
        v27 = (uint64_t)v37;
      }
      v28 = v31;
      *(_QWORD *)v11 = v24;
      *((_QWORD *)v11 + 1) = v28;
      v11[16] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAD0);
      v38 = v16;
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
      sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
      sub_1B0F64174();
      sub_1B10358AC();
      sub_1B0FB0EE0((uint64_t)v11, (uint64_t)v13, &qword_1EEEDFAC8);
      sub_1B0F5A974((uint64_t)v13, v27, &qword_1EEEDFAC8);
LABEL_18:
      swift_storeEnumTagMultiPayload();
      sub_1B0F5A7E4(&qword_1EEEDFAD8, &qword_1EEEDFAC8, MEMORY[0x1E0CDFB10]);
      sub_1B1034EC8();
      return sub_1B0F5A3AC(v23, &qword_1EEEDFAC8);
    }
LABEL_7:
    if (v15)
    {
      v23 = (uint64_t)v34;
      if (v15 == 1)
        v25 = sub_1B1034BBC();
      else
        v25 = sub_1B1034BB0();
      v26 = (uint64_t)v37;
    }
    else
    {
      v25 = sub_1B1034BA4();
      v26 = (uint64_t)v37;
      v23 = (uint64_t)v34;
    }
    *(_QWORD *)v6 = v25;
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAD0);
    v38 = v16;
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
    sub_1B0F64174();
    sub_1B10358AC();
    sub_1B0FB0EE0((uint64_t)v6, v23, &qword_1EEEDFAC8);
    sub_1B0F5A974(v23, v26, &qword_1EEEDFAC8);
    goto LABEL_18;
  }
  sub_1B0F6C6F4(v17, v19, v18, v14);
  swift_bridgeObjectRetain();
  sub_1B0F6C6F4(v17, v19, v18, v14);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0FAECE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  char v49;

  v39 = a2;
  v3 = sub_1B103461C();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAA8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v11 = sub_1B1034AD8();
  v38 = v12;
  v13 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B0FB0E58();
  swift_retain();
  v14 = v43;
  sub_1B1036278();
  if (v14)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    sub_1B0F6C7C0(0, 0, 0, 254);
    swift_release();
  }
  else
  {
    v15 = v41;
    v43 = v8;
    LOBYTE(v44) = 0;
    v16 = sub_1B103608C();
    v19 = v17;
    if (v17)
    {
      v20 = v16;
    }
    else
    {
      sub_1B1034610();
      v20 = sub_1B1034604();
      v19 = v21;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v40);
    }
    v49 = 1;
    sub_1B0F7E5F8();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v40 = v20;
    v41 = v19;
    v22 = v10;
    v23 = v7;
    v25 = v44;
    v24 = v45;
    v26 = v46;
    v27 = v47;
    sub_1B0F6C6F4(v44, v45, v46, v47);
    sub_1B0F6C7C0(0, 0, 0, 254);
    LOBYTE(v44) = 2;
    sub_1B103608C();
    v36 = v26;
    v37 = v22;
    if (v28)
    {
      v29 = sub_1B103605C();
      swift_bridgeObjectRelease();
      if (v29 >= 3)
        v30 = 1;
      else
        v30 = v29;
    }
    else
    {
      v30 = 1;
    }
    v48 = v30;
    v31 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v49 = 3;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    v32 = v37;
    sub_1B10360A4();
    if (v44)
      v33 = v44;
    else
      v33 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v23);
    v34 = v41;
    swift_bridgeObjectRetain();
    v35 = v36;
    sub_1B0F6C6F4(v25, v24, v36, v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B0F6C7C0(v25, v24, v35, v27);
    swift_bridgeObjectRelease();
    *(_QWORD *)v31 = v40;
    *(_QWORD *)(v31 + 8) = v34;
    *(_QWORD *)(v31 + 16) = v25;
    *(_QWORD *)(v31 + 24) = v24;
    *(_QWORD *)(v31 + 32) = v35;
    *(_BYTE *)(v31 + 40) = v27;
    *(_BYTE *)(v31 + 41) = v48;
    *(_QWORD *)(v31 + 48) = v33;
    *(_QWORD *)(v31 + 56) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v31 + 64) = v11;
    *(_QWORD *)(v31 + 72) = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    swift_bridgeObjectRelease();
    sub_1B0F6C7C0(v25, v24, v35, v27);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FAF220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FAECE8(a1, a2);
}

uint64_t sub_1B0FAF234()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FAF244(char a1)
{
  return qword_1B103F940[a1];
}

uint64_t sub_1B0FAF264@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAA0);
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

double sub_1B0FAF338@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1B0FB0A64(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1B0FAF378()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FAF388(char *a1, char *a2)
{
  return sub_1B100C9CC(*a1, *a2);
}

uint64_t sub_1B0FAF394()
{
  return sub_1B1010400();
}

uint64_t sub_1B0FAF39C()
{
  return sub_1B10120F4();
}

uint64_t sub_1B0FAF3A4()
{
  return sub_1B101532C();
}

uint64_t sub_1B0FAF3AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB1438();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FAF3D8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FAF244(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FAF400()
{
  char *v0;

  return sub_1B0FAF244(*v0);
}

uint64_t sub_1B0FAF408@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB1438();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FAF42C()
{
  sub_1B0FB0998();
  return sub_1B10362B4();
}

uint64_t sub_1B0FAF454()
{
  sub_1B0FB0998();
  return sub_1B10362C0();
}

uint64_t sub_1B0FAF47C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  __int128 v38;
  uint64_t v39;
  _BYTE v40[64];
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFA98);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B1034FE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v26 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v26 - v14;
  v16 = v1[7];
  v37[3] = v1[6];
  v38 = v16;
  v39 = *((_QWORD *)v1 + 16);
  v17 = v1[3];
  v36 = v1[2];
  v37[0] = v17;
  v18 = v1[5];
  v37[1] = v1[4];
  v37[2] = v18;
  v19 = v1[1];
  v34 = *v1;
  v35 = v19;
  sub_1B0FB0EE0((uint64_t)v37 + 8, (uint64_t)v40, &qword_1EEEDFA70);
  sub_1B0FB0EE0((uint64_t)v40, (uint64_t)&v41, &qword_1EEEDFA70);
  v30 = a1;
  if (BYTE8(v42) == 254)
  {
    LODWORD(v31) = 0;
    sub_1B0F524FC(&qword_1EEEDF370, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBDB8], MEMORY[0x1E0CDBDD8]);
    v20 = v15;
    sub_1B10362CC();
  }
  else
  {
    v31 = v41;
    v32 = v42;
    v33[0] = v43[0];
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v43 + 9);
    if (!*((_QWORD *)&v38 + 1))
    {
      sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD10);
      sub_1B0F6CA20((uint64_t)&v34);
      type metadata accessor for RemoteStateStore(0);
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      result = sub_1B1034ACC();
      __break(1u);
      return result;
    }
    sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD10);
    v21 = swift_retain();
    sub_1B0F8E874(v21, (uint64_t)v13);
    swift_release();
    sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD28);
    v20 = v15;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v13, v6);
  }
  v27 = v5;
  if ((_BYTE)v35)
  {
    if (v35 == 1)
      v22 = sub_1B1034DC0();
    else
      v22 = sub_1B1034DD8();
  }
  else
  {
    v22 = sub_1B1034DCC();
  }
  v26[1] = v22;
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v20, v6);
  v26[0] = v26;
  MEMORY[0x1E0C80A78](v23);
  v26[-2] = &v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
  v24 = v27;
  sub_1B1034778();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v24, v29);
}

uint64_t sub_1B0FAF7F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FAFC80(a1, (uint64_t)&unk_1E62914F0, a2);
}

uint64_t sub_1B0FAF818()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FAF828@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  __int128 v38;
  uint64_t v39;
  _BYTE v40[64];
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFA68);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B1034FE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v26 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v26 - v14;
  v16 = v1[7];
  v37[3] = v1[6];
  v38 = v16;
  v39 = *((_QWORD *)v1 + 16);
  v17 = v1[3];
  v36 = v1[2];
  v37[0] = v17;
  v18 = v1[5];
  v37[1] = v1[4];
  v37[2] = v18;
  v19 = v1[1];
  v34 = *v1;
  v35 = v19;
  sub_1B0FB0EE0((uint64_t)v37 + 8, (uint64_t)v40, &qword_1EEEDFA70);
  sub_1B0FB0EE0((uint64_t)v40, (uint64_t)&v41, &qword_1EEEDFA70);
  v30 = a1;
  if (BYTE8(v42) == 254)
  {
    LODWORD(v31) = 0;
    sub_1B0F524FC(&qword_1EEEDF370, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBDB8], MEMORY[0x1E0CDBDD8]);
    v20 = v15;
    sub_1B10362CC();
  }
  else
  {
    v31 = v41;
    v32 = v42;
    v33[0] = v43[0];
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v43 + 9);
    if (!*((_QWORD *)&v38 + 1))
    {
      sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD10);
      sub_1B0F6CA20((uint64_t)&v34);
      type metadata accessor for RemoteStateStore(0);
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      result = sub_1B1034ACC();
      __break(1u);
      return result;
    }
    sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD10);
    v21 = swift_retain();
    sub_1B0F8E874(v21, (uint64_t)v13);
    swift_release();
    sub_1B0FB0950((uint64_t)v40, (void (*)(void))sub_1B0F5FD28);
    v20 = v15;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v13, v6);
  }
  v27 = v5;
  if ((_BYTE)v35)
  {
    if (v35 == 1)
      v22 = sub_1B1034BBC();
    else
      v22 = sub_1B1034BB0();
  }
  else
  {
    v22 = sub_1B1034BA4();
  }
  v26[1] = v22;
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v20, v6);
  v26[0] = v26;
  MEMORY[0x1E0C80A78](v23);
  v26[-2] = &v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
  v24 = v27;
  sub_1B103476C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v24, v29);
}

uint64_t sub_1B0FAFBA4()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0FAFC64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FAFC80(a1, (uint64_t)&unk_1E6290DE8, a2);
}

uint64_t sub_1B0FAFC80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  _BYTE v72[7];
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _BYTE v86[7];
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unsigned __int8 v97;
  _BYTE v98[7];
  _BYTE v99[7];
  char v100;
  _DWORD v101[3];
  char *v102;

  v55 = a2;
  v53 = a3;
  v4 = sub_1B103461C();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x1E0C80A78](v4);
  v58 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFA78);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = 1;
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v10 = sub_1B1034AD8();
  v54 = v11;
  v12 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1B0FB0998();
  swift_retain();
  v13 = (uint64_t)v102;
  sub_1B1036278();
  if (v13)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    swift_bridgeObjectRelease();
    sub_1B0F6C9B8(0, 0, 0, 0xFEu, 0, 0, 0, 0, (void (*)(void))sub_1B0F5FD28);
    return swift_release();
  }
  else
  {
    v14 = v58;
    LOBYTE(v69) = 0;
    v15 = sub_1B103608C();
    v18 = v16;
    v102 = v9;
    if (v16)
    {
      v52 = v15;
    }
    else
    {
      sub_1B1034610();
      v52 = sub_1B1034604();
      v18 = v19;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v57);
    }
    LOBYTE(v60) = 1;
    sub_1B0FB09DC();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v58 = v18;
    v20 = v69;
    v21 = v70;
    v100 = (char)v70;
    LOBYTE(v69) = 2;
    sub_1B103608C();
    v51 = v21;
    v56 = v20;
    v57 = v6;
    if (v22)
    {
      v23 = sub_1B103605C();
      swift_bridgeObjectRelease();
      if (v23 >= 3)
        v24 = 1;
      else
        v24 = v23;
    }
    else
    {
      v24 = 1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    LOBYTE(v60) = 3;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    v25 = v57;
    v26 = (uint64_t)v102;
    sub_1B10360A4();
    if (v69)
      v27 = v69;
    else
      v27 = MEMORY[0x1E0DEE9D8];
    v89 = 4;
    sub_1B0FB0A20();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v26, v25);
    v28 = v90;
    v29 = v91;
    v30 = v92;
    v55 = v93;
    v31 = v94;
    v50 = v95;
    v102 = v96;
    LODWORD(v57) = v97;
    sub_1B0F6C9B8(v90, v91, v92, v93, v94, v95, (uint64_t)v96, v97, (void (*)(void))sub_1B0F5FD10);
    sub_1B0F6C9B8(0, 0, 0, 0xFEu, 0, 0, 0, 0, (void (*)(void))sub_1B0F5FD28);
    *(_QWORD *)&v60 = v52;
    *((_QWORD *)&v60 + 1) = v58;
    v49 = v24;
    LOBYTE(v61) = v24;
    v45 = v27;
    *((_QWORD *)&v61 + 1) = v56;
    LOBYTE(v62) = v51;
    *((_QWORD *)&v62 + 1) = v27;
    *(_QWORD *)&v63 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v63 + 1) = v28;
    v47 = v30;
    v48 = v28;
    *(_QWORD *)&v64 = v29;
    *((_QWORD *)&v64 + 1) = v30;
    v32 = v55;
    *(_QWORD *)&v65 = v55;
    *((_QWORD *)&v65 + 1) = v31;
    v46 = v31;
    v33 = v50;
    *(_QWORD *)&v66 = v50;
    *((_QWORD *)&v66 + 1) = v102;
    LOBYTE(v67) = v57;
    *((_QWORD *)&v67 + 1) = v10;
    v68 = v54;
    sub_1B0F6CA20((uint64_t)&v60);
    swift_release();
    v34 = v31;
    v35 = v33;
    v36 = (uint64_t)v102;
    LOBYTE(v33) = v57;
    sub_1B0F6C9B8(v28, v29, v30, v32, v34, v35, (uint64_t)v102, v57, (void (*)(void))sub_1B0F5FD28);
    v37 = v58;
    swift_bridgeObjectRelease();
    v38 = v45;
    swift_bridgeObjectRelease();
    v39 = v67;
    v40 = v53;
    *(_OWORD *)(v53 + 96) = v66;
    *(_OWORD *)(v40 + 112) = v39;
    *(_QWORD *)(v40 + 128) = v68;
    v41 = v63;
    *(_OWORD *)(v40 + 32) = v62;
    *(_OWORD *)(v40 + 48) = v41;
    v42 = v65;
    *(_OWORD *)(v40 + 64) = v64;
    *(_OWORD *)(v40 + 80) = v42;
    v43 = v61;
    *(_OWORD *)v40 = v60;
    *(_OWORD *)(v40 + 16) = v43;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    v69 = v52;
    v70 = v37;
    v71 = v49;
    *(_DWORD *)v72 = v101[0];
    *(_DWORD *)&v72[3] = *(_DWORD *)((char *)v101 + 3);
    v73 = v56;
    v74 = v100;
    *(_DWORD *)v75 = *(_DWORD *)v99;
    *(_DWORD *)&v75[3] = *(_DWORD *)&v99[3];
    v76 = v38;
    v77 = MEMORY[0x1E0DEE9D8];
    v78 = v48;
    v79 = v29;
    v80 = v47;
    v81 = v55;
    v82 = v46;
    v83 = v50;
    v84 = v36;
    v85 = v33;
    *(_DWORD *)v86 = *(_DWORD *)v98;
    *(_DWORD *)&v86[3] = *(_DWORD *)&v98[3];
    v87 = v10;
    v88 = v54;
    return sub_1B0F6CAD8((uint64_t)&v69);
  }
}

uint64_t sub_1B0FB0308()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FB0318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB0324);
}

unint64_t sub_1B0FB0324()
{
  unint64_t result;

  result = qword_1EEEDF9C8;
  if (!qword_1EEEDF9C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F594, &type metadata for LazyHStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9C8);
  }
  return result;
}

uint64_t sub_1B0FB0368(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB0384, (uint64_t (*)(void))sub_1B0FB03C8, (uint64_t (*)(void))sub_1B0FB040C);
}

unint64_t sub_1B0FB0384()
{
  unint64_t result;

  result = qword_1EEEDF9D0;
  if (!qword_1EEEDF9D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F51C, &type metadata for LazyHStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9D0);
  }
  return result;
}

unint64_t sub_1B0FB03C8()
{
  unint64_t result;

  result = qword_1EEEDF9D8;
  if (!qword_1EEEDF9D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F4E4, &type metadata for LazyHStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9D8);
  }
  return result;
}

unint64_t sub_1B0FB040C()
{
  unint64_t result;

  result = qword_1EEEDF9E0;
  if (!qword_1EEEDF9E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F544, &type metadata for LazyHStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9E0);
  }
  return result;
}

uint64_t sub_1B0FB0450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB045C);
}

unint64_t sub_1B0FB045C()
{
  unint64_t result;

  result = qword_1EEEDF9E8;
  if (!qword_1EEEDF9E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F5B0, &type metadata for LazyVStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9E8);
  }
  return result;
}

uint64_t sub_1B0FB04A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB04BC, (uint64_t (*)(void))sub_1B0FB0500, (uint64_t (*)(void))sub_1B0FB0544);
}

unint64_t sub_1B0FB04BC()
{
  unint64_t result;

  result = qword_1EEEDF9F0;
  if (!qword_1EEEDF9F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F46C, &type metadata for LazyVStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9F0);
  }
  return result;
}

unint64_t sub_1B0FB0500()
{
  unint64_t result;

  result = qword_1EEEDF9F8;
  if (!qword_1EEEDF9F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F434, &type metadata for LazyVStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDF9F8);
  }
  return result;
}

unint64_t sub_1B0FB0544()
{
  unint64_t result;

  result = qword_1EEEDFA00;
  if (!qword_1EEEDFA00)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F494, &type metadata for LazyVStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA00);
  }
  return result;
}

uint64_t sub_1B0FB0588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB0594);
}

unint64_t sub_1B0FB0594()
{
  unint64_t result;

  result = qword_1EEEDFA08;
  if (!qword_1EEEDFA08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F5CC, &type metadata for ZStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA08);
  }
  return result;
}

uint64_t sub_1B0FB05D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB05F4, (uint64_t (*)(void))sub_1B0FB0638, (uint64_t (*)(void))sub_1B0FB067C);
}

unint64_t sub_1B0FB05F4()
{
  unint64_t result;

  result = qword_1EEEDFA10;
  if (!qword_1EEEDFA10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F3BC, &type metadata for ZStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA10);
  }
  return result;
}

unint64_t sub_1B0FB0638()
{
  unint64_t result;

  result = qword_1EEEDFA18;
  if (!qword_1EEEDFA18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F384, &type metadata for ZStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA18);
  }
  return result;
}

unint64_t sub_1B0FB067C()
{
  unint64_t result;

  result = qword_1EEEDFA20;
  if (!qword_1EEEDFA20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F3E4, &type metadata for ZStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA20);
  }
  return result;
}

uint64_t sub_1B0FB06C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB06CC);
}

unint64_t sub_1B0FB06CC()
{
  unint64_t result;

  result = qword_1EEEDFA28;
  if (!qword_1EEEDFA28)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F5E8, &type metadata for HStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA28);
  }
  return result;
}

uint64_t sub_1B0FB0710(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB072C, (uint64_t (*)(void))sub_1B0FB0770, (uint64_t (*)(void))sub_1B0FB07B4);
}

unint64_t sub_1B0FB072C()
{
  unint64_t result;

  result = qword_1EEEDFA30;
  if (!qword_1EEEDFA30)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F30C, &type metadata for HStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA30);
  }
  return result;
}

unint64_t sub_1B0FB0770()
{
  unint64_t result;

  result = qword_1EEEDFA38;
  if (!qword_1EEEDFA38)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F2D4, &type metadata for HStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA38);
  }
  return result;
}

unint64_t sub_1B0FB07B4()
{
  unint64_t result;

  result = qword_1EEEDFA40;
  if (!qword_1EEEDFA40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F334, &type metadata for HStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA40);
  }
  return result;
}

uint64_t sub_1B0FB07F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB0804);
}

unint64_t sub_1B0FB0804()
{
  unint64_t result;

  result = qword_1EEEDFA48;
  if (!qword_1EEEDFA48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F604, &type metadata for VStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA48);
  }
  return result;
}

uint64_t sub_1B0FB0848(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB0864, (uint64_t (*)(void))sub_1B0FB08A8, (uint64_t (*)(void))sub_1B0FB08EC);
}

unint64_t sub_1B0FB0864()
{
  unint64_t result;

  result = qword_1EEEDFA50;
  if (!qword_1EEEDFA50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F25C, &type metadata for VStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA50);
  }
  return result;
}

unint64_t sub_1B0FB08A8()
{
  unint64_t result;

  result = qword_1EEEDFA58;
  if (!qword_1EEEDFA58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F224, &type metadata for VStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA58);
  }
  return result;
}

unint64_t sub_1B0FB08EC()
{
  unint64_t result;

  result = qword_1EEEDFA60;
  if (!qword_1EEEDFA60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F284, &type metadata for VStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA60);
  }
  return result;
}

uint64_t sub_1B0FB0930()
{
  return sub_1B0FAFBA4();
}

uint64_t sub_1B0FB0950(uint64_t a1, void (*a2)(void))
{
  sub_1B0F6C9B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a2);
  return a1;
}

unint64_t sub_1B0FB0998()
{
  unint64_t result;

  result = qword_1EEEDFA80;
  if (!qword_1EEEDFA80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F8A8, &type metadata for LazyStackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA80);
  }
  return result;
}

unint64_t sub_1B0FB09DC()
{
  unint64_t result;

  result = qword_1EEEDFA88;
  if (!qword_1EEEDFA88)
  {
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA88);
  }
  return result;
}

unint64_t sub_1B0FB0A20()
{
  unint64_t result;

  result = qword_1EEEDFA90;
  if (!qword_1EEEDFA90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103C4B0, &type metadata for PinnedScrollableViewsOptions);
    atomic_store(result, (unint64_t *)&qword_1EEEDFA90);
  }
  return result;
}

uint64_t sub_1B0FB0A64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char v24;
  char v26;

  v21 = a2;
  v18 = sub_1B103461C();
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFAA8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  sub_1B1034AD8();
  v19 = v8;
  v9 = a1[3];
  v22 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0FB0E58();
  swift_retain();
  v10 = v23;
  sub_1B1036278();
  if (!v10)
  {
    v11 = v20;
    v26 = 0;
    v12 = sub_1B103608C();
    v15 = v13;
    v23 = v7;
    if (v13)
    {
      v17 = v12;
    }
    else
    {
      sub_1B1034610();
      v17 = sub_1B1034604();
      v15 = v16;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v18);
    }
    v24 = 2;
    sub_1B0FB0E9C();
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    v21 = v15;
    __asm { BR              X10 }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B0FB0E58()
{
  unint64_t result;

  result = qword_1EEEDFAB0;
  if (!qword_1EEEDFAB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F858, &type metadata for StackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFAB0);
  }
  return result;
}

unint64_t sub_1B0FB0E9C()
{
  unint64_t result;

  result = qword_1EEEDFAB8;
  if (!qword_1EEEDFAB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1046084, &type metadata for AlignmentType);
    atomic_store(result, (unint64_t *)&qword_1EEEDFAB8);
  }
  return result;
}

uint64_t sub_1B0FB0EE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for StackViewCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB0F70 + 4 * byte_1B103F1CF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FB0FA4 + 4 * byte_1B103F1CA[v4]))();
}

uint64_t sub_1B0FB0FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB0FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB0FB4);
  return result;
}

uint64_t sub_1B0FB0FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB0FC8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FB0FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB0FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StackViewCodingKeys()
{
  return &type metadata for StackViewCodingKeys;
}

uint64_t storeEnumTagSinglePayload for LazyStackViewCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB103C + 4 * byte_1B103F1D9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0FB1070 + 4 * byte_1B103F1D4[v4]))();
}

uint64_t sub_1B0FB1070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB1078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB1080);
  return result;
}

uint64_t sub_1B0FB108C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB1094);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0FB1098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB10A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LazyStackViewCodingKeys()
{
  return &type metadata for LazyStackViewCodingKeys;
}

uint64_t sub_1B0FB10BC()
{
  return sub_1B0F5A7E4(&qword_1EEEDFB00, &qword_1EEEDFA68, MEMORY[0x1E0CD84C8]);
}

uint64_t sub_1B0FB10E8()
{
  return sub_1B0F5A7E4(&qword_1EEEDFB08, &qword_1EEEDFA98, MEMORY[0x1E0CD84E8]);
}

uint64_t sub_1B0FB1114()
{
  return sub_1B0F5A7E4(&qword_1EEEDFB10, &qword_1EEEDFB18, MEMORY[0x1E0CDFCF8]);
}

unint64_t sub_1B0FB1144()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDFB20;
  if (!qword_1EEEDFB20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFB28);
    v2[0] = sub_1B0F5A7E4(&qword_1EEEDFAD8, &qword_1EEEDFAC8, MEMORY[0x1E0CDFB10]);
    v2[1] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB20);
  }
  return result;
}

unint64_t sub_1B0FB11C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDFB30;
  if (!qword_1EEEDFB30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFB38);
    v2[0] = sub_1B0F5A7E4(&qword_1EEEDFAF8, &qword_1EEEDFAE8, MEMORY[0x1E0CDFCC0]);
    v2[1] = v2[0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB30);
  }
  return result;
}

unint64_t sub_1B0FB1244()
{
  unint64_t result;

  result = qword_1EEEDFB40;
  if (!qword_1EEEDFB40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F740, &type metadata for LazyStackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB40);
  }
  return result;
}

unint64_t sub_1B0FB128C()
{
  unint64_t result;

  result = qword_1EEEDFB48;
  if (!qword_1EEEDFB48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F830, &type metadata for StackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB48);
  }
  return result;
}

unint64_t sub_1B0FB12D4()
{
  unint64_t result;

  result = qword_1EEEDFB50;
  if (!qword_1EEEDFB50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F768, &type metadata for StackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB50);
  }
  return result;
}

unint64_t sub_1B0FB131C()
{
  unint64_t result;

  result = qword_1EEEDFB58;
  if (!qword_1EEEDFB58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F790, &type metadata for StackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB58);
  }
  return result;
}

unint64_t sub_1B0FB1364()
{
  unint64_t result;

  result = qword_1EEEDFB60;
  if (!qword_1EEEDFB60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F678, &type metadata for LazyStackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB60);
  }
  return result;
}

unint64_t sub_1B0FB13AC()
{
  unint64_t result;

  result = qword_1EEEDFB68;
  if (!qword_1EEEDFB68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F6A0, &type metadata for LazyStackViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB68);
  }
  return result;
}

uint64_t sub_1B0FB13F0()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B0FB1438()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t destroy for NavigationLinkView(uint64_t a1)
{
  int v2;

  swift_bridgeObjectRelease();
  sub_1B0F56ADC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  if (*(_QWORD *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 200);
  if (v2 != 255)
    sub_1B0F74EA4(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), v2 & 1);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationLinkView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_1B0F56B9C(v5, v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v9;
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v11 = *(_BYTE *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 112) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 88, a2 + 88);
    *(_BYTE *)(a1 + 128) = v11;
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v13;
    v14 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v14;
    swift_retain();
    swift_retain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v16 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v16;
    v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v18 = *(unsigned __int8 *)(a2 + 200);
  swift_bridgeObjectRetain();
  if (v18 == 255)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  }
  else
  {
    v19 = v18 & 1;
    v20 = *(_QWORD *)(a2 + 176);
    v21 = *(_QWORD *)(a2 + 184);
    v22 = *(_QWORD *)(a2 + 192);
    sub_1B0F5A84C(v20, v21, v22, v19);
    *(_QWORD *)(a1 + 176) = v20;
    *(_QWORD *)(a1 + 184) = v21;
    *(_QWORD *)(a1 + 192) = v22;
    *(_BYTE *)(a1 + 200) = v19;
  }
  v23 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v23;
  v24 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v24;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationLinkView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _OWORD *v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_1B0F56B9C(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  sub_1B0F56ADC(v8, v9, v10, v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (__int128 *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 88);
        v15 = *(_BYTE *)(a2 + 128);
        v16 = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 112) = v16;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 88, a2 + 88);
        *(_BYTE *)(a1 + 128) = v15;
      }
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    }
    else
    {
      sub_1B0F6427C(a1 + 48);
      v19 = *(_OWORD *)(a2 + 96);
      v21 = *v13;
      v20 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v19;
      *v12 = v21;
      *(_OWORD *)(a1 + 64) = v20;
      v23 = *(_OWORD *)(a2 + 128);
      v22 = *(_OWORD *)(a2 + 144);
      v24 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v23;
      *(_OWORD *)(a1 + 144) = v22;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v17 = *(_BYTE *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 88, a2 + 88);
    *(_BYTE *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_retain();
    swift_retain();
  }
  else
  {
    v25 = *v13;
    v26 = *(_OWORD *)(a2 + 64);
    v27 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v27;
    *v12 = v25;
    *(_OWORD *)(a1 + 64) = v26;
    v28 = *(_OWORD *)(a2 + 112);
    v29 = *(_OWORD *)(a2 + 128);
    v30 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v29;
    *(_OWORD *)(a1 + 144) = v30;
    *(_OWORD *)(a1 + 112) = v28;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = (__int128 *)(a1 + 176);
  v32 = (__int128 *)(a2 + 176);
  v33 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
    if (v33 == 255)
    {
      v35 = *v32;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *v31 = v35;
    }
    else
    {
      v44 = v33 & 1;
      v45 = *(_QWORD *)(a2 + 176);
      v46 = *(_QWORD *)(a2 + 184);
      v47 = *(_QWORD *)(a2 + 192);
      sub_1B0F5A84C(v45, v46, v47, v33 & 1);
      *(_QWORD *)(a1 + 176) = v45;
      *(_QWORD *)(a1 + 184) = v46;
      *(_QWORD *)(a1 + 192) = v47;
      *(_BYTE *)(a1 + 200) = v44;
    }
  }
  else if (v33 == 255)
  {
    sub_1B0F5A3AC(a1 + 176, &qword_1EEEDEA40);
    v34 = *(_OWORD *)(a2 + 185);
    *v31 = *v32;
    *(_OWORD *)(a1 + 185) = v34;
  }
  else
  {
    v36 = v33 & 1;
    v37 = *(_QWORD *)(a2 + 176);
    v38 = *(_QWORD *)(a2 + 184);
    v39 = *(_QWORD *)(a2 + 192);
    sub_1B0F5A84C(v37, v38, v39, v33 & 1);
    v40 = *(_QWORD *)(a1 + 176);
    v41 = *(_QWORD *)(a1 + 184);
    v42 = *(_QWORD *)(a1 + 192);
    v43 = *(_BYTE *)(a1 + 200);
    *(_QWORD *)(a1 + 176) = v37;
    *(_QWORD *)(a1 + 184) = v38;
    *(_QWORD *)(a1 + 192) = v39;
    *(_BYTE *)(a1 + 200) = v36;
    sub_1B0F74EA4(v40, v41, v42, v43);
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for NavigationLinkView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  sub_1B0F56ADC(v7, v8, v9, v10);
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_7;
  v11 = *(_QWORD *)(a2 + 56);
  if (!v11)
  {
    sub_1B0F6427C(a1 + 48);
LABEL_7:
    v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v14;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v15 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v15;
    v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v16;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 88);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_8:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  v17 = *(unsigned __int8 *)(a1 + 200);
  if (v17 != 255)
  {
    v18 = *(unsigned __int8 *)(a2 + 200);
    if (v18 != 255)
    {
      v19 = v17 & 1;
      v20 = *(_QWORD *)(a2 + 192);
      v21 = *(_QWORD *)(a1 + 176);
      v22 = *(_QWORD *)(a1 + 184);
      v23 = *(_QWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 192) = v20;
      *(_BYTE *)(a1 + 200) = v18 & 1;
      sub_1B0F74EA4(v21, v22, v23, v19);
      goto LABEL_13;
    }
    sub_1B0F5A3AC(a1 + 176, &qword_1EEEDEA40);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
LABEL_13:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  v24 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v24;
  swift_release();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationLinkView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationLinkView()
{
  return &type metadata for NavigationLinkView;
}

uint64_t destroy for NavigatingView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for NavigatingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a2 + 56;
  v8 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, v7);
  *(_BYTE *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigatingView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    v4 = *(_BYTE *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 96) = v4;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for NavigatingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_release();
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigatingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigatingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigatingView()
{
  return &type metadata for NavigatingView;
}

uint64_t destroy for NavigationStackView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for NavigationStackView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for NavigationStackView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationStackView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationStackView()
{
  return &type metadata for NavigationStackView;
}

uint64_t sub_1B0FB2394()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0FB244C@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0FB2458@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0FB2464()
{
  sub_1B0FB40B8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB248C()
{
  sub_1B0FB40B8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB24B4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFC38);
  sub_1B10357F8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
  sub_1B0F5A7E4(&qword_1EEEDFC40, &qword_1EEEDE410, MEMORY[0x1E0DEAF28]);
  sub_1B0F5A7E4(&qword_1EEEDFC48, &qword_1EEEDE410, MEMORY[0x1E0DEAF48]);
  sub_1B0F5A7E4(&qword_1EEEDFC50, &qword_1EEEDE410, MEMORY[0x1E0DEAF58]);
  sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
  sub_1B0F8AF44();
  return sub_1B1034988();
}

double sub_1B0FB2608@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B0FB3DA4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B0FB2648()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FB2658(char a1)
{
  if ((a1 & 1) != 0)
    return 2003134838;
  else
    return 25705;
}

uint64_t sub_1B0FB267C(char *a1, char *a2)
{
  return sub_1B100E47C(*a1, *a2);
}

uint64_t sub_1B0FB2688()
{
  return sub_1B10104D8();
}

uint64_t sub_1B0FB2690()
{
  return sub_1B1012E24();
}

uint64_t sub_1B0FB2698()
{
  return sub_1B1014150();
}

uint64_t sub_1B0FB26A0@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0FB26AC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB2658(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB26D4()
{
  char *v0;

  return sub_1B0FB2658(*v0);
}

uint64_t sub_1B0FB26DC@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BFB0(a1);
}

uint64_t sub_1B0FB26E8()
{
  sub_1B0FB3D58();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB2710()
{
  sub_1B0FB3D58();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB2738@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v20 = a2;
  v3 = sub_1B103461C();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3);
  v23 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFC28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0FB3C08((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore);
  v43 = sub_1B1034AD8();
  v44 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FB3D58();
  v10 = v45;
  sub_1B1036278();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v11 = v23;
    LOBYTE(v25) = 0;
    v12 = sub_1B103608C();
    if (v13)
    {
      v15 = v12;
    }
    else
    {
      v16 = v11;
      sub_1B1034610();
      v15 = sub_1B1034604();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v22);
      v13 = v18;
    }
    v33[0] = v15;
    v33[1] = v13;
    v24 = 1;
    sub_1B0F64238();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v38 = v29;
    v39 = v30;
    v40 = v31;
    v41 = v32;
    v34 = v25;
    v35 = v26;
    v36 = v27;
    v37 = v28;
    sub_1B0F6D138((uint64_t)v33, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_1B0F6D174((uint64_t)v33);
  }
}

uint64_t sub_1B0FB29E4()
{
  sub_1B0F64174();
  return sub_1B10348D4();
}

uint64_t sub_1B0FB2A30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FB2738(a1, a2);
}

uint64_t sub_1B0FB2A44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FB2A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t *i;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _OWORD v51[8];
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD v66[7];
  uint64_t v67;

  v2 = v1;
  v50 = a1;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBD0);
  v42 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v41 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBD8);
  MEMORY[0x1E0C80A78](v45);
  v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBE0);
  MEMORY[0x1E0C80A78](v5);
  v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBE8);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v43 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(unsigned __int8 *)(v1 + 40);
  *(_QWORD *)&v54 = v8;
  *((_QWORD *)&v54 + 1) = v9;
  *(_QWORD *)&v55 = v10;
  BYTE8(v55) = v11;
  v12 = *(_QWORD *)(v1 + 208);
  if (!v12)
  {
    sub_1B0F56B9C(v8, v9, v10, v11);
    goto LABEL_11;
  }
  sub_1B0F56B9C(v8, v9, v10, v11);
  v13 = swift_retain();
  v14 = StringResolvable.resolved(with:)(v13);
  v16 = v15;
  sub_1B0F56ADC(v8, v9, v10, v11);
  swift_release();
  sub_1B0F5A974(v2 + 48, (uint64_t)&v54, &qword_1EEEDEBD8);
  if (*((_QWORD *)&v54 + 1))
  {
    v11 = (uint64_t)&v54;
    v66[4] = v58;
    v66[5] = v59;
    v66[6] = v60;
    v67 = v61;
    v66[0] = v54;
    v66[1] = v55;
    v66[2] = v56;
    v66[3] = v57;
    v64 = v14;
    v65 = v16;
    type metadata accessor for RemoteStateStore(0);
    sub_1B0FB3C08((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore);
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = sub_1B1034694();
    sub_1B0F641B8((uint64_t)v66, (uint64_t)&v54);
    *((_QWORD *)&v61 + 1) = v17;
    *(_QWORD *)&v62 = v12;
    v18 = *(_QWORD *)(v2 + 224);
    if (!v18)
    {
      type metadata accessor for LocalStateStore(0);
      v38 = type metadata accessor for LocalStateStore;
      for (i = &qword_1EEEDE128; ; i = (unint64_t *)&qword_1EEEDE120)
      {
        sub_1B0FB3C08(i, v38);
        sub_1B1034ACC();
        __break(1u);
LABEL_14:
        sub_1B0F5A84C(v10, v9, v11, v44);
LABEL_11:
        type metadata accessor for RemoteStateStore(0);
        v38 = type metadata accessor for RemoteStateStore;
      }
    }
    type metadata accessor for LocalStateStore(0);
    sub_1B0FB3C08(&qword_1EEEDE128, type metadata accessor for LocalStateStore);
    swift_retain();
    v19 = sub_1B1034694();
    sub_1B0F5A974((uint64_t)&v54, (uint64_t)v51, &qword_1EEEDF030);
    *((_QWORD *)&v52 + 1) = v19;
    v53 = v18;
    sub_1B0F5A3AC((uint64_t)&v54, &qword_1EEEDF030);
    v60 = v51[6];
    v61 = v51[7];
    v62 = v52;
    v63 = v53;
    v56 = v51[2];
    v57 = v51[3];
    v58 = v51[4];
    v59 = v51[5];
    v54 = v51[0];
    v55 = v51[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFC08);
    sub_1B0FB3C48();
    sub_1B0F8B804();
    v20 = v43;
    sub_1B10348BC();
    swift_bridgeObjectRelease();
    v21 = v44;
    v22 = v46;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v47, v20, v46);
    swift_storeEnumTagMultiPayload();
    v23 = MEMORY[0x1E0CD9468];
    sub_1B0F5A7E4(&qword_1EEEDFBF8, &qword_1EEEDFBE8, MEMORY[0x1E0CD9468]);
    sub_1B0F5A7E4(&qword_1EEEDFC00, &qword_1EEEDFBD0, v23);
    v24 = (uint64_t)v49;
    sub_1B1034EC8();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBF0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
    sub_1B0FB3BC0(v24, v50);
    return sub_1B0F6427C((uint64_t)v66);
  }
  else
  {
    sub_1B0F5A3AC((uint64_t)&v54, &qword_1EEEDEBD8);
    v27 = *(unsigned __int8 *)(v2 + 200);
    if (v27 == 255)
    {
      swift_bridgeObjectRelease();
      v29 = v50;
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBF0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    }
    else
    {
      v10 = *(_QWORD *)(v2 + 176);
      v9 = *(_QWORD *)(v2 + 184);
      v11 = *(_QWORD *)(v2 + 192);
      LODWORD(v44) = v27 & 1;
      if (!*(_QWORD *)(v2 + 208))
        goto LABEL_14;
      sub_1B0F75C64(v10, v9, v11, v27);
      v28 = swift_retain();
      sub_1B0FD6EFC(v28, v10, v9, v11, v44, (uint64_t *)&v54);
      swift_release();
      sub_1B0F75CB4(v10, v9, v11, v27);
      v31 = v54;
      *(_QWORD *)&v54 = v14;
      *((_QWORD *)&v54 + 1) = v16;
      *(_QWORD *)&v51[0] = v31;
      sub_1B0F8B804();
      sub_1B0F9D608();
      sub_1B0F97080();
      sub_1B0F8AF44();
      swift_retain();
      v32 = v41;
      sub_1B10348C8();
      v33 = v42;
      v34 = v48;
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v47, v32, v48);
      swift_storeEnumTagMultiPayload();
      v35 = MEMORY[0x1E0CD9468];
      sub_1B0F5A7E4(&qword_1EEEDFBF8, &qword_1EEEDFBE8, MEMORY[0x1E0CD9468]);
      sub_1B0F5A7E4(&qword_1EEEDFC00, &qword_1EEEDFBD0, v35);
      v36 = (uint64_t)v49;
      sub_1B1034EC8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBF0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
      return sub_1B0FB3BC0(v36, v50);
    }
  }
}

uint64_t sub_1B0FB3174(char a1)
{
  return qword_1B1040048[a1];
}

uint64_t sub_1B0FB3194(char *a1, char *a2)
{
  return sub_1B100D484(*a1, *a2);
}

uint64_t sub_1B0FB31A0()
{
  return sub_1B1010544();
}

uint64_t sub_1B0FB31A8()
{
  return sub_1B1012628();
}

uint64_t sub_1B0FB31B0()
{
  return sub_1B1014C24();
}

uint64_t sub_1B0FB31B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB4660();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB31E4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB3174(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB320C()
{
  char *v0;

  return sub_1B0FB3174(*v0);
}

uint64_t sub_1B0FB3214@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB4660();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB3238()
{
  sub_1B0FB3CCC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB3260()
{
  sub_1B0FB3CCC();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB3288@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  _BYTE v47[112];
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v34 = a2;
  v3 = sub_1B103461C();
  v4 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v36 = v4;
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFC18);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v47;
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  v49 = MEMORY[0x1E0DEE9D8];
  v51 = 0;
  v50 = 0uLL;
  v52 = -1;
  type metadata accessor for RemoteStateStore(0);
  sub_1B0FB3C08((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore);
  v53 = sub_1B1034AD8();
  v54 = v11;
  type metadata accessor for LocalStateStore(0);
  sub_1B0FB3C08(&qword_1EEEDE128, type metadata accessor for LocalStateStore);
  v55 = sub_1B1034AD8();
  v56 = v12;
  v13 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B0FB3CCC();
  v14 = v38;
  sub_1B1036278();
  if (v14)
  {
    v19 = (uint64_t)v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    sub_1B0F5A3AC(v19, &qword_1EEEDEBD8);
    swift_bridgeObjectRelease();
    sub_1B0F75CB4(v50, *((uint64_t *)&v50 + 1), v51, v52);
    swift_release();
    return swift_release();
  }
  v15 = v36;
  *(_QWORD *)&v38 = v8;
  LOBYTE(v40) = 0;
  v16 = sub_1B103608C();
  v18 = v7;
  v21 = v17;
  if (v17)
  {
    v22 = v16;
  }
  else
  {
    sub_1B1034610();
    v22 = sub_1B1034604();
    v21 = v23;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v35);
  }
  v43[0] = v22;
  v43[1] = v21;
  v57 = 1;
  sub_1B0F56A98();
  v24 = v10;
  sub_1B10360BC();
  v44 = v40;
  v45 = v41;
  v46 = v42;
  LOBYTE(v40) = 2;
  if ((sub_1B10360D4() & 1) != 0)
  {
    v57 = 2;
    sub_1B0F64238();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v7);
    sub_1B0FB3D10((uint64_t)&v40, (uint64_t)v37);
  }
  else
  {
    LOBYTE(v40) = 3;
    if ((sub_1B10360D4() & 1) == 0)
    {
      if (qword_1EEEDE0B0 != -1)
        swift_once();
      v25 = sub_1B103467C();
      __swift_project_value_buffer(v25, (uint64_t)qword_1EEF0BA00);
      v26 = sub_1B1034664();
      v27 = sub_1B1035E1C();
      v28 = os_log_type_enabled(v26, v27);
      v29 = v34;
      v30 = v38;
      if (v28)
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B0F50000, v26, v27, "NavigationLinkView did not recieve a destination or value", v31, 2u);
        MEMORY[0x1B5E15248](v31, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v18);
      goto LABEL_17;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA40);
    v57 = 3;
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDEB48, &qword_1EEEDEA40, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v7);
    v38 = v40;
    v32 = v41;
    v33 = v42;
    sub_1B0F75CB4(v50, *((uint64_t *)&v50 + 1), v51, v52);
    v50 = v38;
    v51 = v32;
    v52 = v33;
  }
  v29 = v34;
LABEL_17:
  sub_1B0F6D1A8((uint64_t)v43, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return sub_1B0F6D1E4((uint64_t)v43);
}

uint64_t sub_1B0FB37F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FB3288(a1, a2);
}

uint64_t sub_1B0FB3808()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FB3818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB3824);
}

unint64_t sub_1B0FB3824()
{
  unint64_t result;

  result = qword_1EEEDFB70;
  if (!qword_1EEEDFB70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FC04, &type metadata for NavigationLinkView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB70);
  }
  return result;
}

uint64_t sub_1B0FB3868(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB3884, (uint64_t (*)(void))sub_1B0FB38C8, (uint64_t (*)(void))sub_1B0FB390C);
}

unint64_t sub_1B0FB3884()
{
  unint64_t result;

  result = qword_1EEEDFB78;
  if (!qword_1EEEDFB78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FB8C, &type metadata for NavigationLinkView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB78);
  }
  return result;
}

unint64_t sub_1B0FB38C8()
{
  unint64_t result;

  result = qword_1EEEDFB80;
  if (!qword_1EEEDFB80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FB54, &type metadata for NavigationLinkView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB80);
  }
  return result;
}

unint64_t sub_1B0FB390C()
{
  unint64_t result;

  result = qword_1EEEDFB88;
  if (!qword_1EEEDFB88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FBB4, &type metadata for NavigationLinkView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB88);
  }
  return result;
}

uint64_t sub_1B0FB3950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB395C);
}

unint64_t sub_1B0FB395C()
{
  unint64_t result;

  result = qword_1EEEDFB90;
  if (!qword_1EEEDFB90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FC20, &type metadata for NavigatingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB90);
  }
  return result;
}

uint64_t sub_1B0FB39A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB39BC, (uint64_t (*)(void))sub_1B0FB3A00, (uint64_t (*)(void))sub_1B0FB3A44);
}

unint64_t sub_1B0FB39BC()
{
  unint64_t result;

  result = qword_1EEEDFB98;
  if (!qword_1EEEDFB98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FADC, &type metadata for NavigatingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFB98);
  }
  return result;
}

unint64_t sub_1B0FB3A00()
{
  unint64_t result;

  result = qword_1EEEDFBA0;
  if (!qword_1EEEDFBA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FAA4, &type metadata for NavigatingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBA0);
  }
  return result;
}

unint64_t sub_1B0FB3A44()
{
  unint64_t result;

  result = qword_1EEEDFBA8;
  if (!qword_1EEEDFBA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FB04, &type metadata for NavigatingView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBA8);
  }
  return result;
}

uint64_t sub_1B0FB3A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FB3A94);
}

unint64_t sub_1B0FB3A94()
{
  unint64_t result;

  result = qword_1EEEDFBB0;
  if (!qword_1EEEDFBB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FC3C, &type metadata for NavigationStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBB0);
  }
  return result;
}

uint64_t sub_1B0FB3AD8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FB3AF4, (uint64_t (*)(void))sub_1B0FB3B38, (uint64_t (*)(void))sub_1B0FB3B7C);
}

unint64_t sub_1B0FB3AF4()
{
  unint64_t result;

  result = qword_1EEEDFBB8;
  if (!qword_1EEEDFBB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FA2C, &type metadata for NavigationStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBB8);
  }
  return result;
}

unint64_t sub_1B0FB3B38()
{
  unint64_t result;

  result = qword_1EEEDFBC0;
  if (!qword_1EEEDFBC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103F9F4, &type metadata for NavigationStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBC0);
  }
  return result;
}

unint64_t sub_1B0FB3B7C()
{
  unint64_t result;

  result = qword_1EEEDFBC8;
  if (!qword_1EEEDFBC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FA54, &type metadata for NavigationStackView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFBC8);
  }
  return result;
}

uint64_t sub_1B0FB3BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0FB3C08(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for StateDict<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0FB3C48()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDFC10;
  if (!qword_1EEEDFC10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFC08);
    v2[0] = sub_1B0F8AFEC();
    v2[1] = sub_1B0F5A7E4(&qword_1EEEDE288, &qword_1EEEDE290, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC10);
  }
  return result;
}

unint64_t sub_1B0FB3CCC()
{
  unint64_t result;

  result = qword_1EEEDFC20;
  if (!qword_1EEEDFC20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FFF0, &type metadata for NavigationLinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC20);
  }
  return result;
}

uint64_t sub_1B0FB3D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B0FB3D58()
{
  unint64_t result;

  result = qword_1EEEDFC30;
  if (!qword_1EEEDFC30)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FFA0, &type metadata for NavigatingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC30);
  }
  return result;
}

uint64_t sub_1B0FB3D9C()
{
  return sub_1B0FB2394();
}

uint64_t sub_1B0FB3DA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a2;
  v3 = sub_1B103461C();
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFC58);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE410);
  sub_1B10357EC();
  v11 = v30;
  v10 = v31;
  v12 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1B0FB40B8();
  swift_bridgeObjectRetain();
  swift_retain();
  v13 = v29;
  sub_1B1036278();
  if (v13)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v7;
    v14 = v27;
    LOBYTE(v30) = 0;
    v15 = sub_1B103608C();
    v18 = v16;
    v24 = v9;
    if (v16)
    {
      v23 = v15;
    }
    else
    {
      sub_1B1034610();
      v23 = sub_1B1034604();
      v18 = v19;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v26);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    LOBYTE(v32) = 1;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v20 = v24;
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v6);
    v21 = v30;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v14 = v23;
    v14[1] = v18;
    v14[2] = v21;
    v14[3] = MEMORY[0x1E0DEE9D8];
    v14[4] = v11;
    v14[5] = v10;
  }
  return result;
}

unint64_t sub_1B0FB40B8()
{
  unint64_t result;

  result = qword_1EEEDFC60;
  if (!qword_1EEEDFC60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FF50, &type metadata for NavigationStackView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC60);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackView.CodingKeys()
{
  return &type metadata for NavigationStackView.CodingKeys;
}

uint64_t _s6LiftUI19NavigationStackViewV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB415C + 4 * byte_1B103F995[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FB4190 + 4 * byte_1B103F990[v4]))();
}

uint64_t sub_1B0FB4190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB4198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB41A0);
  return result;
}

uint64_t sub_1B0FB41AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB41B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FB41B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB41C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigatingView.CodingKeys()
{
  return &type metadata for NavigatingView.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NavigationLinkView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB4228 + 4 * byte_1B103F99F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FB425C + 4 * byte_1B103F99A[v4]))();
}

uint64_t sub_1B0FB425C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB4264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB426CLL);
  return result;
}

uint64_t sub_1B0FB4278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB4280);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FB4284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB428C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationLinkView.CodingKeys()
{
  return &type metadata for NavigationLinkView.CodingKeys;
}

uint64_t sub_1B0FB42A8()
{
  return sub_1B0F78F60(&qword_1EEEDFC68, &qword_1EEEDFBE0, (uint64_t (*)(void))sub_1B0FB42DC, MEMORY[0x1E0CE0798]);
}

unint64_t sub_1B0FB42DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEDFC70;
  if (!qword_1EEEDFC70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFBF0);
    v2 = MEMORY[0x1E0CD9468];
    v3[0] = sub_1B0F5A7E4(&qword_1EEEDFBF8, &qword_1EEEDFBE8, MEMORY[0x1E0CD9468]);
    v3[1] = sub_1B0F5A7E4(&qword_1EEEDFC00, &qword_1EEEDFBD0, v2);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC70);
  }
  return result;
}

uint64_t sub_1B0FB4380()
{
  return sub_1B0F5A7E4(&qword_1EEEDFC78, &qword_1EEEDFC80, MEMORY[0x1E0CD94D0]);
}

uint64_t sub_1B0FB43AC()
{
  return sub_1B0F5A7E4(&qword_1EEEDFC88, &qword_1EEEDFC90, MEMORY[0x1E0CD9C70]);
}

unint64_t sub_1B0FB43DC()
{
  unint64_t result;

  result = qword_1EEEDFC98;
  if (!qword_1EEEDFC98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FD48, &type metadata for NavigationLinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFC98);
  }
  return result;
}

unint64_t sub_1B0FB4424()
{
  unint64_t result;

  result = qword_1EEEDFCA0;
  if (!qword_1EEEDFCA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FE38, &type metadata for NavigatingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCA0);
  }
  return result;
}

unint64_t sub_1B0FB446C()
{
  unint64_t result;

  result = qword_1EEEDFCA8;
  if (!qword_1EEEDFCA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FF28, &type metadata for NavigationStackView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCA8);
  }
  return result;
}

unint64_t sub_1B0FB44B4()
{
  unint64_t result;

  result = qword_1EEEDFCB0;
  if (!qword_1EEEDFCB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FE60, &type metadata for NavigationStackView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCB0);
  }
  return result;
}

unint64_t sub_1B0FB44FC()
{
  unint64_t result;

  result = qword_1EEEDFCB8;
  if (!qword_1EEEDFCB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FE88, &type metadata for NavigationStackView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCB8);
  }
  return result;
}

unint64_t sub_1B0FB4544()
{
  unint64_t result;

  result = qword_1EEEDFCC0;
  if (!qword_1EEEDFCC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FD70, &type metadata for NavigatingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCC0);
  }
  return result;
}

unint64_t sub_1B0FB458C()
{
  unint64_t result;

  result = qword_1EEEDFCC8;
  if (!qword_1EEEDFCC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FD98, &type metadata for NavigatingView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCC8);
  }
  return result;
}

unint64_t sub_1B0FB45D4()
{
  unint64_t result;

  result = qword_1EEEDFCD0;
  if (!qword_1EEEDFCD0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FC80, &type metadata for NavigationLinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCD0);
  }
  return result;
}

unint64_t sub_1B0FB461C()
{
  unint64_t result;

  result = qword_1EEEDFCD8;
  if (!qword_1EEEDFCD8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B103FCA8, &type metadata for NavigationLinkView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCD8);
  }
  return result;
}

uint64_t sub_1B0FB4660()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t destroy for ColorShapeStyle(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ColorShapeStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ColorShapeStyle(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ColorShapeStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorShapeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorShapeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorShapeStyle()
{
  return &type metadata for ColorShapeStyle;
}

uint64_t sub_1B0FB4838@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FB4894@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FB48F4()
{
  sub_1B0FB4BF8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB491C()
{
  sub_1B0FB4BF8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB4944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFCE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0DEE9D8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FB4BF8();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 1;
    sub_1B0F81F08();
    sub_1B10360BC();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v13[0] = *(_OWORD *)&v10[8];
    v13[1] = v11;
    v14 = v12;
    sub_1B0FB4C3C((uint64_t)v13, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_1B0FB4C8C((uint64_t)v13);
  }
}

uint64_t sub_1B0FB4AB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  sub_1B0F81F4C(v2, (uint64_t)v10);
  v5 = v11;
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v5, v6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  v9 = MEMORY[0x1E0CDF598];
  a2[3] = MEMORY[0x1E0CDF5D0];
  a2[4] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_1B0FB4B4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0FB4B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t sub_1B0FB4B7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FB4944(a1, a2);
}

unint64_t sub_1B0FB4B90(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FB4BB4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FB4BB4()
{
  unint64_t result;

  result = qword_1EEEDFCE0;
  if (!qword_1EEEDFCE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10400AC, &type metadata for ColorShapeStyle);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCE0);
  }
  return result;
}

unint64_t sub_1B0FB4BF8()
{
  unint64_t result;

  result = qword_1EEEDFCF0;
  if (!qword_1EEEDFCF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10401EC, &type metadata for ColorShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCF0);
  }
  return result;
}

uint64_t sub_1B0FB4C3C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1B0FB4C8C(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ColorShapeStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB4D04 + 4 * byte_1B104008D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FB4D38 + 4 * byte_1B1040088[v4]))();
}

uint64_t sub_1B0FB4D38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB4D40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB4D48);
  return result;
}

uint64_t sub_1B0FB4D54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB4D5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FB4D60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB4D68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ColorShapeStyle.CodingKeys()
{
  return &type metadata for ColorShapeStyle.CodingKeys;
}

unint64_t sub_1B0FB4D88()
{
  unint64_t result;

  result = qword_1EEEDFCF8;
  if (!qword_1EEEDFCF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10401C4, &type metadata for ColorShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFCF8);
  }
  return result;
}

unint64_t sub_1B0FB4DD0()
{
  unint64_t result;

  result = qword_1EEEDFD00;
  if (!qword_1EEEDFD00)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10400FC, &type metadata for ColorShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD00);
  }
  return result;
}

unint64_t sub_1B0FB4E18()
{
  unint64_t result;

  result = qword_1EEEDFD08;
  if (!qword_1EEEDFD08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040124, &type metadata for ColorShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD08);
  }
  return result;
}

_QWORD *sub_1B0FB4E5C(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = sub_1B1035798();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1B0FB4EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1B1035798();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_1B0FB4F1C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1B1035798();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *sub_1B0FB4F78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1B1035798();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1B0FB4FEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1B1035798();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *sub_1B0FB5048(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1B1035798();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_1B0FB50A4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0FB50B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_1B1035798();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1B0FB50F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0FB50FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_1B1035798();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for ResizableImageModifier()
{
  uint64_t result;

  result = qword_1EEEDFD10;
  if (!qword_1EEEDFD10)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B0FB517C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B1035798();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B0FB51F0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x68637465727473;
  else
    return 1701603700;
}

uint64_t sub_1B0FB5220(char *a1, char *a2)
{
  return sub_1B100DAF4(*a1, *a2);
}

uint64_t sub_1B0FB522C()
{
  return sub_1B101061C();
}

uint64_t sub_1B0FB5234()
{
  return sub_1B101295C();
}

uint64_t sub_1B0FB523C()
{
  return sub_1B1014730();
}

uint64_t sub_1B0FB5244@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0FB5250@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB51F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB5278()
{
  sub_1B0FB5E24();
  return sub_1B1035CB4();
}

uint64_t sub_1B0FB52D4()
{
  sub_1B0FB5E24();
  return sub_1B1035CA8();
}

uint64_t sub_1B0FB5320(char a1)
{
  return qword_1B1040630[a1];
}

uint64_t sub_1B0FB5340(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7465736E49706163;
  else
    return 0x676E697A69736572;
}

uint64_t sub_1B0FB5384(char *a1, char *a2)
{
  return sub_1B100E594(*a1, *a2);
}

uint64_t sub_1B0FB5390()
{
  return sub_1B1010694();
}

uint64_t sub_1B0FB5398()
{
  return sub_1B1012EAC();
}

uint64_t sub_1B0FB53A0()
{
  return sub_1B1014084();
}

uint64_t sub_1B0FB53A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB5E68();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB53D4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB5320(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB53FC()
{
  sub_1B0FB5DE0();
  return sub_1B1035CB4();
}

uint64_t sub_1B0FB5458()
{
  sub_1B0FB5DE0();
  return sub_1B1035CA8();
}

uint64_t sub_1B0FB54A4(char *a1, char *a2)
{
  return sub_1B100CAD4(*a1, *a2);
}

uint64_t sub_1B0FB54B0()
{
  return sub_1B10106FC();
}

uint64_t sub_1B0FB54B8()
{
  return sub_1B1012174();
}

uint64_t sub_1B0FB54C0()
{
  return sub_1B1015240();
}

uint64_t sub_1B0FB54C8@<X0>(char *a1@<X8>)
{
  return sub_1B0F7BF1C(a1);
}

uint64_t sub_1B0FB54D4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB5340(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB54FC()
{
  char *v0;

  return sub_1B0FB5340(*v0);
}

uint64_t sub_1B0FB5504@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FB5564()
{
  sub_1B0FB597C();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB558C()
{
  sub_1B0FB597C();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB55B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  unsigned int *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _OWORD *v37;
  char v38;
  char v39;
  char v40;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFD28);
  MEMORY[0x1E0C80A78](v3);
  v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B1035798();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFD30);
  v8 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ResizableImageModifier();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FB597C();
  v14 = v37;
  sub_1B1036278();
  if (v14)
  {
    v21 = (uint64_t)a1;
  }
  else
  {
    v15 = v8;
    v37 = v13;
    v30 = v7;
    v31 = v11;
    v17 = v33;
    v16 = v34;
    v18 = (uint64_t)v35;
    v40 = 1;
    sub_1B0FB59C0();
    sub_1B10360A4();
    v19 = v37;
    *v37 = 0u;
    v19[1] = 0u;
    v38 = 0;
    sub_1B0FB5A04();
    v20 = v36;
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v20);
    if (v39 == 2)
    {
      v23 = v16;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1, 1, v16);
      v24 = v30;
      (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v30, *MEMORY[0x1E0CDF6F8], v16);
      sub_1B0FB5A48(v18);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    }
    else
    {
      if ((v39 & 1) != 0)
        v26 = (unsigned int *)MEMORY[0x1E0CDF6F8];
      else
        v26 = (unsigned int *)MEMORY[0x1E0CDF6E0];
      v23 = v16;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v18, *v26, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
      v24 = v30;
      v25(v30, v18, v16);
    }
    v27 = v32;
    v28 = a1;
    v29 = (uint64_t)v37;
    v25((char *)v37 + *(int *)(v31 + 20), (uint64_t)v24, v23);
    sub_1B0FB5A88(v29, v27);
    v21 = (uint64_t)v28;
  }
  return __swift_destroy_boxed_opaque_existential_1(v21);
}

uint64_t sub_1B0FB58E0()
{
  return sub_1B10357B0();
}

uint64_t sub_1B0FB58FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FB55B4(a1, a2);
}

unint64_t sub_1B0FB5910(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FB5934();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FB5934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDFD20;
  if (!qword_1EEEDFD20)
  {
    v1 = type metadata accessor for ResizableImageModifier();
    result = MEMORY[0x1B5E15188](&unk_1B1040290, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD20);
  }
  return result;
}

unint64_t sub_1B0FB597C()
{
  unint64_t result;

  result = qword_1EEEDFD38;
  if (!qword_1EEEDFD38)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10405DC, &type metadata for ResizableImageModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD38);
  }
  return result;
}

unint64_t sub_1B0FB59C0()
{
  unint64_t result;

  result = qword_1EEEDFD40;
  if (!qword_1EEEDFD40)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10405B4, &type metadata for EdgeInsetsName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD40);
  }
  return result;
}

unint64_t sub_1B0FB5A04()
{
  unint64_t result;

  result = qword_1EEEDFD48;
  if (!qword_1EEEDFD48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104058C, &type metadata for ResizingModeName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD48);
  }
  return result;
}

uint64_t sub_1B0FB5A48(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFD28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B0FB5A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResizableImageModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ResizingModeName()
{
  return &type metadata for ResizingModeName;
}

uint64_t storeEnumTagSinglePayload for EdgeInsetsName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB5B2C + 4 * byte_1B1040245[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FB5B60 + 4 * byte_1B1040240[v4]))();
}

uint64_t sub_1B0FB5B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB5B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB5B70);
  return result;
}

uint64_t sub_1B0FB5B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB5B84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FB5B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB5B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeInsetsName()
{
  return &type metadata for EdgeInsetsName;
}

uint64_t _s6LiftUI16ResizingModeNameOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB5BF8 + 4 * byte_1B104024F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FB5C2C + 4 * byte_1B104024A[v4]))();
}

uint64_t sub_1B0FB5C2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB5C34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB5C3CLL);
  return result;
}

uint64_t sub_1B0FB5C48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB5C50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FB5C54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB5C5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResizableImageModifier.CodingKeys()
{
  return &type metadata for ResizableImageModifier.CodingKeys;
}

unint64_t sub_1B0FB5C7C()
{
  unint64_t result;

  result = qword_1EEEDFD50;
  if (!qword_1EEEDFD50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10403D4, &type metadata for ResizableImageModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD50);
  }
  return result;
}

unint64_t sub_1B0FB5CC4()
{
  unint64_t result;

  result = qword_1EEEDFD58;
  if (!qword_1EEEDFD58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104049C, &type metadata for EdgeInsetsName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD58);
  }
  return result;
}

unint64_t sub_1B0FB5D0C()
{
  unint64_t result;

  result = qword_1EEEDFD60;
  if (!qword_1EEEDFD60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040564, &type metadata for ResizingModeName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD60);
  }
  return result;
}

unint64_t sub_1B0FB5D54()
{
  unint64_t result;

  result = qword_1EEEDFD68;
  if (!qword_1EEEDFD68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104030C, &type metadata for ResizableImageModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD68);
  }
  return result;
}

unint64_t sub_1B0FB5D9C()
{
  unint64_t result;

  result = qword_1EEEDFD70;
  if (!qword_1EEEDFD70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040334, &type metadata for ResizableImageModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD70);
  }
  return result;
}

unint64_t sub_1B0FB5DE0()
{
  unint64_t result;

  result = qword_1EEEDFD78;
  if (!qword_1EEEDFD78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040424, &type metadata for EdgeInsetsName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD78);
  }
  return result;
}

unint64_t sub_1B0FB5E24()
{
  unint64_t result;

  result = qword_1EEEDFD80;
  if (!qword_1EEEDFD80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10404EC, &type metadata for ResizingModeName);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD80);
  }
  return result;
}

uint64_t sub_1B0FB5E68()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t destroy for PickerView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v2);
  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  sub_1B0F74EA4(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_BYTE *)(a1 + 208));
  return swift_release();
}

uint64_t initializeWithCopy for PickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 40);
    sub_1B0F56B9C(v12, v13, v14, v5);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v14;
    *(_BYTE *)(a1 + 48) = v5;
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
      goto LABEL_3;
LABEL_5:
    v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v16 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v16;
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    goto LABEL_6;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 64);
  if (!v6)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 96, a2 + 96);
  *(_BYTE *)(a1 + 136) = v8;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v11;
  swift_retain();
  swift_retain();
LABEL_6:
  v18 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v19 = *(_QWORD *)(a2 + 192);
  v20 = *(_QWORD *)(a2 + 200);
  v21 = *(_BYTE *)(a2 + 208);
  swift_bridgeObjectRetain();
  sub_1B0F5A84C(v18, v19, v20, v21);
  *(_QWORD *)(a1 + 184) = v18;
  *(_QWORD *)(a1 + 192) = v19;
  *(_QWORD *)(a1 + 200) = v20;
  *(_BYTE *)(a1 + 208) = v21;
  v22 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v22;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PickerView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      sub_1B0F56B9C(v12, v13, v14, *(_BYTE *)(a2 + 48));
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      v18 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = v6;
      sub_1B0F56ADC(v15, v16, v17, v18);
    }
    else
    {
      sub_1B0F5EA14(a1 + 24);
      v8 = *(_OWORD *)(a2 + 33);
      *v4 = *v5;
      *(_OWORD *)(a1 + 33) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    sub_1B0F56B9C(v9, v10, v11, *(_BYTE *)(a2 + 48));
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = v6;
  }
  else
  {
    v7 = *v5;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *v4 = v7;
  }
  v19 = (_OWORD *)(a1 + 56);
  v20 = (__int128 *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v21)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        sub_1B0F62D10(a1 + 96);
        v22 = *(_BYTE *)(a2 + 136);
        v23 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 120) = v23;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 96, a2 + 96);
        *(_BYTE *)(a1 + 136) = v22;
      }
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    }
    else
    {
      sub_1B0F6427C(a1 + 56);
      v26 = *(_OWORD *)(a2 + 104);
      v28 = *v20;
      v27 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v26;
      *v19 = v28;
      *(_OWORD *)(a1 + 72) = v27;
      v30 = *(_OWORD *)(a2 + 136);
      v29 = *(_OWORD *)(a2 + 152);
      v31 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v30;
      *(_OWORD *)(a1 + 152) = v29;
      *(_OWORD *)(a1 + 120) = v31;
    }
  }
  else if (v21)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v24 = *(_BYTE *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v25;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 96, a2 + 96);
    *(_BYTE *)(a1 + 136) = v24;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = *v20;
    v33 = *(_OWORD *)(a2 + 72);
    v34 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v34;
    *v19 = v32;
    *(_OWORD *)(a1 + 72) = v33;
    v35 = *(_OWORD *)(a2 + 120);
    v36 = *(_OWORD *)(a2 + 136);
    v37 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v36;
    *(_OWORD *)(a1 + 152) = v37;
    *(_OWORD *)(a1 + 120) = v35;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(a2 + 184);
  v39 = *(_QWORD *)(a2 + 192);
  v40 = *(_QWORD *)(a2 + 200);
  v41 = *(_BYTE *)(a2 + 208);
  sub_1B0F5A84C(v38, v39, v40, v41);
  v42 = *(_QWORD *)(a1 + 184);
  v43 = *(_QWORD *)(a1 + 192);
  v44 = *(_QWORD *)(a1 + 200);
  v45 = *(_BYTE *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v38;
  *(_QWORD *)(a1 + 192) = v39;
  *(_QWORD *)(a1 + 200) = v40;
  *(_BYTE *)(a1 + 208) = v41;
  sub_1B0F74EA4(v42, v43, v44, v45);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for PickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 48);
  if (v5 > 0xFD)
    goto LABEL_4;
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (v6 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v6;
  sub_1B0F56ADC(v8, v9, v10, v5);
LABEL_6:
  if (!*(_QWORD *)(a1 + 64))
  {
LABEL_12:
    v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v16 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v16;
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (!v11)
  {
    sub_1B0F6427C(a1 + 56);
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 96);
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  swift_release();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
LABEL_13:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 200);
  v19 = *(_BYTE *)(a2 + 208);
  v20 = *(_QWORD *)(a1 + 184);
  v21 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 200);
  v23 = *(_BYTE *)(a1 + 208);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = v18;
  *(_BYTE *)(a1 + 208) = v19;
  sub_1B0F74EA4(v20, v21, v22, v23);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_release();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PickerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PickerView()
{
  return &type metadata for PickerView;
}

uint64_t sub_1B0FB6750@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDA8);
  MEMORY[0x1E0C80A78](v51);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDB0);
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDB8);
  MEMORY[0x1E0C80A78](v45);
  v46 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDC0);
  v43 = *(uint64_t **)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDC8);
  MEMORY[0x1E0C80A78](v50);
  v49 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 184);
  v12 = *(_QWORD *)(v1 + 192);
  v13 = *(_QWORD *)(v1 + 200);
  v14 = *(_BYTE *)(v1 + 208);
  v15 = *(_QWORD *)(v2 + 216);
  if (v15)
  {
    sub_1B0F5A84C(v11, v12, v13, v14);
    v16 = swift_retain();
    sub_1B102A5D8(v16, v11, v12, v13, v14, &v52);
    swift_release();
    v40 = v5;
    v41 = a1;
    v17 = sub_1B0F74EA4(v11, v12, v13, v14);
    v19 = v52;
    v18 = v53;
    v20 = v54;
    v21 = *(unsigned __int8 *)(v2 + 48);
    if (v21 > 0xFD)
    {
      v43 = &v38;
      MEMORY[0x1E0C80A78](v17);
      v56 = v19;
      v57 = v18;
      v58 = v20;
      sub_1B0F5A974(v2 + 56, (uint64_t)&v52, &qword_1EEEDEBD8);
      swift_retain();
      swift_retain();
      swift_retain();
      v42 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBD8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
      sub_1B0F78F60((unint64_t *)&qword_1EEEDEBE8, &qword_1EEEDEBD8, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CE0798]);
      sub_1B0F8AF44();
      sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
      sub_1B103581C();
      v25 = v44;
      v26 = v48;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v46, v7, v48);
      swift_storeEnumTagMultiPayload();
      v27 = MEMORY[0x1E0CDFBB8];
      sub_1B0F5A7E4(&qword_1EEEDFDD8, &qword_1EEEDFDC0, MEMORY[0x1E0CDFBB8]);
      sub_1B0F5A7E4(&qword_1EEEDFDE0, &qword_1EEEDFDB0, v27);
      v37 = (uint64_t)v49;
      sub_1B1034EC8();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    }
    else
    {
      v38 = v53;
      v39 = v52;
      v22 = *(_QWORD *)(v2 + 32);
      v24 = *(_QWORD *)(v2 + 40);
      v52 = *(_QWORD *)(v2 + 24);
      v23 = v52;
      v53 = v22;
      v54 = v24;
      v55 = v21;
      swift_retain();
      sub_1B0F56C04(v23, v22, v24, v21);
      v29 = StringResolvable.resolved(with:)(v15);
      v31 = v30;
      sub_1B0F56B88(v23, v22, v24, v21);
      v32 = swift_release();
      v56 = v29;
      v57 = v31;
      v52 = v39;
      v53 = v38;
      v54 = v20;
      MEMORY[0x1E0C80A78](v32);
      swift_retain();
      swift_retain();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBE0);
      sub_1B0F8AF44();
      sub_1B0F78F60(&qword_1EEEDEBF0, &qword_1EEEDEBE0, (uint64_t (*)(void))sub_1B0F64174, MEMORY[0x1E0CDFEE8]);
      sub_1B0F8B804();
      v33 = v42;
      sub_1B1035828();
      v34 = v43;
      v35 = v47;
      ((void (*)(char *, char *, uint64_t))v43[2])(v46, v33, v47);
      swift_storeEnumTagMultiPayload();
      v36 = MEMORY[0x1E0CDFBB8];
      sub_1B0F5A7E4(&qword_1EEEDFDD8, &qword_1EEEDFDC0, MEMORY[0x1E0CDFBB8]);
      sub_1B0F5A7E4(&qword_1EEEDFDE0, &qword_1EEEDFDB0, v36);
      v37 = (uint64_t)v49;
      sub_1B1034EC8();
      ((void (*)(char *, uint64_t))v34[1])(v33, v35);
    }
    sub_1B0F5A974(v37, (uint64_t)v40, &qword_1EEEDFDC8);
    swift_storeEnumTagMultiPayload();
    sub_1B0FB7784();
    sub_1B1034EC8();
    swift_release();
    swift_release();
    swift_release();
    return sub_1B0F5A3AC(v37, &qword_1EEEDFDC8);
  }
  else
  {
    sub_1B0F5A84C(v11, v12, v13, v14);
    type metadata accessor for RemoteStateStore(0);
    sub_1B0FB773C();
    result = sub_1B1034ACC();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0FB6F64()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
  sub_1B0F5A7E4(&qword_1EEEDEC00, &qword_1EEEDEBF8, MEMORY[0x1E0DEAF48]);
  sub_1B0F64174();
  return sub_1B10358AC();
}

uint64_t sub_1B0FB7024(char a1)
{
  return qword_1B10408C0[a1];
}

uint64_t sub_1B0FB7044(char *a1, char *a2)
{
  return sub_1B100F218(*a1, *a2);
}

uint64_t sub_1B0FB7050()
{
  return sub_1B1010788();
}

uint64_t sub_1B0FB7058()
{
  return sub_1B10134D0();
}

uint64_t sub_1B0FB7060()
{
  return sub_1B10137A0();
}

uint64_t sub_1B0FB7068@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB7AC0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB7094@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB7024(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB70BC()
{
  char *v0;

  return sub_1B0FB7024(*v0);
}

uint64_t sub_1B0FB70C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB7AC0();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB70E8()
{
  sub_1B0FB7868();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB7110()
{
  sub_1B0FB7868();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB7138@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;
  _QWORD v28[3];
  __int128 v29;
  uint64_t v30;
  char v31;
  _QWORD v32[16];
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v20 = a2;
  v3 = sub_1B103461C();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFDE8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[2] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0FB773C();
  v36 = sub_1B1034AD8();
  v37 = v10;
  v11 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1B0FB7868();
  v12 = v38;
  sub_1B1036278();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v38 = v7;
    LOBYTE(v24) = 0;
    v13 = sub_1B103608C();
    v16 = v14;
    if (v14)
    {
      v17 = v13;
    }
    else
    {
      sub_1B1034610();
      v17 = sub_1B1034604();
      v16 = v18;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v22);
    }
    v28[0] = v17;
    v28[1] = v16;
    v27 = 1;
    sub_1B0F56A98();
    sub_1B10360A4();
    v29 = v24;
    v30 = v25;
    v31 = v26;
    v27 = 2;
    sub_1B0F64238();
    sub_1B10360A4();
    sub_1B0F79004((uint64_t)&v24, (uint64_t)v32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEBF8);
    v27 = 3;
    sub_1B0F78F60(&qword_1EEEDEC18, &qword_1EEEDEBF8, (uint64_t (*)(void))sub_1B0F64238, MEMORY[0x1E0DEAF40]);
    sub_1B10360A4();
    v19 = v24;
    if (!(_QWORD)v24)
      v19 = MEMORY[0x1E0DEE9D8];
    v32[15] = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDEA40);
    v27 = 4;
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDEB48, &qword_1EEEDEA40, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v6);
    v33 = v24;
    v34 = v25;
    v35 = v26;
    sub_1B0F6D528((uint64_t)v28, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    return sub_1B0F6D564((uint64_t)v28);
  }
}

uint64_t sub_1B0FB7594@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FB7138(a1, a2);
}

uint64_t sub_1B0FB75A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FB75B8()
{
  sub_1B0FB75F8();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0FB75F8()
{
  unint64_t result;

  result = qword_1EEEDFD88;
  if (!qword_1EEEDFD88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104073C, &type metadata for PickerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD88);
  }
  return result;
}

unint64_t sub_1B0FB763C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1B0FB7670();
  a1[2] = sub_1B0FB76B4();
  result = sub_1B0FB76F8();
  a1[3] = result;
  return result;
}

unint64_t sub_1B0FB7670()
{
  unint64_t result;

  result = qword_1EEEDFD90;
  if (!qword_1EEEDFD90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10406C4, &type metadata for PickerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD90);
  }
  return result;
}

unint64_t sub_1B0FB76B4()
{
  unint64_t result;

  result = qword_1EEEDFD98;
  if (!qword_1EEEDFD98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104068C, &type metadata for PickerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFD98);
  }
  return result;
}

unint64_t sub_1B0FB76F8()
{
  unint64_t result;

  result = qword_1EEEDFDA0;
  if (!qword_1EEEDFDA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10406EC, &type metadata for PickerView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFDA0);
  }
  return result;
}

unint64_t sub_1B0FB773C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE120;
  if (!qword_1EEEDE120)
  {
    v1 = type metadata accessor for RemoteStateStore(255);
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for StateDict<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE120);
  }
  return result;
}

unint64_t sub_1B0FB7784()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEDFDD0;
  if (!qword_1EEEDFDD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFDC8);
    v2 = MEMORY[0x1E0CDFBB8];
    v3[0] = sub_1B0F5A7E4(&qword_1EEEDFDD8, &qword_1EEEDFDC0, MEMORY[0x1E0CDFBB8]);
    v3[1] = sub_1B0F5A7E4(&qword_1EEEDFDE0, &qword_1EEEDFDB0, v2);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEDFDD0);
  }
  return result;
}

uint64_t sub_1B0FB7828()
{
  return sub_1B0FB6F64();
}

uint64_t sub_1B0FB7848()
{
  return sub_1B0FB6F64();
}

unint64_t sub_1B0FB7868()
{
  unint64_t result;

  result = qword_1EEEDFDF0;
  if (!qword_1EEEDFDF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040870, &type metadata for PickerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFDF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PickerView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB78F8 + 4 * byte_1B1040675[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0FB792C + 4 * byte_1B1040670[v4]))();
}

uint64_t sub_1B0FB792C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB7934(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB793CLL);
  return result;
}

uint64_t sub_1B0FB7948(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB7950);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0FB7954(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB795C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PickerView.CodingKeys()
{
  return &type metadata for PickerView.CodingKeys;
}

unint64_t sub_1B0FB797C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEDFDF8;
  if (!qword_1EEEDFDF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFE00);
    v2[0] = sub_1B0FB7784();
    v2[1] = MEMORY[0x1E0CE0400];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDFDF8);
  }
  return result;
}

unint64_t sub_1B0FB79EC()
{
  unint64_t result;

  result = qword_1EEEDFE08;
  if (!qword_1EEEDFE08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040848, &type metadata for PickerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE08);
  }
  return result;
}

unint64_t sub_1B0FB7A34()
{
  unint64_t result;

  result = qword_1EEEDFE10;
  if (!qword_1EEEDFE10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040780, &type metadata for PickerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE10);
  }
  return result;
}

unint64_t sub_1B0FB7A7C()
{
  unint64_t result;

  result = qword_1EEEDFE18;
  if (!qword_1EEEDFE18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10407A8, &type metadata for PickerView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE18);
  }
  return result;
}

uint64_t sub_1B0FB7AC0()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

ValueMetadata *type metadata accessor for ToggleStyleModifier()
{
  return &type metadata for ToggleStyleModifier;
}

uint64_t sub_1B0FB7B1C@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OpaqueTypeConformance2;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  void (*v111)(uint64_t, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];
  _QWORD v130[2];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v110 = a2;
  v111 = a1;
  v118 = a5;
  v7 = sub_1B1034B80();
  v103 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v102 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B0F524FC(&qword_1EEEDFE38, v9, MEMORY[0x1E0CDAC38]);
  v131 = a3;
  v132 = v7;
  v117 = v7;
  v133 = a4;
  v134 = v10;
  v122 = v10;
  v11 = MEMORY[0x1E0CDE148];
  v12 = MEMORY[0x1B5E15134](0, &v131, MEMORY[0x1E0CDE148], 0);
  v101 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v104 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v106 = (uint64_t)&v97 - v15;
  v16 = sub_1B1034AB4();
  v100 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v99 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1B0F524FC(&qword_1EEEDFE30, v18, MEMORY[0x1E0CDA300]);
  v131 = a3;
  v132 = v16;
  v123 = v16;
  v133 = a4;
  v134 = v19;
  v121 = v19;
  v20 = MEMORY[0x1B5E15134](0, &v131, v11, 0);
  v98 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v105 = (char *)&v97 - v24;
  v25 = sub_1B1034C1C();
  v26 = sub_1B0F524FC(&qword_1EEEDFE28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDAEF0], MEMORY[0x1E0CDAEE0]);
  v119 = a3;
  v120 = a4;
  v131 = a3;
  v132 = v25;
  v133 = a4;
  v134 = v26;
  v125 = v26;
  v27 = MEMORY[0x1B5E15134](255, &v131, v11, 0);
  v109 = v20;
  v28 = sub_1B1034ED4();
  v108 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v107 = (char *)&v97 - v29;
  v30 = swift_checkMetadataState();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v97 - v33;
  v35 = *(_QWORD *)(v27 - 8);
  v36 = MEMORY[0x1E0C80A78](v32);
  v38 = (char *)&v97 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v97 - v39;
  v115 = v28;
  v116 = v12;
  v114 = sub_1B1034ED4();
  v113 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v112 = (char *)&v97 - v41;
  v124 = v30;
  if ((_BYTE)v110)
  {
    if (v110 == 1)
    {
      v42 = v99;
      sub_1B1034AA8();
      v43 = v119;
      v44 = v123;
      v45 = v120;
      v46 = v121;
      sub_1B103539C();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v42, v44);
      v131 = v43;
      v132 = v44;
      v133 = v45;
      v134 = v46;
      v47 = v45;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v49 = (uint64_t)v105;
      v50 = v109;
      sub_1B0F6D824((uint64_t)v23, v109, (uint64_t)v105);
      v51 = *(void (**)(char *, uint64_t))(v98 + 8);
      v51(v23, v50);
      sub_1B0F6609C(v49, v50, (uint64_t)v23);
      v131 = v43;
      v132 = v124;
      v133 = v47;
      v134 = v125;
      v52 = swift_getOpaqueTypeConformance2();
      v53 = (uint64_t)v107;
      sub_1B0F60BB0((uint64_t)v23, v27, v50);
      v51(v23, v50);
      v127[0] = v52;
      v127[1] = OpaqueTypeConformance2;
      v54 = v115;
      MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v115, v127);
      v55 = v117;
      v131 = v43;
      v132 = v117;
      v56 = v120;
      v57 = v122;
      v133 = v120;
      v134 = v122;
      swift_getOpaqueTypeConformance2();
      v58 = (uint64_t)v112;
      v59 = v54;
      v60 = v54;
      v61 = v56;
      v62 = v55;
      v63 = v123;
      sub_1B0F60AEC(v53, v59);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v53, v60);
      v51(v105, v50);
      v64 = v121;
    }
    else
    {
      v79 = v102;
      sub_1B1034B74();
      v80 = (uint64_t)v104;
      v81 = v119;
      v61 = v120;
      v62 = v117;
      v82 = v122;
      sub_1B103539C();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v79, v62);
      v131 = v81;
      v132 = v62;
      v133 = v61;
      v134 = v82;
      swift_getOpaqueTypeConformance2();
      v83 = v106;
      v84 = v116;
      sub_1B0F6D824(v80, v116, v106);
      v111 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
      v111(v80, v84);
      sub_1B0F6609C(v83, v84, v80);
      v131 = v81;
      v132 = v124;
      v133 = v61;
      v134 = v125;
      v85 = swift_getOpaqueTypeConformance2();
      v63 = v123;
      v131 = v81;
      v132 = v123;
      v64 = v121;
      v133 = v61;
      v134 = v121;
      v86 = swift_getOpaqueTypeConformance2();
      v130[0] = v85;
      v130[1] = v86;
      v60 = v115;
      MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v115, v130);
      v87 = v112;
      sub_1B0F60BB0(v80, v60, v84);
      v88 = v80;
      v89 = v111;
      v111(v88, v84);
      v89(v106, v84);
      v57 = v122;
      v58 = (uint64_t)v87;
      v43 = v81;
    }
  }
  else
  {
    sub_1B1034C10();
    v65 = v119;
    v97 = v40;
    v66 = v120;
    v67 = v125;
    sub_1B103539C();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
    v131 = v65;
    v132 = v30;
    v68 = v65;
    v69 = v66;
    v133 = v66;
    v134 = v67;
    v70 = swift_getOpaqueTypeConformance2();
    v71 = (uint64_t)v97;
    sub_1B0F6D824((uint64_t)v38, v27, (uint64_t)v97);
    v72 = *(void (**)(char *, uint64_t))(v35 + 8);
    v72(v38, v27);
    v111 = (void (*)(uint64_t, uint64_t))v72;
    sub_1B0F6609C(v71, v27, (uint64_t)v38);
    v131 = v68;
    v132 = v123;
    v73 = v121;
    v133 = v66;
    v134 = v121;
    v74 = swift_getOpaqueTypeConformance2();
    v75 = (uint64_t)v107;
    sub_1B0F60AEC((uint64_t)v38, v27);
    v76 = v38;
    v64 = v73;
    v72(v76, v27);
    v126[0] = v70;
    v126[1] = v74;
    v77 = v115;
    MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v115, v126);
    v43 = v119;
    v62 = v117;
    v131 = v119;
    v132 = v117;
    v57 = v122;
    v133 = v69;
    v134 = v122;
    swift_getOpaqueTypeConformance2();
    v58 = (uint64_t)v112;
    sub_1B0F60AEC(v75, v77);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v75, v77);
    v78 = v27;
    v60 = v77;
    v61 = v69;
    v111((uint64_t)v97, v78);
    v63 = v123;
  }
  v131 = v43;
  v132 = v124;
  v133 = v61;
  v134 = v125;
  v90 = swift_getOpaqueTypeConformance2();
  v131 = v43;
  v132 = v63;
  v133 = v61;
  v134 = v64;
  v91 = swift_getOpaqueTypeConformance2();
  v129[0] = v90;
  v129[1] = v91;
  v92 = MEMORY[0x1E0CDB8A0];
  v93 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v60, v129);
  v131 = v43;
  v132 = v62;
  v133 = v61;
  v134 = v57;
  v94 = swift_getOpaqueTypeConformance2();
  v128[0] = v93;
  v128[1] = v94;
  v95 = v114;
  MEMORY[0x1B5E15188](v92, v114, v128);
  sub_1B0F6609C(v58, v95, v118);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v58, v95);
}

uint64_t sub_1B0FB850C(char a1)
{
  return *(_QWORD *)&aAutomatibutton[8 * a1];
}

uint64_t sub_1B0FB852C(char *a1, char *a2)
{
  return sub_1B100D624(*a1, *a2);
}

uint64_t sub_1B0FB8538()
{
  return sub_1B10107F0();
}

uint64_t sub_1B0FB8540()
{
  return sub_1B10126F8();
}

uint64_t sub_1B0FB8548()
{
  return sub_1B1014B4C();
}

uint64_t sub_1B0FB8550@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FB8E40();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB857C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB850C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB85A4()
{
  sub_1B0FB8E88();
  return sub_1B1035CB4();
}

uint64_t sub_1B0FB8600()
{
  sub_1B0FB8E88();
  return sub_1B1035CA8();
}

uint64_t sub_1B0FB864C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FB869C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FB86F0()
{
  sub_1B0FB8B30();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB8718()
{
  sub_1B0FB8B30();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB8740@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t);
  int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1[3];
  v3 = a1[4];
  v21 = *v2;
  v20 = (void (*)(uint64_t, uint64_t))__swift_project_boxed_opaque_existential_1(a1, v4);
  v18 = sub_1B1034C1C();
  v16 = sub_1B0F524FC(&qword_1EEEDFE28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDAEF0], MEMORY[0x1E0CDAEE0]);
  v24 = v4;
  v25 = v18;
  v26 = v3;
  v27 = v16;
  v5 = MEMORY[0x1E0CDE148];
  MEMORY[0x1B5E15134](255, &v24, MEMORY[0x1E0CDE148], 0);
  v17 = sub_1B1034AB4();
  v15 = sub_1B0F524FC(&qword_1EEEDFE30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA310], MEMORY[0x1E0CDA300]);
  v24 = v4;
  v25 = v17;
  v26 = v3;
  v27 = v15;
  MEMORY[0x1B5E15134](255, &v24, v5, 0);
  v6 = sub_1B1034ED4();
  v7 = sub_1B1034B80();
  v8 = sub_1B0F524FC(&qword_1EEEDFE38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDAC48], MEMORY[0x1E0CDAC38]);
  v24 = v4;
  v25 = v7;
  v26 = v3;
  v27 = v8;
  MEMORY[0x1B5E15134](255, &v24, v5, 0);
  v9 = sub_1B1034ED4();
  a2[3] = v9;
  v24 = v4;
  v25 = v18;
  v26 = v3;
  v27 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = v4;
  v25 = v17;
  v26 = v3;
  v27 = v15;
  v23[0] = OpaqueTypeConformance2;
  v23[1] = swift_getOpaqueTypeConformance2();
  v11 = MEMORY[0x1E0CDB8A0];
  v12 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v6, v23);
  v24 = v4;
  v25 = v7;
  v26 = v3;
  v27 = v8;
  v22[0] = v12;
  v22[1] = swift_getOpaqueTypeConformance2();
  a2[4] = MEMORY[0x1B5E15188](v11, v9, v22);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return sub_1B0FB7B1C(v20, v21, v4, v3, (uint64_t)boxed_opaque_existential_1);
}

uint64_t sub_1B0FB8974@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B0FB8A04(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1B0FB899C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FB89C0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FB89C0()
{
  unint64_t result;

  result = qword_1EEEDFE20;
  if (!qword_1EEEDFE20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040944, &type metadata for ToggleStyleModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE20);
  }
  return result;
}

uint64_t sub_1B0FB8A04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFE40);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FB8B30();
  sub_1B1036278();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return 0;
  }
  else
  {
    sub_1B0FB8B74();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v10 == 3)
      v7 = 0;
    else
      v7 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1B0FB8B30()
{
  unint64_t result;

  result = qword_1EEEDFE48;
  if (!qword_1EEEDFE48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040B94, &type metadata for ToggleStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE48);
  }
  return result;
}

unint64_t sub_1B0FB8B74()
{
  unint64_t result;

  result = qword_1EEEDFE50;
  if (!qword_1EEEDFE50)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040B6C, &type metadata for ToggleStyleString);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToggleStyleModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FB8BF8 + 4 * byte_1B1040910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FB8C18 + 4 * byte_1B1040915[v4]))();
}

_BYTE *sub_1B0FB8BF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FB8C18(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FB8C20(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FB8C28(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FB8C30(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FB8C38(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToggleStyleModifier.CodingKeys()
{
  return &type metadata for ToggleStyleModifier.CodingKeys;
}

uint64_t _s6LiftUI17ToggleStyleStringOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FB8CA0 + 4 * byte_1B104091F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FB8CD4 + 4 * byte_1B104091A[v4]))();
}

uint64_t sub_1B0FB8CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB8CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FB8CE4);
  return result;
}

uint64_t sub_1B0FB8CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FB8CF8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FB8CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FB8D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToggleStyleString()
{
  return &type metadata for ToggleStyleString;
}

unint64_t sub_1B0FB8D24()
{
  unint64_t result;

  result = qword_1EEEDFE58;
  if (!qword_1EEEDFE58)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040A54, &type metadata for ToggleStyleString);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE58);
  }
  return result;
}

unint64_t sub_1B0FB8D6C()
{
  unint64_t result;

  result = qword_1EEEDFE60;
  if (!qword_1EEEDFE60)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040B44, &type metadata for ToggleStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE60);
  }
  return result;
}

unint64_t sub_1B0FB8DB4()
{
  unint64_t result;

  result = qword_1EEEDFE68;
  if (!qword_1EEEDFE68)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040A7C, &type metadata for ToggleStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE68);
  }
  return result;
}

unint64_t sub_1B0FB8DFC()
{
  unint64_t result;

  result = qword_1EEEDFE70;
  if (!qword_1EEEDFE70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040AA4, &type metadata for ToggleStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE70);
  }
  return result;
}

uint64_t sub_1B0FB8E40()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_1B0FB8E88()
{
  unint64_t result;

  result = qword_1EEEDFE78;
  if (!qword_1EEEDFE78)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10409DC, &type metadata for ToggleStyleString);
    atomic_store(result, (unint64_t *)&qword_1EEEDFE78);
  }
  return result;
}

void sub_1B0FB8ECC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  unint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint8_t *v65;
  void (*v66)(unint64_t, char *, uint64_t);
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  os_log_t v102;
  __int128 aBlock;
  uint64_t (*v104)();
  void *v105;
  uint64_t (*v106)();
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;

  v4 = v3;
  v97 = a3;
  v95 = a1;
  v102 = (os_log_t)0xEF79786F72507765;
  v100 = 0x69566C6C6F726373;
  v6 = sub_1B1035AB0();
  v94 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v93 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1B1035AC8();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v90 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFE98);
  MEMORY[0x1E0C80A78](v9);
  v98 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B10349A0();
  v99 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v89 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v13;
  MEMORY[0x1E0C80A78](v12);
  v96 = (char *)&v78 - v14;
  v15 = *(unsigned __int8 *)(v3 + 40);
  v101 = a2;
  if (v15 <= 0xFD)
  {
    v17 = *(_QWORD *)(v3 + 16);
    v16 = *(_QWORD *)(v3 + 24);
    v18 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)&aBlock = v17;
    *((_QWORD *)&aBlock + 1) = v16;
    v104 = (uint64_t (*)())v18;
    LOBYTE(v105) = v15;
    sub_1B0F56B9C(v17, v16, v18, v15);
    v19 = StringResolvable.resolved(with:)(a2);
    v21 = v20;
    sub_1B0F56B88(v17, v16, v18, v15);
    v100 = v19;
    v102 = v21;
  }
  v22 = *(_QWORD *)(v4 + 136);
  if ((v22 & 0xFE) == 0x7E)
  {
    v23 = 0.0;
    v24 = 0;
    v25 = 1;
  }
  else
  {
    v86 = v11;
    v87 = v6;
    v26 = *(_QWORD *)(v4 + 88);
    v27 = *(_QWORD *)(v4 + 96);
    v28 = *(_QWORD *)(v4 + 104);
    v29 = *(_QWORD *)(v4 + 112);
    v30 = *(_QWORD *)(v4 + 120);
    v31 = *(_QWORD *)(v4 + 128);
    v33 = *(_QWORD *)(v4 + 144);
    v32 = *(_QWORD *)(v4 + 152);
    v34 = *(_QWORD *)(v4 + 160);
    v35 = *(_BYTE *)(v4 + 168);
    *(_QWORD *)&aBlock = *(_QWORD *)(v4 + 80);
    *((_QWORD *)&aBlock + 1) = v26;
    v104 = (uint64_t (*)())v27;
    LOBYTE(v105) = v28;
    v106 = (uint64_t (*)())v29;
    v107 = v30;
    v108 = v31;
    v109 = v22;
    v110 = v33;
    v111 = v32;
    v112 = v34;
    v113 = v35;
    v79 = aBlock;
    v80 = v26;
    v81 = v27;
    v83 = v28;
    sub_1B0F56C04(aBlock, v26, v27, v28);
    v82 = v29;
    v84 = v30;
    v85 = v31;
    sub_1B0F6C6F4(v29, v30, v31, v22);
    sub_1B0F6C6F4(v33, v32, v34, v35);
    v36 = sub_1B0F7AB94(v101);
    v38 = v37;
    sub_1B0FBA10C(v79, v80, v81, v83, v82, v84, v85, v22, v33, v32, v34, v35);
    v25 = 0;
    v23 = v36;
    v24 = v38;
    v6 = v87;
    v11 = v86;
  }
  v39 = *(unsigned __int8 *)(v4 + 72);
  if (v39 > 0xFD)
  {
    swift_bridgeObjectRelease();
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v43 = sub_1B103467C();
    __swift_project_value_buffer(v43, (uint64_t)qword_1EEF0BA00);
    v102 = (os_log_t)sub_1B1034664();
    v44 = sub_1B1035E1C();
    if (os_log_type_enabled(v102, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1B0F50000, v102, v44, "ScrollAction: unable to resolve scrollToId", v45, 2u);
      MEMORY[0x1B5E15248](v45, -1, -1);
    }

    return;
  }
  v85 = v24;
  v86 = *(_QWORD *)&v23;
  LODWORD(v87) = v25;
  v41 = *(_QWORD *)(v4 + 48);
  v40 = *(_QWORD *)(v4 + 56);
  v42 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)&aBlock = v41;
  *((_QWORD *)&aBlock + 1) = v40;
  v104 = (uint64_t (*)())v42;
  LOBYTE(v105) = v39;
  sub_1B0F56B9C(v41, v40, v42, v39);
  v46 = StringResolvable.resolved(with:)(v101);
  v48 = v47;
  sub_1B0F56B88(v41, v40, v42, v39);
  v49 = v102;
  swift_bridgeObjectRetain();
  sub_1B0FEB89C(v100, (uint64_t)v49, &aBlock);
  swift_bridgeObjectRelease();
  if (!v105)
  {
    sub_1B0F5A3AC((uint64_t)&aBlock, &qword_1EEEDE158);
    v50 = (uint64_t)v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v98, 1, 1, v11);
    goto LABEL_20;
  }
  v50 = (uint64_t)v98;
  v51 = swift_dynamicCast();
  v52 = v99;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56))(v50, v51 ^ 1u, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v11) == 1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1B0F5A3AC(v50, &qword_1EEEDFE98);
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v55 = sub_1B103467C();
    __swift_project_value_buffer(v55, (uint64_t)qword_1EEF0BA00);
    swift_bridgeObjectRetain();
    v56 = (unint64_t)v49;
    v57 = sub_1B1034664();
    v58 = sub_1B1035E1C();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v60;
      *(_DWORD *)v59 = 136315138;
      swift_bridgeObjectRetain();
      v114 = sub_1B0F6B618(v100, v56, (uint64_t *)&aBlock);
      sub_1B1035E7C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0F50000, v57, v58, "ScrollAction: unable to resolve ScrollViewProxy at key %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v60, -1, -1);
      MEMORY[0x1B5E15248](v59, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  swift_bridgeObjectRelease();
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 32);
  v54 = v96;
  v53(v96, v50, v11);
  if ((v95 & 1) != 0)
  {
    if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    {
      *(_QWORD *)&aBlock = v46;
      *((_QWORD *)&aBlock + 1) = v48;
      sub_1B1034994();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v11);
      swift_bridgeObjectRelease();
      return;
    }
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v61 = sub_1B103467C();
    __swift_project_value_buffer(v61, (uint64_t)qword_1EEF0BA00);
    v62 = sub_1B1034664();
    v63 = sub_1B1035E1C();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_1B0F50000, v62, v63, "Synchronous call to ScrollAction is not on main thread, running async on main thread.", v64, 2u);
      v65 = v64;
      v54 = v96;
      MEMORY[0x1B5E15248](v65, -1, -1);
    }

  }
  sub_1B0FB9F24();
  v102 = (os_log_t)sub_1B1035E40();
  v66 = (void (*)(unint64_t, char *, uint64_t))v53;
  v67 = v89;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v89, v54, v11);
  v68 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v69 = (v88 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  v70 = swift_allocObject();
  v66(v70 + v68, v67, v11);
  v71 = (unint64_t *)(v70 + v69);
  *v71 = v46;
  v71[1] = v48;
  v72 = v70 + ((v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = v85;
  *(_QWORD *)v72 = v86;
  *(_QWORD *)(v72 + 8) = v73;
  *(_BYTE *)(v72 + 16) = v87;
  v106 = sub_1B0FB9FE0;
  v107 = v70;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v104 = sub_1B0F71014;
  v105 = &block_descriptor_0;
  v74 = _Block_copy(&aBlock);
  swift_release();
  v75 = v90;
  sub_1B1035ABC();
  *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
  sub_1B0FBA080((unint64_t *)&qword_1EEEDE9C8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE9D0);
  sub_1B0FBA0C0();
  v76 = v93;
  sub_1B1035ED0();
  v77 = v102;
  MEMORY[0x1B5E148AC](0, v75, v76, v74);
  _Block_release(v74);

  (*(void (**)(char *, uint64_t))(v94 + 8))(v76, v6);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v75, v92);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v96, v11);
}

uint64_t sub_1B0FB99DC(char a1)
{
  return qword_1B1040E00[a1];
}

uint64_t sub_1B0FB99FC(char *a1, char *a2)
{
  return sub_1B100EA8C(*a1, *a2);
}

uint64_t sub_1B0FB9A08()
{
  return sub_1B1010858();
}

uint64_t sub_1B0FB9A10()
{
  return sub_1B1013114();
}

uint64_t sub_1B0FB9A18()
{
  return sub_1B1013D08();
}

uint64_t sub_1B0FB9A20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FBA378();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB9A4C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FB99DC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FB9A74()
{
  char *v0;

  return sub_1B0FB99DC(*v0);
}

uint64_t sub_1B0FB9A7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FBA378();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FB9AA0()
{
  sub_1B0FBA190();
  return sub_1B10362B4();
}

uint64_t sub_1B0FB9AC8()
{
  sub_1B0FBA190();
  return sub_1B10362C0();
}

uint64_t sub_1B0FB9AF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFEA0);
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FBA190();
  sub_1B1036278();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v7 = v4;
    v27 = 0;
    sub_1B0F56A98();
    v8 = v19;
    sub_1B10360A4();
    v9 = v21;
    v10 = BYTE8(v21);
    *(_OWORD *)(v1 + 48) = v20;
    *(_QWORD *)(v1 + 64) = v9;
    *(_BYTE *)(v1 + 72) = v10;
    v27 = 1;
    sub_1B10360A4();
    v11 = v21;
    v12 = BYTE8(v21);
    *(_OWORD *)(v1 + 16) = v20;
    *(_QWORD *)(v1 + 32) = v11;
    *(_BYTE *)(v1 + 40) = v12;
    v27 = 2;
    sub_1B0F81108();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v8);
    v14 = v25;
    v15 = v26;
    v16 = v21;
    *(_OWORD *)(v1 + 80) = v20;
    *(_OWORD *)(v1 + 96) = v16;
    v17 = v23;
    *(_OWORD *)(v1 + 112) = v22;
    *(_OWORD *)(v1 + 128) = v17;
    *(_OWORD *)(v1 + 144) = v24;
    *(_QWORD *)(v1 + 160) = v14;
    *(_BYTE *)(v1 + 168) = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t sub_1B0FB9D50()
{
  uint64_t v0;

  sub_1B0F56B88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_1B0F56B88(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_1B0FBA10C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 168));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollAction()
{
  return objc_opt_self();
}

uint64_t sub_1B0FB9DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1B0FB8ECC(0, a1, a2);
  return sub_1B0F746E8(*(uint64_t (**)(void))(v2 + 8));
}

void sub_1B0FB9E24(uint64_t a1, uint64_t a2)
{
  sub_1B0FB8ECC(1, a1, a2);
}

uint64_t sub_1B0FB9E58@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = sub_1B0FB9AF0(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B0FB9EAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B0FBA080((unint64_t *)&unk_1EEEDFE80, a2, (uint64_t (*)(uint64_t))type metadata accessor for ScrollAction, (uint64_t)&unk_1B1040C54);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B0FB9EE8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B0FBA080(&qword_1EEEDFE90, a2, (uint64_t (*)(uint64_t))type metadata accessor for ScrollAction, (uint64_t)&unk_1B1040C7C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FB9F24()
{
  unint64_t result;

  result = qword_1EEEDE9C0;
  if (!qword_1EEEDE9C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEEDE9C0);
  }
  return result;
}

uint64_t sub_1B0FB9F60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1B10349A0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0FB9FE0()
{
  sub_1B10349A0();
  return sub_1B1034994();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1B0FBA080(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1B5E15188](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0FBA0C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDE9D8;
  if (!qword_1EEEDE9D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDE9D0);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDE9D8);
  }
  return result;
}

uint64_t sub_1B0FBA10C(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a8 & 0xFE) != 0x7ELL)
  {
    sub_1B0F56B88(result, a2, a3, a4);
    sub_1B0F6C7C0(a5, a6, a7, a8);
    return sub_1B0F6C7C0(a9, a10, a11, a12);
  }
  return result;
}

unint64_t sub_1B0FBA190()
{
  unint64_t result;

  result = qword_1EEEDFEA8;
  if (!qword_1EEEDFEA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040DB0, &type metadata for ScrollAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FBA220 + 4 * byte_1B1040C1D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FBA254 + 4 * byte_1B1040C18[v4]))();
}

uint64_t sub_1B0FBA254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBA25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FBA264);
  return result;
}

uint64_t sub_1B0FBA270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FBA278);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FBA27C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBA284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollAction.CodingKeys()
{
  return &type metadata for ScrollAction.CodingKeys;
}

unint64_t sub_1B0FBA2A4()
{
  unint64_t result;

  result = qword_1EEEDFEB0;
  if (!qword_1EEEDFEB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040D88, &type metadata for ScrollAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEB0);
  }
  return result;
}

unint64_t sub_1B0FBA2EC()
{
  unint64_t result;

  result = qword_1EEEDFEB8;
  if (!qword_1EEEDFEB8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040CC0, &type metadata for ScrollAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEB8);
  }
  return result;
}

unint64_t sub_1B0FBA334()
{
  unint64_t result;

  result = qword_1EEEDFEC0;
  if (!qword_1EEEDFEC0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040CE8, &type metadata for ScrollAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEC0);
  }
  return result;
}

uint64_t sub_1B0FBA378()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

ValueMetadata *type metadata accessor for StrokeModifier()
{
  return &type metadata for StrokeModifier;
}

uint64_t sub_1B0FBA3D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFED8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FBA718();
  sub_1B1036278();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4F0);
    sub_1B0F5FE48();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FBA518@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FBA568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0FBA8D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0FBA590@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FBA5E4()
{
  sub_1B0FBA718();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBA60C()
{
  sub_1B0FBA718();
  return sub_1B10362C0();
}

uint64_t sub_1B0FBA634@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FBA3D0(a1, a2);
}

unint64_t sub_1B0FBA648(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FBA66C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FBA66C()
{
  unint64_t result;

  result = qword_1EEEDFEC8;
  if (!qword_1EEEDFEC8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040E94, &type metadata for StrokeModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEC8);
  }
  return result;
}

unint64_t sub_1B0FBA6B0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FBA6D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FBA6D4()
{
  unint64_t result;

  result = qword_1EEEDFED0;
  if (!qword_1EEEDFED0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040E50, &type metadata for StrokeModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDFED0);
  }
  return result;
}

unint64_t sub_1B0FBA718()
{
  unint64_t result;

  result = qword_1EEEDFEE0;
  if (!qword_1EEEDFEE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040FAC, &type metadata for StrokeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEE0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StrokeModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FBA79C + 4 * byte_1B1040E30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FBA7BC + 4 * byte_1B1040E35[v4]))();
}

_BYTE *sub_1B0FBA79C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FBA7BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FBA7C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FBA7CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FBA7D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FBA7DC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StrokeModifier.CodingKeys()
{
  return &type metadata for StrokeModifier.CodingKeys;
}

unint64_t sub_1B0FBA7FC()
{
  unint64_t result;

  result = qword_1EEEDFEE8;
  if (!qword_1EEEDFEE8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040F84, &type metadata for StrokeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEE8);
  }
  return result;
}

unint64_t sub_1B0FBA844()
{
  unint64_t result;

  result = qword_1EEEDFEF0;
  if (!qword_1EEEDFEF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040EBC, &type metadata for StrokeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEF0);
  }
  return result;
}

unint64_t sub_1B0FBA88C()
{
  unint64_t result;

  result = qword_1EEEDFEF8;
  if (!qword_1EEEDFEF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1040EE4, &type metadata for StrokeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFEF8);
  }
  return result;
}

uint64_t sub_1B0FBA8D0()
{
  return 0x74646957656E696CLL;
}

uint64_t destroy for EditButtonView()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6LiftUI14EditButtonViewVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EditButtonView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EditButtonView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditButtonView()
{
  return &type metadata for EditButtonView;
}

uint64_t destroy for ButtonView(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  swift_release();
  swift_release();
  v2 = *(unsigned __int8 *)(a1 + 176);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), v2);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = a2 + 72;
  v9 = *(_BYTE *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 72, v8);
  *(_BYTE *)(a1 + 112) = v9;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(unsigned __int8 *)(a2 + 176);
  swift_retain();
  swift_retain();
  if (v13 <= 0xFD)
  {
    v14 = *(_QWORD *)(a2 + 152);
    v15 = *(_QWORD *)(a2 + 160);
    v16 = *(_QWORD *)(a2 + 168);
    sub_1B0F56B9C(v14, v15, v16, v13);
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = v15;
    *(_QWORD *)(a1 + 168) = v16;
    *(_BYTE *)(a1 + 176) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ButtonView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 72);
    v4 = *(_BYTE *)(a2 + 112);
    v5 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v5;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 72, a2 + 72);
    *(_BYTE *)(a1 + 112) = v4;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v6 = (_OWORD *)(a1 + 152);
  v7 = (_OWORD *)(a2 + 152);
  v8 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) <= 0xFDu)
  {
    if (v8 <= 0xFD)
    {
      v14 = *(_QWORD *)(a2 + 152);
      v15 = *(_QWORD *)(a2 + 160);
      v16 = *(_QWORD *)(a2 + 168);
      sub_1B0F56B9C(v14, v15, v16, *(_BYTE *)(a2 + 176));
      v17 = *(_QWORD *)(a1 + 152);
      v18 = *(_QWORD *)(a1 + 160);
      v19 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 152) = v14;
      *(_QWORD *)(a1 + 160) = v15;
      *(_QWORD *)(a1 + 168) = v16;
      v20 = *(_BYTE *)(a1 + 176);
      *(_BYTE *)(a1 + 176) = v8;
      sub_1B0F56ADC(v17, v18, v19, v20);
    }
    else
    {
      sub_1B0F5EA14(a1 + 152);
      v10 = *(_OWORD *)(a2 + 161);
      *v6 = *v7;
      *(_OWORD *)(a1 + 161) = v10;
    }
  }
  else if (v8 <= 0xFD)
  {
    v11 = *(_QWORD *)(a2 + 152);
    v12 = *(_QWORD *)(a2 + 160);
    v13 = *(_QWORD *)(a2 + 168);
    sub_1B0F56B9C(v11, v12, v13, *(_BYTE *)(a2 + 176));
    *(_QWORD *)(a1 + 152) = v11;
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 168) = v13;
    *(_BYTE *)(a1 + 176) = v8;
  }
  else
  {
    v9 = *v7;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    *v6 = v9;
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t assignWithTake for ButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 72);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v8 = *(unsigned __int8 *)(a1 + 176);
  if (v8 <= 0xFD)
  {
    v9 = *(unsigned __int8 *)(a2 + 176);
    if (v9 <= 0xFD)
    {
      v10 = *(_QWORD *)(a2 + 168);
      v11 = *(_QWORD *)(a1 + 152);
      v12 = *(_QWORD *)(a1 + 160);
      v13 = *(_QWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = v10;
      *(_BYTE *)(a1 + 176) = v9;
      sub_1B0F56ADC(v11, v12, v13, v8);
      goto LABEL_8;
    }
    sub_1B0F5EA14(a1 + 152);
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
LABEL_8:
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release();
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v14;
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonView()
{
  return &type metadata for ButtonView;
}

uint64_t sub_1B0FBB108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45[2];
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v2 = (uint64_t *)v1;
  v40 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFF50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFF58);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v38 - v10;
  LODWORD(v12) = *(unsigned __int8 *)(v1 + 176);
  v41 = v4;
  v42 = v3;
  v43 = (char *)&v38 - v10;
  if (v12 <= 0xFD)
  {
    v39 = v9;
    v4 = *(_QWORD *)(v1 + 152);
    v3 = *(_QWORD *)(v1 + 160);
    v13 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)&v49 = v4;
    *((_QWORD *)&v49 + 1) = v3;
    *(_QWORD *)&v50 = v13;
    BYTE8(v50) = (_BYTE)v12;
    if (!*(_QWORD *)(v1 + 184))
    {
LABEL_21:
      sub_1B0F56B9C(v4, v3, v13, v12);
LABEL_22:
      type metadata accessor for RemoteStateStore(0);
      sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
      result = sub_1B1034ACC();
      __break(1u);
      return result;
    }
    sub_1B0F56C04(v4, v3, v13, v12);
    v14 = swift_retain();
    StringResolvable.resolved(with:)(v14);
    sub_1B0F56B88(v4, v3, v13, v12);
    swift_release();
    v4 = v41;
    v3 = v42;
    v11 = v43;
    v9 = v39;
  }
  v15 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v15 == 1)
  {
    sub_1B1034748();
    goto LABEL_8;
  }
  if (!v15)
  {
    sub_1B103473C();
LABEL_8:
    v16 = sub_1B1034754();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 0, 1, v16);
    goto LABEL_10;
  }
  v17 = sub_1B1034754();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
LABEL_10:
  sub_1B0FBC420((uint64_t)v11, (uint64_t)v9);
  sub_1B0F6CFC0((uint64_t)v2, (uint64_t)&v49);
  v18 = swift_allocObject();
  v12 = &v38;
  *(_QWORD *)(v18 + 224) = v62;
  v19 = v60;
  *(_OWORD *)(v18 + 176) = v59;
  *(_OWORD *)(v18 + 192) = v19;
  *(_OWORD *)(v18 + 208) = v61;
  v20 = v56;
  *(_OWORD *)(v18 + 112) = v55;
  *(_OWORD *)(v18 + 128) = v20;
  v21 = v58;
  *(_OWORD *)(v18 + 144) = v57;
  *(_OWORD *)(v18 + 160) = v21;
  v22 = v52;
  *(_OWORD *)(v18 + 48) = v51;
  *(_OWORD *)(v18 + 64) = v22;
  v23 = v54;
  *(_OWORD *)(v18 + 80) = v53;
  *(_OWORD *)(v18 + 96) = v23;
  v24 = v50;
  *(_OWORD *)(v18 + 16) = v49;
  *(_OWORD *)(v18 + 32) = v24;
  MEMORY[0x1E0C80A78](v18);
  *(&v38 - 2) = (uint64_t)v2;
  sub_1B0F64174();
  sub_1B1035804();
  v25 = sub_1B0F5B4C8(v2[3]);
  v26 = v2[23];
  if (!v26)
    goto LABEL_22;
  v13 = v2[25];
  if (!v13)
  {
    type metadata accessor for LocalStateStore(0);
    sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    swift_retain();
    sub_1B1034ACC();
    __break(1u);
    goto LABEL_21;
  }
  v27 = v25;
  v47 = v3;
  v48 = sub_1B0FBC50C();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v46);
  (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v44, v3);
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v30 = (_QWORD *)(v27 + 32);
    swift_retain();
    swift_retain();
    v39 = (char *)v27;
    swift_bridgeObjectRetain();
    do
    {
      v31 = v30[3];
      v32 = v30[4];
      __swift_project_boxed_opaque_existential_1(v30, v31);
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 16))(v45, &v46, v26, v13, v31, v32);
      sub_1B0F5A0E4(v45, (uint64_t)&v49);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
      sub_1B0F5A0E4(&v49, (uint64_t)&v46);
      v30 += 5;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    v4 = v41;
    v3 = v42;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  sub_1B0F5A0E4(&v46, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v33 = __swift_project_boxed_opaque_existential_1(&v49, *((uint64_t *)&v50 + 1));
  MEMORY[0x1E0C80A78](v33);
  (*(void (**)(char *))(v35 + 16))((char *)&v38 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_1B1035840();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v44, v3);
  sub_1B0F5A3AC((uint64_t)v43, &qword_1EEEDFF58);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  *v40 = v36;
  return result;
}

uint64_t sub_1B0FBB6B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1[23];
  if (v5)
  {
    v6 = a1[25];
    if (v6)
    {
      v7 = a1[3];
      v8 = sub_1B1035D80();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v7;
      v9[5] = v5;
      v9[6] = v6;
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_1B0F706F4((uint64_t)v4, (uint64_t)&unk_1EEEDE930, (uint64_t)v9);
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    type metadata accessor for RemoteStateStore(0);
    sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
    sub_1B1034ACC();
    __break(1u);
  }
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  swift_retain();
  result = sub_1B1034ACC();
  __break(1u);
  return result;
}

uint64_t sub_1B0FBB860(char a1)
{
  return qword_1B1041460[a1];
}

uint64_t sub_1B0FBB880(char *a1, char *a2)
{
  return sub_1B100F3A4(*a1, *a2);
}

uint64_t sub_1B0FBB88C()
{
  return sub_1B10108C0();
}

uint64_t sub_1B0FBB894()
{
  return sub_1B1013590();
}

uint64_t sub_1B0FBB89C()
{
  return sub_1B1013674();
}

uint64_t sub_1B0FBB8A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FBC928();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FBB8D0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FBB860(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FBB8F8()
{
  char *v0;

  return sub_1B0FBB860(*v0);
}

uint64_t sub_1B0FBB900@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FBC928();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FBB924()
{
  sub_1B0FBC594();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBB94C()
{
  sub_1B0FBC594();
  return sub_1B10362C0();
}

uint64_t sub_1B0FBB974@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[40];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v34 = a2;
  v33 = sub_1B103461C();
  v35 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFF68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[2] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for RemoteStateStore(0);
  sub_1B0F524FC((unint64_t *)&qword_1EEEDE120, type metadata accessor for RemoteStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v60 = sub_1B1034AD8();
  v61 = v9;
  type metadata accessor for LocalStateStore(0);
  sub_1B0F524FC(&qword_1EEEDE128, type metadata accessor for LocalStateStore, (uint64_t)&protocol conformance descriptor for StateDict<A, B>);
  v62 = sub_1B1034AD8();
  v63 = v10;
  v11 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1B0FBC594();
  v12 = v64;
  sub_1B1036278();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
LABEL_4:
    swift_release();
    return swift_release();
  }
  v13 = v35;
  v64 = v6;
  LOBYTE(v37) = 0;
  v14 = sub_1B103608C();
  v17 = v15;
  v32 = v8;
  if (v15)
  {
    v18 = v14;
  }
  else
  {
    sub_1B1034610();
    v18 = sub_1B1034604();
    v17 = v19;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v33);
  }
  v20 = MEMORY[0x1E0DEE9D8];
  v48[0] = v18;
  v48[1] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF610);
  LOBYTE(v37) = 1;
  sub_1B0F972CC();
  sub_1B10360BC();
  v21 = 0;
  v22 = v47;
  v23 = *(_QWORD *)(v47 + 16);
  if (v23)
  {
    v33 = 0;
    v35 = v5;
    v46 = v20;
    sub_1B0FDD904(0, v23, 0);
    v24 = v22 + 32;
    v25 = v46;
    do
    {
      sub_1B0F97374(v24, (uint64_t)v45);
      sub_1B0F5FD84((uint64_t)v45, (uint64_t)&v37);
      sub_1B0F973B0((uint64_t)v45);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B0FDD904(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v25 = v46;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1B0FDD904(v26 > 1, v27 + 1, 1);
        v25 = v46;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      sub_1B0F5A0E4(&v37, v25 + 40 * v27 + 32);
      v24 += 40;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v5 = v35;
    v21 = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
  }
  v48[3] = v25;
  v45[0] = 2;
  sub_1B0F64238();
  v28 = v32;
  sub_1B10360BC();
  v29 = v34;
  v30 = v64;
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v28, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v53 = v41;
  v54 = v42;
  v55 = v43;
  v56 = v44;
  v49 = v37;
  v50 = v38;
  v51 = v39;
  v52 = v40;
  v45[0] = 3;
  sub_1B0F56A98();
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v5);
  v57 = v37;
  v58 = v38;
  v59 = BYTE8(v38);
  sub_1B0F6CFC0((uint64_t)v48, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return sub_1B0F6CFFC((uint64_t)v48);
}

uint64_t sub_1B0FBBE74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FBB974(a1, a2);
}

uint64_t sub_1B0FBBE88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FBBE98@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FBBEE8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FBBF3C()
{
  sub_1B0FBC3DC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBBF64()
{
  sub_1B0FBC3DC();
  return sub_1B10362C0();
}

uint64_t sub_1B0FBBF90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B0FBC23C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B0FBBFBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0FBBFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FBBFD8);
}

unint64_t sub_1B0FBBFD8()
{
  unint64_t result;

  result = qword_1EEEDFF00;
  if (!qword_1EEEDFF00)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041198, &type metadata for EditButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF00);
  }
  return result;
}

uint64_t sub_1B0FBC01C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FBC038, (uint64_t (*)(void))sub_1B0FBC07C, (uint64_t (*)(void))sub_1B0FBC0C0);
}

unint64_t sub_1B0FBC038()
{
  unint64_t result;

  result = qword_1EEEDFF08;
  if (!qword_1EEEDFF08)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041120, &type metadata for EditButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF08);
  }
  return result;
}

unint64_t sub_1B0FBC07C()
{
  unint64_t result;

  result = qword_1EEEDFF10;
  if (!qword_1EEEDFF10)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10410E8, &type metadata for EditButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF10);
  }
  return result;
}

unint64_t sub_1B0FBC0C0()
{
  unint64_t result;

  result = qword_1EEEDFF18;
  if (!qword_1EEEDFF18)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041148, &type metadata for EditButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF18);
  }
  return result;
}

uint64_t sub_1B0FBC104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F78AEC(a1, a2, a3, (void (*)(void))sub_1B0FBC110);
}

unint64_t sub_1B0FBC110()
{
  unint64_t result;

  result = qword_1EEEDFF20;
  if (!qword_1EEEDFF20)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10411B4, &type metadata for ButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF20);
  }
  return result;
}

uint64_t sub_1B0FBC154(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0F5FA20(a1, a2, a3, (uint64_t (*)(void))sub_1B0FBC170, (uint64_t (*)(void))sub_1B0FBC1B4, (uint64_t (*)(void))sub_1B0FBC1F8);
}

unint64_t sub_1B0FBC170()
{
  unint64_t result;

  result = qword_1EEEDFF28;
  if (!qword_1EEEDFF28)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041070, &type metadata for ButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF28);
  }
  return result;
}

unint64_t sub_1B0FBC1B4()
{
  unint64_t result;

  result = qword_1EEEDFF30;
  if (!qword_1EEEDFF30)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041038, &type metadata for ButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF30);
  }
  return result;
}

unint64_t sub_1B0FBC1F8()
{
  unint64_t result;

  result = qword_1EEEDFF38;
  if (!qword_1EEEDFF38)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041098, &type metadata for ButtonView);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF38);
  }
  return result;
}

uint64_t sub_1B0FBC23C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = sub_1B103461C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFF40);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FBC3DC();
  sub_1B1036278();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = v16;
    v11 = sub_1B103608C();
    if (v12)
    {
      v9 = v11;
    }
    else
    {
      sub_1B1034610();
      v9 = sub_1B1034604();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v15);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

unint64_t sub_1B0FBC3DC()
{
  unint64_t result;

  result = qword_1EEEDFF48;
  if (!qword_1EEEDFF48)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104140C, &type metadata for EditButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF48);
  }
  return result;
}

uint64_t sub_1B0FBC420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0FBC468()
{
  uint64_t v0;
  unsigned int v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  swift_release();
  swift_release();
  v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0FBC4F4()
{
  uint64_t v0;

  return sub_1B0FBB6B8((_QWORD *)(v0 + 16));
}

uint64_t sub_1B0FBC4FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16) + 32, a1);
}

unint64_t sub_1B0FBC50C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDFF60;
  if (!qword_1EEEDFF60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFF50);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFA58], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF60);
  }
  return result;
}

uint64_t sub_1B0FBC558()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1B0FBC594()
{
  unint64_t result;

  result = qword_1EEEDFF70;
  if (!qword_1EEEDFF70)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10413BC, &type metadata for ButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF70);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ButtonView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FBC624 + 4 * byte_1B1041005[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FBC658 + 4 * byte_1B1041000[v4]))();
}

uint64_t sub_1B0FBC658(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBC660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FBC668);
  return result;
}

uint64_t sub_1B0FBC674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FBC67CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FBC680(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBC688(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonView.CodingKeys()
{
  return &type metadata for ButtonView.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for EditButtonView.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FBC6E4 + 4 * byte_1B104100A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FBC704 + 4 * byte_1B104100F[v4]))();
}

_BYTE *sub_1B0FBC6E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FBC704(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FBC70C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FBC714(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FBC71C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FBC724(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EditButtonView.CodingKeys()
{
  return &type metadata for EditButtonView.CodingKeys;
}

uint64_t sub_1B0FBC740()
{
  return sub_1B0F524FC(&qword_1EEEDFF78, MEMORY[0x1E0CD8400], MEMORY[0x1E0CD83F0]);
}

uint64_t sub_1B0FBC76C()
{
  return MEMORY[0x1E0CDFD08];
}

unint64_t sub_1B0FBC77C()
{
  unint64_t result;

  result = qword_1EEEDFF80;
  if (!qword_1EEEDFF80)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10412A4, &type metadata for EditButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF80);
  }
  return result;
}

unint64_t sub_1B0FBC7C4()
{
  unint64_t result;

  result = qword_1EEEDFF88;
  if (!qword_1EEEDFF88)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041394, &type metadata for ButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF88);
  }
  return result;
}

unint64_t sub_1B0FBC80C()
{
  unint64_t result;

  result = qword_1EEEDFF90;
  if (!qword_1EEEDFF90)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10412CC, &type metadata for ButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF90);
  }
  return result;
}

unint64_t sub_1B0FBC854()
{
  unint64_t result;

  result = qword_1EEEDFF98;
  if (!qword_1EEEDFF98)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10412F4, &type metadata for ButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFF98);
  }
  return result;
}

unint64_t sub_1B0FBC89C()
{
  unint64_t result;

  result = qword_1EEEDFFA0;
  if (!qword_1EEEDFFA0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10411DC, &type metadata for EditButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFA0);
  }
  return result;
}

unint64_t sub_1B0FBC8E4()
{
  unint64_t result;

  result = qword_1EEEDFFA8;
  if (!qword_1EEEDFFA8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041204, &type metadata for EditButtonView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFA8);
  }
  return result;
}

uint64_t sub_1B0FBC928()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ButtonBorderShapeModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[17])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonBorderShapeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonBorderShapeModifier()
{
  return &type metadata for ButtonBorderShapeModifier;
}

void sub_1B0FBCA1C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v46 = a5;
  v28 = a3;
  v27[1] = a2;
  v36 = a1;
  v40 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFB8);
  v7 = sub_1B103497C();
  v8 = sub_1B1034ED4();
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFC0);
  v10 = sub_1B1034ED4();
  v31 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v30 = (char *)v27 - v12;
  v33 = *(_QWORD *)(v8 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v29 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v32 = (char *)v27 - v15;
  v38 = v16;
  v39 = v8;
  v17 = sub_1B1034ED4();
  v35 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v34 = (char *)v27 - v18;
  v19 = sub_1B1034A9C();
  v20 = MEMORY[0x1E0C80A78](v19);
  v41 = *(_QWORD *)(v7 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  v44 = v9;
  v45 = (char *)v27 - v22;
  v37 = v17;
  v23 = sub_1B1034ED4();
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = (char *)sub_1B0FBCC60 + 4 * word_1B10414A0[a4];
  v42 = v26;
  v43 = v24;
  __asm { BR              X10 }
}

uint64_t sub_1B0FBCC60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1[6] = v0;
  sub_1B1034A90();
  v8 = v1[21];
  sub_1B1035450();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v4);
  v9 = sub_1B0FBDC44();
  v1[28] = v8;
  v1[29] = v9;
  v10 = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v5, v1 + 28);
  v11 = v1[20];
  sub_1B0F6D824(v3, v5, v11);
  v12 = *(void (**)(uint64_t, uint64_t))(v1[16] + 8);
  v12(v3, v5);
  v1[16] = v12;
  sub_1B0F6609C(v11, v5, v3);
  v13 = v1[7];
  sub_1B0F60AEC(v3, v5);
  v12(v3, v5);
  v1[26] = v10;
  v1[27] = v10;
  v14 = MEMORY[0x1E0CDB8A0];
  v15 = v1[14];
  v16 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v15, v1 + 26);
  v17 = sub_1B0FBDC90();
  v1[24] = v16;
  v1[25] = v17;
  v18 = v1[13];
  v19 = MEMORY[0x1B5E15188](v14, v18, v1 + 24);
  v20 = v1[9];
  sub_1B0F60AEC(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v1[8] + 8))(v13, v15);
  v1[22] = v16;
  v1[23] = v19;
  v21 = v18;
  v22 = v14;
  v23 = v1[12];
  MEMORY[0x1B5E15188](v22, v23, v1 + 22);
  v24 = v1[6];
  v25 = v23;
  sub_1B0F60AEC(v20, v23);
  v26 = v20;
  v27 = v24;
  (*(void (**)(uint64_t, uint64_t))(v1[10] + 8))(v26, v23);
  ((void (*)(_QWORD, uint64_t))v1[16])(v1[20], v5);
  v28 = v1[15];
  v29 = sub_1B0FBDC44();
  *(_QWORD *)(v7 - 176) = v1[21];
  *(_QWORD *)(v7 - 168) = v29;
  v30 = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v5, v7 - 176);
  *(_QWORD *)(v7 - 192) = v30;
  *(_QWORD *)(v7 - 184) = v30;
  v31 = MEMORY[0x1E0CDB8A0];
  v32 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v15, v7 - 192);
  v33 = sub_1B0FBDC90();
  *(_QWORD *)(v7 - 208) = v32;
  *(_QWORD *)(v7 - 200) = v33;
  v34 = MEMORY[0x1B5E15188](v31, v21, v7 - 208);
  *(_QWORD *)(v7 - 224) = v32;
  *(_QWORD *)(v7 - 216) = v34;
  *(_QWORD *)(v7 - 240) = MEMORY[0x1B5E15188](v31, v25, v7 - 224);
  *(_QWORD *)(v7 - 232) = v33;
  v35 = v31;
  v36 = v1[18];
  MEMORY[0x1B5E15188](v35, v36, v7 - 240);
  sub_1B0F6609C(v27, v36, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[17] + 8))(v27, v36);
}

uint64_t sub_1B0FBD640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1B1035840();
}

uint64_t sub_1B0FBD6BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B0FBD6F4 + 4 * byte_1B10414AA[a1]))(0xD000000000000010, 0x80000001B104C400);
}

uint64_t sub_1B0FBD6F4()
{
  return 0x6974616D6F747561;
}

uint64_t sub_1B0FBD710()
{
  return 0x656C7573706163;
}

uint64_t sub_1B0FBD728()
{
  return 0x656C63726963;
}

uint64_t sub_1B0FBD73C()
{
  return 0x6F426E6F74747562;
}

uint64_t sub_1B0FBD75C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x737569646172;
  else
    return 0x6570616873;
}

void sub_1B0FBD78C(char *a1)
{
  sub_1B100CDC8(*a1);
}

void sub_1B0FBD798()
{
  char *v0;

  sub_1B1010928(*v0);
}

void sub_1B0FBD7A0(uint64_t a1)
{
  char *v1;

  sub_1B10122EC(a1, *v1);
}

void sub_1B0FBD7A8(uint64_t a1)
{
  char *v1;

  sub_1B1014FE0(a1, *v1);
}

uint64_t sub_1B0FBD7B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FBE1F8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FBD7DC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FBD6BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FBD804()
{
  sub_1B0FBE1B4();
  return sub_1B1035CB4();
}

uint64_t sub_1B0FBD860()
{
  sub_1B0FBE1B4();
  return sub_1B1035CA8();
}

uint64_t sub_1B0FBD8AC(char *a1, char *a2)
{
  return sub_1B100C724(*a1, *a2);
}

uint64_t sub_1B0FBD8B8()
{
  return sub_1B1010A0C();
}

uint64_t sub_1B0FBD8C0()
{
  return sub_1B1011FA4();
}

uint64_t sub_1B0FBD8C8()
{
  return sub_1B1015520();
}

uint64_t sub_1B0FBD8D0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FBD92C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FBD75C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FBD954()
{
  char *v0;

  return sub_1B0FBD75C(*v0);
}

uint64_t sub_1B0FBD95C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B0FBD9BC()
{
  sub_1B0FBDE74();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBD9E4()
{
  sub_1B0FBDE74();
  return sub_1B10362C0();
}

void sub_1B0FBDA0C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];

  v17 = *(_QWORD *)(v2 + 8);
  v4 = a1[4];
  v15 = *(_BYTE *)v2;
  v16 = *(unsigned __int8 *)(v2 + 16);
  v14 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFB8);
  v5 = sub_1B103497C();
  v6 = sub_1B1034ED4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFC0);
  v7 = sub_1B1034ED4();
  v8 = sub_1B1034ED4();
  v9 = sub_1B1034ED4();
  a2[3] = v9;
  v22[0] = v4;
  v22[1] = sub_1B0FBDC44();
  v21[0] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v5, v22);
  v21[1] = v21[0];
  v10 = MEMORY[0x1E0CDB8A0];
  v11 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDB8A0], v6, v21);
  v12 = sub_1B0FBDC90();
  v20[0] = v11;
  v20[1] = v12;
  v19[0] = v11;
  v19[1] = MEMORY[0x1B5E15188](v10, v7, v20);
  v18[0] = MEMORY[0x1B5E15188](v10, v8, v19);
  v18[1] = v12;
  a2[4] = MEMORY[0x1B5E15188](v10, v9, v18);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  sub_1B0FBCA1C((uint64_t)v14, v17, v16, v15, v4, (uint64_t)boxed_opaque_existential_1);
}

uint64_t sub_1B0FBDBA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B0FBDCEC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

unint64_t sub_1B0FBDBDC(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FBDC00();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FBDC00()
{
  unint64_t result;

  result = qword_1EEEDFFB0;
  if (!qword_1EEEDFFB0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10414EC, &type metadata for ButtonBorderShapeModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFB0);
  }
  return result;
}

unint64_t sub_1B0FBDC44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDFFC8;
  if (!qword_1EEEDFFC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFB8);
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFC8);
  }
  return result;
}

unint64_t sub_1B0FBDC90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEEDFFD0;
  if (!qword_1EEEDFFD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEDFFC0);
    v2 = MEMORY[0x1E0CDFD08];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CE0798], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFD0);
  }
  return result;
}

uint64_t sub_1B0FBDCEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[32];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDFFD8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FBDE74();
  sub_1B1036278();
  v8[30] = 0;
  sub_1B0FBDEB8();
  sub_1B10360BC();
  v6 = v8[31];
  v8[15] = 1;
  sub_1B0FB09DC();
  sub_1B10360A4();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t sub_1B0FBDE74()
{
  unint64_t result;

  result = qword_1EEEDFFE0;
  if (!qword_1EEEDFFE0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041738, &type metadata for ButtonBorderShapeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFE0);
  }
  return result;
}

unint64_t sub_1B0FBDEB8()
{
  unint64_t result;

  result = qword_1EEEDFFE8;
  if (!qword_1EEEDFFE8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041710, &type metadata for ButtonBorderShapeType);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFE8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ButtonBorderShapeModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FBDF48 + 4 * byte_1B10414B4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FBDF7C + 4 * byte_1B10414AF[v4]))();
}

uint64_t sub_1B0FBDF7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBDF84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FBDF8CLL);
  return result;
}

uint64_t sub_1B0FBDF98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FBDFA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FBDFA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBDFAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonBorderShapeModifier.CodingKeys()
{
  return &type metadata for ButtonBorderShapeModifier.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ButtonBorderShapeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0FBE014 + 4 * byte_1B10414BE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0FBE048 + 4 * byte_1B10414B9[v4]))();
}

uint64_t sub_1B0FBE048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBE050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FBE058);
  return result;
}

uint64_t sub_1B0FBE064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FBE06CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0FBE070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FBE078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonBorderShapeType()
{
  return &type metadata for ButtonBorderShapeType;
}

unint64_t sub_1B0FBE098()
{
  unint64_t result;

  result = qword_1EEEDFFF0;
  if (!qword_1EEEDFFF0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10415F8, &type metadata for ButtonBorderShapeType);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFF0);
  }
  return result;
}

unint64_t sub_1B0FBE0E0()
{
  unint64_t result;

  result = qword_1EEEDFFF8;
  if (!qword_1EEEDFFF8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10416E8, &type metadata for ButtonBorderShapeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEDFFF8);
  }
  return result;
}

unint64_t sub_1B0FBE128()
{
  unint64_t result;

  result = qword_1EEEE0000;
  if (!qword_1EEEE0000)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041620, &type metadata for ButtonBorderShapeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0000);
  }
  return result;
}

unint64_t sub_1B0FBE170()
{
  unint64_t result;

  result = qword_1EEEE0008;
  if (!qword_1EEEE0008)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041648, &type metadata for ButtonBorderShapeModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0008);
  }
  return result;
}

unint64_t sub_1B0FBE1B4()
{
  unint64_t result;

  result = qword_1EEEE0010;
  if (!qword_1EEEE0010)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041580, &type metadata for ButtonBorderShapeType);
    atomic_store(result, (unint64_t *)&qword_1EEEE0010);
  }
  return result;
}

uint64_t sub_1B0FBE1F8()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t initializeWithCopy for ScrollContentBackgroundModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B0FBE29C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B0F56B9C);
}

uint64_t *assignWithCopy for ScrollContentBackgroundModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B0FBE310(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B0F56B9C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F56ADC);
}

uint64_t *assignWithTake for ScrollContentBackgroundModifier(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0FBE390(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F56ADC);
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundModifier()
{
  return &type metadata for ScrollContentBackgroundModifier;
}

uint64_t destroy for ListSectionSpacingModifier(uint64_t a1)
{
  return sub_1B0F6C7D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ListSectionSpacingModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B0FBE29C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B0F6C708);
}

uint64_t sub_1B0FBE29C(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = *((unsigned __int8 *)a2 + 24);
  a4(*a2, v6, v7, v8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  return a1;
}

uint64_t *assignWithCopy for ListSectionSpacingModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B0FBE310(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B0F6C708, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F6C7D4);
}

uint64_t *sub_1B0FBE310(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = *((unsigned __int8 *)a2 + 24);
  a4(*a2, v8, v9, v10);
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  v14 = *((unsigned __int8 *)a1 + 24);
  *((_BYTE *)a1 + 24) = v10;
  a5(v11, v12, v13, v14);
  return a1;
}

uint64_t *assignWithTake for ListSectionSpacingModifier(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0FBE390(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F6C7D4);
}

uint64_t *sub_1B0FBE390(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *a1;
  v10 = a1[1];
  v9 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v6;
  v11 = *((unsigned __int8 *)a1 + 24);
  *((_BYTE *)a1 + 24) = v7;
  a4(v8, v10, v9, v11);
  return a1;
}

ValueMetadata *type metadata accessor for ListSectionSpacingModifier()
{
  return &type metadata for ListSectionSpacingModifier;
}

ValueMetadata *type metadata accessor for ListRowBackgroundModifier()
{
  return &type metadata for ListRowBackgroundModifier;
}

uint64_t destroy for ListStyleModifier(uint64_t a1)
{
  sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return sub_1B0F5E6A0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for ListStyleModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_1B0F5E604(v8, v9, v10, v2);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for ListStyleModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F56ADC(v8, v9, v10, v11);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_1B0F5E604(v12, v13, v14, v2);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v2;
  sub_1B0F5E6A0(v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ListStyleModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F5E6A0(v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListStyleModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListStyleModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListStyleModifier()
{
  return &type metadata for ListStyleModifier;
}

uint64_t destroy for ListRowSeparatorModifier(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFD)
    result = sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 <= 0xFD)
    return sub_1B0F56ADC(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v3);
  return result;
}

uint64_t initializeWithCopy for ListRowSeparatorModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFD)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B0F56B9C(*(_QWORD *)a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  v8 = *(unsigned __int8 *)(a2 + 56);
  if (v8 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    sub_1B0F56B9C(v9, v10, v11, v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  return a1;
}

uint64_t assignWithCopy for ListRowSeparatorModifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  _OWORD *v17;
  _OWORD *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFDu)
  {
    if (v4 <= 0xFD)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v11, v12, v4);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v16 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v4;
      sub_1B0F56ADC(v13, v14, v15, v16);
    }
    else
    {
      sub_1B0F5EA14(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
    }
  }
  else if (v4 <= 0xFD)
  {
    v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_1B0F56B9C(*(_QWORD *)a2, v8, v9, v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    v5 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v5;
  }
  v17 = (_OWORD *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v19 <= 0xFD)
    {
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = *((_QWORD *)a2 + 6);
      sub_1B0F56B9C(v25, v26, v27, v19);
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_QWORD *)(a1 + 40);
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v27;
      v31 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v19;
      sub_1B0F56ADC(v28, v29, v30, v31);
    }
    else
    {
      sub_1B0F5EA14(a1 + 32);
      v21 = *(__int128 *)((char *)a2 + 41);
      *v17 = *v18;
      *(_OWORD *)(a1 + 41) = v21;
    }
  }
  else if (v19 <= 0xFD)
  {
    v22 = *((_QWORD *)a2 + 4);
    v23 = *((_QWORD *)a2 + 5);
    v24 = *((_QWORD *)a2 + 6);
    sub_1B0F56B9C(v22, v23, v24, v19);
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    *(_BYTE *)(a1 + 56) = v19;
  }
  else
  {
    v20 = *v18;
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *v17 = v20;
  }
  return a1;
}

uint64_t assignWithTake for ListRowSeparatorModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 > 0xFD)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 > 0xFD)
  {
    sub_1B0F5EA14(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v7, v8, v9, v4);
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 <= 0xFD)
  {
    v11 = *(unsigned __int8 *)(a2 + 56);
    if (v11 <= 0xFD)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 56) = v11;
      sub_1B0F56ADC(v13, v14, v15, v10);
      return a1;
    }
    sub_1B0F5EA14(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowSeparatorModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 125);
  v3 = (*(unsigned __int8 *)(a1 + 24) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x1F));
  v4 = v3 ^ 0x7F;
  v5 = 126 - v3;
  if (v4 >= 0x7D)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = ((a2 ^ 0x7F) >> 1) & 0xFE | ((a2 ^ 0x7F) << 6);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowSeparatorModifier()
{
  return &type metadata for ListRowSeparatorModifier;
}

ValueMetadata *type metadata accessor for ListRowInsetsModifier()
{
  return &type metadata for ListRowInsetsModifier;
}

double sub_1B0FBEB2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  double v9;
  char v10;
  double v11;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = a1;
  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v16 = *(_QWORD *)(v1 + 72);
  v17 = *(_QWORD *)(v1 + 64);
  v15 = *(_QWORD *)(v1 + 80);
  v20 = *(_QWORD *)(v1 + 104);
  v21 = *(_QWORD *)(v1 + 96);
  v19 = *(_QWORD *)(v1 + 112);
  v8 = *(_BYTE *)(v1 + 56);
  v14 = *(_BYTE *)(v1 + 88);
  v18 = *(_BYTE *)(v1 + 120);
  v22 = *(_QWORD *)(v1 + 16);
  v23 = *(_BYTE *)(v1 + 24);
  sub_1B0F6C708(*(_QWORD *)v1, v3, v22, v23);
  v9 = COERCE_DOUBLE(sub_1B0FA70A4(v2));
  LOBYTE(v2) = v10;
  sub_1B0F6C7D4(v4, v3, v22, v23);
  if ((v2 & 1) != 0)
    v11 = 0.0;
  else
    v11 = v9;
  sub_1B0F6C708(v5, v6, v7, v8);
  sub_1B0FA70A4(a1);
  sub_1B0F6C7D4(v5, v6, v7, v8);
  sub_1B0F6C708(v17, v16, v15, v14);
  sub_1B0FA70A4(a1);
  sub_1B0F6C7D4(v17, v16, v15, v14);
  sub_1B0F6C708(v21, v20, v19, v18);
  sub_1B0FA70A4(a1);
  sub_1B0F6C7D4(v21, v20, v19, v18);
  return v11;
}

uint64_t sub_1B0FBED50@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[25];
  _QWORD v13[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    sub_1B0FC1110();
    sub_1B1036164();
    a2[4] = v10;
    a2[5] = v11;
    a2[6] = *(_OWORD *)v12;
    *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)&v12[9];
    *a2 = v6;
    a2[1] = v7;
    a2[2] = v8;
    a2[3] = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FBEE44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD *v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];
  char v21;
  _OWORD v22[6];
  _OWORD v23[2];

  v6 = v3[4];
  v7 = v3[6];
  v22[5] = v3[5];
  v23[0] = v7;
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)v3 + 105);
  v8 = v3[1];
  v22[0] = *v3;
  v22[1] = v8;
  v9 = v3[3];
  v22[2] = v3[2];
  v22[3] = v9;
  v22[4] = v6;
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FA49D0((uint64_t)v22, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F6C708);
  v11 = sub_1B0FBEB2C(a2);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_1B0FA49D0((uint64_t)v22, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B0F6C7D4);
  *(double *)&v20[2] = v11;
  v20[3] = v13;
  v20[4] = v15;
  v20[5] = v17;
  v21 = 0;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0048);
  v18 = sub_1B103497C();
  a3[3] = v18;
  v20[0] = v10;
  v20[1] = sub_1B0F5A7E4(&qword_1EEEE0050, &qword_1EEEE0048, MEMORY[0x1E0CDBEF0]);
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v18, v20);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B10353CC();
}

uint64_t sub_1B0FBEF98@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B0FBED50(a1, a2);
}

uint64_t sub_1B0FBEFAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0130);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC1D90();
  sub_1B1036278();
  if (!v2)
  {
    v37 = 0;
    sub_1B0F7E5F8();
    sub_1B10360A4();
    if (v35 < 0xFEu)
    {
      v36 = v35;
      v31 = *((_QWORD *)&v33 + 1);
      v32 = v33;
      v30 = v34;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v30 = 0;
      v36 = 0;
    }
    v37 = 1;
    sub_1B10360A4();
    if (v35 < 0xFEu)
    {
      v29 = v35;
      v27 = *((_QWORD *)&v33 + 1);
      v28 = v33;
      v26 = v34;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v29 = 0;
    }
    v37 = 2;
    sub_1B10360A4();
    v9 = v6;
    if (v35 < 0xFEu)
    {
      v25 = v35;
      v10 = v34;
      v24 = v33;
    }
    else
    {
      v24 = 0uLL;
      v10 = 0;
      v25 = 0;
    }
    v37 = 3;
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    v11 = v35;
    v12 = v36;
    v13 = v31;
    v14 = v30;
    v15 = v29;
    v17 = v27;
    v16 = v28;
    v18 = v26;
    v19 = v24;
    v20 = v25;
    if (v35 < 0xFEu)
    {
      v22 = v33;
      v21 = v34;
    }
    else
    {
      v21 = 0;
      v11 = 0;
      v22 = 0uLL;
    }
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
    *(_BYTE *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 40) = v17;
    *(_QWORD *)(a2 + 48) = v18;
    *(_BYTE *)(a2 + 56) = v15;
    *(_OWORD *)(a2 + 64) = v19;
    *(_QWORD *)(a2 + 80) = v10;
    *(_BYTE *)(a2 + 88) = v20;
    *(_OWORD *)(a2 + 96) = v22;
    *(_QWORD *)(a2 + 112) = v21;
    *(_BYTE *)(a2 + 120) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FBF2E0(char a1)
{
  return qword_1B1041FC8[a1];
}

uint64_t sub_1B0FBF300(char *a1, char *a2)
{
  return sub_1B100CFE4(*a1, *a2);
}

uint64_t sub_1B0FBF30C()
{
  return sub_1B10123EC();
}

uint64_t sub_1B0FBF314()
{
  return sub_1B1014F18();
}

uint64_t sub_1B0FBF31C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1A40();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FBF348@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FBF2E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FBF370()
{
  char *v0;

  return sub_1B0FBF2E0(*v0);
}

uint64_t sub_1B0FBF378@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1A40();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FBF39C()
{
  sub_1B0FC1D90();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBF3C4()
{
  sub_1B0FC1D90();
  return sub_1B10362C0();
}

uint64_t sub_1B0FBF3EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FBEFAC(a1, a2);
}

uint64_t sub_1B0FBF400@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v6 = *(_QWORD *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unsigned __int8 *)(v3 + 24);
  v10 = *(_QWORD *)(v3 + 48);
  v17 = *(_QWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  v11 = *(unsigned __int8 *)(v3 + 56);
  v12 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v25 = v12;
  if (v9 <= 0xFD)
  {
    v21 = v6;
    v22 = v7;
    v23 = v8;
    v24 = v9;
    sub_1B0F56B9C(v6, v7, v8, v9);
    StringResolvable.resolved(with:)(a2);
    if (v4)
      return sub_1B0F56B88(v6, v7, v8, v9);
    v16 = a2;
    sub_1B0F56B88(v6, v7, v8, v9);
  }
  else
  {
    v16 = a2;
  }
  sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v11 <= 0xFD)
  {
    v21 = v17;
    v22 = v18;
    v23 = v10;
    v24 = v11;
    sub_1B0F56B9C(v17, v18, v10, v11);
    StringResolvable.resolved(with:)(v16);
    if (v4)
      return sub_1B0F56B88(v17, v18, v10, v11);
    sub_1B0F56B88(v17, v18, v10, v11);
  }
  v14 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v14 == 2)
    goto LABEL_14;
  if (v14 == 1)
  {
    sub_1B1034814();
    goto LABEL_16;
  }
  if (v14)
LABEL_14:
    sub_1B10347FC();
  else
    sub_1B1034808();
LABEL_16:
  v15 = v25;
  v21 = v25;
  v22 = v19;
  a3[3] = MEMORY[0x1B5E15134](0, &v21, MEMORY[0x1E0CDE618], 0);
  v21 = v15;
  v22 = v19;
  a3[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035444();
}

uint64_t sub_1B0FBF688(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7365676465;
  else
    return 0x696C696269736976;
}

uint64_t sub_1B0FBF6C8()
{
  char *v0;

  return sub_1B0FBF688(*v0);
}

uint64_t sub_1B0FBF6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1A88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0FBF6F4()
{
  sub_1B0FC10CC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FBF71C()
{
  sub_1B0FC10CC();
  return sub_1B10362C0();
}

uint64_t sub_1B0FBF744@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE00B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC10CC();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = 0;
  sub_1B0F56A98();
  sub_1B10360A4();
  v9 = v27;
  v31 = 1;
  v24 = v28;
  v25 = v26;
  v30 = v29;
  sub_1B0F56C04(v26, v27, v28, v29);
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v26;
  v22 = v27;
  v23 = v26;
  v11 = v28;
  v21 = v28;
  HIDWORD(v20) = v29;
  v12 = v24;
  v13 = v25;
  v14 = v30;
  sub_1B0F56C04(v25, v9, v24, v30);
  v15 = v10;
  v16 = v22;
  v17 = v11;
  LOBYTE(v11) = BYTE4(v20);
  sub_1B0F56C04(v15, v22, v17, BYTE4(v20));
  sub_1B0F56B88(v13, v9, v12, v14);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v16;
  v18 = v21;
  *(_QWORD *)(a2 + 48) = v21;
  *(_BYTE *)(a2 + 56) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F56B88(v13, v9, v12, v14);
  return sub_1B0F56B88(v23, v22, v18, v11);
}

uint64_t sub_1B0FBF9B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FBF400(a1, a2, a3);
}

uint64_t sub_1B0FBF9CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FBF744(a1, a2);
}

void sub_1B0FBF9E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v47 = a1;
  v52 = a3;
  v6 = sub_1B1034A24();
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B10349E8();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8);
  v35 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B1034FC4();
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x1E0C80A78](v10);
  v32 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1B10348A4();
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v29 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1B10348F8();
  v27[2] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v27[1] = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1B10349C4();
  v42 = *(_QWORD *)(v14 - 8);
  v43 = v14;
  MEMORY[0x1E0C80A78](v14);
  v41 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)v3;
  v17 = *(_QWORD *)(v3 + 8);
  v18 = *(_QWORD *)(v3 + 16);
  v19 = *(_BYTE *)(v3 + 24);
  v20 = *(_QWORD *)(v3 + 32);
  v21 = *(_QWORD *)(v3 + 48);
  v44 = *(_QWORD *)(v3 + 40);
  v45 = v20;
  v22 = *(_BYTE *)(v3 + 56);
  v48 = v16;
  v49 = v17;
  v50 = v18;
  v51 = v19;
  sub_1B0F56B9C(v16, v17, v18, v19);
  v46 = a2;
  StringResolvable.resolved(with:)(a2);
  if (v4)

  sub_1B0F56ADC(v16, v17, v18, v19);
  v23 = sub_1B0FC0FB8();
  if (v23 == 7)
    v24 = 0;
  else
    v24 = v23;
  v26 = v44;
  v25 = v45;
  sub_1B0F5E604(v45, v44, v21, v22);
  sub_1B0FD7528(v46, v25, v26, v21, v22);
  sub_1B0F5E6A0(v25, v26, v21, v22);
  __asm { BR              X10 }
}

uint64_t sub_1B0FBFCC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v1 = *(_QWORD **)(v0 - 128);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = *(_QWORD *)(v0 - 176);
  sub_1B10349B8();
  v5 = *(_QWORD *)(v0 - 160);
  *(_QWORD *)(v0 - 120) = v2;
  *(_QWORD *)(v0 - 112) = v5;
  v6 = MEMORY[0x1E0CD9E30];
  *(_QWORD *)(v0 - 104) = v3;
  *(_QWORD *)(v0 - 96) = v6;
  v7 = MEMORY[0x1B5E15134](0, v0 - 120, MEMORY[0x1E0CDF2C8], 0);
  v8 = *(uint64_t **)(v0 - 72);
  v8[3] = v7;
  *(_QWORD *)(v0 - 120) = v2;
  *(_QWORD *)(v0 - 112) = v5;
  *(_QWORD *)(v0 - 104) = v3;
  *(_QWORD *)(v0 - 96) = v6;
  v8[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(v8);
  sub_1B103566C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 168) + 8))(v4, v5);
}

uint64_t sub_1B0FC00E0(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000018;
  else
    return 0x656C797473;
}

uint64_t sub_1B0FC0118()
{
  char *v0;

  return sub_1B0FC00E0(*v0);
}

uint64_t sub_1B0FC0120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1B70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0FC0144()
{
  sub_1B0FC1088();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC016C()
{
  sub_1B0FC1088();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC0194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE00A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC1088();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v37 = 0;
  sub_1B0F56A98();
  sub_1B10360BC();
  v27 = a2;
  v10 = v32;
  v11 = v33;
  v31 = v34;
  v12 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
  v37 = 1;
  v29 = v11;
  v30 = v10;
  v13 = v11;
  v14 = v31;
  v36 = v12;
  sub_1B0F56B9C(v10, v13, v31, v12);
  sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE7F0, &qword_1EEEDE7E8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v36;
  v16 = v14;
  v18 = v29;
  v17 = v30;
  v19 = v27;
  if (v35 == 255)
  {
    v20 = 0;
    v26 = 0;
    v28 = 0;
    v25 = 0;
  }
  else
  {
    v28 = v34;
    v25 = v35 & 1;
    v20 = v32;
    v26 = v33;
  }
  sub_1B0F56B9C(v30, v29, v16, v36);
  v31 = v20;
  v21 = v25;
  sub_1B0F5E604(v20, v26, v28, v25);
  sub_1B0F56ADC(v17, v18, v16, v15);
  *(_QWORD *)v19 = v17;
  *(_QWORD *)(v19 + 8) = v18;
  *(_QWORD *)(v19 + 16) = v16;
  *(_BYTE *)(v19 + 24) = v15;
  *(_QWORD *)(v19 + 32) = v20;
  v22 = v26;
  v23 = v28;
  *(_QWORD *)(v19 + 40) = v26;
  *(_QWORD *)(v19 + 48) = v23;
  *(_BYTE *)(v19 + 56) = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1B0F56ADC(v17, v18, v16, v15);
  return sub_1B0F5E6A0(v31, v22, v28, v21);
}

void sub_1B0FC0474(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1B0FBF9E0(a1, a2, a3);
}

uint64_t sub_1B0FC0488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC0194(a1, a2);
}

uint64_t sub_1B0FC049C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    sub_1B0F64238();
    sub_1B1036164();
    *(_OWORD *)(a2 + 64) = v10;
    *(_OWORD *)(a2 + 80) = v11;
    *(_OWORD *)(a2 + 96) = v12;
    *(_QWORD *)(a2 + 112) = v13;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FC0584@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _BYTE v9[120];

  v3 = v2;
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0F641B8(v3, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0058);
  v6 = sub_1B103497C();
  a2[3] = v6;
  v8[0] = v5;
  v8[1] = sub_1B0F5A7E4(&qword_1EEEE0060, &qword_1EEEE0058, MEMORY[0x1E0CDBEF0]);
  a2[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v6, v8);
  __swift_allocate_boxed_opaque_existential_1(a2);
  sub_1B0F64174();
  sub_1B103545C();
  return sub_1B0F78FC4((uint64_t)v9);
}

uint64_t sub_1B0FC0680@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC049C(a1, a2);
}

uint64_t sub_1B0FC06A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1C4C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B0FC06C8()
{
  sub_1B0FC1044();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC06F0()
{
  sub_1B0FC1044();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC0718@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0098);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC1044();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F7E5F8();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FC0848@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[5];
  char v17;

  v6 = *(_QWORD *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = a1[4];
  v10 = *(_BYTE *)(v3 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16[2] = v6;
  v16[3] = v7;
  v16[4] = v8;
  v17 = v10;
  sub_1B0F6C708(v6, v7, v8, v10);
  sub_1B0FA70A4(a2);
  sub_1B0F6C7D4(v6, v7, v8, v10);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0068);
  v11 = sub_1B103497C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0070);
  v12 = sub_1B103497C();
  a3[3] = v12;
  v16[0] = v9;
  v16[1] = sub_1B0F5A7E4(&qword_1EEEE0078, &qword_1EEEE0068, MEMORY[0x1E0CDBEF0]);
  v13 = MEMORY[0x1E0CD9C20];
  v15[0] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v11, v16);
  v15[1] = sub_1B0F5A7E4(&qword_1EEEE0080, &qword_1EEEE0070, MEMORY[0x1E0CDCF80]);
  a3[4] = MEMORY[0x1B5E15188](v13, v12, v15);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035474();
}

uint64_t sub_1B0FC09E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC0718(a1, a2);
}

uint64_t sub_1B0FC09FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  sub_1B0F56B9C(v8, v9, v10, v11);
  StringResolvable.resolved(with:)(a2);
  if (v4)
    return sub_1B0F56ADC(v8, v9, v10, v11);
  sub_1B0F56ADC(v8, v9, v10, v11);
  sub_1B103605C();
  swift_bridgeObjectRelease();
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = v13;
  v16 = v14;
  a3[3] = MEMORY[0x1B5E15134](0, &v15, MEMORY[0x1E0CDEC60], 0);
  v15 = v13;
  v16 = v14;
  a3[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a3);
  return sub_1B1035510();
}

uint64_t sub_1B0FC0B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC1CE8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B0FC0BA0()
{
  sub_1B0FC1000();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC0BC8()
{
  sub_1B0FC1000();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC0BF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0088);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC1000();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F56A98();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FC0D20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FC09FC(a1, a2, a3);
}

uint64_t sub_1B0FC0D34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC0BF0(a1, a2);
}

unint64_t sub_1B0FC0D48(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0D6C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0D6C()
{
  unint64_t result;

  result = qword_1EEEE0018;
  if (!qword_1EEEE0018)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041940, &type metadata for ScrollContentBackgroundModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0018);
  }
  return result;
}

unint64_t sub_1B0FC0DB0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0DD4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0DD4()
{
  unint64_t result;

  result = qword_1EEEE0020;
  if (!qword_1EEEE0020)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041918, &type metadata for ListSectionSpacingModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0020);
  }
  return result;
}

unint64_t sub_1B0FC0E18(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0E3C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0E3C()
{
  unint64_t result;

  result = qword_1EEEE0028;
  if (!qword_1EEEE0028)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10418F0, &type metadata for ListRowBackgroundModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0028);
  }
  return result;
}

unint64_t sub_1B0FC0E80(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0EA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0EA4()
{
  unint64_t result;

  result = qword_1EEEE0030;
  if (!qword_1EEEE0030)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10418C8, &type metadata for ListStyleModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0030);
  }
  return result;
}

unint64_t sub_1B0FC0EE8(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0F0C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0F0C()
{
  unint64_t result;

  result = qword_1EEEE0038;
  if (!qword_1EEEE0038)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10418A0, &type metadata for ListRowSeparatorModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0038);
  }
  return result;
}

unint64_t sub_1B0FC0F50(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC0F74();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC0F74()
{
  unint64_t result;

  result = qword_1EEEE0040;
  if (!qword_1EEEE0040)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041878, &type metadata for ListRowInsetsModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0040);
  }
  return result;
}

uint64_t sub_1B0FC0FB8()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

unint64_t sub_1B0FC1000()
{
  unint64_t result;

  result = qword_1EEEE0090;
  if (!qword_1EEEE0090)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041E30, &type metadata for ScrollContentBackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0090);
  }
  return result;
}

unint64_t sub_1B0FC1044()
{
  unint64_t result;

  result = qword_1EEEE00A0;
  if (!qword_1EEEE00A0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041DE0, &type metadata for ListSectionSpacingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00A0);
  }
  return result;
}

unint64_t sub_1B0FC1088()
{
  unint64_t result;

  result = qword_1EEEE00B0;
  if (!qword_1EEEE00B0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041D90, &type metadata for ListStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00B0);
  }
  return result;
}

unint64_t sub_1B0FC10CC()
{
  unint64_t result;

  result = qword_1EEEE00C0;
  if (!qword_1EEEE00C0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041D40, &type metadata for ListRowSeparatorModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00C0);
  }
  return result;
}

unint64_t sub_1B0FC1110()
{
  unint64_t result;

  result = qword_1EEEE00C8;
  if (!qword_1EEEE00C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041D18, &type metadata for EdgeInsetsResolvable);
    atomic_store(result, (unint64_t *)&qword_1EEEE00C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowSeparatorModifier.CodingKeys()
{
  return &type metadata for ListRowSeparatorModifier.CodingKeys;
}

uint64_t _s6LiftUI24ListRowSeparatorModifierV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0FC11B4 + 4 * byte_1B104179C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0FC11E8 + 4 * byte_1B1041797[v4]))();
}

uint64_t sub_1B0FC11E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC11F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FC11F8);
  return result;
}

uint64_t sub_1B0FC1204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FC120CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0FC1210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC1218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListStyleModifier.CodingKeys()
{
  return &type metadata for ListStyleModifier.CodingKeys;
}

ValueMetadata *type metadata accessor for ListSectionSpacingModifier.CodingKeys()
{
  return &type metadata for ListSectionSpacingModifier.CodingKeys;
}

uint64_t _s6LiftUI26ListSectionSpacingModifierV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FC1288 + 4 * byte_1B10417A1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FC12A8 + 4 * byte_1B10417A6[v4]))();
}

_BYTE *sub_1B0FC1288(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FC12A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FC12B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FC12B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FC12C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FC12C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundModifier.CodingKeys()
{
  return &type metadata for ScrollContentBackgroundModifier.CodingKeys;
}

uint64_t _s6LiftUI20EdgeInsetsResolvableVwxx_0(uint64_t a1)
{
  sub_1B0F6C7D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_1B0F6C7D4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  sub_1B0F6C7D4(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  return sub_1B0F6C7D4(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
}

uint64_t _s6LiftUI20EdgeInsetsResolvableVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C708(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  v11 = *(_BYTE *)(v2 + 56);
  sub_1B0F6C708(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  v14 = *(_QWORD *)(v2 + 80);
  v15 = *(_BYTE *)(v2 + 88);
  sub_1B0F6C708(v12, v13, v14, v15);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(v2 + 96);
  v17 = *(_QWORD *)(v2 + 104);
  v18 = *(_QWORD *)(v2 + 112);
  LOBYTE(v2) = *(_BYTE *)(v2 + 120);
  sub_1B0F6C708(v16, v17, v18, v2);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_BYTE *)(a1 + 120) = v2;
  return a1;
}

uint64_t _s6LiftUI20EdgeInsetsResolvableVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F6C708(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F6C7D4(v8, v9, v10, v11);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(_BYTE *)(v2 + 56);
  sub_1B0F6C708(v12, v13, v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  v19 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v15;
  sub_1B0F6C7D4(v16, v17, v18, v19);
  v20 = *(_QWORD *)(v2 + 64);
  v21 = *(_QWORD *)(v2 + 72);
  v22 = *(_QWORD *)(v2 + 80);
  v23 = *(_BYTE *)(v2 + 88);
  sub_1B0F6C708(v20, v21, v22, v23);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  v26 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v22;
  v27 = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v23;
  sub_1B0F6C7D4(v24, v25, v26, v27);
  v28 = *(_QWORD *)(v2 + 96);
  v29 = *(_QWORD *)(v2 + 104);
  v30 = *(_QWORD *)(v2 + 112);
  LOBYTE(v2) = *(_BYTE *)(v2 + 120);
  sub_1B0F6C708(v28, v29, v30, v2);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = *(_QWORD *)(a1 + 104);
  v33 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  v34 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v2;
  sub_1B0F6C7D4(v31, v32, v33, v34);
  return a1;
}

uint64_t _s6LiftUI20EdgeInsetsResolvableVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F6C7D4(v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v10;
  v15 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v11;
  sub_1B0F6C7D4(v12, v13, v14, v15);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_BYTE *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v16;
  v21 = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v17;
  sub_1B0F6C7D4(v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 112);
  v23 = *(_BYTE *)(a2 + 120);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v22;
  v27 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v23;
  sub_1B0F6C7D4(v24, v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for RGBAColor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 24) & 0x7E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RGBAColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeInsetsResolvable()
{
  return &type metadata for EdgeInsetsResolvable;
}

unint64_t sub_1B0FC16E4()
{
  unint64_t result;

  result = qword_1EEEE00D0;
  if (!qword_1EEEE00D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041AC8, &type metadata for ScrollContentBackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00D0);
  }
  return result;
}

unint64_t sub_1B0FC172C()
{
  unint64_t result;

  result = qword_1EEEE00D8;
  if (!qword_1EEEE00D8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041B80, &type metadata for ListSectionSpacingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00D8);
  }
  return result;
}

unint64_t sub_1B0FC1774()
{
  unint64_t result;

  result = qword_1EEEE00E0;
  if (!qword_1EEEE00E0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041C38, &type metadata for ListStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00E0);
  }
  return result;
}

unint64_t sub_1B0FC17BC()
{
  unint64_t result;

  result = qword_1EEEE00E8;
  if (!qword_1EEEE00E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041CF0, &type metadata for ListRowSeparatorModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00E8);
  }
  return result;
}

unint64_t sub_1B0FC1804()
{
  unint64_t result;

  result = qword_1EEEE00F0;
  if (!qword_1EEEE00F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041C60, &type metadata for ListRowSeparatorModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00F0);
  }
  return result;
}

unint64_t sub_1B0FC184C()
{
  unint64_t result;

  result = qword_1EEEE00F8;
  if (!qword_1EEEE00F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041C88, &type metadata for ListRowSeparatorModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE00F8);
  }
  return result;
}

unint64_t sub_1B0FC1894()
{
  unint64_t result;

  result = qword_1EEEE0100;
  if (!qword_1EEEE0100)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041BA8, &type metadata for ListStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0100);
  }
  return result;
}

unint64_t sub_1B0FC18DC()
{
  unint64_t result;

  result = qword_1EEEE0108;
  if (!qword_1EEEE0108)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041BD0, &type metadata for ListStyleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0108);
  }
  return result;
}

unint64_t sub_1B0FC1924()
{
  unint64_t result;

  result = qword_1EEEE0110;
  if (!qword_1EEEE0110)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041AF0, &type metadata for ListSectionSpacingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0110);
  }
  return result;
}

unint64_t sub_1B0FC196C()
{
  unint64_t result;

  result = qword_1EEEE0118;
  if (!qword_1EEEE0118)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041B18, &type metadata for ListSectionSpacingModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0118);
  }
  return result;
}

unint64_t sub_1B0FC19B4()
{
  unint64_t result;

  result = qword_1EEEE0120;
  if (!qword_1EEEE0120)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041A38, &type metadata for ScrollContentBackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0120);
  }
  return result;
}

unint64_t sub_1B0FC19FC()
{
  unint64_t result;

  result = qword_1EEEE0128;
  if (!qword_1EEEE0128)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041A60, &type metadata for ScrollContentBackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0128);
  }
  return result;
}

uint64_t sub_1B0FC1A40()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B0FC1A88(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696C696269736976 && a2 == 0xEA00000000007974;
  if (v3 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365676465 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B0FC1B70(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v3 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B104CC90)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B0FC1C4C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B1036128();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0FC1CD0()
{
  return 0x676E6963617073;
}

uint64_t sub_1B0FC1CE8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B1036128();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0FC1D74()
{
  return 0x696C696269736976;
}

unint64_t sub_1B0FC1D90()
{
  unint64_t result;

  result = qword_1EEEE0138;
  if (!qword_1EEEE0138)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041F70, &type metadata for EdgeInsetsResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0138);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EdgeInsetsResolvable.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FC1E20 + 4 * byte_1B10417B0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FC1E54 + 4 * byte_1B10417AB[v4]))();
}

uint64_t sub_1B0FC1E54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC1E5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FC1E64);
  return result;
}

uint64_t sub_1B0FC1E70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FC1E78);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FC1E7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC1E84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeInsetsResolvable.CodingKeys()
{
  return &type metadata for EdgeInsetsResolvable.CodingKeys;
}

unint64_t sub_1B0FC1EA4()
{
  unint64_t result;

  result = qword_1EEEE0140;
  if (!qword_1EEEE0140)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041F48, &type metadata for EdgeInsetsResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0140);
  }
  return result;
}

unint64_t sub_1B0FC1EEC()
{
  unint64_t result;

  result = qword_1EEEE0148;
  if (!qword_1EEEE0148)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041E80, &type metadata for EdgeInsetsResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0148);
  }
  return result;
}

unint64_t sub_1B0FC1F34()
{
  unint64_t result;

  result = qword_1EEEE0150;
  if (!qword_1EEEE0150)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1041EA8, &type metadata for EdgeInsetsResolvable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0150);
  }
  return result;
}

uint64_t destroy for MaterialShapeStyle(uint64_t a1)
{
  sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MaterialShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MaterialShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1B0F56B9C(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_1B0F56ADC(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaterialShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1B0F56ADC(v6, v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialShapeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialShapeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialShapeStyle()
{
  return &type metadata for MaterialShapeStyle;
}

uint64_t sub_1B0FC21A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char *v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0160);
  MEMORY[0x1E0C80A78](v4);
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)v1;
  sub_1B0F56B9C(*(_QWORD *)v1, v6, v7, v8);
  StringResolvable.resolved(with:)(a1);
  if (!v2)
  {
    sub_1B0F56ADC(v5, v6, v7, v8);
    v10 = (char *)&loc_1B0FC22A8 + 4 * byte_1B1042010[sub_1B0FC2684()];
    __asm { BR              X10 }
  }
  return sub_1B0F56ADC(v5, v6, v7, v8);
}

void sub_1B0FC23A0()
{
  sub_1B103593C();
  JUMPOUT(0x1B0FC2308);
}

uint64_t sub_1B0FC23C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC28C4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B0FC23EC()
{
  sub_1B0FC270C();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC2414()
{
  sub_1B0FC270C();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC243C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[3];
  unsigned __int8 v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0168);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FC270C();
  sub_1B1036278();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    sub_1B0F56A98();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v14[0];
    v11 = v14[1];
    v12 = v14[2];
    v13 = v15;
    *(_QWORD *)a2 = v14[0];
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 32) = MEMORY[0x1E0DEE9D8];
    sub_1B0F56B9C(v10, v11, v12, v13);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1B0F56ADC(v10, v11, v12, v13);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FC25C4(uint64_t a1)
{
  return sub_1B0FC21A4(a1);
}

uint64_t sub_1B0FC25D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0FC25E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_1B0FC2608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC243C(a1, a2);
}

unint64_t sub_1B0FC261C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC2640();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC2640()
{
  unint64_t result;

  result = qword_1EEEE0158;
  if (!qword_1EEEE0158)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042044, &type metadata for MaterialShapeStyle);
    atomic_store(result, (unint64_t *)&qword_1EEEE0158);
  }
  return result;
}

uint64_t sub_1B0FC2684()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1B0FC26CC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B0FC270C()
{
  unint64_t result;

  result = qword_1EEEE0170;
  if (!qword_1EEEE0170)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104214C, &type metadata for MaterialShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0170);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MaterialShapeStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FC2790 + 4 * byte_1B1042017[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FC27B0 + 4 * byte_1B104201C[v4]))();
}

_BYTE *sub_1B0FC2790(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FC27B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FC27B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FC27C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FC27C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FC27D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MaterialShapeStyle.CodingKeys()
{
  return &type metadata for MaterialShapeStyle.CodingKeys;
}

unint64_t sub_1B0FC27F0()
{
  unint64_t result;

  result = qword_1EEEE0178;
  if (!qword_1EEEE0178)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042124, &type metadata for MaterialShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0178);
  }
  return result;
}

unint64_t sub_1B0FC2838()
{
  unint64_t result;

  result = qword_1EEEE0180;
  if (!qword_1EEEE0180)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042094, &type metadata for MaterialShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0180);
  }
  return result;
}

unint64_t sub_1B0FC2880()
{
  unint64_t result;

  result = qword_1EEEE0188;
  if (!qword_1EEEE0188)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10420BC, &type metadata for MaterialShapeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0188);
  }
  return result;
}

uint64_t sub_1B0FC28C4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6C6169726574616DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B1036128();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B0FC2948()
{
  return 0x6C6169726574616DLL;
}

uint64_t destroy for BackgroundModifier(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 152);
  if (v2 == 2)
  {
    if (*(_QWORD *)(result + 24))
      result = __swift_destroy_boxed_opaque_existential_1(result);
    v4 = *(unsigned __int8 *)(v1 + 64);
    if (v4 <= 0xFD)
      return sub_1B0F56ADC(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v4);
  }
  else if (v2 == 1)
  {
    if (*(_QWORD *)(result + 24))
      __swift_destroy_boxed_opaque_existential_1(result);
    return __swift_destroy_boxed_opaque_existential_1(v1 + 40);
  }
  else if (!*(_BYTE *)(result + 152))
  {
    v3 = *(unsigned __int8 *)(result + 24);
    if (v3 <= 0xFD)
      sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v1 + 72);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BackgroundModifier(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *((unsigned __int8 *)a2 + 152);
  if (v4 == 2)
  {
    v7 = a2[3];
    if (v7)
    {
      v8 = a2[4];
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    }
    else
    {
      v22 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    v23 = *((unsigned __int8 *)a2 + 64);
    if (v23 <= 0xFD)
    {
      v24 = a2[5];
      v25 = a2[6];
      v26 = a2[7];
      sub_1B0F56B9C(v24, v25, v26, v23);
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v26;
      *(_BYTE *)(a1 + 64) = v23;
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)a2 + 49);
    }
    v21 = 2;
    goto LABEL_18;
  }
  if (v4 == 1)
  {
    v5 = a2[3];
    if (v5)
    {
      v6 = a2[4];
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    }
    else
    {
      v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    v20 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 64) = v20;
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 40, (uint64_t)(a2 + 5));
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v21 = 1;
LABEL_18:
    *(_BYTE *)(a1 + 152) = v21;
    return a1;
  }
  v9 = *((unsigned __int8 *)a2 + 24);
  if (v9 <= 0xFD)
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    sub_1B0F56B9C(*a2, v11, v12, *((_BYTE *)a2 + 24));
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 24) = v9;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  v13 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = a2[8];
  v15 = *((_BYTE *)a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 96) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 72, (uint64_t)(a2 + 9));
  *(_BYTE *)(a1 + 112) = v15;
  v17 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v17;
  v18 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v18;
  *(_BYTE *)(a1 + 152) = 0;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BackgroundModifier(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((__int128 *)a1 != a2)
  {
    sub_1B0FC2E94(a1);
    v4 = *((unsigned __int8 *)a2 + 152);
    if (v4 == 2)
    {
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      }
      else
      {
        v18 = *a2;
        v19 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v18;
        *(_OWORD *)(a1 + 16) = v19;
      }
      v20 = *((unsigned __int8 *)a2 + 64);
      if (v20 <= 0xFD)
      {
        v22 = *((_QWORD *)a2 + 5);
        v23 = *((_QWORD *)a2 + 6);
        v24 = *((_QWORD *)a2 + 7);
        sub_1B0F56B9C(v22, v23, v24, v20);
        *(_QWORD *)(a1 + 40) = v22;
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v24;
        *(_BYTE *)(a1 + 64) = v20;
      }
      else
      {
        v21 = *(__int128 *)((char *)a2 + 40);
        *(_OWORD *)(a1 + 49) = *(__int128 *)((char *)a2 + 49);
        *(_OWORD *)(a1 + 40) = v21;
      }
      v17 = 2;
      goto LABEL_19;
    }
    if (v4 == 1)
    {
      v5 = *((_QWORD *)a2 + 3);
      if (v5)
      {
        *(_QWORD *)(a1 + 24) = v5;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
      }
      else
      {
        v14 = *a2;
        v15 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v14;
        *(_OWORD *)(a1 + 16) = v15;
      }
      v16 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 40, (uint64_t)a2 + 40);
      *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
      v17 = 1;
LABEL_19:
      *(_BYTE *)(a1 + 152) = v17;
      return a1;
    }
    v7 = *((unsigned __int8 *)a2 + 24);
    if (v7 <= 0xFD)
    {
      v9 = *(_QWORD *)a2;
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v10, v11, *((_BYTE *)a2 + 24));
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a1 + 24) = v7;
    }
    else
    {
      v8 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v8;
    }
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    v12 = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = *((_QWORD *)a2 + 12);
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 72, (uint64_t)a2 + 72);
    *(_BYTE *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_BYTE *)(a1 + 152) = 0;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t sub_1B0FC2E94(uint64_t a1)
{
  destroy for BackgroundModifier.BackgroundModifierParameters(a1);
  return a1;
}

_OWORD *assignWithTake for BackgroundModifier(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    sub_1B0FC2E94((uint64_t)a1);
    v4 = a2[7];
    a1[6] = a2[6];
    a1[7] = v4;
    a1[8] = a2[8];
    *(_OWORD *)((char *)a1 + 137) = *(_OWORD *)((char *)a2 + 137);
    v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 152) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundModifier()
{
  return &type metadata for BackgroundModifier;
}

uint64_t destroy for BackgroundModifier.BackgroundModifierParameters(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 152);
  if (v2 >= 3)
    v2 = *(_DWORD *)result + 3;
  if (v2 == 2)
  {
    if (*(_QWORD *)(result + 24))
      result = __swift_destroy_boxed_opaque_existential_1(result);
    v3 = *(unsigned __int8 *)(v1 + 64);
    if (v3 <= 0xFD)
      return sub_1B0F56ADC(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v3);
  }
  else if (v2 == 1)
  {
    if (*(_QWORD *)(result + 24))
      __swift_destroy_boxed_opaque_existential_1(result);
    return __swift_destroy_boxed_opaque_existential_1(v1 + 40);
  }
  else
  {
    v4 = *(unsigned __int8 *)(result + 24);
    if (v4 <= 0xFD)
      sub_1B0F56ADC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v1 + 72);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BackgroundModifier.BackgroundModifierParameters(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *((unsigned __int8 *)a2 + 152);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    v7 = a2[3];
    if (v7)
    {
      v8 = a2[4];
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    }
    else
    {
      v22 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    v23 = *((unsigned __int8 *)a2 + 64);
    if (v23 <= 0xFD)
    {
      v24 = a2[5];
      v25 = a2[6];
      v26 = a2[7];
      sub_1B0F56B9C(v24, v25, v26, v23);
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v26;
      *(_BYTE *)(a1 + 64) = v23;
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)a2 + 49);
    }
    v21 = 2;
    goto LABEL_20;
  }
  if (v4 == 1)
  {
    v5 = a2[3];
    if (v5)
    {
      v6 = a2[4];
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    }
    else
    {
      v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    v20 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 64) = v20;
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 40, (uint64_t)(a2 + 5));
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v21 = 1;
LABEL_20:
    *(_BYTE *)(a1 + 152) = v21;
    return a1;
  }
  v9 = *((unsigned __int8 *)a2 + 24);
  if (v9 <= 0xFD)
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    sub_1B0F56B9C(*a2, v11, v12, *((_BYTE *)a2 + 24));
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 24) = v9;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  v13 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = a2[8];
  v15 = *((_BYTE *)a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 96) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 72, (uint64_t)(a2 + 9));
  *(_BYTE *)(a1 + 112) = v15;
  v17 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v17;
  v18 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v18;
  *(_BYTE *)(a1 + 152) = 0;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BackgroundModifier.BackgroundModifierParameters(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 152);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      if (*(_QWORD *)(a1 + 24))
        __swift_destroy_boxed_opaque_existential_1(a1);
      v5 = *(unsigned __int8 *)(a1 + 64);
      if (v5 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v5);
    }
    else if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24))
        __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
    else
    {
      v6 = *(unsigned __int8 *)(a1 + 24);
      if (v6 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      swift_release();
      swift_release();
    }
    v7 = *((unsigned __int8 *)a2 + 152);
    if (v7 >= 3)
      v7 = *(_DWORD *)a2 + 3;
    if (v7 == 2)
    {
      v9 = *((_QWORD *)a2 + 3);
      if (v9)
      {
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
      }
      else
      {
        v21 = *a2;
        v22 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v21;
        *(_OWORD *)(a1 + 16) = v22;
      }
      v23 = *((unsigned __int8 *)a2 + 64);
      if (v23 <= 0xFD)
      {
        v25 = *((_QWORD *)a2 + 5);
        v26 = *((_QWORD *)a2 + 6);
        v27 = *((_QWORD *)a2 + 7);
        sub_1B0F56B9C(v25, v26, v27, v23);
        *(_QWORD *)(a1 + 40) = v25;
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v27;
        *(_BYTE *)(a1 + 64) = v23;
      }
      else
      {
        v24 = *(__int128 *)((char *)a2 + 40);
        *(_OWORD *)(a1 + 49) = *(__int128 *)((char *)a2 + 49);
        *(_OWORD *)(a1 + 40) = v24;
      }
      v20 = 2;
      goto LABEL_35;
    }
    if (v7 == 1)
    {
      v8 = *((_QWORD *)a2 + 3);
      if (v8)
      {
        *(_QWORD *)(a1 + 24) = v8;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
      }
      else
      {
        v17 = *a2;
        v18 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
      }
      v19 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 40, (uint64_t)a2 + 40);
      *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
      v20 = 1;
LABEL_35:
      *(_BYTE *)(a1 + 152) = v20;
      return a1;
    }
    v10 = *((unsigned __int8 *)a2 + 24);
    if (v10 <= 0xFD)
    {
      v12 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      v14 = *((_QWORD *)a2 + 2);
      sub_1B0F56B9C(*(_QWORD *)a2, v13, v14, *((_BYTE *)a2 + 24));
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v14;
      *(_BYTE *)(a1 + 24) = v10;
    }
    else
    {
      v11 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v11;
    }
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    v15 = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = *((_QWORD *)a2 + 12);
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 72, (uint64_t)a2 + 72);
    *(_BYTE *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_BYTE *)(a1 + 152) = 0;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for BackgroundModifier.BackgroundModifierParameters(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 152);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      if (*(_QWORD *)(a1 + 24))
        __swift_destroy_boxed_opaque_existential_1(a1);
      v5 = *(unsigned __int8 *)(a1 + 64);
      if (v5 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v5);
    }
    else if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24))
        __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
    else
    {
      v6 = *(unsigned __int8 *)(a1 + 24);
      if (v6 <= 0xFD)
        sub_1B0F56ADC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      swift_release();
      swift_release();
    }
    v7 = *((unsigned __int8 *)a2 + 152);
    if (v7 >= 3)
      v7 = *(_DWORD *)a2 + 3;
    if (v7 == 2)
    {
      v12 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      v13 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v13;
      v11 = 2;
    }
    else
    {
      if (v7 == 1)
      {
        v8 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
        v9 = *a2;
        v10 = a2[1];
        v11 = 1;
      }
      else
      {
        v11 = 0;
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        v14 = a2[7];
        *(_OWORD *)(a1 + 96) = a2[6];
        *(_OWORD *)(a1 + 112) = v14;
        *(_OWORD *)(a1 + 128) = a2[8];
        v15 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v15;
        v16 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v16;
        v9 = *a2;
        v10 = a2[1];
      }
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    *(_BYTE *)(a1 + 152) = v11;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundModifier.BackgroundModifierParameters(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BackgroundModifier.BackgroundModifierParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 137) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 152) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B0FC380C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 152);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1B0FC3828(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    v2 = a2 - 3;
    *(_QWORD *)(result + 144) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 3;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 152) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundModifier.BackgroundModifierParameters()
{
  return &type metadata for BackgroundModifier.BackgroundModifierParameters;
}

uint64_t sub_1B0FC3870@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  _BYTE v108[32];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[3];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133[3];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[3];
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[3];
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  unsigned __int8 v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unsigned __int8 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  _QWORD *v157;

  v157 = a2;
  sub_1B0FC5070(v4, (uint64_t)&v144);
  if (!v156)
  {
    v29 = v144;
    v28 = v145;
    v30 = v146;
    v31 = v147;
    v111 = v152;
    v112 = v153;
    v113 = v154;
    v114 = v155;
    *(_OWORD *)v108 = v148;
    *(_OWORD *)&v108[16] = v149;
    v109 = v150;
    v110 = v151;
    if (v147 <= 0xFDu)
    {
      v142[0] = v144;
      v142[1] = v145;
      v142[2] = v146;
      v143 = v147;
      sub_1B0F56B9C(v144, (uint64_t)v145, v146, v147);
      StringResolvable.resolved(with:)((uint64_t)v157);
      if (v5)
      {
        sub_1B0F56B88(v29, (uint64_t)v28, v30, v31);
        sub_1B0F56B88(v29, (uint64_t)v28, v30, v31);
        return sub_1B0F6427C((uint64_t)v108);
      }
      v157 = v28;
      sub_1B0F56B88(v29, (uint64_t)v28, v30, v31);
    }
    else
    {
      v157 = v145;
    }
    v69 = (char *)&loc_1B0FC412C + 4 * byte_1B10421AE[sub_1B1001DC8()];
    __asm { BR              X10 }
  }
  if (v156 != 1)
  {
    v104 = a4;
    v32 = *((_QWORD *)&v148 + 1);
    v33 = v149;
    v34 = v150;
    sub_1B0FC50A4((uint64_t)&v144, (uint64_t)v142);
    if (v34 <= 0xFD)
    {
      *(_QWORD *)v108 = v32;
      *(_OWORD *)&v108[8] = v33;
      v108[24] = v34;
      sub_1B0F56B9C(v32, v33, *((uint64_t *)&v33 + 1), v34);
      StringResolvable.resolved(with:)((uint64_t)v157);
      if (v5)
      {
        sub_1B0F56B88(v32, v33, *((uint64_t *)&v33 + 1), v34);
        sub_1B0F56B88(v32, v33, *((uint64_t *)&v33 + 1), v34);
        return sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
      }
      v107 = 0;
      v99 = v33;
      sub_1B0F56B88(v32, v33, *((uint64_t *)&v33 + 1), v34);
    }
    else
    {
      v99 = v33;
      v107 = v5;
    }
    v70 = sub_1B0F8EFB8();
    v71 = v70;
    if (v70 != 7)
      __asm { BR              X10 }
    sub_1B0FC50EC((uint64_t)v142, (uint64_t)v108);
    WORD4(v109) = 256;
    if (!*(_QWORD *)&v108[24])
    {
      v82 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      if (v71 == 7)
      {
        LODWORD(v157) = sub_1B1035144();
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE01A0);
        v83 = sub_1B103497C();
        v104[3] = v83;
        v84 = sub_1B0F5A7E4(&qword_1EEEE01A8, &qword_1EEEE01A0, MEMORY[0x1E0CDC6D0]);
        v115[0] = v82;
        v115[1] = v84;
        v104[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v83, v115);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE01A0);
        v88 = sub_1B103497C();
        v104[3] = v88;
        v89 = sub_1B0F5A7E4(&qword_1EEEE01A8, &qword_1EEEE01A0, MEMORY[0x1E0CDC6D0]);
        v116[0] = v82;
        v116[1] = v89;
        v104[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v88, v116);
      }
      __swift_allocate_boxed_opaque_existential_1(v104);
      sub_1B1035300();
      sub_1B0F56B88(v32, v99, *((uint64_t *)&v99 + 1), v34);
      return sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
    }
    if (v71 == 7)
    {
      sub_1B0F5A0E4((__int128 *)v108, (uint64_t)v139);
      v76 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v77 = v140;
      v78 = v141;
      __swift_project_boxed_opaque_existential_1(v139, v140);
      sub_1B0FE4B60((uint64_t)v157, v77, v78, (uint64_t)v136);
      if (!v107)
      {
        v157 = __swift_project_boxed_opaque_existential_1(v136, v137);
        sub_1B1035144();
        v79 = sub_1B1035090();
        v80 = sub_1B103497C();
        a4[3] = v80;
        v81 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6D0], v79);
        v117[0] = v76;
        v117[1] = v81;
        a4[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v80, v117);
        __swift_allocate_boxed_opaque_existential_1(a4);
LABEL_39:
        sub_1B1035324();
        sub_1B0F56B88(v32, v99, *((uint64_t *)&v99 + 1), v34);
        goto LABEL_40;
      }
    }
    else
    {
      sub_1B0F5A0E4((__int128 *)v108, (uint64_t)v139);
      v85 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v86 = v140;
      v87 = v141;
      __swift_project_boxed_opaque_existential_1(v139, v140);
      sub_1B0FE4B60((uint64_t)v157, v86, v87, (uint64_t)v136);
      if (!v107)
      {
        v157 = __swift_project_boxed_opaque_existential_1(v136, v137);
        v90 = sub_1B1035090();
        v91 = sub_1B103497C();
        v104[3] = v91;
        v92 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6D0], v90);
        v118[0] = v85;
        v118[1] = v92;
        v104[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v91, v118);
        __swift_allocate_boxed_opaque_existential_1(v104);
        goto LABEL_39;
      }
    }
    sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
    sub_1B0F56B88(v32, v99, *((uint64_t *)&v99 + 1), v34);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  }
  v9 = v151;
  sub_1B0FC50A4((uint64_t)&v144, (uint64_t)v142);
  sub_1B0F5A0E4((__int128 *)((char *)&v148 + 8), (uint64_t)v139);
  sub_1B0FC50EC((uint64_t)v142, (uint64_t)v108);
  WORD4(v109) = v9;
  v10 = v9;
  if (*(_QWORD *)&v108[24])
  {
    if (v9 == 2)
    {
      sub_1B0F5A0E4((__int128 *)v108, (uint64_t)v136);
      v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v12 = v137;
      v13 = v138;
      __swift_project_boxed_opaque_existential_1(v136, v137);
      sub_1B0FE4B60((uint64_t)v157, v12, v13, (uint64_t)v133);
      if (!v5)
      {
        v95 = v134;
        v97 = v135;
        __swift_project_boxed_opaque_existential_1(v133, v134);
        v14 = v140;
        v98 = v11;
        v15 = v141;
        __swift_project_boxed_opaque_existential_1(v139, v140);
        v100 = a3;
        v103 = a4;
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 32);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v131 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v132 = AssociatedConformanceWitness;
        __swift_allocate_boxed_opaque_existential_1(v130);
        v16(v14, v15);
        v19 = v140;
        v20 = v141;
        __swift_project_boxed_opaque_existential_1(v139, v140);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20);
        v22 = sub_1B0F5B664(v21);
        swift_bridgeObjectRelease();
        sub_1B0F5B780(v22, (uint64_t)v157, v100, AssociatedTypeWitness, AssociatedConformanceWitness, v127);
        swift_bridgeObjectRelease();
        v23 = v128;
        v24 = v129;
        v157 = __swift_project_boxed_opaque_existential_1(v127, v128);
        v123 = v95;
        v124 = v23;
        v125 = v97;
        v126 = v24;
        v25 = sub_1B1035084();
        v26 = sub_1B103497C();
        v103[3] = v26;
        v27 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6A8], v25);
        v121[0] = v98;
        v121[1] = v27;
        v103[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v26, v121);
        __swift_allocate_boxed_opaque_existential_1(v103);
LABEL_19:
        sub_1B1035330();
        sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
LABEL_41:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
      }
    }
    else
    {
      sub_1B0F5A0E4((__int128 *)v108, (uint64_t)v136);
      v52 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v53 = v137;
      v54 = v138;
      __swift_project_boxed_opaque_existential_1(v136, v137);
      sub_1B0FE4B60((uint64_t)v157, v53, v54, (uint64_t)v133);
      if (!v5)
      {
        v93 = v134;
        v94 = v135;
        __swift_project_boxed_opaque_existential_1(v133, v134);
        v55 = v140;
        v56 = v141;
        __swift_project_boxed_opaque_existential_1(v139, v140);
        v102 = a3;
        v106 = a4;
        v57 = *(void (**)(uint64_t, uint64_t))(v56 + 32);
        v96 = v52;
        v58 = swift_getAssociatedTypeWitness();
        v131 = v58;
        v59 = swift_getAssociatedConformanceWitness();
        v132 = v59;
        __swift_allocate_boxed_opaque_existential_1(v130);
        v57(v55, v56);
        v60 = v140;
        v61 = v141;
        __swift_project_boxed_opaque_existential_1(v139, v140);
        v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61);
        v63 = sub_1B0F5B664(v62);
        swift_bridgeObjectRelease();
        sub_1B0F5B780(v63, (uint64_t)v157, v102, v58, v59, v127);
        swift_bridgeObjectRelease();
        v64 = v128;
        v65 = v129;
        v157 = __swift_project_boxed_opaque_existential_1(v127, v128);
        v123 = v93;
        v124 = v64;
        v125 = v94;
        v126 = v65;
        v66 = sub_1B1035084();
        v67 = sub_1B103497C();
        v106[3] = v67;
        v68 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6A8], v66);
        v122[0] = v96;
        v122[1] = v68;
        v106[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v67, v122);
        __swift_allocate_boxed_opaque_existential_1(v106);
        goto LABEL_19;
      }
    }
LABEL_40:
    sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
    goto LABEL_41;
  }
  v105 = a4;
  v36 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v37 = v140;
  v38 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v39 = swift_getAssociatedTypeWitness();
  v40 = swift_getAssociatedConformanceWitness();
  v101 = a3;
  v41 = *(void (**)(uint64_t, uint64_t))(v38 + 32);
  v137 = v39;
  v138 = v40;
  __swift_allocate_boxed_opaque_existential_1(v136);
  v41(v37, v38);
  v42 = v140;
  v43 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 40))(v42, v43);
  v45 = sub_1B0F5B664(v44);
  swift_bridgeObjectRelease();
  sub_1B0F5B780(v45, (uint64_t)v157, v101, v39, v40, v133);
  swift_bridgeObjectRelease();
  v47 = v134;
  v46 = v135;
  __swift_project_boxed_opaque_existential_1(v133, v134);
  v130[0] = MEMORY[0x1E0CD9848];
  v130[1] = v47;
  v130[2] = MEMORY[0x1E0CD9830];
  v131 = v46;
  if (v10 == 2)
  {
    v48 = v36;
    v49 = sub_1B1035084();
    v50 = sub_1B103497C();
    v105[3] = v50;
    v51 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6A8], v49);
    v119[0] = v48;
    v119[1] = v51;
    v105[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v50, v119);
  }
  else
  {
    v72 = v36;
    v73 = sub_1B1035084();
    v74 = sub_1B103497C();
    v105[3] = v74;
    v75 = MEMORY[0x1B5E15188](MEMORY[0x1E0CDC6A8], v73);
    v120[0] = v72;
    v120[1] = v75;
    v105[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v74, v120);
  }
  __swift_allocate_boxed_opaque_existential_1(v105);
  sub_1B103530C();
  sub_1B0F5A3AC((uint64_t)v142, &qword_1EEEE0198);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
}

uint64_t sub_1B0FC49E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B0FC4A1C + 4 * byte_1B10421B8[a1]))(0xD000000000000014, 0x80000001B104CCB0);
}

uint64_t sub_1B0FC4A1C()
{
  return 0x746E65746E6F63;
}

uint64_t sub_1B0FC4A34()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_1B0FC4A54()
{
  return 0x6570616873;
}

uint64_t sub_1B0FC4A68()
{
  return 0x656C797473;
}

uint64_t sub_1B0FC4A7C()
{
  return 0x6C7974536C6C6966;
}

uint64_t sub_1B0FC4A98()
{
  unsigned __int8 *v0;

  return sub_1B0FC49E4(*v0);
}

uint64_t sub_1B0FC4AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0FC54AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B0FC4AC4(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1B0FC4AD0()
{
  sub_1B0FC5134();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC4AF8()
{
  sub_1B0FC5134();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC4B20@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[24];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  _QWORD *v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE01C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0FC5134();
  sub_1B1036278();
  if (v2)
  {
    v11 = (uint64_t)v43;
  }
  else
  {
    LOBYTE(v21) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v32) = 0;
      sub_1B0F64238();
      sub_1B10360BC();
      v30[0] = 1;
      sub_1B0F56A98();
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v35 = v32;
      *(_QWORD *)&v36 = v33;
      BYTE8(v36) = BYTE8(v33);
      v40 = v25;
      v41 = v26;
      v42[0] = v27;
      *(_QWORD *)&v42[1] = v28;
      v37[0] = v21;
      v37[1] = v22;
      v38 = v23;
      v39 = v24;
      BYTE8(v42[1]) = 0;
    }
    else
    {
      LOBYTE(v21) = 2;
      if ((sub_1B10360D4() & 1) != 0)
      {
        v30[0] = 2;
        sub_1B0FC51F0();
        sub_1B10360BC();
        sub_1B0F5A0E4(&v32, (uint64_t)&v21);
        v30[0] = 5;
        sub_1B0FC5234();
        sub_1B10360A4();
        if (v32 == 2)
          v10 = 2;
        else
          v10 = v32 & 0x101;
        v29 = 3;
        sub_1B0FC5178();
        sub_1B10360A4();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        if (v31)
        {
          sub_1B0F5FD84((uint64_t)v30, (uint64_t)&v32);
          sub_1B0FC51BC((uint64_t)v30);
        }
        else
        {
          sub_1B0F5A3AC((uint64_t)v30, &qword_1EEEE01D8);
          v32 = 0u;
          v33 = 0u;
          v34 = 0;
        }
        sub_1B0FC50A4((uint64_t)&v32, (uint64_t)&v35);
        sub_1B0F5A0E4(&v21, (uint64_t)v37 + 8);
        LOWORD(v39) = v10;
        v15 = 1;
      }
      else
      {
        v30[0] = 3;
        sub_1B0FC5178();
        sub_1B10360A4();
        if (*((_QWORD *)&v33 + 1))
        {
          sub_1B0F5FD84((uint64_t)&v32, (uint64_t)&v21);
          sub_1B0FC51BC((uint64_t)&v32);
        }
        else
        {
          sub_1B0F5A3AC((uint64_t)&v32, &qword_1EEEE01D8);
          v21 = 0u;
          v22 = 0u;
          *(_QWORD *)&v23 = 0;
        }
        v30[0] = 4;
        sub_1B0F56A98();
        sub_1B10360A4();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v20 = v32;
        v13 = v33;
        v14 = BYTE8(v33);
        sub_1B0FC50A4((uint64_t)&v21, (uint64_t)&v35);
        *(_OWORD *)((char *)v37 + 8) = v20;
        *((_QWORD *)&v37[1] + 1) = v13;
        LOBYTE(v38) = v14;
        v15 = 2;
      }
      BYTE8(v42[1]) = v15;
    }
    v11 = (uint64_t)v43;
    v16 = v41;
    a2[6] = v40;
    a2[7] = v16;
    a2[8] = v42[0];
    *(__int128 *)((char *)a2 + 137) = *(_OWORD *)((char *)v42 + 9);
    v17 = v37[1];
    a2[2] = v37[0];
    a2[3] = v17;
    v18 = v39;
    a2[4] = v38;
    a2[5] = v18;
    v19 = v36;
    *a2 = v35;
    a2[1] = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1(v11);
}

uint64_t sub_1B0FC4FE0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1B0FC3870(a1, a2, a3, a4);
}

uint64_t sub_1B0FC4FF4@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  return sub_1B0FC4B20(a1, a2);
}

unint64_t sub_1B0FC5008(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC502C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC502C()
{
  unint64_t result;

  result = qword_1EEEE0190;
  if (!qword_1EEEE0190)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042210, &type metadata for BackgroundModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0190);
  }
  return result;
}

uint64_t sub_1B0FC5070(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for BackgroundModifier.BackgroundModifierParameters(a2, a1);
  return a2;
}

uint64_t sub_1B0FC50A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0FC50EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B0FC5134()
{
  unint64_t result;

  result = qword_1EEEE01C8;
  if (!qword_1EEEE01C8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042318, &type metadata for BackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE01C8);
  }
  return result;
}

unint64_t sub_1B0FC5178()
{
  unint64_t result;

  result = qword_1EEEE01D0;
  if (!qword_1EEEE01D0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1043E80, &type metadata for ShapeStyleContentBox);
    atomic_store(result, (unint64_t *)&qword_1EEEE01D0);
  }
  return result;
}

uint64_t sub_1B0FC51BC(uint64_t a1)
{
  destroy for AnyViewModifier();
  return a1;
}

unint64_t sub_1B0FC51F0()
{
  unint64_t result;

  result = qword_1EEEE01E0;
  if (!qword_1EEEE01E0)
  {
    result = MEMORY[0x1B5E15188](&protocol conformance descriptor for ShapeContentBox, &type metadata for ShapeContentBox);
    atomic_store(result, (unint64_t *)&qword_1EEEE01E0);
  }
  return result;
}

unint64_t sub_1B0FC5234()
{
  unint64_t result;

  result = qword_1EEEE01E8;
  if (!qword_1EEEE01E8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1043E58, &type metadata for FillStyleWrapper);
    atomic_store(result, (unint64_t *)&qword_1EEEE01E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BackgroundModifier.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B0FC5354 + 4 * byte_1B10421C3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B0FC5388 + 4 * byte_1B10421BE[v4]))();
}

uint64_t sub_1B0FC5388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC5390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FC5398);
  return result;
}

uint64_t sub_1B0FC53A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FC53ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B0FC53B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC53B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundModifier.CodingKeys()
{
  return &type metadata for BackgroundModifier.CodingKeys;
}

unint64_t sub_1B0FC53D8()
{
  unint64_t result;

  result = qword_1EEEE01F0;
  if (!qword_1EEEE01F0)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10422F0, &type metadata for BackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE01F0);
  }
  return result;
}

unint64_t sub_1B0FC5420()
{
  unint64_t result;

  result = qword_1EEEE01F8;
  if (!qword_1EEEE01F8)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042260, &type metadata for BackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE01F8);
  }
  return result;
}

unint64_t sub_1B0FC5468()
{
  unint64_t result;

  result = qword_1EEEE0200;
  if (!qword_1EEEE0200)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042288, &type metadata for BackgroundModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0200);
  }
  return result;
}

uint64_t sub_1B0FC54AC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v3 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6570616873 && a2 == 0xE500000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B104CCB0 || (sub_1B1036128() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C7974536C6C6966 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B1036128();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t destroy for ShadowModifier(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  result = sub_1B0F6C7D4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 0xFD)
    result = sub_1B0F6C7D4(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v3);
  v4 = *(unsigned __int8 *)(a1 + 128);
  if (v4 <= 0xFD)
    return sub_1B0F6C7D4(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return result;
}

uint64_t initializeWithCopy for ShadowModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  sub_1B0F6C708(v5, v6, v7, v8);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  v9 = *(unsigned __int8 *)(a2 + 96);
  if (v9 <= 0xFD)
  {
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    sub_1B0F6C708(v10, v11, v12, *(_BYTE *)(a2 + 96));
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_BYTE *)(a1 + 96) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  v13 = *(unsigned __int8 *)(a2 + 128);
  if (v13 <= 0xFD)
  {
    v14 = *(_QWORD *)(a2 + 104);
    v15 = *(_QWORD *)(a2 + 112);
    v16 = *(_QWORD *)(a2 + 120);
    sub_1B0F6C708(v14, v15, v16, v13);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v16;
    *(_BYTE *)(a1 + 128) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  }
  return a1;
}

uint64_t assignWithCopy for ShadowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _OWORD *v27;
  _OWORD *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 64);
  sub_1B0F6C708(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  v11 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v7;
  sub_1B0F6C7D4(v8, v9, v10, v11);
  v12 = (_OWORD *)(a1 + 72);
  v13 = (_OWORD *)(a2 + 72);
  v14 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) <= 0xFDu)
  {
    if (v14 <= 0xFD)
    {
      v20 = *(_QWORD *)(a2 + 72);
      v21 = *(_QWORD *)(a2 + 80);
      v22 = *(_QWORD *)(a2 + 88);
      sub_1B0F6C708(v20, v21, v22, *(_BYTE *)(a2 + 96));
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 80);
      v25 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = v20;
      *(_QWORD *)(a1 + 80) = v21;
      *(_QWORD *)(a1 + 88) = v22;
      v26 = *(_BYTE *)(a1 + 96);
      *(_BYTE *)(a1 + 96) = v14;
      sub_1B0F6C7D4(v23, v24, v25, v26);
    }
    else
    {
      sub_1B0F7A924(a1 + 72);
      v16 = *(_OWORD *)(a2 + 81);
      *v12 = *v13;
      *(_OWORD *)(a1 + 81) = v16;
    }
  }
  else if (v14 <= 0xFD)
  {
    v17 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    sub_1B0F6C708(v17, v18, v19, *(_BYTE *)(a2 + 96));
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v19;
    *(_BYTE *)(a1 + 96) = v14;
  }
  else
  {
    v15 = *v13;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    *v12 = v15;
  }
  v27 = (_OWORD *)(a1 + 104);
  v28 = (_OWORD *)(a2 + 104);
  v29 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) <= 0xFDu)
  {
    if (v29 <= 0xFD)
    {
      v35 = *(_QWORD *)(a2 + 104);
      v36 = *(_QWORD *)(a2 + 112);
      v37 = *(_QWORD *)(a2 + 120);
      sub_1B0F6C708(v35, v36, v37, v29);
      v38 = *(_QWORD *)(a1 + 104);
      v39 = *(_QWORD *)(a1 + 112);
      v40 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 104) = v35;
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v37;
      v41 = *(_BYTE *)(a1 + 128);
      *(_BYTE *)(a1 + 128) = v29;
      sub_1B0F6C7D4(v38, v39, v40, v41);
    }
    else
    {
      sub_1B0F7A924(a1 + 104);
      v31 = *(_OWORD *)(a2 + 113);
      *v27 = *v28;
      *(_OWORD *)(a1 + 113) = v31;
    }
  }
  else if (v29 <= 0xFD)
  {
    v32 = *(_QWORD *)(a2 + 104);
    v33 = *(_QWORD *)(a2 + 112);
    v34 = *(_QWORD *)(a2 + 120);
    sub_1B0F6C708(v32, v33, v34, v29);
    *(_QWORD *)(a1 + 104) = v32;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v34;
    *(_BYTE *)(a1 + 128) = v29;
  }
  else
  {
    v30 = *v28;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    *v27 = v30;
  }
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ShadowModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v5;
  v10 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v6;
  sub_1B0F6C7D4(v7, v8, v9, v10);
  v11 = *(unsigned __int8 *)(a1 + 96);
  if (v11 > 0xFD)
    goto LABEL_4;
  v12 = *(unsigned __int8 *)(a2 + 96);
  if (v12 > 0xFD)
  {
    sub_1B0F7A924(a1 + 72);
LABEL_4:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = v12;
  sub_1B0F6C7D4(v14, v15, v16, v11);
LABEL_6:
  v17 = *(unsigned __int8 *)(a1 + 128);
  if (v17 <= 0xFD)
  {
    v18 = *(unsigned __int8 *)(a2 + 128);
    if (v18 <= 0xFD)
    {
      v19 = *(_QWORD *)(a2 + 120);
      v20 = *(_QWORD *)(a1 + 104);
      v21 = *(_QWORD *)(a1 + 112);
      v22 = *(_QWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = v19;
      *(_BYTE *)(a1 + 128) = v18;
      sub_1B0F6C7D4(v20, v21, v22, v17);
      return a1;
    }
    sub_1B0F7A924(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShadowModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShadowModifier()
{
  return &type metadata for ShadowModifier;
}

uint64_t sub_1B0FC5C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = *(_QWORD *)(v3 + 48);
  v7 = *(_QWORD *)(v3 + 56);
  v8 = *(_BYTE *)(v3 + 64);
  v24 = *(_QWORD *)(v3 + 40);
  v25 = v6;
  v26 = v7;
  v27 = v8;
  sub_1B0F6C708(v24, v6, v7, v8);
  sub_1B0FA70A4(a2);
  v10 = v9;
  sub_1B0F6C7D4(v24, v6, v7, v8);
  if ((v10 & 1) != 0)
    return sub_1B0F5FD84((uint64_t)a1, (uint64_t)a3);
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v3, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a2, v12, v13);
  v14 = *(unsigned __int8 *)(v3 + 96);
  if (v14 <= 0xFD)
  {
    v16 = *(_QWORD *)(v3 + 80);
    v15 = *(_QWORD *)(v3 + 88);
    v24 = *(_QWORD *)(v3 + 72);
    v25 = v16;
    v26 = v15;
    v27 = v14;
    sub_1B0F6C708(v24, v16, v15, v14);
    sub_1B0FA70A4(a2);
    sub_1B0F6C7C0(v24, v16, v15, v14);
  }
  v17 = *(unsigned __int8 *)(v3 + 128);
  if (v17 <= 0xFD)
  {
    v19 = *(_QWORD *)(v3 + 112);
    v18 = *(_QWORD *)(v3 + 120);
    v24 = *(_QWORD *)(v3 + 104);
    v25 = v19;
    v26 = v18;
    v27 = v17;
    sub_1B0F6C708(v24, v19, v18, v17);
    sub_1B0FA70A4(a2);
    sub_1B0F6C7C0(v24, v19, v18, v17);
  }
  v20 = sub_1B103497C();
  a3[3] = v20;
  v23[0] = v11;
  v23[1] = MEMORY[0x1E0CD9100];
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v20, v23);
  __swift_allocate_boxed_opaque_existential_1(a3);
  sub_1B10355C4();
  return swift_release();
}

uint64_t sub_1B0FC5EE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0FC5F10 + 4 * byte_1B1042368[a1]))(120, 0xE100000000000000);
}

uint64_t sub_1B0FC5F10()
{
  return 0x726F6C6F63;
}

uint64_t sub_1B0FC5F24()
{
  return 121;
}

uint64_t sub_1B0FC5F2C()
{
  return 0x737569646172;
}

uint64_t sub_1B0FC5F40(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0FC5F68 + 4 * byte_1B104236C[a1]))(120, 0xE100000000000000);
}

uint64_t sub_1B0FC5F68()
{
  return 0x726F6C6F63;
}

uint64_t sub_1B0FC5F7C()
{
  return 121;
}

uint64_t sub_1B0FC5F84()
{
  return 0x737569646172;
}

void sub_1B0FC5F98(char *a1)
{
  sub_1B100E2E0(*a1);
}

void sub_1B0FC5FA4()
{
  char *v0;

  sub_1B1010A84(*v0);
}

void sub_1B0FC5FAC(uint64_t a1)
{
  char *v1;

  sub_1B1012D6C(a1, *v1);
}

void sub_1B0FC5FB4(uint64_t a1)
{
  char *v1;

  sub_1B101421C(a1, *v1);
}

uint64_t sub_1B0FC5FBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC67C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC5FE8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FC5EE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FC6010()
{
  unsigned __int8 *v0;

  return sub_1B0FC5F40(*v0);
}

uint64_t sub_1B0FC6018@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC67C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC603C()
{
  sub_1B0FC64B8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC6064()
{
  sub_1B0FC64B8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC608C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  char v16;
  _QWORD v17[5];
  __int128 v18[2];
  __int128 v19;
  uint64_t v20;
  ValueMetadata *v21;
  unint64_t v22;
  _BYTE v23[56];
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0210);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0FC64B8();
  sub_1B1036278();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  v15 = v6;
  LOBYTE(v18[0]) = 1;
  v10 = sub_1B0F7E5F8();
  sub_1B10360BC();
  v14[1] = v10;
  *(_OWORD *)&v23[40] = v19;
  v24 = v20;
  v25 = (char)v21;
  v16 = 0;
  sub_1B0F81F08();
  sub_1B10360A4();
  if (v17[3])
  {
    sub_1B0F5FD84((uint64_t)v17, (uint64_t)v18);
    sub_1B0F81F88((uint64_t)v17);
    sub_1B0F5A0E4(v18, (uint64_t)&v19);
  }
  else
  {
    sub_1B0FC64FC((uint64_t)v17);
    v21 = &type metadata for MonoColor;
    v22 = sub_1B0FC653C();
    v12 = swift_allocObject();
    *(_QWORD *)&v19 = v12;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_BYTE *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 48) = 0x3FD51EB851EB851FLL;
    *(_BYTE *)(v12 + 72) = 0;
  }
  sub_1B0F5A0E4(&v19, (uint64_t)v23);
  LOBYTE(v18[0]) = 2;
  sub_1B10360A4();
  v13 = v15;
  v26 = v19;
  v27 = v20;
  v28 = (char)v21;
  LOBYTE(v18[0]) = 3;
  sub_1B10360A4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v5);
  v29 = v19;
  v30 = v20;
  v31 = (char)v21;
  sub_1B0FC65C4((uint64_t)v23, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_1B0FC65F8((uint64_t)v23);
}

uint64_t sub_1B0FC6428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FC5C7C(a1, a2, a3);
}

uint64_t sub_1B0FC643C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC608C(a1, a2);
}

unint64_t sub_1B0FC6450(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC6474();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC6474()
{
  unint64_t result;

  result = qword_1EEEE0208;
  if (!qword_1EEEE0208)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042390, &type metadata for ShadowModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0208);
  }
  return result;
}

unint64_t sub_1B0FC64B8()
{
  unint64_t result;

  result = qword_1EEEE0218;
  if (!qword_1EEEE0218)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10424D0, &type metadata for ShadowModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0218);
  }
  return result;
}

uint64_t sub_1B0FC64FC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0220);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B0FC653C()
{
  unint64_t result;

  result = qword_1EEEE0228;
  if (!qword_1EEEE0228)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1049774, &type metadata for MonoColor);
    atomic_store(result, (unint64_t *)&qword_1EEEE0228);
  }
  return result;
}

uint64_t sub_1B0FC6580()
{
  uint64_t v0;
  unsigned int v1;

  sub_1B0F6C7D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 <= 0xFD)
    sub_1B0F6C7D4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v1);
  return swift_deallocObject();
}

uint64_t sub_1B0FC65C4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ShadowModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0FC65F8(uint64_t a1)
{
  destroy for ShadowModifier(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ShadowModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0FC6670 + 4 * byte_1B1042375[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0FC66A4 + 4 * byte_1B1042370[v4]))();
}

uint64_t sub_1B0FC66A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC66AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FC66B4);
  return result;
}

uint64_t sub_1B0FC66C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FC66C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0FC66CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC66D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShadowModifier.CodingKeys()
{
  return &type metadata for ShadowModifier.CodingKeys;
}

unint64_t sub_1B0FC66F4()
{
  unint64_t result;

  result = qword_1EEEE0230;
  if (!qword_1EEEE0230)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10424A8, &type metadata for ShadowModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0230);
  }
  return result;
}

unint64_t sub_1B0FC673C()
{
  unint64_t result;

  result = qword_1EEEE0238;
  if (!qword_1EEEE0238)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10423E0, &type metadata for ShadowModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0238);
  }
  return result;
}

unint64_t sub_1B0FC6784()
{
  unint64_t result;

  result = qword_1EEEE0240;
  if (!qword_1EEEE0240)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042408, &type metadata for ShadowModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0240);
  }
  return result;
}

uint64_t sub_1B0FC67C8()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t AnyViewModifier.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B0FC6A08(a1, 0xD00000000000001ALL, 0x80000001B104CCD0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B0FFDA24, (void (*)(__int128 *, _OWORD *))sub_1B0F5A0E4, a2);
}

uint64_t AnyViewModifier.modifyView(_:with:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, a3, v7, v8);
}

uint64_t sub_1B0FC68FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, a3, v7, v8);
}

uint64_t sub_1B0FC6978@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return AnyViewModifier.init(from:)(a1, a2);
}

uint64_t AnyImageModifierBox.imageModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F5FD84(v1, a1);
}

uint64_t AnyImageModifierBox.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B0FC6A08(a1, 0xD00000000000001BLL, 0x80000001B104CCF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B0FFDC48, (void (*)(__int128 *, _OWORD *))sub_1B0F5A0E4, a2);
}

uint64_t sub_1B0FC6A08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD)@<X3>, void (*a5)(__int128 *, _OWORD *)@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(__int128 *, _OWORD *);
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;

  v38 = a5;
  v42 = a4;
  v41 = a3;
  v40 = a2;
  v39 = a6;
  v55 = *MEMORY[0x1E0C80C00];
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE480);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B1036008();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = sub_1B103626C();
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  if (*(_QWORD *)(v14 + 16) && (v16 = sub_1B0F56A48((uint64_t)v13), (v17 & 1) != 0))
  {
    sub_1B0F57208(*(_QWORD *)(v14 + 56) + 32 * v16, (uint64_t)&v50);
  }
  else
  {
    v50 = 0u;
    v51 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (!*((_QWORD *)&v51 + 1))
  {
    sub_1B0FC70F4((uint64_t)&v50);
    goto LABEL_12;
  }
  type metadata accessor for ContentRegistry();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    type metadata accessor for ContentRegistryError();
    sub_1B0F524FC(&qword_1EEEDE488, (uint64_t (*)(uint64_t))type metadata accessor for ContentRegistryError, (uint64_t)&unk_1B1045C40);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v18 = v49;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = sub_1B0F5DCE4();
  sub_1B1036278();
  if (v6)
  {

  }
  else
  {
    v21 = v44;
    v22 = sub_1B10360C8();
    if (*(_QWORD *)(v22 + 16))
    {
      v23 = *(_QWORD *)(v22 + 40);
      v37 = *(_QWORD *)(v22 + 32);
      v41 = *(_QWORD *)(v22 + 48);
      LODWORD(v40) = *(unsigned __int8 *)(v22 + 56);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      v24 = sub_1B1036074();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE498);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1036F70;
      *(_QWORD *)(inited + 56) = &type metadata for DynamicKey;
      *(_QWORD *)(inited + 64) = v19;
      v26 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v26;
      v27 = v37;
      *(_QWORD *)(v26 + 16) = v37;
      *(_QWORD *)(v26 + 24) = v23;
      *(_QWORD *)(v26 + 32) = v41;
      *(_BYTE *)(v26 + 40) = v40;
      *(_QWORD *)&v50 = v24;
      swift_bridgeObjectRetain();
      sub_1B0F5DD60(inited);
      v28 = v27;
      v29 = v27;
      v30 = v23;
      v31 = v42(v28, v23, v50);
      v36 = v32;
      v42 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = v29;
      v46 = v30;
      v47 = v41;
      v48 = v40;
      v33 = v44;
      sub_1B1036080();
      swift_bridgeObjectRelease();
      *((_QWORD *)&v51 + 1) = v31;
      v52 = v36;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
      sub_1B1035DB0();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v33);

      v38(&v50, v53);
      v34 = v53[1];
      v35 = v39;
      *v39 = v53[0];
      v35[1] = v34;
      *((_QWORD *)v35 + 4) = v54;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for DynamicKeyError();
      sub_1B0F524FC(&qword_1EEEDE4C0, (uint64_t (*)(uint64_t))type metadata accessor for DynamicKeyError, (uint64_t)&unk_1B103D9EC);
      swift_allocError();
      sub_1B1036074();
      sub_1B1035F30();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v21);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FC7028@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return AnyImageModifierBox.init(from:)(a1, a2);
}

uint64_t Image.applyModifiers(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (_QWORD *)(a1 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      v8 = swift_retain();
      a2 = v7(v8, v5, v6);
      swift_release_n();
      v4 += 5;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  return a2;
}

uint64_t sub_1B0FC70F4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE158);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B0FC7134()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1B0FC7158(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0F5E004();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of ContentModifier.modifyView(_:with:localStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

ValueMetadata *type metadata accessor for AnyViewModifier()
{
  return &type metadata for AnyViewModifier;
}

uint64_t dispatch thunk of AnyImageModifier.modifyImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for AnyImageModifierBox()
{
  return &type metadata for AnyImageModifierBox;
}

uint64_t destroy for NavigationDestinationModifier(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int8 *)(a1 + 24);
  if (v2 != 255)
    sub_1B0F5E6A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v2 & 1);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationDestinationModifier(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1B0F5E604(*a2, v7, v8, v4 & 1);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v5;
  }
  v9 = *((unsigned __int8 *)a2 + 56);
  if (v9 <= 0xFD)
  {
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    sub_1B0F56B9C(v10, v11, v12, *((_BYTE *)a2 + 56));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  v13 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v13;
  v14 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = a2[12];
  v15 = *((_BYTE *)a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 128) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 104, (uint64_t)(a2 + 13));
  *(_BYTE *)(a1 + 144) = v15;
  v17 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v17;
  v18 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationDestinationModifier(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v15 = v4 & 1;
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 2);
      sub_1B0F5E604(*(_QWORD *)a2, v17, v18, v4 & 1);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v15;
    }
  }
  else if (v4 == 255)
  {
    sub_1B0F5A3AC(a1, &qword_1EEEDE7E8);
    v5 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    sub_1B0F5E604(*(_QWORD *)a2, v9, v10, v4 & 1);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_BYTE *)(a1 + 24);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v7;
    sub_1B0F5E6A0(v11, v12, v13, v14);
  }
  v19 = (_OWORD *)(a1 + 32);
  v20 = a2 + 2;
  v21 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) <= 0xFDu)
  {
    if (v21 <= 0xFD)
    {
      v27 = *((_QWORD *)a2 + 4);
      v28 = *((_QWORD *)a2 + 5);
      v29 = *((_QWORD *)a2 + 6);
      sub_1B0F56B9C(v27, v28, v29, *((_BYTE *)a2 + 56));
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(_QWORD *)(a1 + 40);
      v32 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = v28;
      *(_QWORD *)(a1 + 48) = v29;
      v33 = *(_BYTE *)(a1 + 56);
      *(_BYTE *)(a1 + 56) = v21;
      sub_1B0F56ADC(v30, v31, v32, v33);
    }
    else
    {
      sub_1B0F5EA14(a1 + 32);
      v23 = *(__int128 *)((char *)a2 + 41);
      *v19 = *v20;
      *(_OWORD *)(a1 + 41) = v23;
    }
  }
  else if (v21 <= 0xFD)
  {
    v24 = *((_QWORD *)a2 + 4);
    v25 = *((_QWORD *)a2 + 5);
    v26 = *((_QWORD *)a2 + 6);
    sub_1B0F56B9C(v24, v25, v26, *((_BYTE *)a2 + 56));
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = v25;
    *(_QWORD *)(a1 + 48) = v26;
    *(_BYTE *)(a1 + 56) = v21;
  }
  else
  {
    v22 = *v20;
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *v19 = v22;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((__int128 *)a1 != a2)
  {
    sub_1B0F62D10(a1 + 104);
    v34 = *((_BYTE *)a2 + 144);
    v35 = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 128) = v35;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1 + 104, (uint64_t)a2 + 104);
    *(_BYTE *)(a1 + 144) = v34;
  }
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  return a1;
}

uint64_t assignWithTake for NavigationDestinationModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 == 255)
  {
    sub_1B0F5A3AC(a1, &qword_1EEEDE7E8);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = v4 & 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  sub_1B0F5E6A0(v8, v9, v10, v6);
LABEL_6:
  v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 > 0xFD)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  v12 = *(unsigned __int8 *)(a2 + 56);
  if (v12 > 0xFD)
  {
    sub_1B0F5EA14(a1 + 32);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 56) = v12;
  sub_1B0F56ADC(v14, v15, v16, v11);
LABEL_11:
  v17 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1B0F62D10(a1 + 104);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release();
  v19 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v19;
  swift_release();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationDestinationModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationDestinationModifier()
{
  return &type metadata for NavigationDestinationModifier;
}

uint64_t sub_1B0FC7858(char a1)
{
  if (!a1)
    return 0x6E65736572507369;
  if (a1 == 1)
    return 0xD000000000000016;
  return 0x74616E6974736564;
}

uint64_t sub_1B0FC78C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B100C3CC(*a1, *a2);
}

uint64_t sub_1B0FC78D0()
{
  return sub_1B1010B20();
}

uint64_t sub_1B0FC78D8()
{
  return sub_1B1011DF4();
}

uint64_t sub_1B0FC78E0()
{
  return sub_1B1015750();
}

uint64_t sub_1B0FC78E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC88CC();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC7914@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FC7858(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FC793C()
{
  char *v0;

  return sub_1B0FC7858(*v0);
}

uint64_t sub_1B0FC7944@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FC88CC();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC7968()
{
  sub_1B0FC86B8();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC7990()
{
  sub_1B0FC86B8();
  return sub_1B10362C0();
}

uint64_t sub_1B0FC79B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int128 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int128 v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  char v31;
  unsigned __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int128 v40;
  uint64_t v41;
  char v42;
  unsigned __int128 v43;
  uint64_t v44;
  char v45;
  unsigned __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0260);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = 0uLL;
  v41 = 0;
  v42 = -1;
  v44 = 0;
  v43 = 0uLL;
  v45 = -2;
  v9 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B0FC86B8();
  sub_1B1036278();
  if (v2)
  {
    v54 = v2;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (uint64_t)v30;
    v17 = -1;
    v18 = -2;
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1(v16);
    sub_1B0F5FD28(v15, v14, v13, v17);
    return sub_1B0F56B88(v12, v11, v10, v18);
  }
  v19 = v6;
  LOBYTE(v32) = 0;
  if ((sub_1B10360D4() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE7E8);
    v31 = 0;
    sub_1B0F5A7E4((unint64_t *)&qword_1EEEDE7F0, &qword_1EEEDE7E8, (uint64_t)&protocol conformance descriptor for Referenceable<A>);
    sub_1B10360BC();
    v54 = 0;
    v28 = 0;
    v20 = v32;
    v14 = v20 >> 64;
    v25 = v20;
    v40 = v32;
    v41 = v33;
    v26 = v33;
    v27 = 0uLL;
    v17 = BYTE8(v33);
    v42 = BYTE8(v33);
  }
  else
  {
    LOBYTE(v32) = 1;
    if ((sub_1B10360D4() & 1) != 0)
    {
      v31 = 1;
      sub_1B0F56A98();
      sub_1B10360BC();
      v54 = 0;
      v23 = a2;
      v25 = 0;
      v26 = 0;
      v14 = 0;
      v27 = v32;
      v43 = v32;
      v28 = v33;
      v44 = v33;
      v29 = BYTE8(v33);
      v45 = BYTE8(v33);
      v17 = -1;
      goto LABEL_9;
    }
    v54 = 0;
    v28 = 0;
    v26 = 0;
    v27 = 0uLL;
    v14 = 0;
    v25 = 0;
    v17 = -1;
  }
  v29 = 254;
  v23 = a2;
LABEL_9:
  v31 = 2;
  sub_1B0F64238();
  v21 = v54;
  sub_1B10360BC();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v5);
  v54 = v21;
  if (v21)
  {
    v16 = (uint64_t)v30;
    v18 = v29;
    v11 = *((_QWORD *)&v27 + 1);
    v10 = v28;
    v13 = v26;
    v12 = v27;
    v15 = v25;
    goto LABEL_11;
  }
  v50 = v36;
  v51 = v37;
  v52 = v38;
  v53 = v39;
  v46 = v32;
  v47 = v33;
  v48 = v34;
  v49 = v35;
  sub_1B0FC848C((uint64_t *)&v40, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return sub_1B0FC86FC((uint64_t)&v40);
}

uint64_t sub_1B0FC7D60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _DWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;

  v7 = *(unsigned __int8 *)(v3 + 24);
  v51 = a3;
  if (v7 == 255)
  {
    v37 = (uint64_t)v4;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  sub_1B0F5E604(*(_QWORD *)v3, v8, v10, v7 & 1);
  v11 = sub_1B102A208(a2, v9, v8, v10, v7 & 1);
  if (v4)
  {

    sub_1B0F5FD28(v9, v8, v10, v7);
    v37 = 0;
LABEL_5:
    v14 = a1[3];
    v15 = a1[4];
    v38 = __swift_project_boxed_opaque_existential_1(a1, v14);
    sub_1B0FC848C((uint64_t *)v3, (uint64_t)&v39);
    v16 = swift_allocObject();
    v17 = v48;
    *(_OWORD *)(v16 + 144) = v47;
    *(_OWORD *)(v16 + 160) = v17;
    *(_OWORD *)(v16 + 176) = v49;
    v18 = v50;
    v19 = v44;
    *(_OWORD *)(v16 + 80) = v43;
    *(_OWORD *)(v16 + 96) = v19;
    v20 = v46;
    *(_OWORD *)(v16 + 112) = v45;
    *(_OWORD *)(v16 + 128) = v20;
    v21 = v40;
    *(_OWORD *)(v16 + 16) = v39;
    *(_OWORD *)(v16 + 32) = v21;
    v22 = v42;
    *(_OWORD *)(v16 + 48) = v41;
    *(_OWORD *)(v16 + 64) = v22;
    *(_QWORD *)(v16 + 192) = v18;
    *(_QWORD *)(v16 + 200) = a2;
    v23 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0250);
    v24 = sub_1B0F8AF44();
    v25 = sub_1B0FC8554();
    *(_QWORD *)&v39 = v14;
    *((_QWORD *)&v39 + 1) = &type metadata for DecodableState;
    *(_QWORD *)&v40 = v23;
    *((_QWORD *)&v40 + 1) = v15;
    *(_QWORD *)&v41 = v24;
    *((_QWORD *)&v41 + 1) = v25;
    v26 = MEMORY[0x1B5E15134](0, &v39, MEMORY[0x1E0CDEB68], 0);
    v27 = v51;
    v51[3] = v26;
    *(_QWORD *)&v39 = v14;
    *((_QWORD *)&v39 + 1) = &type metadata for DecodableState;
    *(_QWORD *)&v40 = v23;
    *((_QWORD *)&v40 + 1) = v15;
    *(_QWORD *)&v41 = v24;
    *((_QWORD *)&v41 + 1) = v25;
    v27[4] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(v27);
    swift_retain();
    sub_1B10354EC();
    return swift_release();
  }
  v37 = v11;
  v36 = v12;
  v35[1] = v13;
  sub_1B0F5FD28(v9, v8, v10, v7);
  v30 = a1[3];
  v29 = a1[4];
  v31 = __swift_project_boxed_opaque_existential_1(a1, v30);
  v38 = v35;
  MEMORY[0x1E0C80A78](v31);
  v32 = sub_1B0F64174();
  *(_QWORD *)&v39 = v30;
  *((_QWORD *)&v39 + 1) = &type metadata for ViewContent;
  *(_QWORD *)&v40 = v29;
  *((_QWORD *)&v40 + 1) = v32;
  v33 = MEMORY[0x1B5E15134](0, &v39, MEMORY[0x1E0CDEB48], 0);
  v34 = v51;
  v51[3] = v33;
  *(_QWORD *)&v39 = v30;
  *((_QWORD *)&v39 + 1) = &type metadata for ViewContent;
  *(_QWORD *)&v40 = v29;
  *((_QWORD *)&v40 + 1) = v32;
  v34[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(v34);
  sub_1B10354E0();
  swift_release();
  return swift_release();
}

uint64_t sub_1B0FC80F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[11];
  uint64_t v26;
  _BYTE v27[120];
  uint64_t v28;
  uint64_t v29;

  v23 = (uint64_t)(a2 + 8);
  v24 = *a1;
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = sub_1B0F554CC(MEMORY[0x1E0DEE9D8]);
  v9 = sub_1B0F553A4(v7);
  v10 = swift_allocObject();
  v11 = qword_1EEEE0760;
  swift_retain();
  swift_retain();
  *(_QWORD *)(v10 + v11) = sub_1B0F553A4(v7);
  *(_QWORD *)(v10 + qword_1EEEE0768) = a3;
  swift_retain_n();
  swift_release();
  v12 = sub_1B0F55C84(a3);
  swift_retain();
  sub_1B0F56FC4(v8, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1B0F56C60);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = (unint64_t *)(v12 + qword_1EEEE0760);
  swift_beginAccess();
  *v13 = v9;
  swift_bridgeObjectRelease();
  sub_1B0FB773C();
  v14 = sub_1B1034694();
  sub_1B0F641B8(v23, (uint64_t)v27);
  v28 = v14;
  v29 = v12;
  sub_1B0FC848C(a2, (uint64_t)v25);
  v15 = swift_allocObject();
  v16 = v25[9];
  *(_OWORD *)(v15 + 144) = v25[8];
  *(_OWORD *)(v15 + 160) = v16;
  *(_OWORD *)(v15 + 176) = v25[10];
  v17 = v26;
  v18 = v25[5];
  *(_OWORD *)(v15 + 80) = v25[4];
  *(_OWORD *)(v15 + 96) = v18;
  v19 = v25[7];
  *(_OWORD *)(v15 + 112) = v25[6];
  *(_OWORD *)(v15 + 128) = v19;
  v20 = v25[1];
  *(_OWORD *)(v15 + 16) = v25[0];
  *(_OWORD *)(v15 + 32) = v20;
  v21 = v25[3];
  *(_OWORD *)(v15 + 48) = v25[2];
  *(_OWORD *)(v15 + 64) = v21;
  *(_QWORD *)(v15 + 192) = v17;
  *(_QWORD *)(v15 + 200) = a3;
  *(_QWORD *)(v15 + 208) = v24;
  sub_1B0FC8670((uint64_t)v27, (uint64_t)a4);
  a4[17] = sub_1B0FC8664;
  a4[18] = v15;
  a4[19] = 0;
  a4[20] = 0;
  swift_retain();
  swift_retain();
  return sub_1B0F5A3AC((uint64_t)v27, &qword_1EEEDF030);
}

uint64_t sub_1B0FC8314(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned __int8 *)(result + 56);
  if (v3 <= 0xFD)
  {
    v9 = *(_QWORD *)(result + 32);
    v10 = *(_QWORD *)(result + 40);
    v11 = *(_QWORD *)(result + 48);
    sub_1B0F56B9C(v9, v10, v11, v3);
    v6 = StringResolvable.resolved(with:)(a2);
    v8 = v7;
    sub_1B0F56B88(v9, v10, v11, v3);
    swift_retain();
    return sub_1B0FEBD74(a3, v6, v8);
  }
  return result;
}

uint64_t sub_1B0FC83FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FC7D60(a1, a2, a3);
}

uint64_t sub_1B0FC8410@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FC79B8(a1, a2);
}

unint64_t sub_1B0FC8424(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FC8448();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FC8448()
{
  unint64_t result;

  result = qword_1EEEE0248;
  if (!qword_1EEEE0248)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042640, &type metadata for NavigationDestinationModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0248);
  }
  return result;
}

uint64_t sub_1B0FC848C(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for NavigationDestinationModifier(a2, a1);
  return a2;
}

uint64_t sub_1B0FC84C0()
{
  uint64_t v0;
  int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(v0 + 40);
  if (v1 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v1 & 1);
  v2 = *(unsigned __int8 *)(v0 + 72);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0FC8548@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B0FC80F8(a1, (uint64_t *)(v2 + 16), *(_QWORD *)(v2 + 200), a2);
}

unint64_t sub_1B0FC8554()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEEE0258;
  if (!qword_1EEEE0258)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEE0250);
    v2[0] = sub_1B0F8AFEC();
    v2[1] = MEMORY[0x1E0CDC8B0];
    result = MEMORY[0x1B5E15188](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEEE0258);
  }
  return result;
}

uint64_t sub_1B0FC85C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0F641B8(*(_QWORD *)(v1 + 16) + 64, a1);
}

uint64_t sub_1B0FC85D0()
{
  uint64_t v0;
  int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(v0 + 40);
  if (v1 != 255)
    sub_1B0F5E6A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v1 & 1);
  v2 = *(unsigned __int8 *)(v0 + 72);
  if (v2 <= 0xFD)
    sub_1B0F56ADC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0FC8664()
{
  uint64_t v0;

  return sub_1B0FC8314(v0 + 16, *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
}

uint64_t sub_1B0FC8670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B0FC86B8()
{
  unint64_t result;

  result = qword_1EEEE0268;
  if (!qword_1EEEE0268)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042780, &type metadata for NavigationDestinationModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0268);
  }
  return result;
}

uint64_t sub_1B0FC86FC(uint64_t a1)
{
  destroy for NavigationDestinationModifier(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FC8774 + 4 * byte_1B1042605[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FC87A8 + 4 * asc_1B1042600[v4]))();
}

uint64_t sub_1B0FC87A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC87B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FC87B8);
  return result;
}

uint64_t sub_1B0FC87C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FC87CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FC87D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FC87D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationDestinationModifier.CodingKeys()
{
  return &type metadata for NavigationDestinationModifier.CodingKeys;
}

unint64_t sub_1B0FC87F8()
{
  unint64_t result;

  result = qword_1EEEE0270;
  if (!qword_1EEEE0270)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042758, &type metadata for NavigationDestinationModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0270);
  }
  return result;
}

unint64_t sub_1B0FC8840()
{
  unint64_t result;

  result = qword_1EEEE0278;
  if (!qword_1EEEE0278)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042690, &type metadata for NavigationDestinationModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0278);
  }
  return result;
}

unint64_t sub_1B0FC8888()
{
  unint64_t result;

  result = qword_1EEEE0280;
  if (!qword_1EEEE0280)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10426B8, &type metadata for NavigationDestinationModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0280);
  }
  return result;
}

uint64_t sub_1B0FC88CC()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t Referenceable<>.resolvedValue(store:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v40 = a1;
  v5 = v4;
  v39 = a3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = sub_1B1035E64();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v35 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v38 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 16))(v18, v5, a2);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v14 + 32))(a4, v18, v8);
  v37 = a4;
  v20 = *v18;
  v21 = v18[1];
  v22 = v18[2];
  if ((~v22 & 0xF000000000000007) != 0)
  {
    swift_retain();
    v26 = v40;
    RemoteStateStore.subscript.getter(v20, v21, &v43);
    v27 = v21;
    v28 = v43;
    if ((~v43 & 0xF000000000000007) != 0)
    {
      swift_bridgeObjectRelease();
      v43 = v22;
      v42 = v28;
      v32 = type metadata accessor for SubReference(0, v8, *(_QWORD *)(a2 + 24), v31);
      sub_1B100588C(&v42, v26, v32, v39);
      sub_1B0F571D8(v22);
      sub_1B0FC9D10(v28);
    }
    else
    {
      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v29 = v20;
      *(_QWORD *)(v29 + 8) = v27;
      *(_QWORD *)(v29 + 16) = v8;
      *(_BYTE *)(v29 + 32) = 0;
      swift_willThrow();
      sub_1B0F571D8(v22);
    }
    return sub_1B0F571D8(v22);
  }
  else
  {
    v36 = *v18;
    RemoteStateStore.subscript.getter(v20, v21, &v43);
    v23 = v43;
    if ((~v43 & 0xF000000000000007) != 0)
    {
      v42 = v43;
      v30 = v41;
      sub_1B0F99570(v8, v39);
      sub_1B0FC9D10(v23);
      if (v30)
      {
        return swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v8);
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v34 = v38;
        v33(v38, v13, v8);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v33)(v37, v34, v8);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, v8);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v24 = v36;
      *(_QWORD *)(v24 + 8) = v21;
      *(_QWORD *)(v24 + 16) = v8;
      *(_BYTE *)(v24 + 32) = 0;
      return swift_willThrow();
    }
  }
}

uint64_t Referenceable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  _QWORD v50[4];
  _QWORD *v51;

  v44 = a4;
  v40 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF888);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDF890);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v47 = a2;
  v48 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a3;
  v16 = type metadata accessor for Referenceable(0, a2, a3, v15);
  v42 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v41 = (uint64_t *)((char *)&v39 - v20);
  v21 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_1B0FA90CC();
  sub_1B1036278();
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    sub_1B0F5A3AC((uint64_t)v11, &qword_1EEEDF888);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    v23 = v48;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v48, v11, v12);
    LOBYTE(v50[0]) = 0;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v50[0]) = 0;
      v24 = sub_1B10360B0();
      v26 = v25;
      v28 = type metadata accessor for SubReference(0, v47, v46, v27);
      LOBYTE(v49) = 1;
      MEMORY[0x1B5E15188](&protocol conformance descriptor for SubReference<A>, v28);
      sub_1B10360A4();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
      v38 = v50[0];
      v32 = v41;
      *v41 = v24;
      v32[1] = v26;
      v32[2] = v38;
      v33 = v43;
      swift_storeEnumTagMultiPayload();
      v34 = v44;
      v35 = v42;
      v22 = v51;
      goto LABEL_8;
    }
    LOBYTE(v50[0]) = 2;
    if ((sub_1B10360D4() & 1) != 0)
    {
      LOBYTE(v50[0]) = 2;
      v31 = sub_1B10360B0();
      sub_1B0FF100C(v31, v36, v47, v46, (uint64_t)v19);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
      swift_bridgeObjectRelease();
      v32 = v41;
      v35 = v42;
      v33 = v43;
      (*(void (**)(uint64_t *, char *, uint64_t))(v42 + 32))(v41, v19, v43);
      v34 = v44;
      v22 = v51;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
  }
  v22 = v51;
  __swift_project_boxed_opaque_existential_1(v51, v51[3]);
  sub_1B1036260();
  sub_1B0F5A0E4(&v49, (uint64_t)v50);
  __swift_project_boxed_opaque_existential_1(v50, v50[3]);
  v29 = v45;
  v30 = v47;
  sub_1B1036164();
  v32 = v41;
  (*(void (**)(uint64_t *, char *, uint64_t))(v40 + 32))(v41, v29, v30);
  v33 = v43;
  swift_storeEnumTagMultiPayload();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  v34 = v44;
  v35 = v42;
LABEL_8:
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v35 + 32))(v34, v32, v33);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t Referenceable<>.resolvedBinding(store:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v57 = a4;
  v54 = a3;
  v56 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  sub_1B1035E64();
  v6 = sub_1B103587C();
  v7 = MEMORY[0x1E0C80A78](v6);
  v55 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v50 - v9;
  v53 = sub_1B103587C();
  v10 = sub_1B1035E64();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v50 - v16;
  v18 = *(_QWORD *)(v5 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (uint64_t *)((char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16))(v23, v66, a2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))(v21, v23, v5);
    sub_1B1035870();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v5);
  }
  v50 = v17;
  v51 = v11;
  v25 = v56;
  v26 = v5;
  v66 = v10;
  v28 = *v23;
  v27 = v23[1];
  v29 = v23[2];
  if ((~v29 & 0xF000000000000007) != 0)
  {
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v25;
    v34[5] = v28;
    v34[6] = v27;
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = 0;
    v35[3] = 0;
    v35[4] = v25;
    v35[5] = v28;
    v55 = (char *)v28;
    v35[6] = v27;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    sub_1B0F5A880(v29);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EEEE0288);
    sub_1B1035864();
    v59 = v61;
    v60 = v62;
    sub_1B1035888();
    v36 = v26;
    v37 = v29;
    if (v64)
    {
      v38 = v64;
      v39 = v63;
      v40 = v65;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v61 = v37;
      v63 = v39;
      v64 = v38;
      v65 = v40;
      v42 = type metadata accessor for SubReference(0, v36, *(_QWORD *)(a2 + 24), v41);
      v43 = v58;
      sub_1B1005078(&v63, v25, v42, v54);
      v44 = v57;
      if (v43)
      {
        sub_1B0F571D8(v37);
        sub_1B0FCB67C(v39, v38);
        return sub_1B0F571D8(v37);
      }
      v56 = v40;
      v58 = v38;
      v46 = v50;
      sub_1B1035888();
      v47 = v53;
      v48 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v53) != 1)
      {
        sub_1B0F571D8(v37);
        sub_1B0FCB67C(v39, v58);
        sub_1B0F571D8(v37);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v44, v46, v47);
      }
      (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v66);
      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)(v49 + 24) = 0;
      *(_BYTE *)(v49 + 32) = 5;
      swift_willThrow();
      sub_1B0FCB67C(v39, v58);
    }
    else
    {
      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v45 = v55;
      *(_QWORD *)(v45 + 8) = v27;
      *(_QWORD *)(v45 + 16) = v26;
      *(_BYTE *)(v45 + 32) = 0;
      swift_willThrow();
    }
    sub_1B0F571D8(v37);
    return sub_1B0F571D8(v37);
  }
  RemoteStateStore.binding<A>(forKey:)(v28, v27, v26, v54);
  sub_1B1035888();
  v30 = v53;
  v31 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v53) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v66);
    sub_1B0FA58DC();
    swift_allocError();
    *(_QWORD *)v32 = v28;
    *(_QWORD *)(v32 + 8) = v27;
    *(_QWORD *)(v32 + 16) = v26;
    *(_BYTE *)(v32 + 32) = 0;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v57, v14, v30);
  }
}

_QWORD *sub_1B0FC96A0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  if ((v2[3] & 1) != 0)
  {
    v5 = *result;
    v4 = result[1];
    v6 = result[2];
    v7 = *((_BYTE *)result + 24);
    v9 = *v2;
    v8 = v2[1];
    if ((~v2[2] & 0xF000000000000007) == 0)
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v5;
      *(_QWORD *)(v10 + 24) = v4;
      *(_QWORD *)(v10 + 32) = v6;
      *(_BYTE *)(v10 + 40) = v7;
      *(_QWORD *)(v10 + 48) = 0xF000000000000007;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v10 | 0x8000000000000000;
      *(_BYTE *)(a2 + 24) = 1;
      swift_bridgeObjectRetain();
      return (_QWORD *)sub_1B0F6C708(v5, v4, v6, v7);
    }
    v15 = v2[2];
    v13[0] = v5;
    v13[1] = v4;
    v13[2] = v6;
    v14 = v7;
    swift_bridgeObjectRetain();
    result = sub_1B1005DD4((uint64_t)v13, &v16);
    v12 = v16;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v12;
    v11 = 1;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v11 = -1;
  }
  *(_BYTE *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_1B0FC97BC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD868(0, v3, 0);
    v4 = v12;
    v6 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(v12 + 16);
    do
    {
      v9 = *v6++;
      v8 = v9;
      v10 = *(_QWORD *)(v12 + 24);
      swift_retain();
      if (v7 >= v10 >> 1)
        sub_1B0FDD868(v10 > 1, v7 + 1, 1);
      *(_QWORD *)(v12 + 16) = v7 + 1;
      *(_QWORD *)(v12 + 8 * v7++ + 32) = v8;
      --v3;
    }
    while (v3);
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *a2 = result | 0x8000000000000000;
  return result;
}

uint64_t sub_1B0FC98AC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B0FDD868(0, v3, 0);
    v4 = v12;
    v6 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v6++;
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v7;
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_1B0FDD868(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8 | 0x2000000000000000;
      --v3;
    }
    while (v3);
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *a2 = result | 0x8000000000000000;
  return result;
}

uint64_t sub_1B0FC99B0(char a1)
{
  return *(_QWORD *)&aReferencsubref[8 * a1];
}

uint64_t sub_1B0FC99D0(char *a1, char *a2)
{
  return sub_1B100D268(*a1, *a2);
}

uint64_t sub_1B0FC99DC()
{
  return sub_1B1010BD4();
}

uint64_t sub_1B0FC99E4()
{
  return sub_1B1012520();
}

uint64_t sub_1B0FC99EC()
{
  return sub_1B1014D54();
}

uint64_t sub_1B0FC99F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FCC8C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC9A20@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FC99B0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FC9A48()
{
  char *v0;

  return sub_1B0FC99B0(*v0);
}

uint64_t sub_1B0FC9A50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FCC8C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FC9A74()
{
  sub_1B0FA90CC();
  return sub_1B10362B4();
}

uint64_t sub_1B0FC9A9C()
{
  sub_1B0FA90CC();
  return sub_1B10362C0();
}

uint64_t Referenceable.addingSubReference(subReference:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[2];
  uint64_t v29;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v10 = (uint64_t *)((char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *v8;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  v12(v10, v4, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = *v10;
    v14 = v10[1];
    v16 = v10[2];
    if ((~v16 & 0xF000000000000007) != 0)
    {
      v28[0] = v11;
      v28[1] = v16;
      v25 = type metadata accessor for SubReference(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v13);
      sub_1B1004EA8(v28, v25, &v29);
      sub_1B0F571D8(v16);
      v26 = v29;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = v26;
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a3 = v15;
      a3[1] = v14;
      a3[2] = v11;
      swift_storeEnumTagMultiPayload();
      return sub_1B0F5A880(v11);
    }
  }
  else
  {
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v18 = sub_1B103467C();
    __swift_project_value_buffer(v18, (uint64_t)qword_1EEF0BA00);
    v19 = sub_1B1034664();
    v20 = sub_1B1035E1C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B0F50000, v19, v20, "Attempting to add a subreference to a value", v21, 2u);
      MEMORY[0x1B5E15248](v21, -1, -1);
    }

    sub_1B0FA58DC();
    swift_allocError();
    v23 = v22;
    v22[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    v12(boxed_opaque_existential_1, v4, a2);
    *((_BYTE *)v23 + 32) = 2;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v10, a2);
  }
}

uint64_t sub_1B0FC9CF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Referenceable.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1B0FC9D10(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for Referenceable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Referenceable);
}

uint64_t Referenceable<>.setValue(store:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(unint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v50 = a4;
  v46 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_1B1035E64();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v43 - v11;
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  v13 = MEMORY[0x1E0C80A78](v10);
  v47 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  v18(v17, v4, a3);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1B0FA58DC();
    swift_allocError();
    v26 = v25;
    v25[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    v18(boxed_opaque_existential_1, v4, a3);
    *((_BYTE *)v26 + 32) = 2;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, a3);
  }
  v20 = *v17;
  v19 = v17[1];
  v48 = v17[2];
  RemoteStateStore.subscript.getter(v20, v19, &v55);
  v21 = v55;
  if ((~v55 & 0xF000000000000007) == 0)
  {
    v22 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v12, 1, 1, v52);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_1B0FA58DC();
    swift_allocError();
    *(_QWORD *)v23 = v20;
    *(_QWORD *)(v23 + 8) = v19;
    *(_QWORD *)(v23 + 16) = v22;
    *(_BYTE *)(v23 + 32) = 0;
    swift_willThrow();
    return sub_1B0F571D8(v48);
  }
  v29 = v48;
  v28 = v49;
  v44 = v20;
  v45 = v19;
  v54 = v55;
  v30 = v52;
  v31 = v50;
  sub_1B0F99570(v52, v50);
  sub_1B0FC9D10(v21);
  if (v28)
  {
    sub_1B0F571D8(v29);
    return swift_bridgeObjectRelease();
  }
  v49 = a1;
  v32 = v51;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v12, 0, 1, v30);
  v33 = v47;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v47, v12, v30);
  v34 = v31;
  v35 = *(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v31 + 8);
  v35(&v55, v30, v34);
  if ((v55 >> 61) < 4)
  {
    swift_release();
    v35(&v55, v30, v34);
    sub_1B0FEBD74(v55, v44, v45);
    sub_1B0F571D8(v48);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v33, v30);
  }
  if (v55 >> 61 == 4)
  {
    v36 = v48;
    if ((~v48 & 0xF000000000000007) != 0)
    {
      v37 = *(_QWORD **)((v55 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v53 = v48;
      v38 = *(_QWORD *)(a3 + 24);
      swift_retain();
      sub_1B0FCAA18(v37, &v53, v46, v49, v30, v50, v38, (unint64_t *)&v54);
      v41 = v54;
      swift_retain();
      sub_1B0FEBD74(v41, v44, v45);
      sub_1B0F571D8(v36);
      swift_release();
LABEL_15:
      sub_1B0F571D8(v36);
      goto LABEL_16;
    }
  }
  else if ((~v48 & 0xF000000000000007) != 0)
  {
    v39 = *(_QWORD *)((v55 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v53 = v48;
    v40 = *(_QWORD *)(a3 + 24);
    swift_retain();
    sub_1B0FCA1E4(v39, &v53, v46, v49, v30, v50, v40, (unint64_t *)&v54);
    v42 = v54;
    swift_retain();
    sub_1B0FEBD74(v42, v44, v45);
    v36 = v48;
    sub_1B0F571D8(v48);
    sub_1B0FC9D10(v42);
    goto LABEL_15;
  }
  v35((unint64_t *)&v54, v30, v50);
  sub_1B0FEBD74(v54, v44, v45);
LABEL_16:
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v30);
  return swift_release();
}

uint64_t sub_1B0FCA1E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t result;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v66;
  os_log_type_t typea;
  uint64_t v70[3];
  unsigned __int8 v71;
  uint64_t v72;

  v9 = *a2;
  if ((*a2 & 0x8000000000000000) == 0)
  {
    v13 = *(_QWORD *)(v9 + 24);
    v14 = *(_QWORD *)(v9 + 32);
    v15 = *(_BYTE *)(v9 + 40);
    v16 = *(_QWORD *)(v9 + 48);
    v70[0] = *(_QWORD *)(v9 + 16);
    v12 = v70[0];
    v70[1] = v13;
    v70[2] = v14;
    v71 = v15;
    swift_bridgeObjectRetain();
    sub_1B0F56B9C(v70[0], v13, v14, v15);
    sub_1B0F5A880(v16);
    v17 = StringResolvable.resolved(with:)(a4);
    if (v8)
    {
      swift_bridgeObjectRelease();
      sub_1B0F571D8(v16);
      v19 = v70[0];
      v20 = v13;
      v21 = v14;
      v22 = v15;
      return sub_1B0F56ADC(v19, v20, v21, v22);
    }
    v29 = a4;
    v30 = v17;
    v59 = v29;
    v31 = v18;
    v60 = v70[0];
    v61 = v13;
    v62 = v14;
    if ((~v16 & 0xF000000000000007) == 0)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(a6 + 8))(v70, a5);
      v32 = v70[0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v72 = a1;
      sub_1B0F9D4A8(v32, v30, v31, isUniquelyReferenced_nonNull_native);
      v34 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B0F56ADC(v12, v13, v62, v15);
LABEL_12:
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = sub_1B0FCB3E0(v34);
      result = swift_bridgeObjectRelease();
      *a8 = v35 | 0xA000000000000000;
      return result;
    }
    v36 = v16;
    v37 = v18;
    if (*(_QWORD *)(a1 + 16))
    {
      sub_1B0F5A880(v36);
      swift_bridgeObjectRetain();
      v38 = sub_1B0F56A3C(v30, v31);
      if ((v39 & 1) != 0)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v38);
        swift_retain();
        swift_bridgeObjectRelease();
        if ((v40 >> 61) < 4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_1EEEDE0B0 != -1)
            swift_once();
          v41 = sub_1B103467C();
          __swift_project_value_buffer(v41, (uint64_t)qword_1EEF0BA00);
          v42 = sub_1B1034664();
          v43 = sub_1B1035E34();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v44 = 0;
            _os_log_impl(&dword_1B0F50000, v42, v43, "Referenceable.updatedDict: Have a subreference but next structure is a value", v44, 2u);
            MEMORY[0x1B5E15248](v44, -1, -1);
          }

          sub_1B0FA58DC();
          swift_allocError();
          *(_QWORD *)v45 = 3;
          *(_QWORD *)(v45 + 8) = 0;
          *(_QWORD *)(v45 + 16) = 0;
          *(_QWORD *)(v45 + 24) = 0;
          *(_BYTE *)(v45 + 32) = 5;
          swift_willThrow();
          swift_release();
          sub_1B0F571D8(v36);
          sub_1B0F571D8(v36);
          v19 = v60;
          v20 = v61;
          v21 = v62;
          v22 = v15;
          return sub_1B0F56ADC(v19, v20, v21, v22);
        }
        v56 = *(_QWORD **)((v40 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        v72 = v36;
        swift_retain();
        if (v40 >> 61 == 4)
        {
          sub_1B0FCAA18(v56, &v72, a3, v59, a5, a6, a7, (unint64_t *)v70);
          v54 = v70[0];
          v55 = swift_isUniquelyReferenced_nonNull_native();
          v72 = a1;
          sub_1B0F9D4A8(v54, v30, v37, v55);
          v34 = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B0F571D8(v36);
        }
        else
        {
          sub_1B0FCA1E4(v70, v56, &v72, a3, v59, a5, a6, a7);
          v57 = v70[0];
          swift_retain();
          v58 = swift_isUniquelyReferenced_nonNull_native();
          v70[0] = a1;
          sub_1B0F9D4A8(v57, v30, v37, v58);
          v34 = v70[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B0F571D8(v36);
          swift_release();
        }
        swift_release();
        sub_1B0F571D8(v36);
        sub_1B0F56ADC(v12, v61, v62, v15);
        swift_release();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    if (qword_1EEEDE0B0 != -1)
      swift_once();
    v46 = sub_1B103467C();
    __swift_project_value_buffer(v46, (uint64_t)qword_1EEF0BA00);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v47 = sub_1B1034664();
    v48 = sub_1B1035E34();
    if (os_log_type_enabled(v47, v48))
    {
      typea = v48;
      v49 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      *(_DWORD *)v49 = 136315394;
      v70[0] = v66;
      swift_bridgeObjectRetain();
      v72 = sub_1B0F6B618(v30, v31, v70);
      sub_1B1035E7C();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v49 + 12) = 2080;
      swift_bridgeObjectRetain();
      v50 = sub_1B1035AF8();
      v52 = v51;
      swift_bridgeObjectRelease();
      v72 = sub_1B0F6B618(v50, v52, v70);
      sub_1B1035E7C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0F50000, v47, typea, "Referenceable.updatedDict: key not found %s dict: %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E15248](v66, -1, -1);
      MEMORY[0x1B5E15248](v49, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_1B0FA58DC();
    swift_allocError();
    *(_QWORD *)v53 = v30;
    *(_QWORD *)(v53 + 8) = v37;
    *(_BYTE *)(v53 + 32) = 4;
    swift_willThrow();
    sub_1B0F571D8(v36);
    sub_1B0F571D8(v36);
    v19 = v12;
    v20 = v61;
    v21 = v62;
    v22 = v15;
    return sub_1B0F56ADC(v19, v20, v21, v22);
  }
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v24 = sub_1B103467C();
  __swift_project_value_buffer(v24, (uint64_t)qword_1EEF0BA00);
  v25 = sub_1B1034664();
  v26 = sub_1B1035E34();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1B0F50000, v25, v26, "Referenceable.updatedDict: trying to modify a dictionary using an index subreference", v27, 2u);
    MEMORY[0x1B5E15248](v27, -1, -1);
  }

  sub_1B0FA58DC();
  swift_allocError();
  *(_QWORD *)v28 = 5;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_BYTE *)(v28 + 32) = 5;
  return swift_willThrow();
}

uint64_t sub_1B0FCAA18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];
  char v64;
  uint64_t v65;

  v9 = *a2;
  if (*a2 < 0)
  {
    v16 = v8;
    v20 = *(_QWORD *)(v9 + 24);
    v21 = *(_QWORD *)(v9 + 32);
    v22 = *(_BYTE *)(v9 + 40);
    v23 = *(_QWORD *)(v9 + 48);
    v63[0] = *(_QWORD *)(v9 + 16);
    v63[1] = v20;
    v63[2] = v21;
    v64 = v22;
    swift_bridgeObjectRetain();
    v61 = v63[0];
    v59 = v20;
    v60 = v21;
    sub_1B0F6C708(v63[0], v20, v21, v22);
    v62 = v23;
    sub_1B0F5A880(v23);
    sub_1B0FA7470(a4);
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (qword_1EEEDE0B0 != -1)
        swift_once();
      v29 = sub_1B103467C();
      __swift_project_value_buffer(v29, (uint64_t)qword_1EEF0BA00);
      v30 = sub_1B1034664();
      v31 = sub_1B1035E1C();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1B0F50000, v30, v31, "SubReference to update array, unable to resolve index", v32, 2u);
        MEMORY[0x1B5E15248](v32, -1, -1);
      }

      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v33 = 2;
      *(_QWORD *)(v33 + 8) = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_BYTE *)(v33 + 32) = 5;
      swift_willThrow();
      sub_1B0F571D8(v62);
      v34 = v61;
      v35 = v20;
      v36 = v60;
      v37 = v22;
      return sub_1B0F6C7D4(v34, v35, v36, v37);
    }
    v27 = v25;
    if (v25 < 0 || v25 >= a1[2])
    {
      swift_bridgeObjectRelease();
      if (qword_1EEEDE0B0 != -1)
        swift_once();
      v38 = sub_1B103467C();
      __swift_project_value_buffer(v38, (uint64_t)qword_1EEF0BA00);
      swift_bridgeObjectRetain_n();
      v39 = sub_1B1034664();
      v40 = sub_1B1035E34();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc();
        v42 = swift_slowAlloc();
        v63[0] = v42;
        *(_DWORD *)v41 = 134218242;
        v65 = v27;
        sub_1B1035E7C();
        *(_WORD *)(v41 + 12) = 2080;
        v43 = swift_bridgeObjectRetain();
        v44 = MEMORY[0x1B5E1472C](v43, &type metadata for DecodableState);
        v46 = v45;
        swift_bridgeObjectRelease();
        v65 = sub_1B0F6B618(v44, v46, v63);
        sub_1B1035E7C();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0F50000, v39, v40, "Referenceable.updatedArray: index out of range idx: %ld array: %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E15248](v42, -1, -1);
        MEMORY[0x1B5E15248](v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_1B0FA58DC();
      swift_allocError();
      *(_QWORD *)v47 = v27;
      *(_BYTE *)(v47 + 32) = 3;
      swift_willThrow();
      sub_1B0F571D8(v62);
      v34 = v61;
      v35 = v59;
      v36 = v60;
      v37 = v22;
      return sub_1B0F6C7D4(v34, v35, v36, v37);
    }
    if ((~v23 & 0xF000000000000007) == 0)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 8))(v63, a5, a6);
      v28 = v63[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_1B0FEEA88(a1);
      if (v27 < a1[2])
      {
        a1[v27 + 4] = v28;
        swift_release();
        sub_1B0F6C7D4(v61, v59, v21, v22);
LABEL_15:
        sub_1B0FC97BC((uint64_t)a1, a8);
        return swift_bridgeObjectRelease();
      }
      __break(1u);
      goto LABEL_46;
    }
    v48 = a1[v25 + 4];
    if ((v48 >> 61) < 4)
    {
      sub_1B0F5A880(v23);
      swift_retain();
      swift_bridgeObjectRelease();
      if (qword_1EEEDE0B0 == -1)
      {
LABEL_30:
        v49 = sub_1B103467C();
        __swift_project_value_buffer(v49, (uint64_t)qword_1EEF0BA00);
        v50 = sub_1B1034664();
        v51 = sub_1B1035E34();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v52 = 0;
          _os_log_impl(&dword_1B0F50000, v50, v51, "Referenceable.updatedArray: Have a subreference but next structure is a value", v52, 2u);
          MEMORY[0x1B5E15248](v52, -1, -1);
        }

        sub_1B0FA58DC();
        swift_allocError();
        *(_QWORD *)v53 = 3;
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)(v53 + 24) = 0;
        *(_BYTE *)(v53 + 32) = 5;
        swift_willThrow();
        swift_release();
        sub_1B0F571D8(v62);
        sub_1B0F571D8(v62);
        v34 = v61;
        v35 = v59;
        v36 = v60;
        v37 = v22;
        return sub_1B0F6C7D4(v34, v35, v36, v37);
      }
LABEL_46:
      swift_once();
      goto LABEL_30;
    }
    if (v48 >> 61 == 4)
    {
      v54 = *(_QWORD *)(v48 + 16);
      v65 = v23;
      swift_retain();
      sub_1B0F5A880(v23);
      swift_retain();
      sub_1B0FCAA18(v63, v54, &v65, a3, a4, a5, a6, a7);
      if (v16)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        sub_1B0F571D8(v23);
        swift_release();
        sub_1B0F6C7D4(v61, v59, v60, v22);
        sub_1B0F571D8(v23);
        return swift_release();
      }
      v48 = v63[0];
      a6 = v63[0] & 0x1FFFFFFFFFFFFFFFLL;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_1B0FEEA88(a1);
      if (v27 < a1[2])
      {
LABEL_44:
        a1[v27 + 4] = v48;
        swift_release();
        sub_1B0F571D8(v23);
        swift_release();
        sub_1B0F571D8(v23);
        sub_1B0F6C7D4(v61, v59, v60, v22);
        swift_release();
        swift_release();
        goto LABEL_15;
      }
      __break(1u);
    }
    v55 = *(_QWORD *)(v48 + 16);
    v65 = v23;
    swift_retain();
    sub_1B0F5A880(v23);
    swift_retain();
    sub_1B0FCA1E4(v63, v55, &v65, a3, a4, a5, a6, a7);
    if (v16)
      goto LABEL_40;
    v48 = v63[0];
    swift_retain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B0FEEA88(a1);
      a1 = (_QWORD *)result;
    }
    if (v27 >= a1[2])
    {
      __break(1u);
      return result;
    }
    goto LABEL_44;
  }
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v10 = sub_1B103467C();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EEF0BA00);
  v11 = sub_1B1034664();
  v12 = sub_1B1035E34();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B0F50000, v11, v12, "Referenceable.updatedArray: trying to modify an array using an key subreference", v13, 2u);
    MEMORY[0x1B5E15248](v13, -1, -1);
  }

  sub_1B0FA58DC();
  swift_allocError();
  *(_QWORD *)v14 = 4;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 32) = 5;
  return swift_willThrow();
}

uint64_t sub_1B0FCB2A0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = RemoteStateStore.subscript.getter(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_1B0FCB2E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = RemoteStateStore.subscript.getter(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), &v4);
  *a1 = v4;
  return result;
}

void *sub_1B0FCB324(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_1B1036050();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_1B0FCB3B8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FCB3E0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3E0);
  result = sub_1B103602C();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = 8 * i;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v19 = *v16;
    v20 = v16[1];
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = (_QWORD *)(v3[6] + 16 * i);
    *v21 = v19;
    v21[1] = v20;
    *(_QWORD *)(v3[7] + v17) = v18;
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v24;
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1B0FCB5A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = *a1;
  sub_1B0FCC934(*a1);
  swift_bridgeObjectRetain();
  return sub_1B0FEBD74(v8, a5, a6);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0FCB62C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *a1;
  sub_1B0FCC934(*a1);
  swift_bridgeObjectRetain();
  return sub_1B0FEBD74(v4, v2, v3);
}

uint64_t sub_1B0FCB67C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B0FCB6B8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B0FCB6C0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1B0FCB730(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
      v9 = *(_DWORD *)a2 + 2;
    if (v9 == 1)
    {
      v10 = a2[1];
      *v3 = *a2;
      v3[1] = v10;
      v11 = a2[2];
      swift_bridgeObjectRetain();
      if ((~v11 & 0xF000000000000007) != 0)
        swift_retain();
      v3[2] = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_1B0FCB810(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x18)
    v4 = 24;
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 != 1)
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
  result = swift_bridgeObjectRelease();
  if ((~*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

_QWORD *sub_1B0FCB8F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = a2[2];
    swift_bridgeObjectRetain();
    if ((~v9 & 0xF000000000000007) != 0)
      swift_retain();
    a1[2] = v9;
    v10 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

_QWORD *sub_1B0FCB9F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
      v7 = 24;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      swift_bridgeObjectRelease();
      if ((~a1[2] & 0xF000000000000007) != 0)
        swift_release();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v12 = a2[2];
      swift_bridgeObjectRetain();
      if ((~v12 & 0xF000000000000007) != 0)
        swift_retain();
      a1[2] = v12;
      v13 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v13 = 0;
    }
    *((_BYTE *)a1 + v7) = v13;
  }
  return a1;
}

uint64_t sub_1B0FCBBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t))(v4 + 32))(a1);
    v8 = 0;
  }
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_1B0FCBC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
      v7 = 24;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      swift_bridgeObjectRelease();
      if ((~*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
        swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v10 = *(unsigned __int8 *)(a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v12 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1B0FCBE48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x18uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B0FCBF0C + 4 * byte_1B1042803[(v4 - 1)]))();
}

void sub_1B0FCBF58(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x18)
    v5 = 24;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1B0FCC100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x18uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B0FCC148 + 4 * byte_1B1042811[v3]))();
}

void sub_1B0FCC190(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x18uLL)
    v4 = 24;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t storeEnumTagSinglePayload for ReferenceCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FCC2A4 + 4 * byte_1B104281B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FCC2D8 + 4 * byte_1B1042816[v4]))();
}

uint64_t sub_1B0FCC2D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FCC2E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FCC2E8);
  return result;
}

uint64_t sub_1B0FCC2F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FCC2FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FCC300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FCC308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReferenceCodingKeys()
{
  return &type metadata for ReferenceCodingKeys;
}

uint64_t destroy for ReferenceableError(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 32);
  if (v1 >= 5)
    v1 = *(_DWORD *)result + 5;
  switch(v1)
  {
    case 0u:
    case 4u:
      result = swift_bridgeObjectRelease();
      break;
    case 1u:
      result = swift_release();
      break;
    case 2u:
      result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ReferenceableError(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 5)
    v3 = *(_DWORD *)a2 + 5;
  switch(v3)
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_11;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 32) = 1;
      swift_retain();
      return a1;
    case 2u:
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      v5 = 2;
      goto LABEL_9;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = 3;
      goto LABEL_9;
    case 4u:
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 32) = 4;
LABEL_11:
      swift_bridgeObjectRetain();
      return a1;
    default:
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      v5 = *(_BYTE *)(a2 + 32);
LABEL_9:
      *(_BYTE *)(a1 + 32) = v5;
      return a1;
  }
}

uint64_t assignWithCopy for ReferenceableError(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 1u:
        swift_release();
        break;
      case 2u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    v5 = *((unsigned __int8 *)a2 + 32);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_BYTE *)(a1 + 32) = 0;
        goto LABEL_17;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 32) = 1;
        swift_retain();
        break;
      case 2u:
        v8 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v8;
        (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
        *(_BYTE *)(a1 + 32) = 2;
        break;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 32) = 3;
        break;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_BYTE *)(a1 + 32) = 4;
LABEL_17:
        swift_bridgeObjectRetain();
        break;
      default:
        v6 = *a2;
        v7 = a2[1];
        *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ReferenceableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 1u:
        swift_release();
        break;
      case 2u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = 0;
        return a1;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = 1;
        goto LABEL_17;
      case 2u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        v7 = 2;
        goto LABEL_17;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = 3;
        goto LABEL_17;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = 4;
        goto LABEL_17;
      default:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_BYTE *)(a2 + 32);
LABEL_17:
        *(_BYTE *)(a1 + 32) = v7;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceableError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReferenceableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B0FCC7A0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t sub_1B0FCC7BC(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReferenceableError()
{
  return &type metadata for ReferenceableError;
}

unint64_t sub_1B0FCC7F4()
{
  unint64_t result;

  result = qword_1EEEE0310;
  if (!qword_1EEEE0310)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10429AC, &type metadata for ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0310);
  }
  return result;
}

unint64_t sub_1B0FCC83C()
{
  unint64_t result;

  result = qword_1EEEE0318;
  if (!qword_1EEEE0318)
  {
    result = MEMORY[0x1B5E15188](&unk_1B10428E4, &type metadata for ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0318);
  }
  return result;
}

unint64_t sub_1B0FCC884()
{
  unint64_t result;

  result = qword_1EEEE0320;
  if (!qword_1EEEE0320)
  {
    result = MEMORY[0x1B5E15188](&unk_1B104290C, &type metadata for ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0320);
  }
  return result;
}

uint64_t sub_1B0FCC8C8()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B0FCC910()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0FCC934(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1B5E150E0](a1, v6, a5);
}

uint64_t sub_1B0FCC978()
{
  return swift_deallocObject();
}

uint64_t sub_1B0FCC988()
{
  uint64_t v0;

  sub_1B0F6C7D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  if ((~*(_QWORD *)(v0 + 48) & 0xF000000000000007) != 0)
    swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for IdentifierModifier()
{
  return &type metadata for IdentifierModifier;
}

uint64_t sub_1B0FCC9E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B1036260();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    sub_1B0F56A98();
    sub_1B1036164();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v8;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FCCACC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  sub_1B0F56B9C(*(_QWORD *)v3, v9, v10, v11);
  StringResolvable.resolved(with:)(a2);
  if (v4)
    return sub_1B0F56ADC(v8, v9, v10, v11);
  sub_1B0F56ADC(v8, v9, v10, v11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = sub_1B1035810();
  a3[3] = v13;
  a3[4] = MEMORY[0x1B5E15188](MEMORY[0x1E0CDFB30], v13);
  __swift_allocate_boxed_opaque_existential_1(a3);
  sub_1B1035540();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FCCC1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FCC9E0(a1, a2);
}

unint64_t sub_1B0FCCC30(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FCCC54();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FCCC54()
{
  unint64_t result;

  result = qword_1EEEE0328;
  if (!qword_1EEEE0328)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042AC4, &type metadata for IdentifierModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0328);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationTitleModifier()
{
  return &type metadata for NavigationTitleModifier;
}

uint64_t sub_1B0FCCCA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  v21 = v8;
  v22 = v9;
  v23 = v10;
  LOBYTE(v24) = v11;
  sub_1B0F56B9C(v8, v9, v10, v11);
  v12 = StringResolvable.resolved(with:)(a2);
  if (v4)
  {

    sub_1B0F56ADC(v8, v9, v10, v11);
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  else
  {
    v14 = v12;
    v15 = v13;
    sub_1B0F56ADC(v8, v9, v10, v11);
  }
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v25 = v14;
  v26 = v15;
  v18 = sub_1B0F8B804();
  v19 = MEMORY[0x1E0DEA968];
  v21 = v16;
  v22 = MEMORY[0x1E0DEA968];
  v23 = v17;
  v24 = v18;
  a3[3] = MEMORY[0x1B5E15134](0, &v21, MEMORY[0x1E0CDE598], 0);
  v21 = v16;
  v22 = v19;
  v23 = v17;
  v24 = v18;
  a3[4] = swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1(a3);
  sub_1B1035438();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FCCE30@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FCCE80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B0FCD2C4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0FCCEA8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B103605C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B0FCCEFC()
{
  sub_1B0FCD10C();
  return sub_1B10362B4();
}

uint64_t sub_1B0FCCF24()
{
  sub_1B0FCD10C();
  return sub_1B10362C0();
}

uint64_t sub_1B0FCCF4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0338);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0FCD10C();
  sub_1B1036278();
  if (!v2)
  {
    sub_1B0F56A98();
    sub_1B10360BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v14;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0FCD07C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B0FCCCA8(a1, a2, a3);
}

uint64_t sub_1B0FCD090@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0FCCF4C(a1, a2);
}

unint64_t sub_1B0FCD0A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FCD0C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FCD0C8()
{
  unint64_t result;

  result = qword_1EEEE0330;
  if (!qword_1EEEE0330)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042B48, &type metadata for NavigationTitleModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0330);
  }
  return result;
}

unint64_t sub_1B0FCD10C()
{
  unint64_t result;

  result = qword_1EEEE0340;
  if (!qword_1EEEE0340)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042C88, &type metadata for NavigationTitleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0340);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationTitleModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0FCD190 + 4 * byte_1B1042B10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0FCD1B0 + 4 * byte_1B1042B15[v4]))();
}

_BYTE *sub_1B0FCD190(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0FCD1B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FCD1B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FCD1C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0FCD1C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0FCD1D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NavigationTitleModifier.CodingKeys()
{
  return &type metadata for NavigationTitleModifier.CodingKeys;
}

unint64_t sub_1B0FCD1F0()
{
  unint64_t result;

  result = qword_1EEEE0348;
  if (!qword_1EEEE0348)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042C60, &type metadata for NavigationTitleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0348);
  }
  return result;
}

unint64_t sub_1B0FCD238()
{
  unint64_t result;

  result = qword_1EEEE0350;
  if (!qword_1EEEE0350)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042B98, &type metadata for NavigationTitleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0350);
  }
  return result;
}

unint64_t sub_1B0FCD280()
{
  unint64_t result;

  result = qword_1EEEE0358;
  if (!qword_1EEEE0358)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042BC0, &type metadata for NavigationTitleModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0358);
  }
  return result;
}

uint64_t sub_1B0FCD2C4()
{
  return 0x656C746974;
}

ValueMetadata *type metadata accessor for InteractiveDismissDisabledModifier()
{
  return &type metadata for InteractiveDismissDisabledModifier;
}

uint64_t sub_1B0FCD2E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  sub_1B0F5E604(*(_QWORD *)v3, v9, v10, v11);
  sub_1B0FD7528(a2, v8, v9, v10, v11);
  result = sub_1B0F5E6A0(v8, v9, v10, v11);
  if (!v4)
  {
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    v15 = v13;
    v16 = v14;
    a3[3] = MEMORY[0x1B5E15134](0, &v15, MEMORY[0x1E0CDED18], 0);
    v15 = v13;
    v16 = v14;
    a3[4] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(a3);
    return sub_1B103551C();
  }
  return result;
}

unint64_t sub_1B0FCD40C(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FCD430();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FCD430()
{
  unint64_t result;

  result = qword_1EEEE0360;
  if (!qword_1EEEE0360)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042D14, &type metadata for InteractiveDismissDisabledModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0360);
  }
  return result;
}

uint64_t destroy for IfModifier()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6LiftUI10IfModifierVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IfModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IfModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IfModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IfModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IfModifier()
{
  return &type metadata for IfModifier;
}

uint64_t sub_1B0FCD64C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = sub_1B10168FC(a2);
  v14 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v15 = MEMORY[0x1E0DEE9D8];
  if (a4)
    v16 = a4;
  else
    v16 = MEMORY[0x1E0DEE9D8];
  if (a5)
    v15 = a5;
  if ((v12 & 1) != 0)
    v17 = v16;
  else
    v17 = v15;
  swift_bridgeObjectRetain();
  v18 = sub_1B0F5B664(v17);
  swift_bridgeObjectRelease();
  sub_1B0F69B0C(v18, a2, a3, v14, v13, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0FCD72C(char a1)
{
  return *(_QWORD *)&aConditiothen[8 * a1];
}

uint64_t sub_1B0FCD74C(char *a1, char *a2)
{
  return sub_1B100F320(*a1, *a2);
}

uint64_t sub_1B0FCD758()
{
  return sub_1B1010C3C();
}

uint64_t sub_1B0FCD760()
{
  return sub_1B1013550();
}

uint64_t sub_1B0FCD768()
{
  return sub_1B10136D8();
}

uint64_t sub_1B0FCD770@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FCDD84();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FCD79C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B0FCD72C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0FCD7C4()
{
  char *v0;

  return sub_1B0FCD72C(*v0);
}

uint64_t sub_1B0FCD7CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0FCDD84();
  *a1 = result;
  return result;
}

uint64_t sub_1B0FCD7F0()
{
  sub_1B0FCDB54();
  return sub_1B10362B4();
}

uint64_t sub_1B0FCD818()
{
  sub_1B0FCDB54();
  return sub_1B10362C0();
}

uint64_t sub_1B0FCD840@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1B0FCD64C(a1, a2, a3, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1B0FCD85C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B0FCD8F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

unint64_t sub_1B0FCD888(uint64_t a1)
{
  unint64_t result;

  result = sub_1B0FCD8AC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0FCD8AC()
{
  unint64_t result;

  result = qword_1EEEE0368;
  if (!qword_1EEEE0368)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042D74, &type metadata for IfModifier);
    atomic_store(result, (unint64_t *)&qword_1EEEE0368);
  }
  return result;
}

uint64_t sub_1B0FCD8F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0370);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1B0FCDB54();
  sub_1B1036278();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    type metadata accessor for Condition();
    v10 = 0;
    sub_1B0FCDB98();
    sub_1B10360BC();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE4A8);
    v10 = 1;
    sub_1B0F5DFA0();
    swift_retain();
    sub_1B10360A4();
    v10 = 2;
    swift_bridgeObjectRetain();
    sub_1B10360A4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v7;
}

unint64_t sub_1B0FCDB54()
{
  unint64_t result;

  result = qword_1EEEE0378;
  if (!qword_1EEEE0378)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042EB4, &type metadata for IfModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0378);
  }
  return result;
}

unint64_t sub_1B0FCDB98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEDF340;
  if (!qword_1EEEDF340)
  {
    v1 = type metadata accessor for Condition();
    result = MEMORY[0x1B5E15188](&unk_1B10472CC, v1);
    atomic_store(result, (unint64_t *)&qword_1EEEDF340);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IfModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0FCDC2C + 4 * byte_1B1042D5D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0FCDC60 + 4 * byte_1B1042D58[v4]))();
}

uint64_t sub_1B0FCDC60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FCDC68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0FCDC70);
  return result;
}

uint64_t sub_1B0FCDC7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0FCDC84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0FCDC88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0FCDC90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IfModifier.CodingKeys()
{
  return &type metadata for IfModifier.CodingKeys;
}

unint64_t sub_1B0FCDCB0()
{
  unint64_t result;

  result = qword_1EEEE0380;
  if (!qword_1EEEE0380)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042E8C, &type metadata for IfModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0380);
  }
  return result;
}

unint64_t sub_1B0FCDCF8()
{
  unint64_t result;

  result = qword_1EEEE0388;
  if (!qword_1EEEE0388)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042DC4, &type metadata for IfModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0388);
  }
  return result;
}

unint64_t sub_1B0FCDD40()
{
  unint64_t result;

  result = qword_1EEEE0390;
  if (!qword_1EEEE0390)
  {
    result = MEMORY[0x1B5E15188](&unk_1B1042DEC, &type metadata for IfModifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEE0390);
  }
  return result;
}

uint64_t sub_1B0FCDD84()
{
  unint64_t v0;

  v0 = sub_1B103605C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t RemoteLoader.status.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B10346F4();
  swift_release();
  return swift_release();
}

uint64_t RemoteLoader.setContentRegistry(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  id v7;
  uint64_t (*v8)(_BYTE *, _QWORD);
  _BYTE v10[32];
  _QWORD v11[4];

  v2 = sub_1B1036008();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1EEEDE0B8 != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0BA18);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = type metadata accessor for ContentRegistry();
  v11[0] = a1;
  v7 = a1;
  v8 = (uint64_t (*)(_BYTE *, _QWORD))sub_1B10344D8();
  sub_1B0FCE224((uint64_t)v11, (uint64_t)v5);
  return v8(v10, 0);
}

uint64_t RemoteLoader.reload(content:showLoading:reloadtype:)(uint64_t a1, char a2, char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  uint64_t v22;
  char v23;

  v7 = type metadata accessor for RemoteContent(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE910);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a3;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_started) = 1;
  v14 = OBJC_IVAR____TtC6LiftUI12RemoteLoader_currentTask;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_currentTask))
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE3F8);
    sub_1B1035D8C();
    swift_release();
  }
  if ((a2 & 1) != 0)
  {
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    v23 = 2;
    sub_1B0FCEAB4((uint64_t *)v21);
    sub_1B0F5A378((uint64_t)v21);
  }
  v15 = sub_1B1035D80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  sub_1B0FD38DC(a1, (uint64_t)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  sub_1B0FD3A7C((uint64_t)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  v18 = v17 + ((v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = v3;
  *(_BYTE *)(v18 + 8) = v13;
  swift_retain();
  v19 = sub_1B0FD0DE0((uint64_t)v12, (uint64_t)&unk_1EEEE03B8, v17);
  sub_1B0F5A3AC((uint64_t)v12, &qword_1EEEDE910);
  *(_QWORD *)(v3 + v14) = v19;
  return swift_release();
}

uint64_t View.remoteLoader(_:)()
{
  swift_getKeyPath();
  sub_1B1035378();
  return swift_release();
}

uint64_t sub_1B0FCE19C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[40];
  char v4;

  sub_1B0FD4848(v0, (uint64_t)v3);
  if (v4)
  {
    if (v4 != 1)
      return 0x676E6964616F6CLL;
    v1 = 0x726F727265;
  }
  else
  {
    v1 = 0x646564616F6CLL;
  }
  sub_1B0F5A378((uint64_t)v3);
  return v1;
}

uint64_t sub_1B0FCE224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1B0F5A964((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B0F9D1DC(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_1B1036008();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1B0F5A3AC(a1, &qword_1EEEDE158);
    sub_1B0F9BBB8(a2, v9);
    v7 = sub_1B1036008();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_1B0F5A3AC((uint64_t)v9, &qword_1EEEDE158);
  }
}

LiftUI::ReloadType_optional __swiftcall ReloadType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LiftUI::ReloadType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1B103605C();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ReloadType.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aData_3[8 * *v0];
}

uint64_t sub_1B0FCE384(char *a1, char *a2)
{
  return sub_1B100F194(*a1, *a2);
}

uint64_t sub_1B0FCE390()
{
  return sub_1B1010CA4();
}

uint64_t sub_1B0FCE398()
{
  return sub_1B1013490();
}

uint64_t sub_1B0FCE3A0()
{
  return sub_1B1013804();
}

LiftUI::ReloadType_optional sub_1B0FCE3A8(Swift::String *a1)
{
  return ReloadType.init(rawValue:)(*a1);
}

uint64_t sub_1B0FCE3B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ReloadType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B0FCE3D8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0420);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1B1036008();
  __swift_allocate_value_buffer(v3, qword_1EEF0B9B0);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EEF0B9B0);
  sub_1B1035FFC();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_1B0FCE4B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0420);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1B1036008();
  __swift_allocate_value_buffer(v3, qword_1EEF0B9C8);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EEF0B9C8);
  sub_1B1035FFC();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_1B0FCE59C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B10346F4();
  swift_release();
  return swift_release();
}

uint64_t sub_1B0FCE604(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3[6];

  sub_1B0FD4848(a1, (uint64_t)v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B0FD4848(v3, (uint64_t)&v2);
  swift_retain();
  sub_1B1034700();
  return sub_1B0F5A378((uint64_t)v3);
}

uint64_t RemoteLoader.$status.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE03C0);
  sub_1B10346D0();
  return swift_endAccess();
}

uint64_t sub_1B0FCE6EC()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE03C0);
  sub_1B10346D0();
  return swift_endAccess();
}

uint64_t sub_1B0FCE750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE0428);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE03C0);
  sub_1B10346DC();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t RemoteLoader.decoder.getter()
{
  return swift_retain();
}

uint64_t sub_1B0FCE870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  _BYTE v17[48];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v1 = v0;
  v2 = sub_1B1036008();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEE03C0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader__status;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v21 = 2;
  sub_1B0FD4848((uint64_t *)&v18, (uint64_t)v17);
  sub_1B10346C4();
  sub_1B0F5A378((uint64_t)&v18);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v10, v9, v6);
  v11 = v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_savedStatus;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 40) = -1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_remoteState) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_started) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_dataSource + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_currentTask) = 0;
  sub_1B1034508();
  swift_allocObject();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_decoder) = sub_1B10344FC();
  if (qword_1EEEDE098 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v2, (uint64_t)qword_1EEF0B9C8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
  v13 = type metadata accessor for AnyWeakRemoteLoader();
  v14 = swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  *((_QWORD *)&v19 + 1) = v13;
  *(_QWORD *)&v18 = v14;
  v15 = (void (*)(_BYTE *, _QWORD))sub_1B10344D8();
  sub_1B0FCE224((uint64_t)&v18, (uint64_t)v5);
  v15(v17, 0);
  return v1;
}

uint64_t sub_1B0FCEAB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t result;
  int8x16_t v10;
  uint64_t v11;
  _BYTE v12[48];
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v2 = v1;
  v4 = sub_1B1035AD4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)&v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B0FB9F24();
  *v7 = sub_1B1035E40();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v8 = sub_1B1035AE0();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    sub_1B0FD4848(a1, (uint64_t)&v13);
    if (v16 == 2
      && (v10 = vorrq_s8(v14, v15),
          !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | v13)))
    {
      sub_1B0F5A378((uint64_t)&v13);
    }
    else
    {
      sub_1B0F5A378((uint64_t)&v13);
      sub_1B0FD4848(a1, (uint64_t)&v13);
      v11 = v2 + OBJC_IVAR____TtC6LiftUI12RemoteLoader_savedStatus;
      swift_beginAccess();
      sub_1B0FD48C4((uint64_t)&v13, v11);
      swift_endAccess();
    }
    sub_1B0FD4848(a1, (uint64_t)&v13);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1B0FD4848(&v13, (uint64_t)v12);
    swift_retain();
    sub_1B1034700();
    return sub_1B0F5A378((uint64_t)&v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0FCEC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + 46) = a6;
  *(_QWORD *)(v6 + 112) = a4;
  *(_QWORD *)(v6 + 120) = a5;
  v7 = sub_1B10345E0();
  *(_QWORD *)(v6 + 128) = v7;
  *(_QWORD *)(v6 + 136) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 144) = swift_task_alloc();
  *(_QWORD *)(v6 + 152) = type metadata accessor for RemoteContent(0);
  *(_QWORD *)(v6 + 160) = swift_task_alloc();
  return swift_task_switch();
}

void sub_1B0FCECEC()
{
  uint64_t v0;
  char *v1;

  sub_1B0FD38DC(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 160));
  v1 = (char *)sub_1B0FCED44 + 4 * byte_1B1042F40[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0FCED44()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(uint64_t **)(v0 + 160);
  v2 = *(_BYTE *)(v0 + 46);
  v3 = *v1;
  *(_QWORD *)(v0 + 168) = *v1;
  v4 = v1[1];
  *(_QWORD *)(v0 + 176) = v4;
  *(_BYTE *)(v0 + 45) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v5;
  *v5 = v0;
  v5[1] = sub_1B0FCEFC8;
  return sub_1B0FCF2D4(v3, v4, (_BYTE *)(v0 + 45));
}

uint64_t sub_1B0FCEDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_BYTE *)(v0 + 46);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEDE130);
  v7 = *(_BYTE *)(v1 + *(int *)(v6 + 48));
  v8 = (uint64_t *)(v1 + *(int *)(v6 + 64));
  v9 = *v8;
  *(_QWORD *)(v0 + 208) = *v8;
  v10 = v8[1];
  *(_QWORD *)(v0 + 216) = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v4);
  *(_BYTE *)(v0 + 42) = v7;
  *(_BYTE *)(v0 + 43) = v5;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_1B0FCF100;
  return sub_1B0FD0168(*(_QWORD *)(v0 + 144), (_BYTE *)(v0 + 42), v9, v10, (_BYTE *)(v0 + 43));
}

uint64_t sub_1B0FCEE68()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(uint64_t **)(v0 + 160);
  v2 = *(_BYTE *)(v0 + 46);
  v3 = *v1;
  *(_QWORD *)(v0 + 232) = *v1;
  v4 = v1[1];
  *(_QWORD *)(v0 + 240) = v4;
  v5 = v1[2];
  *(_QWORD *)(v0 + 248) = v5;
  v6 = *((_BYTE *)v1 + 24);
  *(_BYTE *)(v0 + 47) = v6;
  v7 = v1[4];
  *(_QWORD *)(v0 + 256) = v7;
  v8 = v1[5];
  *(_QWORD *)(v0 + 264) = v8;
  v9 = v1[6];
  *(_QWORD *)(v0 + 272) = v9;
  v10 = *((_BYTE *)v1 + 56);
  *(_BYTE *)(v0 + 73) = v10;
  v11 = v1[8];
  *(_QWORD *)(v0 + 280) = v11;
  v12 = v1[9];
  *(_QWORD *)(v0 + 288) = v12;
  v13 = v1[10];
  *(_QWORD *)(v0 + 296) = v13;
  v14 = *((_BYTE *)v1 + 88);
  *(_BYTE *)(v0 + 74) = v14;
  v15 = v1[12];
  *(_QWORD *)(v0 + 304) = v15;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = v6;
  *(_QWORD *)(v0 + 48) = v7;
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v0 + 64) = v9;
  *(_BYTE *)(v0 + 72) = v10;
  *(_QWORD *)(v0 + 80) = v11;
  *(_QWORD *)(v0 + 88) = v12;
  *(_QWORD *)(v0 + 96) = v13;
  *(_BYTE *)(v0 + 104) = v14;
  *(_BYTE *)(v0 + 41) = v2;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v16;
  *v16 = v0;
  v16[1] = sub_1B0FCF1BC;
  return sub_1B0FD0780(v0 + 16, v0 + 48, v0 + 80, v15, (_BYTE *)(v0 + 41));
}

uint64_t sub_1B0FCEF64()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(uint64_t **)(v0 + 160);
  v2 = *(_BYTE *)(v0 + 46);
  v4 = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 192) = v3;
  *(_BYTE *)(v0 + 44) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v5;
  *v5 = v0;
  v5[1] = sub_1B0FCF064;
  return sub_1B0FCFE80(v4, v3, (_BYTE *)(v0 + 44));
}

uint64_t sub_1B0FCEFC8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B0FCF01C()
{
  uint64_t v0;

  sub_1B0F576D8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCF064()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1B0FCF0C0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCF100()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B0FCF154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  sub_1B0FD490C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCF1BC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B0FCF210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v8 = *(_BYTE *)(v0 + 74);
  v9 = *(_BYTE *)(v0 + 73);
  v11 = *(_BYTE *)(v0 + 47);
  swift_release();
  sub_1B0F57190(v3, v2, v1, v8);
  sub_1B0F56B88(v6, v5, v4, v9);
  sub_1B0F56ADC(v7, v12, v13, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCF2D4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(v4 + 680) = v3;
  *(_QWORD *)(v4 + 672) = a2;
  *(_QWORD *)(v4 + 664) = a1;
  sub_1B1035BC4();
  *(_QWORD *)(v4 + 688) = swift_task_alloc();
  v6 = sub_1B103467C();
  *(_QWORD *)(v4 + 696) = v6;
  *(_QWORD *)(v4 + 704) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 712) = swift_task_alloc();
  *(_BYTE *)(v4 + 537) = *a3;
  return swift_task_switch();
}

uint64_t sub_1B0FCF368()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  if ((sub_1B1035D98() & 1) != 0)
    goto LABEL_2;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  if (qword_1EEEDE0B0 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 696);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = __swift_project_value_buffer(v4, (uint64_t)qword_1EEF0BA00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v4);
  sub_1B0F57594(v6, v5);
  sub_1B0F57594(v6, v5);
  v8 = sub_1B1034664();
  v9 = sub_1B1035E34();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(char *)(v0 + 537);
    v11 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v34[0] = v30;
    v12 = *(_QWORD *)&aData_3[8 * v10];
    *(_DWORD *)v11 = 136315394;
    v13 = *(_QWORD *)&aViewandd[8 * v10 + 8];
    v31 = *(_QWORD *)(v0 + 704);
    v32 = *(_QWORD *)(v0 + 696);
    v33 = *(_QWORD *)(v0 + 712);
    v14 = *(_QWORD *)(v0 + 672);
    v15 = *(_QWORD *)(v0 + 664);
    *(_QWORD *)(v0 + 648) = sub_1B0F6B618(v12, v13, v34);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    sub_1B1035BB8();
    v16 = sub_1B1035BAC();
    if (v17)
    {
      v18 = v17;
    }
    else
    {
      v16 = 0xD000000000000014;
      v18 = 0x80000001B104CE30;
    }
    *(_QWORD *)(v0 + 656) = sub_1B0F6B618(v16, v18, v34);
    sub_1B1035E7C();
    swift_bridgeObjectRelease();
    sub_1B0F576D8(v15, v14);
    sub_1B0F576D8(v15, v14);
    _os_log_impl(&dword_1B0F50000, v8, v9, "Loading type: %s JSON: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E15248](v30, -1, -1);
    MEMORY[0x1B5E15248](v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 712);
    v20 = *(_QWORD *)(v0 + 704);
    v21 = *(_QWORD *)(v0 + 696);
    v22 = *(_QWORD *)(v0 + 672);
    v23 = *(_QWORD *)(v0 + 664);
    sub_1B0F576D8(v23, v22);
    sub_1B0F576D8(v23, v22);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  if (*(_BYTE *)(v0 + 537) == 1)
  {
    v24 = 0;
LABEL_13:
    *(_QWORD *)(v0 + 720) = v24;
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 728) = v25;
    *v25 = v0;
    v25[1] = sub_1B0FCF93C;
    return sub_1B0FD11E8(v0 + 376, *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 672));
  }
  sub_1B0FD3BC0();
  sub_1B10344CC();
  v24 = *(_QWORD *)(v0 + 640);
  if (!v24)
    v24 = sub_1B0F554CC(MEMORY[0x1E0DEE9D8]);
  if (*(_BYTE *)(v0 + 537))
    goto LABEL_13;
  *(_QWORD *)(v0 + 744) = v24;
  if ((sub_1B1035D98() & 1) != 0)
  {
    sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
    swift_bridgeObjectRelease();
LABEL_2:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_1B0F5A974(v0 + 16, v0 + 136, &qword_1EEEDEBD8);
  if (*(_QWORD *)(v0 + 144))
  {
    v26 = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 336) = v26;
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 368) = *(_QWORD *)(v0 + 248);
    v27 = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 272) = v27;
    v28 = *(_OWORD *)(v0 + 184);
    *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 168);
    *(_OWORD *)(v0 + 304) = v28;
    *(_QWORD *)(v0 + 616) = &type metadata for ViewContent;
    *(_QWORD *)(v0 + 624) = sub_1B0F6BCF8();
    v29 = swift_allocObject();
    *(_QWORD *)(v0 + 592) = v29;
    sub_1B0F641B8(v0 + 256, v29 + 16);
    *(_BYTE *)(v0 + 632) = 0;
    sub_1B1035D68();
    *(_QWORD *)(v0 + 752) = sub_1B1035D5C();
  }
  else
  {
    sub_1B0F5A3AC(v0 + 136, &qword_1EEEDEBD8);
    *(_OWORD *)(v0 + 544) = 0u;
    *(_OWORD *)(v0 + 560) = 0u;
    *(_QWORD *)(v0 + 576) = 0;
    *(_BYTE *)(v0 + 584) = -1;
    sub_1B1035D68();
    *(_QWORD *)(v0 + 760) = sub_1B1035D5C();
  }
  sub_1B1035D50();
  return swift_task_switch();
}

uint64_t sub_1B0FCF93C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 736) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1B0FCF9A8()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
  sub_1B0FB0EE0(v0 + 376, v0 + 16, &qword_1EEEDEBD8);
  *(_QWORD *)(v0 + 744) = *(_QWORD *)(v0 + 720);
  if ((sub_1B1035D98() & 1) != 0)
  {
    sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1B0F5A974(v0 + 16, v0 + 136, &qword_1EEEDEBD8);
    if (*(_QWORD *)(v0 + 144))
    {
      v2 = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 200);
      *(_OWORD *)(v0 + 336) = v2;
      *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 232);
      *(_QWORD *)(v0 + 368) = *(_QWORD *)(v0 + 248);
      v3 = *(_OWORD *)(v0 + 152);
      *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 136);
      *(_OWORD *)(v0 + 272) = v3;
      v4 = *(_OWORD *)(v0 + 184);
      *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 168);
      *(_OWORD *)(v0 + 304) = v4;
      *(_QWORD *)(v0 + 616) = &type metadata for ViewContent;
      *(_QWORD *)(v0 + 624) = sub_1B0F6BCF8();
      v5 = swift_allocObject();
      *(_QWORD *)(v0 + 592) = v5;
      sub_1B0F641B8(v0 + 256, v5 + 16);
      *(_BYTE *)(v0 + 632) = 0;
      sub_1B1035D68();
      *(_QWORD *)(v0 + 752) = sub_1B1035D5C();
    }
    else
    {
      sub_1B0F5A3AC(v0 + 136, &qword_1EEEDEBD8);
      *(_OWORD *)(v0 + 544) = 0u;
      *(_OWORD *)(v0 + 560) = 0u;
      *(_QWORD *)(v0 + 576) = 0;
      *(_BYTE *)(v0 + 584) = -1;
      sub_1B1035D68();
      *(_QWORD *)(v0 + 760) = sub_1B1035D5C();
    }
    sub_1B1035D50();
    return swift_task_switch();
  }
}

uint64_t sub_1B0FCFB84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 744);
  swift_release();
  sub_1B0FD0F60(v1, v0 + 592);
  swift_bridgeObjectRelease();
  sub_1B0F5A3AC(v0 + 592, &qword_1EEEE03E0);
  return swift_task_switch();
}

uint64_t sub_1B0FCFBF8()
{
  uint64_t v0;

  sub_1B0F6427C(v0 + 256);
  sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCFC50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 744);
  swift_release();
  sub_1B0FD0F60(v1, v0 + 544);
  swift_bridgeObjectRelease();
  sub_1B0F5A3AC(v0 + 544, &qword_1EEEE03E0);
  return swift_task_switch();
}

uint64_t sub_1B0FCFCC4()
{
  uint64_t v0;

  sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCFD10()
{
  uint64_t v0;

  swift_release();
  sub_1B0FD0F60(0, v0 + 496);
  sub_1B0F5A3AC(v0 + 496, &qword_1EEEE03E0);
  return swift_task_switch();
}

uint64_t sub_1B0FCFD70()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FCFDB4()
{
  uint64_t v0;
  void *v1;
  id v3;

  sub_1B0F5A3AC(v0 + 16, &qword_1EEEDEBD8);
  v1 = *(void **)(v0 + 736);
  *(_QWORD *)(v0 + 768) = v1;
  if ((sub_1B1035D98() & 1) != 0)
  {

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 496) = v1;
    *(_BYTE *)(v0 + 536) = 1;
    sub_1B1035D68();
    v3 = v1;
    *(_QWORD *)(v0 + 776) = sub_1B1035D5C();
    sub_1B1035D50();
    return swift_task_switch();
  }
}

uint64_t sub_1B0FCFE80(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = v3;
  *(_QWORD *)(v4 + 64) = a1;
  v6 = sub_1B1035BC4();
  *(_QWORD *)(v4 + 88) = v6;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  *(_BYTE *)(v4 + 58) = *a3;
  return swift_task_switch();
}

