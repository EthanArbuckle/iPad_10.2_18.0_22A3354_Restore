void sub_239FEB0F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEB484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_239FEB528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FEB53C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEB54C(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *__dst[2];
  unint64_t v13;

  v6 = operator new();
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v13) = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memcpy(v9, a2, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  sub_23A0134C8(v6, a1, (uint64_t)__dst);
  *a3 = v6;
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_239FEB650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x23B83FE88](v15, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_239FEB848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (__p)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_239FEBAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_239FEBCD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEBCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  void *v16;

  if (!__p)
  {

    _Unwind_Resume(a1);
  }
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_239FEBDE0()
{
  sub_239FEBDF4("basic_string");
}

void sub_239FEBDF4(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_239FEBE44(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_250B0B2E8, MEMORY[0x24BEDAAF0]);
}

void sub_239FEBE30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_239FEBE44(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_239FEBE68()
{
  sub_239FEBDF4("vector");
}

void sub_239FEBF68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239FEC3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_239FEC3BC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_239FEC3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  _Unwind_Resume(a1);
}

void sub_239FEC9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;

  v38 = v31;

  _Unwind_Resume(a1);
}

void sub_239FECAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECB00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECBE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FECBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FECCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FECDDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FECED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FECFB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FECFC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FED058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FED0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FED180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FED5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Unwind_Resume(a1);
}

void sub_239FED784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEDEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x23B83FE88](v16, 0x1081C40337ED2EFLL);
  if (a14 < 0)
    operator delete(__p);

  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v20, v14);
    __cxa_end_catch();
    JUMPOUT(0x239FEDE08);
  }
  v21 = *(_QWORD *)(v17 - 96);
  if (!v21)
    sub_239FF19E8();
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  v22 = *(_QWORD *)(v17 - 96);
  if (v22 == v17 - 120)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 - 120) + 32))(v17 - 120);
    _Unwind_Resume(a1);
  }
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_239FEE014(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_239FEE07C(const char **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 __dst;
  unint64_t v15;

  v6 = (_QWORD *)operator new();
  v7 = *a1;
  v8 = strlen(*a1);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v15 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memmove(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  *v6 = &off_250B0DB68;
  v13 = operator new(0x128uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_250B0DDF0;
  v6[1] = sub_239FF6D14((uint64_t)(v13 + 3), &__dst, a2);
  v6[2] = v13;
  *a3 = v6;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__dst);
}

void sub_239FEE1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x23B83FE88](v15, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FEE1FC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void **sub_239FEE2AC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239FEE31C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_239FEE558(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_23A08A288(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239FEE568(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  _QWORD *v12;
  uint64_t v13;
  void *v16;

  MEMORY[0x23B83FE88](v13, 0x20C4093837F09);
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v16, v12);
    __cxa_end_catch();
    JUMPOUT(0x239FEE4D4);
  }
  if (!a12)
    sub_239FF19E8();
  (*(void (**)(uint64_t *))(*a12 + 48))(a12);
  if (a12 == &a9)
  {
    (*(void (**)(void))(a9 + 32))();
    _Unwind_Resume(a1);
  }
  if (a12)
  {
    (*(void (**)(void))(*a12 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_239FEE5EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x239FEE560);
}

void sub_239FEEA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;

  if (a38 < 0)
  {
    operator delete(a33);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_14:

      _Unwind_Resume(a1);
    }
LABEL_13:
    __cxa_free_exception(v42);
    goto LABEL_14;
  }
LABEL_12:
  if (!v43)
    goto LABEL_14;
  goto LABEL_13;
}

__n128 sub_239FEEC54@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_239FEECB0(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *exception;

  v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_239FEED5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_239FEED78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 sub_239FEED88@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_239FEF088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  if (v14)
    operator delete(v14);

  _Unwind_Resume(a1);
}

void sub_239FEF190(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[4];
  _QWORD v15[7];

  v5 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3812000000;
  v15[3] = sub_239FF7FE8;
  v15[4] = nullsub_7;
  v15[5] = &unk_23A0C154D;
  v15[6] = a2;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = sub_239FF7FF8;
  v10[3] = &unk_250B0E130;
  v12 = v15;
  v13 = v14;
  v11 = v5;
  v6 = v5;
  objc_msgSend__enumerateVisibleLabelsAndIndicesInVocabularyUsingBlock_(a1, v7, (uint64_t)v10, v8, v9);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v15, 8);
}

void sub_239FEF274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_239FEF360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239FEF37C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEF38C(uint64_t a1, void *a2, float a3)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  *(float *)&v5 = a3;
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v6, v7, v8, v9, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);

}

void sub_239FEF3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239FEF40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_239FEF5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FEF5FC()
{
  __cxa_end_catch();
  JUMPOUT(0x239FEF604);
}

void sub_239FEF704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (v5)
    operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_239FEF878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239FEF894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEF8A4(uint64_t a1, void *a2, float a3)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  *(float *)&v5 = a3;
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v6, v7, v8, v9, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);

}

void sub_239FEF90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239FEF924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_239FEFA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239FEFA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FEFA34(uint64_t a1, void *a2, float a3)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  *(float *)&v5 = a3;
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v6, v7, v8, v9, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);

}

void sub_239FEFA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239FEFAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_239FEFC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FEFCA4()
{
  __cxa_end_catch();
  JUMPOUT(0x239FEFCACLL);
}

void sub_239FEFE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FEFE8C()
{
  __cxa_end_catch();
  JUMPOUT(0x239FEFE94);
}

void sub_239FF0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);
  sub_239FF00D0((void **)va);

  _Unwind_Resume(a1);
}

void sub_239FF00BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void **sub_239FF00D0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239FF0530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  _QWORD *v27;
  void *v28;
  int v29;
  uint64_t v30;
  void *v33;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v29 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v29)
  {
LABEL_8:
    sub_239FF1FF0((const void **)(v30 - 80));
    if (a2 == 1)
    {
      v33 = __cxa_begin_catch(a1);
      sub_239FF9B50((uint64_t)v33, v27);
      __cxa_end_catch();
      JUMPOUT(0x239FF042CLL);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t sub_239FF0668(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_250B0DCC8;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_239FF06D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF07FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_239FF087C((void **)va);

  _Unwind_Resume(a1);
}

void sub_239FF0814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_239FF087C((void **)va);

  _Unwind_Resume(a1);
}

void sub_239FF082C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF083C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = v4;

  sub_239FF087C((void **)va);
  _Unwind_Resume(a1);
}

void sub_239FF0860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  sub_239FF087C((void **)va);
  _Unwind_Resume(a1);
}

void **sub_239FF087C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239FF0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  sub_239FF087C((void **)va);

  _Unwind_Resume(a1);
}

void sub_239FF0A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  sub_239FF087C((void **)va);

  _Unwind_Resume(a1);
}

void sub_239FF0A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF0A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a14 < 0)
    operator delete(__p);

  sub_239FF087C(&a15);
  _Unwind_Resume(a1);
}

void sub_239FF0C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FF0C94()
{
  __cxa_end_catch();
  JUMPOUT(0x239FF0C9CLL);
}

void sub_239FF0D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239FF0D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF0D9C(uint64_t a1, void *a2, float a3)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  *(float *)&v5 = a3;
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v6, v7, v8, v9, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);

}

void sub_239FF0E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239FF0E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_239FF1284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  uint64_t v36;

  sub_239FF5234(v36 - 224);
  _Unwind_Resume(a1);
}

void sub_239FF1424(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void *__p;
  void **v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 56);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 == v8)
  {
    sub_239FF2628((uint64_t)&__p);
  }
  else
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    sub_239FF559C((char *)&__p, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  sub_239FF2218(a1, a2, (__int128 **)&__p, a3);
  v9 = (void **)__p;
  if (__p)
  {
    v10 = v13;
    v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = __p;
    }
    v13 = v9;
    operator delete(v11);
  }
}

void sub_239FF14F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FEE2AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF150C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(void **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
LABEL_7:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239FF15AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

id sub_239FF162C(_QWORD **a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  void **p_dst;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v45[10];
  uint64_t v46;
  void **__dst;
  size_t v48;
  unint64_t v49;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v15 = 0;
    goto LABEL_26;
  }
  v5 = *a1;
  v6 = objc_retainAutorelease(v3);
  v11 = (const char *)objc_msgSend_UTF8String(v6, v7, v8, v9, v10);
  v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v48 = v13;
    v49 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v49) = v12;
  p_dst = (void **)&__dst;
  if (v12)
LABEL_10:
    memmove(p_dst, v11, v13);
  *((_BYTE *)p_dst + v13) = 0;
  v18 = sub_239FF2E64(v5, (uint64_t)&__dst);
  v15 = v18;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst);
    if (!v15)
      goto LABEL_26;
  }
  else if (!v18)
  {
    goto LABEL_26;
  }
  v19 = *a1;
  v20 = objc_retainAutorelease(v6);
  v25 = (const char *)objc_msgSend_UTF8String(v20, v21, v22, v23, v24);
  v26 = strlen(v25);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v48 = v27;
    v49 = v30 | 0x8000000000000000;
    __dst = v28;
  }
  else
  {
    HIBYTE(v49) = v26;
    v28 = (void **)&__dst;
    if (!v26)
      goto LABEL_23;
  }
  memmove(v28, v25, v27);
LABEL_23:
  *((_BYTE *)v28 + v27) = 0;
  v31 = sub_239FF2E64(v19, (uint64_t)&__dst);
  if (!v31)
    sub_239FF1D10("unordered_map::at: key not found");
  v35 = v31[10];
  v36 = *(_OWORD *)(v35 + 40);
  v37 = *(_OWORD *)(v35 + 24);
  v45[0] = *(_OWORD *)(v35 + 8);
  v45[1] = v37;
  v45[2] = v36;
  v38 = *(_OWORD *)(v35 + 88);
  v39 = *(_OWORD *)(v35 + 104);
  v40 = *(_OWORD *)(v35 + 72);
  v45[3] = *(_OWORD *)(v35 + 56);
  v45[4] = v40;
  v41 = *(_OWORD *)(v35 + 120);
  v42 = *(_OWORD *)(v35 + 136);
  v43 = *(_OWORD *)(v35 + 152);
  v46 = *(_QWORD *)(v35 + 168);
  v45[8] = v42;
  v45[9] = v43;
  v45[6] = v39;
  v45[7] = v41;
  v45[5] = v38;
  objc_msgSend_fromEspressoBuffer_(CSUEspressoBuffer, v32, (uint64_t)v45, v33, v34);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v49) < 0)
    operator delete(__dst);
LABEL_26:

  return v15;
}

void sub_239FF1874(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_239FF19E8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_250B0DDC8;
  __cxa_throw(exception, (struct type_info *)&unk_250B0DAB0, (void (*)(void *))std::exception::~exception);
}

void sub_239FF1A20(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_239FF1A44()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t sub_239FF1A6C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v2 = *(void ***)(a1 + 88);
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(void ***)(a1 + 88);
    if (!v2)
      goto LABEL_5;
  }
  do
  {
    v7 = (void **)*v2;
    if (*((char *)v2 + 39) < 0)
      operator delete(v2[2]);
    operator delete(v2);
    v2 = v7;
  }
  while (v7);
LABEL_5:
  v3 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(void ***)(a1 + 8);
    v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_239FF1B38(uint64_t result, char *a2)
{
  int v2;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if ((_DWORD)result)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v10, a2);
    sub_239FEEC54("PixelBufferTransfer operation [", &v10, &v11);
    sub_239FEED88("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_239FF1C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_239FF1D10(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_239FF1D60(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_250B0B2F0, MEMORY[0x24BEDAB00]);
}

void sub_239FF1D4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_239FF1D60(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_BYTE *sub_239FF1D84(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void **v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x555555555555556)
      sub_239FEBE68();
    result = operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9);
        *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + v9 + 16);
        result = &v8[v9 + 24];
        v12 = (void **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          result = sub_239FF1F64(result, *v12, *(_QWORD *)(v11 + 32));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v12;
          *(_QWORD *)&v8[v9 + 40] = *(_QWORD *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_239FF1E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_239FF1ED0(&a9);
  _Unwind_Resume(a1);
}

void sub_239FF1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_239FF1ED0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_239FF1ED0(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 6;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_239FF1F64(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_239FEBDE0();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

const void **sub_239FF1FF0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_239FF2020(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_250B0DCC8;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  JUMPOUT(0x23B83FE88);
}

void sub_239FF20A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x23B83FE88](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF20DC(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_250B0DCC8;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_239FF2148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF215C(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_250B0DCC8;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  JUMPOUT(0x23B83FE88);
}

void sub_239FF21E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x23B83FE88](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF2218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v6;
  uint64_t *i;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t (**v35)();
  int v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 *v42[3];
  int v43;
  _BYTE v44[24];
  uint64_t v45;
  __int128 v46;

  v6 = *(__int128 **)(a1 + 8);
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)v44 = off_250B0DC10;
    if (*((char *)i + 39) < 0)
    {
      sub_239FF1F64(&v44[8], (void *)i[2], i[3]);
    }
    else
    {
      v8 = *((_OWORD *)i + 1);
      v45 = i[4];
      *(_OWORD *)&v44[8] = v8;
    }
    v46 = *v6;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)i[10] + 16))(i[10], v44);
    if (SHIBYTE(v45) < 0)
      operator delete(*(void **)&v44[8]);
  }
  v34 = a4;
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    while (!sub_239FF2E64((_QWORD *)v6 + 24, (uint64_t)v9))
    {
      v43 = espresso_network_bind_buffer();
      HIBYTE(v42[2]) = 21;
      strcpy((char *)v42, "Binding output buffer");
      sub_239FF2838(&v43, (uint64_t *)v42);
      if (SHIBYTE(v42[2]) < 0)
        operator delete(v42[0]);
      LOWORD(v42[0]) = 0;
      sub_239FF3910((uint64_t)&v35, (uint64_t)v44, v42);
      v42[0] = v9;
      v21 = sub_239FF42F8((uint64_t)(v6 + 12), (uint64_t)v9, (uint64_t)&unk_23A0A31B0, v42);
      v22 = v21;
      *((_DWORD *)v21 + 12) = v36;
      if (v21 + 5 != (uint64_t *)&v35)
        sub_239FF49DC(v21 + 7, (char *)v37, v38, (v38 - (_BYTE *)v37) >> 3);
      v24 = v40;
      v23 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      v27 = (std::__shared_weak_count *)v22[11];
      v22[10] = v24;
      v22[11] = (uint64_t)v23;
      if (!v27)
        goto LABEL_32;
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (v29)
        goto LABEL_32;
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      v30 = v41;
      v35 = &off_250B0DCE8;
      if (v41)
      {
LABEL_33:
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
LABEL_38:
      if (v37)
      {
        v38 = (char *)v37;
        operator delete(v37);
      }
      v9 = (__int128 *)((char *)v9 + 24);
      if (v9 == v10)
        goto LABEL_42;
    }
    v11 = sub_239FF34DC((_QWORD *)v6 + 24, (uint64_t)v9);
    if (!v11)
      sub_239FF1D10("unordered_map::at: key not found");
    v12 = v11;
    v35 = &off_250B0DCE8;
    v36 = *((_DWORD *)v11 + 12);
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v14 = (_BYTE *)v11[7];
    v13 = (_BYTE *)v11[8];
    v15 = v13 - v14;
    if (v13 != v14)
    {
      if (v15 < 0)
        sub_239FEBE68();
      v16 = (char *)operator new(v13 - v14);
      v17 = &v16[8 * (v15 >> 3)];
      v37 = v16;
      v39 = v17;
      memcpy(v16, v14, v15);
      v38 = v17;
    }
    v18 = (std::__shared_weak_count *)v12[11];
    v40 = v12[10];
    v41 = v18;
    if (!v18)
    {
      v35 = &off_250B0DCE8;
      goto LABEL_38;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
LABEL_32:
    v30 = v41;
    v35 = &off_250B0DCE8;
    if (v41)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_42:
  LODWORD(v42[0]) = espresso_plan_execute_sync();
  v44[23] = 14;
  strcpy(v44, "Executing plan");
  sub_239FF2838((int *)v42, (uint64_t *)v44);
  if ((v44[23] & 0x80000000) != 0)
    operator delete(*(void **)v44);
  return sub_239FF4B94(v34, (uint64_t)(v6 + 12));
}

void sub_239FF25B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_239FF2628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  const char *result;
  const char *v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v2 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v12 = 0;
  while (1)
  {
    result = (const char *)espresso_get_output_blob_name();
    v5 = result;
    v12 = result;
    if (!result)
      return result;
    v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
    {
      v3 = sub_239FF5308((void **)a1, &v12);
      goto LABEL_3;
    }
    v7 = strlen(result);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_239FEBDE0();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = operator new(v10 + 1);
      *((_QWORD *)v6 + 1) = v8;
      *((_QWORD *)v6 + 2) = v11 | 0x8000000000000000;
      *(_QWORD *)v6 = v9;
    }
    else
    {
      v6[23] = v7;
      v9 = v6;
      if (!v7)
        goto LABEL_14;
    }
    memmove(v9, v5, v8);
LABEL_14:
    *((_BYTE *)v9 + v8) = 0;
    v3 = v6 + 24;
    *(_QWORD *)(a1 + 8) = v6 + 24;
LABEL_3:
    *(_QWORD *)(a1 + 8) = v3;
    ++v2;
  }
}

void sub_239FF2748(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_23A09D7F8((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239FF2778(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

_QWORD *sub_239FF27B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

int *sub_239FF2838(int *result, uint64_t *a2)
{
  int *v2;
  std::runtime_error *exception;
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;

  if (*result)
  {
    v2 = result;
    sub_239FF4B20((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_239FEED88(" [espresso error: ", &v9, &v10);
    std::to_string(&v8, *v2);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v8;
    else
      v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    else
      size = v8.__r_.__value_.__l.__size_;
    v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_239FEED88("]", &v11, &v12);
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_250B0DBA8;
    __cxa_throw(exception, (struct type_info *)&unk_250B0D980, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_239FF2940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if (a21 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_239FF2A2C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x23B83FE88);
}

void sub_239FF2A6C(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::runtime_error *exception;
  char __p[22];
  char v9;
  __int128 v10;
  __int128 v11;
  int v12;

  switch(*a3)
  {
    case 0:
      v3 = a2[1];
      v10 = *a2;
      v11 = v3;
      v12 = espresso_network_bind_input_vimagebuffer_bgra8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_239FF2838(&v12, (uint64_t *)__p);
      break;
    case 1:
      v5 = a2[1];
      v10 = *a2;
      v11 = v5;
      v12 = espresso_network_bind_input_vimagebuffer_rgba8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_239FF2838(&v12, (uint64_t *)__p);
      break;
    case 2:
      v4 = a2[1];
      v10 = *a2;
      v11 = v4;
      v12 = espresso_network_bind_input_vimagebuffer_argb8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_239FF2838(&v12, (uint64_t *)__p);
      break;
    case 3:
      v6 = a2[1];
      v10 = *a2;
      v11 = v6;
      v12 = espresso_network_bind_input_vimagebuffer_planar8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_239FF2838(&v12, (uint64_t *)__p);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported image buffer type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v9 < 0)
    operator delete(*(void **)__p);
}

void sub_239FF2CA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF2CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239FF2CDC()
{
  char __p[22];
  char v1;
  int v2;

  v2 = espresso_network_bind_cvpixelbuffer();
  v1 = 21;
  strcpy(__p, "Binding CVPixelBuffer");
  sub_239FF2838(&v2, (uint64_t *)__p);
  if (v1 < 0)
    operator delete(*(void **)__p);
}

void sub_239FF2D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239FF2D94()
{
  void *__p;
  __int128 v1;
  int v2;

  v2 = espresso_network_bind_buffer();
  __p = operator new(0x20uLL);
  v1 = xmmword_23A0A3080;
  strcpy((char *)__p, "Binding espresso_buffer_t");
  sub_239FF2838(&v2, (uint64_t *)&__p);
  if (SHIBYTE(v1) < 0)
    operator delete(__p);
}

void sub_239FF2E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239FF2E64(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239FF3090((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unint64_t sub_239FF3090(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *sub_239FF34DC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239FF3090((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_239FF3708(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_239FF3798(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_239FF3818(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF38A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_239FF3910(uint64_t a1, uint64_t a2, _WORD *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[3];
  int v29;
  char *v30;
  char __src[80];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_239FF3CC0(a2, a3, &v24);
  v6 = v24;
  v5 = v25;
  v26 = v24;
  v27 = v25;
  v24 = 0;
  v25 = 0;
  v7 = *(_DWORD *)(a2 + 160);
  switch(v7)
  {
    case 65568:
      v8 = 4;
      break;
    case 262152:
      v8 = 0;
      break;
    case 131104:
      v8 = 2;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v30 = 0;
  v29 = espresso_buffer_unpack_tensor_shape();
  strcpy((char *)__p, "Unpacking tensor shape");
  HIBYTE(__p[2]) = 22;
  sub_239FF2838(&v29, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v9 = (unint64_t)v30;
    memset(__p, 0, sizeof(__p));
    if (v30)
      goto LABEL_9;
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v9 = (unint64_t)v30;
  memset(__p, 0, sizeof(__p));
  if (!v30)
    goto LABEL_13;
LABEL_9:
  if (v9 >> 61)
    sub_239FEBE68();
  v10 = 8 * v9;
  if (((8 * v9) & 0x8000000000000000) != 0)
    sub_239FEBE68();
  v11 = (char *)operator new(8 * v9);
  v9 = (unint64_t)&v11[8 * ((uint64_t)(8 * v9) >> 3)];
  memcpy(v11, __src, v10);
LABEL_14:
  *(_QWORD *)a1 = &off_250B0DCE8;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = v9 - (_QWORD)v11;
  if ((char *)v9 != v11)
  {
    if (v12 < 0)
      sub_239FEBE68();
    v13 = (char *)operator new(v9 - (_QWORD)v11);
    *(_QWORD *)(a1 + 16) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 32) = v14;
    memcpy(v13, v11, v9 - (_QWORD)v11);
    *(_QWORD *)(a1 + 24) = v14;
  }
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (v11)
    operator delete(v11);
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = &off_250B0DB88;
  return a1;
}

void sub_239FF3BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_239FF38A8((uint64_t)&a15);
  sub_239FF38A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_239FF3C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v5 + 24) = v9;
    operator delete(v9);
  }
  if (v6)
    JUMPOUT(0x239FF3C78);
  sub_239FF38A8((uint64_t)va1);
  sub_239FF38A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239FF3C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  sub_239FF38A8((uint64_t)&a15);
  sub_239FF38A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FF3CC0@<X0>(uint64_t a1@<X1>, _WORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  std::runtime_error *exception;

  result = operator new(0xD0uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_250B0DE60;
  result[3] = &off_250B0DC88;
  v7 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)result + 10) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)result + 11) = v7;
  result[24] = *(_QWORD *)(a1 + 160);
  v8 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)result + 6) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)result + 7) = v8;
  v9 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)result + 8) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)result + 9) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)result + 2) = *(_OWORD *)a1;
  *((_OWORD *)result + 3) = v10;
  v11 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)result + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)result + 5) = v11;
  v12 = *((_DWORD *)result + 48) - 0x10000;
  *((_WORD *)result + 100) = *a2;
  if (v12 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected espresso buffer storage type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_239FF3D98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239FF3DB0(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  void *v4;

  __cxa_free_exception(v1);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_239FF3DD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239FF3DE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_239FF3E10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 201))
    free(*(void **)(a1 + 32));
}

uint64_t sub_239FF3E28(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 177))
    free(*(void **)(a1 + 8));
  return a1;
}

void sub_239FF3E58(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 177))
    free(*(void **)(a1 + 8));
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF3E98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 8);
}

uint64_t sub_239FF3EB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

unint64_t sub_239FF3ECC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::runtime_error *exception;
  _OWORD v14[2];
  uint64_t v15;
  std::string v16;

  result = espresso_buffer_get_rank();
  v5 = result;
  if (result >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, v5);
    sub_239FEEC54("Unsupported tensor rank: ", &v16, (std::string *)v14);
    std::runtime_error::runtime_error(exception, (const std::string *)v14);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v6 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 152), 2uLL);
  v7 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 136), 2uLL);
  v14[0] = vextq_s8(v6, v6, 8uLL);
  v14[1] = vextq_s8(v7, v7, 8uLL);
  v15 = 4 * *(_QWORD *)(a1 + 128);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
  {
    v8 = 8 * (5 - result);
    v9 = 40 - v8;
    v10 = (char *)operator new(40 - v8);
    v11 = (char *)v14 + v8;
    *a2 = v10;
    v12 = &v10[8 * ((unint64_t)(40 - v8) >> 3)];
    a2[2] = v12;
    result = (unint64_t)memcpy(v10, v11, v9);
    a2[1] = v12;
  }
  return result;
}

void sub_239FF3FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_239FF4064(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *__p[3];

  v4 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = v5;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
  sub_239FF40FC(a2, v4, v6, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_239FF40E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239FF40FC(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v8 = operator new[]();
  *(_QWORD *)a1 = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &unk_250B0DE98;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)a4;
  v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11)
  {
    if (v11 < 0)
      sub_239FEBE68();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  memcpy(*(void **)a1, a2, a3);
  return a1;
}

void sub_239FF41E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_239FF420C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_239FF38A8(v1);
  _Unwind_Resume(a1);
}

void sub_239FF4234(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF4258(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x23B83FE64);
  return result;
}

uint64_t sub_239FF4278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000023A0A2DF4)
    return a1 + 24;
  if (((v3 & 0x800000023A0A2DF4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000023A0A2DF4))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000023A0A2DF4 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_239FF42F8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239FF3090((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_DWORD *)v26 + 12) = 4;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_QWORD *)v26 + 11) = 0;
  *((_QWORD *)v26 + 5) = &off_250B0DB88;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239FF4830(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239FF475C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239FF4770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239FF4788(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 40) = &off_250B0DCE8;
      v3 = *(std::__shared_weak_count **)(v2 + 88);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = *(void **)(v2 + 56);
      if (v6)
      {
        *(_QWORD *)(v2 + 64) = v6;
        operator delete(v6);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_239FF4830(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_239FF1A44();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_239FF49DC(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_239FEBE68();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_239FF4B20(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_23A09D85C(a2);
}

void sub_239FF4B70(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF4B94(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239FF4830(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_239FF4CD4(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_239FF4CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239FF5234(v1);
  _Unwind_Resume(a1);
}

void sub_239FF4CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239FF5234(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239FF4CD4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239FF3090((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_239FF5124(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239FF4830(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239FF50F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239FF510C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FF5124(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &off_250B0DCE8;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_239FEBE68();
    v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  __dst[8] = *((_QWORD *)a2 + 8);
  __dst[9] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  __dst[3] = &off_250B0DB88;
  return __dst;
}

void sub_239FF5210(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF5234(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v2[5] = &off_250B0DCE8;
      v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      v7 = (void *)v2[7];
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_14;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void *)v2[7];
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_10;
  }
LABEL_14:
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

char *sub_239FF5308(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239FF1A44();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_239FF5524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF5538((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF5538(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_239FF559C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_239FEBE68();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_239FF1F64(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_239FF567C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_239FF56CC(&a9);
  _Unwind_Resume(a1);
}

void sub_239FF5690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_239FF56CC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_239FF56CC(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_239FF5760(uint64_t a1, __CVBuffer *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  int v5;
  __CVBuffer *v6;
  size_t Height;
  size_t Width;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *v12;
  char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = a2;
  sub_239FF5BC4(&pixelBuffer, &v24);
  v4 = v24;
  v3 = v25;
  v26 = v24;
  v27 = v25;
  v24 = 0;
  v25 = 0;
  v5 = sub_239FF5984(pixelBuffer);
  v6 = pixelBuffer;
  Height = CVPixelBufferGetHeight(pixelBuffer);
  Width = CVPixelBufferGetWidth(v6);
  v9 = sub_239FF5FD8(v6);
  sub_239FF6188(&v22, Height, Width, v9);
  *(_QWORD *)a1 = &off_250B0DCE8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = v22;
  v11 = v23 - v22;
  if (v23 != v22)
  {
    if (v11 < 0)
      sub_239FEBE68();
    v12 = (char *)operator new(v23 - v22);
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 32) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 24) = v13;
  }
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v10)
  {
    v23 = v10;
    operator delete(v10);
  }
  if (v3)
  {
    v16 = (unint64_t *)&v3->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)a1 = &off_250B0DBD0;
  return a1;
}

void sub_239FF5908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_239FF38A8((uint64_t)&a14);
  sub_239FF38A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF5984(__CVBuffer *a1)
{
  signed int PixelFormatType;
  int v2;
  unsigned int v4;
  std::runtime_error *exception;
  std::string v6;
  std::string v7;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v2 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v2 = 1278226488;
LABEL_10:
    if (PixelFormatType == v2)
      return 0;
LABEL_15:
    v4 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v4);
    sub_239FEEC54("Unsupported CVPixelBuffer type: ", &v6, &v7);
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v2 = 1380401729;
    goto LABEL_10;
  }
  return 4;
}

void sub_239FF5AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_239FF5B34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x23B83FE88);
}

CVPixelBufferRef sub_239FF5BC4@<X0>(__CVBuffer **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __CVBuffer *v5;
  CVPixelBufferRef result;
  std::runtime_error *exception;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_250B0DE28;
  v4[3] = &off_250B0DC48;
  v5 = *a1;
  v4[4] = *a1;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  result = CVPixelBufferRetain(v5);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_239FF5C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_239FF5C80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239FF5C98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239FF5CA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_239FF5CD8(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

uint64_t sub_239FF5CF8(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  return a1;
}

void sub_239FF5D24(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF5D60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

void *sub_239FF5D78(uint64_t a1)
{
  void *BaseAddress;
  void *v3;
  std::runtime_error *exception;

  BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 8));
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v3 = BaseAddress;
  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a1 + 8));
  return v3;
}

void sub_239FF5DE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FF5DF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  size_t BytesPerRow;
  uint64_t v6;
  _QWORD *result;

  v4 = qword_23A0A3058[sub_239FF5984(*(__CVBuffer **)(a1 + 8))];
  BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 8));
  v6 = sub_239FF5FD8(*(__CVBuffer **)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *result = BytesPerRow;
  result[1] = v6 * v4;
  result[2] = v4;
  *a2 = result;
  return result;
}

uint64_t sub_239FF5E74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t result;
  std::runtime_error *exception;
  void *__p[3];

  v4 = (__CVBuffer *)a1[1];
  if (CVPixelBufferLockBaseAddress(v4, 1uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    goto LABEL_8;
  }
  v5 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v7 = v6;
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
  sub_239FF40FC(a2, v5, v7, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  result = CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_239FF5F80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF5F94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF5FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_239FF20DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF5FD8(__CVBuffer *a1)
{
  signed int PixelFormatType;
  int v2;
  int v4;
  unsigned int v5;
  std::runtime_error *exception;
  std::string v7;
  std::string v8;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v2 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v4 = 1278226488;
LABEL_14:
    if (PixelFormatType != v4)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v4 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v2 = 1380401729;
LABEL_8:
    if (PixelFormatType == v2)
      return 4;
LABEL_16:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v7, v5);
    sub_239FEEC54("Unsupported CVPixelBuffer type: ", &v7, &v8);
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return 1;
}

void sub_239FF6128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

char **sub_239FF6188(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = (char *)operator new(8uLL);
  *(_QWORD *)v8 = a2;
  a1[1] = v8 + 8;
  a1[2] = v8 + 8;
  *a1 = v8;
  v9 = (char *)operator new(0x10uLL);
  v10 = v9 + 16;
  *(_QWORD *)v9 = *(_QWORD *)v8;
  *((_QWORD *)v9 + 1) = a3;
  *a1 = v9;
  a1[1] = v9 + 16;
  a1[2] = v9 + 16;
  operator delete(v8);
  v11 = (unint64_t)a1[2];
  a1[1] = v9 + 16;
  if ((unint64_t)(v9 + 16) < v11)
  {
    *((_QWORD *)v9 + 2) = a4;
    v12 = (uint64_t)(v9 + 24);
    goto LABEL_21;
  }
  v13 = *a1;
  v14 = (v10 - *a1) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    sub_239FEBE68();
  v16 = v11 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_239FF1A44();
    v18 = (char *)operator new(8 * v17);
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = a4;
    v12 = (uint64_t)(v19 + 8);
    if (v10 == v13)
      goto LABEL_19;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = a4;
  v12 = 8 * v14 + 8;
  if (v10 != v13)
  {
LABEL_14:
    v21 = v9 - v13 + 8;
    if (v21 < 0x18)
      goto LABEL_26;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v23;
    v19 -= v23;
    v24 = &v18[8 * v14 - 16];
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v9;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v9 - 1);
      *(_OWORD *)v24 = v26;
      v24 -= 32;
      v9 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_26:
      do
      {
        v27 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v10 != v13);
    }
  }
LABEL_19:
  *a1 = v19;
  a1[1] = (char *)v12;
  a1[2] = v20;
  if (v13)
    operator delete(v13);
LABEL_21:
  a1[1] = (char *)v12;
  return a1;
}

void sub_239FF6348(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239FF6364(uint64_t a1, const char **a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  *(_DWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_BYTE **)(a3 + 16);
  v12 = *(_BYTE **)(a3 + 24);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_239FEBE68();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_239FF649C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF64C0(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_239FF6528(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239FF3090((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_239FF6978(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239FF4830(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239FF694C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239FF6960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FF6978(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &off_250B0DCE8;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_239FEBE68();
    v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  __dst[8] = *((_QWORD *)a2 + 8);
  __dst[9] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return __dst;
}

void sub_239FF6A58(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

void sub_239FF6A80()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_239FF6A94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0DF98;
  result[1] = v3;
  return result;
}

uint64_t sub_239FF6AC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0DF98;
  a2[1] = v2;
  return result;
}

void sub_239FF6AE4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetLoadResources", "", v5, 2u);
  }

}

uint64_t sub_239FF6B68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31-[CSUSceneNetV5 loadResources:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31-[CSUSceneNetV5 loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31-[CSUSceneNetV5 loadResources:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31-[CSUSceneNetV5 loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239FF6BD4()
{
  return &unk_250B0DFF8;
}

_QWORD *sub_239FF6BE0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_250B0DB68;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_239FF6C54(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250B0DB68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83FE88);
}

void sub_239FF6CC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239FF6CD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_239FF6D08(uint64_t a1)
{
  return sub_239FF7BD4(a1 + 24);
}

uint64_t sub_239FF6D14(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;
  __int128 v7;
  uint64_t context;
  uint64_t plan;
  int v10;
  std::string::size_type v11;
  int v12;
  size_t v13;
  unint64_t v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  const std::string::value_type *v19;
  std::string *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *i;
  std::runtime_error *exception;
  int v28;
  std::string __dst;
  void *__p[4];
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64((_BYTE *)(a1 + 32), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  sub_239FF7464(a1 + 56, a3);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  if (!*(_BYTE *)(a3 + 28) && qword_256942060 != -1)
    dispatch_once(&qword_256942060, &unk_250B0DEC0);
  context = espresso_create_context();
  *v6 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso context.");
    goto LABEL_63;
  }
  plan = espresso_create_plan();
  *(_QWORD *)(a1 + 24) = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso plan.");
LABEL_63:
    exception->__vftable = (std::runtime_error_vtbl *)&off_250B0DBA8;
    __cxa_throw(exception, (struct type_info *)&unk_250B0D980, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*(_BYTE *)(a3 + 52)
    && (LODWORD(__dst.__r_.__value_.__l.__data_) = espresso_plan_set_priority(),
        HIBYTE(__p[2]) = 20,
        strcpy((char *)__p, "Setting plan priorty"),
        sub_239FF2838((int *)&__dst, (uint64_t *)__p),
        SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    *(_OWORD *)__p = *a2;
    __p[2] = *((void **)a2 + 2);
    goto LABEL_15;
  }
  sub_239FF1F64(__p, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_15:
  v10 = *(char *)(a3 + 135);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 135);
  else
    v11 = *(_QWORD *)(a3 + 120);
  if (!v11)
    goto LABEL_40;
  v12 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v13 = HIBYTE(__p[2]);
  else
    v13 = (size_t)__p[1];
  v14 = v13 + 1;
  if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 1;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
  if (v13)
  {
LABEL_29:
    if (v12 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    memmove(p_dst, v18, v13);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 58;
  if (v10 >= 0)
    v19 = (const std::string::value_type *)(a3 + 112);
  else
    v19 = *(const std::string::value_type **)(a3 + 112);
  v20 = std::string::append(&__dst, v19, v11);
  v21 = (void *)v20->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v31 = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = v21;
  __p[1] = (void *)v31;
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v31 + 7);
  HIBYTE(__p[2]) = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_40:
  LODWORD(v31) = espresso_plan_add_network();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_23A0A3090;
  strcpy(__dst.__r_.__value_.__l.__data_, "Loading espresso Network");
  sub_239FF2838((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_45;
  }
  else if (!*(_BYTE *)(a3 + 64))
  {
    goto LABEL_45;
  }
  LODWORD(v31) = espresso_plan_share_intermediate_buffer();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_23A0A30A0;
  strcpy(__dst.__r_.__value_.__l.__data_, "Sharing intermediate buffer");
  sub_239FF2838((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)a3;
    v23 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 == v23)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_45:
  v24 = *(_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v23)
    goto LABEL_51;
  do
  {
LABEL_48:
    LODWORD(v31) = espresso_network_declare_output();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_23A0A3090;
    strcpy(__dst.__r_.__value_.__l.__data_, "Declaring network output");
    sub_239FF2838((int *)&v31, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v24 += 24;
  }
  while (v24 != v23);
LABEL_51:
  for (i = *(uint64_t **)(a3 + 88); i; i = (uint64_t *)*i)
  {
    v31 = *(_OWORD *)(i + 5);
    v32 = *((_DWORD *)i + 14);
    v28 = espresso_set_image_preprocessing_params();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_23A0A30B0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Setting preprocessing params");
    sub_239FF2838(&v28, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  LODWORD(v31) = espresso_plan_build();
  strcpy((char *)&__dst, "Building espresso plan");
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 22;
  sub_239FF2838((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return a1;
LABEL_60:
    operator delete(__p[0]);
    return a1;
  }
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_60;
  return a1;
}

void sub_239FF7354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_239FF5234(a10);
  sub_239FF5234(a11);
  sub_239FF1A6C(a12);
  if (*(char *)(v29 + 55) < 0)
    operator delete(*a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239FF7464(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_239FF559C((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  sub_239FF75AC(a1 + 72, a2 + 72);
  v6 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_239FF1F64(v6, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_239FF751C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;

  v4 = (void **)v1[11];
  if (v4)
    sub_23A09D920(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    v6 = (void **)*v1;
    if (!*v1)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (void **)*v1;
    if (!*v1)
      goto LABEL_5;
  }
  v7 = (void **)v1[1];
  v8 = v6;
  if (v7 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v6);
    v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239FF75AC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239FF4830(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_239FF76EC(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_239FF76C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239FF64C0(v1);
  _Unwind_Resume(a1);
}

void sub_239FF76D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239FF64C0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239FF76EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239FF3090((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_239FF1F64(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v25 + 14) = *(_DWORD *)(a3 + 40);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239FF4830(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239FF7B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF7B64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239FF7B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF7B64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239FF7B64(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_239FF7BB0()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_256942058 = result;
  return result;
}

uint64_t sub_239FF7BD4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    espresso_plan_destroy();
  if (*(_QWORD *)(a1 + 16))
    espresso_context_destroy();
  sub_239FF5234(a1 + 232);
  sub_239FF5234(a1 + 192);
  sub_239FF1A6C(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_239FF7C4C()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_239FF7C60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0E038;
  result[1] = v3;
  return result;
}

uint64_t sub_239FF7C94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0E038;
  a2[1] = v2;
  return result;
}

void sub_239FF7CB0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetResampleImage", "", v5, 2u);
  }

}

uint64_t sub_239FF7D34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239FF7DA0()
{
  return &unk_250B0E098;
}

uint64_t sub_239FF7DAC@<X0>(VTPixelTransferSessionRef **a1@<X8>)
{
  VTPixelTransferSessionRef *v2;
  uint64_t v3;
  uint64_t result;
  std::runtime_error *exception;

  v2 = (VTPixelTransferSessionRef *)operator new();
  *v2 = 0;
  v3 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v2);
  result = sub_239FF1B38(v3, "Session Creation");
  if (!*v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PixelBufferTransfer internal inconsistency: null session.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *a1 = v2;
  return result;
}

void sub_239FF7E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x23B83FE88](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_239FF7E88()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_239FF7E9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0E0B8;
  result[1] = v3;
  return result;
}

uint64_t sub_239FF7ED0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0E0B8;
  a2[1] = v2;
  return result;
}

void sub_239FF7EEC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetRunOnInputImage", "", v5, 2u);
  }

}

uint64_t sub_239FF7F70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239FF7FDC()
{
  return &unk_250B0E118;
}

uint64_t sub_239FF7FE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void sub_239FF7FF8(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) += 4 * (a3 - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
  (*(void (**)(float))(a1[4] + 16))(**(float **)(*(_QWORD *)(a1[5] + 8) + 48));

}

void sub_239FF8090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_239FF80A4(void **a1)
{
  operator delete(*a1);
}

void sub_239FF81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_239FF8224(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v6;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  if ((a3 & 3) != 0)
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, a2, 8, (uint64_t)CFSTR("embedding bufferA does not have all floats"), a5);
LABEL_16:
      **v6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v9 = a3 >> 2;
  if (a3 >> 2 != objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v10, 8, (uint64_t)CFSTR("embedding bufferA does not have same number of elements as the reference array"), v12);
      goto LABEL_16;
    }
LABEL_17:
    **(_DWORD **)(a1 + 72) = -1082130432;
    return;
  }
  if (!a2)
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v10, 8, (uint64_t)CFSTR("pointer to embedding bufferA is null"), v12);
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (a3 >= 4)
  {
    v13 = 0;
    if (v9 <= 1)
      v14 = 1;
    else
      v14 = v9;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v10, v13, v11, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_floatValue(v15, v16, v17, v18, v19);
      *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 24)
                                                                 + (float)(v20 * *(float *)&a2[4 * v13]);
      *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                            + 24)
                                                                 + (float)(*(float *)&a2[4 * v13]
                                                                         * *(float *)&a2[4 * v13]);
      *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                            + 24)
                                                                 + (float)(v20 * v20);

      ++v13;
    }
    while (v14 != v13);
  }
}

void sub_239FF8380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_239FF852C(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3 >> 2;
  if ((a3 & 3) != 0)
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, a2, 8, (uint64_t)CFSTR("embedding bufferA does not have all floats"), a5);
LABEL_18:
      **v6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v8 != objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v9, 8, (uint64_t)CFSTR("embedding bufferA does not have same number of elements as the reference array"), v11);
      goto LABEL_18;
    }
LABEL_19:
    **(_DWORD **)(a1 + 72) = -1082130432;
    return;
  }
  if (!a2)
  {
    v6 = (_QWORD **)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v9, 8, (uint64_t)CFSTR("pointer to embedding bufferA is null"), v11);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v12 = 0;
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, 0, v10, v11);
    while (1)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_floatValue(v18, v19, v20, v21, v22);
      v14 = vabds_f32(v23, *(float *)&a2[4 * v12]);
      if (*(_QWORD *)(a1 + 80) == 1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v14 = v14 + *(float *)(v13 + 24);
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        if (*(float *)(v13 + 24) >= v14)
          v14 = *(float *)(v13 + 24);
      }
      *(float *)(v13 + 24) = v14;

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) <= (unint64_t)++v12)
        break;
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v15, v12, v16, v17);
    }
  }
}

void sub_239FF8684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF87B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF87E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF88B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF88C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF89E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF8A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF8C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF8D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF8EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF8FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF905C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF9164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FF9180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FF9198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF928C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF936C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF94A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF94BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF94CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF95CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF95DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF95F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF9660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF96EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF9880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239FF989C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FF98AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FF98C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF999C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF9AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_239FF9B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FF9B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_239FF9B50(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  sub_23A016E78();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_23A09D99C(a1, v4);

  if (a2)
  {
    v5 = (void *)MEMORY[0x24BDD1540];
    v16 = *MEMORY[0x24BDD0FC8];
    v6 = (void *)MEMORY[0x24BDD17C8];
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    objc_msgSend_stringWithUTF8String_(v6, v8, v7, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v11;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v12, (uint64_t)v17, (uint64_t)&v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v5, v14, *MEMORY[0x24BDD1100], -1, (uint64_t)v13);
    *a2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_239FF9C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FF9C98(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_239FF9CA4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  int v6;
  std::string::value_type v7;
  std::string::value_type v8;
  std::string::value_type v9;
  std::runtime_error *exception;

  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  if (a2 >= 25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid Parameter for number of bits");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v5 = a1 << (24 - a2);
  std::string::push_back((std::string *)a3, aAbcdefghijklmn[(v5 >> 18) & 0x3F]);
  v6 = vcvtd_n_s64_f64(ceil((double)a2 * 0.125), 3uLL);
  if (v6 < 7)
    v7 = 61;
  else
    v7 = aAbcdefghijklmn[(v5 >> 12) & 0x3F];
  std::string::push_back((std::string *)a3, v7);
  if (v6 < 13)
    v8 = 61;
  else
    v8 = aAbcdefghijklmn[(v5 >> 6) & 0x3F];
  std::string::push_back((std::string *)a3, v8);
  if (v6 < 19)
    v9 = 61;
  else
    v9 = aAbcdefghijklmn[v5 & 0x3F];
  std::string::push_back((std::string *)a3, v9);
}

void sub_239FF9DB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF9DC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_239FF9DE4(float *a1, unsigned int a2, int a3, uint64_t a4)
{
  _BYTE *v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  const std::string::value_type *p_p;
  std::string::size_type v15;
  double v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::runtime_error *exception;
  void *__p;
  std::string::size_type v21;
  unsigned __int8 v22;

  if (*(char *)(a4 + 23) < 0)
  {
    *(_QWORD *)(a4 + 8) = 0;
    v7 = *(_BYTE **)a4;
  }
  else
  {
    *(_BYTE *)(a4 + 23) = 0;
    v7 = (_BYTE *)a4;
  }
  *v7 = 0;
  v8 = vcvtpd_s64_f64(log2((double)(2 * a3)));
  if (v8 > 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid Parameter for number of bits per hash");
    goto LABEL_31;
  }
  v9 = 0;
  if (a2)
  {
    v10 = 24;
    v11 = a2;
    while (1)
    {
      v12 = (unint64_t)*a1;
      if (*a1 != (float)v12)
        break;
      if (v10 >= v8)
      {
        v9 = (v9 << v8) | v12;
        v10 -= v8;
        ++a1;
        if (!--v11)
          goto LABEL_21;
      }
      else
      {
        v13 = v8 - v10;
        sub_239FF9CA4((v12 >> (v8 - v10)) | (v9 << v10), 24, (uint64_t)&__p);
        if ((v22 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v22 & 0x80u) == 0)
          v15 = v22;
        else
          v15 = v21;
        std::string::append((std::string *)a4, p_p, v15);
        v16 = ldexp(1.0, v13);
        if ((char)v22 < 0)
          operator delete(__p);
        v9 = (unint64_t)(v16 + -1.0) & v12;
        v10 = 24 - v13;
        ++a1;
        if (!--v11)
          goto LABEL_21;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Data not consistent");
LABEL_31:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v10 = 24;
LABEL_21:
  sub_239FF9CA4(v9, 24 - v10, (uint64_t)&__p);
  if ((v22 & 0x80u) == 0)
    v17 = (const std::string::value_type *)&__p;
  else
    v17 = (const std::string::value_type *)__p;
  if ((v22 & 0x80u) == 0)
    v18 = v22;
  else
    v18 = v21;
  std::string::append((std::string *)a4, v17, v18);
  if ((char)v22 < 0)
    operator delete(__p);
}

void sub_239FF9FC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FF9FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239FFA010(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unsigned int v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *exception;
  char *v23;
  char *v24;
  void *__p;
  char *v26;
  char *v27;

  if (a1[1] != a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "input feature vector size does not match hasher expectation!";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  v7 = a1[2];
  v26 = 0;
  v27 = 0;
  __p = 0;
  if (v7)
  {
    if (v7 >> 62)
      sub_239FEBE68();
    v8 = (char *)operator new(4 * v7);
    __p = v8;
    v27 = &v8[4 * v7];
    bzero(v8, 4 * v7);
    v26 = v27;
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(_QWORD *, uint64_t, char *))(*a1 + 16))(a1, a2, v8);
  v9 = a1[2];
  v10 = a1[3];
  v24 = v8;
  if (v10)
  {
    v11 = v9 / v10;
    v12 = (int)v11;
    if (v11 << 32)
    {
      v13 = *(char **)(a4 + 8);
      if (((v11 << 32) & 0x8000000000000000) != 0)
      {
        v21 = 1;
        do
        {
          v23 = &v8[4 * v12];
          if ((unint64_t)v13 < *(_QWORD *)(a4 + 16))
          {
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = 0;
            *((_QWORD *)v13 + 2) = 0;
            sub_239FEBE68();
          }
          v13 = sub_239FFA2D8((char **)a4, (const void **)&v24, (const void **)&v23);
          *(_QWORD *)(a4 + 8) = v13;
          v8 = &v24[4 * v12];
          v24 = v8;
          v16 = a1[3] > (unint64_t)v21++;
        }
        while (v16);
      }
      else
      {
        v14 = 4 * (int)v11;
        v15 = 1;
        do
        {
          v23 = &v8[4 * v12];
          if ((unint64_t)v13 >= *(_QWORD *)(a4 + 16))
          {
            v13 = sub_239FFA2D8((char **)a4, (const void **)&v24, (const void **)&v23);
          }
          else
          {
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = 0;
            *((_QWORD *)v13 + 2) = 0;
            v17 = (char *)operator new(v14);
            *(_QWORD *)v13 = v17;
            *((_QWORD *)v13 + 1) = v17;
            v18 = &v17[4 * v12];
            *((_QWORD *)v13 + 2) = v18;
            memcpy(v17, v8, v14);
            *((_QWORD *)v13 + 1) = v18;
            v13 += 24;
            *(_QWORD *)(a4 + 8) = v13;
          }
          *(_QWORD *)(a4 + 8) = v13;
          v8 = &v24[4 * v12];
          v24 = v8;
          v16 = a1[3] > (unint64_t)v15++;
        }
        while (v16);
      }
    }
    else
    {
      v19 = *(char **)(a4 + 8);
      v20 = 1;
      do
      {
        v23 = &v8[4 * v12];
        if ((unint64_t)v19 < *(_QWORD *)(a4 + 16))
        {
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = 0;
          v19 += 24;
          *(_QWORD *)(a4 + 8) = v19;
        }
        else
        {
          v19 = sub_239FFA2D8((char **)a4, (const void **)&v24, (const void **)&v23);
          v8 = v24;
        }
        *(_QWORD *)(a4 + 8) = v19;
        v8 += 4 * v12;
        v24 = v8;
        v16 = a1[3] > (unint64_t)v20++;
      }
      while (v16);
    }
  }
  if (__p)
    operator delete(__p);
}

void sub_239FFA274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

char *sub_239FFA2D8(char **a1, const void **a2, const void **a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  char **v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  char *v28;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_239FF1A44();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  v14 = *a2;
  *((_QWORD *)v12 + 1) = 0;
  v15 = (char **)(v12 + 8);
  v16 = *a3;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v17 = v16 - v14;
  if (v16 != v14)
  {
    if (v17 < 0)
      sub_239FEBE68();
    v18 = (char *)operator new(v16 - v14);
    *(_QWORD *)v12 = v18;
    *v15 = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *((_QWORD *)v12 + 2) = v19;
    memcpy(v18, v14, v17);
    *v15 = v19;
  }
  v20 = v12 + 24;
  v28 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v20;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v21 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v22 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v22;
      v12 -= 24;
      *((_QWORD *)v21 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v23 = *a1;
    v4 = a1[1];
    v20 = v28;
    *a1 = v12;
    a1[1] = v28;
    a1[2] = v13;
    if (v4 != v23)
    {
      v24 = v4;
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *((_QWORD *)v4 - 2) = v25;
          operator delete(v25);
        }
        v4 = v24;
      }
      while (v24 != v23);
      v4 = v23;
    }
  }
  if (v4)
    operator delete(v4);
  return v20;
}

void sub_239FFA4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_239FFA4EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239FFA4EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239FFA6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFA6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFA7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FFA7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFA9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_239FFAA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFAADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFAAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFACFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFAEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_239FFAF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFAF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_239FFAF84(void **a1, _BYTE *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v19 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = (char *)(v14 + v6);
      v16 = v14 + v6 + 4;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        v19 = a1[1];
      }
      else
      {
        v18 = v5 - (_QWORD)v15;
        v19 = a1[1];
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 2) + 1;
          v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v21);
          v19 = (_DWORD *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    *(_DWORD *)v9 = *a3;
    return v9;
  }
  v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62)
    sub_239FEBE68();
  v28 = v10 - v6;
  if (v28 >> 1 > v26)
    v26 = v28 >> 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
    v29 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 62)
      sub_239FF1A44();
    v30 = (char *)operator new(4 * v29);
    v31 = &v30[4 * v8];
    v32 = &v30[4 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(4 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v52 = 1;
    else
      v52 = v7 >> 1;
    if (v52 >> 62)
      sub_239FF1A44();
    v53 = (char *)operator new(4 * v52);
    v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    v32 = &v53[4 * v52];
    if (v30)
    {
      v54 = &v53[4 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = (char *)*a1;
      *(_DWORD *)v31 = *a3;
      v35 = v31 + 4;
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(_DWORD *)v31 = *a3;
  v35 = v31 + 4;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v38 = v37 - v34 - 4;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x2C)
      goto LABEL_59;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_59;
    v40 = (v38 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (__int128 *)(v6 + 4 * v8 - 16);
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34)
    operator delete(v34);
  return v31;
}

void sub_239FFB2D8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_239FFB83C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v15);
  MEMORY[0x23B83FE88](v10, 0xA1C409BE6959DLL);
  sub_239FF1A6C((uint64_t)&a9);
  if (*(char *)(v12 - 105) < 0)
    operator delete(*(void **)(v12 - 128));
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v16, v9);
    __cxa_end_catch();
    JUMPOUT(0x239FFB7A8);
  }
  v17 = *(_QWORD *)(v12 - 80);
  if (!v17)
    sub_239FF19E8();
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  v18 = *(_QWORD *)(v12 - 80);
  if (v18 == v12 - 104)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 104) + 32))(v12 - 104);
    _Unwind_Resume(a1);
  }
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_239FFB960(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_239FFBADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_239FFBC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239FFBC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FFBC38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_239FFBC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239FFBC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239FFBC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239FFC1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v37;

  if (__p)
  {
    operator delete(__p);
    v37 = a32;
    if (!a32)
    {
LABEL_3:
      sub_239FF27B8(&a36);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v37 = a32;
    if (!a32)
      goto LABEL_3;
  }
  operator delete(v37);
  sub_239FF27B8(&a36);
  _Unwind_Resume(a1);
}

void sub_239FFC338(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::runtime_error *exception;
  void *__p[3];

  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 40) + 32))(__p);
  sub_239FFECB4(a1, v4, (uint64_t)__p);
  *a1 = &off_250B0D558;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_239FFC3F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239FFC40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239FFC430(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DD08;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239FFD91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  sub_239FFE328((void **)&STACK[0x258]);
  sub_239FF087C((void **)&STACK[0x270]);

  _Unwind_Resume(a1);
}

char *sub_239FFDE38(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 24;
  v8 = &(*a1)[24 * v7];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_239FEBE68();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v6) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_239FF1A44();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v34 = v17;
    v35 = &v17[24 * v7];
    v36 = v35;
    v37 = &v17[24 * v16];
    sub_239FFF34C((uint64_t)&v34, a3);
    v18 = v35;
    v19 = *a1;
    v20 = v35;
    if (*a1 != v8)
    {
      v20 = v35;
      v21 = v8;
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)v20 = v22;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    v35 = v20;
    v23 = a1[1];
    v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *(_OWORD *)v24 = *(_OWORD *)v8;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v8 + 2);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      v20 = v35;
      v8 = a1[1];
    }
    v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    v26 = a1[2];
    a1[2] = v37;
    v36 = v8;
    v37 = v26;
    v34 = v25;
    v35 = v25;
    if (v8 == v25)
    {
      if (!v8)
        return v18;
    }
    else
    {
      do
      {
        while (1)
        {
          v28 = v8 - 24;
          v27 = (void *)*((_QWORD *)v8 - 3);
          v36 = v8 - 24;
          if (!v27)
            break;
          *((_QWORD *)v8 - 2) = v27;
          operator delete(v27);
          v8 = v36;
          if (v36 == v25)
            goto LABEL_32;
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      v8 = v34;
      if (!v34)
        return v18;
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(__n128 *)v8 = *a3;
    *(_QWORD *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  v10 = v8 + 24;
  v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    v12 = v5 - 24;
    v13 = a1[1];
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((_QWORD *)v5 == v10)
      goto LABEL_39;
LABEL_35:
    v29 = 8 * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    do
    {
      v31 = *(void **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(v11 + 8) = v31;
        operator delete(v31);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
      }
      v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)v11 = *(_OWORD *)v30;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)&v8[v29 - 8];
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((_QWORD *)v5 != v10)
    goto LABEL_35;
LABEL_39:
  v32 = *(void **)v8;
  if (*(_QWORD *)v8)
  {
    *(_QWORD *)&v6[24 * v7 + 8] = v32;
    operator delete(v32);
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
  }
  *(__n128 *)v8 = *a3;
  *(_QWORD *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_239FFE1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FFA4EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_239FFE1B8(uint64_t a1, const void *a2, size_t a3)
{
  return memcpy((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 4 * *(_QWORD *)(a1 + 88)), a2, a3);
}

_QWORD *sub_239FFE1CC(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 40);
  result[6] = 0;
  result[4] = &off_250B0DCE8;
  *((_DWORD *)result + 10) = v4;
  result[7] = 0;
  result[8] = 0;
  v6 = *(_BYTE **)(a2 + 48);
  v5 = *(_BYTE **)(a2 + 56);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_239FEBE68();
    v8 = (char *)operator new(v5 - v6);
    v3[6] = v8;
    v3[7] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    v3[8] = v9;
    result = memcpy(v8, v6, v7);
    v3[7] = v9;
  }
  v10 = *(_QWORD *)(a2 + 80);
  v3[9] = *(_QWORD *)(a2 + 72);
  v3[10] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v3[4] = &off_250B0DB88;
  return result;
}

void sub_239FFE28C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239FFE2A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  a1[4] = &off_250B0DCE8;
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[6];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[6];
  if (v5)
  {
LABEL_6:
    a1[7] = v5;
    operator delete(v5);
  }
}

void **sub_239FFE328(void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  id *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 2;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239FFE420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_239FFE43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239FFE454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_239FFE814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void **sub_239FFE968(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_239FEBDE0();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

void **sub_239FFEAC4(void **a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_239FFE968(a1, __s, v4);
}

uint64_t sub_239FFEAF8@<X0>(int32x4_t **a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D0>)
{
  uint64_t result;
  char *v6;
  int32x4_t *v7;
  unint64_t v8;
  signed int v9;
  int32x4_t *v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  __int32 v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t *v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  std::runtime_error *exception;
  int v30;

  v30 = 4;
  sub_239FFFC10(a2, &v30, (uint64_t)a1);
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  v7 = *a1;
  v6 = (char *)a1[1];
  if (*a1 == (int32x4_t *)v6)
    return result;
  v8 = v6 - (char *)v7 - 8;
  if (v8 >= 0x38)
  {
    v11 = (v8 >> 3) + 1;
    v10 = (int32x4_t *)((char *)v7 + 8 * (v11 & 0x3FFFFFFFFFFFFFF8));
    v12 = v7 + 2;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    v14 = v11 & 0x3FFFFFFFFFFFFFF8;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      v17 = v12[-2];
      v16 = v12[-1];
      v19 = *v12;
      v18 = v12[1];
      v12 += 4;
      v13 = vmulq_s32(v13, vuzp1q_s32(v17, v16));
      v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      v14 -= 8;
    }
    while (v14);
    v20 = (int8x16_t)vmulq_s32(v15, v13);
    *(int32x2_t *)v20.i8 = vmul_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    v9 = v20.i32[0] * v20.i32[1];
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
  else
  {
    v9 = 1;
    v10 = *a1;
  }
  do
  {
    v21 = v10->i32[0];
    v10 = (int32x4_t *)((char *)v10 + 8);
    v9 *= v21;
  }
  while (v10 != (int32x4_t *)v6);
LABEL_9:
  if (!v9)
    return result;
  if (v9 < 8)
  {
    v22 = 0;
LABEL_15:
    v26 = (_DWORD *)(result + 4 * v22);
    v27 = v9 - v22;
    do
    {
      *v26++ = a3.i32[0];
      --v27;
    }
    while (v27);
    return result;
  }
  v22 = v9 & 0xFFFFFFFFFFFFFFF8;
  v23 = vdupq_lane_s32(a3, 0);
  v24 = (int32x4_t *)(result + 16);
  v25 = v22;
  do
  {
    v24[-1] = v23;
    *v24 = v23;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v22 != v9)
    goto LABEL_15;
  return result;
}

void sub_239FFEC84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_239FF27B8(v1);
  _Unwind_Resume(a1);
}

void sub_239FFECA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_239FF27B8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239FFECB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::runtime_error *exception;

  a1[2] = 0;
  *a1 = &off_250B0DD08;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  v5 = *(const void **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = v4 - *(_QWORD *)a3;
  if (v4 == *(_QWORD *)a3)
  {
    a1[5] = 0;
  }
  else
  {
    if (v6 < 0)
      sub_239FEBE68();
    v7 = operator new(v4 - *(_QWORD *)a3);
    a1[2] = v7;
    a1[3] = v7;
    v8 = v6 >> 3;
    a1[4] = &v7[v8];
    memcpy(v7, v5, v6);
    a1[3] = &v7[v8];
    a1[5] = v6 >> 3;
    do
    {
      if ((*v7 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      *v7++ >>= 2;
      --v8;
    }
    while (v8 * 8);
  }
  return a1;
}

void sub_239FFEDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239FFEDDC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DD08;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_239FFEE28(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DD08;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239FFEE64(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DD08;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83FE88);
}

char *sub_239FFEEB0(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  int v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 2;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62)
      sub_239FEBE68();
    v17 = v14 - v6;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_239FF1A44();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 2;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[4 * v13];
    v44 = &v43[4 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[4 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[4 * v13 + 16];
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 4 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[4 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[4 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[4 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      v13 = v7 >> 2;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[4 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
  v30 = (int *)(v26 - 4 * a5);
  v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 4;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      v31 = (_DWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 2) + 1;
        v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        v30 = (int *)((char *)v30 + v38);
        v31 = (_DWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(4 * v29 + 4 * v13 + v6 + 16);
        v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

uint64_t sub_239FFF258(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_BYTE **)(a3 + 16);
  v7 = *(_BYTE **)(a3 + 24);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_239FEBE68();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 56) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 48) = v11;
  }
  v12 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_239FFF328(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

__n128 sub_239FFF34C(uint64_t a1, __n128 *a2)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  __n128 result;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(_QWORD *)a1)
    {
      v13 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5)
        v13 = 1;
      if (v13 >= 0xAAAAAAAAAAAAAABLL)
        sub_239FF1A44();
      v14 = v13 >> 2;
      v15 = 24 * v13;
      v16 = (char *)operator new(24 * v13);
      v17 = &v16[24 * v14];
      v18 = &v16[v15];
      if (v4 == v6)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v19 = &v17[v4 - v6];
        v20 = 24 * v14;
        do
        {
          v21 = &v16[v20];
          *(_OWORD *)v21 = *(_OWORD *)v6;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v20 += 24;
          v6 += 24;
        }
        while (v21 + 24 != v19);
        v5 = *(char **)a1;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v19;
        *(_QWORD *)(a1 + 24) = v18;
        if (v23 != v22)
        {
          v24 = v23;
          do
          {
            v26 = *(void **)(v24 - 24);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *(_QWORD *)(v23 - 16) = v25;
              operator delete(v25);
            }
            v23 = v24;
          }
          while (v24 != v22);
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(char **)(a1 + 16);
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v6 == v4)
      {
        v27 = &v6[-24 * v9];
      }
      else
      {
        do
        {
          v11 = (void **)&v6[24 * v10];
          v12 = *v11;
          if (*v11)
          {
            v11[1] = v12;
            operator delete(v12);
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          *(_OWORD *)v11 = *(_OWORD *)v6;
          v11[2] = (void *)*((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v6 += 24;
        }
        while (v6 != v4);
        v4 = *(char **)(a1 + 8);
        v27 = &v6[24 * v10];
      }
      *(_QWORD *)(a1 + 8) = &v4[24 * v10];
      *(_QWORD *)(a1 + 16) = v27;
      v4 = v27;
    }
  }
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  result = *a2;
  *(__n128 *)v4 = *a2;
  *((_QWORD *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 16) += 24;
  return result;
}

uint64_t sub_239FFF560(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

char *sub_239FFF5CC(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239FF1A44();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_239FEBE68();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_239FFF7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_239FFA4EC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_239FFF7D8(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_239FF1A44();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  do
  {
    v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v12 + 2);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
  }
  while (v12 != v13);
  v15 = *a1;
  v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    v16 = v12;
    do
    {
      v18 = (void *)*((_QWORD *)v16 - 3);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *((_QWORD *)v12 - 2) = v17;
        operator delete(v17);
      }
      v12 = v16;
    }
    while (v16 != v15);
    v12 = v15;
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

char *sub_239FFF930(void **a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id *v15;
  id *v16;
  id *v17;
  int v18;
  id v19;
  id *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_239FEBE68();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_239FF1A44();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  v13 = a2[1];
  *(_DWORD *)v11 = *a2;
  a2[1] = 0;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  v16 = (id *)*a1;
  v15 = (id *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v15)
      return v14;
    goto LABEL_13;
  }
  v17 = (id *)a1[1];
  do
  {
    v18 = *((_DWORD *)v17 - 4);
    v17 -= 2;
    *((_DWORD *)v11 - 4) = v18;
    v11 -= 16;
    v19 = v17[1];
    v17[1] = 0;
    *((_QWORD *)v11 + 1) = v19;
  }
  while (v17 != v16);
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  do
  {
    v20 = v15 - 2;

    v15 = v20;
  }
  while (v20 != v16);
  v15 = v16;
  if (v16)
LABEL_13:
    operator delete(v15);
  return v14;
}

_QWORD *sub_239FFFA3C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_239FEBE68();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_239FFFB10(v3, v4, v5, v8);
  }
  return a1;
}

void sub_239FFFAE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_23A09DA24((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239FFFB10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_239FEBE68();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_239FFFBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FFF560((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239FFFBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_239FFF560((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239FFFC10(uint64_t a1, int *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  int v8;
  int32x4_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;

  v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0DE60;
  sub_239FFFDC4((uint64_t)&v6[1], a2, (int32x4_t **)a3);
  *(_QWORD *)a1 = &off_250B0DCE8;
  v8 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = *(int32x4_t **)a3;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    if (v10 < 0)
      sub_239FEBE68();
    v11 = (char *)operator new(v10);
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 32) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 24) = v12;
  }
  *(_QWORD *)(a1 + 40) = v6 + 1;
  *(_QWORD *)(a1 + 48) = v6;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_QWORD *)a1 = &off_250B0DB88;
  return a1;
}

void sub_239FFFD80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239FFFD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 24) = v14;
    operator delete(v14);
  }
  sub_239FF38A8((uint64_t)&a11);
  sub_239FF38A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239FFFDC4(uint64_t a1, int *a2, int32x4_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int32x4_t *v9;
  unint64_t v10;
  int v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  __int32 v24;
  uint64_t v25;
  unsigned int v26;
  std::runtime_error *exception;
  __int128 v29;
  void *memptr;

  v29 = 0u;
  espresso_buffer_pack_tensor_shape();
  v6 = *a2;
  if (v6 >= 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type");
    goto LABEL_20;
  }
  v7 = qword_23A0A32B0[v6];
  v9 = *a3;
  v8 = (char *)a3[1];
  if (*a3 == (int32x4_t *)v8)
  {
    v13 = 0;
    goto LABEL_11;
  }
  v10 = v8 - (char *)v9 - 8;
  if (v10 >= 0x38)
  {
    v14 = (v10 >> 3) + 1;
    v12 = (int32x4_t *)((char *)v9 + 8 * (v14 & 0x3FFFFFFFFFFFFFF8));
    v15 = v9 + 2;
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    v17 = v14 & 0x3FFFFFFFFFFFFFF8;
    v18.i64[0] = 0x100000001;
    v18.i64[1] = 0x100000001;
    do
    {
      v20 = v15[-2];
      v19 = v15[-1];
      v22 = *v15;
      v21 = v15[1];
      v15 += 4;
      v16 = vmulq_s32(v16, vuzp1q_s32(v20, v19));
      v18 = vmulq_s32(v18, vuzp1q_s32(v22, v21));
      v17 -= 8;
    }
    while (v17);
    v23 = (int8x16_t)vmulq_s32(v18, v16);
    *(int32x2_t *)v23.i8 = vmul_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    v11 = v23.i32[0] * v23.i32[1];
    if (v14 == (v14 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
  else
  {
    v11 = 1;
    v12 = *a3;
  }
  do
  {
    v24 = v12->i32[0];
    v12 = (int32x4_t *)((char *)v12 + 8);
    v11 *= v24;
  }
  while (v12 != (int32x4_t *)v8);
LABEL_10:
  v13 = v11;
LABEL_11:
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v13 * v7 + 4095) & 0xFFFFFFFFFFFFF000, 0x1E091250uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_20;
  }
  *(_QWORD *)&v29 = memptr;
  v25 = *a2;
  if (v25 >= 5 || ((0x1Du >> v25) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type.");
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v26 = dword_23A0A32D8[v25];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8) = v29;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_250B0DC88;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 168) = v26;
  *(_WORD *)(a1 + 176) = 257;
  if (*(_DWORD *)(a1 + 168) != 65568)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected espresso buffer storage type");
LABEL_20:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_23A00002C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A000040(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A000054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A000068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A000080()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A000094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_23A0000C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BDC8;
  a2[1] = v2;
  return result;
}

void sub_23A0000E4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderEspressoV1LoadResources", "", v5, 2u);
  }

}

uint64_t sub_23A000168(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A0001D4()
{
  return &unk_250B0BBE0;
}

unsigned __int8 *sub_23A0001E0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239FF3090((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x60uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_DWORD *)v15 + 12) = 4;
  *((_QWORD *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_QWORD *)v15 + 5) = &off_250B0DB88;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_239FF4830(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23A000610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A000780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
      {
LABEL_8:

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a15);

      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_23A000820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A000830(uint64_t a1, std::__fs::filesystem::path *this)
{
  char v4;
  __int128 v5;
  int v7;
  std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  std::__fs::filesystem::path *v10;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if ((std::__fs::filesystem::path *)a1 == this)
      return a1;
    v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*(char *)(a1 + 23) < 0)
    {
      if (v4 >= 0)
        v10 = this;
      else
        v10 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      if (v4 >= 0)
        size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      else
        size = this->__pn_.__r_.__value_.__l.__size_;
      sub_23A0009DC((void **)a1, v10, size);
      return a1;
    }
    else
    {
      if ((*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&this->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v5;
        return a1;
      }
      sub_23A000918((_QWORD *)a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      return a1;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1).__size_)
      std::string::push_back((std::string *)a1, 47);
    v7 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v7 >= 0)
      v8 = this;
    else
      v8 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v9 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      v9 = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a1, (const std::string::value_type *)v8, v9);
    return a1;
  }
}

_QWORD *sub_23A000918(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_239FEBDE0();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_23A0009DC(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_239FEBDE0();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

std::string *sub_23A000B20(std::string *this, std::string *__src, std::string *a3)
{
  int v6;
  size_t v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  std::string *v15;
  void *v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  std::string::size_type *v27;
  unint64_t v28;
  __int128 v29;
  std::string::value_type v30;
  std::string::size_type v31;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v11 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size >= v7)
      {
        v17 = this;
        if ((v10 & 0x80) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9)
        sub_239FEBDE0();
      v15 = this;
      if (v6 < 0)
      {
        v15 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_16:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_18:
            if (v9 != 22)
              operator delete(v15);
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
LABEL_22:
            v17 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_23:
            v18 = (char *)v17 + size;
            if (a3 != __src)
            {
              if (v7 >= 0x20)
              {
                if ((unint64_t)((char *)v17 + size - (char *)__src) >= 0x20)
                {
                  v19 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
                  v18 += v7 & 0xFFFFFFFFFFFFFFE0;
                  v26 = (_OWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + size);
                  v27 = &__src->__r_.__value_.__r.__words[2];
                  v28 = v7 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v29 = *(_OWORD *)v27;
                    *(v26 - 1) = *((_OWORD *)v27 - 1);
                    *v26 = v29;
                    v26 += 2;
                    v27 += 4;
                    v28 -= 32;
                  }
                  while (v28);
                  if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
                    goto LABEL_54;
                }
                else
                {
                  v19 = __src;
                }
              }
              else
              {
                v19 = __src;
              }
              do
              {
                v30 = v19->__r_.__value_.__s.__data_[0];
                v19 = (std::string *)((char *)v19 + 1);
                *v18++ = v30;
              }
              while (v19 != a3);
            }
LABEL_54:
            *v18 = 0;
            v31 = v7 + size;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
              this->__r_.__value_.__l.__size_ = v31;
            else
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            return this;
          }
LABEL_17:
          memmove(v16, v15, size);
          goto LABEL_18;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_16;
      }
      v24 = 2 * v9;
      if (v7 + size > 2 * v9)
        v24 = v7 + size;
      v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v25 = v24 | 7;
      if (v24 >= 0x17)
        v14 = v25 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!size)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  if (v7 > 0x16)
  {
    v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v20 = v7 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v7;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_30;
    goto LABEL_29;
  }
  HIBYTE(v35) = (_BYTE)a3 - (_BYTE)__src;
  p_dst = (void **)&__dst;
  if (a3 != __src)
  {
LABEL_29:
    memcpy(p_dst, __src, v7);
    p_dst = (void **)((char *)p_dst + v7);
  }
LABEL_30:
  *(_BYTE *)p_dst = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35);
  else
    v23 = v34;
  std::string::append(this, v22, v23);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  return this;
}

void sub_23A000E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A000EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A001048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00105C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A001070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0010B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0011AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A001214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A001270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0013B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23A0013D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0014C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23A0014D8(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  id v19;

  v19 = a2;
  v9 = a3;
  v10 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(_QWORD, _QWORD, id))(v10 + 16))(*(_QWORD *)(a1 + 40), 0, v9);
  }
  else
  {
    objc_msgSend_imageEmbedding(v19, v5, v6, v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_embeddingRevision(*(void **)(*(_QWORD *)(a1 + 32) + 24), v12, v13, v14, v15);
    objc_msgSend_embeddingWithBuffer_type_revision_(CSUCLIPV3Embedding, v17, (uint64_t)v11, 1, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v10 + 16))(v10, v18, 0);

  }
}

void sub_23A0015A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A0015C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A0015E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A001684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23A00169C(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  id v24;

  v24 = a2;
  v9 = a3;
  v10 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(_QWORD, _QWORD, id))(v10 + 16))(*(_QWORD *)(a1 + 40), 0, v9);
  }
  else
  {
    objc_msgSend_clipTextEmbedding(v24, v5, v6, v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_textEmbeddingType(*(void **)(*(_QWORD *)(a1 + 32) + 24), v12, v13, v14, v15);
    v21 = objc_msgSend_embeddingRevision(*(void **)(*(_QWORD *)(a1 + 32) + 24), v17, v18, v19, v20);
    objc_msgSend_embeddingWithBuffer_type_revision_(CSUCLIPV3Embedding, v22, (uint64_t)v11, v16, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v10 + 16))(v10, v23, 0);

  }
}

void sub_23A001778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A001798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A0017B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A001944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_23A001984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A001998(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int128 v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  objc_msgSend_buffer(*(void **)(a1 + 32), a2, a3, a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = sub_23A001A38;
  v12[3] = &unk_250B0E248;
  v14 = a2;
  v15 = a3;
  v16 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 40);
  objc_msgSend_accessDataUsingBlock_(v8, v9, (uint64_t)v12, v10, v11);

}

void sub_23A001A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A001A38(uint64_t a1, float *__B, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_QWORD *)(a1 + 56) != a3)
  {
    if (!*(_QWORD *)(a1 + 64))
      return;
    objc_msgSend_errorWithCode_message_(CSUError, (const char *)__B, 8, (uint64_t)CFSTR("Embedding buffers have incompatible sizes"), a5);
    goto LABEL_7;
  }
  if ((a3 & 3) == 0)
  {
    vDSP_dotpr(*(const float **)(a1 + 48), 1, __B, 1, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a3 >> 2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend_errorWithCode_message_(CSUError, (const char *)__B, 8, (uint64_t)CFSTR("Invalid buffer length for float data"), a5);
LABEL_7:
    **(_QWORD **)(a1 + 64) = (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_23A0023F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;

  sub_23A002600((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_23A002580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_23A002600(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_23A002834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_23A09DA88((void **)(v1 + 24), v1);
  _Unwind_Resume(exception_object);
}

void sub_23A002974(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A002C40(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void ***)(a1 + 8);
      v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_23A002D7C(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_23A002E80((void **)a1, *(void ***)a2, *(void ***)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(void ***)(a1 + 8);
      v5 = *(void **)a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_239FF559C((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_23A002E80(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_23A0009DC(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_23A000918(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_23A0009DC(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_23A000918(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_239FF1F64(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_239FEBE68();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_239FF1F64(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

_QWORD *sub_23A003224(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239FF4830(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    v26 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23A003524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A003538((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A003538(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_23A003584(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A003594(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A0035C4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_23A0035D4(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250B0D890;
  v4 = (uint64_t)(a1 + 3);
  v5 = a3[1];
  v12 = *a3;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_23A0036EC(v4, a2, &v12);
  v8 = v13;
  if (!v13)
    return a1;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_23A003680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
    sub_23A09D7AC(a10);
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void sub_23A0036A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A0036B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A0036E0(uint64_t a1)
{
  return sub_23A004F54((_QWORD *)(a1 + 24));
}

uint64_t sub_23A0036EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_23A003868(a1, (__int128 *)a2, &v20);
  v8 = v21;
  if (!v21)
    goto LABEL_8;
  v9 = (unint64_t *)&v21->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_8:
    v11 = *(_DWORD *)(a2 + 80);
    v12 = *(_DWORD *)(a2 + 88);
    v13 = *(_QWORD *)(a1 + 152);
    v14 = *(std::__shared_weak_count **)(a1 + 160);
    if (v14)
      goto LABEL_9;
LABEL_19:
    *(_DWORD *)(a1 + 168) = v11;
    *(_DWORD *)(a1 + 172) = v12;
    *(_QWORD *)(a1 + 176) = v13;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = *(_DWORD *)(a2 + 80);
  v12 = *(_DWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 152);
  v14 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v14)
    goto LABEL_19;
LABEL_9:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  *(_DWORD *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 172) = v12;
  *(_QWORD *)(a1 + 176) = v13;
  *(_QWORD *)(a1 + 184) = v14;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return a1;
}

void sub_23A003854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FF38A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A003868(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *i;
  __int128 v16;
  void **v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unsigned int v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  unsigned int v34;
  _DWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *p_shared_owners;
  NSObject *v52;
  _QWORD *v53;
  unint64_t *v54;
  _QWORD *v56;
  _QWORD **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61;
  uint64_t v62;
  void *__p[2];
  _QWORD *v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t *v67;
  uint64_t v68;

  v6 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v6;
  *(_BYTE *)(a1 + 24) = 0;
  v7 = a1 + 24;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    sub_239FF559C((char *)v7, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_QWORD *)(a1 + 56) = *((id *)a2 + 7);
  *(_OWORD *)(a1 + 64) = a2[4];
  v8 = *((_DWORD *)a2 + 22);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_DWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  v56 = (_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 128) = *a3;
  v9 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 96) = &off_250B0D718;
  v10 = (void **)(a1 + 96);
  v11 = a3[1];
  *(_QWORD *)(a1 + 136) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v67 = 0;
  v68 = 0;
  v66 = (unsigned int *)&v67;
  if (*((_BYTE *)a2 + 48))
  {
    v14 = (__int128 *)*((_QWORD *)a2 + 3);
    for (i = (__int128 *)*((_QWORD *)a2 + 4); v14 != i; v14 = (__int128 *)((char *)v14 + 24))
    {
      while (1)
      {
        if (*((char *)v14 + 23) < 0)
        {
          sub_239FF1F64(__p, *(void **)v14, *((_QWORD *)v14 + 1));
        }
        else
        {
          v16 = *v14;
          v64 = (_QWORD *)*((_QWORD *)v14 + 2);
          *(_OWORD *)__p = v16;
        }
        if ((*(unsigned int (**)(_QWORD, void **))(*(_QWORD *)*v9 + 88))(*v9, __p))
        {
          if (SHIBYTE(v64) >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          if (SHIBYTE(v64) >= 0)
            v18 = (void *)HIBYTE(v64);
          else
            v18 = __p[1];
          v19 = (*(uint64_t (**)(_QWORD, void **, void *))(*(_QWORD *)*v9 + 32))(*v9, v17, v18);
          v20 = v19;
          v21 = v67;
          v22 = &v67;
          v23 = &v67;
          if (v67)
          {
            while (1)
            {
              while (1)
              {
                v23 = (uint64_t **)v21;
                v24 = *((_DWORD *)v21 + 7);
                if (v19 >= v24)
                  break;
                v21 = *v23;
                v22 = v23;
                if (!*v23)
                  goto LABEL_29;
              }
              if (v24 >= v19)
                break;
              v21 = v23[1];
              if (!v21)
              {
                v22 = v23 + 1;
                goto LABEL_29;
              }
            }
          }
          else
          {
LABEL_29:
            v25 = operator new(0x20uLL);
            v25[7] = v20;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = v23;
            *v22 = (uint64_t *)v25;
            if (*(_QWORD *)v66)
            {
              v66 = *(unsigned int **)v66;
              v25 = *v22;
            }
            sub_23A004110(v67, (uint64_t *)v25);
            ++v68;
          }
        }
        if (SHIBYTE(v64) < 0)
          break;
        v14 = (__int128 *)((char *)v14 + 24);
        if (v14 == i)
          goto LABEL_32;
      }
      operator delete(__p[0]);
    }
  }
LABEL_32:
  v26 = (_QWORD *)*v9;
  if (*(char *)(*v9 + 79) < 0)
  {
    v27 = (_QWORD *)v26[7];
    v28 = v26[8];
  }
  else
  {
    v27 = v26 + 7;
    v28 = *(unsigned __int8 *)(*v9 + 79);
  }
  v29 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v26 + 32))(v26, v27, v28);
  v30 = v29;
  v31 = v67;
  v32 = &v67;
  v33 = &v67;
  if (v67)
  {
    while (1)
    {
      while (1)
      {
        v33 = (uint64_t **)v31;
        v34 = *((_DWORD *)v31 + 7);
        if (v29 >= v34)
          break;
        v31 = *v33;
        v32 = v33;
        if (!*v33)
          goto LABEL_42;
      }
      if (v34 >= v29)
        break;
      v31 = v33[1];
      if (!v31)
      {
        v32 = v33 + 1;
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_42:
    v35 = operator new(0x20uLL);
    v35[7] = v30;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = v33;
    *v32 = (uint64_t *)v35;
    if (*(_QWORD *)v66)
    {
      v66 = *(unsigned int **)v66;
      v35 = *v32;
    }
    sub_23A004110(v67, (uint64_t *)v35);
    ++v68;
  }
  v61 = 0;
  v62 = 0;
  v60 = &v61;
  sub_23A0042C4((uint64_t *)&v60, v66, (unsigned int *)&v67);
  v37 = v60;
  v36 = v61;
  __p[0] = &off_250B0D718;
  __p[1] = v60;
  v64 = v61;
  v65 = v62;
  if (!v62)
  {
    __p[1] = &v64;
    v37 = &v64;
    if (v10 == __p)
      goto LABEL_50;
    goto LABEL_49;
  }
  v61[2] = &v64;
  v60 = &v61;
  v61 = 0;
  v62 = 0;
  if (v10 != __p)
  {
LABEL_49:
    sub_23A0045C0(v56, v37, &v64);
    v36 = v64;
  }
LABEL_50:
  __p[0] = &off_250B0D718;
  sub_23A004580((uint64_t)&__p[1], v36);
  sub_23A004580((uint64_t)&v60, v61);
  v38 = objc_opt_new();
  v39 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v38;

  objc_msgSend_setDenyListRules_(*(void **)(a1 + 144), v40, *(_QWORD *)(a1 + 56), v41, v42, a1 + 152);
  v58 = 0;
  v59 = 0;
  v57 = &v58;
  sub_23A0042C4((uint64_t *)&v57, v66, (unsigned int *)&v67);
  v44 = v57;
  v43 = v58;
  __p[0] = &off_250B0D718;
  __p[1] = v57;
  v64 = v58;
  v65 = v59;
  if (!v59)
  {
    __p[1] = &v64;
    v44 = &v64;
    if (v10 == __p)
      goto LABEL_55;
    goto LABEL_54;
  }
  v58[2] = &v64;
  v57 = &v58;
  v58 = 0;
  v59 = 0;
  if (v10 != __p)
  {
LABEL_54:
    sub_23A0045C0(v56, v44, &v64);
    v43 = v64;
  }
LABEL_55:
  __p[0] = &off_250B0D718;
  sub_23A004580((uint64_t)&__p[1], v43);
  sub_23A004580((uint64_t)&v57, v58);
  v45 = *(_QWORD *)(a1 + 72);
  if (!v45)
  {
    v50 = operator new(0x48uLL);
    v50[1] = 0;
    v50[2] = 0;
    *v50 = &off_250B0BF98;
    sub_23A004950((uint64_t)(v50 + 3), (uint64_t)&v66, (int *)(a1 + 88));
    v47 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v50 + 3;
    *(_QWORD *)(a1 + 160) = v50;
    if (!v47)
      goto LABEL_72;
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    goto LABEL_70;
  }
  if (v45 == 1)
  {
    v46 = operator new(0x48uLL);
    v46[1] = 0;
    v46[2] = 0;
    *v46 = &off_250B0BF60;
    sub_23A004D10((uint64_t)(v46 + 3), (uint64_t)&v66, (int *)(a1 + 68));
    v47 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v46 + 3;
    *(_QWORD *)(a1 + 160) = v46;
    if (!v47)
      goto LABEL_72;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    goto LABEL_70;
  }
  sub_23A016E78();
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_239FE9000, v52, OS_LOG_TYPE_INFO, "Scoring method not specified, using GEOMETRICMEAN scorer by default", (uint8_t *)__p, 2u);
  }

  v53 = operator new(0x48uLL);
  v53[1] = 0;
  v53[2] = 0;
  *v53 = &off_250B0BF60;
  sub_23A004D10((uint64_t)(v53 + 3), (uint64_t)&v66, (int *)(a1 + 68));
  v47 = *(std::__shared_weak_count **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = v53 + 3;
  *(_QWORD *)(a1 + 160) = v53;
  if (v47)
  {
    v54 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v54);
    while (__stlxr(v49 - 1, v54));
LABEL_70:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_72:
  sub_23A004580((uint64_t)&v66, v67);
  return a1;
}

void sub_23A003E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v27;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  sub_23A004580((uint64_t)&a22, a23);
  sub_239FF38A8(a9);

  sub_239FF38A8(v24);
  *(_QWORD *)(v23 + 96) = &off_250B0D718;
  sub_23A004580(a10, *(_QWORD **)(v23 + 112));
  sub_23A002580(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_23A003F88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    v5 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:

    v5 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)(a1 + 96) = &off_250B0D718;
  sub_23A004580(a1 + 104, *(_QWORD **)(a1 + 112));

  if (*(_BYTE *)(a1 + 48))
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(a1 + 24);
      if (v9 != v8)
      {
        do
        {
          if (*(char *)(v9 - 1) < 0)
            operator delete(*(void **)(v9 - 24));
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v8;
      operator delete(v10);
    }
  }
  return a1;
}

uint64_t sub_23A0040AC(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v2 = *(_QWORD **)(result + 8);
  if (v2 != (_QWORD *)(result + 16))
  {
    v3 = *a2;
    do
    {
      *(_DWORD *)(v3 + 4 * *((unsigned int *)v2 + 7)) = 872415232;
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (_QWORD *)(result + 16));
  }
  return result;
}

uint64_t *sub_23A004110(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_23A0042C4(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_23A0043D0(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x20uLL);
        v11[7] = v6[7];
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_23A004110((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_23A0043D0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_23A004580(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_23A004580(a1, *a2);
    sub_23A004580(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_23A0045C0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *i;
  _QWORD *v24;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = (_QWORD *)*a1;
    v8 = (uint64_t **)(a1 + 1);
    v7 = a1[1];
    *a1 = a1 + 1;
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (_QWORD *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v24 = 0;
LABEL_47:
      sub_23A004580((uint64_t)a1, v24);
      goto LABEL_48;
    }
    v10 = (_QWORD *)v9[2];
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if ((_QWORD *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v35 = (_QWORD *)v10[1];
          if (!v35)
            break;
          do
          {
            v10 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      while (1)
      {
        v9 = v10;
        v14 = *((_DWORD *)v13 + 7);
        *((_DWORD *)v12 + 7) = v14;
        v15 = *v8;
        v16 = (_QWORD *)(v5 + 8);
        v17 = (_QWORD *)(v5 + 8);
        if (*v8)
          break;
LABEL_14:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v16;
        *v17 = v12;
        v18 = **(_QWORD **)v5;
        if (v18)
          goto LABEL_15;
LABEL_16:
        sub_23A004110(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (_QWORD *)v10[2];
          if (v10)
          {
            v21 = (_QWORD *)*v10;
            if ((_QWORD *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v22 = (_QWORD *)v10[1];
                if (!v22)
                  break;
                do
                {
                  v10 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
              {
                do
                {
                  v10 = v21;
                  v21 = (_QWORD *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v19 = (_QWORD *)v13[1];
        if (v19)
        {
          do
          {
            v4 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v20 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          v12 = v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          v16 = v15;
          if (v14 >= *((_DWORD *)v15 + 7))
            break;
          v15 = (uint64_t *)*v15;
          v17 = v16;
          if (!*v16)
            goto LABEL_14;
        }
        v15 = (uint64_t *)v15[1];
      }
      while (v15);
      v17 = v16 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v16;
      v16[1] = v12;
      v18 = **(_QWORD **)v5;
      if (!v18)
        goto LABEL_16;
LABEL_15:
      *(_QWORD *)v5 = v18;
      v12 = (_QWORD *)*v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_23A004580(v5, v9);
    if (v10)
    {
      for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
        v10 = i;
      a1 = (_QWORD *)v5;
      v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(v5 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x20uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 7);
      *((_DWORD *)v26 + 7) = v28;
      v29 = *v25;
      v30 = (uint64_t **)(v5 + 8);
      v31 = (uint64_t **)(v5 + 8);
      if (*v25)
        break;
LABEL_52:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)v5;
      if (v32)
        goto LABEL_53;
LABEL_54:
      sub_23A004110(*(uint64_t **)(v5 + 8), v27);
      ++*(_QWORD *)(v5 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v20 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v20);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (v28 >= *((_DWORD *)v29 + 7))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_52;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)v5;
    if (!v32)
      goto LABEL_54;
LABEL_53:
    *(_QWORD *)v5 = v32;
    v27 = *v31;
    goto LABEL_54;
  }
}

void sub_23A0048E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A0048F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A004928(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_250B0BC30;
  *(_QWORD *)(a1 + 32) = &off_250B0D718;
  sub_23A004580(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t sub_23A004950(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  unsigned int *v7;
  _QWORD *v8[2];
  _QWORD **v9;
  _QWORD *v10[2];

  v8[0] = 0;
  v8[1] = 0;
  v7 = (unsigned int *)v8;
  sub_23A0042C4((uint64_t *)&v7, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  v5 = *a3;
  v10[0] = 0;
  v10[1] = 0;
  v9 = v10;
  sub_23A0042C4((uint64_t *)&v9, v7, (unsigned int *)v8);
  sub_23A004A44((_QWORD *)a1, (uint64_t)&v9);
  sub_23A004580((uint64_t)&v9, v10[0]);
  *(_QWORD *)a1 = off_250B0BC90;
  *(_DWORD *)(a1 + 40) = v5;
  sub_23A004580((uint64_t)&v7, v8[0]);
  return a1;
}

void sub_23A004A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_23A004580((uint64_t)&a12, a13);
  sub_23A004580((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_23A004A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_23A004580((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A004A44(_QWORD *a1, uint64_t a2)
{
  uint64_t (***v3)();
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;
  _QWORD v13[2];

  a1[1] = &off_250B0D718;
  v3 = (uint64_t (***)())(a1 + 1);
  a1[3] = 0;
  *a1 = &unk_250B0BC30;
  a1[2] = a1 + 3;
  v4 = a1 + 2;
  a1[4] = 0;
  v9 = 0;
  v10 = 0;
  v8 = &v9;
  sub_23A0042C4((uint64_t *)&v8, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  v6 = v8;
  v5 = v9;
  v11 = &off_250B0D718;
  v12 = v8;
  v13[0] = v9;
  v13[1] = v10;
  if (v10)
  {
    v9[2] = v13;
    v8 = &v9;
    v9 = 0;
    v10 = 0;
    if (v3 == &v11)
      goto LABEL_6;
    goto LABEL_5;
  }
  v12 = v13;
  v6 = v13;
  if (v3 != &v11)
  {
LABEL_5:
    sub_23A0045C0(v4, v6, v13);
    v5 = (_QWORD *)v13[0];
  }
LABEL_6:
  v11 = &off_250B0D718;
  sub_23A004580((uint64_t)&v12, v5);
  sub_23A004580((uint64_t)&v8, v9);
  return a1;
}

void sub_23A004B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD **v19;

  sub_23A004580(v16, a15);
  sub_23A004580((uint64_t)&a10, a11);
  *v18 = v17;
  sub_23A004580(v15, *v19);
  _Unwind_Resume(a1);
}

float sub_23A004B90(uint64_t a1, float **a2)
{
  float *v2;
  float *v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;
  float v11;
  float v13;
  float v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  v4 = (char *)v3 - (char *)v2 - 4;
  v5 = *a2;
  if (v4 < 4)
    goto LABEL_13;
  v6 = (v4 >> 2) + 1;
  v5 = &v2[v6 & 0x7FFFFFFFFFFFFFFELL];
  v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
  v8 = *a2;
  do
  {
    LODWORD(v13) = *(_QWORD *)v8;
    v14 = logf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)));
    *(float *)&v9 = logf(v13);
    *((float *)&v9 + 1) = v14;
    *(_QWORD *)v8 = v9;
    v8 += 2;
    v7 -= 2;
  }
  while (v7);
  if (v6 != (v6 & 0x7FFFFFFFFFFFFFFELL))
  {
LABEL_13:
    do
    {
      *v5 = logf(*v5);
      ++v5;
    }
    while (v5 != v3);
  }
  v10 = 0;
  do
  {
    v11 = *v2++;
    v10 = (int)(float)(v11 + (float)v10);
  }
  while (v2 != v3);
  return (float)v10;
}

float sub_23A004C74(uint64_t a1, unint64_t a2, float a3)
{
  float v3;

  v3 = a3 / powf((float)a2, *(float *)(a1 + 40));
  return expf(v3);
}

float sub_23A004CA0(float a1, float a2)
{
  return a1 + a2;
}

void sub_23A004CA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A004CB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A004CE8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_250B0BC30;
  *(_QWORD *)(a1 + 32) = &off_250B0D718;
  sub_23A004580(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t sub_23A004D10(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  unsigned int *v7;
  _QWORD *v8[2];
  _QWORD **v9;
  _QWORD *v10[2];

  v8[0] = 0;
  v8[1] = 0;
  v7 = (unsigned int *)v8;
  sub_23A0042C4((uint64_t *)&v7, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  v5 = *a3;
  v10[0] = 0;
  v10[1] = 0;
  v9 = v10;
  sub_23A0042C4((uint64_t *)&v9, v7, (unsigned int *)v8);
  sub_23A004A44((_QWORD *)a1, (uint64_t)&v9);
  sub_23A004580((uint64_t)&v9, v10[0]);
  *(_QWORD *)a1 = off_250B0BC60;
  *(_DWORD *)(a1 + 40) = v5;
  sub_23A004580((uint64_t)&v7, v8[0]);
  return a1;
}

void sub_23A004DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_23A004580((uint64_t)&a12, a13);
  sub_23A004580((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_23A004DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_23A004580((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

float sub_23A004E08(uint64_t a1, float **a2)
{
  float *v2;
  float *v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;
  float v11;
  float v13;
  float v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  v4 = (char *)v3 - (char *)v2 - 4;
  v5 = *a2;
  if (v4 < 4)
    goto LABEL_13;
  v6 = (v4 >> 2) + 1;
  v5 = &v2[v6 & 0x7FFFFFFFFFFFFFFELL];
  v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
  v8 = *a2;
  do
  {
    LODWORD(v13) = *(_QWORD *)v8;
    v14 = logf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)));
    *(float *)&v9 = logf(v13);
    *((float *)&v9 + 1) = v14;
    *(_QWORD *)v8 = v9;
    v8 += 2;
    v7 -= 2;
  }
  while (v7);
  if (v6 != (v6 & 0x7FFFFFFFFFFFFFFELL))
  {
LABEL_13:
    do
    {
      *v5 = logf(*v5);
      ++v5;
    }
    while (v5 != v3);
  }
  v10 = 0;
  do
  {
    v11 = *v2++;
    v10 = (int)(float)(v11 + (float)v10);
  }
  while (v2 != v3);
  return (float)v10;
}

float sub_23A004EEC(uint64_t a1, unint64_t a2, float a3)
{
  long double v5;
  long double v6;

  v5 = pow(2.71828183, a3);
  v6 = pow((double)a2, *(float *)(a1 + 40));
  return pow(v5, 1.0 / v6);
}

float sub_23A004F4C(float a1, float a2)
{
  return a1 + a2;
}

uint64_t sub_23A004F54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = a1[24];
  if (v2)
  {
    v3 = a1[25];
    v4 = (void *)a1[24];
    if (v3 == v2)
    {
LABEL_14:
      a1[25] = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = (void *)a1[24];
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
LABEL_15:
  v9 = (std::__shared_weak_count *)a1[23];
  if (!v9)
    return sub_23A003F88((uint64_t)a1);
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return sub_23A003F88((uint64_t)a1);
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return sub_23A003F88((uint64_t)a1);
}

void sub_23A005288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A0052FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A005314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A005324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0054EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A005528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A005730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A005784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0057A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A005AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A005C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A005C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A006340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23A0064D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0067A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_23A006A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A006A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A006B84()
{
  __break(1u);
  JUMPOUT(0x23A006B9CLL);
}

void sub_23A006BAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_23A00702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v26;

  v23 = v21;

  if (a15 < 0)
    operator delete(__p);

  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v26, v19);
    __cxa_end_catch();
    JUMPOUT(0x23A006F88);
  }
  if (!a19)
    sub_239FF19E8();
  (*(void (**)(uint64_t *))(*a19 + 48))(a19);
  if (a19 == &a16)
  {
    (*(void (**)(void))(a16 + 32))();
    _Unwind_Resume(a1);
  }
  if (a19)
  {
    (*(void (**)(void))(*a19 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A007148(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_23A007278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_23A0073A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A0073BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0073D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0073E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0073F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A007414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0077D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A00902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;

  sub_239FFE328(&a63);
  sub_239FF087C((void **)(v67 - 144));

  _Unwind_Resume(a1);
}

uint64_t sub_23A0095B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  _QWORD v7[7];

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_23A00960C;
  v7[3] = &unk_250B0E290;
  v5 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v7[5] = a2;
  v7[6] = a3;
  return objc_msgSend_getMutableBytesWithHandler_(v5, a2, (uint64_t)v7, a4, a5);
}

void *sub_23A00960C(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a2 + *(_QWORD *)(a1 + 32)), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_23A0096B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A0096D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A0096EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A009A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_23A009B40(void **a1, uint64_t *a2)
{
  id *v3;
  id *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  id *v18;
  char *v19;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double *v26;
  const double *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  float64x2x2_t v32;

  v4 = (id *)*a1;
  v3 = (id *)a1[1];
  v5 = (char *)v3 - (_BYTE *)*a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_239FEBE68();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239FF1A44();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * (v5 >> 4)];
  v12 = *a2;
  v13 = a2[1];
  v14 = &v10[v9];
  a2[1] = 0;
  *(_QWORD *)v11 = v12;
  *((_QWORD *)v11 + 1) = v13;
  v15 = v11 + 16;
  v16 = (char *)((char *)v3 - (char *)v4);
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v14;
    if (!v3)
      return v15;
    goto LABEL_32;
  }
  v17 = v16 - 16;
  if ((unint64_t)(v16 - 16) < 0x110)
  {
    v18 = v3;
LABEL_27:
    v25 = v11;
    do
    {
      v29 = (uint64_t)*(v18 - 2);
      v18 -= 2;
      *((_QWORD *)v25 - 2) = v29;
      v25 -= 16;
      v30 = v18[1];
      v18[1] = 0;
      *((_QWORD *)v25 + 1) = v30;
    }
    while (v18 != v4);
    goto LABEL_29;
  }
  v19 = (char *)v3 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0);
  v21 = v19 - 8 < v11 && &v10[v5 - 8 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0)] < (char *)v3;
  v18 = v3;
  if (v19 - 16 < &v10[v5 - 8] && &v10[v5 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v3 - 8)
    goto LABEL_27;
  if (v21)
    goto LABEL_27;
  v23 = ((unint64_t)v17 >> 4) + 1;
  v24 = 16 * (v23 & 0x1FFFFFFFFFFFFFFELL);
  v25 = &v11[-v24];
  v18 = &v3[v24 / 0xFFFFFFFFFFFFFFF8];
  v26 = (double *)(v11 - 32);
  v27 = (const double *)(v3 - 4);
  v28 = v23 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v32 = vld2q_f64(v27);
    v27[3] = 0.0;
    v27[1] = 0.0;
    vst2q_f64(v26, v32);
    v27 -= 4;
    v26 -= 4;
    v28 -= 2;
  }
  while (v28);
  v11 = v25;
  if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_27;
LABEL_29:
  *a1 = v25;
  a1[1] = v15;
  a1[2] = v14;
  do
  {

    v3 -= 2;
  }
  while (v3 != v4);
  v3 = v4;
  if (v4)
LABEL_32:
    operator delete(v3);
  return v15;
}

void sub_23A009D10()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A009D24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BD18;
  result[1] = v3;
  return result;
}

uint64_t sub_23A009D58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BD18;
  a2[1] = v2;
  return result;
}

void sub_23A009D74(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLLoadResources", "", v5, 2u);
  }

}

uint64_t sub_23A009DF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z36-[CSUTextEncoderE5ML loadResources:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z36-[CSUTextEncoderE5ML loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36-[CSUTextEncoderE5ML loadResources:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36-[CSUTextEncoderE5ML loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A009E64()
{
  return &unk_250B0BBC0;
}

void sub_23A009E74()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A009E88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BD70;
  result[1] = v3;
  return result;
}

uint64_t sub_23A009EBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BD70;
  a2[1] = v2;
  return result;
}

void sub_23A009ED8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLReLoadResources", "", v5, 2u);
  }

}

uint64_t sub_23A009F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A009FC8()
{
  return &unk_250B0BBD0;
}

void sub_23A009FD4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_23A00A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  void *v19;
  void *v20;

  __cxa_free_exception(v20);

  _Unwind_Resume(a1);
}

_QWORD *sub_23A00A4A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B83FC00](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](a1 + 52);
  return a1;
}

void sub_23A00A7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;

  std::istream::~istream();
  MEMORY[0x23B83FDF8](a12);
  *a10 = &off_250B0DCE8;
  v23 = (std::__shared_weak_count *)a10[6];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (void *)a10[2];
  if (v26)
  {
    a10[3] = v26;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

void sub_23A00A95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_23A00A974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  v4 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v16[0] = MEMORY[0x24BEDB840] + 64;
  v14 = v5;
  *(_QWORD *)&v15[*(_QWORD *)(v5 - 24) - 8] = v6;
  v7 = (std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8];
  std::ios_base::init(v7, v15);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v14 = v2 + 24;
  v16[0] = v3;
  MEMORY[0x23B83FBF4](v15);
  v8 = objc_retainAutorelease(*(id *)(a1 + 32));
  objc_msgSend_UTF8String(v8, v9, v10, v11, v12);
  std::ofstream::open();
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8], *(_DWORD *)&v15[*(_QWORD *)(v14 - 24) + 24] | 4);
  v14 = *v4;
  *(_QWORD *)&v15[*(_QWORD *)(v14 - 24) - 8] = v4[3];
  MEMORY[0x23B83FC00](v15);
  std::ostream::~ostream();
  return MEMORY[0x23B83FDF8](v16);
}

void sub_23A00AAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](v1);
  _Unwind_Resume(a1);
}

void sub_23A00ACA0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](v2);

  _Unwind_Resume(a1);
}

uint64_t sub_23A00ACE4(void *a1)
{
  id v1;
  uint64_t v3;

  v1 = a1;
  if (!v1)
    goto LABEL_8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {

    return 10007;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {

    return 5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {

    return 0;
  }
  else
  {
LABEL_8:
    if (qword_256942070 != -1)
      dispatch_once(&qword_256942070, &unk_250B0DEE0);
    if (byte_256942068)
      v3 = 10007;
    else
      v3 = 5;

    return v3;
  }
}

void sub_23A00ADEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A00ADFC()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_256942068 = result;
  return result;
}

_QWORD *sub_23A00AE20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x23B83FC84](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_23A00AF84(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23B83FC90](v13);
  return a1;
}

void sub_23A00AF28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x23B83FC90](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23A00AF08);
}

void sub_23A00AF70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23A00AF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_239FEBDE0();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_23A00B10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char **sub_23A00B128(char **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = (char *)operator new(8uLL);
  *(_QWORD *)v10 = a2;
  a1[1] = v10 + 8;
  a1[2] = v10 + 8;
  *a1 = v10;
  v11 = (char *)operator new(0x10uLL);
  v12 = v11 + 16;
  *(_QWORD *)v11 = *(_QWORD *)v10;
  *((_QWORD *)v11 + 1) = a3;
  *a1 = v11;
  a1[1] = v11 + 16;
  a1[2] = v11 + 16;
  operator delete(v10);
  v13 = (unint64_t)a1[2];
  a1[1] = v11 + 16;
  if ((unint64_t)(v11 + 16) < v13)
  {
    *((_QWORD *)v11 + 2) = a4;
    v14 = v11 + 24;
    goto LABEL_21;
  }
  v15 = *a1;
  v16 = (v12 - *a1) >> 3;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61)
    goto LABEL_43;
  v18 = v13 - (_QWORD)v15;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      goto LABEL_44;
    v20 = (char *)operator new(8 * v19);
    v21 = &v20[8 * v16];
    v13 = (unint64_t)&v20[8 * v19];
    *(_QWORD *)v21 = a4;
    v14 = v21 + 8;
    if (v12 == v15)
      goto LABEL_19;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (char *)(8 * v16);
  v13 = 0;
  *(_QWORD *)(8 * v16) = a4;
  v14 = (char *)(8 * v16 + 8);
  if (v12 != v15)
  {
LABEL_14:
    v22 = v11 - v15 + 8;
    if (v22 < 0x18)
      goto LABEL_47;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v24;
    v21 -= v24;
    v25 = &v20[8 * v16 - 16];
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v11;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v11 - 1);
      *(_OWORD *)v25 = v27;
      v25 -= 32;
      v11 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        v28 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v21 - 1) = v28;
        v21 -= 8;
      }
      while (v12 != v15);
    }
  }
LABEL_19:
  *a1 = v21;
  a1[1] = v14;
  a1[2] = (char *)v13;
  if (v15)
  {
    operator delete(v15);
    v13 = (unint64_t)a1[2];
  }
LABEL_21:
  a1[1] = v14;
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = a5;
    v29 = (uint64_t)(v14 + 8);
    goto LABEL_42;
  }
  v30 = *a1;
  v31 = (v14 - *a1) >> 3;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61)
LABEL_43:
    sub_239FEBE68();
  v33 = v13 - (_QWORD)v30;
  if (v33 >> 2 > v32)
    v32 = v33 >> 2;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
    v34 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (!v34)
  {
    v35 = 0;
    v36 = (char *)(8 * v31);
    v37 = 0;
    *(_QWORD *)(8 * v31) = a5;
    v29 = 8 * v31 + 8;
    v38 = v14 - v30;
    if (v14 == v30)
      goto LABEL_40;
    goto LABEL_34;
  }
  if (v34 >> 61)
LABEL_44:
    sub_239FF1A44();
  v35 = (char *)operator new(8 * v34);
  v36 = &v35[8 * v31];
  v37 = &v35[8 * v34];
  *(_QWORD *)v36 = a5;
  v29 = (uint64_t)(v36 + 8);
  v38 = v14 - v30;
  if (v14 == v30)
    goto LABEL_40;
LABEL_34:
  v39 = v38 - 8;
  if (v39 < 0x18)
  {
    v40 = v14;
    do
    {
LABEL_39:
      v47 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *((_QWORD *)v36 - 1) = v47;
      v36 -= 8;
    }
    while (v40 != v30);
    goto LABEL_40;
  }
  v41 = (v39 >> 3) + 1;
  v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
  v40 = &v14[-v42];
  v36 -= v42;
  v43 = &v35[8 * v31 - 16];
  v44 = v14 - 16;
  v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v46 = *(_OWORD *)v44;
    *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
    *(_OWORD *)v43 = v46;
    v43 -= 32;
    v44 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_39;
LABEL_40:
  *a1 = v36;
  a1[1] = (char *)v29;
  a1[2] = v37;
  if (v30)
    operator delete(v30);
LABEL_42:
  a1[1] = (char *)v29;
  return a1;
}

void sub_23A00B410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A00B4F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A00B514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00B52C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00B7D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A00B8B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00B8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00B93C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00B950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00BA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00BA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00BABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00BAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00BB28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00BE18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_23A00BED4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_23A00BEE4(uint64_t a1)
{

}

void sub_23A00BEEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  if (v5)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_23A00C118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_23A00C170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00C188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00C19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00C1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00C1BC(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id obj;

  v6 = (void *)a1[4];
  v7 = a1[5];
  v8 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v8 + 40);
  objc_msgSend_executeFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v8 + 40), obj);
  v10 = *(_QWORD *)(a1[6] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

void sub_23A00C370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_23A00C3B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id obj;

  objc_msgSend_setMergePolicy_(*(void **)(a1 + 32), a2, *MEMORY[0x24BDBB478], a4, a5);
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v7 + 40);
  v11 = objc_msgSend_save_(v6, v8, (uint64_t)&obj, v9, v10);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v11;
}

void sub_23A00C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,id a61)
{
  void *v61;
  void *v62;

  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a56, 8);

  _Unwind_Resume(a1);
}

void sub_23A00C8A0(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id obj;

  v6 = (void *)a1[4];
  v7 = a1[5];
  v8 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v8 + 40);
  objc_msgSend_executeFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v8 + 40), obj);
  v10 = *(_QWORD *)(a1[6] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

void sub_23A00C914(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id obj;

  v5 = (void *)a1[4];
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(void **)(v6 + 40);
  v8 = *(_QWORD *)(a1[6] + 8);
  v9 = *(id *)(v8 + 40);
  obj = v7;
  objc_msgSend_convertToEntity_error_(v5, a2, (uint64_t)&obj, (uint64_t)&v9, a5);
  objc_storeStrong((id *)(v6 + 40), obj);
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_23A00CAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A00CACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00CAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00CAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00CB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00CB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_23A00CD04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00CD14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00CD24(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id obj;

  v5 = (void *)a1[4];
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(void **)(v6 + 40);
  v8 = *(_QWORD *)(a1[6] + 8);
  v9 = *(id *)(v8 + 40);
  obj = v7;
  objc_msgSend_convertToEntity_error_(v5, a2, (uint64_t)&obj, (uint64_t)&v9, a5);
  objc_storeStrong((id *)(v6 + 40), obj);
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_23A00CE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23A00CEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00CED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A00CEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_deleteObject_, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_23A00CFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00D00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_23A00D1F0(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Request_error;
  id obj;

  v6 = (void *)a1[4];
  v7 = a1[5];
  v8 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v8 + 40);
  Request_error = objc_msgSend_countForFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  objc_storeStrong((id *)(v8 + 40), obj);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = Request_error;
}

void sub_23A00D300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00D5C0()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = (void *)MEMORY[0x23B840290]();
  objc_msgSend_dictionary(MEMORY[0x24BDBCED8], v1, v2, v3, v4);
  qword_2542CF808 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void sub_23A00D648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00D8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00D968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00D9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23A00DDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00DDC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00DDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00E328()
{
  __break(1u);
  JUMPOUT(0x23A00E3D8);
}

void sub_23A00E434(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A00E450(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_23A00E460(uint64_t a1)
{

}

void sub_23A00E468(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;

  v80 = a2;
  v8 = a3;
  if (!v80 || v8)
  {
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v5, 0, v6, v7);
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v79 = v8;
    v69 = *(void **)(v78 + 40);
    *(_QWORD *)(v78 + 40) = v79;
  }
  else
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);

    objc_msgSend_textEmbedding(v80, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCSUTextEmbedding_(v22, v23, (uint64_t)v17, v24, v25);

    objc_msgSend_additionalLayers(v80, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v31, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAdditionalLayers_(v35, v36, (uint64_t)v30, v37, v38);

    objc_msgSend_tokenSegments(v80, v39, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v44, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTokenSegments_(v48, v49, (uint64_t)v43, v50, v51);

    v56 = objc_msgSend_truncatedInput(v80, v52, v53, v54, v55);
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v57, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTruncatedInput_(v61, v62, v56, v63, v64);

    objc_msgSend_processedInput(v80, v65, v66, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v70, v71, v72, v73);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setProcessedInput_(v74, v75, (uint64_t)v69, v76, v77);

  }
}

void sub_23A00E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A00E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A00E644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A00E7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_23A00E7F0(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;

  v80 = a2;
  v8 = a3;
  if (v80)
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);

    objc_msgSend_textEmbedding(v80, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCSUTextEmbedding_(v22, v23, (uint64_t)v17, v24, v25);

    objc_msgSend_additionalLayers(v80, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v31, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAdditionalLayers_(v35, v36, (uint64_t)v30, v37, v38);

    objc_msgSend_tokenSegments(v80, v39, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v44, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTokenSegments_(v48, v49, (uint64_t)v43, v50, v51);

    v56 = objc_msgSend_truncatedInput(v80, v52, v53, v54, v55);
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v57, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTruncatedInput_(v61, v62, v56, v63, v64);

    objc_msgSend_processedInput(v80, v65, v66, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v70, v71, v72, v73);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setProcessedInput_(v74, v75, (uint64_t)v69, v76, v77);

  }
  else
  {
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v5, 0, v6, v7);
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v79 = v8;
    v69 = *(void **)(v78 + 40);
    *(_QWORD *)(v78 + 40) = v79;
  }

}

void sub_23A00E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A00E9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A00E9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A00EC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00ED4C()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A00ED60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BCC0;
  result[1] = v3;
  return result;
}

uint64_t sub_23A00ED94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BCC0;
  a2[1] = v2;
  return result;
}

void sub_23A00EDB0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLRunOnInput", "", v5, 2u);
  }

}

uint64_t sub_23A00EE34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z35-[CSUTextEncoder runOnInput:error:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z35-[CSUTextEncoder runOnInput:error:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35-[CSUTextEncoder runOnInput:error:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35-[CSUTextEncoder runOnInput:error:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A00EEA0()
{
  return &unk_250B0BBB0;
}

void sub_23A00EEAC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_23A00F038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00F2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A00F46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A00F488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00F4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A00F4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00F4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00F4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00F50C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00F520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00F530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00F548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00F55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00F56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00F7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A00F90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00FAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00FAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A00FAD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00FAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00FBC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00FBD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00FBE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00FBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A00FC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A00FFC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A010128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A010174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0102E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A010334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01049C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A010524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0105C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A01076C(_Unwind_Exception *a1, int a2)
{
  void *v2;
  _QWORD *v3;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  sub_239FF1A6C((uint64_t)&v9);

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v3);
  __cxa_end_catch();
  return v7;
}

uint64_t sub_23A0108E0(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;

  MEMORY[0x23B83FE88](v3, 0x20C4093837F09);
  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_23A010E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  void *v61;

  sub_239FF5234((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0110D8(uint64_t result, char *a2)
{
  int v2;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if ((_DWORD)result)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v10, a2);
    sub_239FEEC54("PixelBufferTransfer operation [", &v10, &v11);
    sub_239FEED88("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_23A0111C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_23A0112B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR(" %@ "), a4, a5, a1);
}

void sub_23A011440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A011584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A01159C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  const double *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  float64x2x2_t v29;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_239FEBE68();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = v4 - v2;
    v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_24:
        operator delete(v2);
    }
    else
    {
      v10 = v8 - 16;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
      v12 = v4;
      if ((unint64_t)(v8 - 16) < 0x110)
        goto LABEL_30;
      v13 = &v4[-(v10 & 0xFFFFFFFFFFFFFFF0)];
      v14 = (unint64_t)(v13 - 16);
      v15 = v8 & 0xFFFFFFFFFFFFFFF0;
      v16 = (unint64_t)&v6[v15 - (v10 & 0xFFFFFFFFFFFFFFF0) - 16];
      v15 -= 8;
      v17 = &v6[v15];
      v18 = (unint64_t)(v13 - 8);
      v19 = &v6[v15 - (v10 & 0xFFFFFFFFFFFFFFF0)] >= v4 || v18 >= (unint64_t)v9;
      v20 = !v19;
      v21 = v16 >= (unint64_t)(v4 - 8) || v14 >= (unint64_t)v17;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
      v12 = v4;
      if (!v21)
        goto LABEL_30;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
      v12 = v4;
      if (v20)
        goto LABEL_30;
      v22 = (v10 >> 4) + 1;
      v23 = 16 * (v22 & 0x1FFFFFFFFFFFFFFELL);
      v11 = &v9[-v23];
      v12 = &v4[-v23];
      v24 = (double *)(v9 - 32);
      v25 = (const double *)(v4 - 32);
      v26 = v22 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v29 = vld2q_f64(v25);
        v25[2] = 0.0;
        *v25 = 0.0;
        v25 -= 4;
        vst2q_f64(v24, v29);
        v24 -= 4;
        v26 -= 2;
      }
      while (v26);
      if (v22 != (v22 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_30:
        do
        {
          v27 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v11 - 2) = v27;
          v11 -= 16;
          *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
        }
        while (v12 != v2);
      }
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
      do
      {
        v28 = (void *)*((_QWORD *)v4 - 2);
        v4 -= 16;

      }
      while (v4 != v2);
      if (v2)
        goto LABEL_24;
    }
  }
}

void sub_23A01195C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A011970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A011AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011B74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A011C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A012704()
{
  void *v0;

  JUMPOUT(0x23A01275CLL);
}

void sub_23A01270C()
{
  __cxa_end_catch();
  JUMPOUT(0x23A012714);
}

void sub_23A012720(void *a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(v2);
}

void sub_23A012730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  JUMPOUT(0x23A0128E8);
}

void sub_23A012738()
{
  void *v0;

  JUMPOUT(0x23A0128DCLL);
}

void sub_23A01274C()
{
  void *v0;
  void *v1;

  JUMPOUT(0x23A0128E8);
}

void sub_23A012764()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  JUMPOUT(0x23A012948);
}

void sub_23A012770()
{
  JUMPOUT(0x23A0128F0);
}

void sub_23A012778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;

  JUMPOUT(0x23A0128F8);
}

void sub_23A01278C()
{
  JUMPOUT(0x23A0128E0);
}

void sub_23A012794()
{
  JUMPOUT(0x23A0128F8);
}

void sub_23A01279C()
{
  sub_23A0127F0();
}

void sub_23A0127B0()
{
  void *v0;

  JUMPOUT(0x23A012900);
}

void sub_23A0127C4()
{
  void *v0;

  JUMPOUT(0x23A0128DCLL);
}

void sub_23A0127D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  JUMPOUT(0x23A01292CLL);
}

void sub_23A0127F0()
{
  JUMPOUT(0x23A01287CLL);
}

void sub_23A0127F8()
{
  JUMPOUT(0x23A012860);
}

void sub_23A012804()
{
  JUMPOUT(0x23A012864);
}

void sub_23A01280C()
{
  JUMPOUT(0x23A01286CLL);
}

void sub_23A012814()
{
  JUMPOUT(0x23A012874);
}

void sub_23A01281C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  JUMPOUT(0x23A0128F8);
}

void sub_23A012828()
{
  JUMPOUT(0x23A012900);
}

void sub_23A012830()
{
  JUMPOUT(0x23A012908);
}

void sub_23A012838()
{
  JUMPOUT(0x23A012910);
}

void sub_23A012840()
{
  JUMPOUT(0x23A012918);
}

void sub_23A012848()
{
  JUMPOUT(0x23A012930);
}

void sub_23A012854()
{
  void *v0;

  JUMPOUT(0x23A01285CLL);
}

void sub_23A012888()
{
  JUMPOUT(0x23A012930);
}

void sub_23A012890()
{
  JUMPOUT(0x23A012930);
}

void sub_23A01289C()
{
  JUMPOUT(0x23A012910);
}

void sub_23A0128A4()
{
  void *v0;

  JUMPOUT(0x23A0128DCLL);
}

void sub_23A0128AC()
{
  JUMPOUT(0x23A012934);
}

void sub_23A0128BC()
{
  void *v0;

  JUMPOUT(0x23A0128DCLL);
}

void sub_23A0128C4()
{
  void *v0;

  JUMPOUT(0x23A0128D8);
}

id sub_23A012950(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  if (objc_msgSend_hasPrefix_(v3, v4, (uint64_t)CFSTR("/"), v5, v6))
  {
    v10 = v3;
  }
  else
  {
    objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 32), v7, (uint64_t)v3, v8, v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_23A0129BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0129CC(_QWORD ***a1, void *a2)
{
  char *v3;
  uint64_t v4;
  char *v5;

  v3 = a2;
  if (**a1)
  {
    v5 = v3;
    objc_msgSend_errorWithCode_message_(CSUError, v3, 6, (uint64_t)v3, v4);
    ***a1 = (id)objc_claimAutoreleasedReturnValue();
    v3 = v5;
  }

}

void sub_23A012A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_23A012A48(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t started;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 24), v6, a2, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  started = objc_msgSend_startIndex(v9, v10, v11, v12, v13);

  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 24), v15, (uint64_t)v5, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_startIndex(v18, v19, v20, v21, v22);

  if (started >= v23)
    v24 = 0;
  else
    v24 = -1;
  if (started > v23)
    v25 = 1;
  else
    v25 = v24;

  return v25;
}

void sub_23A012AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A012AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A012AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A012B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A012B1C(uint64_t a1, void **a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 16))
  {

    *(_BYTE *)(a1 + 16) = 0;
  }
  result = sub_23A0131E4(a1, *a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_23A012BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A012C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A012CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A012CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23A012E9C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_23A012EE0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

_QWORD *sub_23A01300C(_QWORD *a1, id *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  const double *v34;
  uint64_t v35;
  float64x2x2_t v36;

  v4 = a1[1] - *a1;
  v5 = (v4 >> 4) + 1;
  if (v5 >> 60)
    sub_239FEBE68();
  v8 = a1[2] - *a1;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_239FF1A44();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v4 >> 4)];
  v12 = &v10[16 * v9];
  v13 = *a2;
  v14 = *a3;
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v14;
  v15 = v11 + 16;
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  v18 = &v16[-*a1];
  if (v16 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v16)
      return v15;
    goto LABEL_19;
  }
  v19 = v18 - 16;
  if ((unint64_t)(v18 - 16) < 0x110)
  {
    v20 = (char *)a1[1];
LABEL_14:
    v21 = v11;
    do
    {
      v22 = *((_QWORD *)v20 - 2);
      v20 -= 16;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v21 - 2) = v22;
      v21 -= 16;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v20 + 1);
    }
    while (v20 != v17);
    goto LABEL_16;
  }
  v25 = &v16[-((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0)];
  v26 = (unint64_t)(v25 - 16);
  v27 = (unint64_t)(v25 - 8);
  v29 = &v10[v4 - 8 - ((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0)] < v16 && v27 < (unint64_t)v11;
  v20 = (char *)a1[1];
  if (&v10[v4 - ((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0) - 16] < v16 - 8 && v26 < (unint64_t)&v10[v4 - 8])
    goto LABEL_14;
  if (v29)
    goto LABEL_14;
  v31 = ((unint64_t)v19 >> 4) + 1;
  v32 = 16 * (v31 & 0x1FFFFFFFFFFFFFFELL);
  v21 = &v11[-v32];
  v20 = &v16[-v32];
  v33 = (double *)(v11 - 32);
  v34 = (const double *)(v16 - 32);
  v35 = v31 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v36 = vld2q_f64(v34);
    v34[2] = 0.0;
    *v34 = 0.0;
    v34 -= 4;
    vst2q_f64(v33, v36);
    v33 -= 4;
    v35 -= 2;
  }
  while (v35);
  v11 = v21;
  if (v31 != (v31 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_14;
LABEL_16:
  *a1 = v21;
  a1[1] = v15;
  a1[2] = v12;
  do
  {
    v23 = (void *)*((_QWORD *)v16 - 2);
    v16 -= 16;

  }
  while (v16 != v17);
  v16 = v17;
  if (v17)
LABEL_19:
    operator delete(v16);
  return v15;
}

uint64_t sub_23A0131E4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error *exception;

  v3 = a2;
  *(_QWORD *)a1 = objc_msgSend_copy(v3, v4, v5, v6, v7);
  *(_QWORD *)(a1 + 8) = (unint64_t)objc_msgSend_length(v3, v8, v9, v10, v11) >> 1;
  if ((objc_msgSend_length(*(void **)a1, v12, v13, v14, v15) & 1) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Malformed taxonomy relation data stream, buffer size is not divisible by node identifier size");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }

  return a1;
}

void sub_23A013270(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

void sub_23A013290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0132A0(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_23A0132B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  std::string *v10;
  std::string v11;
  uint64_t v12;

  *(_BYTE *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(_BYTE *)(a1 + 55) = 4;
  *(_DWORD *)(a1 + 32) = 1047736124;
  *(_BYTE *)(a1 + 79) = 5;
  strcpy((char *)(a1 + 56), "<unk>");
  *(_QWORD *)a1 = off_250B0D6A8;
  v4 = a1 + 96;
  *(_BYTE *)(a1 + 36) = 0;
  sub_23A064574(a1 + 96);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sub_23A0648B8(v4, v6, v7, &v12);
  if (v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23A089EAC((uint64_t)&v12, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v11;
    else
      v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)v10);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23A089B98(&v12);
  return a1;
}

void sub_23A0133E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_23A089B98(&a15);
      sub_23A064678(v16);
      sub_23A01344C(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void sub_23A013438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A01344C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A01344C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250B0D5E8;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_23A0134C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = sub_23A0132B8(a1, a2) + 96;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *(_QWORD *)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  sub_23A065C90(v5, v7, v8, &v10);
  sub_23A089B98(&v10);
  return a1;
}

void sub_23A013524(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A013538(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A013538(uint64_t a1)
{
  *(_QWORD *)a1 = off_250B0D6A8;
  sub_23A064678(a1 + 96);
  *(_QWORD *)a1 = off_250B0D5E8;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_23A0135C4@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *result;
  unint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *exception;
  std::string *v14;
  std::string::size_type size;
  std::string v16;

  if (((uint64_t (*)(_QWORD **))(*a1)[10])(a1) <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::to_string(&v16, a2);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v16;
    else
      v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      size = v16.__r_.__value_.__l.__size_;
    sub_23A0147F0((uint64_t)exception, v14, size);
    __cxa_throw(exception, (struct type_info *)&unk_250B0C320, (void (*)(void *))sub_23A01373C);
  }
  result = (void *)sub_23A06D24C(a1 + 12, a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v8 = result;
  v9 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a3[1] = v9;
    a3[2] = v11 | 0x8000000000000000;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v7;
    if (!v7)
    {
      *(_BYTE *)a3 = 0;
      return result;
    }
  }
  result = memmove(a3, v8, v9);
  *((_BYTE *)a3 + v9) = 0;
  return result;
}

void sub_23A013700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_23A01373C(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_250B0D680;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

uint64_t sub_23A013788(uint64_t a1, char *__src, size_t __len)
{
  void **p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unsigned int *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  std::runtime_error *exception;
  std::string *v22;
  std::string v23;
  uint64_t v24;
  void *__p;
  _BYTE *v26;
  uint64_t v27;
  void **__dst;
  size_t v29;
  int64_t v30;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v29 = __len;
    v30 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v30) = __len;
    if (!__len)
    {
      LOBYTE(__dst) = 0;
      goto LABEL_18;
    }
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (*__src == 60 && __src[__len - 1] == 62)
  {
    if (v30 >= 0)
      v9 = (void **)&__dst;
    else
      v9 = __dst;
    if (v30 >= 0)
      v10 = HIBYTE(v30);
    else
      v10 = v29;
    v11 = sub_23A06D0D0((_QWORD **)(a1 + 96), (uint64_t)v9, v10);
    goto LABEL_36;
  }
LABEL_18:
  __p = 0;
  v26 = 0;
  v27 = 0;
  if (v30 >= 0)
    v12 = (void **)&__dst;
  else
    v12 = __dst;
  if (v30 >= 0)
    v13 = HIBYTE(v30);
  else
    v13 = v29;
  sub_23A067624(a1 + 96, (uint64_t)v12, v13, (char **)&__p, &v24);
  if (v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23A089EAC((uint64_t)&v24, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v23;
    else
      v22 = (std::string *)v23.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)v22);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23A089B98(&v24);
  v14 = (unsigned int *)__p;
  v15 = v26;
  if (v26 - (_BYTE *)__p == 8)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v16 = a1 + 8;
      v17 = *(unsigned __int8 *)(a1 + 31);
    }
    v18 = *(_DWORD *)__p;
    if (v18 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16, v17))
    {
      v19 = __p;
      v14 = (unsigned int *)((char *)__p + 4);
      goto LABEL_33;
    }
    v14 = (unsigned int *)__p;
    v15 = v26;
  }
  v19 = v14;
  if (v15 - (_BYTE *)v14 != 4)
  {
    v11 = sub_23A06D0D0((_QWORD **)(a1 + 96), (uint64_t)"<unk>", 5);
    v19 = __p;
    if (!__p)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_33:
  v11 = *v14;
LABEL_35:
  v26 = v19;
  operator delete(v19);
LABEL_36:
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return v11;
}

void sub_23A0139C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A013A54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void **v8;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v4)
  {
    v5 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(__p, a1, v5);
      v8 = __p;
      *((_DWORD *)sub_23A014EC0((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_23A0A31B0, (_OWORD **)&v8) + 14) = v5;
      if (v7 < 0)
        operator delete(__p[0]);
      v5 = (v5 + 1);
    }
    while (v4 != v5);
  }
}

void sub_23A013B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A014E60(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A013B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_23A014E60(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_23A014E60(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_23A013B70@<Q0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  __n128 result;
  uint64_t i;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  void **v15;
  _QWORD *v16;
  __n128 v17;
  void *v18;

  a2[1] = 0;
  v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v5)
  {
    for (i = 0; i != v5; i = (i + 1))
    {
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v17, a1, i);
      v8 = *v4;
      v9 = v4;
      v10 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v10 = v8;
            v11 = *((_DWORD *)v8 + 8);
            if (i >= v11)
              break;
            v8 = (uint64_t *)*v10;
            v9 = (uint64_t **)v10;
            if (!*v10)
              goto LABEL_11;
          }
          if (v11 >= i)
            break;
          v8 = (uint64_t *)v10[1];
          if (!v8)
          {
            v9 = (uint64_t **)(v10 + 1);
            goto LABEL_11;
          }
        }
        v16 = v10;
        v15 = (void **)(v10 + 5);
        if ((*((char *)v16 + 63) & 0x80000000) == 0)
          goto LABEL_3;
      }
      else
      {
LABEL_11:
        v12 = operator new(0x40uLL);
        v12[8] = i;
        *((_QWORD *)v12 + 6) = 0;
        *((_QWORD *)v12 + 7) = 0;
        *((_QWORD *)v12 + 5) = 0;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v10;
        *v9 = (uint64_t *)v12;
        v13 = (uint64_t *)**a2;
        v14 = (uint64_t *)v12;
        if (v13)
        {
          *a2 = v13;
          v14 = *v9;
        }
        sub_23A004110(a2[1], v14);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v15 = (void **)(v12 + 10);
        if ((*((char *)v12 + 63) & 0x80000000) == 0)
          goto LABEL_3;
      }
      operator delete(*v15);
LABEL_3:
      result = v17;
      *(__n128 *)v15 = v17;
      v15[2] = v18;
    }
  }
  return result;
}

void sub_23A013CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A015028(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A013CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_23A015028(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_23A015028(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_23A013D28(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  std::string *p_p;
  std::string::size_type size;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  std::runtime_error *v35;
  std::string *v36;
  std::logic_error *exception;
  std::string __p;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v8 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    v10 = *(const void **)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 31);
    v10 = (const void *)(a1 + 8);
  }
  v11 = *(unsigned __int8 *)(a2 + 23);
  v12 = (char)v11;
  v13 = *(_QWORD *)(a2 + 8);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  if (v11 >= v9)
  {
    v14 = v12 >= 0 ? (const void *)a2 : *(const void **)a2;
    if (!memcmp(v14, v10, v9))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_23A0140C0(exception, "Input text should not contain BOS token!");
      __cxa_throw(exception, (struct type_info *)off_250B0B300, MEMORY[0x24BEDAB88]);
    }
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  if (v12 < 0)
    sub_239FF1F64(&__p, *(void **)a2, v13);
  else
    __p = *(std::string *)a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_23A067624(a1 + 96, (uint64_t)p_p, size, &v40, &v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v39)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23A089EAC((uint64_t)&v39, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &__p;
    else
      v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(v35, (const char *)v36);
    __cxa_throw(v35, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23A089B98(&v39);
  if (a3)
  {
    v17 = v40;
    if (v40 == v41)
    {
LABEL_30:
      if (*(char *)(a1 + 31) < 0)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v21 = *(unsigned __int8 *)(a1 + 31);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8, v21);
      sub_23A0140E4((void **)&v40, v17, &__p);
      goto LABEL_34;
    }
    if (*(char *)(a1 + 31) < 0)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v18 = *(unsigned __int8 *)(a1 + 31);
      v19 = v8;
    }
    v20 = *(_DWORD *)v40;
    if (v20 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v19, v18))
    {
      v17 = v40;
      goto LABEL_30;
    }
  }
LABEL_34:
  v22 = v40;
  v23 = v41;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v24 = v23 - v22;
  if (v23 != v22)
  {
    if (v24 < 0)
      sub_239FEBE68();
    v25 = operator new(v23 - v22);
    *a4 = v25;
    a4[2] = &v25[v24 >> 2];
    bzero(v25, v23 - v22);
    a4[1] = (char *)v25 + v24;
    if ((unint64_t)(v24 - 4) < 0x1C)
    {
      v26 = v22;
    }
    else
    {
      v26 = v22;
      if ((unint64_t)((char *)v25 - v22) >= 0x20)
      {
        v27 = ((unint64_t)(v24 - 4) >> 2) + 1;
        v28 = v27 & 0x7FFFFFFFFFFFFFF8;
        v29 = &v25[v28];
        v26 = &v22[v28 * 4];
        v30 = (__int128 *)(v22 + 16);
        v31 = v25 + 4;
        v32 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 8;
        }
        while (v32);
        v25 = v29;
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_44;
      }
    }
    do
    {
      v34 = *(_DWORD *)v26;
      v26 += 4;
      *v25++ = v34;
    }
    while (v26 != v23);
  }
LABEL_44:
  if (v22)
  {
    v41 = v22;
    operator delete(v22);
  }
}

void sub_23A014020(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A014034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::logic_error *sub_23A0140C0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

char *sub_23A0140E4(void **a1, _BYTE *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v19 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = (char *)(v14 + v6);
      v16 = v14 + v6 + 4;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        v19 = a1[1];
      }
      else
      {
        v18 = v5 - (_QWORD)v15;
        v19 = a1[1];
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 2) + 1;
          v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v21);
          v19 = (_DWORD *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    *(_DWORD *)v9 = *a3;
    return v9;
  }
  v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62)
    sub_239FEBE68();
  v28 = v10 - v6;
  if (v28 >> 1 > v26)
    v26 = v28 >> 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
    v29 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 62)
      sub_239FF1A44();
    v30 = (char *)operator new(4 * v29);
    v31 = &v30[4 * v8];
    v32 = &v30[4 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(4 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v52 = 1;
    else
      v52 = v7 >> 1;
    if (v52 >> 62)
      sub_239FF1A44();
    v53 = (char *)operator new(4 * v52);
    v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    v32 = &v53[4 * v52];
    if (v30)
    {
      v54 = &v53[4 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = (char *)*a1;
      *(_DWORD *)v31 = *a3;
      v35 = v31 + 4;
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(_DWORD *)v31 = *a3;
  v35 = v31 + 4;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v38 = v37 - v34 - 4;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x2C)
      goto LABEL_59;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_59;
    v40 = (v38 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (__int128 *)(v6 + 4 * v8 - 16);
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34)
    operator delete(v34);
  return v31;
}

void sub_23A014438(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A014450@<X0>(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::runtime_error *exception;
  std::string *p_p;
  std::string __p;
  uint64_t v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v5 = a2[1];
  memset(&__p, 0, sizeof(__p));
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_239FEBE68();
    v8 = operator new(v5 - v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[v7 >> 2];
    bzero(v8, v5 - v6);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8 + v7;
    if ((unint64_t)(v7 - 4) < 0x1C)
      goto LABEL_20;
    if ((unint64_t)((char *)v8 - v6) < 0x20)
      goto LABEL_20;
    v9 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    v11 = &v8[v10];
    v12 = &v6[v10 * 4];
    v13 = (__int128 *)(v6 + 16);
    v14 = v8 + 4;
    v15 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    v8 = v11;
    v6 = v12;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_20:
      do
      {
        v17 = *(_DWORD *)v6;
        v6 += 4;
        *v8++ = v17;
      }
      while (v6 != v5);
    }
  }
  sub_23A067BB0(a1 + 96, (uint64_t)&__p, (uint64_t)a3, &v22);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23A089EAC((uint64_t)&v22, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)p_p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return sub_23A089B98(&v22);
}

void sub_23A0145E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_23A089B98(&a15);
      if ((*(char *)(v15 + 23) & 0x80000000) == 0)
        _Unwind_Resume(a1);
      operator delete(*(void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_23A014664(uint64_t a1)
{
  *(_QWORD *)a1 = off_250B0D6A8;
  sub_23A064678(a1 + 96);
  *(_QWORD *)a1 = off_250B0D5E8;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x23B83FE88);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_23A0146F4(uint64_t a1@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  v3 = *a2;
  v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23A014994((uint64_t)a3, v5, v3, (uint64_t)v5, v4);
}

void sub_23A01472C(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  v3 = *a2;
  v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23A014BE8((uint64_t)a3, v5, v3, (uint64_t)v5, v4);
}

uint64_t sub_23A014764(uint64_t a1)
{
  return (int)sub_23A06CF6C((_QWORD **)(a1 + 96));
}

BOOL sub_23A014780(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD **)(a1 + 96);
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_23A06D0D0(v3, a2, v5);
  if (*(char *)(a1 + 79) < 0)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v7 = a1 + 56;
    v8 = *(unsigned __int8 *)(a1 + 79);
  }
  return v6 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7, v8);
}

uint64_t sub_23A0147F0(uint64_t a1, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::string *v9;
  __int128 v10;
  std::string __dst;

  *(_QWORD *)a1 = off_250B0D680;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  v9 = std::string::insert(&__dst, 0, "OutOfVocabularyError: ", 0x16uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 8) = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_23A0148F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::exception *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::exception::~exception(v15);
    _Unwind_Resume(a1);
  }
  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

void sub_23A014928(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_250B0D680;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A014978(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_23A014994(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  unsigned int *v6;
  __int128 v9;
  unint64_t v10;
  char *v11;
  int v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  char v16;

  v15 = a1;
  v16 = 0;
  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(__p, *a2, *v6);
      v10 = *(_QWORD *)(a1 + 8);
      if (v10 < *(_QWORD *)(a1 + 16))
      {
        v9 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v14;
        *(_OWORD *)v10 = v9;
        *(_QWORD *)(a1 + 8) = v10 + 24;
      }
      else
      {
        v11 = sub_23A014A80((void **)a1, (uint64_t)__p);
        v12 = SHIBYTE(v14);
        *(_QWORD *)(a1 + 8) = v11;
        if (v12 < 0)
          operator delete(__p[0]);
      }
      ++v6;
    }
    while (v6 != a5);
  }
}

void sub_23A014A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_239FF56CC(&a16);
    _Unwind_Resume(a1);
  }
  sub_239FF56CC(&a16);
  _Unwind_Resume(a1);
}

char *sub_23A014A80(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239FF1A44();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_23A014BE8(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4, __int128 *a5)
{
  __int128 *i;
  uint64_t v8;
  __int128 v9;
  void **v10;
  void *v11;
  int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  void *__p[2];
  uint64_t v34;

  if (a3 != a5)
  {
    for (i = a3; i != a5; i = (__int128 *)((char *)i + 24))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_239FF1F64(__p, *(void **)i, *((_QWORD *)i + 1));
      }
      else
      {
        v9 = *i;
        v34 = *((_QWORD *)i + 2);
        *(_OWORD *)__p = v9;
      }
      if (v34 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if (v34 >= 0)
        v11 = (void *)HIBYTE(v34);
      else
        v11 = __p[1];
      v12 = (*(uint64_t (**)(_QWORD, void **, void *))(*(_QWORD *)*a2 + 32))(*a2, v10, v11);
      if (SHIBYTE(v34) < 0)
      {
        operator delete(__p[0]);
        v14 = *(char **)(a1 + 8);
        v13 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v14 >= v13)
        {
LABEL_18:
          v15 = *(char **)a1;
          v16 = (uint64_t)&v14[-*(_QWORD *)a1];
          v17 = v16 >> 2;
          v18 = (v16 >> 2) + 1;
          if (v18 >> 62)
            sub_239FEBE68();
          v19 = v13 - (_QWORD)v15;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 62)
              sub_239FF1A44();
            v21 = operator new(4 * v20);
            v22 = &v21[4 * v17];
            *v22 = v12;
            v8 = (uint64_t)(v22 + 1);
            if (v14 == v15)
              goto LABEL_35;
LABEL_29:
            v23 = v14 - 4 - v15;
            if (v23 < 0x2C)
              goto LABEL_42;
            if ((unint64_t)(v14 - &v21[v16]) < 0x20)
              goto LABEL_42;
            v24 = (v23 >> 2) + 1;
            v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            v26 = &v14[-v25];
            v22 = (_DWORD *)((char *)v22 - v25);
            v27 = &v21[4 * v17 - 16];
            v28 = v14 - 16;
            v29 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            v14 = v26;
            if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_42:
              do
              {
                v31 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *--v22 = v31;
              }
              while (v14 != v15);
            }
          }
          else
          {
            v21 = 0;
            v22 = (_DWORD *)(4 * v17);
            *(_DWORD *)(4 * v17) = v12;
            v8 = 4 * v17 + 4;
            if (v14 != v15)
              goto LABEL_29;
          }
LABEL_35:
          *(_QWORD *)a1 = v22;
          *(_QWORD *)(a1 + 8) = v8;
          *(_QWORD *)(a1 + 16) = &v21[4 * v20];
          if (v15)
            operator delete(v15);
          goto LABEL_4;
        }
      }
      else
      {
        v14 = *(char **)(a1 + 8);
        v13 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v14 >= v13)
          goto LABEL_18;
      }
      *(_DWORD *)v14 = v12;
      v8 = (uint64_t)(v14 + 4);
LABEL_4:
      *(_QWORD *)(a1 + 8) = v8;
    }
  }
}

void sub_23A014E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (!*(_QWORD *)v16)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v16 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_23A014E60(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_23A014E60(a1, *(_QWORD *)a2);
    sub_23A014E60(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **sub_23A014EC0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v11 = a1 + 1;
    goto LABEL_29;
  }
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v10 = a2[1];
  do
  {
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = v6[4];
      v12 = v6 + 4;
      v13 = (_QWORD *)v14;
      v15 = *((char *)v12 + 23);
      v16 = v15 >= 0 ? v12 : v13;
      v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      v18 = (size_t)(v17 >= v10 ? v10 : v17);
      v19 = memcmp(v9, v16, v18);
      if (v19)
        break;
      if (v10 >= v17)
        goto LABEL_22;
LABEL_8:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_29;
    }
    if (v19 < 0)
      goto LABEL_8;
LABEL_22:
    v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        return v11;
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    v6 = v11[1];
  }
  while (v6);
  v7 = v11 + 1;
LABEL_29:
  v21 = (uint64_t *)v11;
  v11 = (uint64_t **)operator new(0x40uLL);
  v22 = *a4;
  v23 = (uint64_t *)*((_QWORD *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  *((_DWORD *)v11 + 14) = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *v7 = (uint64_t *)v11;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    v25 = *v7;
  }
  sub_23A004110(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_23A015028(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_23A015028(a1, *(_QWORD *)a2);
    sub_23A015028(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_23A01521C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A015234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A015248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0153F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A015410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A015424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0155D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0155EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A015600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0157B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0157C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0157DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A015998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0159B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0159C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A015AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A015B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A015E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A015FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A016064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A016230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  void *v11;

  if (a2 == 1)
  {
    v11 = __cxa_begin_catch(exception_object);
    sub_239FF9B50((uint64_t)v11, v10);
    __cxa_end_catch();
    JUMPOUT(0x23A016214);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A016444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23A016460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A016470(uint64_t a1, void *a2, float a3)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  *(float *)&v5 = a3;
  objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v6, v7, v8, v9, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);

}

void sub_23A0164D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A0164F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23A0166E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0166F8()
{
  __cxa_end_catch();
  JUMPOUT(0x23A016700);
}

uint64_t sub_23A016718(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *exception;

  v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_23A0167C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_23A0167E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A016BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;

  sub_239FF5234((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_23A016D1C(uint64_t a1, const char **a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  *(_DWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_BYTE **)(a3 + 16);
  v12 = *(_BYTE **)(a3 + 24);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_239FEBE68();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_23A016E54(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

id sub_23A016E78()
{
  if (qword_2569420A8 != -1)
    dispatch_once(&qword_2569420A8, &unk_250B0DF00);
  return (id)qword_2569412F8;
}

void sub_23A016EC4()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreSceneUnderstanding", "default");
  v1 = (void *)qword_2569412F8;
  qword_2569412F8 = (uint64_t)v0;

}

void sub_23A0173F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A01787C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void *sub_23A017938(uint64_t a1, void *__dst, size_t a3)
{
  return memcpy(__dst, **(const void ***)(a1 + 32), a3);
}

void sub_23A017D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__int16 sub_23A017E0C@<H0>(uint64_t a1@<X0>, float16x8_t *a2@<X1>)
{
  unint64_t v2;
  float32x4_t *v3;
  unint64_t v4;
  float32x4_t *v5;
  float16x8_t *v6;
  unint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float16x8_t v12;
  unint64_t v14;
  __int16 *v15;
  __int32 *v16;
  __int32 v17;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = **(float32x4_t ***)(a1 + 32);
    if (v2 < 0x10)
    {
      v4 = 0;
LABEL_7:
      v14 = v2 - v4;
      v15 = &a2->i16[v4];
      v16 = &v3->i32[v4];
      do
      {
        v17 = *v16++;
        _Q0.i32[0] = v17;
        __asm { FCVT            H0, S0 }
        *v15++ = _Q0.i16[0];
        --v14;
      }
      while (v14);
      return _Q0.i16[0];
    }
    v4 = v2 & 0xFFFFFFFFFFFFFFF0;
    v5 = v3 + 2;
    v6 = a2 + 1;
    v7 = v2 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v9 = v5[-2];
      v8 = v5[-1];
      v11 = *v5;
      v10 = v5[1];
      v5 += 4;
      v12 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v9), v8);
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v11), v10);
      v6[-1] = v12;
      *v6 = _Q0;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    if (v2 != v4)
      goto LABEL_7;
  }
  return _Q0.i16[0];
}

void sub_23A017EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23A017EF4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  NSLog(CFSTR("Printing MLMutiArray"));
  if (a3 >= 4)
  {
    v5 = 0;
    do
    {
      NSLog(CFSTR("index -> %zu,value = %f\n"), v5, *(float *)(a2 + 4 * v5));
      ++v5;
    }
    while (a3 >> 2 != v5);
  }
}

void sub_23A0184A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_23A018C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_23A018E50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_23A018E60(uint64_t a1)
{

}

void sub_23A018E68(_QWORD *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id obj;

  v4 = objc_alloc(MEMORY[0x24BDBFFF0]);
  v5 = a1[4];
  v6 = a1[5];
  v7 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v7 + 40);
  v9 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v4, v8, a2, v5, 65568, v6, 0, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  v10 = *(_QWORD *)(a1[6] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

void sub_23A018FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A018FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A018FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A019018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A019030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A019298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v18;
  _QWORD *v19;

  if (__p)
    operator delete(__p);
  sub_239FF27B8(v19);
  operator delete(v17);

  _Unwind_Resume(a1);
}

void sub_23A01941C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0195E4(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v9;

  v6 = v5;

  if (a2 == 1)
  {
    v9 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v9, v2);
    __cxa_end_catch();
    JUMPOUT(0x23A0195A0);
  }
  _Unwind_Resume(a1);
}

void sub_23A0199C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, _QWORD *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v21;

  if (a2 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v21, a11);
    __cxa_end_catch();
    if (*MEMORY[0x24BDAC8D0] != a18)
      JUMPOUT(0x23A0199C4);
    JUMPOUT(0x23A01974CLL);
  }
  _Unwind_Resume(a1);
}

void sub_23A019D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A019F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A019F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A019FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A019FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v34;

  if (__p)
    operator delete(__p);
  if (v34)
    operator delete(v34);

  _Unwind_Resume(a1);
}

float32_t sub_23A01A5B0(uint64_t a1, float32x4_t *a2)
{
  uint32x4_t *v2;
  uint32x4_t *v3;
  unint64_t v4;
  float *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned int v14;

  v3 = *(uint32x4_t **)(a1 + 32);
  v2 = *(uint32x4_t **)(a1 + 40);
  if (v3 != v2)
  {
    v4 = (char *)v2 - (char *)v3 - 4;
    if (v4 < 0x1C)
    {
      v5 = (float *)a2;
      v6 = *(unsigned int **)(a1 + 32);
      do
      {
LABEL_7:
        v14 = *v6++;
        v12.f32[0] = (float)v14;
        *v5++ = (float)v14;
      }
      while (v6 != (unsigned int *)v2);
      return v12.f32[0];
    }
    v7 = (v4 >> 2) + 1;
    v8 = v7 & 0x7FFFFFFFFFFFFFF8;
    v5 = &a2->f32[v8];
    v6 = &v3->u32[v8];
    v9 = v3 + 1;
    v10 = a2 + 1;
    v11 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v12 = vcvtq_f32_u32(v9[-1]);
      v13 = vcvtq_f32_u32(*v9);
      v10[-1] = v12;
      *v10 = v13;
      v9 += 2;
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_7;
  }
  return v12.f32[0];
}

_QWORD *sub_23A01A63C(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 32);
  v2 = *(_BYTE **)(a2 + 40);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (v4 < 0)
      sub_239FEBE68();
    v6 = (char *)operator new(v2 - v3);
    v5[4] = v6;
    v5[5] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[6] = v7;
    result = memcpy(v6, v3, v4);
    v5[5] = v7;
  }
  return result;
}

void sub_23A01A6B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A01A6CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

__n128 sub_23A01A6E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_23A01A708(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

float sub_23A01A720(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float result;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  objc_msgSend_strides(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v7, v8, 1, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_intValue(v11, v12, v13, v14, v15);

  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    v19 = 0;
    v20 = &a2[2 * *(_DWORD *)(a1 + 56) * v16];
    do
    {
      _H0 = *(_WORD *)&v20[2 * v19];
      __asm { FCVT            S0, H0 }
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) + 4 * v19++) = result;
    }
    while (v18 != v19);
  }
  return result;
}

void sub_23A01A7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01A7D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20)
{
  sub_23A01B6E8(&a20);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23A01B4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23A01B4C4()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  uint64_t v2;

  v1 = *(std::__shared_weak_count **)(v0 - 152);
  if (v1)
    sub_23A09DF1C(v1);
  v2 = *(_QWORD *)(v0 - 144);
  if (v2)
  {
    *(_QWORD *)(v0 - 136) = v2;
    JUMPOUT(0x23A01B68CLL);
  }
  JUMPOUT(0x23A01B690);
}

void sub_23A01B4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_239FF38A8((uint64_t)&a18);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23A01B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;

  v42 = *(void **)(v40 - 216);
  if (v42)
  {
    *(_QWORD *)(v40 - 208) = v42;
    operator delete(v42);
  }
  v43 = *(_QWORD *)(v40 - 192);
  if (!v43)
  {
LABEL_17:
    sub_239FF38A8((uint64_t)&a18);
    operator delete(a11);
    _Unwind_Resume(a1);
  }
  v44 = *(_QWORD *)(v40 - 184);
  v45 = *(void **)(v40 - 192);
  if (v44 == v43)
  {
LABEL_16:
    *(_QWORD *)(v40 - 184) = v43;
    operator delete(v45);
    goto LABEL_17;
  }
  while (1)
  {
    v47 = *(std::__shared_weak_count **)(v44 - 8);
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
        break;
    }
    v46 = *(void **)(v44 - 40);
    if (v46)
      goto LABEL_7;
LABEL_8:
    v44 -= 48;
    if (v44 == v43)
    {
      v45 = *(void **)(v40 - 192);
      goto LABEL_16;
    }
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  v46 = *(void **)(v44 - 40);
  if (!v46)
    goto LABEL_8;
LABEL_7:
  *(_QWORD *)(v44 - 32) = v46;
  operator delete(v46);
  goto LABEL_8;
}

void sub_23A01B558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(a29);
  JUMPOUT(0x23A01B6CCLL);
}

void sub_23A01B578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  uint64_t v16;

  if (*(char *)(v16 - 169) < 0)
    operator delete(*(void **)(v16 - 192));
  sub_239FF38A8(v16 - 216);
  JUMPOUT(0x23A01B6BCLL);
}

void sub_23A01B5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v20 = *(_QWORD *)(v18 - 192);
  if (!v20)
  {
LABEL_15:
    sub_239FF38A8((uint64_t)&a18);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  v21 = *(_QWORD *)(v18 - 184);
  v22 = *(void **)(v18 - 192);
  if (v21 == v20)
  {
LABEL_14:
    *(_QWORD *)(v18 - 184) = v20;
    operator delete(v22);
    goto LABEL_15;
  }
  while (1)
  {
    v24 = *(std::__shared_weak_count **)(v21 - 8);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
        break;
    }
    v23 = *(void **)(v21 - 40);
    if (v23)
      goto LABEL_5;
LABEL_6:
    v21 -= 48;
    if (v21 == v20)
    {
      v22 = *(void **)(v18 - 192);
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v23 = *(void **)(v21 - 40);
  if (!v23)
    goto LABEL_6;
LABEL_5:
  *(_QWORD *)(v21 - 32) = v23;
  operator delete(v23);
  goto LABEL_6;
}

void sub_23A01B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  uint64_t v33;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  v35 = a33;
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (a29)
  {
    a30 = a29;
    JUMPOUT(0x23A01B604);
  }
  v38 = *(_QWORD *)(v33 - 192);
  if (!v38)
  {
LABEL_23:
    sub_239FF38A8((uint64_t)&a18);
    operator delete(a11);
    _Unwind_Resume(a1);
  }
  v39 = *(_QWORD *)(v33 - 184);
  v40 = *(void **)(v33 - 192);
  if (v39 == v38)
  {
LABEL_22:
    *(_QWORD *)(v33 - 184) = v38;
    operator delete(v40);
    goto LABEL_23;
  }
  while (1)
  {
    v42 = *(std::__shared_weak_count **)(v39 - 8);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
        break;
    }
    v41 = *(void **)(v39 - 40);
    if (v41)
      goto LABEL_13;
LABEL_14:
    v39 -= 48;
    if (v39 == v38)
    {
      v40 = *(void **)(v33 - 192);
      goto LABEL_22;
    }
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  v41 = *(void **)(v39 - 40);
  if (!v41)
    goto LABEL_14;
LABEL_13:
  *(_QWORD *)(v39 - 32) = v41;
  operator delete(v41);
  goto LABEL_14;
}

void sub_23A01B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(a29);
  JUMPOUT(0x23A01B6CCLL);
}

void **sub_23A01B6E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_23A01C06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v47;
  void *v48;

  v47 = *(void **)(v45 - 208);
  if (v47)
  {
    *(_QWORD *)(v45 - 200) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 184);
  if (v48)
  {
    *(_QWORD *)(v45 - 176) = v48;
    operator delete(v48);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A01C218(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v24;
  const char *v25;
  const char *v26;
  __int16 v27;

  objc_msgSend_strides(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v7, v8, 1, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_intValue(v11, v12, v13, v14, v15);

  v18 = *(_QWORD *)(a1 + 56) * v16;
  v19 = &a2[2 * v18];
  v20 = v16 + v18;
  v21 = v19 + 2;
  if (v18 == v20 || v21 == &a2[2 * v20])
  {
    v25 = &a2[2 * v18];
  }
  else
  {
    LOWORD(_S0) = *(_WORD *)v19;
    v24 = 2 * v16 - 2;
    v25 = v19;
    v26 = v19 + 2;
    do
    {
      v27 = *(_WORD *)v26;
      v26 += 2;
      LOWORD(_S1) = v27;
      __asm
      {
        FCVT            S2, H0
        FCVT            S3, H1
      }
      if (_S2 < _S3)
      {
        _S0 = _S1;
        v25 = v21;
      }
      v21 = v26;
      v24 -= 2;
    }
    while (v24);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v25;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                                                                                + 8)
                                                                                    + 24)
                                                                        - (_QWORD)v19) >> 1;
}

void sub_23A01C308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01C31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float sub_23A01C32C(uint64_t a1, uint64_t a2)
{
  float result;

  result = (float)*(unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(float *)(a2 + 4 * *(_QWORD *)(a1 + 40) + 4) = result;
  return result;
}

void sub_23A01C418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01C430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01C4B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  void *__p[2];
  char *v20;
  int v21;
  void *v22;
  _QWORD *v23;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_23A01C8B8(a1, (uint64_t *)&v22);
  v3 = v22;
  v4 = v23;
  if (v22 == v23)
  {
    if (!v22)
      return;
    goto LABEL_13;
  }
  do
  {
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    v6 = (_BYTE *)v3[1];
    v5 = (_BYTE *)v3[2];
    v7 = v5 - v6;
    if (v5 != v6)
    {
      if (v7 < 0)
        sub_239FEBE68();
      v8 = (char *)operator new(v5 - v6);
      v9 = &v8[4 * (v7 >> 2)];
      __p[0] = v8;
      v20 = v9;
      memcpy(v8, v6, v7);
      __p[1] = v9;
    }
    v21 = *((_DWORD *)v3 + 1);
    v10 = *(_QWORD *)(a2 + 8);
    if (v10 < *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_OWORD *)v10 = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 16) = v20;
      __p[0] = 0;
      __p[1] = 0;
      v20 = 0;
      *(_DWORD *)(v10 + 24) = v21;
      *(_QWORD *)(a2 + 8) = v10 + 32;
    }
    else
    {
      v11 = sub_23A01EEA4((void **)a2, (uint64_t)__p);
      v12 = __p[0];
      *(_QWORD *)(a2 + 8) = v11;
      if (v12)
      {
        __p[1] = v12;
        operator delete(v12);
      }
    }
    v3 += 6;
  }
  while (v3 != v4);
  v3 = v22;
  if (v22)
  {
LABEL_13:
    v13 = v23;
    v14 = v3;
    if (v23 == v3)
    {
LABEL_25:
      v23 = v3;
      operator delete(v14);
      return;
    }
    while (1)
    {
      v15 = (std::__shared_weak_count *)*(v13 - 1);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
          break;
      }
      v18 = (void *)*(v13 - 5);
      if (v18)
        goto LABEL_21;
LABEL_15:
      v13 -= 6;
      if (v13 == v3)
      {
        v14 = v22;
        goto LABEL_25;
      }
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (void *)*(v13 - 5);
    if (!v18)
      goto LABEL_15;
LABEL_21:
    *(v13 - 4) = v18;
    operator delete(v18);
    goto LABEL_15;
  }
}

void sub_23A01C670(_Unwind_Exception *a1)
{
  void **v1;

  sub_23A01B6E8(v1);
  _Unwind_Resume(a1);
}

void sub_23A01C684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void **v14;

  if (__p)
    operator delete(__p);
  sub_23A01D4E4(&a14);
  sub_23A01B6E8(v14);
  _Unwind_Resume(a1);
}

void sub_23A01C6D0(uint64_t a1, _QWORD *a2, uint64_t *a3, float a4)
{
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  float v20;
  float v21;
  char v22;
  char v23;
  char v24;

  v21 = a4;
  v7 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), (uint64_t)(a2[1] - *a2) >> 2);
  v20 = v7;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v8) >> 4);
  if (*(_DWORD *)a1 <= (int)v10)
  {
    if (v7 <= *(float *)(v8 + 4))
      return;
    sub_23A01E058((uint64_t *)v8, *(_QWORD *)(a1 + 32), (uint64_t)&v23, v10);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(std::__shared_weak_count **)(v12 - 8);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(void **)(v12 - 40);
    if (v16)
    {
      *(_QWORD *)(v12 - 32) = v16;
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 32) = v12 - 48;
    if ((unint64_t)(v12 - 48) >= *(_QWORD *)(a1 + 40))
    {
      v12 = sub_23A01D598((uint64_t **)(a1 + 24), (int *)&v21, (int *)&v20, (uint64_t)a2, a3);
    }
    else
    {
      sub_23A01D790(v12 - 48, (int *)&v21, (int *)&v20, (uint64_t)a2, a3);
      *(_QWORD *)(a1 + 32) = v12;
    }
    *(_QWORD *)(a1 + 32) = v12;
    v17 = *(_QWORD *)(a1 + 24);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v17) >> 4);
    v19 = &v24;
    v11 = v12;
  }
  else
  {
    if (v9 >= *(_QWORD *)(a1 + 40))
    {
      v11 = sub_23A01D598((uint64_t **)(a1 + 24), (int *)&v21, (int *)&v20, (uint64_t)a2, a3);
    }
    else
    {
      sub_23A01D790(*(_QWORD *)(a1 + 32), (int *)&v21, (int *)&v20, (uint64_t)a2, a3);
      v11 = v9 + 48;
      *(_QWORD *)(a1 + 32) = v9 + 48;
    }
    *(_QWORD *)(a1 + 32) = v11;
    v17 = *(_QWORD *)(a1 + 24);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v17) >> 4);
    v19 = &v22;
  }
  sub_23A01DB24(v17, v11, (uint64_t)v19, v18);
}

void sub_23A01C8A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_23A01C8B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_23A01C8B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  char v24;

  sub_23A01E5C4(&v22, (uint64_t *)(a1 + 24));
  sub_23A01E4FC(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
  v5 = v22;
  v4 = v23;
  if (v22 != v23)
  {
    while (1)
    {
      v6 = -1 - 0x5555555555555555 * (((char *)v4 - (char *)v5) >> 4);
      v7 = *a2;
      v8 = (uint64_t *)(*a2 + 48 * v6);
      *v8 = *v5;
      if (v8 != v5)
        sub_23A01DF14((_QWORD *)(v7 + 48 * v6 + 8), (char *)v5[1], (char *)v5[2], (v5[2] - v5[1]) >> 2);
      v10 = v5[4];
      v9 = v5[5];
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)(v7 + 48 * v6 + 32) = v10;
      v13 = v7 + 48 * v6;
      v14 = *(std::__shared_weak_count **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v9;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      sub_23A01E058(v22, (uint64_t)v23, (uint64_t)&v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 4));
      v17 = v23;
      v18 = (std::__shared_weak_count *)*(v23 - 1);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
          break;
      }
      v21 = (void *)*(v17 - 5);
      if (v21)
        goto LABEL_19;
LABEL_3:
      v4 = v17 - 6;
      v23 = v17 - 6;
      v5 = v22;
      if (v22 == v17 - 6)
        goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (void *)*(v17 - 5);
    if (!v21)
      goto LABEL_3;
LABEL_19:
    *(v17 - 4) = (uint64_t)v21;
    operator delete(v21);
    goto LABEL_3;
  }
  v4 = v22;
  if (v22)
  {
LABEL_23:
    v23 = v4;
    operator delete(v4);
  }
}

void sub_23A01CA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A01D4E4((void **)va);
  _Unwind_Resume(a1);
}

void sub_23A01CA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_23A01D4E4(v2);
  sub_23A01D4E4((void **)va);
  _Unwind_Resume(a1);
}

void sub_23A01CAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  float *v9;
  size_t v10;
  char *v11;
  char *v12;
  int v13;
  int64_t v14;
  float *v15;
  float *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int64_t v33;
  char *v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  float v42;
  void *__p;
  char *v44;
  void *v45[2];
  _OWORD v46[2];
  void *v47;
  float *v48;
  float *v49;

  v5 = a5;
  v9 = **(float ***)a4;
  if (!v9
    || (objc_msgSend_nextTokensForInputs_AndforMaskPosition_(v9, (const char *)a2, a3, a5, a5),
        v9 = v49,
        v10 = (char *)v49 - (char *)v48,
        v49 == v48))
  {
    v13 = 0;
    **(_DWORD **)(a4 + 8) = v5;
    *(_OWORD *)v45 = 0u;
    memset(v46, 0, 25);
    if (!v9)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((v10 & 0x8000000000000000) != 0)
    sub_239FEBE68();
  v47 = operator new((char *)v49 - (char *)v48);
  memcpy(v47, v48, v10);
  v11 = (char *)operator new(v10);
  v12 = &v11[v10];
  v45[0] = v11;
  v46[0] = (unint64_t)&v11[v10];
  memcpy(v11, v47, v10);
  *(_QWORD *)&v46[1] = 0;
  v45[1] = v12;
  v13 = 1;
  BYTE8(v46[1]) = 1;
  operator delete(v47);
  v9 = v48;
  if (v48)
  {
LABEL_7:
    operator delete(v9);
    v13 = BYTE8(v46[1]);
  }
LABEL_8:
  if (!v13)
  {
    *(_OWORD *)a1 = *(_OWORD *)v45;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v46[0];
    v45[0] = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v46 + 8);
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_55;
  }
  v48 = 0;
  v14 = (char *)v45[1] - (char *)v45[0];
  if (v45[1] == v45[0])
  {
    v16 = 0;
    v15 = 0;
    v17 = *(_QWORD **)(a2 + 104);
    v18 = (_QWORD *)(a2 + 112);
    if (v17 == (_QWORD *)(a2 + 112))
      goto LABEL_23;
    goto LABEL_17;
  }
  if (v14 < 0)
    sub_239FEBE68();
  v15 = (float *)operator new((char *)v45[1] - (char *)v45[0]);
  v16 = &v15[v14 >> 2];
  v48 = v15;
  memcpy(v15, v45[0], v14);
  v17 = *(_QWORD **)(a2 + 104);
  v18 = (_QWORD *)(a2 + 112);
  if (v17 != (_QWORD *)(a2 + 112))
  {
    do
    {
LABEL_17:
      v15[*((unsigned int *)v17 + 7)] = 0.00000011921;
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != v18);
  }
LABEL_23:
  if (v15 != v16)
  {
    v22 = (char *)v16 - (char *)v15 - 4;
    v23 = v15;
    if (v22 < 4)
      goto LABEL_64;
    v24 = (v22 >> 2) + 1;
    v23 = &v15[v24 & 0x7FFFFFFFFFFFFFFELL];
    v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
    v26 = v15;
    do
    {
      LODWORD(v41) = *(_QWORD *)v26;
      v42 = logf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v26)));
      *(float *)&v27 = logf(v41);
      *((float *)&v27 + 1) = v42;
      *(_QWORD *)v26 = v27;
      v26 += 2;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_64:
      do
      {
        *v23 = logf(*v23);
        ++v23;
      }
      while (v23 != v16);
    }
    if ((char *)v16 - (char *)v15 < 0)
      sub_239FEBE68();
    v28 = (char *)operator new((char *)v16 - (char *)v15);
    __p = v28;
    memcpy(v28, v15, (char *)v16 - (char *)v15);
    v44 = &v28[4 * (v16 - v15)];
    v30 = *((_QWORD *)&v46[0] + 1);
    v29 = *(std::__shared_weak_count **)&v46[1];
    if (!*(_QWORD *)&v46[1])
      goto LABEL_35;
    goto LABEL_33;
  }
  v28 = 0;
  __p = 0;
  v44 = 0;
  v30 = *((_QWORD *)&v46[0] + 1);
  v29 = *(std::__shared_weak_count **)&v46[1];
  if (*(_QWORD *)&v46[1])
  {
LABEL_33:
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
LABEL_35:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v33 = v44 - v28;
  if (v44 != v28)
  {
    if (v33 < 0)
      sub_239FEBE68();
    v34 = (char *)operator new(v44 - v28);
    *(_QWORD *)a1 = v34;
    v35 = &v34[4 * (v33 >> 2)];
    *(_QWORD *)(a1 + 16) = v35;
    memcpy(v34, v28, v33);
    *(_QWORD *)(a1 + 8) = v35;
  }
  *(_QWORD *)(a1 + 24) = v30;
  *(_QWORD *)(a1 + 32) = v29;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    *(_BYTE *)(a1 + 40) = 1;
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 1;
  }
  if (__p)
    operator delete(__p);
  if (v48)
    operator delete(v48);
  if (*(_QWORD *)&v46[1])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v46[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v46[1] + 16))(*(_QWORD *)&v46[1]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v46[1]);
    }
  }
LABEL_55:
  if (v45[0])
    operator delete(v45[0]);
}

void sub_23A01CEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  void *v20;
  va_list va;

  va_start(va, a17);
  sub_239FF38A8((uint64_t)va);
  *(_QWORD *)(v18 - 120) = v17;
  operator delete(v17);
  v20 = *(void **)(v18 - 104);
  if (v20)
  {
    *(_QWORD *)(v18 - 96) = v20;
    operator delete(v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A01CF9C(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  void *v40;
  int64_t v41;
  float v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *__p;
  void *v56;
  char *v57;
  void *v58;
  _BYTE *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  void *v66;
  char *v67;

  v65 = 0;
  v66 = 0;
  v67 = 0;
  v9 = *(const void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = v8 - *(_QWORD *)a2;
  if (v8 != *(_QWORD *)a2)
  {
    if (v10 < 0)
      sub_239FEBE68();
    v11 = (char *)operator new(v8 - *(_QWORD *)a2);
    v12 = &v11[4 * (v10 >> 2)];
    v65 = v11;
    v67 = v12;
    memcpy(v11, v9, v10);
    v66 = v12;
  }
  v13 = *(std::__shared_weak_count **)(a2 + 32);
  v63 = *(_QWORD *)(a2 + 24);
  v64 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_23A01E698((uint64_t *)&v65, *(_DWORD *)(a1 + 84), &v61);
  v16 = v61;
  v17 = v62;
  if (v61 != v62)
  {
    while (1)
    {
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v19 = *(const void **)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v20 = v18 - *(_QWORD *)a3;
      if (v18 == *(_QWORD *)a3)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 1;
      }
      else
      {
        if (v20 < 0)
          sub_239FEBE68();
        v21 = (char *)operator new(v18 - *(_QWORD *)a3);
        v58 = v21;
        v59 = v21;
        v22 = &v21[4 * (v20 >> 2)];
        v60 = v22;
        memcpy(v21, v19, v20);
        v59 = v22;
        v23 = 4 * (v20 >> 2);
        v24 = v23 >> 2;
        v25 = (v23 >> 2) + 1;
        if (v25 >> 62)
          sub_239FEBE68();
      }
      if (v23 >> 1 > v25)
        v25 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 62)
          sub_239FF1A44();
        v27 = (char *)operator new(4 * v26);
        v28 = &v27[4 * v24];
        *(_DWORD *)v28 = *((_DWORD *)v16 + 1);
        v29 = (uint64_t)(v28 + 4);
        v30 = v22 - v21;
        if (v22 == v21)
          goto LABEL_31;
      }
      else
      {
        v27 = 0;
        v28 = (char *)(4 * v24);
        *(_DWORD *)(4 * v24) = *((_DWORD *)v16 + 1);
        v29 = 4 * v24 + 4;
        v30 = v22 - v21;
        if (v22 == v21)
          goto LABEL_31;
      }
      v31 = v30 - 4;
      if (v31 < 0x1C)
      {
        v32 = v22;
        do
        {
LABEL_30:
          v39 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *((_DWORD *)v28 - 1) = v39;
          v28 -= 4;
        }
        while (v32 != v21);
        goto LABEL_31;
      }
      v33 = (v31 >> 2) + 1;
      v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
      v32 = &v22[-v34];
      v28 -= v34;
      v35 = &v27[4 * v24 - 16];
      v36 = v22 - 16;
      v37 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v38 = *(_OWORD *)v36;
        *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
        *(_OWORD *)v35 = v38;
        v35 -= 32;
        v36 -= 32;
        v37 -= 8;
      }
      while (v37);
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_30;
LABEL_31:
      v58 = v28;
      v59 = (_BYTE *)v29;
      v60 = &v27[4 * v26];
      if (v21)
        operator delete(v21);
      v59 = (_BYTE *)v29;
      if ((sub_23A01E9D0(a1) & 1) != 0)
        goto LABEL_49;
      v40 = v58;
      v41 = v59 - (_BYTE *)v58;
      if ((unint64_t)(v59 - (_BYTE *)v58) < 9)
      {
        v42 = *(float *)v16;
        __p = 0;
        v56 = 0;
        v57 = 0;
        if (v59 == v58)
          goto LABEL_40;
      }
      else
      {
        v42 = (*(float (**)(_QWORD, float, float))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), a4, *(float *)v16);
        v40 = v58;
        v41 = v59 - (_BYTE *)v58;
        __p = 0;
        v56 = 0;
        v57 = 0;
        if (v59 == v58)
          goto LABEL_40;
      }
      if (v41 < 0)
        sub_239FEBE68();
      __p = operator new(v41);
      v56 = __p;
      v43 = (char *)__p + 4 * (v41 >> 2);
      v57 = v43;
      memcpy(__p, v40, v41);
      v56 = v43;
LABEL_40:
      v53 = v63;
      v54 = v64;
      if (v64)
      {
        v44 = (unint64_t *)&v64->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      sub_23A01C6D0(a1 + 168, &__p, &v53, v42);
      v46 = v54;
      if (v54)
      {
        v47 = (unint64_t *)&v54->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          v49 = __p;
          if (!__p)
            goto LABEL_49;
LABEL_48:
          v56 = v49;
          operator delete(v49);
          goto LABEL_49;
        }
      }
      v49 = __p;
      if (__p)
        goto LABEL_48;
LABEL_49:
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v16 += 8;
      if (v16 == v17)
      {
        v16 = v61;
        break;
      }
    }
  }
  if (v16)
  {
    v62 = v16;
    operator delete(v16);
  }
  v50 = v64;
  if (v64)
  {
    v51 = (unint64_t *)&v64->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_23A01D3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_239FF38A8((uint64_t)&a20);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_23A01D438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17)
    JUMPOUT(0x23A01D404);
  JUMPOUT(0x23A01D3FCLL);
}

void sub_23A01D450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    if (!a17)
      JUMPOUT(0x23A01D404);
    JUMPOUT(0x23A01D3FCLL);
  }
  JUMPOUT(0x23A01D3F4);
}

uint64_t sub_23A01D470(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(void **)a1;
      if (!*(_QWORD *)a1)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void **sub_23A01D4E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_14:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = (void *)*((_QWORD *)v3 - 5);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (void *)*((_QWORD *)v3 - 5);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *((_QWORD *)v3 - 4) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
  return a1;
}

uint64_t sub_23A01D598(uint64_t **a1, int *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555)
    sub_239FEBE68();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v7)
    v7 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v12 = 0x555555555555555;
  else
    v12 = v7;
  if (v12)
  {
    if (v12 > 0x555555555555555)
      sub_239FF1A44();
    v13 = (char *)operator new(48 * v12);
  }
  else
  {
    v13 = 0;
  }
  v23 = (uint64_t)&v13[48 * v6];
  v25 = (uint64_t *)&v13[48 * v12];
  sub_23A01D790(v23, a2, a3, a4, a5);
  v14 = (uint64_t *)v23;
  v16 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    v17 = a1[1];
  }
  else
  {
    do
    {
      v15 -= 6;
      v14 = sub_23A01D9E8(v14 - 6, v15);
    }
    while (v15 != v16);
    v17 = *a1;
    v15 = a1[1];
  }
  *a1 = v14;
  a1[1] = (uint64_t *)(v23 + 48);
  a1[2] = v25;
  if (v15 == v17)
  {
    if (v15)
      goto LABEL_17;
    return v23 + 48;
  }
  do
  {
    v24 = v15 - 6;
    v19 = (std::__shared_weak_count *)*(v15 - 1);
    if (!v19)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (v21)
    {
LABEL_24:
      v22 = (void *)*(v15 - 5);
      if (!v22)
        goto LABEL_19;
LABEL_25:
      *(v15 - 4) = (uint64_t)v22;
      operator delete(v22);
      goto LABEL_19;
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = (void *)*(v15 - 5);
    if (v22)
      goto LABEL_25;
LABEL_19:
    v15 -= 6;
  }
  while (v24 != v17);
  v15 = v17;
  if (!v17)
    return v23 + 48;
LABEL_17:
  operator delete(v15);
  return v23 + 48;
}

void sub_23A01D77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A01D940((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A01D790(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  int v7;
  int v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void *__p;

  v7 = *a2;
  v8 = *a3;
  __p = 0;
  v10 = *(const void **)a4;
  v9 = *(_QWORD *)(a4 + 8);
  v11 = v9 - *(_QWORD *)a4;
  if (v9 == *(_QWORD *)a4)
  {
    v13 = 0;
    v12 = 0;
    v15 = *a5;
    v14 = (std::__shared_weak_count *)a5[1];
    if (!v14)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v11 < 0)
    sub_239FEBE68();
  v12 = (char *)operator new(v9 - *(_QWORD *)a4);
  v13 = &v12[4 * (v11 >> 2)];
  __p = v12;
  memcpy(v12, v10, v11);
  v15 = *a5;
  v14 = (std::__shared_weak_count *)a5[1];
  if (v14)
  {
LABEL_6:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
LABEL_8:
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v18 = v13 - v12;
  if (v13 != v12)
  {
    if (v18 < 0)
      sub_239FEBE68();
    v19 = (char *)operator new(v13 - v12);
    *(_QWORD *)(a1 + 8) = v19;
    v20 = &v19[4 * (v18 >> 2)];
    *(_QWORD *)(a1 + 24) = v20;
    memcpy(v19, v12, v13 - v12);
    *(_QWORD *)(a1 + 16) = v20;
  }
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v21 = (unint64_t *)&v14->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
    operator delete(__p);
  return a1;
}

void sub_23A01D908(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_23A08A288(a1);
}

void sub_23A01D924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A01D940(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_8:
      v7 = *(void **)(i - 40);
      if (!v7)
        continue;
LABEL_9:
      *(_QWORD *)(i - 32) = v7;
      operator delete(v7);
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(void **)(i - 40);
    if (v7)
      goto LABEL_9;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_23A01D9E8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_239FEBE68();
    v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void sub_23A01DA94(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_23A08A288(a1);
}

_QWORD *sub_23A01DAB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[1];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[1];
  if (v5)
  {
LABEL_6:
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_23A01DB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  float v9;
  float v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  float v25;
  void *v26;
  size_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  float v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *__p;
  void *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  std::__shared_weak_count *v64;

  if (a4 >= 2)
  {
    v6 = (unint64_t)(a4 - 2) >> 1;
    v7 = a1 + 48 * v6;
    sub_23A01D9E8(&v61, (uint64_t *)v7);
    v8 = (uint64_t *)(a2 - 48);
    sub_23A01D9E8(&v57, (uint64_t *)(a2 - 48));
    v9 = *((float *)&v61 + 1);
    v10 = *((float *)&v57 + 1);
    v11 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (__p)
    {
      v59 = __p;
      operator delete(__p);
    }
    v14 = v64;
    if (v64)
    {
      v15 = (unint64_t *)&v64->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v9 > v10)
    {
      sub_23A01D9E8(&v52, v8);
      while (1)
      {
        v17 = (uint64_t *)v7;
        *v8 = *(_QWORD *)v7;
        if (v8 != (uint64_t *)v7)
          sub_23A01DF14(v8 + 1, *(char **)(v7 + 8), *(char **)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 2);
        v19 = *(_QWORD *)(v7 + 32);
        v18 = *(_QWORD *)(v7 + 40);
        if (v18)
        {
          v20 = (unint64_t *)(v18 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = (std::__shared_weak_count *)v8[5];
        v8[4] = v19;
        v8[5] = v18;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (!v6)
        {
LABEL_51:
          *v17 = v52;
          if (v17 != &v52)
            sub_23A01DF14(v17 + 1, (char *)v53, v54, (v54 - (_BYTE *)v53) >> 2);
          v38 = v55;
          v37 = v56;
          if (v56)
          {
            v39 = (unint64_t *)&v56->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          v41 = (std::__shared_weak_count *)v17[5];
          v17[4] = v38;
          v17[5] = (uint64_t)v37;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v56;
          if (v56)
          {
            v45 = (unint64_t *)&v56->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (v53)
          {
            v54 = (char *)v53;
            operator delete(v53);
          }
          return;
        }
        v6 = (v6 - 1) >> 1;
        v7 = a1 + 48 * v6;
        sub_23A01D9E8(&v48, (uint64_t *)v7);
        v25 = *((float *)&v52 + 1);
        v47 = 0;
        v26 = v53;
        v27 = v54 - (_BYTE *)v53;
        if (v54 != v53)
        {
          if ((v27 & 0x8000000000000000) != 0)
            sub_239FEBE68();
          v47 = operator new(v54 - (_BYTE *)v53);
          memcpy(v47, v26, v27);
        }
        v28 = v56;
        if (v56)
        {
          v29 = (unint64_t *)&v56->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = *((float *)&v48 + 1);
          do
            v32 = __ldaxr(v29);
          while (__stlxr(v32 - 1, v29));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        else
        {
          v31 = *((float *)&v48 + 1);
        }
        if (v47)
          operator delete(v47);
        v33 = v51;
        if (v51)
        {
          v34 = (unint64_t *)&v51->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
            break;
        }
        v36 = v49;
        if (v49)
          goto LABEL_48;
LABEL_18:
        v8 = v17;
        if (v31 <= v25)
          goto LABEL_51;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      v36 = v49;
      if (!v49)
        goto LABEL_18;
LABEL_48:
      v50 = v36;
      operator delete(v36);
      goto LABEL_18;
    }
  }
}

void sub_23A01DEE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    sub_23A08A288(a1);
  }
  sub_23A08A288(a1);
}

_QWORD *sub_23A01DF14(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_239FEBE68();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_23A01E058(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  void *__p;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  if (a4 < 2)
    return;
  sub_23A01D9E8(&v37, a1);
  v8 = (uint64_t *)sub_23A01E2FC((uint64_t)a1, a3, a4);
  v9 = v8;
  v10 = (uint64_t *)(a2 - 48);
  if ((uint64_t *)(a2 - 48) == v8)
  {
    *v8 = v37;
    if (&v37 != v8)
      sub_23A01DF14(v8 + 1, (char *)__p, v39, (v39 - (_BYTE *)__p) >> 2);
    v31 = v40;
    v30 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v34 = (std::__shared_weak_count *)v9[5];
    v9[4] = v31;
    v9[5] = (uint64_t)v30;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    goto LABEL_21;
  }
  v11 = *(char **)(a2 - 40);
  *v8 = *(_QWORD *)(a2 - 48);
  sub_23A01DF14(v8 + 1, v11, *(char **)(a2 - 32), (uint64_t)(*(_QWORD *)(a2 - 32) - (_QWORD)v11) >> 2);
  v13 = *(_QWORD *)(a2 - 16);
  v12 = *(_QWORD *)(a2 - 8);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v9[5];
  v9[4] = v13;
  v9[5] = v12;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      *v10 = v37;
      if (v10 == &v37)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  *v10 = v37;
  if (v10 != &v37)
LABEL_11:
    sub_23A01DF14((_QWORD *)(a2 - 40), (char *)__p, v39, (v39 - (_BYTE *)__p) >> 2);
LABEL_12:
  v19 = (uint64_t)(v9 + 6);
  v21 = v40;
  v20 = v41;
  if (v41)
  {
    v22 = (unint64_t *)&v41->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(a2 - 8);
  *(_QWORD *)(a2 - 16) = v21;
  *(_QWORD *)(a2 - 8) = v20;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_23A01DB24((uint64_t)a1, v19, a3, 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)a1) >> 4));
LABEL_21:
  v27 = v41;
  if (v41)
  {
    v28 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_23A01E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A01DAB0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A01E2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  void *__p;
  void *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (_QWORD *)a1;
    a1 += 48 * v5 + 48;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 >= a3)
      goto LABEL_20;
    sub_23A01D9E8(&v33, (uint64_t *)a1);
    sub_23A01D9E8(&v29, (uint64_t *)(a1 + 48));
    v11 = *((float *)&v33 + 1);
    v12 = *((float *)&v29 + 1);
    v13 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v16 = __p;
        if (!__p)
          goto LABEL_12;
LABEL_11:
        v31 = v16;
        operator delete(v16);
        goto LABEL_12;
      }
    }
    v16 = __p;
    if (__p)
      goto LABEL_11;
LABEL_12:
    v17 = v36;
    if (!v36)
      goto LABEL_16;
    v18 = (unint64_t *)&v36->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (v19)
    {
LABEL_16:
      v20 = v34;
      if (!v34)
        goto LABEL_18;
LABEL_17:
      v35 = v20;
      operator delete(v20);
      goto LABEL_18;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = v34;
    if (v34)
      goto LABEL_17;
LABEL_18:
    if (v11 > v12)
    {
      a1 += 48;
      v5 = v10;
    }
LABEL_20:
    *v8 = *(_QWORD *)a1;
    if (v8 != (_QWORD *)a1)
      sub_23A01DF14(v8 + 1, *(char **)(a1 + 8), *(char **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
    v22 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)v8[5];
    v8[4] = v22;
    v8[5] = v21;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  while (v5 <= v7);
  return a1;
}

_QWORD *sub_23A01E4FC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      sub_239FEBE68();
    v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[2] = &v4[48 * a2];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23A01E5A4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_23A09DF84((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A01E5C4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556)
      sub_239FEBE68();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v6];
    do
    {
      sub_23A01D9E8(&v7[v8], (uint64_t *)(v3 + v8));
      v8 += 48;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_23A01E678(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_23A09DF84((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_23A01E698(uint64_t *a1@<X1>, int a2@<W2>, char **a3@<X8>)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v30;
  char *v31;

  if (a2)
  {
    if (a2 < 0)
      sub_239FEBE68();
    v4 = a2;
    v5 = 8 * a2;
    v31 = (char *)operator new(v5);
    v27 = &v31[8 * v4];
    bzero(v31, v5);
    v30 = v31;
    v28 = &v31[v5];
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v30 = 0;
  }
  v7 = *a1;
  v6 = a1[1];
  if ((int)((unint64_t)(v6 - *a1) >> 2) >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      while (v8 < v10)
      {
        *(_DWORD *)v8 = *(_DWORD *)(v7 + 4 * v9);
        *((_DWORD *)v8 + 1) = v9;
        v8 += 8;
        if (++v9 >= (int)((unint64_t)(v6 - v7) >> 2))
          goto LABEL_34;
      }
      v12 = (v8 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_239FEBE68();
      if ((v10 - v11) >> 2 > v13)
        v13 = (v10 - v11) >> 2;
      if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14 >> 61)
        sub_239FF1A44();
      v15 = operator new(8 * v14);
      v16 = &v15[8 * v12];
      *v16 = *(_DWORD *)(v7 + 4 * v9);
      v16[1] = v9;
      if (v8 == v11)
      {
        v19 = &v15[8 * v12];
        v10 = &v15[8 * v14];
        v8 = (char *)(v16 + 2);
        if (!v11)
          goto LABEL_22;
LABEL_21:
        operator delete(v11);
        v7 = *a1;
        v6 = a1[1];
        goto LABEL_22;
      }
      v17 = v8 - 8 - v11;
      if (v17 < 0x168
        || &v15[v8 - v11 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v11 - 8]
        || &v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
        || (unint64_t)(v11 - v15) < 0x20)
      {
        break;
      }
      v21 = (v17 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = &v8[-v22];
      v19 = (char *)&v16[v22 / 0xFFFFFFFFFFFFFFFCLL];
      v23 = &v15[8 * v12 - 16];
      v24 = v8 - 16;
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_19;
LABEL_20:
      v10 = &v15[8 * v14];
      v8 = (char *)(v16 + 2);
      if (v11)
        goto LABEL_21;
LABEL_22:
      v11 = v19;
      if (++v9 >= (int)((unint64_t)(v6 - v7) >> 2))
        goto LABEL_34;
    }
    v18 = v8;
    v19 = &v15[8 * v12];
    do
    {
LABEL_19:
      v20 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v19 - 1) = v20;
      v19 -= 8;
    }
    while (v18 != v11);
    goto LABEL_20;
  }
  v8 = 0;
  v11 = 0;
LABEL_34:
  sub_23A01EAB0(v11, v8, v30, v28);
  *a3 = v30;
  a3[1] = v28;
  a3[2] = v27;
  if (v11)
    operator delete(v11);
}

void sub_23A01E978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;

  if (v18)
  {
    operator delete(v18);
    __p = a17;
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A01E9D0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 128) + 24))(__p);
  v5 = *(void **)(a1 + 144);
  if (v13 >= 0)
    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], v2, (uint64_t)CFSTR("%s"), v3, v4, __p);
  else
    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], v2, (uint64_t)CFSTR("%s"), v3, v4, __p[0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_checkIfCaptionInDenylist_(v5, v7, (uint64_t)v6, v8, v9);

  if (v13 < 0)
    operator delete(__p[0]);
  return v10;
}

void sub_23A01EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A01EAB0(_QWORD *a1, _QWORD *a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  float v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float v35;
  float v36;
  float v37;
  int v38;
  char *v39;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;

  if (a3 != a4)
  {
    v5 = a3;
    if (a1 == a2)
    {
      a1 = a2;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      do
      {
        *(_DWORD *)v5 = *(_DWORD *)a1;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a1++ + 1);
        v5 += 8;
      }
      while (a1 != a2 && v5 != a4);
      v7 = v5 - a3;
      v8 = (v5 - a3) >> 3;
      if (v5 - a3 >= 9 && (unint64_t)v7 >= 0x10)
      {
        v41 = (unint64_t)(v8 - 2) >> 1;
        v42 = v41;
        do
        {
          v43 = 8 * v42;
          if (v41 >= (8 * v42) >> 3)
          {
            v44 = (v43 >> 2) | 1;
            v45 = (float *)&a3[8 * v44];
            if ((v43 >> 2) + 2 < v8 && *v45 > v45[2])
            {
              v45 += 2;
              v44 = (v43 >> 2) + 2;
            }
            v46 = (float *)&a3[v43];
            v47 = *v46;
            v48 = *v45;
            v49 = *v46;
            if (*v45 <= *v46)
            {
              v50 = *((_DWORD *)v46 + 1);
              do
              {
                v51 = v46;
                v46 = v45;
                *v51 = v48;
                v51[1] = v45[1];
                if (v41 < v44)
                  break;
                v52 = 2 * v44;
                v44 = (2 * v44) | 1;
                v45 = (float *)&a3[8 * v44];
                v53 = v52 + 2;
                if (v53 < v8 && *v45 > v45[2])
                {
                  v45 += 2;
                  v44 = v53;
                }
                v48 = *v45;
              }
              while (*v45 <= v49);
              *v46 = v47;
              *((_DWORD *)v46 + 1) = v50;
            }
          }
          v23 = v42-- <= 0;
        }
        while (!v23);
      }
    }
    if (a1 != a2)
    {
      if (v7 >= 16)
      {
        v9 = (float *)(a3 + 8);
        v10 = (float *)(a3 + 16);
        while (1)
        {
          if (COERCE_FLOAT(*a1) > *(float *)a3)
          {
            *(_QWORD *)a3 = *a1;
            if (v7 == 16 || *v9 <= *v10)
            {
              v11 = (float *)(a3 + 8);
              v12 = 1;
              v13 = *(float *)a3;
              v14 = *v9;
              v15 = *(float *)a3;
              if (*v9 <= *(float *)a3)
              {
LABEL_27:
                v16 = *((_DWORD *)a3 + 1);
                v17 = (float *)a3;
                do
                {
                  v18 = v17;
                  v17 = v11;
                  *v18 = v14;
                  v18[1] = v11[1];
                  if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v12)
                    break;
                  v19 = 2 * v12;
                  v12 = (2 * v12) | 1;
                  v11 = (float *)&a3[8 * v12];
                  v20 = v19 + 2;
                  if (v20 < v8 && *v11 > v11[2])
                  {
                    v11 += 2;
                    v12 = v20;
                  }
                  v14 = *v11;
                }
                while (*v11 <= v15);
                *v17 = v13;
                *((_DWORD *)v17 + 1) = v16;
              }
            }
            else
            {
              v11 = (float *)(a3 + 16);
              v12 = 2;
              v13 = *(float *)a3;
              v14 = *v10;
              v15 = *(float *)a3;
              if (*v10 <= *(float *)a3)
                goto LABEL_27;
            }
          }
          if (++a1 == a2)
            goto LABEL_33;
        }
      }
      do
      {
        if (COERCE_FLOAT(*a1) > *(float *)a3)
          *(_QWORD *)a3 = *a1;
        ++a1;
      }
      while (a1 != a2);
    }
LABEL_33:
    if (v7 >= 9)
    {
      v21 = (unint64_t)v7 >> 3;
      v22 = v5;
      do
      {
        v24 = 0;
        v25 = *(float *)a3;
        v26 = *((_DWORD *)a3 + 1);
        v27 = a3;
        do
        {
          v28 = v27;
          v27 += 8 * v24 + 8;
          v29 = 2 * v24;
          v24 = (2 * v24) | 1;
          v30 = v29 + 2;
          if (v30 < v21 && *(float *)v27 > *((float *)v27 + 2))
          {
            v27 += 8;
            v24 = v30;
          }
          *(_DWORD *)v28 = *(_DWORD *)v27;
          *((_DWORD *)v28 + 1) = *((_DWORD *)v27 + 1);
        }
        while (v24 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        v31 = v22 - 8;
        if (v27 == v22 - 8)
        {
          *(float *)v27 = v25;
          *((_DWORD *)v27 + 1) = v26;
        }
        else
        {
          *(_DWORD *)v27 = *((_DWORD *)v22 - 2);
          *((_DWORD *)v27 + 1) = *((_DWORD *)v22 - 1);
          *((float *)v22 - 2) = v25;
          *((_DWORD *)v22 - 1) = v26;
          v32 = v27 - a3 + 8;
          if (v32 >= 9)
          {
            v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            v34 = &a3[8 * v33];
            v35 = *(float *)v27;
            v36 = COERCE_FLOAT(*(_QWORD *)v34);
            v37 = *(float *)v27;
            if (v36 > *(float *)v27)
            {
              v38 = *((_DWORD *)v27 + 1);
              do
              {
                v39 = v27;
                v27 = v34;
                *(float *)v39 = v36;
                *((_DWORD *)v39 + 1) = *((_DWORD *)v34 + 1);
                if (!v33)
                  break;
                v33 = (v33 - 1) >> 1;
                v34 = &a3[8 * v33];
                v36 = COERCE_FLOAT(*(_QWORD *)v34);
              }
              while (v36 > v37);
              *(float *)v27 = v35;
              *((_DWORD *)v27 + 1) = v38;
            }
          }
        }
        v22 = v31;
        v23 = v21-- <= 2;
      }
      while (!v23);
    }
  }
  return a2;
}

char *sub_23A01EEA4(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_239FEBE68();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_239FF1A44();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v13 = v11 + 32;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14)
      return v13;
    goto LABEL_17;
  }
  v16 = 0;
  do
  {
    v17 = &v11[v16];
    v18 = &v14[v16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_DWORD *)v17 - 2) = *(_DWORD *)&v14[v16 - 8];
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    v20 = v14;
    do
    {
      v22 = (void *)*((_QWORD *)v20 - 4);
      v20 -= 32;
      v21 = v22;
      if (v22)
      {
        *((_QWORD *)v14 - 3) = v21;
        operator delete(v21);
      }
      v14 = v20;
    }
    while (v20 != v19);
    v14 = v19;
  }
  if (v14)
LABEL_17:
    operator delete(v14);
  return v13;
}

void sub_23A01F000(unsigned __int8 *a1, const std::locale *a2)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  std::locale::id *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int locale;
  std::locale v17;

  v3 = (char)a1[23];
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(unsigned __int8 **)a1;
  if (v3 >= 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  locale = (int)a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  if (v5)
  {
    v6 = &v4[v5];
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    v8 = v4;
    while (1)
    {
      v9 = *v8;
      v10 = std::locale::use_facet(&v17, v7);
      if ((v9 & 0x80) != 0 || (*((_DWORD *)&v10[1].~facet + v9) & locale) == 0)
        break;
      ++v8;
      if (!--v5)
      {
        v8 = v6;
        break;
      }
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = a1[23];
  v12 = (char)v11;
  v13 = *(_QWORD *)a1;
  if ((v11 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = *(unsigned __int8 **)a1;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a1 + 1);
  v15 = v4 - v14;
  if (v11 < v4 - v14)
    sub_23A01F158();
  if (v8 - v4 == -1)
  {
    if (v12 < 0)
    {
      *((_QWORD *)a1 + 1) = v15;
      *(_BYTE *)(v13 + v15) = 0;
    }
    else
    {
      a1[23] = v15 & 0x7F;
      a1[v15] = 0;
    }
  }
  else
  {
    sub_23A01F16C(a1, v15, v8 - v4);
  }
  std::locale::~locale(&v17);
}

void sub_23A01F130(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_23A01F144(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_23A01F158()
{
  sub_239FF1D10("basic_string");
}

_QWORD *sub_23A01F16C(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a3)
    return result;
  v3 = result;
  v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    v6 = (_QWORD *)*result;
    v5 = result[1];
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = v5 - a2;
    if (v5 - a2 <= a3)
      goto LABEL_8;
  }
  else
  {
    v5 = *((unsigned __int8 *)result + 23);
    v6 = result;
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = *((unsigned __int8 *)result + 23) - a2;
    if (v7 <= a3)
      goto LABEL_8;
  }
  result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)v3 + 23);
LABEL_8:
  v9 = v5 - v8;
  if ((v4 & 0x80) != 0)
    v3[1] = v9;
  else
    *((_BYTE *)v3 + 23) = v9 & 0x7F;
  *((_BYTE *)v6 + v9) = 0;
  return result;
}

void sub_23A01F1FC(char *a1, const std::locale *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  std::locale::id *v7;
  uint64_t v8;
  uint64_t v9;
  const std::locale::facet *v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  int locale;
  std::locale v19;
  int v20;
  std::locale v21;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  if (v3 >= 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = &v4[v5];
  locale = (int)a2->__locale_;
  std::locale::locale(&v19, a2 + 1);
  v20 = locale;
  std::locale::locale(&v21, &v19);
  v7 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (v5)
  {
    v8 = v5;
    v9 = v4[v5 - 1];
    v10 = std::locale::use_facet(&v21, v7);
    if ((v9 & 0x80) != 0)
    {
      v4 = v6;
      break;
    }
    --v6;
    v11 = *((_DWORD *)&v10[1].~facet + v9);
    v5 = v8 - 1;
    if ((v11 & v20) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v21);
  v12 = a1[23];
  v13 = (char)v12;
  v14 = *(char **)a1;
  if ((v12 & 0x80u) == 0)
    v15 = a1;
  else
    v15 = *(char **)a1;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a1 + 1);
  v16 = v4 - v15;
  if (v12 < v4 - v15)
    sub_23A01F158();
  v17 = &v15[v12] - v4;
  if (v17 == -1)
  {
    if (v13 < 0)
    {
      *((_QWORD *)a1 + 1) = v16;
      v14[v16] = 0;
    }
    else
    {
      a1[23] = v16 & 0x7F;
      a1[v16] = 0;
    }
  }
  else
  {
    sub_23A01F16C(a1, v16, v17);
  }
  std::locale::~locale(&v19);
}

void sub_23A01F354(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_23A01F368(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_23A01F384(void *__p)
{
  operator delete(__p);
}

void sub_23A01F3A0(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_23A01F3B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

uint64_t sub_23A01F3C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23A01F3D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_23A01F3E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_23A01F570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A01F588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01F59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01F7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_23A01F814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A01F838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A01F858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A01F874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A01F894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01F8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A01F8C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01F8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A01F8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01FBD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A01FC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A01FC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A01FC70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A01FC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A01FCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A01FCB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A01FE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A01FE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A01FEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A020004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02026C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void *v15;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v15);
  MEMORY[0x23B83FE88](v10, 0xA1C409BE6959DLL);
  sub_239FF1A6C((uint64_t)&a9);
  if (*(char *)(v12 - 65) < 0)
    operator delete(*(void **)(v12 - 88));
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v16, v9);
    __cxa_end_catch();
    JUMPOUT(0x23A020240);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23A02041C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;

  MEMORY[0x23B83FE88](v3, 0x20C4093837F09);
  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_23A0207E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_239FF5234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A0207F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  sub_239FF5234((uint64_t)&a20);
  sub_239FF150C((uint64_t)&a30);
  sub_239FF15AC(&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_23A020934(uint64_t result, char *a2)
{
  int v2;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if ((_DWORD)result)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v10, a2);
    sub_239FEEC54("PixelBufferTransfer operation [", &v10, &v11);
    sub_239FEED88("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_23A020A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_23A020B0C(void *a1, void *a2, _QWORD *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;

  v7 = a1;
  v8 = a2;
  v12 = a4;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Nil taxonomy object.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  objc_msgSend__vocabularyNamed_(v7, v9, (uint64_t)v8, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v43, "Invalid vocabulary name ");
    v21 = objc_retainAutorelease(v8);
    v26 = (char *)objc_msgSend_UTF8String(v21, v22, v23, v24, v25);
    sub_239FEED88(v26, &v43, &v44);
    sub_239FEE1FC(v41, " in taxonomy ");
    if ((v42 & 0x80u) == 0)
      v27 = (const std::string::value_type *)v41;
    else
      v27 = (const std::string::value_type *)v41[0];
    if ((v42 & 0x80u) == 0)
      v28 = v42;
    else
      v28 = v41[1];
    v29 = std::string::append(&v44, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    objc_msgSend_name(v7, v31, v32, v33, v34);
    v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v40 = (char *)objc_msgSend_UTF8String(v35, v36, v37, v38, v39);
    sub_239FEED88(v40, &v45, &v46);
    std::runtime_error::runtime_error(v20, &v46);
    __cxa_throw(v20, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v46.__r_.__value_.__r.__words[0] = sub_23A020E3C(a3);
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  v18 = objc_msgSend_internalCount(v13, v14, v15, v16, v17);
  sub_23A020F9C((uint64_t)&v46, v18);
  sub_23A02117C(v13, (uint64_t)v46.__r_.__value_.__l.__data_, v12);

}

void sub_23A020CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 65) < 0)
    operator delete(*(void **)(v40 - 88));

  if (a33 < 0)
  {
    operator delete(a28);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_6:
    if (a21 < 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_7:
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_14:

      _Unwind_Resume(a1);
    }
LABEL_13:
    __cxa_free_exception(v37);

    _Unwind_Resume(a1);
  }
LABEL_12:
  if (!v39)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_23A020E3C(_QWORD *a1)
{
  std::runtime_error *exception;
  std::runtime_error *v4;
  std::string v5;
  std::string v6;

  if (a1[10] != 1 || a1[11] != 1 || a1[13] != 1 || a1[14] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Expected a one-dimensional likelihood buffer with a size only along the channel dimension, but got something else.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (a1[17] != 1)
  {
    v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v5, a1[17]);
    sub_239FEEC54("Expected a contiguous likelihood buffer, but stride along the channel dimension is ", &v5, &v6);
    std::runtime_error::runtime_error(v4, &v6);
    __cxa_throw(v4, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *a1;
}

void sub_23A020F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_23A020F9C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (*(_QWORD *)(result + 8) != a2)
  {
    v3 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, *(_QWORD *)(v3 + 8));
    sub_239FEEC54("Length of buffer ", &v10, &v11);
    sub_239FEED88(" does not match the expected length ", &v11, &v12);
    std::to_string(&v9, a2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_23A021090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_23A02117C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[4];
  _QWORD v15[4];

  v5 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = a2;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = sub_23A02144C;
  v10[3] = &unk_250B0E130;
  v12 = v15;
  v13 = v14;
  v11 = v5;
  v6 = v5;
  objc_msgSend__enumerateVisibleLabelsAndIndicesInVocabularyUsingBlock_(a1, v7, (uint64_t)v10, v8, v9);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v15, 8);
}

void sub_23A02123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_23A02126C(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  const void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  uint64_t started;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;

  v7 = a1;
  v12 = a2;
  if (v7)
  {
    objc_msgSend_relations(v7, v8, v9, v10, v11);
    v13 = v37;
  }
  else
  {
    v13 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
  }
  v34 = v13;
  v35 = v38;
  LODWORD(v36) = 1082130432;
  v14 = (const void *)sub_23A020E3C(a3);
  v16 = v15;
  objc_msgSend__vocabularyNamed_(v7, v15, (uint64_t)v12, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend_internalCount(v7, v20, v21, v22, v23);
  v29 = v24;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v24)
  {
    if (v24 >> 62)
      sub_239FEBE68();
    v30 = 4 * v24;
    v31 = (char *)operator new(4 * v24);
    *a4 = (uint64_t)v31;
    v32 = &v31[4 * v29];
    a4[2] = (uint64_t)v32;
    memset_pattern16(v31, &unk_23A0A37A0, v30);
    a4[1] = (uint64_t)v32;
  }
  else
  {
    v31 = 0;
  }
  started = objc_msgSend_startIndex(v19, v25, v26, v27, v28, v34, v35, v36);
  if (v16)
    memmove(&v31[4 * started], v14, 4 * (_QWORD)v16);
  sub_23A02B624((uint64_t)&v34, a4);

  if ((_BYTE)v39)
}

void sub_23A0213D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0213EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v19;

  v19 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v19;
    operator delete(v19);
  }

  if (a14)
  _Unwind_Resume(a1);
}

void sub_23A02144C(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += 4 * (a3 - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
  (*(void (**)(float))(a1[4] + 16))(**(float **)(*(_QWORD *)(a1[5] + 8) + 24));

}

void sub_23A0214E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23A0215A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0215E0(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  float *v16;
  void *v17;
  unint64_t v18;
  id v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  std::runtime_error *exception;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  char v37;
  __int16 v38;
  char v39;
  _QWORD v40[4];
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  const char *v46;
  char v47;
  __int128 v48;
  __int128 __p;
  int v50;
  id v51;

  v9 = a2;
  v10 = a3;
  v41 = 0;
  v42 = (float *)&v41;
  v43 = 0x7812000000;
  v44 = sub_23A0218A4;
  v45 = sub_23A021934;
  v46 = "'0";
  v48 = 0u;
  __p = 0u;
  v50 = 1065353216;
  v51 = 0;
  v47 = a1;
  objc_msgSend__vocabularyNamed_(v9, v11, (uint64_t)v10, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)*((_QWORD *)v42 + 14);
  *((_QWORD *)v42 + 14) = v14;

  v16 = v42;
  v17 = (void *)*((_QWORD *)v42 + 14);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not load the detection vocabulary");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *((_QWORD *)v42 + 7) = -1;
  v18 = HIDWORD(a4);
  *((_QWORD *)v16 + 8) = 0xBF8000003F800000;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = 0;
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 3221225472;
  v31[2] = sub_23A021988;
  v31[3] = &unk_250B0E578;
  v34 = &v41;
  v19 = v9;
  v32 = v19;
  v20 = v10;
  v33 = v20;
  v35 = v40;
  v36 = a4;
  v37 = BYTE4(a4);
  v39 = HIBYTE(a4);
  v38 = HIDWORD(a4) >> 8;
  objc_msgSend__enumerateAllLabelsInVocabularyUsingBlock_(v17, v21, (uint64_t)v31, v22, v23);
  v24 = *(float *)&a4;
  v25 = v42;
  if (!(_BYTE)v18)
    v24 = 0.1;
  v42[16] = v24;
  v26 = *((_OWORD *)v25 + 3);
  *(_QWORD *)(a5 + 16) = *((_QWORD *)v25 + 8);
  *(_OWORD *)a5 = v26;
  sub_23A022ED8(a5 + 24, (uint64_t)(v25 + 18));
  *(_QWORD *)(a5 + 64) = *((id *)v25 + 14);

  _Block_object_dispose(v40, 8);
  _Block_object_dispose(&v41, 8);

  v27 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = (void *)v48;
  *(_QWORD *)&v48 = 0;
  if (v29)
    operator delete(v29);

}

void sub_23A02183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;

  __cxa_free_exception(v31);
  _Block_object_dispose(&a23, 8);
  sub_239FEE31C((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_23A0218A4(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(result + 48) = v2;
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 88) = v4;
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 96) = v5;
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(result + 80);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v6 %= v7;
    }
    else
    {
      v6 &= v7 - 1;
    }
    *(_QWORD *)(v3 + 8 * v6) = result + 88;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(result + 112) = v8;
  return result;
}

void sub_23A021934(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 88);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
    operator delete(v4);
}

void sub_23A021988(uint64_t a1, void *a2)
{
  id v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  v3 = a2;
  if (v3)
  {
    v4 = (int *)(a1 + 64);
    if (!*(_BYTE *)(a1 + 68))
      v4 = (int *)&unk_23A0A37D4;
    v5 = *v4;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 72;
    v34.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    *((_DWORD *)sub_23A024FD0(v6, (unint64_t *)&v34, (uint64_t)&unk_23A0A31B0, &v35) + 6) = v5;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if ((*(_QWORD *)(v7 + 56) & 0x8000000000000000) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      objc_msgSend_name(*(void **)(a1 + 32), v9, v10, v11, v12);
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v18 = (char *)objc_msgSend_UTF8String(v13, v14, v15, v16, v17);
      sub_239FEE1FC(&v31, v18);
      sub_239FEEC54("Multiple background labels found in taxonomy ", &v31, &v32);
      sub_239FEED88(" vocabulary ", &v32, &v33);
      v19 = objc_retainAutorelease(*(id *)(a1 + 40));
      v24 = (char *)objc_msgSend_UTF8String(v19, v20, v21, v22, v23);
      sub_239FEE1FC(v29, v24);
      if ((v30 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v29;
      else
        v25 = (const std::string::value_type *)v29[0];
      if ((v30 & 0x80u) == 0)
        v26 = v30;
      else
        v26 = v29[1];
      v27 = std::string::append(&v33, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      sub_239FEED88(".", &v34, &v35);
      std::runtime_error::runtime_error(exception, &v35);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 68) = 1063675494;
  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);

}

void sub_23A021B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  int v41;
  uint64_t v42;

  if (*(char *)(v42 - 65) < 0)
  {
    operator delete(*(void **)(v42 - 88));
    if ((a38 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0)
    {
LABEL_15:
      operator delete(a15);

      if ((v41 & 1) != 0)
      {
LABEL_16:
        __cxa_free_exception(v39);

        _Unwind_Resume(a1);
      }
LABEL_17:

      _Unwind_Resume(a1);
    }
LABEL_13:

    if (v41)
      goto LABEL_16;
    goto LABEL_17;
  }
LABEL_12:
  operator delete(a21);
  if (a20 < 0)
    goto LABEL_15;
  goto LABEL_13;
}

void sub_23A021CAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  float v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  float **v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  size_t v78;
  size_t v79;
  __int128 *p_p;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::runtime_error *v93;
  std::runtime_error *exception;
  std::runtime_error *v95;
  uint64_t v96;
  void *__dst;
  __int128 v98;
  int v99;
  __int128 __p;
  unint64_t v101;
  uint64_t (**v102)();
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  uint64_t (**v110)();
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  _QWORD v115[2];
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  _QWORD v119[2];
  _QWORD *v120;
  _QWORD *v121;
  std::__shared_weak_count *v122;

  LOWORD(v115[0]) = 1;
  sub_239FF3910((uint64_t)v119, a1, v115);
  LOWORD(v110) = 1;
  sub_239FF3910((uint64_t)v115, a2, &v110);
  sub_23A0225F8(&v110, (uint64_t)v119);
  v96 = a4;
  v11 = *(id *)(a3 + 64);
  v108 = 0;
  v109 = 0;
  v107 = 0;
  __dst = (void *)v120[2];
  if (!__dst || (v12 = v120[3]) == 0)
  {
    v15 = 0;
    goto LABEL_61;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  while (2)
  {
    v17 = 0;
    while (2)
    {
      if (v114 != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v19 = *(float *)(v111
                     + 4
                     * (*(_QWORD *)(a3 + 8) * *((_QWORD *)v112 + 1)
                      + *((_QWORD *)v112 + 2) * v16
                      + *((_QWORD *)v112 + 3) * v17));
      if (v19 > *(float *)(a3 + 20) || *(_BYTE *)a3 && v19 > (float)(1.0 - *(float *)(a3 + 16)))
        goto LABEL_8;
      v20 = 0;
      v21 = (float)(1.0 - v19) * 0.5;
      v22 = -1;
      v23 = 1.1755e-38;
      while (v20 < objc_msgSend_internalCount(v11, v7, v8, v9, v10, v96))
      {
        if (v20 != *(_QWORD *)(a3 + 8))
        {
          if (v114 != 4)
          {
            v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v93, "Invalid number of indices provided.");
            __cxa_throw(v93, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v24 = *((_QWORD *)v112 + 1) * v20 + *((_QWORD *)v112 + 2) * v16 + *((_QWORD *)v112 + 3) * v17;
          v25 = *(float *)(v111 + 4 * v24);
          if (*(_BYTE *)a3 && v25 > v21)
          {
            v22 = v20;
            v23 = *(float *)(v111 + 4 * v24);
            break;
          }
          if (v25 > v23)
          {
            v22 = v20;
            v23 = *(float *)(v111 + 4 * v24);
          }
        }
        ++v20;
      }
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_8;
      v26 = *(int8x8_t *)(a3 + 32);
      if (!*(_QWORD *)&v26)
        goto LABEL_123;
      v27 = (uint8x8_t)vcnt_s8(v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] >= 2uLL)
      {
        v28 = v22;
        if (v22 >= *(_QWORD *)&v26)
          v28 = v22 % *(_QWORD *)&v26;
      }
      else
      {
        v28 = (*(_QWORD *)&v26 - 1) & v22;
      }
      v29 = *(float ***)(*(_QWORD *)(a3 + 24) + 8 * v28);
      if (!v29 || (v30 = *v29) == 0)
LABEL_123:
        sub_239FF1D10("unordered_map::at: key not found");
      if (v27.u32[0] < 2uLL)
      {
        v31 = *(_QWORD *)&v26 - 1;
        while (1)
        {
          v33 = *((_QWORD *)v30 + 1);
          if (v22 == v33)
          {
            if (*((_QWORD *)v30 + 2) == v22)
              goto LABEL_44;
          }
          else if ((v33 & v31) != v28)
          {
            goto LABEL_123;
          }
          v30 = *(float **)v30;
          if (!v30)
            goto LABEL_123;
        }
      }
      while (1)
      {
        v32 = *((_QWORD *)v30 + 1);
        if (v22 == v32)
          break;
        if (v32 >= *(_QWORD *)&v26)
          v32 %= *(_QWORD *)&v26;
        if (v32 != v28)
          goto LABEL_123;
LABEL_34:
        v30 = *(float **)v30;
        if (!v30)
          goto LABEL_123;
      }
      if (*((_QWORD *)v30 + 2) != v22)
        goto LABEL_34;
LABEL_44:
      if (v23 > v30[6])
      {
        if (v15 < v14)
        {
          *(_QWORD *)v15 = v16;
          *((_QWORD *)v15 + 1) = v17;
          *((float *)v15 + 4) = v23;
          *((_QWORD *)v15 + 3) = v22;
          v15 += 32;
          v18 = v13;
          goto LABEL_7;
        }
        v34 = v14;
        v35 = (v15 - v13) >> 5;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 59)
          sub_239FEBE68();
        v37 = v34 - v13;
        v38 = (v34 - v13) >> 4;
        if (v38 > v36)
          v36 = v38;
        if (v37 >= 0x7FFFFFFFFFFFFFE0)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v36;
        if (v39 >> 59)
          sub_239FF1A44();
        v40 = (char *)operator new(32 * v39);
        v41 = &v40[32 * v35];
        *(_QWORD *)v41 = v16;
        *((_QWORD *)v41 + 1) = v17;
        *((float *)v41 + 4) = v23;
        *((_QWORD *)v41 + 3) = v22;
        if (v15 == v13)
        {
          v18 = &v40[32 * v35];
          v14 = &v40[32 * v39];
          v15 = v41 + 32;
          v107 = v41;
          v108 = v41 + 32;
          v109 = v14;
          if (!v13)
            goto LABEL_7;
        }
        else
        {
          v42 = &v40[32 * v35];
          do
          {
            v43 = *((_OWORD *)v15 - 1);
            v18 = v42 - 32;
            *((_OWORD *)v42 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v42 - 1) = v43;
            v15 -= 32;
            v42 -= 32;
          }
          while (v15 != v13);
          v14 = &v40[32 * v39];
          v15 = v41 + 32;
          v107 = v18;
          v108 = v41 + 32;
          v109 = v14;
          if (!v13)
          {
LABEL_7:
            v108 = v15;
            v13 = v18;
            goto LABEL_8;
          }
        }
        operator delete(v13);
        goto LABEL_7;
      }
LABEL_8:
      if (++v17 != v12)
        continue;
      break;
    }
    if ((void *)++v16 != __dst)
      continue;
    break;
  }
LABEL_61:
  sub_23A0225F8(&v102, (uint64_t)v115);
  *(_QWORD *)v96 = 0;
  *(_QWORD *)(v96 + 8) = 0;
  *(_QWORD *)(v96 + 16) = 0;
  v44 = (char *)v107;
  sub_23A0226E4((char **)v96, (v15 - (_BYTE *)v107) >> 5);
  if (v44 != v15)
  {
    v49 = v44 + 16;
    while (2)
    {
      if (v106 != 4)
      {
        v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v95, "Invalid number of indices provided.");
        __cxa_throw(v95, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v52 = v49 - 16;
      v53 = *((_QWORD *)v104 + 1);
      v54 = *((_QWORD *)v49 - 2) * *((_QWORD *)v104 + 2) + *((_QWORD *)v49 - 1) * *((_QWORD *)v104 + 3);
      v55 = *(float *)(v103 + 4 * (v54 + v53));
      v56 = *(float *)(v103 + 4 * v54);
      if (v55 <= 1.0)
        v57 = *(float *)(v103 + 4 * (v54 + v53));
      else
        v57 = 1.0;
      if (v55 >= 0.0)
        v58 = v57;
      else
        v58 = 0.0;
      if (v56 <= 1.0)
        v59 = *(float *)(v103 + 4 * v54);
      else
        v59 = 1.0;
      v60 = 2 * v53;
      v61 = v54 + 3 * v53;
      v62 = *(float *)(v103 + 4 * v61);
      v63 = v54 + v60;
      v64 = *(float *)(v103 + 4 * v63);
      if (v56 >= 0.0)
        v65 = v59;
      else
        v65 = 0.0;
      if (v62 <= 1.0)
        v66 = *(float *)(v103 + 4 * v61);
      else
        v66 = 1.0;
      if (v62 < v58)
        v66 = v58;
      if (v64 <= 1.0)
        v67 = *(float *)(v103 + 4 * v63);
      else
        v67 = 1.0;
      if (v64 < v65)
        v67 = v65;
      if (vabds_f32(v66, v58) < 0.000001 && vabds_f32(v67, v65) < 0.000001)
        goto LABEL_65;
      *(_QWORD *)&v98 = __PAIR64__(LODWORD(v65), LODWORD(v58));
      *((float *)&v98 + 2) = v66 - v58;
      *((float *)&v98 + 3) = v67 - v65;
      v99 = *(_DWORD *)v49;
      objc_msgSend_labels(v11, v45, v46, v47, v48, v96);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v68, v69, *((_QWORD *)v49 + 1), v70, v71);
      v72 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v77 = (const char *)objc_msgSend_UTF8String(v72, v73, v74, v75, v76);
      v78 = strlen(v77);
      if (v78 >= 0x7FFFFFFFFFFFFFF8)
        sub_239FEBDE0();
      v79 = v78;
      if (v78 >= 0x17)
      {
        v83 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17)
          v83 = v78 | 7;
        v84 = v83 + 1;
        p_p = (__int128 *)operator new(v83 + 1);
        *((_QWORD *)&__p + 1) = v79;
        v101 = v84 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
      }
      else
      {
        HIBYTE(v101) = v78;
        p_p = &__p;
        if (!v78)
        {
          LOBYTE(__p) = 0;
          v81 = v96;
          v82 = *(_QWORD *)(v96 + 8);
          if (v82 >= *(_QWORD *)(v96 + 16))
            goto LABEL_100;
LABEL_63:
          v50 = v98;
          *(_DWORD *)(v82 + 16) = v99;
          *(_OWORD *)v82 = v50;
          v51 = __p;
          *(_QWORD *)(v82 + 40) = v101;
          *(_OWORD *)(v82 + 24) = v51;
          v101 = 0;
          __p = 0uLL;
          *(_QWORD *)(v81 + 8) = v82 + 48;
          goto LABEL_64;
        }
      }
      memmove(p_p, v77, v79);
      *((_BYTE *)p_p + v79) = 0;
      v81 = v96;
      v82 = *(_QWORD *)(v96 + 8);
      if (v82 < *(_QWORD *)(v96 + 16))
        goto LABEL_63;
LABEL_100:
      v85 = sub_23A02339C((void **)v81, (uint64_t)&v98);
      v86 = SHIBYTE(v101);
      *(_QWORD *)(v81 + 8) = v85;
      if (v86 < 0)
        operator delete((void *)__p);
LABEL_64:

LABEL_65:
      v49 += 32;
      if (v52 + 32 == v15)
        break;
      continue;
    }
  }
  v102 = &off_250B0DD08;
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v107)
    operator delete(v107);

  v110 = &off_250B0DD08;
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  v115[0] = &off_250B0DCE8;
  v87 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v119[0] = &off_250B0DCE8;
  v90 = v122;
  if (v122)
  {
    v91 = (unint64_t *)&v122->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
}

void sub_23A022454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  uint64_t v36;
  void *v38;
  void *v39;

  sub_239FF00D0(a9);
  if (a22)
  {
    operator delete(a22);
    v38 = a26;
    if (!a26)
    {
LABEL_3:

      v39 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v38 = a26;
    if (!a26)
      goto LABEL_3;
  }
  operator delete(v38);

  v39 = __p;
  if (!__p)
  {
LABEL_5:
    sub_239FF27B8(&a35);
    sub_239FF27B8((_QWORD *)(v36 - 176));
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v39);
  goto LABEL_5;
}

void sub_23A0225F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::runtime_error *exception;
  void *__p[3];

  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 40) + 32))(__p);
  sub_239FFECB4(a1, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23A0226AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A0226C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A0226E4(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char *v12;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_239FEBE68();
    v4 = a1[1];
    v5 = 48 * a2;
    v6 = (char *)operator new(48 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 3);
        *((_DWORD *)v9 - 8) = *((_DWORD *)v4 - 8);
        *((_OWORD *)v9 - 3) = v10;
        v11 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v11;
        v9 -= 48;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 48;
      }
      while (v4 != v2);
      v12 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v12)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 48;
        }
        while (v2 != v12);
        v2 = v12;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

char *sub_23A02280C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  __int128 *v8;
  uint64_t *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result != v3)
  {
    v4 = *(_QWORD *)result + 24;
    do
    {
      while (1)
      {
        v14 = (__int128 *)v4;
        v6 = sub_23A0253AC((uint64_t **)a2, (const void **)v4, (uint64_t)&unk_23A0A31B0, &v14);
        v7 = v6;
        v8 = (__int128 *)(v4 - 24);
        v9 = v6[8];
        if (v9 < v6[9])
          break;
        result = sub_23A023524((char **)v6 + 7, (uint64_t)v8);
        v7[8] = (uint64_t *)result;
        v5 = v4 + 24;
        v4 += 48;
        if (v5 == v3)
          return result;
      }
      v10 = *v8;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(v4 - 8);
      *(_OWORD *)v9 = v10;
      v11 = v9 + 3;
      if (*(char *)(v4 + 23) < 0)
      {
        sub_239FF1F64(v11, *(void **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v12 = *(_OWORD *)v4;
        v9[5] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)v11 = v12;
      }
      result = (char *)(v9 + 6);
      v7[8] = v9 + 6;
      v7[8] = v9 + 6;
      v13 = v4 + 24;
      v4 += 48;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_23A022908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 64) = v3;
  sub_23A0252F8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A022924(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A0252F8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A02293C(char *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  char *v5;
  double v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __int128 v20;
  _BYTE *v21;
  void **v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  char *v48;
  char **v49;
  BOOL v50;
  void *__p;
  uint64_t v52;
  unint64_t v53;
  char **v54;
  char *v55[2];

  sub_23A02280C(a1, (uint64_t)&v54);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (char *)v54;
  if (v54 != v55)
  {
    v6 = a3;
    do
    {
      v7 = *((_QWORD *)v5 + 7);
      v8 = (_OWORD *)*((_QWORD *)v5 + 8);
      if ((_OWORD *)v7 != v8)
      {
        sub_23A02371C(v7, v8, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 4)), 1);
        v10 = *((_QWORD *)v5 + 7);
        v9 = *((_QWORD *)v5 + 8);
        __p = 0;
        v52 = 0;
        v53 = 0;
        v11 = v9 - v10;
        if (v11)
        {
          if (v11 < 0)
            sub_239FEBE68();
          v12 = v11 / 48;
          v13 = ((unint64_t)(v11 / 48 - 1) >> 6) + 1;
          __p = operator new(8 * v13);
          v52 = 0;
          v53 = v13;
          sub_23A024E6C(&__p, v12, 0);
          v14 = 0;
          if (v12 <= 1)
            v15 = 1;
          else
            v15 = v12;
          do
          {
            if (((*(_QWORD *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
            {
              v16 = v14 + 1;
            }
            else
            {
              v17 = *((_QWORD *)v5 + 7);
              v18 = (__int128 *)(v17 + 48 * v14);
              v19 = *(_QWORD *)(a2 + 8);
              if (v19 >= *(_QWORD *)(a2 + 16))
              {
                *(_QWORD *)(a2 + 8) = sub_23A023524((char **)a2, v17 + 48 * v14);
                v16 = v14 + 1;
                if (v14 + 1 < v12)
                  goto LABEL_20;
              }
              else
              {
                v20 = *v18;
                *(_DWORD *)(v19 + 16) = *((_DWORD *)v18 + 4);
                *(_OWORD *)v19 = v20;
                v21 = (_BYTE *)(v19 + 24);
                v22 = (void **)(v17 + 48 * v14 + 24);
                if (*((char *)v18 + 47) < 0)
                {
                  sub_239FF1F64(v21, *v22, *(_QWORD *)(v17 + 48 * v14 + 32));
                }
                else
                {
                  v23 = *(_OWORD *)v22;
                  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v17 + 48 * v14 + 40);
                  *(_OWORD *)v21 = v23;
                }
                *(_QWORD *)(a2 + 8) = v19 + 48;
                *(_QWORD *)(a2 + 8) = v19 + 48;
                v16 = v14 + 1;
                if (v14 + 1 < v12)
                {
LABEL_20:
                  v24 = __p;
                  v25 = 48 * v14;
                  for (i = v16; v12 != i; ++i)
                  {
                    v27 = v24[i >> 6];
                    if ((v27 & (1 << i)) == 0)
                    {
                      v28 = *((_QWORD *)v5 + 7);
                      v29 = v28 + v25;
                      v30 = *(float *)(v28 + v25 + 56);
                      if (v30 > 0.0)
                      {
                        v31 = *(float *)(v29 + 60);
                        if (v31 > 0.0)
                        {
                          v32 = *((float *)v18 + 2);
                          if (v32 > 0.0)
                          {
                            v33 = *((float *)v18 + 3);
                            if (v33 > 0.0)
                            {
                              v34 = *(float *)(v29 + 48);
                              v35 = *(float *)v18;
                              v36 = v32 + *(float *)v18;
                              if (v34 < v36)
                              {
                                v37 = v30 + v34;
                                if (v35 < (float)(v30 + v34))
                                {
                                  v38 = *(float *)(v28 + v25 + 52);
                                  v39 = *((float *)v18 + 1);
                                  if (v38 < (float)(v33 + v39) && v39 < (float)(v31 + v38))
                                  {
                                    v40 = v36 - v34;
                                    v41 = v37 - v35;
                                    if (v32 >= v30)
                                      v42 = *(float *)(v28 + v25 + 56);
                                    else
                                      v42 = *((float *)v18 + 2);
                                    if (v41 < v40)
                                      v40 = v41;
                                    if (v42 < v40)
                                      v40 = v42;
                                    v43 = vabds_f32(v39, v31 + v38);
                                    v44 = vabds_f32(v38, v33 + v39);
                                    if (v33 >= v31)
                                      v45 = *(float *)(v29 + 60);
                                    else
                                      v45 = *((float *)v18 + 3);
                                    if (v44 < v43)
                                      v43 = v44;
                                    if (v45 < v43)
                                      v43 = v45;
                                    v46 = v40 * v43;
                                    v47 = (float)((float)(v30 * v31) + (float)(v32 * v33)) - v46;
                                    if (v47 != 0.0)
                                    {
                                      if (v46 / v47 <= v6)
                                        goto LABEL_21;
LABEL_47:
                                      v24[i >> 6] = v27 | (1 << i);
                                      goto LABEL_21;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (v6 < 0.0)
                        goto LABEL_47;
                    }
LABEL_21:
                    v25 += 48;
                  }
                }
              }
            }
            v14 = v16;
          }
          while (v16 != v15);
          if (__p)
            operator delete(__p);
        }
      }
      v48 = (char *)*((_QWORD *)v5 + 1);
      if (v48)
      {
        do
        {
          v49 = (char **)v48;
          v48 = *(char **)v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (char **)*((_QWORD *)v5 + 2);
          v50 = *v49 == v5;
          v5 = (char *)v49;
        }
        while (!v50);
      }
      v5 = (char *)v49;
    }
    while (v49 != v55);
  }
  sub_23A0252F8((uint64_t)&v54, v55[0]);
}

void sub_23A022CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  void **v13;

  sub_239FF00D0(v13);
  sub_23A0252F8((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

id sub_23A022D14(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  CSUObjectDetectionResult *v13;
  uint64_t v14;
  int v15;
  void *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  CGRect v26;

  v2 = (void *)objc_opt_new();
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = *a1 + 24;
    do
    {
      v5 = v4 - 24;
      v6 = *(float *)(v4 - 24);
      v7 = *(float *)(v4 - 20);
      v8 = *(float *)(v4 - 16);
      v9 = *(float *)(v4 - 12);
      v26.origin.x = v6;
      v26.origin.y = v7;
      v26.size.width = v8;
      v26.size.height = v9;
      if (!CGRectIsEmpty(v26))
      {
        v13 = [CSUObjectDetectionResult alloc];
        v14 = v4;
        if (*(char *)(v4 + 23) < 0)
          v14 = *(_QWORD *)v4;
        v15 = *(_DWORD *)(v4 - 8);
        objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v10, v14, v11, v12);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v17) = v15;
        v21 = (void *)objc_msgSend_initWithCGRect_score_label_(v13, v18, (uint64_t)v16, v19, v20, v6, v7, v8, v9, v17);

        objc_msgSend_addObject_(v2, v22, (uint64_t)v21, v23, v24);
      }
      v4 += 48;
    }
    while (v5 + 48 != v3);
  }
  return v2;
}

void sub_23A022E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23A022E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A022E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A022E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A022E90(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_23A022ED8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239FF4830(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_23A023018(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_23A022FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A022E90(v1);
  _Unwind_Resume(a1);
}

void sub_23A023004(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A022E90(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A023018(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239FF4830(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_23A023324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A023338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_23A02339C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_239FEBE68();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_239FF1A44();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v9 = &v7[48 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = v8 + 48;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *((_OWORD *)v12 - 3);
    *((_DWORD *)v8 - 8) = *((_DWORD *)v12 - 8);
    *((_OWORD *)v8 - 3) = v13;
    v14 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v14;
    v8 -= 48;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 48;
  }
  while (v12 != v11);
  v15 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v15)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 48;
    }
    while (v12 != v15);
    v12 = v15;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

char *sub_23A023524(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_239FF1A44();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v5];
  v18 = v10;
  v19 = v10;
  v20 = &v9[48 * v8];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_239FF1F64(v11, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    v3 = *a1;
    v4 = a1[1];
    v10 = v18;
    v12 = v19 + 48;
    if (v4 == *a1)
    {
LABEL_17:
      v15 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v10 + 5) = *(_QWORD *)(a2 + 40);
    v12 = v10 + 48;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v13 = *((_OWORD *)v4 - 3);
    *((_DWORD *)v10 - 8) = *((_DWORD *)v4 - 8);
    *((_OWORD *)v10 - 3) = v13;
    v14 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v14;
    v10 -= 48;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 48;
  }
  while (v4 != v3);
  v15 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v20;
  if (v3 == v15)
  {
    if (v3)
LABEL_20:
      operator delete(v3);
  }
  else
  {
    do
    {
      v17 = v3 - 48;
      if (*(v3 - 1) < 0)
        operator delete(*((void **)v3 - 3));
      v3 -= 48;
    }
    while (v17 != v15);
    v3 = v15;
    if (v15)
      goto LABEL_20;
  }
  return v12;
}

void sub_23A023708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A023338((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A02371C(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  float v18;
  float v19;
  void **v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  char v28;
  float v29;
  unint64_t v30;
  float *v31;
  float *v32;
  float v33;
  float *v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  float v41;
  float v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  float v49;
  float *v50;
  float *v51;
  float v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  float v57;
  float v58;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  float v73;
  uint64_t v74;
  char v75;
  int v76;
  void **v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  int64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  float v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  char v123;
  int v124;
  void **v125;
  unint64_t v126;
  float v127;
  __int128 *v128;
  _BYTE v130[15];
  _BYTE v131[15];
  _BYTE v132[15];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[15];
  _BYTE v138[15];
  __int128 v139;
  _BYTE v140[15];
  __int128 v141;
  __int128 v142;
  _BYTE v143[15];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;

LABEL_1:
  v128 = a2 - 3;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 8) > *(float *)(v7 + 16))
        {
          v155 = *(_DWORD *)(v7 + 16);
          v147 = *(_OWORD *)v7;
          v63 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)&v136 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)((char *)&v136 + 7) = *(_QWORD *)(v7 + 39);
          v64 = *(_BYTE *)(v7 + 47);
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          v65 = *(a2 - 3);
          *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 - 8);
          *(_OWORD *)v7 = v65;
          v66 = *(_OWORD *)((char *)a2 - 24);
          *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 - 1);
          *(_OWORD *)(v7 + 24) = v66;
          *((_DWORD *)a2 - 8) = v155;
          *(a2 - 3) = v147;
          *((_QWORD *)a2 - 3) = v63;
          *(_QWORD *)((char *)a2 - 9) = *(_QWORD *)((char *)&v136 + 7);
          *((_QWORD *)a2 - 2) = v136;
          *((_BYTE *)a2 - 1) = v64;
        }
        return;
      case 3:
        sub_23A0246F8(v7, v7 + 48, (uint64_t)v128);
        return;
      case 4:
        sub_23A024C5C(v7, v7 + 48, v7 + 96, v128);
        return;
      case 5:
        sub_23A024448(v7, v7 + 48, v7 + 96, v7 + 144, v128);
        return;
      default:
        if (v8 > 1151)
        {
          if (!a3)
          {
            if ((_OWORD *)v7 != a2)
            {
              v81 = (unint64_t)(v9 - 2) >> 1;
              v82 = v81;
              do
              {
                if (v81 >= v82)
                {
                  v84 = (2 * v82) | 1;
                  v85 = v7 + 48 * v84;
                  if (2 * v82 + 2 < v9 && *(float *)(v85 + 16) > *(float *)(v85 + 64))
                  {
                    v85 += 48;
                    v84 = 2 * v82 + 2;
                  }
                  v86 = v7 + 48 * v82;
                  v87 = *(float *)(v86 + 16);
                  if (*(float *)(v85 + 16) <= v87)
                  {
                    v149 = *(_OWORD *)v86;
                    v88 = (_QWORD *)(v7 + 48 * v82);
                    v89 = v88[3];
                    *(_QWORD *)&v138[7] = *(_QWORD *)((char *)v88 + 39);
                    *(_QWORD *)v138 = v88[4];
                    v90 = *(_BYTE *)(v86 + 47);
                    v88[3] = 0;
                    v88[4] = 0;
                    v88[5] = 0;
                    do
                    {
                      v91 = v86;
                      v86 = v85;
                      v92 = *(_OWORD *)v85;
                      *(_DWORD *)(v91 + 16) = *(_DWORD *)(v85 + 16);
                      *(_OWORD *)v91 = v92;
                      v93 = *(_OWORD *)(v85 + 24);
                      *(_QWORD *)(v91 + 40) = *(_QWORD *)(v85 + 40);
                      *(_OWORD *)(v91 + 24) = v93;
                      *(_BYTE *)(v85 + 47) = 0;
                      *(_BYTE *)(v85 + 24) = 0;
                      if (v81 < v84)
                        break;
                      v94 = 2 * v84;
                      v84 = (2 * v84) | 1;
                      v85 = v7 + 48 * v84;
                      v95 = v94 + 2;
                      if (v95 < v9 && *(float *)(v85 + 16) > *(float *)(v85 + 64))
                      {
                        v85 += 48;
                        v84 = v95;
                      }
                    }
                    while (*(float *)(v85 + 16) <= v87);
                    *(_OWORD *)v86 = v149;
                    *(float *)(v86 + 16) = v87;
                    *(_QWORD *)(v86 + 24) = v89;
                    *(_QWORD *)(v86 + 32) = *(_QWORD *)v138;
                    *(_QWORD *)(v86 + 39) = *(_QWORD *)&v138[7];
                    *(_BYTE *)(v86 + 47) = v90;
                  }
                }
                v83 = v82-- <= 0;
              }
              while (!v83);
              v96 = v8 / 0x30uLL;
              do
              {
                v97 = 0;
                v98 = a2;
                v156 = *(_DWORD *)(v7 + 16);
                v150 = *(_OWORD *)v7;
                v99 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)v132 = *(_QWORD *)(v7 + 32);
                *(_QWORD *)&v132[7] = *(_QWORD *)(v7 + 39);
                v100 = *(_BYTE *)(v7 + 47);
                *(_QWORD *)(v7 + 32) = 0;
                *(_QWORD *)(v7 + 40) = 0;
                v101 = v7;
                *(_QWORD *)(v7 + 24) = 0;
                do
                {
                  v104 = v101;
                  v101 += 48 * v97 + 48;
                  v105 = 2 * v97;
                  v97 = (2 * v97) | 1;
                  v106 = v105 + 2;
                  if (v106 < v96 && *(float *)(v101 + 16) > *(float *)(v101 + 64))
                  {
                    v101 += 48;
                    v97 = v106;
                  }
                  v102 = *(_OWORD *)v101;
                  *(_DWORD *)(v104 + 16) = *(_DWORD *)(v101 + 16);
                  *(_OWORD *)v104 = v102;
                  v103 = *(_OWORD *)(v101 + 24);
                  *(_QWORD *)(v104 + 40) = *(_QWORD *)(v101 + 40);
                  *(_OWORD *)(v104 + 24) = v103;
                  *(_BYTE *)(v101 + 47) = 0;
                  *(_BYTE *)(v101 + 24) = 0;
                }
                while (v97 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
                a2 -= 3;
                if ((_OWORD *)v101 == v98 - 3)
                {
                  *(_OWORD *)v101 = v150;
                  *(_DWORD *)(v101 + 16) = v156;
                  *(_QWORD *)(v101 + 24) = v99;
                  *(_QWORD *)(v101 + 32) = *(_QWORD *)v132;
                  *(_QWORD *)(v101 + 39) = *(_QWORD *)&v132[7];
                  *(_BYTE *)(v101 + 47) = v100;
                }
                else
                {
                  v107 = *a2;
                  *(_DWORD *)(v101 + 16) = *((_DWORD *)v98 - 8);
                  *(_OWORD *)v101 = v107;
                  v108 = *(_OWORD *)((char *)v98 - 24);
                  *(_QWORD *)(v101 + 40) = *((_QWORD *)v98 - 1);
                  *(_OWORD *)(v101 + 24) = v108;
                  *a2 = v150;
                  *((_DWORD *)v98 - 8) = v156;
                  *((_QWORD *)v98 - 3) = v99;
                  *(_QWORD *)((char *)v98 - 9) = *(_QWORD *)&v132[7];
                  *((_QWORD *)v98 - 2) = *(_QWORD *)v132;
                  *((_BYTE *)v98 - 1) = v100;
                  v109 = v101 - v7 + 48;
                  if (v109 >= 49)
                  {
                    v110 = (v109 / 0x30uLL - 2) >> 1;
                    v111 = v7 + 48 * v110;
                    v112 = *(float *)(v101 + 16);
                    if (*(float *)(v111 + 16) > v112)
                    {
                      v139 = *(_OWORD *)v101;
                      v113 = *(_QWORD *)(v101 + 24);
                      *(_QWORD *)&v143[7] = *(_QWORD *)(v101 + 39);
                      *(_QWORD *)v143 = *(_QWORD *)(v101 + 32);
                      v114 = *(_BYTE *)(v101 + 47);
                      *(_QWORD *)(v101 + 24) = 0;
                      *(_QWORD *)(v101 + 32) = 0;
                      *(_QWORD *)(v101 + 40) = 0;
                      do
                      {
                        v115 = v101;
                        v101 = v111;
                        v116 = *(_OWORD *)v111;
                        *(_DWORD *)(v115 + 16) = *(_DWORD *)(v111 + 16);
                        *(_OWORD *)v115 = v116;
                        v117 = *(_OWORD *)(v111 + 24);
                        *(_QWORD *)(v115 + 40) = *(_QWORD *)(v111 + 40);
                        *(_OWORD *)(v115 + 24) = v117;
                        *(_BYTE *)(v111 + 47) = 0;
                        *(_BYTE *)(v111 + 24) = 0;
                        if (!v110)
                          break;
                        v110 = (v110 - 1) >> 1;
                        v111 = v7 + 48 * v110;
                      }
                      while (*(float *)(v111 + 16) > v112);
                      *(_OWORD *)v101 = v139;
                      *(float *)(v101 + 16) = v112;
                      *(_QWORD *)(v101 + 24) = v113;
                      *(_QWORD *)(v101 + 32) = *(_QWORD *)v143;
                      *(_QWORD *)(v101 + 39) = *(_QWORD *)&v143[7];
                      *(_BYTE *)(v101 + 47) = v114;
                    }
                  }
                }
                v83 = v96-- <= 2;
              }
              while (!v83);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 48 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 >= 0x1801)
          {
            sub_23A0246F8(a1, v11, (uint64_t)v128);
            v12 = 48 * v10;
            v13 = (_QWORD *)(a1 + v12);
            sub_23A0246F8(a1 + 48, a1 + v12 - 48, (uint64_t)(a2 - 6));
            sub_23A0246F8(a1 + 96, a1 + 48 + v12, (uint64_t)(a2 - 9));
            sub_23A0246F8(a1 + v12 - 48, v11, a1 + 48 + v12);
            v152 = *(_DWORD *)(a1 + 16);
            v144 = *(_OWORD *)a1;
            *(_QWORD *)((char *)&v133 + 7) = *(_QWORD *)(a1 + 39);
            v14 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)&v133 = *(_QWORD *)(a1 + 32);
            v15 = *(_BYTE *)(a1 + 47);
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            v16 = *(_OWORD *)v11;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 + 16);
            *(_OWORD *)a1 = v16;
            v17 = *(_QWORD *)(a1 + v12 + 40);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + v12 + 24);
            *(_QWORD *)(a1 + 40) = v17;
            *(_DWORD *)(v11 + 16) = v152;
            *(_OWORD *)v11 = v144;
            v13[3] = v14;
            *(_QWORD *)((char *)v13 + 39) = *(_QWORD *)((char *)&v133 + 7);
            v13[4] = v133;
            *(_BYTE *)(v11 + 47) = v15;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v18 = *(float *)(a1 + 16);
            if (*(float *)(a1 - 32) > v18)
              goto LABEL_14;
            v134 = *(_OWORD *)a1;
            v19 = *(float *)(a1 + 16);
            v20 = (void **)(a1 + 24);
            v21 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)v130 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)&v130[7] = *(_QWORD *)(a1 + 39);
            v22 = *(_BYTE *)(a1 + 47);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            if (v19 <= *((float *)a2 - 8))
            {
              v48 = a1 + 48;
              do
              {
                v7 = v48;
                if (v48 >= (unint64_t)a2)
                  break;
                v49 = *(float *)(v48 + 16);
                v48 += 48;
              }
              while (v19 <= v49);
            }
            else
            {
              v23 = a1;
              do
              {
                v7 = v23 + 48;
                v24 = *(float *)(v23 + 64);
                v23 += 48;
              }
              while (v19 <= v24);
            }
            v50 = (float *)a2;
            if (v7 < (unint64_t)a2)
            {
              v51 = (float *)a2;
              do
              {
                v50 = v51 - 12;
                v52 = *(v51 - 8);
                v51 -= 12;
              }
              while (v19 > v52);
            }
            while (v7 < (unint64_t)v50)
            {
              v154 = *(_DWORD *)(v7 + 16);
              v146 = *(_OWORD *)v7;
              v53 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)&v142 = *(_QWORD *)(v7 + 32);
              *(_QWORD *)((char *)&v142 + 7) = *(_QWORD *)(v7 + 39);
              v54 = *(_BYTE *)(v7 + 47);
              *(_QWORD *)(v7 + 32) = 0;
              *(_QWORD *)(v7 + 40) = 0;
              *(_QWORD *)(v7 + 24) = 0;
              v55 = *(_OWORD *)v50;
              *(float *)(v7 + 16) = v50[4];
              *(_OWORD *)v7 = v55;
              v56 = *(_OWORD *)(v50 + 6);
              *(_QWORD *)(v7 + 40) = *((_QWORD *)v50 + 5);
              *(_OWORD *)(v7 + 24) = v56;
              *((_DWORD *)v50 + 4) = v154;
              *(_OWORD *)v50 = v146;
              *((_QWORD *)v50 + 3) = v53;
              *((_QWORD *)v50 + 4) = v142;
              *(_QWORD *)((char *)v50 + 39) = *(_QWORD *)((char *)&v142 + 7);
              *((_BYTE *)v50 + 47) = v54;
              do
              {
                v57 = *(float *)(v7 + 64);
                v7 += 48;
              }
              while (v19 <= v57);
              do
              {
                v58 = *(v50 - 8);
                v50 -= 12;
              }
              while (v19 > v58);
            }
            v59 = (__int128 *)(v7 - 48);
            if (v7 - 48 == a1)
            {
              v62 = *(char *)(v7 - 1);
              *(_OWORD *)a1 = v134;
              *(float *)(v7 - 32) = v19;
              if (v62 < 0)
                operator delete(*(void **)(v7 - 24));
            }
            else
            {
              v60 = *v59;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 - 32);
              *(_OWORD *)a1 = v60;
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v20);
              v61 = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
              *(_OWORD *)v20 = v61;
              *(_BYTE *)(v7 - 1) = 0;
              *(_BYTE *)(v7 - 24) = 0;
              *v59 = v134;
              *(float *)(v7 - 32) = v19;
            }
            a4 = 0;
            *(_QWORD *)(v7 - 24) = v21;
            *(_QWORD *)(v7 - 9) = *(_QWORD *)&v130[7];
            *(_QWORD *)(v7 - 16) = *(_QWORD *)v130;
            *(_BYTE *)(v7 - 1) = v22;
            continue;
          }
          sub_23A0246F8(v11, a1, (uint64_t)v128);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v18 = *(float *)(a1 + 16);
LABEL_14:
          v25 = 0;
          v135 = *(_OWORD *)a1;
          v26 = (void **)(a1 + 24);
          v27 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)v131 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 39);
          v28 = *(_BYTE *)(a1 + 47);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          do
          {
            v29 = *(float *)(a1 + v25 + 64);
            v25 += 48;
          }
          while (v29 > v18);
          v30 = a1 + v25;
          v31 = (float *)a2;
          if (v25 == 48)
          {
            v34 = (float *)a2;
            while (v30 < (unint64_t)v34)
            {
              v32 = v34 - 12;
              v35 = *(v34 - 8);
              v34 -= 12;
              if (v35 > v18)
                goto LABEL_22;
            }
            v32 = v34;
            v7 = v30;
          }
          else
          {
            do
            {
              v32 = v31 - 12;
              v33 = *(v31 - 8);
              v31 -= 12;
            }
            while (v33 <= v18);
LABEL_22:
            v7 = v30;
            if (v30 < (unint64_t)v32)
            {
              v36 = (unint64_t)v32;
              do
              {
                v153 = *(_DWORD *)(v7 + 16);
                v145 = *(_OWORD *)v7;
                v37 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)&v141 = *(_QWORD *)(v7 + 32);
                *(_QWORD *)((char *)&v141 + 7) = *(_QWORD *)(v7 + 39);
                v38 = *(_BYTE *)(v7 + 47);
                *(_QWORD *)(v7 + 32) = 0;
                *(_QWORD *)(v7 + 40) = 0;
                *(_QWORD *)(v7 + 24) = 0;
                v39 = *(_OWORD *)v36;
                *(_DWORD *)(v7 + 16) = *(_DWORD *)(v36 + 16);
                *(_OWORD *)v7 = v39;
                v40 = *(_OWORD *)(v36 + 24);
                *(_QWORD *)(v7 + 40) = *(_QWORD *)(v36 + 40);
                *(_OWORD *)(v7 + 24) = v40;
                *(_DWORD *)(v36 + 16) = v153;
                *(_OWORD *)v36 = v145;
                *(_QWORD *)(v36 + 24) = v37;
                *(_QWORD *)(v36 + 32) = v141;
                *(_QWORD *)(v36 + 39) = *(_QWORD *)((char *)&v141 + 7);
                *(_BYTE *)(v36 + 47) = v38;
                do
                {
                  v41 = *(float *)(v7 + 64);
                  v7 += 48;
                }
                while (v41 > v18);
                do
                {
                  v42 = *(float *)(v36 - 32);
                  v36 -= 48;
                }
                while (v42 <= v18);
              }
              while (v7 < v36);
            }
          }
          v43 = (__int128 *)(v7 - 48);
          if (v7 - 48 == a1)
          {
            v46 = *(char *)(v7 - 1);
            *(_OWORD *)a1 = v135;
            *(float *)(v7 - 32) = v18;
            if (v46 < 0)
              operator delete(*(void **)(v7 - 24));
          }
          else
          {
            v44 = *v43;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 - 32);
            *(_OWORD *)a1 = v44;
            if (*(char *)(a1 + 47) < 0)
              operator delete(*v26);
            v45 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)v26 = v45;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
            *v43 = v135;
            *(float *)(v7 - 32) = v18;
          }
          *(_QWORD *)(v7 - 24) = v27;
          *(_QWORD *)(v7 - 9) = *(_QWORD *)&v131[7];
          *(_QWORD *)(v7 - 16) = *(_QWORD *)v131;
          *(_BYTE *)(v7 - 1) = v28;
          if (v30 < (unint64_t)v32)
            goto LABEL_37;
          v47 = sub_23A0249C0(a1, v7 - 48);
          if (!sub_23A0249C0(v7, (uint64_t)a2))
          {
            if (v47)
              continue;
LABEL_37:
            sub_23A02371C(a1, v7 - 48, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (_OWORD *)(v7 - 48);
          if (v47)
            return;
          goto LABEL_1;
        }
        v67 = (_OWORD *)(v7 + 48);
        v69 = (_OWORD *)v7 == a2 || v67 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v69)
          {
            v70 = 0;
            v71 = v7;
            do
            {
              v72 = v67;
              v73 = *(float *)(v71 + 64);
              if (v73 > *(float *)(v71 + 16))
              {
                v148 = *v67;
                *(_QWORD *)&v137[7] = *(_QWORD *)(v71 + 87);
                v74 = *(_QWORD *)(v71 + 72);
                *(_QWORD *)v137 = *(_QWORD *)(v71 + 80);
                v75 = *(_BYTE *)(v71 + 95);
                *(_QWORD *)(v71 + 80) = 0;
                *(_QWORD *)(v71 + 88) = 0;
                *(_QWORD *)(v71 + 72) = 0;
                v76 = *((char *)v67 + 47);
                *((_DWORD *)v72 + 4) = *(_DWORD *)(v71 + 16);
                *v72 = *(_OWORD *)v71;
                v77 = (void **)v72 + 3;
                if (v76 < 0)
                  operator delete(*v77);
                v78 = (_QWORD *)(v71 + 24);
                *(_OWORD *)v77 = *(_OWORD *)(v71 + 24);
                *((_QWORD *)v72 + 5) = *(_QWORD *)(v71 + 40);
                *(_BYTE *)(v71 + 47) = 0;
                *(_BYTE *)(v71 + 24) = 0;
                if (v71 == a1)
                {
                  v71 = a1;
                }
                else if (v73 > *(float *)(v71 - 32))
                {
                  v79 = v70;
                  while (1)
                  {
                    v80 = a1 + v79;
                    *(_OWORD *)v80 = *(_OWORD *)(a1 + v79 - 48);
                    *(_DWORD *)(v80 + 16) = *(_DWORD *)(a1 + v79 - 32);
                    *(_OWORD *)(v80 + 24) = *(_OWORD *)(a1 + v79 - 24);
                    *(_QWORD *)(v80 + 40) = *(_QWORD *)(a1 + v79 - 8);
                    *(_BYTE *)(v80 - 1) = 0;
                    *(_BYTE *)(v80 - 24) = 0;
                    v79 -= 48;
                    if (!v79)
                      break;
                    if (v73 <= *(float *)(v80 - 80))
                    {
                      v71 = a1 + v79;
                      goto LABEL_87;
                    }
                  }
                  v71 = a1;
LABEL_87:
                  v78 = (_QWORD *)(v80 - 24);
                }
                *(_OWORD *)v71 = v148;
                *(float *)(v71 + 16) = v73;
                *v78 = v74;
                *(_QWORD *)(v71 + 32) = *(_QWORD *)v137;
                *(_QWORD *)(v71 + 39) = *(_QWORD *)&v137[7];
                *(_BYTE *)(v71 + 47) = v75;
              }
              v67 = v72 + 3;
              v70 += 48;
              v71 = (unint64_t)v72;
            }
            while (v72 + 3 != a2);
          }
        }
        else if (!v69)
        {
          v118 = v7 - 80;
          do
          {
            v120 = (uint64_t)v67;
            v121 = *(float *)(a1 + 64);
            if (v121 > *(float *)(a1 + 16))
            {
              v151 = *v67;
              *(_QWORD *)&v140[7] = *(_QWORD *)(a1 + 87);
              v122 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)v140 = *(_QWORD *)(a1 + 80);
              v123 = *(_BYTE *)(a1 + 95);
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              v124 = *((char *)v67 + 47);
              *(_DWORD *)(v120 + 16) = *(_DWORD *)(a1 + 16);
              *(_OWORD *)v120 = *(_OWORD *)a1;
              v125 = (void **)(v120 + 24);
              if (v124 < 0)
                operator delete(*v125);
              *(_OWORD *)v125 = *(_OWORD *)(a1 + 24);
              *(_QWORD *)(v120 + 40) = *(_QWORD *)(a1 + 40);
              *(_BYTE *)(a1 + 47) = 0;
              *(_BYTE *)(a1 + 24) = 0;
              if (v121 <= *(float *)(a1 - 32))
              {
                v119 = (_QWORD *)(a1 + 24);
              }
              else
              {
                v126 = v118;
                do
                {
                  *(_OWORD *)(v126 + 80) = *(_OWORD *)(v126 + 32);
                  *(_DWORD *)(v126 + 96) = *(_DWORD *)(v126 + 48);
                  *(_OWORD *)(v126 + 104) = *(_OWORD *)(v126 + 56);
                  *(_QWORD *)(v126 + 120) = *(_QWORD *)(v126 + 72);
                  *(_BYTE *)(v126 + 79) = 0;
                  *(_BYTE *)(v126 + 56) = 0;
                  v127 = *(float *)v126;
                  v126 -= 48;
                }
                while (v121 > v127);
                v119 = (_QWORD *)(v126 + 104);
                a1 = v126 + 80;
              }
              *(_OWORD *)a1 = v151;
              *(float *)(a1 + 16) = v121;
              *v119 = v122;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)v140;
              *(_QWORD *)(a1 + 39) = *(_QWORD *)&v140[7];
              *(_BYTE *)(a1 + 47) = v123;
            }
            v67 = (_OWORD *)(v120 + 48);
            v118 += 48;
            a1 = v120;
          }
          while ((_OWORD *)(v120 + 48) != a2);
        }
        return;
    }
  }
}

void sub_23A024448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  int v37;

  sub_23A024C5C(a1, a2, a3, (__int128 *)a4);
  if (*((float *)a5 + 4) > *(float *)(a4 + 16))
  {
    v30 = *(_OWORD *)a4;
    v34 = *(_DWORD *)(a4 + 16);
    v10 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)&v26 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)(a4 + 39);
    v11 = *(_BYTE *)(a4 + 47);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v12 = *a5;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *(_OWORD *)a4 = v12;
    v13 = *((_QWORD *)a5 + 5);
    *(_OWORD *)(a4 + 24) = *(__int128 *)((char *)a5 + 24);
    *(_QWORD *)(a4 + 40) = v13;
    *a5 = v30;
    *((_DWORD *)a5 + 4) = v34;
    *((_QWORD *)a5 + 3) = v10;
    *((_QWORD *)a5 + 4) = v26;
    *(_QWORD *)((char *)a5 + 39) = *(_QWORD *)((char *)&v26 + 7);
    *((_BYTE *)a5 + 47) = v11;
    if (*(float *)(a4 + 16) > *(float *)(a3 + 16))
    {
      v31 = *(_OWORD *)a3;
      v35 = *(_DWORD *)(a3 + 16);
      v14 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&v27 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a3 + 39);
      v15 = *(_BYTE *)(a3 + 47);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v16 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = v16;
      v17 = *(_QWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 40) = v17;
      *(_OWORD *)a4 = v31;
      *(_DWORD *)(a4 + 16) = v35;
      *(_QWORD *)(a4 + 24) = v14;
      *(_QWORD *)(a4 + 32) = v27;
      *(_QWORD *)(a4 + 39) = *(_QWORD *)((char *)&v27 + 7);
      *(_BYTE *)(a4 + 47) = v15;
      if (*(float *)(a3 + 16) > *(float *)(a2 + 16))
      {
        v32 = *(_OWORD *)a2;
        v36 = *(_DWORD *)(a2 + 16);
        v18 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)&v28 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a2 + 39);
        v19 = *(_BYTE *)(a2 + 47);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        v20 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = v20;
        v21 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 40) = v21;
        *(_OWORD *)a3 = v32;
        *(_DWORD *)(a3 + 16) = v36;
        *(_QWORD *)(a3 + 24) = v18;
        *(_QWORD *)(a3 + 32) = v28;
        *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v28 + 7);
        *(_BYTE *)(a3 + 47) = v19;
        if (*(float *)(a2 + 16) > *(float *)(a1 + 16))
        {
          v33 = *(_OWORD *)a1;
          v37 = *(_DWORD *)(a1 + 16);
          v22 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)&v29 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)(a1 + 39);
          v23 = *(_BYTE *)(a1 + 47);
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v24 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = v24;
          v25 = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 40) = v25;
          *(_OWORD *)a2 = v33;
          *(_DWORD *)(a2 + 16) = v37;
          *(_QWORD *)(a2 + 24) = v22;
          *(_QWORD *)(a2 + 32) = v29;
          *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v29 + 7);
          *(_BYTE *)(a2 + 47) = v23;
        }
      }
    }
  }
}

__n128 sub_23A0246F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  float v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[15];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  int v31;
  int v32;
  int v33;
  int v34;

  result.n128_u32[0] = *(_DWORD *)(a2 + 16);
  v4 = *(float *)(a3 + 16);
  if (result.n128_f32[0] <= *(float *)(a1 + 16))
  {
    if (v4 > result.n128_f32[0])
    {
      v28 = *(__n128 *)a2;
      v32 = *(_DWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)&v24 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)((char *)&v24 + 7) = *(_QWORD *)(a2 + 39);
      v12 = *(_BYTE *)(a2 + 47);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v13 = *(__n128 *)a3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(__n128 *)a2 = v13;
      v14 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v14;
      result = v28;
      *(__n128 *)a3 = v28;
      *(_DWORD *)(a3 + 16) = v32;
      *(_QWORD *)(a3 + 24) = v11;
      *(_QWORD *)(a3 + 32) = v24;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v24 + 7);
      *(_BYTE *)(a3 + 47) = v12;
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      if (result.n128_f32[0] > *(float *)(a1 + 16))
      {
        v29 = *(__n128 *)a1;
        v33 = *(_DWORD *)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)&v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)(a1 + 39);
        v16 = *(_BYTE *)(a1 + 47);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v17 = *(__n128 *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(__n128 *)a1 = v17;
        v18 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v18;
        result = v29;
        *(__n128 *)a2 = v29;
        *(_DWORD *)(a2 + 16) = v33;
        *(_QWORD *)(a2 + 24) = v15;
        *(_QWORD *)(a2 + 32) = v25;
        *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v25 + 7);
        *(_BYTE *)(a2 + 47) = v16;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 24);
    v6 = (_QWORD *)(a1 + 32);
    if (v4 <= result.n128_f32[0])
    {
      v30 = *(__n128 *)a1;
      v34 = *(_DWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)&v26 = *v6;
      *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)(a1 + 39);
      v8 = *(_BYTE *)(a1 + 47);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *v5 = 0;
      v19 = *(__n128 *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(__n128 *)a1 = v19;
      v20 = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = v20;
      result = v30;
      *(__n128 *)a2 = v30;
      *(_DWORD *)(a2 + 16) = v34;
      *(_QWORD *)(a2 + 24) = v7;
      *(_QWORD *)(a2 + 32) = v26;
      *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v26 + 7);
      *(_BYTE *)(a2 + 47) = v8;
      result.n128_u32[0] = *(_DWORD *)(a3 + 16);
      if (result.n128_f32[0] <= *(float *)(a2 + 16))
        return result;
      v27 = *(__n128 *)a2;
      v31 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)v23 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 + 39);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v21 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v21;
      v22 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v22;
    }
    else
    {
      v27 = *(__n128 *)a1;
      v31 = *(_DWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)v23 = *v6;
      *(_QWORD *)&v23[7] = *(_QWORD *)(a1 + 39);
      v8 = *(_BYTE *)(a1 + 47);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *v5 = 0;
      v9 = *(__n128 *)a3;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 16);
      *(__n128 *)a1 = v9;
      v10 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)v5 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a1 + 40) = v10;
    }
    result = v27;
    *(__n128 *)a3 = v27;
    *(_DWORD *)(a3 + 16) = v31;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)v23;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)&v23[7];
    *(_BYTE *)(a3 + 47) = v8;
  }
  return result;
}

BOOL sub_23A0249C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[15];
  __int128 v22;
  __int128 v23;
  int v24;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 32) > *(float *)(a1 + 16))
      {
        v22 = *(_OWORD *)a1;
        v24 = *(_DWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)&v20 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)(a1 + 39);
        v7 = *(_BYTE *)(a1 + 47);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v8 = *(_OWORD *)(a2 - 48);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 32);
        *(_OWORD *)a1 = v8;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a2 - 48) = v22;
        *(_DWORD *)(a2 - 32) = v24;
        *(_QWORD *)(a2 - 24) = v6;
        *(_QWORD *)(a2 - 16) = v20;
        *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v20 + 7);
        *(_BYTE *)(a2 - 1) = v7;
      }
      return result;
    case 3uLL:
      sub_23A0246F8(a1, a1 + 48, a2 - 48);
      return 1;
    case 4uLL:
      sub_23A024C5C(a1, a1 + 48, a1 + 96, (__int128 *)(a2 - 48));
      return 1;
    case 5uLL:
      sub_23A024448(a1, a1 + 48, a1 + 96, a1 + 144, (__int128 *)(a2 - 48));
      return 1;
    default:
      v10 = a1 + 96;
      sub_23A0246F8(a1, a1 + 48, a1 + 96);
      v11 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = *(float *)(v11 + 16);
    if (v15 > *(float *)(v10 + 16))
    {
      v23 = *(_OWORD *)v11;
      v16 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)v21 = *(_QWORD *)(v11 + 32);
      *(_QWORD *)&v21[7] = *(_QWORD *)(v11 + 39);
      v17 = *(_BYTE *)(v11 + 47);
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      v18 = v12;
      *(_QWORD *)(v11 + 24) = 0;
      do
      {
        v19 = a1 + v18;
        *(_OWORD *)(v19 + 144) = *(_OWORD *)(a1 + v18 + 96);
        *(_DWORD *)(v19 + 160) = *(_DWORD *)(a1 + v18 + 112);
        *(_OWORD *)(v19 + 168) = *(_OWORD *)(a1 + v18 + 120);
        *(_QWORD *)(v19 + 184) = *(_QWORD *)(a1 + v18 + 136);
        *(_BYTE *)(v19 + 143) = 0;
        *(_BYTE *)(v19 + 120) = 0;
        if (v18 == -96)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v18 -= 48;
      }
      while (v15 > *(float *)(v19 + 64));
      v14 = a1 + v18 + 144;
LABEL_7:
      *(_OWORD *)v14 = v23;
      *(float *)(v14 + 16) = v15;
      *(_QWORD *)(v19 + 120) = v16;
      *(_QWORD *)(v14 + 32) = *(_QWORD *)v21;
      *(_QWORD *)(v14 + 39) = *(_QWORD *)&v21[7];
      *(_BYTE *)(v14 + 47) = v17;
      if (++v13 == 8)
        return v11 + 48 == a2;
    }
    v10 = v11;
    v12 += 48;
    v11 += 48;
    if (v11 == a2)
      return 1;
  }
}

void sub_23A024C5C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;

  sub_23A0246F8(a1, a2, a3);
  if (*((float *)a4 + 4) > *(float *)(a3 + 16))
  {
    v23 = *(_OWORD *)a3;
    v26 = *(_DWORD *)(a3 + 16);
    v8 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)&v20 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)(a3 + 39);
    v9 = *(_BYTE *)(a3 + 47);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = *a4;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = v10;
    v11 = *((_QWORD *)a4 + 5);
    *(_OWORD *)(a3 + 24) = *(__int128 *)((char *)a4 + 24);
    *(_QWORD *)(a3 + 40) = v11;
    *a4 = v23;
    *((_DWORD *)a4 + 4) = v26;
    *((_QWORD *)a4 + 3) = v8;
    *((_QWORD *)a4 + 4) = v20;
    *(_QWORD *)((char *)a4 + 39) = *(_QWORD *)((char *)&v20 + 7);
    *((_BYTE *)a4 + 47) = v9;
    if (*(float *)(a3 + 16) > *(float *)(a2 + 16))
    {
      v24 = *(_OWORD *)a2;
      v27 = *(_DWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)&v21 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)(a2 + 39);
      v13 = *(_BYTE *)(a2 + 47);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v14 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = v14;
      v15 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v15;
      *(_OWORD *)a3 = v24;
      *(_DWORD *)(a3 + 16) = v27;
      *(_QWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v21 + 7);
      *(_BYTE *)(a3 + 47) = v13;
      if (*(float *)(a2 + 16) > *(float *)(a1 + 16))
      {
        v25 = *(_OWORD *)a1;
        v28 = *(_DWORD *)(a1 + 16);
        v16 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)&v22 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(a1 + 39);
        v17 = *(_BYTE *)(a1 + 47);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v18 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = v18;
        v19 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v19;
        *(_OWORD *)a2 = v25;
        *(_DWORD *)(a2 + 16) = v28;
        *(_QWORD *)(a2 + 24) = v16;
        *(_QWORD *)(a2 + 32) = v22;
        *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v22 + 7);
        *(_BYTE *)(a2 + 47) = v17;
      }
    }
  }
}

void sub_23A024E6C(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a2;
  v4 = a1[1];
  v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    v7 = (_QWORD *)(*a1 + 8 * (v4 >> 6));
    v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        v9 = (64 - v8);
        if (v9 >= a2)
          v10 = a2;
        else
          v10 = v9;
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        v3 = a2 - v10;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        memset(v7, 255, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        v13 = (64 - v8);
        if (v13 >= a2)
          v14 = a2;
        else
          v14 = v13;
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        v3 = a2 - v14;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        bzero(v7, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

_QWORD *sub_23A024FD0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239FF4830(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23A0252E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A0252F8(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    sub_23A0252F8(a1, *(_QWORD *)a2);
    sub_23A0252F8(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    if (v4)
    {
      v5 = *((_QWORD *)a2 + 8);
      v6 = (void *)*((_QWORD *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0)
            operator delete(*(void **)(v5 - 24));
          v5 -= 48;
        }
        while (v5 != v4);
        v6 = (void *)*((_QWORD *)a2 + 7);
      }
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **sub_23A0253AC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x50uLL);
  v22 = v21 + 4;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_23A004110(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_23A025528(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A025604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A025768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0257B8()
{
  void *v0;

  JUMPOUT(0x23A0257C4);
}

void sub_23A0257E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0258F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23A025A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A025D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A0261B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_23A0263B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0263D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0263E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0263F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02640C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A026424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A026438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A026494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A026614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0267F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23A0269C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23A026B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23A026DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23A026FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23A0272B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23A027550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_23A027A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_23A027B88(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3;
  objc_msgSend_localeIdentifier(a2, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localeIdentifier(v4, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_compare_(v9, v15, (uint64_t)v14, v16, v17);

  return v18;
}

void sub_23A027BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23A027C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A027C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A027CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A027D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A027D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A027DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A027DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23A027E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23A027E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_23A027F40(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  _QWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v18;

  *(_BYTE *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(_BYTE *)(a1 + 55) = 4;
  strcpy((char *)(a1 + 32), "</s>");
  *(_DWORD *)(a1 + 56) = 1802401084;
  v9 = (void **)(a1 + 56);
  *(_BYTE *)(a1 + 79) = 5;
  *(_WORD *)(a1 + 60) = 62;
  *(_QWORD *)a1 = off_250B0D578;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  if (a1 + 96 != a2)
  {
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
    sub_23A028B70((_QWORD *)(a1 + 96), *(uint64_t **)(a2 + 16), 0);
  }
  *(_DWORD *)(a1 + 80) = a3;
  v18 = (_DWORD *)(a1 + 80);
  v11 = sub_23A029310(v10, (unsigned int *)(a1 + 80), (uint64_t)&unk_23A0A31B0, &v18);
  if (*((char *)v11 + 47) < 0)
  {
    v11[4] = 0;
    v12 = (_BYTE *)v11[3];
  }
  else
  {
    v12 = v11 + 3;
    *((_BYTE *)v11 + 47) = 0;
  }
  *v12 = 0;
  *(_DWORD *)(a1 + 84) = a4;
  v18 = (_DWORD *)(a1 + 84);
  v13 = sub_23A029310(v10, (unsigned int *)(a1 + 84), (uint64_t)&unk_23A0A31B0, &v18);
  if ((*((char *)v13 + 47) & 0x80000000) == 0)
  {
    *((_BYTE *)v13 + 47) = 0;
    *((_BYTE *)v13 + 24) = 0;
    *(_DWORD *)(a1 + 88) = a5;
    v14 = (_DWORD *)(a1 + 88);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13[4] = 0;
  *(_BYTE *)v13[3] = 0;
  *(_DWORD *)(a1 + 88) = a5;
  v14 = (_DWORD *)(a1 + 88);
  if (*(char *)(a1 + 79) < 0)
LABEL_8:
    operator delete(*v9);
LABEL_9:
  strcpy((char *)(a1 + 56), "UNK");
  *(_BYTE *)(a1 + 79) = 3;
  v18 = v14;
  v15 = sub_23A029310(v10, v14, (uint64_t)&unk_23A0A31B0, &v18);
  if (*((char *)v15 + 47) < 0)
  {
    v15[4] = 3;
    v16 = (_DWORD *)v15[3];
  }
  else
  {
    v16 = v15 + 3;
    *((_BYTE *)v15 + 47) = 3;
  }
  *v16 = 4935253;
  return a1;
}

void sub_23A028134(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23A002600(v2);
  sub_23A01344C(v1);
  _Unwind_Resume(a1);
}

void *sub_23A028154@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  void *result;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *exception;
  std::string *v17;
  std::string::size_type size;
  std::string v19;

  v6 = a2;
  result = (void *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  if ((unint64_t)result <= v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::to_string(&v19, a2);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v19;
    else
      v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    sub_23A0147F0((uint64_t)exception, v17, size);
    __cxa_throw(exception, (struct type_info *)&unk_250B0C320, (void (*)(void *))sub_23A01373C);
  }
  v8 = (int8x8_t)a1[13];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (*(_QWORD *)&v8 <= v6)
        v10 = v6 % *(_QWORD *)&v8;
    }
    else
    {
      v10 = (v8.i32[0] - 1) & v6;
    }
    v11 = *(uint64_t **)(a1[12] + 8 * v10);
    if (v11)
    {
      v11 = (uint64_t *)*v11;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == v6)
            {
              if (*((_DWORD *)v11 + 4) == a2)
                goto LABEL_23;
            }
            else if ((v14 & v12) != v10)
            {
              goto LABEL_22;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v6)
          {
            if (*((_DWORD *)v11 + 4) == a2)
              break;
          }
          else
          {
            if (v13 >= *(_QWORD *)&v8)
              v13 %= *(_QWORD *)&v8;
            if (v13 != v10)
              goto LABEL_22;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
LABEL_22:
    v11 = 0;
  }
LABEL_23:
  if (*((char *)v11 + 47) < 0)
    return sub_239FF1F64((_BYTE *)a3, (void *)v11[3], v11[4]);
  v15 = *(_OWORD *)(v11 + 3);
  *(_QWORD *)(a3 + 16) = v11[5];
  *(_OWORD *)a3 = v15;
  return result;
}

void sub_23A028304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23A028340(uint64_t a1, void *__s1, size_t __n)
{
  const void *v6;
  uint64_t result;
  const void *v8;
  uint64_t *v9;
  std::string::size_type v10;
  int v11;
  std::string::size_type *p_size;
  BOOL v13;
  std::runtime_error *exception;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  std::string v21;
  _QWORD v22[2];
  std::string __p;
  uint64_t v24;

  v22[0] = __s1;
  v22[1] = __n;
  if (*(char *)(a1 + 55) < 0)
  {
    v6 = *(const void **)(a1 + 32);
    if (__n != *(_QWORD *)(a1 + 40))
      goto LABEL_6;
  }
  else
  {
    v6 = (const void *)(a1 + 32);
    if (__n != *(unsigned __int8 *)(a1 + 55))
      goto LABEL_6;
  }
  result = memcmp(__s1, v6, __n);
  if (!(_DWORD)result)
    return result;
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
  {
    v8 = *(const void **)(a1 + 8);
    if (__n != *(_QWORD *)(a1 + 16))
      goto LABEL_11;
LABEL_10:
    result = memcmp(__s1, v8, __n);
    if (!(_DWORD)result)
      return result;
    goto LABEL_11;
  }
  v8 = (const void *)(a1 + 8);
  if (__n == *(unsigned __int8 *)(a1 + 31))
    goto LABEL_10;
LABEL_11:
  v9 = *(uint64_t **)(a1 + 112);
  if (!v9)
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v21, "Did not find ID for token ");
    sub_23A0285C0(v19, (uint64_t)v22);
    if ((v20 & 0x80u) == 0)
      v15 = (const std::string::value_type *)v19;
    else
      v15 = (const std::string::value_type *)v19[0];
    if ((v20 & 0x80u) == 0)
      v16 = v20;
    else
      v16 = v19[1];
    v17 = std::string::append(&v21, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  while (1)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 4);
    if (*((char *)v9 + 47) < 0)
    {
      sub_239FF1F64(&__p.__r_.__value_.__s.__data_[8], (void *)v9[3], v9[4]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v9 + 3);
      v24 = v9[5];
    }
    v10 = HIBYTE(v24);
    v11 = SHIBYTE(v24);
    if (v24 < 0)
      v10 = __p.__r_.__value_.__r.__words[2];
    if (v10 != __n)
    {
      v13 = 0;
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_25;
LABEL_24:
      operator delete((void *)__p.__r_.__value_.__l.__size_);
      goto LABEL_25;
    }
    if (v24 >= 0)
      p_size = &__p.__r_.__value_.__l.__size_;
    else
      p_size = (std::string::size_type *)__p.__r_.__value_.__l.__size_;
    v13 = memcmp(__s1, p_size, __n) == 0;
    if (v11 < 0)
      goto LABEL_24;
LABEL_25:
    if (v13)
      return *((unsigned int *)v9 + 4);
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_27;
  }
}

void sub_23A02852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(a23);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if (a20 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if (a20 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v28);
    goto LABEL_10;
  }
LABEL_8:
  if (!v29)
    goto LABEL_10;
  goto LABEL_9;
}

_QWORD *sub_23A0285C0(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

void sub_23A028668()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_23A0286B0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_250B0C308, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_23A02869C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_23A0286B0(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "Function not yet implemented");
  result->__vftable = (std::logic_error_vtbl *)&off_250B0D658;
  return result;
}

void sub_23A0286DC()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_23A0286B0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_250B0C308, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_23A028710(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A028724()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_23A0286B0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_250B0C308, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_23A028758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A02876C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  void **v7;
  std::string::size_type v8;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  v5 = *a2;
  if (a2[1] - *a2 != 4)
  {
    v10 = 0;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(&v15, a1, *(unsigned int *)(v5 + 4 * v10));
      v11 = std::string::append(&v15, " ", 1uLL);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (v17 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v17 >= 0)
        v14 = HIBYTE(v17);
      else
        v14 = (std::string::size_type)__p[1];
      std::string::append((std::string *)a3, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v17) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_22;
      }
      else if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_22:
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      ++v10;
      v5 = *a2;
      v6 = ((a2[1] - *a2) >> 2) - 1;
      if (v10 >= v6)
        goto LABEL_3;
    }
  }
  v6 = 0;
LABEL_3:
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(__p, a1, *(unsigned int *)(v5 + 4 * v6));
  if (v17 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v17 >= 0)
    v8 = HIBYTE(v17);
  else
    v8 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a3, (const std::string::value_type *)v7, v8);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_23A0288E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A028948(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = off_250B0D578;
  v2 = *(void ***)(a1 + 112);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    operator delete(v3);
  *(_QWORD *)a1 = off_250B0D5E8;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_23A028A1C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = off_250B0D578;
  v2 = *(void ***)(a1 + 112);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    operator delete(v3);
  *(_QWORD *)a1 = off_250B0D5E8;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_14:
    JUMPOUT(0x23B83FE88);
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_14;
}

uint64_t sub_23A028AF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_23A028AF8()
{
  return 1;
}

void sub_23A028B00(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A028B24(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_23A028B70(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  void **v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1[1];
  if (!v6)
    goto LABEL_21;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      if (v8 != a2)
      {
        v9 = (void **)(v8 + 3);
        v10 = *((_BYTE *)a2 + 47);
        if (*((char *)v8 + 47) < 0)
        {
          if (v10 >= 0)
            v12 = a2 + 3;
          else
            v12 = (void *)a2[3];
          if (v10 >= 0)
            v13 = *((unsigned __int8 *)a2 + 47);
          else
            v13 = a2[4];
          sub_23A0009DC(v9, v12, v13);
        }
        else if ((*((_BYTE *)a2 + 47) & 0x80) != 0)
        {
          sub_23A000918(v9, (void *)a2[3], a2[4]);
        }
        else
        {
          v11 = *(_OWORD *)(a2 + 3);
          v8[5] = a2[5];
          *(_OWORD *)v9 = v11;
        }
      }
      v14 = (uint64_t *)*v8;
      sub_23A028CC8(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v14;
      if (!v14)
        goto LABEL_21;
    }
    do
    {
      v15 = (uint64_t *)*v8;
      if (*((char *)v8 + 47) < 0)
        operator delete((void *)v8[3]);
      operator delete(v8);
      v8 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_21:
    while (a2 != a3)
    {
      sub_23A029244(a1, (int *)a2 + 4);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_23A028C98(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_23A028B24(v1, v2);
  __cxa_rethrow();
}

void sub_23A028CB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned int *sub_23A028CC8(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = (int *)(a2 + 4);
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_23A028DEC((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_23A028DEC(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  int v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_23A029074(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (uint64_t *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_23A029074(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_239FF1A44();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned int *sub_23A029244(_QWORD *a1, int *a2)
{
  char *v4;
  unsigned int v5;
  _BYTE *v6;

  v4 = (char *)operator new(0x30uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = *a2;
  *((_DWORD *)v4 + 4) = *a2;
  v6 = v4 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    sub_239FF1F64(v6, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
    v5 = *((_DWORD *)v4 + 4);
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)(a2 + 2);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 3);
  }
  *((_QWORD *)v4 + 1) = v5;
  return sub_23A028CC8(a1, (unsigned int *)v4);
}

void sub_23A0292E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A003538((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A0292FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A003538((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A029310(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239FF4830(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    v26 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23A029610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A003538((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A0296F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A029708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23A029784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A029908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A029918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A029940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A029B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A029B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A029BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A029BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23A029BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A029C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A029C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A029C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A029C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A029C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A029CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A029D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A029EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23A029F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;

  if (!a12)
    sub_239FF19E8();
  (*(void (**)(uint64_t *))(*a12 + 48))(a12);
  if (a12 == &a9)
  {
    (*(void (**)(void))(a9 + 32))();
    _Unwind_Resume(a1);
  }
  if (a12)
  {
    (*(void (**)(void))(*a12 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A02A1B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_23A02A4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char *v21;
  uint64_t v22;

  if (!a16)
    sub_239FF19E8();
  (*(void (**)(char *))(*(_QWORD *)a16 + 48))(a16);
  v21 = a16;
  if (a16 == &a13)
  {
    v22 = 4;
    v21 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_8;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_8:

  _Unwind_Resume(a1);
}

void sub_23A02A554(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_23A02A724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02A72C()
{
  void *v0;

  JUMPOUT(0x23A02A7A8);
}

void sub_23A02A734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
    {
LABEL_6:

      JUMPOUT(0x23A02A7A8);
    }
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
  goto LABEL_6;
}

void sub_23A02A73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    sub_239FF19E8();
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 48))(a12);
  JUMPOUT(0x23A02A75CLL);
}

void sub_23A02A794(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_23A08A288(a1);
  _Unwind_Resume(a1);
}

void sub_23A02A9B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02AB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02AB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02AB4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A02AB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02AB84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02ABD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02AC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02AE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02B00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A02B024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02B038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A02B050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02B0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02B168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02B19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02B1FC()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A02B210(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BE20;
  result[1] = v3;
  return result;
}

uint64_t sub_23A02B244(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BE20;
  a2[1] = v2;
  return result;
}

void sub_23A02B260(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForImage", "", v5, 2u);
  }

}

uint64_t sub_23A02B2E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A02B350()
{
  return &unk_250B0BBF0;
}

void sub_23A02B360()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A02B374(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BE78;
  result[1] = v3;
  return result;
}

uint64_t sub_23A02B3A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BE78;
  a2[1] = v2;
  return result;
}

void sub_23A02B3C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForEmbeddingNSData", "", v5, 2u);
  }

}

uint64_t sub_23A02B448(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A02B4B4()
{
  return &unk_250B0BC00;
}

void sub_23A02B4C4()
{
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A02B4D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250B0BED0;
  result[1] = v3;
  return result;
}

uint64_t sub_23A02B50C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250B0BED0;
  a2[1] = v2;
  return result;
}

void sub_23A02B528(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_23A016E78();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_239FE9000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForEmbeddingCSUBuffer", "", v5, 2u);
  }

}

uint64_t sub_23A02B5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23A02B618()
{
  return &unk_250B0BC10;
}

void sub_23A02B624(uint64_t a1, uint64_t *a2)
{
  id v4;
  unint64_t v5;
  BOOL v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  long double v19;
  float v20;
  std::runtime_error *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = (a2[1] - *a2) >> 2;
  sub_23A02BCC4(&v35, *(void **)a1, 0);
  sub_23A02BCC4(v34, *(void **)a1, *(_QWORD *)(a1 + 8));
  v4 = v35;
  if (v35 == (id)v34[0])
    goto LABEL_3;
LABEL_2:
  v5 = v37;
  do
  {
    if (v38 >= v5 || v38 + 1 >= v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Read beyond the end of taxonomy relations buffer!");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v7 = (unsigned __int16 *)(v36 + 2 * v38);
    v8 = *v7;
    v9 = v7[1];
    sub_23A02BAE4((unint64_t *)&v39, v8);
    v10 = *a2;
    if ((_DWORD)v9)
    {
      v11 = v7 + 2;
      v12 = 2 * v9;
      v13 = 0.0;
      do
      {
        sub_23A02BAE4((unint64_t *)&v39, *v11);
        v14 = *v11;
        v15 = *a2;
        v16 = *(float *)(*a2 + 4 * v14);
        if (v16 > 1.0 || v16 < 0.0)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v29, *(float *)(v15 + 4 * v14));
          sub_239FEEC54("Mathematical error during graphical model propagation: probability ", &v29, &v30);
          sub_239FEED88(" for node ", &v30, &v31);
          std::to_string(&v28, *v11);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v28;
          else
            v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          else
            size = v28.__r_.__value_.__l.__size_;
          v24 = std::string::append(&v31, (const std::string::value_type *)v22, size);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          sub_239FEED88(" is out of bounds!", &v32, &v33);
          std::runtime_error::runtime_error(v21, &v33);
          __cxa_throw(v21, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v17 = *(float *)(a1 + 16);
        v18 = powf(v16, v17);
        v13 = v13 - log(1.0 - v18);
        ++v11;
        v12 -= 2;
      }
      while (v12);
    }
    else
    {
      v17 = *(float *)(a1 + 16);
      v13 = 0.0;
    }
    v19 = exp(-v13);
    v20 = fmin(pow(1.0 - v19, 1.0 / v17), 1.0);
    *(float *)(v10 + 4 * v8) = v20;
    if (v38 + 1 >= v37)
    {
      v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Read beyond the end of taxonomy relations buffer!");
      __cxa_throw(v27, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v38 += *(unsigned __int16 *)(v36 + 2 * v38 + 2) + 2;
    v4 = v35;
    if (v35 != (id)v34[0])
      goto LABEL_2;
LABEL_3:
    v5 = v37;
    v6 = v36 == v34[1] && v37 == v34[2];
  }
  while (!v6 || v38 != v34[3]);

}

void sub_23A02B974(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_23A02B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a45 < 0)
  {
    operator delete(a40);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a33);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_7:
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_16:

      _Unwind_Resume(a1);
    }
LABEL_15:
    __cxa_free_exception(v46);

    _Unwind_Resume(a1);
  }
LABEL_14:
  if (!v47)
    goto LABEL_16;
  goto LABEL_15;
}

unint64_t *sub_23A02BAE4(unint64_t *result, unint64_t a2)
{
  unint64_t *v3;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (*result <= a2)
  {
    v3 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, *v3);
    sub_239FEEC54("Score vector provided to graphical model has capacity ", &v10, &v11);
    sub_239FEED88(" but there exists a node with index ", &v11, &v12);
    std::to_string(&v9, a2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_23A02BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

_QWORD *sub_23A02BCC4(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a2;
  *a1 = v5;
  v6 = objc_retainAutorelease(v5);
  a1[1] = objc_msgSend_bytes(v6, v7, v8, v9, v10);
  a1[2] = (unint64_t)objc_msgSend_length(v6, v11, v12, v13, v14) >> 1;
  a1[3] = a3;

  return a1;
}

void sub_23A02BD28(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02BEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A02BECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02BEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02C054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A02C0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02C0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02C1FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02C29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A02C440(_Unwind_Exception *a1, int a2)
{
  void *v2;
  _QWORD *v3;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  sub_239FF1A6C((uint64_t)&v9);

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v3);
  __cxa_end_catch();
  return v7;
}

uint64_t sub_23A02C5B4(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;

  MEMORY[0x23B83FE88](v3, 0x20C4093837F09);
  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_23A02CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (a37 < 0)
    operator delete(__p);

  sub_239FF5234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_23A02CCAC(uint64_t result, char *a2)
{
  int v2;
  std::runtime_error *exception;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if ((_DWORD)result)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_239FEE1FC(&v10, a2);
    sub_239FEEC54("PixelBufferTransfer operation [", &v10, &v11);
    sub_239FEED88("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_23A02CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_23A02CF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

id sub_23A02D9D4(void ***a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  CSUCaptionRuntimeReplacements *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  NSObject *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v81;
  void *v82;
  NSObject *obj;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v81 = a2;
  objc_msgSend_objectForKeyedSubscript_(**a1, v3, (uint64_t)v81, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_objectForKeyedSubscript_(**a1, v7, (uint64_t)v81, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend_array(MEMORY[0x24BDBCEB8], v11, v12, v13, v14);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      obj = v10;
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v84, (uint64_t)v88, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v85;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v85 != v17)
              objc_enumerationMutation(obj);
            v19 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v18);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v20 = v19;
            else
              v20 = 0;
            v21 = v20;
            v25 = v21;
            if (v21)
            {
              objc_msgSend_objectForKeyedSubscript_(v21, v22, (uint64_t)CFSTR("replaceKey"), v23, v24);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_objectForKeyedSubscript_(v25, v27, (uint64_t)CFSTR("replaceKey"), v28, v29);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v30 = 0;
              }

              objc_msgSend_objectForKeyedSubscript_(v25, v31, (uint64_t)CFSTR("replaceWith"), v32, v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_objectForKeyedSubscript_(v25, v35, (uint64_t)CFSTR("replaceWith"), v36, v37);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v38 = 0;
              }

              objc_msgSend_objectForKeyedSubscript_(v25, v39, (uint64_t)CFSTR("replaceProb"), v40, v41);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_objectForKeyedSubscript_(v25, v43, (uint64_t)CFSTR("replaceProb"), v44, v45);
                v46 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v46 = 0;
              }

              objc_msgSend_objectForKeyedSubscript_(v25, v47, (uint64_t)CFSTR("genderOption"), v48, v49);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_objectForKeyedSubscript_(v25, v51, (uint64_t)CFSTR("genderOption"), v52, v53);
                v54 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v54 = 0;
              }

              if (v30 && v38)
              {
                v55 = [CSUCaptionRuntimeReplacements alloc];
                objc_msgSend_doubleValue(v46, v56, v57, v58, v59);
                v61 = (void *)objc_msgSend_initWithKey_value_prob_genderOption_(v55, v60, (uint64_t)v30, (uint64_t)v38, (uint64_t)v54);
                objc_msgSend_addObject_(v82, v62, (uint64_t)v61, v63, v64);

              }
            }

            ++v18;
          }
          while (v16 != v18);
          v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v84, (uint64_t)v88, 16);
        }
        while (v16);
      }
      v66 = v82;
      v67 = obj;
      v68 = obj;
      goto LABEL_36;
    }
  }
  else
  {

  }
  sub_23A016E78();
  v67 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    sub_23A09E460((uint64_t)v81, v67, v69, v70, v71, v72, v73, v74);
  v68 = 0;
  v66 = 0;
LABEL_36:

  v79 = (void *)objc_msgSend_copy(v66, v75, v76, v77, v78);
  return v79;
}

void sub_23A02DD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_23A02DF68(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_23A02E140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_23A02E318(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v6;
  uint64_t v7;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_23A02E4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02E9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  sub_239FF27B8(&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_239FF27B8(&a26);

  _Unwind_Resume(a1);
}

void sub_23A02EB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02F774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;

  v40 = *(_QWORD *)(v38 - 192);
  if (!v40)
  {
LABEL_15:
    sub_239FF38A8((uint64_t)&a18);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  v41 = *(_QWORD *)(v38 - 184);
  v42 = *(void **)(v38 - 192);
  if (v41 == v40)
  {
LABEL_14:
    *(_QWORD *)(v38 - 184) = v40;
    operator delete(v42);
    goto LABEL_15;
  }
  while (1)
  {
    v44 = *(std::__shared_weak_count **)(v41 - 8);
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
        break;
    }
    v43 = *(void **)(v41 - 40);
    if (v43)
      goto LABEL_5;
LABEL_6:
    v41 -= 48;
    if (v41 == v40)
    {
      v42 = *(void **)(v38 - 192);
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  v43 = *(void **)(v41 - 40);
  if (!v43)
    goto LABEL_6;
LABEL_5:
  *(_QWORD *)(v41 - 32) = v43;
  operator delete(v43);
  goto LABEL_6;
}

void sub_23A02F960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 169) < 0)
    operator delete(*(void **)(v34 - 192));
  sub_239FF38A8((uint64_t)&a34);
  if (SHIBYTE(a27) < 0)
    operator delete(a25);

  sub_23A01B6E8((void **)&a20);
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_23A02FAFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A02FB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A02FC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  const void *v12;
  int64_t v13;
  float *v14;
  int64_t v15;
  float *v16;
  float *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  unint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  int64_t v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  float v42;
  float v43;
  void *__p;
  char *v45;
  void *v46[2];
  _OWORD v47[2];
  float *v48;
  float *v49;
  float *v50;

  v12 = (const void *)(a3 + 4);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v13 = a4 - (a3 + 4);
  if (a4 == a3 + 4)
  {
    v14 = 0;
    if (a5)
      goto LABEL_4;
  }
  else
  {
    if (v13 < 0)
      sub_239FEBE68();
    v14 = (float *)operator new(a4 - (a3 + 4));
    v48 = v14;
    v50 = &v14[v13 >> 2];
    memcpy(v14, v12, v13);
    v49 = v50;
    if (a5)
    {
LABEL_4:
      objc_msgSend_nextTokensForInputs_KVCache_AndforMaskPosition_(a5, (const char *)a2, (uint64_t)&v48, a7, a6);
      v14 = v48;
      if (!v48)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  memset(v47, 0, sizeof(v47));
  *(_OWORD *)v46 = 0u;
  if (v14)
  {
LABEL_5:
    v49 = v14;
    operator delete(v14);
  }
LABEL_6:
  if (!BYTE8(v47[1]))
  {
    *(_OWORD *)a1 = *(_OWORD *)v46;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v47[0];
    v46[0] = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v47 + 8);
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_56;
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v15 = (char *)v46[1] - (char *)v46[0];
  if (v46[1] == v46[0])
  {
    v17 = 0;
    v16 = 0;
    v18 = *(_QWORD **)(a2 + 104);
    v19 = (_QWORD *)(a2 + 112);
    if (v18 == (_QWORD *)(a2 + 112))
      goto LABEL_24;
    goto LABEL_18;
  }
  if (v15 < 0)
    sub_239FEBE68();
  v16 = (float *)operator new((char *)v46[1] - (char *)v46[0]);
  v17 = &v16[v15 >> 2];
  v48 = v16;
  v50 = v17;
  memcpy(v16, v46[0], v15);
  v49 = v17;
  v18 = *(_QWORD **)(a2 + 104);
  v19 = (_QWORD *)(a2 + 112);
  if (v18 != (_QWORD *)(a2 + 112))
  {
    do
    {
LABEL_18:
      v16[*((unsigned int *)v18 + 7)] = 0.00000011921;
      v20 = (_QWORD *)v18[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v18[2];
          v22 = *v21 == (_QWORD)v18;
          v18 = v21;
        }
        while (!v22);
      }
      v18 = v21;
    }
    while (v21 != v19);
  }
LABEL_24:
  if (v16 != v17)
  {
    v23 = (char *)v17 - (char *)v16 - 4;
    v24 = v16;
    if (v23 < 4)
      goto LABEL_65;
    v25 = (v23 >> 2) + 1;
    v24 = &v16[v25 & 0x7FFFFFFFFFFFFFFELL];
    v26 = v25 & 0x7FFFFFFFFFFFFFFELL;
    v27 = v16;
    do
    {
      LODWORD(v42) = *(_QWORD *)v27;
      v43 = logf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v27)));
      *(float *)&v28 = logf(v42);
      *((float *)&v28 + 1) = v43;
      *(_QWORD *)v27 = v28;
      v27 += 2;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_65:
      do
      {
        *v24 = logf(*v24);
        ++v24;
      }
      while (v24 != v17);
    }
    if ((char *)v17 - (char *)v16 < 0)
      sub_239FEBE68();
    v29 = (char *)operator new((char *)v17 - (char *)v16);
    __p = v29;
    memcpy(v29, v16, (char *)v17 - (char *)v16);
    v45 = &v29[4 * (v17 - v16)];
    v31 = *((_QWORD *)&v47[0] + 1);
    v30 = *(std::__shared_weak_count **)&v47[1];
    if (!*(_QWORD *)&v47[1])
      goto LABEL_36;
    goto LABEL_34;
  }
  v29 = 0;
  __p = 0;
  v45 = 0;
  v31 = *((_QWORD *)&v47[0] + 1);
  v30 = *(std::__shared_weak_count **)&v47[1];
  if (*(_QWORD *)&v47[1])
  {
LABEL_34:
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
LABEL_36:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v34 = v45 - v29;
  if (v45 != v29)
  {
    if (v34 < 0)
      sub_239FEBE68();
    v35 = (char *)operator new(v45 - v29);
    *(_QWORD *)a1 = v35;
    v36 = &v35[4 * (v34 >> 2)];
    *(_QWORD *)(a1 + 16) = v36;
    memcpy(v35, v29, v34);
    *(_QWORD *)(a1 + 8) = v36;
  }
  *(_QWORD *)(a1 + 24) = v31;
  *(_QWORD *)(a1 + 32) = v30;
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    *(_BYTE *)(a1 + 40) = 1;
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 1;
  }
  if (__p)
    operator delete(__p);
  if (v48)
    operator delete(v48);
  if (*(_QWORD *)&v47[1])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v47[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v47[1] + 16))(*(_QWORD *)&v47[1]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v47[1]);
    }
  }
LABEL_56:
  if (v46[0])
    operator delete(v46[0]);
}

void sub_23A030014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(_QWORD *)(v19 - 96) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A0304B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_23A0304D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_23A0304E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  _Unwind_Resume(a1);
}

void sub_23A0305A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

void sub_23A030B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_23A0311AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  _Unwind_Resume(a1);
}

void sub_23A0315EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v25 = v24;
  v26 = v23;
  v27 = v25;

  _Unwind_Resume(a1);
}

void sub_23A0316D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A031738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A031A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23A031AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A031ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A031B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A031BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A031BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A031E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_23A032208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  sub_239FF27B8((_QWORD *)(v3 - 152));
  _Unwind_Resume(a1);
}

void sub_23A032324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0323FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0324E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0324F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A03262C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A03282C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A03283C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A032B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A032B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A032D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A032D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A032D70(_QWORD *a1)
{
  void *v2;
  size_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  std::runtime_error *exception;
  char *v20;
  char *v21;
  char *v22;
  char v23[8];
  uint64_t v24;
  __int128 __p;
  size_t v26;
  std::string v27;
  size_t __sz;
  _QWORD v29[2];
  _BYTE v30[408];
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  sub_23A033294(v29);
  if ((v30[*(_QWORD *)(v29[0] - 24) + 16] & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  v26 = 0;
  __p = 0uLL;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_239FEBE68();
    v2 = operator new(__sz);
    v3 = (size_t)v2 + __sz;
    *(_QWORD *)&__p = v2;
    v26 = (size_t)v2 + __sz;
    bzero(v2, __sz);
    *((_QWORD *)&__p + 1) = v3;
  }
  std::istream::read();
  sub_23A0333B8(&__p, 1, 1, (uint64_t)v23);
  v4 = sub_23A0334A4((uint64_t)v23, "feature_size");
  v20 = 0;
  sub_23A042500((uint64_t)v4, &v20);
  a1[1] = v20;
  v5 = sub_23A0334A4((uint64_t)v23, "num_hashes");
  v20 = 0;
  sub_23A042500((uint64_t)v5, &v20);
  a1[3] = v20;
  v6 = sub_23A0334A4((uint64_t)v23, "hash_size");
  v20 = 0;
  sub_23A042500((uint64_t)v6, &v20);
  a1[2] = v20;
  v7 = sub_23A0334A4((uint64_t)v23, "matrix");
  v8 = sub_23A0336B4((uint64_t)v7);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v10 = *(const void **)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v11 = v9 - *(_QWORD *)v8;
  if (v9 == *(_QWORD *)v8)
  {
    v12 = 0;
    v13 = a1[2] * a1[1];
    if (v13)
      goto LABEL_8;
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_239FEBE68();
    v12 = (char *)operator new(v9 - *(_QWORD *)v8);
    v20 = v12;
    v22 = &v12[v11];
    memcpy(v12, v10, v11);
    v21 = &v12[v11];
    v13 = a1[2] * a1[1];
    if (v13)
    {
LABEL_8:
      if ((v13 & 0x8000000000000000) != 0)
        sub_239FEBE68();
      v14 = 4 * v13;
      v15 = (char *)operator new(4 * v13);
      v13 = (unint64_t)&v15[4 * v13];
      memcpy(v15, v12, v14);
      v17 = a1 + 4;
      v16 = (void *)a1[4];
      if (v16)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  v15 = 0;
  v17 = a1 + 4;
  v16 = (void *)a1[4];
  if (v16)
  {
LABEL_10:
    a1[5] = v16;
    operator delete(v16);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
  }
LABEL_11:
  a1[4] = v15;
  a1[5] = v13;
  a1[6] = v13;
  if (v12)
    operator delete(v12);
  sub_23A0339A8(&v24, v23[0]);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v29[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B83FC00](v30);
  std::istream::~istream();
  return MEMORY[0x23B83FDF8](v31);
}

void sub_23A0330B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;
  int v42;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      sub_23A0337B8(&a41);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  sub_23A0337B8(&a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A0331AC(_QWORD *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = &off_250B0DB38;
  a1[1] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_23A032D70(a1);
  return a1;
}

void sub_23A0331EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A03320C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DB38;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23A033248(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250B0DB38;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A033294(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x23B83FBF4](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23A033374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x23B83FDF8](v1 + 424);
  _Unwind_Resume(a1);
}

void sub_23A0333B8(_OWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  void *v5;
  _OWORD v6[2];
  char v7;
  uint64_t v8;
  unsigned __int8 *v9;
  void *__p[2];
  __int128 v11;
  char v12;
  char v13;
  unsigned __int8 v14[8];
  uint64_t v15;

  v14[0] = 0;
  v15 = 0;
  v8 = 0;
  v9 = v14;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = a3;
  v6[0] = *a1;
  v6[1] = xmmword_23A0A3AE0;
  v7 = 1;
  if (!sub_23A034288((uint64_t)v6, 4, (uint64_t)&v9, a2, 0))
  {
    *(_BYTE *)a4 = 9;
    *(_QWORD *)(a4 + 8) = 0;
    v5 = __p[0];
    if (!__p[0])
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_23A041790(a4, v14);
  v5 = __p[0];
  if (__p[0])
  {
LABEL_3:
    __p[1] = v5;
    operator delete(v5);
  }
LABEL_4:
  sub_23A0339A8(&v15, v14[0]);
}

void sub_23A033478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t *v17;
  uint64_t v18;

  if (__p)
    operator delete(__p);
  sub_23A0339A8(v17, *(unsigned __int8 *)(v18 - 32));
  _Unwind_Resume(a1);
}

uint64_t **sub_23A0334A4(uint64_t a1, const char *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  void *exception;
  char *v14;
  std::string v15;
  std::string __dst;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v14 = (char *)sub_23A0422F8((char *)a1);
      sub_239FEE1FC(&v15, v14);
      sub_239FEEC54("cannot use operator[] with a string argument with ", &v15, &__dst);
      sub_23A042180(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_250B0DA50, (void (*)(void *))sub_23A042320);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = v4 + 1;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v5 = *(uint64_t ***)(a1 + 8);
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_11:
    memcpy(p_dst, a2, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v11 = sub_23A042350(v5, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, &v15);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v11 + 7;
}

void sub_23A033638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A0336B4(uint64_t a1)
{
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  if (*(_BYTE *)a1 != 8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_23A0422F8((char *)a1);
    sub_239FEE1FC(&v5, v4);
    sub_239FEEC54("type must be binary, but is ", &v5, &v6);
    sub_23A042180(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_250B0DA50, (void (*)(void *))sub_23A042320);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_23A033758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

_QWORD *sub_23A0337B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B83FC00](a1 + 2);
  std::istream::~istream();
  MEMORY[0x23B83FDF8](a1 + 53);
  return a1;
}

void sub_23A033810(uint64_t a1, const float *__B, float *__C)
{
  vDSP_Length v5;
  void *v6;
  std::runtime_error *exception;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float __Ca;
  float __Ba;

  if (!__B || !__C)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null pointer");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  vDSP_mmul(*(const float **)(a1 + 32), 1, __B, 1, __C, 1, *(_QWORD *)(a1 + 16), 1uLL, *(_QWORD *)(a1 + 8));
  __Ca = 1.0;
  __Ba = 0.0;
  v5 = *(_QWORD *)(a1 + 16);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (v5)
  {
    if (v5 >> 62)
      sub_239FEBE68();
    v6 = operator new(4 * v5);
    bzero(v6, 4 * v5);
  }
  else
  {
    v6 = 0;
  }
  vDSP_vthrsc(__C, 1, &__Ba, &__Ca, (float *)v6, 1, v5);
  v8 = 1.0;
  v9 = 0.0;
  vDSP_vclip((const float *)v6, 1, &v9, &v8, __C, 1, *(_QWORD *)(a1 + 16));
  if (v6)
    operator delete(v6);
}

void sub_23A033948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A03395C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

void sub_23A03398C(uint64_t a1, float *a2, uint64_t a3)
{
  sub_239FF9DE4(a2, *(_QWORD *)(a1 + 16) / *(_QWORD *)(a1 + 24), 1, a3);
}

void sub_23A0339A8(uint64_t *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_23A033FBC((uint64_t)&__p, *(_QWORD *)(*a1 + 16));
    v7 = *a1 + 8;
    v8 = *(char **)*a1;
    if (v8 != (char *)v7)
    {
      v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          v9 = sub_23A0340F4(&__p, v8 + 56);
        }
        else
        {
          *v9 = v8[56];
          *((_QWORD *)v9 + 1) = *((_QWORD *)v8 + 8);
          v8[56] = 0;
          *((_QWORD *)v8 + 8) = 0;
          v9 += 16;
        }
        v66 = v9;
        v10 = (char *)*((_QWORD *)v8 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (char *)*((_QWORD *)v8 + 2);
            v12 = *(_QWORD *)v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_23A033FBC((uint64_t)&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
    v4 = *(_QWORD *)*a1;
    v5 = *(_QWORD *)(*a1 + 8);
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *(_BYTE *)v4;
          *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
          *(_BYTE *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_23A0340F4(&__p, (char *)v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v14 = (char *)__p;
  v13 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v13 - 16);
      v64 = (_QWORD *)*((_QWORD *)v13 - 1);
      *(v13 - 16) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v15 = v66 - 16;
      sub_23A0339A8(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 != 1)
      {
        if (v63 == 2)
        {
          v16 = (_QWORD *)*v64;
          v17 = v64 + 1;
          v18 = (_QWORD *)v64[1];
          if ((_QWORD *)*v64 != v18)
          {
            do
            {
              if (v15 < v67)
              {
                *v15 = *(_BYTE *)v16;
                *((_QWORD *)v15 + 1) = v16[1];
                *(_BYTE *)v16 = 0;
                v16[1] = 0;
                v15 += 16;
              }
              else
              {
                v19 = (char *)__p;
                v20 = (v15 - (_BYTE *)__p) >> 4;
                v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 60)
                  goto LABEL_104;
                v22 = v67 - (_BYTE *)__p;
                if ((v67 - (_BYTE *)__p) >> 3 > v21)
                  v21 = v22 >> 3;
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                  v23 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v23 = v21;
                if (v23 >> 60)
                  goto LABEL_105;
                v24 = (char *)operator new(16 * v23);
                v25 = &v24[16 * v20];
                *v25 = *(_BYTE *)v16;
                *((_QWORD *)v25 + 1) = v16[1];
                *(_BYTE *)v16 = 0;
                v16[1] = 0;
                v26 = v66;
                v27 = v25;
                if (v66 != v19)
                {
                  do
                  {
                    v28 = *(v26 - 16);
                    v26 -= 16;
                    *(v27 - 16) = v28;
                    v27 -= 16;
                    *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                    *v26 = 0;
                    *((_QWORD *)v26 + 1) = 0;
                  }
                  while (v26 != v19);
                  v19 = v66;
                }
                v29 = &v24[16 * v23];
                v30 = (char *)__p;
                v15 = v25 + 16;
                __p = v27;
                v66 = v25 + 16;
                v67 = v29;
                if (v19 != v30)
                {
                  v31 = v19 - 8;
                  do
                  {
                    v32 = v31 - 8;
                    sub_23A0339A8(v31, *(v31 - 8));
                    v31 -= 16;
                  }
                  while (v32 != v30);
                }
                if (v30)
                  operator delete(v30);
              }
              v66 = v15;
              v16 += 2;
            }
            while (v16 != v18);
            v16 = (_QWORD *)*v64;
            v17 = v64 + 1;
            v50 = v64[1];
            if (v50 != *v64)
            {
              v51 = v50 - 8;
              do
              {
                v52 = (_QWORD *)(v51 - 8);
                sub_23A0339A8(v51, *(unsigned __int8 *)(v51 - 8));
                v51 -= 16;
              }
              while (v52 != v16);
            }
          }
          *v17 = v16;
        }
        goto LABEL_24;
      }
      v33 = (uint64_t)v64;
      v34 = v64 + 1;
      v35 = (_QWORD *)*v64;
      if ((_QWORD *)*v64 != v64 + 1)
        break;
LABEL_80:
      sub_23A03421C(v33, *(char **)(v33 + 8));
      *(_QWORD *)v33 = v33 + 8;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 8) = 0;
LABEL_24:
      sub_23A0339A8(&v64, v63);
      v14 = (char *)__p;
      v13 = v66;
      if (__p == v66)
      {
        v3 = v62;
        goto LABEL_82;
      }
    }
    while (1)
    {
      if (v15 < v67)
      {
        *v15 = *((_BYTE *)v35 + 56);
        *((_QWORD *)v15 + 1) = v35[8];
        *((_BYTE *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        v36 = (_QWORD *)v35[1];
        if (v36)
          goto LABEL_70;
        goto LABEL_72;
      }
      v37 = (char *)__p;
      v38 = (v15 - (_BYTE *)__p) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
LABEL_104:
        sub_239FEBE68();
      v40 = v67 - (_BYTE *)__p;
      if ((v67 - (_BYTE *)__p) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41 >> 60)
LABEL_105:
        sub_239FF1A44();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      *v43 = *((_BYTE *)v35 + 56);
      *((_QWORD *)v43 + 1) = v35[8];
      *((_BYTE *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v37);
        v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_23A0339A8(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          v15 = v44;
          v66 = v44;
          v36 = (_QWORD *)v35[1];
          if (v36)
            goto LABEL_70;
          goto LABEL_72;
        }
      }
      operator delete(v15);
      v15 = v44;
      v66 = v44;
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (_QWORD *)v35[2];
        v12 = *v49 == (_QWORD)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_82:
  switch(v3)
  {
    case 0:
      sub_23A03421C(*a1, *(char **)(*a1 + 8));
      goto LABEL_95;
    case 1:
      v53 = (void **)*a1;
      v55 = *(void **)*a1;
      if (!v55)
        goto LABEL_96;
      v56 = v53[1];
      v54 = *(void **)*a1;
      if (v56 != v55)
      {
        v57 = (uint64_t)v56 - 8;
        do
        {
          v58 = (void *)(v57 - 8);
          sub_23A0339A8(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
        goto LABEL_96;
      v54 = *v53;
      break;
    case 7:
      v53 = (void **)*a1;
      v54 = *(void **)*a1;
      if (!v54)
        goto LABEL_96;
      v53[1] = v54;
      break;
    default:
      goto LABEL_97;
  }
  operator delete(v54);
LABEL_95:
  v53 = (void **)*a1;
LABEL_96:
  operator delete(v53);
  v14 = (char *)__p;
LABEL_97:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_23A0339A8(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_23A033FBC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_239FEBE68();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_23A0339A8(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

uint64_t sub_23A0340A0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_23A0339A8((uint64_t *)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_23A0340F4(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_239FEBE68();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_239FF1A44();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_23A0339A8(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

void sub_23A03421C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_23A03421C(a1, *(_QWORD *)a2);
    sub_23A03421C(a1, *((_QWORD *)a2 + 1));
    sub_23A0339A8(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_23A034288(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string __p;
  std::exception v29;
  std::runtime_error v30;
  void *v31[2];
  char v32;

  *(_QWORD *)(a1 + 40) = a3;
  switch(a2)
  {
    case 1:
      v8 = sub_23A034634(a1, 1, a5);
      goto LABEL_9;
    case 2:
      v8 = sub_23A03528C((unsigned __int8 **)a1);
      goto LABEL_9;
    case 3:
      v11 = *(unsigned __int8 **)a1;
      v10 = *(unsigned __int8 **)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 24) + 1;
      break;
    case 4:
      LODWORD(v29.__vftable) = 0;
      sub_23A036118((unsigned __int8 **)a1, 4, (int *)&v29);
      if (sub_23A0362CC(*(_QWORD *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        && sub_23A036560((unsigned __int8 **)a1, 0))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
        v9 = 1;
        goto LABEL_14;
      }
      return 0;
    default:
      return 0;
  }
  while (1)
  {
    *(_QWORD *)(a1 + 24) = v12;
    if (v11 == v10)
      break;
    v14 = *v11++;
    v13 = v14;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 16) = v14;
    ++v12;
    if (v14 != 78)
      goto LABEL_8;
  }
  v13 = -1;
  *(_QWORD *)(a1 + 16) = -1;
LABEL_8:
  v8 = sub_23A03CE80(a1, v13);
LABEL_9:
  v9 = v8;
  if ((_DWORD)v8)
  {
LABEL_14:
    if (!a4)
      return v9;
    if (a2 == 3)
    {
      v15 = *(_QWORD *)(a1 + 24);
      v17 = *(unsigned __int8 **)a1;
      v16 = *(unsigned __int8 **)(a1 + 8);
      while (1)
      {
        *(_QWORD *)(a1 + 24) = ++v15;
        if (v17 == v16)
          goto LABEL_34;
        v18 = *v17++;
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 16) = v18;
        if (v18 != 78)
          goto LABEL_22;
      }
    }
    v15 = *(_QWORD *)(a1 + 24) + 1;
    *(_QWORD *)(a1 + 24) = v15;
    v19 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
LABEL_34:
      *(_QWORD *)(a1 + 16) = -1;
      return 1;
    }
    v20 = *v19;
    *(_QWORD *)a1 = v19 + 1;
    *(_QWORD *)(a1 + 16) = v20;
LABEL_22:
    v21 = *(_QWORD *)(a1 + 40);
    sub_23A035958(a1, v31);
    v22 = *(_QWORD *)(a1 + 24);
    sub_23A035958(a1, &v26);
    sub_239FEEC54("expected end of input; last byte: 0x", &v26, &v27);
    sub_239FEE1FC(v24, "value");
    sub_23A035DF4(a2, (uint64_t)&v27, (uint64_t)v24, &__p);
    sub_23A035A34(110, v22, (uint64_t)&__p, (uint64_t)&v29);
    v9 = sub_23A035904(v21, v15, (uint64_t)v31, (uint64_t)&v29);
    v29.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
    std::runtime_error::~runtime_error(&v30);
    std::exception::~exception(&v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_30;
      }
    }
    else if ((v25 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v24[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v32 & 0x80000000) == 0)
        return v9;
LABEL_32:
      operator delete(v31[0]);
      return v9;
    }
LABEL_31:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0)
      return v9;
    goto LABEL_32;
  }
  return v9;
}

void sub_23A03454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::exception a33)
{
  std::runtime_error *v33;
  uint64_t v34;

  a33.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if ((a26 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0)
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_7:
    operator delete(a15);
    if ((*(char *)(v34 - 49) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_12;
  }
LABEL_11:
  if ((*(char *)(v34 - 49) & 0x80000000) == 0)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(*(void **)(v34 - 72));
  _Unwind_Resume(a1);
}

void sub_23A034604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x23A0345DCLL);
  JUMPOUT(0x23A0345A8);
}

void sub_23A034614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x23A0345B0);
  JUMPOUT(0x23A0345ECLL);
}

void sub_23A034624()
{
  uint64_t v0;

  if (*(char *)(v0 - 49) < 0)
    JUMPOUT(0x23A0345F4);
  JUMPOUT(0x23A0345C0);
}

uint64_t sub_23A034634(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unint64_t v12;
  size_t v14;
  size_t v15;
  void **v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  void **p_dst;
  unsigned __int8 **v30;
  double v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  double v36;
  unsigned __int8 **v37;
  double v38;
  unint64_t v39;
  unsigned __int8 **v40;
  unint64_t data_low;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  unint64_t v44;
  unsigned __int8 **v45;
  std::string::size_type v46;
  unsigned __int8 **v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *exception;
  void *v52[2];
  char v53;
  void *v54[2];
  unint64_t v55;
  std::string v56;
  std::string __p;
  __int16 v58;
  uint64_t v59;
  double __dst;
  size_t v61;
  int64_t v62;

  if (!a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 + 1;
    goto LABEL_6;
  }
  ++*(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v6 = -1;
    *(_QWORD *)(a1 + 16) = -1;
    v7 = 0;
    goto LABEL_6;
  }
  v6 = *v5;
  *(_QWORD *)a1 = v5 + 1;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = v6 + 1;
  if (v6 + 1 <= 0xFC)
  {
LABEL_6:
    switch(v7)
    {
      case 0uLL:
        return sub_23A03685C((_QWORD *)a1, 1, "value");
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
        v10 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = v6;
        sub_23A03B0F4(v10, (uint64_t *)&__p);
        return 1;
      case 0x19uLL:
        LOBYTE(__dst) = 0;
        v8 = sub_23A038C9C((unsigned __int8 **)a1, 1, &__dst);
        if (!(_DWORD)v8)
          return v8;
        v45 = *(unsigned __int8 ***)(a1 + 40);
        v46 = LOBYTE(__dst);
        goto LABEL_108;
      case 0x1AuLL:
        LOWORD(__dst) = 0;
        v8 = sub_23A039A38((unsigned __int8 **)a1, 1, &__dst);
        if (!(_DWORD)v8)
          return v8;
        v45 = *(unsigned __int8 ***)(a1 + 40);
        v46 = LOWORD(__dst);
        goto LABEL_108;
      case 0x1BuLL:
        LODWORD(__dst) = 0;
        v8 = sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&__dst);
        if (!(_DWORD)v8)
          return v8;
        v45 = *(unsigned __int8 ***)(a1 + 40);
        v46 = LODWORD(__dst);
        goto LABEL_108;
      case 0x1CuLL:
        __dst = 0.0;
        v8 = sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&__dst);
        if (!(_DWORD)v8)
          return v8;
        v45 = *(unsigned __int8 ***)(a1 + 40);
        v46 = *(_QWORD *)&__dst;
LABEL_108:
        __p.__r_.__value_.__r.__words[0] = v46;
        sub_23A03B0F4(v45, (uint64_t *)&__p);
        return v8;
      case 0x21uLL:
      case 0x22uLL:
      case 0x23uLL:
      case 0x24uLL:
      case 0x25uLL:
      case 0x26uLL:
      case 0x27uLL:
      case 0x28uLL:
      case 0x29uLL:
      case 0x2AuLL:
      case 0x2BuLL:
      case 0x2CuLL:
      case 0x2DuLL:
      case 0x2EuLL:
      case 0x2FuLL:
      case 0x30uLL:
      case 0x31uLL:
      case 0x32uLL:
      case 0x33uLL:
      case 0x34uLL:
      case 0x35uLL:
      case 0x36uLL:
      case 0x37uLL:
      case 0x38uLL:
        v9 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = (char)(31 - v6);
        sub_23A0397F8(v9, (uint64_t *)&__p);
        return 1;
      case 0x39uLL:
        LOBYTE(__dst) = 0;
        v8 = sub_23A038C9C((unsigned __int8 **)a1, 1, &__dst);
        if (!(_DWORD)v8)
          return v8;
        v43 = *(unsigned __int8 ***)(a1 + 40);
        v44 = LOBYTE(__dst);
        goto LABEL_118;
      case 0x3AuLL:
        LOWORD(__dst) = 0;
        v8 = sub_23A039A38((unsigned __int8 **)a1, 1, &__dst);
        if (!(_DWORD)v8)
          return v8;
        v43 = *(unsigned __int8 ***)(a1 + 40);
        v44 = LOWORD(__dst);
        goto LABEL_118;
      case 0x3BuLL:
        LODWORD(__dst) = 0;
        v8 = sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&__dst);
        if (!(_DWORD)v8)
          return v8;
        v43 = *(unsigned __int8 ***)(a1 + 40);
        v44 = LODWORD(__dst);
        goto LABEL_118;
      case 0x3CuLL:
        __dst = 0.0;
        v8 = sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&__dst);
        if (!(_DWORD)v8)
          return v8;
        v43 = *(unsigned __int8 ***)(a1 + 40);
        v44 = *(_QWORD *)&__dst;
LABEL_118:
        __p.__r_.__value_.__r.__words[0] = ~v44;
        sub_23A0397F8(v43, (uint64_t *)&__p);
        return v8;
      case 0x41uLL:
      case 0x42uLL:
      case 0x43uLL:
      case 0x44uLL:
      case 0x45uLL:
      case 0x46uLL:
      case 0x47uLL:
      case 0x48uLL:
      case 0x49uLL:
      case 0x4AuLL:
      case 0x4BuLL:
      case 0x4CuLL:
      case 0x4DuLL:
      case 0x4EuLL:
      case 0x4FuLL:
      case 0x50uLL:
      case 0x51uLL:
      case 0x52uLL:
      case 0x53uLL:
      case 0x54uLL:
      case 0x55uLL:
      case 0x56uLL:
      case 0x57uLL:
      case 0x58uLL:
      case 0x59uLL:
      case 0x5AuLL:
      case 0x5BuLL:
      case 0x5CuLL:
      case 0x60uLL:
        memset(&__p, 0, sizeof(__p));
        v58 = 0;
        v8 = sub_23A03A004((unsigned __int8 **)a1, (uint64_t)&__p);
        if ((_DWORD)v8)
          sub_23A038F98(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return v8;
      case 0x61uLL:
      case 0x62uLL:
      case 0x63uLL:
      case 0x64uLL:
      case 0x65uLL:
      case 0x66uLL:
      case 0x67uLL:
      case 0x68uLL:
      case 0x69uLL:
      case 0x6AuLL:
      case 0x6BuLL:
      case 0x6CuLL:
      case 0x6DuLL:
      case 0x6EuLL:
      case 0x6FuLL:
      case 0x70uLL:
      case 0x71uLL:
      case 0x72uLL:
      case 0x73uLL:
      case 0x74uLL:
      case 0x75uLL:
      case 0x76uLL:
      case 0x77uLL:
      case 0x78uLL:
      case 0x79uLL:
      case 0x7AuLL:
      case 0x7BuLL:
      case 0x7CuLL:
      case 0x80uLL:
        memset(&__p, 0, sizeof(__p));
        v8 = sub_23A03A668((unsigned __int8 **)a1, &__p);
        if ((_DWORD)v8)
          sub_23A038610(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        goto LABEL_13;
      case 0x81uLL:
      case 0x82uLL:
      case 0x83uLL:
      case 0x84uLL:
      case 0x85uLL:
      case 0x86uLL:
      case 0x87uLL:
      case 0x88uLL:
      case 0x89uLL:
      case 0x8AuLL:
      case 0x8BuLL:
      case 0x8CuLL:
      case 0x8DuLL:
      case 0x8EuLL:
      case 0x8FuLL:
      case 0x90uLL:
      case 0x91uLL:
      case 0x92uLL:
      case 0x93uLL:
      case 0x94uLL:
      case 0x95uLL:
      case 0x96uLL:
      case 0x97uLL:
      case 0x98uLL:
        v11 = v6 & 0x1F;
        if (!sub_23A038A08(*(_QWORD *)(a1 + 40), v11))
          return 0;
        if (!v11)
          goto LABEL_21;
        do
        {
          if ((sub_23A034634(a1, 1, a3) & 1) == 0)
            return 0;
          --v11;
        }
        while (v11);
LABEL_21:
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
        return 1;
      case 0x99uLL:
        __p.__r_.__value_.__s.__data_[0] = 0;
        v8 = 0;
        if (!sub_23A038C9C((unsigned __int8 **)a1, 1, &__p))
          return v8;
        data_low = __p.__r_.__value_.__s.__data_[0];
        return sub_23A03AD54((unsigned __int8 **)a1, data_low, a3);
      case 0x9AuLL:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        v8 = 0;
        if (!sub_23A039A38((unsigned __int8 **)a1, 1, &__p))
          return v8;
        data_low = LOWORD(__p.__r_.__value_.__l.__data_);
        return sub_23A03AD54((unsigned __int8 **)a1, data_low, a3);
      case 0x9BuLL:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        v8 = 0;
        if (!sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&__p))
          return v8;
        data_low = LODWORD(__p.__r_.__value_.__l.__data_);
        return sub_23A03AD54((unsigned __int8 **)a1, data_low, a3);
      case 0x9CuLL:
        __p.__r_.__value_.__r.__words[0] = 0;
        if (!sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&__p))
          return 0;
        data_low = __p.__r_.__value_.__r.__words[0];
        return sub_23A03AD54((unsigned __int8 **)a1, data_low, a3);
      case 0xA0uLL:
        return sub_23A03AD54((unsigned __int8 **)a1, 0xFFFFFFFFFFFFFFFFLL, a3);
      case 0xA1uLL:
      case 0xA2uLL:
      case 0xA3uLL:
      case 0xA4uLL:
      case 0xA5uLL:
      case 0xA6uLL:
      case 0xA7uLL:
      case 0xA8uLL:
      case 0xA9uLL:
      case 0xAAuLL:
      case 0xABuLL:
      case 0xACuLL:
      case 0xADuLL:
      case 0xAEuLL:
      case 0xAFuLL:
      case 0xB0uLL:
      case 0xB1uLL:
      case 0xB2uLL:
      case 0xB3uLL:
      case 0xB4uLL:
      case 0xB5uLL:
      case 0xB6uLL:
      case 0xB7uLL:
      case 0xB8uLL:
        v12 = v6 & 0x1F;
        return sub_23A03AE3C(a1, v12, a3);
      case 0xB9uLL:
        __p.__r_.__value_.__s.__data_[0] = 0;
        v8 = 0;
        if (!sub_23A038C9C((unsigned __int8 **)a1, 1, &__p))
          return v8;
        v39 = __p.__r_.__value_.__s.__data_[0];
        return sub_23A03AE3C(a1, v39, a3);
      case 0xBAuLL:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        v8 = 0;
        if (!sub_23A039A38((unsigned __int8 **)a1, 1, &__p))
          return v8;
        v39 = LOWORD(__p.__r_.__value_.__l.__data_);
        return sub_23A03AE3C(a1, v39, a3);
      case 0xBBuLL:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        v8 = 0;
        if (!sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&__p))
          return v8;
        v39 = LODWORD(__p.__r_.__value_.__l.__data_);
        return sub_23A03AE3C(a1, v39, a3);
      case 0xBCuLL:
        __p.__r_.__value_.__r.__words[0] = 0;
        if (!sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&__p))
          return 0;
        v39 = __p.__r_.__value_.__r.__words[0];
        return sub_23A03AE3C(a1, v39, a3);
      case 0xC0uLL:
        v12 = -1;
        return sub_23A03AE3C(a1, v12, a3);
      case 0xC7uLL:
      case 0xC8uLL:
      case 0xC9uLL:
      case 0xCAuLL:
      case 0xCBuLL:
      case 0xCCuLL:
      case 0xCDuLL:
      case 0xCEuLL:
      case 0xCFuLL:
      case 0xD0uLL:
      case 0xD1uLL:
      case 0xD2uLL:
      case 0xD3uLL:
      case 0xD4uLL:
      case 0xD5uLL:
      case 0xD9uLL:
      case 0xDAuLL:
      case 0xDBuLL:
      case 0xDCuLL:
        if ((_DWORD)a3 == 1)
        {
          switch(v6)
          {
            case 0xD8uLL:
              __p.__r_.__value_.__s.__data_[0] = 0;
              sub_23A038C9C((unsigned __int8 **)a1, 1, &__p);
              break;
            case 0xD9uLL:
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              sub_23A039A38((unsigned __int8 **)a1, 1, &__p);
              break;
            case 0xDAuLL:
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&__p);
              break;
            case 0xDBuLL:
              __p.__r_.__value_.__r.__words[0] = 0;
              sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&__p);
              break;
            default:
              return sub_23A034634(a1, 1, 1);
          }
          return sub_23A034634(a1, 1, 1);
        }
        if ((_DWORD)a3)
        {
LABEL_30:
          v17 = *(unsigned __int8 ***)(a1 + 40);
          __p.__r_.__value_.__s.__data_[0] = 0;
          sub_23A0393A0(v17, (unsigned __int8 *)&__p);
          return 1;
        }
        __p.__r_.__value_.__s.__data_[2] = 0;
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        snprintf((char *)&__p, 3uLL, "%.2hhX", v6);
        v14 = strlen((const char *)&__p);
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v15 = v14;
        if (v14 >= 0x17)
        {
          v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v18 = v14 | 7;
          v19 = v18 + 1;
          *(double *)&v16 = COERCE_DOUBLE(operator new(v18 + 1));
          v61 = v15;
          v62 = v19 | 0x8000000000000000;
          __dst = *(double *)&v16;
        }
        else
        {
          HIBYTE(v62) = v14;
          *(double *)&v16 = COERCE_DOUBLE(&__dst);
          if (!v14)
          {
LABEL_39:
            *((_BYTE *)v16 + v15) = 0;
            v20 = SHIBYTE(v62);
            if (v62 >= 0)
              v21 = HIBYTE(v62);
            else
              v21 = v61;
            v22 = v21 + 16;
            if (v21 + 16 > 0x7FFFFFFFFFFFFFF7)
              sub_239FEBDE0();
            v23 = *(_QWORD *)(a1 + 40);
            v24 = *(_QWORD *)(a1 + 24);
            if (v22 >= 0x17)
            {
              v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v26 = v22 | 7;
              v27 = v26 + 1;
              v28 = (unint64_t *)operator new(v26 + 1);
              v54[1] = (void *)(v21 + 16);
              v55 = v27 | 0x8000000000000000;
              v54[0] = v28;
              *(_OWORD *)v28 = *(_OWORD *)"invalid byte: 0x";
              v25 = v28 + 2;
            }
            else
            {
              v25 = &v55;
              v55 = 0;
              HIBYTE(v55) = v21 + 16;
              *(_OWORD *)v54 = *(_OWORD *)"invalid byte: 0x";
              if (!v21)
                goto LABEL_53;
            }
            if (v20 >= 0)
              p_dst = (void **)&__dst;
            else
              p_dst = *(void ***)&__dst;
            memmove(v25, p_dst, v21);
LABEL_53:
            *((_BYTE *)v25 + v21) = 0;
            v53 = 5;
            strcpy((char *)v52, "value");
            sub_23A035DF4(1, (uint64_t)v54, (uint64_t)v52, &v56);
            sub_23A035A34(112, v24, (uint64_t)&v56, (uint64_t)&__p);
            *(_BYTE *)(v23 + 40) = 1;
            if (*(_BYTE *)(v23 + 41))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = &off_250B0DDA0;
              exception[2] = __p.__r_.__value_.__r.__words[1];
              MEMORY[0x23B83FB10](exception + 4, &__p.__r_.__value_.__r.__words[2]);
              *(_QWORD *)exception = &off_250B0DD50;
              *((_QWORD *)exception + 4) = v59;
              __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
            std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
            std::exception::~exception((std::exception *)&__p);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((v53 & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v55) & 0x80000000) == 0)
                  goto LABEL_57;
                goto LABEL_61;
              }
            }
            else if ((v53 & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v52[0]);
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_57:
              if ((v20 & 0x80000000) == 0)
                return 0;
LABEL_62:
              operator delete(*(void **)&__dst);
              return 0;
            }
LABEL_61:
            operator delete(v54[0]);
            if ((v20 & 0x80000000) == 0)
              return 0;
            goto LABEL_62;
          }
        }
        memcpy(v16, &__p, v15);
        goto LABEL_39;
      case 0xF5uLL:
        goto LABEL_30;
      case 0xF6uLL:
        v40 = *(unsigned __int8 ***)(a1 + 40);
        v8 = 1;
        __p.__r_.__value_.__s.__data_[0] = 1;
        sub_23A0393A0(v40, (unsigned __int8 *)&__p);
        return v8;
      case 0xF7uLL:
        v42 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = 0;
        sub_23A0395E0(v42);
        return 1;
      case 0xFAuLL:
        ++*(_QWORD *)(a1 + 24);
        v32 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        {
          v33 = -1;
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)a1 = v32 + 1;
        }
        *(_QWORD *)(a1 + 16) = v33;
        if (!sub_23A03685C((_QWORD *)a1, 1, "number"))
          return 0;
        ++*(_QWORD *)(a1 + 24);
        v34 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        {
          v35 = -1;
        }
        else
        {
          v35 = *v34;
          *(_QWORD *)a1 = v34 + 1;
        }
        *(_QWORD *)(a1 + 16) = v35;
        if (!sub_23A03685C((_QWORD *)a1, 1, "number"))
          return 0;
        v56.__r_.__value_.__s.__data_[0] = v35;
        v56.__r_.__value_.__s.__data_[1] = v33;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
        v36 = sub_23A03B0A0(&__p);
        v37 = *(unsigned __int8 ***)(a1 + 40);
        if (((uint64_t)v56.__r_.__value_.__l.__data_ & 0x8000) != 0)
          v38 = -v36;
        else
          v38 = v36;
        sub_239FEE1FC(&__p, "");
        __dst = v38;
        sub_23A0383D0(v37, (uint64_t *)&__dst);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 1;
      case 0xFBuLL:
        LODWORD(v56.__r_.__value_.__l.__data_) = 0;
        v8 = sub_23A039B10((unsigned __int8 **)a1, 1, (int *)&v56);
        if (!(_DWORD)v8)
          return v8;
        v30 = *(unsigned __int8 ***)(a1 + 40);
        v31 = *(float *)&v56.__r_.__value_.__l.__data_;
        sub_239FEE1FC(&__p, "");
        __dst = v31;
        sub_23A0383D0(v30, (uint64_t *)&__dst);
        goto LABEL_13;
      case 0xFCuLL:
        v56.__r_.__value_.__r.__words[0] = 0;
        v8 = sub_23A039CC4((unsigned __int8 **)a1, 1, (unint64_t *)&v56);
        if (!(_DWORD)v8)
          return v8;
        v47 = *(unsigned __int8 ***)(a1 + 40);
        v48 = *(double *)&v56.__r_.__value_.__l.__data_;
        sub_239FEE1FC(&__p, "");
        __dst = v48;
        sub_23A0383D0(v47, (uint64_t *)&__dst);
LABEL_13:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return v8;
      default:
        break;
    }
  }
  sub_23A035958(a1, &__dst);
  v49 = *(_QWORD *)(a1 + 40);
  v50 = *(_QWORD *)(a1 + 24);
  std::operator+<char>();
  sub_239FEE1FC(v52, "value");
  sub_23A035DF4(1, (uint64_t)v54, (uint64_t)v52, &v56);
  sub_23A035A34(112, v50, (uint64_t)&v56, (uint64_t)&__p);
  v8 = sub_23A035904(v49, v50, (uint64_t)&__dst, (uint64_t)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
  std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
  std::exception::~exception((std::exception *)&__p);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_127:
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_132;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v52[0]);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_128:
    if (SHIBYTE(v62) < 0)
      goto LABEL_133;
    return v8;
  }
LABEL_132:
  operator delete(v54[0]);
  if (SHIBYTE(v62) < 0)
LABEL_133:
    operator delete(*(void **)&__dst);
  return v8;
}

void sub_23A035110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A03528C(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  std::string::size_type v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 **v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  std::string::size_type v11;
  unsigned __int8 **v12;
  std::string::size_type v13;
  unint64_t data_low;
  unint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  void *v21;
  unsigned __int8 **v22;
  double v23;
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  std::string v28;
  std::string __p;
  __int16 v30;
  void *v31[2];
  char v32;

  ++a1[3];
  v2 = *a1;
  if (*a1 == a1[1])
  {
    a1[2] = (unsigned __int8 *)-1;
    return sub_23A03685C(a1, 2, "value");
  }
  else
  {
    v3 = *v2;
    *a1 = v2 + 1;
    a1[2] = (unsigned __int8 *)v3;
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        v4 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = v3;
        sub_23A03B0F4(v4, (uint64_t *)&__p);
        goto LABEL_4;
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
        return sub_23A03C074((uint64_t)a1, v3 & 0xF);
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
        v8 = v3 & 0xF;
        if (!sub_23A038A08((uint64_t)a1[5], v8))
          goto LABEL_65;
        if (!v8)
          goto LABEL_16;
        do
        {
          if ((sub_23A03528C(a1) & 1) == 0)
          {
LABEL_65:
            v5 = 0;
            goto LABEL_5;
          }
          --v8;
        }
        while (v8);
LABEL_16:
        *((_QWORD *)a1[5] + 2) -= 8;
LABEL_4:
        v5 = 1;
        goto LABEL_5;
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 217:
      case 218:
      case 219:
        memset(&__p, 0, sizeof(__p));
        v5 = sub_23A03C258(a1, &__p);
        if ((_DWORD)v5)
          sub_23A038610((unsigned __int8 **)a1[5], (uint64_t)&__p);
        goto LABEL_8;
      case 192:
        v16 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = 0;
        sub_23A0395E0(v16);
        goto LABEL_4;
      case 194:
        v9 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_23A0393A0(v9, (unsigned __int8 *)&__p);
        goto LABEL_4;
      case 195:
        v19 = (unsigned __int8 **)a1[5];
        v5 = 1;
        __p.__r_.__value_.__s.__data_[0] = 1;
        sub_23A0393A0(v19, (unsigned __int8 *)&__p);
        goto LABEL_5;
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
        memset(&__p, 0, sizeof(__p));
        v30 = 0;
        v5 = sub_23A03C848(a1, (uint64_t)&__p);
        if ((_DWORD)v5)
          sub_23A038F98((unsigned __int8 **)a1[5], (uint64_t)&__p);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_5;
      case 202:
        LODWORD(v28.__r_.__value_.__l.__data_) = 0;
        v5 = sub_23A039B10(a1, 2, (int *)&v28);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v22 = (unsigned __int8 **)a1[5];
        v23 = *(float *)&v28.__r_.__value_.__l.__data_;
        sub_239FEE1FC(&__p, "");
        v31[0] = *(void **)&v23;
        sub_23A0383D0(v22, (uint64_t *)v31);
        goto LABEL_8;
      case 203:
        v28.__r_.__value_.__r.__words[0] = 0;
        v5 = sub_23A039CC4(a1, 2, (unint64_t *)&v28);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v20 = (unsigned __int8 **)a1[5];
        v21 = (void *)v28.__r_.__value_.__r.__words[0];
        sub_239FEE1FC(&__p, "");
        v31[0] = v21;
        sub_23A0383D0(v20, (uint64_t *)v31);
LABEL_8:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_5;
      case 204:
        LOBYTE(v31[0]) = 0;
        v5 = sub_23A038C9C(a1, 2, v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v10 = (unsigned __int8 **)a1[5];
        v11 = LOBYTE(v31[0]);
        goto LABEL_48;
      case 205:
        LOWORD(v31[0]) = 0;
        v5 = sub_23A039A38(a1, 2, v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v10 = (unsigned __int8 **)a1[5];
        v11 = LOWORD(v31[0]);
        goto LABEL_48;
      case 206:
        LODWORD(v31[0]) = 0;
        v5 = sub_23A039B10(a1, 2, (int *)v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v10 = (unsigned __int8 **)a1[5];
        v11 = LODWORD(v31[0]);
        goto LABEL_48;
      case 207:
        v31[0] = 0;
        v5 = sub_23A039CC4(a1, 2, (unint64_t *)v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v10 = (unsigned __int8 **)a1[5];
        v11 = (std::string::size_type)v31[0];
LABEL_48:
        __p.__r_.__value_.__r.__words[0] = v11;
        sub_23A03B0F4(v10, (uint64_t *)&__p);
        goto LABEL_5;
      case 208:
        LOBYTE(v31[0]) = 0;
        v5 = sub_23A038C9C(a1, 2, v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v12 = (unsigned __int8 **)a1[5];
        v13 = SLOBYTE(v31[0]);
        goto LABEL_55;
      case 209:
        LOWORD(v31[0]) = 0;
        v5 = sub_23A039A38(a1, 2, v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v12 = (unsigned __int8 **)a1[5];
        v13 = SLOWORD(v31[0]);
        goto LABEL_55;
      case 210:
        LODWORD(v31[0]) = 0;
        v5 = sub_23A039B10(a1, 2, (int *)v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v12 = (unsigned __int8 **)a1[5];
        v13 = SLODWORD(v31[0]);
        goto LABEL_55;
      case 211:
        v31[0] = 0;
        v5 = sub_23A039CC4(a1, 2, (unint64_t *)v31);
        if (!(_DWORD)v5)
          goto LABEL_5;
        v12 = (unsigned __int8 **)a1[5];
        v13 = (std::string::size_type)v31[0];
LABEL_55:
        __p.__r_.__value_.__r.__words[0] = v13;
        sub_23A0397F8(v12, (uint64_t *)&__p);
        goto LABEL_5;
      case 220:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        v5 = 0;
        if (!sub_23A039A38(a1, 2, &__p))
          goto LABEL_5;
        data_low = LOWORD(__p.__r_.__value_.__l.__data_);
        goto LABEL_30;
      case 221:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        v5 = 0;
        if (!sub_23A039B10(a1, 2, (int *)&__p))
          goto LABEL_5;
        data_low = LODWORD(__p.__r_.__value_.__l.__data_);
LABEL_30:
        v5 = sub_23A03C1F0((uint64_t)a1, data_low);
        goto LABEL_5;
      case 222:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        v5 = 0;
        if (!sub_23A039A38(a1, 2, &__p))
          goto LABEL_5;
        v15 = LOWORD(__p.__r_.__value_.__l.__data_);
        goto LABEL_58;
      case 223:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        v5 = 0;
        if (!sub_23A039B10(a1, 2, (int *)&__p))
          goto LABEL_5;
        v15 = LODWORD(__p.__r_.__value_.__l.__data_);
LABEL_58:
        v5 = sub_23A03C074((uint64_t)a1, v15);
        goto LABEL_5;
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
        v7 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = (char)v3;
        sub_23A0397F8(v7, (uint64_t *)&__p);
        goto LABEL_4;
      default:
        sub_23A035958((uint64_t)a1, v31);
        v17 = (uint64_t)a1[5];
        v18 = (unint64_t)a1[3];
        std::operator+<char>();
        sub_239FEE1FC(v24, "value");
        sub_23A035DF4(2, (uint64_t)&v26, (uint64_t)v24, &v28);
        sub_23A035A34(112, v18, (uint64_t)&v28, (uint64_t)&__p);
        v5 = sub_23A035904(v17, v18, (uint64_t)v31, (uint64_t)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
        std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
        std::exception::~exception((std::exception *)&__p);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v28.__r_.__value_.__l.__data_);
          if ((v25 & 0x80000000) == 0)
          {
LABEL_36:
            if ((v27 & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_63;
          }
        }
        else if ((v25 & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(v24[0]);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_37:
          if ((v32 & 0x80000000) == 0)
            goto LABEL_5;
          goto LABEL_64;
        }
LABEL_63:
        operator delete(v26);
        if ((v32 & 0x80000000) == 0)
          goto LABEL_5;
LABEL_64:
        operator delete(v31[0]);
LABEL_5:
        result = v5;
        break;
    }
  }
  return result;
}

void sub_23A035818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A035904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v7 = (void *)sub_23A0416F4((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
  }
  return 0;
}

size_t sub_23A035958@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  size_t result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char __str[2];
  char v9;

  v9 = 0;
  *(_WORD *)__str = 0;
  snprintf(__str, 3uLL, "%.2hhX", *(unsigned __int8 *)(a1 + 16));
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v4 = result;
  if (result >= 0x17)
  {
    v5 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v5 = result | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    a2[1] = v4;
    a2[2] = v6 | 0x8000000000000000;
    *a2 = v7;
    a2 = v7;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memcpy(a2, __str, v4);
  *((_BYTE *)a2 + v4) = 0;
  return result;
}

void sub_23A035A34(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  unsigned int v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  const char *v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  const void *v28[2];
  char v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int128 v34;
  int64_t v35;

  v29 = 11;
  strcpy((char *)v28, "parse_error");
  sub_23A036FC0(v28, a1, &v30);
  v8 = std::string::append(&v30, "parse error", 0xBuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (a2)
  {
    std::to_string(&v25, a2);
    v10 = std::string::insert(&v25, 0, " at byte ", 9uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v27 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = HIBYTE(v27);
  }
  else
  {
    v12 = 0;
    HIBYTE(v27) = 0;
    LOBYTE(__p[0]) = 0;
  }
  if ((v12 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v14 = v12;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v31, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v32, ": ", 2uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *(char *)(a3 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)a3;
  else
    v20 = *(const std::string::value_type **)a3;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a3 + 23);
  else
    v21 = *(_QWORD *)(a3 + 8);
  v22 = std::string::append(&v33, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v35 = v22->__r_.__value_.__r.__words[2];
  v34 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_19;
LABEL_23:
      operator delete(__p[0]);
      if (!a2)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    goto LABEL_23;
LABEL_19:
  if (!a2)
  {
LABEL_25:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_35:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
LABEL_27:
  if ((v29 & 0x80000000) == 0)
    goto LABEL_28;
LABEL_36:
  operator delete((void *)v28[0]);
LABEL_28:
  if (v35 >= 0)
    v24 = (const char *)&v34;
  else
    v24 = (const char *)v34;
  *(_QWORD *)a4 = &off_250B0DDA0;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v24);
  *(_QWORD *)a4 = &off_250B0DD50;
  *(_QWORD *)(a4 + 32) = a2;
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
}

void sub_23A035CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
    operator delete(__p);
  if (a40 < 0)
  {
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a28 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(exception_object);
LABEL_9:
      operator delete(a23);
      goto LABEL_10;
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_23A035DF4(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  int v8;
  std::string::size_type size;
  unint64_t v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string __dst;
  std::string v27;
  std::string v28;
  std::string v29;

  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = xmmword_23A0A30A0;
  strcpy(v29.__r_.__value_.__l.__data_, "syntax error while parsing ");
  if ((a1 - 1) < 4)
    std::string::append(&v29, off_250B0E5B8[a1 - 1], qword_23A0A4408[a1 - 1]);
  v8 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v10 = size + 1;
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size)
      goto LABEL_17;
  }
  if (v8 >= 0)
    v14 = &v29;
  else
    v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  memmove(p_dst, v14, size);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 32;
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a3;
  else
    v16 = *(const std::string::value_type **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::string::append(&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v27, ": ", 2uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = *(char *)(a2 + 23);
  if (v22 >= 0)
    v23 = (const std::string::value_type *)a2;
  else
    v23 = *(const std::string::value_type **)a2;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a2 + 23);
  else
    v24 = *(_QWORD *)(a2 + 8);
  v25 = std::string::append(&v28, v23, v24);
  *a4 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(v29.__r_.__value_.__l.__data_);
    return;
  }
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
}

void sub_23A03603C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A0360E8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_23A036118(unsigned __int8 **a1, int a2, int *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  char v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  char v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;

  ++a1[3];
  v6 = *a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  result = sub_23A03685C(a1, a2, "number");
  if ((_DWORD)result)
  {
    v9 = *((_BYTE *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
    v10 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
    ++a1[3];
    v11 = *a1;
    if (*a1 == a1[1])
    {
      v12 = -1;
    }
    else
    {
      v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    result = sub_23A03685C(a1, a2, "number");
    if ((_DWORD)result)
    {
      v13 = *((_BYTE *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
      v14 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
      ++a1[3];
      v15 = *a1;
      if (*a1 == a1[1])
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      result = sub_23A03685C(a1, a2, "number");
      if ((_DWORD)result)
      {
        v17 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : v13;
        v18 = *((_BYTE *)a1 + 32) ? v14 : *((_DWORD *)a1 + 4);
        ++a1[3];
        v19 = *a1;
        if (*a1 == a1[1])
        {
          v20 = -1;
        }
        else
        {
          v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        result = sub_23A03685C(a1, a2, "number");
        if ((_DWORD)result)
        {
          v21 = *((_DWORD *)a1 + 4);
          if (*((_BYTE *)a1 + 32))
            v22 = *((_DWORD *)a1 + 4);
          else
            v22 = v9;
          if (*((_BYTE *)a1 + 32))
            LOBYTE(v21) = v10;
          *a3 = (v17 << 16) | (v22 << 24) | (v18 << 8) | v21;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_23A0362CC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *exception;
  std::string v31;
  std::string v32;

  v32.__r_.__value_.__s.__data_[0] = 1;
  v4 = sub_23A036A68((unsigned __int8 **)a1, (unsigned __int8 *)&v32);
  v5 = v4;
  v7 = *(uint64_t **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  v10 = *(char **)(a1 + 8);
  v11 = ((char *)v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_239FEBE68();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_239FF1A44();
    v15 = (char *)operator new(8 * v14);
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = (uint64_t)(v16 + 1);
    v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (uint64_t *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v5;
  v9 = 8 * v11 + 8;
  v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v7 - 2;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *--v8;
        *--v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *(_QWORD *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    v27 = **(char **)(v9 - 8);
    if (v27 > 2)
      v28 = 1;
    else
      v28 = qword_23A0A4428[v27];
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v31, a2);
      sub_239FEEC54("excessive object size: ", &v31, &v32);
      sub_23A036CAC(408, (uint64_t)&v32, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_250B0DA80, (void (*)(void *))sub_23A036E28);
    }
  }
  return 1;
}

void sub_23A036500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_23A036560(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t i;
  size_t v8;
  char *v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t **v20;
  uint64_t v21;
  int v23;
  void *__p;
  size_t v25;
  unint64_t v26;
  void **p_p;

  v23 = a2;
  __p = 0;
  v25 = 0;
  v26 = 0;
  ++a1[3];
  v3 = *a1;
  if (*a1 == a1[1])
  {
LABEL_40:
    v4 = -1;
    a1[2] = (unsigned __int8 *)-1;
LABEL_5:
    if (sub_23A03685C(a1, 4, "element list"))
    {
      v6 = (unint64_t)a1[3];
      for (i = v6; ; i = (unint64_t)a1[3])
      {
        a1[3] = (unsigned __int8 *)(i + 1);
        v11 = *a1;
        if (*a1 == a1[1])
        {
          v12 = -1;
        }
        else
        {
          v12 = *v11;
          *a1 = v11 + 1;
        }
        a1[2] = (unsigned __int8 *)v12;
        if (!sub_23A03685C(a1, 4, "cstring"))
          goto LABEL_44;
        v13 = a1[2];
        if (!v13)
        {
          if ((v23 & 1) == 0)
          {
            v19 = a1[5];
            v20 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)v19 + 2) - 8) + 8);
            p_p = &__p;
            *((_QWORD *)v19 + 4) = sub_23A0378AC(v20, (const void **)&__p, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)
                                 + 7;
          }
          if (!sub_23A037314((uint64_t)a1, v4, v6))
            goto LABEL_44;
          if (SHIBYTE(v26) < 0)
          {
            *(_BYTE *)__p = 0;
            v25 = 0;
            ++a1[3];
            v3 = *a1;
            if (*a1 == a1[1])
              goto LABEL_40;
            goto LABEL_4;
          }
          LOBYTE(__p) = 0;
          HIBYTE(v26) = 0;
          ++a1[3];
          v3 = *a1;
          if (*a1 != a1[1])
            goto LABEL_4;
          goto LABEL_40;
        }
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          break;
        v8 = (v26 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v25 == v8)
        {
          if ((v26 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            sub_239FEBDE0();
          v14 = __p;
          if (v8 <= 0x3FFFFFFFFFFFFFF2)
            goto LABEL_19;
          v17 = 0x7FFFFFFFFFFFFFF7;
LABEL_27:
          v18 = (char *)operator new(v17);
          v9 = v18;
          if (!v8 || (memmove(v18, v14, v8), v8 != 22))
            operator delete(v14);
          __p = v9;
          v26 = v17 | 0x8000000000000000;
          goto LABEL_32;
        }
        v9 = (char *)__p;
        v8 = v25;
LABEL_32:
        v25 = v8 + 1;
LABEL_8:
        v10 = &v9[v8];
        *v10 = (char)v13;
        v10[1] = 0;
      }
      if (HIBYTE(v26) != 22)
      {
        v8 = HIBYTE(v26);
        HIBYTE(v26) = (HIBYTE(v26) + 1) & 0x7F;
        v9 = (char *)&__p;
        goto LABEL_8;
      }
      v14 = &__p;
      v8 = 22;
LABEL_19:
      if (v8 + 1 > 2 * v8)
        v15 = v8 + 1;
      else
        v15 = 2 * v8;
      v16 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v16 = v15 | 7;
      if (v15 >= 0x17)
        v17 = v16 + 1;
      else
        v17 = 23;
      goto LABEL_27;
    }
LABEL_44:
    v21 = 0;
    if (SHIBYTE(v26) < 0)
      goto LABEL_42;
    return v21;
  }
LABEL_4:
  v5 = *v3;
  v4 = v5;
  *a1 = v3 + 1;
  a1[2] = (unsigned __int8 *)v5;
  if (v5)
    goto LABEL_5;
  v21 = 1;
  if (SHIBYTE(v26) < 0)
LABEL_42:
    operator delete(__p);
  return v21;
}

void sub_23A036834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A03685C(_QWORD *a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string __p;
  std::exception v16;
  std::runtime_error v17;
  void *v18[2];
  char v19;

  if (a1[2] == -1)
  {
    v8 = a1[5];
    v9 = a1[3];
    sub_239FEE1FC(v18, "<end of file>");
    v10 = a1[3];
    sub_239FEE1FC(v13, "unexpected end of input");
    sub_239FEE1FC(v11, a3);
    sub_23A035DF4(a2, (uint64_t)v13, (uint64_t)v11, &__p);
    sub_23A035A34(110, v10, (uint64_t)&__p, (uint64_t)&v16);
    v3 = sub_23A035904(v8, v9, (uint64_t)v18, (uint64_t)&v16);
    v16.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
    std::runtime_error::~runtime_error(&v17);
    std::exception::~exception(&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v14 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v11[0]);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0)
        return v3;
LABEL_12:
      operator delete(v18[0]);
      return v3;
    }
LABEL_11:
    operator delete(v13[0]);
    if ((v19 & 0x80000000) == 0)
      return v3;
    goto LABEL_12;
  }
  return 1;
}

void sub_23A0369A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  std::runtime_error *v28;
  uint64_t v29;

  a28.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v28 + 1);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v29 - 49) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((*(char *)(v29 - 49) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_23A036A68(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = 0;
    v10 = *a2;
    switch(*a2)
    {
      case 1u:
        v9 = operator new(0x18uLL);
        v9[2] = 0;
        v9[1] = 0;
        *v9 = v9 + 1;
        break;
      case 2u:
        v9 = operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        break;
      case 3u:
        v9 = operator new(0x18uLL);
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        break;
      case 4u:
        LOBYTE(v22) = 0;
        v9 = v22;
        break;
      case 8u:
        v9 = operator new(0x20uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_WORD *)v9 + 12) = 0;
        break;
      default:
        break;
    }
    v14 = (uint64_t)*a1;
    v15 = **a1;
    *(_BYTE *)v14 = v10;
    v21 = v15;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v9;
    v22 = (_QWORD *)v16;
    sub_23A0339A8((uint64_t *)&v22, v15);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_BYTE **)(v5 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_23A036E58((void **)v5, a2);
      }
      else
      {
        v7 = *a2;
        *v6 = v7;
        sub_23A042088(v6 + 8, v7);
        v8 = v6 + 16;
        *(_QWORD *)(v5 + 8) = v6 + 16;
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = 0;
      v12 = *a2;
      switch(*a2)
      {
        case 1u:
          v11 = operator new(0x18uLL);
          v11[2] = 0;
          v11[1] = 0;
          *v11 = v11 + 1;
          break;
        case 2u:
          v11 = operator new(0x18uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          break;
        case 3u:
          v11 = operator new(0x18uLL);
          *((_BYTE *)v11 + 23) = 0;
          *(_BYTE *)v11 = 0;
          break;
        case 4u:
          LOBYTE(v20) = 0;
          v11 = v20;
          break;
        case 8u:
          v11 = operator new(0x20uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          break;
        default:
          break;
      }
      v17 = a1[4];
      v18 = *v17;
      *v17 = v12;
      v19 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v11;
      v20 = (_QWORD *)v19;
      sub_23A0339A8((uint64_t *)&v20, v18);
      return (uint64_t)a1[4];
    }
  }
}

void sub_23A036CA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23A036CAC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_23A036FC0((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_250B0DDA0;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_250B0DD78;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_23A036DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23A036E28(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

char *sub_23A036E58(void **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v19;
  char *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_239FEBE68();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_239FF1A44();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v19 = &v8[16 * v3];
  v20 = &v8[16 * v7];
  v9 = *a2;
  *v19 = v9;
  sub_23A042088(v19 + 8, v9);
  v10 = v19;
  v11 = v19 + 16;
  v13 = (uint64_t *)*a1;
  v12 = (uint64_t *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v20;
  }
  else
  {
    do
    {
      v14 = *((_BYTE *)v12 - 16);
      v12 -= 2;
      *(v10 - 16) = v14;
      v10 -= 16;
      *((_QWORD *)v10 + 1) = v12[1];
      *(_BYTE *)v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v13);
    v15 = (uint64_t *)*a1;
    v12 = (uint64_t *)a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v20;
    if (v12 != v15)
    {
      v16 = v12 - 1;
      do
      {
        v17 = v16 - 1;
        sub_23A0339A8(v16, *((unsigned __int8 *)v16 - 8));
        v16 -= 2;
      }
      while (v17 != v15);
      v12 = v15;
    }
  }
  if (v12)
    operator delete(v12);
  return v19 + 16;
}

void sub_23A036FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A0340A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A036FC0(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a1;
  else
    v13 = *a1;
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  v14 = std::string::append(&v22, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_23A0371B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23A037254(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

const char *sub_23A037298(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_23A0372A0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_23A0372D0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A037314(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  std::string::size_type v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  std::string::size_type v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  _DWORD *exception;
  std::string v29;
  void *v30[2];
  std::string::size_type v31;
  std::string __p;
  __int16 v33;
  uint64_t v34;
  void *__dst[2];
  unint64_t v36;
  char __str[2];
  char v38;

  switch(a2)
  {
    case 1:
      __dst[0] = 0;
      v5 = sub_23A037A94((unsigned __int8 **)a1, 4, (unint64_t *)__dst);
      if ((_DWORD)v5)
      {
        v6 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__l.__data_ = (std::string::pointer)__dst[0];
        sub_23A0383D0(v6, (uint64_t *)&__p);
      }
      return v5;
    case 2:
      LODWORD(__dst[0]) = 0;
      memset(&__p, 0, sizeof(__p));
      if (sub_23A036118((unsigned __int8 **)a1, 4, (int *)__dst)
        && sub_23A037DD4(a1, (int)__dst[0], &__p))
      {
        sub_23A038610(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        v5 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_33;
      }
      else
      {
        v5 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_33:
          v13 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_36;
        }
      }
      return v5;
    case 3:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      sub_23A036118((unsigned __int8 **)a1, 4, (int *)&__p);
      if (!sub_23A0362CC(*(_QWORD *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        || !sub_23A036560(a1, 0))
      {
        return 0;
      }
      goto LABEL_19;
    case 4:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      sub_23A036118((unsigned __int8 **)a1, 4, (int *)&__p);
      if (!sub_23A038A08(*(_QWORD *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        || !sub_23A036560(a1, 1))
      {
        return 0;
      }
LABEL_19:
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
      return 1;
    case 5:
      LODWORD(__dst[0]) = 0;
      memset(&__p, 0, sizeof(__p));
      v33 = 0;
      if (sub_23A036118((unsigned __int8 **)a1, 4, (int *)__dst)
        && sub_23A0380FC((_QWORD *)a1, (int)__dst[0], (uint64_t)&__p))
      {
        sub_23A038F98(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        v5 = 1;
        v13 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          return v5;
      }
      else
      {
        v5 = 0;
        v13 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          return v5;
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
LABEL_36:
      operator delete(v13);
      return v5;
    case 8:
      v7 = *(unsigned __int8 ***)(a1 + 40);
      ++*(_QWORD *)(a1 + 24);
      v8 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v9 = -1;
      }
      else
      {
        v9 = *v8;
        *(_QWORD *)a1 = v8 + 1;
      }
      *(_QWORD *)(a1 + 16) = v9;
      __p.__r_.__value_.__s.__data_[0] = v9 != 0;
      sub_23A0393A0(v7, (unsigned __int8 *)&__p);
      return 1;
    case 10:
      v10 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = 0;
      sub_23A0395E0(v10);
      return 1;
    case 16:
      LODWORD(__dst[0]) = 0;
      v5 = sub_23A036118((unsigned __int8 **)a1, 4, (int *)__dst);
      if (!(_DWORD)v5)
        return v5;
      v11 = *(unsigned __int8 ***)(a1 + 40);
      v12 = SLODWORD(__dst[0]);
      goto LABEL_27;
    case 18:
      __dst[0] = 0;
      v5 = sub_23A037A94((unsigned __int8 **)a1, 4, (unint64_t *)__dst);
      if (!(_DWORD)v5)
        return v5;
      v11 = *(unsigned __int8 ***)(a1 + 40);
      v12 = (std::string::size_type)__dst[0];
LABEL_27:
      __p.__r_.__value_.__r.__words[0] = v12;
      sub_23A0397F8(v11, (uint64_t *)&__p);
      return v5;
    default:
      v38 = 0;
      *(_WORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2hhX", a2);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = strlen(__str);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v16 = v15;
      if (v15 >= 0x17)
      {
        v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v18 = v15 | 7;
        v19 = v18 + 1;
        v17 = (void **)operator new(v18 + 1);
        __dst[0] = v17;
        v36 = v19 | 0x8000000000000000;
      }
      else
      {
        HIBYTE(v36) = v15;
        v17 = __dst;
        if (!v15)
          goto LABEL_41;
      }
      memcpy(v17, __str, v16);
LABEL_41:
      *((_BYTE *)v17 + v16) = 0;
      v20 = strlen(__str);
      if (v20 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v21 = v20;
      if (v20 >= 0x17)
      {
        v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v23 = v20 | 7;
        v24 = v23 + 1;
        v22 = operator new(v23 + 1);
        v29.__r_.__value_.__l.__size_ = v21;
        v29.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      }
      else
      {
        *((_BYTE *)&v29.__r_.__value_.__s + 23) = v20;
        v22 = &v29;
        if (!v20)
          goto LABEL_49;
      }
      memcpy(v22, __str, v21);
LABEL_49:
      *((_BYTE *)v22 + v21) = 0;
      v25 = std::string::insert(&v29, 0, "Unsupported BSON record type 0x", 0x1FuLL);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v31 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)v30 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      sub_23A035A34(114, a3, (uint64_t)v30, (uint64_t)&__p);
      *(_BYTE *)(v14 + 40) = 1;
      if (*(_BYTE *)(v14 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)exception = &off_250B0DDA0;
        exception[2] = __p.__r_.__value_.__r.__words[1];
        MEMORY[0x23B83FB10](exception + 4, &__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)exception = &off_250B0DD50;
        *((_QWORD *)exception + 4) = v34;
        __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
      std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v31) < 0)
      {
        operator delete(v30[0]);
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          if ((SHIBYTE(v36) & 0x80000000) == 0)
            return 0;
          goto LABEL_57;
        }
      }
      else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
        return 0;
LABEL_57:
      operator delete(__dst[0]);
      return 0;
  }
}

void sub_23A0377F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::exception a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error *v27;
  uint64_t v28;

  std::runtime_error::~runtime_error(v27);
  std::exception::~exception(&a22);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((*(char *)(v28 - 57) & 0x80000000) == 0)
LABEL_9:
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(*(void **)(v28 - 80));
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v28 - 57) & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

uint64_t **sub_23A0378AC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_23A004110(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_23A037A28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A037A3C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_23A0339A8((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_23A037A94(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  char v38;
  char v39;
  char v40;

  ++a1[3];
  v6 = *a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  result = sub_23A03685C(a1, a2, "number");
  if ((_DWORD)result)
  {
    v9 = *((_BYTE *)a1 + 32) ? 0 : a1[2];
    if (*((_BYTE *)a1 + 32))
      v10 = a1[2];
    else
      LOBYTE(v10) = 0;
    ++a1[3];
    v11 = *a1;
    if (*a1 == a1[1])
    {
      v12 = -1;
    }
    else
    {
      v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    result = sub_23A03685C(a1, a2, "number");
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a1 + 32))
        LOBYTE(v13) = 0;
      else
        v13 = a1[2];
      if (*((_BYTE *)a1 + 32))
        v14 = a1[2];
      else
        LOBYTE(v14) = 0;
      ++a1[3];
      v15 = *a1;
      if (*a1 == a1[1])
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      result = sub_23A03685C(a1, a2, "number");
      if ((_DWORD)result)
      {
        if (*((_BYTE *)a1 + 32))
          LOBYTE(v17) = 0;
        else
          v17 = a1[2];
        if (*((_BYTE *)a1 + 32))
          v18 = a1[2];
        else
          LOBYTE(v18) = 0;
        ++a1[3];
        v19 = *a1;
        if (*a1 == a1[1])
        {
          v20 = -1;
        }
        else
        {
          v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        result = sub_23A03685C(a1, a2, "number");
        if ((_DWORD)result)
        {
          v39 = (char)v13;
          v40 = (char)v18;
          v21 = a3;
          if (*((_BYTE *)a1 + 32))
            LOBYTE(v22) = 0;
          else
            v22 = a1[2];
          if (*((_BYTE *)a1 + 32))
            v23 = a1[2];
          else
            LODWORD(v23) = 0;
          ++a1[3];
          v24 = *a1;
          if (*a1 == a1[1])
          {
            v25 = -1;
          }
          else
          {
            v25 = *v24;
            *a1 = v24 + 1;
          }
          a1[2] = (unsigned __int8 *)v25;
          result = sub_23A03685C(a1, a2, "number");
          if ((_DWORD)result)
          {
            v26 = v9;
            v38 = (char)v10;
            if (*((_BYTE *)a1 + 32))
              v27 = a1[2];
            else
              LOBYTE(v27) = (_BYTE)v22;
            if (!*((_BYTE *)a1 + 32))
              v23 = a1[2];
            ++a1[3];
            v28 = *a1;
            if (*a1 == a1[1])
            {
              v29 = -1;
            }
            else
            {
              v29 = *v28;
              *a1 = v28 + 1;
            }
            a1[2] = (unsigned __int8 *)v29;
            result = sub_23A03685C(a1, a2, "number");
            if ((_DWORD)result)
            {
              if (*((_BYTE *)a1 + 32))
              {
                v17 = a1[2];
                LOBYTE(v30) = v40;
              }
              else
              {
                v30 = a1[2];
              }
              ++a1[3];
              v31 = *a1;
              if (*a1 == a1[1])
              {
                v32 = -1;
              }
              else
              {
                v32 = *v31;
                *a1 = v31 + 1;
              }
              a1[2] = (unsigned __int8 *)v32;
              result = sub_23A03685C(a1, a2, "number");
              if ((_DWORD)result)
              {
                if (*((_BYTE *)a1 + 32))
                  v33 = a1[2];
                else
                  LOBYTE(v33) = v39;
                if (!*((_BYTE *)a1 + 32))
                  v14 = a1[2];
                ++a1[3];
                v34 = *a1;
                if (*a1 == a1[1])
                {
                  v35 = -1;
                }
                else
                {
                  v35 = *v34;
                  *a1 = v34 + 1;
                }
                a1[2] = (unsigned __int8 *)v35;
                result = sub_23A03685C(a1, a2, "number");
                if ((_DWORD)result)
                {
                  v36 = a1[2];
                  if (*((_BYTE *)a1 + 32))
                    v37 = a1[2];
                  else
                    v37 = v26;
                  if (*((_BYTE *)a1 + 32))
                    LOBYTE(v36) = v38;
                  *v21 = ((unint64_t)v33 << 48) | ((_QWORD)v37 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v27 << 32) | ((_DWORD)v23 << 24) | ((unint64_t)v30 << 16) | ((unint64_t)v14 << 8) | v36;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_23A037DD4(uint64_t a1, int a2, std::string *a3)
{
  int v5;
  BOOL v7;
  int i;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string __p;
  std::exception v22;
  std::runtime_error v23;
  void *v24[2];
  char v25;

  if (a2 <= 0)
  {
    sub_23A035958(a1, v24);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 24);
    std::to_string(&v19, a2);
    sub_239FEEC54("string length must be at least 1, is ", &v19, &v20);
    sub_239FEE1FC(v17, "string");
    sub_23A035DF4(4, (uint64_t)&v20, (uint64_t)v17, &__p);
    sub_23A035A34(112, v16, (uint64_t)&__p, (uint64_t)&v22);
    v13 = sub_23A035904(v15, v16, (uint64_t)v24, (uint64_t)&v22);
    v22.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
    std::runtime_error::~runtime_error(&v23);
    std::exception::~exception(&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_24;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v17[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v25 & 0x80000000) == 0)
        return v13;
LABEL_26:
      operator delete(v24[0]);
      return v13;
    }
LABEL_25:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      return v13;
    goto LABEL_26;
  }
  v5 = a2 - 1;
  if (a2 == 1)
    goto LABEL_10;
  v7 = 0;
  for (i = 1; a2 != i; ++i)
  {
    ++*(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    {
      v10 = *v9;
      *(_QWORD *)a1 = v9 + 1;
      *(_QWORD *)(a1 + 16) = v10;
      if (!sub_23A03685C((_QWORD *)a1, 4, "string"))
        break;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 16) = -1;
    if (!sub_23A03685C((_QWORD *)a1, 4, "string"))
      break;
LABEL_6:
    std::string::push_back(a3, *(_BYTE *)(a1 + 16));
    v7 = i >= v5;
  }
  if (!v7)
    return 0;
LABEL_10:
  ++*(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v12 = -1;
  }
  else
  {
    v12 = *v11;
    *(_QWORD *)a1 = v11 + 1;
  }
  *(_QWORD *)(a1 + 16) = v12;
  return v12 != -1;
}

void sub_23A038014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::exception a33)
{
  std::runtime_error *v33;
  uint64_t v34;

  a33.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v34 - 65) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a15);
  if ((*(char *)(v34 - 65) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)(v34 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_23A0380FC(_QWORD *a1, int a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string __p;
  std::exception v18;
  std::runtime_error v19;
  void *v20[2];
  char v21;

  if (a2 < 0)
  {
    sub_23A035958((uint64_t)a1, v20);
    v10 = a1[5];
    v11 = a1[3];
    std::to_string(&v15, a2);
    sub_239FEEC54("byte array length cannot be negative, is ", &v15, &v16);
    sub_239FEE1FC(v13, "binary");
    sub_23A035DF4(4, (uint64_t)&v16, (uint64_t)v13, &__p);
    sub_23A035A34(112, v11, (uint64_t)&__p, (uint64_t)&v18);
    v12 = sub_23A035904(v10, v11, (uint64_t)v20, (uint64_t)&v18);
    v18.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
    std::runtime_error::~runtime_error(&v19);
    std::exception::~exception(&v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_9:
        if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_17;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v13[0]);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_18;
    }
LABEL_17:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v21 & 0x80000000) == 0)
        return v12;
LABEL_19:
      operator delete(v20[0]);
      return v12;
    }
LABEL_18:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
      return v12;
    goto LABEL_19;
  }
  ++a1[3];
  v6 = (unsigned __int8 *)*a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = v7;
  if (sub_23A03685C(a1, 4, "number"))
    v8 = *((_BYTE *)a1 + 16);
  else
    v8 = 0;
  *(_BYTE *)(a3 + 24) = v8;
  *(_BYTE *)(a3 + 25) = 1;
  return sub_23A038D1C(a1, 4, a2, (_QWORD *)a3);
}

void sub_23A0382E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::exception a33)
{
  std::runtime_error *v33;
  uint64_t v34;

  a33.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v34 - 33) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a15);
  if ((*(char *)(v34 - 33) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)(v34 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_23A0383D0(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 7;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_23A0339A8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_23A0384E4((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 7;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 7;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_23A0339A8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_23A0384E4(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_239FEBE68();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239FF1A44();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 7;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v15 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((_QWORD *)v11 + 1) = v3[1];
      *(_BYTE *)v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    v3 = (uint64_t *)*a1;
    v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      v3 = v16;
      if (!v16)
        return v14;
      goto LABEL_15;
    }
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_23A0339A8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_15:
    operator delete(v3);
  return v14;
}

uint64_t sub_23A038610(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = operator new(0x18uLL);
    v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_239FF1F64(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v10[2] = *(_QWORD *)(a2 + 16);
    }
    v15 = (uint64_t)*a1;
    v16 = **a1;
    *(_BYTE *)v15 = 3;
    v23 = v16;
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v11;
    v24 = v17;
    sub_23A0339A8(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= *(_QWORD *)(v6 + 16))
      {
        v14 = sub_23A038828((uint64_t **)v6, a2);
      }
      else
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_BYTE *)v7 = 3;
        v8 = operator new(0x18uLL);
        v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_239FF1F64(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v8 = *(_OWORD *)a2;
          v8[2] = *(_QWORD *)(a2 + 16);
        }
        *(_QWORD *)(v7 + 8) = v9;
        v14 = (char *)(v7 + 16);
        *(_QWORD *)(v6 + 8) = v7 + 16;
      }
      *(_QWORD *)(v6 + 8) = v14;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v12 = operator new(0x18uLL);
      v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_239FF1F64(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)a2;
        v12[2] = *(_QWORD *)(a2 + 16);
      }
      v19 = a1[4];
      v20 = *v19;
      *v19 = 3;
      v21 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v13;
      v22 = v21;
      sub_23A0339A8(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_23A0387E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  operator delete(v2);
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_23A0387F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A03880C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A038820(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_23A038828(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = ((char *)v4 - (char *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_239FEBE68();
  v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_239FF1A44();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v5];
  v12 = &v10[16 * v9];
  *((_QWORD *)v11 + 1) = 0;
  v13 = v11 + 8;
  *v11 = 3;
  v14 = operator new(0x18uLL);
  v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_239FF1F64(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    *v13 = v15;
    v16 = v11 + 16;
    v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_18:
      *a1 = (uint64_t *)v11;
      a1[1] = (uint64_t *)v16;
      a1[2] = (uint64_t *)v12;
      goto LABEL_22;
    }
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v14[2] = *(_QWORD *)(a2 + 16);
    *v13 = v14;
    v16 = v11 + 16;
    v22 = v11 + 16;
    if (v4 == v3)
      goto LABEL_18;
  }
  do
  {
    v17 = *((_BYTE *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v4[1];
    *(_BYTE *)v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *a1;
  v3 = a1[1];
  v16 = v22;
  *a1 = (uint64_t *)v11;
  a1[1] = (uint64_t *)v22;
  a1[2] = (uint64_t *)v12;
  if (v3 != v18)
  {
    v19 = v3 - 1;
    do
    {
      v20 = v19 - 1;
      sub_23A0339A8(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v18);
    v3 = v18;
  }
LABEL_22:
  if (v3)
    operator delete(v3);
  return v16;
}

void sub_23A0389D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_23A0340A0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_23A0389F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A0340A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A038A08(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *exception;
  std::string v31;
  std::string v32;

  v32.__r_.__value_.__s.__data_[0] = 2;
  v4 = sub_23A036A68((unsigned __int8 **)a1, (unsigned __int8 *)&v32);
  v5 = v4;
  v7 = *(uint64_t **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  v10 = *(char **)(a1 + 8);
  v11 = ((char *)v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_239FEBE68();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_239FF1A44();
    v15 = (char *)operator new(8 * v14);
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = (uint64_t)(v16 + 1);
    v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (uint64_t *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v5;
  v9 = 8 * v11 + 8;
  v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v7 - 2;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *--v8;
        *--v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *(_QWORD *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    v27 = **(char **)(v9 - 8);
    if (v27 > 2)
      v28 = 1;
    else
      v28 = qword_23A0A4428[v27];
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v31, a2);
      sub_239FEEC54("excessive array size: ", &v31, &v32);
      sub_23A036CAC(408, (uint64_t)&v32, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_250B0DA80, (void (*)(void *))sub_23A036E28);
    }
  }
  return 1;
}

void sub_23A038C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_23A038C9C(unsigned __int8 **a1, int a2, _BYTE *a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t result;

  ++a1[3];
  v5 = *a1;
  if (*a1 == a1[1])
  {
    a1[2] = (unsigned __int8 *)-1;
    result = sub_23A03685C(a1, a2, "number");
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v6 = *v5;
    *a1 = v5 + 1;
    a1[2] = (unsigned __int8 *)v6;
    result = sub_23A03685C(a1, a2, "number");
    if (!(_DWORD)result)
      return result;
  }
  *a3 = a1[2];
  return result;
}

BOOL sub_23A038D1C(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4)
{
  int v5;
  BOOL v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;

  if (a3 >= 1)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        else
        {
          v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        v12 = *((_BYTE *)a1 + 16);
        v14 = (_BYTE *)a4[1];
        v13 = a4[2];
        if ((unint64_t)v14 >= v13)
          break;
        *v14 = v12;
        a4[1] = v14 + 1;
        v8 = ++v9 >= v5;
        if (v9 == v5)
          return v8;
      }
      v15 = (_BYTE *)*a4;
      v16 = (unint64_t)&v14[-*a4];
      v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0)
        sub_239FEBE68();
      v18 = a2;
      v19 = v13 - (_QWORD)v15;
      if (2 * v19 > v17)
        v17 = 2 * v19;
      v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20)
        break;
      v21 = 0;
      v22 = &v14[-*a4];
      *(_BYTE *)v16 = v12;
      v23 = v16 + 1;
      if (v14 != v15)
        goto LABEL_17;
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14)
        operator delete(v14);
      a2 = v18;
      v5 = a3;
      a4[1] = v23;
      v8 = ++v9 >= a3;
      if (v9 == a3)
        return v8;
    }
    v21 = (char *)operator new(v20);
    v22 = &v21[v16];
    v21[v16] = v12;
    v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15)
      goto LABEL_33;
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v24 = 0;
        goto LABEL_25;
      }
      v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v21[v16 - 16];
      v26 = (__int128 *)(v14 - 16);
      v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24)
        goto LABEL_32;
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        v29 = &v21[&v14[-v24] - v15 - 8];
        v30 = (uint64_t *)&v14[-v24 - 8];
        v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v32 = *v30--;
          *(_QWORD *)v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_32;
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    v33 = v22 - 1;
    do
    {
      v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    v14 = (_BYTE *)*a4;
    v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

uint64_t sub_23A038F98(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15[8];
  uint64_t v16;
  char v17[8];
  uint64_t v18;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v17[0] = 0;
    v18 = 0;
    sub_23A0390EC((uint64_t)v17, a2);
    v8 = (uint64_t)*a1;
    v9 = **a1;
    *(_BYTE *)v8 = v17[0];
    v17[0] = v9;
    v10 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v18;
    v18 = v10;
    sub_23A0339A8(&v18, v9);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(uint64_t **)(v4 + 8);
      v6 = v5[1];
      if (v6 >= v5[2])
      {
        v7 = sub_23A039240(v5, a2);
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        sub_23A0390EC(v6, a2);
        v7 = v6 + 16;
        v5[1] = v6 + 16;
      }
      v5[1] = v7;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v15[0] = 0;
      v16 = 0;
      sub_23A0390EC((uint64_t)v15, a2);
      v12 = a1[4];
      v13 = *v12;
      *v12 = v15[0];
      v15[0] = v13;
      v14 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = v16;
      v16 = v14;
      sub_23A0339A8(&v16, v13);
      return (uint64_t)a1[4];
    }
  }
}

void sub_23A0390E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23A0390EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  char *v8;
  __int16 v9;
  _QWORD *v10;
  size_t v11;
  char *v12;
  char *v13;

  *(_BYTE *)a1 = 8;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 == *(_QWORD *)a2)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_239FEBE68();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    v8 = &v7[v6];
    memcpy(v7, v5, v6);
  }
  v9 = *(_WORD *)(a2 + 24);
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v11 = v8 - v7;
  if (v8 != v7)
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_239FEBE68();
    v12 = (char *)operator new(v8 - v7);
    *v10 = v12;
    v13 = &v12[v11];
    v10[2] = &v12[v11];
    memcpy(v12, v7, v11);
    v10[1] = v13;
  }
  *((_WORD *)v10 + 12) = v9;
  *(_QWORD *)(a1 + 8) = v10;
  if (v7)
    operator delete(v7);
}

void sub_23A0391F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A039240(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_239FEBE68();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_239FF1A44();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = (uint64_t)&v10[16 * v3];
  v12 = &v10[v9];
  *(_BYTE *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  sub_23A0390EC(v11, a2);
  v13 = v11 + 16;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
  }
  else
  {
    do
    {
      v16 = *(v14 - 16);
      v14 -= 16;
      *(_BYTE *)(v11 - 16) = v16;
      v11 -= 16;
      *(_QWORD *)(v11 + 8) = *((_QWORD *)v14 + 1);
      *v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
    }
    while (v14 != v15);
    v17 = (uint64_t *)*a1;
    v14 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (v14 != (char *)v17)
    {
      v18 = (uint64_t *)(v14 - 8);
      do
      {
        v19 = v18 - 1;
        sub_23A0339A8(v18, *((unsigned __int8 *)v18 - 8));
        v18 -= 2;
      }
      while (v19 != v17);
      v14 = (char *)v17;
    }
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_23A03938C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A0340A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0393A0(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 4;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_23A0339A8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_23A0394B4((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 4;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 4;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_23A0339A8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_23A0394B4(void **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_239FEBE68();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239FF1A44();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 4;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v15 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((_QWORD *)v11 + 1) = v3[1];
      *(_BYTE *)v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    v3 = (uint64_t *)*a1;
    v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      v3 = v16;
      if (!v16)
        return v14;
      goto LABEL_15;
    }
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_23A0339A8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_15:
    operator delete(v3);
  return v14;
}

uint64_t sub_23A0395E0(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1[2];
  if (a1[1] == v2)
  {
    v7 = (uint64_t)*a1;
    v8 = **a1;
    *(_BYTE *)v7 = 0;
    v15 = v8;
    v9 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    v16 = v9;
    sub_23A0339A8(&v16, v8);
    return (uint64_t)*a1;
  }
  else
  {
    v3 = *((_QWORD *)v2 - 1);
    if (*(_BYTE *)v3 == 2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD *)(v4 + 8);
      if (v5 >= *(_QWORD *)(v4 + 16))
      {
        v6 = sub_23A0396D8((void **)v4);
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v6 = (char *)(v5 + 16);
      }
      *(_QWORD *)(v4 + 8) = v6;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = a1[4];
      v12 = *v11;
      *v11 = 0;
      v13 = *((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      v14 = v13;
      sub_23A0339A8(&v14, v12);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_23A0396D8(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v3 = (uint64_t *)*a1;
  v2 = (uint64_t *)a1[1];
  v4 = ((char *)v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_239FEBE68();
  v6 = (_BYTE *)a1[2] - (_BYTE *)v3;
  if (v6 >> 3 > v5)
    v5 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_239FF1A44();
  v7 = 16 * v5;
  v8 = (char *)operator new(16 * v5);
  v9 = &v8[16 * v4];
  v10 = &v8[v7];
  *v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v12 = *((_BYTE *)v2 - 16);
      v2 -= 2;
      *(v9 - 16) = v12;
      v9 -= 16;
      *((_QWORD *)v9 + 1) = v2[1];
      *(_BYTE *)v2 = 0;
      v2[1] = 0;
    }
    while (v2 != v3);
    v2 = (uint64_t *)*a1;
    v13 = (uint64_t *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v13 == v2)
    {
      v2 = v13;
      if (!v13)
        return v11;
      goto LABEL_15;
    }
    v14 = v13 - 1;
    do
    {
      v15 = v14 - 1;
      sub_23A0339A8(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2)
LABEL_15:
    operator delete(v2);
  return v11;
}

uint64_t sub_23A0397F8(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 5;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_23A0339A8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_23A03990C((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 5;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 5;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_23A0339A8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_23A03990C(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_239FEBE68();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239FF1A44();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 5;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v15 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((_QWORD *)v11 + 1) = v3[1];
      *(_BYTE *)v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    v3 = (uint64_t *)*a1;
    v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      v3 = v16;
      if (!v16)
        return v14;
      goto LABEL_15;
    }
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_23A0339A8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_15:
    operator delete(v3);
  return v14;
}

uint64_t sub_23A039A38(unsigned __int8 **a1, int a2, _WORD *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  __int16 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;

  ++a1[3];
  v6 = *a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  result = sub_23A03685C(a1, a2, "number");
  if ((_DWORD)result)
  {
    v9 = *((unsigned __int8 *)a1 + 16);
    ++a1[3];
    v10 = *a1;
    if (*a1 == a1[1])
    {
      v11 = -1;
    }
    else
    {
      v11 = *v10;
      *a1 = v10 + 1;
    }
    a1[2] = (unsigned __int8 *)v11;
    result = sub_23A03685C(a1, a2, "number");
    if ((_DWORD)result)
    {
      v12 = *((_BYTE *)a1 + 16);
      if (*((_BYTE *)a1 + 32))
        v13 = v9;
      else
        v13 = *((unsigned __int8 *)a1 + 16);
      if (!*((_BYTE *)a1 + 32))
        v12 = v9;
      *a3 = v12 | (unsigned __int16)(v13 << 8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_23A039B10(unsigned __int8 **a1, int a2, int *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  char v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  char v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;

  ++a1[3];
  v6 = *a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  result = sub_23A03685C(a1, a2, "number");
  if ((_DWORD)result)
  {
    v9 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
    v10 = *((_BYTE *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
    ++a1[3];
    v11 = *a1;
    if (*a1 == a1[1])
    {
      v12 = -1;
    }
    else
    {
      v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    result = sub_23A03685C(a1, a2, "number");
    if ((_DWORD)result)
    {
      v13 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
      v14 = *((_BYTE *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
      ++a1[3];
      v15 = *a1;
      if (*a1 == a1[1])
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      result = sub_23A03685C(a1, a2, "number");
      if ((_DWORD)result)
      {
        v17 = *((_BYTE *)a1 + 32) ? v13 : *((_DWORD *)a1 + 4);
        v18 = *((_BYTE *)a1 + 32) ? *((_DWORD *)a1 + 4) : v14;
        ++a1[3];
        v19 = *a1;
        if (*a1 == a1[1])
        {
          v20 = -1;
        }
        else
        {
          v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        result = sub_23A03685C(a1, a2, "number");
        if ((_DWORD)result)
        {
          v21 = *((_DWORD *)a1 + 4);
          if (*((_BYTE *)a1 + 32))
            v22 = v9;
          else
            v22 = *((_DWORD *)a1 + 4);
          if (!*((_BYTE *)a1 + 32))
            LOBYTE(v21) = v10;
          *a3 = (v17 << 16) | (v22 << 24) | (v18 << 8) | v21;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_23A039CC4(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  char v38;
  char v39;
  char v40;

  ++a1[3];
  v6 = *a1;
  if (*a1 == a1[1])
  {
    v7 = -1;
  }
  else
  {
    v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  result = sub_23A03685C(a1, a2, "number");
  if ((_DWORD)result)
  {
    v9 = *((_BYTE *)a1 + 32) ? a1[2] : 0;
    if (*((_BYTE *)a1 + 32))
      LOBYTE(v10) = 0;
    else
      v10 = a1[2];
    ++a1[3];
    v11 = *a1;
    if (*a1 == a1[1])
    {
      v12 = -1;
    }
    else
    {
      v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    result = sub_23A03685C(a1, a2, "number");
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a1 + 32))
        v13 = a1[2];
      else
        LOBYTE(v13) = 0;
      if (*((_BYTE *)a1 + 32))
        LOBYTE(v14) = 0;
      else
        v14 = a1[2];
      ++a1[3];
      v15 = *a1;
      if (*a1 == a1[1])
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      result = sub_23A03685C(a1, a2, "number");
      if ((_DWORD)result)
      {
        if (*((_BYTE *)a1 + 32))
          v17 = a1[2];
        else
          LOBYTE(v17) = 0;
        if (*((_BYTE *)a1 + 32))
          LOBYTE(v18) = 0;
        else
          v18 = a1[2];
        ++a1[3];
        v19 = *a1;
        if (*a1 == a1[1])
        {
          v20 = -1;
        }
        else
        {
          v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        result = sub_23A03685C(a1, a2, "number");
        if ((_DWORD)result)
        {
          v39 = (char)v13;
          v40 = (char)v18;
          v21 = a3;
          if (*((_BYTE *)a1 + 32))
            v22 = a1[2];
          else
            LOBYTE(v22) = 0;
          if (*((_BYTE *)a1 + 32))
            LODWORD(v23) = 0;
          else
            v23 = a1[2];
          ++a1[3];
          v24 = *a1;
          if (*a1 == a1[1])
          {
            v25 = -1;
          }
          else
          {
            v25 = *v24;
            *a1 = v24 + 1;
          }
          a1[2] = (unsigned __int8 *)v25;
          result = sub_23A03685C(a1, a2, "number");
          if ((_DWORD)result)
          {
            v26 = v9;
            v38 = (char)v10;
            if (*((_BYTE *)a1 + 32))
              LOBYTE(v27) = (_BYTE)v22;
            else
              v27 = a1[2];
            if (*((_BYTE *)a1 + 32))
              v23 = a1[2];
            ++a1[3];
            v28 = *a1;
            if (*a1 == a1[1])
            {
              v29 = -1;
            }
            else
            {
              v29 = *v28;
              *a1 = v28 + 1;
            }
            a1[2] = (unsigned __int8 *)v29;
            result = sub_23A03685C(a1, a2, "number");
            if ((_DWORD)result)
            {
              if (*((_BYTE *)a1 + 32))
              {
                v30 = a1[2];
              }
              else
              {
                v17 = a1[2];
                LOBYTE(v30) = v40;
              }
              ++a1[3];
              v31 = *a1;
              if (*a1 == a1[1])
              {
                v32 = -1;
              }
              else
              {
                v32 = *v31;
                *a1 = v31 + 1;
              }
              a1[2] = (unsigned __int8 *)v32;
              result = sub_23A03685C(a1, a2, "number");
              if ((_DWORD)result)
              {
                if (*((_BYTE *)a1 + 32))
                  LOBYTE(v33) = v39;
                else
                  v33 = a1[2];
                if (*((_BYTE *)a1 + 32))
                  v14 = a1[2];
                ++a1[3];
                v34 = *a1;
                if (*a1 == a1[1])
                {
                  v35 = -1;
                }
                else
                {
                  v35 = *v34;
                  *a1 = v34 + 1;
                }
                a1[2] = (unsigned __int8 *)v35;
                result = sub_23A03685C(a1, a2, "number");
                if ((_DWORD)result)
                {
                  v36 = a1[2];
                  if (*((_BYTE *)a1 + 32))
                    v37 = v26;
                  else
                    v37 = a1[2];
                  if (!*((_BYTE *)a1 + 32))
                    LOBYTE(v36) = v38;
                  *v21 = ((unint64_t)v33 << 48) | ((_QWORD)v37 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v27 << 32) | ((_DWORD)v23 << 24) | ((unint64_t)v30 << 16) | ((unint64_t)v14 << 8) | v36;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23A03A004(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  _DWORD *exception;
  void *v33[2];
  char v34;
  _BYTE v35[96];
  size_t v36;
  int64_t v37;

  result = sub_23A03685C(a1, 1, "binary");
  if ((_DWORD)result)
  {
    v5 = a1[2];
    if ((unint64_t)(v5 - 64) < 0x18)
      return sub_23A03B334(a1, 1, (_DWORD)a1[2] & 0x1F, (_QWORD *)a2);
    switch((unint64_t)v5)
    {
      case 'X':
        ++a1[3];
        v6 = *a1;
        if (*a1 == a1[1])
        {
          v7 = -1;
        }
        else
        {
          v7 = *v6;
          *a1 = v6 + 1;
        }
        a1[2] = (unsigned __int8 *)v7;
        result = sub_23A03685C(a1, 1, "number");
        if ((_DWORD)result)
          return sub_23A03B5AC(a1, 1, *((unsigned __int8 *)a1 + 16), (_QWORD *)a2);
        return result;
      case 'Y':
        ++a1[3];
        v12 = *a1;
        if (*a1 == a1[1])
        {
          v13 = -1;
        }
        else
        {
          v13 = *v12;
          *a1 = v12 + 1;
        }
        a1[2] = (unsigned __int8 *)v13;
        result = sub_23A03685C(a1, 1, "number");
        if ((_DWORD)result)
        {
          v14 = *((unsigned __int8 *)a1 + 16);
          ++a1[3];
          v15 = *a1;
          if (*a1 == a1[1])
          {
            v16 = -1;
          }
          else
          {
            v16 = *v15;
            *a1 = v15 + 1;
          }
          a1[2] = (unsigned __int8 *)v16;
          result = sub_23A03685C(a1, 1, "number");
          if ((_DWORD)result)
          {
            v17 = *((_BYTE *)a1 + 16);
            if (*((_BYTE *)a1 + 32))
              v18 = v14;
            else
              v18 = *((unsigned __int8 *)a1 + 16);
            if (!*((_BYTE *)a1 + 32))
              v17 = v14;
            return sub_23A03B5AC(a1, 1, (unsigned __int16)(v17 | (unsigned __int16)(v18 << 8)), (_QWORD *)a2);
          }
        }
        return result;
      case 'Z':
        *(_DWORD *)&v35[48] = 0;
        v11 = sub_23A039B10(a1, 1, (int *)&v35[48]);
        result = 0;
        if (v11)
          return sub_23A03B334(a1, 1, *(unsigned int *)&v35[48], (_QWORD *)a2);
        return result;
      case '[':
        *(_QWORD *)&v35[48] = 0;
        result = sub_23A039CC4(a1, 1, (unint64_t *)&v35[48]);
        if ((_DWORD)result)
          return sub_23A03B7FC(a1, 1, *(unint64_t *)&v35[48], (_QWORD *)a2);
        return result;
      case '_':
        while (1)
        {
          ++a1[3];
          v8 = *a1;
          if (*a1 == a1[1])
          {
            a1[2] = (unsigned __int8 *)-1;
          }
          else
          {
            v9 = *v8;
            *a1 = v8 + 1;
            a1[2] = (unsigned __int8 *)v9;
            if (v9 == 255)
              return 1;
          }
          memset(&v35[48], 0, 26);
          v10 = sub_23A03A004(a1, &v35[48]);
          if ((v10 & 1) != 0)
            sub_23A03BA74(a2, *(char **)(a2 + 8), *(char **)&v35[48], *(char **)&v35[56], *(_QWORD *)&v35[56] - *(_QWORD *)&v35[48]);
          if (*(_QWORD *)&v35[48])
          {
            *(_QWORD *)&v35[56] = *(_QWORD *)&v35[48];
            operator delete(*(void **)&v35[48]);
          }
          if ((v10 & 1) == 0)
            goto LABEL_60;
        }
      default:
        v35[50] = 0;
        *(_WORD *)&v35[48] = 0;
        snprintf(&v35[48], 3uLL, "%.2hhX", v5);
        v19 = strlen(&v35[48]);
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          v21 = operator new(v22 + 1);
          v36 = v20;
          v37 = v23 | 0x8000000000000000;
          *(_QWORD *)&v35[88] = v21;
        }
        else
        {
          HIBYTE(v37) = v19;
          v21 = &v35[88];
          if (!v19)
            goto LABEL_42;
        }
        memcpy(v21, &v35[48], v20);
LABEL_42:
        v21[v20] = 0;
        v24 = SHIBYTE(v37);
        if (v37 >= 0)
          v25 = HIBYTE(v37);
        else
          v25 = v36;
        v26 = v25 + 95;
        if (v25 + 95 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v27 = a1[5];
        v28 = (unint64_t)a1[3];
        if (v26 <= 0x16)
        {
          qmemcpy(v35, "expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x",
            95);
          v29 = &v35[95];
LABEL_51:
          if (v24 >= 0)
            v31 = &v35[88];
          else
            v31 = *(_BYTE **)&v35[88];
          memmove(v29, v31, v25);
          goto LABEL_55;
        }
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        *(_QWORD *)&v35[8] = v25 + 95;
        *(_QWORD *)&v35[16] = (v30 + 1) | 0x8000000000000000;
        *(_QWORD *)v35 = operator new(v30 + 1);
        qmemcpy((void *)(*(_QWORD *)v35 + 32), "x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", 63);
        v29 = (_BYTE *)(*(_QWORD *)v35 + 95);
        qmemcpy(*(void **)v35, "expected length specification (0", 32);
        if (v25)
          goto LABEL_51;
LABEL_55:
        v29[v25] = 0;
        v34 = 6;
        strcpy((char *)v33, "binary");
        sub_23A035DF4(1, (uint64_t)v35, (uint64_t)v33, (std::string *)&v35[24]);
        sub_23A035A34(113, v28, (uint64_t)&v35[24], (uint64_t)&v35[48]);
        v27[40] = 1;
        if (v27[41])
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = &off_250B0DDA0;
          exception[2] = *(_DWORD *)&v35[56];
          MEMORY[0x23B83FB10](exception + 4, &v35[64]);
          *(_QWORD *)exception = &off_250B0DD50;
          *((_QWORD *)exception + 4) = *(_QWORD *)&v35[80];
          __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
        }
        *(_QWORD *)&v35[48] = &off_250B0DDA0;
        std::runtime_error::~runtime_error((std::runtime_error *)&v35[64]);
        std::exception::~exception((std::exception *)&v35[48]);
        if ((v35[47] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v35[24]);
          if ((v34 & 0x80000000) == 0)
          {
LABEL_58:
            if ((v35[23] & 0x80000000) == 0)
              goto LABEL_59;
            goto LABEL_64;
          }
        }
        else if ((v34 & 0x80000000) == 0)
        {
          goto LABEL_58;
        }
        operator delete(v33[0]);
        if ((v35[23] & 0x80000000) == 0)
        {
LABEL_59:
          if ((v24 & 0x80000000) == 0)
            goto LABEL_60;
          goto LABEL_65;
        }
LABEL_64:
        operator delete(*(void **)v35);
        if ((v24 & 0x80000000) == 0)
          goto LABEL_60;
LABEL_65:
        operator delete(*(void **)&v35[88]);
LABEL_60:
        result = 0;
        break;
    }
  }
  return result;
}

void sub_23A03A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28,uint64_t a29)
{
  std::runtime_error *v29;
  int v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(v29);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v30 & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(*(void **)(v31 - 88));
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a16);
  if ((v30 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_23A03A668(unsigned __int8 **a1, std::string *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  char v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int16 v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int16 v23;
  size_t v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  _DWORD *exception;
  void *v39[2];
  char v40;
  _BYTE v41[96];
  size_t v42;
  int64_t v43;

  if (!sub_23A03685C(a1, 1, "string"))
    return 0;
  v4 = a1[2];
  if ((unint64_t)(v4 - 96) >= 0x18)
  {
    switch((unint64_t)v4)
    {
      case 'x':
        ++a1[3];
        v10 = *a1;
        if (*a1 == a1[1])
        {
          v11 = -1;
        }
        else
        {
          v11 = *v10;
          *a1 = v10 + 1;
        }
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_23A03685C(a1, 1, "number"))
          return 0;
        return sub_23A03BEE4(a1, 1, *((unsigned __int8 *)a1 + 16), a2);
      case 'y':
        ++a1[3];
        v17 = *a1;
        if (*a1 == a1[1])
        {
          v18 = -1;
        }
        else
        {
          v18 = *v17;
          *a1 = v17 + 1;
        }
        a1[2] = (unsigned __int8 *)v18;
        if (!sub_23A03685C(a1, 1, "number"))
          return 0;
        v19 = *((unsigned __int8 *)a1 + 16);
        ++a1[3];
        v20 = *a1;
        if (*a1 == a1[1])
        {
          v21 = -1;
        }
        else
        {
          v21 = *v20;
          *a1 = v20 + 1;
        }
        a1[2] = (unsigned __int8 *)v21;
        if (!sub_23A03685C(a1, 1, "number"))
          return 0;
        v22 = *((_BYTE *)a1 + 16);
        if (*((_BYTE *)a1 + 32))
          v23 = v19;
        else
          v23 = *((unsigned __int8 *)a1 + 16);
        if (!*((_BYTE *)a1 + 32))
          v22 = v19;
        return sub_23A03BEE4(a1, 1, (unsigned __int16)(v22 | (unsigned __int16)(v23 << 8)), a2);
      case 'z':
        *(_DWORD *)&v41[48] = 0;
        v6 = 0;
        if (sub_23A039B10(a1, 1, (int *)&v41[48]))
          return sub_23A03BE0C(a1, 1, *(unsigned int *)&v41[48], a2);
        return v6;
      case '{':
        *(_QWORD *)&v41[48] = 0;
        if (!sub_23A039CC4(a1, 1, (unint64_t *)&v41[48]))
          return 0;
        return sub_23A03BF9C(a1, 1, *(unint64_t *)&v41[48], a2);
      case '\x7F':
        do
        {
          while (2)
          {
            ++a1[3];
            v12 = *a1;
            if (*a1 == a1[1])
            {
              a1[2] = (unsigned __int8 *)-1;
            }
            else
            {
              v13 = *v12;
              *a1 = v12 + 1;
              a1[2] = (unsigned __int8 *)v13;
              if (v13 == 255)
                return 1;
            }
            memset(&v41[48], 0, 24);
            v14 = sub_23A03A668(a1, &v41[48]);
            if ((v14 & 1) != 0)
            {
              if (v41[71] >= 0)
                v15 = &v41[48];
              else
                v15 = *(const std::string::value_type **)&v41[48];
              if (v41[71] >= 0)
                v16 = v41[71];
              else
                v16 = *(_QWORD *)&v41[56];
              std::string::append(a2, v15, v16);
            }
            if ((v41[71] & 0x80000000) == 0)
            {
              v6 = 0;
              if ((v14 & 1) == 0)
                return v6;
              continue;
            }
            break;
          }
          operator delete(*(void **)&v41[48]);
          v6 = 0;
        }
        while ((v14 & 1) != 0);
        return v6;
      default:
        v41[50] = 0;
        *(_WORD *)&v41[48] = 0;
        snprintf(&v41[48], 3uLL, "%.2hhX", v4);
        v25 = strlen(&v41[48]);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v26 = v25;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          v42 = v26;
          v43 = v29 | 0x8000000000000000;
          *(_QWORD *)&v41[88] = v27;
        }
        else
        {
          HIBYTE(v43) = v25;
          v27 = &v41[88];
          if (!v25)
            goto LABEL_57;
        }
        memcpy(v27, &v41[48], v26);
LABEL_57:
        v27[v26] = 0;
        v30 = SHIBYTE(v43);
        if (v43 >= 0)
          v31 = HIBYTE(v43);
        else
          v31 = v42;
        v32 = v31 + 89;
        if (v31 + 89 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v33 = a1[5];
        v34 = (unint64_t)a1[3];
        if (v32 <= 0x16)
        {
          qmemcpy(v41, "expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", 89);
          v35 = &v41[89];
LABEL_66:
          if (v30 >= 0)
            v37 = &v41[88];
          else
            v37 = *(_BYTE **)&v41[88];
          memmove(v35, v37, v31);
          goto LABEL_70;
        }
        v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v36 = v32 | 7;
        *(_QWORD *)&v41[8] = v31 + 89;
        *(_QWORD *)&v41[16] = (v36 + 1) | 0x8000000000000000;
        *(_QWORD *)v41 = operator new(v36 + 1);
        qmemcpy((void *)(*(_QWORD *)v41 + 32), "x60-0x7B) or indefinite string type (0x7F); last byte: 0x", 57);
        v35 = (_BYTE *)(*(_QWORD *)v41 + 89);
        qmemcpy(*(void **)v41, "expected length specification (0", 32);
        if (v31)
          goto LABEL_66;
LABEL_70:
        v35[v31] = 0;
        v40 = 6;
        strcpy((char *)v39, "string");
        sub_23A035DF4(1, (uint64_t)v41, (uint64_t)v39, (std::string *)&v41[24]);
        sub_23A035A34(113, v34, (uint64_t)&v41[24], (uint64_t)&v41[48]);
        v33[40] = 1;
        if (v33[41])
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = &off_250B0DDA0;
          exception[2] = *(_DWORD *)&v41[56];
          MEMORY[0x23B83FB10](exception + 4, &v41[64]);
          *(_QWORD *)exception = &off_250B0DD50;
          *((_QWORD *)exception + 4) = *(_QWORD *)&v41[80];
          __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
        }
        *(_QWORD *)&v41[48] = &off_250B0DDA0;
        std::runtime_error::~runtime_error((std::runtime_error *)&v41[64]);
        std::exception::~exception((std::exception *)&v41[48]);
        if ((v41[47] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v41[24]);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_73:
            if ((v41[23] & 0x80000000) == 0)
              goto LABEL_74;
            goto LABEL_78;
          }
        }
        else if ((v40 & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(v39[0]);
        if ((v41[23] & 0x80000000) == 0)
        {
LABEL_74:
          if ((v30 & 0x80000000) == 0)
            return 0;
LABEL_79:
          operator delete(*(void **)&v41[88]);
          return 0;
        }
LABEL_78:
        operator delete(*(void **)v41);
        if ((v30 & 0x80000000) == 0)
          return 0;
        goto LABEL_79;
    }
  }
  v5 = v4 & 0x1F;
  if ((v4 & 0x1F) != 0)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      ++a1[3];
      v8 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_23A03685C(a1, 1, "string"))
          return v6;
      }
      else
      {
        v9 = (unsigned __int8 *)*v8;
        *a1 = v8 + 1;
        a1[2] = v9;
        if (!sub_23A03685C(a1, 1, "string"))
          return v6;
      }
      std::string::push_back(a2, *((_BYTE *)a1 + 16));
      v6 = ++v7 >= v5;
      if (v5 == v7)
        return v6;
    }
  }
  return 1;
}

void sub_23A03ACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::runtime_error *v33;
  int v34;
  uint64_t v35;

  std::runtime_error::~runtime_error(v33);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v34 & 0x80000000) == 0)
LABEL_11:
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(*(void **)(v35 - 88));
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a16);
  if ((v34 & 0x80000000) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t sub_23A03AD54(unsigned __int8 **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned int v8;

  v4 = a2;
  result = sub_23A038A08((uint64_t)a1[5], a2);
  if (!(_DWORD)result)
    return result;
  if (v4 == -1)
  {
    while (1)
    {
      while (1)
      {
        ++a1[3];
        v7 = *a1;
        if (*a1 != a1[1])
          break;
        a1[2] = (unsigned __int8 *)v4;
        if ((sub_23A034634(a1, 0, a3) & 1) == 0)
          return 0;
      }
      v8 = *v7;
      *a1 = v7 + 1;
      a1[2] = (unsigned __int8 *)v8;
      if (v8 == 255)
        break;
      if ((sub_23A034634(a1, 0, a3) & 1) == 0)
        return 0;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
LABEL_12:
    *((_QWORD *)a1[5] + 2) -= 8;
    return 1;
  }
  while ((sub_23A034634(a1, 1, a3) & 1) != 0)
  {
    if (!--v4)
      goto LABEL_12;
  }
  return 0;
}

uint64_t sub_23A03AE3C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  std::string __p;
  std::string *p_p;

  v4 = a2;
  if (!sub_23A0362CC(*(_QWORD *)(a1 + 40), a2))
    return 0;
  memset(&__p, 0, sizeof(__p));
  if (v4 == -1)
  {
    ++*(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
      goto LABEL_10;
LABEL_15:
    *(_QWORD *)(a1 + 16) = -1;
    while (sub_23A03A668((unsigned __int8 **)a1, &__p))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v10 + 16) - 8) + 8);
      p_p = &__p;
      *(_QWORD *)(v10 + 32) = sub_23A0378AC(v11, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
      if (!sub_23A034634(a1, 1, a3))
        break;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        ++*(_QWORD *)(a1 + 24);
        v8 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          goto LABEL_15;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        ++*(_QWORD *)(a1 + 24);
        v8 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          goto LABEL_15;
      }
LABEL_10:
      v9 = *v8;
      *(_QWORD *)a1 = v8 + 1;
      *(_QWORD *)(a1 + 16) = v9;
      if (v9 == 255)
        goto LABEL_4;
    }
LABEL_26:
    v6 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v6;
    goto LABEL_5;
  }
  if (v4)
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 24);
      v12 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v13 = -1;
      }
      else
      {
        v13 = *v12;
        *(_QWORD *)a1 = v12 + 1;
      }
      *(_QWORD *)(a1 + 16) = v13;
      if (!sub_23A03A668((unsigned __int8 **)a1, &__p))
        goto LABEL_26;
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v14 + 16) - 8) + 8);
      p_p = &__p;
      *(_QWORD *)(v14 + 32) = sub_23A0378AC(v15, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
      if (!sub_23A034634(a1, 1, a3))
        goto LABEL_26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        if (!--v4)
          break;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        if (!--v4)
          break;
      }
    }
  }
LABEL_4:
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
  v6 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_23A03B080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_23A03B0A0(_DWORD **a1)
{
  int v1;
  unsigned int v2;
  double result;

  v1 = (**a1 >> 10) & 0x1F;
  v2 = **a1 & 0x3FF;
  if (v1 == 31)
  {
    result = NAN;
    if (!v2)
      return INFINITY;
  }
  else if (v1)
  {
    return ldexp((double)(v2 | 0x400), v1 - 25);
  }
  else
  {
    return ldexp((double)v2, -24);
  }
  return result;
}

uint64_t sub_23A03B0F4(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 6;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_23A0339A8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_23A03B208((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 6;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 6;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_23A0339A8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_23A03B208(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_239FEBE68();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239FF1A44();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 6;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v15 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((_QWORD *)v11 + 1) = v3[1];
      *(_BYTE *)v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    v3 = (uint64_t *)*a1;
    v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      v3 = v16;
      if (!v16)
        return v14;
      goto LABEL_15;
    }
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_23A0339A8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_15:
    operator delete(v3);
  return v14;
}

BOOL sub_23A03B334(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v5;
  BOOL v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;

  if (a3)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        else
        {
          v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        v12 = *((_BYTE *)a1 + 16);
        v14 = (_BYTE *)a4[1];
        v13 = a4[2];
        if ((unint64_t)v14 >= v13)
          break;
        *v14 = v12;
        a4[1] = v14 + 1;
        v8 = ++v9 >= v5;
        if (v9 == v5)
          return v8;
      }
      v15 = (_BYTE *)*a4;
      v16 = (unint64_t)&v14[-*a4];
      v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0)
        sub_239FEBE68();
      v18 = a2;
      v19 = v13 - (_QWORD)v15;
      if (2 * v19 > v17)
        v17 = 2 * v19;
      v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20)
        break;
      v21 = 0;
      v22 = &v14[-*a4];
      *(_BYTE *)v16 = v12;
      v23 = v16 + 1;
      if (v14 != v15)
        goto LABEL_17;
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14)
        operator delete(v14);
      a2 = v18;
      v5 = a3;
      a4[1] = v23;
      v8 = ++v9 >= a3;
      if (v9 == a3)
        return v8;
    }
    v21 = (char *)operator new(v20);
    v22 = &v21[v16];
    v21[v16] = v12;
    v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15)
      goto LABEL_33;
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v24 = 0;
        goto LABEL_25;
      }
      v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v21[v16 - 16];
      v26 = (__int128 *)(v14 - 16);
      v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24)
        goto LABEL_32;
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        v29 = &v21[&v14[-v24] - v15 - 8];
        v30 = (uint64_t *)&v14[-v24 - 8];
        v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v32 = *v30--;
          *(_QWORD *)v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_32;
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    v33 = v22 - 1;
    do
    {
      v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    v14 = (_BYTE *)*a4;
    v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

uint64_t sub_23A03B5AC(_QWORD *a1, int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;

  if (a3)
  {
    v5 = a3;
    v6 = a2;
    v8 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        v9 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          v10 = -1;
        }
        else
        {
          v10 = *v9;
          *a1 = v9 + 1;
        }
        a1[2] = v10;
        v11 = sub_23A03685C(a1, v6, "binary");
        if (!(_DWORD)v11)
          return v11;
        v12 = *((_BYTE *)a1 + 16);
        v14 = (_BYTE *)a4[1];
        v13 = a4[2];
        if ((unint64_t)v14 >= v13)
          break;
        *v14 = v12;
        a4[1] = v14 + 1;
        if (++v8 >= v5)
          return v11;
      }
      v15 = (_BYTE *)*a4;
      v16 = (unint64_t)&v14[-*a4];
      v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0)
        sub_239FEBE68();
      v18 = v13 - (_QWORD)v15;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      v19 = v18 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v19)
        break;
      v20 = 0;
      v21 = &v14[-*a4];
      *(_BYTE *)v16 = v12;
      v22 = v16 + 1;
      if (v14 != v15)
        goto LABEL_18;
LABEL_34:
      *a4 = v21;
      a4[1] = v22;
      a4[2] = &v20[v19];
      if (v14)
        operator delete(v14);
      v6 = a2;
      v5 = a3;
      a4[1] = v22;
      if (++v8 >= a3)
        return v11;
    }
    v20 = (char *)operator new(v19);
    v21 = &v20[v16];
    v20[v16] = v12;
    v22 = (uint64_t)&v20[v16 + 1];
    if (v14 == v15)
      goto LABEL_34;
LABEL_18:
    if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v23 = 0;
        goto LABEL_26;
      }
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = &v20[v16 - 16];
      v25 = (__int128 *)(v14 - 16);
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v25;
        *((_OWORD *)v24 - 1) = *(v25 - 1);
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_33;
      if ((v16 & 0x18) != 0)
      {
LABEL_26:
        v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
        v28 = &v20[&v14[-v23] - v15 - 8];
        v29 = (uint64_t *)&v14[-v23 - 8];
        v30 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v31 = *v29--;
          *(_QWORD *)v28 = v31;
          v28 -= 8;
          v30 += 8;
        }
        while (v30);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v21 -= v23;
      v14 -= v23;
    }
LABEL_31:
    v32 = v21 - 1;
    do
    {
      v33 = *--v14;
      *v32-- = v33;
    }
    while (v14 != v15);
LABEL_33:
    v14 = (_BYTE *)*a4;
    v21 = v20;
    goto LABEL_34;
  }
  return 1;
}

BOOL sub_23A03B7FC(_QWORD *a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;

  if (a3)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        else
        {
          v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_23A03685C(a1, a2, "binary"))
            return v8;
        }
        v12 = *((_BYTE *)a1 + 16);
        v14 = (_BYTE *)a4[1];
        v13 = a4[2];
        if ((unint64_t)v14 >= v13)
          break;
        *v14 = v12;
        a4[1] = v14 + 1;
        v8 = ++v9 >= v5;
        if (v9 == v5)
          return v8;
      }
      v15 = (_BYTE *)*a4;
      v16 = (unint64_t)&v14[-*a4];
      v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0)
        sub_239FEBE68();
      v18 = a2;
      v19 = v13 - (_QWORD)v15;
      if (2 * v19 > v17)
        v17 = 2 * v19;
      v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20)
        break;
      v21 = 0;
      v22 = &v14[-*a4];
      *(_BYTE *)v16 = v12;
      v23 = v16 + 1;
      if (v14 != v15)
        goto LABEL_17;
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14)
        operator delete(v14);
      a2 = v18;
      v5 = a3;
      a4[1] = v23;
      v8 = ++v9 >= a3;
      if (v9 == a3)
        return v8;
    }
    v21 = (char *)operator new(v20);
    v22 = &v21[v16];
    v21[v16] = v12;
    v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15)
      goto LABEL_33;
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v24 = 0;
        goto LABEL_25;
      }
      v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v21[v16 - 16];
      v26 = (__int128 *)(v14 - 16);
      v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24)
        goto LABEL_32;
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        v29 = &v21[&v14[-v24] - v15 - 8];
        v30 = (uint64_t *)&v14[-v24 - 8];
        v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v32 = *v30--;
          *(_QWORD *)v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_32;
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    v33 = v22 - 1;
    do
    {
      v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    v14 = (_BYTE *)*a4;
    v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

char *sub_23A03BA74(uint64_t a1, char *__dst, char *__src, char *a4, unint64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  char v53;
  char *v54;
  char *v55;
  size_t v56;
  char *v57;

  v5 = __dst;
  if ((uint64_t)a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_239FEBE68();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = operator new(v15);
      v17 = &v13[(_QWORD)v16];
      v18 = &v13[(_QWORD)v16 + a5];
      v19 = &v13[(_QWORD)v16];
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(__dst - v11);
      v18 = &v13[a5];
      v19 = (char *)(__dst - v11);
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    v19 = v17;
    v20 = __src;
    if ((char *)(&v5[(_QWORD)v16] - &__src[(_QWORD)v11]) >= (char *)0x20)
    {
      if (a5 >= 0x20)
      {
        v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        v36 = (__int128 *)(__src + 16);
        v37 = (char *)v16 + (_QWORD)v13 + 16;
        v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_44:
          v45 = *(char **)a1;
          if (*(char **)a1 == v5)
          {
            v48 = v17;
            v55 = (char *)v16 + v15;
            v56 = v10 - v5;
            if (v10 == v5)
              goto LABEL_53;
          }
          else
          {
            v46 = v5 - v45;
            v47 = v5;
            v48 = v17;
            if ((unint64_t)(v5 - v45) < 0x20)
              goto LABEL_62;
            v47 = v5;
            v48 = v17;
            if ((unint64_t)(v11 - (_BYTE *)v16) < 0x20)
              goto LABEL_62;
            v47 = &v5[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            v48 = &v17[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            v49 = v5 - 16;
            v50 = (char *)v16 + v5 - 16 - v11;
            v51 = v46 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v52 = *(_OWORD *)v49;
              *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
              *(_OWORD *)v50 = v52;
              v50 -= 32;
              v49 -= 32;
              v51 -= 32;
            }
            while (v51);
            if (v46 != (v46 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_62:
              do
              {
                v53 = *--v47;
                *--v48 = v53;
              }
              while (v47 != v45);
            }
            v54 = *(char **)(a1 + 8);
            v55 = (char *)v16 + v15;
            v56 = v54 - v5;
            if (v54 == v5)
              goto LABEL_53;
          }
          memmove(v18, v5, v56);
LABEL_53:
          v57 = *(char **)a1;
          *(_QWORD *)a1 = v48;
          *(_QWORD *)(a1 + 8) = &v18[v56];
          *(_QWORD *)(a1 + 16) = v55;
          if (v57)
            operator delete(v57);
          return v17;
        }
        if ((a5 & 0x18) == 0)
        {
          v20 = &__src[v29];
          v19 = &v17[v29];
          goto LABEL_43;
        }
      }
      else
      {
        v29 = 0;
      }
      v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      v40 = &__src[v29];
      v41 = (char *)v16 + &v5[v29] - v11;
      v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v43 = *(_QWORD *)v40;
        v40 += 8;
        *(_QWORD *)v41 = v43;
        v41 += 8;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5)
        goto LABEL_44;
    }
    do
    {
LABEL_43:
      v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_44;
  }
  v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    v22 = &__src[a5];
    v24 = *(char **)(a1 + 8);
    v25 = &__dst[a5];
    v26 = &v10[-a5];
    v27 = v24;
    if ((unint64_t)v10 < a5)
      goto LABEL_30;
    goto LABEL_19;
  }
  v22 = &__src[v21];
  v23 = a4 - &__src[v21];
  if (a4 != &__src[v21])
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  v24 = &v10[v23];
  *(_QWORD *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    v25 = &v5[a5];
    v26 = &v24[-a5];
    v27 = &v10[v23];
    if (&v24[-a5] >= v10)
      goto LABEL_30;
LABEL_19:
    v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      v27 = v24;
      if (a5 >= 0x20)
      {
        v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        v31 = v24 + 16;
        v32 = (__int128 *)(v26 + 16);
        v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_30;
      }
    }
    else
    {
      v27 = v24;
    }
    do
    {
      v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(_QWORD *)(a1 + 8) = v27;
    if (v24 != v25)
      memmove(v25, v5, v24 - v25);
    if (v22 != __src)
      memmove(v5, __src, v22 - __src);
  }
  return v5;
}

BOOL sub_23A03BE0C(unsigned __int8 **a1, int a2, unsigned int a3, std::string *a4)
{
  BOOL v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      ++a1[3];
      v10 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_23A03685C(a1, a2, "string"))
          return v8;
      }
      else
      {
        v11 = *v10;
        *a1 = v10 + 1;
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_23A03685C(a1, a2, "string"))
          return v8;
      }
      std::string::push_back(a4, *((_BYTE *)a1 + 16));
      v8 = ++v9 >= a3;
      if (a3 == v9)
        return v8;
    }
  }
  return 1;
}

uint64_t sub_23A03BEE4(unsigned __int8 **a1, int a2, unsigned int a3, std::string *a4)
{
  unsigned int i;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 1;
  for (i = 0; i < a3; ++i)
  {
    ++a1[3];
    v9 = *a1;
    if (*a1 == a1[1])
    {
      v10 = -1;
    }
    else
    {
      v10 = *v9;
      *a1 = v9 + 1;
    }
    a1[2] = (unsigned __int8 *)v10;
    v11 = sub_23A03685C(a1, a2, "string");
    if (!(_DWORD)v11)
      break;
    std::string::push_back(a4, *((_BYTE *)a1 + 16));
  }
  return v11;
}

BOOL sub_23A03BF9C(unsigned __int8 **a1, int a2, unint64_t a3, std::string *a4)
{
  BOOL v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      ++a1[3];
      v10 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_23A03685C(a1, a2, "string"))
          return v8;
      }
      else
      {
        v11 = *v10;
        *a1 = v10 + 1;
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_23A03685C(a1, a2, "string"))
          return v8;
      }
      std::string::push_back(a4, *((_BYTE *)a1 + 16));
      v8 = ++v9 >= a3;
      if (a3 == v9)
        return v8;
    }
  }
  return 1;
}

BOOL sub_23A03C074(uint64_t a1, unint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  std::string __p;
  std::string *p_p;

  if (sub_23A0362CC(*(_QWORD *)(a1 + 40), a2))
  {
    memset(&__p, 0, sizeof(__p));
    if (a2)
    {
      v4 = 0;
      v5 = 0;
      while (1)
      {
        ++*(_QWORD *)(a1 + 24);
        v6 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        {
          v7 = -1;
        }
        else
        {
          v7 = *v6;
          *(_QWORD *)a1 = v6 + 1;
        }
        *(_QWORD *)(a1 + 16) = v7;
        if (!sub_23A03C258((unsigned __int8 **)a1, &__p))
          break;
        v8 = *(_QWORD *)(a1 + 40);
        v9 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v8 + 16) - 8) + 8);
        p_p = &__p;
        *(_QWORD *)(v8 + 32) = sub_23A0378AC(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
        if (!sub_23A03528C(a1))
          break;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
          v4 = ++v5 >= a2;
          if (a2 == v5)
            goto LABEL_13;
        }
        else
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          v4 = ++v5 >= a2;
          if (a2 == v5)
            goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
      v4 = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    return 0;
  }
  return v4;
}

void sub_23A03C1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A03C1F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2;
  result = sub_23A038A08(*(_QWORD *)(a1 + 40), a2);
  if ((_DWORD)result)
  {
    if (v2)
    {
      while ((sub_23A03528C(a1) & 1) != 0)
      {
        if (!--v2)
          goto LABEL_5;
      }
      return 0;
    }
    else
    {
LABEL_5:
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23A03C258(unsigned __int8 **a1, std::string *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  void **p_dst;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  void **v32;
  _DWORD *exception;
  void *v34[2];
  char v35;
  _BYTE v36[67];
  _BYTE v37[21];
  void **__dst;
  size_t v39;
  int64_t v40;

  if (!sub_23A03685C(a1, 2, "string"))
    return 0;
  v4 = a1[2];
  if ((unint64_t)(v4 - 160) < 0x20)
  {
    v5 = v4 & 0x1F;
    if ((v4 & 0x1F) != 0)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        ++a1[3];
        v8 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)-1;
          if (!sub_23A03685C(a1, 2, "string"))
            return v6;
        }
        else
        {
          v9 = (unsigned __int8 *)*v8;
          *a1 = v8 + 1;
          a1[2] = v9;
          if (!sub_23A03685C(a1, 2, "string"))
            return v6;
        }
        std::string::push_back(a2, *((_BYTE *)a1 + 16));
        v6 = ++v7 >= v5;
        if (v5 == v7)
          return v6;
      }
    }
    return 1;
  }
  if (v4 == (unsigned __int8 *)217)
  {
    ++a1[3];
    v18 = *a1;
    if (*a1 == a1[1])
    {
      v19 = -1;
    }
    else
    {
      v19 = *v18;
      *a1 = v18 + 1;
    }
    a1[2] = (unsigned __int8 *)v19;
    if (!sub_23A03685C(a1, 2, "number"))
      return 0;
    return sub_23A03BEE4(a1, 2, *((unsigned __int8 *)a1 + 16), a2);
  }
  else
  {
    if (v4 != (unsigned __int8 *)218)
    {
      if (v4 == (unsigned __int8 *)219)
      {
        *(_DWORD *)&v36[48] = 0;
        v6 = 0;
        if (sub_23A039B10(a1, 2, (int *)&v36[48]))
          return sub_23A03BE0C(a1, 2, *(unsigned int *)&v36[48], a2);
        return v6;
      }
      v36[50] = 0;
      *(_WORD *)&v36[48] = 0;
      snprintf(&v36[48], 3uLL, "%.2hhX", v4);
      v20 = strlen(&v36[48]);
      if (v20 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v21 = v20;
      if (v20 >= 0x17)
      {
        v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v23 = v20 | 7;
        v24 = v23 + 1;
        p_dst = (void **)operator new(v23 + 1);
        v39 = v21;
        v40 = v24 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v40) = v20;
        p_dst = (void **)&__dst;
        if (!v20)
        {
LABEL_42:
          *((_BYTE *)p_dst + v21) = 0;
          v25 = SHIBYTE(v40);
          if (v40 >= 0)
            v26 = HIBYTE(v40);
          else
            v26 = v39;
          v27 = v26 + 67;
          if (v26 + 67 > 0x7FFFFFFFFFFFFFF7)
            sub_239FEBDE0();
          v28 = a1[5];
          v29 = (unint64_t)a1[3];
          if (v27 > 0x16)
          {
            v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v31 = v27 | 7;
            *(_QWORD *)&v36[8] = v26 + 67;
            *(_QWORD *)&v36[16] = (v31 + 1) | 0x8000000000000000;
            *(_QWORD *)v36 = operator new(v31 + 1);
            qmemcpy(*(void **)v36, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", 67);
            v30 = (_BYTE *)(*(_QWORD *)v36 + 67);
            if (!v26)
            {
LABEL_55:
              v30[v26] = 0;
              v35 = 6;
              strcpy((char *)v34, "string");
              sub_23A035DF4(2, (uint64_t)v36, (uint64_t)v34, (std::string *)&v36[24]);
              sub_23A035A34(113, v29, (uint64_t)&v36[24], (uint64_t)&v36[48]);
              v28[40] = 1;
              if (v28[41])
              {
                exception = __cxa_allocate_exception(0x28uLL);
                *(_QWORD *)exception = &off_250B0DDA0;
                exception[2] = *(_DWORD *)&v36[56];
                MEMORY[0x23B83FB10](exception + 4, &v36[64]);
                *(_QWORD *)exception = &off_250B0DD50;
                *((_QWORD *)exception + 4) = *(_QWORD *)&v37[13];
                __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
              }
              *(_QWORD *)&v36[48] = &off_250B0DDA0;
              std::runtime_error::~runtime_error((std::runtime_error *)&v36[64]);
              std::exception::~exception((std::exception *)&v36[48]);
              if ((v36[47] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v36[24]);
                if ((v35 & 0x80000000) == 0)
                {
LABEL_58:
                  if ((v36[23] & 0x80000000) == 0)
                    goto LABEL_59;
                  goto LABEL_63;
                }
              }
              else if ((v35 & 0x80000000) == 0)
              {
                goto LABEL_58;
              }
              operator delete(v34[0]);
              if ((v36[23] & 0x80000000) == 0)
              {
LABEL_59:
                if ((v25 & 0x80000000) == 0)
                  return 0;
LABEL_64:
                operator delete(__dst);
                return 0;
              }
LABEL_63:
              operator delete(*(void **)v36);
              if ((v25 & 0x80000000) == 0)
                return 0;
              goto LABEL_64;
            }
          }
          else
          {
            qmemcpy(v36, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", sizeof(v36));
            v30 = v37;
          }
          if (v25 >= 0)
            v32 = (void **)&__dst;
          else
            v32 = __dst;
          memmove(v30, v32, v26);
          goto LABEL_55;
        }
      }
      memcpy(p_dst, &v36[48], v21);
      goto LABEL_42;
    }
    ++a1[3];
    v11 = *a1;
    if (*a1 == a1[1])
    {
      v12 = -1;
    }
    else
    {
      v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    if (!sub_23A03685C(a1, 2, "number"))
      return 0;
    v13 = *((unsigned __int8 *)a1 + 16);
    ++a1[3];
    v14 = *a1;
    if (*a1 == a1[1])
    {
      v15 = -1;
    }
    else
    {
      v15 = *v14;
      *a1 = v14 + 1;
    }
    a1[2] = (unsigned __int8 *)v15;
    if (!sub_23A03685C(a1, 2, "number"))
      return 0;
    v16 = *((_BYTE *)a1 + 16);
    if (*((_BYTE *)a1 + 32))
      v17 = v13;
    else
      v17 = *((unsigned __int8 *)a1 + 16);
    if (!*((_BYTE *)a1 + 32))
      v16 = v13;
    return sub_23A03BEE4(a1, 2, (unsigned __int16)(v16 | (unsigned __int16)(v17 << 8)), a2);
  }
}

void sub_23A03C7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  std::runtime_error *v28;
  int v29;
  uint64_t v30;

  std::runtime_error::~runtime_error(v28);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (v29 < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (v29 < 0)
  {
LABEL_7:
    operator delete(*(void **)(v30 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

uint64_t sub_23A03C848(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  __int16 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int16 v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int16 v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;

  v2 = 0;
  switch((unint64_t)a1[2])
  {
    case 0xC4uLL:
      ++a1[3];
      v5 = *a1;
      if (*a1 == a1[1])
      {
        v6 = -1;
      }
      else
      {
        v6 = *v5;
        *a1 = v5 + 1;
      }
      a1[2] = (unsigned __int8 *)v6;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      return sub_23A03B5AC(a1, 2, *((unsigned __int8 *)a1 + 16), (_QWORD *)a2);
    case 0xC5uLL:
      ++a1[3];
      v7 = *a1;
      if (*a1 == a1[1])
      {
        v8 = -1;
      }
      else
      {
        v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v9 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      v10 = *a1;
      if (*a1 == a1[1])
      {
        v11 = -1;
      }
      else
      {
        v11 = *v10;
        *a1 = v10 + 1;
      }
      a1[2] = (unsigned __int8 *)v11;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v12 = *((_BYTE *)a1 + 16);
      if (*((_BYTE *)a1 + 32))
        v13 = v9;
      else
        v13 = *((unsigned __int8 *)a1 + 16);
      if (!*((_BYTE *)a1 + 32))
        v12 = v9;
      return sub_23A03B5AC(a1, 2, (unsigned __int16)(v12 | (unsigned __int16)(v13 << 8)), (_QWORD *)a2);
    case 0xC6uLL:
      v45 = 0;
      v2 = 0;
      if (sub_23A039B10(a1, 2, (int *)&v45))
        return sub_23A03B334(a1, 2, v45, (_QWORD *)a2);
      return v2;
    case 0xC7uLL:
      ++a1[3];
      v15 = *a1;
      if (*a1 == a1[1])
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v17 = *((_BYTE *)a1 + 16);
      ++a1[3];
      v18 = *a1;
      if (*a1 == a1[1])
      {
        v19 = -1;
      }
      else
      {
        v19 = *v18;
        *a1 = v18 + 1;
      }
      a1[2] = (unsigned __int8 *)v19;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v20 = a1[2];
      if (!sub_23A03B5AC(a1, 2, v17, (_QWORD *)a2))
        return 0;
      goto LABEL_43;
    case 0xC8uLL:
      ++a1[3];
      v21 = *a1;
      if (*a1 == a1[1])
      {
        v22 = -1;
      }
      else
      {
        v22 = *v21;
        *a1 = v21 + 1;
      }
      a1[2] = (unsigned __int8 *)v22;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v23 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      v24 = *a1;
      if (*a1 == a1[1])
      {
        v25 = -1;
      }
      else
      {
        v25 = *v24;
        *a1 = v24 + 1;
      }
      a1[2] = (unsigned __int8 *)v25;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      if (*((_BYTE *)a1 + 32))
        v26 = v23;
      else
        v26 = *((unsigned __int8 *)a1 + 16);
      if (*((_BYTE *)a1 + 32))
        LOBYTE(v23) = *((_BYTE *)a1 + 16);
      ++a1[3];
      v27 = *a1;
      if (*a1 == a1[1])
      {
        v28 = -1;
      }
      else
      {
        v28 = *v27;
        *a1 = v27 + 1;
      }
      a1[2] = (unsigned __int8 *)v28;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v29 = v23 | (unsigned __int16)(v26 << 8);
      v20 = a1[2];
      if (!sub_23A03B5AC(a1, 2, v29, (_QWORD *)a2))
        return 0;
LABEL_43:
      *(_BYTE *)(a2 + 24) = (_BYTE)v20;
      goto LABEL_76;
    case 0xC9uLL:
      v44 = 0;
      v2 = 0;
      if (!sub_23A039B10(a1, 2, (int *)&v44))
        return v2;
      ++a1[3];
      v30 = *a1;
      if (*a1 == a1[1])
      {
        v31 = -1;
      }
      else
      {
        v31 = *v30;
        *a1 = v30 + 1;
      }
      a1[2] = (unsigned __int8 *)v31;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v32 = a1[2];
      if (!sub_23A03B334(a1, 2, v44, (_QWORD *)a2))
        return 0;
LABEL_75:
      *(_BYTE *)(a2 + 24) = (_BYTE)v32;
LABEL_76:
      *(_BYTE *)(a2 + 25) = 1;
      return 1;
    case 0xD4uLL:
      ++a1[3];
      v33 = *a1;
      if (*a1 == a1[1])
      {
        v34 = -1;
      }
      else
      {
        v34 = *v33;
        *a1 = v33 + 1;
      }
      a1[2] = (unsigned __int8 *)v34;
      if (!sub_23A03685C(a1, 2, "number"))
        return 0;
      v35 = a1[2];
      if (!sub_23A038D1C(a1, 2, 1, (_QWORD *)a2))
        return 0;
      *(_BYTE *)(a2 + 24) = (_BYTE)v35;
      goto LABEL_76;
    case 0xD5uLL:
      ++a1[3];
      v36 = *a1;
      if (*a1 == a1[1])
      {
        v37 = -1;
      }
      else
      {
        v37 = *v36;
        *a1 = v36 + 1;
      }
      a1[2] = (unsigned __int8 *)v37;
      if (sub_23A03685C(a1, 2, "number"))
      {
        v32 = a1[2];
        if (sub_23A038D1C(a1, 2, 2, (_QWORD *)a2))
          goto LABEL_75;
      }
      return 0;
    case 0xD6uLL:
      ++a1[3];
      v38 = *a1;
      if (*a1 == a1[1])
      {
        v39 = -1;
      }
      else
      {
        v39 = *v38;
        *a1 = v38 + 1;
      }
      a1[2] = (unsigned __int8 *)v39;
      if (sub_23A03685C(a1, 2, "number"))
      {
        v32 = a1[2];
        if (sub_23A038D1C(a1, 2, 4, (_QWORD *)a2))
          goto LABEL_75;
      }
      return 0;
    case 0xD7uLL:
      ++a1[3];
      v40 = *a1;
      if (*a1 == a1[1])
      {
        v41 = -1;
      }
      else
      {
        v41 = *v40;
        *a1 = v40 + 1;
      }
      a1[2] = (unsigned __int8 *)v41;
      if (sub_23A03685C(a1, 2, "number"))
      {
        v32 = a1[2];
        if (sub_23A038D1C(a1, 2, 8, (_QWORD *)a2))
          goto LABEL_75;
      }
      return 0;
    case 0xD8uLL:
      ++a1[3];
      v42 = *a1;
      if (*a1 == a1[1])
      {
        v43 = -1;
      }
      else
      {
        v43 = *v42;
        *a1 = v42 + 1;
      }
      a1[2] = (unsigned __int8 *)v43;
      if (sub_23A03685C(a1, 2, "number"))
      {
        v32 = a1[2];
        if (sub_23A038D1C(a1, 2, 16, (_QWORD *)a2))
          goto LABEL_75;
      }
      return 0;
    default:
      return v2;
  }
}

uint64_t sub_23A03CE80(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::string::size_type v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 **v10;
  double v11;
  unsigned __int8 *v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 **v22;
  std::string::size_type v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  size_t v29;
  size_t v30;
  void **p_dst;
  uint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *exception;
  void *v47[2];
  char v48;
  void *v49[2];
  unint64_t v50;
  std::string v51;
  std::string __p;
  uint64_t v53;
  void **__dst;
  size_t v55;
  int64_t v56;

  switch(a2)
  {
    case -1:
      return sub_23A03685C((_QWORD *)a1, 3, "value");
    case 67:
      ++*(_QWORD *)(a1 + 24);
      v19 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v20 = -1;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a1 = v19 + 1;
      }
      *(_QWORD *)(a1 + 16) = v20;
      if (!sub_23A03685C((_QWORD *)a1, 3, "char"))
        return 0;
      v21 = *(_QWORD *)(a1 + 16);
      if (v21 < 0x80)
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
        LOWORD(__p.__r_.__value_.__l.__data_) = v21;
        sub_23A038610(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 1;
      }
      sub_23A035958(a1, &__dst);
      v44 = *(_QWORD *)(a1 + 40);
      v45 = *(_QWORD *)(a1 + 24);
      std::operator+<char>();
      sub_239FEE1FC(v47, "char");
      sub_23A035DF4(3, (uint64_t)v49, (uint64_t)v47, &v51);
      sub_23A035A34(113, v45, (uint64_t)&v51, (uint64_t)&__p);
      v9 = sub_23A035904(v44, v45, (uint64_t)&__dst, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
      std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        if ((v48 & 0x80000000) == 0)
        {
LABEL_91:
          if ((SHIBYTE(v50) & 0x80000000) == 0)
            goto LABEL_92;
          goto LABEL_96;
        }
      }
      else if ((v48 & 0x80000000) == 0)
      {
        goto LABEL_91;
      }
      operator delete(v47[0]);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_92:
        if ((SHIBYTE(v56) & 0x80000000) == 0)
          return v9;
LABEL_97:
        operator delete(__dst);
        return v9;
      }
LABEL_96:
      operator delete(v49[0]);
      if ((SHIBYTE(v56) & 0x80000000) == 0)
        return v9;
      goto LABEL_97;
    case 68:
      __dst = 0;
      v9 = sub_23A039CC4((unsigned __int8 **)a1, 3, (unint64_t *)&__dst);
      if (!(_DWORD)v9)
        return v9;
      v10 = *(unsigned __int8 ***)(a1 + 40);
      v11 = *(double *)&__dst;
      goto LABEL_12;
    case 70:
      v24 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_23A0393A0(v24, (unsigned __int8 *)&__p);
      return 1;
    case 72:
      return sub_23A03D7A0(a1);
    case 73:
      ++*(_QWORD *)(a1 + 24);
      v12 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v13 = -1;
      }
      else
      {
        v13 = *v12;
        *(_QWORD *)a1 = v12 + 1;
      }
      *(_QWORD *)(a1 + 16) = v13;
      if (!sub_23A03685C((_QWORD *)a1, 3, "number"))
        return 0;
      v14 = *(unsigned __int8 *)(a1 + 16);
      ++*(_QWORD *)(a1 + 24);
      v15 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v16 = -1;
      }
      else
      {
        v16 = *v15;
        *(_QWORD *)a1 = v15 + 1;
      }
      *(_QWORD *)(a1 + 16) = v16;
      if (!sub_23A03685C((_QWORD *)a1, 3, "number"))
        return 0;
      v17 = *(_BYTE *)(a1 + 16);
      if (*(_BYTE *)(a1 + 32))
        v18 = v14;
      else
        v18 = *(unsigned __int8 *)(a1 + 16);
      if (!*(_BYTE *)(a1 + 32))
        v17 = v14;
      v7 = *(unsigned __int8 ***)(a1 + 40);
      v6 = (__int16)(v17 | (unsigned __int16)(v18 << 8));
      goto LABEL_25;
    case 76:
      __dst = 0;
      v9 = sub_23A039CC4((unsigned __int8 **)a1, 3, (unint64_t *)&__dst);
      if (!(_DWORD)v9)
        return v9;
      v22 = *(unsigned __int8 ***)(a1 + 40);
      v23 = (std::string::size_type)__dst;
      goto LABEL_42;
    case 83:
      memset(&__p, 0, sizeof(__p));
      v9 = sub_23A03DF78((unsigned __int8 **)a1, &__p, 1);
      if ((_DWORD)v9)
        sub_23A038610(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return v9;
    case 84:
      v28 = *(unsigned __int8 ***)(a1 + 40);
      v9 = 1;
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_23A0393A0(v28, (unsigned __int8 *)&__p);
      return v9;
    case 85:
      ++*(_QWORD *)(a1 + 24);
      v25 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v26 = -1;
      }
      else
      {
        v26 = *v25;
        *(_QWORD *)a1 = v25 + 1;
      }
      *(_QWORD *)(a1 + 16) = v26;
      if (!sub_23A03685C((_QWORD *)a1, 3, "number"))
        return 0;
      v27 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = *(unsigned __int8 *)(a1 + 16);
      sub_23A03B0F4(v27, (uint64_t *)&__p);
      return 1;
    case 90:
      v8 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = 0;
      sub_23A0395E0(v8);
      return 1;
    case 91:
      return sub_23A03E784((unsigned __int8 **)a1);
    case 100:
      LODWORD(__dst) = 0;
      v9 = sub_23A039B10((unsigned __int8 **)a1, 3, (int *)&__dst);
      if (!(_DWORD)v9)
        return v9;
      v10 = *(unsigned __int8 ***)(a1 + 40);
      v11 = *(float *)&__dst;
LABEL_12:
      *(double *)&__p.__r_.__value_.__l.__data_ = v11;
      sub_23A0383D0(v10, (uint64_t *)&__p);
      return v9;
    case 105:
      ++*(_QWORD *)(a1 + 24);
      v4 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v5 = -1;
      }
      else
      {
        v5 = *v4;
        *(_QWORD *)a1 = v4 + 1;
      }
      *(_QWORD *)(a1 + 16) = v5;
      if (!sub_23A03685C((_QWORD *)a1, 3, "number"))
        return 0;
      v6 = *(char *)(a1 + 16);
      v7 = *(unsigned __int8 ***)(a1 + 40);
LABEL_25:
      __p.__r_.__value_.__r.__words[0] = v6;
      sub_23A0397F8(v7, (uint64_t *)&__p);
      return 1;
    case 108:
      LODWORD(__dst) = 0;
      v9 = sub_23A039B10((unsigned __int8 **)a1, 3, (int *)&__dst);
      if (!(_DWORD)v9)
        return v9;
      v22 = *(unsigned __int8 ***)(a1 + 40);
      v23 = (int)__dst;
LABEL_42:
      __p.__r_.__value_.__r.__words[0] = v23;
      sub_23A0397F8(v22, (uint64_t *)&__p);
      return v9;
    case 123:
      return sub_23A03E904(a1);
    default:
      __p.__r_.__value_.__s.__data_[2] = 0;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      snprintf((char *)&__p, 3uLL, "%.2hhX", *(unsigned __int8 *)(a1 + 16));
      v29 = strlen((const char *)&__p);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v30 = v29;
      if (v29 >= 0x17)
      {
        v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v32 = v29 | 7;
        v33 = v32 + 1;
        p_dst = (void **)operator new(v32 + 1);
        v55 = v30;
        v56 = v33 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v56) = v29;
        p_dst = (void **)&__dst;
        if (!v29)
          goto LABEL_59;
      }
      memcpy(p_dst, &__p, v30);
LABEL_59:
      *((_BYTE *)p_dst + v30) = 0;
      v34 = SHIBYTE(v56);
      if (v56 >= 0)
        v35 = HIBYTE(v56);
      else
        v35 = v55;
      v36 = v35 + 16;
      if (v35 + 16 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v37 = *(_QWORD *)(a1 + 40);
      v38 = *(_QWORD *)(a1 + 24);
      if (v36 >= 0x17)
      {
        v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v40 = v36 | 7;
        v41 = v40 + 1;
        v42 = (unint64_t *)operator new(v40 + 1);
        v49[1] = (void *)(v35 + 16);
        v50 = v41 | 0x8000000000000000;
        v49[0] = v42;
        *(_OWORD *)v42 = *(_OWORD *)"invalid byte: 0x";
        v39 = v42 + 2;
      }
      else
      {
        v39 = &v50;
        v50 = 0;
        HIBYTE(v50) = v35 + 16;
        *(_OWORD *)v49 = *(_OWORD *)"invalid byte: 0x";
        if (!v35)
          goto LABEL_73;
      }
      if (v34 >= 0)
        v43 = (void **)&__dst;
      else
        v43 = __dst;
      memmove(v39, v43, v35);
LABEL_73:
      *((_BYTE *)v39 + v35) = 0;
      v48 = 5;
      strcpy((char *)v47, "value");
      sub_23A035DF4(3, (uint64_t)v49, (uint64_t)v47, &v51);
      sub_23A035A34(112, v38, (uint64_t)&v51, (uint64_t)&__p);
      *(_BYTE *)(v37 + 40) = 1;
      if (*(_BYTE *)(v37 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)exception = &off_250B0DDA0;
        exception[2] = __p.__r_.__value_.__r.__words[1];
        MEMORY[0x23B83FB10](exception + 4, &__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)exception = &off_250B0DD50;
        *((_QWORD *)exception + 4) = v53;
        __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250B0DDA0;
      std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        if ((v48 & 0x80000000) == 0)
        {
LABEL_76:
          if ((SHIBYTE(v50) & 0x80000000) == 0)
            goto LABEL_77;
          goto LABEL_82;
        }
      }
      else if ((v48 & 0x80000000) == 0)
      {
        goto LABEL_76;
      }
      operator delete(v47[0]);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_77:
        if ((v34 & 0x80000000) == 0)
          return 0;
        goto LABEL_83;
      }
LABEL_82:
      operator delete(v49[0]);
      if ((v34 & 0x80000000) == 0)
        return 0;
LABEL_83:
      operator delete(__dst);
      return 0;
  }
}

void sub_23A03D640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::runtime_error *v33;
  uint64_t v34;

  a28.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v34 - 65) & 0x80000000) == 0)
LABEL_11:
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(*(void **)(v34 - 88));
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a16);
  if ((*(char *)(v34 - 65) & 0x80000000) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t sub_23A03D7A0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  lconv *v28;
  int v29;
  int v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  void *v39;
  uint64_t v41;
  unint64_t v42;
  _DWORD *exception;
  void *v44[3];
  std::string v45;
  std::string v46;
  std::string v47;
  std::exception v48;
  int v49;
  std::runtime_error v50;
  uint64_t v51;
  std::string v52;
  _QWORD v53[2];
  char v54;
  int v55;
  char v56;
  __int128 v57;
  void *__p[2];
  __int128 v59;
  void *v60[2];
  uint64_t v61;
  const char *v62;
  std::exception_vtbl *v63;
  std::exception_vtbl *v64;
  std::exception_vtbl *v65;
  int v66;
  unint64_t v67;
  _BYTE *v68;
  char *v69;
  unint64_t v70;

  v70 = 0;
  if (!sub_23A03EC90((unsigned __int8 **)a1, &v70))
    return 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (!v70)
  {
    v2 = 0;
    v27 = 0;
LABEL_45:
    v53[0] = v27;
    v53[1] = v2;
    v54 = 0;
    v55 = -1;
    v56 = 0;
    v57 = 0u;
    *(_OWORD *)__p = 0u;
    v59 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0;
    v62 = "";
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v28 = localeconv();
    if (v28->decimal_point)
      v29 = *v28->decimal_point;
    else
      v29 = 46;
    v66 = v29;
    v30 = sub_23A03F1E8((uint64_t)v53);
    sub_23A03F474((uint64_t)v53, &v52);
    if (sub_23A03F1E8((uint64_t)v53) == 15)
    {
      switch(v30)
      {
        case 5:
          v33 = *(unsigned __int8 ***)(a1 + 40);
          v48.__vftable = v64;
          sub_23A03B0F4(v33, (uint64_t *)&v48);
          goto LABEL_55;
        case 7:
          v32 = *(unsigned __int8 ***)(a1 + 40);
          v48.__vftable = v65;
          sub_23A0383D0(v32, (uint64_t *)&v48);
          goto LABEL_55;
        case 6:
          v31 = *(unsigned __int8 ***)(a1 + 40);
          v48.__vftable = v63;
          sub_23A0397F8(v31, (uint64_t *)&v48);
LABEL_55:
          v34 = 1;
          goto LABEL_62;
      }
      v35 = *(_QWORD *)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 24);
      sub_23A03F474((uint64_t)v53, &v45);
      v37 = std::string::insert(&v45, 0, "invalid number text: ", 0x15uLL);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      HIBYTE(v44[2]) = 21;
      strcpy((char *)v44, "high-precision number");
      sub_23A035DF4(3, (uint64_t)&v46, (uint64_t)v44, &v47);
      sub_23A035A34(115, v36, (uint64_t)&v47, (uint64_t)&v48);
      *(_BYTE *)(v35 + 40) = 1;
      if (*(_BYTE *)(v35 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)exception = &off_250B0DDA0;
        exception[2] = v49;
        MEMORY[0x23B83FB10](exception + 4, &v50);
        *(_QWORD *)exception = &off_250B0DD50;
        *((_QWORD *)exception + 4) = v51;
        __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
      }
      v48.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
      std::runtime_error::~runtime_error(&v50);
      std::exception::~exception(&v48);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
        {
LABEL_59:
          if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_60;
          goto LABEL_74;
        }
      }
      else if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(v44[0]);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_61:
          v34 = 0;
          goto LABEL_62;
        }
LABEL_75:
        operator delete(v45.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
LABEL_74:
      operator delete(v46.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_75;
    }
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 24);
    sub_23A03F474((uint64_t)v53, &v45);
    sub_239FEEC54("invalid number text: ", &v45, &v46);
    sub_239FEE1FC(v44, "high-precision number");
    sub_23A035DF4(3, (uint64_t)&v46, (uint64_t)v44, &v47);
    sub_23A035A34(115, v42, (uint64_t)&v47, (uint64_t)&v48);
    v34 = sub_23A035904(v41, v42, (uint64_t)&v52, (uint64_t)&v48);
    v48.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
    std::runtime_error::~runtime_error(&v50);
    std::exception::~exception(&v48);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v47.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
      {
LABEL_81:
        if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_82;
        goto LABEL_86;
      }
    }
    else if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
      goto LABEL_81;
    }
    operator delete(v44[0]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_62;
LABEL_87:
      operator delete(v45.__r_.__value_.__l.__data_);
LABEL_62:
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v61) & 0x80000000) == 0)
        {
LABEL_64:
          v39 = __p[1];
          if (!__p[1])
            goto LABEL_66;
          goto LABEL_65;
        }
      }
      else if ((SHIBYTE(v61) & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(v60[0]);
      v39 = __p[1];
      if (!__p[1])
      {
LABEL_66:
        if (v27)
          goto LABEL_67;
        return v34;
      }
LABEL_65:
      *(_QWORD *)&v59 = v39;
      operator delete(v39);
      goto LABEL_66;
    }
LABEL_86:
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_87;
  }
  v2 = 0;
  v3 = 0;
  while (1)
  {
    ++*(_QWORD *)(a1 + 24);
    v4 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      v5 = -1;
    }
    else
    {
      v5 = *v4;
      *(_QWORD *)a1 = v4 + 1;
    }
    *(_QWORD *)(a1 + 16) = v5;
    if ((sub_23A03685C((_QWORD *)a1, 3, "number") & 1) == 0)
      break;
    v6 = *(_BYTE *)(a1 + 16);
    if (v2 < v69)
    {
      *v2++ = v6;
      v68 = v2;
      if (++v3 >= v70)
        goto LABEL_43;
    }
    else
    {
      v7 = v67;
      v8 = (unint64_t)&v2[-v67];
      v9 = (uint64_t)&v2[-v67 + 1];
      if (v9 < 0)
        sub_239FEBE68();
      v10 = (unint64_t)&v69[-v67];
      if (2 * (uint64_t)&v69[-v67] > (unint64_t)v9)
        v9 = 2 * v10;
      if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (int64_t)operator new(v11);
        v13 = (char *)(v12 + v8);
        *(_BYTE *)(v12 + v8) = v6;
        v14 = v12 + v8 + 1;
        if (v2 != (char *)v7)
          goto LABEL_17;
      }
      else
      {
        v12 = 0;
        v13 = &v2[-v67];
        *(_BYTE *)v8 = v6;
        v14 = v8 + 1;
        if (v2 != (char *)v7)
        {
LABEL_17:
          if (v8 < 8 || v12 + v8 + v7 - (_QWORD)v2 > v12 + v8 - 1 || v7 > (unint64_t)(v2 - 1) || v7 - v12 < 0x20)
          {
            v15 = v2;
          }
          else if (v8 >= 0x20)
          {
            v18 = v8 & 0xFFFFFFFFFFFFFFE0;
            v19 = (_OWORD *)(v12 + v8 - 16);
            v20 = (__int128 *)(v2 - 16);
            v21 = v8 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v22 = *v20;
              *(v19 - 1) = *(v20 - 1);
              *v19 = v22;
              v19 -= 2;
              v20 -= 2;
              v21 -= 32;
            }
            while (v21);
            if (v8 == v18)
              goto LABEL_21;
            if ((v8 & 0x18) != 0)
              goto LABEL_37;
            v13 -= v18;
            v15 = &v2[-v18];
          }
          else
          {
            v18 = 0;
LABEL_37:
            v15 = &v2[-(v8 & 0xFFFFFFFFFFFFFFF8)];
            v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
            v23 = &v2[-v18 - v7 - 8 + v12];
            v24 = (uint64_t *)&v2[-v18 - 8];
            v25 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v26 = *v24--;
              *(_QWORD *)v23 = v26;
              v23 -= 8;
              v25 += 8;
            }
            while (v25);
            if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_21:
              v2 = (char *)v67;
              v67 = v12;
              v68 = (_BYTE *)v14;
              v69 = (char *)(v12 + v11);
              if (!v2)
                goto LABEL_26;
LABEL_25:
              operator delete(v2);
              goto LABEL_26;
            }
          }
          v16 = v13 - 1;
          do
          {
            v17 = *--v15;
            *v16-- = v17;
          }
          while (v15 != (char *)v7);
          goto LABEL_21;
        }
      }
      v67 = (unint64_t)v13;
      v68 = (_BYTE *)v14;
      v69 = (char *)(v12 + v11);
      if (v2)
        goto LABEL_25;
LABEL_26:
      v2 = (char *)v14;
      v68 = (_BYTE *)v14;
      if (++v3 >= v70)
      {
LABEL_43:
        v27 = (_BYTE *)v67;
        goto LABEL_45;
      }
    }
  }
  v34 = 0;
  v27 = (_BYTE *)v67;
  if (!v67)
    return v34;
LABEL_67:
  v68 = v27;
  operator delete(v27);
  return v34;
}

void sub_23A03DE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::exception a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  std::runtime_error *v45;
  uint64_t v46;
  void *v48;

  a34.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v45 + 1);
  std::exception::~exception(&a34);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    if (a26 < 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(a9);
  if (a26 < 0)
  {
LABEL_4:
    operator delete(a21);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_12:
      sub_23A03F564((uint64_t)&a45);
      v48 = *(void **)(v46 - 120);
      if (v48)
      {
        *(_QWORD *)(v46 - 112) = v48;
        operator delete(v48);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a39);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a15);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

BOOL sub_23A03DF78(unsigned __int8 **a1, std::string *a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  size_t v21;
  size_t v22;
  void **p_dst;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  size_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  void **v55;
  _DWORD *exception;
  void *v58[2];
  char v59;
  _BYTE v60[65];
  _BYTE v61[23];
  void **__dst;
  size_t v63;
  int64_t v64;

  if (a3)
  {
    ++a1[3];
    v5 = *a1;
    if (*a1 == a1[1])
    {
      v6 = -1;
    }
    else
    {
      v6 = *v5;
      *a1 = v5 + 1;
    }
    a1[2] = (unsigned __int8 *)v6;
  }
  if (sub_23A03685C(a1, 3, "value"))
  {
    v7 = a1[2];
    switch((unint64_t)v7)
    {
      case 'I':
        ++a1[3];
        v8 = *a1;
        if (*a1 == a1[1])
        {
          v9 = -1;
        }
        else
        {
          v9 = *v8;
          *a1 = v8 + 1;
        }
        a1[2] = (unsigned __int8 *)v9;
        if (!sub_23A03685C(a1, 3, "number"))
          break;
        v10 = *((unsigned __int8 *)a1 + 16);
        ++a1[3];
        v11 = *a1;
        if (*a1 == a1[1])
        {
          v12 = -1;
        }
        else
        {
          v12 = *v11;
          *a1 = v11 + 1;
        }
        a1[2] = (unsigned __int8 *)v12;
        if (!sub_23A03685C(a1, 3, "number"))
          break;
        v13 = *((_BYTE *)a1 + 16);
        if (*((_BYTE *)a1 + 32))
          v14 = v10;
        else
          v14 = *((unsigned __int8 *)a1 + 16);
        if (!*((_BYTE *)a1 + 32))
          v13 = v10;
        v15 = (__int16)(v13 | (unsigned __int16)(v14 << 8));
        if (v15 < 1)
          return 1;
        LOWORD(v16) = 0;
        do
        {
          ++a1[3];
          v17 = *a1;
          if (*a1 == a1[1])
          {
            v18 = -1;
          }
          else
          {
            v18 = *v17;
            *a1 = v17 + 1;
          }
          a1[2] = (unsigned __int8 *)v18;
          v19 = sub_23A03685C(a1, 3, "string");
          v20 = v19;
          if (!v19)
            break;
          std::string::push_back(a2, *((_BYTE *)a1 + 16));
          v16 = (__int16)(v16 + 1);
        }
        while (v16 < v15);
        return v20;
      case 'L':
        *(_QWORD *)&v60[48] = 0;
        if (!sub_23A039CC4(a1, 3, (unint64_t *)&v60[48]))
          break;
        v31 = *(_QWORD *)&v60[48];
        if (*(uint64_t *)&v60[48] < 1)
          return 1;
        v20 = 0;
        v32 = 0;
        while (2)
        {
          ++a1[3];
          v33 = *a1;
          if (*a1 != a1[1])
          {
            v34 = (unsigned __int8 *)*v33;
            *a1 = v33 + 1;
            a1[2] = v34;
            if (!sub_23A03685C(a1, 3, "string"))
              return v20;
LABEL_46:
            std::string::push_back(a2, *((_BYTE *)a1 + 16));
            v20 = ++v32 >= v31;
            if (v31 == v32)
              return v20;
            continue;
          }
          break;
        }
        a1[2] = (unsigned __int8 *)-1;
        if (sub_23A03685C(a1, 3, "string"))
          goto LABEL_46;
        return v20;
      case 'U':
        ++a1[3];
        v24 = *a1;
        if (*a1 == a1[1])
        {
          v25 = -1;
        }
        else
        {
          v25 = *v24;
          *a1 = v24 + 1;
        }
        a1[2] = (unsigned __int8 *)v25;
        if (!sub_23A03685C(a1, 3, "number"))
          break;
        v26 = *((unsigned __int8 *)a1 + 16);
        if (!*((_BYTE *)a1 + 16))
          return 1;
        v27 = 0;
        do
        {
          ++a1[3];
          v28 = *a1;
          if (*a1 == a1[1])
          {
            v29 = -1;
          }
          else
          {
            v29 = *v28;
            *a1 = v28 + 1;
          }
          a1[2] = (unsigned __int8 *)v29;
          v30 = sub_23A03685C(a1, 3, "string");
          v20 = v30;
          if (!v30)
            break;
          std::string::push_back(a2, *((_BYTE *)a1 + 16));
          ++v27;
        }
        while (v27 < v26);
        return v20;
      case 'i':
        ++a1[3];
        v35 = *a1;
        if (*a1 == a1[1])
        {
          v36 = -1;
        }
        else
        {
          v36 = *v35;
          *a1 = v35 + 1;
        }
        a1[2] = (unsigned __int8 *)v36;
        if (!sub_23A03685C(a1, 3, "number"))
          break;
        v37 = *((char *)a1 + 16);
        if (v37 < 1)
          return 1;
        LOBYTE(v38) = 0;
        do
        {
          ++a1[3];
          v39 = *a1;
          if (*a1 == a1[1])
          {
            v40 = -1;
          }
          else
          {
            v40 = *v39;
            *a1 = v39 + 1;
          }
          a1[2] = (unsigned __int8 *)v40;
          v41 = sub_23A03685C(a1, 3, "string");
          v20 = v41;
          if (!v41)
            break;
          std::string::push_back(a2, *((_BYTE *)a1 + 16));
          v38 = (char)(v38 + 1);
        }
        while (v38 < v37);
        return v20;
      case 'l':
        *(_DWORD *)&v60[48] = 0;
        v20 = 0;
        if (!sub_23A039B10(a1, 3, (int *)&v60[48]))
          return v20;
        v42 = *(_DWORD *)&v60[48];
        if (*(int *)&v60[48] >= 1)
        {
          v20 = 0;
          v43 = 0;
          while (1)
          {
            ++a1[3];
            v44 = *a1;
            if (*a1 == a1[1])
            {
              a1[2] = (unsigned __int8 *)-1;
              if (!sub_23A03685C(a1, 3, "string"))
                return v20;
            }
            else
            {
              v45 = (unsigned __int8 *)*v44;
              *a1 = v44 + 1;
              a1[2] = v45;
              if (!sub_23A03685C(a1, 3, "string"))
                return v20;
            }
            std::string::push_back(a2, *((_BYTE *)a1 + 16));
            v20 = ++v43 >= v42;
            if (v42 == v43)
              return v20;
          }
        }
        return 1;
      default:
        v60[50] = 0;
        *(_WORD *)&v60[48] = 0;
        snprintf(&v60[48], 3uLL, "%.2hhX", v7);
        v21 = strlen(&v60[48]);
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_239FEBDE0();
        v22 = v21;
        if (v21 >= 0x17)
        {
          v46 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v46 = v21 | 7;
          v47 = v46 + 1;
          p_dst = (void **)operator new(v46 + 1);
          v63 = v22;
          v64 = v47 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v64) = v21;
          p_dst = (void **)&__dst;
          if (!v21)
          {
LABEL_75:
            *((_BYTE *)p_dst + v22) = 0;
            v48 = SHIBYTE(v64);
            if (v64 >= 0)
              v49 = HIBYTE(v64);
            else
              v49 = v63;
            v50 = v49 + 65;
            if (v49 + 65 > 0x7FFFFFFFFFFFFFF7)
              sub_239FEBDE0();
            v51 = a1[5];
            v52 = (unint64_t)a1[3];
            if (v50 > 0x16)
            {
              v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17)
                v54 = v50 | 7;
              *(_QWORD *)&v60[8] = v49 + 65;
              *(_QWORD *)&v60[16] = (v54 + 1) | 0x8000000000000000;
              *(_QWORD *)v60 = operator new(v54 + 1);
              qmemcpy(*(void **)v60, "expected length type specification (U, i, I, l, L); last byte: 0x", 65);
              v53 = (_BYTE *)(*(_QWORD *)v60 + 65);
              if (!v49)
              {
LABEL_88:
                v53[v49] = 0;
                v59 = 6;
                strcpy((char *)v58, "string");
                sub_23A035DF4(3, (uint64_t)v60, (uint64_t)v58, (std::string *)&v60[24]);
                sub_23A035A34(113, v52, (uint64_t)&v60[24], (uint64_t)&v60[48]);
                v51[40] = 1;
                if (v51[41])
                {
                  exception = __cxa_allocate_exception(0x28uLL);
                  *(_QWORD *)exception = &off_250B0DDA0;
                  exception[2] = *(_DWORD *)&v60[56];
                  MEMORY[0x23B83FB10](exception + 4, &v60[64]);
                  *(_QWORD *)exception = &off_250B0DD50;
                  *((_QWORD *)exception + 4) = *(_QWORD *)&v61[15];
                  __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
                }
                *(_QWORD *)&v60[48] = &off_250B0DDA0;
                std::runtime_error::~runtime_error((std::runtime_error *)&v60[64]);
                std::exception::~exception((std::exception *)&v60[48]);
                if ((v60[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v60[24]);
                  if ((v59 & 0x80000000) == 0)
                  {
LABEL_91:
                    if ((v60[23] & 0x80000000) == 0)
                      goto LABEL_92;
                    goto LABEL_97;
                  }
                }
                else if ((v59 & 0x80000000) == 0)
                {
                  goto LABEL_91;
                }
                operator delete(v58[0]);
                if ((v60[23] & 0x80000000) == 0)
                {
LABEL_92:
                  if ((v48 & 0x80000000) == 0)
                    break;
LABEL_98:
                  operator delete(__dst);
                  break;
                }
LABEL_97:
                operator delete(*(void **)v60);
                if ((v48 & 0x80000000) == 0)
                  break;
                goto LABEL_98;
              }
            }
            else
            {
              qmemcpy(v60, "expected length type specification (U, i, I, l, L); last byte: 0x", sizeof(v60));
              v53 = v61;
            }
            if (v48 >= 0)
              v55 = (void **)&__dst;
            else
              v55 = __dst;
            memmove(v53, v55, v49);
            goto LABEL_88;
          }
        }
        memcpy(p_dst, &v60[48], v22);
        goto LABEL_75;
    }
  }
  return 0;
}

void sub_23A03E6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  std::runtime_error *v28;
  int v29;
  uint64_t v30;

  std::runtime_error::~runtime_error(v28);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (v29 < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (v29 < 0)
  {
LABEL_7:
    operator delete(*(void **)(v30 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

uint64_t sub_23A03E784(unsigned __int8 **a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_23A0413C8((uint64_t)a1, &v15);
  if ((_DWORD)result)
  {
    v3 = (uint64_t)a1[5];
    if (v15 == -1)
    {
      result = sub_23A038A08(v3, 0xFFFFFFFFFFFFFFFFLL);
      if (!(_DWORD)result)
        return result;
      v9 = (uint64_t)a1[2];
LABEL_18:
      while (v9 != 93)
      {
        result = sub_23A03CE80(a1);
        if (!(_DWORD)result)
          return result;
        v11 = *a1;
        v10 = a1[1];
        v12 = (uint64_t)(a1[3] + 1);
        while (1)
        {
          a1[3] = (unsigned __int8 *)v12;
          if (v11 == v10)
            break;
          v13 = *v11++;
          v9 = v13;
          *a1 = v11;
          a1[2] = (unsigned __int8 *)v13;
          ++v12;
          if (v13 != 78)
            goto LABEL_18;
        }
        v9 = -1;
        a1[2] = (unsigned __int8 *)-1;
      }
      goto LABEL_29;
    }
    result = sub_23A038A08(v3, v15);
    if (!(_DWORD)result)
      return result;
    if (v16 == 78)
      goto LABEL_29;
    if (!v16)
    {
      if (v15)
      {
        v4 = 0;
        while (2)
        {
          v6 = *a1;
          v5 = a1[1];
          v7 = (uint64_t)(a1[3] + 1);
          while (1)
          {
            a1[3] = (unsigned __int8 *)v7;
            if (v6 == v5)
              break;
            v8 = *v6++;
            *a1 = v6;
            a1[2] = (unsigned __int8 *)v8;
            ++v7;
            if (v8 != 78)
            {
              if ((sub_23A03CE80(a1) & 1) == 0)
                return 0;
              goto LABEL_12;
            }
          }
          a1[2] = (unsigned __int8 *)-1;
          if ((sub_23A03CE80(a1) & 1) == 0)
            return 0;
LABEL_12:
          if (++v4 < v15)
            continue;
          break;
        }
      }
      goto LABEL_29;
    }
    if (!v15)
    {
LABEL_29:
      *((_QWORD *)a1[5] + 2) -= 8;
      return 1;
    }
    v14 = 0;
    while ((sub_23A03CE80(a1) & 1) != 0)
    {
      if (++v14 >= v15)
        goto LABEL_29;
    }
    return 0;
  }
  return result;
}

uint64_t sub_23A03E904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  std::string __p;
  unint64_t v27;
  uint64_t v28;
  std::string *p_p;

  v27 = 0;
  v28 = 0;
  if (!sub_23A0413C8(a1, &v27))
    return 0;
  memset(&__p, 0, sizeof(__p));
  v2 = *(_QWORD *)(a1 + 40);
  if (v27 != -1)
  {
    if ((sub_23A0362CC(v2, v27) & 1) != 0)
    {
      if (v28)
      {
        if (!v27)
          goto LABEL_43;
        v3 = 0;
        while (sub_23A03DF78((unsigned __int8 **)a1, &__p, 1))
        {
          v4 = *(_QWORD *)(a1 + 40);
          v5 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v4 + 16) - 8) + 8);
          p_p = &__p;
          *(_QWORD *)(v4 + 32) = sub_23A0378AC(v5, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
          if (!sub_23A03CE80(a1))
            break;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
            if (++v3 >= v27)
              goto LABEL_43;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            if (++v3 >= v27)
              goto LABEL_43;
          }
        }
      }
      else
      {
        if (!v27)
          goto LABEL_43;
        v17 = 0;
        while (sub_23A03DF78((unsigned __int8 **)a1, &__p, 1))
        {
          v18 = *(_QWORD *)(a1 + 40);
          v19 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v18 + 16) - 8) + 8);
          p_p = &__p;
          *(_QWORD *)(v18 + 32) = sub_23A0378AC(v19, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
          v21 = *(unsigned __int8 **)a1;
          v20 = *(unsigned __int8 **)(a1 + 8);
          v22 = *(_QWORD *)(a1 + 24) + 1;
          while (1)
          {
            *(_QWORD *)(a1 + 24) = v22;
            if (v21 == v20)
              break;
            v23 = *v21++;
            *(_QWORD *)a1 = v21;
            *(_QWORD *)(a1 + 16) = v23;
            ++v22;
            if (v23 != 78)
              goto LABEL_38;
          }
          *(_QWORD *)(a1 + 16) = -1;
LABEL_38:
          if (!sub_23A03CE80(a1))
            break;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
            if (++v17 >= v27)
              goto LABEL_43;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            if (++v17 >= v27)
              goto LABEL_43;
          }
        }
      }
    }
    goto LABEL_46;
  }
  if (!sub_23A0362CC(v2, 0xFFFFFFFFFFFFFFFFLL))
    goto LABEL_46;
  if (*(_QWORD *)(a1 + 16) == 125)
    goto LABEL_43;
LABEL_17:
  while (2)
  {
    if (!sub_23A03DF78((unsigned __int8 **)a1, &__p, 0))
      goto LABEL_46;
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v6 + 16) - 8) + 8);
    p_p = &__p;
    *(_QWORD *)(v6 + 32) = sub_23A0378AC(v7, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_23A0A31B0, (__int128 **)&p_p)+ 7;
    v9 = *(unsigned __int8 **)a1;
    v8 = *(unsigned __int8 **)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 24) + 1;
    while (1)
    {
      *(_QWORD *)(a1 + 24) = v10;
      if (v9 == v8)
        break;
      v11 = *v9++;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 16) = v11;
      ++v10;
      if (v11 != 78)
        goto LABEL_21;
    }
    *(_QWORD *)(a1 + 16) = -1;
LABEL_21:
    if (!sub_23A03CE80(a1))
    {
LABEL_46:
      v24 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_44;
      return v24;
    }
    v13 = *(unsigned __int8 **)a1;
    v12 = *(unsigned __int8 **)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 24) + 1;
    do
    {
      *(_QWORD *)(a1 + 24) = v14;
      if (v13 == v12)
      {
        v15 = -1;
        *(_QWORD *)(a1 + 16) = -1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
LABEL_16:
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        if (*(_QWORD *)(a1 + 16) == 125)
          goto LABEL_43;
        goto LABEL_17;
      }
      v16 = *v13++;
      v15 = v16;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 16) = v16;
      ++v14;
    }
    while (v16 == 78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
LABEL_26:
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    if (v15 != 125)
      continue;
    break;
  }
LABEL_43:
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
  v24 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_44:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v24;
}

void sub_23A03EC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A03EC90(unsigned __int8 **a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  __int16 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  void **p_dst;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void **v31;
  _DWORD *exception;
  void *v33[2];
  char v34;
  _BYTE v35[75];
  _BYTE v36[13];
  void **__dst;
  size_t v38;
  int64_t v39;

  v4 = *a1;
  v5 = a1[1];
  v6 = (uint64_t)(a1[3] + 1);
  do
  {
    a1[3] = (unsigned __int8 *)v6;
    if (v4 == v5)
    {
      LOBYTE(v7) = -1;
      a1[2] = (unsigned __int8 *)-1;
LABEL_31:
      v35[50] = 0;
      *(_WORD *)&v35[48] = 0;
      snprintf(&v35[48], 3uLL, "%.2hhX", v7);
      v19 = strlen(&v35[48]);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        sub_239FEBDE0();
      v20 = v19;
      if (v19 >= 0x17)
      {
        v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v22 = v19 | 7;
        v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        v38 = v20;
        v39 = v23 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v39) = v19;
        p_dst = (void **)&__dst;
        if (!v19)
        {
LABEL_39:
          *((_BYTE *)p_dst + v20) = 0;
          v24 = SHIBYTE(v39);
          if (v39 >= 0)
            v25 = HIBYTE(v39);
          else
            v25 = v38;
          v26 = v25 + 75;
          if (v25 + 75 > 0x7FFFFFFFFFFFFFF7)
            sub_239FEBDE0();
          v27 = a1[5];
          v28 = (unint64_t)a1[3];
          if (v26 > 0x16)
          {
            v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v30 = v26 | 7;
            *(_QWORD *)&v35[8] = v25 + 75;
            *(_QWORD *)&v35[16] = (v30 + 1) | 0x8000000000000000;
            *(_QWORD *)v35 = operator new(v30 + 1);
            qmemcpy(*(void **)v35, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x", 75);
            v29 = (_BYTE *)(*(_QWORD *)v35 + 75);
            if (!v25)
            {
LABEL_52:
              v29[v25] = 0;
              v34 = 4;
              strcpy((char *)v33, "size");
              sub_23A035DF4(3, (uint64_t)v35, (uint64_t)v33, (std::string *)&v35[24]);
              sub_23A035A34(113, v28, (uint64_t)&v35[24], (uint64_t)&v35[48]);
              v27[40] = 1;
              if (v27[41])
              {
                exception = __cxa_allocate_exception(0x28uLL);
                *(_QWORD *)exception = &off_250B0DDA0;
                exception[2] = *(_DWORD *)&v35[56];
                MEMORY[0x23B83FB10](exception + 4, &v35[64]);
                *(_QWORD *)exception = &off_250B0DD50;
                *((_QWORD *)exception + 4) = *(_QWORD *)&v36[5];
                __cxa_throw(exception, (struct type_info *)&unk_250B0DA68, (void (*)(void *))sub_23A0360E8);
              }
              *(_QWORD *)&v35[48] = &off_250B0DDA0;
              std::runtime_error::~runtime_error((std::runtime_error *)&v35[64]);
              std::exception::~exception((std::exception *)&v35[48]);
              if ((v35[47] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v35[24]);
                if ((v34 & 0x80000000) == 0)
                {
LABEL_55:
                  if ((v35[23] & 0x80000000) == 0)
                    goto LABEL_56;
                  goto LABEL_61;
                }
              }
              else if ((v34 & 0x80000000) == 0)
              {
                goto LABEL_55;
              }
              operator delete(v33[0]);
              if ((v35[23] & 0x80000000) == 0)
              {
LABEL_56:
                if ((v24 & 0x80000000) == 0)
                  return 0;
LABEL_62:
                operator delete(__dst);
                return 0;
              }
LABEL_61:
              operator delete(*(void **)v35);
              if ((v24 & 0x80000000) == 0)
                return 0;
              goto LABEL_62;
            }
          }
          else
          {
            qmemcpy(v35, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x", sizeof(v35));
            v29 = v36;
          }
          if (v24 >= 0)
            v31 = (void **)&__dst;
          else
            v31 = __dst;
          memmove(v29, v31, v25);
          goto LABEL_52;
        }
      }
      memcpy(p_dst, &v35[48], v20);
      goto LABEL_39;
    }
    v8 = *v4++;
    v7 = v8;
    *a1 = v4;
    a1[2] = (unsigned __int8 *)v8;
    ++v6;
  }
  while (v8 == 78);
  switch(v7)
  {
    case 'I':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        v9 = -1;
      }
      else
      {
        v9 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v9;
      result = sub_23A03685C(a1, 3, "number");
      if (!(_DWORD)result)
        return result;
      v11 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      v12 = *a1;
      if (*a1 == a1[1])
      {
        v13 = -1;
      }
      else
      {
        v13 = *v12;
        *a1 = v12 + 1;
      }
      a1[2] = (unsigned __int8 *)v13;
      result = sub_23A03685C(a1, 3, "number");
      if (!(_DWORD)result)
        return result;
      v14 = *((_BYTE *)a1 + 16);
      if (*((_BYTE *)a1 + 32))
        v15 = v11;
      else
        v15 = *((unsigned __int8 *)a1 + 16);
      if (!*((_BYTE *)a1 + 32))
        v14 = v11;
      v16 = (__int16)(v14 | (unsigned __int16)(v15 << 8));
      break;
    case 'L':
      *(_QWORD *)&v35[48] = 0;
      result = sub_23A039CC4(a1, 3, (unint64_t *)&v35[48]);
      if ((_DWORD)result)
        *a2 = *(_QWORD *)&v35[48];
      return result;
    case 'U':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        v18 = -1;
      }
      else
      {
        v18 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v18;
      result = sub_23A03685C(a1, 3, "number");
      if (!(_DWORD)result)
        return result;
      v16 = *((unsigned __int8 *)a1 + 16);
      break;
    case 'i':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        v17 = -1;
      }
      else
      {
        v17 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v17;
      result = sub_23A03685C(a1, 3, "number");
      if (!(_DWORD)result)
        return result;
      v16 = *((char *)a1 + 16);
      break;
    case 'l':
      *(_DWORD *)&v35[48] = 0;
      result = sub_23A039B10(a1, 3, (int *)&v35[48]);
      if ((_DWORD)result)
        *a2 = *(int *)&v35[48];
      return result;
    default:
      goto LABEL_31;
  }
  *a2 = v16;
  return 1;
}

void sub_23A03F14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  std::runtime_error *v28;
  int v29;
  uint64_t v30;

  std::runtime_error::~runtime_error(v28);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((v29 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_23A03F1E8(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  if (sub_23A040FCC(a1) == 239)
  {
    if (sub_23A040FCC(a1) == 187 && sub_23A040FCC(a1) == 191)
      goto LABEL_12;
    v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_6:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 24) = 1;
    --*(_QWORD *)(a1 + 32);
    if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
      *v3 = v4 - 1;
    if (*(_DWORD *)(a1 + 20) != -1)
      --*(_QWORD *)(a1 + 64);
LABEL_12:
    while (1)
    {
      sub_23A03F5B0(a1);
      if (!*(_BYTE *)(a1 + 16) || *(_DWORD *)(a1 + 20) != 47)
        break;
      if (!sub_23A03F81C(a1))
        return 14;
    }
    result = 8;
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0xFFFFFFFF:
      case 0:
        result = 15;
        break;
      case 0x22:
        result = sub_23A03F93C(a1);
        break;
      case 0x2C:
        result = 13;
        break;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        result = sub_23A0408D8(a1);
        break;
      case 0x3A:
        result = 12;
        break;
      case 0x5B:
        return result;
      case 0x5D:
        result = 10;
        break;
      case 0x66:
        if (sub_23A040FCC(a1) != 97
          || sub_23A040FCC(a1) != 108
          || sub_23A040FCC(a1) != 115
          || sub_23A040FCC(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 2;
        break;
      case 0x6E:
        if (sub_23A040FCC(a1) != 117
          || sub_23A040FCC(a1) != 108
          || sub_23A040FCC(a1) != 108)
        {
          goto LABEL_38;
        }
        result = 3;
        break;
      case 0x74:
        if (sub_23A040FCC(a1) != 114
          || sub_23A040FCC(a1) != 117
          || sub_23A040FCC(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 1;
        break;
      case 0x7B:
        result = 9;
        break;
      case 0x7D:
        result = 11;
        break;
      default:
LABEL_38:
        v2 = "invalid literal";
        goto LABEL_6;
    }
  }
  return result;
}

void sub_23A03F474(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  std::string::size_type v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v8 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_23A03F544(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A03F564(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    v2 = *(void **)(a1 + 56);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23A03F5B0(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int64x2_t v30;

  v2 = (_QWORD *)(a1 + 56);
  v3 = vdupq_n_s64(1uLL);
  v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1)
        return;
LABEL_8:
      v9 = *(_BYTE **)(a1 + 64);
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *v9 = v5;
        *(_QWORD *)(a1 + 64) = v9 + 1;
        v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17)
          return;
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            v4 = *(_QWORD *)(a1 + 48) + 1;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_239FEBE68();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v5;
        v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
          goto LABEL_37;
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v5;
        v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = v18;
          *(_QWORD *)(a1 + 72) = &v16[v15];
          if (v9)
            operator delete(v9);
          v3 = v30;
          *(_QWORD *)(a1 + 64) = v18;
          v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v19 = 0;
          goto LABEL_29;
        }
        v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        v20 = &v16[v12 - 16];
        v21 = (__int128 *)(v9 - 16);
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19)
          goto LABEL_36;
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v16[&v9[-v19] - v11 - 8];
          v25 = (uint64_t *)&v9[-v19 - 8];
          v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *v25--;
            *(_QWORD *)v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      v28 = v17 - 1;
      do
      {
        v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  v6 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    v7 = *v6;
    LOBYTE(v5) = *v6;
    *(_QWORD *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1)
      goto LABEL_8;
  }
}

uint64_t sub_23A03F81C(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = sub_23A040FCC(a1);
  if (v2 == 42)
  {
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      while (1)
      {
        v6 = sub_23A040FCC(a1);
        if (v6 != 42)
          break;
        if (sub_23A040FCC(a1) == 47)
          return 1;
        *(_BYTE *)(a1 + 24) = 1;
        v7 = *(_QWORD *)(a1 + 40);
        --*(_QWORD *)(a1 + 32);
        v8 = (_QWORD *)(a1 + 40);
        if (v7 || (v7 = *v5, v8 = (_QWORD *)(a1 + 48), *v5))
          *v8 = v7 - 1;
        if (*(_DWORD *)(a1 + 20) != -1)
          --*(_QWORD *)(a1 + 64);
      }
    }
    while ((v6 + 1) >= 2);
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; missing closing '*/'";
  }
  else if (v2 == 47)
  {
    do
    {
      do
        v3 = sub_23A040FCC(a1) + 1;
      while (v3 >= 0xF);
    }
    while (((0x4803u >> v3) & 1) == 0);
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; expecting '/' or '*' after '/'";
  }
  return result;
}

uint64_t sub_23A03F93C(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  void **v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  const char *v40;
  int v41;
  int v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  _BYTE *v56;
  int v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  std::string::value_type v79;
  int v80;
  char *v81;
  __int128 *v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char *v94;
  char v95;
  int v96;
  int v97;
  size_t v98;
  void *v99;
  uint64_t v100;
  size_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  _BYTE *v108;
  int v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  __int128 *v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  int v131;
  void *v132;
  uint64_t v133;
  size_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int64x2_t v141;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v3 >= v5)
  {
    v7 = v5 - (_QWORD)v3;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v3 = v4;
    v6 = v3 + 1;
  }
  v11 = (void **)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v141 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v141);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v15 = *(_DWORD *)(a1 + 20);
      if (v15 == -1)
        goto LABEL_253;
    }
    else
    {
      v16 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_253:
        v40 = "invalid string: missing closing quote";
        goto LABEL_251;
      }
      v17 = *v16;
      LOBYTE(v15) = *v16;
      *(_QWORD *)a1 = v16 + 1;
      *(_DWORD *)(a1 + 20) = v17;
      if (v17 == -1)
        goto LABEL_253;
    }
    v19 = *(_BYTE **)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v19 >= v18)
    {
      v21 = (_BYTE *)*v2;
      v22 = (unint64_t)&v19[-*v2];
      v23 = v22 + 1;
      if ((uint64_t)(v22 + 1) < 0)
        goto LABEL_286;
      v24 = v18 - (_QWORD)v21;
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)operator new(v25);
        v27 = &v26[v22];
        v26[v22] = v15;
        v20 = (uint64_t)&v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_49:
          *(_QWORD *)(a1 + 56) = v27;
          *(_QWORD *)(a1 + 64) = v20;
          *(_QWORD *)(a1 + 72) = &v26[v25];
          if (v19)
            operator delete(v19);
          goto LABEL_51;
        }
      }
      else
      {
        v26 = 0;
        v27 = &v19[-*v2];
        *(_BYTE *)v22 = v15;
        v20 = v22 + 1;
        if (v19 == v21)
          goto LABEL_49;
      }
      if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
      {
        if (v22 < 0x20)
        {
          v28 = 0;
          goto LABEL_41;
        }
        v28 = v22 & 0xFFFFFFFFFFFFFFE0;
        v29 = &v26[v22 - 16];
        v30 = (__int128 *)(v19 - 16);
        v31 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v22 == v28)
          goto LABEL_48;
        if ((v22 & 0x18) != 0)
        {
LABEL_41:
          v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
          v33 = &v26[&v19[-v28] - v21 - 8];
          v34 = (uint64_t *)&v19[-v28 - 8];
          v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v36 = *v34--;
            *(_QWORD *)v33 = v36;
            v33 -= 8;
            v35 += 8;
          }
          while (v35);
          v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_48;
          goto LABEL_46;
        }
        v27 -= v28;
        v19 -= v28;
      }
LABEL_46:
      v37 = v27 - 1;
      do
      {
        v38 = *--v19;
        *v37-- = v38;
      }
      while (v19 != v21);
LABEL_48:
      v19 = (_BYTE *)*v2;
      v27 = v26;
      goto LABEL_49;
    }
    *v19 = v15;
    v20 = (uint64_t)(v19 + 1);
LABEL_51:
    *(_QWORD *)(a1 + 64) = v20;
    v39 = *(_DWORD *)(a1 + 20);
    if (v39 == 10)
    {
      v138 = *(_QWORD *)(a1 + 48) + 1;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = v138;
      v40 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_251;
    }
    v40 = "invalid string: missing closing quote";
    switch(v39)
    {
      case -1:
        goto LABEL_251;
      case 0:
        v40 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_251;
      case 1:
        v40 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_251;
      case 2:
        v40 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_251;
      case 3:
        v40 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_251;
      case 4:
        v40 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_251;
      case 5:
        v40 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_251;
      case 6:
        v40 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_251;
      case 7:
        v40 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_251;
      case 8:
        v40 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_251;
      case 9:
        v40 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_251;
      case 11:
        v40 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_251;
      case 12:
        v40 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_251;
      case 13:
        v40 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_251;
      case 14:
        v40 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_251;
      case 15:
        v40 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_251;
      case 16:
        v40 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_251;
      case 17:
        v40 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_251;
      case 18:
        v40 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_251;
      case 19:
        v40 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_251;
      case 20:
        v40 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_251;
      case 21:
        v40 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_251;
      case 22:
        v40 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_251;
      case 23:
        v40 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_251;
      case 24:
        v40 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_251;
      case 25:
        v40 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_251;
      case 26:
        v40 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_251;
      case 27:
        v40 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_251;
      case 28:
        v40 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_251;
      case 29:
        v40 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_251;
      case 30:
        v40 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_251;
      case 31:
        v40 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_251;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_217;
      case 34:
        return 4;
      case 92:
        v80 = sub_23A040FCC(a1);
        v40 = "invalid string: forbidden character after backslash";
        switch(v80)
        {
          case '"':
            std::string::push_back((std::string *)(a1 + 80), 34);
            continue;
          case '/':
            std::string::push_back((std::string *)(a1 + 80), 47);
            continue;
          case '\\':
            std::string::push_back((std::string *)(a1 + 80), 92);
            continue;
          case 'b':
            std::string::push_back((std::string *)(a1 + 80), 8);
            continue;
          case 'f':
            std::string::push_back((std::string *)(a1 + 80), 12);
            continue;
          case 'n':
            std::string::push_back((std::string *)(a1 + 80), 10);
            continue;
          case 'r':
            std::string::push_back((std::string *)(a1 + 80), 13);
            continue;
          case 't':
            std::string::push_back((std::string *)(a1 + 80), 9);
            continue;
          case 'u':
            v91 = sub_23A04121C(a1);
            if (v91 == -1)
              goto LABEL_287;
            v92 = v91;
            if ((v91 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_23A040FCC(a1) != 92 || sub_23A040FCC(a1) != 117)
              {
LABEL_288:
                v40 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                goto LABEL_251;
              }
              v93 = sub_23A04121C(a1);
              if (v93 == -1)
              {
LABEL_287:
                v40 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_251;
              }
              if (v93 >> 10 != 55)
                goto LABEL_288;
              v92 = v93 + (v92 << 10) - 56613888;
LABEL_147:
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 18) | 0xF0);
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 12) & 0x3F | 0x80);
              goto LABEL_148;
            }
            if ((v91 & 0xFFFFFC00) == 0xDC00)
            {
              v40 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_251;
            }
            if ((int)v91 <= 127)
            {
              v79 = v91;
LABEL_111:
              std::string::push_back((std::string *)(a1 + 80), v79);
              continue;
            }
            if (v91 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v91 >> 6) | 0xC0);
              v79 = v92 & 0x3F | 0x80;
              goto LABEL_111;
            }
            if (HIWORD(v91))
              goto LABEL_147;
            std::string::push_back((std::string *)(a1 + 80), (v91 >> 12) | 0xE0);
LABEL_148:
            std::string::push_back((std::string *)(a1 + 80), (v92 >> 6) & 0x3F | 0x80);
            std::string::push_back((std::string *)(a1 + 80), v92 & 0x3F | 0x80);
            break;
          default:
            goto LABEL_251;
        }
        continue;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v41 = *(_DWORD *)(a1 + 20);
          if (v41 == -1)
            goto LABEL_250;
        }
        else
        {
          v43 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v44 = *v43;
          LOBYTE(v41) = *v43;
          *(_QWORD *)a1 = v43 + 1;
          *(_DWORD *)(a1 + 20) = v44;
          if (v44 == -1)
            goto LABEL_250;
        }
        v46 = *(_BYTE **)(a1 + 64);
        v45 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v46 < v45)
        {
          *v46 = v41;
          v47 = (uint64_t)(v46 + 1);
          goto LABEL_132;
        }
        v48 = (_BYTE *)*v2;
        v49 = (unint64_t)&v46[-*v2];
        v50 = v49 + 1;
        if ((uint64_t)(v49 + 1) < 0)
          goto LABEL_286;
        v51 = v45 - (_QWORD)v48;
        if (2 * v51 > v50)
          v50 = 2 * v51;
        if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)operator new(v52);
          v54 = &v53[v49];
          v53[v49] = v41;
          v47 = (uint64_t)&v53[v49 + 1];
          if (v46 == v48)
            goto LABEL_130;
        }
        else
        {
          v53 = 0;
          v54 = &v46[-*v2];
          *(_BYTE *)v49 = v41;
          v47 = v49 + 1;
          if (v46 == v48)
            goto LABEL_130;
        }
        if (v49 < 8 || (unint64_t)(v48 - v53) < 0x20)
          goto LABEL_127;
        if (v49 >= 0x20)
        {
          v55 = v49 & 0xFFFFFFFFFFFFFFE0;
          v70 = &v53[v49 - 16];
          v71 = (__int128 *)(v46 - 16);
          v72 = v49 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 32;
          }
          while (v72);
          if (v49 == v55)
            goto LABEL_129;
          if ((v49 & 0x18) == 0)
          {
            v54 -= v55;
            v46 -= v55;
LABEL_127:
            v89 = v54 - 1;
            do
            {
              v90 = *--v46;
              *v89-- = v90;
            }
            while (v46 != v48);
            goto LABEL_129;
          }
        }
        else
        {
          v55 = 0;
        }
        v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
        v74 = &v53[&v46[-v55] - v48 - 8];
        v75 = (uint64_t *)&v46[-v55 - 8];
        v76 = v55 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v77 = *v75--;
          *(_QWORD *)v74 = v77;
          v74 -= 8;
          v76 += 8;
        }
        while (v76);
        v46 -= v49 & 0xFFFFFFFFFFFFFFF8;
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_127;
LABEL_129:
        v46 = (_BYTE *)*v2;
        v54 = v53;
LABEL_130:
        *(_QWORD *)(a1 + 56) = v54;
        *(_QWORD *)(a1 + 64) = v47;
        *(_QWORD *)(a1 + 72) = &v53[v52];
        if (v46)
          operator delete(v46);
LABEL_132:
        *(_QWORD *)(a1 + 64) = v47;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 == 10)
          goto LABEL_249;
        goto LABEL_216;
      case 224:
        std::string::push_back((std::string *)(a1 + 80), -32);
        sub_23A040FCC(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v42 = *(_DWORD *)(a1 + 20);
          if (v42 == -1)
            goto LABEL_250;
        }
        else
        {
          v56 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v57 = *v56;
          LOBYTE(v42) = *v56;
          *(_QWORD *)a1 = v56 + 1;
          *(_DWORD *)(a1 + 20) = v57;
          if (v57 == -1)
            goto LABEL_250;
        }
        v59 = *(_BYTE **)(a1 + 64);
        v58 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v59 < v58)
        {
          *v59 = v42;
          v60 = (uint64_t)(v59 + 1);
          goto LABEL_156;
        }
        v61 = (_BYTE *)*v2;
        v62 = (unint64_t)&v59[-*v2];
        v63 = v62 + 1;
        if ((uint64_t)(v62 + 1) < 0)
          goto LABEL_286;
        v64 = v58 - (_QWORD)v61;
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
          v65 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)operator new(v65);
          v67 = &v66[v62];
          v66[v62] = v42;
          v60 = (uint64_t)&v66[v62 + 1];
          if (v59 == v61)
            goto LABEL_154;
        }
        else
        {
          v66 = 0;
          v67 = &v59[-*v2];
          *(_BYTE *)v62 = v42;
          v60 = v62 + 1;
          if (v59 == v61)
            goto LABEL_154;
        }
        if (v62 < 8 || (unint64_t)(v61 - v66) < 0x20)
          goto LABEL_151;
        if (v62 >= 0x20)
        {
          v69 = v62 & 0xFFFFFFFFFFFFFFE0;
          v81 = &v66[v62 - 16];
          v82 = (__int128 *)(v59 - 16);
          v83 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 32;
          }
          while (v83);
          if (v62 == v69)
            goto LABEL_153;
          if ((v62 & 0x18) == 0)
          {
            v67 -= v69;
            v59 -= v69;
LABEL_151:
            v94 = v67 - 1;
            do
            {
              v95 = *--v59;
              *v94-- = v95;
            }
            while (v59 != v61);
            goto LABEL_153;
          }
        }
        else
        {
          v69 = 0;
        }
        v67 -= v62 & 0xFFFFFFFFFFFFFFF8;
        v85 = &v66[&v59[-v69] - v61 - 8];
        v86 = (uint64_t *)&v59[-v69 - 8];
        v87 = v69 - (v62 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v88 = *v86--;
          *(_QWORD *)v85 = v88;
          v85 -= 8;
          v87 += 8;
        }
        while (v87);
        v59 -= v62 & 0xFFFFFFFFFFFFFFF8;
        if (v62 != (v62 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_151;
LABEL_153:
        v59 = (_BYTE *)*v2;
        v67 = v66;
LABEL_154:
        *(_QWORD *)(a1 + 56) = v67;
        *(_QWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 72) = &v66[v65];
        if (v59)
          operator delete(v59);
LABEL_156:
        *(_QWORD *)(a1 + 64) = v60;
        v96 = *(_DWORD *)(a1 + 20);
        if (v96 == 10)
          goto LABEL_249;
        if ((v96 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v97 = *(char *)(a1 + 103);
        if ((v97 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v98 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v97 + 1) & 0x7F;
            v103 = (char *)(a1 + 80);
            goto LABEL_180;
          }
          v98 = 22;
          v99 = (void *)(a1 + 80);
LABEL_164:
          if (v98 + 1 > 2 * v98)
            v102 = v98 + 1;
          else
            v102 = 2 * v98;
          if (v102 < 0x17)
          {
            v101 = 23;
            goto LABEL_169;
          }
          v104 = (v102 & 0x7FFFFFFFFFFFFFF8) + 8;
          v105 = v102 | 7;
          if (v105 == 23)
            v105 = v104;
          v101 = v105 + 1;
          v103 = (char *)operator new(v105 + 1);
          if (v98)
          {
LABEL_175:
            memmove(v103, v99, v98);
            if (v98 != 22)
              goto LABEL_176;
LABEL_177:
            *(_QWORD *)(a1 + 80) = v103;
            *(_QWORD *)(a1 + 96) = v101 | 0x8000000000000000;
            goto LABEL_179;
          }
LABEL_176:
          operator delete(v99);
          goto LABEL_177;
        }
        v100 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = v100 - 1;
        if (*(_QWORD *)(a1 + 88) == v100 - 1)
        {
          if (v100 == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_290;
          v99 = *v11;
          v101 = 0x7FFFFFFFFFFFFFF7;
          if (v98 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_164;
LABEL_169:
          v103 = (char *)operator new(v101);
          if (v98)
            goto LABEL_175;
          goto LABEL_176;
        }
        v103 = (char *)*v11;
        v98 = *(_QWORD *)(a1 + 88);
LABEL_179:
        *(_QWORD *)(a1 + 88) = v98 + 1;
LABEL_180:
        v106 = &v103[v98];
        *v106 = v96;
        v106[1] = 0;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v107 = *(_DWORD *)(a1 + 20);
          if (v107 == -1)
            goto LABEL_250;
        }
        else
        {
          v108 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v109 = *v108;
          LOBYTE(v107) = *v108;
          *(_QWORD *)a1 = v108 + 1;
          *(_DWORD *)(a1 + 20) = v109;
          if (v109 == -1)
            goto LABEL_250;
        }
        v111 = *(_BYTE **)(a1 + 64);
        v110 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v111 < v110)
        {
          *v111 = v107;
          v112 = (uint64_t)(v111 + 1);
          goto LABEL_215;
        }
        v113 = (_BYTE *)*v2;
        v114 = (unint64_t)&v111[-*v2];
        v115 = v114 + 1;
        if ((uint64_t)(v114 + 1) < 0)
LABEL_286:
          sub_239FEBE68();
        v116 = v110 - (_QWORD)v113;
        if (2 * v116 > v115)
          v115 = 2 * v116;
        if (v116 >= 0x3FFFFFFFFFFFFFFFLL)
          v117 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (char *)operator new(v117);
          v119 = &v118[v114];
          v118[v114] = v107;
          v112 = (uint64_t)&v118[v114 + 1];
          if (v111 == v113)
            goto LABEL_213;
        }
        else
        {
          v118 = 0;
          v119 = &v111[-*v2];
          *(_BYTE *)v114 = v107;
          v112 = v114 + 1;
          if (v111 == v113)
            goto LABEL_213;
        }
        if (v114 < 8 || (unint64_t)(v113 - v118) < 0x20)
          goto LABEL_210;
        if (v114 >= 0x20)
        {
          v120 = v114 & 0xFFFFFFFFFFFFFFE0;
          v121 = &v118[v114 - 16];
          v122 = (__int128 *)(v111 - 16);
          v123 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v124 = *v122;
            *((_OWORD *)v121 - 1) = *(v122 - 1);
            *(_OWORD *)v121 = v124;
            v121 -= 32;
            v122 -= 2;
            v123 -= 32;
          }
          while (v123);
          if (v114 == v120)
            goto LABEL_212;
          if ((v114 & 0x18) == 0)
          {
            v119 -= v120;
            v111 -= v120;
LABEL_210:
            v129 = v119 - 1;
            do
            {
              v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v113);
            goto LABEL_212;
          }
        }
        else
        {
          v120 = 0;
        }
        v119 -= v114 & 0xFFFFFFFFFFFFFFF8;
        v125 = &v118[&v111[-v120] - v113 - 8];
        v126 = (uint64_t *)&v111[-v120 - 8];
        v127 = v120 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v128 = *v126--;
          *(_QWORD *)v125 = v128;
          v125 -= 8;
          v127 += 8;
        }
        while (v127);
        v111 -= v114 & 0xFFFFFFFFFFFFFFF8;
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_210;
LABEL_212:
        v111 = (_BYTE *)*v2;
        v119 = v118;
LABEL_213:
        *(_QWORD *)(a1 + 56) = v119;
        *(_QWORD *)(a1 + 64) = v112;
        *(_QWORD *)(a1 + 72) = &v118[v117];
        if (v111)
          operator delete(v111);
LABEL_215:
        *(_QWORD *)(a1 + 64) = v112;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 != 10)
        {
LABEL_216:
          if ((v39 - 192) < 0xFFFFFFC0)
            goto LABEL_250;
LABEL_217:
          v131 = *(char *)(a1 + 103);
          if ((v131 & 0x80000000) == 0)
          {
            if (*(_BYTE *)(a1 + 103) != 22)
            {
              v12 = *(unsigned __int8 *)(a1 + 103);
              *(_BYTE *)(a1 + 103) = (v131 + 1) & 0x7F;
              v13 = (char *)(a1 + 80);
              goto LABEL_15;
            }
            v12 = 22;
            v132 = (void *)(a1 + 80);
LABEL_223:
            if (v12 + 1 > 2 * v12)
              v135 = v12 + 1;
            else
              v135 = 2 * v12;
            v136 = (v135 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17)
              v136 = v135 | 7;
            if (v135 >= 0x17)
              v134 = v136 + 1;
            else
              v134 = 23;
LABEL_231:
            v137 = (char *)operator new(v134);
            v13 = v137;
            if (!v12 || (memmove(v137, v132, v12), v12 != 22))
              operator delete(v132);
            *(_QWORD *)(a1 + 80) = v13;
            *(_QWORD *)(a1 + 96) = v134 | 0x8000000000000000;
            goto LABEL_236;
          }
          v133 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
          v12 = v133 - 1;
          if (*(_QWORD *)(a1 + 88) == v133 - 1)
          {
            if (v133 == 0x7FFFFFFFFFFFFFF8)
LABEL_290:
              sub_239FEBDE0();
            v132 = *v11;
            v134 = 0x7FFFFFFFFFFFFFF7;
            if (v12 >= 0x3FFFFFFFFFFFFFF3)
              goto LABEL_231;
            goto LABEL_223;
          }
          v13 = (char *)*v11;
          v12 = *(_QWORD *)(a1 + 88);
LABEL_236:
          *(_QWORD *)(a1 + 88) = v12 + 1;
LABEL_15:
          v14 = &v13[v12];
          *v14 = v39;
          v14[1] = 0;
          continue;
        }
LABEL_249:
        v139 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v139;
LABEL_250:
        v40 = "invalid string: ill-formed UTF-8 byte";
LABEL_251:
        *(_QWORD *)(a1 + 104) = v40;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 80), -19);
        sub_23A040FCC(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 160) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 240:
        std::string::push_back((std::string *)(a1 + 80), -16);
        sub_23A040FCC(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFD0)
          goto LABEL_250;
        goto LABEL_108;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 80), v39);
        sub_23A040FCC(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        goto LABEL_108;
      case 244:
        std::string::push_back((std::string *)(a1 + 80), -12);
        sub_23A040FCC(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 144) < 0xFFFFFFF0)
          goto LABEL_250;
LABEL_108:
        std::string::push_back((std::string *)(a1 + 80), v68);
        sub_23A040FCC(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
LABEL_109:
        std::string::push_back((std::string *)(a1 + 80), v78);
        sub_23A040FCC(a1);
        if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v79 = *(_DWORD *)(a1 + 20);
        goto LABEL_111;
      default:
        goto LABEL_250;
    }
  }
}

uint64_t sub_23A0408D8(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  const char *v60;
  uint64_t v61;
  int v62;
  int64x2_t v63;
  char *__endptr;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v3 = (_QWORD *)(a1 + 56);
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v5)
  {
    v7 = v5 - (_QWORD)v2;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v4;
    v6 = v2 + 1;
  }
  v11 = (const char *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v12 = *(_DWORD *)(a1 + 20);
  v13 = 5;
  if ((v12 - 49) >= 9)
  {
    if (v12 != 48)
    {
      if (v12 == 45)
        std::string::push_back((std::string *)(a1 + 80), 45);
      v50 = sub_23A040FCC(a1);
      if ((v50 - 49) < 9)
      {
        v12 = *(_DWORD *)(a1 + 20);
        v14 = 6;
        goto LABEL_15;
      }
      if (v50 != 48)
      {
        v52 = "invalid number; expected digit after '-'";
        goto LABEL_129;
      }
      v12 = *(_DWORD *)(a1 + 20);
      v13 = 6;
    }
    std::string::push_back((std::string *)(a1 + 80), v12);
    v53 = sub_23A040FCC(a1);
    if (v53 == 46)
    {
LABEL_80:
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
      if (sub_23A040FCC(a1) - 48 > 9)
      {
        v52 = "invalid number; expected digit after '.'";
        goto LABEL_129;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        v49 = sub_23A040FCC(a1);
      }
      while ((v49 - 48) < 0xA);
      if (v49 != 101 && v49 != 69)
      {
LABEL_104:
        v13 = 7;
        goto LABEL_105;
      }
    }
    else if (v53 != 69 && v53 != 101)
    {
      goto LABEL_105;
    }
    v42 = *(_DWORD *)(a1 + 20);
LABEL_101:
    std::string::push_back((std::string *)(a1 + 80), v42);
    v54 = sub_23A040FCC(a1);
    if ((v54 - 48) < 0xA)
      goto LABEL_102;
    if (v54 == 45 || v54 == 43)
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (sub_23A040FCC(a1) - 48 < 0xA)
      {
LABEL_102:
        std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        if (sub_23A040FCC(a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          while (sub_23A040FCC(a1) - 48 < 0xA);
        }
        goto LABEL_104;
      }
      v52 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v52 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_129:
    *(_QWORD *)(a1 + 104) = v52;
    return 14;
  }
  v14 = 5;
LABEL_15:
  v62 = v14;
  std::string::push_back((std::string *)(a1 + 80), v12);
  v63 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v63);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 == -1)
        goto LABEL_76;
    }
    else
    {
      v19 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_76:
        v13 = v62;
        goto LABEL_105;
      }
      v20 = *v19;
      LOBYTE(v18) = *v19;
      *(_QWORD *)a1 = v19 + 1;
      *(_DWORD *)(a1 + 20) = v20;
      if (v20 == -1)
        goto LABEL_76;
    }
    v22 = *(_BYTE **)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v22 < v21)
    {
      *v22 = v18;
      v23 = (uint64_t)(v22 + 1);
      goto LABEL_53;
    }
    v24 = (_BYTE *)*v3;
    v25 = (unint64_t)&v22[-*v3];
    v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0)
      sub_239FEBE68();
    v27 = v21 - (_QWORD)v24;
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (!v28)
    {
      v29 = 0;
      v30 = &v22[-*v3];
      *(_BYTE *)v25 = v18;
      v23 = v25 + 1;
      if (v22 == v24)
        goto LABEL_51;
LABEL_35:
      if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
      {
        if (v25 < 0x20)
        {
          v31 = 0;
          goto LABEL_43;
        }
        v31 = v25 & 0xFFFFFFFFFFFFFFE0;
        v32 = &v29[v25 - 16];
        v33 = (__int128 *)(v22 - 16);
        v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 32;
        }
        while (v34);
        if (v25 == v31)
          goto LABEL_50;
        if ((v25 & 0x18) != 0)
        {
LABEL_43:
          v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
          v36 = &v29[&v22[-v31] - v24 - 8];
          v37 = (uint64_t *)&v22[-v31 - 8];
          v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v39 = *v37--;
            *(_QWORD *)v36 = v39;
            v36 -= 8;
            v38 += 8;
          }
          while (v38);
          v22 -= v25 & 0xFFFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_50;
          goto LABEL_48;
        }
        v30 -= v31;
        v22 -= v31;
      }
LABEL_48:
      v40 = v30 - 1;
      do
      {
        v41 = *--v22;
        *v40-- = v41;
      }
      while (v22 != v24);
LABEL_50:
      v22 = (_BYTE *)*v3;
      v30 = v29;
      goto LABEL_51;
    }
    v29 = (char *)operator new(v28);
    v30 = &v29[v25];
    v29[v25] = v18;
    v23 = (uint64_t)&v29[v25 + 1];
    if (v22 != v24)
      goto LABEL_35;
LABEL_51:
    *(_QWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(a1 + 72) = &v29[v28];
    if (v22)
      operator delete(v22);
LABEL_53:
    *(_QWORD *)(a1 + 64) = v23;
    v42 = *(_DWORD *)(a1 + 20);
    if ((v42 - 48) >= 0xA)
      break;
    v43 = *(char *)(a1 + 103);
    if (v43 < 0)
    {
      v45 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
      v15 = v45 - 1;
      if (*(_QWORD *)(a1 + 88) != v45 - 1)
      {
        v16 = *(char **)v11;
        v15 = *(_QWORD *)(a1 + 88);
        goto LABEL_73;
      }
      if (v45 == 0x7FFFFFFFFFFFFFF8)
        sub_239FEBDE0();
      v44 = *(char **)v11;
      if (v15 > 0x3FFFFFFFFFFFFFF2)
      {
        v48 = 0x7FFFFFFFFFFFFFF7;
        v16 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
        goto LABEL_69;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 103) != 22)
      {
        v15 = *(unsigned __int8 *)(a1 + 103);
        *(_BYTE *)(a1 + 103) = (v43 + 1) & 0x7F;
        v16 = (char *)(a1 + 80);
        goto LABEL_17;
      }
      v44 = (char *)(a1 + 80);
      v15 = 22;
    }
    if (v15 + 1 > 2 * v15)
      v46 = v15 + 1;
    else
      v46 = 2 * v15;
    v47 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v47 = v46 | 7;
    if (v46 >= 0x17)
      v48 = v47 + 1;
    else
      v48 = 23;
    v16 = (char *)operator new(v48);
    if (!v15)
    {
LABEL_70:
      operator delete(v44);
      goto LABEL_71;
    }
LABEL_69:
    memmove(v16, v44, v15);
    if (v15 != 22)
      goto LABEL_70;
LABEL_71:
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v48 | 0x8000000000000000;
LABEL_73:
    *(_QWORD *)(a1 + 88) = v15 + 1;
LABEL_17:
    v17 = &v16[v15];
    *v17 = v42;
    v17[1] = 0;
  }
  if (v42 > 68)
  {
    v13 = v62;
    if (v42 != 69 && v42 != 101)
      goto LABEL_105;
    goto LABEL_101;
  }
  v13 = v62;
  if (v42 == 10)
  {
    v51 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v51;
  }
  else if (v42 == 46)
  {
    goto LABEL_80;
  }
LABEL_105:
  v55 = (_QWORD *)(a1 + 40);
  v56 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 24) = 1;
  --*(_QWORD *)(a1 + 32);
  if (v56 || (v55 = (_QWORD *)(a1 + 48), (v56 = *(_QWORD *)(a1 + 48)) != 0))
    *v55 = v56 - 1;
  if (*(_DWORD *)(a1 + 20) != -1)
    --*(_QWORD *)(a1 + 64);
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    v60 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v60 = *(const char **)v11;
    v61 = strtoll(v60, &__endptr, 10);
    if (*__error())
      goto LABEL_119;
    *(_QWORD *)(a1 + 112) = v61;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      v57 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v57 = *(const char **)v11;
      v58 = strtoull(v57, &__endptr, 10);
      if (!*__error())
      {
        *(_QWORD *)(a1 + 120) = v58;
        return 5;
      }
    }
LABEL_119:
    if (*(char *)(a1 + 103) < 0)
      v11 = *(const char **)v11;
    *(double *)(a1 + 128) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_23A040FCC(uint64_t a1)
{
  int v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t result;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;

  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v2 = *(_DWORD *)(a1 + 20);
    if (v2 != -1)
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v16 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
    return 0xFFFFFFFFLL;
  }
  v17 = *v16;
  LOBYTE(v2) = *v16;
  *(_QWORD *)a1 = v16 + 1;
  *(_DWORD *)(a1 + 20) = v17;
  if (v17 == -1)
    return 0xFFFFFFFFLL;
LABEL_3:
  v4 = *(_BYTE **)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v4 < v3)
  {
    *v4 = v2;
    v5 = (uint64_t)(v4 + 1);
    goto LABEL_36;
  }
  v6 = (_BYTE **)(a1 + 56);
  v7 = *(_BYTE **)(a1 + 56);
  v8 = v4 - v7;
  v9 = v4 - v7 + 1;
  if (v9 < 0)
    sub_239FEBE68();
  v10 = v3 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v5 = (uint64_t)&v12[v8 + 1];
    if (v4 != v7)
    {
LABEL_13:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
        goto LABEL_32;
      if (v8 >= 0x20)
      {
        v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        v19 = (__int128 *)(v4 - 16);
        v20 = &v12[v4 - 16 - v7];
        v21 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v8 == v15)
        {
LABEL_34:
          v4 = *v6;
          *(_QWORD *)(a1 + 56) = v12;
          *(_QWORD *)(a1 + 64) = v5;
          *(_QWORD *)(a1 + 72) = v14;
          if (!v4)
            goto LABEL_36;
          goto LABEL_35;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v4 -= v15;
          goto LABEL_32;
        }
      }
      else
      {
        v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      v23 = &v4[-v15 - 8];
      v24 = &v12[v23 - v7];
      v25 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v26 = *(_QWORD *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_34;
LABEL_32:
      v27 = v13 - 1;
      do
      {
        v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != v7);
      goto LABEL_34;
    }
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v4 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v5 = v8 + 1;
    if (v4 != v7)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v14;
  if (v4)
LABEL_35:
    operator delete(v4);
LABEL_36:
  *(_QWORD *)(a1 + 64) = v5;
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result == 10)
  {
    v29 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v29;
  }
  return result;
}

uint64_t sub_23A04121C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  sub_23A040FCC(a1);
  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_23A040FCC(a1);
    v4 = *(_DWORD *)(a1 + 20);
    v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
      goto LABEL_5;
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5)
    return 0xFFFFFFFFLL;
  v3 = v2 - 87;
  sub_23A040FCC(a1);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_23A040FCC(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) < 0xA)
      goto LABEL_6;
LABEL_12:
    if ((v6 - 65) < 6)
    {
      v7 = v6 - 55;
      sub_23A040FCC(a1);
      v8 = *(_DWORD *)(a1 + 20);
      v9 = v8 - 48;
      if ((v8 - 48) < 0xA)
        return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
      goto LABEL_20;
    }
    if ((v6 - 97) > 5)
      return 0xFFFFFFFFLL;
    v7 = v6 - 87;
    sub_23A040FCC(a1);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v8 - 48;
    if ((v8 - 48) >= 0xA)
      goto LABEL_20;
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5)
      return 0xFFFFFFFFLL;
    v5 = v4 - 87;
    sub_23A040FCC(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
  else
  {
    v5 = v4 - 55;
    sub_23A040FCC(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
LABEL_6:
  sub_23A040FCC(a1);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = v8 - 48;
  if ((v8 - 48) < 0xA)
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
LABEL_20:
  if ((v8 - 65) < 6)
  {
    v9 = v8 - 55;
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  if ((v8 - 97) <= 5)
  {
    v9 = v8 - 87;
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23A0413C8(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  std::string __p;
  std::exception v24;
  std::runtime_error v25;
  void *v26[2];
  char v27;

  *(_OWORD *)a2 = xmmword_23A0A3AE0;
  v4 = *(unsigned __int8 **)a1;
  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24) + 1;
  do
  {
    *(_QWORD *)(a1 + 24) = v6;
    if (v4 == v5)
    {
      *(_QWORD *)(a1 + 16) = -1;
      return 1;
    }
    v8 = *v4++;
    v7 = v8;
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v8;
    ++v6;
  }
  while (v8 == 78);
  if (v7 == 35)
    return sub_23A03EC90((unsigned __int8 **)a1, a2);
  if (v7 != 36)
    return 1;
  *(_QWORD *)(a1 + 24) = v6;
  if (v4 == v5)
  {
    v9 = -1;
  }
  else
  {
    v9 = *v4;
    *(_QWORD *)a1 = v4 + 1;
  }
  *(_QWORD *)(a1 + 16) = v9;
  a2[1] = v9;
  if (!sub_23A03685C((_QWORD *)a1, 3, "type"))
    return 0;
  v11 = *(unsigned __int8 **)a1;
  v10 = *(unsigned __int8 **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 24) + 1;
  while (1)
  {
    *(_QWORD *)(a1 + 24) = v12;
    if (v11 == v10)
      break;
    v14 = *v11++;
    v13 = v14;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 16) = v14;
    if (v14 == 35)
      return sub_23A03EC90((unsigned __int8 **)a1, a2);
    ++v12;
    if (v13 != 78)
      goto LABEL_19;
  }
  *(_QWORD *)(a1 + 16) = -1;
LABEL_19:
  if (!sub_23A03685C((_QWORD *)a1, 3, "value"))
    return 0;
  sub_23A035958(a1, v26);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 24);
  std::operator+<char>();
  sub_239FEE1FC(v19, "size");
  sub_23A035DF4(3, (uint64_t)&v21, (uint64_t)v19, &__p);
  sub_23A035A34(112, v18, (uint64_t)&__p, (uint64_t)&v24);
  v16 = sub_23A035904(v17, v18, (uint64_t)v26, (uint64_t)&v24);
  v24.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(&v25);
  std::exception::~exception(&v24);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_28:
    operator delete(v19[0]);
    if (v22 < 0)
      goto LABEL_29;
LABEL_23:
    if (v27 < 0)
      goto LABEL_30;
    return v16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v20 < 0)
    goto LABEL_28;
LABEL_22:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_23;
LABEL_29:
  operator delete(v21);
  if ((v27 & 0x80000000) == 0)
    return v16;
LABEL_30:
  operator delete(v26[0]);
  return v16;
}

void sub_23A041634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  std::runtime_error *v28;
  uint64_t v29;

  a28.__vftable = (std::exception_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(v28 + 1);
  std::exception::~exception(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 33) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (*(char *)(v29 - 33) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 56));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_23A0416D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x23A0416BCLL);
  JUMPOUT(0x23A041690);
}

void sub_23A0416E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    JUMPOUT(0x23A041698);
  JUMPOUT(0x23A0416CCLL);
}

uint64_t sub_23A0416F4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250B0DDA0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x23B83FB10](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &off_250B0DD50;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

void sub_23A04174C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A041790(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void ***v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  BOOL v20;
  uint64_t *v21;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v17 = *v14;
      v15 = v14 + 1;
      v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_23A0419B8((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              v19 = (const void ***)v18;
              v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (const void ***)v16[2];
              v20 = *v19 == v16;
              v16 = (const void **)v19;
            }
            while (!v20);
          }
          v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      v21 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_23A041E88(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_239FF1F64(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_21;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_21;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_239FEBE68();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_23A04194C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A041960(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A041974(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A0419B8(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_23A041AE0(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_239FF1F64((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_23A041790(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_23A004110(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_23A041AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A037A3C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A041ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_23A037A3C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A041AE0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

_QWORD *sub_23A041E88(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_239FEBE68();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_23A041790(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_23A041F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23A041F88(&a9);
  _Unwind_Resume(a1);
}

void sub_23A041F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_23A042024((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_23A041F88(&a9);
  _Unwind_Resume(a1);
}

void ***sub_23A041F88(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_23A0339A8(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_23A042024(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_23A0339A8(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

_BYTE *sub_23A042088(_BYTE *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *v6;

  v2 = result;
  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      *v2 = v3;
      result = v2;
      break;
    case 2:
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      *v2 = v4;
      result = v2;
      break;
    case 3:
      v5 = operator new(0x18uLL);
      v5[23] = 0;
      *v5 = 0;
      *v2 = v5;
      result = v2;
      break;
    case 4:
      *result = 0;
      break;
    case 8:
      v6 = operator new(0x20uLL);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      *((_WORD *)v6 + 12) = 0;
      *v2 = v6;
      result = v2;
      break;
    default:
      *(_QWORD *)result = 0;
      break;
  }
  return result;
}

void sub_23A042180(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_23A036FC0((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_250B0DDA0;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_250B0DD28;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_23A0422A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *sub_23A0422F8(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_250B0E5D8[v1];
}

void sub_23A042320(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t **sub_23A042350(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v11 = a1 + 1;
    goto LABEL_29;
  }
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v10 = a2[1];
  do
  {
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = v6[4];
      v12 = v6 + 4;
      v13 = (_QWORD *)v14;
      v15 = *((char *)v12 + 23);
      v16 = v15 >= 0 ? v12 : v13;
      v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      v18 = (size_t)(v17 >= v10 ? v10 : v17);
      v19 = memcmp(v9, v16, v18);
      if (v19)
        break;
      if (v10 >= v17)
        goto LABEL_22;
LABEL_8:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_29;
    }
    if (v19 < 0)
      goto LABEL_8;
LABEL_22:
    v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        return v11;
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    v6 = v11[1];
  }
  while (v6);
  v7 = v11 + 1;
LABEL_29:
  v21 = (uint64_t *)v11;
  v11 = (uint64_t **)operator new(0x48uLL);
  v22 = *a4;
  v23 = (uint64_t *)*((_QWORD *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  *((_BYTE *)v11 + 56) = 0;
  v11[8] = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *v7 = (uint64_t *)v11;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    v25 = *v7;
  }
  sub_23A004110(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_23A0424BC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_250B0DDA0;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

double sub_23A042500(uint64_t a1, _QWORD *a2)
{
  double result;
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  switch(*(_BYTE *)a1)
  {
    case 4:
      *a2 = *(unsigned __int8 *)(a1 + 8);
      break;
    case 5:
    case 6:
      *a2 = *(_QWORD *)(a1 + 8);
      break;
    case 7:
      result = *(double *)(a1 + 8);
      *a2 = (unint64_t)result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v5 = (char *)sub_23A0422F8((char *)a1);
      sub_239FEE1FC(&v6, v5);
      sub_239FEEC54("type must be number, but is ", &v6, &v7);
      sub_23A042180(302, (uint64_t)&v7, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_250B0DA50, (void (*)(void *))sub_23A042320);
  }
  return result;
}

void sub_23A042600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_23A042808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A042820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A042834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A042880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A042A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A042A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A042AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A042C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A043368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{

  _Unwind_Resume(a1);
}

void sub_23A043518(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::runtime_error *exception;
  void *__p[3];

  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 40) + 32))(__p);
  sub_239FFECB4(a1, v4, (uint64_t)__p);
  *a1 = &off_250B0D558;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23A0435D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A0435EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A0436AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A043A2C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  _QWORD *v3;
  void *v4;
  void *v7;
  va_list va;

  va_start(va, a3);
  sub_239FF1A6C((uint64_t)va);

  if (a2 == 1)
  {
    v7 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v7, v3);
    __cxa_end_catch();
    JUMPOUT(0x23A043A10);
  }
  _Unwind_Resume(a1);
}

void sub_23A043ABC(const char **a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unint64_t v19;
  void *__dst[2];
  unint64_t v21;

  v6 = operator new();
  v7 = *a1;
  v8 = strlen(*a1);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    v21 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v21) = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  v13 = strlen(a2);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    __p[1] = v14;
    v19 = v17 | 0x8000000000000000;
    __p[0] = v15;
    goto LABEL_16;
  }
  HIBYTE(v19) = v13;
  v15 = __p;
  if (v13)
LABEL_16:
    memcpy(v15, a2, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  sub_23A0134C8(v6, (uint64_t)__dst, (uint64_t)__p);
  *a3 = v6;
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    goto LABEL_21;
}

void sub_23A043C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x23B83FE88](v20, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_23A044480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;

  sub_239FF5234((uint64_t)&a29);
  sub_239FF27B8(&a34);
  sub_239FF27B8(&a41);
  sub_239FF5234((uint64_t)&a48);
  sub_239FF5234((uint64_t)&a53);

  _Unwind_Resume(a1);
}

id sub_23A044684(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v44[10];
  uint64_t v45;
  void **__dst;
  size_t v47;
  unint64_t v48;

  v3 = a2;
  v4 = v3;
  if (!v3)
    goto LABEL_17;
  v5 = objc_retainAutorelease(v3);
  v10 = (const char *)objc_msgSend_UTF8String(v5, v6, v7, v8, v9);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v47 = v12;
    v48 = v15 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v48) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_9:
    memmove(p_dst, v10, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = sub_239FF2E64(a1, (uint64_t)&__dst);
  v17 = v16;
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if (v16)
      goto LABEL_12;
LABEL_17:
    v27 = 0;
    goto LABEL_25;
  }
  operator delete(__dst);
  if (!v17)
    goto LABEL_17;
LABEL_12:
  v18 = objc_retainAutorelease(v5);
  v23 = (const char *)objc_msgSend_UTF8String(v18, v19, v20, v21, v22);
  v24 = strlen(v23);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v47 = v25;
    v48 = v29 | 0x8000000000000000;
    __dst = v26;
  }
  else
  {
    HIBYTE(v48) = v24;
    v26 = (void **)&__dst;
    if (!v24)
      goto LABEL_22;
  }
  memmove(v26, v23, v25);
LABEL_22:
  *((_BYTE *)v26 + v25) = 0;
  v30 = sub_239FF2E64(a1, (uint64_t)&__dst);
  if (!v30)
    sub_239FF1D10("unordered_map::at: key not found");
  v34 = v30[10];
  v35 = *(_OWORD *)(v34 + 40);
  v36 = *(_OWORD *)(v34 + 24);
  v44[0] = *(_OWORD *)(v34 + 8);
  v44[1] = v36;
  v44[2] = v35;
  v37 = *(_OWORD *)(v34 + 88);
  v38 = *(_OWORD *)(v34 + 104);
  v39 = *(_OWORD *)(v34 + 72);
  v44[3] = *(_OWORD *)(v34 + 56);
  v44[4] = v39;
  v40 = *(_OWORD *)(v34 + 120);
  v41 = *(_OWORD *)(v34 + 136);
  v42 = *(_OWORD *)(v34 + 152);
  v45 = *(_QWORD *)(v34 + 168);
  v44[8] = v41;
  v44[9] = v42;
  v44[6] = v38;
  v44[7] = v40;
  v44[5] = v37;
  objc_msgSend_fromEspressoBuffer_(CSUEspressoBuffer, v31, (uint64_t)v44, v32, v33);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v48) < 0)
    operator delete(__dst);
LABEL_25:

  return v27;
}

void sub_23A0448C0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_23A044B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_23A044BA4(uint64_t a1, const char **a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  *(_DWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_BYTE **)(a3 + 16);
  v12 = *(_BYTE **)(a3 + 24);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_239FEBE68();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_23A044CDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A044D00(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0DCE8;
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_BYTE **)(a3 + 16);
  v7 = *(_BYTE **)(a3 + 24);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_239FEBE68();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 56) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 48) = v11;
  }
  v12 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_23A044DD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23A044FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0451C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v33;

  if (a28 < 0)
    operator delete(__p);
  if ((sub_23A09E614(&a9, (void **)&a18, (_QWORD *)(v30 - 56)) & 1) == 0)
    operator delete(*(void **)(v30 - 56));

  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v33, v29);
    __cxa_end_catch();
    JUMPOUT(0x23A0451ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_23A045638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  void *v15;

  sub_239FF27B8(&a12);
  if (__p)
    operator delete(__p);
  if (a2 == 1)
  {
    v15 = __cxa_begin_catch(a1);
    sub_239FF9B50((uint64_t)v15, v12);
    __cxa_end_catch();
    JUMPOUT(0x23A04533CLL);
  }
  _Unwind_Resume(a1);
}

void sub_23A045EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;

  __cxa_free_exception(v42);
  if (v43)
  {
    operator delete(v43);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A0465B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);
  sub_239FF27B8(&a15);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  sub_239FF27B8(&a25);

  _Unwind_Resume(a1);
}

uint64_t sub_23A046674(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *exception;

  v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_23A046720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_23A04673C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23A04674C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  const void **v7;
  size_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::runtime_error *exception;
  _OWORD v19[10];
  uint64_t v20;
  void *memptr;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(v3 + 168);
  if (v4 == 65568 || v4 == 131104)
  {
    v6 = 4;
  }
  else
  {
    if (v4 != 262152)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
LABEL_13:
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v6 = 1;
  }
  v7 = (const void **)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 160) * *(_QWORD *)(v3 + 120) * v6;
  v9 = *(_OWORD *)(v3 + 120);
  v10 = *(_OWORD *)(v3 + 136);
  v11 = *(_OWORD *)(v3 + 152);
  v20 = *(_QWORD *)(v3 + 168);
  v12 = *(_OWORD *)(v3 + 8);
  v13 = *(_OWORD *)(v3 + 40);
  v19[1] = *(_OWORD *)(v3 + 24);
  v19[2] = v13;
  v19[0] = v12;
  v14 = *(_OWORD *)(v3 + 56);
  v15 = *(_OWORD *)(v3 + 72);
  v16 = *(_OWORD *)(v3 + 104);
  v19[5] = *(_OWORD *)(v3 + 88);
  v19[6] = v16;
  v19[3] = v14;
  v19[4] = v15;
  v19[8] = v10;
  v19[9] = v11;
  v19[7] = v9;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v8 + 4095) & 0xFFFFFFFFFFFFF000, 0x1E091250uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_13;
  }
  *(_QWORD *)&v19[0] = memptr;
  memcpy(memptr, *v7, v8);
  LOWORD(memptr) = 257;
  return sub_239FF3910(a2, (uint64_t)v19, &memptr);
}

void sub_23A0468A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A0468B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A046DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);
  sub_239FF27B8(&a15);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  sub_239FF27B8(&a25);

  _Unwind_Resume(a1);
}

void sub_23A04714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  sub_239FF5234((uint64_t)&a19);

  _Unwind_Resume(a1);
}

void sub_23A0472A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0472B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0472C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A047EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;

  v40 = *(_QWORD *)(v38 - 192);
  if (!v40)
  {
LABEL_15:
    sub_239FF38A8((uint64_t)&a18);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  v41 = *(_QWORD *)(v38 - 184);
  v42 = *(void **)(v38 - 192);
  if (v41 == v40)
  {
LABEL_14:
    *(_QWORD *)(v38 - 184) = v40;
    operator delete(v42);
    goto LABEL_15;
  }
  while (1)
  {
    v44 = *(std::__shared_weak_count **)(v41 - 8);
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
        break;
    }
    v43 = *(void **)(v41 - 40);
    if (v43)
      goto LABEL_5;
LABEL_6:
    v41 -= 48;
    if (v41 == v40)
    {
      v42 = *(void **)(v38 - 192);
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  v43 = *(void **)(v41 - 40);
  if (!v43)
    goto LABEL_6;
LABEL_5:
  *(_QWORD *)(v41 - 32) = v43;
  operator delete(v43);
  goto LABEL_6;
}

void sub_23A0480D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 169) < 0)
    operator delete(*(void **)(v34 - 192));
  sub_239FF38A8((uint64_t)&a34);
  if (SHIBYTE(a27) < 0)
    operator delete(a25);

  sub_23A01B6E8((void **)&a20);
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_23A048EBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23A048ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  if (__p)
    operator delete(__p);
  if (a47)
  {
    operator delete(a47);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23A0491FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A049214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char **sub_23A049408(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = (char *)operator new(8uLL);
  *(_QWORD *)v10 = a2;
  a1[1] = v10 + 8;
  a1[2] = v10 + 8;
  *a1 = v10;
  v11 = (char *)operator new(0x10uLL);
  v12 = v11 + 16;
  *(_QWORD *)v11 = *(_QWORD *)v10;
  *((_QWORD *)v11 + 1) = a3;
  *a1 = v11;
  a1[1] = v11 + 16;
  a1[2] = v11 + 16;
  operator delete(v10);
  v13 = (unint64_t)a1[2];
  a1[1] = v11 + 16;
  if ((unint64_t)(v11 + 16) < v13)
  {
    *((_QWORD *)v11 + 2) = a4;
    v14 = v11 + 24;
    goto LABEL_21;
  }
  v15 = *a1;
  v16 = (v12 - *a1) >> 3;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61)
    goto LABEL_43;
  v18 = v13 - (_QWORD)v15;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      goto LABEL_44;
    v20 = (char *)operator new(8 * v19);
    v21 = &v20[8 * v16];
    v13 = (unint64_t)&v20[8 * v19];
    *(_QWORD *)v21 = a4;
    v14 = v21 + 8;
    if (v12 == v15)
      goto LABEL_19;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (char *)(8 * v16);
  v13 = 0;
  *(_QWORD *)(8 * v16) = a4;
  v14 = (char *)(8 * v16 + 8);
  if (v12 != v15)
  {
LABEL_14:
    v22 = v11 - v15 + 8;
    if (v22 < 0x18)
      goto LABEL_47;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v24;
    v21 -= v24;
    v25 = &v20[8 * v16 - 16];
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v11;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v11 - 1);
      *(_OWORD *)v25 = v27;
      v25 -= 32;
      v11 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        v28 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v21 - 1) = v28;
        v21 -= 8;
      }
      while (v12 != v15);
    }
  }
LABEL_19:
  *a1 = v21;
  a1[1] = v14;
  a1[2] = (char *)v13;
  if (v15)
  {
    operator delete(v15);
    v13 = (unint64_t)a1[2];
  }
LABEL_21:
  a1[1] = v14;
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = a5;
    v29 = (uint64_t)(v14 + 8);
    goto LABEL_42;
  }
  v30 = *a1;
  v31 = (v14 - *a1) >> 3;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61)
LABEL_43:
    sub_239FEBE68();
  v33 = v13 - (_QWORD)v30;
  if (v33 >> 2 > v32)
    v32 = v33 >> 2;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
    v34 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (!v34)
  {
    v35 = 0;
    v36 = (char *)(8 * v31);
    v37 = 0;
    *(_QWORD *)(8 * v31) = a5;
    v29 = 8 * v31 + 8;
    v38 = v14 - v30;
    if (v14 == v30)
      goto LABEL_40;
    goto LABEL_34;
  }
  if (v34 >> 61)
LABEL_44:
    sub_239FF1A44();
  v35 = (char *)operator new(8 * v34);
  v36 = &v35[8 * v31];
  v37 = &v35[8 * v34];
  *(_QWORD *)v36 = a5;
  v29 = (uint64_t)(v36 + 8);
  v38 = v14 - v30;
  if (v14 == v30)
    goto LABEL_40;
LABEL_34:
  v39 = v38 - 8;
  if (v39 < 0x18)
  {
    v40 = v14;
    do
    {
LABEL_39:
      v47 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *((_QWORD *)v36 - 1) = v47;
      v36 -= 8;
    }
    while (v40 != v30);
    goto LABEL_40;
  }
  v41 = (v39 >> 3) + 1;
  v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
  v40 = &v14[-v42];
  v36 -= v42;
  v43 = &v35[8 * v31 - 16];
  v44 = v14 - 16;
  v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v46 = *(_OWORD *)v44;
    *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
    *(_OWORD *)v43 = v46;
    v43 -= 32;
    v44 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_39;
LABEL_40:
  *a1 = v36;
  a1[1] = (char *)v29;
  a1[2] = v37;
  if (v30)
    operator delete(v30);
LABEL_42:
  a1[1] = (char *)v29;
  return a1;
}

void sub_23A0496EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A049708(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  float *v15;
  float *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  char *v30;
  char *v31;
  float v32;
  float v33;
  void *__p;
  char *v35;
  _BYTE *v36;
  char *v37;
  _BYTE *v38;
  float *v39;
  _BYTE *v40;

  if (a4)
  {
    objc_msgSend_nextTokensForInputs_AndforMaskPosition_(a4, (const char *)a2, a3, a5, a5);
    v7 = v38;
    v8 = v40 - v38;
    if (v40 == v38)
    {
      v9 = 0;
      v37 = 0;
      v36 = 0;
    }
    else
    {
      if (v8 < 0)
        sub_239FEBE68();
      v9 = (char *)operator new(v40 - v38);
      v10 = &v9[4 * (v8 >> 2)];
      memcpy(v9, v38, v8);
      v37 = 0;
      v36 = 0;
      v11 = 4 * (v8 >> 2);
      if (v10 != v9)
      {
        if (v11 < 0)
          sub_239FEBE68();
        v12 = (char *)operator new(v10 - v9);
        v13 = &v12[4 * (v11 >> 2)];
        v36 = v12;
        memcpy(v12, v9, v11);
        v37 = v13;
      }
    }
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v38 = 0;
    v37 = 0;
    v36 = 0;
  }
  if (v9)
  {
    operator delete(v9);
    v7 = v38;
  }
  if (v7)
    operator delete(v7);
  v39 = 0;
  v14 = v37 - v36;
  if (v37 == v36)
  {
    v16 = 0;
    v15 = 0;
    v17 = *(_QWORD **)(a2 + 104);
    v18 = (_QWORD *)(a2 + 112);
    if (v17 == (_QWORD *)(a2 + 112))
      goto LABEL_27;
    goto LABEL_21;
  }
  if (v14 < 0)
    sub_239FEBE68();
  v15 = (float *)operator new(v37 - v36);
  v16 = &v15[v14 >> 2];
  v39 = v15;
  memcpy(v15, v36, v14);
  v17 = *(_QWORD **)(a2 + 104);
  v18 = (_QWORD *)(a2 + 112);
  if (v17 != (_QWORD *)(a2 + 112))
  {
    do
    {
LABEL_21:
      v15[*((unsigned int *)v17 + 7)] = 0.00000011921;
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != v18);
  }
LABEL_27:
  if (v15 == v16)
  {
    v28 = 0;
    __p = 0;
    v35 = 0;
  }
  else
  {
    v22 = (char *)v16 - (char *)v15 - 4;
    v23 = v15;
    if (v22 < 4)
      goto LABEL_53;
    v24 = (v22 >> 2) + 1;
    v23 = &v15[v24 & 0x7FFFFFFFFFFFFFFELL];
    v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
    v26 = v15;
    do
    {
      LODWORD(v32) = *(_QWORD *)v26;
      v33 = logf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v26)));
      *(float *)&v27 = logf(v32);
      *((float *)&v27 + 1) = v33;
      *(_QWORD *)v26 = v27;
      v26 += 2;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_53:
      do
      {
        *v23 = logf(*v23);
        ++v23;
      }
      while (v23 != v16);
    }
    if ((char *)v16 - (char *)v15 < 0)
      sub_239FEBE68();
    v28 = (char *)operator new((char *)v16 - (char *)v15);
    __p = v28;
    memcpy(v28, v15, (char *)v16 - (char *)v15);
    v35 = &v28[4 * (v16 - v15)];
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v29 = v35 - v28;
  if (v35 != v28)
  {
    if (v29 < 0)
      sub_239FEBE68();
    v30 = (char *)operator new(v35 - v28);
    *(_QWORD *)a1 = v30;
    v31 = &v30[4 * (v29 >> 2)];
    *(_QWORD *)(a1 + 16) = v31;
    memcpy(v30, v28, v29);
    *(_QWORD *)(a1 + 8) = v31;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  if (__p)
    operator delete(__p);
  if (v39)
    operator delete(v39);
  if (v36)
    operator delete(v36);
}

void sub_23A049B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, void *);
  v16 = va_arg(va1, _QWORD);
  v10 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v10;
    operator delete(v10);
  }
  sub_239FF38A8((uint64_t)va);
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
  if (v7)
    operator delete(v7);
  sub_23A01D470((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23A049C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;
  void *v28;

  v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(_QWORD *)(v25 - 120) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 104);
  if (v28)
  {
    *(_QWORD *)(v25 - 96) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A049C5C()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_23A04A22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23A04A500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_23A04A5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23A04A5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A04A608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A04A6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A04A7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A04A854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A04A918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A04A930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A04AAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A04AAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A04AB54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A04B50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,char *a34,uint64_t a35,char a36,char *a37,uint64_t a38,char a39,char *a40,uint64_t a41,void *a42)
{
  uint64_t v42;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((a32 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a27);
LABEL_7:
  sub_23A052488((uint64_t)&a33, a34);
  sub_23A052488((uint64_t)&a36, a37);
  sub_23A052488((uint64_t)&a39, a40);
  sub_239FEE2AC(&a42);
  sub_239FF38A8(v42 - 152);
  if (*(char *)(v42 - 113) < 0)
    operator delete(*(void **)(v42 - 136));

  _Unwind_Resume(a1);
}

void sub_23A04E7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,_Unwind_Exception *exception_object,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  void *v60;
  void *v61;
  void *v62;
  void *v63;

  sub_239FF5234((uint64_t)&a23);
  v60 = *(void **)(v58 - 144);
  if (v60)
  {
    *(_QWORD *)(v58 - 136) = v60;
    operator delete(v60);
  }
  operator delete(__p);
  if (exception_object)
    operator delete(exception_object);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
    v61 = a40;
    if (!a40)
    {
LABEL_7:
      sub_239FEE2AC(&a43);
      v62 = a46;
      if (!a46)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else
  {
    v61 = a40;
    if (!a40)
      goto LABEL_7;
  }
  a41 = (uint64_t)v61;
  operator delete(v61);
  sub_239FEE2AC(&a43);
  v62 = a46;
  if (!a46)
  {
LABEL_8:
    v63 = a49;
    if (!a49)
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_12:
  a47 = (uint64_t)v62;
  operator delete(v62);
  v63 = a49;
  if (!a49)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_13:
  a50 = (uint64_t)v63;
  operator delete(v63);
  _Unwind_Resume(a1);
}

uint64_t sub_23A04EB94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23A04EBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char __p[22];
  char v9;
  int blob_shape;
  _QWORD v11[20];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  blob_shape = espresso_network_query_blob_shape();
  v9 = 21;
  strcpy(__p, "Could not query blob!");
  sub_23A051FBC(&blob_shape, (uint64_t *)__p);
  if (v9 < 0)
    operator delete(*(void **)__p);
  espresso_buffer_pack_tensor_shape();
  v11[0] = a5;
  v12 = 65568;
  *(_WORD *)__p = 1;
  return sub_239FF3910(a1, (uint64_t)v11, __p);
}

void sub_23A04ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A04F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  if (a23 < 0)
    operator delete(__p);
  operator delete(v38);
  if (v37)
    operator delete(v37);
  operator delete(v36);
  if (a35)
    operator delete(a35);
  sub_239FF5234(v39 - 144);
  _Unwind_Resume(a1);
}

void sub_23A0501F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_23A04EB94((uint64_t)va);
  sub_23A05027C(v17 - 144);
  _Unwind_Resume(a1);
}

void sub_23A050224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  sub_239FF27B8(&a15);
  if (a27 < 0)
    operator delete(__p);
  sub_23A04EB94((uint64_t)&a28);
  sub_23A05027C(v28 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05027C(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void *)*((_QWORD *)v2 + 5);
      if (v6)
      {
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_23A050530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_23A0505A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  void *__p;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v24 = xmmword_23A0A30B0;
    qmemcpy(v23, "ut client bufferBinding output c", sizeof(v23));
    do
    {
      v4 = *(_QWORD *)(v2 + 80);
      v5 = *(_OWORD *)(v4 + 40);
      v6 = *(_OWORD *)(v4 + 24);
      v28 = *(_OWORD *)(v4 + 8);
      v29 = v6;
      v30 = v5;
      v7 = *(_OWORD *)(v4 + 88);
      v8 = *(_OWORD *)(v4 + 104);
      v9 = *(_OWORD *)(v4 + 72);
      v31 = *(_OWORD *)(v4 + 56);
      v32 = v9;
      v10 = *(_OWORD *)(v4 + 120);
      v11 = *(_OWORD *)(v4 + 136);
      v12 = *(_OWORD *)(v4 + 152);
      v38 = *(_QWORD *)(v4 + 168);
      v36 = v11;
      v37 = v12;
      v34 = v8;
      v35 = v10;
      v33 = v7;
      v27 = espresso_network_bind_buffer();
      v13 = operator new(0x20uLL);
      __p = v13;
      v26 = v24;
      *v13 = v23[1];
      *(_OWORD *)((char *)v13 + 12) = v23[0];
      *((_BYTE *)v13 + 28) = 0;
      sub_23A051FBC(&v27, (uint64_t *)&__p);
      if (SHIBYTE(v26) < 0)
        operator delete(__p);
      __p = (void *)(v2 + 16);
      v14 = sub_239FF42F8(v3 + 192, v2 + 16, (uint64_t)&unk_23A0A31B0, (__int128 **)&__p);
      v15 = v14;
      *((_DWORD *)v14 + 12) = *(_DWORD *)(v2 + 48);
      if ((uint64_t *)v2 != v14)
        sub_239FF49DC(v14 + 7, *(char **)(v2 + 56), *(char **)(v2 + 64), (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 3);
      v17 = *(_QWORD *)(v2 + 80);
      v16 = *(_QWORD *)(v2 + 88);
      if (v16)
      {
        v18 = (unint64_t *)(v16 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = (std::__shared_weak_count *)v15[11];
      v15[10] = v17;
      v15[11] = v16;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v2 = *(_QWORD *)v2;
    }
    while (v2);
  }
}

void sub_23A050780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A051278(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_23A05027C(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_23A051298(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05027C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_23A0512AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05027C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_23A0512C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if ((a36 & 0x80000000) == 0)
  {
    sub_23A05027C(v36 - 144);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_23A05027C(v36 - 144);
  _Unwind_Resume(a1);
}

void sub_23A05149C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A051550(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A052488(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A051600(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A052488(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A0516B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A052488(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23A051738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A0517C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A051850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A0518DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A051968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23A051B5C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239FF1A44();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_239FF1F64(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_23A051D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF5538((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A051D30(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_239FEBE68();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_23A051DFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23A051E20(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_239FEBE68();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_239FF1A44();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

int *sub_23A051FBC(int *result, uint64_t *a2)
{
  int *v2;
  std::runtime_error *exception;
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;

  if (*result)
  {
    v2 = result;
    sub_239FF4B20((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_239FEED88(" [espresso error: ", &v9, &v10);
    std::to_string(&v8, *v2);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v8;
    else
      v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    else
      size = v8.__r_.__value_.__l.__size_;
    v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_239FEED88("]", &v11, &v12);
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_250B0DBA8;
    __cxa_throw(exception, (struct type_info *)&unk_250B0D980, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_23A0520C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if (a21 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

_QWORD *sub_23A0521B0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_239FEBE68();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_23A05227C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23A0522A0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (__p)
  {
    v2 = __p;
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v2[5] = &off_250B0DCE8;
      v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      v7 = (void *)v2[7];
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      operator delete(v2);
      v2 = v3;
      if (!v3)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void *)v2[7];
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_10;
  }
}

uint64_t *sub_23A052354(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_23A041AE0(a1, a2, &v14, &v13, a3);
  if (*v6)
    return (uint64_t *)*v6;
  v8 = v6;
  v9 = (uint64_t *)operator new(0x50uLL);
  sub_23A051D30(v9 + 4, a4);
  v10 = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *v8 = (uint64_t)v9;
  v11 = (uint64_t *)**a1;
  v12 = v9;
  if (v11)
  {
    *a1 = v11;
    v12 = (uint64_t *)*v8;
  }
  sub_23A004110(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_23A052418(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A05242C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(_QWORD *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_23A052488(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    sub_23A052488(a1, *(_QWORD *)a2);
    sub_23A052488(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 7);
    if (v4)
    {
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_23A0524F8(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_23A041AE0(a1, a2, &v14, &v13, a3);
  if (*v6)
    return (uint64_t *)*v6;
  v8 = v6;
  v9 = (uint64_t *)operator new(0x50uLL);
  sub_23A0525D0(v9 + 4, a4);
  v10 = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *v8 = (uint64_t)v9;
  v11 = (uint64_t *)**a1;
  v12 = v9;
  if (v11)
  {
    *a1 = v11;
    v12 = (uint64_t *)*v8;
  }
  sub_23A004110(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_23A0525BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A0525D0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_239FEBE68();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_23A05269C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_23A09D910((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23A0526C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A0526D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0BF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A052700(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_23A052710(_QWORD *a1, const char **a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 __dst;
  unint64_t v14;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v14 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  *a1 = &off_250B0DB68;
  v11 = operator new(0x128uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_250B0DDF0;
  a1[1] = sub_239FF6D14((uint64_t)(v11 + 3), &__dst, a3);
  a1[2] = v11;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_23A052814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t **sub_23A052844(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x50uLL);
  v22 = v21 + 4;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_23A004110(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_23A0529C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_23A0529D4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x50uLL);
  v22 = v21 + 4;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_23A004110(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_23A052B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23A052B64(uint64_t **a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 *v11;
  void **v12;
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  char *v17;
  __int128 *v18;
  BOOL v19;
  char *v20;
  uint64_t **v21;
  char *v22;
  char *i;
  __int128 *v24;
  __int128 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  v5 = a1;
  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1])
      v8 = v6[1];
    else
      v8 = (uint64_t)v6;
    v27 = (uint64_t)a1;
    v29 = v8;
    if (!v8)
    {
      v22 = 0;
      goto LABEL_53;
    }
    v9 = *(char **)(v8 + 16);
    if (v9)
    {
      v10 = *(char **)v9;
      if (*(_QWORD *)v9 == v8)
      {
        *(_QWORD *)v9 = 0;
        while (1)
        {
          v26 = (char *)*((_QWORD *)v9 + 1);
          if (!v26)
            break;
          do
          {
            v9 = v26;
            v26 = *(char **)v26;
          }
          while (v26);
        }
      }
      else
      {
        for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
        {
          do
          {
            v9 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
      }
    }
    v28 = (uint64_t)v9;
    if (a2 == a3)
    {
      v21 = a1;
      sub_23A052488((uint64_t)a1, (char *)v8);
      if (!v9)
        goto LABEL_54;
      goto LABEL_50;
    }
    v11 = a2;
    while (1)
    {
      if ((__int128 *)v8 != v11)
      {
        v12 = (void **)(v8 + 32);
        v13 = *((_BYTE *)v11 + 55);
        if (*(char *)(v8 + 55) < 0)
        {
          if (v13 >= 0)
            v15 = v11 + 2;
          else
            v15 = (void *)*((_QWORD *)v11 + 4);
          if (v13 >= 0)
            v16 = *((unsigned __int8 *)v11 + 55);
          else
            v16 = *((_QWORD *)v11 + 5);
          sub_23A0009DC(v12, v15, v16);
        }
        else if ((*((_BYTE *)v11 + 55) & 0x80) != 0)
        {
          sub_23A000918(v12, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
        }
        else
        {
          v14 = v11[2];
          *(_QWORD *)(v8 + 48) = *((_QWORD *)v11 + 6);
          *(_OWORD *)v12 = v14;
        }
        sub_239FF49DC((_QWORD *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), (uint64_t)(*((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7)) >> 3);
        v8 = v29;
      }
      sub_23A052E1C(v5, v8);
      v8 = v28;
      v29 = v28;
      if (v28)
      {
        v9 = *(char **)(v28 + 16);
        if (v9)
        {
          v17 = *(char **)v9;
          if (*(_QWORD *)v9 == v28)
          {
            *(_QWORD *)v9 = 0;
            while (1)
            {
              v20 = (char *)*((_QWORD *)v9 + 1);
              if (!v20)
                break;
              do
              {
                v9 = v20;
                v20 = *(char **)v20;
              }
              while (v20);
            }
          }
          else
          {
            for (*((_QWORD *)v9 + 1) = 0; v17; v17 = (char *)*((_QWORD *)v9 + 1))
            {
              do
              {
                v9 = v17;
                v17 = *(char **)v17;
              }
              while (v17);
            }
          }
        }
        v28 = (uint64_t)v9;
        v18 = (__int128 *)*((_QWORD *)v11 + 1);
        if (v18)
        {
          do
          {
LABEL_35:
            v4 = v18;
            v18 = *(__int128 **)v18;
          }
          while (v18);
          goto LABEL_39;
        }
      }
      else
      {
        v9 = 0;
        v18 = (__int128 *)*((_QWORD *)v11 + 1);
        if (v18)
          goto LABEL_35;
      }
      do
      {
        v4 = (__int128 *)*((_QWORD *)v11 + 2);
        v19 = *(_QWORD *)v4 == (_QWORD)v11;
        v11 = v4;
      }
      while (!v19);
LABEL_39:
      if (v8)
      {
        v11 = v4;
        if (v4 != a3)
          continue;
      }
      v21 = (uint64_t **)v27;
      sub_23A052488(v27, (char *)v8);
      if (!v9)
        break;
LABEL_50:
      for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
        v9 = i;
      a1 = v21;
      v22 = v9;
LABEL_53:
      sub_23A052488((uint64_t)a1, v22);
      break;
    }
  }
LABEL_54:
  if (v4 != a3)
  {
    do
    {
      sub_23A052F70(v5, v4 + 2);
      v24 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(__int128 **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (__int128 *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v25 == (_QWORD)v4;
          v4 = v25;
        }
        while (!v19);
      }
      v4 = v25;
    }
    while (v25 != a3);
  }
}

void sub_23A052E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A052F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A052E1C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  const void *v7;
  size_t v8;
  uint64_t **v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    v6 = *(char *)(a2 + 55);
    if (v6 >= 0)
      v7 = (const void *)(a2 + 32);
    else
      v7 = *(const void **)(a2 + 32);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 55);
    else
      v8 = *(_QWORD *)(a2 + 40);
    while (1)
    {
      v5 = (uint64_t **)v4;
      v12 = (const void *)v4[4];
      v10 = v4 + 4;
      v11 = v12;
      v13 = *((char *)v10 + 23);
      if (v13 >= 0)
        v14 = v10;
      else
        v14 = v11;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v10 + 23);
      else
        v15 = v10[1];
      if (v15 >= v8)
        v16 = v8;
      else
        v16 = v15;
      v17 = memcmp(v7, v14, v16);
      if (v17)
      {
        if (v17 < 0)
          goto LABEL_8;
LABEL_22:
        v4 = v5[1];
        if (!v4)
        {
          v9 = v5 + 1;
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >= v15)
          goto LABEL_22;
LABEL_8:
        v4 = *v5;
        v9 = v5;
        if (!*v5)
          goto LABEL_25;
      }
    }
  }
  v9 = a1 + 1;
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *v9 = (uint64_t *)a2;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)a2;
  if (v18)
  {
    *a1 = v18;
    v19 = *v9;
  }
  sub_23A004110(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return a2;
}

uint64_t sub_23A052F1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23A052488(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_23A052488(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

_QWORD *sub_23A052F70(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  const void *v10;
  size_t v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  _QWORD *v22;

  v4 = a1 + 1;
  v5 = operator new(0x50uLL);
  v22 = v5;
  v6 = sub_23A0525D0(v5 + 4, a2);
  v7 = (_QWORD *)*v4;
  v8 = v4;
  if (*v4)
  {
    v9 = *((char *)v5 + 55);
    if (v9 >= 0)
      v10 = v6;
    else
      v10 = (const void *)v5[4];
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)v5 + 55);
    else
      v11 = v5[5];
    while (1)
    {
      v4 = v7;
      v14 = (const void *)v7[4];
      v12 = v7 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v11)
        v18 = v11;
      else
        v18 = v17;
      v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v7 = (_QWORD *)v4[1];
        if (!v7)
        {
          v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17)
          goto LABEL_22;
LABEL_8:
        v7 = (_QWORD *)*v4;
        v8 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v4;
  *v8 = v5;
  v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    v5 = (_QWORD *)*v8;
  }
  sub_23A004110(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_23A05308C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A05242C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A0530A0(uint64_t **a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 *v11;
  void **v12;
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  char *v17;
  __int128 *v18;
  BOOL v19;
  char *v20;
  uint64_t **v21;
  char *v22;
  char *i;
  __int128 *v24;
  __int128 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  v5 = a1;
  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1])
      v8 = v6[1];
    else
      v8 = (uint64_t)v6;
    v27 = (uint64_t)a1;
    v29 = v8;
    if (!v8)
    {
      v22 = 0;
      goto LABEL_53;
    }
    v9 = *(char **)(v8 + 16);
    if (v9)
    {
      v10 = *(char **)v9;
      if (*(_QWORD *)v9 == v8)
      {
        *(_QWORD *)v9 = 0;
        while (1)
        {
          v26 = (char *)*((_QWORD *)v9 + 1);
          if (!v26)
            break;
          do
          {
            v9 = v26;
            v26 = *(char **)v26;
          }
          while (v26);
        }
      }
      else
      {
        for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
        {
          do
          {
            v9 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
      }
    }
    v28 = (uint64_t)v9;
    if (a2 == a3)
    {
      v21 = a1;
      sub_23A052488((uint64_t)a1, (char *)v8);
      if (!v9)
        goto LABEL_54;
      goto LABEL_50;
    }
    v11 = a2;
    while (1)
    {
      if ((__int128 *)v8 != v11)
      {
        v12 = (void **)(v8 + 32);
        v13 = *((_BYTE *)v11 + 55);
        if (*(char *)(v8 + 55) < 0)
        {
          if (v13 >= 0)
            v15 = v11 + 2;
          else
            v15 = (void *)*((_QWORD *)v11 + 4);
          if (v13 >= 0)
            v16 = *((unsigned __int8 *)v11 + 55);
          else
            v16 = *((_QWORD *)v11 + 5);
          sub_23A0009DC(v12, v15, v16);
        }
        else if ((*((_BYTE *)v11 + 55) & 0x80) != 0)
        {
          sub_23A000918(v12, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
        }
        else
        {
          v14 = v11[2];
          *(_QWORD *)(v8 + 48) = *((_QWORD *)v11 + 6);
          *(_OWORD *)v12 = v14;
        }
        sub_23A01DF14((_QWORD *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), (uint64_t)(*((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7)) >> 2);
        v8 = v29;
      }
      sub_23A052E1C(v5, v8);
      v8 = v28;
      v29 = v28;
      if (v28)
      {
        v9 = *(char **)(v28 + 16);
        if (v9)
        {
          v17 = *(char **)v9;
          if (*(_QWORD *)v9 == v28)
          {
            *(_QWORD *)v9 = 0;
            while (1)
            {
              v20 = (char *)*((_QWORD *)v9 + 1);
              if (!v20)
                break;
              do
              {
                v9 = v20;
                v20 = *(char **)v20;
              }
              while (v20);
            }
          }
          else
          {
            for (*((_QWORD *)v9 + 1) = 0; v17; v17 = (char *)*((_QWORD *)v9 + 1))
            {
              do
              {
                v9 = v17;
                v17 = *(char **)v17;
              }
              while (v17);
            }
          }
        }
        v28 = (uint64_t)v9;
        v18 = (__int128 *)*((_QWORD *)v11 + 1);
        if (v18)
        {
          do
          {
LABEL_35:
            v4 = v18;
            v18 = *(__int128 **)v18;
          }
          while (v18);
          goto LABEL_39;
        }
      }
      else
      {
        v9 = 0;
        v18 = (__int128 *)*((_QWORD *)v11 + 1);
        if (v18)
          goto LABEL_35;
      }
      do
      {
        v4 = (__int128 *)*((_QWORD *)v11 + 2);
        v19 = *(_QWORD *)v4 == (_QWORD)v11;
        v11 = v4;
      }
      while (!v19);
LABEL_39:
      if (v8)
      {
        v11 = v4;
        if (v4 != a3)
          continue;
      }
      v21 = (uint64_t **)v27;
      sub_23A052488(v27, (char *)v8);
      if (!v9)
        break;
LABEL_50:
      for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
        v9 = i;
      a1 = v21;
      v22 = v9;
LABEL_53:
      sub_23A052488((uint64_t)a1, v22);
      break;
    }
  }
LABEL_54:
  if (v4 != a3)
  {
    do
    {
      sub_23A053358(v5, v4 + 2);
      v24 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(__int128 **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (__int128 *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v25 == (_QWORD)v4;
          v4 = v25;
        }
        while (!v19);
      }
      v4 = v25;
    }
    while (v25 != a3);
  }
}

void sub_23A053344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A052F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A053358(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  const void *v10;
  size_t v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  _QWORD *v22;

  v4 = a1 + 1;
  v5 = operator new(0x50uLL);
  v22 = v5;
  v6 = sub_23A051D30(v5 + 4, a2);
  v7 = (_QWORD *)*v4;
  v8 = v4;
  if (*v4)
  {
    v9 = *((char *)v5 + 55);
    if (v9 >= 0)
      v10 = v6;
    else
      v10 = (const void *)v5[4];
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)v5 + 55);
    else
      v11 = v5[5];
    while (1)
    {
      v4 = v7;
      v14 = (const void *)v7[4];
      v12 = v7 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v11)
        v18 = v11;
      else
        v18 = v17;
      v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v7 = (_QWORD *)v4[1];
        if (!v7)
        {
          v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17)
          goto LABEL_22;
LABEL_8:
        v7 = (_QWORD *)*v4;
        v8 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v4;
  *v8 = v5;
  v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    v5 = (_QWORD *)*v8;
  }
  sub_23A004110(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_23A053474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A05242C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A053488(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void **v15[2];

  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        v15[0] = (void **)(v8 + 2);
        v15[1] = (void **)(v8 + 5);
        sub_23A05375C(v15, a2 + 2);
        v9 = (_QWORD *)*v8;
        sub_23A053604(a1, (uint64_t)v8);
        a2 = (_QWORD *)*a2;
        v8 = v9;
        if (!v9)
          goto LABEL_9;
      }
      while (1)
      {
        v10 = (_QWORD *)*v8;
        v8[5] = &off_250B0DCE8;
        v11 = (std::__shared_weak_count *)v8[11];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
            break;
        }
        v14 = (void *)v8[7];
        if (v14)
          goto LABEL_18;
LABEL_19:
        if (*((char *)v8 + 39) < 0)
          operator delete((void *)v8[2]);
        operator delete(v8);
        v8 = v10;
        if (!v10)
          return;
      }
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = (void *)v8[7];
      if (!v14)
        goto LABEL_19;
LABEL_18:
      v8[8] = v14;
      operator delete(v14);
      goto LABEL_19;
    }
  }
LABEL_9:
  while (a2 != a3)
  {
    sub_23A053F08(a1, (__int128 *)a2 + 1);
    a2 = (_QWORD *)*a2;
  }
}

void sub_23A0535D4(void *a1)
{
  _QWORD *v1;
  int v2;

  __cxa_begin_catch(a1);
  sub_23A0522A0(v2, v1);
  __cxa_rethrow();
}

void sub_23A0535F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23A053604(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_239FF3090((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = sub_23A0538A4((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!v10)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *v10;
  *v10 = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

void ***sub_23A05375C(void ***a1, size_t *a2)
{
  size_t *v2;
  void **v4;
  __int128 v5;
  void **v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = a2;
  v4 = *a1;
  if (v4 == (void **)a2)
    goto LABEL_10;
  if (*((char *)v4 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      v7 = v2[1];
    }
    sub_23A0009DC(v4, a2, v7);
LABEL_10:
    v6 = a1[1];
    *((_DWORD *)v6 + 2) = *((_DWORD *)v2 + 8);
    if (v6 == (void **)(v2 + 3))
      goto LABEL_12;
    goto LABEL_11;
  }
  if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
  {
    v5 = *(_OWORD *)a2;
    v4[2] = (void *)a2[2];
    *(_OWORD *)v4 = v5;
    v6 = a1[1];
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 8);
    if (v6 == (void **)(a2 + 3))
      goto LABEL_12;
LABEL_11:
    sub_239FF49DC(v6 + 2, (char *)v2[5], (char *)v2[6], (uint64_t)(v2[6] - v2[5]) >> 3);
    goto LABEL_12;
  }
  sub_23A000918(v4, (void *)*a2, a2[1]);
  v6 = a1[1];
  *((_DWORD *)v6 + 2) = *((_DWORD *)v2 + 8);
  if (v6 != (void **)(v2 + 3))
    goto LABEL_11;
LABEL_12:
  v9 = v2[8];
  v8 = v2[9];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (std::__shared_weak_count *)v6[6];
  v6[5] = (void *)v9;
  v6[6] = (void *)v8;
  if (!v12)
    return a1;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

uint64_t *sub_23A0538A4(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t prime;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  uint8x8_t v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  BOOL v41;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v12 = 1;
    if (v6 >= 3)
      v12 = (v6 & (v6 - 1)) != 0;
    v13 = v12 | (2 * v6);
    v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14)
      prime = v14;
    else
      prime = v13;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_15;
    if (prime < v6)
    {
      v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2)
            v16 = v18;
          if (prime <= v16)
            prime = v16;
          if (prime >= v6)
            goto LABEL_28;
LABEL_15:
          sub_23A053BFC(a1, prime);
          goto LABEL_28;
        }
      }
      v19 = std::__next_prime(v16);
      if (prime <= v19)
        prime = v19;
      if (prime < v6)
        goto LABEL_15;
    }
LABEL_28:
    v6 = *(_QWORD *)(a1 + 8);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL)
      goto LABEL_4;
    goto LABEL_29;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  v11 = a2;
  if (v6 <= a2)
    v11 = a2 % v6;
LABEL_31:
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v11);
  if (!v21)
    return 0;
  v22 = a3[23];
  if (v22 >= 0)
    v23 = a3[23];
  else
    v23 = *((_QWORD *)a3 + 1);
  if (v22 < 0)
    a3 = *(_BYTE **)a3;
  if (v10 >= 2)
  {
    v43 = 0;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v46 = v21[1];
      v47 = v46;
      if (v46 >= v6)
        v47 = v46 % v6;
      if (v47 != v11)
        break;
      if (v46 == a2
        && ((v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (v49 = *((unsigned __int8 *)v21 + 39))
          : (v49 = v21[3]),
            v49 == v23))
      {
        v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v51 = v48 - 1;
          v52 = a3;
          do
          {
            v54 = *(unsigned __int8 *)v50;
            v50 = (const void **)((char *)v50 + 1);
            v53 = v54;
            v56 = *v52++;
            v55 = v56;
            v39 = v51-- != 0;
            v57 = v39;
            v41 = v53 == v55;
            v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          v44 = 1;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v24 = 0;
    v25 = v6 - 1;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v29 = v21[1];
      if ((v29 & v25) != v11)
        break;
      if (v29 == a2
        && ((v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (v31 = *((unsigned __int8 *)v21 + 39))
          : (v31 = v21[3]),
            v31 == v23))
      {
        v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v33 = v30 - 1;
          v34 = a3;
          do
          {
            v36 = *(unsigned __int8 *)v32;
            v32 = (const void **)((char *)v32 + 1);
            v35 = v36;
            v38 = *v34++;
            v37 = v38;
            v39 = v33-- != 0;
            v40 = v39;
            v41 = v35 == v37;
            v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          v26 = 1;
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

void sub_23A053BFC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  const void *v26;
  uint64_t *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  if (a2)
  {
    if (a2 >> 61)
      sub_239FF1A44();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v35 = v9.u32[0];
        do
        {
          v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (uint64_t **)v12;
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              v14 = (uint64_t *)*v12;
              v36 = v8;
              if (*v12)
              {
                v15 = v12[3];
                if (*((char *)v12 + 39) >= 0)
                  v16 = *((unsigned __int8 *)v12 + 39);
                else
                  v16 = v12[3];
                if ((*((_BYTE *)v12 + 39) & 0x80) == 0)
                {
                  if (*((_BYTE *)v12 + 39))
                  {
                    v17 = (uint64_t *)*v12;
                    v18 = v12;
LABEL_32:
                    v14 = v17;
                    v19 = *((unsigned __int8 *)v17 + 39);
                    v20 = (char)v19;
                    if ((v19 & 0x80u) != 0)
                      v19 = v14[3];
                    if (v16 == v19)
                    {
                      if (v20 >= 0)
                        v21 = (unsigned __int8 *)(v14 + 2);
                      else
                        v21 = (unsigned __int8 *)v14[2];
                      v22 = (unsigned __int8 *)(v12 + 2);
                      v23 = *((unsigned __int8 *)v12 + 39);
                      while (*v22 == *v21)
                      {
                        ++v22;
                        ++v21;
                        if (!--v23)
                        {
                          v17 = (uint64_t *)*v14;
                          v18 = v14;
                          v14 = 0;
                          if (v17)
                            goto LABEL_32;
                          goto LABEL_58;
                        }
                      }
                    }
                  }
                  else
                  {
                    v33 = *((unsigned __int8 *)v14 + 39);
                    if ((v33 & 0x80u) != 0)
                      v33 = v14[3];
                    v18 = v12;
                    if (v33 == *((unsigned __int8 *)v12 + 39))
                    {
                      do
                      {
                        v18 = v14;
                        v14 = (uint64_t *)*v14;
                        if (!v14)
                          break;
                        v34 = *((unsigned __int8 *)v14 + 39);
                        if ((v34 & 0x80u) != 0)
                          v34 = v14[3];
                      }
                      while (v16 == v34);
                    }
                  }
                  goto LABEL_58;
                }
                v24 = *((char *)v14 + 39) < 0;
                v25 = *((unsigned __int8 *)v14 + 39);
                if ((v25 & 0x80u) != 0)
                  v25 = v14[3];
                if (v16 == v25)
                {
                  v26 = (const void *)v12[2];
                  v18 = v12;
                  while (1)
                  {
                    v27 = v14;
                    v30 = (const void *)v14[2];
                    v28 = v14 + 2;
                    v29 = v30;
                    if (v24)
                      v31 = v29;
                    else
                      v31 = v28;
                    if (memcmp(v26, v31, v15))
                    {
                      v14 = v27;
                      goto LABEL_58;
                    }
                    v14 = (uint64_t *)*v27;
                    if (!*v27)
                      break;
                    v24 = *((char *)v14 + 39) < 0;
                    v32 = *((unsigned __int8 *)v14 + 39);
                    if ((v32 & 0x80u) != 0)
                      v32 = v14[3];
                    v18 = v27;
                    if (v16 != v32)
                      goto LABEL_58;
                  }
                  v18 = v27;
                  goto LABEL_58;
                }
              }
              v18 = v12;
LABEL_58:
              *v7 = v14;
              *v18 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
              v8 = v36;
              v10 = v35;
              goto LABEL_18;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (uint64_t **)v12;
            v8 = v13;
          }
LABEL_18:
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_23A053F08(_QWORD *a1, __int128 *a2)
{
  char *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  char v10;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = sub_239FF5124((_QWORD *)v4 + 2, a2);
  v6 = v4[39];
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = (uint64_t *)*((_QWORD *)v4 + 2);
  if (v6 >= 0)
    v8 = v4[39];
  else
    v8 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 1) = sub_239FF3090((uint64_t)&v10, v7, v8);
  return sub_23A053604(a1, (uint64_t)v4);
}

void sub_23A053F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FF4788(&a9);
  _Unwind_Resume(a1);
}

void sub_23A053FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FF4788(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_23A053FC4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239FF3090((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x60uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = &off_250B0DCE8;
  *((_DWORD *)v15 + 12) = 4;
  *((_QWORD *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_239FF4830(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23A0543F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A05440C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void **v15[2];

  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        v15[0] = (void **)(v8 + 2);
        v15[1] = (void **)(v8 + 5);
        sub_23A05375C(v15, a2 + 2);
        v9 = (_QWORD *)*v8;
        sub_23A054588(a1, (uint64_t)v8);
        a2 = (_QWORD *)*a2;
        v8 = v9;
        if (!v9)
          goto LABEL_9;
      }
      while (1)
      {
        v10 = (_QWORD *)*v8;
        v8[5] = &off_250B0DCE8;
        v11 = (std::__shared_weak_count *)v8[11];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
            break;
        }
        v14 = (void *)v8[7];
        if (v14)
          goto LABEL_18;
LABEL_19:
        if (*((char *)v8 + 39) < 0)
          operator delete((void *)v8[2]);
        operator delete(v8);
        v8 = v10;
        if (!v10)
          return;
      }
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = (void *)v8[7];
      if (!v14)
        goto LABEL_19;
LABEL_18:
      v8[8] = v14;
      operator delete(v14);
      goto LABEL_19;
    }
  }
LABEL_9:
  while (a2 != a3)
  {
    sub_23A0546E0(a1, (__int128 *)a2 + 1);
    a2 = (_QWORD *)*a2;
  }
}

void sub_23A054558(void *a1)
{
  _QWORD *v1;
  int v2;

  __cxa_begin_catch(a1);
  sub_23A0522A0(v2, v1);
  __cxa_rethrow();
}

void sub_23A054574(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23A054588(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_239FF3090((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = sub_23A0538A4((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!v10)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *v10;
  *v10 = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t sub_23A0546E0(_QWORD *a1, __int128 *a2)
{
  char *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  char v10;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = sub_239FF6978((_QWORD *)v4 + 2, a2);
  v6 = v4[39];
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = (uint64_t *)*((_QWORD *)v4 + 2);
  if (v6 >= 0)
    v8 = v4[39];
  else
    v8 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 1) = sub_239FF3090((uint64_t)&v10, v7, v8);
  return sub_23A054588(a1, (uint64_t)v4);
}

void sub_23A054770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FF4788(&a9);
  _Unwind_Resume(a1);
}

void sub_23A054788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239FF4788(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05479C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239FF4830(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_23A0548DC(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_23A0548B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05027C(v1);
  _Unwind_Resume(a1);
}

void sub_23A0548C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05027C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A0548DC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239FF3090((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x40uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_23A051D30(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239FF4830(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_23A054D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A054D2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A054D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A054D2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A054D2C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_23A054D88(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239FF3090((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_QWORD *)v26 + 5) = &off_250B0DCE8;
  *((_DWORD *)v26 + 12) = 4;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_QWORD *)v26 + 11) = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239FF4830(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23A0551EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A055200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239FF4788((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A055218(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239FF3090((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = v26 + 2;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_239FF1F64(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239FF4830(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23A055660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A054D2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A055674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A054D2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A05568C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250B0BFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A0556A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250B0BFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A0556D4(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v4;
  void *v5;

  v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      v4 = *(char **)v2;
      v5 = (void *)*((_QWORD *)v2 + 5);
      if (v5)
      {
        *((_QWORD *)v2 + 6) = v5;
        operator delete(v5);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
}

void sub_23A0557F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A055920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A055E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_23A0563CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_23A0568E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_23A056E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_23A0572D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23A057484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A057540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A057590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A057818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  const void *v25;
  void *v26;
  int v27;

  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      if (v25)
        CFRelease(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void sub_23A057964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A057B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23A057BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A057DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (__p)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_23A058024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23A058388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23A0585B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A0585CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0585E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A0585F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A058604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A05861C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A058734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A058790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A0588D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A058A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A058D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;

  if (v21)
    operator delete(v21);
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_23A059130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    sub_239FF27B8(&a17);
    _Unwind_Resume(a1);
  }
  sub_239FF27B8(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05940C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  sub_239FF1A6C((uint64_t)&v9);

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = __cxa_begin_catch(a1);
  v7 = sub_239FF9B50((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_23A059490(const char **a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unint64_t v19;
  void *__dst[2];
  unint64_t v21;

  v6 = operator new();
  v7 = *a1;
  v8 = strlen(*a1);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    v21 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v21) = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  v13 = strlen(a2);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_239FEBDE0();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    __p[1] = v14;
    v19 = v17 | 0x8000000000000000;
    __p[0] = v15;
    goto LABEL_16;
  }
  HIBYTE(v19) = v13;
  v15 = __p;
  if (v13)
LABEL_16:
    memcpy(v15, a2, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  sub_23A0134C8(v6, (uint64_t)__dst, (uint64_t)__p);
  *a3 = v6;
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    goto LABEL_21;
}

void sub_23A059634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x23B83FE88](v20, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_23A059CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  void *v51;
  void *v52;
  uint64_t v53;
  void *v55;

  sub_239FF5234((uint64_t)&a27);
  sub_239FF5234((uint64_t)&a35);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
    v55 = *(void **)(v53 - 256);
    if (!v55)
      goto LABEL_7;
  }
  else
  {
    v55 = *(void **)(v53 - 256);
    if (!v55)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  *(_QWORD *)(v53 - 248) = v55;
  operator delete(v55);
  goto LABEL_7;
}

void sub_23A05A0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23A05A0E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A05A0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23A05A10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23A05A124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_23A05A1C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23A05A1DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23A05A1C4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t sub_23A05A234@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (MEMORY[0x24BE68150])
  {
    sub_23A09E804();
    v3 = sub_23A05A7D0(&qword_256941620);
    v4 = *(void **)(v3 - 8);
    ((void (*)(void))MEMORY[0x24BDAC7A8])();
    v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_23A05A810(v49, v50);
    sub_23A09E864();
    if (v1)
    {
      v45 = sub_23A09E87C();
      v46 = &v42;
      v44 = *(_QWORD *)(v45 - 8);
      v7 = *(_QWORD *)(v44 + 64);
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      v42 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
      v43 = v1;
      v8 = (char *)&v42 - v42;
      v10 = v50;
      v9 = v51;
      sub_23A05A810(v49, v50);
      v11 = sub_23A09E858();
      v12 = *(_QWORD *)(v11 - 8);
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x23B83F87C](v10, *(_QWORD *)(v9 + 8));
      sub_23A09E84C();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v47 = 0;
      v48 = 0xE000000000000000;
      sub_23A09E8F4();
      swift_bridgeObjectRelease();
      v47 = 0xD00000000000001ALL;
      v48 = 0x800000023A0B8AB0;
      v16 = v50;
      v15 = v51;
      sub_23A05A810(v49, v50);
      MEMORY[0x23B83F834](v16, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
      sub_23A09E8B8();
      swift_bridgeObjectRelease();
      v17 = sub_23A09E8B8();
      MEMORY[0x24BDAC7A8](v17);
      v19 = v44;
      v18 = v45;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))((char *)&v42 - v42, v8, v45);
      sub_23A09E8AC();
      sub_23A09E8B8();
      swift_bridgeObjectRelease();
      v20 = v47;
      v21 = v48;
      sub_23A05A78C();
      swift_allocError();
      *(_QWORD *)v22 = v20;
      *(_QWORD *)(v22 + 8) = v21;
      *(_BYTE *)(v22 + 16) = 0;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    }
    else
    {
      v43 = v4;
      v45 = a1;
      v46 = &v42;
      v25 = sub_23A09E840();
      v26 = *(_QWORD *)(v25 - 8);
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      v28 = v3;
      v29 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      v44 = v28;
      sub_23A09E810();
      v42 = sub_23A09E834();
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      swift_bridgeObjectRetain();
      v32 = sub_23A09E888();
      v33 = sub_23A09E8D0();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        v47 = v35;
        *(_DWORD *)v34 = 136315138;
        swift_bridgeObjectRetain();
        v52 = sub_23A05AA98(v42, v31, &v47);
        sub_23A09E8DC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_239FE9000, v32, v33, "Model Catalog version for text and token encoders is %s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B8406A4](v35, -1, -1);
        MEMORY[0x23B8406A4](v34, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v36 = sub_23A09E7F8();
      v37 = *(_QWORD *)(v36 - 8);
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      v39 = (char *)&v42 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      v40 = v44;
      v41 = sub_23A09E81C();
      MEMORY[0x23B83F7F8](v41);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
      (*((void (**)(char *, uint64_t))v43 + 1))(v6, v40);
    }
    return sub_23A05B394((uint64_t)v49);
  }
  else
  {
    sub_23A05A78C();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000032;
    *(_QWORD *)(v23 + 8) = 0x800000023A0B8A70;
    *(_BYTE *)(v23 + 16) = 0;
    return swift_willThrow();
  }
}

unint64_t sub_23A05A78C()
{
  unint64_t result;

  result = qword_256941618;
  if (!qword_256941618)
  {
    result = MEMORY[0x23B840668](&unk_23A0A45E8, &type metadata for ModelCatalogError);
    atomic_store(result, (unint64_t *)&qword_256941618);
  }
  return result;
}

uint64_t sub_23A05A7D0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B84065C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_23A05A810(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

id sub_23A05A91C()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id sub_23A05A93C()
{
  void *v0;
  objc_super v2;

  sub_23A09E894();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSUModelCatalogVisualGenerationBase();
  return objc_msgSendSuper2(&v2, sel_init);
}

id sub_23A05AA28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CSUModelCatalogVisualGenerationBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23A05AA98(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23A05AB68(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23A05B3B4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23A05B3B4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_23A05B394((uint64_t)v12);
  return v7;
}

uint64_t sub_23A05AB68(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23A09E8E8();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23A05AD20(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23A09E90C();
  if (!v8)
  {
    sub_23A09E918();
    __break(1u);
LABEL_17:
    result = sub_23A09E924();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23A05AD20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23A05ADB4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23A05AF8C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23A05AF8C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23A05ADB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23A05AF28(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23A09E900();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23A09E918();
      __break(1u);
LABEL_10:
      v2 = sub_23A09E8C4();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23A09E924();
    __break(1u);
LABEL_14:
    result = sub_23A09E918();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23A05AF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23A05A7D0(&qword_256941628);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23A05AF8C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23A05A7D0(&qword_256941628);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23A09E924();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CSUModelCatalogVisualGenerationBase()
{
  uint64_t result;

  result = qword_2569421C0;
  if (!qword_2569421C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t destroy for ModelCatalogError(uint64_t a1)
{
  return sub_23A05B12C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_23A05B12C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s22CoreSceneUnderstanding17ModelCatalogErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23A05A1C4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ModelCatalogError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23A05A1C4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23A05B12C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for ModelCatalogError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ModelCatalogError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23A05B12C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelCatalogError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelCatalogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23A05B2C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23A05B2D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ModelCatalogError()
{
  return &type metadata for ModelCatalogError;
}

uint64_t sub_23A05B2E8()
{
  return type metadata accessor for CSUModelCatalogVisualGenerationBase();
}

uint64_t sub_23A05B2F0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23A09E8A0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23A05B35C()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23A05B368()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t sub_23A05B394(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23A05B3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_23A05B3F4(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250B0D730;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x23B83FE64](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_23A05B444(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_250B0C900;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0D730;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_250B0D730;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_23A089B90((_QWORD *)(a1 + 96));
  sub_23A05B588(a1, a3, a4, (uint64_t *)&v9);
  sub_23A089DAC(v7, &v9);
  sub_23A089B98((uint64_t *)&v9);
  return a1;
}

void sub_23A05B500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A089B98(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x23B83FE64](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x23B83FE64](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  sub_23A05EF3C(v3, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A05B588@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD v25[33];
  uint64_t *v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;

  v28 = a2;
  v29 = a3;
  result = sub_23A05BC18(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_23A089B98(a4);
    result = sub_23A088274(&v28, 4uLL, a4);
    if (!*a4)
    {
      sub_23A089B98(a4);
      result = sub_23A05BC18(v28, v29, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_23A089B98(a4);
        result = sub_23A088274(&v28, 4uLL, a4);
        if (!*a4)
        {
          sub_23A089B98(a4);
          v27 = 0;
          result = sub_23A05BD84(v28, v29, &v27, a4);
          if (!*a4)
          {
            sub_23A089B98(a4);
            result = sub_23A088274(&v28, 4uLL, a4);
            if (!*a4)
            {
              sub_23A089B98(a4);
              v7 = v27;
              if (v29 < v27)
                v7 = v29;
              v24 = v28;
              v25[0] = v7;
              sub_23A05BEF0((uint64_t)&v24, &v26);
              v8 = v26;
              v26 = 0;
              sub_23A05EF3C((uint64_t **)(a1 + 16), v8);
              sub_23A05EF3C(&v26, 0);
              v9 = sub_23A0881F0(v27, 4uLL);
              result = sub_23A088274(&v28, v9, a4);
              if (!*a4)
              {
                sub_23A089B98(a4);
                LODWORD(v26) = 0;
                result = sub_23A05BD84(v28, v29, &v26, a4);
                if (!*a4)
                {
                  sub_23A089B98(a4);
                  result = sub_23A088274(&v28, 4uLL, a4);
                  if (!*a4)
                  {
                    sub_23A089B98(a4);
                    v10 = v26;
                    if (!(_DWORD)v26)
                    {
                      LODWORD(v24) = 13;
                      v12 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                      sub_23A00AE20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_23A00AE20(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_23A00AE20(v25, (uint64_t)") [", 3);
                      sub_23A00AE20(v25, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      sub_23A00AE20(v25, (uint64_t)"] ", 2);
                      sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                    }
                    if (v29 < v26)
                    {
                      LODWORD(v24) = 13;
                      v11 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                      sub_23A00AE20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_23A00AE20(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_23A00AE20(v25, (uint64_t)") [", 3);
                      sub_23A00AE20(v25, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      sub_23A00AE20(v25, (uint64_t)"] ", 2);
                      sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                    }
                    if ((v26 & 3) != 0)
                    {
                      LODWORD(v24) = 13;
                      v13 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                      sub_23A00AE20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_23A00AE20(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_23A00AE20(v25, (uint64_t)") [", 3);
                      sub_23A00AE20(v25, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      sub_23A00AE20(v25, (uint64_t)"] ", 2);
                      sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                    }
                    v14 = v28;
                    v15 = v26 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x23B83FE64](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v10 = v26;
                    }
                    *(_QWORD *)(a1 + 32) = v15;
                    *(_QWORD *)(a1 + 40) = v14;
                    v16 = sub_23A0881F0(v10, 4uLL);
                    result = sub_23A088274(&v28, v16, a4);
                    if (!*a4)
                    {
                      sub_23A089B98(a4);
                      v23 = 0;
                      result = sub_23A05BD84(v28, v29, &v23, a4);
                      if (!*a4)
                      {
                        sub_23A089B98(a4);
                        result = sub_23A088274(&v28, 4uLL, a4);
                        if (!*a4)
                        {
                          sub_23A089B98(a4);
                          if (!v23)
                          {
                            LODWORD(v24) = 13;
                            v18 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                            sub_23A00AE20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_23A00AE20(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_23A00AE20(v25, (uint64_t)") [", 3);
                            sub_23A00AE20(v25, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            sub_23A00AE20(v25, (uint64_t)"] ", 2);
                            sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                          }
                          if (v29 < v23)
                          {
                            LODWORD(v24) = 13;
                            v17 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                            sub_23A00AE20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_23A00AE20(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_23A00AE20(v25, (uint64_t)") [", 3);
                            sub_23A00AE20(v25, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            sub_23A00AE20(v25, (uint64_t)"] ", 2);
                            sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                          }
                          if ((v23 & 3) != 0)
                          {
                            LODWORD(v24) = 13;
                            v19 = (_QWORD *)sub_23A05E390((uint64_t)v25);
                            sub_23A00AE20(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_23A00AE20(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_23A00AE20(v25, (uint64_t)") [", 3);
                            sub_23A00AE20(v25, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            sub_23A00AE20(v25, (uint64_t)"] ", 2);
                            sub_23A05BF64((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_23A05BFF0((uint64_t)&v24);
                          }
                          v20 = v28;
                          v21 = v23 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v22 = *(_QWORD *)(a1 + 80);
                          if (v22)
                          {
                            MEMORY[0x23B83FE64](v22, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v21;
                          *(_QWORD *)(a1 + 72) = v20;
                          return sub_23A089B90(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_23A05BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A05BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A05BC18@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_23A05E390((uint64_t)v8);
    sub_23A00AE20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_23A00AE20(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v8, (uint64_t)") [", 3);
    sub_23A00AE20(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_23A00AE20(v8, (uint64_t)"] ", 2);
    sub_23A05BF64(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x23B83FDF8](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_23A089B90(a4);
  }
}

void sub_23A05BD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A05BD84@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_23A05E390((uint64_t)v8);
    sub_23A00AE20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_23A00AE20(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v8, (uint64_t)") [", 3);
    sub_23A00AE20(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_23A00AE20(v8, (uint64_t)"] ", 2);
    sub_23A05BF64(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x23B83FDF8](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_23A089B90(a4);
  }
}

void sub_23A05BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A05BEF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_23A063BB4(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_23A05BF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_23A05BF64(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sub_23A089CF4(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_23A05BFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A05BFF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](a1 + 120);
  return a1;
}

void **sub_23A05C078(uint64_t a1)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = *(void ***)(a1 + 8);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_250B0C6C8))
  {
    v8 = 1;
    v4 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_23A00AE20(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_23A00AE20(v5, (uint64_t)") [", 3);
    v7 = sub_23A00AE20(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_23A00AE20(v7, (uint64_t)"] ", 2);
    sub_23A05E47C(&v8);
    return 0;
  }
  return result;
}

void sub_23A05C12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05C140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_250B0C900;
  sub_23A089B98((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = &off_250B0D730;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    MEMORY[0x23B83FE64](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0D730;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    MEMORY[0x23B83FE64](v3, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  sub_23A05EF3C((uint64_t **)(a1 + 16), 0);
  return a1;
}

const char *sub_23A05C1DC(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  else
    return "<unk>";
}

const char *sub_23A05C22C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  else
    return "<s>";
}

const char *sub_23A05C27C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return "</s>";
}

const char *sub_23A05C2CC(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  else
    return "<pad>";
}

uint64_t sub_23A05C31C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  sub_23A05C39C(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    sub_23A05C39C(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t sub_23A05C39C(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_23A05C44C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_23A087EB8() <= 2)
  {
    v9 = 0;
    v2 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_23A00AE20(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_23A00AE20(v3, (uint64_t)") ", 2);
    v5 = sub_23A00AE20(v4, (uint64_t)"LOG(", 4);
    v6 = sub_23A00AE20(v5, (uint64_t)"ERROR", 5);
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    sub_23A00AE20(v7, (uint64_t)"Not implemented.", 16);
    sub_23A05E47C(&v9);
  }
  return sub_23A089CF4(a1, 12, "Not implemented.", 16);
}

void sub_23A05C520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05C534@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_23A087EB8() <= 2)
  {
    v9 = 0;
    v2 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_23A00AE20(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_23A00AE20(v3, (uint64_t)") ", 2);
    v5 = sub_23A00AE20(v4, (uint64_t)"LOG(", 4);
    v6 = sub_23A00AE20(v5, (uint64_t)"ERROR", 5);
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    sub_23A00AE20(v7, (uint64_t)"Not implemented.", 16);
    sub_23A05E47C(&v9);
  }
  return sub_23A089CF4(a1, 12, "Not implemented.", 16);
}

void sub_23A05C608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

void sub_23A05C61C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  sub_23A05EF98(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_23A089CF4(&v54, 13, "unk is not defined.", 19);
      sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &unk_256942320;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            sub_23A05F500((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sub_23A05CEA0((_QWORD *)(a1 + 24), &v51, (int *)(a1 + 92), &v54),
              sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54),
              sub_23A089B98((uint64_t *)&v54),
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
              v26 = v54,
              sub_23A089B98((uint64_t *)&v54),
              !v26))
        {
          if (!v50
            || (sub_23A05CEA0((_QWORD *)(a1 + 56), &v48, 0, &v54),
                sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54),
                sub_23A089B98((uint64_t *)&v54),
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
                v27 = v54,
                sub_23A089B98((uint64_t *)&v54),
                !v27))
          {
            sub_23A05D370(&v46, &v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            sub_23A05EF3C((uint64_t **)(a1 + 16), v28);
            sub_23A05EF3C((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
LABEL_68:
    sub_23A089B98((uint64_t *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = sub_23A05E530(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sub_23A089CF4(&v54, 13, "piece must not be empty.", 24);
        sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    sub_23A05F23C(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      sub_23A05F480(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &unk_256942320;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sub_23A089CF4(&v43, 13, v38, v41);
        sub_23A089DAC((uint64_t *)(a1 + 96), &v43);
        sub_23A089B98((uint64_t *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sub_23A05CD54(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_23A089CF4(&v54, 13, "unk is already defined.", 23);
        sub_23A089DAC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  sub_23A05F3FC((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sub_23A089CF4(&v42, 13, v33, v34);
  sub_23A089DAC((uint64_t *)(a1 + 96), &v42);
  sub_23A089B98((uint64_t *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  sub_23A004580((uint64_t)&v46, v47[0]);
  sub_23A004580((uint64_t)&v48, v49);
  sub_23A004580((uint64_t)&v51, v52);
}

void sub_23A05CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sub_23A089B98(&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_23A004580((uint64_t)&a19, a20);
  sub_23A004580((uint64_t)&a22, a23);
  sub_23A004580((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05CD54(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  v4 = atomic_load((unsigned __int8 *)&qword_256942040);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256942040))
  {
    qword_256942048 = sub_23A05DC70();
    __cxa_guard_release(&qword_256942040);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v5 = (_QWORD *)qword_256942048;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = sub_23A05F62C(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_23A05CE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_256942040);
  _Unwind_Resume(a1);
}

void sub_23A05CEA0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_239FEBE68();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)sub_23A05F0AC((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_239FEBE68();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_23A05F72C((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (sub_23A05DD54(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sub_23A089CF4(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      sub_23A0621E8(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sub_23A089CF4(a4, 13, "no entry is found in the trie.", 30);
      else
        sub_23A089B90(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sub_23A089B90(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sub_23A089CF4(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_23A05D318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A05D370@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_23A063AD8(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A05D3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_23A05D3E4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sub_23A063BB8(*(_QWORD *)(a1 + 16), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_23A088214(a2);
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sub_23A088214(a2);
  v26 = a1 + 64;
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_23A05D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_23A05D720(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_23A0B90EE[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_239FEBE68();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)sub_23A05F5F8((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = sub_23A05F5F8((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_23A0B90EE[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_239FEBE68();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)sub_23A05F5F8((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            sub_239FEBE68();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)sub_23A05F5F8((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_23A05DB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A05DB98@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = a1;
  return sub_23A05DBC4("<0x%02X>", &v3, a2);
}

uint64_t sub_23A05DBC4@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_23A05DC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A05DC70()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    sub_23A05DBC4("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)sub_23A05E60C(v0, (unsigned __int8 *)__p, (uint64_t)&unk_23A0A31B0, (__int128 **)&v5) + 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_23A05DD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A05DD54(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  sub_23A05F760(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x23B83FE64](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  sub_23A062130((uint64_t)&v19);
  return 0;
}

void sub_23A05DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A062130((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05DE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23A089DA8(a2, a1 + 96);
}

uint64_t sub_23A05DE88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_23A05DE90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_23A087EB8();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_23A00AE20(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_23A00AE20(v4, (uint64_t)") ", 2);
    v6 = sub_23A00AE20(v5, (uint64_t)"LOG(", 4);
    v7 = sub_23A00AE20(v6, (uint64_t)"ERROR", 5);
    v8 = sub_23A00AE20(v7, (uint64_t)") ", 2);
    sub_23A00AE20(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_23A05E47C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_23A05DF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05DF68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_23A087EB8();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_23A00AE20(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_23A00AE20(v4, (uint64_t)") ", 2);
    v6 = sub_23A00AE20(v5, (uint64_t)"LOG(", 4);
    v7 = sub_23A00AE20(v6, (uint64_t)"ERROR", 5);
    v8 = sub_23A00AE20(v7, (uint64_t)") ", 2);
    sub_23A00AE20(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_23A05E47C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_23A05E02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

void sub_23A05E040(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((int)sub_23A087EB8() <= 2)
  {
    LOBYTE(__p) = 0;
    v2 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_23A00AE20(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_23A00AE20(v3, (uint64_t)") ", 2);
    v5 = sub_23A00AE20(v4, (uint64_t)"LOG(", 4);
    v6 = sub_23A00AE20(v5, (uint64_t)"ERROR", 5);
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    sub_23A00AE20(v7, (uint64_t)"Not implemented.", 16);
    sub_23A05E47C(&__p);
  }
  __p = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_23A05EBF4((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_23A05E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  sub_23A05EE48(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_23A05E1CC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  if ((int)sub_23A087EB8() <= 2)
  {
    v7 = 0;
    v0 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_23A00AE20(v0, (uint64_t)"(", 1);
    v1 = (_QWORD *)std::ostream::operator<<();
    v2 = sub_23A00AE20(v1, (uint64_t)") ", 2);
    v3 = sub_23A00AE20(v2, (uint64_t)"LOG(", 4);
    v4 = sub_23A00AE20(v3, (uint64_t)"ERROR", 5);
    v5 = sub_23A00AE20(v4, (uint64_t)") ", 2);
    sub_23A00AE20(v5, (uint64_t)"Not implemented.", 16);
    sub_23A05E47C(&v7);
  }
  return 0.0;
}

void sub_23A05E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_23A05E47C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_23A05E29C()
{
  return 0;
}

uint64_t sub_23A05E2A4()
{
  return 0;
}

uint64_t sub_23A05E2AC()
{
  return 0;
}

uint64_t sub_23A05E2B4()
{
  return 0;
}

uint64_t sub_23A05E2BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E2CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_23A05E2E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E2F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E304(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E314(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E324(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E334(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23A05E344(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sub_23A05E35C(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_23A05E390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_23A05E454(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_23A05E47C(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_23A089A80();
  return a1;
}

void sub_23A05E514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_23A08A288(a1);
}

uint64_t sub_23A05E530(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_23A08BDA0(v8, "CHECK failed: (index) >= (0): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_23A08BDA0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_23A05E5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_23A05E60C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_23A05E894(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_23A05E8D0(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_23A05E974(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_23A05E878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_23A05EBA8(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_23A05E894(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_239FF3090((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_23A05E8D0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_23A05E974(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_23A05EA50(a1, prime);
  }
}

void sub_23A05EA50(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_239FF1A44();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_23A05EBA8(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_23A05EBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_23A05ECB8((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_23A05EDC8((uint64_t)v8);
  return v4;
}

void sub_23A05ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05EDC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_23A05ECB8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_23A05ED34(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23A05ED18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23A05ED34(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_239FEBE68();
  result = (char *)sub_23A05ED84((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_23A05ED84(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_239FF1A44();
  return operator new(24 * a2);
}

uint64_t sub_23A05EDC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A05EDFC(a1);
  return a1;
}

void sub_23A05EDFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_23A05EE48(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_23A05EE88((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_23A05EE88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_23A05EEDC(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250B0D730;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x23B83FE64](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x23B83FE88);
}

uint64_t **sub_23A05EF3C(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x23B83FE88);
  }
  return result;
}

_QWORD *sub_23A05EF98(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A05F068(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_23A05F0E0(&v13, a2);
        else
          sub_23A05F190((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_23A05F068(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_239FEBE68();
  result = sub_23A05F0AC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_23A05F0AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_239FF1A44();
  return operator new(8 * a2);
}

_QWORD *sub_23A05F0E0(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_23A05F190(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_23A05F23C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_23A05F2C4((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_23A05F360(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_23A05F2C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_23A05F3B4(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_23A05F3B4(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_23A05F360(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_23A004110(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_23A05F3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t sub_23A05F3FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_23A05F480(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_23A05F2C4((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_23A05F360(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_23A05F500@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_23A05F5F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_239FF1A44();
  return operator new(16 * a2);
}

unsigned __int8 *sub_23A05F62C(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_23A05E894((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_23A05E8D0(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_23A05F72C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_239FF1A44();
  return operator new(4 * a2);
}

uint64_t *sub_23A05F760(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v4[3];
  _OWORD v5[6];
  _OWORD v6[3];
  uint64_t v7;

  if (!a2[3])
    return (uint64_t *)sub_23A0600B8((uint64_t)a1, a2);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  sub_23A05FC88(a1, a2, (int **)v4);
  sub_23A05FD9C((uint64_t)a1, (uint64_t)v4);
  sub_23A06084C((uint64_t *)v4);
  sub_23A060640((uint64_t *)&v4[1] + 1);
  sub_23A05F888((uint64_t *)v5);
  sub_23A0605B8((uint64_t *)&v5[1] + 1);
  sub_23A060374((uint64_t *)&v5[4] + 1);
  sub_23A060374((uint64_t *)v6);
  sub_23A060374((uint64_t *)&v6[1] + 1);
  v7 = 0;
  return sub_23A061BA4((uint64_t *)v4);
}

void sub_23A05F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A061BA4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A05F840(uint64_t *a1)
{
  sub_23A05F888(a1);
  if (*a1)
  {
    MEMORY[0x23B83FE64](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_23A05F888(uint64_t *a1)
{
  uint64_t result;

  sub_23A05F8D0(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_23A05F8D0(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_23A05F92C(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_23A05F92C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x23B83FE64);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_23A05FA40(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83FE88);
}

const char *sub_23A05FA64(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

uint64_t *sub_23A05FA7C(uint64_t *a1)
{
  sub_23A05FAC4(a1);
  if (*a1)
  {
    MEMORY[0x23B83FE64](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_23A05FAC4(uint64_t *a1)
{
  uint64_t result;

  sub_23A05FB0C(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_23A05FB0C(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_23A05FB78(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_23A05FB78(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x23B83FE64);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_23A05FC88(void (**a1)(unint64_t, uint64_t), unint64_t *a2, int **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;

  sub_23A060A38((uint64_t *)a3);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(_QWORD *)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      sub_23A060B08(a3, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  sub_23A060EE8((uint64_t)a3, 0);
  v13 = (uint64_t)*a3;
  v14 = *((_BYTE *)*a3 + 8);
  v15 = **a3;
  if (v14)
    v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  *a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(_BYTE *)a3[6] = v14;
  sub_23A06084C((uint64_t *)a3);
  sub_23A060374((uint64_t *)a3 + 15);
  sub_23A060374((uint64_t *)a3 + 18);
  sub_23A060374((uint64_t *)a3 + 21);
  return sub_23A06133C((unsigned int **)a3 + 9);
}

uint64_t sub_23A05FD9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_23A05FB78((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    MEMORY[0x23B83FE64](v9, 0x1000C8052888210);
  v10 = *(_QWORD *)(a2 + 104);
  if (v10)
    bzero(*(void **)(a1 + 64), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v14)
    MEMORY[0x23B83FE64](v14, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_23A061634(a1);
  v15 = *(int **)(a1 + 32);
  v16 = v15[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v16;
    if (!v16)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**(_DWORD **)(a2 + 24) >= 4u)
  {
    sub_23A0614D0(a1, (_QWORD *)a2, 0, 0);
    v15 = *(int **)(a1 + 32);
  }
  v18 = *(_QWORD *)(a1 + 16) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *(_QWORD *)(a1 + 16) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v22)
          {
            sub_23A061634(a1);
            v15 = *(int **)(a1 + 32);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v27;
            if (v22 == v27)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x23B83FE64](v15, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_23A05F888((uint64_t *)(a1 + 40));
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_23A0600B8(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_23A05FB78((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x23B83FE64](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_23A061634(a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    sub_23A061C60(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            sub_23A061634(a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x23B83FE64](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return sub_23A05F888((uint64_t *)(a1 + 40));
}

uint64_t *sub_23A06034C(uint64_t *a1)
{
  sub_23A060374(a1);
  return sub_23A060528(a1);
}

uint64_t sub_23A060374(uint64_t *a1)
{
  uint64_t result;

  sub_23A0603BC(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_23A0603BC(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_23A060418(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_23A060418(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x23B83FE64);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_23A060528(uint64_t *a1)
{
  sub_23A060374(a1);
  if (*a1)
  {
    MEMORY[0x23B83FE64](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_23A060570(uint64_t *a1)
{
  uint64_t v2;

  sub_23A0605B8(a1);
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x23B83FE64](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_23A060528(a1);
}

uint64_t sub_23A0605B8(uint64_t *a1)
{
  uint64_t result;

  sub_23A060374(a1);
  result = a1[3];
  if (result)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_23A0605F8(uint64_t *a1)
{
  sub_23A060640(a1);
  if (*a1)
  {
    MEMORY[0x23B83FE64](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_23A060640(uint64_t *a1)
{
  uint64_t result;

  sub_23A060688(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_23A060688(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_23A0606F4(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_23A0606F4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x23B83FE64);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_23A060804(uint64_t *a1)
{
  sub_23A06084C(a1);
  if (*a1)
  {
    MEMORY[0x23B83FE64](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_23A06084C(uint64_t *a1)
{
  uint64_t result;

  sub_23A060894(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x23B83FE64](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_23A060894(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_23A060914(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t sub_23A060914(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x23B83FE64);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_23A060A38(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  sub_23A060D2C(a1 + 15, 0x400uLL, &v7);
  v2 = a1[22];
  if (v2)
  {
    v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --a1[22];
  }
  else
  {
    sub_23A060DB0(a1);
  }
  sub_23A060E04(a1 + 9);
  sub_23A060E50(a1 + 3);
  v4 = a1[7];
  if (v4 == a1[8])
  {
    sub_23A05F92C(a1 + 6, v4 + 1);
    v4 = a1[7];
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(_BYTE *)(*a1 + 8) = -1;
  v6 = 0;
  return sub_23A060E98(a1 + 18, &v6);
}

_QWORD *sub_23A060B08(_QWORD *result, uint64_t a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_250B0D750;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_250B0C378, (void (*)(void *))std::exception::~exception);
  }
  v5 = a4;
  v7 = result;
  v8 = 0;
  v9 = 0;
  v10 = *result;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(_BYTE *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return result;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  result = (_QWORD *)sub_23A060EE8((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = *(_BYTE *)(a2 + v8);
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        sub_23A060DB0(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      result = sub_23A060E98(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_23A060D2C(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_23A060418(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *sub_23A060DB0(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_23A060914(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *sub_23A060E04(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_23A060E98(result, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

uint64_t *sub_23A060E50(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_23A0606F4(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *sub_23A060E98(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_23A060418(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t sub_23A060EE8(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(result + 120);
    v5 = (_QWORD *)(result + 24);
    v6 = (_QWORD *)(result + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        sub_23A060374(v35);
        v38 = 0;
        sub_23A060D2C(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      result = sub_23A0611D0((uint64_t *)v2, v4, &v37);
      if ((_DWORD)result)
      {
        v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        sub_23A060E04((uint64_t *)(v2 + 72));
        result = (uint64_t)sub_23A060E50((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          result = sub_23A05F92C((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          result = (uint64_t)sub_23A060E98((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = v27 + 12 * v28;
      v31 = *(unsigned __int8 *)(v30 + 8);
      v32 = *(_DWORD *)v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_23A0611D0(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *a1;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = a1[15];
  v14 = a1[16];
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    v20 = a1[3];
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t sub_23A06133C(unsigned int **a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = (uint64_t)a1[3];
  a1[3] = (unsigned int *)v2;
  if (result)
    result = MEMORY[0x23B83FE64](result, 0x1000C8052888210);
  a1[4] = 0;
  v4 = a1[1];
  if (v4)
  {
    v5 = 0;
    v6 = a1[3];
    v7 = *a1;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 = (unsigned int *)((char *)v5 + (((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F));
      v4 = (unsigned int *)((char *)v4 - 1);
    }
    while (v4);
    a1[4] = v5;
  }
  return result;
}

unsigned int *sub_23A061464(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_250B0D750;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_250B0C378, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_23A0614D0(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = a2 + 9;
  v9 = *(unsigned int *)(a2[3] + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (sub_23A061AF0(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[6] + v10))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_23A061464((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)sub_23A061844(a1, (uint64_t)a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)sub_23A061AF0(v8, v10);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(a2[6] + v10))
        result = (unsigned int *)sub_23A0614D0(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_23A061634(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_23A05FB0C((uint64_t *)(a1 + 8), (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*(_QWORD *)(a1 + 16) <= v7)
        {
          sub_23A061634(a1);
          v8 = *(_QWORD *)(a1 + 32);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13)
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    sub_23A05FB0C(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *(_QWORD *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *(_DWORD *)(a1 + 72);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_23A061844(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)(a1 + 40);
  sub_23A05F8D0((uint64_t *)(a1 + 40), 0);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v10);
      sub_23A061B54(v8, &v35);
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *(unsigned int *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int8 **)(a1 + 40);
    v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *(_QWORD *)(a1 + 48);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_23A061464((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(_QWORD *)(a1 + 48))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v24);
      if (*(_QWORD *)(a1 + 16) <= v26)
        sub_23A061634(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == (_DWORD)v26)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v29 = v26;
        }
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 32);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_23A061AF0(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *sub_23A061B54(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_23A05F92C(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

uint64_t *sub_23A061BA4(uint64_t *a1)
{
  sub_23A06084C(a1);
  sub_23A060640(a1 + 3);
  sub_23A05F888(a1 + 6);
  sub_23A0605B8(a1 + 9);
  sub_23A060374(a1 + 15);
  sub_23A060374(a1 + 18);
  sub_23A060374(a1 + 21);
  a1[24] = 0;
  sub_23A06034C(a1 + 21);
  sub_23A06034C(a1 + 18);
  sub_23A060528(a1 + 15);
  sub_23A060570(a1 + 9);
  sub_23A05F840(a1 + 6);
  sub_23A0605F8(a1 + 3);
  return sub_23A060804(a1);
}

uint64_t sub_23A061C60(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = sub_23A061DC4(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          sub_23A061C60(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_23A061DC4(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  sub_23A05F8D0((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_250B0D750;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_250B0C378, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_23A061B54(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_23A061464((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        sub_23A061634(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_23A062130(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_23A05FAC4((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x23B83FE64](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_23A05F888((uint64_t *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x23B83FE64](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_23A05F840((uint64_t *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x23B83FE64](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_23A05FA7C(v2);
  return a1;
}

_QWORD *sub_23A0621E8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A06225C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23A062240(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23A06225C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_239FEBE68();
  result = (char *)sub_23A05F5F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_23A06229C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = &off_250B0C7B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 245);
  sub_23A089B90((_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_23A062354((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_23A062320(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_23A089B98(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A062354(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  _DWORD *v9;
  __int128 v10;
  unsigned int *v11;
  unint64_t v12;

  if (a3)
  {
    v3 = result;
    v11 = 0;
    v12 = 0;
    v10 = 0uLL;
    sub_23A062728(a2, a3, &v11, &v10, &v9);
    sub_23A089DAC(v3 + 7, &v9);
    result = sub_23A089B98((uint64_t *)&v9);
    if (!v3[7])
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_250B0D730;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = v3[1];
      v3[1] = (uint64_t)v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v12 || (v12 & 3) != 0)
      {
        sub_23A089CF4(&v9, 13, "Trie blob is wrongly formatted.", 31);
        sub_23A089DAC(v3 + 7, &v9);
        return sub_23A089B98((uint64_t *)&v9);
      }
      else
      {
        v6 = (_QWORD *)v3[1];
        v7 = v11;
        v8 = v12 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        result = (uint64_t *)v6[3];
        if (result)
        {
          result = (uint64_t *)MEMORY[0x23B83FE64](result, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *((_OWORD *)v3 + 1) = v10;
      }
    }
  }
  return result;
}

void sub_23A062488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0624A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &off_250B0C7B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_23A089B90((_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_23A062354((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_23A062524(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_23A089B98(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06255C(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *a1 = (uint64_t)&off_250B0C7B8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  v7 = a1 + 7;
  *((_BYTE *)a1 + 48) = 0;
  sub_23A089B90(a1 + 7);
  v11 = 0;
  sub_23A05BD84(a3, a4, &v11, &v10);
  sub_23A089DAC(v7, &v10);
  sub_23A089B98((uint64_t *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  v8 = v10;
  sub_23A089B98((uint64_t *)&v10);
  if (!v8)
  {
    *((_BYTE *)a1 + 48) = v11 != 0;
    sub_23A062354(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_23A062638(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_23A089B98(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A062688(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250B0C7B8;
  sub_23A089B98(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_23A0626D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250B0C7B8;
  sub_23A089B98(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A062728@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sub_23A089B90(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sub_23A089CF4(a5, 13, v10, v11);
}

_QWORD *sub_23A062790@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  std::string::size_type i;
  void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  size_t v46;
  const char *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type size;
  BOOL v52;
  std::string::size_type v53;
  void **v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::string::size_type v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  void *__p;
  char v78;
  uint64_t v79;
  _QWORD v80[5];
  const std::string::value_type *v81;
  std::string::size_type v82;
  int v83;
  void **v84;
  std::string *v85;

  v6 = a3;
  v84 = (void **)a5;
  v85 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sub_23A089B90(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sub_23A089B90(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)a1 + 24))(a1);
  if (*a6)
    return result;
  sub_23A089B98(a6);
  v83 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sub_23A062F40(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32)
        goto LABEL_11;
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    v11 = a6;
    return sub_23A089B90(v11);
  }
LABEL_11:
  v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_23A063124(v84, 3 * v6);
  v81 = "▁";
  v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_23A0631B8((uint64_t)v80);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sub_23A062F40(a1, a2, v6, (uint64_t)&v74);
    v13 = v74;
    v14 = v75;
    if ((v12 & 1) != 0)
    {
      if (!v75)
        goto LABEL_64;
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14)
          goto LABEL_64;
      }
    }
    else if (!v75)
    {
      v12 = 0;
      goto LABEL_64;
    }
    v72 = a2;
    v73 = v6;
    v15 = 0;
    do
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (i = 0; i < v82; ++i)
          {
            v19 = v84;
            v20 = v83;
            v21 = (char *)v84[1];
            v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              v24 = (char *)*v84;
              v25 = (v21 - (_BYTE *)*v84) >> 3;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_114;
              v27 = v22 - v24;
              if (v27 >> 2 > v26)
                v26 = v27 >> 2;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)sub_23A05F0AC((uint64_t)(v84 + 2), v28);
                v24 = (char *)*v19;
                v21 = (char *)v19[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[8 * v25];
              *(_QWORD *)v30 = v20;
              v23 = v30 + 8;
              while (v21 != v24)
              {
                v31 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v30 - 1) = v31;
                v30 -= 8;
              }
              *v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *(_QWORD *)v21 = v83;
              v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        v32 = v84;
        v33 = v83;
        v34 = (char *)v84[1];
        v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          v37 = (char *)*v84;
          v38 = (v34 - (_BYTE *)*v84) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
LABEL_114:
            sub_239FEBE68();
          v40 = v35 - v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)sub_23A05F0AC((uint64_t)(v84 + 2), v41);
            v37 = (char *)*v32;
            v34 = (char *)v32[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(_QWORD *)v43 = v33;
          v36 = v43 + 8;
          while (v34 != v37)
          {
            v44 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_QWORD *)v34 = v83;
          v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    v12 = v13[v14 - 1] == 32;
    a2 = v72;
    v6 = v73;
LABEL_64:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v45)
      v46 = v82;
    else
      v46 = 1;
    if (v45)
      v47 = v81;
    else
      v47 = " ";
    while (1)
    {
      v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        size = v85->__r_.__value_.__l.__size_;
        if (!v46)
          goto LABEL_79;
      }
      else
      {
        v50 = v85;
        size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46)
          goto LABEL_79;
      }
      v52 = size >= v46;
      v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46))
        break;
LABEL_79:
      if ((v49 & 0x80) != 0)
        v49 = v48->__r_.__value_.__l.__size_;
      if ((_DWORD)v49 - (_DWORD)v46 < 0)
      {
        LODWORD(v74) = 13;
        v65 = (_QWORD *)sub_23A05E390((uint64_t)&v75);
        sub_23A00AE20(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_23A00AE20(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&v75, (uint64_t)") [", 3);
        sub_23A00AE20(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_23A00AE20(&v75, (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)&v74, v71);
        goto LABEL_110;
      }
      v83 = *((_QWORD *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_23A0633D0((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_23A0631B8((uint64_t)v80);
  }
  v54 = v84;
  v55 = v83;
  v56 = (char *)v84[1];
  v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v84;
    v60 = (v56 - (_BYTE *)*v84) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      sub_239FEBE68();
    v62 = v57 - v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)sub_23A05F0AC((uint64_t)(v84 + 2), v63);
      v59 = (char *)*v54;
      v56 = (char *)v54[1];
    }
    else
    {
      v64 = 0;
    }
    v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(_QWORD *)v66 = v55;
    v58 = v66 + 8;
    while (v56 != v59)
    {
      v68 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *((_QWORD *)v66 - 1) = v68;
      v66 -= 8;
    }
    *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v56 = v83;
    v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
    v69 = v85->__r_.__value_.__l.__size_;
  else
    v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v84[1] - (_BYTE *)*v84) >> 3 == v69 + 1)
  {
    v11 = (_QWORD *)v71;
    return sub_23A089B90(v11);
  }
  LODWORD(v74) = 13;
  v70 = (_QWORD *)sub_23A05E390((uint64_t)&v75);
  sub_23A00AE20(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_23A00AE20(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_23A00AE20(&v75, (uint64_t)") [", 3);
  sub_23A00AE20(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_23A00AE20(&v75, (uint64_t)"] ", 2);
  sub_23A05BF64((unsigned int *)&v74, v71);
LABEL_110:
  v75 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v75 + *(_QWORD *)(v75 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v76 = MEMORY[0x24BEDB848] + 16;
  if (v78 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x23B83FDF8](&v79);
}

void sub_23A062F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_23A05BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_23A062F40@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[64];

  v27[63] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = a2;
    v7 = result;
    v8 = *(_QWORD *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, result = sub_23A0634A8(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      v9 = (int)result;
      if (a3 < (int)result)
        v9 = a3;
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (!v10)
        goto LABEL_24;
      v11 = 0;
      v12 = 0;
      v13 = *(_DWORD **)(v10 + 16);
      v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        v15 = v6[v11];
        v16 = v14 ^ v15;
        v17 = v13[v16];
        if ((v17 & 0x800000FF) != (_DWORD)v15)
          break;
        v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            v18 = &v27[2 * v12 - 1];
            *(_DWORD *)v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12)
        goto LABEL_24;
      v19 = 0;
      v20 = 0;
      v21 = v27;
      v22 = v27;
      do
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        if (!v19 || v23 > v19)
        {
          v20 = *((_DWORD *)v21 - 2);
          v19 = v23;
        }
        v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        v6 = (char *)(*(_QWORD *)(v7 + 16) + v20);
        result = strlen(v6);
      }
      else
      {
LABEL_24:
        v26 = 0;
        v25 = sub_23A087EC8((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25)
          LODWORD(v19) = v26;
        else
          LODWORD(v19) = 1;
        if (v25)
          result = (int)v26;
        else
          result = 3;
        if (!v25)
          v6 = (char *)&unk_23A0A46CC;
      }
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_23A063124(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_239FEBE68();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_23A05F0AC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_23A0631B8(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_23A05F0AC(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        sub_239FEBE68();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_23A05F0AC(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void sub_23A0633D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_23A063C9C((char **)a1, a2 - v2);
  }
}

void sub_23A063400(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  nullsub_24(&v2);
  sub_23A089B98(&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_23A06346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sub_23A089B98(&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23A0634A8(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_23A0B90EE[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sub_23A063674(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
}

void sub_23A063768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A0637A4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_23A063A44(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_239FEBE68();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)sub_23A05F0AC((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_250B0D730;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (sub_23A05DD54(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"normalizer.cc", 13);
      sub_23A00AE20(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = sub_23A00AE20(v24, (uint64_t)") [", 3);
      v26 = sub_23A00AE20(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      sub_23A00AE20(v26, (uint64_t)"] ", 2);
      sub_23A05E47C(&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_23A0639F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void sub_23A063A44(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_239FEBE68();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_23A05F0AC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_23A063ADC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_250B0D730;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x23B83FE64](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_23A063B90(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A063BB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)a1)
    return sub_23A063BF4(a2, *(void **)(*(_QWORD *)a1 + 16), 4 * *(_QWORD *)(*(_QWORD *)a1 + 8));
  else
    return sub_239FEE1FC(a2, "");
}

uint64_t sub_23A063BE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_23A063BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23A089DA8(a2, a1 + 56);
}

_QWORD *sub_23A063BF4(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_23A063C9C(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_239FEBE68();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_23A05F0AC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_23A063DA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 80))
    v3 = *(_DWORD **)(a1 + 80);
  else
    v3 = &unk_256942320;
  switch(v3[68])
  {
    case 1:
      result = sub_23A063EF4(a1, &v11);
      goto LABEL_12;
    case 2:
      result = sub_23A063F68(a1, &v11);
      goto LABEL_12;
    case 3:
      result = sub_23A063FDC(a1, &v11);
      goto LABEL_12;
    case 4:
      result = sub_23A064050(a1, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      result = sub_23A087EB8();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
        sub_23A00AE20(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
        v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
        v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
        v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
        sub_23A00AE20(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        result = (uint64_t)sub_23A05E47C(&v11);
      }
      *a2 = 0;
      break;
  }
  return result;
}

void sub_23A063EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A05E47C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A063EF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_23A076DCC(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A063F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_23A063F68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_23A088460(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A063FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_23A063FDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_23A07B2CC(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A06402C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_23A064050@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_23A07B06C(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A0640A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0640C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v6 == 1)
  {
    result = (uint64_t)sub_23A064290(a1, (uint64_t)v15, &v14);
    goto LABEL_5;
  }
  if (!v6)
  {
    result = sub_23A064214(a1, v15, &v14);
LABEL_5:
    *a4 = v14;
    return result;
  }
  result = sub_23A087EB8();
  if ((int)result <= 2)
  {
    LOBYTE(v14) = 0;
    v8 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
    sub_23A00AE20(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    v11 = sub_23A00AE20(v10, (uint64_t)"LOG(", 4);
    v12 = sub_23A00AE20(v11, (uint64_t)"ERROR", 5);
    v13 = sub_23A00AE20(v12, (uint64_t)") ", 2);
    sub_23A00AE20(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    result = (uint64_t)sub_23A05E47C(&v14);
  }
  *a4 = 0;
  return result;
}

void sub_23A0641FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A05E47C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A064214@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_23A07708C(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_23A06426C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A064290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sub_23A088464(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_23A0642E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A06430C(_QWORD *a1)
{
  *a1 = &off_250B0CFF8;
  sub_23A0711A0((uint64_t)(a1 + 2));
  return a1;
}

void sub_23A06433C(_QWORD *a1)
{
  *a1 = &off_250B0CFF8;
  sub_23A0711A0((uint64_t)(a1 + 2));
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A06437C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = a1 + 16;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    sub_23A0712D4(&v7);
    sub_23A064404(v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_23A064404(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_23A064468(_QWORD *a1)
{
  *a1 = &off_250B0D058;
  sub_23A0711A0((uint64_t)(a1 + 1));
  return a1;
}

void sub_23A064498(_QWORD *a1)
{
  *a1 = &off_250B0D058;
  sub_23A0711A0((uint64_t)(a1 + 1));
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A0644D8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    sub_23A0713B4(&v6);
    sub_23A064404(v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sub_23A064558@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (_QWORD *)sub_23A096F60(v2, (uint64_t)a2);
  else
    return sub_239FEE1FC(a2, "");
}

double sub_23A064574(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_250B0CD08;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_23A0645A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_250B0CD08;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_23A06467C(uint64_t a1)
{
  sub_23A0645A4(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A0646A0()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x24BDAC8D0];
  sub_23A0647AC(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B83FC00](v2);
  std::istream::~istream();
  MEMORY[0x23B83FDF8](v3);
  return 0;
}

void sub_23A064790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A0337B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A0647AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x23B83FBF4](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23A064880(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x23B83FDF8](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0648B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_23A0646A0())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  sub_23A0649EC(&v13);
  sub_23A064A54(a2, a3, v13, a4);
  if (!*a4)
  {
    sub_23A089B98(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      v10 = sub_23A084A3C(v9);
      MEMORY[0x23B83FE88](v10, 0x10A1C4047CE62CFLL);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v11 = sub_23A084A3C(result);
    return MEMORY[0x23B83FE88](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_23A0649C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_23A071494(&a9, 0);
  sub_23A071494(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_23A0649EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_23A0848D4(v2, 0);
  *a1 = v2;
  return result;
}

void sub_23A064A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_23A064A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sub_23A089CF4(a4, 5, "model file path should not be empty.", 36);
  sub_23A0874E8(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*a4)
  {
    sub_23A089B98(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((sub_23A096C30(a3, v6, v7) & 1) != 0)
      {
        sub_23A089B90(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      sub_23A05E390((uint64_t)v10);
      sub_23A00AE20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v10, (uint64_t)") [", 3);
      sub_23A00AE20(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      sub_23A00AE20(v10, (uint64_t)"] ", 2);
      sub_23A05BF64(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      sub_23A05E390((uint64_t)v10);
      sub_23A00AE20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v10, (uint64_t)") [", 3);
      sub_23A00AE20(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      sub_23A00AE20(v10, (uint64_t)"] ", 2);
      sub_23A05BF64(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23A064D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A064D60(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  if (v11)
  {
    v10 = 1;
    v1 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = sub_23A00AE20(v2, (uint64_t)") [", 3);
    v4 = sub_23A00AE20(v3, (uint64_t)"_status.ok()", 12);
    v5 = sub_23A00AE20(v4, (uint64_t)"] ", 2);
    sub_23A089EAC((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_23A00AE20(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_23A05E47C(&v10);
  }
  return sub_23A089B98(&v11);
}

void sub_23A064E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_23A05E47C((_BYTE *)(v15 - 25));
  sub_23A089B98((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_23A064E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23A0649EC(&v9);
  sub_23A085ADC(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = sub_23A084A3C(v4);
    MEMORY[0x23B83FE88](v5, 0x10A1C4047CE62CFLL);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v7 = sub_23A084A3C(result);
    return MEMORY[0x23B83FE88](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_23A064F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_23A071494(&a9, 0);
  sub_23A071494(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_23A064F68@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_23A0649EC(&v18);
  if ((sub_23A096C30(v18, a2, a3) & 1) != 0)
  {
    v8 = v18;
    v18 = 0;
    v13 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      v10 = sub_23A084A3C(v9);
      MEMORY[0x23B83FE88](v10, 0x10A1C4047CE62CFLL);
    }
  }
  else
  {
    v14 = 13;
    sub_23A05E390((uint64_t)v15);
    sub_23A00AE20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v15, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v15, (uint64_t)") [", 3);
    sub_23A00AE20(v15, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    sub_23A00AE20(v15, (uint64_t)"] ", 2);
    sub_23A05BF64(&v14, a4);
    v15[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v15[1] = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete((void *)v15[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v17);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    v12 = sub_23A084A3C(result);
    return MEMORY[0x23B83FE88](v12, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_23A06512C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A071494((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_23A065170(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  void *v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  unint64_t v63;
  size_t v64;
  void *v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  std::string::size_type v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  std::string __p;
  std::string v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  std::string v102;
  char *v103;
  unint64_t *v104;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &unk_2569424B0;
  if (v7[80])
  {
    if ((int)sub_23A087EB8() <= 0)
    {
      v102.__r_.__value_.__s.__data_[0] = 0;
      v8 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_23A00AE20(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
      v11 = sub_23A00AE20(v10, (uint64_t)"LOG(", 4);
      v12 = sub_23A00AE20(v11, (uint64_t)"INFO", 4);
      v13 = sub_23A00AE20(v12, (uint64_t)") ", 2);
      sub_23A00AE20(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_23A05E47C(&v102);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = sub_23A085D58((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = sub_23A085E0C((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = a1[4];
  a1[4] = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = a1[4];
  }
  sub_23A063DA4(v20 - 16, &v102);
  v22 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v23 = a1[1];
  a1[1] = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(void **)(v20 + 72);
  else
    v25 = &unk_2569424B0;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(void **)(v20 + 64);
  else
    v26 = &unk_256942320;
  sub_23A065A98((uint64_t)v25, (uint64_t)v26, (uint64_t *)&v102);
  v27 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v28 = a1[2];
  a1[2] = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v29)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(_QWORD **)(v20 + 88);
    if (!v30)
    {
      sub_23A08BD88((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = sub_23A08BDA0(&v102, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_23A08BED0((uint64_t)&v99, (const char **)&v31->__r_.__value_.__l.__data_);
      sub_23A08BED8((uint64_t)&v102);
      v30 = *(_QWORD **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = &unk_2569424B0;
    v33 = v32[8] & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    sub_23A065B14((uint64_t)v32, (uint64_t *)&v102);
    v34 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    v35 = a1[3];
    a1[3] = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = v102.__r_.__value_.__r.__words[0];
      v102.__r_.__value_.__r.__words[0] = 0;
      if (v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
    }
  }
LABEL_45:
  v37 = a1[2];
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  if (!*a3)
  {
    sub_23A089B98(a3);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&unk_256942468;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t *))(*a1 + 136))(a1, v47, v46, &v96);
        if (*a3)
          break;
        sub_23A089B98(a3);
        memset(&v95, 0, sizeof(v95));
        v48 = v96;
        if (v96 == v97)
        {
          v52 = v96;
        }
        else
        {
          v49 = *(char *)(v96 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v96;
          else
            v50 = *(const std::string::value_type **)v96;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v96 + 23);
          else
            v51 = *(_QWORD *)(v96 + 8);
          std::string::append(&v95, v50, v51);
          v48 = v96;
          v52 = v97;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v95, " ", 1uLL);
            v55 = *(char *)(v96 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v96 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v96 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v96 + v53 + 47);
            else
              v57 = *(_QWORD *)(v96 + v53 + 32);
            std::string::append(&v95, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v95;
        else
          v61 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          size = v95.__r_.__value_.__l.__size_;
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 192))(a1[1], v60, v59, v61, size) & 1) == 0)
        {
          v63 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v63 + 23) < 0)
          {
            v65 = *(void **)v63;
            v64 = *(_QWORD *)(v63 + 8);
          }
          else
          {
            v64 = *(unsigned __int8 *)(v63 + 23);
            v65 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          sub_23A065B88(v65, v64, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v95.__r_.__value_.__l.__data_, &__p);
          v66 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v100[-v99] >> 3);
            v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_239FEBE68();
            if (0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3) > v69)
              v69 = 0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - v99) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            v104 = &v101;
            if (v70)
              v71 = (char *)sub_23A05ED84((uint64_t)&v101, v70);
            else
              v71 = 0;
            v72 = (std::string::size_type)&v71[24 * v68];
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
            v102.__r_.__value_.__l.__size_ = v72;
            v103 = &v71[24 * v70];
            v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v72 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v72 = v73;
            memset(&__p, 0, sizeof(__p));
            v102.__r_.__value_.__r.__words[2] = v72 + 24;
            sub_23A0717A8(&v99, &v102);
            v74 = v100;
            sub_23A071930((uint64_t)&v102);
            v100 = v74;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v100 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *v66 = v67;
            v100 = (char *)v66 + 24;
          }
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if ((char *)v99 == v100)
            goto LABEL_119;
          if ((int)sub_23A087EB8() <= 0)
          {
            v102.__r_.__value_.__s.__data_[0] = 0;
            v75 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
            sub_23A00AE20(v75, (uint64_t)"(", 1);
            v76 = (_QWORD *)std::ostream::operator<<();
            v77 = sub_23A00AE20(v76, (uint64_t)") ", 2);
            v78 = sub_23A00AE20(v77, (uint64_t)"LOG(", 4);
            v79 = sub_23A00AE20(v78, (uint64_t)"INFO", 4);
            sub_23A00AE20(v79, (uint64_t)") ", 2);
            v80 = (_QWORD *)std::ostream::operator<<();
            sub_23A00AE20(v80, (uint64_t)"/", 1);
            v81 = (_QWORD *)std::ostream::operator<<();
            sub_23A00AE20(v81, (uint64_t)" samples did not pass the test.", 31);
            sub_23A05E47C(&v102);
          }
          v82 = v99;
          v83 = v100;
          if ((char *)v99 != v100)
          {
            v84 = (_QWORD *)MEMORY[0x24BEDB310];
            do
            {
              if ((int)sub_23A087EB8() <= 0)
              {
                v102.__r_.__value_.__s.__data_[0] = 0;
                v85 = sub_23A00AE20(v84, (uint64_t)"sentencepiece_processor.cc", 26);
                sub_23A00AE20(v85, (uint64_t)"(", 1);
                v86 = (_QWORD *)std::ostream::operator<<();
                v87 = sub_23A00AE20(v86, (uint64_t)") ", 2);
                v88 = sub_23A00AE20(v87, (uint64_t)"LOG(", 4);
                v89 = sub_23A00AE20(v88, (uint64_t)"INFO", 4);
                v90 = sub_23A00AE20(v89, (uint64_t)") ", 2);
                v91 = *(char *)(v82 + 23);
                if (v91 >= 0)
                  v92 = v82;
                else
                  v92 = *(_QWORD *)v82;
                if (v91 >= 0)
                  v93 = *(unsigned __int8 *)(v82 + 23);
                else
                  v93 = *(_QWORD *)(v82 + 8);
                sub_23A00AE20(v90, v92, v93);
                sub_23A05E47C(&v102);
              }
              v82 += 24;
            }
            while ((char *)v82 != v83);
          }
          sub_23A089CF4(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sub_23A089B90(a3);
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    sub_23A070CE0((void ***)&v102);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    sub_23A070CE0((void ***)&v102);
  }
}

void sub_23A0659DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_23A08BED8((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_23A065A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_23A0624A0(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_23A065AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_23A065B14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_23A062558(v4, a1);
  *a2 = v4;
  return result;
}

void sub_23A065B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_23A065B88(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_23A063BF4(&__dst, __src, __len);
  v12 = strlen(a3);
  sub_23A0714D0(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A065C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23A065C90(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_23A065C98((uint64_t *)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sub_23A065C98(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x24BDAC8D0];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_23A089B98(a5);
      v10 = atomic_load((unsigned __int8 *)&qword_256942080);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_256942080))
      {
        v43 = xmmword_250B0E770;
        *(_OWORD *)__p = unk_250B0E780;
        v45 = xmmword_250B0E790;
        v46 = 3;
        v39 = xmmword_250B0E730;
        v40 = unk_250B0E740;
        v41 = xmmword_250B0E750;
        v42 = *(_OWORD *)&off_250B0E760;
        sub_23A0735C4((uint64_t)&unk_256942090, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))sub_23A06E06C, &unk_256942090, &dword_239FE9000);
        __cxa_guard_release(&qword_256942080);
      }
      sub_23A070978((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sub_23A089B90(a5);
      }
      else
      {
        while (1)
        {
          v13 = sub_23A071C54((uint64_t)&unk_256942090, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_256942098)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              sub_239FEBE68();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)sub_23A05F72C((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sub_23A05C22C(a1[1]);
            v28 = strlen(v27);
            v29 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v27, v28);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_23A05E390((uint64_t)&v39 + 8);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sub_23A05C22C(a1[1]);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sub_23A05BF64((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sub_23A05C27C(a1[1]);
            v31 = strlen(v30);
            v32 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v30, v31);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_23A05E390((uint64_t)&v39 + 8);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sub_23A05C27C(a1[1]);
              sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sub_23A05BF64((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
              *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        sub_23A05E390((uint64_t)&v39 + 8);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        sub_23A00AE20((_QWORD *)&v39 + 1, *v11, v11[1]);
        sub_23A00AE20((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sub_23A05BF64((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x23B83FDF8](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sub_23A089B90(a5);
  }
}

void sub_23A06633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_guard_abort(&qword_256942080);
  _Unwind_Resume(a1);
}

void sub_23A0663B8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_23A065C98((uint64_t *)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sub_23A0663C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_23A089B98(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (!*a2)
        {
          v6 = sub_23A089B98(a2);
          return sub_23A089B90(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)sub_23A05E390((uint64_t)v10);
    sub_23A00AE20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v10, (uint64_t)") [", 3);
    sub_23A00AE20(v10, (uint64_t)"normalizer_", 11);
    sub_23A00AE20(v10, (uint64_t)"] ", 2);
    sub_23A00AE20(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_23A05BF64(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_23A05E390((uint64_t)v10);
    sub_23A00AE20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v10, (uint64_t)") [", 3);
    sub_23A00AE20(v10, (uint64_t)"model_", 6);
    sub_23A00AE20(v10, (uint64_t)"] ", 2);
    sub_23A00AE20(v10, (uint64_t)"Model is not initialized.", 25);
    sub_23A05BF64(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x23B83FDF8](&v12);
}

void sub_23A066618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23A066638(_QWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a3);
  if (*a3)
    return;
  sub_23A089B98(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_250B0C6C8)
  {
    v21 = 13;
    v7 = (_QWORD *)sub_23A05E390((uint64_t)v22);
    sub_23A00AE20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v22, (uint64_t)") [", 3);
    sub_23A00AE20(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_23A00AE20(v22, (uint64_t)"] ", 2);
    sub_23A00AE20(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_23A05BF64(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x24BEDB800];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x24BEDB800] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v24);
    return;
  }
  v8 = &unk_256942320;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)sub_23A05E390((uint64_t)v22);
    sub_23A00AE20(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v22, (uint64_t)") [", 3);
    sub_23A00AE20(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_23A00AE20(v22, (uint64_t)"] ", 2);
    sub_23A00AE20(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_23A05BF64(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  sub_23A0719B8((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = sub_23A07089C(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == sub_23A071C54((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_23A0B90EE[(unint64_t)*v17 >> 4]))
        {
          if (!sub_23A07E6A4(5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sub_23A07E6A4(1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sub_23A089B90(a3);
  sub_23A004580((uint64_t)&v21, v22[0]);
}

void sub_23A0669D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_23A004580((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A066A18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*a1 + 88))(a2);
  if (!*a2)
  {
    sub_23A089B98(a2);
    v5 = a1[4];
    if (v5 && *(_UNKNOWN **)v5 == &unk_250B0C6C8)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_23A07E6A4(1))
              sub_23A073A68();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_23A089B90(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)sub_23A05E390((uint64_t)v13);
      sub_23A00AE20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v13, (uint64_t)") [", 3);
      sub_23A00AE20(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_23A00AE20(v13, (uint64_t)"] ", 2);
      sub_23A00AE20(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_23A05BF64(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v13[1] = MEMORY[0x24BEDB848] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v15);
    }
  }
  return result;
}

void sub_23A066C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A066C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37[4];

  sub_23A0874E8(a2, a3, 0, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  if (!*a5)
  {
    sub_23A089B98(a5);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v36 + 24))(v36, &v33))
    {
      if (v35 >= 0)
        v8 = (void **)&v33;
      else
        v8 = v33;
      if (v35 >= 0)
        v9 = HIBYTE(v35);
      else
        v9 = v34;
      sub_23A070978((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      sub_23A070C40(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      v10 = v29;
      if (v29 == v28)
      {
        v14 = v29;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v10 = v28;
        do
        {
          MEMORY[0x23B83FB94]((char *)v10 + v11, *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          v10 = v28;
          v14 = v29;
          v11 += 24;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        v10 = v28;
        v14 = v29;
      }
      v15 = (char *)v14 - (char *)v10;
      if (!v15)
      {
        LODWORD(__p) = 13;
        sub_23A05E390((uint64_t)v25);
        sub_23A00AE20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(v25, (uint64_t)") [", 3);
        sub_23A00AE20(v25, (uint64_t)"(v.size()) >= (1)", 17);
        sub_23A00AE20(v25, (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v25[1] = MEMORY[0x24BEDB848] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x23B83FDF8](&v27);
        __p = &v28;
        sub_23A070CE0((void ***)&__p);
        goto LABEL_45;
      }
      if (*((char *)v10 + 23) < 0)
      {
        if (!*((_QWORD *)v10 + 1))
        {
LABEL_40:
          LODWORD(__p) = 13;
          sub_23A05E390((uint64_t)v25);
          sub_23A00AE20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_23A00AE20(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_23A00AE20(v25, (uint64_t)") [", 3);
          sub_23A00AE20(v25, (uint64_t)"!v[0].empty()", 13);
          sub_23A00AE20(v25, (uint64_t)"] ", 2);
          sub_23A05BF64((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)v10 + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v37[0] = 1;
      if (v16 >= 2)
      {
        if (*((char *)v10 + 47) < 0)
        {
          v18 = (const char *)*((_QWORD *)v10 + 3);
          v19 = *((_QWORD *)v10 + 4);
        }
        else
        {
          v18 = (char *)v10 + 24;
          v19 = *((unsigned __int8 *)v10 + 47);
        }
        if (!sub_23A067208(v18, v19, (uint64_t)v37))
        {
          LODWORD(__p) = 13;
          sub_23A05E390((uint64_t)v25);
          sub_23A00AE20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_23A00AE20(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_23A00AE20(v25, (uint64_t)") [", 3);
          sub_23A00AE20(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          sub_23A00AE20(v25, (uint64_t)"] ", 2);
          sub_23A00AE20(v25, (uint64_t)"Could not parse the frequency", 29);
          sub_23A05BF64((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v37[0];
      }
      if (v17 >= a4)
      {
        v20 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v22 = (__int128 *)sub_23A071EF0(&v30, v28);
        }
        else
        {
          if (*((char *)v28 + 23) < 0)
          {
            sub_239FF1F64(v31, *(void **)v28, *((_QWORD *)v28 + 1));
          }
          else
          {
            v21 = *v28;
            *((_QWORD *)v31 + 2) = *((_QWORD *)v28 + 2);
            *v20 = v21;
          }
          v22 = (__int128 *)((char *)v20 + 24);
        }
        v31 = v22;
      }
      __p = &v28;
      sub_23A070CE0((void ***)&__p);
    }
    sub_23A06732C(&v30, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v30;
    sub_23A070CE0((void ***)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
  }
  result = v36;
  v36 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23A06712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  sub_23A070CE0((void ***)&__p);
  __p = (void *)(v10 - 152);
  sub_23A070CE0((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL sub_23A067208(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  sub_23A071CE0((uint64_t)v11);
  v5 = strlen(a1);
  v6 = sub_23A00AE20(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x23B83FC54](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83FDF8](&v14);
  return v7;
}

void sub_23A067318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A071E0C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A06732C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = sub_23A070D6C(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

_QWORD *sub_23A0673CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_23A089B98(a5);
    if (a4)
    {
      sub_23A070D20(a4);
      sub_23A07C5FC(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_23A089B98(a5);
        if (v19)
          v11 = v19 + 8;
        else
          v11 = 0;
        if (v18)
        {
          v12 = a4[1];
          v13 = 8 * v18;
          do
          {
            v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              v12 = sub_23A071EF0(a4, v14);
            }
            else
            {
              sub_23A071E94(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_23A089B90(a5);
      }
      return (_QWORD *)sub_23A07C71C(&v16);
    }
    else
    {
      v16 = 13;
      v15 = (_QWORD *)sub_23A05E390((uint64_t)v17);
      sub_23A00AE20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v17, (uint64_t)") [", 3);
      sub_23A00AE20(v17, (uint64_t)"pieces", 6);
      sub_23A00AE20(v17, (uint64_t)"] ", 2);
      sub_23A00AE20(v17, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v17[1] = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v22);
    }
  }
  return result;
}

void sub_23A0675F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A067624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD v27[6];
  int v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_23A089B98(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_23A07C5FC(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_23A089B98(a5);
        if (v29)
          v11 = v29 + 8;
        else
          v11 = 0;
        if (v28)
        {
          v12 = a4 + 2;
          v13 = a4[1];
          v14 = v11 + 8 * v28;
          do
          {
            v15 = *(_DWORD *)(*(_QWORD *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              v17 = *a4;
              v18 = (v13 - *a4) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_239FEBE68();
              v20 = *v12 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_23A05F72C((uint64_t)(a4 + 2), v21);
                v17 = *a4;
                v13 = a4[1];
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v15;
              v16 = v23 + 4;
              while (v13 != v17)
              {
                v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_DWORD *)v13 = v15;
              v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            v13 = v16;
          }
          while (v11 != v14);
        }
        sub_23A089B90(a5);
      }
      return (_QWORD *)sub_23A07C71C(&v26);
    }
    else
    {
      v26 = 13;
      v25 = (_QWORD *)sub_23A05E390((uint64_t)v27);
      sub_23A00AE20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v27, (uint64_t)") [", 3);
      sub_23A00AE20(v27, (uint64_t)"ids", 3);
      sub_23A00AE20(v27, (uint64_t)"] ", 2);
      sub_23A00AE20(v27, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v27[1] = MEMORY[0x24BEDB848] + 16;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v32);
    }
  }
  return result;
}

void sub_23A0678E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23A067918(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_23A06732C(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23A067984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A0679A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_23A089B98(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_23A07C5FC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_23A089B98(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_23A089B90(a4);
      }
      return (_QWORD *)sub_23A07C71C(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_23A05E390((uint64_t)v11);
      sub_23A00AE20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v11, (uint64_t)") [", 3);
      sub_23A00AE20(v11, (uint64_t)"detokenized", 11);
      sub_23A00AE20(v11, (uint64_t)"] ", 2);
      sub_23A00AE20(v11, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v13);
    }
  }
  return result;
}

void sub_23A067B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A067BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_23A089B98(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_23A07C5FC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_23A089B98(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_23A089B90(a4);
      }
      return (_QWORD *)sub_23A07C71C(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_23A05E390((uint64_t)v11);
      sub_23A00AE20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v11, (uint64_t)") [", 3);
      sub_23A00AE20(v11, (uint64_t)"detokenized", 11);
      sub_23A00AE20(v11, (uint64_t)"] ", 2);
      sub_23A00AE20(v11, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v13);
    }
  }
  return result;
}

void sub_23A067D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A067DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t v13;
  void **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  void *__p;
  char v36;
  uint64_t v37;
  void **v38;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_23A089B98(a6);
    if (a5)
    {
      v13 = *a5;
      v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        v31 = v14;
        sub_23A070CE0(&v31);
      }
      a5[1] = v13;
      sub_23A07D0E4(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_23A089B98(a6);
        if (v34)
          v15 = (uint64_t *)(v34 + 8);
        else
          v15 = 0;
        if (v33)
        {
          v16 = &v15[v33];
          do
          {
            v17 = *v15;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v18 = *(_QWORD *)(v17 + 64);
            if (v18)
              v19 = v18 + 8;
            else
              v19 = 0;
            v20 = *(int *)(v17 + 56);
            if ((_DWORD)v20)
            {
              v21 = 0;
              v22 = 8 * v20;
              do
              {
                v23 = *(_QWORD *)(*(_QWORD *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  v21 = sub_23A071EF0(&v28, (__int128 *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_239FF1F64((_BYTE *)v21, *(void **)v23, *(_QWORD *)(v23 + 8));
                  }
                  else
                  {
                    v24 = *(_OWORD *)v23;
                    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v23 + 16);
                    *(_OWORD *)v21 = v24;
                  }
                  v21 += 24;
                }
                v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            v25 = a5[1];
            if (v25 >= a5[2])
            {
              v26 = sub_23A07206C(a5, &v28);
            }
            else
            {
              sub_23A072010((uint64_t)a5, &v28);
              v26 = v25 + 24;
            }
            a5[1] = v26;
            v38 = (void **)&v28;
            sub_23A070CE0(&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_23A089B90(a6);
      }
      return (_QWORD *)sub_23A07D19C(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      v27 = (_QWORD *)sub_23A05E390((uint64_t)v32);
      sub_23A00AE20(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v32, (uint64_t)") [", 3);
      sub_23A00AE20(v32, (uint64_t)"pieces", 6);
      sub_23A00AE20(v32, (uint64_t)"] ", 2);
      sub_23A00AE20(v32, (uint64_t)"output container is null", 24);
      sub_23A05BF64((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v32[1] = MEMORY[0x24BEDB848] + 16;
      if (v36 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v37);
    }
  }
  return result;
}

void sub_23A0680B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_23A05BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A068108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  void *__p;
  char *v35;
  char *v36;
  unsigned int v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_23A089B98(a6);
    if (a5)
    {
      sub_23A0710DC(a5);
      sub_23A07D0E4(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_23A089B98(a6);
        if (v40)
          v13 = (uint64_t *)(v40 + 8);
        else
          v13 = 0;
        if (v39)
        {
          v33 = &v13[v39];
          do
          {
            v14 = *v13;
            __p = 0;
            v35 = 0;
            v36 = 0;
            v15 = *(_QWORD *)(v14 + 64);
            if (v15)
              v16 = v15 + 8;
            else
              v16 = 0;
            v17 = *(int *)(v14 + 56);
            if ((_DWORD)v17)
            {
              v18 = 0;
              v19 = v16 + 8 * v17;
              do
              {
                v20 = *(_DWORD *)(*(_QWORD *)v16 + 64);
                if (v18 >= v36)
                {
                  v22 = (char *)__p;
                  v23 = (v18 - (_BYTE *)__p) >> 2;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62)
                    sub_239FEBE68();
                  v25 = v36 - (_BYTE *)__p;
                  if ((v36 - (_BYTE *)__p) >> 1 > v24)
                    v24 = v25 >> 1;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                    v26 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                  {
                    v27 = (char *)sub_23A05F72C((uint64_t)&v36, v26);
                    v22 = (char *)__p;
                    v18 = v35;
                  }
                  else
                  {
                    v27 = 0;
                  }
                  v28 = &v27[4 * v23];
                  *(_DWORD *)v28 = v20;
                  v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  __p = v28;
                  v35 = v21;
                  v36 = &v27[4 * v26];
                  if (v22)
                    operator delete(v22);
                }
                else
                {
                  *(_DWORD *)v18 = v20;
                  v21 = v18 + 4;
                }
                v35 = v21;
                v16 += 8;
                v18 = v21;
              }
              while (v16 != v19);
            }
            v30 = a5[1];
            if (v30 >= a5[2])
            {
              v31 = sub_23A0723EC(a5, (uint64_t)&__p);
            }
            else
            {
              sub_23A07239C((uint64_t)a5, (uint64_t)&__p);
              v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_23A089B90(a6);
      }
      return (_QWORD *)sub_23A07D19C(&v37);
    }
    else
    {
      v37 = 13;
      v32 = (_QWORD *)sub_23A05E390((uint64_t)v38);
      sub_23A00AE20(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v38, (uint64_t)") [", 3);
      sub_23A00AE20(v38, (uint64_t)"ids", 3);
      sub_23A00AE20(v38, (uint64_t)"] ", 2);
      sub_23A00AE20(v38, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v38[1] = MEMORY[0x24BEDB848] + 16;
      if (v42 < 0)
        operator delete(v41);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v43);
    }
  }
  return result;
}

void sub_23A068454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sub_23A05BFF0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A06849C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD v21[6];
  int v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_23A089B98(a6);
    if (a5)
    {
      sub_23A070D20(a5);
      sub_23A07C5FC(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_23A089B98(a6);
        if (v23)
          v15 = v23 + 8;
        else
          v15 = 0;
        if (v22)
        {
          v16 = a5[1];
          v17 = 8 * v22;
          do
          {
            v18 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              v16 = sub_23A071EF0(a5, v18);
            }
            else
            {
              sub_23A071E94(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_23A089B90(a6);
      }
      return (_QWORD *)sub_23A07C71C(&v20);
    }
    else
    {
      v20 = 13;
      v19 = (_QWORD *)sub_23A05E390((uint64_t)v21);
      sub_23A00AE20(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v21, (uint64_t)") [", 3);
      sub_23A00AE20(v21, (uint64_t)"pieces", 6);
      sub_23A00AE20(v21, (uint64_t)"] ", 2);
      sub_23A00AE20(v21, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v21[1] = MEMORY[0x24BEDB848] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v26);
    }
  }
  return result;
}

void sub_23A0686E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A068714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_23A089B98(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_23A07C5FC(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_23A089B98(a6);
        if (v33)
          v15 = v33 + 8;
        else
          v15 = 0;
        if (v32)
        {
          v16 = a5 + 2;
          v17 = a5[1];
          v18 = v15 + 8 * v32;
          do
          {
            v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              v21 = *a5;
              v22 = (v17 - *a5) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_239FEBE68();
              v24 = *v16 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)sub_23A05F72C((uint64_t)(a5 + 2), v25);
                v21 = *a5;
                v17 = a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[4 * v22];
              *(_DWORD *)v27 = v19;
              v20 = v27 + 4;
              while (v17 != v21)
              {
                v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_DWORD *)v17 = v19;
              v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            v17 = v20;
          }
          while (v15 != v18);
        }
        sub_23A089B90(a6);
      }
      return (_QWORD *)sub_23A07C71C(&v30);
    }
    else
    {
      v30 = 13;
      v29 = (_QWORD *)sub_23A05E390((uint64_t)v31);
      sub_23A00AE20(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v31, (uint64_t)") [", 3);
      sub_23A00AE20(v31, (uint64_t)"ids", 3);
      sub_23A00AE20(v31, (uint64_t)"] ", 2);
      sub_23A00AE20(v31, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v31[1] = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v36);
    }
  }
  return result;
}

void sub_23A0689F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A068A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  void **v36;
  void *__dst;
  unint64_t v38;
  void **v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  void *__p;
  char v44;
  uint64_t v45;
  void **v46[2];

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_23A089B98(a8);
    if (a7)
    {
      v19 = *a7;
      v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        v39 = v20;
        sub_23A070CE0(&v39);
      }
      a7[1] = v19;
      sub_23A07D0E4(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_23A089B98(a8);
        v21 = (void **)*a7;
        v22 = (void **)a7[1];
        while (v22 != v21)
        {
          v22 -= 4;
          v36 = v22;
          sub_23A070CE0(&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_23A068DD8(a7, v41);
        if (v42)
          v24 = (uint64_t *)(v42 + 8);
        else
          v24 = 0;
        if (v41)
        {
          v25 = &v24[v41];
          do
          {
            v26 = *v24;
            v36 = 0;
            __dst = 0;
            v38 = 0;
            sub_23A068E68((uint64_t *)&v36, *(int *)(v26 + 56));
            v27 = *(_QWORD *)(v26 + 64);
            if (v27)
              v28 = v27 + 8;
            else
              v28 = 0;
            v29 = *(int *)(v26 + 56);
            if ((_DWORD)v29)
            {
              v30 = (unint64_t)__dst;
              v31 = 8 * v29;
              do
              {
                v32 = *(_QWORD *)(*(_QWORD *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  v30 = sub_23A071EF0((uint64_t *)&v36, (__int128 *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_239FF1F64((_BYTE *)v30, *(void **)v32, *(_QWORD *)(v32 + 8));
                  }
                  else
                  {
                    v33 = *(_OWORD *)v32;
                    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v32 + 16);
                    *(_OWORD *)v30 = v33;
                  }
                  v30 += 24;
                }
                __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            v34 = a7[1];
            if (v34 >= a7[2])
            {
              v35 = sub_23A072A4C(a7, (uint64_t *)&v36, v46);
            }
            else
            {
              sub_23A0729DC((uint64_t)a7, (uint64_t *)&v36, (float *)v46);
              v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_23A070CE0(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_23A089B90(a8);
      }
      return (_QWORD *)sub_23A07D19C(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      v23 = (_QWORD *)sub_23A05E390((uint64_t)v40);
      sub_23A00AE20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v40, (uint64_t)") [", 3);
      sub_23A00AE20(v40, (uint64_t)"pieces", 6);
      sub_23A00AE20(v40, (uint64_t)"] ", 2);
      sub_23A00AE20(v40, (uint64_t)"output container is null", 24);
      sub_23A05BF64((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v40 + *(_QWORD *)(v40[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v40[1] = MEMORY[0x24BEDB848] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v45);
    }
  }
  return result;
}

void sub_23A068D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_23A05BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_23A068DD8(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_239FEBE68();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_23A072804((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_23A072790(a1, v7);
    return sub_23A07295C(v7);
  }
  return result;
}

void sub_23A068E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A07295C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A068E68(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_239FEBE68();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_23A05ED84(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_23A0717A8(a1, v7);
    return sub_23A071930((uint64_t)v7);
  }
  return result;
}

void sub_23A068F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A071930((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A068F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  void *__p;
  char *v43;
  char *v44;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_23A089B98(a8);
    if (a7)
    {
      sub_23A05EE88(a7);
      sub_23A07D0E4(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        v39 = a8;
        sub_23A089B98(a8);
        sub_23A05EE88(a7);
        sub_23A069308(a7, v47);
        if (v48)
          v19 = (uint64_t *)(v48 + 8);
        else
          v19 = 0;
        if (v47)
        {
          v40 = &v19[v47];
          do
          {
            v20 = *v19;
            __p = 0;
            v43 = 0;
            v44 = 0;
            sub_23A069398(&__p, *(int *)(v20 + 56));
            v21 = *(_QWORD *)(v20 + 64);
            if (v21)
              v22 = v21 + 8;
            else
              v22 = 0;
            v23 = *(int *)(v20 + 56);
            if ((_DWORD)v23)
            {
              v24 = v22 + 8 * v23;
              v25 = v43;
              do
              {
                v26 = *(_DWORD *)(*(_QWORD *)v22 + 64);
                if (v25 >= v44)
                {
                  v28 = (char *)__p;
                  v29 = (v25 - (_BYTE *)__p) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    sub_239FEBE68();
                  v31 = v44 - (_BYTE *)__p;
                  if ((v44 - (_BYTE *)__p) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)sub_23A05F72C((uint64_t)&v44, v32);
                    v28 = (char *)__p;
                    v25 = v43;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = &v33[4 * v29];
                  *(_DWORD *)v34 = v26;
                  v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  __p = v34;
                  v43 = v27;
                  v44 = &v33[4 * v32];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v25 = v26;
                  v27 = v25 + 4;
                }
                v43 = v27;
                v22 += 8;
                v25 = v27;
              }
              while (v22 != v24);
            }
            v41 = *(_DWORD *)(v20 + 80);
            v36 = a7[1];
            if (v36 >= a7[2])
            {
              v37 = sub_23A072DDC(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_23A072D78((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_23A089B90(v39);
      }
      return (_QWORD *)sub_23A07D19C(&v45);
    }
    else
    {
      v45 = 13;
      v38 = (_QWORD *)sub_23A05E390((uint64_t)v46);
      sub_23A00AE20(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v46, (uint64_t)") [", 3);
      sub_23A00AE20(v46, (uint64_t)"ids", 3);
      sub_23A00AE20(v46, (uint64_t)"] ", 2);
      sub_23A00AE20(v46, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v46[1] = MEMORY[0x24BEDB848] + 16;
      if (v50 < 0)
        operator delete(v49);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v51);
    }
  }
  return result;
}

void sub_23A0692BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sub_23A05BFF0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_23A069308(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_239FEBE68();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_23A072804(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_23A072B58(a1, v7);
    return sub_23A072CEC((uint64_t)v7);
  }
  return result;
}

void sub_23A069384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A069398(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_239FEBE68();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_23A05F72C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_23A06942C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *result;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = a7 + 48;
    while (1)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A00AE20(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *(unsigned __int8 **)v10;
      v16 = *(unsigned int *)(v10 + 16);
      v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_23A063BF4(__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = (_QWORD *)*v54;
            sub_23A08ACC0((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = sub_23A07D848(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        sub_23A09D128(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
        sub_23A00AE20(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
        sub_23A00AE20(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_23A09D128(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = sub_23A07D848(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sub_23A05DB98(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_23A063BF4(__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = (_QWORD *)*v44;
            sub_23A08ACC0((uint64_t *)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              sub_23A063BF4(__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = (_QWORD *)*v47;
              sub_23A08ACC0((uint64_t *)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = sub_23A0711F8(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = (_QWORD *)*v79;
          sub_23A08ACC0(v104, (__int128 *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            sub_239FEBDE0();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = (_QWORD *)*v92;
          sub_23A08ACC0((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_23A09D128(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = sub_23A07D848(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_23A063BF4(__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = (_QWORD *)*v66;
      sub_23A08ACC0((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      sub_23A063BF4(__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = (_QWORD *)*v69;
      sub_23A08ACC0((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 24;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sub_23A06A1A4(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_23A089B98(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_23A063BF4(__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = (_QWORD *)*v95;
      sub_23A08ACC0((uint64_t *)(a7 + 72), (__int128 *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sub_23A089B90(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)sub_23A05E390((uint64_t)&__p[1]);
  sub_23A00AE20(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_23A00AE20(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_23A00AE20(&__p[1], (uint64_t)") [", 3);
  sub_23A00AE20(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_23A00AE20(&__p[1], (uint64_t)"] ", 2);
  sub_23A00AE20(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_23A05BF64((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x24BEDB800];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v117 = MEMORY[0x24BEDB848] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x23B83FDF8](&v120);
}

void sub_23A06A0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A06A1A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sub_23A073580(*(_QWORD *)(v15 - 8), v16);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_23A09D128(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = sub_23A07D848(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_23A08BD88((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = sub_23A08BDA0(__p, "CHECK failed: (index) < (current_size_): ");
            sub_23A08BED0((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_23A08BED8((uint64_t)__p);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sub_23A05C22C(a1[1]);
          v41 = strlen(v40);
          v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sub_23A05C22C(a1[1]);
          sub_23A05C22C(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_23A063BF4(__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = (_QWORD *)*v46;
          sub_23A08ACC0((uint64_t *)(v39 + 48), (__int128 *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_23A09D128(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = sub_23A07D848(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sub_23A05C27C(a1[1]);
          v50 = strlen(v49);
          v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sub_23A05C27C(a1[1]);
          sub_23A05C27C(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_23A063BF4(__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = (_QWORD *)*v55;
          sub_23A08ACC0((uint64_t *)(v25 + 48), (__int128 *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sub_23A089B90(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = sub_23A0711F8(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sub_23A05C1DC(a1[1]);
                sub_23A05C1DC(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_23A063BF4(__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = (_QWORD *)*v31;
                sub_23A08ACC0((uint64_t *)(v27 + 48), (__int128 *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sub_23A089CF4(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_23A089B90(a4);
}

void sub_23A06A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_23A08BED8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_23A06A624(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (!*a5)
  {
    sub_23A089B98(a5);
    if (a4)
    {
      sub_23A07C77C(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_23A089B98(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sub_23A06942C(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          v11 = sub_23A089B98(a5);
          sub_23A089B90(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)sub_23A05E390((uint64_t)&v18);
      sub_23A00AE20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(&v18, (uint64_t)") [", 3);
      sub_23A00AE20(&v18, (uint64_t)"spt", 3);
      sub_23A00AE20(&v18, (uint64_t)"] ", 2);
      sub_23A00AE20(&v18, (uint64_t)"output proto is null", 20);
      sub_23A05BF64((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v19 = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x23B83FDF8](&v22);
    }
  }
}

void sub_23A06A89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23A06A8F8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (*a5)
    return;
  sub_23A089B98(a5);
  if (a4)
  {
    sub_23A07D1C4(a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_23A089B98(a5);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_23A09D128(a4 + 16, v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_23A07D8FC(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sub_23A06942C(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5)
              goto LABEL_29;
            sub_23A089B98(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_23A089B90(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_23A05E390((uint64_t)&v30);
        sub_23A00AE20(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&v30, (uint64_t)") [", 3);
        sub_23A00AE20(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_23A00AE20(&v30, (uint64_t)"] ", 2);
        sub_23A00AE20(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_23A05BF64((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x23B83FDF8](v34);
LABEL_29:
        v29 = (void **)&v21;
        sub_23A05EE48(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_23A05E390((uint64_t)&v30);
        sub_23A00AE20(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(&v30, (uint64_t)") [", 3);
        sub_23A00AE20(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_23A00AE20(&v30, (uint64_t)"] ", 2);
        sub_23A00AE20(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_23A05BF64((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x23B83FDF8](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)sub_23A05E390((uint64_t)&v30);
    sub_23A00AE20(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(&v30, (uint64_t)") [", 3);
    sub_23A00AE20(&v30, (uint64_t)"nbest_spt", 9);
    sub_23A00AE20(&v30, (uint64_t)"] ", 2);
    sub_23A00AE20(&v30, (uint64_t)"output proto is null", 20);
    sub_23A05BF64((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](v34);
  }
}

void sub_23A06AE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_23A05EE48((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_23A06AEF8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[3];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  float *v39[11];
  char v40;
  uint64_t v41;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a6);
  if (*a6)
    return;
  sub_23A089B98(a6);
  if (a5)
  {
    sub_23A07C77C(a5);
    if (a4 < 513)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      __p = 0;
      v33 = 0;
      v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0)
          operator delete(v35);
        return;
      }
      sub_23A089B98(a6);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_23A05E390((uint64_t)v39);
            sub_23A00AE20(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_23A00AE20(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_23A00AE20(v39, (uint64_t)") [", 3);
            sub_23A00AE20(v39, (uint64_t)"!nbests.empty()", 15);
            sub_23A00AE20(v39, (uint64_t)"] ", 2);
            sub_23A00AE20(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_23A05BF64((unsigned int *)&v38, (uint64_t)a6);
            sub_23A05BFF0((uint64_t)&v38);
            v38 = &v30;
            sub_23A05EE48((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_23A072EDC(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1)
              v20 = 1;
            else
              v20 = (v31 - v30) >> 5;
            v21 = (float *)(v30 + 24);
            do
            {
              v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          v23 = sub_23A088010();
          sub_23A072F5C((uint64_t)v29, (float *)v38, v39[0]);
          v24 = HIBYTE(v37);
          v25 = v36;
          v26 = sub_23A073288((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0)
            v27 = v24;
          else
            v27 = v25;
          sub_23A06942C(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          v28 = *a6;
          if (!*a6)
            sub_23A089B98(a6);
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          v38 = &v30;
          sub_23A05EE48((void ***)&v38);
          if (v28)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v38);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_23A05E390((uint64_t)v39);
          sub_23A00AE20(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_23A00AE20(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_23A00AE20(v39, (uint64_t)") [", 3);
          sub_23A00AE20(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_23A00AE20(v39, (uint64_t)"] ", 2);
          sub_23A00AE20(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_23A05BF64((unsigned int *)&v38, (uint64_t)a6);
          sub_23A05BFF0((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      sub_23A06942C(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_23A089B98(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_23A089B90(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    v15 = (_QWORD *)sub_23A05E390((uint64_t)v39);
    sub_23A00AE20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v39, (uint64_t)") [", 3);
    sub_23A00AE20(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_23A00AE20(v39, (uint64_t)"] ", 2);
    sub_23A00AE20(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_23A05BF64((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    v14 = (_QWORD *)sub_23A05E390((uint64_t)v39);
    sub_23A00AE20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v39, (uint64_t)") [", 3);
    sub_23A00AE20(v39, (uint64_t)"spt", 3);
    sub_23A00AE20(v39, (uint64_t)"] ", 2);
    sub_23A00AE20(v39, (uint64_t)"output proto is null", 20);
    sub_23A05BF64((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x24BEDB800];
  *(float **)((char *)v39 + *((_QWORD *)v39[0] - 3)) = *(float **)(MEMORY[0x24BEDB800] + 24);
  v39[1] = (float *)(MEMORY[0x24BEDB848] + 16);
  if (v40 < 0)
    operator delete(v39[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](&v41);
}

void sub_23A06B5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_23A05EE48((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_23A06B6A0(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_23A089B98(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_23A09D128(a4 + 16, v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = sub_23A07D8FC(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sub_23A06942C((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5)
            goto LABEL_23;
          sub_23A089B98(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_23A089B90(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_23A05E390((uint64_t)&v32);
      sub_23A00AE20(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(&v32, (uint64_t)") [", 3);
      sub_23A00AE20(&v32, (uint64_t)"!results.empty()", 16);
      sub_23A00AE20(&v32, (uint64_t)"] ", 2);
      sub_23A00AE20(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_23A05BF64((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v33 = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x23B83FDF8](v36);
LABEL_23:
      v31 = (void **)&v23;
      sub_23A05EE48(&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)sub_23A05E390((uint64_t)&v32);
    sub_23A00AE20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(&v32, (uint64_t)") [", 3);
    sub_23A00AE20(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_23A00AE20(&v32, (uint64_t)"] ", 2);
    sub_23A00AE20(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_23A05BF64((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v33 = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](v36);
  }
}

void sub_23A06BAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_23A05EE48((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_23A06BB68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_23A089B98(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sub_23A089B90(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)sub_23A05E390((uint64_t)&v19);
    sub_23A00AE20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(&v19, (uint64_t)") [", 3);
    sub_23A00AE20(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_23A00AE20(&v19, (uint64_t)"] ", 2);
    sub_23A00AE20(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_23A05BF64((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v20 = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v23);
  }
}

void sub_23A06BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_23A06BDB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_23A06732C(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23A06BE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A06BE40(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a4);
  if (*a4)
    return;
  sub_23A089B98(a4);
  if (v4)
  {
    sub_23A07C77C(v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
      v9 = (char *)&unk_23A0A473D;
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_23A09D128(v68 + 48, v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = sub_23A07D848(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = (_QWORD *)*v22;
        v23 = sub_23A08ACE4((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x23B83FB94](v23, v12, v13);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_23A06A1A4(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4)
      return;
    sub_23A089B98(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = (_QWORD *)*v26;
    v60[1] = &v61;
    v61 = sub_23A08ACE4((uint64_t *)(v4 + 72), (uint64_t)v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = sub_23A070620(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64)))
          break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sub_23A06C5C8((uint64_t)v59, v29, v30, a4);
      if (*a4)
        goto LABEL_95;
      sub_23A089B98(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_239FEE1FC(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sub_23A06CAD0(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              *v52 = &unk_23A0A47D2;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              sub_23A070DE0(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_239FEE1FC(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              sub_239FEBDE0();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sub_23A06C5C8((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_23A089B98(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sub_23A089B90(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)sub_23A05E390((uint64_t)&v62 + 8);
    sub_23A00AE20(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    sub_23A00AE20((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    sub_23A00AE20((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    sub_23A00AE20((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_23A05BF64((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v63 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v67);
  }
}

void sub_23A06C570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A06C5C8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  int v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  int v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  std::string v37;

  if (a2 >= a3)
  {
    sub_23A089B90(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    v8 = a2;
    do
    {
      v9 = sub_23A070620(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sub_23A05CD54(v12, v11);
      if (v13 < 0)
      {
        v33 = 13;
        sub_23A05E390((uint64_t)v34);
        sub_23A00AE20(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(v34, (uint64_t)") [", 3);
        sub_23A00AE20(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_23A00AE20(v34, (uint64_t)"] ", 2);
        sub_23A05BF64(&v33, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v14 = v37.__r_.__value_.__r.__words[1];
    if (v14 >= 1)
    {
      v15 = 0;
      while (1)
      {
        v32 = 0;
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size < v15)
          sub_239FF1D10("string_view::substr");
        v17 = v15;
        v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v37;
        if (sub_23A087EC8((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533)
          break;
        v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            v33 = 13;
            sub_23A05E390((uint64_t)v34);
            sub_23A00AE20(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_23A00AE20(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_23A00AE20(v34, (uint64_t)") [", 3);
            sub_23A00AE20(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_23A00AE20(v34, (uint64_t)"] ", 2);
            sub_23A05BF64(&v33, (uint64_t)v31);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        sub_23A06CAD0(*(_QWORD ***)(a1 + 8), v19, &unk_23A0A47CE, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        v15 = v17 + v22;
        if (v15 >= v14)
          goto LABEL_47;
      }
      v19 = v17 + a2;
LABEL_23:
      v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v37.__r_.__value_.__l.__size_;
      v21 = v20 - v17;
      if (v20 < v17)
        sub_239FF1D10("string_view::substr");
      v22 = v32;
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v21 >= v32)
        v24 = v32;
      else
        v24 = v21;
      if (v32)
      {
        v25 = 0;
        v26 = (char *)v23 + v17;
        v27 = v19;
        do
        {
          v28 = v22 - 1;
          if (v25 == v28)
            v29 = v26;
          else
            v29 = "";
          if (v25 == v28)
            v30 = v24;
          else
            v30 = 0;
          sub_23A06CAD0(*(_QWORD ***)(a1 + 8), v27 + v25++, v29, v30);
          v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    v15 = 0;
LABEL_47:
    if (v15 + a2 == a3)
    {
      sub_23A089B90(v31);
      goto LABEL_53;
    }
    v33 = 13;
    sub_23A05E390((uint64_t)v34);
    sub_23A00AE20(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v34, (uint64_t)") [", 3);
    sub_23A00AE20(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_23A00AE20(v34, (uint64_t)"] ", 2);
    sub_23A05BF64(&v33, (uint64_t)v31);
LABEL_50:
    v34[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v34[1] = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete((void *)v34[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](&v36);
LABEL_53:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_23A06CA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sub_23A06CAD0(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = sub_23A0711F8(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  sub_23A08ACC0((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_23A06CC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A06CC44(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  sub_23A068E68(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        v14 = (_BYTE *)sub_23A0733DC(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_23A0734E8((int)&v21, v20, (uint64_t)&__p);
        v14 = v13 + 24;
      }
      v20 = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    sub_23A06CDFC("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_23A089CF4(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_23A070CE0((void ***)&__p);
}

void sub_23A06CDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  sub_23A070CE0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_23A06CDFC(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_23A063BF4(&__dst, __src, __len);
  sub_23A05E390((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A06CF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A06CF6C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char v13;
  uint64_t v14;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  v2 = v14;
  sub_23A089B98(&v14);
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(*a1[1] + 128))(a1[1]);
  if ((int)sub_23A087EB8() <= 2)
  {
    v13 = 0;
    v3 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_23A00AE20(v4, (uint64_t)") ", 2);
    v6 = sub_23A00AE20(v5, (uint64_t)"LOG(", 4);
    v7 = sub_23A00AE20(v6, (uint64_t)"ERROR", 5);
    v8 = sub_23A00AE20(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v14, a1);
    v9 = sub_23A089E80(&v14);
    v10 = strlen(v9);
    v11 = sub_23A00AE20(v8, (uint64_t)v9, v10);
    sub_23A00AE20(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v14);
    sub_23A05E47C(&v13);
  }
  return 0;
}

void sub_23A06D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06D0D0(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  v6 = v18;
  sub_23A089B98(&v18);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sub_23A087EB8() <= 2)
  {
    v17 = 0;
    v7 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_23A00AE20(v8, (uint64_t)") ", 2);
    v10 = sub_23A00AE20(v9, (uint64_t)"LOG(", 4);
    v11 = sub_23A00AE20(v10, (uint64_t)"ERROR", 5);
    v12 = sub_23A00AE20(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v18, a1);
    v13 = sub_23A089E80(&v18);
    v14 = strlen(v13);
    v15 = sub_23A00AE20(v12, (uint64_t)v13, v14);
    sub_23A00AE20(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v18);
    sub_23A05E47C(&v17);
  }
  return 0;
}

void sub_23A06D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

const char *sub_23A06D24C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_23A089B98(&v17);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  if ((int)sub_23A087EB8() <= 2)
  {
    v16 = 0;
    v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
    v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v11 = sub_23A089E80(&v17);
    v12 = strlen(v11);
    v13 = sub_23A00AE20(v10, (uint64_t)v11, v12);
    v14 = sub_23A00AE20(v13, (uint64_t)"\nReturns default value ", 23);
    sub_23A00AE20(v14, (uint64_t)"", 0);
    sub_23A089B98(&v17);
    sub_23A05E47C(&v16);
  }
  return "";
}

void sub_23A06D3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

float sub_23A06D3D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_23A089B98(&v17);
  if (!v4)
    return (*(float (**)(_QWORD *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  v5 = 0.0;
  if ((int)sub_23A087EB8() <= 2)
  {
    v16 = 0;
    v6 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = sub_23A00AE20(v7, (uint64_t)") ", 2);
    v9 = sub_23A00AE20(v8, (uint64_t)"LOG(", 4);
    v10 = sub_23A00AE20(v9, (uint64_t)"ERROR", 5);
    v11 = sub_23A00AE20(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v12 = sub_23A089E80(&v17);
    v13 = strlen(v12);
    v14 = sub_23A00AE20(v11, (uint64_t)v12, v13);
    sub_23A00AE20(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v17);
    sub_23A05E47C(&v16);
  }
  return v5;
}

void sub_23A06D52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06D554(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_23A089B98(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  if ((int)sub_23A087EB8() <= 2)
  {
    v15 = 0;
    v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
    v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_23A089E80(&v16);
    v12 = strlen(v11);
    v13 = sub_23A00AE20(v10, (uint64_t)v11, v12);
    sub_23A00AE20(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v16);
    sub_23A05E47C(&v15);
  }
  return 0;
}

void sub_23A06D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06D6C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_23A089B98(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  if ((int)sub_23A087EB8() <= 2)
  {
    v15 = 0;
    v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
    v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_23A089E80(&v16);
    v12 = strlen(v11);
    v13 = sub_23A00AE20(v10, (uint64_t)v11, v12);
    sub_23A00AE20(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v16);
    sub_23A05E47C(&v15);
  }
  return 0;
}

void sub_23A06D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06D83C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_23A089B98(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  if ((int)sub_23A087EB8() <= 2)
  {
    v15 = 0;
    v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
    v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_23A089E80(&v16);
    v12 = strlen(v11);
    v13 = sub_23A00AE20(v10, (uint64_t)v11, v12);
    sub_23A00AE20(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v16);
    sub_23A05E47C(&v15);
  }
  return 0;
}

void sub_23A06D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06D9B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_23A089B98(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  if ((int)sub_23A087EB8() <= 2)
  {
    v15 = 0;
    v5 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_23A00AE20(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_23A00AE20(v6, (uint64_t)") ", 2);
    v8 = sub_23A00AE20(v7, (uint64_t)"LOG(", 4);
    v9 = sub_23A00AE20(v8, (uint64_t)"ERROR", 5);
    v10 = sub_23A00AE20(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_23A089E80(&v16);
    v12 = strlen(v11);
    v13 = sub_23A00AE20(v10, (uint64_t)v11, v12);
    sub_23A00AE20(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_23A089B98(&v16);
    sub_23A05E47C(&v15);
  }
  return 0;
}

void sub_23A06DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_23A05E47C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06DB24(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_23A05C1DC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_23A06DB88(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_23A05C22C(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_23A06DBEC(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_23A05C27C(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_23A06DC50(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_23A05C2CC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_23A06DCB4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_23A089B98(a5);
    if (a4)
    {
      sub_23A070D20(a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_23A05E390((uint64_t)v16);
      sub_23A00AE20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v16, (uint64_t)") [", 3);
      sub_23A00AE20(v16, (uint64_t)"pieces", 6);
      sub_23A00AE20(v16, (uint64_t)"] ", 2);
      sub_23A00AE20(v16, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v18);
    }
  }
  return result;
}

void sub_23A06DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A06DE90@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_23A089B98(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_23A05E390((uint64_t)v16);
      sub_23A00AE20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v16, (uint64_t)") [", 3);
      sub_23A00AE20(v16, (uint64_t)"ids", 3);
      sub_23A00AE20(v16, (uint64_t)"] ", 2);
      sub_23A00AE20(v16, (uint64_t)"output container is null", 24);
      sub_23A05BF64(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x23B83FDF8](&v18);
    }
  }
  return result;
}

void sub_23A06E054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06E06C(uint64_t a1)
{
  sub_23A004580(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_23A06E094@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  _DWORD *v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;

  v47 = a2;
  v48 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v43) = 13;
    v7 = (_QWORD *)sub_23A05E390((uint64_t)v44);
    sub_23A00AE20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v44, (uint64_t)") [", 3);
    sub_23A00AE20(v44, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_23A00AE20(v44, (uint64_t)"] ", 2);
    sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*a2)
  {
    LODWORD(v43) = 13;
    v6 = (_QWORD *)sub_23A05E390((uint64_t)v44);
    sub_23A00AE20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v44, (uint64_t)") [", 3);
    sub_23A00AE20(v44, (uint64_t)"header->sentinel == 0", 21);
    sub_23A00AE20(v44, (uint64_t)"] ", 2);
    sub_23A00AE20(v44, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
LABEL_5:
    v44[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v44[1] = MEMORY[0x24BEDB848] + 16;
    if (v45 < 0)
      operator delete((void *)v44[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x23B83FDF8](&v46);
  }
  result = sub_23A088274(&v47, 0x14uLL, a4);
  if (*a4)
    return result;
  sub_23A089B98(a4);
  v10 = a2[1];
  if (v48 < v10)
  {
    LODWORD(v43) = 13;
    v11 = (_QWORD *)sub_23A05E390((uint64_t)v44);
    sub_23A00AE20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v44, (uint64_t)") [", 3);
    sub_23A00AE20(v44, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_23A00AE20(v44, (uint64_t)"] ", 2);
    sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  v12 = (uint64_t)v47;
  v13 = operator new();
  sub_23A09D4F8(v13, v12, v10);
  v14 = a1[4];
  a1[4] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v13 = a1[4];
  }
  sub_23A089DA8(&v43, v13 + 88);
  v15 = (uint64_t)v43;
  sub_23A089B98((uint64_t *)&v43);
  if (v15)
  {
    LODWORD(v43) = 13;
    v16 = (_QWORD *)sub_23A05E390((uint64_t)v44);
    sub_23A00AE20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v44, (uint64_t)") [", 3);
    sub_23A00AE20(v44, (uint64_t)"model_proto->status().ok()", 26);
    sub_23A00AE20(v44, (uint64_t)"] ", 2);
    sub_23A00AE20(v44, (uint64_t)"Failed to initialize ModelProto.", 32);
    sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  result = sub_23A088274(&v47, a2[1], a4);
  if (*a4)
    return result;
  sub_23A089B98(a4);
  if (v48 >= a2[2])
    v17 = a2[2];
  else
    v17 = v48;
  sub_23A0640C4(v13, (uint64_t)v47, v17, &v43);
  v18 = (uint64_t)v43;
  v43 = 0;
  v19 = a1[1];
  a1[1] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = (uint64_t)v43;
    v43 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v18 = a1[1];
  }
  if (!v18)
  {
    LODWORD(v43) = 13;
    v22 = (_QWORD *)sub_23A05E390((uint64_t)v44);
    sub_23A00AE20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_23A00AE20(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v44, (uint64_t)") [", 3);
    sub_23A00AE20(v44, (uint64_t)"model_", 6);
    sub_23A00AE20(v44, (uint64_t)"] ", 2);
    sub_23A00AE20(v44, (uint64_t)"Failed to initialize Model.", 27);
    sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
    return (_QWORD *)sub_23A05BFF0((uint64_t)&v43);
  }
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v18 + 16))(&v43);
  v21 = (uint64_t)v43;
  sub_23A089B98((uint64_t *)&v43);
  if (v21)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  result = sub_23A088274(&v47, a2[2], a4);
  if (!*a4)
  {
    sub_23A089B98(a4);
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      if (v48 >= v23)
      {
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]);
        v27 = a2[3];
        if (v48 < v27)
          v27 = v48;
        v43 = v47;
        v44[0] = v27;
        sub_23A06EA80(v26, (uint64_t)&v43, &v42);
        v28 = v42;
        v42 = 0;
        v29 = a1[2];
        a1[2] = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = v42;
          v42 = 0;
          if (v30)
            (*(void (**)(uint64_t *))(*v30 + 8))(v30);
        }
        (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[2] + 24))(&v43);
        v31 = (uint64_t)v43;
        sub_23A089B98((uint64_t *)&v43);
        if (!v31)
        {
          result = sub_23A088274(&v47, a2[3], a4);
          if (*a4)
            return result;
          sub_23A089B98(a4);
          v33 = a1[2];
          v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v34);
          if (a2[4])
          {
            v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 160))(a1[4]);
            v36 = a2[4];
            if (v48 < v36)
              v36 = v48;
            v43 = v47;
            v44[0] = v36;
            sub_23A06EA80(v35, (uint64_t)&v43, &v42);
            v37 = v42;
            v42 = 0;
            v38 = a1[3];
            a1[3] = v37;
            if (v38)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              v39 = v42;
              v42 = 0;
              if (v39)
                (*(void (**)(uint64_t *))(*v39 + 8))(v39);
            }
            (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[3] + 24))(&v43);
            v40 = (uint64_t)v43;
            sub_23A089B98((uint64_t *)&v43);
            if (v40)
            {
              LODWORD(v43) = 13;
              v41 = (_QWORD *)sub_23A05E390((uint64_t)v44);
              sub_23A00AE20(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_23A00AE20(v44, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_23A00AE20(v44, (uint64_t)") [", 3);
              sub_23A00AE20(v44, (uint64_t)"denormalizer_->status().ok()", 28);
              sub_23A00AE20(v44, (uint64_t)"] ", 2);
              sub_23A00AE20(v44, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
              return (_QWORD *)sub_23A05BFF0((uint64_t)&v43);
            }
            result = sub_23A088274(&v47, a2[4], a4);
            if (*a4)
              return result;
            sub_23A089B98(a4);
          }
          return sub_23A089B90(a4);
        }
        LODWORD(v43) = 13;
        v32 = (_QWORD *)sub_23A05E390((uint64_t)v44);
        sub_23A00AE20(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(v44, (uint64_t)") [", 3);
        sub_23A00AE20(v44, (uint64_t)"normalizer_->status().ok()", 26);
        sub_23A00AE20(v44, (uint64_t)"] ", 2);
        sub_23A00AE20(v44, (uint64_t)"Failed to initialize Normalizer.", 32);
        sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
      }
      else
      {
        LODWORD(v43) = 13;
        v24 = (_QWORD *)sub_23A05E390((uint64_t)v44);
        sub_23A00AE20(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_23A00AE20(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_23A00AE20(v44, (uint64_t)") [", 3);
        sub_23A00AE20(v44, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        sub_23A00AE20(v44, (uint64_t)"] ", 2);
        sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v43) = 13;
      v25 = (_QWORD *)sub_23A05E390((uint64_t)v44);
      sub_23A00AE20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_23A00AE20(v44, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(v44, (uint64_t)") [", 3);
      sub_23A00AE20(v44, (uint64_t)"(header->normalizer_size) > (0)", 31);
      sub_23A00AE20(v44, (uint64_t)"] ", 2);
      sub_23A05BF64((unsigned int *)&v43, (uint64_t)a4);
    }
    return (_QWORD *)sub_23A05BFF0((uint64_t)&v43);
  }
  return result;
}

void sub_23A06EA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A05BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06EA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = sub_23A062684(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_23A06EAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_23A06EAFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  MEMORY[0x23B83FB94](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v2 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 119);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2, v3);
}

void sub_23A06EB58(_QWORD *a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_250B0D1E8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_23A073A0C(&__p, &v8);
  sub_23A06EC58(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_23A089B98(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_23A06EC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A06EC58(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::__fs::filesystem::path *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  std::__fs::filesystem::path *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::__fs::filesystem::path *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::__fs::filesystem::path __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::__fs::filesystem::path v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sub_23A073748(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_239FF1F64(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::__fs::filesystem::path *)a2;
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)sub_23A05E390((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_23A00AE20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a2;
    else
      v13 = *(_BYTE **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    sub_23A07390C(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_23A05BF64((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83FDF8](v29);
    return;
  }
  sub_23A07378C((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_23A07384C((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_239FF1F64(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_23A05E390((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    sub_23A07390C(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sub_23A05BF64((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_239FF1F64(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)sub_23A05E390((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_23A00AE20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_23A089B90(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)sub_23A05E390((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_23A00AE20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_23A05E390((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_23A00AE20(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_23A07390C(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_23A05BF64((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_23A06F3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sub_23A06F4A8(_QWORD *a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_250B0D1E8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_23A073A0C(&__p, &v8);
  sub_23A06EC58(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_23A089B98(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_23A06F58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A06F5A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A070CE0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F608@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A06F66C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A07102C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F6CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A07109C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F72C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A070CE0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F78C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A06F7F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A071130((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F850@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A05EE48((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A06F8B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F8F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A06F914@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F95C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23A06F978@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v3);
  return sub_23A089B98(&v3);
}

void sub_23A06F9C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_23A06F9DC(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sub_23A089B98(&v3);
  return v1;
}

void sub_23A06FA24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_250B0CFF8;
  v15 = 0;
  v16 = 0;
  v14 = sub_23A07C744();
  v8 = sub_23A06437C((uint64_t)&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  sub_23A096F60((uint64_t)v14, a4);
  sub_23A089B98(&v12);
  v13 = &off_250B0CFF8;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_23A06FAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A0711A0(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_23A06FB20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_250B0CFF8;
  v19 = 0;
  v20 = 0;
  v18 = sub_23A07C744();
  v12 = sub_23A06437C((uint64_t)&v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  sub_23A096F60((uint64_t)v18, a5);
  sub_23A089B98(&v16);
  v17 = &off_250B0CFF8;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23A06FC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A0711A0(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_23A06FC3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_250B0D058;
  v10 = sub_23A0644D8((uint64_t)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sub_23A064558((uint64_t)v15, a5);
  sub_23A089B98(&v14);
  v15[0] = &off_250B0D058;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_23A06FD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23A089B98(&a9);
  sub_23A0711A0(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_23A06FD40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_250B0D058;
  v16 = sub_23A0644D8((uint64_t)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_23A064558((uint64_t)v21, a7);
  sub_23A089B98(&v20);
  v21[0] = &off_250B0D058;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_23A06FE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23A089B98(&a9);
  sub_23A0711A0(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_23A06FE6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_250B0CFF8;
  v13 = 0;
  v14 = 0;
  v12 = sub_23A07C744();
  v6 = sub_23A06437C((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  sub_23A096F60((uint64_t)v12, a3);
  sub_23A089B98(&v10);
  v11 = &off_250B0CFF8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_23A06FF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A0711A0(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_23A06FF60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_250B0CFF8;
  v13 = 0;
  v14 = 0;
  v12 = sub_23A07C744();
  v6 = sub_23A06437C((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  sub_23A096F60((uint64_t)v12, a3);
  sub_23A089B98(&v10);
  v11 = &off_250B0CFF8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_23A07002C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A0711A0(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_23A070054(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_250B0CFF8;
  v13 = 0;
  v14 = 0;
  v12 = sub_23A07C744();
  v6 = sub_23A06437C((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  sub_23A096F60((uint64_t)v12, a3);
  sub_23A089B98(&v10);
  v11 = &off_250B0CFF8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_23A070120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A0711A0(v2 + 16);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A070148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  *a4 = &off_250B0CFF8;
  a4[1] = sub_23A07C744();
  a4[2] = 0;
  a4[3] = 0;
  v8 = sub_23A06437C((uint64_t)a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v10, a1, a2, a3, v8);
  return sub_23A089B98(&v10);
}

void sub_23A0701D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A0701F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v14;

  *a5 = &off_250B0CFF8;
  a5[1] = sub_23A07C744();
  a5[2] = 0;
  a5[3] = 0;
  v12 = sub_23A06437C((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v14, a1, a2, a3, a4, v12, a6);
  return sub_23A089B98(&v14);
}

void sub_23A0702A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A0702B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;

  *a5 = &off_250B0D058;
  a5[1] = 0;
  a5[2] = 0;
  v9 = sub_23A0644D8((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_23A089B98(&v11);
}

void sub_23A070350(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  sub_23A0711A0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A070368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v17;

  *a7 = &off_250B0D058;
  a7[1] = 0;
  a7[2] = 0;
  v15 = sub_23A0644D8((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_23A089B98(&v17);
}

void sub_23A070428(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A070440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_250B0CFF8;
  a3[1] = sub_23A07C744();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_23A06437C((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v8, a1, a2, v6);
  return sub_23A089B98(&v8);
}

void sub_23A0704C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A0704E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_250B0CFF8;
  a3[1] = sub_23A07C744();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_23A06437C((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v8, a1, a2, v6);
  return sub_23A089B98(&v8);
}

void sub_23A070568(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A070580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_250B0CFF8;
  a3[1] = sub_23A07C744();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_23A06437C((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v8, a1, a2, v6);
  return sub_23A089B98(&v8);
}

void sub_23A070608(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_23A0711A0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_23A070620(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_23A08BDA0(v8, "CHECK failed: (index) >= (0): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_23A08BDA0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_23A0706DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23A0706FC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_239FEBE68();
  result = (char *)sub_23A05F72C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_23A07073C(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_23A08BDA0(v8, "CHECK failed: (index) >= (0): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_23A08BDA0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_23A0707F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A070818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83FDF8](a1 + 112);
  return a1;
}

uint64_t sub_23A07089C(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_23A08BDA0(v8, "CHECK failed: (index) >= (0): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_23A08BDA0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_23A070958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_23A070978(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  sub_239FEBE68();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)sub_23A05F5F8((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_239FEBE68();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)sub_23A05F5F8((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_23A070C1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23A070C40(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A05ED34(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23A070CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23A070CE0(&a9);
  _Unwind_Resume(a1);
}

void sub_23A070CE0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_23A070D20((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_23A070D20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_23A070D6C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A06225C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23A070DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A070DE0(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  sub_23A063BF4(&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = sub_23A070F74((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = sub_23A070F74((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A070F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A070F74(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void sub_23A07102C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_23A070CE0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_23A07109C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_23A0710DC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_23A0710DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_23A071130(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_23A070CE0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_23A0711A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_23A0711F8(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_23A08BDA0(v8, "CHECK failed: (index) >= (0): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_23A08BDA0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_23A0712B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A0712D4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_23A07131C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23A071308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A07131C(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250B0D820;
  sub_23A07C5FC(a1 + 3, 0);
  return a1;
}

void sub_23A071354(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_23A071368(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A071378(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A0713A8(uint64_t a1)
{
  return sub_23A07C71C(a1 + 24);
}

_QWORD *sub_23A0713B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = sub_23A0713FC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23A0713E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A0713FC(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250B0D858;
  sub_23A07D0E4(a1 + 3, 0);
  return a1;
}

void sub_23A071434(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_23A071448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23A071458(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B0D858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A071488(uint64_t a1)
{
  return sub_23A07D19C(a1 + 24);
}

uint64_t sub_23A071494(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_23A084A3C();
    JUMPOUT(0x23B83FE88);
  }
  return result;
}

void sub_23A0714D0(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_23A063BF4(&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  sub_23A0715D0(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A07159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23A0715D0(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  sub_23A063BF4(&__dst, __src, __len);
  v8 = strlen(a3);
  sub_23A0716C0(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A07168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23A0716C0(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  sub_23A063BF4(&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  sub_23A063BF4(__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_23A071774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A0717A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A07181C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A07181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_23A0718B8((uint64_t)v12);
  return a6;
}

uint64_t sub_23A0718B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A0718EC(a1);
  return a1;
}

void sub_23A0718EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_23A071930(uint64_t a1)
{
  sub_23A071964(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23A071964(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_23A0719B8(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_23A071A38((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_23A071A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A004580(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_23A071A38(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23A071ABC(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_23A05F360(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_23A071ABC(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_23A05F3B4((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_23A05F3B4((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_23A05F2C4((uint64_t)a1, a3, a5);
  }
  if (sub_23A05F3B4((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_23A05F3B4((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return sub_23A05F2C4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_23A071C54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_23A05F3B4(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_23A05F3B4(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_23A071CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23A071DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x23B83FDF8](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A071E0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83FDF8](a1 + 128);
  return a1;
}

_QWORD *sub_23A071E94(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_239FF1F64((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_23A071EE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A071EF0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_23A05ED84(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_239FF1F64(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_23A0717A8(a1, v15);
  v13 = a1[1];
  sub_23A071930((uint64_t)v15);
  return v13;
}

void sub_23A071FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A071930((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23A072010(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_239FF559C((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_23A072064(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A07206C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_23A05ED84(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_239FF559C(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  sub_23A07218C(a1, v14);
  v12 = a1[1];
  sub_23A07231C(v14);
  return v12;
}

void sub_23A072178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A07231C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07218C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A072200((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A072200(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A0722A0((uint64_t)v11);
  return v9;
}

uint64_t sub_23A0722A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A0722D4(a1);
  return a1;
}

void sub_23A0722D4(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_23A070CE0(&v3);
    v1 += 3;
  }
}

void **sub_23A07231C(void **a1)
{
  sub_23A07234C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_23A07234C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_23A070CE0(&v5);
  }
}

_QWORD *sub_23A07239C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_23A072500(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_23A0723E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A0723EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_23A05ED84(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_23A072500(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_23A072578(a1, v14);
  v12 = a1[1];
  sub_23A072704((uint64_t)v14);
  return v12;
}

void sub_23A0724EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072704((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A072500(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_23A0706FC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23A07255C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A072578(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A0725EC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A0725EC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A07268C((uint64_t)v11);
  return v9;
}

uint64_t sub_23A07268C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A0726C0(a1);
  return a1;
}

void sub_23A0726C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_23A072704(uint64_t a1)
{
  sub_23A072738(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23A072738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_23A072790(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A072838((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_23A072804(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_239FF1A44();
  return operator new(32 * a2);
}

uint64_t sub_23A072838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A0728E0((uint64_t)v11);
  return v9;
}

uint64_t sub_23A0728E0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A072914(a1);
  return a1;
}

void sub_23A072914(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_23A070CE0(&v3);
    v1 += 4;
  }
}

void **sub_23A07295C(void **a1)
{
  sub_23A07298C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_23A07298C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_23A070CE0(&v5);
  }
}

float sub_23A0729DC(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_239FF559C((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_23A072A44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A072A4C(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_239FEBE68();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_23A072804(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_239FF559C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_23A072790(a1, v16);
  v14 = a1[1];
  sub_23A07295C(v16);
  return v14;
}

void sub_23A072B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A07295C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A072B58(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A072BCC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A072BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A072C74((uint64_t)v11);
  return v9;
}

uint64_t sub_23A072C74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A072CA8(a1);
  return a1;
}

void sub_23A072CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_23A072CEC(uint64_t a1)
{
  sub_23A072D20(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23A072D20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_23A072D78(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_23A072500((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_23A072DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A072DDC(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_239FEBE68();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_23A072804(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_23A072500(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_23A072B58(a1, v16);
  v14 = a1[1];
  sub_23A072CEC((uint64_t)v16);
  return v14;
}

void sub_23A072EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A072EDC(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A0706FC(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23A072F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A072F5C(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_23A0730AC((char *)a1, a2, a3, a3 - a2);
  sub_23A072FB4((double **)a1);
  return a1;
}

void sub_23A072F98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A072FB4(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_23A073160((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      sub_23A073214(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_23A0730AC(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = sub_23A073120(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23A073104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23A073120(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_239FEBE68();
  result = (char *)sub_23A05F0AC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_23A073160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_23A05F0AC(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *sub_23A073214(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A073120(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23A07326C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_23A073288(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = sub_23A07333C(a2);
  v8 = sub_23A07333C(a2);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_23A07333C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_23A0733DC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_239FEBE68();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_23A05ED84((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[24 * v3];
  v13 = &v7[24 * v6];
  sub_23A0734E8((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 24;
  sub_23A0717A8(a1, &v10);
  v8 = a1[1];
  sub_23A071930((uint64_t)&v10);
  return v8;
}

void sub_23A0734D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A071930((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A0734E8(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t sub_23A073580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 != a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 1) != 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((v4 & 1) != 0)
      v5 = (_QWORD *)*v5;
    if (v3 == v5)
      return (uint64_t)sub_23A07C358(a1, a2);
    else
      return sub_23A09668C(a1, a2);
  }
  return a1;
}

uint64_t sub_23A0735C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_23A073644((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_23A07362C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A004580(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_23A073644(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23A071ABC(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_23A05F360(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_23A0736D0(_QWORD *a1)
{
  *a1 = &off_250B0D1E8;
  sub_23A073748((uint64_t)a1);
  return a1;
}

void sub_23A073704(_QWORD *a1)
{
  *a1 = &off_250B0D1E8;
  sub_23A073748((uint64_t)a1);
  JUMPOUT(0x23B83FE88);
}

void *sub_23A073748(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double sub_23A07378C@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double sub_23A07384C@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_239FEBDE0();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_23A07390C(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_23A00AE20(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_23A0739EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_23A073A0C(std::string *this, std::string **a2)
{
  std::string *v3;
  std::string *v4;
  int v5;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = (std::string *)((char *)v3 - 1);
  do
  {
    v5 = v4->__r_.__value_.__s.__data_[1];
    v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  sub_23A000B20(this, v3, v4);
  return this;
}

void sub_23A073A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_23A073A68()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

uint64_t sub_23A073A90(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_250B0D448;
  sub_23A07A0E0((_QWORD *)(a1 + 96));
  v4 = (void **)(a1 + 72);
  sub_23A07109C(&v4);
  v4 = (void **)(a1 + 48);
  sub_23A07109C(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23A073B00(uint64_t a1)
{
  sub_23A073A90(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A073B24(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_239FEBE68();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)sub_23A05F0AC((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_23A073CA4(_QWORD *a1)
{
  sub_23A0710DC(a1 + 6);
  sub_23A0710DC(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_23A073CE8((uint64_t)(a1 + 12));
}

void sub_23A073CE8(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_23A073D60(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sub_23A073CA4((_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  sub_23A063A44((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_23A0B90EE[(unint64_t)*a2 >> 4])
        v9 = asc_23A0B90EE[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_23A05F0AC(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      sub_239FEBE68();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_23A05F0AC(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  sub_23A07419C((uint64_t *)(a1 + 48), v32 + 1);
  sub_23A07419C((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    sub_23A063A44((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    sub_23A063A44((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sub_23A073B24((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      sub_239FEBE68();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)sub_23A05F0AC((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sub_23A073B24((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      sub_239FEBE68();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)sub_23A05F0AC((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void sub_23A07419C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_23A07A15C(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_23A074230(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_23A073B24((_QWORD *)(a1 + 96));
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_239FEBE68();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_23A05F0AC((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*(_QWORD *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_239FEBE68();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)sub_23A05F0AC((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sub_23A074454(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((a1[4] - a1[3]) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = a1[6];
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              sub_239FEBE68();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)sub_23A05F0AC((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_23A079290((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(a1[9] + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sub_23A087EB8() <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_23A00AE20(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = sub_23A00AE20(v40, (uint64_t)") ", 2);
    v42 = sub_23A00AE20(v41, (uint64_t)"LOG(", 4);
    v43 = sub_23A00AE20(v42, (uint64_t)"ERROR", 5);
    v44 = sub_23A00AE20(v43, (uint64_t)") ", 2);
    sub_23A00AE20(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_23A05E47C(&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_23A07474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A074780(_QWORD *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((a1[4] - a1[3]) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = a1[16] + a1[17] * a1[18];
  v29 = 0;
  v25 = a2;
  sub_23A072EDC(a2, v8, &v29);
  v9 = 0;
  v28 = a1[6];
  v26 = a1;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = v26[9] + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_23A074904(_QWORD *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = a1[3];
  v4 = a1[4];
  v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_23A072EDC(v29, v6, __p);
  sub_23A074780(a1, (uint64_t *)__p, a2);
  v7 = 0;
  v27 = a1[6];
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = a1;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(v26[9] + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_23A074AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A074AC0(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *i;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  int v62;
  double *v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *j;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint8x8_t v108;
  _QWORD *v109;
  _QWORD *k;
  unint64_t v111;
  _QWORD *v112;
  float v113;
  _BOOL4 v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t prime;
  void *v118;
  void *v119;
  uint64_t v120;
  _QWORD **v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *m;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  int v146;
  char v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v153;
  void *v154[2];
  __int128 v155;
  float v156;
  _BYTE v157[48];
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  void *v163[3];
  void *v164[3];
  void *v165[4];
  void *__p[3];
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (**v171)();
  __int128 v172;
  _QWORD v173[3];
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_23A074454(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(_QWORD *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_23A07A408((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(_QWORD *)&v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_23A087EB8() <= 1)
    {
      LOBYTE(v171) = 0;
      v9 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_23A00AE20(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = sub_23A00AE20(v10, (uint64_t)") ", 2);
      v12 = sub_23A00AE20(v11, (uint64_t)"LOG(", 4);
      v13 = sub_23A00AE20(v12, (uint64_t)"WARNING", 7);
      v14 = sub_23A00AE20(v13, (uint64_t)") ", 2);
      sub_23A00AE20(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_23A05E47C(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &off_250B0D2F8;
  v174 = 512;
  v168 = 0uLL;
  v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v15 = sub_23A075C80(&v171);
  v167 = v15;
  v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_23A072EDC(__p, v17, v157);
  if (a3)
  {
    sub_23A074780(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v157;
    __p[2] = *(void **)&v157[16];
    v18 = sub_23A088010();
    v19 = sub_23A07333C(v18);
    v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    v21 = -logf(-v20);
  }
  else
  {
    sub_23A074454(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    v21 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_23A075DEC((uint64_t *)&v168, &v167);
  v146 = 0;
  v147 = 0;
  if (10 * (int)a2 >= 512)
    v22 = 512;
  else
    v22 = 10 * a2;
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  v148 = v23;
  while (1)
  {
    v24 = v168;
    if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
      break;
    v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((_QWORD *)&v168 + 1) - v168) >= 9)
    {
      v26 = 0;
      v27 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      v28 = (_QWORD *)v168;
      do
      {
        v29 = v28;
        v28 += v26 + 1;
        v30 = 2 * v26;
        v26 = (2 * v26) | 1;
        v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          v26 = v31;
        }
        *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (_QWORD *)(*((_QWORD *)&v24 + 1) - 8))
      {
        *v28 = v25;
      }
      else
      {
        *v28 = **((_QWORD **)&v24 + 1);
        **((_QWORD **)&v24 + 1) = v25;
        sub_23A07A518(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((_QWORD *)&v168 + 1) -= 8;
    v32 = *v25;
    v33 = (_QWORD **)a1[9];
    if (*v25 == **v33)
    {
      sub_23A075EEC(a4, ((a4[1] - *a4) >> 5) + 1);
      for (i = (_QWORD *)v25[1]; i[1]; i = (_QWORD *)i[1])
      {
        v35 = a4[1];
        v36 = *(_QWORD **)(v35 - 24);
        v37 = *(_QWORD *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_QWORD *)(v35 - 32);
          v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_239FEBE68();
          v41 = v37 - v39;
          v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1))
            v42 = v40 + 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_23A05F0AC(v35 - 16, v43);
          else
            v44 = 0;
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = *i;
          v38 = v45 + 8;
          v47 = *(char **)(v35 - 32);
          v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            v46 = *(char **)(v35 - 32);
          }
          *(_QWORD *)(v35 - 32) = v45;
          *(_QWORD *)(v35 - 24) = v38;
          *(_QWORD *)(v35 - 16) = &v44[8 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = *i;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v35 - 24) = v38;
      }
      v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5)
        break;
    }
    else
    {
      v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_23A072EDC(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_23A072EDC(v163, v50, v157);
      *(_QWORD *)v157 = 0;
      sub_23A07A7E8(&v161, v50, v157);
      v51 = *(_DWORD *)(v32 + 16);
      v52 = a1[9];
      if (a3)
      {
        v53 = *(_QWORD *)(v52 + 24 * v51);
        v54 = -100000000.0;
        if (*(_QWORD *)(v52 + 24 * v51 + 8) != v53)
        {
          v55 = 0;
          v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          v54 = -100000000.0;
          do
          {
            v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(_QWORD *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            v58 = sub_23A088010();
            v59 = sub_23A07333C(v58);
            v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54)
              v54 = v61;
            ++v55;
            v62 = *(_DWORD *)(v32 + 16);
            v52 = a1[9];
            v53 = *(_QWORD *)(v52 + 24 * v62);
          }
          while (v55 < (*(_QWORD *)(v52 + 24 * v62 + 8) - v53) >> 3);
          v51 = *(_DWORD *)(v32 + 16);
        }
        v63 = (double *)v161;
        if (v162 != v161)
        {
          v64 = *((float *)v25 + 4);
          v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (_BYTE *)v161) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v162 - (_BYTE *)v161) >> 3;
          do
          {
            v66 = *v65++;
            v67 = expf(v66 - v54);
            v68 = (float)(v64 - v66) + log1pf(-v67);
            v69 = v64 - fmaxf(v68, 0.0);
            v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      v71 = *(_QWORD *)(v52 + 24 * v51);
      if (*(_QWORD *)(v52 + 24 * v51 + 8) != v71)
      {
        v72 = 0;
        do
        {
          v73 = *(_QWORD *)(v71 + 8 * v72);
          v74 = sub_23A075C80(&v171);
          *(_QWORD *)v157 = v74;
          *(_QWORD *)v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 20) = *((_DWORD *)v164[0] + v72);
            v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 20) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(_QWORD *)(v74 + 8) = v25;
          sub_23A075DEC((uint64_t *)&v168, v157);
          ++v72;
          v71 = *(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_23A087EB8() <= 1)
        {
          v157[0] = 0;
          v76 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          sub_23A00AE20(v76, (uint64_t)"(", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = sub_23A00AE20(v77, (uint64_t)") ", 2);
          v79 = sub_23A00AE20(v78, (uint64_t)"LOG(", 4);
          v80 = sub_23A00AE20(v79, (uint64_t)"WARNING", 7);
          v81 = sub_23A00AE20(v80, (uint64_t)") ", 2);
          sub_23A00AE20(v81, (uint64_t)"Allocator size exceeds ", 23);
          v82 = (_QWORD *)std::ostream::operator<<();
          sub_23A00AE20(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_23A05E47C(v157);
        }
        v147 = 1;
      }
      v83 = *((_QWORD *)&v168 + 1);
      v84 = (void *)v168;
      if (*((_QWORD *)&v168 + 1) - (_QWORD)v168 >= 0x13879uLL)
      {
        v159 = 0uLL;
        v160 = 0;
        memset(&v157[8], 0, 40);
        *(_QWORD *)v157 = &off_250B0D2F8;
        v158 = 512;
        *(_OWORD *)v154 = 0u;
        v155 = 0u;
        v156 = 1.0;
        ++v146;
        if ((int)sub_23A087EB8() <= 1)
        {
          LOBYTE(v170) = 0;
          v85 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          sub_23A00AE20(v85, (uint64_t)"(", 1);
          v86 = (_QWORD *)std::ostream::operator<<();
          v87 = sub_23A00AE20(v86, (uint64_t)") ", 2);
          v88 = sub_23A00AE20(v87, (uint64_t)"LOG(", 4);
          v89 = sub_23A00AE20(v88, (uint64_t)"WARNING", 7);
          v90 = sub_23A00AE20(v89, (uint64_t)") ", 2);
          sub_23A00AE20(v90, (uint64_t)"Too big agenda size ", 20);
          v91 = (_QWORD *)std::ostream::operator<<();
          sub_23A00AE20(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (_QWORD *)std::ostream::operator<<();
          sub_23A00AE20(v92, (uint64_t)") down to ", 10);
          v93 = (_QWORD *)std::ostream::operator<<();
          sub_23A00AE20(v93, (uint64_t)".", 1);
          sub_23A05E47C(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          v94 = 0;
          while (1)
          {
            v149 = (_QWORD *)v168;
            v150 = v83;
            v95 = *(_QWORD *)v168;
            v153 = 0;
            v170 = 0;
            if (!v95)
              goto LABEL_181;
            v96 = &v170;
            v97 = (unint64_t)v154[1];
            do
            {
              v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97)
                    v102 = v100 % v97;
                }
                else
                {
                  v102 = v100 & (v97 - 1);
                }
                v103 = (_QWORD *)*((_QWORD *)v154[0] + v102);
                if (v103)
                {
                  for (j = (_QWORD *)*v103; j; j = (_QWORD *)*j)
                  {
                    v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97)
                          v105 %= v97;
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102)
                        break;
                    }
                  }
                }
              }
              v106 = sub_23A075C80(v157);
              v107 = *(_OWORD *)v95;
              *(_QWORD *)(v106 + 16) = *(_QWORD *)(v95 + 16);
              *(_OWORD *)v106 = v107;
              *v96 = v106;
              v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  v5 = v100;
                  if ((void *)v100 >= v154[1])
                    v5 = v100 % (unint64_t)v154[1];
                }
                else
                {
                  v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (_QWORD *)*((_QWORD *)v154[0] + v5);
                if (v109)
                {
                  for (k = (_QWORD *)*v109; k; k = (_QWORD *)*k)
                  {
                    v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1])
                          v111 %= (unint64_t)v154[1];
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5)
                        break;
                    }
                  }
                }
              }
              v112 = operator new(0x20uLL);
              *v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              v113 = (float)(unint64_t)(*((_QWORD *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3)
                  v114 = 0;
                v115 = (2 * v97) | !v114;
                v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116)
                  prime = (int8x8_t)v116;
                else
                  prime = (int8x8_t)v115;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v97 = (unint64_t)v154[1];
                }
                if (*(_QWORD *)&prime <= v97)
                {
                  if (*(_QWORD *)&prime < v97)
                  {
                    v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2)
                        v124 = v126;
                    }
                    if (*(_QWORD *)&prime <= v124)
                      prime = (int8x8_t)v124;
                    if (*(_QWORD *)&prime >= v97)
                    {
                      v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132)
                        operator delete(v132);
                      v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    sub_239FF1A44();
                  v118 = operator new(8 * *(_QWORD *)&prime);
                  v119 = v154[0];
                  v154[0] = v118;
                  if (v119)
                    operator delete(v119);
                  v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((_QWORD *)v154[0] + v120++) = 0;
                  while (*(_QWORD *)&prime != v120);
                  v121 = (_QWORD **)v155;
                  if ((_QWORD)v155)
                  {
                    v122 = *(_QWORD *)(v155 + 8);
                    v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(_QWORD *)&prime)
                        v122 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v122 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v154[0] + v122) = &v155;
                    for (m = *v121; m; v122 = v128)
                    {
                      v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(_QWORD *)&prime)
                          v128 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v128 &= *(_QWORD *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((_QWORD *)v154[0] + v128))
                        {
                          *((_QWORD *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (_QWORD *)*m;
                        *m = **((_QWORD **)v154[0] + v128);
                        **((_QWORD **)v154[0] + v128) = m;
                        m = v121;
                      }
                      v128 = v122;
LABEL_151:
                      v121 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97)
                    v5 = v100 % v97;
                  else
                    v5 = v100;
                }
                else
                {
                  v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (_QWORD *)*((_QWORD *)v154[0] + v5);
              if (v130)
              {
                *v112 = *v130;
LABEL_168:
                *v130 = v112;
                goto LABEL_169;
              }
              *v112 = v155;
              *(_QWORD *)&v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                v131 = *(_QWORD *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97)
                    v131 %= v97;
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v155 + 1);
LABEL_170:
              v95 = *(_QWORD *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            v153 = v170;
            sub_23A075DEC((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              v133 = 0;
              v134 = (v150 - (uint64_t)v149) >> 3;
              v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                v138 = 2 * v133;
                v133 = (2 * v133) | 1;
                v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  v133 = v139;
                }
                *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (_QWORD *)(v150 - 8);
              if (v136 == (_QWORD *)(v150 - 8))
              {
                *v136 = v135;
              }
              else
              {
                *v136 = *v140;
                *v140 = v135;
                sub_23A07A518((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            v83 = *((_QWORD *)&v168 + 1) - 8;
            *((_QWORD *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((_QWORD *)&v168 + 1) = v84;
          operator delete(v84);
        }
        v168 = v159;
        v169 = v160;
        v141 = v172;
        v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        v142 = *(_QWORD *)&v157[24];
        v143 = v174;
        *(_QWORD *)&v157[24] = v173[0];
        v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        v174 = v158;
        v158 = v143;
        sub_23A022E90((uint64_t)v154);
        sub_23A075F74(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v168)
    operator delete((void *)v168);
  sub_23A075F74(&v171);
}

void sub_23A075B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  sub_23A022E90((uint64_t)&a21);
  sub_23A075F74(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  sub_23A05EE48((void ***)&a27);
  if (v59)
    operator delete(v59);
  sub_23A075F74((_QWORD *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_23A075C80(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_239FEBE68();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_239FF1A44();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_23A075DEC(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_239FEBE68();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_239FF1A44();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  return sub_23A07A518(*a1, v6, (v6 - *a1) >> 3);
}

void sub_23A075EEC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_23A07A574(a1, a2 - v4);
  }
}

_QWORD *sub_23A075F74(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_250B0D2F8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x23B83FE64](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23A075FF0(_QWORD *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  void *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  void *v47[3];
  void *v48[2];
  float *v49;
  void *__p[2];
  float *v51;

  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_23A072EDC(__p, v6, v48);
    sub_23A074780(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v48;
    v51 = v49;
    v46 = sub_23A088010();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v7 = ((a1[4] - a1[3]) >> 3) - 1;
    v8 = **(_QWORD **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      v10 = (float *)v48[0];
      v48[1] = v48[0];
      v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      v13 = *v11;
      v12 = v11[1];
      v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(_QWORD *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            v16 = (float *)v48[0];
            v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              sub_239FEBE68();
            v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)sub_23A05F72C((uint64_t)&v49, v20);
              v16 = (float *)v48[0];
              v10 = (float *)v48[1];
            }
            else
            {
              v21 = 0;
            }
            v22 = (float *)&v21[4 * v17];
            *v22 = v15;
            v23 = v22 + 1;
            while (v10 != v16)
            {
              v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            v49 = (float *)&v21[4 * v20];
            if (v16)
              operator delete(v16);
            v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        v14 = (float *)v48[0];
      }
      sub_23A072F5C((uint64_t)v47, v14, v10);
      v25 = *(_DWORD *)(v8 + 16);
      v26 = a1[9];
      v8 = *(_QWORD *)(*(_QWORD *)(v26 + 24 * v25) + 8 * (int)sub_23A073288((uint64_t)v47, v46, (double **)v47));
      v27 = **(_QWORD **)a1[9];
      if (v8 != v27)
      {
        v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        v29 = a2[1];
        v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          v31 = ((char *)v29 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_239FEBE68();
          v32 = v28 - (_QWORD)*a2;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)sub_23A05F0AC((uint64_t)(a2 + 2), v34);
          else
            v35 = 0;
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v8;
          v30 = v36 + 8;
          v38 = (char *)*a2;
          v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *((_QWORD *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v29 = v8;
          v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    v41 = (unint64_t)*a2;
    v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        v43 = v41 + 8;
        do
        {
          v44 = *(_QWORD *)(v43 - 8);
          *(_QWORD *)(v43 - 8) = *(_QWORD *)v42;
          *(_QWORD *)v42 = v44;
          v42 -= 8;
          v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_23A0763A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A076410(uint64_t a1, _QWORD *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *(float *)(a1 + 104);
  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = a2[1];
  v7 = a2[2];
  sub_23A0621E8(&__p, *(int *)(a1 + 92) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(a2[3] + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = *(_DWORD **)(a1 + 40);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_23A00AE20(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = sub_23A00AE20(v27, (uint64_t)") [", 3);
      v29 = sub_23A00AE20(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_23A00AE20(v29, (uint64_t)"] ", 2);
      sub_23A05E47C(&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sub_23A074230((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(a2[3] + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sub_23A074230((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v35))
          v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        else
          v38 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v35);
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_23A076798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A0767CC(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_23A089B98((uint64_t *)&__p);
  if (v12)
  {
    sub_23A089DA8(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_23A076968(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = a5[1];
          if (v18 >= a5[2])
          {
            v19 = sub_23A0733DC(a5, (uint64_t)v20);
          }
          else
          {
            sub_23A0734E8((_DWORD)a5 + 16, (_BYTE *)a5[1], (uint64_t)v20);
            v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_23A089DA8(a6, a1 + 96);
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_23A076938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A076968(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  sub_23A0621E8(a6, a5);
  v12 = sub_23A079308(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_23A07960C((uint64_t)a6, v12);
}

void sub_23A0769E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A076A00(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_23A089B98((uint64_t *)&__p);
  if (v12)
  {
    sub_23A089DA8(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_23A076968(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_239FEBE68();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_23A05F72C(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_23A089DA8(a6, a1 + 96);
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_23A076BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A076BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sub_23A076CEC(a1);
  *(_QWORD *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_QWORD *)v4 = &off_250B0D358;
  *(_QWORD *)(v4 + 8) = a2 + 16;
  sub_23A05C61C(v4);
  v5 = 0;
  *(_QWORD *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104))
        v6 = *(float *)(a1 + 104);
      *(float *)(a1 + 104) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7)
        v7 = *(float *)(a1 + 108);
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_23A076CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05C140(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A076CEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_250B0C900;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_250B0D730;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_250B0D730;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_23A089B90((_QWORD *)(a1 + 96));
  return a1;
}

void sub_23A076D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x23B83FE64](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_250B0D730;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x23B83FE64](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  sub_23A05EF3C((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_23A076DD0(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sub_23A05B444(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_250B0D358;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sub_23A089DA8(&v17, v10 + 96);
  v14 = v17;
  sub_23A089B98((uint64_t *)&v17);
  if (!v14)
  {
    sub_23A076F20(a3, a4, v11, &v17);
    sub_23A089DAC(v13, &v17);
    sub_23A089B98((uint64_t *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sub_23A089B98((uint64_t *)&v17);
    if (!v15)
    {
      sub_23A076F20(a3 + 1, a4 - 4, v12, &v17);
      sub_23A089DAC(v13, &v17);
      sub_23A089B98((uint64_t *)&v17);
    }
  }
  return a1;
}

void sub_23A076EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_23A089B98((uint64_t *)va);
  sub_23A05C140(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A076F20@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_23A05E390((uint64_t)v8);
    sub_23A00AE20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_23A00AE20(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_23A00AE20(v8, (uint64_t)") [", 3);
    sub_23A00AE20(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_23A00AE20(v8, (uint64_t)"] ", 2);
    sub_23A05BF64(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x23B83FDF8](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_23A089B90(a4);
  }
}

void sub_23A077074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A05BFF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23A077094(uint64_t a1)
{
  sub_23A05C140(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A0770B8(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (a1[28])
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _DWORD *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_23A089B98((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_23A089B98((uint64_t *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_250B0D448;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_250B0D318;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sub_23A073D60((uint64_t)&v25, a2, a3);
    sub_23A076410((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_23A074454(&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_239FEBE68();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)sub_23A05ED84((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sub_23A073A90((uint64_t)&v25);
  }
  else
  {
    sub_23A077374((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_23A07732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_23A073A90((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_23A077374(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sub_23A089B98((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_23A089B98((uint64_t *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_239FEBE68();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_23A0B90EE[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_23A0B90EE[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        sub_239FF1D10("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_239FEBE68();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)sub_23A05ED84((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_23A07784C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A077890(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_23A089B98((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_23A05ECB8((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_23A05EBF4((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_23A089B98((uint64_t *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_250B0D448;
    memset(&__p[1], 0, 88);
    __p[12] = &off_250B0D318;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sub_23A073D60((uint64_t)__p, a2, a3);
    sub_23A076410(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sub_23A074AC0(__p, v13, 0, (uint64_t *)&v38, 0.0);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_239FEBE68();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)sub_23A05ED84((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = sub_23A07A8D8(v34, (__int128 **)&v35, v30);
      }
      else
      {
        sub_23A07A868((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    sub_23A05EE48((void ***)&v35);
    sub_23A073A90((uint64_t)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_23A05EBF4((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_23A077C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_23A05EE48((void ***)&a12);
  sub_23A073A90((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A077D6C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *result;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v28);
  if (v28)
  {
    result = sub_23A089B98((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  result = sub_23A089B98((uint64_t *)&v28);
  if (!a3)
    goto LABEL_3;
  v28 = &off_250B0D448;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &off_250B0D318;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 1024;
  sub_23A073D60((uint64_t)&v28, a2, a3);
  sub_23A076410(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23A075FF0(&v28, (void **)&v26, a5);
  v11 = v26;
  v12 = v27;
  if (v26 != v27)
  {
    v13 = 0;
    v14 = a4 + 2;
    do
    {
      v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_239FEBE68();
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        v19 = (char *)sub_23A05ED84((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v16];
        *(_OWORD *)v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    v11 = v26;
  }
  if (v11)
  {
    v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_23A073A90((uint64_t)&v28);
}

void sub_23A077FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_23A073A90((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_23A077FF8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  uint64_t v14;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  char *v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 *v48;
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  float v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  void *v71;
  void *v72;
  void *v73;
  float v74;
  __int128 *i;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  float v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  float v96;
  double v97;
  long double v98;
  long double v99;
  double v100;
  float v101;
  uint64_t *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  float v112;
  void *__p[13];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  __int128 *v120;
  __int128 *v121;
  char *v122;
  void *v123[3];
  void **v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t (**v131)();
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v124);
  if (v124)
  {
    sub_23A089B98((uint64_t *)&v124);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sub_23A089B98((uint64_t *)&v124);
  if (!a3)
    goto LABEL_3;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v124 = (void **)&off_250B0D448;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  v131 = &off_250B0D318;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v135 = 1024;
  sub_23A073D60((uint64_t)&v124, a2, a3);
  sub_23A076410(v14, &v124);
  sub_23A074780(&v124, (uint64_t *)v123, a8);
  v16 = *((float *)v123[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v127 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) & ~((int)(((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_23A087EB8() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v34 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
        sub_23A00AE20(v34, (uint64_t)"(", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = sub_23A00AE20(v35, (uint64_t)") ", 2);
        v37 = sub_23A00AE20(v36, (uint64_t)"LOG(", 4);
        v38 = sub_23A00AE20(v37, (uint64_t)"ERROR", 5);
        v39 = sub_23A00AE20(v38, (uint64_t)") ", 2);
        sub_23A00AE20(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_23A05E47C(__p);
      }
      goto LABEL_113;
    }
    v103 = a4;
    v104 = a6;
    v105 = v14;
    v107 = a2;
    v109 = a3;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    sub_23A074454(&v124, (uint64_t)__p);
    v17 = (uint64_t *)__p[0];
    v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v19 = v121;
      do
      {
        v20 = *v17;
        if (v19 >= (__int128 *)v122)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v120) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_239FEBE68();
          if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v22)
            v22 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v22;
          v24 = (char *)sub_23A05ED84((uint64_t)&v122, v23);
          v26 = &v24[24 * v21];
          *(_OWORD *)v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          v28 = v120;
          v27 = v121;
          v29 = (__int128 *)v26;
          if (v121 != v120)
          {
            do
            {
              v30 = *(__int128 *)((char *)v27 - 24);
              *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
              *(__int128 *)((char *)v29 - 24) = v30;
              v29 = (__int128 *)((char *)v29 - 24);
              v27 = (__int128 *)((char *)v27 - 24);
            }
            while (v27 != v28);
            v27 = v120;
          }
          v19 = (__int128 *)(v26 + 24);
          v120 = v29;
          v121 = (__int128 *)(v26 + 24);
          v122 = &v24[24 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          v19 = (__int128 *)((char *)v19 + 24);
        }
        v121 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    v118 = 0.0;
    v31 = v137;
    if ((unint64_t)v137 >= v138)
    {
      v33 = sub_23A07AB34(&v136, &v120, &v118);
      a2 = v107;
      a3 = v109;
    }
    else
    {
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      sub_23A05ECB8(v31, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
      a2 = v107;
      a3 = v109;
      v32 = v118;
      *((float *)v31 + 6) = v32;
      v33 = (uint64_t)(v31 + 32);
    }
    a4 = v103;
    v14 = v105;
    a6 = v104;
    v137 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
  }
  if ((a5 & 1) != 0)
  {
    sub_23A074AC0(&v124, a4 + 1, 1, (uint64_t *)&v120, a8);
    v102 = j;
    if (a6)
    {
      sub_23A07AC44(&v118, ((char *)v121 - (char *)v120) >> 5);
      v41 = v120;
      v40 = v121;
      if (v121 != v120)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          if (&v41[v42] != (__int128 *)(*(_QWORD *)&v118 + v43))
          {
            sub_23A07ACE4((char *)(*(_QWORD *)&v118 + v43), *(char **)&v41[v42], *((_QWORD *)&v41[v42] + 1), (uint64_t)(*((_QWORD *)&v41[v42] + 1) - *(_QWORD *)&v41[v42]) >> 3);
            v41 = v120;
            v40 = v121;
          }
          ++v44;
          v43 += 24;
          v42 += 2;
        }
        while (v44 < ((char *)v40 - (char *)v41) >> 5);
      }
      sub_23A074454(&v124, (uint64_t)__p);
      v45 = sub_23A07ADEC(*(uint64_t *)&v118, *(uint64_t *)&v119, (uint64_t)__p);
      v46 = (int)(-1431655765 * ((unint64_t)(v45 - *(_QWORD *)&v118) >> 3));
      if (v46 == ((char *)v121 - (char *)v120) >> 5)
      {
        v48 = v121 - 2;
        v47 = (void *)*((_QWORD *)v121 - 4);
        if (v47)
        {
          *((_QWORD *)v121 - 3) = v47;
          operator delete(v47);
        }
      }
      else
      {
        sub_23A07AE58((__n128 *)&v120[2 * v46 + 2], (__n128 *)v121, (uint64_t)&v120[2 * v46]);
        v48 = v68;
        v69 = v121;
        if (v121 != v68)
        {
          v70 = v121;
          do
          {
            v72 = (void *)*((_QWORD *)v70 - 4);
            v70 -= 2;
            v71 = v72;
            if (v72)
            {
              *((_QWORD *)v69 - 3) = v71;
              operator delete(v71);
            }
            v69 = v70;
          }
          while (v70 != v48);
        }
      }
      v121 = v48;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v118;
      sub_23A07109C((void ***)__p);
    }
    v73 = (void *)*((_QWORD *)v121 - 4);
    v111 = v121 - 2;
    v74 = *((float *)v121 - 2);
    if (v73)
    {
      *((_QWORD *)v121 - 3) = v73;
      operator delete(v73);
    }
    v121 = v111;
    for (i = v120; i != v111; i += 2)
    {
      memset(__p, 0, 24);
      v76 = *(uint64_t **)i;
      v77 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v77)
      {
        v79 = 0.0;
      }
      else
      {
        v78 = 0;
        v79 = 0.0;
        do
        {
          v80 = *v76;
          v81 = *(float *)(*v76 + 32);
          if (v78 >= __p[2])
          {
            v82 = 0xAAAAAAAAAAAAAAABLL * ((v78 - (char *)__p[0]) >> 3);
            v83 = v82 + 1;
            if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_239FEBE68();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v83)
              v83 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v84 = 0xAAAAAAAAAAAAAAALL;
            else
              v84 = v83;
            v85 = (char *)sub_23A05ED84((uint64_t)&__p[2], v84);
            v87 = &v85[24 * v82];
            *(_OWORD *)v87 = *(_OWORD *)v80;
            *((_DWORD *)v87 + 4) = *(_DWORD *)(v80 + 28);
            v89 = (char *)__p[0];
            v88 = (char *)__p[1];
            v90 = v87;
            if (__p[1] != __p[0])
            {
              do
              {
                v91 = *(_OWORD *)(v88 - 24);
                *((_QWORD *)v90 - 1) = *((_QWORD *)v88 - 1);
                *(_OWORD *)(v90 - 24) = v91;
                v90 -= 24;
                v88 -= 24;
              }
              while (v88 != v89);
              v88 = (char *)__p[0];
            }
            v78 = v87 + 24;
            __p[0] = v90;
            __p[1] = v87 + 24;
            __p[2] = &v85[24 * v86];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *(_OWORD *)v78 = *(_OWORD *)v80;
            *((_DWORD *)v78 + 4) = *(_DWORD *)(v80 + 28);
            v78 += 24;
          }
          __p[1] = v78;
          v79 = v79 + (float)(a8 * v81);
          ++v76;
        }
        while (v76 != v77);
      }
      *(float *)&v118 = v79 - v16;
      v92 = v137;
      if ((unint64_t)v137 >= v138)
      {
        v93 = sub_23A07AF10(&v136, (__int128 **)__p, &v118);
      }
      else
      {
        *(_QWORD *)v137 = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = 0;
        sub_23A05ECB8(v92, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v92 + 6) = LODWORD(v118);
        v93 = (uint64_t)(v92 + 32);
      }
      v137 = (char *)v93;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v94 = v136;
    v95 = v137;
    for (j = v102; (char *)v94 != v95; v94 += 32)
    {
      v96 = *(float *)(v94 + 24);
      if (v96 != 0.0)
      {
        v97 = v96 - v74;
        v98 = exp(v97);
        if (v97 <= -10.0)
        {
          v100 = v97 + v98 * -0.5 + v98 * v98 / 24.0 + pow(v98, 4.0) / -2880.0;
        }
        else
        {
          v99 = expm1(-v98);
          v100 = log(-v99);
        }
        v101 = v100;
        *(float *)(v94 + 24) = v101;
      }
    }
    __p[0] = &v120;
    sub_23A05EE48((void ***)__p);
    v50 = v136;
    v49 = v137;
  }
  else
  {
    v50 = v136;
    v49 = v137;
    if (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5))
    {
      v108 = a2;
      v110 = a3;
      v106 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_250B0D448;
        __p[12] = &off_250B0D318;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        v117 = 1024;
        sub_23A073D60((uint64_t)__p, a2, a3);
        sub_23A076410(v14, __p);
        v120 = 0;
        v121 = 0;
        v122 = 0;
        sub_23A075FF0(__p, (void **)&v118, a8);
        v52 = v118;
        v51 = v119;
        v53 = 0.0;
        if (*(_QWORD *)&v118 != *(_QWORD *)&v119)
        {
          v54 = v121;
          do
          {
            v55 = **(_QWORD **)&v52;
            if (v54 >= (__int128 *)v122)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v120) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_239FEBE68();
              if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v57)
                v57 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
                v58 = 0xAAAAAAAAAAAAAAALL;
              else
                v58 = v57;
              v59 = (char *)sub_23A05ED84((uint64_t)&v122, v58);
              v61 = &v59[24 * v56];
              *(_OWORD *)v61 = *(_OWORD *)v55;
              *((_DWORD *)v61 + 4) = *(_DWORD *)(v55 + 28);
              v63 = v120;
              v62 = v121;
              v64 = (__int128 *)v61;
              if (v121 != v120)
              {
                do
                {
                  v65 = *(__int128 *)((char *)v62 - 24);
                  *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                  *(__int128 *)((char *)v64 - 24) = v65;
                  v64 = (__int128 *)((char *)v64 - 24);
                  v62 = (__int128 *)((char *)v62 - 24);
                }
                while (v62 != v63);
                v62 = v120;
              }
              v54 = (__int128 *)(v61 + 24);
              v120 = v64;
              v121 = (__int128 *)(v61 + 24);
              v122 = &v59[24 * v60];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v54 = *(_OWORD *)v55;
              *((_DWORD *)v54 + 4) = *(_DWORD *)(v55 + 28);
              v54 = (__int128 *)((char *)v54 + 24);
            }
            v121 = v54;
            v53 = v53 + (float)(a8 * *(float *)(v55 + 32));
            *(_QWORD *)&v52 += 8;
          }
          while (*(_QWORD *)&v52 != *(_QWORD *)&v51);
        }
        v112 = v53 - v16;
        v66 = v137;
        if ((unint64_t)v137 >= v138)
        {
          v67 = sub_23A07AF10(&v136, &v120, &v112);
        }
        else
        {
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v66 + 1) = 0;
          *((_QWORD *)v66 + 2) = 0;
          sub_23A05ECB8(v66, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
          *((float *)v66 + 6) = v112;
          v67 = (uint64_t)(v66 + 32);
        }
        a2 = v108;
        a3 = v110;
        v14 = v106;
        v137 = (char *)v67;
        if (v118 != 0.0)
        {
          v119 = v118;
          operator delete(*(void **)&v118);
        }
        if (v120)
        {
          v121 = v120;
          operator delete(v120);
        }
        sub_23A073A90((uint64_t)__p);
        v50 = v136;
        v49 = v137;
      }
      while (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5));
    }
  }
  *j = v50;
  j[1] = (uint64_t)v49;
  j[2] = v138;
  j = &v136;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  sub_23A073A90((uint64_t)&v124);
  v124 = (void **)&v136;
  sub_23A05EE48(&v124);
}

void sub_23A078A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  sub_23A07109C((void ***)&__p);
  __p = &a38;
  sub_23A05EE48((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sub_23A073A90((uint64_t)&a44);
  a44 = (void **)(v45 - 160);
  sub_23A05EE48(&a44);
  _Unwind_Resume(a1);
}

float sub_23A078C04(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_250B0D448;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_250B0D318;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sub_23A073D60((uint64_t)&v8, a2, a3);
  sub_23A076410(a1, &v8);
  v6 = sub_23A074904(&v8, a4);
  sub_23A073A90((uint64_t)&v8);
  return v6;
}

void sub_23A078C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A073A90((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_23A078CAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *__p;
  _QWORD *v46;
  uint64_t v47;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  sub_23A070978((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v46 = 0;
  v47 = 0;
  __p = 0;
  sub_23A07A044(&__p, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v11 = __p;
  v12 = v46;
  if (__p == v46)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  sub_23A070978((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_23A07A044(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v19 = v40;
  v20 = v41;
  if (v40 != v41)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v40;
    if (!v40)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v40)
  {
LABEL_24:
    v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_23A087EB8() <= 1)
  {
    LOBYTE(v43) = 0;
    v27 = sub_23A00AE20(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_23A00AE20(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_23A00AE20(v28, (uint64_t)") ", 2);
    v30 = sub_23A00AE20(v29, (uint64_t)"LOG(", 4);
    v31 = sub_23A00AE20(v30, (uint64_t)"WARNING", 7);
    v32 = sub_23A00AE20(v31, (uint64_t)") ", 2);
    v33 = sub_23A00AE20(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v34 = sub_23A00AE20(v33, a2, a3);
    sub_23A00AE20(v34, (uint64_t)", Score: ", 9);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_23A00AE20(v35, (uint64_t)". Right: ", 9);
    v37 = sub_23A00AE20(v36, a4, a5);
    sub_23A00AE20(v37, (uint64_t)", Score: ", 9);
    v38 = (_QWORD *)std::ostream::operator<<();
    sub_23A00AE20(v38, (uint64_t)".", 1);
    sub_23A05E47C(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_23A079080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23A0790DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_23A05D3E4(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_23A079218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A079270()
{
  return 1;
}

uint64_t sub_23A079278()
{
  return 1;
}

uint64_t sub_23A079280()
{
  return 1;
}

uint64_t sub_23A079288()
{
  return 1;
}

_QWORD *sub_23A079290(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_23A073120(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23A0792EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_23A079308(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  sub_23A07963C(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            sub_23A07963C(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  sub_23A079E58(v43);
  return v24;
}

void sub_23A0795F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_23A079E58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23A07960C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_23A079F38((void **)a1, a2 - v2);
  }
}

__n128 sub_23A07963C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_23A0796E8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_23A0796E8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_23A05F0AC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_23A0799FC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_23A079B10((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_23A05F0AC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_23A05F0AC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_23A079C2C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_23A079D40((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23A0799B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23A0799FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_23A05F0AC(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_23A079B10(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_23A05F0AC(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_23A079C2C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_23A05F0AC(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_23A079D40(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_23A05F0AC(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_23A079E58(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_23A079EEC((uint64_t)a1);
}

uint64_t sub_23A079EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_23A079F38(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_239FEBE68();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_23A05F5F8(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *sub_23A07A044(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_23A06225C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23A07A0A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A07A0BC(_QWORD *a1)
{
  sub_23A07A0E0(a1);
  JUMPOUT(0x23B83FE88);
}

_QWORD *sub_23A07A0E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_250B0D318;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x23B83FE64](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23A07A15C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_239FEBE68();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_23A05ED84(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_23A07A2C0(a1, &v15);
    sub_23A072704((uint64_t)&v15);
  }
}

void sub_23A07A2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07A2C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A07A334((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A07A334(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A07A3D4((uint64_t)v11);
  return v9;
}

uint64_t sub_23A07A3D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A0726C0(a1);
  return a1;
}

uint64_t sub_23A07A408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_23A079290((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_23A07A4C0((uint64_t)v8);
  return v4;
}

void sub_23A07A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23A07A4C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07A4C0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A05EDFC(a1);
  return a1;
}

void sub_23A07A4F4(_QWORD *a1)
{
  sub_23A075F74(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A07A518(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_23A07A574(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_239FEBE68();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)sub_23A072804(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_23A07A698(a1, v19);
    return sub_23A072CEC((uint64_t)v19);
  }
  return result;
}

void sub_23A07A684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07A698(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A07A70C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A07A70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A07A7B4((uint64_t)v11);
  return v9;
}

uint64_t sub_23A07A7B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A072CA8(a1);
  return a1;
}

_QWORD *sub_23A07A7E8(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A073120(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23A07A84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_23A07A868(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_23A05ECB8((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_23A07A8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23A07A8D8(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_239FEBE68();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_23A072804(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_23A05ECB8(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_23A07A9E4(a1, v16);
  v14 = a1[1];
  sub_23A072CEC((uint64_t)v16);
  return v14;
}

void sub_23A07A9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07A9E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23A07AA58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23A07AA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_23A07AB00((uint64_t)v11);
  return v9;
}

uint64_t sub_23A07AB00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_23A072CA8(a1);
  return a1;
}

uint64_t sub_23A07AB34(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_239FEBE68();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)sub_23A072804(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_23A05ECB8(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_23A07A9E4(a1, v17);
  v15 = a1[1];
  sub_23A072CEC((uint64_t)v17);
  return v15;
}

void sub_23A07AC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23A07AC44(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_23A05ED34(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23A07ACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23A07109C(&a9);
  _Unwind_Resume(a1);
}

char *sub_23A07ACE4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_239FEBE68();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_23A073120(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_23A07ADEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *sub_23A07AE58(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_23A07AEC0(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_23A07AEC0(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_23A07AF10(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_239FEBE68();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_23A072804(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_23A05ECB8(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_23A07A9E4(a1, v16);
  v14 = a1[1];
  sub_23A072CEC((uint64_t)v16);
  return v14;
}

void sub_23A07B008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23A072CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07B01C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_23A076CEC(a1);
  *v4 = &off_250B0D468;
  v4[1] = a2 + 16;
  sub_23A05C61C((uint64_t)v4);
  return a1;
}

void sub_23A07B058(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05C140(v1);
  _Unwind_Resume(a1);
}

void sub_23A07B074(uint64_t a1)
{
  sub_23A05C140(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A07B098(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_23A089B98(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_23A089B98(&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sub_23A0634A8(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_239FEBE68();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)sub_23A05ED84((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_23A07B258(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A07B27C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_23A076CEC(a1);
  *v4 = &off_250B0D208;
  v4[1] = a2 + 16;
  sub_23A05C61C((uint64_t)v4);
  return a1;
}

void sub_23A07B2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A05C140(v1);
  _Unwind_Resume(a1);
}

void sub_23A07B2D4(uint64_t a1)
{
  sub_23A05C140(a1);
  JUMPOUT(0x23B83FE88);
}

void sub_23A07B2F8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sub_23A089B98((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_23A089B98((uint64_t *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23A05D720(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_239FEBE68();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)sub_23A05ED84((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_23A07B4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_23A07B50C()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_23A07D074((uint64_t)&unk_256942580, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_256942580);
}

void sub_23A07B560()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_23A07C55C((uint64_t)&unk_256942208, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_256942208);
}

void sub_23A07B5B4()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_23A07B608((uint64_t)&unk_256942260, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_256942260);
}

uint64_t sub_23A07B608(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250B0D078;
  *(_QWORD *)(a1 + 8) = a2;
  sub_23A08C324(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_256941328))
    sub_23A096744(dword_256941328);
  *(_QWORD *)(a1 + 48) = &qword_2569425B8;
  *(_QWORD *)(a1 + 56) = &qword_2569425B8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_23A07B678(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23A08C400(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07B68C(uint64_t a1)
{
  sub_23A07B6C4(a1);
  sub_23A07B7E8((uint64_t *)(a1 + 8));
  sub_23A08C400(a1 + 16);
  return a1;
}

uint64_t *sub_23A07B6C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_23A08BD88((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = sub_23A08BDA0(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_23A08BED0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2569425B8)
  {
    v6 = sub_23A07DAB4(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x23B83FE88](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_2569425B8)
  {
    v10 = sub_23A07DAB4(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x23B83FE88](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_23A07B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A07B7E8(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x23B83FE88);
    }
  }
  return result;
}

void sub_23A07B850(uint64_t a1)
{
  sub_23A07B68C(a1);
  JUMPOUT(0x23B83FE88);
}

unsigned __int8 *sub_23A07B874(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_23A08FDF0((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_23A07B940(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  void *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36[2];

  *(_QWORD *)v36 = a2;
  v5 = 0;
  if ((sub_23A07DB84((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v36 + 1);
      v9 = **(_BYTE **)v36;
      if ((char)**(_BYTE **)v36 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v27 = sub_23A09801C(*(uint64_t *)v36, v10 - 128);
          *(_QWORD *)v36 = v27;
          if (!v27)
            goto LABEL_56;
          v8 = (char *)v27;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v36 + 2);
      }
      *(_QWORD *)v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = v8 + 1;
          v15 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *v14;
          v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            v30 = sub_23A097F6C((uint64_t)v8, v15);
            *(_QWORD *)v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = v8 + 2;
LABEL_17:
            *(_QWORD *)v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 2u;
          v17 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          v18 = (std::string *)sub_23A08ACE4(v13, (uint64_t)v12);
          v19 = (void *)sub_23A0980D0(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v32 = sub_23A097F6C((uint64_t)v8, v21);
            *(_QWORD *)v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v34 = sub_23A097F6C((uint64_t)v8, v24);
            *(_QWORD *)v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
              v8 = *(char **)v36;
            }
            v19 = sub_23A0984FC(v9, v29, v8, a3);
          }
          else
          {
            v19 = sub_23A091390((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_256942260, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(_QWORD *)v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(_QWORD *)v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((sub_23A07DB84((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v36;
}

char *sub_23A07BC64(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_23A08B364((uint64_t)a3, v4);
    v8 = *(_DWORD *)(a1 + 64);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = sub_23A07BF08(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = sub_23A07BF08(a3, 3, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_23A08B364((uint64_t)a3, v4);
  v15 = *(_DWORD *)(a1 + 68);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_23A08B364((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 72);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = sub_23A091FC4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 8);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v19) >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_23A08B474((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_23A07BF08(unint64_t *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return sub_23A08B688(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return sub_23A08B688(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = a4 + 2;
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = a4 + 2;
    }
  }
  else
  {
    *a4 = v10;
    v11 = a4 + 1;
  }
  *v11 = v4;
  v15 = v11 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return &v15[v4];
}

uint64_t sub_23A07C020(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = sub_23A094B58(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_23A07C190(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_250B0D078)
    sub_23A07E458(a1, (uint64_t)a2, a3);
  sub_23A07C1B8(a1, (uint64_t)a2);
}

void sub_23A07C1B8(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  if (a2 == a1)
  {
    sub_23A08BD88((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = sub_23A08BDA0(v21, "CHECK failed: (&from) != (this): ");
    sub_23A08BED0((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v21);
  }
  sub_23A08FE8C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_23A08ACAC((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_23A08ACAC((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_23A07C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07C350(uint64_t a1)
{
  return sub_23A09105C(a1 + 16);
}

uint64_t *sub_23A07C358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_23A090E4C(a1 + 16, a2 + 16);
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = sub_23A07DCC0((unint64_t *)(a2 + 8));
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = sub_23A07DCC0((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v8;
    v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v14;
  v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_2569425B8 || *(uint64_t **)(a2 + 48) != &qword_2569425B8)
  {
    v17 = sub_23A08ACE4((uint64_t *)(a1 + 48), v16);
    v18 = sub_23A08ACE4((uint64_t *)(a2 + 48), v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)(a1 + 56);
  if (v7)
    v9 = (uint64_t *)*v9;
  if ((uint64_t *)*result != &qword_2569425B8 || *(uint64_t **)(a2 + 56) != &qword_2569425B8)
  {
    v23 = sub_23A08ACE4(result, (uint64_t)v9);
    result = sub_23A08ACE4((uint64_t *)(a2 + 56), (uint64_t)v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

_QWORD *sub_23A07C54C@<X0>(_QWORD *a1@<X8>)
{
  return sub_239FEE1FC(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_23A07C55C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250B0CAD0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_23A08C324(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_256941340))
    sub_23A096744(dword_256941340);
  *(_QWORD *)(a1 + 72) = &qword_2569425B8;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_23A07C5E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_23A07DED0(v2);
  sub_23A08C400(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07C600(uint64_t a1)
{
  sub_23A07C640(a1);
  sub_23A07B7E8((uint64_t *)(a1 + 8));
  sub_23A07DED0((uint64_t *)(a1 + 48));
  sub_23A08C400(a1 + 16);
  return a1;
}

uint64_t sub_23A07C640(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_23A08BD88((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = sub_23A08BDA0(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_23A08BED0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_23A08BED8((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 72);
  v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_2569425B8)
  {
    v7 = sub_23A07DAB4(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x23B83FE88](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_23A07C704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A07C720(uint64_t a1)
{
  sub_23A07C600(a1);
  JUMPOUT(0x23B83FE88);
}

void *sub_23A07C744()
{
  if (atomic_load(dword_256941340))
    sub_23A096744(dword_256941340);
  return &unk_256942208;
}

unsigned __int8 *sub_23A07C77C(uint64_t a1)
{
  unsigned __int8 *result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_23A08FDF0((unsigned __int8 *)(a1 + 16));
  result = sub_23A07DD78((unsigned __int8 *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_23A07C80C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::string *v25;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  int v29[2];

  *(_QWORD *)v29 = a2;
  v5 = 0;
  if ((sub_23A07DB84((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v29 + 1);
      v9 = **(_BYTE **)v29;
      if (((char)**(_BYTE **)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v26 = sub_23A09801C(*(uint64_t *)v29, v10 - 128);
      *(_QWORD *)v29 = v26;
      if (!v26)
        goto LABEL_48;
      v8 = (char *)v26;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)v8;
          *(_QWORD *)v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = v8 - 1;
          while (1)
          {
            v16 = (unsigned __int8 *)(v15 + 1);
            *(_QWORD *)v29 = v15 + 1;
            v17 = *(int **)(a1 + 64);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 56);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_23A09D128(a1 + 48, v19 + 1);
                v17 = *(int **)(a1 + 64);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = sub_23A07D848(*(_QWORD *)(a1 + 48));
              v21 = *(_QWORD *)(a1 + 64);
              v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_31:
            v15 = (char *)sub_23A07CAC0(a3, v20, v16);
            *(_QWORD *)v29 = v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
            v8 = *(char **)v29;
          }
          v14 = sub_23A0984FC(v9, v28, v8, a3);
        }
        else
        {
          v14 = sub_23A091390((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_256942208, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *(_DWORD *)(a1 + 40) |= 1u;
      v23 = *(_QWORD *)(a1 + 8);
      v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = (_QWORD *)*v24;
      v25 = (std::string *)sub_23A08ACE4((uint64_t *)(a1 + 72), (uint64_t)v24);
      v14 = (void *)sub_23A0980D0(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(_QWORD *)v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(_QWORD *)v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((sub_23A07DB84((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v29 + 2);
LABEL_7:
    *(_QWORD *)v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v29;
}

uint64_t sub_23A07CAC0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_23A098060((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_23A07DFA4((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_23A07B940(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_23A07CB84(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    v4 = sub_23A07BF08(a3, 1, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4)
        v4 = sub_23A08B364((uint64_t)a3, v4);
      v9 = sub_23A070620(a1 + 48, i);
      *v4 = 18;
      v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = sub_23A07BC64(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4)
      v4 = sub_23A08B364((uint64_t)a3, v4);
    v15 = *(_DWORD *)(a1 + 80);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = sub_23A091FC4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v16) >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_23A08B474((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_23A07CD64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_23A094B58(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_23A07C020(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_23A07CE6C(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_250B0CAD0)
    sub_23A07E458(a1, (uint64_t)a2, a3);
  sub_23A07CE94(a1, (uint64_t)a2);
}

void sub_23A07CE94(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_23A08BD88((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = sub_23A08BDA0(v18, "CHECK failed: (&from) != (this): ");
    sub_23A08BED0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v18);
  }
  sub_23A08FE8C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_23A07E05C(a1 + 48, a2 + 48);
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_23A08ACAC((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_23A07CFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07CFD8(uint64_t a1)
{
  uint64_t result;

  result = sub_23A09105C(a1 + 16);
  if ((_DWORD)result)
    return sub_23A07D010(a1 + 48);
  return result;
}

BOOL sub_23A07D010(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_23A070620(a1, v2);
  }
  while ((sub_23A09105C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_23A07D064@<X0>(_QWORD *a1@<X8>)
{
  return sub_239FEE1FC(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_23A07D074(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250B0CC88;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_256941308))
    sub_23A096744(dword_256941308);
  return a1;
}

void sub_23A07D0D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_23A07E204(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07D0E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_23A08BD88((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = sub_23A08BDA0(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_23A08BED0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v8);
  }
LABEL_4:
  sub_23A07B7E8(v3);
  sub_23A07E204((uint64_t *)(a1 + 16));
  return a1;
}

void sub_23A07D17C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  sub_23A08A288(a1);
}

void sub_23A07D1A0(uint64_t a1)
{
  sub_23A07D0E8(a1);
  JUMPOUT(0x23B83FE88);
}

unsigned __int8 *sub_23A07D1C4(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unint64_t v4;

  result = sub_23A07DE24((unsigned __int8 *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_23A07D214(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v22;

  v22 = a2;
  if ((sub_23A07DB84((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v22 + 1;
      v7 = *v22;
      if ((*v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v19 = (char *)sub_23A09801C((uint64_t)v22, v8 - 128);
      v22 = v19;
      if (!v19)
        return 0;
      v6 = v19;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v22 = v11 + 1;
          v13 = *(int **)(a1 + 32);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 24);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_23A09D128(a1 + 16, v15 + 1);
              v13 = *(int **)(a1 + 32);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_23A07D8FC(*(_QWORD *)(a1 + 16));
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          v16 = *(_QWORD *)&v13[2 * v14 + 2];
LABEL_24:
          v11 = (char *)sub_23A07D3F0(a3, v16, v12);
          v22 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
        v6 = v22;
      }
      v22 = (char *)sub_23A0984FC(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (sub_23A07DB84((uint64_t)a3, &v22, a3[11].i32[1]))
        return v22;
    }
    v6 = v22 + 2;
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_23A07D3F0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_23A098060((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_23A07DFA4((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_23A07C80C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_23A07D4B4(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst)
        __dst = sub_23A08B364((uint64_t)a3, __dst);
      v8 = sub_23A07073C(a1 + 16, i);
      *__dst = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        v10 = __dst + 2;
      }
      __dst = sub_23A07CB84(v8, v10, a3);
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return __dst;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)__dst) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_23A08B474((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_23A07D61C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sub_23A07CD64(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_23A07D6C4(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_250B0CC88)
    sub_23A07E458(a1, (uint64_t)a2, a3);
  sub_23A07D6EC(a1, (uint64_t)a2);
}

void sub_23A07D6EC(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == a1)
  {
    sub_23A08BD88((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = sub_23A08BDA0(v14, "CHECK failed: (&from) != (this): ");
    sub_23A08BED0((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v14);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_23A07DCC0((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_23A07E2A8(a1 + 16, a2 + 16);
}

void sub_23A07D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_23A07D7CC(uint64_t a1)
{
  return sub_23A07D7D4(a1 + 16);
}

BOOL sub_23A07D7D4(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_23A07073C(a1, v2);
    if (!sub_23A09105C(v5 + 16))
      break;
  }
  while (sub_23A07D010(v5 + 48));
  return v3 < 1;
}

_QWORD *sub_23A07D838@<X0>(_QWORD *a1@<X8>)
{
  return sub_239FEE1FC(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_23A07D848(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_250B0C1F0, 80);
    v2 = sub_23A08A880(a1, 80);
    sub_23A07B608(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_23A07B608(v2, 0);
  }
  return v2;
}

void sub_23A07D8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07D8FC(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_250B0C120, 88);
    v2 = sub_23A08A880(a1, 88);
    sub_23A07C55C(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_23A07C55C(v2, 0);
  }
  return v2;
}

void sub_23A07D98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07D9B0(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_250B0C178, 48);
    v2 = sub_23A08A880(a1, 48);
    sub_23A07D074(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_23A07D074(v2, 0);
  }
  return v2;
}

void sub_23A07DA40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83FE88](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07DA64()
{
  return sub_23A07D848(0);
}

uint64_t sub_23A07DA6C(uint64_t a1, uint64_t a2)
{
  return sub_23A07D848(a2);
}

uint64_t sub_23A07DA74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_23A07DA7C()
{
  return 0;
}

uint64_t sub_23A07DA84()
{
  return sub_23A07D8FC(0);
}

uint64_t sub_23A07DA8C(uint64_t a1, uint64_t a2)
{
  return sub_23A07D8FC(a2);
}

uint64_t sub_23A07DA94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_23A07DA9C()
{
  return sub_23A07D9B0(0);
}

uint64_t sub_23A07DAA4(uint64_t a1, uint64_t a2)
{
  return sub_23A07D9B0(a2);
}

uint64_t sub_23A07DAAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_23A07DAB4(uint64_t *a1)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *a1;
  if ((result & 1) != 0)
  {
    sub_23A08BD88((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = sub_23A08BDA0(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_23A08BED0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v6);
    result = *a1;
  }
  if (!result)
  {
    sub_23A08BD88((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = sub_23A08BDA0(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_23A08BED0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_23A07DB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23A07DB84(uint64_t a1, char **a2, int a3)
{
  char *v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = *a2;
  if (!*a2)
  {
    sub_23A08BD88((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = sub_23A08BDA0(v13, "CHECK failed: *ptr: ");
    sub_23A08BED0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v13);
    v6 = *a2;
  }
  if ((unint64_t)v6 < *(_QWORD *)a1)
    return 0;
  v9 = (_DWORD)v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_23A08BD88((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = sub_23A08BDA0(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_23A08BED0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(_QWORD *)(a1 + 16))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = sub_23A097744(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_23A07DCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_23A07DCC0(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32), &unk_250B0C4A8, 32);
  v3 = sub_23A08A59C((unint64_t *)v2, 0x20uLL, (uint64_t)sub_23A07DD64);
LABEL_8:
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)v3 = v2;
  return v3 + 8;
}

void sub_23A07DD64(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unsigned __int8 *sub_23A07DD78(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_23A08BD88((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_23A08BDA0(v7, "CHECK failed: (n) >= (0): ");
    sub_23A08BED0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_23A08BED8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_23A07B874(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_23A07DE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_23A07DE24(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_23A08BD88((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_23A08BDA0(v7, "CHECK failed: (n) >= (0): ");
    sub_23A08BED0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_23A08BED8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_23A07C77C(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_23A07DEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A07DED0(uint64_t *a1)
{
  sub_23A07DEF8(a1);
  return sub_23A07DF74(a1);
}

void sub_23A07DEF8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_23A07B68C(*v3);
          MEMORY[0x23B83FE88](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_23A07DF74(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_23A08A298(v2);
  return a1;
}

uint64_t sub_23A07DFA4(uint64_t a1, int a2, unsigned int a3)
{
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  if (a3 >= 0x7FFFFFF0)
  {
    sub_23A08BD88((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = sub_23A08BDA0(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_23A08BED0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v11);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2 - v7 + a3;
  *(_QWORD *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_23A07E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A07E05C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_23A08BD88((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_23A08BDA0(v11, "CHECK failed: (&other) != (this): ");
    sub_23A08BED0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_23A09D13C((uint64_t *)a1, v5);
    sub_23A07E148((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_23A07E130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A07E148(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_23A07E1F4(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_23A07D848(v18);
      sub_23A07E1F4(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_23A07E1F4(uint64_t a1, uint64_t a2)
{
  sub_23A07C1B8(a2, a1);
}

uint64_t *sub_23A07E204(uint64_t *a1)
{
  sub_23A07E22C(a1);
  return sub_23A07DF74(a1);
}

void sub_23A07E22C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_23A07C600(*v3);
          MEMORY[0x23B83FE88](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_23A07E2A8(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_23A08BD88((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_23A08BDA0(v11, "CHECK failed: (&other) != (this): ");
    sub_23A08BED0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_23A09D13C((uint64_t *)a1, v5);
    sub_23A07E394((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_23A07E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A07E394(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_23A07E440(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_23A07D8FC(v18);
      sub_23A07E440(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_23A07E440(uint64_t a1, uint64_t a2)
{
  sub_23A07CE94(a2, a1);
}

void sub_23A07E450(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sub_23A07E458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23A07E450("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_23A07E47C()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_23A084834((uint64_t)&unk_2569422B0, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_2569422B0);
}

void sub_23A07E4D0()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_23A083F58(qword_256942530, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)qword_256942530);
}

void sub_23A07E524()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_23A08234C((uint64_t)&unk_2569424B0, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_2569424B0);
}

void sub_23A07E578()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_23A083758((uint64_t)&unk_256942468, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_256942468);
}

void sub_23A07E5CC()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  qword_256942508 = (uint64_t)&off_250B0CB50;
  unk_256942510 = 0;
  qword_256942518 = 0;
  if (atomic_load(dword_2569413C8))
    sub_23A096744(dword_2569413C8);
  qword_256942520 = (uint64_t)&qword_2569425B8;
  unk_256942528 = &qword_2569425B8;
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&qword_256942508);
}

void sub_23A07E650()
{
  sub_23A08BA20(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_23A07E6B4((uint64_t)&unk_256942320, 0);
  sub_23A096FCC((uint64_t)sub_23A0965DC, (uint64_t)&unk_256942320);
}

BOOL sub_23A07E6A4(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_23A07E6B4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250B0C800;
  *(_QWORD *)(a1 + 8) = a2;
  sub_23A08C324(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(dword_256941400))
    sub_23A096744(dword_256941400);
  *(_QWORD *)(a1 + 152) = &qword_2569425B8;
  *(_QWORD *)(a1 + 160) = &qword_2569425B8;
  *(_QWORD *)(a1 + 168) = &qword_2569425B8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &qword_2569425B8;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_23A0A4B30;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_23A07E7DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23A09D124(v3);
  sub_23A09D124(v5);
  sub_23A09D124(v4);
  sub_23A09D124(v2);
  sub_23A08C400(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23A07E810(uint64_t *a1)
{
  sub_23A07E868(a1);
  sub_23A07B7E8(a1 + 1);
  sub_23A09D124(a1 + 16);
  sub_23A09D124(a1 + 13);
  sub_23A09D124(a1 + 10);
  sub_23A09D124(a1 + 7);
  sub_23A08C400((uint64_t)(a1 + 2));
  return a1;
}

uint64_t *sub_23A07E868(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = a1[1];
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_23A08BD88((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = sub_23A08BDA0(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_23A08BED0((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_23A08BED8((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_2569425B8)
  {
    v5 = sub_23A07DAB4(a1 + 19);
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x23B83FE88](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_2569425B8)
  {
    v7 = sub_23A07DAB4(a1 + 20);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x23B83FE88](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_2569425B8)
  {
    v9 = sub_23A07DAB4(a1 + 21);
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x23B83FE88](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    v11 = sub_23A07DAB4(a1 + 22);
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x23B83FE88](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    v13 = sub_23A07DAB4(a1 + 23);
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x23B83FE88](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    v15 = sub_23A07DAB4(a1 + 24);
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x23B83FE88](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    v17 = sub_23A07DAB4(a1 + 25);
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x23B83FE88](v18, 0x1012C40EC159624);
  }
  result = a1 + 26;
  if (a1[26])
  {
    v20 = sub_23A07DAB4(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (uint64_t *)MEMORY[0x23B83FE88](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)a1[27];
  v22 = a1 + 27;
  if (v23 != &qword_2569425B8)
  {
    v24 = sub_23A07DAB4(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (uint64_t *)MEMORY[0x23B83FE88](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_23A07EB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23A08BED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23A07EB3C(uint64_t *a1)
{
  sub_23A07E810(a1);
  JUMPOUT(0x23B83FE88);
}

uint64_t sub_23A07EB60(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_23A08FDF0((unsigned __int8 *)(a1 + 16));
  sub_23A086B58(a1 + 56);
  sub_23A086B58(a1 + 80);
  sub_23A086B58(a1 + 104);
  result = sub_23A086B58(a1 + 128);
  v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3)
    goto LABEL_10;
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v6 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v3 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v5 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  result = (uint64_t)sub_23A08AF90((std::string *)(a1 + 176), &off_2569411E0);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = (uint64_t)sub_23A08AF90((std::string *)(a1 + 184), &off_2569411C0);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = (uint64_t)sub_23A08AF90((std::string *)(a1 + 192), &off_256941230);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    result = (uint64_t)sub_23A08AF90((std::string *)(a1 + 200), &off_256941250);
    if ((v3 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v3 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  result = (uint64_t)sub_23A08AF90((std::string *)(a1 + 208), &off_2569411A0);
  if ((v3 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v7 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_QWORD *)(a1 + 247) = 0;
    *(_BYTE *)(a1 + 271) = 0;
    *(_QWORD *)(a1 + 255) = 0;
    *(_QWORD *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_23A0A4B30;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(_QWORD *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(_BYTE **)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_23A07EE24(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  char v5;
  char *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  char *v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  char *v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  uint64_t v145;
  int v146;
  int v147;
  char *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  unint64_t *v187;
  int v188[2];

  *(_QWORD *)v188 = a2;
  v5 = sub_23A07DB84((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  result = *(char **)v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (unint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 128);
  v8 = (uint64_t *)(a1 + 104);
  v9 = (uint64_t *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    v11 = result + 1;
    v12 = *result;
    if ((*result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      v11 = result + 2;
LABEL_7:
      *(_QWORD *)v188 = v11;
      goto LABEL_8;
    }
    result = (char *)sub_23A09801C((uint64_t)result, v13 - 128);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = v11 - 1;
        while (2)
        {
          v14 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_23A09D128(a1 + 56, v17 + 1);
            v15 = *(int **)(a1 + 72);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *(int *)(a1 + 64);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *(_DWORD *)(a1 + 68))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 32), &unk_250B0C510, 24);
            v18 = (std::string *)sub_23A08A59C((unint64_t *)v19, 0x18uLL, (uint64_t)sub_23A086A68);
          }
          else
          {
            v18 = (std::string *)operator new();
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v20 = *(_QWORD *)(a1 + 72);
          v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = v18;
          v14 = *(char **)v188;
LABEL_23:
          result = (char *)sub_23A0980D0(v18, v14, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 1u;
        v23 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = v11 + 1;
        v27 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, (v29 - 128));
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = v11 + 2;
LABEL_37:
          *(_QWORD *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)sub_23A07DCC0(v187);
          sub_23A097ED4(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        v31 = v11 + 1;
        LODWORD(v30) = *v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v30);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = v11 + 2;
LABEL_44:
          *(_QWORD *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = v11 - 1;
        while (1)
        {
          v33 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v34 = *(int **)(a1 + 96);
          if (!v34)
            break;
          v35 = *(int *)(a1 + 88);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_52:
              sub_23A09D128(a1 + 80, v36 + 1);
              v34 = *(int **)(a1 + 96);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v38 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 32), &unk_250B0C510, 24);
              v37 = (std::string *)sub_23A08A59C((unint64_t *)v38, 0x18uLL, (uint64_t)sub_23A086A68);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *(_QWORD *)(a1 + 96);
            v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = *(char **)v188;
            goto LABEL_59;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (char *)sub_23A0980D0(v37, v33, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 42)
            goto LABEL_277;
        }
        v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200u;
        v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v41);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = v11 + 2;
LABEL_67:
          *(_QWORD *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 2u;
        v44 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 280) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x800u;
        v47 = v11 + 1;
        v48 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v48);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 232) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = v11 + 2;
LABEL_78:
          *(_QWORD *)v188 = v47;
          *(_QWORD *)(a1 + 232) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400u;
        v51 = v11 + 1;
        LODWORD(v50) = *v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v50);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = v11 + 2;
LABEL_83:
          *(_QWORD *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v53);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 240) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = v11 + 2;
LABEL_88:
          *(_QWORD *)v188 = v54;
          *(_DWORD *)(a1 + 240) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v56);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = v11 + 2;
LABEL_93:
          *(_QWORD *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        v61 = v11 + 1;
        LODWORD(v60) = *v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v60);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = v11 + 2;
LABEL_100:
          *(_QWORD *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v63);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = v11 + 2;
LABEL_105:
          *(_QWORD *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v66);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 300) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = v11 + 2;
LABEL_110:
          *(_QWORD *)v188 = v67;
          *(_DWORD *)(a1 + 300) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 1u;
        v69 = v11 + 1;
        v70 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v70);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = v11 + 2;
LABEL_115:
          *(_QWORD *)v188 = v69;
          *(_BYTE *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v72);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = v11 + 2;
LABEL_120:
          *(_QWORD *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 2u;
        v75 = v11 + 1;
        v76 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v76);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = v11 + 2;
LABEL_125:
          *(_QWORD *)v188 = v75;
          *(_BYTE *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 8u;
        v78 = v11 + 1;
        v79 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v79);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = v11 + 2;
LABEL_130:
          *(_QWORD *)v188 = v78;
          *(_BYTE *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 4u;
        v81 = v11 + 1;
        v82 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v82);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = v11 + 2;
LABEL_135:
          *(_QWORD *)v188 = v81;
          *(_BYTE *)(a1 + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        v84 = v11 + 1;
        v85 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v85);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = v11 + 2;
LABEL_140:
          *(_QWORD *)v188 = v84;
          *(_BYTE *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        v87 = v11 + 1;
        v88 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v88);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = v11 + 2;
LABEL_145:
          *(_QWORD *)v188 = v87;
          *(_BYTE *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        v90 = v11 + 1;
        v91 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v91);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = v11 + 2;
LABEL_150:
          *(_QWORD *)v188 = v90;
          *(_BYTE *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(_QWORD *)v188 = result + 2;
          v94 = *(int **)(a1 + 120);
          if (!v94)
            break;
          v95 = *(int *)(a1 + 112);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_158:
              sub_23A09D128(a1 + 104, v96 + 1);
              v94 = *(int **)(a1 + 120);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v98 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v98 + 32) + 32), &unk_250B0C510, 24);
              v97 = (std::string *)sub_23A08A59C((unint64_t *)v98, 0x18uLL, (uint64_t)sub_23A086A68);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *(_QWORD *)(a1 + 120);
            v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (char *)sub_23A0980D0(v97, v93, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        v110 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v110);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = v11 + 2;
LABEL_191:
          *(_QWORD *)v188 = v109;
          *(_BYTE *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        v112 = v11 + 1;
        v113 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v113);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = v11 + 2;
LABEL_196:
          *(_QWORD *)v188 = v112;
          *(_BYTE *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        v115 = v11 + 1;
        v116 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v116);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = v11 + 2;
LABEL_201:
          *(_QWORD *)v188 = v115;
          *(_BYTE *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        v119 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v119);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = v11 + 2;
LABEL_206:
          *(_QWORD *)v188 = v118;
          *(_BYTE *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 4u;
        v121 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v122);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = v11 + 2;
LABEL_215:
          *(_QWORD *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x40u;
        v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v125);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = v11 + 2;
LABEL_220:
          *(_QWORD *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v128);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 320) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = v11 + 2;
LABEL_225:
          *(_QWORD *)v188 = v129;
          *(_DWORD *)(a1 + 320) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x100u;
        v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v131);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = v11 + 2;
LABEL_230:
          *(_QWORD *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 8u;
        v153 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2569411E0;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v134 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2569411C0;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20u;
        v138 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_256941230;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40u;
        v139 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_256941250;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80u;
        v140 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2569411A0;
        v137 = (uint64_t *)(a1 + 208);
LABEL_274:
        v152 = (std::string *)sub_23A08ADFC(v137, v136, (uint64_t)v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        v141 = v11 + 1;
        v142 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v142);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = v11 + 2;
LABEL_251:
          *(_QWORD *)v188 = v141;
          *(_BYTE *)(a1 + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        v144 = v11 + 1;
        v145 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v145);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = v11 + 2;
LABEL_256:
          *(_QWORD *)v188 = v144;
          *(_BYTE *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_259:
        *(_QWORD *)v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        v148 = v11 + 1;
        v149 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (char *)sub_23A097FD4((uint64_t)v11, v149);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 264) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = v11 + 2;
LABEL_264:
          *(_QWORD *)v188 = v148;
          *(_QWORD *)(a1 + 264) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100u;
        v151 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 216);
LABEL_269:
        v152 = (std::string *)sub_23A08ACE4(v25, (uint64_t)v24);
LABEL_275:
        result = (char *)sub_23A0980D0(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)sub_23A07DCC0(v187);
            v11 = *(char **)v188;
          }
          result = (char *)sub_23A0984FC(v12, v156, v11, a3);
        }
        else
        {
          result = (char *)sub_23A091390((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_256942320, v187, a3);
        }
LABEL_276:
        *(_QWORD *)v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = sub_23A07DB84((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        result = *(char **)v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = result + 2;
    *(_QWORD *)v188 = result + 2;
    v102 = *(int **)(a1 + 144);
    if (!v102)
      break;
    v103 = *(int *)(a1 + 136);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_176:
        sub_23A09D128(a1 + 128, v104 + 1);
        v102 = *(int **)(a1 + 144);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v106 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v106 + 32) + 32), &unk_250B0C510, 24);
        v105 = (std::string *)sub_23A08A59C((unint64_t *)v106, 0x18uLL, (uint64_t)sub_23A086A68);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *(_QWORD *)(a1 + 144);
      v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = *(char **)v188;
      goto LABEL_183;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (char *)sub_23A0980D0(v105, v101, (uint64_t)a3);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_176;
}

