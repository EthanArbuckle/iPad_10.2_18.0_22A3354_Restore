void sub_21DF166C4()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B2F80);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B2F80))
    {
      v1 = operator new(0x70uLL);
      qword_2553B2F70 = (uint64_t)(v1 + 7);
      unk_2553B2F78 = v1 + 7;
      v1[4] = xmmword_24E1E73F8;
      v1[5] = *(_OWORD *)&off_24E1E7408;
      v1[6] = xmmword_24E1E7418;
      *v1 = xmmword_24E1E73B8;
      v1[1] = *(_OWORD *)&off_24E1E73C8;
      v1[2] = xmmword_24E1E73D8;
      v1[3] = *(_OWORD *)&off_24E1E73E8;
      qword_2553B2F68 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_21DF1675C, &qword_2553B2F68, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B2F80);
    }
  }
}

uint64_t sub_21DF1675C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21DF1678C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B2FA0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B2FA0))
    {
      qword_2553B2F98 = 0;
      qword_2553B2F90 = 0;
      qword_2553B2F88 = (uint64_t)&qword_2553B2F90;
      __cxa_atexit((void (*)(void *))sub_21DF167F8, &qword_2553B2F88, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B2FA0);
    }
  }
}

uint64_t sub_21DF167F8(uint64_t a1)
{
  sub_21DF16820(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_21DF16820(_QWORD *a1)
{
  if (a1)
  {
    sub_21DF16820(*a1);
    sub_21DF16820(a1[1]);
    sub_21DF16860((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_21DF16860(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_21DF168A4()
{
  unsigned __int8 v0;
  unint64_t v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B2FB0);
  v1 = 0x2553B2000uLL;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_2553B2FB0);
    v1 = 0x2553B2000;
    if (v3)
    {
      qword_2553B2FA8 = (uint64_t)os_log_create("com.apple.agx", "AGCEnv");
      __cxa_guard_release(&qword_2553B2FB0);
      v1 = 0x2553B2000;
    }
  }
  return *(_QWORD *)(v1 + 4008);
}

uint64_t sub_21DF16918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_21DF16934(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  int8x8_t v25;
  uint8x8_t v26;
  _BYTE v28[32];
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v30 = *(_OWORD *)a2;
  v31 = *(_QWORD *)(a2 + 16);
  if (v31)
    llvm::MetadataTracking::track();
  v32 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v30);
  if (v31)
    llvm::MetadataTracking::untrack();
  v11 = *(_QWORD *)(a1 + 160);
  if (a3 != 1)
    v11 = llvm::FixedVectorType::get();
  v12 = llvm::PointerType::get();
  v13 = a1 + 8 * (a3 - 1);
  if (a6)
  {
    v14 = *(_QWORD *)(v13 + 1944);
    if (v14)
      v15 = strlen(*(const char **)(v13 + 1944));
    else
      v15 = 0;
    v18 = sub_21DF1AFD4(a1, v14, v15, v11, *(_QWORD *)(a1 + 192), v12, v12);
    v33 = llvm::ConstantInt::get();
    v34 = a5;
    v35 = a6;
    v19 = a1 + 8;
    v29 = 257;
    v20 = *(_QWORD *)(v18 + 24);
    v21 = v18;
    v22 = 3;
  }
  else
  {
    v16 = *(_QWORD *)(v13 + 1912);
    if (v16)
      v17 = strlen(*(const char **)(v13 + 1912));
    else
      v17 = 0;
    v23 = sub_21DF1B0B0(a1, v16, v17, v11, *(_QWORD *)(a1 + 192), v12);
    v33 = llvm::ConstantInt::get();
    v34 = a5;
    v19 = a1 + 8;
    v29 = 257;
    v20 = *(_QWORD *)(v23 + 24);
    v21 = v23;
    v22 = 2;
  }
  v24 = sub_21DF191A4(v19, v20, v21, (uint64_t)&v33, v22, (uint64_t)v28);
  v25.i32[0] = a3;
  v26 = (uint8x8_t)vcnt_s8(v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.i32[0] != 1)
    return sub_21DF79408(a1, (uint64_t)v24, a3, 1);
  return (uint64_t)v24;
}

uint64_t sub_21DF16B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Int8PtrTy;
  uint64_t *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Value *v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  const char **v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  const char **v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const std::string::value_type *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  int v104;
  const std::string::value_type *v105;
  std::string *v106;
  uint64_t v107;
  uint64_t *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::string::size_type v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  llvm::ConstantPointerNull *v154;
  llvm::PointerType *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::string::size_type v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  int v199;
  _BYTE v200[32];
  __int16 v201;
  int v202;
  int v203;
  std::string v204;
  uint64_t v205;
  __int16 v206;
  void *v207;
  uint64_t v208;
  _BYTE v209[128];
  std::string v210;
  std::string::size_type v211;
  __int16 v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  v197 = *(_OWORD *)a2;
  v198 = *(_QWORD *)(a2 + 16);
  if (v198)
    llvm::MetadataTracking::track();
  v199 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v197);
  if (v198)
    llvm::MetadataTracking::untrack();
  v6 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 - 4) >= 2)
  {
    if (v6 == 1)
    {
      v12 = *(_DWORD *)(a3 + 192);
      v13 = v12 & 0xFFFFFFFE;
      v14 = (v12 & 0xFFFFFFFE) == 2;
    }
    else
    {
      v14 = 0;
      v12 = *(_DWORD *)(a3 + 192);
      v13 = v12 & 0xFFFFFFFE;
    }
    v15 = *(unsigned __int8 *)(a1 + 1976);
    if (*(_BYTE *)(a1 + 1976))
      v16 = v14;
    else
      v16 = 1;
    v207 = v209;
    v208 = 0x1000000000;
    v17 = *(_DWORD *)(a3 + 4);
    v19 = v6 == 1 && v13 == 2;
    if (v15 && !v19)
    {
      v20 = **(_QWORD **)(a3 + 120);
      if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12)
        v21 = *(unsigned __int8 *)(**(_QWORD **)(v20 + 16) + 8);
      else
        v21 = *(_DWORD *)(v20 + 8);
      memset(&v204, 0, sizeof(v204));
      if (v6 == 1)
      {
        if (v12 == 3)
        {
          v210.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 296);
          v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
          v210.__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[0];
          v211 = v210.__r_.__value_.__r.__words[0];
          v61 = llvm::StructType::get();
          v62 = v17 == 2;
          v81 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
          v64 = (_QWORD *)(v81 + 1800);
          v65 = (_QWORD *)(v81 + 1848);
LABEL_92:
          if (!v62)
            v65 = v64;
          MEMORY[0x2207A77BC](&v204, *v65);
          v66 = (uint64_t *)(a1 + 184);
          sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
          if (v61)
          {
LABEL_97:
            v82 = llvm::PointerType::get();
            sub_21DF19CD0((uint64_t)&v207, v82);
            v83 = llvm::PointerType::get();
            sub_21DF19CD0((uint64_t)&v207, v83);
            if (v61)
              goto LABEL_166;
            v84 = *(_QWORD *)(a3 + 136);
            v85 = *(_QWORD *)(a3 + 184);
            v86 = *(_QWORD *)(a3 + 200);
            v87 = llvm::PointerType::get();
            sub_21DF19CD0((uint64_t)&v207, v87);
            switch(v17)
            {
              case 0:
                std::string::append(&v204, ".1d");
                v88 = 160;
                if (v21 == 13)
                  v88 = 192;
                sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + v88));
                if (v84)
                {
                  std::string::append(&v204, ".array");
                  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 200));
                }
                if (v21 == 13)
                  goto LABEL_135;
                break;
              case 1:
                std::string::append(&v204, ".2d");
                v89 = 216;
                if (v21 == 13)
                  v89 = 240;
                sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + v89));
                if (v84)
                {
                  std::string::append(&v204, ".array");
                  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 200));
                }
                else if (v86)
                {
                  std::string::append(&v204, ".msaa");
                }
                if (v21 != 13)
                  goto LABEL_136;
LABEL_135:
                std::string::append(&v204, ".i");
                break;
              case 2:
                std::string::append(&v204, ".cube");
                sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 272));
LABEL_136:
                if (v85)
                {
                  std::string::append(&v204, ".shadow");
                  v92 = *(_QWORD *)(a1 + 160);
                  goto LABEL_138;
                }
                break;
              case 3:
                if (v21 == 13)
                  v90 = ".3d.i";
                else
                  v90 = ".3d";
                if (v21 == 13)
                  v91 = 296;
                else
                  v91 = 272;
                std::string::append(&v204, v90);
                v92 = *(_QWORD *)(a1 + v91);
LABEL_138:
                sub_21DF19CD0((uint64_t)&v207, v92);
                break;
              default:
                break;
            }
            switch(*(_DWORD *)(a3 + 144))
            {
              case 0:
                v96 = *(_QWORD *)(a1 + 160);
                goto LABEL_150;
              case 1:
                v97 = 160;
                if (v21 == 13)
                  v97 = 192;
                sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + v97));
                std::string::append(&v204, ".lod");
                break;
              case 2:
                std::string::append(&v204, ".grad");
                v98 = *(unsigned int *)(a3 + 4);
                if (v98 <= 3)
                {
                  v99 = dword_21DFA6280[v98];
                  do
                  {
                    sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 216));
                    --v99;
                  }
                  while (v99);
                }
                break;
              case 3:
                if (*(_QWORD *)(a3 + 200))
                {
                  v96 = *(_QWORD *)(a1 + 184);
LABEL_150:
                  sub_21DF19CD0((uint64_t)&v207, v96);
                }
                break;
              default:
                break;
            }
            if (*(_QWORD *)(a3 + 128))
            {
              sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
              std::string::append(&v204, ".offset");
            }
            if (v6 == 3)
            {
              sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 272));
              std::string::append(&v204, ".4xf");
            }
            else
            {
              v100 = 272;
              if (*(_DWORD *)(a3 + 8) == 1)
              {
                v100 = 264;
                v101 = ".4xh";
              }
              else
              {
                v101 = ".4xf";
              }
              v102 = *(_QWORD *)(a1 + v100);
              std::string::append(&v204, v101);
              v103 = *(_QWORD *)(a1 + 176);
              v210.__r_.__value_.__r.__words[0] = v102;
              v210.__r_.__value_.__l.__size_ = v103;
              llvm::StructType::get();
              sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 152));
            }
            if (v84)
              std::string::append(&v204, ".i64");
            v104 = *(_DWORD *)(a3 + 144);
            v105 = ".f32";
            if (v104)
            {
              if (v104 != 1)
                goto LABEL_166;
              if (v21 == 13)
                v105 = ".i32";
            }
            std::string::append(&v204, v105);
LABEL_166:
            llvm::FunctionType::get();
            if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            {
              v106 = (std::string *)v204.__r_.__value_.__r.__words[0];
              if (!v204.__r_.__value_.__r.__words[0])
              {
LABEL_170:
                llvm::Module::getOrInsertFunction();
                v196 = v107;
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v204.__r_.__value_.__l.__data_);
                goto LABEL_172;
              }
            }
            else
            {
              v106 = &v204;
            }
            strlen((const char *)v106);
            goto LABEL_170;
          }
          goto LABEL_95;
        }
        if (v12 == 2)
        {
          v210.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 296);
          v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
          v61 = llvm::StructType::get();
          v62 = v17 == 2;
          v63 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
          v64 = (_QWORD *)(v63 + 1784);
          v65 = (_QWORD *)(v63 + 1832);
          goto LABEL_92;
        }
      }
      else if (v6 == 3)
      {
        MEMORY[0x2207A77BC](&v204, *(_QWORD *)(a1 + 1744));
LABEL_96:
        v61 = 0;
        goto LABEL_97;
      }
      MEMORY[0x2207A77BC](&v204, *(_QWORD *)(a1 + 1728));
      v66 = (uint64_t *)(a1 + 184);
      sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
LABEL_95:
      sub_21DF19CD0((uint64_t)&v207, *v66);
      goto LABEL_96;
    }
    v22 = llvm::PointerType::get();
    sub_21DF19CD0((uint64_t)&v207, v22);
    v23 = llvm::PointerType::get();
    sub_21DF19CD0((uint64_t)&v207, v23);
    Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)2);
    sub_21DF19CD0((uint64_t)&v207, Int8PtrTy);
    sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 168));
    if ((v17 - 2) < 2)
    {
      v25 = (uint64_t *)(a1 + 272);
    }
    else if (v17 == 1)
    {
      v25 = (uint64_t *)(a1 + 216);
    }
    else
    {
      if (v17)
      {
        v67 = 0;
LABEL_70:
        sub_21DF19CD0((uint64_t)&v207, v67);
        if (*(_DWORD *)(a3 + 144) != 2)
        {
          sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 168));
          sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 160));
          goto LABEL_80;
        }
        v68 = *(unsigned int *)(a3 + 4);
        if (v68 > 3)
          v69 = 0;
        else
          v69 = dword_21DFA6280[v68];
        v70 = v69;
        v71 = *(_QWORD *)(a1 + 216);
        v72 = v208;
        if (v208 + (unint64_t)v69 > HIDWORD(v208))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v72 = v208;
          if ((_DWORD)v70)
          {
LABEL_77:
            v73 = (char *)v207 + 8 * v72;
            v74 = v70;
            do
            {
              *v73++ = v71;
              --v74;
            }
            while (v74);
          }
        }
        else if (v69)
        {
          goto LABEL_77;
        }
        LODWORD(v208) = v72 + v70;
LABEL_80:
        sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 168));
        sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 168));
        sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 168));
        sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 192));
        switch(*(_DWORD *)a3)
        {
          case 0:
          case 2:
            switch(v17)
            {
              case 0:
                v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1752);
                goto LABEL_128;
              case 1:
                v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1768);
                goto LABEL_128;
              case 2:
                v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1816);
                goto LABEL_128;
              case 3:
                v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1864);
                goto LABEL_128;
              default:
                goto LABEL_88;
            }
          case 1:
            v76 = *(_DWORD *)(a3 + 192);
            switch(v76)
            {
              case 3:
                v210.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 296);
                v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
                v210.__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[0];
                v211 = v210.__r_.__value_.__r.__words[0];
                llvm::StructType::get();
                v77 = v17 == 2;
                v93 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
                v79 = (const char **)(v93 + 1800);
                v75 = (const char **)(v93 + 1848);
                break;
              case 2:
                v210.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 296);
                v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
                llvm::StructType::get();
                v77 = v17 == 2;
                v94 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
                v79 = (const char **)(v94 + 1784);
                v75 = (const char **)(v94 + 1832);
                break;
              case 1:
                v77 = v17 == 2;
                v78 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
                v79 = (const char **)(v78 + 1768);
                v75 = (const char **)(v78 + 1816);
                break;
              default:
LABEL_88:
                v80 = 0;
                goto LABEL_129;
            }
            if (!v77)
              v75 = v79;
LABEL_128:
            v80 = *v75;
LABEL_129:
            llvm::FunctionType::get();
            if (v80)
              strlen(v80);
            llvm::Module::getOrInsertFunction();
            v196 = v95;
            break;
          case 3:
            sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 272));
            switch(v17)
            {
              case 0:
                v75 = (const char **)(a1 + 1880);
                goto LABEL_128;
              case 1:
                v75 = (const char **)(a1 + 1888);
                goto LABEL_128;
              case 2:
                v75 = (const char **)(a1 + 1896);
                goto LABEL_128;
              case 3:
                v75 = (const char **)(a1 + 1904);
                goto LABEL_128;
              default:
                goto LABEL_88;
            }
          default:
            goto LABEL_88;
        }
LABEL_172:
        if (v207 != v209)
          free(v207);
        if ((v16 & 1) != 0)
        {
          v207 = v209;
          v208 = 0x1000000000;
          v108 = *(uint64_t **)(a3 + 120);
          if ((*(_DWORD *)(*v108 + 8) & 0xFE) == 0x12)
            v109 = *(unsigned __int8 *)(**(_QWORD **)(*v108 + 16) + 8);
          else
            v109 = *(_DWORD *)(*v108 + 8);
          v111 = *(_QWORD *)(a3 + 136);
          v112 = *(_DWORD *)(a3 + 4);
          if (*(_DWORD *)a3 == 3)
            v113 = (uint64_t *)(a3 + 40);
          else
            v113 = (uint64_t *)(a3 + 32);
          sub_21DF19CD0((uint64_t)&v207, *v113);
          sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a3 + 72));
          if (v111)
          {
            v114 = sub_21DF19D2C((_QWORD *)a1, a3);
          }
          else
          {
            v154 = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)2);
            v114 = llvm::ConstantPointerNull::get(v154, v155);
          }
          sub_21DF19CD0((uint64_t)&v207, v114);
          v156 = llvm::ConstantInt::get();
          sub_21DF19CD0((uint64_t)&v207, v156);
          if (*(_QWORD *)(a3 + 128) && v109 == 13 && *(_BYTE *)(a1 + 1633))
            v157 = 0;
          else
            v157 = sub_21DF78BE0(a1, v108, 1);
          sub_21DF19CD0((uint64_t)&v207, v157);
          v158 = *(_DWORD *)(a3 + 144);
          if (v158 == 3)
          {
            v172 = llvm::ConstantInt::get();
            sub_21DF19CD0((uint64_t)&v207, v172);
            v173 = llvm::ConstantFP::get();
          }
          else
          {
            if (v158 == 2)
            {
              v159 = *(unsigned int *)(a3 + 4);
              if (v159 <= 3)
              {
                v160 = 0;
                v161 = dword_21DFA6280[v159];
                do
                {
                  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
                  v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                  v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                  v162 = llvm::ConstantVector::get();
                  v163 = *(_QWORD *)(a3 + 160);
                  v164 = *(_QWORD *)(a3 + 168);
                  v212 = 257;
                  v165 = sub_21DF19EE8(a1 + 8, v163, v164, v162, (uint64_t)&v210);
                  sub_21DF19CD0((uint64_t)&v207, v165);
                  ++v160;
                }
                while (v161 != v160);
              }
LABEL_256:
              v176 = llvm::ConstantInt::get();
              sub_21DF19CD0((uint64_t)&v207, v176);
              v177 = llvm::ConstantInt::get();
              sub_21DF19CD0((uint64_t)&v207, v177);
              v178 = llvm::ConstantInt::get();
              sub_21DF19CD0((uint64_t)&v207, v178);
              v179 = *(_QWORD *)(a3 + 128);
              if (v179)
              {
                if (v109 != 13 || !*(_BYTE *)(a1 + 1633))
                {
                  v182 = sub_21DF1A044(a1, a3);
                  goto LABEL_266;
                }
                if ((v112 & 0xFFFFFFFE) == 2)
                  v179 = sub_21DF7969C(a1, *(_QWORD *)(a3 + 128), 4);
                v212 = 257;
                v180 = (uint64_t *)sub_21DF19FAC(a1 + 8, (uint64_t)v108, v179, (uint64_t)&v210);
                v181 = sub_21DF78BE0(a1, v180, 1);
                *((_QWORD *)v207 + 4) = v181;
              }
              else
              {
                v183 = *(uint64_t **)(a3 + 200);
                if (v183)
                {
                  v184 = sub_21DF78D78((_QWORD *)a1, v183, *v183, 0, 0);
                  v212 = 257;
                  v185 = llvm::ConstantInt::get();
                  v182 = sub_21DF1A184(a1 + 8, v184, v185, (uint64_t)&v210);
                  goto LABEL_266;
                }
              }
              v182 = llvm::ConstantInt::get();
LABEL_266:
              sub_21DF19CD0((uint64_t)&v207, v182);
              if (*(_DWORD *)a3 == 3)
              {
                v186 = sub_21DF1969C(a1, a3);
                sub_21DF19CD0((uint64_t)&v207, v186);
              }
              v212 = 257;
              v51 = (uint64_t)sub_21DF191A4(a1 + 8, *(_QWORD *)(v196 + 24), v196, (uint64_t)v207, v208, (uint64_t)&v210);
              if (*(_DWORD *)a3 != 3 && *(_BYTE *)(a3 + 17))
                v51 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD))a1)(a1, v51, *(unsigned int *)(a3 + 8));
              if (*(_BYTE *)(a3 + 16) && (*(_DWORD *)(*(_QWORD *)v51 + 8) & 0xFE) == 0x12)
              {
                v212 = 257;
                v187 = llvm::ConstantInt::get();
                v51 = sub_21DF79584(a1 + 8, v51, v187, (uint64_t)&v210);
              }
              if (*(_BYTE *)(a3 + 19))
              {
                v188 = *(_QWORD *)(a1 + 176);
                v210.__r_.__value_.__r.__words[0] = *(_QWORD *)v51;
                v210.__r_.__value_.__l.__size_ = v188;
                llvm::StructType::get();
                v189 = llvm::UndefValue::get();
                LODWORD(v204.__r_.__value_.__l.__data_) = 0;
                v212 = 257;
                v190 = sub_21DF1A244(a1 + 8, v189, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
                v191 = llvm::ConstantInt::get();
                LODWORD(v204.__r_.__value_.__l.__data_) = 1;
                v212 = 257;
                v51 = sub_21DF1A244(a1 + 8, v190, v191, (uint64_t)&v204, 1, (uint64_t)&v210);
              }
              v59 = v207;
              if (v207 != v209)
                goto LABEL_57;
              return v51;
            }
            if (*(_DWORD *)(a3 + 4) == 1 && v111 && *(_DWORD *)a3 == 1)
              v174 = llvm::ConstantFP::get();
            else
              v174 = sub_21DF78BE0(a1, *(uint64_t **)(a3 + 152), 1);
            v173 = v174;
            v175 = llvm::ConstantInt::get();
            sub_21DF19CD0((uint64_t)&v207, v175);
          }
          sub_21DF19CD0((uint64_t)&v207, v173);
          goto LABEL_256;
        }
        if (*(_DWORD *)a3 == 3)
          v110 = sub_21DF1969C(a1, a3);
        else
          v110 = 0;
        v115 = *(uint64_t **)(a3 + 120);
        v195 = v110;
        if ((*(_DWORD *)(*v115 + 8) & 0xFE) == 0x12)
          v116 = *(unsigned __int8 *)(**(_QWORD **)(*v115 + 16) + 8);
        else
          v116 = *(_DWORD *)(*v115 + 8);
        v194 = *(_QWORD *)(a3 + 136);
        v117 = *(_QWORD *)(a3 + 184);
        v207 = v209;
        v208 = 0x1000000000;
        v119 = *(_QWORD *)(a3 + 160);
        v118 = *(_QWORD *)(a3 + 168);
        v120 = *(_DWORD *)a3;
        v121 = *(_DWORD *)(a3 + 4);
        if (*(_DWORD *)a3 != 3)
        {
          v122 = llvm::ConstantInt::get();
          sub_21DF19CD0((uint64_t)&v207, v122);
          v123 = llvm::ConstantInt::get();
          sub_21DF19CD0((uint64_t)&v207, v123);
        }
        v124 = llvm::PointerType::get();
        v125 = (uint64_t *)(a3 + 40);
        if (v120 != 3)
          v125 = (uint64_t *)(a3 + 32);
        v126 = *v125;
        v212 = 257;
        v127 = sub_21DF1A79C(a1 + 8, 49, v126, v124, (uint64_t)&v210);
        sub_21DF19CD0((uint64_t)&v207, v127);
        v128 = *(_QWORD *)(a3 + 72);
        v212 = 257;
        v129 = sub_21DF1A79C(a1 + 8, 49, v128, v124, (uint64_t)&v210);
        sub_21DF19CD0((uint64_t)&v207, v129);
        v130 = llvm::ConstantInt::get();
        v131 = llvm::PointerType::get();
        v212 = 257;
        v132 = sub_21DF1A79C(a1 + 8, 48, v130, v131, (uint64_t)&v210);
        sub_21DF19CD0((uint64_t)&v207, v132);
        if (v121 == 2)
          v115 = (uint64_t *)sub_21DF7969C(a1, (uint64_t)v115, 4);
        v133 = v116;
        if (v116 == 13)
        {
          v134 = *v115;
          if ((*(_DWORD *)(*v115 + 8) & 0xFE) == 0x12)
            v134 = **(_QWORD **)(v134 + 16);
          v115 = (uint64_t *)sub_21DF78D78((_QWORD *)a1, v115, v134, 0, 0);
          v135 = *(_QWORD *)(a3 + 128);
          if (v135 && *(_BYTE *)(a1 + 1633))
          {
            if ((*(_DWORD *)(a3 + 4) & 0xFFFFFFFE) == 2)
              v135 = sub_21DF7969C(a1, *(_QWORD *)(a3 + 128), 4);
            v212 = 257;
            v115 = (uint64_t *)sub_21DF19FAC(a1 + 8, (uint64_t)v115, v135, (uint64_t)&v210);
          }
        }
        sub_21DF19CD0((uint64_t)&v207, (uint64_t)v115);
        if (v194)
        {
          v136 = sub_21DF19D2C((_QWORD *)a1, a3);
          v137 = *(_QWORD *)(a1 + 200);
          v212 = 257;
          v138 = sub_21DF1A79C(a1 + 8, 47, v136, v137, (uint64_t)&v210);
          sub_21DF19CD0((uint64_t)&v207, v138);
        }
        if (v117)
          sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a3 + 184));
        v139 = *(_QWORD *)(a3 + 200);
        if (v139)
        {
          v140 = *(_QWORD *)(a1 + 184);
          v212 = 257;
          v141 = sub_21DF1A79C(a1 + 8, 38, v139, v140, (uint64_t)&v210);
        }
        else
        {
          v166 = *(_DWORD *)(a3 + 144);
          if (v166)
          {
            if (v166 != 1)
            {
              if (v166 == 2)
              {
                v167 = *(unsigned int *)(a3 + 4);
                if (v167 <= 3)
                {
                  v168 = 0;
                  v169 = dword_21DFA6280[v167];
                  do
                  {
                    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
                    v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                    v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                    v170 = llvm::ConstantVector::get();
                    v212 = 257;
                    v171 = sub_21DF19EE8(a1 + 8, v119, v118, v170, (uint64_t)&v210);
                    sub_21DF19CD0((uint64_t)&v207, v171);
                    ++v168;
                  }
                  while (v169 != v168);
                }
              }
LABEL_210:
              if (*(_QWORD *)(a3 + 128))
              {
                if (v133 == 13 && *(_BYTE *)(a1 + 1633))
                {
                  v142 = llvm::ConstantInt::get();
                }
                else
                {
                  v143 = sub_21DF1A044(a1, a3);
                  v144 = *(_QWORD *)(a1 + 184);
                  v212 = 257;
                  v142 = sub_21DF1A79C(a1 + 8, 38, v143, v144, (uint64_t)&v210);
                }
                sub_21DF19CD0((uint64_t)&v207, v142);
              }
              v145 = v195;
              if (*(_DWORD *)a3 != 3)
                v145 = llvm::ConstantFP::get();
              sub_21DF19CD0((uint64_t)&v207, v145);
              v212 = 257;
              v51 = (uint64_t)sub_21DF191A4(a1 + 8, *(_QWORD *)(v196 + 24), v196, (uint64_t)v207, v208, (uint64_t)&v210);
              if (*(_DWORD *)a3 != 3)
              {
                LODWORD(v204.__r_.__value_.__l.__data_) = 0;
                v212 = 257;
                v146 = sub_21DF1ACD0(a1 + 8, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
                if (*(_BYTE *)(a3 + 17))
                  v146 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD))a1)(a1, v146, *(unsigned int *)(a3 + 8));
                if (*(_BYTE *)(a3 + 16) && (*(_DWORD *)(*(_QWORD *)v146 + 8) & 0xFE) == 0x12)
                {
                  v212 = 257;
                  v147 = llvm::ConstantInt::get();
                  v146 = sub_21DF79584(a1 + 8, v146, v147, (uint64_t)&v210);
                }
                if (*(_BYTE *)(a3 + 19))
                {
                  v148 = *(_QWORD *)(a1 + 176);
                  v210.__r_.__value_.__r.__words[0] = *(_QWORD *)v146;
                  v210.__r_.__value_.__l.__size_ = v148;
                  llvm::StructType::get();
                  v149 = llvm::UndefValue::get();
                  LODWORD(v204.__r_.__value_.__l.__data_) = 0;
                  v212 = 257;
                  v150 = sub_21DF1A244(a1 + 8, v149, v146, (uint64_t)&v204, 1, (uint64_t)&v210);
                  v203 = 1;
                  v212 = 257;
                  v151 = sub_21DF1ACD0(a1 + 8, v51, (uint64_t)&v203, 1, (uint64_t)&v210);
                  v152 = *(_QWORD *)(a1 + 176);
                  v206 = 257;
                  v153 = sub_21DF1A79C(a1 + 8, 38, v151, v152, (uint64_t)&v204);
                  v202 = 1;
                  v201 = 257;
                  v51 = sub_21DF1A244(a1 + 8, v150, v153, (uint64_t)&v202, 1, (uint64_t)v200);
                }
                else
                {
                  v51 = v146;
                }
              }
              v59 = v207;
              if (v207 != v209)
                goto LABEL_57;
              return v51;
            }
            v192 = *(_QWORD *)(a3 + 152);
            if (v116 == 13)
            {
              v193 = *(_QWORD *)(a1 + 192);
              if (*(_BYTE *)(*(_QWORD *)v192 + 8) == 13)
              {
                v212 = 257;
                v141 = sub_21DF1ABB0(a1 + 8, v192, v193, 0, (uint64_t)&v210);
              }
              else
              {
                v212 = 257;
                v141 = sub_21DF1AC78(a1 + 8, v192, v193, (uint64_t)&v210);
              }
              goto LABEL_209;
            }
          }
          else
          {
            v192 = *(_QWORD *)(a3 + 152);
          }
          v141 = sub_21DF79090((_QWORD *)a1, v192, *(_QWORD *)(a1 + 160));
        }
LABEL_209:
        sub_21DF19CD0((uint64_t)&v207, v141);
        goto LABEL_210;
      }
      v25 = (uint64_t *)(a1 + 160);
    }
    v67 = *v25;
    goto LABEL_70;
  }
  sub_21DF1AF28(&v210, *(char **)(a1 + 1736));
  v207 = v209;
  v208 = 0x800000000;
  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
  v7 = llvm::PointerType::get();
  sub_21DF19CD0((uint64_t)&v207, v7);
  v8 = llvm::PointerType::get();
  sub_21DF19CD0((uint64_t)&v207, v8);
  v9 = llvm::PointerType::get();
  sub_21DF19CD0((uint64_t)&v207, v9);
  v10 = *(_DWORD *)(a3 + 4);
  if (v10 == 2)
  {
    std::string::append(&v210, ".cube");
    v11 = (uint64_t *)(a1 + 272);
  }
  else
  {
    if (v10 != 1)
      goto LABEL_31;
    std::string::append(&v210, ".2d");
    v11 = (uint64_t *)(a1 + 216);
  }
  sub_21DF19CD0((uint64_t)&v207, *v11);
LABEL_31:
  if (*(_QWORD *)(a3 + 136))
  {
    sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 200));
    std::string::append(&v210, ".array");
  }
  std::string::append(&v210, ".gather");
  if (*(_QWORD *)(a3 + 128))
  {
    sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
    std::string::append(&v210, ".offset");
  }
  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 184));
  sub_21DF19CD0((uint64_t)&v207, *(_QWORD *)(a1 + 152));
  std::string::append(&v210, ".4xf");
  if (*(_QWORD *)(a3 + 136))
    std::string::append(&v210, ".i64");
  v26 = *(_QWORD *)(a1 + 176);
  v204.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 272);
  v204.__r_.__value_.__l.__size_ = v26;
  llvm::StructType::get();
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v28 = v27;
  if (v207 != v209)
    free(v207);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  v207 = v209;
  v208 = 0x800000000;
  v29 = llvm::ConstantInt::get();
  sub_21DF19CD0((uint64_t)&v207, v29);
  v30 = llvm::ConstantInt::get();
  sub_21DF19CD0((uint64_t)&v207, v30);
  v31 = llvm::PointerType::get();
  v32 = *(_QWORD *)(a3 + 32);
  v212 = 257;
  v33 = sub_21DF1A79C(a1 + 8, 49, v32, v31, (uint64_t)&v210);
  sub_21DF19CD0((uint64_t)&v207, v33);
  v34 = *(_QWORD *)(a3 + 72);
  v212 = 257;
  v35 = sub_21DF1A79C(a1 + 8, 49, v34, v31, (uint64_t)&v210);
  sub_21DF19CD0((uint64_t)&v207, v35);
  v36 = llvm::ConstantInt::get();
  v37 = llvm::PointerType::get();
  v212 = 257;
  v38 = sub_21DF1A79C(a1 + 8, 48, v36, v37, (uint64_t)&v210);
  sub_21DF19CD0((uint64_t)&v207, v38);
  v39 = *(_DWORD *)(a3 + 4);
  if (v39 == 2)
  {
    v41 = sub_21DF78BE0(a1, *(uint64_t **)(a3 + 120), 1);
    v40 = sub_21DF7969C(a1, v41, 4);
  }
  else
  {
    if (v39 != 1)
      goto LABEL_46;
    v40 = sub_21DF78BE0(a1, *(uint64_t **)(a3 + 120), 1);
  }
  sub_21DF19CD0((uint64_t)&v207, v40);
LABEL_46:
  if (*(_QWORD *)(a3 + 136))
  {
    v42 = sub_21DF19D2C((_QWORD *)a1, a3);
    v43 = *(_QWORD *)(a1 + 200);
    v212 = 257;
    v44 = sub_21DF1A79C(a1 + 8, 47, v42, v43, (uint64_t)&v210);
    sub_21DF19CD0((uint64_t)&v207, v44);
  }
  if (*(_QWORD *)(a3 + 128))
  {
    v45 = sub_21DF1A044(a1, a3);
    v46 = *(_QWORD *)(a1 + 184);
    v212 = 257;
    v47 = sub_21DF1A79C(a1 + 8, 38, v45, v46, (uint64_t)&v210);
    sub_21DF19CD0((uint64_t)&v207, v47);
  }
  v48 = llvm::ConstantInt::get();
  sub_21DF19CD0((uint64_t)&v207, v48);
  v49 = llvm::ConstantFP::get();
  sub_21DF19CD0((uint64_t)&v207, v49);
  v212 = 257;
  v50 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v28 + 24), v28, (uint64_t)v207, v208, (uint64_t)&v210);
  LODWORD(v204.__r_.__value_.__l.__data_) = 0;
  v212 = 257;
  v51 = sub_21DF1ACD0(a1 + 8, (uint64_t)v50, (uint64_t)&v204, 1, (uint64_t)&v210);
  if (*(_BYTE *)(a3 + 225))
  {
    v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
    v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
    v204.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
    v205 = llvm::ConstantInt::get();
    v52 = llvm::ConstantVector::get();
    v212 = 257;
    v51 = sub_21DF19EE8(a1 + 8, v51, v51, v52, (uint64_t)&v210);
  }
  if (*(_BYTE *)(a3 + 17))
    v51 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD))a1)(a1, v51, *(unsigned int *)(a3 + 8));
  if (*(_BYTE *)(a3 + 19))
  {
    v53 = *(_QWORD *)(a1 + 176);
    v210.__r_.__value_.__r.__words[0] = *(_QWORD *)v51;
    v210.__r_.__value_.__l.__size_ = v53;
    llvm::StructType::get();
    v54 = llvm::UndefValue::get();
    LODWORD(v204.__r_.__value_.__l.__data_) = 0;
    v212 = 257;
    v55 = sub_21DF1A244(a1 + 8, v54, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
    v203 = 1;
    v212 = 257;
    v56 = sub_21DF1ACD0(a1 + 8, (uint64_t)v50, (uint64_t)&v203, 1, (uint64_t)&v210);
    v57 = *(_QWORD *)(a1 + 176);
    v206 = 257;
    v58 = sub_21DF1A79C(a1 + 8, 38, v56, v57, (uint64_t)&v204);
    v202 = 1;
    v201 = 257;
    v51 = sub_21DF1A244(a1 + 8, v55, v58, (uint64_t)&v202, 1, (uint64_t)v200);
  }
  v59 = v207;
  if (v207 != v209)
LABEL_57:
    free(v59);
  return v51;
}

uint64_t sub_21DF185F0(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = result + 1;
  return result;
}

uint64_t sub_21DF18600()
{
  return 0;
}

uint64_t sub_21DF18608()
{
  return 0;
}

void sub_21DF18610(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t sub_21DF18624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  llvm::Type ***v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *v15[2];
  _BYTE v16[16];
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(a1 + 1448))
    strlen(*(const char **)(a1 + 1448));
  v15[0] = v16;
  v15[1] = (void *)0x100000000;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v7 = v6;
  if (v15[0] != v16)
    free(v15[0]);
  v17 = 257;
  v8 = (uint64_t *)(a1 + 8);
  v9 = (llvm::Type ***)sub_21DF191A4((uint64_t)v8, **(_QWORD **)(*(_QWORD *)v7 + 16), v7, 0, 0, (uint64_t)v15);
  v17 = 257;
  v10 = sub_21DF19394(v8, **(llvm::Type ***)(*(_QWORD *)a3 + 16), a3, 0, (uint64_t)v15);
  v17 = 257;
  return sub_21DF19478(v8, 32, v9, v10, (uint64_t)v15);
}

uint64_t sub_21DF187C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t *sub_21DF187C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  llvm::Constant *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _QWORD v47[4];
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v44 = *(_OWORD *)a2;
  v45 = *(_QWORD *)(a2 + 16);
  if (v45)
    llvm::MetadataTracking::track();
  v46 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v44);
  if (v45)
    llvm::MetadataTracking::untrack();
  if ((*(_BYTE *)(a4 + 1) & 0xF) != 0)
  {
    v41 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v43 = *(_DWORD *)(a1 + 104);
    a3 = (uint64_t *)sub_21DF2152C(a1, (uint64_t)&v41, a3, a5, 0);
    if (v42)
      llvm::MetadataTracking::untrack();
    v38 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v10 = *(_DWORD *)(a1 + 104);
    v40 = v10;
    v50 = v38;
    v51 = v39;
    if (v39)
    {
      llvm::MetadataTracking::track();
      v10 = v40;
    }
    v52 = v10;
    sub_21DF18F1C(a1, &v50);
    if (v51)
      llvm::MetadataTracking::untrack();
    if ((*(_BYTE *)(a4 + 1) & 1) != 0 && (*a3 == *(_QWORD *)(a1 + 272) || *a3 == *(_QWORD *)(a1 + 264)))
    {
      v11 = (llvm::Constant *)sub_21DF79408(a1, (uint64_t)a3, 3, 1);
      LOWORD(v48) = 257;
      v12 = llvm::ConstantInt::get();
      v13 = (uint64_t *)sub_21DF79584(a1 + 8, (uint64_t)a3, v12, (uint64_t)v47);
      v61 = 0;
      v62 = &v61;
      v63 = 0x2000000000;
      v64 = *(_QWORD *)(a1 + 160);
      v47[0] = MEMORY[0x24BDAC760];
      v47[1] = 0x40000000;
      v47[2] = sub_21DF217F8;
      v47[3] = &unk_24E1E7948;
      v48 = &v61;
      v49 = a1;
      v14 = sub_21DF7A0F0(a1, v11, (uint64_t)v47);
      v15 = sub_21DF79090((_QWORD *)a1, v14, *v13);
      a3 = (uint64_t *)sub_21DF7A518(a1, v15, (uint64_t)v13);
      _Block_object_dispose(&v61, 8);
    }
    if (v39)
      llvm::MetadataTracking::untrack();
    v35 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v16 = *(_DWORD *)(a1 + 104);
    v37 = v16;
    v50 = v35;
    v51 = v36;
    if (v36)
    {
      llvm::MetadataTracking::track();
      v16 = v37;
    }
    v52 = v16;
    sub_21DF18F1C(a1, &v50);
    if (v51)
      llvm::MetadataTracking::untrack();
    v17 = (*(_DWORD *)a4 >> 9) & 7;
    if (v17)
    {
      v18 = *a3;
      v19 = sub_21DF79408(a1, (uint64_t)a3, 3, 1);
      v20 = llvm::ConstantFP::get();
      v21 = sub_21DF7A518(a1, v19, v20);
      if (v17 <= 4)
      {
        v22 = v21;
        v61 = llvm::ConstantFP::get();
        v62 = (uint64_t *)llvm::ConstantFP::get();
        v63 = llvm::ConstantFP::get();
        v64 = llvm::ConstantFP::get();
        v57 = llvm::ConstantFP::get();
        v58 = llvm::ConstantFP::get();
        v59 = llvm::ConstantFP::get();
        v60 = llvm::ConstantFP::get();
        v53 = llvm::ConstantFP::get();
        v54 = llvm::ConstantFP::get();
        v55 = llvm::ConstantFP::get();
        v56 = llvm::ConstantFP::get();
        v23 = (uint64_t *)llvm::ConstantVector::get();
        v24 = (uint64_t *)llvm::ConstantVector::get();
        v25 = (uint64_t *)llvm::ConstantVector::get();
        if (v18 == *(_QWORD *)(a1 + 272))
        {
          v23 = (uint64_t *)sub_21DF78BE0(a1, v23, 0);
          v24 = (uint64_t *)sub_21DF78BE0(a1, v24, 0);
          v25 = (uint64_t *)sub_21DF78BE0(a1, v25, 0);
        }
        v26 = sub_21DF7A26C(a1, (uint64_t)v23, v22);
        v27 = sub_21DF7A26C(a1, (uint64_t)v24, v22);
        v28 = sub_21DF7A26C(a1, (uint64_t)v25, v22);
        LOWORD(v48) = 257;
        v29 = llvm::ConstantInt::get();
        v30 = sub_21DF7980C(a1 + 8, (uint64_t)a3, v26, v29, (uint64_t)v47);
        LOWORD(v48) = 257;
        v31 = llvm::ConstantInt::get();
        v32 = sub_21DF7980C(a1 + 8, v30, v27, v31, (uint64_t)v47);
        LOWORD(v48) = 257;
        v33 = llvm::ConstantInt::get();
        a3 = (uint64_t *)sub_21DF7980C(a1 + 8, v32, v28, v33, (uint64_t)v47);
      }
    }
    if (v36)
      llvm::MetadataTracking::untrack();
  }
  return a3;
}

uint64_t sub_21DF18D84(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = operator new();
  v7 = (_QWORD *)sub_21DF78A10(v6, *a3);
  v7[43] = a1;
  *v7 = off_24E1E8EA0;
  sub_21DF78A10((uint64_t)(v7 + 44), *a3);
  *(_QWORD *)(v6 + 352) = &off_24E1E9218;
  *(_QWORD *)(v6 + 696) = v6;
  *(_QWORD *)(v6 + 672) = a3;
  *(_QWORD *)(v6 + 704) = a2;
  v8 = *(uint64_t **)(a1 + 784);
  v9 = v8[6];
  if (!v9)
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_DWORD *)(v10 + 20) = 32;
    sub_21DF21284(v8 + 6, v10);
    (*(void (**)(uint64_t *, uint64_t))(*v8 + 120))(v8, v8[6]);
    v9 = v8[6];
  }
  *(_QWORD *)(v6 + 712) = v9;
  *(_BYTE *)(v6 + 720) = 1;
  *(_QWORD *)(v6 + 320) = a3;
  *(_DWORD *)(v6 + 104) = *(_DWORD *)(a1 + 104);
  return v6;
}

uint64_t sub_21DF18E88()
{
  return 0;
}

uint64_t sub_21DF18E90()
{
  return 1;
}

uint64_t sub_21DF18E98()
{
  return 1;
}

uint64_t sub_21DF18EA0()
{
  return 0;
}

uint64_t sub_21DF18EA8()
{
  return 0;
}

BOOL sub_21DF18EB0(uint64_t a1, const void *a2, size_t a3)
{
  const void *v3;
  size_t v6;

  v3 = *(const void **)(a1 + 1744);
  if (!v3)
    return 1;
  v6 = strlen(*(const char **)(a1 + 1744));
  if (a3 < v6)
    return 0;
  return !v6 || memcmp(a2, v3, v6) == 0;
}

uint64_t sub_21DF18F1C(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
    llvm::MetadataTracking::track();
  v7 = *((_DWORD *)a2 + 6);
  result = sub_21DF18F98((uint64_t)&v5, a1 + 8);
  if (v6)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_21DF18F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)a1)
  {
    sub_21DF19018(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track();
    v4 = v6;
  }
  result = sub_21DF1908C(a2, v4);
  if (v6)
    result = llvm::MetadataTracking::untrack();
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_21DF19018(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  if (a2 + 40 != a3)
  {
    v3 = result;
    v4 = a3 - 24;
    if (!a3)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    v6 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track();
      v5 = v6;
    }
    result = sub_21DF1908C(v3, v5);
    if (v6)
      return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_21DF1908C(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *i;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(char **)result;
  v3 = *(unsigned int *)(result + 8);
  v4 = (char *)(*(_QWORD *)result + 16 * v3);
  if (a2)
  {
    if ((_DWORD)v3)
    {
      v6 = 16 * v3;
      v7 = *(char **)result;
      while (*(_DWORD *)v7)
      {
        v7 += 16;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
      *((_QWORD *)v7 + 1) = a2;
    }
    else
    {
LABEL_6:
      if (v3 >= *(_DWORD *)(result + 12))
      {
        v11 = result;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = (_QWORD *)(*(_QWORD *)v11 + 16 * *(unsigned int *)(v11 + 8));
        *v12 = 0;
        v12[1] = a2;
        ++*(_DWORD *)(v11 + 8);
      }
      else
      {
        *(_DWORD *)v4 = 0;
        *(_QWORD *)&v2[16 * v3 + 8] = a2;
        *(_DWORD *)(result + 8) = v3 + 1;
      }
    }
  }
  else
  {
    if ((_DWORD)v3)
    {
      v8 = 16 * v3;
      v9 = *(char **)result;
      while (*(_DWORD *)v9)
      {
        v9 += 16;
        v8 -= 16;
        if (!v8)
        {
          v9 = v4;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v9 = *(char **)result;
    }
    if (v9 != v4)
    {
      for (i = v9 + 16; i != v4; i += 16)
      {
        if (*(_DWORD *)i)
        {
          *(_DWORD *)v9 = *(_DWORD *)i;
          *((_QWORD *)v9 + 1) = *((_QWORD *)i + 1);
          v9 += 16;
        }
      }
    }
LABEL_21:
    *(_DWORD *)(result + 8) = (unint64_t)(v9 - v2) >> 4;
  }
  return result;
}

llvm::Value *sub_21DF191A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = 0;
  if (v9)
  {
    v11 = 48 * v9;
    v12 = (_QWORD *)(v8 + 32);
    do
    {
      v10 += (*v12 - *(v12 - 1)) >> 3;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
  if (v9)
  {
    v14 = 0;
    v15 = 48 * v9;
    v16 = (_QWORD *)(v8 + 32);
    do
    {
      v14 += (*v16 - *(v16 - 1)) >> 3;
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
    v17 = 48 * v9;
    v18 = (_QWORD *)(v8 + 32);
    do
    {
      LODWORD(v15) = v15 + ((*v18 - *(v18 - 1)) >> 3);
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  llvm::Instruction::Instruction();
  *((_QWORD *)v13 + 8) = 0;
  llvm::CallInst::init();
  if (*(_BYTE *)(a1 + 100))
  {
    llvm::Value::getContext(v13);
    *((_QWORD *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (sub_21DF195AC((uint64_t)v13))
    sub_21DF19658(a1, (uint64_t)v13);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v19 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)a1;
    v21 = v20 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata();
      v20 += 16;
    }
    while (v20 != v21);
  }
  return v13;
}

uint64_t sub_21DF19394(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
  v11 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v11)
  {
    v12 = *a1;
    v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t sub_21DF19478(uint64_t *a1, uint64_t a2, llvm::Type ***a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  llvm::Type **v9;
  int v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 40))(a1[9]);
  if (!v8)
  {
    v8 = llvm::User::operator new((llvm::User *)0x40);
    v9 = *a3;
    v10 = *((_DWORD *)*a3 + 2);
    llvm::Type::getInt1Ty(**a3, v11);
    if (v9 && (v10 & 0xFE) == 0x12)
      llvm::VectorType::get();
    llvm::CmpInst::CmpInst();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = v13 + 16 * v12;
      do
      {
        llvm::Instruction::setMetadata();
        v13 += 16;
      }
      while (v13 != v14);
    }
  }
  return v8;
}

BOOL sub_21DF195AC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (v2 = v1 - 28, v1 < 0x1C))
  {
    v3 = 0;
    if (!a1 || v1 != 5)
      return v3;
    v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39)
    return 0;
  if (((1 << v2) & 0x40000001255000) != 0)
    return 1;
  if (((1 << v2) & 0x380000000000000) == 0)
    return 0;
  do
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
    a1 = *(_QWORD *)a1 + 24;
    if (v4)
      v6 = v5 == 17;
    else
      v6 = 0;
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  return v5 < 7;
}

uint64_t sub_21DF19658(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 88))
    llvm::Instruction::setMetadata();
  llvm::Instruction::setFastMathFlags();
  return a2;
}

uint64_t sub_21DF1969C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type ***v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Select;
  char v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type ***v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Type ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  _BYTE v53[32];
  __int16 v54;
  _QWORD v55[4];
  __int16 v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[16];
  __int16 v60;
  void *v61[2];
  _QWORD v62[5];

  v62[3] = *MEMORY[0x24BDAC8D0];
  v61[0] = v62;
  v61[1] = (void *)0x300000000;
  v4 = *(_QWORD *)(a2 + 64);
  v60 = 257;
  v5 = (uint64_t *)(a1 + 8);
  v6 = sub_21DF19394((uint64_t *)(a1 + 8), **(llvm::Type ***)(*(_QWORD *)v4 + 16), v4, 0, (uint64_t)&v57);
  sub_21DF19CD0((uint64_t)v61, *(_QWORD *)(a1 + 160));
  v7 = *(_QWORD *)(a1 + 184);
  v60 = 257;
  v8 = sub_21DF1A79C((uint64_t)v5, 38, v6, v7, (uint64_t)&v57);
  sub_21DF19CD0((uint64_t)v61, *(_QWORD *)(a1 + 184));
  v9 = *(const char **)(a1 + 1144);
  llvm::FunctionType::get();
  if (v9)
    strlen(v9);
  llvm::Module::getOrInsertFunction();
  v11 = v10;
  v12 = sub_21DF78BE0(a1, *(uint64_t **)(a2 + 208), (*(_DWORD *)(a2 + 8) - 3) < 2);
  v14 = (*(_DWORD *)(a1 + 1696) & 0xFFFFFFFE) == 2 && *(_DWORD *)(a2 + 8) < 2u;
  v48 = v12;
  v47 = a2;
  if (v14)
  {
    v60 = 257;
    v15 = llvm::ConstantInt::get();
    v16 = sub_21DF1AE6C((uint64_t)v5, v6, v15, (uint64_t)&v57);
    v17 = llvm::ConstantInt::get();
    v56 = 257;
    v18 = sub_21DF1A410((uint64_t)v5, v16, v17, (uint64_t)v55);
    v19 = llvm::ConstantInt::get();
    v54 = 257;
    v20 = (llvm::Type ***)v18;
    v21 = v48;
    sub_21DF19478(v5, 33, v20, v19, (uint64_t)v53);
  }
  else
  {
    v21 = v12;
  }
  v22 = llvm::UndefValue::get();
  v23 = 0;
  v49 = !v14;
  do
  {
    v57 = v59;
    v58 = 0x300000000;
    v56 = 257;
    v24 = llvm::ConstantInt::get();
    Select = sub_21DF79584((uint64_t)v5, v21, v24, (uint64_t)v55);
    v26 = v49;
    if (v23 == 3)
      v26 = 1;
    if ((v26 & 1) == 0)
    {
      v50 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v5);
      v52 = *(_DWORD *)(a1 + 104);
      (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 136))(a1, &v50, Select, 0, *(_QWORD *)(a1 + 160));
      if (v51)
        llvm::MetadataTracking::untrack();
      v56 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      v21 = v48;
    }
    sub_21DF19CD0((uint64_t)&v57, Select);
    sub_21DF19CD0((uint64_t)&v57, v8);
    v56 = 257;
    v27 = sub_21DF191A4((uint64_t)v5, *(_QWORD *)(v11 + 24), v11, (uint64_t)v57, v58, (uint64_t)v55);
    v28 = *(_QWORD *)(a1 + 160);
    v56 = 257;
    v29 = sub_21DF1A79C((uint64_t)v5, 49, (uint64_t)v27, v28, (uint64_t)v55);
    v56 = 257;
    v30 = llvm::ConstantInt::get();
    v22 = sub_21DF7980C((uint64_t)v5, v22, v29, v30, (uint64_t)v55);
    if (v57 != v59)
      free(v57);
    ++v23;
  }
  while (v23 != 4);
  v31 = **(_QWORD **)(v47 + 208);
  if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12)
    v31 = **(_QWORD **)(v31 + 16);
  if (v31 == *(_QWORD *)(a1 + 160) || v31 == *(_QWORD *)(a1 + 192))
  {
    v60 = 257;
    v32 = llvm::ConstantInt::get();
    v33 = sub_21DF1AE6C((uint64_t)v5, v6, v32, (uint64_t)&v57);
    v34 = llvm::ConstantInt::get();
    v56 = 257;
    v35 = (llvm::Type ***)sub_21DF1A410((uint64_t)v5, v33, v34, (uint64_t)v55);
    v36 = llvm::ConstantInt::get();
    v54 = 257;
    sub_21DF19478(v5, 33, v35, v36, (uint64_t)v53);
    v37 = *(_QWORD *)(v47 + 208);
    v38 = *(_QWORD *)(a1 + 272);
    v60 = 257;
    sub_21DF1A79C((uint64_t)v5, 49, v37, v38, (uint64_t)&v57);
    v56 = 257;
    v22 = llvm::IRBuilderBase::CreateSelect();
  }
  v60 = 257;
  v39 = llvm::ConstantInt::get();
  v40 = sub_21DF1AE6C((uint64_t)v5, v6, v39, (uint64_t)&v57);
  v41 = llvm::ConstantInt::get();
  v56 = 257;
  v42 = (llvm::Type ***)sub_21DF1A410((uint64_t)v5, v40, v41, (uint64_t)v55);
  v43 = llvm::ConstantInt::get();
  v54 = 257;
  sub_21DF19478(v5, 33, v42, v43, (uint64_t)v53);
  v55[0] = llvm::ConstantInt::get();
  v55[1] = llvm::ConstantInt::get();
  v55[2] = llvm::ConstantInt::get();
  v55[3] = llvm::ConstantInt::get();
  v44 = llvm::ConstantVector::get();
  v60 = 257;
  sub_21DF19EE8((uint64_t)v5, v22, v22, v44, (uint64_t)&v57);
  v60 = 257;
  v45 = llvm::IRBuilderBase::CreateSelect();
  if (v61[0] != v62)
    free(v61[0]);
  return v45;
}

uint64_t sub_21DF19CD0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_21DF19D2C(_QWORD *a1, uint64_t a2)
{
  llvm::GetElementPtrInst *v4;
  llvm::GetElementPtrInst *v5;
  llvm::GetElementPtrInst *v6;
  llvm::Type ***v7;
  uint64_t v8;
  uint64_t Select;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _BYTE v18[32];
  __int16 v19;
  _BYTE v20[32];
  __int16 v21;
  _BYTE v22[32];
  __int16 v23;

  v4 = sub_21DF1A668((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  v5 = sub_21DF1A668((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  v6 = sub_21DF1A668((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  v7 = (llvm::Type ***)sub_21DF78D78(a1, *(uint64_t **)(a2 + 136), **(_QWORD **)(a2 + 136), 0, 0);
  v23 = 257;
  v8 = sub_21DF19394(a1 + 1, **(llvm::Type ***)(*(_QWORD *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v22);
  v23 = 257;
  sub_21DF19478(a1 + 1, 37, v7, v8, (uint64_t)v22);
  v23 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v23 = 257;
  v10 = sub_21DF19394(a1 + 1, **(llvm::Type ***)(*(_QWORD *)v5 + 16), (uint64_t)v5, 0, (uint64_t)v22);
  v11 = a1[25];
  v23 = 257;
  v12 = sub_21DF1A79C((uint64_t)(a1 + 1), 39, v10, v11, (uint64_t)v22);
  v13 = a1[25];
  v21 = 257;
  v14 = sub_21DF1A79C((uint64_t)(a1 + 1), 39, Select, v13, (uint64_t)v20);
  v19 = 257;
  v15 = (uint64_t *)sub_21DF1A864((uint64_t)(a1 + 1), v12, v14, (uint64_t)v18);
  v23 = 257;
  v16 = (uint64_t *)sub_21DF19394(a1 + 1, **(llvm::Type ***)(*(_QWORD *)v4 + 16), (uint64_t)v4, 0, (uint64_t)v22);
  v23 = 257;
  return sub_21DF1A924((uint64_t)a1, v16, v15, (uint64_t)v22);
}

uint64_t sub_21DF19EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  llvm::ShuffleVectorInst::getShuffleMask();
  return sub_21DF1A530(a1, a2, a3, (uint64_t)v10, 0, a5);
}

uint64_t sub_21DF19FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF1A044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;

  v4 = llvm::ConstantInt::get();
  v5 = *(unsigned int *)(a2 + 4);
  if (v5 <= 3)
  {
    v6 = 0;
    v7 = dword_21DFA6280[v5];
    do
    {
      v8 = *(_QWORD *)(a2 + 128);
      v17 = 257;
      v9 = llvm::ConstantInt::get();
      v10 = sub_21DF79584(a1 + 8, v8, v9, (uint64_t)v16);
      v17 = 257;
      v11 = llvm::ConstantInt::get();
      v12 = sub_21DF1A184(a1 + 8, v10, v11, (uint64_t)v16);
      v17 = 257;
      v13 = llvm::ConstantInt::get();
      v14 = sub_21DF1A410(a1 + 8, v12, v13, (uint64_t)v16);
      v17 = 257;
      v4 = sub_21DF1A4A0(a1 + 8, v4, v14, (uint64_t)v16);
      ++v6;
    }
    while (v7 != v6);
  }
  return v4;
}

uint64_t sub_21DF1A184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 152))(*(_QWORD *)(a1 + 72));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF1A244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 352))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      sub_21DF1A3A4((uint64_t *)a1, v8, a6);
  }
  else
  {
    v8 = llvm::User::operator new((llvm::User *)0x60);
    v10 = llvm::Instruction::Instruction();
    *(_QWORD *)(v10 + 64) = v10 + 80;
    *(_QWORD *)(v10 + 72) = 0x400000000;
    llvm::InsertValueInst::init();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)a1;
      v13 = v12 + 16 * v11;
      do
      {
        llvm::Instruction::setMetadata();
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
  return v8;
}

uint64_t sub_21DF1A3A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t sub_21DF1A410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF1A4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF1A530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  __int16 v19;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 336))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
    if (v12)
      v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
    else
      v13 = 0;
    if (v13)
      sub_21DF1A3A4((uint64_t *)a1, v12, a6);
  }
  else
  {
    v12 = llvm::User::operator new((llvm::User *)0x68);
    v19 = 257;
    MEMORY[0x2207A6EA4](v12, a2, a3, a4, a5, v18, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v12, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v12;
}

llvm::GetElementPtrInst *sub_21DF1A668(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::LLVMContext *v6;
  llvm::GetElementPtrInst *v7;
  _BYTE v9[32];
  __int16 v10;
  __int16 v11;
  uint64_t *v12[3];

  v12[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  v5 = **(_QWORD **)(v4 + 16);
  v10 = 257;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), a2);
  v12[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), v6);
  v12[1] = (uint64_t *)llvm::ConstantInt::get();
  v7 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::LLVMContext *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), v5, a2, v12, 2, 1);
  if (!v7)
  {
    v11 = 257;
    v7 = (llvm::GetElementPtrInst *)sub_21DF1AA2C(v5, (uint64_t *)a2, v12, 2);
    llvm::GetElementPtrInst::setIsInBounds(v7);
    sub_21DF1A3A4((uint64_t *)(a1 + 8), (uint64_t)v7, (uint64_t)v9);
  }
  return v7;
}

uint64_t sub_21DF1A79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v8;

  v5 = a3;
  if (*(_QWORD *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      v5 = llvm::CastInst::Create();
      sub_21DF1A3A4((uint64_t *)a1, v5, a5);
    }
    else
    {
      v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 224))(*(_QWORD *)(a1 + 72), a2, a3, a4);
      if (v5)
        v8 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        sub_21DF1A3A4((uint64_t *)a1, v5, a5);
    }
  }
  return v5;
}

uint64_t sub_21DF1A864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 88))(*(_QWORD *)(a1 + 72));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF1A924(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  return sub_21DF1A95C(a1 + 8, **(_QWORD **)(v4 + 16), a2, a3, a4);
}

uint64_t sub_21DF1A95C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  v12 = a4;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, &v12, 1, 0);
  if (!v9)
  {
    v13 = 257;
    v9 = sub_21DF1AA2C(a2, a3, &v11, 1);
    sub_21DF1A3A4((uint64_t *)a1, v9, a5);
  }
  return v9;
}

uint64_t sub_21DF1AA2C(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;

  v8 = llvm::User::operator new((llvm::User *)0x50);
  v9 = *a2;
  v10 = *(_DWORD *)(*a2 + 8);
  if ((v10 & 0xFE) == 0x12)
  {
    v9 = **(_QWORD **)(v9 + 16);
    v10 = *(_DWORD *)(v9 + 8);
  }
  v11 = (llvm::LLVMContext *)(v10 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(_QWORD *)(v9 + 24))
    llvm::PointerType::get();
  else
    llvm::PointerType::get(*(llvm::PointerType **)v9, v11);
  if (*a2 && (*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
LABEL_16:
    llvm::VectorType::get();
    goto LABEL_17;
  }
  if (a4)
  {
    v12 = 8 * a4;
    v13 = a3;
    do
    {
      v14 = **v13;
      if (v14 && (*(_DWORD *)(v14 + 8) & 0xFE) == 18)
        goto LABEL_16;
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
LABEL_17:
  llvm::Instruction::Instruction();
  *(_QWORD *)(v8 + 64) = a1;
  *(_QWORD *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

uint64_t sub_21DF1ABB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t IntegerCast;
  BOOL v8;

  IntegerCast = a2;
  if (*(_QWORD *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
    {
      IntegerCast = llvm::CastInst::CreateIntegerCast();
      sub_21DF1A3A4((uint64_t *)a1, IntegerCast, a5);
    }
    else
    {
      IntegerCast = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 248))(*(_QWORD *)(a1 + 72), a2);
      if (IntegerCast)
        v8 = *(unsigned __int8 *)(IntegerCast + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        sub_21DF1A3A4((uint64_t *)a1, IntegerCast, a5);
    }
  }
  return IntegerCast;
}

uint64_t sub_21DF1AC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 41, a2, a3, a4);
}

uint64_t sub_21DF1ACD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 344))(*(_QWORD *)(a1 + 72), a2, a3, a4);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      sub_21DF1A3A4((uint64_t *)a1, v8, a5);
  }
  else
  {
    v8 = llvm::User::operator new((llvm::User *)0x60);
    llvm::ExtractValueInst::getIndexedType();
    llvm::Instruction::Instruction();
    if (*(_QWORD *)(v8 - 32))
    {
      **(_QWORD **)(v8 - 16) = *(_QWORD *)(v8 - 24);
      v10 = *(_QWORD *)(v8 - 24);
      if (v10)
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 - 16);
    }
    *(_QWORD *)(v8 - 32) = a2;
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(v8 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v8 - 24;
    *(_QWORD *)(v8 - 16) = v12;
    *v12 = v8 - 32;
    *(_QWORD *)(v8 + 64) = v8 + 80;
    *(_QWORD *)(v8 + 72) = 0x400000000;
    llvm::ExtractValueInst::init();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v8;
}

uint64_t sub_21DF1AE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 160))(*(_QWORD *)(a1 + 72));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

_QWORD *sub_21DF1AF28(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_21DF1AFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD __src[3];
  void *v11[2];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  __src[0] = a5;
  __src[1] = a6;
  __src[2] = a7;
  v11[0] = v12;
  v11[1] = (void *)0x300000000;
  sub_21DF1B18C((uint64_t)v11, __src, v11);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v8 = v7;
  if (v11[0] != v12)
    free(v11[0]);
  return v8;
}

uint64_t sub_21DF1B0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD __src[2];
  void *v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  __src[0] = a5;
  __src[1] = a6;
  v10[0] = v11;
  v10[1] = (void *)0x200000000;
  sub_21DF1B18C((uint64_t)v10, __src, v10);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v7 = v6;
  if (v10[0] != v11)
    free(v10[0]);
  return v7;
}

uint64_t sub_21DF1B18C(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_21DF1B20C()
{
  return 1;
}

_QWORD *sub_21DF1B214(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v7 + 396), a2, *a3);
  sub_21DF574A4((uint64_t)v7, (uint64_t *)&off_24E1EBFA8, (uint64_t)a3, a4);
  *v7 = &off_24E1EBD70;
  v7[396] = &unk_24E1EBF40;
  return v7 + 396;
}

uint64_t sub_21DF1B2A8()
{
  return 0;
}

uint64_t sub_21DF1B2B0()
{
  return 0;
}

void sub_21DF1B2B8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

unint64_t sub_21DF1B2C4(llvm::DataLayout *a1, llvm::Type *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t ABITypeAlignment;

  sub_21DF1B320((uint64_t)a1, (uint64_t)a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(a1, a2);
  return (ABITypeAlignment + v5 - 1) / ABITypeAlignment * ABITypeAlignment;
}

void sub_21DF1B320(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_21DF1B360()
{
  return 64;
}

void sub_21DF1B49C()
{
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF1B4B0()
{
  return 31;
}

uint64_t sub_21DF1B4B8()
{
  return 31;
}

uint64_t sub_21DF1B4C0()
{
  return 49;
}

uint64_t sub_21DF1B4C8()
{
  return 31;
}

uint64_t sub_21DF1B4D0()
{
  return 32;
}

uint64_t sub_21DF1B4D8()
{
  return 33;
}

uint64_t sub_21DF1B4E0()
{
  return 34;
}

uint64_t sub_21DF1B4E8()
{
  return 35;
}

uint64_t sub_21DF1B4F0()
{
  return 36;
}

uint64_t sub_21DF1B4F8()
{
  return 37;
}

uint64_t sub_21DF1B500()
{
  return 38;
}

uint64_t sub_21DF1B508()
{
  return 35;
}

uint64_t sub_21DF1B510()
{
  return 36;
}

uint64_t sub_21DF1B518()
{
  return 37;
}

uint64_t sub_21DF1B520()
{
  return 39;
}

uint64_t sub_21DF1B528()
{
  return 40;
}

uint64_t sub_21DF1B530()
{
  return 41;
}

uint64_t sub_21DF1B538()
{
  return 42;
}

uint64_t sub_21DF1B540()
{
  return 43;
}

uint64_t sub_21DF1B548()
{
  return 44;
}

uint64_t sub_21DF1B550()
{
  return 45;
}

uint64_t sub_21DF1B558()
{
  return 46;
}

uint64_t sub_21DF1B560()
{
  return 47;
}

uint64_t sub_21DF1B568()
{
  return 48;
}

uint64_t sub_21DF1B570()
{
  return 31;
}

uint64_t sub_21DF1B578()
{
  return 31;
}

uint64_t sub_21DF1B580()
{
  return 47;
}

uint64_t sub_21DF1B588()
{
  return 31;
}

uint64_t sub_21DF1B590()
{
  return 32;
}

uint64_t sub_21DF1B598()
{
  return 33;
}

uint64_t sub_21DF1B5A0()
{
  return 34;
}

uint64_t sub_21DF1B5A8()
{
  return 35;
}

uint64_t sub_21DF1B5B0()
{
  return 36;
}

uint64_t sub_21DF1B5B8()
{
  return 37;
}

uint64_t sub_21DF1B5C0()
{
  return 38;
}

uint64_t sub_21DF1B5C8()
{
  return 39;
}

uint64_t sub_21DF1B5D0()
{
  return 40;
}

uint64_t sub_21DF1B5D8()
{
  return 41;
}

uint64_t sub_21DF1B5E0()
{
  return 42;
}

uint64_t sub_21DF1B5E8()
{
  return 43;
}

uint64_t sub_21DF1B5F0()
{
  return 44;
}

uint64_t sub_21DF1B5F8()
{
  return 45;
}

uint64_t sub_21DF1B600()
{
  return 46;
}

char *sub_21DF1B610(uint64_t a1, uint64_t a2, llvm::Type *a3, unsigned int a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;

  v9 = operator new();
  v10 = (_QWORD *)sub_21DF46650(v9, a2, a3, a4, a5);
  return (char *)v10 + *(_QWORD *)(*v10 - 24);
}

uint64_t sub_21DF1B678()
{
  return 0;
}

uint64_t sub_21DF1B680(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v7 = operator new();
  sub_21DF2E500(v7 + 3168, a2, *a3);
  sub_21DF572D8(v7, (uint64_t *)off_24E1EBCC8, (uint64_t)a3, a4);
  *(_QWORD *)v7 = &off_24E1EBA90;
  *(_QWORD *)(v7 + 3168) = &unk_24E1EBC60;
  *(_QWORD *)(v7 + 2760) = 4;
  *(_QWORD *)(v7 + 2776) = 0;
  *(_QWORD *)(v7 + 2768) = 0;
  *(_QWORD *)(v7 + 2784) = v7 + 2800;
  *(_QWORD *)(v7 + 2792) = 0x200000000;
  v8 = 2824;
  do
  {
    v9 = (_QWORD *)(v7 + v8);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 4;
    v10 = v7 + v8 + 24;
    v8 += 24;
  }
  while (v10 != v7 + 2896);
  *(_QWORD *)(v7 + 2896) = 4;
  *(_QWORD *)(v7 + 2912) = 0;
  *(_QWORD *)(v7 + 2904) = 0;
  *(_QWORD *)(v7 + 2920) = 4;
  *(_QWORD *)(v7 + 2936) = 0;
  *(_QWORD *)(v7 + 2928) = 0;
  *(_QWORD *)(v7 + 2944) = 4;
  *(_QWORD *)(v7 + 2960) = 0;
  *(_QWORD *)(v7 + 2952) = 0;
  *(_QWORD *)(v7 + 2968) = 4;
  *(_QWORD *)(v7 + 2984) = 0;
  *(_QWORD *)(v7 + 2976) = 0;
  *(_QWORD *)(v7 + 2992) = 4;
  *(_QWORD *)(v7 + 3008) = 0;
  v11 = 3016;
  *(_QWORD *)(v7 + 3000) = 0;
  do
  {
    v12 = (_QWORD *)(v7 + v11);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = 4;
    v13 = v7 + v11 + 24;
    v11 += 24;
  }
  while (v13 != v7 + 3088);
  *(_QWORD *)(v7 + 3088) = 4;
  *(_QWORD *)(v7 + 3104) = 0;
  *(_QWORD *)(v7 + 3096) = 0;
  *(_QWORD *)(v7 + 3112) = 4;
  *(_QWORD *)(v7 + 3128) = 0;
  *(_QWORD *)(v7 + 3120) = 0;
  *(_QWORD *)(v7 + 3136) = 4;
  *(_QWORD *)(v7 + 3152) = 0;
  *(_QWORD *)(v7 + 3144) = 0;
  *(_BYTE *)(v7 + 3160) = 0;
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

uint64_t sub_21DF1B7E0(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = operator new();
  sub_21DF2E500(v9 + 4408, a2, *a3);
  v10 = sub_21DF83580(v9, (uint64_t *)off_24E1E83D0, (llvm::Module *)a3, a4, a5, 0);
  *(_QWORD *)v9 = &off_24E1E8140;
  *(_QWORD *)(v9 + 4408) = &unk_24E1E8368;
  *(_QWORD *)(v9 + 2432) = &unk_24E1E82F0;
  *(_QWORD *)(v9 + 3872) = v9 + 3888;
  *(_QWORD *)(v9 + 3880) = 0x800000000;
  *(_DWORD *)(v9 + 4400) = 0;
  sub_21DF9E5E4(v10, *(_DWORD *)(a4[1] + 60) & 1, (*(_DWORD *)(a4[1] + 60) >> 1) & 1);
  v11 = a4[1];
  *(_BYTE *)(v9 + 14) = (*(_BYTE *)(v11 + 60) & 0x40) != 0;
  *(_DWORD *)(v9 + 3864) = *(_DWORD *)(v11 + 56);
  *(_QWORD *)(v9 + 2272) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v9 + 15) = (*(_BYTE *)(v11 + 60) & 0x20) != 0;
  return v9 + *(_QWORD *)(*(_QWORD *)v9 - 24);
}

char *sub_21DF1B8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v5;
  unsigned __int8 v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *__p[2];
  char v12;

  sub_21DF1AF28(__p, "gpu_gather_compute");
  v5 = (llvm::Type **)sub_21DF2CCE8(a3, (const UInt8 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v6 = atomic_load((unsigned __int8 *)&qword_2553B3B70);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3B70))
  {
    qword_2553B3B60 = 0;
    *(_QWORD *)algn_2553B3B68 = 0;
    __cxa_guard_release(&qword_2553B3B70);
  }
  v7 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v7 + 400), a2, *v5);
  sub_21DF574A4((uint64_t)v7, (uint64_t *)&off_24E1EC4E0, (uint64_t)v5, (uint64_t)&qword_2553B3B60);
  *v7 = &off_24E1EC2A0;
  v7[400] = &unk_24E1EC470;
  *((_OWORD *)v7 + 198) = 0u;
  v7[398] = 0x2000000000;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[443] + 792) + 296))(*(_QWORD *)(v7[443] + 792));
  v9 = *sub_21DF575AC((llvm::StringMapImpl *)(v7 + 396), "gpuGatherOffsets", 0x10uLL);
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 20) = 0;
  return (char *)v7 + *(_QWORD *)(*v7 - 24);
}

char *sub_21DF1BA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v5;
  unsigned __int8 v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *__p[2];
  char v12;

  sub_21DF1AF28(__p, "pds_patchup_compute");
  v5 = (llvm::Type **)sub_21DF2CCE8(a3, (const UInt8 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v6 = atomic_load((unsigned __int8 *)&qword_2553B3B88);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3B88))
  {
    qword_2553B3B78 = 0;
    unk_2553B3B80 = 0;
    __cxa_guard_release(&qword_2553B3B88);
  }
  v7 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v7 + 400), a2, *v5);
  sub_21DF574A4((uint64_t)v7, (uint64_t *)&off_24E1EC788, (uint64_t)v5, (uint64_t)&qword_2553B3B78);
  *v7 = &off_24E1EC548;
  v7[400] = &unk_24E1EC718;
  *((_OWORD *)v7 + 198) = 0u;
  v7[398] = 0x2000000000;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[443] + 792) + 296))(*(_QWORD *)(v7[443] + 792));
  v9 = *sub_21DF575AC((llvm::StringMapImpl *)(v7 + 396), "pdsPatchUpOffsets", 0x11uLL);
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 20) = 0;
  return (char *)v7 + *(_QWORD *)(*v7 - 24);
}

_QWORD *sub_21DF1BB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v5;
  unsigned __int8 v6;
  _QWORD *v7;
  void *__p[2];
  char v10;

  sub_21DF1AF28(__p, (char *)&unk_21DFAD77A);
  v5 = (llvm::Type **)sub_21DF2CCE8(a3, (const UInt8 *)__p);
  v6 = atomic_load((unsigned __int8 *)&qword_2553B3BA0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3BA0))
  {
    qword_2553B3B90 = 0;
    *(_QWORD *)algn_2553B3B98 = 0;
    __cxa_guard_release(&qword_2553B3BA0);
  }
  v7 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v7 + 396), a2, *v5);
  sub_21DF574A4((uint64_t)v7, (uint64_t *)&off_24E1ECA30, (uint64_t)v5, (uint64_t)&qword_2553B3B90);
  *v7 = &off_24E1EC7F0;
  v7[396] = &unk_24E1EC9C0;
  if (v10 < 0)
    operator delete(__p[0]);
  return v7 + 396;
}

_QWORD *sub_21DF1BC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v5;
  unsigned __int8 v6;
  _QWORD *v7;
  void *__p[2];
  char v10;

  sub_21DF1AF28(__p, (char *)&unk_21DFAD77A);
  v5 = (llvm::Type **)sub_21DF2CCE8(a3, (const UInt8 *)__p);
  v6 = atomic_load((unsigned __int8 *)&qword_2553B3BB8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3BB8))
  {
    qword_2553B3BA8 = 0;
    unk_2553B3BB0 = 0;
    __cxa_guard_release(&qword_2553B3BB8);
  }
  v7 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v7 + 396), a2, *v5);
  sub_21DF574A4((uint64_t)v7, (uint64_t *)&off_24E1ECCD8, (uint64_t)v5, (uint64_t)&qword_2553B3BA8);
  *v7 = &off_24E1ECA98;
  v7[396] = &unk_24E1ECC68;
  if (v10 < 0)
    operator delete(__p[0]);
  return v7 + 396;
}

uint64_t *sub_21DF1BD98(uint64_t a1, llvm::StringMapImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *result;
  uint64_t v148;

  v4 = *sub_21DF3D904(a2, "acos", 4uLL);
  *(_OWORD *)(v4 + 8) = xmmword_21DFA6050;
  *(_DWORD *)(v4 + 24) = 3;
  *(_WORD *)(v4 + 28) = 257;
  v5 = *sub_21DF3D904(a2, "asin", 4uLL);
  *(_OWORD *)(v5 + 8) = xmmword_21DFA6060;
  *(_DWORD *)(v5 + 24) = 3;
  *(_WORD *)(v5 + 28) = 257;
  v6 = *sub_21DF3D904(a2, "atan", 4uLL);
  *(_OWORD *)(v6 + 8) = xmmword_21DFA6070;
  *(_DWORD *)(v6 + 24) = 3;
  *(_WORD *)(v6 + 28) = 257;
  v7 = *sub_21DF3D904(a2, "atan2", 5uLL);
  *(_QWORD *)(v7 + 8) = sub_21DF392E0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = 5;
  *(_WORD *)(v7 + 28) = 257;
  v8 = *sub_21DF3D904(a2, "acosh", 5uLL);
  *(_QWORD *)(v8 + 8) = sub_21DF39A8C;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 3;
  *(_WORD *)(v8 + 28) = 257;
  v9 = *sub_21DF3D904(a2, "asinh", 5uLL);
  *(_QWORD *)(v9 + 8) = sub_21DF39C00;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 3;
  *(_WORD *)(v9 + 28) = 257;
  v10 = *sub_21DF3D904(a2, "atanh", 5uLL);
  *(_QWORD *)(v10 + 8) = sub_21DF39CAC;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 3;
  *(_WORD *)(v10 + 28) = 257;
  v11 = *sub_21DF3D904(a2, "pow", 3uLL);
  *(_OWORD *)(v11 + 8) = xmmword_21DFA6080;
  *(_DWORD *)(v11 + 24) = 5;
  *(_WORD *)(v11 + 28) = 257;
  v12 = *sub_21DF3D904(a2, "powr", 4uLL);
  *(_QWORD *)(v12 + 8) = sub_21DF38924;
  *(_QWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = 5;
  *(_WORD *)(v12 + 28) = 257;
  v13 = *sub_21DF3D904(a2, "cosh", 4uLL);
  *(_QWORD *)(v13 + 8) = sub_21DF39D7C;
  *(_QWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 3;
  *(_WORD *)(v13 + 28) = 257;
  v14 = *sub_21DF3D904(a2, "sinh", 4uLL);
  *(_QWORD *)(v14 + 8) = sub_21DF3A6D0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 24) = 3;
  *(_WORD *)(v14 + 28) = 257;
  v15 = *sub_21DF3D904(a2, "tanh", 4uLL);
  *(_QWORD *)(v15 + 8) = sub_21DF3A778;
  *(_QWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 3;
  *(_WORD *)(v15 + 28) = 257;
  v16 = *sub_21DF3D904(a2, "exp10", 5uLL);
  *(_QWORD *)(v16 + 8) = sub_21DF3A2A4;
  *(_QWORD *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 24) = 3;
  *(_WORD *)(v16 + 28) = 257;
  v17 = *sub_21DF3D904(a2, "log10", 5uLL);
  *(_QWORD *)(v17 + 8) = sub_21DF3A3CC;
  *(_QWORD *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = 3;
  *(_WORD *)(v17 + 28) = 257;
  v18 = *(_BYTE *)(a1 + 40);
  v19 = *sub_21DF3D904(a2, "cos", 3uLL);
  *(_QWORD *)(v19 + 8) = sub_21DF3D9F8;
  *(_QWORD *)(v19 + 16) = 0;
  *(_DWORD *)(v19 + 24) = 3;
  *(_BYTE *)(v19 + 28) = v18;
  *(_BYTE *)(v19 + 29) = 1;
  v20 = *(_BYTE *)(a1 + 40);
  v21 = *sub_21DF3D904(a2, "sin", 3uLL);
  *(_QWORD *)(v21 + 8) = sub_21DF3DA00;
  *(_QWORD *)(v21 + 16) = 0;
  *(_DWORD *)(v21 + 24) = 3;
  *(_BYTE *)(v21 + 28) = v20;
  *(_BYTE *)(v21 + 29) = 1;
  v22 = *(_BYTE *)(a1 + 40);
  v23 = *sub_21DF3D904(a2, "tan", 3uLL);
  *(_QWORD *)(v23 + 8) = sub_21DF397E4;
  *(_QWORD *)(v23 + 16) = 0;
  *(_DWORD *)(v23 + 24) = 3;
  *(_BYTE *)(v23 + 28) = v22;
  *(_BYTE *)(v23 + 29) = 1;
  v24 = *(_BYTE *)(a1 + 40);
  v25 = *sub_21DF3D904(a2, "sincos", 6uLL);
  *(_QWORD *)(v25 + 8) = sub_21DF39850;
  *(_QWORD *)(v25 + 16) = 0;
  *(_DWORD *)(v25 + 24) = 5;
  *(_BYTE *)(v25 + 28) = v24;
  *(_BYTE *)(v25 + 29) = 0;
  v26 = *sub_21DF3D904(a2, "rint", 4uLL);
  *(_OWORD *)(v26 + 8) = xmmword_21DFA6090;
  *(_DWORD *)(v26 + 24) = 3;
  *(_WORD *)(v26 + 28) = 257;
  v27 = *sub_21DF3D904(a2, "round", 5uLL);
  *(_QWORD *)(v27 + 8) = sub_21DF3A504;
  *(_QWORD *)(v27 + 16) = 0;
  *(_DWORD *)(v27 + 24) = 3;
  *(_WORD *)(v27 + 28) = 257;
  v28 = *sub_21DF3D904(a2, "fmod", 4uLL);
  *(_QWORD *)(v28 + 8) = sub_21DF39EEC;
  *(_QWORD *)(v28 + 16) = 0;
  *(_DWORD *)(v28 + 24) = 5;
  *(_WORD *)(v28 + 28) = 1;
  v29 = *sub_21DF3D904(a2, "mod", 3uLL);
  *(_QWORD *)(v29 + 8) = sub_21DF3A014;
  *(_QWORD *)(v29 + 16) = 0;
  *(_DWORD *)(v29 + 24) = 5;
  *(_WORD *)(v29 + 28) = 1;
  v30 = *sub_21DF3D904(a2, "ceil", 4uLL);
  *(_OWORD *)(v30 + 8) = xmmword_21DFA60A0;
  *(_DWORD *)(v30 + 24) = 3;
  *(_WORD *)(v30 + 28) = 256;
  v31 = *sub_21DF3D904(a2, "exp", 3uLL);
  *(_QWORD *)(v31 + 8) = sub_21DF39E24;
  *(_QWORD *)(v31 + 16) = 0;
  *(_DWORD *)(v31 + 24) = 3;
  *(_WORD *)(v31 + 28) = 1;
  v32 = *sub_21DF3D904(a2, "exp2", 4uLL);
  *(_QWORD *)(v32 + 8) = sub_21DF3A304;
  *(_QWORD *)(v32 + 16) = 0;
  *(_DWORD *)(v32 + 24) = 3;
  *(_WORD *)(v32 + 28) = 0;
  v33 = *sub_21DF3D904(a2, "fabs", 4uLL);
  *(_QWORD *)(v33 + 8) = sub_21DF38804;
  *(_QWORD *)(v33 + 16) = 0;
  *(_DWORD *)(v33 + 24) = 3;
  *(_WORD *)(v33 + 28) = 0;
  v34 = *sub_21DF3D904(a2, "floor", 5uLL);
  *(_QWORD *)(v34 + 8) = sub_21DF38AA0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_DWORD *)(v34 + 24) = 3;
  *(_WORD *)(v34 + 28) = 0;
  v35 = *sub_21DF3D904(a2, "fma", 3uLL);
  *(_QWORD *)(v35 + 8) = sub_21DF39040;
  *(_QWORD *)(v35 + 16) = 0;
  *(_DWORD *)(v35 + 24) = 6;
  *(_WORD *)(v35 + 28) = 0;
  v36 = *sub_21DF3D904(a2, "fmax", 4uLL);
  *(_QWORD *)(v36 + 8) = sub_21DF3D1C4;
  *(_QWORD *)(v36 + 16) = 0;
  *(_DWORD *)(v36 + 24) = 5;
  *(_WORD *)(v36 + 28) = 256;
  v37 = *sub_21DF3D904(a2, "fmin", 4uLL);
  *(_QWORD *)(v37 + 8) = sub_21DF3D104;
  *(_QWORD *)(v37 + 16) = 0;
  *(_DWORD *)(v37 + 24) = 5;
  *(_WORD *)(v37 + 28) = 256;
  v38 = *sub_21DF3D904(a2, "fract", 5uLL);
  *(_QWORD *)(v38 + 8) = sub_21DF3A0A4;
  *(_QWORD *)(v38 + 16) = 0;
  *(_DWORD *)(v38 + 24) = 3;
  *(_WORD *)(v38 + 28) = 0;
  v39 = *sub_21DF3D904(a2, "ldexp", 5uLL);
  *(_QWORD *)(v39 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = 7;
  *(_WORD *)(v39 + 28) = 256;
  v40 = *sub_21DF3D904(a2, "log", 3uLL);
  *(_QWORD *)(v40 + 8) = sub_21DF39B38;
  *(_QWORD *)(v40 + 16) = 0;
  *(_DWORD *)(v40 + 24) = 3;
  *(_WORD *)(v40 + 28) = 1;
  v41 = *sub_21DF3D904(a2, "log2", 4uLL);
  *(_QWORD *)(v41 + 8) = sub_21DF3A43C;
  *(_QWORD *)(v41 + 16) = 0;
  *(_DWORD *)(v41 + 24) = 3;
  *(_WORD *)(v41 + 28) = 0;
  v42 = *sub_21DF3D904(a2, "mad", 3uLL);
  *(_QWORD *)(v42 + 8) = sub_21DF3A248;
  *(_QWORD *)(v42 + 16) = 0;
  *(_DWORD *)(v42 + 24) = 6;
  *(_WORD *)(v42 + 28) = 0;
  v43 = *sub_21DF3D904(a2, "rsqrt", 5uLL);
  *(_QWORD *)(v43 + 8) = sub_21DF39218;
  *(_QWORD *)(v43 + 16) = 0;
  *(_DWORD *)(v43 + 24) = 3;
  *(_WORD *)(v43 + 28) = 256;
  v44 = *sub_21DF3D904(a2, "sqrt", 4uLL);
  *(_QWORD *)(v44 + 8) = sub_21DF38B68;
  *(_QWORD *)(v44 + 16) = 0;
  *(_DWORD *)(v44 + 24) = 3;
  *(_WORD *)(v44 + 28) = 0;
  v45 = *sub_21DF3D904(a2, "trunc", 5uLL);
  *(_OWORD *)(v45 + 8) = xmmword_21DFA60B0;
  *(_DWORD *)(v45 + 24) = 3;
  *(_WORD *)(v45 + 28) = 256;
  v46 = *sub_21DF3D904(a2, "fast_acos", 9uLL);
  *(_OWORD *)(v46 + 8) = xmmword_21DFA6050;
  *(_DWORD *)(v46 + 24) = 3;
  *(_WORD *)(v46 + 28) = 257;
  v47 = *sub_21DF3D904(a2, "fast_asin", 9uLL);
  *(_OWORD *)(v47 + 8) = xmmword_21DFA6060;
  *(_DWORD *)(v47 + 24) = 3;
  *(_WORD *)(v47 + 28) = 257;
  v48 = *sub_21DF3D904(a2, "fast_atan", 9uLL);
  *(_OWORD *)(v48 + 8) = xmmword_21DFA6070;
  *(_DWORD *)(v48 + 24) = 3;
  *(_WORD *)(v48 + 28) = 257;
  v49 = *sub_21DF3D904(a2, "fast_atan2", 0xAuLL);
  *(_QWORD *)(v49 + 8) = sub_21DF392E0;
  *(_QWORD *)(v49 + 16) = 0;
  *(_DWORD *)(v49 + 24) = 5;
  *(_WORD *)(v49 + 28) = 257;
  v50 = *sub_21DF3D904(a2, "fast_exp10", 0xAuLL);
  *(_QWORD *)(v50 + 8) = sub_21DF3A2A4;
  *(_QWORD *)(v50 + 16) = 0;
  *(_DWORD *)(v50 + 24) = 3;
  *(_WORD *)(v50 + 28) = 0;
  v51 = *sub_21DF3D904(a2, "fast_log10", 0xAuLL);
  *(_QWORD *)(v51 + 8) = sub_21DF3A3CC;
  *(_QWORD *)(v51 + 16) = 0;
  *(_DWORD *)(v51 + 24) = 3;
  *(_WORD *)(v51 + 28) = 1;
  v52 = *sub_21DF3D904(a2, "fast_acosh", 0xAuLL);
  *(_QWORD *)(v52 + 8) = sub_21DF39A8C;
  *(_QWORD *)(v52 + 16) = 0;
  *(_DWORD *)(v52 + 24) = 3;
  *(_WORD *)(v52 + 28) = 257;
  v53 = *sub_21DF3D904(a2, "fast_asinh", 0xAuLL);
  *(_QWORD *)(v53 + 8) = sub_21DF39C00;
  *(_QWORD *)(v53 + 16) = 0;
  *(_DWORD *)(v53 + 24) = 3;
  *(_WORD *)(v53 + 28) = 257;
  v54 = *sub_21DF3D904(a2, "fast_atanh", 0xAuLL);
  *(_QWORD *)(v54 + 8) = sub_21DF39CAC;
  *(_QWORD *)(v54 + 16) = 0;
  *(_DWORD *)(v54 + 24) = 3;
  *(_WORD *)(v54 + 28) = 257;
  v55 = *sub_21DF3D904(a2, "fast_pow", 8uLL);
  *(_OWORD *)(v55 + 8) = xmmword_21DFA6080;
  *(_DWORD *)(v55 + 24) = 5;
  *(_WORD *)(v55 + 28) = 257;
  v56 = *sub_21DF3D904(a2, "fast_powr", 9uLL);
  *(_QWORD *)(v56 + 8) = sub_21DF38924;
  *(_QWORD *)(v56 + 16) = 0;
  *(_DWORD *)(v56 + 24) = 5;
  *(_WORD *)(v56 + 28) = 257;
  v57 = *sub_21DF3D904(a2, "fast_cosh", 9uLL);
  *(_QWORD *)(v57 + 8) = sub_21DF39D7C;
  *(_QWORD *)(v57 + 16) = 0;
  *(_DWORD *)(v57 + 24) = 3;
  *(_WORD *)(v57 + 28) = 257;
  v58 = *sub_21DF3D904(a2, "fast_sinh", 9uLL);
  *(_QWORD *)(v58 + 8) = sub_21DF3A6D0;
  *(_QWORD *)(v58 + 16) = 0;
  *(_DWORD *)(v58 + 24) = 3;
  *(_WORD *)(v58 + 28) = 257;
  v59 = *sub_21DF3D904(a2, "fast_tanh", 9uLL);
  *(_QWORD *)(v59 + 8) = sub_21DF3A778;
  *(_QWORD *)(v59 + 16) = 0;
  *(_DWORD *)(v59 + 24) = 3;
  *(_WORD *)(v59 + 28) = 257;
  v60 = *(_BYTE *)(a1 + 40);
  v61 = *sub_21DF3D904(a2, "fast_cos", 8uLL);
  *(_QWORD *)(v61 + 8) = sub_21DF3D9F8;
  *(_QWORD *)(v61 + 16) = 0;
  *(_DWORD *)(v61 + 24) = 3;
  *(_BYTE *)(v61 + 28) = v60;
  *(_BYTE *)(v61 + 29) = 1;
  v62 = *(_BYTE *)(a1 + 40);
  v63 = *sub_21DF3D904(a2, "fast_sin", 8uLL);
  *(_QWORD *)(v63 + 8) = sub_21DF3DA00;
  *(_QWORD *)(v63 + 16) = 0;
  *(_DWORD *)(v63 + 24) = 3;
  *(_BYTE *)(v63 + 28) = v62;
  *(_BYTE *)(v63 + 29) = 1;
  v64 = *sub_21DF3D904(a2, "fast_tan", 8uLL);
  *(_QWORD *)(v64 + 8) = sub_21DF397E4;
  *(_QWORD *)(v64 + 16) = 0;
  *(_DWORD *)(v64 + 24) = 3;
  *(_BYTE *)(v64 + 28) = 1;
  *(_BYTE *)(v64 + 29) = 1;
  v65 = *(_BYTE *)(a1 + 40);
  v66 = *sub_21DF3D904(a2, "fast_sincos", 0xBuLL);
  *(_QWORD *)(v66 + 8) = sub_21DF39850;
  *(_QWORD *)(v66 + 16) = 0;
  *(_DWORD *)(v66 + 24) = 5;
  *(_BYTE *)(v66 + 28) = v65;
  *(_BYTE *)(v66 + 29) = 0;
  v67 = *sub_21DF3D904(a2, "fast_round", 0xAuLL);
  *(_QWORD *)(v67 + 8) = sub_21DF3A504;
  *(_QWORD *)(v67 + 16) = 0;
  *(_DWORD *)(v67 + 24) = 3;
  *(_BYTE *)(v67 + 28) = 1;
  *(_BYTE *)(v67 + 29) = 1;
  v68 = *sub_21DF3D904(a2, "fast_fmod", 9uLL);
  *(_QWORD *)(v68 + 8) = sub_21DF39EEC;
  *(_QWORD *)(v68 + 16) = 0;
  *(_DWORD *)(v68 + 24) = 5;
  *(_WORD *)(v68 + 28) = 1;
  v69 = *sub_21DF3D904(a2, "fast_mod", 8uLL);
  *(_QWORD *)(v69 + 8) = sub_21DF3A014;
  *(_QWORD *)(v69 + 16) = 0;
  *(_DWORD *)(v69 + 24) = 5;
  *(_WORD *)(v69 + 28) = 1;
  v70 = *sub_21DF3D904(a2, "fast_exp", 8uLL);
  *(_QWORD *)(v70 + 8) = sub_21DF39E24;
  *(_QWORD *)(v70 + 16) = 0;
  *(_DWORD *)(v70 + 24) = 3;
  *(_WORD *)(v70 + 28) = 0;
  v71 = *sub_21DF3D904(a2, "fast_exp2", 9uLL);
  *(_QWORD *)(v71 + 8) = sub_21DF3A304;
  *(_QWORD *)(v71 + 16) = 0;
  *(_DWORD *)(v71 + 24) = 3;
  *(_WORD *)(v71 + 28) = 0;
  v72 = *sub_21DF3D904(a2, "fast_ldexp", 0xAuLL);
  *(_QWORD *)(v72 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v72 + 16) = 0;
  *(_DWORD *)(v72 + 24) = 7;
  *(_BYTE *)(v72 + 28) = 0;
  *(_BYTE *)(v72 + 29) = 1;
  v73 = *sub_21DF3D904(a2, "fast_log", 8uLL);
  *(_QWORD *)(v73 + 8) = sub_21DF39B38;
  *(_QWORD *)(v73 + 16) = 0;
  *(_DWORD *)(v73 + 24) = 3;
  *(_WORD *)(v73 + 28) = 0;
  v74 = *sub_21DF3D904(a2, "fast_log2", 9uLL);
  *(_QWORD *)(v74 + 8) = sub_21DF3A43C;
  *(_QWORD *)(v74 + 16) = 0;
  *(_DWORD *)(v74 + 24) = 3;
  *(_WORD *)(v74 + 28) = 0;
  v75 = *sub_21DF3D904(a2, "fast_rsqrt", 0xAuLL);
  *(_QWORD *)(v75 + 8) = sub_21DF39218;
  *(_QWORD *)(v75 + 16) = 0;
  *(_DWORD *)(v75 + 24) = 3;
  *(_BYTE *)(v75 + 28) = 0;
  *(_BYTE *)(v75 + 29) = 1;
  v76 = *sub_21DF3D904(a2, "fast_sqrt", 9uLL);
  *(_QWORD *)(v76 + 8) = sub_21DF38B68;
  *(_QWORD *)(v76 + 16) = 0;
  *(_DWORD *)(v76 + 24) = 3;
  *(_WORD *)(v76 + 28) = 0;
  v77 = *sub_21DF3D904(a2, "fast_ceil", 9uLL);
  *(_OWORD *)(v77 + 8) = xmmword_21DFA60A0;
  *(_DWORD *)(v77 + 24) = 3;
  *(_BYTE *)(v77 + 28) = 0;
  *(_BYTE *)(v77 + 29) = 1;
  v78 = *sub_21DF3D904(a2, "fast_fabs", 9uLL);
  *(_QWORD *)(v78 + 8) = sub_21DF38804;
  *(_QWORD *)(v78 + 16) = 0;
  *(_DWORD *)(v78 + 24) = 3;
  *(_WORD *)(v78 + 28) = 0;
  v79 = *sub_21DF3D904(a2, "fast_floor", 0xAuLL);
  *(_QWORD *)(v79 + 8) = sub_21DF38AA0;
  *(_QWORD *)(v79 + 16) = 0;
  *(_DWORD *)(v79 + 24) = 3;
  *(_WORD *)(v79 + 28) = 0;
  v80 = *sub_21DF3D904(a2, "fast_fract", 0xAuLL);
  *(_QWORD *)(v80 + 8) = sub_21DF3A0A4;
  *(_QWORD *)(v80 + 16) = 0;
  *(_DWORD *)(v80 + 24) = 3;
  *(_WORD *)(v80 + 28) = 0;
  v81 = *sub_21DF3D904(a2, "fast_rint", 9uLL);
  *(_OWORD *)(v81 + 8) = xmmword_21DFA6090;
  *(_DWORD *)(v81 + 24) = 3;
  *(_BYTE *)(v81 + 28) = 1;
  *(_BYTE *)(v81 + 29) = 1;
  v82 = *sub_21DF3D904(a2, "fast_trunc", 0xAuLL);
  *(_OWORD *)(v82 + 8) = xmmword_21DFA60B0;
  *(_DWORD *)(v82 + 24) = 3;
  *(_BYTE *)(v82 + 28) = 0;
  *(_BYTE *)(v82 + 29) = 1;
  v83 = *sub_21DF3D904(a2, "fast_fmax", 9uLL);
  *(_QWORD *)(v83 + 8) = sub_21DF39700;
  *(_QWORD *)(v83 + 16) = 0;
  *(_DWORD *)(v83 + 24) = 5;
  *(_BYTE *)(v83 + 28) = 0;
  *(_BYTE *)(v83 + 29) = 1;
  v84 = *sub_21DF3D904(a2, "fast_fmin", 9uLL);
  *(_QWORD *)(v84 + 8) = sub_21DF3961C;
  *(_QWORD *)(v84 + 16) = 0;
  *(_DWORD *)(v84 + 24) = 5;
  *(_BYTE *)(v84 + 28) = 0;
  *(_BYTE *)(v84 + 29) = 1;
  v85 = *sub_21DF3D904(a2, "gamma_expand", 0xCuLL);
  *(_QWORD *)(v85 + 8) = sub_21DF3DA10;
  *(_QWORD *)(v85 + 16) = 0;
  *(_DWORD *)(v85 + 24) = 3;
  *(_WORD *)(v85 + 28) = 0;
  v86 = *sub_21DF3D904(a2, "gamma_compress", 0xEuLL);
  *(_QWORD *)(v86 + 8) = sub_21DF3DA18;
  *(_QWORD *)(v86 + 16) = 0;
  *(_DWORD *)(v86 + 24) = 3;
  *(_WORD *)(v86 + 28) = 0;
  v87 = *sub_21DF3D904(a2, "gamma_expand_xr", 0xFuLL);
  *(_QWORD *)(v87 + 8) = sub_21DF3DA20;
  *(_QWORD *)(v87 + 16) = 0;
  *(_DWORD *)(v87 + 24) = 3;
  *(_WORD *)(v87 + 28) = 0;
  v88 = *sub_21DF3D904(a2, "gamma_compress_xr", 0x11uLL);
  *(_QWORD *)(v88 + 8) = sub_21DF3DA28;
  *(_QWORD *)(v88 + 16) = 0;
  *(_DWORD *)(v88 + 24) = 3;
  *(_WORD *)(v88 + 28) = 0;
  v89 = *sub_21DF3D904(a2, "convert", 7uLL);
  *(_QWORD *)(v89 + 8) = sub_21DF3A850;
  *(_QWORD *)(v89 + 16) = 0;
  *(_DWORD *)(v89 + 24) = 7;
  *(_BYTE *)(v89 + 28) = 0;
  *(_BYTE *)(v89 + 29) = 1;
  v90 = *sub_21DF3D904(a2, "pack", 4uLL);
  *(_QWORD *)(v90 + 8) = sub_21DF3B160;
  *(_QWORD *)(v90 + 16) = 0;
  *(_DWORD *)(v90 + 24) = 7;
  *(_WORD *)(v90 + 28) = 0;
  v91 = *sub_21DF3D904(a2, "unpack", 6uLL);
  *(_QWORD *)(v91 + 8) = sub_21DF3BBE4;
  *(_QWORD *)(v91 + 16) = 0;
  *(_DWORD *)(v91 + 24) = 7;
  *(_WORD *)(v91 + 28) = 0;
  v92 = *sub_21DF3D904(a2, "abs", 3uLL);
  *(_QWORD *)(v92 + 8) = sub_21DF3DA30;
  *(_QWORD *)(v92 + 16) = 0;
  *(_DWORD *)(v92 + 24) = 7;
  *(_BYTE *)(v92 + 28) = 0;
  *(_BYTE *)(v92 + 29) = 1;
  v93 = *sub_21DF3D904(a2, "abs_diff", 8uLL);
  *(_QWORD *)(v93 + 8) = sub_21DF3DBF8;
  *(_QWORD *)(v93 + 16) = 0;
  *(_DWORD *)(v93 + 24) = 7;
  *(_BYTE *)(v93 + 28) = 0;
  *(_BYTE *)(v93 + 29) = 1;
  v94 = *sub_21DF3D904(a2, "add_sat", 7uLL);
  *(_QWORD *)(v94 + 8) = sub_21DF3DCC8;
  *(_QWORD *)(v94 + 16) = 0;
  *(_DWORD *)(v94 + 24) = 7;
  *(_BYTE *)(v94 + 28) = 0;
  *(_BYTE *)(v94 + 29) = 1;
  v95 = *sub_21DF3D904(a2, "sub_sat", 7uLL);
  *(_QWORD *)(v95 + 8) = sub_21DF3DFA8;
  *(_QWORD *)(v95 + 16) = 0;
  *(_DWORD *)(v95 + 24) = 7;
  *(_BYTE *)(v95 + 28) = 0;
  *(_BYTE *)(v95 + 29) = 1;
  v96 = *sub_21DF3D904(a2, "hadd", 4uLL);
  *(_QWORD *)(v96 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v96 + 16) = 0;
  *(_DWORD *)(v96 + 24) = 7;
  *(_BYTE *)(v96 + 28) = 0;
  *(_BYTE *)(v96 + 29) = 1;
  v97 = *sub_21DF3D904(a2, "rhadd", 5uLL);
  *(_QWORD *)(v97 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v97 + 16) = 0;
  *(_DWORD *)(v97 + 24) = 7;
  *(_BYTE *)(v97 + 28) = 0;
  *(_BYTE *)(v97 + 29) = 1;
  v98 = *sub_21DF3D904(a2, "clamp", 5uLL);
  *(_QWORD *)(v98 + 8) = sub_21DF3C060;
  *(_QWORD *)(v98 + 16) = 0;
  *(_DWORD *)(v98 + 24) = 7;
  *(_BYTE *)(v98 + 28) = 0;
  *(_BYTE *)(v98 + 29) = 1;
  v99 = *sub_21DF3D904(a2, "clz", 3uLL);
  *(_QWORD *)(v99 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v99 + 16) = 0;
  *(_DWORD *)(v99 + 24) = 7;
  *(_BYTE *)(v99 + 28) = 0;
  *(_BYTE *)(v99 + 29) = 1;
  v100 = *sub_21DF3D904(a2, "ctz", 3uLL);
  *(_QWORD *)(v100 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v100 + 16) = 0;
  *(_DWORD *)(v100 + 24) = 7;
  *(_BYTE *)(v100 + 28) = 0;
  *(_BYTE *)(v100 + 29) = 1;
  v101 = *sub_21DF3D904(a2, "mad_hi", 6uLL);
  *(_QWORD *)(v101 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v101 + 16) = 0;
  *(_DWORD *)(v101 + 24) = 7;
  *(_BYTE *)(v101 + 28) = 0;
  *(_BYTE *)(v101 + 29) = 1;
  v102 = *sub_21DF3D904(a2, "mad_sat", 7uLL);
  *(_QWORD *)(v102 + 8) = sub_21DF3E2E4;
  *(_QWORD *)(v102 + 16) = 0;
  *(_DWORD *)(v102 + 24) = 7;
  *(_BYTE *)(v102 + 28) = 0;
  *(_BYTE *)(v102 + 29) = 1;
  v103 = *sub_21DF3D904(a2, "max", 3uLL);
  *(_QWORD *)(v103 + 8) = sub_21DF3E674;
  *(_QWORD *)(v103 + 16) = 0;
  *(_DWORD *)(v103 + 24) = 7;
  *(_BYTE *)(v103 + 28) = 0;
  *(_BYTE *)(v103 + 29) = 1;
  v104 = *sub_21DF3D904(a2, "min", 3uLL);
  *(_QWORD *)(v104 + 8) = sub_21DF3E694;
  *(_QWORD *)(v104 + 16) = 0;
  *(_DWORD *)(v104 + 24) = 7;
  *(_BYTE *)(v104 + 28) = 0;
  *(_BYTE *)(v104 + 29) = 1;
  v105 = *sub_21DF3D904(a2, "mul_hi", 6uLL);
  *(_QWORD *)(v105 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v105 + 16) = 0;
  *(_DWORD *)(v105 + 24) = 7;
  *(_BYTE *)(v105 + 28) = 0;
  *(_BYTE *)(v105 + 29) = 1;
  v106 = *sub_21DF3D904(a2, "rotate", 6uLL);
  *(_QWORD *)(v106 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v106 + 16) = 0;
  *(_DWORD *)(v106 + 24) = 7;
  *(_BYTE *)(v106 + 28) = 0;
  *(_BYTE *)(v106 + 29) = 1;
  v107 = *sub_21DF3D904(a2, "popcount", 8uLL);
  *(_QWORD *)(v107 + 8) = sub_21DF3C1A4;
  *(_QWORD *)(v107 + 16) = 0;
  *(_DWORD *)(v107 + 24) = 3;
  *(_BYTE *)(v107 + 28) = 0;
  *(_BYTE *)(v107 + 29) = 1;
  v108 = *sub_21DF3D904(a2, "extract_bits", 0xCuLL);
  *(_QWORD *)(v108 + 8) = sub_21DF3C320;
  *(_QWORD *)(v108 + 16) = 0;
  *(_DWORD *)(v108 + 24) = 7;
  *(_BYTE *)(v108 + 28) = 0;
  *(_BYTE *)(v108 + 29) = 1;
  v109 = *sub_21DF3D904(a2, "insert_bits", 0xBuLL);
  *(_QWORD *)(v109 + 8) = sub_21DF3C534;
  *(_QWORD *)(v109 + 16) = 0;
  *(_DWORD *)(v109 + 24) = 7;
  *(_BYTE *)(v109 + 28) = 0;
  *(_BYTE *)(v109 + 29) = 1;
  v110 = *sub_21DF3D904(a2, "reverse_bits", 0xCuLL);
  *(_QWORD *)(v110 + 8) = sub_21DF3C784;
  *(_QWORD *)(v110 + 16) = 0;
  *(_DWORD *)(v110 + 24) = 3;
  *(_BYTE *)(v110 + 28) = 0;
  *(_BYTE *)(v110 + 29) = 1;
  v111 = *sub_21DF3D904(a2, "any", 3uLL);
  *(_QWORD *)(v111 + 8) = sub_21DF3E6B4;
  *(_QWORD *)(v111 + 16) = 0;
  *(_DWORD *)(v111 + 24) = 3;
  *(_WORD *)(v111 + 28) = 0;
  v112 = *sub_21DF3D904(a2, "all", 3uLL);
  *(_QWORD *)(v112 + 8) = sub_21DF3E6BC;
  *(_QWORD *)(v112 + 16) = 0;
  *(_DWORD *)(v112 + 24) = 3;
  *(_WORD *)(v112 + 28) = 0;
  v113 = *sub_21DF3D904(a2, "any_msb", 7uLL);
  *(_QWORD *)(v113 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v113 + 16) = 0;
  *(_DWORD *)(v113 + 24) = 7;
  *(_BYTE *)(v113 + 28) = 0;
  *(_BYTE *)(v113 + 29) = 1;
  v114 = *sub_21DF3D904(a2, "all_msb", 7uLL);
  *(_QWORD *)(v114 + 8) = sub_21DF3DA08;
  *(_QWORD *)(v114 + 16) = 0;
  *(_DWORD *)(v114 + 24) = 7;
  *(_BYTE *)(v114 + 28) = 0;
  *(_BYTE *)(v114 + 29) = 1;
  v115 = *sub_21DF3D904(a2, "saturate", 8uLL);
  *(_QWORD *)(v115 + 8) = sub_21DF3E6C4;
  *(_QWORD *)(v115 + 16) = 0;
  *(_DWORD *)(v115 + 24) = 3;
  *(_BYTE *)(v115 + 28) = 0;
  *(_BYTE *)(v115 + 29) = 1;
  v116 = *sub_21DF3D904(a2, "mix", 3uLL);
  *(_QWORD *)(v116 + 8) = sub_21DF3CA8C;
  *(_QWORD *)(v116 + 16) = 0;
  *(_DWORD *)(v116 + 24) = 6;
  *(_WORD *)(v116 + 28) = 0;
  v117 = *sub_21DF3D904(a2, "sign", 4uLL);
  *(_QWORD *)(v117 + 8) = sub_21DF3C990;
  *(_QWORD *)(v117 + 16) = 0;
  *(_DWORD *)(v117 + 24) = 3;
  *(_BYTE *)(v117 + 28) = 0;
  *(_BYTE *)(v117 + 29) = 1;
  v118 = *sub_21DF3D904(a2, "dot", 3uLL);
  *(_QWORD *)(v118 + 8) = sub_21DF3CB44;
  *(_QWORD *)(v118 + 16) = 0;
  *(_DWORD *)(v118 + 24) = 5;
  *(_WORD *)(v118 + 28) = 0;
  v119 = *sub_21DF3D904(a2, "fast_clamp", 0xAuLL);
  *(_QWORD *)(v119 + 8) = sub_21DF3E774;
  *(_QWORD *)(v119 + 16) = 0;
  *(_DWORD *)(v119 + 24) = 6;
  *(_BYTE *)(v119 + 28) = 0;
  *(_BYTE *)(v119 + 29) = 1;
  v120 = *sub_21DF3D904(a2, "fast_saturate", 0xDuLL);
  *(_QWORD *)(v120 + 8) = sub_21DF3E818;
  *(_QWORD *)(v120 + 16) = 0;
  *(_DWORD *)(v120 + 24) = 3;
  *(_BYTE *)(v120 + 28) = 0;
  *(_BYTE *)(v120 + 29) = 1;
  v121 = *(_BYTE *)(a1 + 41);
  v122 = *sub_21DF3D904(a2, "dfdx", 4uLL);
  *(_QWORD *)(v122 + 8) = sub_21DF3CB90;
  *(_QWORD *)(v122 + 16) = 0;
  *(_DWORD *)(v122 + 24) = 3;
  *(_BYTE *)(v122 + 28) = v121;
  *(_BYTE *)(v122 + 29) = 1;
  v123 = *(_BYTE *)(a1 + 41);
  v124 = *sub_21DF3D904(a2, "dfdy", 4uLL);
  *(_QWORD *)(v124 + 8) = sub_21DF3CC48;
  *(_QWORD *)(v124 + 16) = 0;
  *(_DWORD *)(v124 + 24) = 3;
  *(_BYTE *)(v124 + 28) = v123;
  *(_BYTE *)(v124 + 29) = 1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 41);
  v125 = *sub_21DF3D904(a2, "fwidth", 6uLL);
  *(_QWORD *)(v125 + 8) = sub_21DF3CCF8;
  *(_QWORD *)(v125 + 16) = 0;
  *(_DWORD *)(v125 + 24) = 3;
  *(_BYTE *)(v125 + 28) = a1;
  *(_BYTE *)(v125 + 29) = 1;
  v126 = *sub_21DF3D904(a2, "atomic", 6uLL);
  *(_OWORD *)(v126 + 8) = xmmword_21DFA60C0;
  *(_DWORD *)(v126 + 24) = 7;
  *(_WORD *)(v126 + 28) = 0;
  v127 = *sub_21DF3D904(a2, "assert", 6uLL);
  *(_QWORD *)(v127 + 8) = sub_21DF3D630;
  *(_QWORD *)(v127 + 16) = 0;
  *(_DWORD *)(v127 + 24) = 1;
  *(_WORD *)(v127 + 28) = 0;
  v128 = *sub_21DF3D904(a2, "get_simd_width", 0xEuLL);
  *(_QWORD *)(v128 + 8) = sub_21DF3D638;
  *(_QWORD *)(v128 + 16) = 0;
  *(_DWORD *)(v128 + 24) = 7;
  *(_WORD *)(v128 + 28) = 0;
  v129 = *sub_21DF3D904(a2, "get_thread_execution_width", 0x1AuLL);
  *(_QWORD *)(v129 + 8) = sub_21DF3D69C;
  *(_QWORD *)(v129 + 16) = 0;
  *(_DWORD *)(v129 + 24) = 7;
  *(_WORD *)(v129 + 28) = 0;
  v130 = *sub_21DF3D904(a2, "simdgroup", 9uLL);
  *(_OWORD *)(v130 + 8) = xmmword_21DFA60D0;
  *(_DWORD *)(v130 + 24) = 7;
  *(_WORD *)(v130 + 28) = 0;
  v131 = *sub_21DF3D904(a2, "is_uniform", 0xAuLL);
  *(_QWORD *)(v131 + 8) = sub_21DF3D700;
  *(_QWORD *)(v131 + 16) = 0;
  *(_DWORD *)(v131 + 24) = 9;
  *(_WORD *)(v131 + 28) = 0;
  v132 = *sub_21DF3D904(a2, "mul24", 5uLL);
  *(_QWORD *)(v132 + 8) = sub_21DF3E8A4;
  *(_QWORD *)(v132 + 16) = 0;
  *(_DWORD *)(v132 + 24) = 7;
  *(_BYTE *)(v132 + 28) = 0;
  *(_BYTE *)(v132 + 29) = 1;
  v133 = *sub_21DF3D904(a2, "mad24", 5uLL);
  *(_QWORD *)(v133 + 8) = sub_21DF3E8D8;
  *(_QWORD *)(v133 + 16) = 0;
  *(_DWORD *)(v133 + 24) = 7;
  *(_BYTE *)(v133 + 28) = 0;
  *(_BYTE *)(v133 + 29) = 1;
  v134 = *sub_21DF3D904(a2, "min3", 4uLL);
  *(_QWORD *)(v134 + 8) = sub_21DF3E93C;
  *(_QWORD *)(v134 + 16) = 0;
  *(_DWORD *)(v134 + 24) = 7;
  *(_BYTE *)(v134 + 28) = 0;
  *(_BYTE *)(v134 + 29) = 1;
  v135 = *sub_21DF3D904(a2, "fmin3", 5uLL);
  *(_QWORD *)(v135 + 8) = sub_21DF3E998;
  *(_QWORD *)(v135 + 16) = 0;
  *(_DWORD *)(v135 + 24) = 7;
  *(_BYTE *)(v135 + 28) = 0;
  *(_BYTE *)(v135 + 29) = 1;
  v136 = *sub_21DF3D904(a2, "fast_fmin3", 0xAuLL);
  *(_QWORD *)(v136 + 8) = sub_21DF3E9D0;
  *(_QWORD *)(v136 + 16) = 0;
  *(_DWORD *)(v136 + 24) = 7;
  *(_BYTE *)(v136 + 28) = 0;
  *(_BYTE *)(v136 + 29) = 1;
  v137 = *sub_21DF3D904(a2, "max3", 4uLL);
  *(_QWORD *)(v137 + 8) = sub_21DF3EA08;
  *(_QWORD *)(v137 + 16) = 0;
  *(_DWORD *)(v137 + 24) = 7;
  *(_BYTE *)(v137 + 28) = 0;
  *(_BYTE *)(v137 + 29) = 1;
  v138 = *sub_21DF3D904(a2, "fmax3", 5uLL);
  *(_QWORD *)(v138 + 8) = sub_21DF3EA64;
  *(_QWORD *)(v138 + 16) = 0;
  *(_DWORD *)(v138 + 24) = 7;
  *(_BYTE *)(v138 + 28) = 0;
  *(_BYTE *)(v138 + 29) = 1;
  v139 = *sub_21DF3D904(a2, "fast_fmax3", 0xAuLL);
  *(_QWORD *)(v139 + 8) = sub_21DF3EA9C;
  *(_QWORD *)(v139 + 16) = 0;
  *(_DWORD *)(v139 + 24) = 7;
  *(_BYTE *)(v139 + 28) = 0;
  *(_BYTE *)(v139 + 29) = 1;
  v140 = *sub_21DF3D904(a2, "median3", 7uLL);
  *(_QWORD *)(v140 + 8) = sub_21DF3EAD4;
  *(_QWORD *)(v140 + 16) = 0;
  *(_DWORD *)(v140 + 24) = 7;
  *(_BYTE *)(v140 + 28) = 0;
  *(_BYTE *)(v140 + 29) = 1;
  v141 = *sub_21DF3D904(a2, "fmedian3", 8uLL);
  *(_QWORD *)(v141 + 8) = sub_21DF3CEDC;
  *(_QWORD *)(v141 + 16) = 0;
  *(_DWORD *)(v141 + 24) = 7;
  *(_BYTE *)(v141 + 28) = 0;
  *(_BYTE *)(v141 + 29) = 1;
  v142 = *sub_21DF3D904(a2, "fast_fmedian3", 0xDuLL);
  *(_QWORD *)(v142 + 8) = sub_21DF3D284;
  *(_QWORD *)(v142 + 16) = 0;
  *(_DWORD *)(v142 + 24) = 7;
  *(_BYTE *)(v142 + 28) = 0;
  *(_BYTE *)(v142 + 29) = 1;
  v143 = *sub_21DF3D904(a2, "projective_coordinates", 0x16uLL);
  *(_QWORD *)(v143 + 8) = sub_21DF3D378;
  *(_QWORD *)(v143 + 16) = 0;
  *(_DWORD *)(v143 + 24) = 3;
  *(_WORD *)(v143 + 28) = 0;
  v144 = *sub_21DF3D904(a2, "get_unique_identifier_compute_pipeline_state", 0x2CuLL);
  *(_QWORD *)(v144 + 8) = sub_21DF3D8C8;
  *(_QWORD *)(v144 + 16) = 0;
  *(_DWORD *)(v144 + 24) = 3;
  *(_BYTE *)(v144 + 28) = 0;
  *(_BYTE *)(v144 + 29) = 1;
  v145 = *sub_21DF3D904(a2, "get_unique_identifier_render_pipeline_state", 0x2BuLL);
  *(_QWORD *)(v145 + 8) = sub_21DF3D8C8;
  *(_QWORD *)(v145 + 16) = 0;
  *(_DWORD *)(v145 + 24) = 3;
  *(_BYTE *)(v145 + 28) = 0;
  *(_BYTE *)(v145 + 29) = 1;
  v146 = *sub_21DF3D904(a2, "get_unique_identifier_indirect_command_buffer", 0x2DuLL);
  *(_QWORD *)(v146 + 8) = sub_21DF3D8C8;
  *(_QWORD *)(v146 + 16) = 0;
  *(_DWORD *)(v146 + 24) = 3;
  *(_BYTE *)(v146 + 28) = 0;
  *(_BYTE *)(v146 + 29) = 1;
  result = sub_21DF3D904(a2, "get_threads_per_simdgroup", 0x19uLL);
  v148 = *result;
  *(_QWORD *)(v148 + 8) = sub_21DF3D69C;
  *(_QWORD *)(v148 + 16) = 0;
  *(_DWORD *)(v148 + 24) = 7;
  *(_WORD *)(v148 + 28) = 0;
  return result;
}

uint64_t sub_21DF1D5EC(uint64_t a1, uint64_t a2, llvm::Constant *a3, char a4)
{
  uint64_t v8;
  _QWORD v10[5];
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = sub_21DF20F2C;
  v10[3] = &unk_24E1E78F0;
  v10[4] = a1;
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  v14 = a4;
  v8 = sub_21DF7A0F0(a1, a3, (uint64_t)v10);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t sub_21DF1D704(uint64_t a1, __int128 *a2, llvm::Constant *a3, llvm::Constant *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  if (a5)
  {
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    if (v19)
      llvm::MetadataTracking::track();
    v20 = *((_DWORD *)a2 + 6);
    v9 = sub_21DF20BC4(a1, (uint64_t)&v18, a3, a4);
    if (v19)
      llvm::MetadataTracking::untrack();
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
      llvm::MetadataTracking::track();
    v17 = *((_DWORD *)a2 + 6);
    a4 = (llvm::Constant *)sub_21DF20BC4(a1, (uint64_t)&v15, a4, a3);
    if (v16)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v9 = (uint64_t)a3;
  }
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *((_DWORD *)a2 + 6);
  v10 = sub_21DF20E2C(a1, (uint64_t)&v12, v9, a4);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t sub_21DF1D860(uint64_t a1, __int128 *a2, llvm::Constant *a3, llvm::Constant *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  if (a5)
  {
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    if (v19)
      llvm::MetadataTracking::track();
    v20 = *((_DWORD *)a2 + 6);
    v9 = sub_21DF20BC4(a1, (uint64_t)&v18, a3, a4);
    if (v19)
      llvm::MetadataTracking::untrack();
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
      llvm::MetadataTracking::track();
    v17 = *((_DWORD *)a2 + 6);
    a4 = (llvm::Constant *)sub_21DF20BC4(a1, (uint64_t)&v15, a4, a3);
    if (v16)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v9 = (uint64_t)a3;
  }
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *((_DWORD *)a2 + 6);
  v10 = sub_21DF20E2C(a1, (uint64_t)&v12, v9, a4);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t sub_21DF1D9BC(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _BYTE v26[32];
  __int16 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v19 = sub_21DF20904;
  v20 = &unk_24E1E7920;
  v21 = a1;
  v22 = a6;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x12)
    return sub_21DF20904((uint64_t)v18, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  v12 = llvm::UndefValue::get();
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  sub_21DF79A74(a1, a3, (llvm::Constant **)v30);
  sub_21DF79A74(a1, a4, (llvm::Constant **)v29);
  sub_21DF79A74(a1, a5, (llvm::Constant **)v28);
  v13 = *(unsigned int *)(*(_QWORD *)a3 + 32);
  if ((_DWORD)v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v15 = v19((uint64_t)v18, *((_QWORD *)v30 + i), *((_QWORD *)v29 + i), *((_QWORD *)v28 + i));
      v27 = 257;
      v16 = llvm::ConstantInt::get();
      v12 = sub_21DF7980C(a1 + 8, v12, v15, v16, (uint64_t)v26);
    }
  }
  return v12;
}

uint64_t sub_21DF1DBB8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[32];
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v24 = *(_OWORD *)a2;
  v25 = *(_QWORD *)(a2 + 16);
  if (v25)
    llvm::MetadataTracking::track();
  v26 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C((uint64_t)a1, &v24);
  if (v25)
    llvm::MetadataTracking::untrack();
  if (a4 == 16)
  {
    v15 = 149;
    if (a5)
      v15 = 147;
    v13 = a1[v15];
    if (v13)
      v14 = strlen((const char *)a1[v15]);
    else
      v14 = 0;
    v17 = a1 + 29;
    v18 = 70;
  }
  else
  {
    if (a4 != 8)
      return 0;
    v12 = 150;
    if (a5)
      v12 = 148;
    v13 = a1[v12];
    if (v13)
      v14 = strlen((const char *)a1[v12]);
    else
      v14 = 0;
    v17 = a1 + 35;
    v18 = 69;
  }
  v19 = sub_21DF1B0B0((uint64_t)a1, v13, v14, a1[20], *v17, a1[24]);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 8 * v18))(a1, a3, v19);
  if (a6 != 32)
  {
    v20 = a1[19];
    v23 = 257;
    return sub_21DF20674((uint64_t)(a1 + 1), v16, v20, (uint64_t)v22);
  }
  return v16;
}

uint64_t sub_21DF1DD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  int v17;

  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  result = 0;
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 608))(a1, a3, a4, a5, a6, a7);
      break;
    case 5:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a5, a6, a7);
      break;
    case 6:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 584))(a1, a5);
      break;
    case 7:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 632))(a1, a5);
      break;
    case 8:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 648))(a1, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21DF1DE70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C((uint64_t)a1, &v19);
  if (v20)
    llvm::MetadataTracking::untrack();
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 616))(a1, a3, a4, a5, a6, a7);
      break;
    case 4:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a4, 3, a6, a7);
      break;
    case 5:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a4, 4, a6, a7);
      break;
    case 6:
      v15 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a1[19], 4, a6, a7);
      v16 = a1[36];
      v18 = 257;
      result = sub_21DF1AC78((uint64_t)(a1 + 1), v15, v16, (uint64_t)v17);
      break;
    case 7:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 624))(a1, a5, a4);
      break;
    case 8:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 640))(a1, a5, a4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_21DF1E010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  __int16 v30;

  v26 = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v26);
  if (v27)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantInt::get();
  v30 = 257;
  v7 = sub_21DF1AE6C(a1 + 8, a3, v6, (uint64_t)v29);
  v8 = *(_QWORD *)(a1 + 264);
  v30 = 257;
  v9 = sub_21DF20594(a1 + 8, v7, v8, (uint64_t)v29);
  v10 = llvm::ConstantFP::get();
  v25 = 257;
  v11 = sub_21DF20828(a1 + 8, v9, v10, (uint64_t)v24);
  v12 = llvm::ConstantFP::get();
  v30 = 257;
  v13 = sub_21DF20300(a1 + 8, v11, v12, (uint64_t)v29);
  v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v23 = *(_DWORD *)(a1 + 104);
  v30 = 257;
  v14 = llvm::ConstantInt::get();
  v15 = sub_21DF79584(a1 + 8, v13, v14, (uint64_t)v29);
  v16 = llvm::ConstantFP::get();
  v17 = llvm::ConstantFP::get();
  v18 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, &v21, v15, v16, v17, 0);
  if (v22)
    llvm::MetadataTracking::untrack();
  v30 = 257;
  v19 = llvm::ConstantInt::get();
  return sub_21DF7980C(a1 + 8, v13, v18, v19, (uint64_t)v29);
}

uint64_t sub_21DF1E214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantFP::get();
  v17 = 257;
  v7 = sub_21DF20300(a1 + 8, a3, v6, (uint64_t)v16);
  v8 = llvm::ConstantFP::get();
  v15 = 257;
  v9 = sub_21DF2074C(a1 + 8, v7, v8, (uint64_t)v14);
  v10 = *(_QWORD *)(a1 + 288);
  v17 = 257;
  v11 = sub_21DF1AC78(a1 + 8, v9, v10, (uint64_t)v16);
  v12 = llvm::ConstantInt::get();
  v15 = 257;
  return sub_21DF1A184(a1 + 8, v11, v12, (uint64_t)v14);
}

uint64_t sub_21DF1E334(_QWORD *a1, __int128 *a2, int a3, uint64_t a4, unsigned int *a5, llvm::Type *this, uint64_t a7)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v30[0] = llvm::Type::getPrimitiveSizeInBits(this);
  v30[1] = v12;
  v13 = llvm::TypeSize::operator unsigned long long();
  v14 = *a5;
  v15 = *a5 >> 5;
  switch(*a5 & 0x1F)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v15 *= 2;
      break;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x12u:
      v15 *= 4;
      break;
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
      v15 = 4;
      break;
    default:
      v15 = 0;
      break;
  }
  if (v13 == 32)
  {
    v32 = *a2;
    v33 = *((_QWORD *)a2 + 2);
    if (v33)
    {
      llvm::MetadataTracking::track();
      v14 = *a5;
    }
    v34 = *((_DWORD *)a2 + 6);
    v16 = (v14 >> 15);
    v17 = a1[24];
    v31 = 257;
    v18 = sub_21DF1A79C((uint64_t)(a1 + 1), 49, a7, v17, (uint64_t)v30);
    result = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(*a1 + 208))(a1, &v32, v16, v18, a4);
    if (v33)
      return llvm::MetadataTracking::untrack();
  }
  else
  {
    v20 = llvm::FixedVectorType::get();
    v31 = 257;
    result = sub_21DF1A79C((uint64_t)(a1 + 1), 49, a7, v20, (uint64_t)v30);
    if (v15)
    {
      v21 = result;
      v22 = 0;
      v23 = (v15 + 3) >> 2;
      if (v23 <= 1)
        v24 = 1;
      else
        v24 = v23;
      do
      {
        v31 = 257;
        v25 = llvm::ConstantInt::get();
        v26 = sub_21DF79584((uint64_t)(a1 + 1), v21, v25, (uint64_t)v30);
        v27 = *a2;
        v28 = *((_QWORD *)a2 + 2);
        if (v28)
          llvm::MetadataTracking::track();
        v29 = *((_DWORD *)a2 + 6);
        result = (*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*a1 + 208))(a1, &v27, v22 + (*a5 >> 15), v26, a4);
        if (v28)
          result = llvm::MetadataTracking::untrack();
        ++v22;
      }
      while (v24 != v22);
    }
  }
  return result;
}

uint64_t sub_21DF1E570(uint64_t a1, __int128 *a2, int a3, uint64_t a4, unsigned int *a5, llvm::Type *this)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[4];
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v22[0] = llvm::Type::getPrimitiveSizeInBits(this);
  v22[1] = v10;
  v11 = llvm::TypeSize::operator unsigned long long();
  v12 = *a5;
  v13 = *a5 >> 5;
  switch(*a5 & 0x1F)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v13 *= 2;
      break;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x12u:
      v13 *= 4;
      break;
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
      v13 = 4;
      break;
    default:
      v13 = 0;
      break;
  }
  if (v11 == 32)
  {
    v27 = *a2;
    v28 = *((_QWORD *)a2 + 2);
    if (v28)
    {
      llvm::MetadataTracking::track();
      v12 = *a5;
    }
    v29 = *((_DWORD *)a2 + 6);
    v14 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 216))(a1, &v27, (v12 >> 15), a4);
    if (v28)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    llvm::FixedVectorType::get();
    v14 = llvm::UndefValue::get();
    if (v13)
    {
      v15 = 0;
      v16 = (v13 + 3) >> 2;
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = v16;
      do
      {
        v24 = *a2;
        v25 = *((_QWORD *)a2 + 2);
        if (v25)
          llvm::MetadataTracking::track();
        v26 = *((_DWORD *)a2 + 6);
        v18 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 216))(a1, &v24, v15 + (*a5 >> 15), a4);
        if (v25)
          llvm::MetadataTracking::untrack();
        v23 = 257;
        v19 = llvm::ConstantInt::get();
        v14 = sub_21DF7980C(a1 + 8, v14, v18, v19, (uint64_t)v22);
        ++v15;
      }
      while (v17 != v15);
    }
  }
  v23 = 257;
  return sub_21DF1A79C(a1 + 8, 49, v14, (uint64_t)this, (uint64_t)v22);
}

uint64_t sub_21DF1E790(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 176);
  v15[0] = *a3;
  v15[1] = v6;
  llvm::StructType::get();
  v7 = llvm::UndefValue::get();
  v11 = 0;
  v16 = 257;
  v8 = sub_21DF1A244(a1 + 8, v7, (uint64_t)a3, (uint64_t)&v11, 1, (uint64_t)v15);
  v9 = llvm::ConstantInt::get();
  v11 = 1;
  v16 = 257;
  return sub_21DF1A244(a1 + 8, v8, v9, (uint64_t)&v11, 1, (uint64_t)v15);
}

uint64_t sub_21DF1E8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::Type ***v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(a1 + 1448))
    strlen(*(const char **)(a1 + 1448));
  v4 = sub_21DF206CC();
  v9 = 257;
  v5 = (llvm::Type ***)sub_21DF191A4(a1 + 8, **(_QWORD **)(*(_QWORD *)v4 + 16), v4, 0, 0, (uint64_t)v8);
  v6 = llvm::ConstantInt::get();
  v9 = 257;
  return sub_21DF19478((uint64_t *)(a1 + 8), 32, v5, v6, (uint64_t)v8);
}

uint64_t *sub_21DF1E9D8@<X0>(uint64_t *result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;

  *(_BYTE *)(a4 + 52) = 0;
  *(_BYTE *)(a4 + 56) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 31) = 0;
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 19:
      v4 = result + 35;
      goto LABEL_6;
    case 6:
    case 7:
    case 8:
    case 9:
      v4 = result + 36;
      goto LABEL_6;
    case 10:
    case 11:
    case 12:
      v4 = result + 37;
      goto LABEL_6;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v4 = result + 33;
LABEL_6:
      v5 = *v4;
      *(_QWORD *)a4 = v5;
      if (a2 <= 9)
      {
        if ((a2 - 2) < 2)
        {
          *(_QWORD *)(a4 + 8) = result[33];
          v5 = result[35];
          goto LABEL_18;
        }
        if ((a2 - 6) < 2)
        {
          *(_QWORD *)(a4 + 8) = result[34];
          v5 = result[36];
          goto LABEL_18;
        }
LABEL_17:
        *(_QWORD *)(a4 + 8) = v5;
LABEL_18:
        *(_QWORD *)(a4 + 16) = v5;
        switch(a2)
        {
          case 2:
          case 6:
          case 14:
            *(_WORD *)(a4 + 33) = 257;
            *(_OWORD *)(a4 + 36) = xmmword_21DFA60E0;
            goto LABEL_21;
          case 3:
          case 7:
          case 10:
          case 15:
            goto LABEL_19;
          case 4:
          case 8:
          case 11:
            *(_BYTE *)(a4 + 34) = 1;
            break;
          case 13:
          case 18:
            *(_BYTE *)(a4 + 33) = 1;
            goto LABEL_22;
          case 16:
            *(_WORD *)(a4 + 33) = 257;
            v8 = 1.251;
            if (a3)
              v8 = 1.6689;
            v9 = -0.75294;
            if (a3)
              v9 = -0.5271;
            *(float *)(a4 + 36) = v9;
            *(_DWORD *)(a4 + 40) = 0;
            *(float *)(a4 + 44) = v8;
            *(_DWORD *)(a4 + 48) = 1065353216;
            *(_BYTE *)(a4 + 52) = 1;
            goto LABEL_23;
          default:
            return result;
        }
        return result;
      }
      if (a2 != 10)
      {
        if (a2 == 19)
        {
          v6 = result[36];
          *(_QWORD *)(a4 + 8) = v6;
          *(_QWORD *)(a4 + 16) = v6;
          *(_QWORD *)(a4 + 24) = 0x200000001;
          return result;
        }
        goto LABEL_17;
      }
      v7 = result[37];
      *(_QWORD *)(a4 + 8) = result[34];
      *(_QWORD *)(a4 + 16) = v7;
LABEL_19:
      *(_BYTE *)(a4 + 33) = 1;
      *(_OWORD *)(a4 + 36) = xmmword_21DFA60F0;
LABEL_21:
      *(_BYTE *)(a4 + 52) = 1;
LABEL_22:
      if ((a2 - 14) <= 2)
LABEL_23:
        *(_BYTE *)(a4 + 32) = 1;
      return result;
    case 18:
      v5 = result[34];
      *(_QWORD *)a4 = v5;
      goto LABEL_17;
    default:
      v5 = 0;
      goto LABEL_17;
  }
}

uint64_t sub_21DF1EB98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  unsigned int v7;
  unsigned int v8;
  uint32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint32x4_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  int8x16_t v22;
  int8x8_t v23;
  __int32 v24;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = (int8x16_t)vdupq_n_s64(a3);
  do
  {
    if (((1 << v3) & *(_DWORD *)(a2 + 32)) != 0)
    {
      v7 = *(_DWORD *)(a2 + v4);
      v8 = ((v7 >> 15) * *(_DWORD *)(a1 + 828)) >> 1;
      switch(v7 & 0x1F)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if ((a3 & (1 << v8)) != 0)
            v13 = 3;
          else
            v13 = 0;
          v14 = 2 << v8;
          v15 = v13 | 0xC;
          goto LABEL_16;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
          v9 = vshlq_u32((uint32x4_t)xmmword_21DFA6100, (uint32x4_t)vdupq_n_s32(v8));
          v10.i64[0] = v9.i32[2];
          v10.i64[1] = v9.i32[3];
          v11 = v10;
          v10.i64[0] = v9.i32[0];
          v10.i64[1] = v9.i32[1];
          v12 = vbicq_s8((int8x16_t)xmmword_21DFA6100, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v10)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v11))));
          goto LABEL_10;
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0x12u:
          v16 = (uint32x4_t)vdupq_n_s32(v8);
          v17 = vshlq_u32((uint32x4_t)xmmword_21DFA6100, v16);
          v18.i64[0] = v17.i32[2];
          v18.i64[1] = v17.i32[3];
          v19 = v18;
          v18.i64[0] = v17.i32[0];
          v18.i64[1] = v17.i32[1];
          v20 = vbicq_s8((int8x16_t)xmmword_21DFA6110, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v19))));
          v21 = vshlq_u32((uint32x4_t)xmmword_21DFA6120, v16);
          v18.i64[0] = v21.i32[2];
          v18.i64[1] = v21.i32[3];
          v22 = v18;
          v18.i64[0] = v21.i32[0];
          v18.i64[1] = v21.i32[1];
          v12 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_21DFA6130, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v22)))), v20);
LABEL_10:
          v23 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
          v24 = v23.i32[0] | v23.i32[1];
          break;
        case 0x13u:
          if ((a3 & (1 << v8)) != 0)
            v13 = 3;
          else
            v13 = 0;
          v14 = 2 << v8;
          v15 = v13 | 0xE;
LABEL_16:
          if ((a3 & v14) != 0)
            v24 = v15;
          else
            v24 = v13;
          break;
        default:
          v24 = 0;
          break;
      }
      v5 |= ((-1 << (v7 >> 5)) & ((int)((v24 & ~(-1 << (v7 >> 5))) >> ((v7 >> 5) - 1) << 31) >> 31) & 0xF | v24 & ~(-1 << (v7 >> 5))) << v4;
    }
    v4 += 4;
    ++v3;
  }
  while (v4 != 32);
  return v5;
}

uint64_t sub_21DF1ED4C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  if ((*(_BYTE *)(a4 + 1) & 1) != 0)
  {
    v8 = sub_21DF79408((uint64_t)a1, a3, 3, 1);
    v9 = llvm::UndefValue::get();
    v10 = *(unsigned int *)(*(_QWORD *)v8 + 32);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v31 = 257;
        v12 = llvm::ConstantInt::get();
        v13 = sub_21DF79584((uint64_t)(a1 + 1), v8, v12, (uint64_t)v30);
        v27 = *(_OWORD *)(a1 + 7);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 1));
        v29 = *((_DWORD *)a1 + 26);
        v14 = a1[23];
        v31 = 257;
        v15 = sub_21DF1A79C((uint64_t)(a1 + 1), 39, v13, v14, (uint64_t)v30);
        v16 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, _QWORD, _QWORD))(*a1 + 144))(a1, &v27, v15, 0, a1[19]);
        if (v28)
          llvm::MetadataTracking::untrack();
        v31 = 257;
        v17 = llvm::ConstantInt::get();
        v9 = sub_21DF7980C((uint64_t)(a1 + 1), v9, v16, v17, (uint64_t)v30);
      }
    }
    v24 = *(_OWORD *)(a1 + 7);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 1));
    v26 = *((_DWORD *)a1 + 26);
    v31 = 257;
    v18 = llvm::ConstantInt::get();
    v19 = sub_21DF79584((uint64_t)(a1 + 1), a3, v18, (uint64_t)v30);
    v20 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*a1 + 88))(a1, &v24, v19, 8, 0, 32);
    if (v25)
      llvm::MetadataTracking::untrack();
    v21 = a1[19];
    v31 = 257;
    v22 = sub_21DF20674((uint64_t)(a1 + 1), v20, v21, (uint64_t)v30);
    return sub_21DF7A518((uint64_t)a1, v9, v22);
  }
  return a3;
}

llvm::Value *sub_21DF1EFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = a3;
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  v5 = *(_QWORD *)(a1 + 1368);
  if (v5)
    v6 = strlen(*(const char **)(a1 + 1368));
  else
    v6 = 0;
  v7 = sub_21DF203DC(a1, v5, v6, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 160));
  v10 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)&v14, 1, (uint64_t)v9);
}

llvm::Value *sub_21DF1F098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v6 = llvm::IntegerType::get();
  v7 = *(_QWORD *)(a1 + 1376);
  if (v7)
    v8 = strlen(*(const char **)(a1 + 1376));
  else
    v8 = 0;
  v9 = a1 + 8;
  v10 = sub_21DF203DC(a1, v7, v8, *(_QWORD *)(a1 + 144), v6);
  v13 = 257;
  v17 = sub_21DF1ABB0(v9, a3, v6, 1, (uint64_t)v12);
  v13 = 257;
  return sub_21DF191A4(v9, *(_QWORD *)(v10 + 24), v10, (uint64_t)&v17, 1, (uint64_t)v12);
}

uint64_t sub_21DF1F1AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 > 1)
    return a2;
  else
    return 0;
}

void sub_21DF1F1B8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  unsigned int v22;
  std::string *p_p;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  char v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  unsigned int v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string __p;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  std::string v65;

  v12 = a5 + a2;
  v13 = a6 + a3;
  v14 = a7 + a4;
  sub_21DF1AF28(&v65, (char *)&unk_21DFAD77A);
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 792) + 24))(*(_QWORD *)(a1 + 792), a8);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 792) + 16))(*(_QWORD *)(a1 + 792));
  v17 = v16;
  if (v12 <= v15)
  {
    if (v14 <= 0x10 && v13 <= v16)
    {
      v31 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v59, v12);
    v18 = std::string::insert(&v59, 0, " buffers (");
    v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v60, "/");
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 792) + 24))(*(_QWORD *)(a1 + 792), a8);
    std::to_string(&__p, v22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v62, ")");
    v28 = v27->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v29 = (const std::string::value_type *)&v63;
    else
      v29 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v30 = HIBYTE(v64);
    else
      v30 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v29, v30);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v13 > v17)
  {
    std::to_string(&v59, v13);
    v32 = std::string::insert(&v59, 0, " textures (");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v60, "/");
    v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 792) + 16))(*(_QWORD *)(a1 + 792));
    std::to_string(&__p, v36);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v38 = __p.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v61, (const std::string::value_type *)v37, v38);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v62, ")");
    v42 = v41->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v64 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v43 = (const std::string::value_type *)&v63;
    else
      v43 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v44 = HIBYTE(v64);
    else
      v44 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v43, v44);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v14 >= 0x11)
  {
    std::to_string(&v59, v14);
    v45 = std::string::insert(&v59, 0, " samplers (");
    v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v60, "/");
    v48 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__p;
    else
      v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v50 = __p.__r_.__value_.__l.__size_;
    v51 = std::string::append(&v61, (const std::string::value_type *)v49, v50);
    v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v53 = std::string::append(&v62, ")");
    v54 = v53->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v64 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v55 = (const std::string::value_type *)&v63;
    else
      v55 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v56 = HIBYTE(v64);
    else
      v56 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v55, v56);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  v31 = 1;
LABEL_80:
  *a9 = v31;
  v57 = (std::string *)(a9 + 8);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21DF205EC(v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
  }
  else
  {
    *v57 = v65;
  }
}

uint64_t sub_21DF1F6D8()
{
  return 0;
}

llvm::Value *sub_21DF1F6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  llvm::Value *v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    v6 = sub_21DF7969C(a1, a2, 4);
    goto LABEL_8;
  }
  v5 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  v6 = sub_21DF7969C(a1, a2, 4);
  if ((_DWORD)v5 == 1)
  {
LABEL_8:
    v14 = v6;
    v15 = llvm::ConstantInt::get();
    v13 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(a3 + 24), a3, (uint64_t)&v14, 2, (uint64_t)v12);
  }
  llvm::FixedVectorType::get();
  v7 = llvm::UndefValue::get();
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v14 = v6;
      v15 = 0;
      v15 = llvm::ConstantInt::get();
      v13 = 257;
      v9 = sub_21DF191A4(a1 + 8, *(_QWORD *)(a3 + 24), a3, (uint64_t)&v14, 2, (uint64_t)v12);
      v13 = 257;
      v10 = llvm::ConstantInt::get();
      v7 = sub_21DF7980C(a1 + 8, v7, (uint64_t)v9, v10, (uint64_t)v12);
    }
  }
  return (llvm::Value *)v7;
}

llvm::Value *sub_21DF1F878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  _BYTE v14[32];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12
    && (v6 = *(unsigned int *)(*(_QWORD *)a2 + 32), (_DWORD)v6 != 1))
  {
    llvm::FixedVectorType::get();
    v7 = llvm::UndefValue::get();
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v15 = 257;
        v10 = llvm::ConstantInt::get();
        v11 = sub_21DF79584(a1 + 8, a2, v10, (uint64_t)v14);
        v16 = sub_21DF7969C(a1, v11, 2);
        v17 = 0;
        v17 = llvm::ConstantInt::get();
        v15 = 257;
        v12 = sub_21DF191A4(a1 + 8, *(_QWORD *)(a3 + 24), a3, (uint64_t)&v16, 2, (uint64_t)v14);
        v15 = 257;
        v13 = llvm::ConstantInt::get();
        v7 = sub_21DF7980C(a1 + 8, v7, (uint64_t)v12, v13, (uint64_t)v14);
      }
    }
  }
  else
  {
    v16 = sub_21DF7969C(a1, a2, 2);
    v17 = llvm::ConstantInt::get();
    v15 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(a3 + 24), a3, (uint64_t)&v16, 2, (uint64_t)v14);
  }
  return (llvm::Value *)v7;
}

uint64_t sub_21DF1FA3C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  llvm::Type ***v21;
  llvm::Type ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  BOOL v31;
  _WORD v32[20];
  _BYTE v33[32];
  __int16 v34;

  v12 = (uint64_t *)(a1 + 8);
  v34 = 257;
  v13 = llvm::ConstantInt::get();
  v14 = sub_21DF1AE6C((uint64_t)v12, a2, v13, (uint64_t)v33);
  v15 = *(_QWORD *)(a1 + 184);
  v34 = 257;
  v16 = sub_21DF1ABB0((uint64_t)v12, v14, v15, 0, (uint64_t)v33);
  if (a6)
  {
    v34 = 257;
    v17 = llvm::ConstantInt::get();
    v18 = sub_21DF1A184((uint64_t)v12, v16, v17, (uint64_t)v33);
    v32[16] = 257;
    v19 = llvm::ConstantInt::get();
    if (*(unsigned __int8 *)(v18 + 16) > 0x14u
      || (v19 ? (v20 = *(unsigned __int8 *)(v19 + 16) > 0x14u) : (v20 = 1), v20))
    {
      v34 = 257;
      v21 = (llvm::Type ***)llvm::BinaryOperator::Create();
      sub_21DF1A3A4(v12, (uint64_t)v21, (uint64_t)v32);
    }
    else
    {
      v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80) + 168))(*(_QWORD *)(a1 + 80), v18, v19, 0);
      v21 = (llvm::Type ***)v30;
      if (v30)
        v31 = *(unsigned __int8 *)(v30 + 16) >= 0x1Cu;
      else
        v31 = 0;
      if (v31)
        sub_21DF1A3A4(v12, v30, (uint64_t)v32);
    }
    if (a5)
    {
      v22 = (llvm::Type ***)llvm::ConstantInt::get();
      v21 = (llvm::Type ***)sub_21DF7A358(a1, v21, v22, 38);
    }
    v23 = *(_QWORD *)(a1 + 160);
    v34 = 257;
    v24 = sub_21DF2053C((uint64_t)v12, (uint64_t)v21, v23, (uint64_t)v33);
  }
  else
  {
    if ((a4 + a3) <= 0x1F)
    {
      v34 = 257;
      v25 = llvm::ConstantInt::get();
      v16 = sub_21DF1A410((uint64_t)v12, v16, v25, (uint64_t)v33);
    }
    v26 = *(_QWORD *)(a1 + 160);
    v34 = 257;
    v24 = sub_21DF20594((uint64_t)v12, v16, v26, (uint64_t)v33);
  }
  v27 = v24;
  if (a5)
  {
    v28 = llvm::ConstantFP::get();
    v34 = 257;
    return sub_21DF20300((uint64_t)v12, v27, v28, (uint64_t)v33);
  }
  return v27;
}

uint64_t sub_21DF1FCC4(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v10 = sub_21DF78BE0(a1, a2, 1);
  v11 = a1 + 8;
  v25 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v27 = *(_DWORD *)(a1 + 104);
  v12 = llvm::ConstantFP::get();
  v13 = llvm::ConstantFP::get();
  v14 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, &v25, v10, v12, v13, 0);
  if (v26)
    llvm::MetadataTracking::untrack();
  v15 = llvm::ConstantFP::get();
  v24 = 257;
  v28 = sub_21DF20300(a1 + 8, v14, v15, (uint64_t)v23);
  v16 = *(_QWORD *)(a1 + 1160);
  if (v16)
    v17 = strlen(*(const char **)(a1 + 1160));
  else
    v17 = 0;
  v18 = sub_21DF203DC(a1, v16, v17, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 160));
  v24 = 257;
  v19 = (uint64_t)sub_21DF191A4(a1 + 8, **(_QWORD **)(*(_QWORD *)v18 + 16), v18, (uint64_t)&v28, 1, (uint64_t)v23);
  if ((a4 + a3) <= 0x1F && a6)
  {
    v24 = 257;
    v20 = llvm::ConstantInt::get();
    v19 = sub_21DF1A410(v11, v19, v20, (uint64_t)v23);
  }
  v24 = 257;
  v21 = llvm::ConstantInt::get();
  return sub_21DF1A184(v11, v19, v21, (uint64_t)v23);
}

uint64_t sub_21DF1FF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  llvm::Type ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[32];
  __int16 v17;

  v4 = llvm::ConstantInt::get();
  v5 = 0;
  for (i = 0; i != 4; ++i)
  {
    v17 = 257;
    v7 = llvm::ConstantInt::get();
    v8 = (llvm::Type ***)sub_21DF79584(a1 + 8, a2, v7, (uint64_t)v16);
    if (i == 3)
      v9 = 2;
    else
      v9 = 10;
    v10 = sub_21DF7A400(a1, v8, v9, 0);
    v11 = *(_QWORD *)(a1 + 192);
    v17 = 257;
    v12 = sub_21DF1ABB0(a1 + 8, v10, v11, 0, (uint64_t)v16);
    v17 = 257;
    v13 = llvm::ConstantInt::get();
    v14 = sub_21DF1A184(a1 + 8, v12, v13, (uint64_t)v16);
    v17 = 257;
    result = sub_21DF1A4A0(a1 + 8, v4, v14, (uint64_t)v16);
    v4 = result;
    v5 += 10;
  }
  return result;
}

uint64_t sub_21DF2004C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  if (a4 == 3)
    v5 = 4;
  else
    v5 = 5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 616))(a1, v5, a3, a2);
}

uint64_t sub_21DF2006C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 608))(a1, 5, a1[24], a2, a3, a4);
}

uint64_t sub_21DF2008C(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[32];
  __int16 v21;

  v11 = llvm::ConstantInt::get();
  v12 = (char *)&unk_21DFA094B + 9 * a2;
  v13 = *v12;
  if (*v12)
  {
    v14 = 0;
    do
    {
      v21 = 257;
      v15 = llvm::ConstantInt::get();
      v16 = sub_21DF79584((uint64_t)(a1 + 1), a4, v15, (uint64_t)v20);
      v17 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*a1 + 576))(a1, v16, v12[v14 + 1], v12[v14 + 5], a5, a6);
      v21 = 257;
      v11 = sub_21DF1A4A0((uint64_t)(a1 + 1), v11, v17, (uint64_t)v20);
      ++v14;
    }
    while (v13 != v14);
  }
  return sub_21DF79090(a1, v11, a3);
}

uint64_t sub_21DF201A8(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[32];
  __int16 v27;

  v11 = (unsigned __int8 *)&unk_21DFA094B + 9 * a2;
  v12 = *v11;
  llvm::FixedVectorType::get();
  v13 = llvm::UndefValue::get();
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v15 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*a1 + 568))(a1, a4, v11[i + 5], v11[i + 1], a5, a6);
      v16 = sub_21DF79090(a1, v15, a3);
      v17 = v11;
      v18 = a3;
      v19 = a4;
      v20 = a5;
      v21 = a6;
      v22 = v16;
      v27 = 257;
      v23 = llvm::ConstantInt::get();
      v24 = v22;
      a6 = v21;
      a5 = v20;
      a4 = v19;
      a3 = v18;
      v11 = v17;
      v13 = sub_21DF7980C((uint64_t)(a1 + 1), v13, v24, v23, (uint64_t)v26);
    }
  }
  return v13;
}

uint64_t sub_21DF202E0()
{
  return 0;
}

uint64_t sub_21DF202E8()
{
  return 0;
}

uint64_t sub_21DF202F0()
{
  return 0;
}

uint64_t sub_21DF202F8()
{
  return 0;
}

uint64_t sub_21DF20300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = sub_21DF204B4(a1, 18, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    sub_21DF19658(a1, v7);
    sub_21DF1A3A4((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_21DF203DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t __src;
  void *v9[2];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  __src = a5;
  v9[0] = v10;
  v9[1] = (void *)0x100000000;
  sub_21DF1B18C((uint64_t)v9, &__src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v6 = v5;
  if (v9[0] != v10)
    free(v9[0]);
  return v6;
}

uint64_t sub_21DF204B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  BOOL v9;

  v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    a3 = 0;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    a4 = 0;
  if (a3)
    v6 = a4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72));
    if (v5)
      v9 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      sub_21DF1A3A4((uint64_t *)a1, v5, a5);
  }
  return v5;
}

uint64_t sub_21DF2053C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 44, a2, a3, a4);
}

uint64_t sub_21DF20594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 43, a2, a3, a4);
}

void *sub_21DF205EC(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_21DF20674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 45, a2, a3, a4);
}

uint64_t sub_21DF206CC()
{
  uint64_t v0;

  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  return v0;
}

uint64_t sub_21DF2074C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = sub_21DF204B4(a1, 14, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    sub_21DF19658(a1, v7);
    sub_21DF1A3A4((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_21DF20828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = sub_21DF204B4(a1, 16, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    sub_21DF19658(a1, v7);
    sub_21DF1A3A4((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_21DF20904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APFloatBase *v13;
  uint64_t v14;
  int isExactlyValue;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  _BYTE v29[24];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a4 + 16) == 17)
    v9 = a4;
  else
    v9 = 0;
  if (!a3 || *(_BYTE *)(a3 + 16) != 17)
    goto LABEL_16;
  v10 = *(_QWORD *)(a3 + 32);
  v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v10 ? *(_QWORD *)(a3 + 40) : a3 + 24;
  if ((*(_BYTE *)(v11 + 28) & 7) != 3 || v9 == 0)
    goto LABEL_16;
  v28 = 0;
  v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v29, 1.0);
  v14 = llvm::APFloatBase::IEEEdouble(v13);
  MEMORY[0x2207A7264](v30, v29, v14);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v29);
  llvm::APFloat::convert();
  isExactlyValue = llvm::ConstantFP::isExactlyValue();
  sub_21DF20B38((llvm::detail::IEEEFloat *)v30);
  if (isExactlyValue)
  {
    v25 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v27 = *(_DWORD *)(v8 + 104);
    v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, &v25, a2, *(unsigned __int8 *)(a1 + 40));
    if (v26)
LABEL_19:
      llvm::MetadataTracking::untrack();
  }
  else
  {
LABEL_16:
    v22 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v24 = *(_DWORD *)(v8 + 104);
    v17 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 56))(v8, &v22, a2, a3, *(unsigned __int8 *)(a1 + 40));
    if (v23)
      llvm::MetadataTracking::untrack();
    v19 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v21 = *(_DWORD *)(v8 + 104);
    v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, &v19, v17, a4, *(unsigned __int8 *)(a1 + 40));
    if (v20)
      goto LABEL_19;
  }
  return v16;
}

llvm::detail::IEEEFloat *sub_21DF20B38(llvm::detail::IEEEFloat *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)a1;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v2)
  {
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v3)
    {
      v4 = v3 - 16;
      v5 = *(_QWORD *)(v3 - 8);
      if (v5)
      {
        v6 = v3 - 24;
        v7 = 32 * v5;
        do
        {
          sub_21DF20B38(v6 + v7);
          v7 -= 32;
        }
        while (v7);
      }
      MEMORY[0x2207A7948](v4, 0x1072C801E5F02E8);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
  }
  return a1;
}

uint64_t sub_21DF20BC4(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t v8;
  const std::string::value_type *v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  std::string v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int16 v25;
  _QWORD v26[2];
  _OWORD v27[2];
  llvm::Constant *v28[8];

  v28[5] = *(llvm::Constant **)MEMORY[0x24BDAC8D0];
  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  sub_21DF1AF28(&v20, *(char **)(a1 + 1704));
  v8 = *(_QWORD *)a3;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  if (v8 == *(_QWORD *)(a1 + 152))
    v9 = ".f16";
  else
    v9 = ".f32";
  std::string::append(&v20, v9);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v20;
  else
    v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  v12 = sub_21DF1B0B0(a1, (uint64_t)v10, size, v8, v8, v8);
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    v13 = llvm::UndefValue::get();
    memset(v28, 0, 32);
    memset(v27, 0, sizeof(v27));
    sub_21DF79A74(a1, a3, v28);
    sub_21DF79A74(a1, a4, (llvm::Constant **)v27);
    v14 = *(unsigned int *)(*(_QWORD *)a3 + 32);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *((_QWORD *)v27 + i);
        v26[0] = v28[i];
        v26[1] = v16;
        v25 = 257;
        v17 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)v26, 2, (uint64_t)v24);
        v25 = 257;
        v18 = llvm::ConstantInt::get();
        v13 = sub_21DF7980C(a1 + 8, v13, (uint64_t)v17, v18, (uint64_t)v24);
      }
    }
  }
  else
  {
    v28[0] = a3;
    v28[1] = a4;
    v25 = 257;
    v13 = (uint64_t)sub_21DF191A4(a1 + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)v28, 2, (uint64_t)v24);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v13;
}

uint64_t sub_21DF20E2C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)a3 != *a4)
    sub_21DF79DF4(a1, *(_DWORD *)(*(_QWORD *)a3 + 32), (uint64_t)a4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_21DF20F2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char **v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 72) && !*(_BYTE *)(v4 + 1712))
    v5 = (char **)(v4 + 1104);
  else
    v5 = (char **)(v4 + 1096);
  v6 = sub_21DF2102C(v4, (uint64_t)&v8, a2, *v5);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF20FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  result = a1 + 56;
  if (v4)
    result = llvm::MetadataTracking::track();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t sub_21DF2101C(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  if (v2)
    return llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *sub_21DF2102C(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  int v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string::size_type size;
  uint64_t v19;
  llvm::Value *v20;
  void *__p[2];
  uint64_t v23;
  __int16 v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;

  v30 = a3;
  v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  if (v28)
    llvm::MetadataTracking::track();
  v29 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v27);
  if (v28)
    llvm::MetadataTracking::untrack();
  v8 = *a3;
  sub_21DF1AF28(&v26, a4);
  std::string::append(&v26, ".");
  v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v25, *(_DWORD *)(v8 + 32));
    v10 = std::string::insert(&v25, 0, "v");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v23 >= 0)
      v13 = HIBYTE(v23);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(&v26, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v9 = *(_DWORD *)(v8 + 8);
  }
  v14 = v9 & 0xFE;
  v15 = v8;
  if (v14 == 18)
    v15 = **(_QWORD **)(v8 + 16);
  if (v15 == *(_QWORD *)(a1 + 152))
    v16 = "f16";
  else
    v16 = "f32";
  std::string::append(&v26, v16);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v26;
  else
    v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  v19 = sub_21DF203DC(a1, (uint64_t)v17, size, v8, v8);
  v24 = 257;
  v20 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v19 + 24), v19, (uint64_t)&v30, 1, (uint64_t)__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v20;
}

uint64_t sub_21DF21210(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24E1E7850;
  *(_QWORD *)(a1 + 16) = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (qword_2553B2FB8 != -1)
    dispatch_once(&qword_2553B2FB8, &unk_24E1E78D0);
  *(_DWORD *)(a1 + 44) = 60;
  return a1;
}

uint64_t *sub_21DF21284(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      v3 = *(unsigned int *)(v2 + 8);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = 8 * v3;
        do
        {
          v6 = *(llvm **)(*(_QWORD *)v2 + v4);
          if (v6 != (llvm *)-8 && v6 != 0)
            llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 33));
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)v2);
    JUMPOUT(0x2207A7960);
  }
  return result;
}

_QWORD *sub_21DF21324(char *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE __p[12];
  __int16 v12;
  char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_21DF1678C();
  sub_21DF1AF28(__p, a1);
  v2 = qword_2553B2F90;
  if (!qword_2553B2F90)
    goto LABEL_8;
  v3 = &qword_2553B2F90;
  do
  {
    v4 = sub_21DF214C4((_QWORD *)(v2 + 32), __p);
    v5 = (uint64_t *)(v2 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v2;
      v3 = (uint64_t *)v2;
    }
    v2 = *v5;
  }
  while (*v5);
  if (v3 == &qword_2553B2F90 || sub_21DF214C4(__p, v3 + 4))
LABEL_8:
    v3 = &qword_2553B2F90;
  if (SHIBYTE(v14) < 0)
    operator delete(*(void **)__p);
  if (v3 == &qword_2553B2F90)
    return 0;
  v6 = v3 + 7;
  if (*((char *)v3 + 79) < 0)
    v6 = (_QWORD *)*v6;
  v7 = sub_21DF168A4();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v3 + 55) < 0)
      v8 = v3[5];
    else
      v8 = *((unsigned __int8 *)v3 + 55);
    if (*((char *)v3 + 79) < 0)
      v10 = v3[8];
    else
      v10 = *((unsigned __int8 *)v3 + 79);
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "static const char *AGCEnv::getValue(const char *)";
    v12 = 2080;
    v13 = a1;
    v14 = 2048;
    v15 = v8;
    v16 = 2080;
    v17 = v6;
    v18 = 2048;
    v19 = v10;
    _os_log_debug_impl(&dword_21DF15000, v7, OS_LOG_TYPE_DEBUG, "%s: %s[%lu] = %s[%lu]\n", __p, 0x34u);
  }
  return v6;
}

BOOL sub_21DF214C4(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t sub_21DF2152C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  _BYTE v34[32];
  __int16 v35;

  v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  if (v32)
    llvm::MetadataTracking::track();
  v33 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v31);
  if (v32)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a4 + 16) && (*a3 == *(_QWORD *)(a1 + 272) || *a3 == *(_QWORD *)(a1 + 264)))
  {
    if (*(float *)a4 == *(float *)(a4 + 4) && *(float *)(a4 + 8) == *(float *)(a4 + 12))
    {
      v10 = llvm::ConstantFP::get();
      v11 = llvm::ConstantFP::get();
      v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v30 = *(_DWORD *)(a1 + 104);
      a3 = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v28, a3, v10, v11, a5);
      if (v29)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      v12 = sub_21DF79408(a1, (uint64_t)a3, 3, 1);
      v35 = 257;
      v13 = llvm::ConstantInt::get();
      v14 = sub_21DF79584(a1 + 8, (uint64_t)a3, v13, (uint64_t)v34);
      v15 = llvm::ConstantFP::get();
      v16 = llvm::ConstantFP::get();
      v17 = llvm::ConstantFP::get();
      v18 = llvm::ConstantFP::get();
      v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v27 = *(_DWORD *)(a1 + 104);
      v19 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v25, v12, v15, v16, a5);
      if (v26)
        llvm::MetadataTracking::untrack();
      v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v24 = *(_DWORD *)(a1 + 104);
      v20 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v22, v14, v17, v18, a5);
      if (v23)
        llvm::MetadataTracking::untrack();
      return sub_21DF7A518(a1, v19, v20);
    }
  }
  return (uint64_t)a3;
}

uint64_t sub_21DF217F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a1 + 40);
  v7 = *(_OWORD *)(v4 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 8));
  v9 = *(_DWORD *)(v4 + 104);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 136))(v4, &v7, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

int32x2_t *sub_21DF21890(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  int32x2_t *v18;
  unint64_t v19;
  int32x2_t *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t **v40;
  unint64_t v41;
  __int32 v42;
  uint64_t v43;
  int32x2_t *v45;
  void *v46;
  char v47[8];
  void *__p;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[33];

  v58[32] = *MEMORY[0x24BDAC8D0];
  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v12 = v9 % v10;
    }
    else
    {
      v12 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2)
            return (int32x2_t *)(i + 3);
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  v50 = 3;
  v51 = 0;
  v52 = 1;
  v53 = 0uLL;
  v54 = 0;
  v55 = 1;
  v56 = v58;
  v57 = 0x800000000;
  if (v10)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v17 = *(void ***)(*(_QWORD *)(a1 + 48) + 8 * v3);
    if (v17)
    {
      v18 = (int32x2_t *)*v17;
      if (*v17)
      {
        do
        {
          v19 = (unint64_t)v18[1];
          if (v19 == v9)
          {
            if (*(_QWORD *)&v18[2] == a2)
              goto LABEL_90;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v10)
                v19 %= v10;
            }
            else
            {
              v19 &= v10 - 1;
            }
            if (v19 != v3)
              break;
          }
          v18 = (int32x2_t *)*v18;
        }
        while (v18);
      }
    }
  }
  v20 = (int32x2_t *)(a1 + 64);
  v18 = (int32x2_t *)operator new(0x68uLL);
  *v18 = 0;
  v18[1] = (int32x2_t)v9;
  v18[2] = (int32x2_t)a2;
  v18[3].i32[0] = 2;
  v18[4] = (int32x2_t)&v18[6];
  v18[5] = (int32x2_t)0x400000000;
  v18[10] = 0;
  v18[11] = 0;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v22 = *(float *)(a1 + 80);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *(_QWORD *)(a1 + 56);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_46;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(_QWORD *)&prime >> 61)
            sub_21DF256A4();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v20;
          if (*v20)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v31) = v20;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  v38 = *(_QWORD *)(a1 + 48);
                  if (!*(_QWORD *)(v38 + 8 * v37))
                  {
                    *(_QWORD *)(v38 + 8 * v37) = v30;
                    goto LABEL_71;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_71:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_75;
        }
        v46 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v46)
          operator delete(v46);
        v10 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_75:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v39 = *(_QWORD *)(a1 + 48);
  v40 = *(int32x2_t ***)(v39 + 8 * v3);
  if (v40)
  {
    *v18 = (int32x2_t)*v40;
  }
  else
  {
    *v18 = *v20;
    *v20 = (int32x2_t)v18;
    *(_QWORD *)(v39 + 8 * v3) = v20;
    if (!*(_QWORD *)v18)
      goto LABEL_89;
    v41 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v41 >= v10)
        v41 %= v10;
    }
    else
    {
      v41 &= v10 - 1;
    }
    v40 = (int32x2_t **)(*(_QWORD *)(a1 + 48) + 8 * v41);
  }
  *v40 = v18;
LABEL_89:
  ++*(_QWORD *)(a1 + 72);
LABEL_90:
  v45 = v18 + 3;
  sub_21DF22C94((uint64_t)&v53, (uint64_t)&v50, 0);
  sub_21DF22D7C((uint64_t)v47, a1, a2, a3, 0, (uint64_t)&v18[3], (int32x2_t *)&v53);
  sub_21DF24154((uint64_t)&v53);
  v42 = v53;
  v18[10].i32[0] = HIDWORD(v52);
  v18[10].i32[1] = v42;
  v18[11] = vrev64_s32(*(int32x2_t *)((char *)&v53 + 4));
  v18[12] = (int32x2_t)a3;
  if (v49 < 0)
    operator delete(__p);
  if (v56 != v58)
    free(v56);
  v43 = v51;
  v51 = 0;
  if (v43)
    MEMORY[0x2207A7960](v43, 0x1000C4052888210);
  return v45;
}

void sub_21DF21E74(char *a1, char *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  if (a2 != a1)
  {
    v3 = a2 - 40;
    do
    {
      v4 = (char *)*((_QWORD *)v3 - 2);
      if (v3 != v4)
        free(v4);
      v5 = (char *)*((_QWORD *)v3 - 8);
      if (v3 - 48 != v5)
        free(v5);
      v6 = v3 - 64;
      v3 -= 104;
    }
    while (v6 != a1);
  }
}

uint64_t sub_21DF21ED0(uint64_t a1, char *a2)
{
  char *v2;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  char *v12;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v5 + 104 * v4;
    if (v5 <= (unint64_t)a2 && v10 > (unint64_t)a2)
    {
      v12 = &a2[-v5];
      sub_21DF22B84(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v12[*(_QWORD *)a1];
    }
    else
    {
      sub_21DF22B84(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 104 * v6);
  *v7 = v7 + 2;
  v7[1] = 0x400000000;
  if (*((_DWORD *)v2 + 2))
    sub_21DF22A7C((uint64_t)v7, (uint64_t)v2);
  v8 = v5 + 104 * v6;
  *(_QWORD *)(v8 + 48) = v8 + 64;
  result = v8 + 48;
  *(_QWORD *)(result + 8) = 0x400000000;
  if (*((_DWORD *)v2 + 14))
    result = sub_21DF22A7C(result, (uint64_t)(v2 + 48));
  *(_DWORD *)(v5 + 104 * v6 + 96) = *((_DWORD *)v2 + 24);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_21DF21FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  llvm::ArrayType *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  void *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[24];
  void *v29;
  uint64_t v30;
  _BYTE v31[32];
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _QWORD v37[5];
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_21DF22870(a1);
  sub_21DF227A4(a1 + 1000, *(_DWORD *)(*(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 96));
  sub_21DF22800(a1);
  v22 = v24;
  v23 = 0x400000000;
  if (*(_DWORD *)(a1 + 64))
  {
    sub_21DF226D8((uint64_t)&v22, a1 + 56);
    v25 = &v27;
    v26 = (void *)0x400000000;
    v29 = v31;
    v30 = 0x400000000;
    if ((_DWORD)v23)
      sub_21DF226D8((uint64_t)&v29, (uint64_t)&v22);
  }
  else
  {
    v25 = &v27;
    v26 = (void *)0x400000000;
    v29 = v31;
    v30 = 0x400000000;
  }
  LODWORD(v32) = 0;
  sub_21DF21ED0(a1 + 152, (char *)&v25);
  if (v29 != v31)
    free(v29);
  if (v25 != &v27)
    free(v25);
  if (v22 != v24)
    free(v22);
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v4 = *(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160);
  *(_DWORD *)(v4 - 8) = *(_DWORD *)(v4 - 96);
  sub_21DF19CD0(v4 - 104, 0);
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(uint64_t **)(a2 + 8);
    v8 = 8 * v5;
    do
    {
      if (*v7)
        v6 |= sub_21DF22340(a1, *v7);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  LODWORD(v25) = 7;
  v26 = v28;
  v27 = 0x400000000;
  v32 = v34;
  v33 = 0x800000000;
  v35 = v37;
  v36 = 0x400000000;
  v37[4] = 0;
  v38 = 0;
  v39 = 0;
  if ((v6 & 1) != 0)
  {
    sub_21DF22680(a1);
    v39 = *(_QWORD *)(a1 + 24);
    sub_21DF22448(a1, (uint64_t)&v25);
  }
  sub_21DF22870(a1);
  v9 = (_QWORD *)(a1 + 56);
  sub_21DF226D8(a1 + 56, *(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 56);
  v10 = (llvm::ArrayType *)llvm::StructType::get();
  v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11)
  {
    v12 = *v9 + 8 * v11;
    do
    {
      v13 = *(_QWORD *)(v12 - 8);
      v12 -= 8;
      v10 = (llvm::ArrayType *)llvm::ArrayType::get(v10, (llvm::Type *)*(unsigned int *)(v13 + 16));
    }
    while (v12 != *v9);
    v14 = *(_DWORD *)(a1 + 64);
    if (v14)
    {
      v15 = *(_DWORD *)(a1 + 1056) - v14;
      v16 = *(_DWORD *)(a1 + 1008) - v14;
      *(_DWORD *)(a1 + 1056) = v15;
      *(_DWORD *)(a1 + 1008) = v16;
    }
  }
  --*(_DWORD *)(a1 + 1008);
  v17 = *(_DWORD *)(a1 + 160) - 1;
  *(_DWORD *)(a1 + 160) = v17;
  v18 = *(_QWORD *)(a1 + 152) + 104 * v17;
  v19 = *(void **)(v18 + 48);
  if (v19 != (void *)(v18 + 64))
    free(v19);
  if (*(_QWORD *)v18 != v18 + 16)
    free(*(void **)v18);
  sub_21DF19CD0(*(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104, (uint64_t)v10);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v20 = *(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160);
  *(_DWORD *)(v20 - 8) = *(_DWORD *)(v20 - 96);
  sub_21DF19CD0(v20 - 104, 0);
  if (v35 != v37)
    free(v35);
  if (v32 != v34)
    free(v32);
  if (v26 != v28)
    free(v26);
  return v6 & 1;
}

uint64_t sub_21DF22340(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;

  while (1)
  {
    v3 = *(_DWORD *)a2;
    if (*(_DWORD *)a2)
      break;
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (v3 <= 2)
    return sub_21DF21FC0(a1);
  switch(v3)
  {
    case 3u:
      v4 = *(_DWORD *)(a1 + 64);
      if (v4 >= *(_DWORD *)(a1 + 68))
      {
        v7 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v7;
        v4 = *(_DWORD *)(a1 + 64);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4) = a2;
      ++*(_DWORD *)(a1 + 64);
      result = sub_21DF22340(a1, *(_QWORD *)(a2 + 8));
      --*(_DWORD *)(a1 + 64);
      return result;
    case 4u:
      v6 = (_DWORD *)(a1 + 48);
      goto LABEL_12;
    case 5u:
      v6 = (_DWORD *)(a1 + 40);
      goto LABEL_12;
    case 6u:
      v6 = (_DWORD *)(a1 + 44);
LABEL_12:
      sub_21DF22558(a1, a2, v6);
      return 1;
    case 7u:
      sub_21DF22448(a1, a2);
      goto LABEL_14;
    default:
LABEL_14:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_21DF22448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::ArrayType *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;

  v4 = a1 + 1000;
  sub_21DF227A4(a1 + 1000, *(_DWORD *)(*(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 96));
  sub_21DF227A4(v4, *(_DWORD *)(a1 + 112));
  sub_21DF22800(a1);
  sub_21DF226D8(a2 + 176, a1 + 1048);
  v5 = *(unsigned int *)(a1 + 1008);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 1000);
    v7 = 4 * v5;
    do
    {
      v6 += 4;
      v8 = llvm::ConstantInt::get();
      sub_21DF19CD0(a2 + 96, v8);
      v7 -= 4;
    }
    while (v7);
  }
  v9 = *(llvm::ArrayType **)(a2 + 240);
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(a1 + 56) + 8 * v10;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      v11 -= 8;
      v9 = (llvm::ArrayType *)llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(v12 + 16));
    }
    while (v11 != *(_QWORD *)(a1 + 56));
  }
  result = sub_21DF19CD0(a1 + 104, (uint64_t)v9);
  v14 = *(_DWORD *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 1008);
  if (v14)
  {
    v15 -= v14;
    *(_DWORD *)(a1 + 1056) -= v14;
  }
  *(_DWORD *)(a1 + 1008) = v15 - 2;
  return result;
}

uint64_t sub_21DF22558(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_21DF22680(a1);
  *(_DWORD *)(a2 + 92) = *a3;
  sub_21DF226D8(a2 + 176, a1 + 1048);
  v6 = *(unsigned int *)(a1 + 1008);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 1000);
    v8 = 4 * v6;
    do
    {
      v7 += 4;
      v9 = llvm::ConstantInt::get();
      sub_21DF19CD0(a2 + 96, v9);
      v8 -= 4;
    }
    while (v8);
  }
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a1 + 56);
    v12 = 8 * v10;
    v13 = 1;
    do
    {
      v14 = *v11++;
      v13 *= *(_DWORD *)(v14 + 16);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    v13 = 1;
  }
  v15 = a2 + 96;
  v16 = llvm::ConstantInt::get();
  sub_21DF19CD0(v15, v16);
  v17 = llvm::ConstantInt::get();
  sub_21DF19CD0(v15, v17);
  v18 = llvm::ConstantInt::get();
  result = sub_21DF19CD0(v15, v18);
  *a3 += v13;
  return result;
}

uint64_t sub_21DF22680(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 112))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 152) + 104 * *(unsigned int *)(result + 160) - 104;
    v3 = llvm::StructType::get();
    result = sub_21DF19CD0(v2, v3);
    *(_DWORD *)(v1 + 112) = 0;
  }
  return result;
}

uint64_t sub_21DF226D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_21DF227A4(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_21DF22800(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 64);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = *(uint64_t **)(result + 56);
    v4 = result + 1048;
    v5 = result + 1000;
    v6 = 8 * v1;
    do
    {
      v7 = *v3++;
      sub_21DF19CD0(v4, *(unsigned int *)(v7 + 24) | ((unint64_t)*(unsigned int *)(v2 + 1008) << 32));
      result = sub_21DF227A4(v5, 0);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_21DF22870(uint64_t a1)
{
  llvm::ArrayType *v2;
  int v3;
  int v4;
  llvm::ArrayType *v5;
  llvm::ArrayType *v6;
  llvm::ArrayType *v7;
  llvm::ArrayType *v8;
  llvm::ArrayType *v9;
  llvm::ArrayType *v10;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Type *v15;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(llvm::ArrayType **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 52);
  v4 = *(unsigned __int8 *)(a1 + 53);
  v5 = (llvm::ArrayType *)llvm::ArrayType::get(v2, (llvm::Type *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 1608));
  v6 = (llvm::ArrayType *)llvm::ArrayType::get(v5, (llvm::Type *)*(unsigned int *)(a1 + 40));
  v7 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 32), (llvm::Type *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 1612));
  v8 = (llvm::ArrayType *)llvm::ArrayType::get(v7, (llvm::Type *)*(unsigned int *)(a1 + 44));
  v9 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 24), (llvm::Type *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 1680));
  v10 = *(llvm::ArrayType **)(a1 + 32);
  llvm::ArrayType::get(v10, 0);
  v11 = (llvm::Type *)*(unsigned int *)(a1 + 48);
  if ((_DWORD)v11)
    llvm::ArrayType::get(v2, v11);
  if (*(_DWORD *)(a1 + 40))
  {
    if (v3)
      v12 = 2;
    else
      v12 = 1;
    llvm::ArrayType::get(v6, (llvm::Type *)v12);
  }
  if (*(_DWORD *)(a1 + 44))
  {
    if (v4)
      v13 = 2;
    else
      v13 = 1;
    llvm::ArrayType::get(v8, (llvm::Type *)v13);
  }
  v14 = (llvm::Type *)*(unsigned int *)(a1 + 40);
  if ((_DWORD)v14)
  {
    llvm::ArrayType::get(v9, v14);
    v15 = (llvm::Type *)*(unsigned int *)(a1 + 40);
    if ((_DWORD)v15)
      llvm::ArrayType::get(v10, v15);
  }
  v16 = (llvm::Type *)*(unsigned int *)(a1 + 44);
  if ((_DWORD)v16)
    llvm::ArrayType::get(v10, v16);
  if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 40))
  {
    v17 = *(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104;
    if (!*(_DWORD *)(a1 + 44))
    {
      v18 = llvm::StructType::get();
      goto LABEL_22;
    }
  }
  v18 = llvm::StructType::get();
LABEL_22:
  *(_QWORD *)(*(_QWORD *)v17 + 8 * *(unsigned int *)(v17 + 96)) = v18;
  return sub_21DF22680(a1);
}

uint64_t sub_21DF22A7C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v7)
    {
      if ((_DWORD)v7)
        memmove(*(void **)a1, v4, 8 * v7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v7)
    {
      if ((_DWORD)v8)
      {
        memmove(*(void **)a1, v4, 8 * v8);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v8 = 0;
LABEL_14:
    v9 = *(unsigned int *)(a2 + 8);
    if (v8 != v9)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v7;
LABEL_17:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_21DF22B84(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(char **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = 0;
    v6 = 104 * v4;
    do
    {
      v7 = (_QWORD *)(v2 + v5);
      *v7 = v2 + v5 + 16;
      v7[1] = 0x400000000;
      if (*(_DWORD *)&v3[v5 + 8])
        v7 = (_QWORD *)sub_21DF22A7C((uint64_t)v7, (uint64_t)&v3[v5]);
      v7[6] = v7 + 8;
      v8 = (uint64_t)(v7 + 6);
      *(_QWORD *)(v8 + 8) = 0x400000000;
      if (*(_DWORD *)&v3[v5 + 56])
        sub_21DF22A7C(v8, (uint64_t)&v3[v5 + 48]);
      *(_DWORD *)(v2 + v5 + 96) = *(_DWORD *)&v3[v5 + 96];
      v5 += 104;
    }
    while (v6 != v5);
    v3 = *(char **)a1;
    v9 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v9 = 0;
  }
  sub_21DF21E74(v3, &v3[104 * v9]);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

__n128 sub_21DF22C94(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __n128 result;
  __int128 v14;
  int v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;

  v8 = *(_QWORD *)(a1 + 32);
  v6 = a1 + 32;
  v7 = v8;
  v9 = *(_DWORD *)(v6 - 16);
  v18 = a2;
  v19 = a3;
  v20 = 0;
  v21 = 0;
  v22 = v9;
  v10 = *(unsigned int *)(v6 + 8);
  v11 = (char *)&v18;
  if (v10 >= *(_DWORD *)(v6 + 12))
  {
    v16 = v7 + 32 * v10 > (unint64_t)&v18;
    if (v7 <= (unint64_t)&v18 && v16)
    {
      v17 = (char *)&v18 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)(a1 + 32);
      v11 = &v17[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)(a1 + 32);
      v11 = (char *)&v18;
    }
  }
  v12 = (_OWORD *)(v7 + 32 * *(unsigned int *)(a1 + 40));
  result = *(__n128 *)v11;
  v14 = *((_OWORD *)v11 + 1);
  *v12 = *(_OWORD *)v11;
  v12[1] = v14;
  ++*(_DWORD *)(a1 + 40);
  LODWORD(v12) = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a1 + 20) + a3;
  *(_DWORD *)(a1 + 20) = v15 + 1;
  *(_DWORD *)(a1 + 24) = (_DWORD)v12;
  *(_DWORD *)(a2 + 24) = v15;
  return result;
}

void sub_21DF22D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int32x2_t *a7)
{
  llvm::LLVMContext *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t i;
  uint64_t v34;
  unsigned int v35;
  _BYTE *v36;
  BOOL v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  unsigned int v43;
  char v44;
  char v45;
  uint64_t v46;
  _BYTE *v47;
  llvm::MDString *v48;
  llvm::MDString *v49;
  llvm::MDString *v50;
  uint64_t String;
  size_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  unsigned int *v56;
  _DWORD *v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  std::string::value_type v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  llvm::MDString *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const std::string::value_type *p_p;
  std::string::size_type v73;
  unsigned __int8 *v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  char v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  std::string::value_type v88;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  _BOOL4 v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  _BYTE *v109;
  size_t v110;
  int64_t v111;
  int v112;
  BOOL v114;
  int v115;
  unsigned int v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v128;
  char v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  BOOL v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  BOOL v143;
  int v144;
  uint64_t *v145;
  int v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::string *v151;
  unsigned __int16 v152;
  int v153;
  int v154;
  int32x2_t *v155;
  BOOL v156;
  BOOL v157;
  uint64_t v158;
  size_t __n;
  void *__s;
  unsigned int *v161;
  uint64_t **v162;
  uint64_t v163;
  std::string *v166;
  _BYTE *v167;
  unsigned int v168;
  char v169;
  uint64_t v170;
  __int16 v171;
  std::string::value_type __c[4];
  int v173;
  int v174;
  uint64_t v175;
  void *__dst;
  void *__p;
  std::string::size_type v178;
  unsigned __int8 v179;
  _DWORD *v180;
  uint64_t v181;
  _QWORD v182[4];

  v182[2] = *MEMORY[0x24BDAC8D0];
  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v166 = (std::string *)(a1 + 8);
  std::string::push_back((std::string *)(a1 + 8), 123);
  v13 = *(unsigned int *)(a4 + 12);
  v180 = v182;
  v181 = 0x400000000;
  if (v13 < 5)
  {
    if ((_DWORD)v13)
    {
      v16 = v182;
      v17 = v13;
      do
      {
        *v16++ = 0;
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    LODWORD(v181) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v180;
    v15 = v13;
    do
    {
      *v14++ = 0;
      --v15;
    }
    while (v15);
  }
  LODWORD(v181) = v13;
  v18 = *(_QWORD *)&a7[4] + 32 * a7[5].u32[0];
  if (!*(_BYTE *)(v18 - 16))
  {
    *(_BYTE *)(v18 - 16) = 1;
    *(_DWORD *)(v18 - 20) = a5;
  }
  a7[2] = vadd_s32(a7[2], (int32x2_t)0x100000001);
  v162 = (uint64_t **)(a6 + 8);
  v163 = a2;
  v19 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v19 != (_DWORD)v13)
  {
    if (v19 <= v13)
    {
      if (*(_DWORD *)(a6 + 20) < v13)
      {
        __dst = 0;
        v23 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v24 = *(uint64_t **)(a6 + 8);
        v25 = *(unsigned int *)(a6 + 16);
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          v27 = 8 * v25;
          v28 = (_QWORD *)v23;
          do
          {
            v29 = *v24;
            *v24++ = 0;
            *v28++ = v29;
            v27 -= 8;
          }
          while (v27);
          v30 = (uint64_t)(*v162 - 1);
          do
          {
            v31 = *(_QWORD *)(v30 + v26);
            *(_QWORD *)(v30 + v26) = 0;
            if (v31)
              MEMORY[0x2207A7960](v31, 0x1000C4052888210);
            v26 -= 8;
          }
          while (v26);
          v24 = *v162;
        }
        v32 = (int)__dst;
        if (v24 != (uint64_t *)(a6 + 24))
          free(v24);
        *(_QWORD *)(a6 + 8) = v23;
        *(_DWORD *)(a6 + 20) = v32;
        LODWORD(v19) = *(_DWORD *)(a6 + 16);
      }
      if ((_DWORD)v19 != (_DWORD)v13)
        bzero(&(*v162)[v19], 8 * v13 - 8 * v19);
    }
    else
    {
      v20 = 8 * v13 - 8 * v19;
      v21 = &(*v162)[v19 - 1];
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
          MEMORY[0x2207A7960](v22, 0x1000C4052888210);
        --v21;
        v20 += 8;
      }
      while (v20);
    }
    *(_DWORD *)(a6 + 16) = v13;
    a2 = v163;
  }
  if ((_DWORD)v13)
  {
    for (i = 0; i != v13; ++i)
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 8), v12);
      __dst = (void *)llvm::ConstantInt::get();
      __p = (void *)llvm::ConstantInt::get();
      v180[i] = llvm::DataLayout::getIndexedOffsetInType();
    }
  }
  v34 = a1;
  v168 = *(_DWORD *)(a3 + 8);
  if (v168)
  {
    v35 = 0;
    v155 = a7 + 1;
    v158 = a4;
    do
    {
      v175 = 0;
      v173 = -1;
      v174 = 0;
      if (sub_21DF241E0(*(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v35), "air.struct_type_info"))
      {
        v36 = *(_BYTE **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v35 + 1));
        if (v36 && ((*v36 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v36)) == 0)
          v36 = 0;
        v167 = v36;
        if (v36)
          v37 = *(_BYTE *)v34 == 0;
        else
          v37 = 1;
        v38 = !v37;
        *(_BYTE *)v34 = v38;
        v35 += 2;
      }
      else
      {
        v167 = 0;
      }
      LODWORD(__dst) = v35;
      v39 = sub_21DF7A834(0, a3, (unsigned int *)&__dst, (_DWORD *)&v175 + 1);
      if (*(_BYTE *)v34)
        v40 = v39;
      else
        v40 = 0;
      *(_BYTE *)v34 = v40;
      LODWORD(__dst) = v35 + 1;
      v41 = sub_21DF7A834(0, a3, (unsigned int *)&__dst, &v175);
      if (*(_BYTE *)v34)
        v42 = v41;
      else
        v42 = 0;
      *(_BYTE *)v34 = v42;
      v43 = v35 + 3;
      LODWORD(__dst) = v35 + 2;
      v44 = sub_21DF7A834(0, a3, (unsigned int *)&__dst, &v174);
      if (*(_BYTE *)v34)
        v45 = v44;
      else
        v45 = 0;
      v46 = a3 - 8 * *(unsigned int *)(a3 + 8);
      v47 = *(_BYTE **)(v46 + 8 * v43);
      if (v47)
      {
        if (*v47)
          v48 = 0;
        else
          v48 = *(llvm::MDString **)(v46 + 8 * v43);
      }
      else
      {
        v48 = 0;
      }
      if (!v48)
        v45 = 0;
      v49 = *(llvm::MDString **)(v46 + 8 * (v35 + 4));
      if (v49)
      {
        if (*(_BYTE *)v49)
          v50 = 0;
        else
          v50 = v49;
      }
      else
      {
        v50 = 0;
      }
      if (!v50)
        v45 = 0;
      *(_BYTE *)v34 = v45;
      String = llvm::MDString::getString(v48);
      __n = v52;
      __s = (void *)String;
      llvm::MDString::getString(v50);
      v53 = v181;
      if ((_DWORD)v181)
      {
        v54 = v180;
        do
        {
          v55 = v53 >> 1;
          v56 = (unsigned int *)&v54[4 * (v53 >> 1)];
          v58 = *v56;
          v57 = v56 + 1;
          v53 += ~(v53 >> 1);
          if (v58 < HIDWORD(v175))
            v54 = v57;
          else
            v53 = v55;
        }
        while (v53);
      }
      else
      {
        v54 = v180;
      }
      v59 = (unint64_t)(v54 - (_BYTE *)v180) >> 2;
      v60 = &(*v162)[v59];
      v61 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v59);
      if (*(_BYTE *)(v61 + 8) == 17)
      {
        v62 = 0;
        v63 = 1;
        do
        {
          v64 = v60;
          v65 = operator new();
          v66 = *(_DWORD *)(v61 + 32);
          *(_DWORD *)v65 = 3;
          *(_QWORD *)(v65 + 8) = 0;
          v60 = (uint64_t *)(v65 + 8);
          *(_QWORD *)(v65 + 16) = v66;
          v67 = *v64;
          *v64 = v65;
          if (v67)
          {
            MEMORY[0x2207A7960](v67, 0x1000C4052888210);
            v66 = *(_DWORD *)(v65 + 16);
          }
          v63 *= (_BYTE)v66;
          v61 = **(_QWORD **)(v61 + 16);
          sub_21DF22C94((uint64_t)a7, v65, 0);
          ++v62;
        }
        while (*(_BYTE *)(v61 + 8) == 17);
        v161 = (unsigned int *)(v61 + 8);
        if (v62)
          std::string::push_back(v166, v63);
        a2 = v163;
      }
      else
      {
        v161 = (unsigned int *)(v61 + 8);
        v62 = 0;
      }
      v35 += 5;
      while (v35 < v168)
      {
        v68 = *(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v35);
        if (sub_21DF241E0(v68, "air.render_target"))
          goto LABEL_248;
        if (!sub_21DF241E0(v68, "air.indirect_argument"))
          break;
        LODWORD(__dst) = v35 + 1;
        if (sub_21DF7A834(0, a3, (unsigned int *)&__dst, &v173))
        {
          v69 = (v173 + a5);
          v173 += a5;
          v70 = operator new();
          *(_DWORD *)v70 = 1;
          *(_QWORD *)(v70 + 8) = v70 + 24;
          *(_QWORD *)(v70 + 16) = 0x400000000;
          v71 = *v60;
          *v60 = v70;
          if (v71)
            MEMORY[0x2207A7960](v71, 0x1000C4052888210);
          sub_21DF22D7C(&__dst, a2, v167, v61, v69, v70, a7);
          v34 = a1;
          *(_BYTE *)(a1 + 1) |= BYTE1(__dst);
          if ((v179 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v179 & 0x80u) == 0)
            v73 = v179;
          else
            v73 = v178;
          std::string::append(v166, p_p, v73);
          *(_BYTE *)a1 &= __dst;
          if ((char)v179 < 0)
            operator delete(__p);
          goto LABEL_248;
        }
        v74 = *(unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v35 + 1));
        if (v74)
        {
          v75 = *v74;
          if (v75 <= 0x22 && ((0x7FFFFFFF0uLL >> v75) & 1) != 0)
          {
            v77 = llvm::MDString::getString(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8]);
            *(_DWORD *)__c = 0;
            v171 = 0;
            switch(v78)
            {
              case 10:
                if (*(_QWORD *)v77 == 0x666675622E726961 && *(_WORD *)(v77 + 8) == 29285)
                  goto LABEL_150;
                break;
              case 11:
                if (*(_QWORD *)v77 == 0x747865742E726961 && *(_QWORD *)(v77 + 3) == 0x657275747865742ELL)
                {
                  LOBYTE(__dst) = 0;
                  BYTE4(v170) = 0;
                  v136 = sub_21DF7AB58((uint64_t)v74, &v173, __c, &__dst, (_BYTE *)&v170 + 4, (BOOL *)&v171 + 1, &v171);
                  if (*(_BYTE *)v34)
                    v137 = v136;
                  else
                    v137 = 0;
                  *(_BYTE *)v34 = v137;
                  v138 = v173 + a5;
                  v173 += a5;
                  if (HIBYTE(v171))
                  {
                    v60 = (uint64_t *)sub_21DF250AC(v60, v61, (uint64_t)a7);
                    ++v62;
                    std::string::push_back(v166, __c[0]);
                    v138 = v173;
                  }
                  v139 = operator new();
                  v140 = v139;
                  *(_DWORD *)v139 = 5;
                  *(_QWORD *)(v139 + 8) = v139 + 24;
                  *(_QWORD *)(v139 + 16) = 0x400000000;
                  *(_QWORD *)(v139 + 96) = v139 + 112;
                  *(_QWORD *)(v139 + 104) = 0x800000000;
                  *(_QWORD *)(v139 + 176) = v139 + 192;
                  *(_QWORD *)(v139 + 184) = 0x400000000;
                  *(_QWORD *)(v139 + 224) = 0;
                  *(_QWORD *)(v139 + 230) = 0;
                  *(_QWORD *)(v139 + 240) = 0;
                  *(_DWORD *)(v139 + 224) = v138;
                  *(_BYTE *)(v139 + 236) = (_BYTE)__dst;
                  *(_BYTE *)(v139 + 237) = BYTE4(v170);
                  if ((_BYTE)v171)
                  {
                    *(_BYTE *)(v139 + 244) = 1;
                    *(_DWORD *)(v139 + 240) = 0;
                  }
                  v141 = *v60;
                  *v60 = v140;
                  if (v141)
                    MEMORY[0x2207A7960](v141, 0x1000C4052888210);
                  sub_21DF24260((uint64_t)a7, v140, a7);
                  v87 = v166;
                  v88 = 58;
                  goto LABEL_247;
                }
                if (*(_QWORD *)v77 == 0x706D61732E726961 && *(_QWORD *)(v77 + 3) == 0x72656C706D61732ELL)
                {
                  v82 = sub_21DF7A9C8((uint64_t)v74, &v173, __c, (BOOL *)&v171 + 1);
                  if (*(_BYTE *)v34)
                    v83 = v82;
                  else
                    v83 = 0;
                  *(_BYTE *)v34 = v83;
                  v84 = v173 + a5;
                  v173 += a5;
                  if (HIBYTE(v171))
                  {
                    v60 = (uint64_t *)sub_21DF250AC(v60, v61, (uint64_t)a7);
                    ++v62;
                    std::string::push_back(v166, __c[0]);
                    v84 = v173;
                  }
                  v85 = operator new();
                  *(_DWORD *)v85 = 6;
                  *(_QWORD *)(v85 + 8) = v85 + 24;
                  *(_QWORD *)(v85 + 16) = 0x400000000;
                  *(_QWORD *)(v85 + 96) = v85 + 112;
                  *(_QWORD *)(v85 + 104) = 0x800000000;
                  *(_QWORD *)(v85 + 176) = v85 + 192;
                  *(_QWORD *)(v85 + 184) = 0x400000000;
                  *(_DWORD *)(v85 + 228) = 0;
                  *(_DWORD *)(v85 + 232) = 0;
                  *(_DWORD *)(v85 + 224) = v84;
                  v86 = *v60;
                  *v60 = v85;
                  if (v86)
                    MEMORY[0x2207A7960](v86, 0x1000C4052888210);
                  sub_21DF24260((uint64_t)a7, v85, (_DWORD *)a7 + 1);
                  v87 = v166;
                  v88 = 59;
                  goto LABEL_247;
                }
                break;
              case 18:
                if (*(_QWORD *)v77 == 0x6D6D6F632E726961
                  && *(_QWORD *)(v77 + 8) == 0x666675625F646E61
                  && *(_WORD *)(v77 + 16) == 29285)
                {
                  goto LABEL_214;
                }
                break;
              case 19:
                if (*(_QWORD *)v77 == 0x69646E692E726961
                  && *(_QWORD *)(v77 + 8) == 0x6675625F74636572
                  && *(_QWORD *)(v77 + 11) == 0x7265666675625F74)
                {
LABEL_150:
                  v93 = *v161;
                  if (*v161 == 16)
                  {
                    LODWORD(__dst) = 2;
                    sub_21DF7A918((uint64_t)v74, &__dst, &v173, __c);
                    v94 = (int)__dst;
                    LODWORD(__dst) = (_DWORD)__dst + 1;
                    if (sub_21DF241E0(*(llvm::MDString **)&v74[8 * __dst + -8 * *((unsigned int *)v74 + 2)], "air.arg_type_name"))
                    {
                      LODWORD(__dst) = v94 + 2;
                      v95 = llvm::MDString::getString(*(llvm::MDString **)&v74[8 * (v94 + 2)
                                                                             + -8 * *((unsigned int *)v74 + 2)]);
                      v97 = v96 >= 5 && *(_DWORD *)v95 == 1634890337 && *(_BYTE *)(v95 + 4) == 121;
                      HIBYTE(v171) = v97;
                    }
                    v173 += a5;
                    v60 = (uint64_t *)sub_21DF250AC(v60, v61, (uint64_t)a7);
                    v148 = operator new();
                    *(_DWORD *)v148 = 4;
                    *(_QWORD *)(v148 + 8) = v148 + 24;
                    *(_QWORD *)(v148 + 16) = 0x400000000;
                    *(_QWORD *)(v148 + 96) = v148 + 112;
                    *(_QWORD *)(v148 + 104) = 0x800000000;
                    *(_QWORD *)(v148 + 176) = v148 + 192;
                    *(_QWORD *)(v148 + 184) = 0x400000000;
                    *(_DWORD *)(v148 + 228) = 0;
                    *(_DWORD *)(v148 + 232) = 0;
                    *(_QWORD *)(v148 + 240) = 0;
                    *(_QWORD *)(v148 + 264) = 0;
                    *(_QWORD *)(v148 + 256) = **(_QWORD **)(**(_QWORD **)(v61 + 16) + 16);
                    *(_DWORD *)(v148 + 248) = 0;
                    *(_DWORD *)(v148 + 224) = v173;
                    v149 = *v60;
                    *v60 = v148;
                    if (v149)
                      MEMORY[0x2207A7960](v149, 0x1000C4052888210);
                    ++v62;
                    sub_21DF24260((uint64_t)a7, v148, v155);
                    std::string::push_back(v166, __c[0]);
                    v87 = v166;
                    goto LABEL_246;
                  }
                  v170 = 0;
                  __dst = 0;
                  v169 = 0;
                  if ((v93 & 0xFE) == 0x12)
                    v93 = *(_DWORD *)(**(_QWORD **)(v61 + 16) + 8);
                  v142 = sub_21DF7AE2C((uint64_t)v74, v93 >> 8, &v173, __c, (unsigned int *)&v170 + 1, &v170, (uint64_t *)&__dst, &v171, &v169);
                  if (*(_BYTE *)v34)
                    v143 = v142;
                  else
                    v143 = 0;
                  *(_BYTE *)v34 = v143;
                  v173 += a5;
                  v144 = v173;
                  v132 = operator new();
                  *(_DWORD *)v132 = 4;
                  *(_QWORD *)(v132 + 8) = v132 + 24;
                  *(_QWORD *)(v132 + 16) = 0x400000000;
                  *(_QWORD *)(v132 + 96) = v132 + 112;
                  *(_QWORD *)(v132 + 104) = 0x800000000;
                  *(_QWORD *)(v132 + 176) = v132 + 192;
                  *(_QWORD *)(v132 + 184) = 0x400000000;
                  *(_DWORD *)(v132 + 228) = 0;
                  *(_DWORD *)(v132 + 232) = 0;
                  *(_QWORD *)(v132 + 240) = 0;
                  *(_QWORD *)(v132 + 256) = v61;
                  *(_QWORD *)(v132 + 264) = 0;
                  *(_DWORD *)(v132 + 248) = HIDWORD(v170);
                  *(_DWORD *)(v132 + 224) = v144;
                  if (v169)
                    *(_QWORD *)(v132 + 240) = sub_21DF21890(a2, __dst, **(_QWORD **)(v61 + 16));
                  if ((_BYTE)v171)
                  {
                    if (!*(_BYTE *)(v132 + 268))
                      *(_BYTE *)(v132 + 268) = 1;
                    *(_DWORD *)(v132 + 264) = 0;
                  }
                  v135 = *v60;
                  *v60 = v132;
                  if (v135)
                    goto LABEL_244;
                  goto LABEL_245;
                }
                break;
              case 21:
                if (*(_QWORD *)v77 != 0x69646E692E726961
                  || *(_QWORD *)(v77 + 8) != 0x6E6F635F74636572
                  || *(_QWORD *)(v77 + 13) != 0x746E6174736E6F63)
                {
                  break;
                }
                v100 = sub_21DF241E0(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8], "air.indirect_constant");
                if (v100)
                {
                  v156 = v100;
                  v101 = *((_DWORD *)v74 + 2);
                  LODWORD(__dst) = 2;
                  if (v101 >= 3)
                  {
                    do
                    {
                      v102 = sub_21DF7A918((uint64_t)v74, &__dst, &v173, __c);
                      v103 = __dst;
                      if ((v102 & 1) == 0)
                      {
                        v103 = (_DWORD)__dst + 1;
                        LODWORD(__dst) = (_DWORD)__dst + 1;
                      }
                    }
                    while (v103 < v101);
                  }
                  LOBYTE(v100) = v156;
                }
                if (*(_BYTE *)v34)
                  v104 = v100;
                else
                  v104 = 0;
                *(_BYTE *)v34 = v104;
                v173 += a5;
                v105 = v173;
                v106 = operator new();
                *(_DWORD *)v106 = 7;
                *(_QWORD *)(v106 + 8) = v106 + 24;
                *(_QWORD *)(v106 + 16) = 0x400000000;
                *(_QWORD *)(v106 + 96) = v106 + 112;
                *(_QWORD *)(v106 + 104) = 0x800000000;
                *(_QWORD *)(v106 + 176) = v106 + 192;
                *(_QWORD *)(v106 + 184) = 0x400000000;
                *(_DWORD *)(v106 + 228) = 0;
                *(_DWORD *)(v106 + 232) = 0;
                *(_DWORD *)(v106 + 224) = v105;
                *(_QWORD *)(v106 + 240) = v61;
                v107 = *v60;
                *v60 = v106;
                if (v107)
                  MEMORY[0x2207A7960](v107, 0x1000C4052888210);
                sub_21DF24260((uint64_t)a7, v106, (_DWORD *)&a7[1] + 1);
                if (__n)
                {
                  v108 = __s;
                  v109 = memchr(__s, 60, __n);
                  v110 = __n;
                  if (v109)
                  {
                    if (__n >= v109 - (_BYTE *)__s)
                      v111 = v109 - (_BYTE *)__s;
                    else
                      v111 = __n;
                    if (v109 - (_BYTE *)__s == -1)
                      v110 = __n;
                    else
                      v110 = v111;
                  }
                  if (__s)
                  {
LABEL_182:
                    sub_21DF24420(&__dst, v108, v110);
                    goto LABEL_274;
                  }
                }
                else
                {
                  v110 = 0;
                  v108 = __s;
                  if (__s)
                    goto LABEL_182;
                }
                __dst = 0;
                __p = 0;
                v178 = 0;
LABEL_274:
                sub_21DF244C4();
                v145 = sub_21DF24DB0((uint64_t)&unk_2553B2FC0, &__dst);
                sub_21DF244C4();
                if (v145 == &qword_2553B2FC8
                  && (sub_21DF24E28(),
                      v145 = sub_21DF24DB0((uint64_t)&qword_2553B2FE0, &__dst),
                      sub_21DF24E28(),
                      v145 == &qword_2553B2FE8))
                {
                  LOBYTE(v146) = 0;
                }
                else
                {
                  v146 = *((_DWORD *)v145 + 14);
                }
                if (SHIBYTE(v178) < 0)
                  operator delete(__dst);
                std::string::push_back(v166, v146);
                break;
              case 25:
                v112 = *(unsigned __int8 *)(v77 + 24);
                v114 = *(_QWORD *)v77 == 0x646E65722E726961
                    && *(_QWORD *)(v77 + 8) == 0x6C657069705F7265
                    && *(_QWORD *)(v77 + 16) == 0x746174735F656E69;
                v115 = 101;
                goto LABEL_197;
              case 26:
                v112 = *(unsigned __int16 *)(v77 + 24);
                v114 = *(_QWORD *)v77 == 0x706D6F632E726961
                    && *(_QWORD *)(v77 + 8) == 0x657069705F657475
                    && *(_QWORD *)(v77 + 16) == 0x6174735F656E696CLL;
                v115 = 25972;
LABEL_197:
                if (!v114 || v112 != v115)
                  break;
                goto LABEL_214;
              case 27:
                if (*(_QWORD *)v77 != 0x69646E692E726961
                  || *(_QWORD *)(v77 + 8) != 0x6D6F635F74636572
                  || *(_QWORD *)(v77 + 16) != 0x6675625F646E616DLL
                  || *(_QWORD *)(v77 + 19) != 0x7265666675625F64)
                {
                  break;
                }
LABEL_214:
                if (sub_21DF241E0(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8], "air.indirect_command_buffer")|| sub_21DF241E0(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8], "air.command_buffer")|| sub_21DF241E0(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8], "air.compute_pipeline_state")|| sub_21DF241E0(*(llvm::MDString **)&v74[-8 * *((unsigned int *)v74 + 2) + 8], "air.render_pipeline_state"))
                {
                  v157 = 0;
                  HIBYTE(v171) = 0;
                  *(_DWORD *)__c = 1;
                  v121 = *((_DWORD *)v74 + 2);
                  LODWORD(__dst) = 2;
                  if (v121 >= 3)
                  {
                    v157 = 0;
                    do
                    {
                      v122 = sub_21DF7A918((uint64_t)v74, &__dst, &v173, __c);
                      v123 = __dst;
                      if ((v122 & 1) == 0)
                      {
                        v124 = (_DWORD)__dst + 1;
                        if (sub_21DF241E0(*(llvm::MDString **)&v74[8 * __dst + -8 * *((unsigned int *)v74 + 2)], "air.arg_type_name"))
                        {
                          v125 = llvm::MDString::getString(*(llvm::MDString **)&v74[8 * v124
                                                                                  + -8 * *((unsigned int *)v74 + 2)]);
                          if (v126 >= 5)
                          {
                            v128 = *(_DWORD *)v125 == 1634890337 && *(_BYTE *)(v125 + 4) == 121;
                            v157 = v128;
                          }
                          else
                          {
                            v157 = 0;
                          }
                          v124 = v123 + 2;
                        }
                        v123 = v124 + 1;
                        LODWORD(__dst) = v124 + 1;
                        a2 = v163;
                      }
                    }
                    while (v123 < v121);
                    HIBYTE(v171) = v157;
                    v34 = a1;
                  }
                  v129 = 1;
                }
                else
                {
                  v157 = 0;
                  v129 = 0;
                }
                if (!*(_BYTE *)v34)
                  v129 = 0;
                *(_BYTE *)v34 = v129;
                v173 += a5;
                if (v157)
                {
                  v60 = (uint64_t *)sub_21DF250AC(v60, v61, (uint64_t)a7);
                  ++v62;
                  v130 = HIBYTE(v171);
                }
                else
                {
                  v130 = 0;
                }
                v131 = operator new();
                v132 = v131;
                *(_DWORD *)v131 = 4;
                *(_QWORD *)(v131 + 8) = v131 + 24;
                *(_QWORD *)(v131 + 16) = 0x400000000;
                *(_QWORD *)(v131 + 96) = v131 + 112;
                *(_QWORD *)(v131 + 104) = 0x800000000;
                *(_QWORD *)(v131 + 176) = v131 + 192;
                *(_QWORD *)(v131 + 184) = 0x400000000;
                *(_DWORD *)(v131 + 228) = 0;
                *(_DWORD *)(v131 + 232) = 0;
                *(_QWORD *)(v131 + 240) = 0;
                v133 = v61;
                *(_QWORD *)(v131 + 264) = 0;
                if (v130)
                  v133 = **(_QWORD **)(**(_QWORD **)(v61 + 16) + 16);
                *(_QWORD *)(v131 + 256) = **(_QWORD **)(v133 + 16);
                *(_DWORD *)(v131 + 248) = 0;
                *(_DWORD *)(v131 + 224) = v173;
                v134 = operator new();
                *(_DWORD *)v134 = 0;
                *(_QWORD *)(v134 + 8) = v132;
                v135 = *v60;
                *v60 = v134;
                if (v135)
LABEL_244:
                  MEMORY[0x2207A7960](v135, 0x1000C4052888210);
LABEL_245:
                sub_21DF24260((uint64_t)a7, v132, v155);
                v87 = v166;
LABEL_246:
                v88 = 60;
LABEL_247:
                std::string::push_back(v87, v88);
                *(_BYTE *)(v34 + 1) = 1;
                break;
              default:
                break;
            }
LABEL_248:
            v35 += 2;
          }
        }
      }
      while (v62)
      {
        sub_21DF24154((uint64_t)a7);
        --v62;
      }
      a4 = v158;
    }
    while (v35 < v168);
  }
  std::string::push_back(v166, 125);
  if (*(_BYTE *)(v34 + 1))
  {
    v150 = *(unsigned __int8 *)(v34 + 31);
    if ((v150 & 0x80u) == 0)
      v151 = v166;
    else
      v151 = *(std::string **)(v34 + 8);
    if ((v150 & 0x80u) != 0)
      v150 = *(_QWORD *)(v34 + 16);
    if (v150)
    {
      v152 = -1;
      do
      {
        v153 = v151->__r_.__value_.__s.__data_[0];
        v151 = (std::string *)((char *)v151 + 1);
        v152 = word_21DFA0B10[v153 ^ ((unsigned __int16)(v152 & 0xFF00) >> 8)] ^ (v152 << 8);
        --v150;
      }
      while (v150);
      v154 = v152 | 0x7FE00000;
    }
    else
    {
      v154 = 2145452031;
    }
    *(_DWORD *)a2 = v154;
  }
  a7[2] = vadd_s32(a7[2], (int32x2_t)-1);
  if (v180 != (_DWORD *)v182)
    free(v180);
}

uint64_t sub_21DF24154(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(unsigned int *)(result + 40);
  v3 = v1 + 32 * v2;
  v4 = *(_QWORD *)(v3 - 32);
  v5 = *(unsigned __int8 *)(v3 - 24);
  v6 = *(_QWORD *)(v3 - 20);
  v7 = *(_DWORD *)(v3 - 12);
  v8 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(result + 24) /= v8;
  v9 = v7 - v6 + 1;
  *(_DWORD *)(v4 + 20) = v9;
  v10 = (v2 - 1);
  *(_DWORD *)(result + 40) = v10;
  if ((_DWORD)v10)
  {
    v11 = v1 + 32 * v10;
    if (!*(_BYTE *)(v11 - 16))
    {
      *(_QWORD *)(v11 - 20) = v6;
      v8 = *(_DWORD *)(v4 + 16);
      v9 = *(_DWORD *)(v4 + 20);
    }
    v12 = v6 + v9 * v8 - 1;
    if (*(_DWORD *)(v11 - 12) > v12)
      v12 = *(_DWORD *)(v11 - 12);
    *(_DWORD *)(v11 - 12) = v12;
  }
  if (v5)
    v13 = -2;
  else
    v13 = -1;
  *(_DWORD *)(result + 20) += v13;
  return result;
}

BOOL sub_21DF241E0(llvm::MDString *a1, const char *a2)
{
  uint64_t String;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  if (*(_BYTE *)a1)
    return 0;
  String = llvm::MDString::getString(a1);
  v6 = v5;
  if (a2)
  {
    v7 = (const void *)String;
    v8 = strlen(a2);
    if (v6 != v8)
      return 0;
    if (!v8)
      return 1;
    return memcmp(v7, a2, v8) == 0;
  }
  else
  {
    return v5 == 0;
  }
}

uint64_t sub_21DF24260(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _OWORD *v9;
  BOOL v10;
  unint64_t v11;
  __int128 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;

  v5 = result;
  v6 = *(unsigned int *)(result + 40);
  if ((_DWORD)v6 == 1)
  {
    v7 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v19 = *(_QWORD *)(result + 32) + 32 * v6;
    v7 = *(_DWORD *)(a2 + 16);
    v20 = 1;
    v21 = v19;
    do
    {
      v23 = *(_QWORD *)(v21 - 32);
      v21 -= 32;
      v22 = v23;
      if (v7 >= *(_DWORD *)(a2 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(a2 + 16);
      }
      v24 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16 * v7);
      *v24 = v22;
      v24[1] = v20;
      v7 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 16) = v7;
      v20 *= *(_DWORD *)(*(_QWORD *)(v19 - 32) + 16);
      v19 = v21;
    }
    while (v21 != *(_QWORD *)(v5 + 32) + 32);
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = (_OWORD *)(v8 + 16 * v7 - 16);
  if (v7)
    v10 = (unint64_t)v9 > v8;
  else
    v10 = 0;
  if (v10)
  {
    v11 = v8 + 16;
    do
    {
      v12 = *(_OWORD *)(v11 - 16);
      *(_OWORD *)(v11 - 16) = *v9;
      *v9-- = v12;
      v13 = v11 >= (unint64_t)v9;
      v11 += 16;
    }
    while (!v13);
  }
  v14 = *(_QWORD *)(v5 + 32);
  v15 = v14 + 32;
  v16 = *(unsigned int *)(v5 + 40);
  v17 = v14 + 32 * v16;
  if ((_DWORD)v16 == 1)
  {
    v18 = v15;
  }
  else
  {
    v25 = 32 * v16 - 32;
    v18 = v15;
    while (*(_DWORD *)(v18 + 24) != *(_DWORD *)(v5 + 16))
    {
      v18 += 32;
      v25 -= 32;
      if (!v25)
      {
        v18 = v17;
        break;
      }
    }
  }
  *(_DWORD *)(a2 + 88) = (unint64_t)(v18 - v15) >> 5;
  v26 = *(_DWORD *)(a2 + 224);
  if (!*(_BYTE *)(v17 - 16))
  {
    *(_BYTE *)(v17 - 16) = 1;
    *(_DWORD *)(v17 - 20) = v26;
  }
  if (*(_DWORD *)(v17 - 12) > v26)
    v26 = *(_DWORD *)(v17 - 12);
  *(_DWORD *)(v17 - 12) = v26;
  *(_DWORD *)(a2 + 228) = *a3;
  v27 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(a2 + 232) = v27;
  *a3 += v27;
  return result;
}

_QWORD *sub_21DF24420(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_21DF244C4()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  _QWORD v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  _QWORD v47[3];
  int v48;
  _QWORD v49[3];
  int v50;
  _QWORD v51[3];
  int v52;
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  _QWORD v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  _QWORD v73[3];
  int v74;
  _QWORD v75[3];
  int v76;
  _QWORD v77[3];
  int v78;
  _QWORD v79[3];
  int v80;
  _QWORD v81[3];
  int v82;
  _QWORD v83[3];
  int v84;
  _QWORD v85[3];
  int v86;
  _QWORD v87[3];
  int v88;
  _QWORD v89[3];
  int v90;
  _QWORD v91[3];
  int v92;
  _QWORD v93[3];
  int v94;
  _QWORD v95[3];
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  _QWORD v141[3];
  int v142;
  _QWORD v143[3];
  int v144;
  _QWORD v145[3];
  int v146;
  _QWORD v147[3];
  int v148;
  _QWORD v149[3];
  int v150;
  _QWORD v151[3];
  int v152;
  _QWORD v153[3];
  int v154;
  _QWORD v155[3];
  int v156;
  _QWORD v157[3];
  int v158;
  _QWORD v159[3];
  int v160;
  _QWORD v161[3];
  int v162;
  _QWORD v163[3];
  int v164;
  _QWORD v165[3];
  int v166;
  _QWORD v167[3];
  int v168;
  _QWORD v169[3];
  int v170;
  _QWORD v171[3];
  int v172;
  _QWORD v173[3];
  int v174;
  _QWORD v175[3];
  int v176;
  _QWORD v177[3];
  int v178;
  _QWORD v179[3];
  int v180;
  _QWORD v181[3];
  int v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&unk_2553B2FD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_2553B2FD8))
  {
    sub_21DF1AF28(v3, "float");
    v4 = 3;
    sub_21DF1AF28(v5, "float2");
    v6 = 4;
    sub_21DF1AF28(v7, "float3");
    v8 = 5;
    sub_21DF1AF28(v9, "float4");
    v10 = 6;
    sub_21DF1AF28(v11, "packed_float");
    v12 = 3;
    sub_21DF1AF28(v13, "packed_float2");
    v14 = 4;
    sub_21DF1AF28(v15, "packed_float3");
    v16 = 5;
    sub_21DF1AF28(v17, "packed_float4");
    v18 = 6;
    sub_21DF1AF28(v19, "half");
    v20 = 16;
    sub_21DF1AF28(v21, "half2");
    v22 = 17;
    sub_21DF1AF28(v23, "half3");
    v24 = 18;
    sub_21DF1AF28(v25, "half4");
    v26 = 19;
    sub_21DF1AF28(v27, "packed_half");
    v28 = 16;
    sub_21DF1AF28(v29, "packed_half2");
    v30 = 17;
    sub_21DF1AF28(v31, "packed_half3");
    v32 = 18;
    sub_21DF1AF28(v33, "packed_half4");
    v34 = 19;
    sub_21DF1AF28(v35, "int");
    v36 = 29;
    sub_21DF1AF28(v37, "int2");
    v38 = 30;
    sub_21DF1AF28(v39, "int3");
    v40 = 31;
    sub_21DF1AF28(v41, "int4");
    v42 = 32;
    sub_21DF1AF28(v43, "packed_int");
    v44 = 29;
    sub_21DF1AF28(v45, "packed_int2");
    v46 = 30;
    sub_21DF1AF28(v47, "packed_int3");
    v48 = 31;
    sub_21DF1AF28(v49, "packed_int4");
    v50 = 32;
    sub_21DF1AF28(v51, "uint");
    v52 = 33;
    sub_21DF1AF28(v53, "uint2");
    v54 = 34;
    sub_21DF1AF28(v55, "uint3");
    v56 = 35;
    sub_21DF1AF28(v57, "uint4");
    v58 = 36;
    sub_21DF1AF28(v59, "packed_uint");
    v60 = 33;
    sub_21DF1AF28(v61, "packed_uint2");
    v62 = 34;
    sub_21DF1AF28(v63, "packed_uint3");
    v64 = 35;
    sub_21DF1AF28(v65, "packed_uint4");
    v66 = 36;
    sub_21DF1AF28(v67, "short");
    v68 = 37;
    sub_21DF1AF28(v69, "short2");
    v70 = 38;
    sub_21DF1AF28(v71, "short3");
    v72 = 39;
    sub_21DF1AF28(v73, "short4");
    v74 = 40;
    sub_21DF1AF28(v75, "packed_short");
    v76 = 37;
    sub_21DF1AF28(v77, "packed_short2");
    v78 = 38;
    sub_21DF1AF28(v79, "packed_short3");
    v80 = 39;
    sub_21DF1AF28(v81, "packed_short4");
    v82 = 40;
    sub_21DF1AF28(v83, "ushort");
    v84 = 41;
    sub_21DF1AF28(v85, "ushort2");
    v86 = 42;
    sub_21DF1AF28(v87, "ushort3");
    v88 = 43;
    sub_21DF1AF28(v89, "ushort4");
    v90 = 44;
    sub_21DF1AF28(v91, "packed_ushort");
    v92 = 41;
    sub_21DF1AF28(v93, "packed_ushort2");
    v94 = 42;
    sub_21DF1AF28(v95, "packed_ushort3");
    v96 = 43;
    sub_21DF1AF28(v97, "packed_ushort4");
    v98 = 44;
    sub_21DF1AF28(v99, "char");
    v100 = 45;
    sub_21DF1AF28(v101, "char2");
    v102 = 46;
    sub_21DF1AF28(v103, "char3");
    v104 = 47;
    sub_21DF1AF28(v105, "char4");
    v106 = 48;
    sub_21DF1AF28(v107, "packed_char");
    v108 = 45;
    sub_21DF1AF28(v109, "packed_char2");
    v110 = 46;
    sub_21DF1AF28(v111, "packed_char3");
    v112 = 47;
    sub_21DF1AF28(v113, "packed_char4");
    v114 = 48;
    sub_21DF1AF28(v115, "uchar");
    v116 = 49;
    sub_21DF1AF28(v117, "uchar2");
    v118 = 50;
    sub_21DF1AF28(v119, "uchar3");
    v120 = 51;
    sub_21DF1AF28(v121, "uchar4");
    v122 = 52;
    sub_21DF1AF28(v123, "packed_uchar");
    v124 = 49;
    sub_21DF1AF28(v125, "packed_uchar2");
    v126 = 50;
    sub_21DF1AF28(v127, "packed_uchar3");
    v128 = 51;
    sub_21DF1AF28(v129, "packed_uchar4");
    v130 = 52;
    sub_21DF1AF28(v131, "BOOL");
    v132 = 53;
    sub_21DF1AF28(v133, "BOOL2");
    v134 = 54;
    sub_21DF1AF28(v135, "BOOL3");
    v136 = 55;
    sub_21DF1AF28(v137, "BOOL4");
    v138 = 56;
    sub_21DF1AF28(v139, "packed_BOOL");
    v140 = 53;
    sub_21DF1AF28(v141, "packed_BOOL2");
    v142 = 54;
    sub_21DF1AF28(v143, "packed_BOOL3");
    v144 = 55;
    sub_21DF1AF28(v145, "packed_BOOL4");
    v146 = 56;
    sub_21DF1AF28(v147, "float2x2");
    v148 = 7;
    sub_21DF1AF28(v149, "float2x3");
    v150 = 8;
    sub_21DF1AF28(v151, "float2x4");
    v152 = 9;
    sub_21DF1AF28(v153, "float3x2");
    v154 = 10;
    sub_21DF1AF28(v155, "float3x3");
    v156 = 11;
    sub_21DF1AF28(v157, "float3x4");
    v158 = 12;
    sub_21DF1AF28(v159, "float4x2");
    v160 = 13;
    sub_21DF1AF28(v161, "float4x3");
    v162 = 14;
    sub_21DF1AF28(v163, "float4x4");
    v164 = 15;
    sub_21DF1AF28(v165, "half2x2");
    v166 = 20;
    sub_21DF1AF28(v167, "half2x3");
    v168 = 21;
    sub_21DF1AF28(v169, "half2x4");
    v170 = 22;
    sub_21DF1AF28(v171, "half3x2");
    v172 = 23;
    sub_21DF1AF28(v173, "half3x3");
    v174 = 24;
    sub_21DF1AF28(v175, "half3x4");
    v176 = 25;
    sub_21DF1AF28(v177, "half4x2");
    v178 = 26;
    sub_21DF1AF28(v179, "half4x3");
    v180 = 27;
    sub_21DF1AF28(v181, "half4x4");
    v1 = 0;
    v182 = 28;
    qword_2553B2FD0 = 0;
    qword_2553B2FC8 = 0;
    unk_2553B2FC0 = &qword_2553B2FC8;
    do
    {
      sub_21DF2519C((uint64_t)&unk_2553B2FC0, &qword_2553B2FC8, &v3[v1], (uint64_t)&v3[v1]);
      v1 += 4;
    }
    while (v1 != 360);
    v2 = 360;
    do
    {
      if (*((char *)&v3[v2 - 1] - 1) < 0)
        operator delete((void *)v3[v2 - 4]);
      v2 -= 4;
    }
    while (v2 * 8);
    __cxa_atexit((void (*)(void *))sub_21DF25394, &unk_2553B2FC0, &dword_21DF15000);
    __cxa_guard_release((__guard *)&unk_2553B2FD8);
  }
}

_QWORD *sub_21DF24DB0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_21DF214C4(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_21DF214C4(a2, v5 + 4))
    return v2;
  return v5;
}

void sub_21DF24E28()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  _QWORD v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2553B2FF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2553B2FF8))
  {
    sub_21DF1AF28(v3, "r8unorm");
    v4 = 62;
    sub_21DF1AF28(v5, "r8snorm");
    v6 = 63;
    sub_21DF1AF28(v7, "r16unorm");
    v8 = 64;
    sub_21DF1AF28(v9, "r16snorm");
    v10 = 65;
    sub_21DF1AF28(v11, "rg8unorm");
    v12 = 66;
    sub_21DF1AF28(v13, "rg8snorm");
    v14 = 67;
    sub_21DF1AF28(v15, "rg16unorm");
    v16 = 68;
    sub_21DF1AF28(v17, "rg16snorm");
    v18 = 69;
    sub_21DF1AF28(v19, "rgba8unorm");
    v20 = 70;
    sub_21DF1AF28(v21, "srgba8unorm");
    v22 = 71;
    sub_21DF1AF28(v23, "rgba8snorm");
    v24 = 72;
    sub_21DF1AF28(v25, "rgba16unorm");
    v26 = 73;
    sub_21DF1AF28(v27, "rgba16snorm");
    v28 = 74;
    sub_21DF1AF28(v29, "rgb10a2");
    v30 = 75;
    sub_21DF1AF28(v31, "rg11b10f");
    v32 = 76;
    sub_21DF1AF28(v33, "rgb9e5");
    v1 = 0;
    v34 = 77;
    qword_2553B2FF0 = 0;
    qword_2553B2FE8 = 0;
    qword_2553B2FE0 = (uint64_t)&qword_2553B2FE8;
    do
    {
      sub_21DF2519C((uint64_t)&qword_2553B2FE0, &qword_2553B2FE8, &v3[v1], (uint64_t)&v3[v1]);
      v1 += 4;
    }
    while (v1 != 64);
    v2 = 64;
    do
    {
      if (*((char *)&v3[v2 - 1] - 1) < 0)
        operator delete((void *)v3[v2 - 4]);
      v2 -= 4;
    }
    while (v2 * 8);
    __cxa_atexit((void (*)(void *))sub_21DF25394, &qword_2553B2FE0, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B2FF8);
  }
}

uint64_t sub_21DF250AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = operator new();
  *(_DWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = operator new();
  v8 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
  *(_DWORD *)v7 = 3;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v8;
  v9 = *a1;
  *a1 = v6;
  if (v9)
  {
    MEMORY[0x2207A7960](v9, 0x1000C4052888210);
    v10 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v7;
    if (v10)
      MEMORY[0x2207A7960](v10, 0x1000C4052888210);
  }
  else
  {
    *(_QWORD *)(v6 + 8) = v7;
  }
  sub_21DF22C94(a3, v7, 1);
  return v7 + 8;
}

uint64_t sub_21DF2519C(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  char *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = sub_21DF214C4(a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = sub_21DF214C4(a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v22 = a2;
        v23 = a2;
        v14 = &v22;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = a2[1];
      if (v12)
      {
        v13 = (_QWORD *)a2[1];
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = a2;
        do
        {
          v14 = (_QWORD *)v17[2];
          v16 = *v14 == (_QWORD)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (result = sub_21DF214C4(a3, v14 + 4), (_DWORD)result))
      {
        if (v12)
        {
          v23 = v14;
        }
        else
        {
          v23 = a2;
          v14 = a2 + 1;
        }
LABEL_30:
        if (*v14)
          return result;
        goto LABEL_31;
      }
LABEL_29:
      result = (uint64_t)sub_21DF2559C(v7, &v23, a3);
      v14 = (_QWORD *)result;
      goto LABEL_30;
    }
  }
  v9 = *a2;
  if (*(_QWORD **)v7 != a2)
  {
    if (v9)
    {
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (_QWORD *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    result = sub_21DF214C4(v11 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_17;
    goto LABEL_29;
  }
  v11 = a2;
LABEL_17:
  if (v9)
  {
    v23 = v11;
    v14 = v11 + 1;
    goto LABEL_30;
  }
  v23 = a2;
  v14 = a2;
LABEL_31:
  v18 = (char *)operator new(0x40uLL);
  v19 = v18 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_21DF205EC(v19, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v18 + 14) = *(_DWORD *)(a4 + 24);
  v20 = v23;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v20;
  *v14 = v18;
  v21 = **(_QWORD **)v7;
  if (v21)
  {
    *(_QWORD *)v7 = v21;
    v18 = (char *)*v14;
  }
  result = (uint64_t)sub_21DF25404(*(uint64_t **)(v7 + 8), (uint64_t *)v18);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

uint64_t sub_21DF25394(uint64_t a1)
{
  sub_21DF253BC(*(char **)(a1 + 8));
  return a1;
}

void sub_21DF253BC(char *a1)
{
  if (a1)
  {
    sub_21DF253BC(*(_QWORD *)a1);
    sub_21DF253BC(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_21DF25404(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *sub_21DF2559C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_21DF214C4(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_21DF214C4(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

char **sub_21DF2562C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        MEMORY[0x2207A7960](v6, 0x1000C4052888210);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_21DF256A4()
{
  abort();
}

int *sub_21DF256B0(int *a1, unint64_t a2, unint64_t *a3, char *a4)
{
  unint64_t v6;
  char v9;
  uint64_t v10;
  BOOL v12;
  llvm::APInt *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int **v17;
  unsigned int *v18;

  *a4 = 1;
  v6 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64;
  if (v6 < a2)
  {
    v9 = 1;
    while (1)
    {
      v10 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 && *(_BYTE *)(*(_QWORD *)v6 + 16) == 16)
      {
        v13 = (llvm::APInt *)(v10 + 24);
        v14 = *(_DWORD *)(v10 + 32);
        v15 = v14 > 0x40 ? llvm::APInt::countLeadingZerosSlowCase(v13) == v14 : *(_QWORD *)v13 == 0;
        v12 = v15;
      }
      else
      {
        v12 = 0;
      }
      v9 = v9 && v12;
      *a4 = v9;
      v16 = *a1;
      if ((*a1 - 3) >= 0xFFFFFFFE)
        break;
      if (!v16 || v16 == 3)
      {
        v17 = (int **)(a1 + 2);
LABEL_24:
        a1 = *v17;
        goto LABEL_25;
      }
      if ((v16 - 5) >= 2)
        goto LABEL_28;
LABEL_25:
      v6 += 32;
      if (v6 >= a2)
        goto LABEL_28;
    }
    v18 = (unsigned int *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u)
      v18 = *(unsigned int **)v18;
    v17 = (int **)(*((_QWORD *)a1 + 1) + 8 * *v18);
    goto LABEL_24;
  }
LABEL_28:
  *a3 = v6;
  return a1;
}

_DWORD *sub_21DF257D0(_DWORD *a1, llvm::Constant *this)
{
  uint64_t AggregateElement;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  AggregateElement = llvm::Constant::getAggregateElement(this);
  v5 = llvm::Constant::getAggregateElement(this);
  v6 = (_QWORD *)(AggregateElement + 24);
  if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
    v6 = (_QWORD *)*v6;
  *a1 = *v6;
  v7 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v7 = (_QWORD *)*v7;
  a1[1] = *v7;
  return a1;
}

uint64_t sub_21DF25850(uint64_t a1, llvm::Type **a2)
{
  llvm::LLVMContext *v3;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(a2[8], v3);
  llvm::ConstantInt::get();
  return llvm::ConstantVector::get();
}

uint64_t sub_21DF258F0(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  llvm::LLVMContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  llvm::Type *Int32Ty;
  uint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  __int16 v19;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  v7 = llvm::ConstantInt::get();
  v8 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 + 16 * v8;
    do
    {
      v11 = *(llvm::Type ***)(a3
                            + 32
                            - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                            + 32 * *(unsigned int *)(*(_QWORD *)v9 + 24));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      v19 = 257;
      v13 = sub_21DF25A08((uint64_t)a2, v11, Int32Ty, (uint64_t)v18);
      llvm::Type::getInt32Ty(a2[8], v14);
      v15 = llvm::ConstantInt::get();
      v19 = 257;
      v16 = sub_21DF1A864((uint64_t)a2, v15, v13, (uint64_t)v18);
      v19 = 257;
      v7 = sub_21DF19FAC((uint64_t)a2, v7, v16, (uint64_t)v18);
      v9 += 16;
    }
    while (v9 != v10);
  }
  return v7;
}

uint64_t sub_21DF25A08(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return (uint64_t)a2;
    v10 = 38;
  }
  else
  {
    v10 = 39;
  }
  return sub_21DF1A79C(a1, v10, (uint64_t)a2, (uint64_t)a3, a4);
}

unint64_t sub_21DF25A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  llvm::APInt *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;

  v2 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v5 = *(_QWORD *)(v2 + 32);
  v4 = v2 + 32;
  v3 = v5;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5)
    v7 = v6 == 16;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_8;
  v9 = (llvm::APInt *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 32);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10)
      goto LABEL_8;
  }
  else if (*(_QWORD *)v9)
  {
LABEL_8:
    v11 = 0;
    v12 = 0;
    return v12 | v11;
  }
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
  {
    LODWORD(v11) = 0;
    v14 = 0;
    v15 = 16 * v13;
    v16 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
    do
    {
      v17 = *((_QWORD *)v16 - 1);
      v18 = *(_QWORD *)(v4 + 32 * *(unsigned int *)(v17 + 24));
      if (v18)
        v19 = *(_BYTE *)(v18 + 16) == 16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = (_QWORD *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u)
          v20 = (_QWORD *)*v20;
        LODWORD(v11) = v11 + *v16 * *(_DWORD *)v20;
      }
      else
      {
        v14 += (*(_DWORD *)(v17 + 16) - 1) * *v16;
      }
      v16 += 4;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
    LODWORD(v11) = 0;
  }
  v12 = v11 & 0xFFFFFF00 | ((unint64_t)(v11 + v14) << 32);
  v11 = v11;
  return v12 | v11;
}

uint64_t sub_21DF25BB0(uint64_t a1, llvm::Type **a2, _QWORD *a3)
{
  llvm::LLVMContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type **v10;
  llvm::Type *Int32Ty;
  uint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  v7 = llvm::ConstantInt::get();
  v8 = *(int *)(a1 + 88);
  if (v8 != *(_DWORD *)(a1 + 16))
  {
    v9 = *(_QWORD *)(a1 + 8) + 16 * v8;
    do
    {
      v10 = *(llvm::Type ***)(*a3 + 8 * *(unsigned int *)(*(_QWORD *)v9 + 24));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      v18 = 257;
      v12 = sub_21DF25A08((uint64_t)a2, v10, Int32Ty, (uint64_t)v17);
      llvm::Type::getInt32Ty(a2[8], v13);
      v14 = llvm::ConstantInt::get();
      v18 = 257;
      v15 = sub_21DF1A864((uint64_t)a2, v12, v14, (uint64_t)v17);
      v18 = 257;
      v7 = sub_21DF19FAC((uint64_t)a2, v7, v15, (uint64_t)v17);
      v9 += 16;
    }
    while (v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16));
  }
  return v7;
}

uint64_t sub_21DF25CC8(_QWORD *a1, uint64_t a2, llvm::Type **a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_21DF226D8((uint64_t)a1, a2 + 96);
  v8 = *(unsigned int *)(a2 + 184);
  if ((_DWORD)v8)
  {
    v9 = *(unsigned int **)(a2 + 176);
    v10 = &v9[2 * v8];
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v9 += 2;
      *(_QWORD *)(*a1 + 8 * v12) = *(_QWORD *)(*a4 + 8 * v11);
    }
    while (v9 != v10);
  }
  result = sub_21DF25BB0(a2, a3, a4);
  *(_QWORD *)(*a1 + 8 * *((unsigned int *)a1 + 2) - 8) = result;
  return result;
}

uint64_t sub_21DF25D6C(_QWORD *a1, uint64_t a2, llvm::Type *this)
{
  llvm::ArrayType *Int64Ty;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::ArrayType *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, (llvm::LLVMContext *)a2);
  v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*(unsigned int *)(a2 + 1612));
  sub_21DF19CD0((uint64_t)a1, v7);
  if (*(_BYTE *)(a2 + 1646))
  {
    v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, v8);
    v10 = llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(a2 + 1612));
    sub_21DF19CD0((uint64_t)a1, v10);
  }
  v11 = llvm::Type::getInt64Ty(this, v8);
  return sub_21DF19CD0((uint64_t)a1, v11);
}

uint64_t sub_21DF25DFC(_QWORD *a1, uint64_t a2, llvm::Type *this)
{
  llvm::ArrayType *Int64Ty;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::ArrayType *v9;
  uint64_t v10;
  llvm::ArrayType *Int32Ty;
  uint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, (llvm::LLVMContext *)a2);
  v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*(unsigned int *)(a2 + 1608));
  sub_21DF19CD0((uint64_t)a1, v7);
  if (*(_BYTE *)(a2 + 1645))
  {
    v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, v8);
    v10 = llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(a2 + 1608));
    sub_21DF19CD0((uint64_t)a1, v10);
  }
  Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, v8);
  v12 = llvm::ArrayType::get(Int32Ty, (llvm::Type *)*(unsigned int *)(a2 + 1680));
  sub_21DF19CD0((uint64_t)a1, v12);
  v14 = llvm::Type::getInt64Ty(this, v13);
  return sub_21DF19CD0((uint64_t)a1, v14);
}

_QWORD *sub_21DF25EA8(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  *result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    result = (_QWORD *)sub_21DF226D8((uint64_t)result, a2 + 96);
  v5 = *(unsigned int *)(a2 + 184);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)(a2 + 176);
    v7 = &v6[2 * v5];
    do
    {
      v8 = *v6;
      v9 = v6[1];
      v6 += 2;
      *(_QWORD *)(*result + 8 * v9) = *(_QWORD *)(*a3 + 8 * v8);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t GLCompilerCreate(void *__src, size_t __len, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v7[3];
  _QWORD v8[3];
  void *__dst;
  char v10;

  v4 = sub_21DF24420(&__dst, __src, __len);
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v5 = sub_21DF25F88((uint64_t)v4, a3, 0, (uint64_t)v8, v7);
  if (v10 < 0)
    operator delete(__dst);
  return v5;
}

uint64_t sub_21DF25F88(uint64_t a1, int a2, unsigned int a3, uint64_t a4, const void **a5)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  std::locale::id *v18;
  const std::locale::facet *v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  int v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type size;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  const char **v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  uint32_t v37;
  uint64_t *v38;
  NSObject *v39;
  _BOOL4 v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  NSObject *v45;
  _BOOL4 v46;
  std::string *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  uint64_t *v58;
  NSObject *v59;
  std::string::size_type v60;
  std::string *p_buf;
  std::string::size_type v62;
  std::string *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const std::string::value_type *v73;
  const std::string::value_type *v74;
  const char *v75;
  const std::string::value_type *v76;
  __darwin_ino64_t st_gid_high;
  stat *v78;
  const std::string::value_type *v79;
  const std::string::value_type *v80;
  __darwin_ino64_t st_ino;
  const char *v82;
  const char *v83;
  int v84;
  const char *v85;
  const std::string::value_type *v86;
  const char *v87;
  pid_t v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  const char *v93;
  const char *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::ios_base *v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  char *v116;
  const std::string::value_type *v117;
  std::string *v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  char v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  char v130;
  BOOL v131;
  char v132;
  char v133;
  char v134;
  char v135;
  unint64_t v136;
  char **v137;
  char *v138;
  size_t v139;
  size_t v140;
  size_t v141;
  const char **v142;
  char *v143;
  size_t v144;
  __darwin_ino64_t v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  char v157;
  const char *v158;
  char v159;
  char v160;
  char v161;
  const char *v162;
  uint64_t v163;
  char v164;
  char v165;
  char v166;
  unint64_t v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char **v172;
  uint64_t v173;
  char **v174;
  const char **v175;
  BOOL v176;
  int *v177;
  int v178;
  char *v179;
  size_t v180;
  char *v181;
  char *v182;
  size_t v183;
  size_t v184;
  __darwin_ino64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char v195;
  int v196;
  char v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char v201;
  char v202;
  char v203;
  BOOL v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char **v210;
  char *v211;
  size_t v212;
  size_t v213;
  const char **v214;
  char *v215;
  size_t v216;
  __darwin_ino64_t v217;
  int v218;
  int v219;
  int v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  char **v224;
  char *v225;
  unint64_t v226;
  char v227;
  char v228;
  char *v229;
  uint64_t v230;
  char **v231;
  int v232;
  size_t v233;
  size_t v234;
  size_t v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char **v243;
  int v244;
  const char *v245;
  unint64_t v246;
  BOOL v247;
  const char *v248;
  uint64_t v249;
  char v250;
  int v251;
  char *v252;
  size_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  const char *v261;
  uint64_t v262;
  const char *v263;
  char v264;
  char *v265;
  char *v266;
  char v267;
  uint64_t i;
  size_t v269;
  uint64_t j;
  size_t v271;
  uint64_t k;
  size_t v273;
  llvm::PassRegistry *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  llvm *PassRegistry;
  llvm::PassRegistry *v298;
  llvm::PassRegistry *v299;
  llvm::PassRegistry *v300;
  llvm::PassRegistry *v301;
  llvm::PassRegistry *v302;
  llvm::PassRegistry *v303;
  llvm::PassRegistry *v304;
  llvm::PassRegistry *v305;
  uint64_t *v306;
  int v307;
  unsigned __int8 v308;
  unsigned __int8 v309;
  unsigned __int8 v310;
  uint64_t *v311;
  unsigned __int8 v312;
  const std::string::value_type *v313;
  std::string::size_type v314;
  char *v315;
  llvm *LastDiagnostics;
  uint64_t v317;
  __darwin_ino64_t m;
  _BYTE *v319;
  uint64_t v320;
  _BYTE *v321;
  int v322;
  llvm *v323;
  uint64_t v324;
  __darwin_ino64_t n;
  _BYTE *v326;
  size_t v327;
  stat *v328;
  const void *v329;
  void **v330;
  unint64_t v331;
  void *v332;
  int v333;
  const void *v334;
  size_t v335;
  std::string *p_p;
  _QWORD *v338;
  int v339;
  int v340;
  int v341;
  char v342;
  uint64_t v343;
  uint64_t v347;
  char v348;
  char v349;
  BOOL v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  char v357;
  char v358;
  char v359;
  uint64_t v360;
  char v361;
  unint64_t v362;
  char v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  unint64_t v369;
  uint64_t v370;
  char v371;
  const char *v372;
  char v373;
  char v374;
  const char *v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  unint64_t v381;
  int v382;
  char **v383;
  BOOL v384;
  char v385;
  uint64_t v386;
  char **v387;
  char v388;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  char v394;
  char **v395;
  char v396;
  char *__s;
  char __sa;
  char __sb;
  uint64_t __sc;
  _DWORD *v401;
  char v402;
  char v403;
  char v404;
  char *v405;
  char v406;
  char **v407;
  int *v408;
  const char *v409;
  std::string v410;
  std::string v411;
  std::string __str;
  std::string __p;
  std::string buf;
  std::string *v415;
  __int16 v416;
  std::string::size_type v417;
  stat v418[2];
  _QWORD v419[23];

  v419[20] = *MEMORY[0x24BDAC8D0];
  if (LLVMAGXRuntimeMajorVersion() != 1)
    return 0;
  v343 = a4;
  if (!MGGetBoolAnswer())
    goto LABEL_70;
  v7 = sub_21DF168A4();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v418[0].st_dev = 136315138;
    *(_QWORD *)&v418[0].st_mode = "load";
    _os_log_debug_impl(&dword_21DF15000, v7, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)v418, 0xCu);
  }
  sub_21DF1AF28(&__p, "/System/Library/PrivateFrameworks/AGXCompilerCore-S2A8.framework/EnvVars.txt");
  v8 = MEMORY[0x24BEDB838];
  v9 = MEMORY[0x24BEDB838] + 64;
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  v419[0] = MEMORY[0x24BEDB838] + 64;
  *(_QWORD *)&v418[0].st_dev = v10;
  *(_QWORD *)((char *)&v418[0].st_dev + *(_QWORD *)(v10 - 24)) = v11;
  v418[0].st_ino = 0;
  v12 = (std::ios_base *)((char *)v418 + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24));
  std::ios_base::init(v12, &v418[0].st_uid);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  *(_QWORD *)&v418[0].st_dev = v8 + 24;
  v419[0] = v9;
  MEMORY[0x2207A781C](&v418[0].st_uid);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v418 + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)), *(_DWORD *)((char *)&v418[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)) | 4);
  v13 = *(_DWORD *)((_BYTE *)&v418[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)) & 5;
  v14 = sub_21DF168A4();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    v16 = (_QWORD *)MEMORY[0x24BEDB7E0];
    if (v15)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_21DF15000, v14, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)&buf, 2u);
    }
    goto LABEL_68;
  }
  if (v15)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_debug_impl(&dword_21DF15000, v14, OS_LOG_TYPE_DEBUG, "Reading environment variables from '%s'", (uint8_t *)&buf, 0xCu);
  }
  sub_21DF166C4();
  sub_21DF1678C();
  v18 = (std::locale::id *)MEMORY[0x24BEDB350];
  memset(&__str, 0, sizeof(__str));
  while (2)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v418 + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)));
    v19 = std::locale::use_facet((const std::locale *)&buf, v18);
    v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale((std::locale *)&buf);
    MEMORY[0x2207A7834](&buf, v418, 1);
    if (!buf.__r_.__value_.__s.__data_[0])
      goto LABEL_30;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      *__str.__r_.__value_.__l.__data_ = 0;
      __str.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    }
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD **)((char *)&v418[0].st_atimespec.tv_nsec + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24));
      v23 = (_BYTE *)v22[3];
      if (v23 != (_BYTE *)v22[4])
      {
        v22[3] = v23 + 1;
        LOBYTE(v22) = *v23;
        goto LABEL_21;
      }
      LODWORD(v22) = (*(uint64_t (**)(_QWORD *))(*v22 + 80))(v22);
      if ((_DWORD)v22 == -1)
        break;
LABEL_21:
      if (v20 == v22)
      {
        v24 = 0;
        goto LABEL_29;
      }
      ++v21;
      std::string::push_back(&__str, (std::string::value_type)v22);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
      {
        v24 = 4;
        goto LABEL_29;
      }
    }
    if (v21)
      v24 = 2;
    else
      v24 = 6;
LABEL_29:
    std::ios_base::clear((std::ios_base *)((char *)v418 + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)), *(_DWORD *)((char *)&v418[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)) | v24);
LABEL_30:
    if ((*((_BYTE *)&v418[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)) & 5) == 0)
    {
      v25 = std::string::find(&__str, 61, 0);
      if (v25 == -1)
      {
        v33 = sub_21DF168A4();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_21DF15000, v33, OS_LOG_TYPE_DEBUG, "Skipped line with no '=' character in EnvVars.txt", (uint8_t *)&buf, 2u);
        }
        continue;
      }
      v26 = v25;
      std::string::basic_string(&v411, &__str, 0, v25, (std::allocator<char> *)&buf);
      std::string::basic_string(&v410, &__str, v26 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
      sub_21DF28F8C(&v411);
      sub_21DF28F8C(&v410);
      size = HIBYTE(v411.__r_.__value_.__r.__words[2]);
      if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v411.__r_.__value_.__l.__size_;
      if (size)
      {
        v28 = qword_2553B2F68;
        v29 = qword_2553B2F70 - qword_2553B2F68;
        if (qword_2553B2F70 == qword_2553B2F68)
        {
          v32 = (const char **)qword_2553B2F68;
        }
        else
        {
          if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v411;
          else
            v30 = (std::string *)v411.__r_.__value_.__r.__words[0];
          v31 = 8 * (v29 >> 3);
          v32 = (const char **)qword_2553B2F68;
          while (strcmp(*v32, (const char *)v30))
          {
            ++v32;
            v31 -= 8;
            if (!v31)
              goto LABEL_55;
          }
        }
        if (v32 == (const char **)(v28 + (v29 & 0xFFFFFFFFFFFFFFF8)))
        {
LABEL_55:
          v45 = sub_21DF168A4();
          v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
          v18 = (std::locale::id *)MEMORY[0x24BEDB350];
          if (v46)
          {
            v47 = &v411;
            if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v47 = (std::string *)v411.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
            v35 = v45;
            v36 = "Read unknown variable from EnvVars.txt: %s";
            v37 = 12;
            goto LABEL_63;
          }
        }
        else
        {
          v38 = sub_21DF28E78(&v411, (uint64_t)&v411);
          std::string::operator=((std::string *)(v38 + 7), &v410);
          v39 = sub_21DF168A4();
          v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
          v18 = (std::locale::id *)MEMORY[0x24BEDB350];
          if (v40)
          {
            v41 = HIBYTE(v411.__r_.__value_.__r.__words[2]);
            v42 = &v411;
            if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v41 = v411.__r_.__value_.__l.__size_;
              v42 = (std::string *)v411.__r_.__value_.__r.__words[0];
            }
            v43 = HIBYTE(v410.__r_.__value_.__r.__words[2]);
            v44 = &v410;
            if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v43 = v410.__r_.__value_.__l.__size_;
              v44 = (std::string *)v410.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            v415 = v44;
            v416 = 2048;
            v417 = v43;
            v35 = v39;
            v36 = "%s[%lu] = %s[%lu]\n";
            v37 = 42;
LABEL_63:
            _os_log_debug_impl(&dword_21DF15000, v35, OS_LOG_TYPE_DEBUG, v36, (uint8_t *)&buf, v37);
          }
        }
      }
      else
      {
        v34 = sub_21DF168A4();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v35 = v34;
          v36 = "Skipped line with empty variable name in EnvVars.txt";
          v37 = 2;
          goto LABEL_63;
        }
      }
      if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v410.__r_.__value_.__l.__data_);
      if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v411.__r_.__value_.__l.__data_);
      continue;
    }
    break;
  }
  v48 = sub_21DF168A4();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_21DF15000, v48, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)&buf, 2u);
  }
  v16 = (_QWORD *)MEMORY[0x24BEDB7E0];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_68:
  *(_QWORD *)&v418[0].st_dev = *v16;
  *(_QWORD *)((char *)&v418[0].st_dev + *(_QWORD *)(*(_QWORD *)&v418[0].st_dev - 24)) = v16[3];
  MEMORY[0x2207A7828](&v418[0].st_uid);
  std::istream::~istream();
  MEMORY[0x2207A790C](v419);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_70:
  v49 = *(unsigned __int8 *)(a1 + 23);
  if ((v49 & 0x80u) != 0)
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 && MGGetBoolAnswer())
  {
    v50 = *(unsigned __int8 *)(a1 + 23);
    if ((v50 & 0x80u) != 0)
      v50 = *(_QWORD *)(a1 + 8);
    if (v50)
    {
      sub_21DF1678C();
      v51 = sub_21DF168A4();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        v418[0].st_dev = 136315138;
        *(_QWORD *)&v418[0].st_mode = "deserialize";
        _os_log_debug_impl(&dword_21DF15000, v51, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)v418, 0xCu);
      }
      v52 = 0;
      do
      {
        v53 = *(unsigned __int8 *)(a1 + 23);
        if ((v53 & 0x80u) != 0)
          v53 = *(_QWORD *)(a1 + 8);
        if (v52 >= v53)
          break;
        v54 = std::string::find((const std::string *)a1, 10, v52);
        if (v54 == -1)
          break;
        v55 = v54;
        std::string::basic_string(&buf, (const std::string *)a1, v52, v54 - v52, (std::allocator<char> *)v418);
        v52 = v55 + 1;
        v56 = std::string::find((const std::string *)a1, 10, v55 + 1);
        v57 = v56;
        if (v56 != -1)
        {
          std::string::basic_string(&__p, (const std::string *)a1, v52, v56 - v52, (std::allocator<char> *)v418);
          v58 = sub_21DF28E78(&buf, (uint64_t)&buf);
          std::string::operator=((std::string *)(v58 + 7), &__p);
          v59 = sub_21DF168A4();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            v60 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_buf = &buf;
            else
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v60 = buf.__r_.__value_.__l.__size_;
            v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = &__p;
            else
              v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v62 = __p.__r_.__value_.__l.__size_;
            v418[0].st_dev = 136315906;
            *(_QWORD *)&v418[0].st_mode = p_buf;
            WORD2(v418[0].st_ino) = 2048;
            *(__darwin_ino64_t *)((char *)&v418[0].st_ino + 6) = v60;
            HIWORD(v418[0].st_gid) = 2080;
            *(_QWORD *)&v418[0].st_rdev = v63;
            LOWORD(v418[0].st_atimespec.tv_sec) = 2048;
            *(__darwin_time_t *)((char *)&v418[0].st_atimespec.tv_sec + 2) = v62;
            _os_log_debug_impl(&dword_21DF15000, v59, OS_LOG_TYPE_DEBUG, "\t%s[%lu] = %s[%lu]\n", (uint8_t *)v418, 0x2Au);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v52 = v57 + 1;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      while (v57 != -1);
      v64 = sub_21DF168A4();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v418[0].st_dev) = 0;
        _os_log_debug_impl(&dword_21DF15000, v64, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)v418, 2u);
      }
    }
  }
  if (MGGetBoolAnswer())
    sub_21DF21324("USE_MONOLITHIC_COMPILER");
  qword_2553B3D80 = 0;
  v65 = MGGetBoolAnswer();
  if ((_DWORD)v65)
  {
    v65 = (uint64_t)sub_21DF21324("AGC_ENABLE_STATUS_FILE");
    if (v65)
    {
      if (*(_BYTE *)v65 != 48)
      {
        v65 = atoi((const char *)v65);
        if ((_DWORD)v65)
        {
          sub_21DF28D70();
          if (byte_2553B301F < 0)
          {
            *(_BYTE *)qword_2553B3008 = 0;
            qword_2553B3010 = 0;
          }
          else
          {
            LOBYTE(qword_2553B3008) = 0;
            byte_2553B301F = 0;
          }
          if (MGGetBoolAnswer())
          {
            v72 = (const char *)sub_21DF21324("AGC_ENABLE_STATUS_FILE_STDERR");
            if (v72)
            {
              if (*v72 != 48 && atoi(v72))
              {
                qword_2553B3D80 = MEMORY[0x24BEDB310];
                goto LABEL_196;
              }
            }
          }
          memset(v418, 0, 24);
          v73 = (const std::string::value_type *)sub_21DF21324("AGC_STATUS_LOG_DIRECTORY");
          if (v73 && (v74 = v73, (v75 = (const char *)sub_21DF21324("USE_MONOLITHIC_COMPILER")) != 0))
          {
            v76 = "/private/var/mobile/Library/Logs/";
            if (*v75 != 48 && atoi(v75))
              v76 = v74;
          }
          else
          {
            v76 = "/private/var/mobile/Library/Logs/";
          }
          std::string::append((std::string *)v418, v76);
          st_gid_high = HIBYTE(v418[0].st_gid);
          if ((v418[0].st_gid & 0x80000000) == 0)
            v78 = v418;
          else
            v78 = *(stat **)&v418[0].st_dev;
          if ((v418[0].st_gid & 0x80000000) != 0)
            st_gid_high = v418[0].st_ino;
          if (*((_BYTE *)v78 + st_gid_high - 1) != 47)
            std::string::push_back((std::string *)v418, 47);
          if (a3 >= 2)
            v79 = "Metal";
          else
            v79 = "OpenGL";
          std::string::append((std::string *)v418, v79);
          if ((v418[0].st_gid & 0x80000000) == 0)
            v80 = (const std::string::value_type *)v418;
          else
            v80 = *(const std::string::value_type **)&v418[0].st_dev;
          if ((v418[0].st_gid & 0x80000000) == 0)
            st_ino = HIBYTE(v418[0].st_gid);
          else
            st_ino = v418[0].st_ino;
          std::string::append((std::string *)&qword_2553B3008, v80, st_ino);
          if (SHIBYTE(v418[0].st_gid) < 0)
            operator delete(*(void **)&v418[0].st_dev);
          if (byte_2553B301F >= 0)
            v82 = (const char *)&qword_2553B3008;
          else
            v82 = (const char *)qword_2553B3008;
          if (stat(v82, v418))
          {
            if (byte_2553B301F >= 0)
              v83 = (const char *)&qword_2553B3008;
            else
              v83 = (const char *)qword_2553B3008;
            v84 = mkdir(v83, 0x1FFu);
            if (byte_2553B301F >= 0)
              v85 = (const char *)&qword_2553B3008;
            else
              v85 = (const char *)qword_2553B3008;
            if (v84)
            {
              __error();
              syslog(3, "Failed to create: %s, with error code %d");
            }
            else if (chown(v85, 0x1F5u, 0xFFFFFFFF))
            {
              __error();
              syslog(3, "Failed to modify: %s, with error code %d");
            }
          }
          std::string::append((std::string *)&qword_2553B3008, "/");
          if (!MGGetBoolAnswer()
            || (v86 = (const std::string::value_type *)sub_21DF21324("AGC_CLIENT_PROCESS_NAME")) == 0)
          {
            if (a3 >= 2)
              v86 = "agc_mtl_status";
            else
              v86 = "agc_gl_status";
          }
          std::string::append((std::string *)&qword_2553B3008, v86);
          if (!MGGetBoolAnswer()
            || (v87 = (const char *)sub_21DF21324("AGC_STATUS_FILE_NO_PID")) == 0
            || *v87 == 48
            || !atoi(v87))
          {
            v88 = getpid();
            std::to_string(&__p, v88);
            v89 = std::string::insert(&__p, 0, "_");
            v90 = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &buf;
            else
              v91 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            else
              v92 = buf.__r_.__value_.__l.__size_;
            std::string::append((std::string *)&qword_2553B3008, (const std::string::value_type *)v91, v92);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          LODWORD(v93) = MGGetBoolAnswer();
          if ((_DWORD)v93)
          {
            v93 = (const char *)sub_21DF21324("AGC_STATUS_FILE_MAX_SIZE_IN_BYTES");
            if (v93)
            {
              if (*v93 == 48)
                LODWORD(v93) = 0;
              else
                LODWORD(v93) = atoi(v93);
            }
          }
          dword_2553B3D88 = (int)v93;
          if (byte_2553B301F >= 0)
            v94 = (const char *)&qword_2553B3008;
          else
            v94 = (const char *)qword_2553B3008;
          v95 = stat(v94, v418);
          v96 = (_QWORD *)operator new();
          v97 = MEMORY[0x24BEDB840];
          v98 = MEMORY[0x24BEDB840] + 64;
          v96[52] = MEMORY[0x24BEDB840] + 64;
          v100 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
          v99 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
          *v96 = v100;
          *(_QWORD *)((char *)v96 + *(_QWORD *)(v100 - 24)) = v99;
          v101 = (std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24));
          std::ios_base::init(v101, v96 + 1);
          v101[1].__vftable = 0;
          v101[1].__fmtflags_ = -1;
          *v96 = v97 + 24;
          v96[52] = v98;
          v102 = MEMORY[0x2207A781C](v96 + 1);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v96[1] + 24))(v102, 0, 0);
          std::ofstream::open();
          qword_2553B3D80 = (uint64_t)v96;
          if (!v95)
            goto LABEL_196;
          if (byte_2553B301F >= 0)
            v103 = (const char *)&qword_2553B3008;
          else
            v103 = (const char *)qword_2553B3008;
          v65 = chown(v103, 0x1F5u, 0xFFFFFFFF);
          if ((_DWORD)v65)
          {
            if (byte_2553B301F >= 0)
              v104 = (const char *)&qword_2553B3008;
            else
              v104 = (const char *)qword_2553B3008;
            v105 = __error();
            syslog(3, "Failed to modify: %s, with error code %d", v104, *v105);
          }
          if (qword_2553B3D80)
LABEL_196:
            v65 = std::ostream::flush();
        }
      }
    }
  }
  sub_21DF28954(v65, "Running LLVM version %d.", v66, v67, v68, v69, v70, v71, 23);
  sub_21DF1AF28(&__p, "Active environment variable values:\n");
  v106 = MGGetBoolAnswer();
  if ((_DWORD)v106)
  {
    sub_21DF166C4();
    v113 = qword_2553B2F68;
    if (qword_2553B2F70 != qword_2553B2F68)
    {
      v114 = 0;
      v115 = 1;
      do
      {
        v116 = *(char **)(v113 + 8 * v114);
        v106 = (uint64_t)sub_21DF21324(v116);
        if (v106)
        {
          v117 = (const std::string::value_type *)v106;
          std::string::append(&__p, v116);
          std::string::append(&__p, "=");
          std::string::append(&__p, v117);
          v106 = (uint64_t)std::string::append(&__p, "\n");
        }
        v114 = v115;
        v113 = qword_2553B2F68;
        ++v115;
      }
      while (v114 < (qword_2553B2F70 - qword_2553B2F68) >> 3);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = &__p;
  else
    v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_21DF28954(v106, (const char *)v118, v107, v108, v109, v110, v111, v112, v342);
  sub_21DF5152C();
  *(_DWORD *)(*sub_21DF51594("half", 4uLL) + 8) = 1;
  *(_DWORD *)(*sub_21DF51594("float", 5uLL) + 8) = 0;
  *(_DWORD *)(*sub_21DF51594("i16", 3uLL) + 8) = 4;
  *(_DWORD *)(*sub_21DF51594("i32", 3uLL) + 8) = 3;
  sub_21DF35E18();
  *(_DWORD *)(*sub_21DF35EE8("air.perspective", 0xFuLL) + 8) = 0;
  *(_DWORD *)(*sub_21DF35EE8("air.flat", 8uLL) + 8) = 1;
  *(_DWORD *)(*sub_21DF35EE8("air.no_perspective", 0x12uLL) + 8) = 2;
  sub_21DF35E80();
  *(_DWORD *)(*sub_21DF35FEC("air.center", 0xAuLL) + 8) = 0;
  *(_DWORD *)(*sub_21DF35FEC("air.centroid", 0xCuLL) + 8) = 2;
  *(_DWORD *)(*sub_21DF35FEC("air.sample", 0xAuLL) + 8) = 1;
  sub_21DF35B3C();
  if (!dword_2553B3CEC)
  {
    v119 = 0;
    *(_QWORD *)&v418[0].st_dev = &v418[0].st_rdev;
    *(_OWORD *)&v418[0].st_ino = xmmword_21DFA6140;
    do
    {
      v353 = 0;
      v387 = &(&off_24E1F1120)[2 * v119];
      v351 = v119 & 0x7FFFFFFE;
      v120 = v351 == 2;
      v347 = v119;
      v121 = 0x28AAAuLL >> v119;
      v122 = (0x28AAAuLL >> v119) & 1;
      v123 = v120 | (0x28AAAuLL >> v119) & 1;
      if (v122)
        v124 = 3;
      else
        v124 = 2;
      v379 = v124;
      if ((v121 & 1) != 0)
        v125 = 3;
      else
        v125 = 2;
      v352 = v122;
      v377 = 2 * v122;
      v349 = v125 + 1;
      v350 = v120;
      v348 = v125 + 2;
      __s = "1d";
      v382 = v123;
      do
      {
        if (!v352 || v353 != 4)
        {
          v126 = 0;
          v127 = v353 - 5;
          v128 = v348;
          v129 = v349;
          if (((0xB5uLL >> v353) & 1) != 0)
          {
            v128 = v349;
            v129 = 0;
          }
          v392 = v129;
          v130 = v128 + v350;
          if (v351 != 2)
            v128 = 0;
          v390 = v128;
          v131 = v127 >= 3;
          if (v127 >= 3)
            v132 = v130 + 3;
          else
            v132 = 0;
          v368 = v132;
          if (v131)
            v133 = v130 + 5;
          else
            v133 = v130 + 3;
          v366 = v133;
          if (v131)
            v134 = v130;
          else
            v134 = 0;
          v371 = v130 + 2;
          if (v131)
            v135 = v130 + 2;
          else
            v135 = v130;
          v361 = v135 + 2;
          v363 = v135;
          v365 = v134;
          v374 = v130;
          v357 = v130 + 1;
          v359 = v135 + 3;
          v405 = (char *)&unk_21DFAD77A;
          do
          {
            v136 = 0;
            v355 = v126;
            v401 = &off_24E1F1378 + 2 * v126 + 1;
            v137 = &off_24E1F12D8;
            do
            {
              if (!v123 || v136 <= 1)
              {
                v138 = *v387;
                if (*v387)
                {
                  v139 = strlen(*v387);
                  v418[0].st_ino = 0;
                  sub_21DF2DA34(v418, v138, &v138[v139]);
                }
                else
                {
                  v418[0].st_ino = 0;
                }
                v140 = strlen(__s);
                sub_21DF2DA34(v418, __s, &__s[v140]);
                v141 = strlen(v405);
                sub_21DF2DA34(v418, v405, &v405[v141]);
                if (v123)
                  v142 = (const char **)v137;
                else
                  v142 = (const char **)(v137 - 1);
                v143 = (char *)*v142;
                if (*v142)
                {
                  v144 = strlen(*v142);
                  sub_21DF2DA34(v418, v143, &v143[v144]);
                }
                else
                {
                  v145 = v418[0].st_ino;
                  if (*(_QWORD *)&v418[0].st_uid < v418[0].st_ino)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v145 = v418[0].st_ino;
                  }
                  v418[0].st_ino = v145;
                }
                if (*v401)
                {
                  v146 = 0;
                  if (*v401 == 1)
                  {
                    v147 = v371;
                    v149 = v366;
                    v148 = v368;
                    v150 = v374;
                  }
                  else
                  {
                    v148 = 0;
                    v150 = 0;
                    v147 = v374;
                    v149 = v357;
                  }
                }
                else
                {
                  v150 = 0;
                  v147 = v361;
                  v146 = v363;
                  v148 = v365;
                  v149 = v359;
                }
                v151 = *((_DWORD *)v387 + 2);
                v152 = (int)(&off_24E1F1250)[2 * v353 + 1];
                v153 = *((_DWORD *)v137 + 2);
                v154 = *sub_21DF734A8(*(const void **)&v418[0].st_dev, v418[0].st_ino);
                *(_DWORD *)(v154 + 8) = v151;
                *(_DWORD *)(v154 + 12) = v152;
                *(_DWORD *)(v154 + 16) = 0;
                *(_DWORD *)(v154 + 20) = v153;
                *(_DWORD *)(v154 + 24) = 0;
                v123 = v382;
                *(_BYTE *)(v154 + 28) = v382;
                *(_BYTE *)(v154 + 29) = v149;
                *(_WORD *)(v154 + 30) = 256;
                *(_BYTE *)(v154 + 32) = 0;
                *(_BYTE *)(v154 + 33) = v377;
                *(_BYTE *)(v154 + 34) = v379;
                *(_BYTE *)(v154 + 35) = v148;
                *(_BYTE *)(v154 + 36) = v146;
                *(_BYTE *)(v154 + 37) = v150;
                *(_BYTE *)(v154 + 38) = 0;
                *(_BYTE *)(v154 + 39) = v392;
                *(_BYTE *)(v154 + 40) = v390;
                *(_DWORD *)(v154 + 41) = 0;
                *(_BYTE *)(v154 + 45) = v147;
                *(_WORD *)(v154 + 46) = 0;
              }
              ++v136;
              v137 += 3;
            }
            while (v136 != 6);
            v405 = (char *)*(&off_24E1F1378 + 2 * v355 + 2);
            v126 = 1;
          }
          while (v355 != 1);
        }
        __s = (&off_24E1F1250)[2 * ++v353];
      }
      while (v353 != 7);
      v119 = v347 + 1;
    }
    while (v347 != 3);
LABEL_258:
    v360 = 0;
    v155 = (0x28AAAuLL >> v119) & 1;
    if (v155)
      v156 = 2;
    else
      v156 = 1;
    v380 = v156;
    if (((0x28AAAuLL >> v119) & 1) != 0)
      v157 = 2;
    else
      v157 = 1;
    v358 = v157 + 1;
    v356 = v157 + 2;
    v383 = &(&off_24E1F1120)[2 * v119];
    v354 = v119;
    v362 = (0x20C0uLL >> v119) & 1;
    v158 = "1d";
    while (v155 && v360 == 4)
    {
LABEL_311:
      v158 = (&off_24E1F1250)[2 * ++v360];
      if (v360 == 7)
      {
        v119 = v354 + 1;
        if (v354 != 7)
          goto LABEL_258;
        do
        {
          v191 = 0;
          v395 = &(&off_24E1F1120)[2 * v119];
          v192 = v119 & 0x7FFFFFFE;
          v384 = v192 == 10;
          v370 = v119;
          v193 = 0x57555uLL >> v119;
          v194 = v193 & 1;
          if ((v193 & 1) != 0)
            v195 = 2;
          else
            v195 = 3;
          v391 = v195;
          v196 = v193 & 1;
          if (v196)
            v197 = 2;
          else
            v197 = 3;
          v381 = v194;
          v389 = (2 * v194) ^ 2;
          v378 = v197 + 1;
          v376 = v197 + 2;
          v373 = v196 & (v192 != 10);
          v198 = "1d";
          do
          {
            v386 = v191;
            v199 = v191 - 5;
            if ((v191 & 0xFFFFFFFE) == 2 || v199 <= 2)
            {
              v200 = 0;
              v407 = &(&off_24E1F1250)[2 * v191 + 1];
              v201 = v378;
              v202 = v376;
              if (((0xB5uLL >> v191) & 1) != 0)
              {
                v202 = v378;
                v201 = 0;
              }
              v403 = v201;
              v203 = v202 + v384;
              v204 = v199 >= 3;
              if (v199 >= 3)
                v205 = v202 + v384 + 2;
              else
                v205 = v202 + v384;
              if (!v204)
                v203 = 0;
              __sb = v203;
              if (v192 == 10)
                v206 = v202;
              else
                v206 = 0;
              if (v192 == 10)
                v207 = 0;
              else
                v207 = v205;
              v208 = v205 + v373;
              if (v381)
                v209 = v207;
              else
                v209 = 0;
              v210 = &off_24E1F12D8;
              do
              {
                if (v192 != 10 || v200 <= 1)
                {
                  v211 = *v395;
                  if (*v395)
                  {
                    v212 = strlen(*v395);
                    v418[0].st_ino = 0;
                    sub_21DF2DA34(v418, v211, &v211[v212]);
                  }
                  else
                  {
                    v418[0].st_ino = 0;
                  }
                  v213 = strlen(v198);
                  sub_21DF2DA34(v418, v198, &v198[v213]);
                  if (v192 == 10)
                    v214 = (const char **)v210;
                  else
                    v214 = (const char **)(v210 - 1);
                  v215 = (char *)*v214;
                  if (*v214)
                  {
                    v216 = strlen(*v214);
                    sub_21DF2DA34(v418, v215, &v215[v216]);
                    v217 = v418[0].st_ino;
                  }
                  else
                  {
                    v217 = v418[0].st_ino;
                    if (*(_QWORD *)&v418[0].st_uid < v418[0].st_ino)
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      v217 = v418[0].st_ino;
                    }
                    v418[0].st_ino = v217;
                  }
                  v218 = *((_DWORD *)v395 + 2);
                  v219 = *(_DWORD *)v407;
                  v220 = *((_DWORD *)v210 + 2);
                  v221 = *sub_21DF734A8(*(const void **)&v418[0].st_dev, v217);
                  *(_DWORD *)(v221 + 8) = v218;
                  *(_DWORD *)(v221 + 12) = v219;
                  *(_DWORD *)(v221 + 16) = 0;
                  *(_DWORD *)(v221 + 20) = v220;
                  *(_BYTE *)(v221 + 28) = 0;
                  *(_DWORD *)(v221 + 24) = 0;
                  *(_BYTE *)(v221 + 29) = v208;
                  *(_WORD *)(v221 + 30) = 256;
                  *(_BYTE *)(v221 + 32) = 0;
                  *(_BYTE *)(v221 + 33) = v389;
                  *(_BYTE *)(v221 + 34) = v391;
                  *(_BYTE *)(v221 + 35) = __sb;
                  *(_BYTE *)(v221 + 38) = 0;
                  *(_WORD *)(v221 + 36) = 0;
                  *(_BYTE *)(v221 + 39) = v403;
                  *(_BYTE *)(v221 + 40) = v206;
                  *(_BYTE *)(v221 + 43) = 0;
                  *(_WORD *)(v221 + 41) = 0;
                  *(_BYTE *)(v221 + 44) = v209;
                  *(_BYTE *)(v221 + 47) = 0;
                  *(_WORD *)(v221 + 45) = 0;
                }
                ++v200;
                v210 += 3;
              }
              while (v200 != 6);
            }
            v191 = v386 + 1;
            v198 = (&off_24E1F1250)[2 * v386 + 2];
          }
          while (v386 != 6);
          v119 = v370 + 1;
        }
        while (v370 != 11);
        v222 = 0;
        do
        {
          v223 = 0;
          v224 = &(&off_24E1F1120)[2 * v119];
          v225 = *v224;
          v408 = (int *)(v224 + 1);
          v396 = v222;
          v226 = (0x20C0uLL >> v119) & 1;
          if (v226)
            v227 = 3;
          else
            v227 = 2;
          v404 = v227;
          v228 = 2 * v226;
          v229 = ".v4f32";
          do
          {
            v230 = 0;
            __sc = v223;
            v231 = &off_24E1F12D0[3 * v223 + 2];
            v232 = 1;
            do
            {
              if (v225)
              {
                v233 = strlen(v225);
                v418[0].st_ino = 0;
                sub_21DF2DA34(v418, v225, &v225[v233]);
              }
              else
              {
                v418[0].st_ino = 0;
              }
              v234 = strlen(*((const char **)&unk_24E1F13A8 + 2 * v230 + 1));
              sub_21DF2DA34(v418, *((_BYTE **)&unk_24E1F13A8 + 2 * v230 + 1), (_BYTE *)(*((_QWORD *)&unk_24E1F13A8 + 2 * v230 + 1) + v234));
              v235 = strlen(v229);
              sub_21DF2DA34(v418, v229, &v229[v235]);
              v236 = *v408;
              v237 = *(_DWORD *)v231;
              v238 = *sub_21DF734A8(*(const void **)&v418[0].st_dev, v418[0].st_ino);
              *(_DWORD *)(v238 + 8) = v236;
              *(_DWORD *)(v238 + 12) = 1;
              *(_DWORD *)(v238 + 16) = v232;
              *(_DWORD *)(v238 + 20) = v237;
              *(_BYTE *)(v238 + 28) = 0;
              *(_DWORD *)(v238 + 24) = 0;
              *(_BYTE *)(v238 + 29) = v404;
              *(_DWORD *)(v238 + 30) = 0;
              *(_BYTE *)(v238 + 34) = 1;
              *(_DWORD *)(v238 + 38) = 0;
              *(_DWORD *)(v238 + 35) = 0;
              *(_BYTE *)(v238 + 42) = v228;
              *(_DWORD *)(v238 + 43) = 0;
              v239 = v230 + 1;
              v240 = 16 * (v230 + 1);
              v230 = 1;
              *(_BYTE *)(v238 + 47) = 1;
              v232 = *(_DWORD *)((char *)&unk_24E1F13A8 + v240);
            }
            while (v239 != 2);
            v223 = __sc + 1;
            v229 = off_24E1F12D0[3 * __sc + 3];
          }
          while (__sc != 5);
          v222 = 1;
          v119 = 13;
        }
        while ((v396 & 1) == 0);
        sub_21DF634A0();
        v241 = 0;
LABEL_369:
        v242 = 0;
        v243 = &(&off_24E1F13D8)[2 * v241];
        v244 = *((_DWORD *)v243 + 2);
        v245 = "1d";
        while (1)
        {
          if (v241 != 4 || v242 == 4)
          {
            v246 = (0xB5uLL >> v242) & 1;
            if ((v241 - 5) > 1 || !v246)
              break;
          }
LABEL_391:
          ++v242;
          v245 = (&off_24E1F1250)[2 * v242];
          if (v242 == 7)
          {
            if (++v241 == 11)
            {
              v418[0].st_ino = 0;
              sub_21DF2DA34(v418, "air.get_width_texture_buffer_1d", "");
              v258 = *sub_21DF735A8(*(const void **)&v418[0].st_dev, v418[0].st_ino);
              *(_DWORD *)(v258 + 12) = 0;
              *(_BYTE *)(v258 + 16) = 1;
              sub_21DF63508();
              v259 = 0;
              v260 = "1d";
              do
              {
                if (((0xB5uLL >> v259) & 1) != 0)
                  v261 = "2d_ms";
                else
                  v261 = "2d_ms_array";
                v262 = 5;
                if (((0xB5uLL >> v259) & 1) == 0)
                  v262 = 11;
                v263 = &v261[v262];
                v264 = 1;
                do
                {
                  v418[0].st_ino = 0;
                  sub_21DF2DA34(v418, "air.fence_texture_", "");
                  if ((v264 & 1) != 0)
                  {
                    v265 = (char *)&v260[strlen(v260)];
                    v266 = (char *)v260;
                  }
                  else
                  {
                    v266 = (char *)v261;
                    v265 = (char *)v263;
                  }
                  sub_21DF2DA34(v418, v266, v265);
                  sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C10, *(const void **)&v418[0].st_dev, v418[0].st_ino);
                  v267 = ((v259 & 0xFFFFFFFE) == 2) & v264;
                  v264 = 0;
                }
                while ((v267 & 1) != 0);
                ++v259;
                v260 = (&off_24E1F1250)[2 * v259];
              }
              while (v259 != 7);
              v418[0].st_ino = 0;
              sub_21DF2DA34(v418, "air.fence_texture_", "");
              sub_21DF2DA34(v418, "buffer_1d", "");
              sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C10, *(const void **)&v418[0].st_dev, v418[0].st_ino);
              sub_21DF63570();
              for (i = 0; i != 16; ++i)
              {
                v418[0].st_ino = 0;
                sub_21DF2DA34(v418, "air.is_null_", "");
                v269 = strlen(off_24E1F1488[i]);
                sub_21DF2DA34(v418, off_24E1F1488[i], &off_24E1F1488[i][v269]);
                sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C38, *(const void **)&v418[0].st_dev, v418[0].st_ino);
              }
              sub_21DF69AC8();
              for (j = 0; j != 16; ++j)
              {
                v418[0].st_ino = 0;
                sub_21DF2DA34(v418, "air.get_null_", "");
                v271 = strlen(off_24E1F1488[j]);
                sub_21DF2DA34(v418, off_24E1F1488[j], &off_24E1F1488[j][v271]);
                sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C60, *(const void **)&v418[0].st_dev, v418[0].st_ino);
              }
              sub_21DF635D8();
              for (k = 0; k != 16; ++k)
              {
                v418[0].st_ino = 0;
                sub_21DF2DA34(v418, "air.get_unique_identifier_", "");
                v273 = strlen(off_24E1F1488[k]);
                sub_21DF2DA34(v418, off_24E1F1488[k], &off_24E1F1488[k][v273]);
                sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C88, *(const void **)&v418[0].st_dev, v418[0].st_ino);
              }
              v418[0].st_ino = 0;
              sub_21DF2DA34(v418, "air.get_unique_identifier_", "");
              sub_21DF2DA34(v418, "sampler", "");
              sub_21DF736A8((llvm::StringMapImpl *)&qword_2553B3C88, *(const void **)&v418[0].st_dev, v418[0].st_ino);
              if (*(stat **)&v418[0].st_dev != (stat *)&v418[0].st_rdev)
                free(*(void **)&v418[0].st_dev);
              goto LABEL_413;
            }
            goto LABEL_369;
          }
        }
        v247 = v246 == 0;
        if (v246)
          v248 = "2d_ms";
        else
          v248 = "2d_ms_array";
        v249 = 5;
        if (v247)
          v249 = 11;
        v409 = &v248[v249];
        v250 = 1;
        while (2)
        {
          if ((v250 & 1) != 0)
            v251 = -11;
          else
            v251 = -9;
          if ((v251 + v241) <= 0xFFFFFFFD)
          {
            v252 = *v243;
            if (*v243)
            {
              v253 = strlen(*v243);
              v418[0].st_ino = 0;
              sub_21DF2DA34(v418, v252, &v252[v253]);
              if ((v250 & 1) != 0)
                goto LABEL_386;
LABEL_388:
              v255 = (char *)v248;
              v254 = (char *)v409;
            }
            else
            {
              v418[0].st_ino = 0;
              if ((v250 & 1) == 0)
                goto LABEL_388;
LABEL_386:
              v254 = (char *)&v245[strlen(v245)];
              v255 = (char *)v245;
            }
            sub_21DF2DA34(v418, v255, v254);
            v256 = *sub_21DF735A8(*(const void **)&v418[0].st_dev, v418[0].st_ino);
            *(_DWORD *)(v256 + 12) = v244;
            *(_BYTE *)(v256 + 16) = 0;
          }
          v257 = ((v242 & 0xFFFFFFFE) == 2) & v250;
          v250 = 0;
          if ((v257 & 1) == 0)
            goto LABEL_391;
          continue;
        }
      }
    }
    v159 = 0;
    v160 = v358;
    v161 = v356;
    if ((unint64_t)(v360 - 5) >= 3)
    {
      v161 = v358;
      v160 = 0;
    }
    v388 = v160;
    if (((0xB5uLL >> v360) & 1) != 0)
      v162 = "2d_ms";
    else
      v162 = "2d_ms_array";
    v163 = 5;
    if (((0xB5uLL >> v360) & 1) == 0)
      v163 = 11;
    v372 = &v162[v163];
    v375 = v162;
    if (((0xB5uLL >> v360) & 1) != 0)
      v164 = v161;
    else
      v164 = v161 + 1;
    v364 = v164;
    if (((0xB5uLL >> v360) & 1) != 0)
      v165 = 0;
    else
      v165 = v161;
    v385 = v165;
    v166 = 1;
    while (2)
    {
      v367 = v166;
      v167 = 0;
      v168 = v364;
      v169 = v364 + (v159 & 1);
      if ((v159 & 1) == 0)
        v168 = 0;
      v402 = v168;
      v170 = v169 + v362;
      if ((v159 & 1) != 0)
        v171 = 0;
      else
        v171 = v169 + v362;
      __sa = v171;
      if (!v362)
        v169 = 0;
      v394 = v169;
      v393 = v170 + ((v159 & 1) == 0);
      v172 = off_24E1F12D0;
      v406 = v159;
LABEL_289:
      v173 = 0;
      v174 = &off_24E1F12D0[3 * v167];
      if (v155)
        v175 = (const char **)(v174 + 1);
      else
        v175 = (const char **)v172;
      v369 = v167;
      v176 = v167 > 1 && v155 != 0;
      v177 = (int *)(v174 + 2);
      v178 = 1;
LABEL_296:
      if (!v176)
      {
        v179 = *v383;
        if (*v383)
        {
          v180 = strlen(*v383);
          v418[0].st_ino = 0;
          sub_21DF2DA34(v418, v179, &v179[v180]);
          if ((v159 & 1) != 0)
            goto LABEL_299;
LABEL_301:
          v182 = (char *)&v158[strlen(v158)];
          v181 = (char *)v158;
        }
        else
        {
          v418[0].st_ino = 0;
          if ((v159 & 1) == 0)
            goto LABEL_301;
LABEL_299:
          v182 = (char *)v372;
          v181 = (char *)v375;
        }
        sub_21DF2DA34(v418, v181, v182);
        v183 = strlen(*((const char **)&unk_24E1F13A8 + 2 * v173 + 1));
        sub_21DF2DA34(v418, *((_BYTE **)&unk_24E1F13A8 + 2 * v173 + 1), (_BYTE *)(*((_QWORD *)&unk_24E1F13A8 + 2 * v173 + 1) + v183));
        if (*v175)
        {
          v184 = strlen(*v175);
          sub_21DF2DA34(v418, *v175, &(*v175)[v184]);
          v185 = v418[0].st_ino;
        }
        else
        {
          v185 = v418[0].st_ino;
          if (*(_QWORD *)&v418[0].st_uid < v418[0].st_ino)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v185 = v418[0].st_ino;
          }
          v418[0].st_ino = v185;
        }
        v186 = *((_DWORD *)v383 + 2);
        v187 = (int)(&off_24E1F1250)[2 * v360 + 1];
        v188 = *v177;
        v189 = *sub_21DF734A8(*(const void **)&v418[0].st_dev, v185);
        *(_DWORD *)(v189 + 8) = v186;
        *(_DWORD *)(v189 + 12) = v187;
        *(_DWORD *)(v189 + 16) = v178;
        *(_DWORD *)(v189 + 20) = v188;
        *(_DWORD *)(v189 + 24) = 0;
        *(_BYTE *)(v189 + 28) = v155;
        *(_BYTE *)(v189 + 29) = v393;
        *(_BYTE *)(v189 + 30) = 0;
        *(_WORD *)(v189 + 31) = 0;
        *(_BYTE *)(v189 + 33) = v155;
        *(_BYTE *)(v189 + 34) = v380;
        *(_BYTE *)(v189 + 37) = 0;
        *(_WORD *)(v189 + 35) = 0;
        *(_BYTE *)(v189 + 38) = __sa;
        *(_BYTE *)(v189 + 39) = v385;
        *(_BYTE *)(v189 + 40) = 0;
        *(_BYTE *)(v189 + 41) = v402;
        *(_BYTE *)(v189 + 42) = v394;
        *(_BYTE *)(v189 + 43) = v388;
        *(_DWORD *)(v189 + 44) = 0;
        v159 = v406;
      }
      v190 = v173 + 1;
      v178 = *((_DWORD *)&unk_24E1F13A8 + 4 * v173 + 4);
      v173 = 1;
      if (v190 == 2)
      {
        v167 = v369 + 1;
        v172 = &off_24E1F12D0[3 * v369 + 3];
        if (v369 == 5)
        {
          v159 = 1;
          v166 = 0;
          if ((((v360 & 0xFFFFFFFE) == 2) & v367) == 0)
            goto LABEL_311;
          continue;
        }
        goto LABEL_289;
      }
      goto LABEL_296;
    }
  }
LABEL_413:
  sub_21DF5BD40();
  if (!dword_2553B3CBC)
  {
    v275 = *sub_21DF7376C("air.vertex_id", 0xDuLL);
    *(_QWORD *)(v275 + 8) = "air.get_vertex_id";
    *(_QWORD *)(v275 + 16) = 17;
    *(_BYTE *)(v275 + 24) = 1;
    v276 = *sub_21DF7376C("air.instance_id", 0xFuLL);
    *(_QWORD *)(v276 + 8) = "air.get_instance_id";
    *(_QWORD *)(v276 + 16) = 19;
    *(_BYTE *)(v276 + 24) = 1;
    v277 = *sub_21DF7376C("air.base_vertex", 0xFuLL);
    *(_QWORD *)(v277 + 8) = "air.get_base_vertex";
    *(_QWORD *)(v277 + 16) = 19;
    *(_BYTE *)(v277 + 24) = 1;
    v278 = *sub_21DF7376C("air.base_instance", 0x11uLL);
    *(_QWORD *)(v278 + 8) = "air.get_base_instance";
    *(_QWORD *)(v278 + 16) = 21;
    *(_BYTE *)(v278 + 24) = 1;
    v279 = *sub_21DF7376C("air.thread_position_in_grid", 0x1BuLL);
    *(_QWORD *)(v279 + 8) = "air.get_global_id";
    *(_QWORD *)(v279 + 16) = 17;
    *(_BYTE *)(v279 + 24) = 0;
    v280 = *sub_21DF7376C("air.thread_position_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v280 + 8) = "air.get_local_id";
    *(_QWORD *)(v280 + 16) = 16;
    *(_BYTE *)(v280 + 24) = 0;
    v281 = *sub_21DF7376C("air.thread_index_in_threadgroup", 0x1FuLL);
    *(_QWORD *)(v281 + 8) = "air.get_local_linear_id";
    *(_QWORD *)(v281 + 16) = 23;
    *(_BYTE *)(v281 + 24) = 1;
    v282 = *sub_21DF7376C("air.threadgroup_position_in_grid", 0x20uLL);
    *(_QWORD *)(v282 + 8) = "air.get_group_id";
    *(_QWORD *)(v282 + 16) = 16;
    *(_BYTE *)(v282 + 24) = 0;
    v283 = *sub_21DF7376C("air.threads_per_grid", 0x14uLL);
    *(_QWORD *)(v283 + 8) = "air.get_global_size";
    *(_QWORD *)(v283 + 16) = 19;
    *(_BYTE *)(v283 + 24) = 0;
    v284 = *sub_21DF7376C("air.threads_per_threadgroup", 0x1BuLL);
    *(_QWORD *)(v284 + 8) = "air.get_local_size";
    *(_QWORD *)(v284 + 16) = 18;
    *(_BYTE *)(v284 + 24) = 0;
    v285 = *sub_21DF7376C("air.threadgroups_per_grid", 0x19uLL);
    *(_QWORD *)(v285 + 8) = "air.get_num_groups";
    *(_QWORD *)(v285 + 16) = 18;
    *(_BYTE *)(v285 + 24) = 0;
    v286 = *sub_21DF7376C("air.thread_execution_width", 0x1AuLL);
    *(_QWORD *)(v286 + 8) = "air.get_thread_execution_width";
    *(_QWORD *)(v286 + 16) = 30;
    *(_BYTE *)(v286 + 24) = 1;
    v287 = *sub_21DF7376C("air.dispatch_threads_per_threadgroup", 0x24uLL);
    *(_QWORD *)(v287 + 8) = "air.get_dispatch_local_size";
    *(_QWORD *)(v287 + 16) = 27;
    *(_BYTE *)(v287 + 24) = 0;
    v288 = *sub_21DF7376C("air.thread_index_in_quadgroup", 0x1DuLL);
    *(_QWORD *)(v288 + 8) = "air.get_quad_element";
    *(_QWORD *)(v288 + 16) = 20;
    *(_BYTE *)(v288 + 24) = 1;
    v289 = *sub_21DF7376C("air.quadgroup_index_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v289 + 8) = "air.get_quad_group";
    *(_QWORD *)(v289 + 16) = 18;
    *(_BYTE *)(v289 + 24) = 1;
    v290 = *sub_21DF7376C("air.quadgroups_per_threadgroup", 0x1EuLL);
    *(_QWORD *)(v290 + 8) = "air.get_quadgroups_per_threadgroup";
    *(_QWORD *)(v290 + 16) = 34;
    *(_BYTE *)(v290 + 24) = 1;
    v291 = *sub_21DF7376C("air.dispatch_quadgroups_per_threadgroup", 0x27uLL);
    *(_QWORD *)(v291 + 8) = "air.get_dispatch_quadgroups_per_threadgroup";
    *(_QWORD *)(v291 + 16) = 43;
    *(_BYTE *)(v291 + 24) = 1;
    v292 = *sub_21DF7376C("air.threads_per_simdgroup", 0x19uLL);
    *(_QWORD *)(v292 + 8) = "air.get_threads_per_simdgroup";
    *(_QWORD *)(v292 + 16) = 29;
    *(_BYTE *)(v292 + 24) = 1;
    v293 = *sub_21DF7376C("air.thread_index_in_simdgroup", 0x1DuLL);
    *(_QWORD *)(v293 + 8) = "air.get_thread_index_in_simdgroup";
    *(_QWORD *)(v293 + 16) = 33;
    *(_BYTE *)(v293 + 24) = 1;
    v294 = *sub_21DF7376C("air.simdgroup_index_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v294 + 8) = "air.get_simdgroup_index_in_threadgroup";
    *(_QWORD *)(v294 + 16) = 38;
    *(_BYTE *)(v294 + 24) = 1;
    v295 = *sub_21DF7376C("air.simdgroups_per_threadgroup", 0x1EuLL);
    *(_QWORD *)(v295 + 8) = "air.get_simdgroups_per_threadgroup";
    *(_QWORD *)(v295 + 16) = 34;
    *(_BYTE *)(v295 + 24) = 1;
    v274 = (llvm::PassRegistry *)sub_21DF7376C("air.dispatch_simdgroups_per_threadgroup", 0x27uLL);
    v296 = *(_QWORD *)v274;
    *(_QWORD *)(v296 + 8) = "air.get_dispatch_simdgroups_per_threadgroup";
    *(_QWORD *)(v296 + 16) = 43;
    *(_BYTE *)(v296 + 24) = 1;
  }
  PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(v274);
  llvm::initializeCore(PassRegistry, v298);
  llvm::initializeScalarOpts(PassRegistry, v299);
  llvm::initializeVectorization(PassRegistry, v300);
  llvm::initializeIPO(PassRegistry, v301);
  llvm::initializeAnalysis(PassRegistry, v302);
  llvm::initializeTransformUtils(PassRegistry, v303);
  llvm::initializeInstCombine(PassRegistry, v304);
  llvm::initializeTarget(PassRegistry, v305);
  v17 = operator new();
  v306 = 0;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v307 = a2;
  *(_DWORD *)(v17 + 24) = a2;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_QWORD *)(v17 + 64) = 0;
  if ((a2 & 0xFFFE) == 2)
  {
    v308 = atomic_load((unsigned __int8 *)&qword_2553B3188);
    if ((v308 & 1) == 0)
    {
      v339 = __cxa_guard_acquire(&qword_2553B3188);
      v307 = a2;
      if (v339)
      {
        sub_21DF21210((uint64_t)&qword_2553B3150);
        qword_2553B3150 = (uint64_t)off_24E1E7B68;
        unk_2553B3158 = "agx1-apple-ios";
        qword_2553B3168 = 0x200040002;
        qword_2553B3178 = 0x3C00000000;
        __cxa_atexit((void (*)(void *))sub_21DF30974, &qword_2553B3150, &dword_21DF15000);
        __cxa_guard_release(&qword_2553B3188);
        v307 = a2;
      }
    }
    v309 = atomic_load((unsigned __int8 *)&qword_2553B31C8);
    if ((v309 & 1) == 0)
    {
      v340 = __cxa_guard_acquire(&qword_2553B31C8);
      v307 = a2;
      if (v340)
      {
        sub_21DF21210((uint64_t)&qword_2553B3190);
        qword_2553B3190 = (uint64_t)off_24E1E7B68;
        unk_2553B3198 = "agx1-apple-ios";
        qword_2553B31A8 = 0x300010003;
        qword_2553B31B8 = 0x3C00000000;
        __cxa_atexit((void (*)(void *))sub_21DF30974, &qword_2553B3190, &dword_21DF15000);
        __cxa_guard_release(&qword_2553B31C8);
        v307 = a2;
      }
    }
    v310 = atomic_load((unsigned __int8 *)&qword_2553B3208);
    if ((v310 & 1) == 0)
    {
      v341 = __cxa_guard_acquire(&qword_2553B3208);
      v307 = a2;
      if (v341)
      {
        sub_21DF21210((uint64_t)&qword_2553B31D0);
        qword_2553B31D0 = (uint64_t)off_24E1E7B68;
        unk_2553B31D8 = "agx1-apple-ios";
        qword_2553B31E8 = 0x300020003;
        qword_2553B31F8 = 0x3C00000000;
        __cxa_atexit((void (*)(void *))sub_21DF30974, &qword_2553B31D0, &dword_21DF15000);
        __cxa_guard_release(&qword_2553B3208);
        v307 = a2;
      }
    }
    if (v307 == 65539)
      v311 = &qword_2553B3190;
    else
      v311 = &qword_2553B3150;
    if (v307 == 131075)
      v306 = &qword_2553B31D0;
    else
      v306 = v311;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t *))(*v306 + 112))(&buf, v306);
  v312 = atomic_load((unsigned __int8 *)&qword_2553B3030);
  if ((v312 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3030))
  {
    if (MGGetBoolAnswer())
      v338 = sub_21DF21324("AGX_EXTRA_LLVM_ATTRIB");
    else
      v338 = 0;
    qword_2553B3028 = (uint64_t)v338;
    __cxa_guard_release(&qword_2553B3030);
  }
  v313 = (const std::string::value_type *)qword_2553B3028;
  if (qword_2553B3028)
  {
    v314 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v314 = buf.__r_.__value_.__l.__size_;
    if (v314)
    {
      std::string::append(&buf, ",");
      v313 = (const std::string::value_type *)qword_2553B3028;
    }
    std::string::append(&buf, v313);
  }
  switch(a2)
  {
    case 65539:
      v315 = "g4g-a0";
      break;
    case 131075:
      v315 = "g4g-a1";
      break;
    case 262146:
      v315 = "g4p-b1";
      break;
    default:
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGC: %s:%d:%s: !!! Unsupported AGCTargetArch\n", "agc_compile_common.h", 127, "std::string AGCTargetArchToLLVMString(AGCTargetArch)");
      syslog(3, "AGC: %s:%d:%s: !!! Unsupported AGCTargetArch\n", "agc_compile_common.h", 127, "std::string AGCTargetArchToLLVMString(AGCTargetArch)");
      abort();
  }
  sub_21DF1AF28(v418, v315);
  llvm::AGX::AGXCompiler::create();
  if (SHIBYTE(v418[0].st_gid) < 0)
    operator delete(*(void **)&v418[0].st_dev);
  __str.__r_.__value_.__s.__data_[0] = 1;
  if ((llvm::AGX::AGXCompiler::isValid((llvm::AGX::AGXCompiler *)&__str.__r_.__value_.__r.__words[1]) & 1) != 0)
  {
    llvm::AGX::AGXCompiler::AGXCompiler();
    LastDiagnostics = (llvm *)llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)&v410);
    v317 = *(_QWORD *)&v418[0].st_dev;
    for (m = v418[0].st_ino; v317 != m; v317 += 8)
    {
      llvm::errs(LastDiagnostics);
      LastDiagnostics = (llvm *)llvm::AGX::operator<<();
      v319 = (_BYTE *)*((_QWORD *)LastDiagnostics + 4);
      if (*((_BYTE **)LastDiagnostics + 3) == v319)
      {
        LastDiagnostics = (llvm *)llvm::raw_ostream::write(LastDiagnostics, "\n");
      }
      else
      {
        *v319 = 10;
        ++*((_QWORD *)LastDiagnostics + 4);
      }
    }
    v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
    sub_21DF28B28((void ***)&v411);
    v320 = operator new();
    llvm::AGX::AGXCompiler::AGXCompiler();
    *(_QWORD *)(v320 + 8) = 0;
    *(_QWORD *)(v320 + 16) = 0;
    *(_QWORD *)(v320 + 24) = 0;
    *(_QWORD *)(v320 + 32) = v306;
    *(_DWORD *)(v320 + 40) = a3;
    llvm::AGX::AGXCompiler::AGXCompiler();
    *(_BYTE *)(v320 + 56) = 0;
    *(_BYTE *)(v320 + 72) = 0;
    *(_BYTE *)(v320 + 80) = 0;
    *(_BYTE *)(v320 + 96) = 0;
    *(_BYTE *)(v320 + 104) = 0;
    *(_BYTE *)(v320 + 120) = 0;
    *(_QWORD *)(v320 + 128) = v320 + 152;
    *(_OWORD *)(v320 + 136) = xmmword_21DFA6150;
    v321 = (_BYTE *)(v320 + 360);
    *(_OWORD *)(v320 + 280) = 0u;
    *(_OWORD *)(v320 + 296) = 0u;
    *(_OWORD *)(v320 + 312) = 0u;
    *(_OWORD *)(v320 + 328) = 0u;
    *(_QWORD *)(v320 + 344) = 0;
    v322 = *(char *)(v343 + 23);
    if (v322 < 0)
    {
      sub_21DF205EC(v321, *(void **)v343, *(_QWORD *)(v343 + 8));
      LOBYTE(v322) = *(_BYTE *)(v343 + 23);
    }
    else
    {
      *(_OWORD *)v321 = *(_OWORD *)v343;
      *(_QWORD *)(v320 + 376) = *(_QWORD *)(v343 + 16);
    }
    *(_QWORD *)(v320 + 384) = 0;
    *(_QWORD *)(v320 + 392) = 0;
    *(_QWORD *)(v320 + 400) = 0;
    *(_BYTE *)(v320 + 352) = 0;
    if ((v322 & 0x80u) == 0)
      v327 = v322;
    else
      v327 = *(_QWORD *)(v343 + 8);
    sub_21DF2BBDC((uint64_t)v418, v327 + 18);
    if ((v418[0].st_gid & 0x80000000) == 0)
      v328 = v418;
    else
      v328 = *(stat **)&v418[0].st_dev;
    if (v327)
    {
      if (*(char *)(v343 + 23) >= 0)
        v329 = (const void *)v343;
      else
        v329 = *(const void **)v343;
      memmove(v328, v329, v327);
    }
    v330 = (void **)(v320 + 384);
    strcpy((char *)v328 + v327, "/metal_rt.metallib");
    if (*(char *)(v320 + 407) < 0)
      operator delete(*v330);
    *(_OWORD *)v330 = *(_OWORD *)&v418[0].st_dev;
    *(_QWORD *)(v320 + 400) = *(_QWORD *)&v418[0].st_uid;
    v331 = *((unsigned __int8 *)a5 + 23);
    if ((v331 & 0x80u) != 0)
      v331 = (unint64_t)a5[1];
    *(_DWORD *)(v320 + 416) = v331 >> 2;
    v332 = (void *)operator new[]();
    *(_QWORD *)(v320 + 408) = v332;
    v333 = *((char *)a5 + 23);
    if (v333 >= 0)
      v334 = a5;
    else
      v334 = *a5;
    if (v333 >= 0)
      v335 = *((unsigned __int8 *)a5 + 23);
    else
      v335 = (size_t)a5[1];
    memcpy(v332, v334, v335);
    *(_QWORD *)(v17 + 64) = v320;
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v411);
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v410);
  }
  else
  {
    llvm::AGX::AGXCompiler::AGXCompiler();
    llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)&v411);
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v411);
    v324 = *(_QWORD *)&v418[0].st_dev;
    for (n = v418[0].st_ino; v324 != n; v324 += 8)
    {
      llvm::errs(v323);
      v323 = (llvm *)llvm::AGX::operator<<();
      v326 = (_BYTE *)*((_QWORD *)v323 + 4);
      if (*((_BYTE **)v323 + 3) == v326)
      {
        v323 = (llvm *)llvm::raw_ostream::write(v323, "\n");
      }
      else
      {
        *v326 = 10;
        ++*((_QWORD *)v323 + 4);
      }
    }
    v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
    sub_21DF28B28((void ***)&v411);
  }
  llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&__str.__r_.__value_.__r.__words[1]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v17;
}

void sub_21DF28954(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  const std::locale::facet *v14;
  char *__s;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (qword_2553B3D80)
  {
    if (dword_2553B3D88)
    {
      v10 = qword_2553B3D80 + *(_QWORD *)(*(_QWORD *)qword_2553B3D80 - 24);
      if ((*(_BYTE *)(v10 + 32) & 5) == 0)
      {
        (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 + 40)
                                                                                            + 32))(&v16, *(_QWORD *)(v10 + 40), 0, 1, 16);
        if (v17 >= dword_2553B3D88)
        {
          sub_21DF28BA4((_QWORD *)qword_2553B3D80, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          v11 = qword_2553B3D80;
          if (!qword_2553B3D80 || qword_2553B3D80 == MEMORY[0x24BEDB310])
            goto LABEL_11;
          (*(void (**)(uint64_t))(*(_QWORD *)qword_2553B3D80 + 8))(qword_2553B3D80);
          qword_2553B3D80 = 0;
          sub_21DF28D70();
          if (byte_2553B301F < 0)
          {
            *(_BYTE *)qword_2553B3008 = 0;
            qword_2553B3010 = 0;
          }
          else
          {
            LOBYTE(qword_2553B3008) = 0;
            byte_2553B301F = 0;
          }
        }
      }
    }
    v11 = qword_2553B3D80;
LABEL_11:
    if (v11)
    {
      __s = 0;
      vasprintf(&__s, a2, &a9);
      v12 = (_QWORD *)qword_2553B3D80;
      v13 = strlen(__s);
      sub_21DF28BA4((_QWORD *)qword_2553B3D80, (uint64_t)__s, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
      v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::flush();
      free(__s);
    }
  }
}

void sub_21DF28B28(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_21DF28BA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  int64_t v15;
  std::locale *v16;
  uint64_t v17;
  _BYTE v19[16];
  std::locale __b;
  char v21;

  MEMORY[0x2207A7864](v19, a1);
  if (v19[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
      v9 = a2 + a3;
    else
      v9 = a2;
    v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v12 = *((_QWORD *)v6 + 3);
    v13 = v12 <= a3;
    v14 = v12 - a3;
    if (v13)
      v15 = 0;
    else
      v15 = v14;
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      sub_21DF28DD4(&__b, v15, (char)v10);
      v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v16, v15);
      if (v21 < 0)
        operator delete(__b.__locale_);
      if (v17 != v15)
        goto LABEL_24;
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x2207A7870](v19);
  return a1;
}

void sub_21DF28D70()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3020);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3020))
    {
      qword_2553B3008 = 0;
      qword_2553B3010 = 0;
      unk_2553B3018 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2553B3008, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3020);
    }
  }
}

_QWORD *sub_21DF28DD4(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t *sub_21DF28E78(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t *v10;

  v3 = qword_2553B2F90;
  if (qword_2553B2F90)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t *)v3;
        v6 = (_QWORD *)(v3 + 32);
        if (!sub_21DF214C4(a1, (_QWORD *)(v3 + 32)))
          break;
        v3 = *v5;
        v7 = v5;
        if (!*v5)
          goto LABEL_9;
      }
      if (!sub_21DF214C4(v6, a1))
        return v5;
      v7 = v5 + 1;
      v3 = v5[1];
      if (!v3)
        goto LABEL_9;
    }
  }
  else
  {
    v5 = &qword_2553B2F90;
    v7 = &qword_2553B2F90;
LABEL_9:
    v8 = operator new(0x50uLL);
    v9 = v8 + 4;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_21DF205EC(v9, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      v8[6] = *(_QWORD *)(a2 + 16);
    }
    v8[7] = 0;
    v8[8] = 0;
    v8[9] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v5;
    *v7 = (uint64_t)v8;
    v10 = v8;
    if (*(_QWORD *)qword_2553B2F88)
    {
      qword_2553B2F88 = *(_QWORD *)qword_2553B2F88;
      v10 = (uint64_t *)*v7;
    }
    sub_21DF25404((uint64_t *)qword_2553B2F90, v10);
    ++qword_2553B2F98;
  }
  return v8;
}

std::string *sub_21DF28F8C(std::string *this)
{
  int v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  std::string *v7;
  unsigned int v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  char *v12;
  std::string::size_type v13;
  std::string *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char *v19;
  std::string *v20;

  v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = this->__r_.__value_.__r.__words[0];
  if (v2 >= 0)
    v4 = this;
  else
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v2 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  v6 = MEMORY[0x24BDAC740];
  if (size)
  {
    v7 = (std::string *)((char *)v4 + size);
    do
    {
      v8 = v4->__r_.__value_.__s.__data_[0];
      if ((v8 & 0x80000000) != 0)
      {
        if (!__maskrune(v8, 0x4000uLL))
          goto LABEL_15;
      }
      else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      v4 = (std::string *)((char *)v4 + 1);
      --size;
    }
    while (size);
    v4 = v7;
LABEL_15:
    LOBYTE(v2) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v3 = this->__r_.__value_.__r.__words[0];
  }
  if ((v2 & 0x80u) == 0)
    v9 = this;
  else
    v9 = (std::string *)v3;
  std::string::erase(this, 0, (char *)v4 - (char *)v9);
  v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = (char *)this + v10;
  if (v11 >= 0)
    v13 = (std::string::size_type)v12;
  else
    v13 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  if (v11 >= 0)
    v14 = this;
  else
    v14 = (std::string *)this->__r_.__value_.__r.__words[0];
  while ((std::string *)v13 != v14)
  {
    v16 = *(char *)--v13;
    v15 = v16;
    if ((v16 & 0x80000000) != 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
      {
LABEL_30:
        v14 = (std::string *)(v13 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x4000) == 0)
    {
      goto LABEL_30;
    }
  }
  v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v18 = (char)v17;
  v19 = (char *)this + v17;
  if (v18 >= 0)
  {
    v20 = this;
  }
  else
  {
    v19 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    v20 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(this, (char *)v14 - (char *)v20, v19 - (char *)v14);
}

void MTLCompilerDelete_0(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = qword_2553B3000;
  if (qword_2553B3000)
  {
    (*(void (**)(void))(qword_2553B3000 + 8))();
    dlclose(*(void **)v2);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = 0;
    MEMORY[0x2207A7960](v2, 0x80C40D6874129);
  }
  qword_2553B3000 = 0;
  if (qword_2553B3D80)
    v3 = qword_2553B3D80 == MEMORY[0x24BEDB310];
  else
    v3 = 1;
  if (v3)
  {
LABEL_9:
    if (a1)
      goto LABEL_10;
    return;
  }
  (*(void (**)(void))(*(_QWORD *)qword_2553B3D80 + 8))();
  qword_2553B3D80 = 0;
  sub_21DF28D70();
  if ((byte_2553B301F & 0x80000000) == 0)
  {
    LOBYTE(qword_2553B3008) = 0;
    byte_2553B301F = 0;
    goto LABEL_9;
  }
  *(_BYTE *)qword_2553B3008 = 0;
  qword_2553B3010 = 0;
  if (a1)
  {
LABEL_10:
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
    {
      for (i = 304; i != 328; i += 8)
      {
        v6 = *(_QWORD *)(v4 + i);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        *(_QWORD *)(v4 + i) = 0;
      }
      v7 = *(_QWORD *)(v4 + 328);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *(_QWORD *)(v4 + 328) = 0;
      v8 = *(_QWORD *)(v4 + 336);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      *(_QWORD *)(v4 + 336) = 0;
      v9 = *(_QWORD *)(v4 + 344);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *(_QWORD *)(v4 + 344) = 0;
      v10 = *(_QWORD *)(v4 + 408);
      if (v10)
        MEMORY[0x2207A7948](v10, 0x1000C8052888210);
      if (*(char *)(v4 + 407) < 0)
        operator delete(*(void **)(v4 + 384));
      if (*(char *)(v4 + 383) < 0)
        operator delete(*(void **)(v4 + 360));
      if (*(char *)(v4 + 303) < 0)
        operator delete(*(void **)(v4 + 280));
      v11 = *(void **)(v4 + 128);
      if (v11 != (void *)(v4 + 152))
        free(v11);
      if (*(_BYTE *)(v4 + 120))
      {
        MEMORY[0x2207A7060](v4 + 104);
        *(_BYTE *)(v4 + 120) = 0;
      }
      if (*(_BYTE *)(v4 + 96))
      {
        MEMORY[0x2207A7060](v4 + 80);
        *(_BYTE *)(v4 + 96) = 0;
      }
      if (*(_BYTE *)(v4 + 72))
      {
        MEMORY[0x2207A7060](v4 + 56);
        *(_BYTE *)(v4 + 72) = 0;
      }
      llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)(v4 + 48));
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      MEMORY[0x2207A7960](v4, 0x10F2C40B38FBF86);
    }
    JUMPOUT(0x2207A7960);
  }
}

uint64_t GLCompilerBuildRequest(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  int v9;

  v9 = 0;
  return sub_21DF29324(a1, a2, a4, a5, 0, &v9, a7, a8, 2u);
}

uint64_t sub_21DF29324(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, llvm::Type **a5, int *a6, _QWORD *a7, _QWORD *a8, unsigned int a9)
{
  unsigned int *v11;
  unsigned int *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  std::locale::__imp *v23;
  int v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  char v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  llvm *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  xpc_object_t v38;
  llvm *v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  void (*v43)(void *, uint64_t, uint64_t);
  void (*v44)(void *, uint64_t, uint64_t);
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t i;
  llvm::legacy::PassManager *v55;
  uint64_t AlwaysInlinerLegacyPass;
  llvm *v57;
  uint64_t v58;
  uint64_t GlobalOptimizerPass;
  llvm *v60;
  uint64_t v61;
  uint64_t GlobalDCEPass;
  llvm *v63;
  uint64_t DeadCodeEliminationPass;
  _DWORD *v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  void *v69;
  __int128 *v70;
  size_t v71;
  void **v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, char *);
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t NamedMetadata;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  size_t v99;
  char *v100;
  uint64_t v101;
  void *v102;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t Function;
  llvm::Function *v107;
  unsigned int v108;
  llvm::Instruction *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t Impl;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int j;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t k;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm::Function *v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Function *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Function *v130;
  uint64_t v131;
  llvm::Instruction *v132;
  uint64_t v133;
  char *v134;
  _BYTE *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  void *v148;
  void *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  void *v161;
  void **v162;
  const char *v163;
  const char *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  unsigned __int8 v181;
  uint64_t v182;
  char *v183;
  _QWORD *v184;
  char *v185;
  int v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  const std::locale::facet *v191;
  uint64_t *v192;
  const std::locale::facet *v193;
  char *m;
  uint64_t v195;
  const std::ios_base *v196;
  const std::locale::facet *v197;
  _QWORD *v198;
  const std::locale::facet *v199;
  std::locale::id *v200;
  const std::locale::facet *v201;
  const std::locale::facet *v202;
  size_t v203;
  uint64_t n;
  _DWORD *v205;
  uint64_t v206;
  char *v207;
  void *v208;
  llvm *has_internal_diagnostics;
  std::locale::__imp *locale;
  std::locale::__imp *v211;
  BOOL v212;
  _BOOL4 v216;
  BOOL v217;
  _BOOL4 v221;
  BOOL v222;
  _BOOL4 v226;
  uint64_t NamedTimer;
  llvm::Timer *v228;
  uint64_t v229;
  llvm::Timer *v230;
  uint64_t v231;
  llvm::Timer *v232;
  uint64_t v233;
  llvm::Timer *v234;
  uint64_t v235;
  llvm::Timer *v236;
  uint64_t v237;
  llvm::Timer *v238;
  uint64_t v239;
  llvm::Timer *v240;
  uint64_t v241;
  llvm::Timer *v242;
  uint64_t v243;
  llvm::Timer *v244;
  uint64_t v245;
  llvm::Timer *v246;
  uint64_t v247;
  llvm::Timer *v248;
  uint64_t v249;
  llvm::Timer *v250;
  uint64_t v251;
  llvm::Timer *v252;
  uint64_t v253;
  llvm::Timer *v254;
  uint64_t v255;
  llvm::Timer *v256;
  uint64_t v257;
  llvm::Timer *v258;
  void *v259;
  FILE *v261;
  char *v262;
  unsigned int v263;
  xpc_object_t v264;
  unsigned int *v265;
  unsigned int *v266;
  unsigned int *v267;
  uint64_t v268;
  void *v269;
  _DWORD *v270;
  int *v271;
  unsigned int *v272;
  void *v273;
  uint64_t v274;
  std::locale::__imp *v275;
  uint64_t v276;
  std::locale::__imp *v277;
  std::locale::__imp *v278;
  _QWORD *v279;
  _QWORD *v281;
  unsigned int v283;
  unsigned int v284;
  char v288[8];
  llvm::Timer *v289;
  __int128 v290;
  uint64_t v291;
  int v292;
  std::locale v293[2];
  uint64_t v294;
  int v295;
  void *__dst[2];
  uint64_t v297;
  __int16 v298;
  void *__p[4];
  uint64_t v300;
  _BYTE v301[104];
  int v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int16 v310;
  uint64_t v311;
  std::locale v312[2];
  void *v313[2];
  __int128 v314;
  int v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  char *v321[2];
  uint64_t v322;
  char __str[8];
  uint64_t v324;
  uint64_t v325;
  __int16 v326;
  uint64_t v327;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v327 = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  do
  {
    v27 = (_DWORD *)((char *)a2 + (((unint64_t)*v26 >> 6) & 0x3FFFFFC));
    v28 = *v26;
    switch(*v26)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        *a6 = v28;
        ++v25;
        v24 = 2;
        break;
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
        *a6 = v28;
        ++v25;
        v24 = 1;
        break;
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x3Bu:
        v23 = (std::locale::__imp *)(v26 + 1);
        goto LABEL_6;
      case 0x2Eu:
        v22 = v26 + 1;
        goto LABEL_6;
      case 0x2Fu:
        v21 = v26 + 1;
        break;
      case 0x30u:
        v20 = (unint64_t)(v26 + 1);
        goto LABEL_6;
      case 0x31u:
      case 0x36u:
      case 0x37u:
      case 0x44u:
        goto LABEL_6;
      case 0x32u:
        v17 = v26 + 1;
        goto LABEL_6;
      case 0x33u:
        v16 = v26 + 1;
        goto LABEL_6;
      case 0x34u:
        v19 = v26 + 1;
        goto LABEL_6;
      case 0x35u:
        v18 = v26 + 1;
        goto LABEL_6;
      case 0x38u:
        v12 = v26 + 1;
        goto LABEL_6;
      case 0x39u:
        v11 = v26 + 1;
        goto LABEL_6;
      case 0x3Au:
        v15 = v26 + 1;
        goto LABEL_6;
      case 0x3Cu:
        v14 = v26 + 1;
        break;
      case 0x3Du:
        v13 = v26 + 1;
LABEL_6:
        ++v25;
        break;
      default:
        break;
    }
    v26 = v27;
  }
  while (v28 != 68);
  v276 = (uint64_t)v22;
  v278 = v23;
  v265 = v12;
  v266 = v11;
  v267 = v18;
  v268 = (uint64_t)v16;
  v270 = v15;
  v271 = v17;
  v272 = v19;
  v274 = (uint64_t)v14;
  v29 = 0;
  if ((v25 - 2) >= 8)
    v30 = 0;
  else
    v30 = v24;
  if (a5)
    v31 = 1;
  else
    v31 = v30 == 1;
  v32 = !v31;
  v33 = a1[8];
  if (!v31)
    v29 = (***(uint64_t (****)(_QWORD))(v33 + 32))(*(_QWORD *)(v33 + 32));
  *(_BYTE *)(v33 + 353) = v29;
  if (!os_variant_has_internal_diagnostics())
  {
    v38 = 0;
    goto LABEL_43;
  }
  llvm::EnableStatistics((llvm *)1);
  v34 = (llvm *)xpc_dictionary_create(0, 0, 0);
  llvm::ResetStatistics(v34);
  if (v32)
    v35 = 3;
  else
    v35 = 1;
  xpc_dictionary_set_uint64(v34, "instruction_selector", v35);
  xpc_dictionary_set_uint64(v34, "api", a9);
  v36 = *a6 - 1;
  if (v36 < 6)
  {
    v37 = qword_21DFA0D10[v36];
LABEL_41:
    xpc_dictionary_set_uint64(v34, "shader_kind", v37);
    goto LABEL_42;
  }
  if (v30 == 1)
  {
    v37 = 1;
    goto LABEL_41;
  }
LABEL_42:
  analytics_send_event();
  v38 = xpc_copy(v34);
  xpc_release(v34);
  llvm::enableTimePasses(v39);
LABEL_43:
  llvm::NamedRegionTimer::NamedRegionTimer();
  v40 = v30 - 1;
  if (v40 > 1)
  {
    v49 = 0;
  }
  else
  {
    MEMORY[0x2207A6AC0](v288);
    if (!a5)
    {
      if (a4)
      {
        v41 = qword_2553B3000;
        if (!qword_2553B3000)
        {
          v41 = operator new();
          v42 = dlopen("/System/Library/Frameworks/OpenGLES.framework/libGLVMPlugin.dylib", 5);
          *(_QWORD *)v41 = v42;
          if (v42
            && (v43 = (void (*)(void *, uint64_t, uint64_t))dlsym(v42, "oglCodeGenServiceInitialize")) != 0
            && (v44 = v43, v45 = dlsym(*(void **)v41, "oglCodeGenServiceTerminate"), (*(_QWORD *)(v41 + 8) = v45) != 0)
            && (v46 = dlsym(*(void **)v41, "oglCodeGenServiceGenerateIR"), (*(_QWORD *)(v41 + 16) = v46) != 0))
          {
            v44(v46, v47, v48);
          }
          else
          {
            v261 = (FILE *)*MEMORY[0x24BDAC8D8];
            v262 = dlerror();
            fprintf(v261, "AGX: ERROR: %s\n", v262);
          }
          qword_2553B3000 = v41;
        }
        a5 = (llvm::Type **)(*(uint64_t (**)(char *, uint64_t))(v41 + 16))(v288, a3);
      }
      else
      {
        a5 = 0;
      }
    }
    v264 = v38;
    v50 = (uint64_t)v21;
    v51 = *a6;
    v52 = a1[8];
    if (!*(_QWORD *)(v52 + 328))
    {
      v53 = v40;
      for (i = 304; i != 328; i += 8)
      {
        v55 = sub_21DF2BE78(v52);
        *(_QWORD *)(v52 + i) = v55;
        AlwaysInlinerLegacyPass = llvm::createAlwaysInlinerLegacyPass(0);
        v57 = (llvm *)sub_21DF2BC5C(v52, (uint64_t)v55, AlwaysInlinerLegacyPass);
      }
      v58 = *(_QWORD *)(v52 + 312);
      GlobalOptimizerPass = llvm::createGlobalOptimizerPass(v57);
      v60 = (llvm *)sub_21DF2BC5C(v52, v58, GlobalOptimizerPass);
      v61 = *(_QWORD *)(v52 + 320);
      GlobalDCEPass = llvm::createGlobalDCEPass(v60);
      sub_21DF2BC5C(v52, v61, GlobalDCEPass);
      v63 = sub_21DF2BE78(v52);
      *(_QWORD *)(v52 + 328) = v63;
      DeadCodeEliminationPass = llvm::createDeadCodeEliminationPass(v63);
      sub_21DF2BC5C(v52, (uint64_t)v63, DeadCodeEliminationPass);
      v40 = v53;
    }
    v49 = 0;
    switch(v51)
    {
      case 1:
        v80 = operator new();
        v81 = (_QWORD *)sub_21DF883AC(v80, v52, a5, (uint64_t)v278, v276, v50);
        goto LABEL_113;
      case 2:
        v312[0].__locale_ = v278;
        v312[1].__locale_ = 0;
        v313[0] = v278;
        v82 = operator new();
        v81 = (_QWORD *)sub_21DF51710(v82, v52, (uint64_t)a5, (uint64_t *)v312, v276, v50, v20, v274);
        goto LABEL_113;
      case 3:
        v81 = sub_21DF90E18(v52, (llvm::Module *)a5, (uint64_t)v278, v265, v266);
        if (!v81)
          goto LABEL_375;
        goto LABEL_113;
      case 4:
        v312[0].__locale_ = v278;
        v312[1].__locale_ = v278;
        v313[0] = 0;
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **))(**(_QWORD **)(v52 + 32) + 64))(*(_QWORD *)(v52 + 32), v52, a5);
        goto LABEL_182;
      case 5:
        __p[0] = v278;
        __p[1] = v278;
        __p[2] = 0;
        v312[0].__locale_ = (std::locale::__imp *)"air.kernel";
        LOWORD(v314) = 259;
        NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)a5, (const llvm::Twine *)v312);
        v85 = *(uint64_t **)(v52 + 32);
        v86 = *v85;
        if (NamedMetadata)
          v83 = (*(uint64_t (**)(uint64_t *, uint64_t, llvm::Type **))(v86 + 56))(v85, v52, a5);
        else
          v83 = (*(uint64_t (**)(uint64_t *, uint64_t, llvm::Type **))(v86 + 64))(v85, v52, a5);
        goto LABEL_182;
      case 6:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **, std::locale::__imp *))(**(_QWORD **)(v52 + 32)
                                                                                              + 48))(*(_QWORD *)(v52 + 32), v52, a5, v278);
        goto LABEL_182;
      case 7:
        v87 = (_QWORD *)operator new();
        v81 = sub_21DF4972C(v87, v52, (llvm::Type *)v288, v270, v20);
        goto LABEL_113;
      case 8:
        v88 = operator new();
        v89 = v52;
        v90 = v20;
        v91 = 0;
        v92 = 8;
        goto LABEL_93;
      case 9:
        v93 = (_QWORD *)operator new();
        v81 = sub_21DF499EC(v93, v52, (llvm::Type *)v288, v20, v271);
        goto LABEL_113;
      case 10:
        v88 = operator new();
        v89 = v52;
        v90 = v20;
        v91 = v272;
        v92 = 10;
LABEL_93:
        v81 = (_QWORD *)sub_21DF4C910(v88, v89, (llvm::Type *)v288, v90, v91, v92);
        goto LABEL_113;
      case 11:
        v94 = operator new();
        v81 = (_QWORD *)sub_21DF47928(v94, v52, (llvm::Type *)v288, v267);
        goto LABEL_113;
      case 14:
        v95 = operator new();
        v81 = (_QWORD *)sub_21DF4B604(v95, v52, (llvm::Type *)v288, v268);
        goto LABEL_113;
      case 15:
        v79 = sub_21DF932B4(v52, (uint64_t)v288);
        goto LABEL_117;
      case 16:
        v79 = sub_21DF933D0(v52, (uint64_t)v288);
        goto LABEL_117;
      case 17:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(v52 + 32) + 104))(*(_QWORD *)(v52 + 32), v52, v288);
        goto LABEL_182;
      case 18:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(v52 + 32) + 96))(*(_QWORD *)(v52 + 32), v52, v288);
        goto LABEL_182;
      case 19:
        v96 = operator new();
        v81 = (_QWORD *)sub_21DF46AAC(v96, v52, (llvm::Type *)v288);
        goto LABEL_113;
      case 20:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(v52 + 32) + 40))(*(_QWORD *)(v52 + 32), v52, v288);
        goto LABEL_182;
      case 21:
      case 22:
        v73 = *(_QWORD *)(v52 + 32);
        v74 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v73 + 32);
        v75 = v52;
        goto LABEL_105;
      case 23:
        v73 = *(_QWORD *)(v52 + 32);
        v74 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v73 + 32);
        v75 = v52;
        goto LABEL_105;
      case 24:
        v73 = *(_QWORD *)(v52 + 32);
        v74 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v73 + 32);
        v75 = v52;
LABEL_105:
        v83 = v74(v73, v75, v288);
        goto LABEL_182;
      case 25:
      case 27:
        v76 = v51 == 27;
        v77 = v52;
        v78 = 1;
        goto LABEL_80;
      case 26:
      case 28:
        v76 = v51 == 28;
        v77 = v52;
        v78 = 0;
LABEL_80:
        v79 = sub_21DF7C1B4(v77, (llvm::Type *)v288, v78, v76);
        goto LABEL_117;
      case 29:
      case 30:
      case 31:
        v65 = (_DWORD *)operator new();
        v66 = sub_21DF2E500((uint64_t)v65, v52, (llvm::Type *)v288);
        *(_QWORD *)v66 = off_24E1F24F8;
        v315 = 0;
        *(_OWORD *)v313 = 0u;
        v314 = 0u;
        v316 = 0u;
        v317 = 0u;
        v318 = 0u;
        v319 = 0u;
        v320 = 0;
        v321[0] = (char *)&v322;
        v67 = "@shared_mem = external addrspace(64) constant i32 addrspace(1)*, section \"buffer_bindings\", align 8\n"
              "define agx_clcc void @agc.fence() {\n"
              "\t%1 = load i32 addrspace(1)*, i32 addrspace(1)* addrspace(64)* @shared_mem\n"
              "\tstore  i32 0, i32 addrspace(1)* %1\n"
              "\t%2 = bitcast i32 addrspace(1)* %1 to i8 addrspace(1)*\n"
              "\t%3 = call <4 x float> @texture2d()\n"
              "\t%4 = extractelement <4 x float> %3, i32 0\t%5 = bitcast float %4 to i32\tstore  i32 %5, i32 addrspace(1)"
              "* %1\tcall void @idf(i8 addrspace(1)* %2)\n"
              "\tcall void @memfence(i8 addrspace(1)* %2)\n"
              "\tret void\n"
              "}\n"
              "declare void @idf(i8 addrspace(1)*);\n"
              "declare <4 x float> @texture2d();\n"
              "declare void @memfence(i8 addrspace(1)*)\n";
        *(_OWORD *)&v312[0].__locale_ = 0u;
        if (v51 == 30)
          v67 = "define agx_clcc void @agc.flush.fw_interrupt() {\n"
                "   call void @llvm.agx1.nop.dbg(i16 2)\n"
                "   ret void\n"
                "}\n"
                "declare void @llvm.agx1.nop.dbg(i16) nounwind\n"
                "!agx.compute_attribs = !{!0}\n"
                "!agx.compute_driver_bindings = !{!1}\n"
                "!0 = !{void ()* @agc.flush.fw_interrupt}\n"
                "!1 = !{void ()* @agc.flush.fw_interrupt}\n";
        v321[1] = (char *)0x400000000;
        if (v51 == 29)
          v68 = "define agx_clcc void @agc.flush() {\n"
                "   ret void\n"
                "}\n"
                "!agx.compute_attribs = !{!0}\n"
                "!agx.compute_driver_bindings = !{!1}\n"
                "!0 = !{void ()* @agc.flush}\n"
                "!1 = !{void ()* @agc.flush}\n";
        else
          v68 = v67;
        *(_DWORD *)(v66 + 992) = v51;
        strlen(v68);
        llvm::parseAssemblyString();
        v69 = __p[0];
        *((void **)v65 + 40) = __p[0];
        if (!v69)
        {
          if ((SBYTE7(v317) & 0x80u) == 0)
            v70 = &v316;
          else
            v70 = (__int128 *)v316;
          if (v70)
          {
            if ((SBYTE7(v317) & 0x80u) == 0)
              v71 = BYTE7(v317);
            else
              v71 = *((_QWORD *)&v316 + 1);
            sub_21DF24420(__p, v70, v71);
            if (SHIBYTE(__p[2]) >= 0)
              v72 = __p;
            else
              v72 = (void **)__p[0];
          }
          else
          {
            memset(__p, 0, 24);
            v72 = __p;
          }
          printf("AssemblerError: error message is :%s\n", (const char *)v72);
          if (v318 >= 0)
            v98 = (char *)&v317 + 8;
          else
            v98 = (char *)*((_QWORD *)&v317 + 1);
          if (v98)
          {
            if (v318 >= 0)
              v99 = HIBYTE(v318);
            else
              v99 = v318;
            sub_21DF24420(__str, v98, v99);
            if (v325 >= 0)
              v100 = __str;
            else
              v100 = *(char **)__str;
          }
          else
          {
            *(_QWORD *)__str = 0;
            v324 = 0;
            v100 = __str;
            v325 = 0;
          }
          printf("AssemblerError: line content is  :%s\n", v100);
          if (SHIBYTE(v325) < 0)
            operator delete(*(void **)__str);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v69 = (void *)*((_QWORD *)v65 + 40);
        }
        v101 = *(_QWORD *)(*((_QWORD *)v65 + 50) + 32);
        v102 = *(void **)(v101 + 8);
        if (v102)
          v103 = strlen(*(const char **)(v101 + 8));
        else
          v103 = 0;
        sub_21DF2CC40((uint64_t)v69, v102, v103);
        v104 = *(_QWORD *)(*((_QWORD *)v65 + 50) + 32);
        if (*(_QWORD *)(v104 + 16))
          strlen(*(const char **)(v104 + 16));
        llvm::Module::setDataLayout();
        v105 = *((_QWORD *)v65 + 43);
        *(_QWORD *)(v105 + 320) = *((_QWORD *)v65 + 40);
        *(_QWORD *)(v105 + 328) = v65 + 148;
        Function = llvm::Module::getFunction();
        if (Function)
        {
          v107 = (llvm::Function *)Function;
          v108 = v40;
          v109 = *(llvm::Instruction **)(*(_QWORD *)(Function + 8) + 24);
          sub_21DF3F430((uint64_t)(v65 + 2), (uint64_t)v109);
          v110 = llvm::User::operator new((llvm::User *)0x58);
          __p[0] = "image_words";
          LOWORD(v300) = 259;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          *(_BYTE *)(v110 + 80) |= 1u;
          if (*(_BYTE *)(*((_QWORD *)v65 + 43) + 1647))
          {
            v300 = 0;
            memset(__p, 0, sizeof(__p));
            __p[0] = (void *)llvm::ValueAsMetadata::get();
            llvm::ConstantInt::get();
            __p[1] = (void *)llvm::ValueAsMetadata::get();
            llvm::ConstantInt::get();
            __p[2] = (void *)llvm::ValueAsMetadata::get();
            __p[3] = (void *)llvm::MDString::get();
            llvm::ConstantInt::get();
            v300 = llvm::ValueAsMetadata::get();
            v111 = *((_QWORD *)v65 + 41);
            Impl = llvm::MDTuple::getImpl();
            sub_21DF19CD0(v111, Impl);
          }
          else
          {
            sub_21DF7A774((uint64_t)v65);
          }
          v113 = llvm::User::operator new((llvm::User *)0x58);
          __p[0] = "sampler_words";
          LOWORD(v300) = 259;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          *(_BYTE *)(v113 + 80) |= 1u;
          sub_21DF7A774((uint64_t)v65);
          __p[0] = (void *)0x100000000;
          BYTE4(__p[2]) = 0;
          __p[3] = 0;
          memset(v301, 0, 42);
          memset(&v301[48], 0, 56);
          v304 = 0u;
          v305 = 0u;
          v306 = 0;
          v308 = 0;
          v309 = 0;
          v310 = 256;
          v311 = 0;
          LODWORD(__p[2]) = 0;
          LODWORD(__p[1]) = 0;
          v300 = v110;
          *(_QWORD *)&v301[32] = v113;
          llvm::ConstantInt::get();
          *(_QWORD *)&v301[80] = llvm::ConstantDataVector::getSplat();
          v302 = 1;
          v303 = llvm::ConstantFP::get();
          v307 = 0;
          BYTE1(__p[2]) = 0;
          v114 = *((_QWORD *)v65 + 43);
          *(_OWORD *)&v293[0].__locale_ = *(_OWORD *)(v65 + 14);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v65 + 2));
          v295 = v65[26];
          v115 = (*(uint64_t (**)(uint64_t, std::locale *, void **))(*(_QWORD *)v114 + 248))(v114, v293, __p);
          if (v294)
            llvm::MetadataTracking::untrack();
          if (*(_DWORD *)(*(_QWORD *)(v52 + 32) + 28) == 2)
          {
            for (j = 1; j != 8; ++j)
            {
              __dst[0] = 0;
              __dst[1] = 0;
              __dst[0] = (void *)llvm::ConstantInt::get();
              __dst[1] = (void *)llvm::ConstantInt::get();
              *(_QWORD *)&v301[80] = llvm::ConstantVector::get();
              v117 = *((_QWORD *)v65 + 43);
              v290 = *(_OWORD *)(v65 + 14);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v65 + 2));
              v292 = v65[26];
              v118 = (*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v117 + 248))(v117, &v290, __p);
              if (v291)
                llvm::MetadataTracking::untrack();
              v326 = 257;
              v115 = sub_21DF2074C((uint64_t)(v65 + 2), v115, v118, (uint64_t)__str);
            }
            v119 = llvm::ConstantFP::get();
            for (k = 0; k != 4; ++k)
            {
              v326 = 257;
              v121 = llvm::ConstantInt::get();
              v122 = sub_21DF79584((uint64_t)(v65 + 2), v115, v121, (uint64_t)__str);
              v298 = 257;
              v119 = sub_21DF2074C((uint64_t)(v65 + 2), v119, v122, (uint64_t)__dst);
            }
            sub_21DF79DF4((uint64_t)v65, 4, v119);
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v109);
          llvm::Function::eraseFromParent(v107);
          v40 = v108;
        }
        v123 = llvm::Module::getFunction();
        if (v123)
        {
          v124 = (llvm::Function *)v123;
          v125 = *((_QWORD *)v65 + 43);
          if (*(_QWORD *)(v125 + 1560))
            strlen(*(const char **)(v125 + 1560));
          llvm::Module::getOrInsertFunction();
          llvm::Value::replaceAllUsesWith();
          llvm::Function::eraseFromParent(v124);
        }
        v126 = llvm::Module::getFunction();
        if (v126)
        {
          v127 = (llvm::Function *)v126;
          v128 = *((_QWORD *)v65 + 43);
          if (*(_QWORD *)(v128 + 864))
            strlen(*(const char **)(v128 + 864));
          llvm::Module::getOrInsertFunction();
          llvm::Value::replaceAllUsesWith();
          llvm::Function::eraseFromParent(v127);
        }
        v129 = llvm::Module::getFunction();
        if (v129)
        {
          v130 = (llvm::Function *)v129;
          v131 = *((_QWORD *)v65 + 43);
          if (*(_QWORD *)(v131 + 896))
          {
            strlen(*(const char **)(v131 + 896));
            llvm::Module::getOrInsertFunction();
            llvm::Value::replaceAllUsesWith();
          }
          else
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v129 + 8) + 24) + 16) <= 0x1Bu)
              v132 = 0;
            else
              v132 = *(llvm::Instruction **)(*(_QWORD *)(v129 + 8) + 24);
            llvm::Instruction::eraseFromParent(v132);
          }
          llvm::Function::eraseFromParent(v130);
        }
        sub_21DF2FB64();
        sub_21DF2D1F4(v321);
        if ((_QWORD)v319)
        {
          *((_QWORD *)&v319 + 1) = v319;
          operator delete((void *)v319);
        }
        if (SHIBYTE(v318) < 0)
          operator delete(*((void **)&v317 + 1));
        if (SBYTE7(v317) < 0)
          operator delete((void *)v316);
        if (SBYTE7(v314) < 0)
          operator delete(v313[0]);
        goto LABEL_183;
      case 33:
        v79 = (uint64_t)sub_21DF91E80(v52, (uint64_t)v288, v13);
        goto LABEL_117;
      case 34:
        v79 = (uint64_t)sub_21DF92A64(v52, (uint64_t)v288, v13);
        goto LABEL_117;
      case 35:
        v79 = (uint64_t)sub_21DF92F00(v52, (uint64_t)v288);
        goto LABEL_117;
      case 36:
        v79 = (uint64_t)sub_21DF923BC(v52, (uint64_t)v288, v13);
        goto LABEL_117;
      case 37:
        v79 = (uint64_t)sub_21DF931F0(v52, (uint64_t)v288);
        goto LABEL_117;
      case 38:
        v79 = (uint64_t)sub_21DF930E4(v52, (uint64_t)v288);
        goto LABEL_117;
      case 39:
        v97 = (uint64_t *)operator new();
        v81 = sub_21DF4BAB8(v97, v52, (llvm::Type *)v288);
LABEL_113:
        v65 = (_DWORD *)((char *)v81 + *(_QWORD *)(*v81 - 24));
        goto LABEL_183;
      case 63:
        v79 = (uint64_t)sub_21DF934EC(v52, (uint64_t)v288);
        goto LABEL_117;
      case 64:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(v52 + 32) + 80))(*(_QWORD *)(v52 + 32), v52, v288);
        goto LABEL_182;
      case 65:
        v79 = (uint64_t)sub_21DF935F8(v52, (uint64_t)v288);
LABEL_117:
        v65 = (_DWORD *)v79;
        goto LABEL_183;
      case 66:
        v83 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(v52 + 32) + 88))(*(_QWORD *)(v52 + 32), v52, v288);
LABEL_182:
        v65 = (_DWORD *)v83;
        if (v83)
        {
LABEL_183:
          v133 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v65 + 40))(v65);
          v49 = v133;
          if ((v133 & 1) != 0)
          {
            v283 = v133;
            a1[7] = *((_QWORD *)v65 + 49);
            v134 = (char *)*((_QWORD *)v65 + 46);
            v135 = (_BYTE *)*((_QWORD *)v65 + 47);
            *((_BYTE *)v65 + 870) = 1;
            sub_21DF2E13C((uint64_t)(v65 + 200), v135 - v134, 4uLL);
            sub_21DF2E13C((uint64_t)(v65 + 200), v135 - v134, 4uLL);
            v136 = v135 - v134;
            if (v135 == v134)
              v137 = (char *)&unk_21DFA0D40;
            else
              v137 = v134;
            if (v135 != v134)
            {
              v138 = v136 >> 2;
              v139 = v137 - 4;
              do
              {
                v140 = v138 - 1;
                v141 = *(_DWORD *)&v139[4 * v138];
                sub_21DF2DF68((uint64_t)(v65 + 200), 4uLL);
                sub_21DF2E0DC((uint64_t)(v65 + 200), v65[208] - v65[212] + v65[210] - v141 + 4);
                v138 = v140;
              }
              while (v140);
            }
            *((_BYTE *)v65 + 870) = 0;
            v142 = sub_21DF2E0DC((uint64_t)(v65 + 200), (unint64_t)v136 >> 2);
            LODWORD(v312[0].__locale_) = 0;
            v143 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, std::locale *))(**((_QWORD **)v65 + 43) + 360))(*((_QWORD *)v65 + 43), *((_QWORD *)v65 + 58), v65[128], v312);
            *((_BYTE *)v65 + 870) = 1;
            v144 = v65[208] - v65[212] + v65[210];
            sub_21DF2E08C((uint64_t *)v65 + 100, 4, v143);
            sub_21DF2E08C((uint64_t *)v65 + 100, 6, (int)v312[0].__locale_);
            v145 = sub_21DF2DC24((uint64_t)(v65 + 200), v144);
            *((_BYTE *)v65 + 870) = 1;
            v146 = v65[208] - v65[212] + v65[210];
            if (v142)
            {
              sub_21DF2DF68((uint64_t)(v65 + 200), 4uLL);
              sub_21DF2E08C((uint64_t *)v65 + 100, 8, v65[208] - v65[212] + v65[210] - v142 + 4);
            }
            if (v145)
            {
              sub_21DF2DF68((uint64_t)(v65 + 200), 4uLL);
              sub_21DF2E08C((uint64_t *)v65 + 100, 6, v65[208] - v65[212] + v65[210] - v145 + 4);
            }
            sub_21DF2DB90((uint64_t *)v65 + 100, 4, *((_QWORD *)v65 + 45));
            v147 = sub_21DF2DC24((uint64_t)(v65 + 200), v146);
            sub_21DF2ED04((uint64_t)(v65 + 200), v147);
            memset(&v301[72], 0, 32);
            memset(&v301[8], 0, 64);
            v148 = (void *)*((_QWORD *)v65 + 64);
            v149 = (void *)*((_QWORD *)v65 + 59);
            __p[0] = *((void **)v65 + 58);
            __p[1] = v148;
            v150 = (void *)*((_QWORD *)v65 + 65);
            __p[2] = v149;
            __p[3] = v150;
            v151 = *((_QWORD *)v65 + 66);
            v300 = *((_QWORD *)v65 + 60);
            *(_QWORD *)v301 = v151;
            v152 = *((_QWORD *)v65 + 68);
            v153 = *((_QWORD *)v65 + 63);
            *(_QWORD *)&v301[72] = *((_QWORD *)v65 + 62);
            *(_QWORD *)&v301[80] = v152;
            v154 = *((_QWORD *)v65 + 69);
            *(_QWORD *)&v301[56] = v153;
            *(_QWORD *)&v301[64] = v154;
            v155 = *((_QWORD *)v65 + 94);
            *(_QWORD *)&v301[32] = (v65[184] - v155 + v65[186]);
            if (*(_DWORD *)&v301[32])
              *(_QWORD *)&v301[24] = v155;
            v156 = *((_QWORD *)v65 + 118);
            *(_QWORD *)&v301[48] = (v65[232] - v156 + v65[234]);
            if (*(_DWORD *)&v301[48])
              *(_QWORD *)&v301[40] = v156;
            v157 = *((_QWORD *)v65 + 106);
            *(_QWORD *)&v301[16] = (v65[208] - v157 + v65[210]);
            if (*(_DWORD *)&v301[16])
              *(_QWORD *)&v301[8] = v157;
            v158 = *((_QWORD *)v65 + 50);
            if (*(char *)(v158 + 303) < 0)
            {
              sub_21DF205EC(__dst, *(void **)(v158 + 280), *(_QWORD *)(v158 + 288));
            }
            else
            {
              v159 = v158 + 280;
              *(_OWORD *)__dst = *(_OWORD *)v159;
              v297 = *(_QWORD *)(v159 + 16);
            }
            v161 = (void *)HIBYTE(v297);
            v162 = __dst;
            if (v297 < 0)
            {
              v162 = (void **)__dst[0];
              v161 = __dst[1];
            }
            *(_QWORD *)&v301[88] = v162;
            *(_QWORD *)&v301[96] = v161;
            v163 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v65 + 24))(v65);
            if (sub_21DF2D948(v163))
            {
              if (MGGetBoolAnswer())
              {
                v164 = (const char *)sub_21DF21324("AGC_DUMP_FAKE_MACHO");
                if (v164)
                {
                  if (*v164 != 48 && atoi(v164))
                  {
                    v165 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v65 + 24))(v65);
                    v166 = snprintf(__str, 0x80uLL, "Fake-MachO for %s shader %u", v165, v65[174]);
                    sub_21DF28954(v166, "------ Start %s -------\n", v167, v168, v169, v170, v171, v172, (char)__str);
                    v180 = (_QWORD *)qword_2553B3D80;
                    v181 = atomic_load((unsigned __int8 *)&qword_2553B3138);
                    if ((v181 & 1) == 0)
                    {
                      v173 = __cxa_guard_acquire(&qword_2553B3138);
                      if ((_DWORD)v173)
                      {
                        sub_21DF1AF28(qword_2553B3060, "binary");
                        sub_21DF1AF28(&qword_2553B3060[3], "backend_metadata");
                        sub_21DF1AF28(&qword_2553B3060[6], "target_backend_metadata");
                        sub_21DF1AF28(&qword_2553B3060[9], "statistics_metadata");
                        sub_21DF1AF28(&qword_2553B3060[12], "translator_metadata");
                        sub_21DF1AF28(&qword_2553B3060[15], "target_translator_metadata");
                        sub_21DF1AF28(&qword_2553B3060[18], "backend_telemetry_data");
                        sub_21DF1AF28(&qword_2553B3060[21], "backend_counter_data");
                        sub_21DF1AF28(&qword_2553B3060[24], "remarks");
                        __cxa_atexit((void (*)(void *))sub_21DF2ED70, qword_2553B3060, &dword_21DF15000);
                        __cxa_guard_release(&qword_2553B3138);
                      }
                    }
                    v182 = 0;
                    v281 = v180 + 1;
                    v275 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
                    v277 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
                    v273 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                    v269 = (void *)(MEMORY[0x24BEDB848] + 16);
                    v263 = v40;
                    v279 = v180;
                    do
                    {
                      v183 = (char *)__p[2 * v182 + 1];
                      if (v183)
                      {
                        v184 = sub_21DF28BA4(v180, (uint64_t)".segment ", 9);
                        v185 = (char *)&qword_2553B3060[3 * v182];
                        v186 = v185[23];
                        if (v186 >= 0)
                          v187 = (char *)&qword_2553B3060[3 * v182];
                        else
                          v187 = *(char **)v185;
                        if (v186 >= 0)
                          v188 = v185[23];
                        else
                          v188 = *((_QWORD *)v185 + 1);
                        v189 = sub_21DF28BA4(v184, (uint64_t)v187, v188);
                        sub_21DF28BA4(v189, (uint64_t)", size ", 7);
                        *(_DWORD *)((char *)v281 + *(_QWORD *)(*v180 - 24)) = *(_DWORD *)((_BYTE *)v281
                                                                                          + *(_QWORD *)(*v180 - 24)) & 0xFFFFFFB5 | 2;
                        v190 = (_QWORD *)std::ostream::operator<<();
                        std::ios_base::getloc((const std::ios_base *)((char *)v190 + *(_QWORD *)(*v190 - 24)));
                        v191 = std::locale::use_facet(v312, MEMORY[0x24BEDB350]);
                        ((void (*)(const std::locale::facet *, uint64_t))v191->__vftable[2].~facet_0)(v191, 10);
                        std::locale::~locale(v312);
                        std::ostream::put();
                        std::ostream::flush();
                        *(_QWORD *)&v290 = v180;
                        v173 = sub_21DF2BF44((char **)&v290);
                        if ((_DWORD)v173)
                        {
                          sub_21DF2E3C8((uint64_t)v312);
                          v192 = (uint64_t *)v290;
                          sub_21DF28BA4((_QWORD *)v290, (uint64_t)"{", 1);
                          std::ios_base::getloc((const std::ios_base *)((char *)v192 + *(_QWORD *)(*v192 - 24)));
                          v193 = std::locale::use_facet(v293, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v193->__vftable[2].~facet_0)(v193, 10);
                          std::locale::~locale(v293);
                          std::ostream::put();
                          std::ostream::flush();
                          for (m = 0; m != v183; ++m)
                          {
                            if ((m & 0x1F) == 0)
                              sub_21DF28BA4(v192, (uint64_t)"\t", 1);
                            sub_21DF28BA4(v192, (uint64_t)&unk_21DFAD77A, 0);
                            v195 = *v192;
                            *(uint64_t *)((char *)v192 + *(_QWORD *)(*v192 - 24) + 24) = 2;
                            v196 = (const std::ios_base *)((char *)v192 + *(_QWORD *)(v195 - 24));
                            if (v196[1].__fmtflags_ == -1)
                            {
                              std::ios_base::getloc(v196);
                              v197 = std::locale::use_facet(v293, MEMORY[0x24BEDB350]);
                              ((void (*)(const std::locale::facet *, uint64_t))v197->__vftable[2].~facet_0)(v197, 32);
                              std::locale::~locale(v293);
                              v195 = *v192;
                            }
                            v196[1].__fmtflags_ = 48;
                            *(_DWORD *)((char *)v192 + *(_QWORD *)(v195 - 24) + 8) = *(_DWORD *)((_BYTE *)v192
                                                                                               + *(_QWORD *)(v195 - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
                            v198 = (_QWORD *)std::ostream::operator<<();
                            sub_21DF28BA4(v198, (uint64_t)" ", 1);
                            if ((m & 0x1F) == 0x1FLL)
                            {
                              std::ios_base::getloc((const std::ios_base *)((char *)v192 + *(_QWORD *)(*v192 - 24)));
                              v199 = std::locale::use_facet(v293, MEMORY[0x24BEDB350]);
                              ((void (*)(const std::locale::facet *, uint64_t))v199->__vftable[2].~facet_0)(v199, 10);
                              std::locale::~locale(v293);
                              std::ostream::put();
                              std::ostream::flush();
                            }
                          }
                          std::ios_base::getloc((const std::ios_base *)((char *)v192 + *(_QWORD *)(*v192 - 24)));
                          v200 = (std::locale::id *)MEMORY[0x24BEDB350];
                          v201 = std::locale::use_facet(v293, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v201->__vftable[2].~facet_0)(v201, 10);
                          std::locale::~locale(v293);
                          std::ostream::put();
                          std::ostream::flush();
                          sub_21DF28BA4(v192, (uint64_t)"}", 1);
                          std::ios_base::getloc((const std::ios_base *)((char *)v192 + *(_QWORD *)(*v192 - 24)));
                          v202 = std::locale::use_facet(v293, v200);
                          ((void (*)(const std::locale::facet *, uint64_t))v202->__vftable[2].~facet_0)(v202, 10);
                          std::locale::~locale(v293);
                          std::ostream::put();
                          std::ostream::flush();
                          std::ostream::flush();
                          v312[0].__locale_ = v277;
                          *(std::locale::__imp **)((char *)&v312[0].__locale_ + *((_QWORD *)v277 - 3)) = v275;
                          v313[0] = v273;
                          v313[1] = v269;
                          if (SBYTE7(v319) < 0)
                            operator delete((void *)v318);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          v173 = MEMORY[0x2207A790C](v321);
                          v180 = v279;
                        }
                        v40 = v263;
                      }
                      ++v182;
                    }
                    while (v182 != 9);
                    sub_21DF28954(v173, "------ End %s -------\n", v174, v175, v176, v177, v178, v179, (char)__str);
                  }
                }
              }
            }
            v203 = 40;
            for (n = 1; n != 19; n += 2)
              v203 += ((unint64_t)__p[n] + 7) & 0xFFFFFFFFFFFFFFF8;
            a1[1] = v203;
            v205 = malloc_type_calloc(1uLL, v203, 0x24EDDCFEuLL);
            v206 = 0;
            *a1 = v205;
            v207 = (char *)(v205 + 10);
            do
            {
              v208 = __p[v206 + 1];
              *v205 = (_DWORD)v208;
              if (v208)
                memcpy(v207, __p[v206], (size_t)v208);
              v207 += ((unint64_t)v208 + 7) & 0xFFFFFFFFFFFFFFF8;
              v206 += 2;
              ++v205;
            }
            while (v206 != 18);
            if (SHIBYTE(v297) < 0)
              operator delete(__dst[0]);
            v49 = v283;
            goto LABEL_249;
          }
          v160 = (const char *)(v65 + 102);
          if (*((char *)v65 + 431) < 0)
          {
            if (!*((_QWORD *)v65 + 52))
            {
LABEL_249:
              (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
              goto LABEL_250;
            }
            v160 = *(const char **)v160;
          }
          else if (!*((_BYTE *)v65 + 431))
          {
            goto LABEL_249;
          }
          a1[2] = strdup(v160);
          goto LABEL_249;
        }
LABEL_375:
        v49 = 0;
LABEL_250:
        llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v288);
        v38 = v264;
        break;
      default:
        goto LABEL_250;
    }
  }
  if (v289)
    llvm::Timer::stopTimer(v289);
  if (v40 > 1)
    return 0;
  has_internal_diagnostics = (llvm *)os_variant_has_internal_diagnostics();
  if ((_DWORD)has_internal_diagnostics)
  {
    v284 = v49;
    llvm::GetStatistics(has_internal_diagnostics);
    locale = v312[0].__locale_;
    v211 = v312[1].__locale_;
    while (locale != v211)
    {
      if (!*(_QWORD *)locale)
        goto LABEL_281;
      sub_21DF24420(__p, *(void **)locale, *((_QWORD *)locale + 1));
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)19)
        {
          v216 = *(_QWORD *)__p[0] != 0x49747361466D754ELL
              || *((_QWORD *)__p[0] + 1) != 0x756C6961466C6573
              || *(_QWORD *)((char *)__p[0] + 11) != 0x736572756C696146;
          operator delete(__p[0]);
          if (!v216)
LABEL_279:
            xpc_dictionary_set_uint64(v38, "stat_numfastiselfailures", *((unsigned int *)locale + 4));
        }
        else
        {
          operator delete(__p[0]);
        }
      }
      else if (SHIBYTE(__p[2]) == 19)
      {
        v212 = __p[0] == (void *)0x49747361466D754ELL && __p[1] == (void *)0x756C6961466C6573;
        if (v212 && *(void **)((char *)&__p[1] + 3) == (void *)0x736572756C696146)
          goto LABEL_279;
      }
LABEL_281:
      if (!*(_QWORD *)locale)
        goto LABEL_306;
      sub_21DF24420(__p, *(void **)locale, *((_QWORD *)locale + 1));
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)18)
        {
          v221 = *(_QWORD *)__p[0] != 0x49747361466D754ELL
              || *((_QWORD *)__p[0] + 1) != 0x65636375536C6573
              || *((_WORD *)__p[0] + 8) != 29555;
          operator delete(__p[0]);
          if (!v221)
LABEL_304:
            xpc_dictionary_set_uint64(v38, "stat_numfastiselsuccesses", *((unsigned int *)locale + 4));
        }
        else
        {
          operator delete(__p[0]);
        }
      }
      else if (SHIBYTE(__p[2]) == 18)
      {
        v217 = __p[0] == (void *)0x49747361466D754ELL && __p[1] == (void *)0x65636375536C6573;
        if (v217 && LOWORD(__p[2]) == 29555)
          goto LABEL_304;
      }
LABEL_306:
      if (*(_QWORD *)locale)
      {
        sub_21DF24420(__p, *(void **)locale, *((_QWORD *)locale + 1));
        if (SHIBYTE(__p[2]) < 0)
        {
          if (__p[1] != (void *)17)
          {
            operator delete(__p[0]);
            goto LABEL_331;
          }
          v226 = *(_QWORD *)__p[0] != 0x74636E75466D754ELL
              || *((_QWORD *)__p[0] + 1) != 0x65736552736E6F69
              || *((_BYTE *)__p[0] + 16) != 116;
          operator delete(__p[0]);
          if (v226)
            goto LABEL_331;
        }
        else
        {
          if (SHIBYTE(__p[2]) != 17)
            goto LABEL_331;
          v222 = __p[0] == (void *)0x74636E75466D754ELL && __p[1] == (void *)0x65736552736E6F69;
          if (!v222 || LOBYTE(__p[2]) != 116)
            goto LABEL_331;
        }
        xpc_dictionary_set_uint64(v38, "stat_numfunctionsreset", *((unsigned int *)locale + 4));
      }
LABEL_331:
      locale = (std::locale::__imp *)((char *)locale + 24);
    }
    NamedTimer = llvm::getNamedTimer();
    if (NamedTimer)
    {
      v228 = (llvm::Timer *)NamedTimer;
      xpc_dictionary_set_uint64(v38, "time_total", ((*(double *)(NamedTimer + 8) + *(double *)(NamedTimer + 16)) * 1000000.0));
      llvm::Timer::clear(v228);
    }
    v229 = llvm::getNamedTimer();
    if (v229)
    {
      v230 = (llvm::Timer *)v229;
      xpc_dictionary_set_uint64(v38, "time_dagsel_dagcombining1", ((*(double *)(v229 + 8) + *(double *)(v229 + 16)) * 1000000.0));
      llvm::Timer::clear(v230);
    }
    v231 = llvm::getNamedTimer();
    if (v231)
    {
      v232 = (llvm::Timer *)v231;
      xpc_dictionary_set_uint64(v38, "time_dagisel_typelegalization", ((*(double *)(v231 + 8) + *(double *)(v231 + 16)) * 1000000.0));
      llvm::Timer::clear(v232);
    }
    v233 = llvm::getNamedTimer();
    if (v233)
    {
      v234 = (llvm::Timer *)v233;
      xpc_dictionary_set_uint64(v38, "time_dagisel_dagcombiningafterlegalizetypes", ((*(double *)(v233 + 8) + *(double *)(v233 + 16)) * 1000000.0));
      llvm::Timer::clear(v234);
    }
    v235 = llvm::getNamedTimer();
    if (v235)
    {
      v236 = (llvm::Timer *)v235;
      xpc_dictionary_set_uint64(v38, "time_dagisel_vectorlegalization", ((*(double *)(v235 + 8) + *(double *)(v235 + 16)) * 1000000.0));
      llvm::Timer::clear(v236);
    }
    v237 = llvm::getNamedTimer();
    if (v237)
    {
      v238 = (llvm::Timer *)v237;
      xpc_dictionary_set_uint64(v38, "time_dagisel_typelegalization2", ((*(double *)(v237 + 8) + *(double *)(v237 + 16)) * 1000000.0));
      llvm::Timer::clear(v238);
    }
    v239 = llvm::getNamedTimer();
    if (v239)
    {
      v240 = (llvm::Timer *)v239;
      xpc_dictionary_set_uint64(v38, "time_dagisel_dagcombiningafterlegalizevectors", ((*(double *)(v239 + 8) + *(double *)(v239 + 16)) * 1000000.0));
      llvm::Timer::clear(v240);
    }
    v241 = llvm::getNamedTimer();
    if (v241)
    {
      v242 = (llvm::Timer *)v241;
      xpc_dictionary_set_uint64(v38, "time_dagisel_legalization", ((*(double *)(v241 + 8) + *(double *)(v241 + 16)) * 1000000.0));
      llvm::Timer::clear(v242);
    }
    v243 = llvm::getNamedTimer();
    if (v243)
    {
      v244 = (llvm::Timer *)v243;
      xpc_dictionary_set_uint64(v38, "time_dagisel_dagcombining2", ((*(double *)(v243 + 8) + *(double *)(v243 + 16)) * 1000000.0));
      llvm::Timer::clear(v244);
    }
    v245 = llvm::getNamedTimer();
    if (v245)
    {
      v246 = (llvm::Timer *)v245;
      xpc_dictionary_set_uint64(v38, "time_dagisel_instructionselection", ((*(double *)(v245 + 8) + *(double *)(v245 + 16)) * 1000000.0));
      llvm::Timer::clear(v246);
    }
    v247 = llvm::getNamedTimer();
    if (v247)
    {
      v248 = (llvm::Timer *)v247;
      xpc_dictionary_set_uint64(v38, "time_dagisel_instructionscheduling", ((*(double *)(v247 + 8) + *(double *)(v247 + 16)) * 1000000.0));
      llvm::Timer::clear(v248);
    }
    v249 = llvm::getNamedTimer();
    if (v249)
    {
      v250 = (llvm::Timer *)v249;
      xpc_dictionary_set_uint64(v38, "time_dagisel_instructioncreation", ((*(double *)(v249 + 8) + *(double *)(v249 + 16)) * 1000000.0));
      llvm::Timer::clear(v250);
    }
    if (xpc_dictionary_get_uint64(v38, "instruction_selector") == 2)
    {
      v251 = llvm::getNamedTimer();
      if (v251)
      {
        v252 = (llvm::Timer *)v251;
        xpc_dictionary_set_uint64(v38, "time_gisel_irtranslator", ((*(double *)(v251 + 8) + *(double *)(v251 + 16)) * 1000000.0));
        llvm::Timer::clear(v252);
      }
      v253 = llvm::getNamedTimer();
      if (v253)
      {
        v254 = (llvm::Timer *)v253;
        xpc_dictionary_set_uint64(v38, "time_gisel_legalizer", ((*(double *)(v253 + 8) + *(double *)(v253 + 16)) * 1000000.0));
        llvm::Timer::clear(v254);
      }
      v255 = llvm::getNamedTimer();
      if (v255)
      {
        v256 = (llvm::Timer *)v255;
        xpc_dictionary_set_uint64(v38, "time_gisel_regbankallocator", ((*(double *)(v255 + 8) + *(double *)(v255 + 16)) * 1000000.0));
        llvm::Timer::clear(v256);
      }
      v257 = llvm::getNamedTimer();
      if (v257)
      {
        v258 = (llvm::Timer *)v257;
        xpc_dictionary_set_uint64(v38, "time_gisel_instructionselector", ((*(double *)(v257 + 8) + *(double *)(v257 + 16)) * 1000000.0));
        llvm::Timer::clear(v258);
      }
    }
    v259 = (void *)MEMORY[0x2207A7BF4](v38);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v259;
      _os_log_impl(&dword_21DF15000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Compilation stats+times: %s\n", (uint8_t *)__p, 0xCu);
    }
    free(v259);
    analytics_send_event();
    if (v312[0].__locale_)
    {
      v312[1] = v312[0];
      operator delete(v312[0].__locale_);
    }
    v49 = v284;
  }
  if (v38)
    xpc_release(v38);
  *a7 = *a1;
  *a8 = a1[1];
  return v49;
}

uint64_t GLCompilerLogBuildRequest(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, int a6, uint64_t a7)
{
  uint64_t result;
  int v11;

  v11 = a6;
  result = sub_21DF4EE04(a2, a3, a7, (uint64_t)"state", &v11);
  if ((_DWORD)result)
    return sub_21DF4EE04(a4, a5, a7, (uint64_t)"bitcode", 0);
  return result;
}

void GLCompilerReleaseReply(uint64_t a1)
{
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t MTLCompilerCreate(uint64_t a1, unint64_t a2)
{
  int v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::string v11;
  void *__p[2];
  char v13;
  void *__dst[2];
  char v15;

  v4 = *(_DWORD *)a1;
  v5 = *(unsigned int *)(a1 + 4);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = a1 + 12;
  sub_21DF24420(__dst, (void *)(a1 + 12), v5);
  sub_21DF24420(__p, (void *)(v7 + v5), v6);
  v8 = (v5 + v6 + 12);
  memset(&v11, 0, sizeof(v11));
  if (a2 > v8)
    std::string::append(&v11, (const std::string::value_type *)(a1 + v8), a2 - v8);
  v9 = sub_21DF25F88((uint64_t)&v11, v4, 2u, (uint64_t)__p, (const void **)__dst);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(__dst[0]);
  return v9;
}

uint64_t MTLCompilerBuildRequestWithOptions(_QWORD *a1, _DWORD *a2, uint64_t a3, char a4, llvm::Type **a5, _QWORD *a6, _QWORD *a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, char **a12)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char **v32;
  char *v33;
  int v34;

  *a9 = 0;
  *a11 = 0;
  v18 = mach_absolute_time();
  v34 = 0;
  v19 = sub_21DF29324(a1, a2, 0, 0, a5, &v34, a6, a7, 1u);
  v26 = v19;
  if ((a4 & 2) != 0)
  {
    *a11 = 32;
    v28 = mach_absolute_time();
    v29 = sub_21DF527F8(v28 - v18);
    v30 = v29 - a1[7];
    a1[5] = v29;
    a1[6] = v30;
    *a10 = a1 + 4;
    if (v26)
      goto LABEL_3;
  }
  else if (v19)
  {
LABEL_3:
    result = 0;
    *a12 = 0;
    return result;
  }
  v33 = (char *)a1[2];
  v32 = (char **)(a1 + 2);
  v31 = v33;
  if (!v33)
    v31 = sub_21DF2B960(v32, v34);
  *a12 = v31;
  sub_21DF28954((uint64_t)v31, "** Compilation failed with error: %s **", v20, v21, v22, v23, v24, v25, (char)v31);
  return 1;
}

char *sub_21DF2B960(char **a1, int a2)
{
  char *v4;
  void *v5;
  std::string v7;

  sub_21DF1AF28(&v7, "Internal error during ");
  if ((a2 - 3) <= 3)
    std::string::append(&v7, off_24E1E7988[a2 - 3]);
  std::string::append(&v7, "function compilation");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v7.__r_.__value_.__r.__words[0];
    v4 = strdup(v7.__r_.__value_.__l.__data_);
    *a1 = v4;
    operator delete(v5);
  }
  else
  {
    v4 = strdup((const char *)&v7);
    *a1 = v4;
  }
  return v4;
}

uint64_t MTLCompilerBuildRequestWithSerializedBitcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, char **a13)
{
  char *v14;

  *a11 = 0;
  *a9 = 0;
  *a7 = 0;
  *a12 = 0;
  *a10 = 0;
  *a8 = 0;
  *a13 = sub_21DF2B960(&v14, 0);
  return 1;
}

uint64_t MTLCompilerBuildRequest(_QWORD *a1, _DWORD *a2, uint64_t a3, llvm::Type **a4, _QWORD *a5, _QWORD *a6, char **a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  char **v17;
  char *v18;
  int v19;

  v19 = 0;
  if (sub_21DF29324(a1, a2, 0, 0, a4, &v19, a5, a6, 1u))
  {
    result = 0;
    *a7 = 0;
  }
  else
  {
    v18 = (char *)a1[2];
    v17 = (char **)(a1 + 2);
    v16 = v18;
    if (!v18)
      v16 = sub_21DF2B960(v17, v19);
    *a7 = v16;
    sub_21DF28954((uint64_t)v16, "** Compilation failed with error: %s **", v9, v10, v11, v12, v13, v14, (char)v16);
    return 1;
  }
  return result;
}

void MTLCompilerReleaseReply(uint64_t a1)
{
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t AIRNTInit()
{
  return 0;
}

uint64_t AIRNTInitCompilationContext()
{
  return 0;
}

uint64_t AIRNTEmitPipelineImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15)
{
  if (a15)
    *a15 = strdup("[AGX] Plugin interface not implemented: AIRNTEmitPipelineImage");
  return 0;
}

uint64_t sub_21DF2BB78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 576);
}

uint64_t sub_21DF2BB84()
{
  return 0;
}

uint64_t sub_21DF2BB8C(_QWORD *a1, _DWORD *a2)
{
  uint64_t result;

  *a2 = *(_DWORD *)(a1[43] + 840);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)result)
  {
    *a2 = result;
    return (_DWORD)result != *(_DWORD *)(a1[43] + 840);
  }
  return result;
}

uint64_t sub_21DF2BBDC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_21DF2BC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (sub_21DF2BF44((char **)&qword_2553B3D80))
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = &unk_2553B3038;
    *(_DWORD *)(v6 + 24) = 4;
    *(_QWORD *)v6 = off_24E1E7A28;
    *(_QWORD *)(v6 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v6 + 40) = v7;
    *(_BYTE *)(v6 + 48) = 1;
    *(_QWORD *)(v6 + 56) = a1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = &unk_2553B3039;
    *(_DWORD *)(v8 + 24) = 4;
    *(_QWORD *)v8 = off_24E1E7AC8;
    *(_QWORD *)(v8 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v8 + 40) = v9;
    *(_BYTE *)(v8 + 48) = 1;
    *(_QWORD *)(v8 + 56) = a1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3);
  result = sub_21DF2BF44((char **)&qword_2553B3D80);
  if ((_DWORD)result)
  {
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = &unk_2553B3038;
    *(_DWORD *)(v11 + 24) = 4;
    *(_QWORD *)v11 = off_24E1E7A28;
    *(_QWORD *)(v11 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v11 + 40) = v12;
    *(_BYTE *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = a1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v11);
    v13 = operator new();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = &unk_2553B3039;
    *(_DWORD *)(v13 + 24) = 4;
    *(_QWORD *)v13 = off_24E1E7AC8;
    *(_QWORD *)(v13 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v13 + 40) = v14;
    *(_BYTE *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v13);
  }
  return result;
}

llvm::legacy::PassManager *sub_21DF2BE78(uint64_t a1)
{
  llvm::legacy::PassManager *v2;
  uint64_t v3;
  _BYTE *v4;
  char v5;
  _BYTE *v7;
  char v8;
  char v9;
  void *__p[2];
  char v11;

  v2 = (llvm::legacy::PassManager *)operator new();
  llvm::legacy::PassManager::PassManager(v2);
  v3 = operator new();
  v4 = *(_BYTE **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = 1;
  v9 = 1;
  if (*v4)
  {
    v7 = v4;
    v5 = 3;
  }
  v8 = v5;
  MEMORY[0x2207A7228](__p, &v7);
  MEMORY[0x2207A6FAC](v3, __p);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  if (v11 < 0)
    operator delete(__p[0]);
  return v2;
}

BOOL sub_21DF2BF44(char **a1)
{
  char *v2;
  char *v3;
  unsigned __int8 v4;
  _QWORD v6[18];

  v6[17] = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    if (dword_2553B3D88)
    {
      v2 = &(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 24)];
      if ((v2[32] & 5) == 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 32))(v6, *((_QWORD *)v2 + 5), 0, 1, 16);
        if (v6[16] >= (uint64_t)dword_2553B3D88)
        {
          sub_21DF28BA4(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          v3 = *a1;
          if (*a1)
          {
            if (v3 != (char *)MEMORY[0x24BEDB310])
            {
              (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
              *a1 = 0;
              v4 = atomic_load((unsigned __int8 *)&qword_2553B3058);
              if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3058))
              {
                qword_2553B3040 = 0;
                qword_2553B3048 = 0;
                unk_2553B3050 = 0;
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2553B3040, &dword_21DF15000);
                __cxa_guard_release(&qword_2553B3058);
              }
              if (byte_2553B3057 < 0)
              {
                *(_BYTE *)qword_2553B3040 = 0;
                qword_2553B3048 = 0;
              }
              else
              {
                LOBYTE(qword_2553B3040) = 0;
                byte_2553B3057 = 0;
              }
            }
          }
        }
      }
    }
  }
  return *a1 != 0;
}

void sub_21DF2C0C8()
{
  MEMORY[0x2207A6970]();
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF2C0EC()
{
  return "verify module";
}

uint64_t sub_21DF2C0FC()
{
  return 0;
}

uint64_t sub_21DF2C104()
{
  return 0;
}

void sub_21DF2C10C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_21DF2C118(uint64_t a1)
{
  int v1;
  FILE *v3;
  const char *v4;
  void *v5;
  const char *p_p;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *v30[2];
  uint64_t v31;

  if (*(_BYTE *)(a1 + 48))
    v1 = 4;
  else
    v1 = 8;
  if ((**(_DWORD **)(a1 + 56) & v1) != 0)
  {
    v30[0] = 0;
    v30[1] = 0;
    v31 = 0;
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = MEMORY[0x24BED83D8] + 16;
    v29 = v30;
    sub_21DF2C310((llvm::raw_ostream *)&v21);
    if (llvm::verifyModule())
    {
      v3 = (FILE *)*MEMORY[0x24BDAC8D8];
      if (*(_BYTE *)(a1 + 48))
        v4 = "before";
      else
        v4 = "after";
      v5 = *(void **)(a1 + 32);
      if (v5)
      {
        sub_21DF24420(&__p, v5, *(_QWORD *)(a1 + 40));
        if (v20 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
      }
      else
      {
        __p = 0;
        v19 = 0;
        p_p = (const char *)&__p;
        v20 = 0;
      }
      v7 = (const char *)v29;
      if (*((char *)v29 + 23) < 0)
        v7 = (const char *)*v29;
      v8 = fprintf(v3, "AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", "agc_llvm_object.cpp", 235, "runOnModule", v4, p_p, v7);
      if (SHIBYTE(v20) < 0)
        operator delete(__p);
      if (*(_BYTE *)(a1 + 48))
        v15 = "before";
      else
        v15 = "after";
      v16 = *(void **)(a1 + 32);
      if (v16)
      {
        v8 = (uint64_t)sub_21DF24420(&__p, v16, *(_QWORD *)(a1 + 40));
      }
      else
      {
        __p = 0;
        v19 = 0;
        v20 = 0;
      }
      sub_21DF28954(v8, "Module verification failed %s pass '%s' : %s", v9, v10, v11, v12, v13, v14, (char)v15);
      if (SHIBYTE(v20) < 0)
        operator delete(__p);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
  }
  return 0;
}

uint64_t sub_21DF2C310(llvm::raw_ostream *this)
{
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  return llvm::raw_ostream::SetBufferAndMode();
}

void sub_21DF2C358()
{
  MEMORY[0x2207A6970]();
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF2C37C()
{
  return "print module";
}

void sub_21DF2C38C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_21DF2C398(uint64_t a1)
{
  int v1;
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  std::string *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  const std::string::value_type *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  void *__p[2];
  char v52;
  std::string v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  std::string *p_str;
  std::string __str;

  if (*(_BYTE *)(a1 + 48))
    v1 = 1;
  else
    v1 = 2;
  if ((**(_DWORD **)(a1 + 56) & v1) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    v55 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 1;
    v57 = 0;
    v58 = 0;
    v56 = 0;
    v54 = MEMORY[0x24BED83D8] + 16;
    p_str = &__str;
    sub_21DF2C310((llvm::raw_ostream *)&v54);
    llvm::Module::print();
    if (v58 != v56)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v54);
    v3 = *(_QWORD *)(a1 + 56);
    v4 = (std::string *)(v3 + 8);
    v5 = *(unsigned __int8 *)(v3 + 31);
    if ((v5 & 0x80u) == 0)
      v6 = *(unsigned __int8 *)(v3 + 31);
    else
      v6 = *(_QWORD *)(v3 + 16);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v6 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &__str;
      else
        v8 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v5 & 0x80) != 0)
      {
        v14 = memcmp(v4->__r_.__value_.__l.__data_, v8, *(_QWORD *)(v3 + 16)) != 0;
      }
      else if (*(_BYTE *)(v3 + 31))
      {
        v9 = v5 - 1;
        v10 = (unsigned __int8 *)(v3 + 8);
        do
        {
          v12 = *v10++;
          v11 = v12;
          v13 = v8->__r_.__value_.__s.__data_[0];
          v8 = (std::string *)((char *)v8 + 1);
          v14 = v11 != v13;
        }
        while (v11 == v13 && v9-- != 0);
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = 1;
    }
    std::string::operator=(v4, &__str);
    memset(&v53, 0, sizeof(v53));
    MEMORY[0x2207A77BC](&v53, "------ ");
    if (*(_BYTE *)(a1 + 48))
      v16 = "Before ";
    else
      v16 = "After ";
    std::string::append(&v53, v16);
    std::string::append(&v53, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
    if (v14)
    {
      v17 = std::string::append(&v53, " ------");
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v53;
      else
        LOBYTE(v24) = v53.__r_.__value_.__s.__data_[0];
      sub_21DF28954((uint64_t)v17, "%s", v18, v19, v20, v21, v22, v23, (char)v24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &__str;
      else
        LOBYTE(v32) = __str.__r_.__value_.__s.__data_[0];
      sub_21DF28954(v25, "%s", v26, v27, v28, v29, v30, v31, (char)v32);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      else
        v33 = v53.__r_.__value_.__l.__size_;
      v34 = sub_21DF28DD4(__p, v33, 45);
      if (v52 >= 0)
        v41 = __p;
      else
        LOBYTE(v41) = __p[0];
      sub_21DF28954((uint64_t)v34, "%s", v35, v36, v37, v38, v39, v40, (char)v41);
      if (v52 < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::append(&v53, " (No change)");
      v42 = std::string::append(&v53, " ------");
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v53;
      else
        LOBYTE(v49) = v53.__r_.__value_.__s.__data_[0];
      sub_21DF28954((uint64_t)v42, "%s", v43, v44, v45, v46, v47, v48, (char)v49);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v54);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t sub_21DF2C660(uint64_t result)
{
  uint64_t v1;
  llvm *v2;
  uint64_t SROAPass;
  llvm *v4;
  uint64_t v5;
  uint64_t InstructionCombiningPass;

  if (!*(_QWORD *)(result + 336))
  {
    v1 = result;
    v2 = sub_21DF2BE78(result);
    *(_QWORD *)(v1 + 336) = v2;
    SROAPass = llvm::createSROAPass(v2);
    v4 = (llvm *)sub_21DF2BC5C(v1, (uint64_t)v2, SROAPass);
    v5 = *(_QWORD *)(v1 + 336);
    InstructionCombiningPass = llvm::createInstructionCombiningPass(v4);
    return sub_21DF2BC5C(v1, v5, InstructionCombiningPass);
  }
  return result;
}

uint64_t sub_21DF2C6C4(uint64_t result)
{
  uint64_t v1;
  llvm *v2;
  uint64_t DeadCodeEliminationPass;
  llvm *v4;
  uint64_t v5;
  uint64_t GlobalDCEPass;

  if (!*(_QWORD *)(result + 344))
  {
    v1 = result;
    v2 = sub_21DF2BE78(result);
    *(_QWORD *)(v1 + 344) = v2;
    DeadCodeEliminationPass = llvm::createDeadCodeEliminationPass(v2);
    v4 = (llvm *)sub_21DF2BC5C(v1, (uint64_t)v2, DeadCodeEliminationPass);
    v5 = *(_QWORD *)(v1 + 344);
    GlobalDCEPass = llvm::createGlobalDCEPass(v4);
    return sub_21DF2BC5C(v1, v5, GlobalDCEPass);
  }
  return result;
}

uint64_t sub_21DF2C728(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  const void *v6;
  size_t v7;
  size_t v8;
  void **v9;
  const void *v10;
  void **v11;
  _QWORD *v12;
  size_t v14;
  void **v15;
  const void *v16;
  void *__p[2];
  char v18;

  if (a3)
  {
    if (a3 == 2)
    {
      if (*(char *)(a1 + 383) >= 0)
        v14 = *(unsigned __int8 *)(a1 + 383);
      else
        v14 = *(_QWORD *)(a1 + 368);
      sub_21DF2BBDC((uint64_t)__p, v14 + 15);
      if (v18 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (v14)
      {
        if (*(char *)(a1 + 383) >= 0)
          v16 = (const void *)(a1 + 360);
        else
          v16 = *(const void **)(a1 + 360);
        memmove(v15, v16, v14);
      }
      strcpy((char *)v15 + v14, "/ei_rt.metallib");
      if (v18 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
    }
    else
    {
      if (a3 != 1)
        return v3;
      v6 = *(const void **)(*(_QWORD *)(a1 + 32) + 32);
      if (*(char *)(a1 + 383) >= 0)
        v7 = *(unsigned __int8 *)(a1 + 383);
      else
        v7 = *(_QWORD *)(a1 + 368);
      v8 = strlen(*(const char **)(*(_QWORD *)(a1 + 32) + 32));
      v9 = __p;
      sub_21DF2BBDC((uint64_t)__p, v7 + v8);
      if (v18 < 0)
        v9 = (void **)__p[0];
      if (v7)
      {
        if (*(char *)(a1 + 383) >= 0)
          v10 = (const void *)(a1 + 360);
        else
          v10 = *(const void **)(a1 + 360);
        memmove(v9, v10, v7);
      }
      if (v8)
        memmove((char *)v9 + v7, v6, v8);
      *((_BYTE *)v9 + v7 + v8) = 0;
      if (v18 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
    }
    v3 = sub_21DF2C8E8((uint64_t)v11, a2);
    if (v18 < 0)
      operator delete(__p[0]);
    return v3;
  }
  v12 = (_QWORD *)(a1 + 384);
  if (*(char *)(a1 + 407) < 0)
    v12 = (_QWORD *)*v12;
  return sub_21DF2C8E8((uint64_t)v12, a2);
}

uint64_t sub_21DF2C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t (***CompilerHelper)(_QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  CompilerHelper = (uint64_t (***)(_QWORD, uint64_t))createCompilerHelper();
  v5 = (**CompilerHelper)(CompilerHelper, a1);
  if (v5)
  {
    v6 = v5;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v7 = 0;
  }
  deleteCompilerHelper();
  return v7;
}

uint64_t sub_21DF2C968(uint64_t a1, uint64_t a2, int a3, llvm::Function *a4)
{
  uint64_t v8;
  uint64_t i;
  llvm::GlobalValue *v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Function *v21;
  BOOL v22;
  llvm::Function *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  v8 = a2 + 24;
  for (i = *(_QWORD *)(a2 + 32); i != v8; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v10 = (llvm::GlobalValue *)(i - 56);
    else
      v10 = 0;
    if (llvm::GlobalValue::isDeclaration(v10))
    {
      if ((*((_BYTE *)v10 + 34) & 0x80) != 0)
        sub_21DF2CCA0((uint64_t)v10, 3);
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 32);
  v12 = *(void **)(v11 + 8);
  if (v12)
    v13 = strlen(*(const char **)(v11 + 8));
  else
    v13 = 0;
  sub_21DF2CC40(a2, v12, v13);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 32);
  if (*(_QWORD *)(v15 + 16))
    strlen(*(const char **)(v15 + 16));
  llvm::Module::setDataLayout();
  v31 = a2;
  v32[3] = 0;
  v16 = llvm::Linker::linkModules();
  if (!v32)
    (*(void (**)(void))(v32[0] + 32))();
  v17 = MEMORY[0x2207A721C](v31);
  MEMORY[0x2207A7960](v17, 0x10B2C407FF26C1CLL);
  if ((v16 & 1) == 0)
  {
    v18 = *(_QWORD *)(a1 + 320);
    v19 = v18 + 24;
    v20 = *(_QWORD *)(v18 + 32);
    if (a3)
    {
      if (v20 != v18 + 24)
      {
        do
        {
          v21 = (llvm::Function *)(v20 - 56);
          v22 = v20 == 0;
          v20 = *(_QWORD *)(v20 + 8);
          if (v22)
            v23 = 0;
          else
            v23 = v21;
          if (v23 != a4 && !*((_QWORD *)v23 + 1))
            llvm::Function::eraseFromParent(v23);
        }
        while (v20 != v19);
      }
    }
    else
    {
      v24 = 1;
      if (v20 != v18 + 24)
      {
        do
        {
          v25 = v20 - 56;
          v22 = v20 == 0;
          v20 = *(_QWORD *)(v20 + 8);
          if (v22)
            v26 = 0;
          else
            v26 = v25;
          if ((llvm::Function *)v26 != a4)
          {
            if (*(_QWORD *)(v26 + 8))
            {
              if ((*(_BYTE *)(v26 + 33) & 0x20) == 0
                && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v26) & 1) == 0)
              {
                *(_DWORD *)(v26 + 32) = *(_DWORD *)(v26 + 32) & 0xFFFFBFC0 | 0x4007;
                llvm::Function::addFnAttr();
                ++v24;
              }
            }
            else
            {
              llvm::Function::eraseFromParent((llvm::Function *)v26);
            }
          }
        }
        while (v20 != v19);
        v18 = *(_QWORD *)(a1 + 320);
      }
      v27 = v18 + 8;
      v28 = *(_QWORD *)(v18 + 16);
      if (v28 != v18 + 8)
      {
        do
        {
          v29 = v28 - 56;
          v22 = v28 == 0;
          v28 = *(_QWORD *)(v28 + 8);
          if (v22)
            v30 = 0;
          else
            v30 = v29;
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v30) & 1) == 0)
          {
            if (*(_QWORD *)(v30 + 8))
              *(_DWORD *)(v30 + 32) = *(_DWORD *)(v30 + 32) & 0xFFFFBFC0 | 0x4007;
            else
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v30);
          }
        }
        while (v28 != v27);
      }
      if (v24 > 1)
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(a1 + 400) + 320), *(llvm::Module **)(a1 + 320));
    }
  }
  return v16 ^ 1u;
}

double sub_21DF2CC40(uint64_t a1, void *a2, size_t a3)
{
  void **v4;
  double result;
  __int128 __dst;
  uint64_t v7;

  if (a2)
  {
    sub_21DF24420(&__dst, a2, a3);
  }
  else
  {
    __dst = 0uLL;
    v7 = 0;
  }
  v4 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v4);
  result = *(double *)&__dst;
  *(_OWORD *)v4 = __dst;
  *(_QWORD *)(a1 + 232) = v7;
  return result;
}

uint64_t sub_21DF2CCA0(uint64_t result, char a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v2 & 0xFFFFFFF0 | a2 & 0xF;
  if ((v2 & 0x30) != 0)
  {
    v3 = result;
    result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
      *(_DWORD *)(v3 + 32) |= 0x4000u;
  }
  return result;
}

uint64_t sub_21DF2CCE8(uint64_t a1, const UInt8 *a2)
{
  CFIndex v2;
  CFIndex v3;
  const __CFString *v4;
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::ios_base *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  const std::locale::facet *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  char v24;
  char *v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  llvm *v33;
  llvm::raw_ostream *v34;
  uint64_t v36;
  std::locale v37[2];
  void *v38[2];
  __int128 v39;
  int v40;
  void *v41[2];
  void *__p[2];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _BYTE v49[408];
  uint64_t v50[19];
  char buffer[1024];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v3 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v3 = v2;
  }
  v4 = CFStringCreateWithBytes(0, a2, v3, 0x8000100u, 1u);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.AGXCompilerCore-S2A8"));
  v6 = CFBundleCopyResourceURL(BundleWithIdentifier, v4, CFSTR("ds"), 0);
  v7 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
  CFStringGetCString(v7, buffer, 1024, 0x600u);
  CFRelease(v4);
  CFRelease(v6);
  CFRelease(v7);
  v8 = MEMORY[0x24BEDB838];
  v9 = MEMORY[0x24BEDB838] + 64;
  v50[0] = MEMORY[0x24BEDB838] + 64;
  v10 = (_QWORD *)MEMORY[0x24BEDB7E0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  v48[0] = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  *(_QWORD *)((char *)v48 + *(_QWORD *)(v48[0] - 24)) = v11;
  v48[1] = 0;
  v12 = (std::ios_base *)((char *)v48 + *(_QWORD *)(v48[0] - 24));
  std::ios_base::init(v12, v49);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v48[0] = v8 + 24;
  v50[0] = v9;
  MEMORY[0x2207A781C](v49);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v48 + *(_QWORD *)(v48[0] - 24)), *(_DWORD *)&v49[*(_QWORD *)(v48[0] - 24) + 16] | 4);
  v13 = (char *)v48 + *(_QWORD *)(v48[0] - 24);
  if ((v13[32] & 5) != 0)
  {
    v14 = (_QWORD *)MEMORY[0x24BEDB310];
    v15 = sub_21DF28BA4(MEMORY[0x24BEDB310], (uint64_t)"readBitcode", 11);
    sub_21DF28BA4(v15, (uint64_t)"(): unable to open file: ", 25);
    v16 = strlen(buffer);
    sub_21DF28BA4(v14, (uint64_t)buffer, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v17 = std::locale::use_facet(v37, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(v37);
    std::ostream::put();
    std::ostream::flush();
    v18 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = (_QWORD *)*((_QWORD *)v13 + 5);
    while (v22 && (v22[3] != v22[4] || (*(unsigned int (**)(_QWORD *))(*v22 + 72))(v22) != -1))
    {
      v23 = (char *)v22[3];
      if (v23 == (char *)v22[4])
        v24 = (*(uint64_t (**)(_QWORD *))(*v22 + 72))(v22);
      else
        v24 = *v23;
      if (v20 >= v21)
      {
        v26 = (uint64_t)&v20[-v19 + 1];
        if (v26 < 0)
          abort();
        if (2 * (uint64_t)&v21[-v19] > (unint64_t)v26)
          v26 = 2 * (_QWORD)&v21[-v19];
        if ((unint64_t)&v21[-v19] >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)operator new(v27);
        else
          v28 = 0;
        v29 = &v20[(_QWORD)v28 - v19];
        *v29 = v24;
        v25 = v29 + 1;
        if (v20 != (char *)v19)
        {
          v30 = &v20[~v19];
          do
          {
            v31 = *--v20;
            (v30--)[(_QWORD)v28] = v31;
          }
          while (v20 != (char *)v19);
          v29 = v28;
        }
        v21 = &v28[v27];
        if (v19)
          operator delete((void *)v19);
        v19 = (unint64_t)v29;
      }
      else
      {
        *v20 = v24;
        v25 = v20 + 1;
      }
      v32 = v22[3];
      if (v32 == v22[4])
        (*(void (**)(_QWORD *))(*v22 + 80))(v22);
      else
        v22[3] = v32 + 1;
      v20 = v25;
    }
    *(_DWORD *)v19 = 186106078;
    *(_DWORD *)(v19 + 20) = -557825214;
    v40 = 0;
    *(_OWORD *)v38 = 0u;
    v39 = 0u;
    *(_OWORD *)&v37[0].__locale_ = 0u;
    *(_OWORD *)v41 = 0u;
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0;
    v46[0] = (char *)&v47;
    v46[1] = (char *)0x400000000;
    strlen(buffer);
    v33 = (llvm *)llvm::parseIR();
    v18 = v36;
    if (!v36)
    {
      v34 = (llvm::raw_ostream *)llvm::errs(v33);
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v37, "readBitcode", v34);
    }
    sub_21DF2D1F4(v46);
    if ((_QWORD)v44)
    {
      *((_QWORD *)&v44 + 1) = v44;
      operator delete((void *)v44);
    }
    v10 = (_QWORD *)MEMORY[0x24BEDB7E0];
    if (SHIBYTE(v43) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v41[0]);
    if (SBYTE7(v39) < 0)
      operator delete(v38[0]);
    operator delete((void *)v19);
  }
  v48[0] = *v10;
  *(_QWORD *)((char *)v48 + *(_QWORD *)(v48[0] - 24)) = v10[3];
  MEMORY[0x2207A7828](v49);
  std::istream::~istream();
  MEMORY[0x2207A790C](v50);
  return v18;
}

void sub_21DF2D1E8(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

char **sub_21DF2D1F4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_21DF2D264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm **v18;
  uint64_t v19;
  llvm **v20;
  uint64_t v21;
  llvm *v22;
  llvm **v23;
  llvm **v24;
  llvm *v25;
  llvm *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int isValid;
  uint64_t v32;
  void **v33;
  size_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  const char *v51;
  llvm::AGX::Diagnostic ***Diagnostics;
  llvm::AGX::Diagnostic **v53;
  llvm::AGX::Diagnostic **v54;
  llvm::AGX::Diagnostic *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t Message;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t Binary;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  int v85;
  void *v86[2];
  unsigned __int8 v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  _BYTE v91[24];
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  void *__p;
  char v103;
  char v104[8];
  void *v105[2];
  char v106;
  uint64_t v107;
  void *v108;
  llvm **v109;
  unsigned int v110;
  char v111;
  char v112;
  llvm **v113;
  unsigned int v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v10 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  sub_21DF1AF28(&__p, v10);
  llvm::AGX::CompileRequest::CompileRequest();
  if (v103 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 56))(a2, v104);
  if (sub_21DF2BF44((char **)&qword_2553B3D80))
  {
    v11 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (sub_21DF2D948(v11))
      llvm::AGX::CompileRequest::setLoggingStream();
  }
  switch(a5)
  {
    case 1:
      v12 = a1 + 80;
      v13 = a1;
      v14 = a1 + 80;
      v15 = 1;
LABEL_12:
      v16 = 1;
      goto LABEL_13;
    case 2:
      v12 = a1 + 104;
      v13 = a1;
      v14 = a1 + 104;
      v15 = 2;
      goto LABEL_12;
    case 3:
      v12 = a1 + 56;
      v13 = a1;
      v14 = a1 + 56;
      v15 = 3;
      v16 = 0;
LABEL_13:
      sub_21DF2E1D8(v13, v14, v15, v16, (std::string *)(a2 + 408));
      goto LABEL_15;
  }
  v12 = a1 + 104;
LABEL_15:
  if (*(_BYTE *)(v12 + 16))
  {
    v94 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 1;
    v96 = 0;
    v97 = 0;
    v95 = 0;
    v93 = MEMORY[0x24BED83D8] + 16;
    v101 = a1 + 280;
    sub_21DF2C310((llvm::raw_ostream *)&v93);
    v17 = operator new();
    LOBYTE(v105[0]) = 0;
    v116 = 0;
    llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer();
    v85 = a6;
    if (v116)
    {
      free(v105[0]);
      if (v110)
      {
        v18 = v109;
        v19 = 8 * v110;
        v20 = v109;
        do
        {
          v21 = ((unint64_t)((char *)v18 - (char *)v109) >> 10) & 0x1FFFFFF;
          if (v21 >= 0x1E)
            LOBYTE(v21) = 30;
          v22 = *v20++;
          llvm::deallocate_buffer(v22, (void *)(4096 << v21));
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      v23 = v113;
      if (v114)
      {
        v24 = &v113[2 * v114];
        do
        {
          v25 = *v23;
          v26 = v23[1];
          v23 += 2;
          llvm::deallocate_buffer(v25, v26);
        }
        while (v23 != v24);
        v23 = v113;
      }
      if (v23 != (llvm **)&v115)
        free(v23);
      if (v109 != (llvm **)&v112)
        free(v109);
    }
    v92 = v17;
    v91[0] = 0;
    v91[16] = 0;
    MEMORY[0x2207A72AC](v105, &v92, v91);
    v27 = v92;
    v92 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (a6)
    {
      v28 = (_QWORD *)operator new();
      *v28 = v105;
      v90 = v28;
      llvm::LLVMContext::setLLVMRemarkStreamer();
      v29 = v90;
      v90 = 0;
      if (v29)
        MEMORY[0x2207A7960](v29, 0x20C4093837F09);
    }
    v30 = mach_absolute_time();
    llvm::AGX::AGXCompilePlan::execute();
    v88 = 1;
    isValid = llvm::AGX::CompileReply::isValid((llvm::AGX::CompileReply *)&v89);
    v32 = mach_absolute_time() - v30;
    *(_QWORD *)(a2 + 392) = sub_21DF527F8(v32);
    sub_21DF1AF28(v86, "backend");
    if ((v87 & 0x80u) == 0)
      v33 = v86;
    else
      v33 = (void **)v86[0];
    if ((v87 & 0x80u) == 0)
      v34 = v87;
    else
      v34 = (size_t)v86[1];
    v35 = sub_21DF2DAB0(a2 + 800, v33, v34);
    *(_BYTE *)(a2 + 870) = 1;
    v36 = *(_DWORD *)(a2 + 832) - *(_DWORD *)(a2 + 848) + *(_DWORD *)(a2 + 840);
    sub_21DF2DB24((uint64_t *)(a2 + 800), 4, v35);
    sub_21DF2DB90((uint64_t *)(a2 + 800), 6, v32);
    v37 = sub_21DF2DC24(a2 + 800, v36);
    v38 = v37;
    v40 = *(char **)(a2 + 376);
    v39 = *(_QWORD *)(a2 + 384);
    if ((unint64_t)v40 >= v39)
    {
      v43 = *(char **)(a2 + 368);
      v44 = (v40 - v43) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
        abort();
      v46 = v39 - (_QWORD)v43;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 62)
          sub_21DF256A4();
        v48 = (char *)operator new(4 * v47);
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[4 * v44];
      *(_DWORD *)v49 = v38;
      v41 = v49 + 4;
      while (v40 != v43)
      {
        v50 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *((_DWORD *)v49 - 1) = v50;
        v49 -= 4;
      }
      *(_QWORD *)(a2 + 368) = v49;
      *(_QWORD *)(a2 + 376) = v41;
      *(_QWORD *)(a2 + 384) = &v48[4 * v47];
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(_DWORD *)v40 = v37;
      v41 = v40 + 4;
    }
    *(_QWORD *)(a2 + 376) = v41;
    if ((char)v87 < 0)
      operator delete(v86[0]);
    llvm::AGX::CompileReply::CompileReply();
    v51 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (sub_21DF2D948(v51))
    {
      Diagnostics = (llvm::AGX::Diagnostic ***)llvm::AGX::CompileReply::getDiagnostics((llvm::AGX::CompileReply *)v86);
      v53 = *Diagnostics;
      v54 = Diagnostics[1];
      if (*Diagnostics != v54)
      {
        while (1)
        {
          v55 = *v53;
          v56 = *((_DWORD *)*v53 + 2);
          if (v56 == 3)
          {
            v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
            sub_21DF28954(v57, "------ Start USC %s shader %u (compiler assembly) -------", v58, v59, v60, v61, v62, v63, v57);
            v55 = *v53;
            v56 = *((_DWORD *)*v53 + 2);
          }
          if (v56 != 5)
            goto LABEL_71;
          if (MGGetBoolAnswer())
          {
            v64 = (const char *)sub_21DF21324("AGC_ENABLE_STATUS_FILE_TIMING");
            if (v64)
            {
              if (*v64 != 48 && atoi(v64))
                break;
            }
          }
LABEL_75:
          if (*((_DWORD *)*v53 + 2) == 3)
          {
            v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
            sub_21DF28954(v73, "------ End USC %s shader %u (compiler assembly) -------", v74, v75, v76, v77, v78, v79, v73);
          }
          if (++v53 == v54)
            goto LABEL_78;
        }
        v55 = *v53;
LABEL_71:
        Message = llvm::AGX::Diagnostic::getMessage(v55);
        if (*(char *)(Message + 23) >= 0)
          LOBYTE(v72) = Message;
        else
          v72 = *(_QWORD *)Message;
        sub_21DF28954(Message, "Diag: %s \n", v66, v67, v68, v69, v70, v71, v72);
        goto LABEL_75;
      }
    }
LABEL_78:
    Binary = llvm::AGX::CompileReply::getBinary((llvm::AGX::CompileReply *)v86);
    v81 = *(unsigned __int8 *)(Binary + 23);
    if ((v81 & 0x80u) == 0)
      v82 = (_BYTE *)Binary;
    else
      v82 = *(_BYTE **)Binary;
    if ((v81 & 0x80u) != 0)
      v81 = *(_QWORD *)(Binary + 8);
    *(_QWORD *)(a1 + 136) = 0;
    sub_21DF2DA34((_QWORD *)(a1 + 128), v82, &v82[v81]);
    if (v85)
      llvm::LLVMContext::setLLVMRemarkStreamer();
    llvm::AGX::CompileReply::~CompileReply((llvm::AGX::CompileReply *)v86);
    llvm::AGX::CompileReply::~CompileReply((llvm::AGX::CompileReply *)&v89);
    v42 = isValid;
    if (v112)
    {
      if (v111 < 0)
        operator delete(v108);
      v112 = 0;
    }
    v83 = v107;
    v107 = 0;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    if (v106)
      llvm::Regex::~Regex((llvm::Regex *)v105);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v93);
  }
  else
  {
    v42 = 0;
  }
  llvm::AGX::CompileRequest::~CompileRequest((llvm::AGX::CompileRequest *)v104);
  return v42;
}

uint64_t sub_21DF2D948(const char *a1)
{
  uint64_t result;

  result = sub_21DF2BF44((char **)&qword_2553B3D80);
  if ((_DWORD)result)
  {
    if (!strcmp(a1, "compute")
      || !strcmp(a1, "vertex")
      || !strcmp(a1, "Vertex")
      || !strcmp(a1, "fragment")
      || !strcmp(a1, "compute-program")
      || !strcmp(a1, "tile")
      || !strcmp(a1, "post-tessellation-vertex-sw")
      || !strcmp(a1, "post-tessellation-vertex-hw"))
    {
      return 1;
    }
    else
    {
      result = MGGetBoolAnswer();
      if ((_DWORD)result)
        return (uint64_t)sub_21DF2E4C0();
    }
  }
  return result;
}

_QWORD *sub_21DF2DA34(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  if (result[2] < (unint64_t)(v7 + a3 - __src))
  {
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

uint64_t sub_21DF2DAB0(uint64_t a1, void *a2, size_t a3)
{
  sub_21DF2E13C(a1, a3 + 1, 4uLL);
  sub_21DF2DF9C((uint64_t *)a1, 1uLL);
  sub_21DF2E174((uint64_t *)a1, a2, a3);
  sub_21DF2E0DC(a1, a3);
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_21DF2DB24(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v5;

  if (a3)
  {
    v5 = result;
    sub_21DF2DF68((uint64_t)result, 4uLL);
    return sub_21DF2E08C(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4);
  }
  return result;
}

uint64_t *sub_21DF2DB90(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if (a3 || *((_BYTE *)result + 80))
  {
    sub_21DF2DF68((uint64_t)result, 8uLL);
    v6 = v5[6];
    if ((unint64_t)(v6 - v5[7]) <= 7)
    {
      sub_21DF2DE00(v5, 8uLL);
      v6 = v5[6];
    }
    *(_QWORD *)(v6 - 8) = a3;
    v7 = v6 - 8;
    v5[6] = v7;
    return sub_21DF2E00C(v5, a2, *((_DWORD *)v5 + 8) - (int)v7 + *((_DWORD *)v5 + 10));
  }
  return result;
}

uint64_t sub_21DF2DC24(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int *v20;

  sub_21DF2DF68(a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)(v4 - v5) <= 3)
  {
    sub_21DF2DE00((uint64_t *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
  }
  *(_DWORD *)(v4 - 4) = 0;
  v6 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a1 + 32) - v6 + *(_QWORD *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 68) + 2) <= 4u)
    v8 = 4;
  else
    v8 = (unsigned __int16)(*(_WORD *)(a1 + 68) + 2);
  *(_WORD *)(a1 + 68) = v8;
  if (v6 - v5 < v8)
  {
    sub_21DF2DE00((uint64_t *)a1, v8);
    v6 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v6 - v8;
  bzero((void *)(v6 - v8), v8);
  v9 = v7 - a2;
  v11 = *(unsigned __int16 **)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11[1] = v9;
  *v11 = *(_WORD *)(a1 + 68);
  v12 = *(unsigned int *)(a1 + 64);
  v13 = (char *)(v10 - 8 * v12);
  if ((_DWORD)v12)
  {
    v14 = (_WORD *)(v10 - 8 * v12);
    do
    {
      *(unsigned __int16 *)((char *)v11 + (unsigned __int16)v14[2]) = v7 - *v14;
      v14 += 4;
    }
    while ((unint64_t)v14 < v10);
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  LODWORD(v17) = v16 - (_DWORD)v11 + v15;
  if (*(_BYTE *)(a1 + 81) && v15 < (unint64_t)v13)
  {
    v18 = *v11;
    v19 = v15 + v16;
    v20 = *(unsigned int **)(a1 + 40);
    while (1)
    {
      v17 = *v20;
      if ((_DWORD)v18 == *(unsigned __int16 *)(v19 - v17) && !memcmp((const void *)(v19 - v17), v11, v18))
        break;
      if (++v20 >= (unsigned int *)v13)
      {
        LODWORD(v17) = v16 - (_DWORD)v11 + v15;
        goto LABEL_19;
      }
    }
    v11 = (unsigned __int16 *)((char *)v11 + (v16 - (_DWORD)v11 + v15 - v7));
    *(_QWORD *)(a1 + 48) = v11;
  }
LABEL_19:
  if ((_DWORD)v17 == (_DWORD)v16 + (_DWORD)v15 - (_DWORD)v11)
  {
    if ((unint64_t)((char *)v11 - v13) <= 3)
    {
      sub_21DF2DE00((uint64_t *)a1, 4uLL);
      v13 = *(char **)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 40);
    }
    *(_DWORD *)v13 = v17;
    *(_QWORD *)(a1 + 56) = v13 + 4;
  }
  *(_DWORD *)(v15 + v16 - v7) = v17 - v7;
  *(_BYTE *)(a1 + 70) = 0;
  return v7;
}

uint64_t sub_21DF2DE00(uint64_t *a1, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  char *v12;

  v4 = a1[4];
  v3 = (char *)a1[5];
  v5 = &v3[v4 - a1[6]];
  v6 = a1[7] - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = a1[2];
  if (v7 <= a2)
    v7 = a2;
  v8 = (a1[3] + v4 + v7 - 1) & -a1[3];
  a1[4] = v8;
  v9 = *a1;
  if (!v3)
  {
    if (v9)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_13:
    v11 = (char *)result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v11, v3, v6);
  result = MEMORY[0x2207A7948](v3, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[a1[4] - v5];
  a1[5] = (uint64_t)v11;
  a1[6] = (uint64_t)v12;
  a1[7] = (uint64_t)&v11[v6];
  return result;
}

uint64_t *sub_21DF2DF68(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 72) < a2)
    *(_QWORD *)(a1 + 72) = a2;
  return sub_21DF2DF9C((uint64_t *)a1, (a2 - 1) & -(uint64_t)(*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40)));
}

uint64_t *sub_21DF2DF9C(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[6];
  if (v4 - result[7] >= a2)
  {
    result[6] = v4 - a2;
    if (!a2)
      return result;
  }
  else
  {
    result = (uint64_t *)sub_21DF2DE00(result, a2);
    v3[6] -= a2;
  }
  v5 = 0;
  do
    *(_BYTE *)(v3[6] + v5++) = 0;
  while (a2 != v5);
  return result;
}

uint64_t *sub_21DF2E00C(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = result;
  v6 = (unint64_t *)result[7];
  if ((unint64_t)(result[6] - (_QWORD)v6) <= 7)
  {
    result = (uint64_t *)sub_21DF2DE00(result, 8uLL);
    v6 = (unint64_t *)v5[7];
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return result;
}

uint64_t *sub_21DF2E08C(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = result;
  if (a3 || *((_BYTE *)result + 80))
  {
    v5 = sub_21DF2E0DC((uint64_t)result, a3);
    return sub_21DF2E00C(v4, a2, v5);
  }
  return result;
}

uint64_t sub_21DF2E0DC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_21DF2DF68(a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    sub_21DF2DE00((uint64_t *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_21DF2E13C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a1 + 72) < a3)
    *(_QWORD *)(a1 + 72) = a3;
  return sub_21DF2DF9C((uint64_t *)a1, (a3 - 1) & (-a2 - (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40))));
}

uint64_t *sub_21DF2E174(uint64_t *result, void *__src, size_t __n)
{
  uint64_t *v5;
  uint64_t v6;

  if (__n)
  {
    v5 = result;
    v6 = result[6];
    if (v6 - result[7] < __n)
    {
      sub_21DF2DE00(result, __n);
      v6 = v5[6];
    }
    v5[6] = v6 - __n;
    return (uint64_t *)memcpy((void *)(v6 - __n), __src, __n);
  }
  return result;
}

uint64_t sub_21DF2E1D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, std::string *a5)
{
  llvm::AGX::AGXCompiler *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  void **v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];

  if (!*(_BYTE *)(a2 + 16))
  {
    v7 = (llvm::AGX::AGXCompiler *)(result + 48);
    llvm::AGX::AGXCompiler::createCompilePlan();
    v22 = 1;
    if ((llvm::AGX::AGXCompilePlan::isValid((llvm::AGX::AGXCompilePlan *)v23) & 1) != 0)
    {
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      if (*(_BYTE *)(a2 + 16))
      {
        MEMORY[0x2207A7060](a2);
        *(_BYTE *)(a2 + 16) = 0;
      }
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      *(_BYTE *)(a2 + 16) = 1;
      MEMORY[0x2207A7060](v16);
    }
    else
    {
      llvm::AGX::AGXCompiler::getLastDiagnostics(v7);
      sub_21DF2E3C8((uint64_t)v16);
      sub_21DF28BA4(v17, (uint64_t)"Create Plan failed:\n", 20);
      v8 = v20;
      v9 = v21;
      while (v8 != v9)
      {
        v8 += 8;
        v10 = (_QWORD *)llvm::AGX::operator<<();
        sub_21DF28BA4(v10, (uint64_t)"\n", 1);
      }
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v12 = v15;
      else
        v12 = (std::string::size_type)__p[1];
      std::string::append(a5, (const std::string::value_type *)v11, v12);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      v16[0] = *(void ***)MEMORY[0x24BEDB7F0];
      v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void ***)((char *)v16 + (unint64_t)*(v16[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
      v17[0] = v13;
      v17[1] = MEMORY[0x24BEDB848] + 16;
      if (v18 < 0)
        operator delete((void *)v17[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2207A790C](&v19);
      v16[0] = (void **)&v20;
      sub_21DF28B28(v16);
    }
    return MEMORY[0x2207A7060](v23);
  }
  return result;
}

uint64_t sub_21DF2E3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

const char *sub_21DF2E4C0()
{
  const char *result;

  result = (const char *)sub_21DF21324("AGC_STATUS_LOG_DRIVER_SHADERS");
  if (result)
  {
    if (*result == 48)
      return 0;
    else
      return (const char *)(atoi(result) != 0);
  }
  return result;
}

uint64_t sub_21DF2E500(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD, llvm::Type *))(**(_QWORD **)(a2 + 32) + 8))(*(_QWORD *)(a2 + 32), a3);
  sub_21DF78A10(a1, a3);
  *(_QWORD *)(a1 + 344) = v6;
  *(_QWORD *)a1 = &off_24E1E79B8;
  *(_QWORD *)(a1 + 352) = mach_absolute_time();
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a2;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = llvm::IntegerType::get();
  *(_QWORD *)(a1 + 592) = a1 + 608;
  *(_QWORD *)(a1 + 600) = 0x800000000;
  *(_QWORD *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 720) = xmmword_21DFA6160;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = 1;
  *(_WORD *)(a1 + 784) = 256;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_21DFA6160;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 1;
  *(_WORD *)(a1 + 880) = 256;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = xmmword_21DFA6160;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 968) = 1;
  *(_WORD *)(a1 + 976) = 256;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 592;
  return a1;
}

uint64_t sub_21DF2E650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = &off_24E1E79B8;
  v2 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(v2 + 136) = 0;
  if (*(char *)(v2 + 303) < 0)
  {
    **(_BYTE **)(v2 + 280) = 0;
    *(_QWORD *)(v2 + 288) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 280) = 0;
    *(_BYTE *)(v2 + 303) = 0;
  }
  MEMORY[0x2207A77BC](v2 + 8, &unk_21DFAD77A);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  if (*(_QWORD *)(a1 + 320))
  {
    v4 = MEMORY[0x2207A721C]();
    MEMORY[0x2207A7960](v4, 0x10B2C407FF26C1CLL);
  }
  sub_21DF2E778((_QWORD *)(a1 + 896));
  sub_21DF2E778((_QWORD *)(a1 + 800));
  sub_21DF2E778((_QWORD *)(a1 + 704));
  if (*(char *)(a1 + 695) < 0)
    operator delete(*(void **)(a1 + 672));
  v5 = *(void **)(a1 + 592);
  if (v5 != (void *)(a1 + 608))
    free(v5);
  v6 = *(void **)(a1 + 432);
  if (v6)
  {
    *(_QWORD *)(a1 + 440) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  v7 = *(void **)(a1 + 368);
  if (v7)
  {
    *(_QWORD *)(a1 + 376) = v7;
    operator delete(v7);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 128));
  v8 = *(void **)(a1 + 8);
  if (v8 != (void *)(a1 + 24))
    free(v8);
  return a1;
}

_QWORD *sub_21DF2E778(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[11];
  if (v2)
  {
    sub_21DF2E824(*(_QWORD **)(v2 + 8));
    MEMORY[0x2207A7960](v2, 0x1060C40C2B13FB5);
  }
  if (a1[5])
  {
    if (*a1)
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    else
      MEMORY[0x2207A7948](a1[5], 0x1000C8077774924);
  }
  a1[5] = 0;
  if (*((_BYTE *)a1 + 8) && *a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  *a1 = 0;
  *((_BYTE *)a1 + 8) = 0;
  return a1;
}

void sub_21DF2E824(_QWORD *a1)
{
  if (a1)
  {
    sub_21DF2E824(*a1);
    sub_21DF2E824(a1[1]);
    operator delete(a1);
  }
}

BOOL sub_21DF2E85C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  unsigned int *v29;
  std::string v30;

  v4 = *a2;
  v5 = 0;
  v6 = 0;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 0;
    v29 = a2 + 1;
    v9 = *(_QWORD *)(a1 + 432);
    v10 = *(_QWORD *)(a1 + 440);
    do
    {
      if (v10 == v9)
      {
        v10 = v9;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        do
        {
          v13 = (int *)((char *)&v29[v8] + v29[v8]);
          v14 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v14 >= 5u && (v15 = v14[2]) != 0)
            v16 = (char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15);
          else
            v16 = 0;
          sub_21DF1AF28(&v30, v16 + 4);
          if (!std::string::compare(&v30, *(const std::string::value_type **)(*(_QWORD *)(a1 + 432) + 16 * v11)))
          {
            v17 = (_DWORD *)(*(_QWORD *)(a1 + 432) + 16 * v11 + 8);
            if ((unint64_t)v6 >= v7)
            {
              v18 = (v6 - v5) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                abort();
              if ((uint64_t)(v7 - (_QWORD)v5) >> 1 > v19)
                v19 = (uint64_t)(v7 - (_QWORD)v5) >> 1;
              if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v19;
              if (v20)
                v20 = (unint64_t)sub_21DF2EACC(v20);
              else
                v21 = 0;
              v22 = (char *)(v20 + 4 * v18);
              *(_DWORD *)v22 = *v17;
              v23 = v22 + 4;
              while (v6 != v5)
              {
                v24 = *((_DWORD *)v6 - 1);
                v6 -= 4;
                *((_DWORD *)v22 - 1) = v24;
                v22 -= 4;
              }
              v7 = v20 + 4 * v21;
              if (v5)
                operator delete(v5);
              v5 = v22;
              v6 = v23;
            }
            else
            {
              *(_DWORD *)v6 = *v17;
              v6 += 4;
            }
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          v9 = *(_QWORD *)(a1 + 432);
          v10 = *(_QWORD *)(a1 + 440);
          v11 = ++v12;
        }
        while (v12 < (unint64_t)((v10 - v9) >> 4));
        v4 = *a2;
      }
      ++v8;
    }
    while (v8 < v4);
  }
  if (v6 == v5)
    v25 = (char *)&unk_2553B3E08;
  else
    v25 = v5;
  *a3 = sub_21DF2EA5C(a1 + 704, v25, (v6 - v5) >> 2);
  if (v5)
    operator delete(v5);
  return v6 != v5;
}

uint64_t sub_21DF2EA5C(uint64_t a1, void *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;

  v3 = a3;
  *(_BYTE *)(a1 + 70) = 1;
  v6 = 4 * a3;
  sub_21DF2E13C(a1, 4 * a3, 4uLL);
  sub_21DF2E13C(a1, v6, 4uLL);
  sub_21DF2E174((uint64_t *)a1, a2, v6);
  *(_BYTE *)(a1 + 70) = 0;
  return sub_21DF2E0DC(a1, v3);
}

void *sub_21DF2EACC(unint64_t a1)
{
  if (a1 >> 62)
    sub_21DF256A4();
  return operator new(4 * a1);
}

uint64_t *sub_21DF2EB00(uint64_t a1)
{
  uint64_t *v2;
  char *v3;
  size_t v4;
  int v5;
  int v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  _BOOL4 v14;
  int v16;

  v2 = (uint64_t *)(a1 + 704);
  v3 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v4 = strlen(v3);
  v5 = sub_21DF2DAB0((uint64_t)v2, v3, v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    v6 = sub_21DF2EC98((uint64_t)v2, *(void **)(*(_QWORD *)(a1 + 400) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 400) + 136));
  else
    v6 = 0;
  v16 = 0;
  v7 = *(int **)(a1 + 560);
  if (v7)
  {
    v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 5u && (v9 = v8[2]) != 0)
      v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
    else
      v10 = 0;
    v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0x39u && (v12 = v11[28]) != 0)
      v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    else
      v13 = 0;
    v14 = sub_21DF2E85C(a1, v13, &v16);
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(a1 + 774) = 1;
  sub_21DF2DB24(v2, 8, v5);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    sub_21DF2DB24(v2, 4, v6);
  if (v14)
    sub_21DF2DB24(v2, 14, v16);
  sub_21DF2E08C(v2, 16, *(_DWORD *)(a1 + 456));
  return v2;
}

uint64_t sub_21DF2EC98(uint64_t a1, void *a2, size_t a3)
{
  *(_BYTE *)(a1 + 70) = 1;
  sub_21DF2E13C(a1, a3, 4uLL);
  sub_21DF2E13C(a1, a3, 1uLL);
  sub_21DF2E174((uint64_t *)a1, a2, a3);
  *(_BYTE *)(a1 + 70) = 0;
  return sub_21DF2E0DC(a1, a3);
}

uint64_t sub_21DF2ED04(uint64_t a1, int a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  sub_21DF2E13C(a1, 4, *(_QWORD *)(a1 + 72));
  sub_21DF2DF68(a1, 4uLL);
  result = sub_21DF2E0DC(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - a2 + 4);
  *(_BYTE *)(a1 + 71) = 1;
  return result;
}

uint64_t sub_21DF2ED70(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != -216; i -= 24)
  {
    if (*(char *)(a1 + i + 215) < 0)
      operator delete(*(void **)(a1 + i + 192));
  }
  return a1;
}

BOOL sub_21DF2EDB4(uint64_t a1, int *a2)
{
  int v2;
  int *v3;
  int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v41;
  int v42;
  int v43;
  _DWORD *v44;
  int v45;
  char *v47;
  unsigned __int8 v48;
  const char *v49;
  size_t v50;

  v2 = *a2;
  if (*a2 == -17958193)
  {
    v3 = a2;
    v45 = a2[4];
    if (v45)
    {
      v5 = 0;
      v48 = 0;
      v41 = (char *)a2 + 1;
      v6 = a2 + 8;
      do
      {
        if (*v6 == 2)
        {
          v13 = v6[3];
          if (v13)
          {
            v14 = 0;
            v47 = &v41[v6[4]];
            v15 = (unsigned int *)((char *)v3 + v6[2]);
            v44 = v6;
            v42 = v5;
            v43 = v6[3];
            do
            {
              if ((~*((unsigned __int8 *)v15 + 4) & 0xE) == 0 && *((unsigned __int8 *)v15 + 5) == v48)
              {
                v16 = *((_QWORD *)v15 + 1);
                v17 = &v47[*v15];
                v19 = *(char **)(a1 + 440);
                v18 = *(_QWORD *)(a1 + 448);
                if ((unint64_t)v19 >= v18)
                {
                  v22 = *(char **)(a1 + 432);
                  v23 = (v19 - v22) >> 4;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60)
                    abort();
                  v25 = v18 - (_QWORD)v22;
                  if (v25 >> 3 > v24)
                    v24 = v25 >> 3;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
                    v26 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                  {
                    if (v26 >> 60)
                      sub_21DF256A4();
                    v27 = *((_QWORD *)v15 + 1);
                    v28 = (char *)operator new(16 * v26);
                    LODWORD(v16) = v27;
                  }
                  else
                  {
                    v28 = 0;
                  }
                  v29 = &v28[16 * v23];
                  *(_QWORD *)v29 = v17;
                  *((_DWORD *)v29 + 2) = v16;
                  v30 = v29;
                  if (v19 != v22)
                  {
                    do
                    {
                      *((_OWORD *)v30 - 1) = *((_OWORD *)v19 - 1);
                      v30 -= 16;
                      v19 -= 16;
                    }
                    while (v19 != v22);
                    v19 = *(char **)(a1 + 432);
                  }
                  v5 = v42;
                  v13 = v43;
                  v20 = v16;
                  v21 = v29 + 16;
                  *(_QWORD *)(a1 + 432) = v30;
                  *(_QWORD *)(a1 + 440) = v29 + 16;
                  *(_QWORD *)(a1 + 448) = &v28[16 * v26];
                  if (v19)
                    operator delete(v19);
                  v6 = v44;
                }
                else
                {
                  *(_QWORD *)v19 = v17;
                  v20 = v16;
                  *((_DWORD *)v19 + 2) = v16;
                  v21 = v19 + 16;
                }
                *(_QWORD *)(a1 + 440) = v21;
                v49 = v17;
                v50 = strlen(v17);
                if (v50 == 8 && *(_QWORD *)v17 == 0x6E69616D2E636761)
                  *(_DWORD *)(a1 + 456) = v20;
                v31 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
                if (sub_21DF2D948(v31))
                {
                  if (llvm::StringRef::find() == -1)
                  {
                    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                    if (v32 <= 3)
                      sub_21DF28954(v32, "Non-Inlined function %s", v33, v34, v35, v36, v37, v38, (char)v17);
                  }
                }
                v3 = a2;
              }
              v15 += 4;
              ++v14;
            }
            while (v14 != v13);
          }
        }
        else if (*v6 == 25)
        {
          v7 = v6[16];
          if (v7)
          {
            v8 = 0;
            v9 = v6 + 18;
            v10 = 1;
            while (1)
            {
              if (!strncmp((const char *)v9 + 16, "__TEXT", 0x10uLL))
              {
                *(_QWORD *)(a1 + 464) = (char *)v3 + v9[12];
                *(_QWORD *)(a1 + 512) = *((_QWORD *)v9 + 5);
                ++v8;
                v48 = v10;
              }
              else
              {
                if (!strncmp((const char *)v9 + 16, "__GPU_METADATA", 0x10uLL))
                {
                  v11 = (unsigned int *)((char *)v3 + v9[12]);
                  *(_QWORD *)(a1 + 472) = v11;
                  *(_QWORD *)(a1 + 520) = *((_QWORD *)v9 + 5);
                  *(_QWORD *)(a1 + 560) = (char *)v11 + *v11;
                }
                else if (!strncmp((const char *)v9 + 16, "__GPU_METADATA_2", 0x10uLL))
                {
                  *(_QWORD *)(a1 + 480) = (char *)v3 + v9[12];
                  *(_QWORD *)(a1 + 528) = *((_QWORD *)v9 + 5);
                }
                else if (!strncmp((const char *)v9 + 16, "__GPU_VIDMALIST", 0x10uLL))
                {
                  v12 = (unsigned int *)((char *)v3 + v9[12]);
                  *(_QWORD *)(a1 + 488) = v12;
                  *(_QWORD *)(a1 + 536) = *((_QWORD *)v9 + 5);
                  *(_QWORD *)(a1 + 568) = (char *)v12 + *v12;
                }
                else
                {
                  if (strncmp((const char *)v9 + 16, "__GPU_STATS", 0x10uLL))
                    goto LABEL_22;
                  if (!strncmp((const char *)v9, "__counters", 0x10uLL))
                  {
                    *(_QWORD *)(a1 + 496) = (char *)v3 + v9[12];
                    *(_QWORD *)(a1 + 544) = *((_QWORD *)v9 + 5);
                    ++v8;
                  }
                  if (strncmp((const char *)v9, "__telemetry", 0x10uLL))
                    goto LABEL_22;
                  *(_QWORD *)(a1 + 504) = (char *)v3 + v9[12];
                  *(_QWORD *)(a1 + 552) = *((_QWORD *)v9 + 5);
                }
                ++v8;
              }
LABEL_22:
              if (v10 < v7)
              {
                v9 += 20;
                ++v10;
                if (v8 < 6)
                  continue;
              }
              break;
            }
          }
        }
        v6 = (_DWORD *)((char *)v6 + v6[1]);
        ++v5;
      }
      while (v5 != v45);
    }
    v39 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if ((sub_21DF2D948(v39) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 344) + 352))(*(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 512), a1);
    LODWORD(v49) = 0;
    (*(void (**)(uint64_t, const char **))(*(_QWORD *)a1 + 88))(a1, &v49);
    v2 = -17958193;
  }
  return v2 == -17958193;
}

void sub_21DF2F24C(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  void **v54;
  void *__p[2];
  uint64_t v56;
  char __str[128];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (sub_21DF2D948(v4))
  {
    v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    snprintf(__str, 0x80uLL, "%s shader %u (%s)", v5, *(_DWORD *)(a1 + 696), a2);
    __p[0] = 0;
    __p[1] = 0;
    v56 = 0;
    v47 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 1;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v46 = MEMORY[0x24BED83D8] + 16;
    v54 = __p;
    sub_21DF2C310((llvm::raw_ostream *)&v46);
    v6 = llvm::Module::print();
    v13 = *(_QWORD *)(a1 + 320);
    v14 = v13 + 24;
    v15 = *(_QWORD *)(v13 + 32);
    if (v15 == v14)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        if (v15)
          v17 = v15 - 56;
        else
          v17 = 0;
        v18 = v17 + 72;
        for (i = *(_QWORD *)(v17 + 80); i != v18; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v20 = i - 24;
          else
            v20 = 0;
          v21 = v20 + 40;
          v22 = *(_QWORD *)(v20 + 48);
          if (v22 == v21)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            do
            {
              ++v23;
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22 != v21);
          }
          v16 += v23;
        }
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != v14);
    }
    sub_21DF28954(v6, "------ Start LLVM IR %s -------\n", v7, v8, v9, v10, v11, v12, (char)__str);
    if (v56 >= 0)
      v31 = __p;
    else
      LOBYTE(v31) = __p[0];
    sub_21DF28954(v24, "%s\n", v25, v26, v27, v28, v29, v30, (char)v31);
    sub_21DF28954(v32, "; %u instructions", v33, v34, v35, v36, v37, v38, v16);
    sub_21DF28954(v39, "------ End LLVM IR %s -------\n", v40, v41, v42, v43, v44, v45, (char)__str);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v46);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
  }
}

void sub_21DF2F440(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a2 + 18) & 0x3FF0) == 0x6A0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v13 = v15;
    v14 = 0x800000000;
    v3 = llvm::ValueAsMetadata::get();
    sub_21DF19CD0((uint64_t)&v13, v3);
    v4 = *(uint64_t **)(a1 + 592);
    v5 = *(unsigned int *)(a1 + 600);
    v6 = v14;
    if (v5 + (unint64_t)v14 > HIDWORD(v14))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v14;
    }
    if ((_DWORD)v5)
    {
      v7 = (char *)v13 + 8 * v6;
      v8 = 8 * v5;
      do
      {
        v9 = *v4++;
        *v7++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    LODWORD(v14) = v6 + v5;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (v13 != v15)
      free(v13);
  }
  else
  {
    llvm::Module::getOrInsertNamedMetadata();
    v10 = *(unsigned int *)(a1 + 600);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 592);
      v12 = 8 * v10;
      do
      {
        v11 += 8;
        llvm::NamedMDNode::addOperand();
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t sub_21DF2F5B8(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::Type ***v8;
  llvm::Type *v9;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int ScalarSizeInBits;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  __int128 v39;
  uint64_t v40;
  int v41;
  _BYTE v42[32];
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  v8 = (llvm::Type ***)a2;
  v9 = *a2;
  if (*a2 == a3)
    return (uint64_t)v8;
  if (!(_DWORD)a5)
  {
    if ((*((_DWORD *)v9 + 2) & 0xFE) == 0x12)
      v14 = *(unsigned __int8 *)(**((_QWORD **)v9 + 2) + 8);
    else
      v14 = *((_DWORD *)v9 + 2);
    if (v14 != 13)
    {
      sub_21DF28954(a1, "Warning (Undefined behavior): integer drawbuffer format, but shader is writing floating point", (uint64_t)a3, a4, a5, a6, a7, a8, v37);
      return llvm::UndefValue::get();
    }
    ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
    v23 = llvm::Type::getScalarSizeInBits(a3);
    if (ScalarSizeInBits <= v23)
    {
      v25 = a1 + 8;
      v43 = 257;
      if ((_DWORD)a4)
        v26 = 40;
      else
        v26 = 39;
      v24 = (uint64_t)v8;
    }
    else
    {
      v24 = sub_21DF7A400(a1, v8, v23, a4);
      v25 = a1 + 8;
      v43 = 257;
      v26 = 38;
    }
    return sub_21DF1A79C(v25, v26, v24, (uint64_t)a3, (uint64_t)v42);
  }
  if (v9 == *(llvm::Type **)(a1 + 280) || v9 == *(llvm::Type **)(a1 + 288))
  {
    v13 = llvm::UndefValue::get();
    v15 = 0;
    if (v9 == *(llvm::Type **)(a1 + 280))
      v16 = 8;
    else
      v16 = 16;
    do
    {
      v17 = *(_QWORD *)(a1 + 344);
      v44 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v46 = *(_DWORD *)(a1 + 104);
      v43 = 257;
      v18 = llvm::ConstantInt::get();
      v19 = sub_21DF79584(a1 + 8, (uint64_t)v8, v18, (uint64_t)v42);
      v20 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(v17, &v44, v19, v16, a4, 32);
      if (v45)
        llvm::MetadataTracking::untrack();
      v43 = 257;
      v21 = llvm::ConstantInt::get();
      v13 = sub_21DF7980C(a1 + 8, v13, v20, v21, (uint64_t)v42);
      ++v15;
    }
    while (v15 != 4);
  }
  else if (v9 == *(llvm::Type **)(a1 + 264))
  {
    v28 = *(_QWORD *)(a1 + 272);
    v43 = 257;
    v13 = sub_21DF2F978(a1 + 8, (uint64_t)a2, v28, (uint64_t)v42);
  }
  else
  {
    v13 = (uint64_t)a2;
  }
  if (*(llvm::Type **)(a1 + 280) == a3)
  {
    v29 = 8;
    goto LABEL_30;
  }
  if (*(llvm::Type **)(a1 + 288) == a3)
  {
    v29 = 16;
LABEL_30:
    v8 = (llvm::Type ***)llvm::UndefValue::get();
    for (i = 0; i != 4; ++i)
    {
      v31 = *(_QWORD *)(a1 + 344);
      v39 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v41 = *(_DWORD *)(a1 + 104);
      v43 = 257;
      v32 = llvm::ConstantInt::get();
      v33 = sub_21DF79584(a1 + 8, v13, v32, (uint64_t)v42);
      v34 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 80))(v31, &v39, v33, v29, a4, 1);
      if (v40)
        llvm::MetadataTracking::untrack();
      v43 = 257;
      v35 = llvm::ConstantInt::get();
      v8 = (llvm::Type ***)sub_21DF7980C(a1 + 8, (uint64_t)v8, v34, v35, (uint64_t)v42);
    }
    return (uint64_t)v8;
  }
  if (*(llvm::Type **)(a1 + 264) == a3)
  {
    v43 = 257;
    return sub_21DF20674(a1 + 8, v13, (uint64_t)a3, (uint64_t)v42);
  }
  return v13;
}

uint64_t sub_21DF2F978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 46, a2, a3, a4);
}

uint64_t sub_21DF2F9D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _BYTE v22[32];
  __int16 v23;

  v4 = a2;
  if (a4 == 2)
  {
    v12 = *(_QWORD *)(a1 + 192);
    v23 = 257;
    v13 = sub_21DF1A79C(a1 + 8, 49, a2, v12, (uint64_t)v22);
    v14 = *(_QWORD *)(a1 + 344);
    v16 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v18 = *(_DWORD *)(a1 + 104);
    v4 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14
                                                                                                  + 104))(v14, &v16, 6, *(_QWORD *)(a1 + 184), v13, 0, 0);
    if (v17)
      llvm::MetadataTracking::untrack();
  }
  else if (a4 == 1)
  {
    v7 = a1 + 8;
    v8 = *(_QWORD *)(a1 + 288);
    v23 = 257;
    v9 = sub_21DF1A79C(a1 + 8, 38, a2, v8, (uint64_t)v22);
    v10 = *(_QWORD *)(a1 + 344);
    v19 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v21 = *(_DWORD *)(a1 + 104);
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 96))(v10, &v19, 6, *(_QWORD *)(a1 + 184), v9, 0, 0);
    if (v20)
      llvm::MetadataTracking::untrack();
    v23 = 257;
    return sub_21DF1A79C(v7, 49, v11, a3, (uint64_t)v22);
  }
  return v4;
}

uint64_t sub_21DF2FB64()
{
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_21DF2FC20(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = 0;
  result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, &v2);
  if ((_DWORD)result)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v3 = llvm::MDString::get();
    llvm::ConstantInt::get();
    v4 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    return llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t sub_21DF2FCF4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  __int16 v21;
  uint64_t v30;
  int v31;

  *(_BYTE *)(a2 + 70) = 1;
  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 40);
  v7 = *(_QWORD *)a1 & 7;
  if (v7 >= 5)
    v8 = 4;
  else
    v8 = 0x503020004uLL >> (8 * v7);
  sub_21DF2FF00((uint64_t *)a2, 4, v8 & 7);
  v9 = (*(_QWORD *)a1 >> 3) & 7;
  if (v9 >= 5)
    v10 = 4;
  else
    v10 = 0x503020004uLL >> (8 * v9);
  sub_21DF2FF00((uint64_t *)a2, 6, v10 & 7);
  v11 = (*(_QWORD *)a1 >> 6) & 7;
  if (v11 >= 5)
    v12 = 4;
  else
    v12 = 0x503020004uLL >> (8 * v11);
  sub_21DF2FF00((uint64_t *)a2, 8, v12 & 7);
  v13 = (*(_QWORD *)a1 >> 9) & 3;
  if (v13 == 2)
    v14 = 2;
  else
    v14 = v13 == 1;
  sub_21DF2FF00((uint64_t *)a2, 10, v14);
  v15 = (*(_QWORD *)a1 >> 11) & 3;
  if (v15 == 2)
    v16 = 2;
  else
    v16 = v15 == 1;
  sub_21DF2FF00((uint64_t *)a2, 12, v16);
  v17 = (*(_QWORD *)a1 >> 13) & 3;
  if (v17 == 2)
    v18 = 2;
  else
    v18 = v17 == 1;
  sub_21DF2FF00((uint64_t *)a2, 14, v18);
  v19 = ((*(_QWORD *)a1 >> 16) & 0xFLL) - 1;
  if (v19 >= 8)
    v20 = 0;
  else
    v20 = 0x108070605040302uLL >> (8 * v19);
  v21 = v4 - v5 + v6;
  sub_21DF2FF00((uint64_t *)a2, 18, v20 & 0xF);
  _H0 = *(_WORD *)(a1 + 3);
  __asm { FCVT            S0, H0 }
  sub_21DF2FF50((uint64_t *)a2, 22, _S0);
  _H0 = *(_WORD *)(a1 + 5);
  __asm { FCVT            S0, H0 }
  sub_21DF2FF50((uint64_t *)a2, 24, _S0);
  v30 = *(_BYTE *)(a1 + 7) & 3;
  if (v30 == 2)
    v31 = 2;
  else
    v31 = v30 == 1;
  sub_21DF2FF00((uint64_t *)a2, 26, v31);
  sub_21DF2FF00((uint64_t *)a2, 16, (*(_QWORD *)a1 & 0x8000) == 0);
  sub_21DF2FF00((uint64_t *)a2, 20, ((*(_DWORD *)a1 >> 20) & 0xF) + 1);
  return sub_21DF2DC24(a2, v21);
}

uint64_t *sub_21DF2FF00(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = result;
  if (a3 || *((_BYTE *)result + 80))
  {
    v5 = sub_21DF2FFE8((uint64_t)result, a3);
    return sub_21DF2E00C(v4, a2, v5);
  }
  return result;
}

uint64_t *sub_21DF2FF50(uint64_t *result, uint64_t a2, float a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if (a3 != 0.0 || *((_BYTE *)result + 80))
  {
    sub_21DF2DF68((uint64_t)result, 4uLL);
    v6 = v5[6];
    if ((unint64_t)(v6 - v5[7]) <= 3)
    {
      sub_21DF2DE00(v5, 4uLL);
      v6 = v5[6];
    }
    *(float *)(v6 - 4) = a3;
    v7 = v6 - 4;
    v5[6] = v7;
    return sub_21DF2E00C(v5, a2, *((_DWORD *)v5 + 8) - (int)v7 + *((_DWORD *)v5 + 10));
  }
  return result;
}

uint64_t sub_21DF2FFE8(uint64_t a1, char a2)
{
  uint64_t v4;

  sub_21DF2DF68(a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    sub_21DF2DE00((uint64_t *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t sub_21DF3004C(uint64_t a1, llvm::Type *a2)
{
  uint64_t v4;
  _QWORD *v5;
  llvm::DataLayout *v6;
  BOOL v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::Type *v11;
  unsigned __int8 v12;

  v4 = operator new();
  v5 = (_QWORD *)sub_21DF78A10(v4, a2);
  *v5 = &off_24E1E7E98;
  v5[43] = 0x400000008;
  v6 = (llvm::DataLayout *)(v5 + 44);
  if (*(_QWORD *)(a1 + 16))
    strlen(*(const char **)(a1 + 16));
  *(_WORD *)(v4 + 360) = 0;
  *(_WORD *)(v4 + 372) = 0;
  *(_QWORD *)(v4 + 384) = v4 + 408;
  *(_OWORD *)(v4 + 392) = xmmword_21DFA6170;
  *(_QWORD *)(v4 + 416) = v4 + 432;
  *(_QWORD *)(v4 + 424) = 0x1000000000;
  *(_QWORD *)(v4 + 560) = 0;
  *(_QWORD *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 568) = 0;
  *(_QWORD *)(v4 + 584) = v4 + 600;
  *(_QWORD *)(v4 + 592) = 0x800000000;
  *(_QWORD *)(v4 + 728) = 0;
  *(_QWORD *)(v4 + 736) = v4 + 752;
  *(_QWORD *)(v4 + 744) = 0x800000000;
  llvm::DataLayout::reset();
  *(_QWORD *)(v4 + 784) = a1;
  *(_QWORD *)(v4 + 792) = 0;
  *(_QWORD *)(v4 + 840) = -1;
  *(_QWORD *)(v4 + 1692) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 1616) = "driver_parameters";
  *(_DWORD *)(v4 + 1624) = 3;
  *(_DWORD *)(v4 + 1653) = 0x10000;
  v7 = 1;
  *(_BYTE *)(v4 + 1657) = 1;
  *(_BYTE *)(v4 + 1637) = 1;
  *(_BYTE *)(v4 + 1641) = 0;
  *(_QWORD *)(v4 + 1520) = 0;
  *(_BYTE *)(v4 + 1677) = 1;
  *(_DWORD *)(v4 + 1680) = 0x38u / *(_DWORD *)(v4 + 348);
  if (MGGetBoolAnswer())
  {
    v8 = (const char *)sub_21DF21324("AGC_SKIP_TEXTURE_OOB_CHECKS");
    if (v8)
    {
      if (*v8 != 48)
        v7 = atoi(v8) == 0;
    }
  }
  *(_BYTE *)(v4 + 1689) = v7;
  *(_QWORD *)v4 = &off_24E1E7438;
  *(_QWORD *)(v4 + 1720) = 0;
  *(_OWORD *)(v4 + 1752) = 0u;
  *(_OWORD *)(v4 + 1768) = 0u;
  *(_OWORD *)(v4 + 1784) = 0u;
  *(_OWORD *)(v4 + 1800) = 0u;
  *(_OWORD *)(v4 + 1816) = 0u;
  *(_OWORD *)(v4 + 1832) = 0u;
  *(_OWORD *)(v4 + 1848) = 0u;
  *(_OWORD *)(v4 + 1864) = 0u;
  *(_OWORD *)(v4 + 1880) = 0u;
  *(_OWORD *)(v4 + 1896) = 0u;
  *(_OWORD *)(v4 + 1912) = 0u;
  *(_OWORD *)(v4 + 1928) = 0u;
  *(_OWORD *)(v4 + 1944) = 0u;
  *(_OWORD *)(v4 + 1960) = 0u;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24E1E76D8;
  v10 = *(_QWORD *)(v4 + 792);
  *(_QWORD *)(v4 + 792) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)(v4 + 828) = 0x2000000004;
  v11 = *(llvm::Type **)(v4 + 296);
  *(_QWORD *)(v4 + 1576) = v11;
  *(_QWORD *)(v4 + 1584) = v11;
  *(_QWORD *)(v4 + 1600) = 0x1000000010;
  sub_21DF1B2C4(v6, v11);
  *(_DWORD *)(v4 + 1608) = (llvm::TypeSize::operator unsigned long long()
                          / (unint64_t)*(unsigned int *)(v4 + 344)
                          + *(_DWORD *)(v4 + 1600) / *(_DWORD *)(v4 + 344)
                          - 1) & -(*(_DWORD *)(v4 + 1600) / *(_DWORD *)(v4 + 344));
  sub_21DF1B2C4(v6, *(llvm::Type **)(v4 + 1584));
  *(_DWORD *)(v4 + 1612) = (llvm::TypeSize::operator unsigned long long()
                          / (unint64_t)*(unsigned int *)(v4 + 344)
                          + *(_DWORD *)(v4 + 1604) / *(_DWORD *)(v4 + 344)
                          - 1) & -(*(_DWORD *)(v4 + 1604) / *(_DWORD *)(v4 + 344));
  *(_DWORD *)(v4 + 1628) = 8;
  *(_DWORD *)(v4 + 836) = 64;
  *(_WORD *)(v4 + 1644) = 1;
  *(_DWORD *)(v4 + 1646) = 16843009;
  *(_WORD *)(v4 + 1650) = 0;
  *(_BYTE *)(v4 + 1652) = 0;
  *(_BYTE *)(v4 + 1690) = 0;
  *(_DWORD *)(v4 + 1658) = 0;
  *(_DWORD *)(v4 + 1664) = 0;
  *(_BYTE *)(v4 + 1668) = 0;
  *(_WORD *)(v4 + 1662) = 1;
  *(_QWORD *)(v4 + 1669) = 0;
  *(_BYTE *)(v4 + 1678) = 1;
  *(_DWORD *)(v4 + 1684) = 256;
  *(_BYTE *)(v4 + 1688) = 0;
  *(_QWORD *)v4 = off_24E1E7BF8;
  *(_DWORD *)(v4 + 1632) = 0x1000000;
  *(_BYTE *)(v4 + 2064) = *(_DWORD *)(v4 + 1692) == 131075;
  *(_DWORD *)(v4 + 1636) = 0x1000000;
  *(_WORD *)(v4 + 1640) = 256;
  *(_DWORD *)(v4 + 800) = 16;
  v12 = atomic_load((unsigned __int8 *)&qword_2553B3148);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3148))
  {
    dword_2553B3140 = 16 * (*(_BYTE *)(v4 + 1637) == 0);
    __cxa_guard_release(&qword_2553B3148);
  }
  *(_DWORD *)(v4 + 804) = 1152;
  *(_DWORD *)(v4 + 808) = (5376 - dword_2553B3140) / 0xEu;
  *(_DWORD *)(v4 + 812) = 3072;
  *(_QWORD *)(v4 + 816) = 0x400000004000;
  *(_DWORD *)(v4 + 824) = 512;
  *(_QWORD *)(v4 + 840) = 0x80000000F8;
  *(_BYTE *)(v4 + 1689) = 0;
  *(_QWORD *)(v4 + 872) = "llvm.agx1.cl.barrier";
  *(_QWORD *)(v4 + 888) = "llvm.agx1.simd.barrier";
  *(_QWORD *)(v4 + 880) = "llvm.agx1.cl.global.barrier";
  *(_QWORD *)(v4 + 896) = "llvm.agx1.memfence";
  *(_OWORD *)(v4 + 904) = 0u;
  *(_OWORD *)(v4 + 920) = 0u;
  *(_QWORD *)(v4 + 936) = "llvm.agx1.imadh.g4.i16";
  *(_QWORD *)(v4 + 944) = 0;
  *(_QWORD *)(v4 + 952) = "llvm.agx1.sadd.sat.i16";
  *(_QWORD *)(v4 + 960) = "llvm.agx1.sadd.sat.i32";
  *(_QWORD *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 976) = "llvm.agx1.uadd.sat.i16";
  *(_QWORD *)(v4 + 984) = "llvm.agx1.uadd.sat.i32";
  *(_QWORD *)(v4 + 992) = 0;
  *(_QWORD *)(v4 + 1000) = "llvm.agx1.ssub.sat.i16";
  *(_QWORD *)(v4 + 1008) = "llvm.agx1.ssub.sat.i32";
  *(_QWORD *)(v4 + 1016) = 0;
  *(_QWORD *)(v4 + 1024) = "llvm.agx1.usub.sat.i16";
  *(_QWORD *)(v4 + 1032) = "llvm.agx1.usub.sat.i32";
  *(_QWORD *)(v4 + 1040) = 0;
  *(_QWORD *)(v4 + 1048) = "llvm.agx1.smad.sat.i16";
  *(_OWORD *)(v4 + 1056) = 0u;
  *(_QWORD *)(v4 + 1072) = "llvm.agx1.umad.sat.i16";
  *(_QWORD *)(v4 + 1080) = 0;
  *(_QWORD *)(v4 + 1096) = "llvm.agx1.clamp";
  *(_QWORD *)(v4 + 1104) = "llvm.agx1.fusedClampFlushNaN";
  *(_QWORD *)(v4 + 1704) = "llvm.agx1.flushNaN";
  *(_QWORD *)(v4 + 1112) = "llvm.agx1.atanc.f32";
  *(_QWORD *)(v4 + 1120) = "llvm.agx1.atanc.f16";
  *(_QWORD *)(v4 + 1128) = "llvm.agx1.sin.g4.f32";
  *(_QWORD *)(v4 + 1136) = "llvm.agx1.sin.g4.f16";
  *(_BYTE *)(v4 + 1712) = 0;
  *(_QWORD *)(v4 + 1912) = "llvm.agx1.fitr.1xf";
  *(_QWORD *)(v4 + 1920) = "llvm.agx1.fitr.2xf";
  *(_QWORD *)(v4 + 1928) = "llvm.agx1.fitr.3xf";
  *(_QWORD *)(v4 + 1936) = "llvm.agx1.fitr.4xf";
  *(_QWORD *)(v4 + 1944) = "llvm.agx1.fitrp.1xf";
  *(_QWORD *)(v4 + 1952) = "llvm.agx1.fitrp.2xf";
  *(_QWORD *)(v4 + 1960) = "llvm.agx1.fitrp.3xf";
  *(_QWORD *)(v4 + 1968) = "llvm.agx1.fitrp.4xf";
  *(_QWORD *)(v4 + 1728) = "llvm.agx.smp";
  *(_QWORD *)(v4 + 1736) = "llvm.agx.smp";
  *(_QWORD *)(v4 + 1744) = "llvm.agx.smpw";
  *(_QWORD *)(v4 + 1752) = "llvm.agx1.texture1d";
  *(_QWORD *)(v4 + 1760) = "llvm.agx1.texture1d.grad";
  *(_QWORD *)(v4 + 1768) = "llvm.agx1.texture2d";
  *(_QWORD *)(v4 + 1776) = "llvm.agx1.texture2d.grad";
  *(_QWORD *)(v4 + 1784) = "llvm.agx1.texture2d.both.bi.x";
  *(_QWORD *)(v4 + 1792) = "llvm.agx1.texture2d.grad.both.bi.x";
  *(_QWORD *)(v4 + 1800) = "llvm.agx1.texture2d.both.tri.x";
  *(_QWORD *)(v4 + 1808) = "llvm.agx1.texture2d.grad.both.tri.x";
  *(_QWORD *)(v4 + 1816) = "llvm.agx1.textureCube";
  *(_QWORD *)(v4 + 1824) = "llvm.agx1.textureCube.grad";
  *(_QWORD *)(v4 + 1832) = "llvm.agx1.textureCube.both.bi.x";
  *(_QWORD *)(v4 + 1840) = "llvm.agx1.textureCube.grad.both.bi.x";
  *(_QWORD *)(v4 + 1848) = "llvm.agx1.textureCube.both.tri.x";
  *(_QWORD *)(v4 + 1856) = "llvm.agx1.textureCube.grad.both.tri.x";
  *(_QWORD *)(v4 + 1864) = "llvm.agx1.texture3d";
  *(_QWORD *)(v4 + 1872) = "llvm.agx1.texture3d.grad";
  *(_QWORD *)(v4 + 1880) = "llvm.agx1.texture1d.write";
  *(_QWORD *)(v4 + 1888) = "llvm.agx1.texture2d.write";
  *(_QWORD *)(v4 + 1896) = "llvm.agx1.textureCube.write";
  *(_QWORD *)(v4 + 1904) = "llvm.agx1.texture3d.write";
  *(_QWORD *)(v4 + 1144) = "llvm.agx1.pack.prog.i32.f32";
  *(_QWORD *)(v4 + 1152) = "llvm.agx1.pack.prog.i32.f32";
  *(_QWORD *)(v4 + 1160) = "llvm.agx1.pack.rne.s32";
  *(_QWORD *)(v4 + 1168) = "llvm.agx1.pack.rne.u32";
  *(_QWORD *)(v4 + 1176) = "llvm.agx1.unpack.scale.s1616";
  *(_QWORD *)(v4 + 1184) = "llvm.agx1.unpack.scale.s8888";
  *(_QWORD *)(v4 + 1192) = "llvm.agx1.unpack.scale.u1616";
  *(_QWORD *)(v4 + 1200) = "llvm.agx1.unpack.scale.u8888";
  *(_QWORD *)(v4 + 1224) = "llvm.agx1.vertex.write";
  *(_QWORD *)(v4 + 1232) = "llvm.agx1.vertex.writef";
  *(_QWORD *)(v4 + 1240) = "llvm.agx1.vertex.writef";
  *(_QWORD *)(v4 + 1248) = "llvm.agx1.vertex.writef";
  *(_QWORD *)(v4 + 1256) = "llvm.agx1.vertex.writef";
  *(_QWORD *)(v4 + 1280) = 0;
  *(_OWORD *)(v4 + 1264) = 0u;
  if (LLVMAGXRuntimeMinorVersion() >= 6)
  {
    *(_QWORD *)(v4 + 1224) = "llvm.agx1.vertex.varying.write.i32";
    *(_QWORD *)(v4 + 1232) = "llvm.agx1.vertex.varying.write.f32";
    *(_QWORD *)(v4 + 1240) = "llvm.agx1.vertex.pos.write";
    *(_QWORD *)(v4 + 1248) = "llvm.agx1.vertex.ptsize.write";
    *(_QWORD *)(v4 + 1256) = "llvm.agx1.vertex.clip.write";
  }
  *(_QWORD *)(v4 + 1360) = 0;
  *(_QWORD *)(v4 + 1336) = 0;
  *(_OWORD *)(v4 + 1288) = 0u;
  *(_OWORD *)(v4 + 1304) = 0u;
  *(_OWORD *)(v4 + 1320) = 0u;
  *(_QWORD *)(v4 + 1368) = "llvm.agx1.pixel.depthf";
  *(_QWORD *)(v4 + 1376) = "llvm.agx1.pixel.movmsk";
  *(_QWORD *)(v4 + 1384) = "llvm.agx1.pixel.readOutputRegister";
  *(_QWORD *)(v4 + 1392) = "llvm.agx1.pixel.readOutputRegisterWithPartitionSize";
  *(_QWORD *)(v4 + 1400) = "llvm.agx1.pixel.writeOutputRegister";
  *(_QWORD *)(v4 + 1408) = "llvm.agx1.pixel.writeOutputRegisterWithPartitionSize";
  *(_QWORD *)(v4 + 1416) = "llvm.agx1.pixel.dfdx.f32";
  *(_QWORD *)(v4 + 1424) = "llvm.agx1.pixel.dfdy.f32";
  *(_QWORD *)(v4 + 1432) = "llvm.agx1.pixel.dfdx.f16";
  *(_QWORD *)(v4 + 1440) = "llvm.agx1.pixel.dfdy.f16";
  *(_QWORD *)(v4 + 1448) = "llvm.agx1.is.back.facing";
  *(_QWORD *)(v4 + 1456) = "llvm.agx1.read.coord.x.pixel";
  *(_QWORD *)(v4 + 1464) = "llvm.agx1.read.coord.y.pixel";
  *(_QWORD *)(v4 + 1472) = "llvm.agx1.read.sample.number";
  *(_OWORD *)(v4 + 1480) = 0u;
  *(_QWORD *)(v4 + 1504) = "llvm.agx1.savmsk.pixel";
  *(_QWORD *)(v4 + 1512) = "llvm.agx1.exit.if.zero";
  *(_QWORD *)(v4 + 1528) = "llvm.agx1.read.cluster.number";
  *(_QWORD *)(v4 + 1088) = "llvm.agx1.rev";
  *(_QWORD *)(v4 + 1720) = "llvm.agx1.emitpix";
  *(_DWORD *)(v4 + 1536) = 4;
  *(_QWORD *)(v4 + 1544) = "llvm.agx1.wop";
  *(_QWORD *)(v4 + 1552) = "llvm.agx1.read.shared.reg.alloc.size";
  *(_QWORD *)(v4 + 1560) = "llvm.agx1.idf";
  *(_QWORD *)(v4 + 1568) = "llvm.agx1.cppix";
  *(_QWORD *)(v4 + 1984) = "llvm.agx1.pack.scale.rne.s8";
  *(_QWORD *)(v4 + 1992) = "llvm.agx1.pack.scale.rne.u8";
  *(_QWORD *)(v4 + 2000) = "llvm.agx1.pack.scale.rne.s16";
  *(_QWORD *)(v4 + 2008) = "llvm.agx1.pack.scale.rne.u16";
  *(_QWORD *)(v4 + 2016) = "llvm.agx1.pack.prog.i16.f32";
  *(_QWORD *)(v4 + 2024) = "llvm.agx1.gcmp.f32";
  *(_QWORD *)(v4 + 2032) = "llvm.agx1.gcmp.f16";
  *(_QWORD *)(v4 + 2040) = "llvm.agx1.gexp.f32";
  *(_QWORD *)(v4 + 2048) = "llvm.agx1.gexp.f16";
  *(_QWORD *)(v4 + 2056) = "llvm.agx1.cmsk";
  *(_BYTE *)(v4 + 1642) = 1;
  *(_BYTE *)(v4 + 1656) = 1;
  *(_BYTE *)(v4 + 1643) = *(_DWORD *)(v4 + 1696) == 2;
  *(_BYTE *)(v4 + 1976) = 1;
  return v4;
}

_QWORD *sub_21DF30974(_QWORD *a1)
{
  *a1 = &off_24E1E7850;
  sub_21DF21284(a1 + 6, 0);
  return a1;
}

void sub_21DF309A8(_QWORD *a1)
{
  *a1 = &off_24E1E7850;
  sub_21DF21284(a1 + 6, 0);
  JUMPOUT(0x2207A7960);
}

void sub_21DF309F0(_QWORD *a1)
{
  sub_21DF32000(a1);
  JUMPOUT(0x2207A7960);
}

llvm::Value *sub_21DF30A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t Select;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantInt::get();
  llvm::ConstantInt::get();
  v10 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v4 = *(_QWORD *)(a1 + 1376);
  if (v4)
    v5 = strlen(*(const char **)(a1 + 1376));
  else
    v5 = 0;
  v6 = sub_21DF203DC(a1, v4, v5, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 184));
  v10 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)&Select, 1, (uint64_t)v9);
}

llvm::Value *sub_21DF30B94(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v21 = sub_21DF78BE0(a1, a3, 1);
  if (a4 > 1)
  {
    v9 = *(_QWORD *)(a1 + 1992);
    if (v9)
      v10 = strlen(*(const char **)(a1 + 1992));
    else
      v10 = 0;
    v11 = sub_21DF203DC(a1, v9, v10, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 160));
    v17 = 257;
    v12 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v11 + 24), v11, (uint64_t)&v21, 1, (uint64_t)v16);
    v13 = *(_QWORD *)(a1 + 2056);
    if (v13)
      v14 = strlen(*(const char **)(a1 + 2056));
    else
      v14 = 0;
    v15 = sub_21DF1B0B0(a1, v13, v14, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 184));
    v22[0] = llvm::ConstantInt::get();
    v22[1] = v12;
    v17 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)v22, 2, (uint64_t)v16);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t sub_21DF30DBC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  const char **v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE v34[32];
  __int16 v35;
  _BYTE v36[32];
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v38 = *(_OWORD *)a2;
  v39 = *(_QWORD *)(a2 + 16);
  if (v39)
    llvm::MetadataTracking::track();
  v40 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v38);
  if (v39)
    llvm::MetadataTracking::untrack();
  v10 = sub_21DF78BE0(a1, a3, 1);
  v41 = v10;
  if (a4 == 16)
  {
    v11 = a5 == 0;
    v12 = 2008;
    v13 = 2000;
  }
  else
  {
    if (a4 != 8)
    {
      v15 = 0;
      goto LABEL_14;
    }
    v11 = a5 == 0;
    v12 = 1992;
    v13 = 1984;
  }
  if (!v11)
    v12 = v13;
  v14 = (const char **)(a1 + v12);
  v15 = *v14;
  if (*v14)
  {
    v16 = strlen(*v14);
    goto LABEL_15;
  }
LABEL_14:
  v16 = 0;
LABEL_15:
  v17 = sub_21DF203DC(a1, (uint64_t)v15, v16, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 160));
  v18 = v17;
  v19 = 184;
  if (a4 == 8)
    v19 = 176;
  v20 = *(_QWORD *)(a1 + v19);
  if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12
    && (v21 = *(unsigned int *)(*(_QWORD *)v10 + 32), (_DWORD)v21 != 1))
  {
    llvm::FixedVectorType::get();
    v27 = llvm::UndefValue::get();
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v37 = 257;
        v29 = llvm::ConstantInt::get();
        v33 = sub_21DF79584(a1 + 8, v10, v29, (uint64_t)v36);
        v35 = 257;
        v30 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v18 + 24), v18, (uint64_t)&v33, 1, (uint64_t)v34);
        v37 = 257;
        v31 = llvm::ConstantInt::get();
        v27 = sub_21DF7980C(a1 + 8, v27, (uint64_t)v30, v31, (uint64_t)v36);
      }
    }
    v26 = llvm::FixedVectorType::get();
    v37 = 257;
    v24 = v36;
    v25 = a1 + 8;
    v23 = (llvm::Value *)v27;
  }
  else
  {
    v22 = a1 + 8;
    v37 = 257;
    v23 = sub_21DF191A4(v22, *(_QWORD *)(v17 + 24), v17, (uint64_t)&v41, 1, (uint64_t)v36);
    v35 = 257;
    v24 = v34;
    v25 = v22;
    v26 = v20;
  }
  return sub_21DF1ABB0(v25, (uint64_t)v23, v26, 0, (uint64_t)v24);
}

uint64_t sub_21DF31034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 2016);
  if (v6)
    v7 = strlen(*(const char **)(a1 + 2016));
  else
    v7 = 0;
  v8 = sub_21DF1B0B0(a1, v6, v7, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 184));
  v18[0] = a3;
  v18[1] = llvm::ConstantInt::get();
  v14 = 257;
  v9 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
  v10 = *(_QWORD *)(a1 + 152);
  v14 = 257;
  v11 = (uint64_t *)sub_21DF1A79C(a1 + 8, 49, (uint64_t)v9, v10, (uint64_t)v13);
  return sub_21DF78BE0(a1, v11, 1);
}

uint64_t sub_21DF31184(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  _WORD v22[20];
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v28 = a3;
  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v9 = *a3;
  v10 = 2032;
  if (v9 == *(_QWORD *)(a1 + 160))
    v10 = 2024;
  v11 = *(_QWORD *)(a1 + v10);
  if (v11)
    v12 = strlen(*(const char **)(a1 + v10));
  else
    v12 = 0;
  v13 = sub_21DF203DC(a1, v11, v12, v9, v9);
  v24 = 257;
  v14 = (uint64_t *)sub_21DF191A4(a1 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)&v28, 1, (uint64_t)v23);
  if (*(unsigned __int8 *)(a5 + 8) >= 7u)
  {
    v16 = *(_QWORD *)(a1 + 2016);
    if (v16)
      v17 = strlen(*(const char **)(a1 + 2016));
    else
      v17 = 0;
    v18 = sub_21DF1B0B0(a1, v16, v17, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 184));
    v29[0] = sub_21DF78BE0(a1, v14, 1);
    v29[1] = llvm::ConstantInt::get();
    v24 = 257;
    v19 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v18 + 24), v18, (uint64_t)v29, 2, (uint64_t)v23);
    v20 = *(_QWORD *)(a1 + 176);
    v22[16] = 257;
    v21 = sub_21DF1ABB0(a1 + 8, (uint64_t)v19, v20, 0, (uint64_t)v22);
    v24 = 257;
    return sub_21DF1ABB0(a1 + 8, v21, a5, 0, (uint64_t)v23);
  }
  else if (*(_QWORD *)(a1 + 160) == a5)
  {
    v24 = 257;
    return sub_21DF2F978(a1 + 8, (uint64_t)v14, a5, (uint64_t)v23);
  }
  else
  {
    v24 = 257;
    return sub_21DF20674(a1 + 8, (uint64_t)v14, a5, (uint64_t)v23);
  }
}

llvm::Value *sub_21DF313C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v9 = *(_QWORD *)(a1 + 1200);
  if (v9)
    v10 = strlen(*(const char **)(a1 + 1200));
  else
    v10 = 0;
  v11 = sub_21DF1B0B0(a1, v9, v10, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 192));
  v12 = llvm::UndefValue::get();
  v13 = *(_QWORD *)(a1 + 176);
  v24 = 257;
  v14 = sub_21DF1ABB0(a1 + 8, a3, v13, 0, (uint64_t)v23);
  v29 = 257;
  v15 = llvm::ConstantInt::get();
  v28[0] = sub_21DF7980C(a1 + 8, v12, v14, v15, (uint64_t)v28);
  v28[1] = llvm::ConstantInt::get();
  v24 = 257;
  v16 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v11 + 24), v11, (uint64_t)v28, 2, (uint64_t)v23);
  v22 = sub_21DF79090((_QWORD *)a1, (uint64_t)v16, a5);
  v17 = 2048;
  if (*(_QWORD *)(a1 + 160) == a5)
    v17 = 2040;
  v18 = *(_QWORD *)(a1 + v17);
  if (v18)
    v19 = strlen(*(const char **)(a1 + v17));
  else
    v19 = 0;
  v20 = sub_21DF203DC(a1, v18, v19, a5, a5);
  v24 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v20 + 24), v20, (uint64_t)&v22, 1, (uint64_t)v23);
}

llvm::Value *sub_21DF315D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v13 = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v13);
  if (v14)
    llvm::MetadataTracking::untrack();
  v7 = *(_QWORD *)(a1 + 1408);
  if (v7)
    v8 = strlen(*(const char **)(a1 + 1408));
  else
    v8 = 0;
  v9 = sub_21DF1AFD4(a1, v7, v8, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 184));
  v16[0] = llvm::ConstantInt::get();
  v16[1] = a4;
  v16[2] = llvm::ConstantInt::get();
  v12 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v9 + 24), v9, (uint64_t)v16, 3, (uint64_t)v11);
}

llvm::Value *sub_21DF31710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v4 = *(_QWORD *)(a1 + 1392);
  if (v4)
    v5 = strlen(*(const char **)(a1 + 1392));
  else
    v5 = 0;
  v6 = sub_21DF1B0B0(a1, v4, v5, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 184));
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  v9 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
}

llvm::Value *sub_21DF31848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  llvm::FixedVectorType::get();
  v6 = *(_QWORD *)(a1 + 1720);
  if (v6)
    v7 = strlen(*(const char **)(a1 + 1720));
  else
    v7 = 0;
  v8 = *(_QWORD *)(a1 + 144);
  v9 = llvm::PointerType::get();
  v10 = sub_21DF1B0B0(a1, v6, v7, v8, v9, *(_QWORD *)(a1 + 192));
  v17[0] = a3;
  v17[1] = llvm::ConstantInt::get();
  v13 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

uint64_t sub_21DF319A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  sub_21DF18F1C(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v4 = *(_QWORD *)(a1 + 1568);
  if (v4)
    v5 = strlen(*(const char **)(a1 + 1568));
  else
    v5 = 0;
  v6 = sub_21DF1B0B0(a1, v4, v5, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 184));
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  v9 = 257;
  sub_21DF191A4(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
  return 0;
}

uint64_t sub_21DF31AE8()
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t sub_21DF31B40()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t sub_21DF31BBC(uint64_t result)
{
  if (*(_BYTE *)(result + 2064))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    return llvm::Function::addFnAttr();
  }
  return result;
}

BOOL sub_21DF31CB0(uint64_t a1, int a2, int a3)
{
  return ((a3 + a2) & 0x3FFFFC00) == 0;
}

void sub_21DF31CC0(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *p_p;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string __p;
  char __str[128];
  std::string v46;
  std::string v47;
  _QWORD v48[5];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v7 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a4 + 24))(a4);
  v8 = snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, a4[174]);
  sub_21DF28954(v8, "------ Start USC %s -------\n", v9, v10, v11, v12, v13, v14, (char)__str);
  memset(&__p, 0, sizeof(__p));
  if (a3 >= 2)
  {
    v22 = 0;
    v23 = 0;
    v24 = 1;
    v25 = 1;
    do
    {
      if (v25)
      {
        sub_21DF1AF28(&v43, "\t[Inst ");
        std::to_string(&v46, v23);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v46;
        else
          v26 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        else
          size = v46.__r_.__value_.__l.__size_;
        v28 = std::string::append(&v43, (const std::string::value_type *)v26, size);
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_21DF1AF28(v41, ", offset ");
        if ((v42 & 0x80u) == 0)
          v30 = v41;
        else
          v30 = (void **)v41[0];
        if ((v42 & 0x80u) == 0)
          v31 = v42;
        else
          v31 = (std::string::size_type)v41[1];
        v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
        v33 = v32->__r_.__value_.__r.__words[0];
        v48[0] = v32->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v33;
        __p.__r_.__value_.__l.__size_ = v48[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v48 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v34;
        if ((char)v42 < 0)
          operator delete(v41[0]);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        sprintf((char *)&v46, " 0x%04x", v24 - 1);
        sub_21DF1AF28(&v43, "]");
        v35 = std::string::insert(&v43, 0, (const std::string::value_type *)&v46);
        v36 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v47;
        else
          v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v38 = v47.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        ++v23;
      }
      sprintf((char *)&v47, " 0x%04x", *(unsigned __int16 *)(a2 + 2 * v22));
      v15 = std::string::append(&__p, (const std::string::value_type *)&v47);
      if ((*(_WORD *)(a2 + 2 * v22) & 0x100) != 0)
      {
        v25 = 0;
      }
      else
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        sub_21DF28954((uint64_t)v15, "%s", v16, v17, v18, v19, v20, v21, (char)p_p);
        v15 = (std::string *)MEMORY[0x2207A77BC](&__p, &unk_21DFAD77A);
        v25 = 1;
      }
      v22 = v24;
    }
    while (a3 >> 1 > v24++);
  }
  sub_21DF28954((uint64_t)v15, "\n------- End USC %s --------\n", v16, v17, v18, v19, v20, v21, (char)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF31FF4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

_QWORD *sub_21DF32000(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = &off_24E1E7E98;
  v2 = a1[99];
  a1[99] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x2207A6964](a1 + 44);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 17));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 16));
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  return a1;
}

uint64_t sub_21DF32070(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E1E8140;
  v2 = a1 + 4408;
  *(_QWORD *)(a1 + 4408) = &unk_24E1E8368;
  *(_QWORD *)(a1 + 2432) = &unk_24E1E82F0;
  sub_21DF34954((char **)(a1 + 3872));
  sub_21DF349C0((uint64_t *)a1, (uint64_t *)off_24E1E83D0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF320D4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E1E8140;
  v2 = a1 + 4408;
  *(_QWORD *)(a1 + 4408) = &unk_24E1E8368;
  *(_QWORD *)(a1 + 2432) = &unk_24E1E82F0;
  sub_21DF34954((char **)(a1 + 3872));
  sub_21DF349C0((uint64_t *)a1, (uint64_t *)off_24E1E83D0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF32148(uint64_t a1, uint64_t *a2)
{
  return sub_21DF83EF8(a1, a2, 0);
}

uint64_t sub_21DF32150(uint64_t a1, uint64_t *a2)
{
  return sub_21DF83EF8(a1, a2, 1);
}

uint64_t sub_21DF32158(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  int v8;

  sub_21DF7CAB4(a1);
  if (*(_DWORD *)(a1 + 4400) == 1)
  {
    v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v3 = *(_BYTE **)(v2 + 344);
    if (!v3[1667])
    {
      v6 = *(_OWORD *)(v2 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 8));
      v8 = *(_DWORD *)(v2 + 104);
      v4 = llvm::ConstantInt::get();
      (*(void (**)(_BYTE *, __int128 *, uint64_t))(*(_QWORD *)v3 + 424))(v3, &v6, v4);
      if (v7)
        llvm::MetadataTracking::untrack();
    }
    *(_BYTE *)(a1 + 3532) = 1;
  }
  return 1;
}

uint64_t sub_21DF32220()
{
  return 1;
}

uint64_t sub_21DF3222C(_QWORD *a1)
{
  sub_21DF9DDFC(a1);
  return 1;
}

uint64_t sub_21DF32244()
{
  return 1;
}

uint64_t sub_21DF3224C(_QWORD *a1)
{
  return *(unsigned int *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 808);
}

uint64_t sub_21DF32264(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21DF32270()
{
  return 1;
}

uint64_t sub_21DF32278()
{
  return 1;
}

uint64_t sub_21DF32280(uint64_t a1, char a2)
{
  return 16 * ((*(_DWORD *)(a1 + 3864) >> a2) & 1u);
}

BOOL sub_21DF32290(uint64_t a1)
{
  return *(_DWORD *)(a1 + 3864) != 0;
}

uint64_t sub_21DF322A0()
{
  return 0;
}

uint64_t sub_21DF322A8()
{
  return 0;
}

uint64_t sub_21DF322B0(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 3816) + 60) >> 4) & 1;
}

uint64_t sub_21DF322C0()
{
  return 0;
}

const char *sub_21DF322C8()
{
  return "fragment";
}

uint64_t sub_21DF322D4()
{
  return 1;
}

void sub_21DF322DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  _DWORD v18[6];
  __int128 __p;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  int v24;
  void *__src;
  size_t __len;
  uint64_t v27;

  v27 = 0;
  __src = 0;
  __len = 0;
  sub_21DF35C1C(a2, a3, (int *)&v27 + 1, (int *)&v27, (uint64_t *)&__src);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned int *)(a2 + 32);
  else
    v7 = 1;
  v8 = sub_21DF78CC0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), a2, v18);
  v9 = v8;
  v10 = *(_DWORD *)(a1 + 3880);
  v12 = v27;
  v11 = HIDWORD(v27);
  v18[0] = v7;
  v18[1] = v8;
  v18[2] = HIDWORD(v27);
  v18[3] = v27;
  v18[4] = v10;
  v21 = 0;
  v22 = v8 == 1;
  v23 = 0;
  if (HIDWORD(v27) == 2)
  {
    v14 = v8 == 1;
    v13 = 3;
    v15 = 6;
    goto LABEL_12;
  }
  if (HIDWORD(v27) == 1)
  {
    v14 = v8 == 1;
    v13 = 2;
    v15 = 5;
LABEL_12:
    if (v14)
      v13 = v15;
    goto LABEL_14;
  }
  if (HIDWORD(v27))
    goto LABEL_15;
  if (v8 == 1)
    v13 = 4;
  else
    v13 = 1;
LABEL_14:
  v24 = v13;
LABEL_15:
  if (__src)
  {
    sub_21DF24420(&v16, __src, __len);
  }
  else
  {
    v16 = 0uLL;
    v17 = 0;
  }
  __p = v16;
  v20 = v17;
  sub_21DF361E0(a1 + 3872, (unint64_t)v18);
  *(_DWORD *)a4 = v7;
  *(_DWORD *)(a4 + 4) = v11;
  *(_DWORD *)(a4 + 8) = v12;
  *(_DWORD *)(a4 + 12) = v9;
  *(_DWORD *)(a4 + 16) = v10;
  *(_QWORD *)(a4 + 24) = sub_21DF80980((_QWORD *)a1, 1, v10, (llvm::Type *)v7);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
}

void sub_21DF32470(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, size_t a4@<X4>, uint64_t a5@<X8>)
{
  int v9;
  int v10;
  int v11;
  __int128 __dst;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;
  int v16;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  int v22;

  v9 = sub_21DF78CC0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), a2, v14);
  v10 = *(_DWORD *)(a1 + 3880);
  v14[0] = 1;
  v14[1] = v9;
  v15 = 0x300000001;
  v16 = v10;
  v19 = 0;
  v20 = v9 == 1;
  v21 = 0;
  if (v9 == 1)
    v11 = 5;
  else
    v11 = 2;
  v22 = v11;
  if (a3)
  {
    sub_21DF24420(&__dst, a3, a4);
  }
  else
  {
    __dst = 0uLL;
    v13 = 0;
  }
  __p = __dst;
  v18 = v13;
  sub_21DF361E0(a1 + 3872, (unint64_t)v14);
  *(_QWORD *)a5 = 0x100000001;
  *(_DWORD *)(a5 + 8) = 3;
  *(_DWORD *)(a5 + 12) = v9;
  *(_DWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 24) = sub_21DF80980((_QWORD *)a1, 1, v10, (llvm::Type *)1);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
}

uint64_t sub_21DF32594@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t result;
  int v7;

  v5 = sub_21DF78CC0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a2, &v7);
  *(_QWORD *)a3 = 0x100000001;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = 0;
  result = sub_21DF80980(a1, 7, 0, (llvm::Type *)1);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

uint64_t sub_21DF325FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v12 = 0;
  v13 = 0;
  sub_21DF35C1C(a2, a3, &v13, &v12, &v11);
  v7 = sub_21DF78CC0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a2, &v14);
  v8 = v13;
  *(_DWORD *)(a4 + 8) = v12;
  *(_DWORD *)(a4 + 12) = v7;
  *(_DWORD *)a4 = 2;
  *(_DWORD *)(a4 + 4) = v8;
  v9 = v8 != 0;
  *(_DWORD *)(a4 + 16) = v9;
  result = sub_21DF80980(a1, 8, v9, (llvm::Type *)2);
  *(_QWORD *)(a4 + 24) = result;
  return result;
}

uint64_t sub_21DF32698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int Key;
  std::string *v33;
  std::string *v34;
  const std::string::value_type *v35;
  std::string *v36;
  std::string *v37;
  uint64_t Operand;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::MDString *v42;
  uint64_t String;
  uint64_t v44;
  BOOL v45;
  int v48;
  int v49;
  uint64_t Name;
  unint64_t v51;

  v2 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 == v2 + 24)
  {
    v6 = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v8) = 0;
    goto LABEL_68;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = v4 - 56;
    if (!v4)
      v9 = 0;
    v10 = v9 + 72;
    for (i = *(_QWORD *)(v9 + 80); i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = i - 24;
      if (!i)
        v12 = 0;
      v13 = *(_QWORD *)(v12 + 48);
      if (v13 != v12 + 40)
      {
LABEL_61:
        while (i != v10)
        {
          v14 = v13 - 24;
          if (!v13)
            v14 = 0;
          v15 = *(unsigned __int8 *)(v14 + 16);
          if (v13 && v15 == 61)
          {
            v16 = **(_QWORD **)(v14 - 32);
            v17 = *(_DWORD *)(v16 + 8);
            if ((v17 & 0xFE) == 0x12)
              v17 = *(_DWORD *)(**(_QWORD **)(v16 + 16) + 8);
            v18 = v17 >> 8;
            if (v18 == 1)
            {
              v5 = 1;
            }
            else if (v18 == 3)
            {
              v6 = 1;
            }
          }
          else
          {
            if (v15 == 84)
              v19 = v14;
            else
              v19 = 0;
            if (v13)
            {
              if (v15 == 84)
              {
                v20 = *(_QWORD *)(v19 - 32);
                if (v20)
                {
                  if (!*(_BYTE *)(v20 + 16) && *(_QWORD *)(v20 + 24) == *(_QWORD *)(v19 + 72))
                  {
                    v48 = v7;
                    v49 = v8;
                    Name = llvm::Value::getName((llvm::Value *)v20);
                    v51 = v21;
                    v22 = sub_21DF35A70((llvm::CallBase *)v19);
                    v23 = v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF);
                    v24 = ((v22 - v23) & 0x1FFFFFFFE0) != 0 && *(unsigned __int8 *)(**(_QWORD **)v23 + 8) == 15;
                    if (v51 >= 0xA
                      && (*(_QWORD *)Name == 0x6D6F74612E726961
                        ? (v27 = *(unsigned __int16 *)(Name + 8) == 25449)
                        : (v27 = 0),
                          v27 && (llvm::StringRef::find() == -1 ? (v28 = v24) : (v28 = 0), v28)))
                    {
                      v29 = **(_QWORD **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
                      v30 = *(_DWORD *)(v29 + 8);
                      v8 = v49;
                      if ((v30 & 0xFE) == 0x12)
                        v30 = *(_DWORD *)(**(_QWORD **)(v29 + 16) + 8);
                      v31 = v30 >> 8;
                      if (v31 == 1)
                      {
                        v8 = 1;
                        v5 = 1;
                      }
                      else if (v31 == 3)
                      {
                        v8 = 1;
                        v6 = 1;
                      }
                    }
                    else
                    {
                      v8 = v49;
                    }
                    sub_21DF35B3C();
                    Key = llvm::StringMapImpl::FindKey();
                    if (Key == -1)
                    {
                      v7 = v48;
                    }
                    else
                    {
                      v7 = v48;
                      if (Key != (unint64_t)dword_2553B3CE8)
                        v7 = (*(_DWORD *)(*(_QWORD *)(qword_2553B3CE0 + 8 * Key) + 8) == 3) | v48;
                    }
                  }
                }
              }
            }
          }
          v13 = *(_QWORD *)(v13 + 8);
          v25 = i - 24;
          if (!i)
            v25 = 0;
          if (v13 == v25 + 40)
          {
            while (1)
            {
              i = *(_QWORD *)(i + 8);
              if (i == v10)
                goto LABEL_62;
              v26 = i - 24;
              if (!i)
                v26 = 0;
              v13 = *(_QWORD *)(v26 + 48);
              if (v13 != v26 + 40)
                goto LABEL_61;
            }
          }
        }
        break;
      }
    }
LABEL_62:
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != v3);
  if ((v5 & 1) == 0)
  {
LABEL_68:
    if ((v6 & 1) == 0 && (v7 & 1) == 0)
      goto LABEL_89;
    goto LABEL_70;
  }
  v33 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (!*(_BYTE *)(v33[14].__r_.__value_.__l.__size_ + 1664) && !*(_BYTE *)(a1 + 37))
  {
    v34 = v33 + 17;
    v35 = "buffer writes not supported in fragment shaders";
LABEL_96:
    std::string::append(v34, v35);
    return 0;
  }
LABEL_70:
  if ((v6 & 1) != 0)
  {
    v36 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    if (!*(_BYTE *)(v36[14].__r_.__value_.__l.__size_ + 1666))
    {
      v34 = v36 + 17;
      v35 = "threadgroup memory not supported in fragment shaders";
      goto LABEL_96;
    }
  }
  if ((v7 & 1) != 0)
  {
    v37 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    if (!*(_BYTE *)(v37[14].__r_.__value_.__l.__size_ + 1665))
    {
      v34 = v37 + 17;
      v35 = "Texture writes not supported in fragment shaders";
      goto LABEL_96;
    }
  }
  if ((v8 & 1) != 0 && *(int *)(a1 + 2952) <= 0)
    *(_DWORD *)(a1 + 2952) = 1;
  *(_DWORD *)(a1 + 4400) = 2;
  Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(a1 + 48));
  v39 = *(unsigned int *)(Operand + 8);
  if (Operand - 8 * v39 + 24 != Operand)
  {
    v40 = Operand;
    v41 = 24 - 8 * v39;
    while (1)
    {
      v42 = *(llvm::MDString **)(v40 + v41);
      if (!*(_BYTE *)v42)
      {
        String = llvm::MDString::getString(v42);
        if (v44 == 20)
        {
          v45 = *(_QWORD *)String == 0x72665F796C726165 && *(_QWORD *)(String + 8) == 0x745F746E656D6761;
          if (v45 && *(_DWORD *)(String + 16) == 1937011557)
            break;
        }
      }
      v41 += 8;
      if (!v41)
        goto LABEL_89;
    }
    *(_DWORD *)(a1 + 4400) = 1;
  }
LABEL_89:
  if (*(_DWORD *)(a1 + 4400) == 2)
  {
    if (!*(_BYTE *)(a1 + 3843))
    {
      *(_BYTE *)(a1 + 3843) = 1;
      *(_DWORD *)(a1 + 3848) = 1;
    }
    *(_DWORD *)(a1 + 3844) = 0;
  }
  return 1;
}

uint64_t sub_21DF32B30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21DF32B38(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_21DF32B40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  uint64_t m;
  std::string v28;
  std::string v29;
  std::string v30;
  void *v31[2];
  char v32;
  std::string v33;
  void *v34[2];
  char v35;
  std::string v36;
  void *v37[2];
  char v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string __p;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *v50[2];
  char v51;
  std::string v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  __int128 v80;
  std::string::size_type v81;
  __int128 v82;
  std::string::size_type v83;
  __int128 v84;
  std::string::size_type v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a1 + 3816);
  sub_21DF1AF28(v40, "AGCFragmentContextStateAGP");
  sub_21DF1AF28(&v44, "AGCFragmentContextState");
  sub_21DF1AF28(&v43, "fragmentState");
  sub_21DF1AF28(&v86, "AGCFragmentState");
  sub_21DF1AF28(&v65, "GL and Metal state:");
  sub_21DF1AF28(v63, "alphaToCoverage");
  sub_21DF34E40(&v66, (const void **)v63, *v4 & 1);
  sub_21DF1AF28(v61, "alphaToOne");
  sub_21DF34E40(&v67, (const void **)v61, (*v4 >> 1) & 1);
  sub_21DF1AF28(v59, "sampleCoverage");
  sub_21DF34E40(&v68, (const void **)v59, (*v4 >> 2) & 1);
  sub_21DF1AF28(&v69, "GL specific state:");
  sub_21DF1AF28(v57, "depthStencilWriteDisabled");
  sub_21DF34E40(&v70, (const void **)v57, (*v4 >> 4) & 1);
  sub_21DF1AF28(v55, "logicOp");
  sub_21DF34E40(&v71, (const void **)v55, (*v4 >> 5) & 1);
  sub_21DF1AF28(v53, "logicOpState");
  sub_21DF34E94(&v72, (const void **)v53, off_24E1E8BD8[((unint64_t)*v4 >> 6) & 0x1F]);
  sub_21DF1AF28(&v52, "alphaTest");
  sub_21DF34E40(&v73, (const void **)&v52.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  sub_21DF1AF28(v50, "alphaTestFunc");
  sub_21DF34E94(&v74, (const void **)v50, off_24E1E8C60[(unsigned __int16)*v4 >> 12]);
  sub_21DF1AF28(&v49, "smoothPoints");
  sub_21DF34E40(&v75, (const void **)&v49.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  sub_21DF1AF28(&v48, "pointSpriteEnabled");
  sub_21DF34E40(&v76, (const void **)&v48.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  sub_21DF1AF28(&v47, "outputPointSize");
  sub_21DF34E40(&v77, (const void **)&v47.__r_.__value_.__l.__data_, (*v4 >> 18) & 1);
  sub_21DF1AF28(&v46, "shaderDebugEnable");
  sub_21DF34E40(&v78, (const void **)&v46.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  sub_21DF1AF28(&__p, "unused");
  sub_21DF34E40(&v79, (const void **)&__p.__r_.__value_.__l.__data_, *v4 >> 20);
  sub_21DF34EE8(&v42, (uint64_t)&v86, (uint64_t)&v65, 15);
  v5 = 45;
  do
  {
    if (v65.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0)
      operator delete(v63[v5]);
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  sub_21DF35174(&v86, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v42);
  sub_21DF1AF28(v53, "colorMaskState");
  sub_21DF1AF28(v63, "AGCColorMaskState");
  sub_21DF1AF28(v61, "redEnableBits");
  sub_21DF35258(&v65, (const void **)v61);
  sub_21DF1AF28(v59, "greenEnableBits");
  sub_21DF35258(&v66, (const void **)v59);
  sub_21DF1AF28(v57, "blueEnableBits");
  sub_21DF35258(&v67, (const void **)v57);
  sub_21DF1AF28(v55, "alphaEnableBits");
  sub_21DF35258(&v68, (const void **)v55);
  sub_21DF34EE8(&v52, (uint64_t)v63, (uint64_t)&v65, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v68.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v68.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  sub_21DF35174(&v87, (const void **)v53, (uint64_t)&v52);
  sub_21DF34EE8(&v65, (uint64_t)&v44, (uint64_t)&v86, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v87.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v86 + j * 8 + 24));
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  sub_21DF1AF28(&v86, "mutableBuffers");
  sub_21DF35258(&v66, (const void **)&v86.__r_.__value_.__l.__data_);
  sub_21DF1AF28(v63, "genCompilerStatistics");
  sub_21DF34E40(&v67, (const void **)v63, v4[15] & 1);
  sub_21DF1AF28(v61, "genTelemetryStatistics");
  sub_21DF34E40(&v68, (const void **)v61, (v4[15] >> 1) & 1);
  sub_21DF1AF28(v59, "fragmentOnly");
  sub_21DF34E40(&v69, (const void **)v59, (v4[15] >> 2) & 1);
  sub_21DF1AF28(v57, "openglMode");
  sub_21DF34E40(&v70, (const void **)v57, (v4[15] >> 3) & 1);
  sub_21DF1AF28(v55, "customBorderColor");
  sub_21DF34E40(&v71, (const void **)v55, (v4[15] >> 4) & 1);
  sub_21DF1AF28(v53, "disableTextureRWBoundsCheck");
  sub_21DF34E40(&v72, (const void **)v53, (v4[15] >> 5) & 1);
  sub_21DF1AF28(&v52, "debugInstrumentationEnabled");
  sub_21DF34E40(&v73, (const void **)&v52.__r_.__value_.__l.__data_, (v4[15] >> 6) & 1);
  sub_21DF1AF28(v50, "unused");
  sub_21DF34E40(&v74, (const void **)v50, v4[15] >> 7);
  sub_21DF35368(&v49, v4 + 6);
  v8 = std::string::insert(&v49, 0, "blendState[0]: ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v48, v4 + 7);
  v10 = std::string::insert(&v48, 0, "blendState[1]: ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v47, v4 + 8);
  v12 = std::string::insert(&v47, 0, "blendState[2]: ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v46, v4 + 9);
  v14 = std::string::insert(&v46, 0, "blendState[3]: ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&__p, v4 + 10);
  v16 = std::string::insert(&__p, 0, "blendState[4]: ");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v44, v4 + 11);
  v18 = std::string::insert(&v44, 0, "blendState[5]: ");
  v19 = v18->__r_.__value_.__r.__words[2];
  v80 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v81 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v43, v4 + 12);
  v20 = std::string::insert(&v43, 0, "blendState[6]: ");
  v21 = v20->__r_.__value_.__r.__words[2];
  v82 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v83 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35368(&v42, v4 + 13);
  v22 = std::string::insert(&v42, 0, "blendState[7]: ");
  v23 = v22->__r_.__value_.__r.__words[2];
  v84 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v85 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  sub_21DF34EE8(&v29, (uint64_t)v40, (uint64_t)&v65, 18);
  v24 = 54;
  do
  {
    if (v65.__r_.__value_.__s.__data_[v24 * 8 - 1] < 0)
      operator delete(v63[v24]);
    v24 -= 3;
  }
  while (v24 * 8);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  v25 = *(_QWORD *)(a1 + 2960);
  sub_21DF1AF28(v63, "AGCDrawBufferState");
  sub_21DF1AF28(v61, "enabledBits");
  sub_21DF35258(&v86, (const void **)v61);
  sub_21DF1AF28(v59, "sampleCount");
  sub_21DF34E40(&v87, (const void **)v59, (*(_DWORD *)(v25 + 32) >> 8) & 0xF);
  sub_21DF1AF28(v57, "colorSampleCount");
  sub_21DF34E40(&v88, (const void **)v57, (unsigned __int16)*(_DWORD *)(v25 + 32) >> 12);
  sub_21DF1AF28(v55, "outputPartitionSize");
  sub_21DF34E40(&v89, (const void **)v55, *(unsigned __int8 *)(v25 + 34));
  sub_21DF1AF28(v53, "LIBSpilling");
  sub_21DF34E40(&v90, (const void **)v53, HIBYTE(*(_DWORD *)(v25 + 32)) & 1);
  sub_21DF1AF28(&v52, "unused");
  sub_21DF34E40(&v91, (const void **)&v52.__r_.__value_.__l.__data_, *(_DWORD *)(v25 + 32) >> 25);
  sub_21DF1AF28(v50, "encoded : ");
  sub_21DF1AF28(&v49, "encoded[0]");
  sub_21DF355E8(&v48, (_DWORD *)v25);
  sub_21DF35174(&v65, (const void **)&v49.__r_.__value_.__l.__data_, (uint64_t)&v48);
  sub_21DF1AF28(&v47, "encoded[1]");
  sub_21DF355E8(&v46, (_DWORD *)(v25 + 4));
  sub_21DF35174(&v66, (const void **)&v47.__r_.__value_.__l.__data_, (uint64_t)&v46);
  sub_21DF1AF28(&__p, "encoded[2]");
  sub_21DF355E8(&v44, (_DWORD *)(v25 + 8));
  sub_21DF35174(&v67, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v44);
  sub_21DF1AF28(&v43, "encoded[3]");
  sub_21DF355E8(&v42, (_DWORD *)(v25 + 12));
  sub_21DF35174(&v68, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v42);
  sub_21DF1AF28(v40, "encoded[4]");
  sub_21DF355E8(&v39, (_DWORD *)(v25 + 16));
  sub_21DF35174(&v69, (const void **)v40, (uint64_t)&v39);
  sub_21DF1AF28(v37, "encoded[5]");
  sub_21DF355E8(&v36, (_DWORD *)(v25 + 20));
  sub_21DF35174(&v70, (const void **)v37, (uint64_t)&v36);
  sub_21DF1AF28(v34, "encoded[6]");
  sub_21DF355E8(&v33, (_DWORD *)(v25 + 24));
  sub_21DF35174(&v71, (const void **)v34, (uint64_t)&v33);
  sub_21DF1AF28(v31, "encoded[7]");
  sub_21DF355E8(&v30, (_DWORD *)(v25 + 28));
  sub_21DF35174(&v72, (const void **)v31, (uint64_t)&v30);
  sub_21DF34EE8(&v92, (uint64_t)v50, (uint64_t)&v65, 8);
  sub_21DF34EE8(&v28, (uint64_t)v63, (uint64_t)&v86, 7);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v92.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v92.__r_.__value_.__l.__data_ + k * 8));
  }
  for (m = 0; m != -24; m -= 3)
  {
    if (SHIBYTE(v72.__r_.__value_.__r.__words[m + 2]) < 0)
      operator delete(*(void **)((char *)&v72.__r_.__value_.__l.__data_ + m * 8));
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  sub_21DF35850(a2, (const void **)&v29.__r_.__value_.__l.__data_, (const void **)&v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF33A74(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t i;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  size_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  __int16 v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  int v95;
  __int16 v96;
  int v97;
  void *v98;
  int v99;
  int v100;
  int v101;
  void *v102;
  int v103;
  void *v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  std::string *v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  std::string *v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  std::string::size_type size;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  std::string::size_type v131;
  void **v132;
  std::string::size_type v133;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  void *__p[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  void *v158;
  _BYTE *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD v163[65];
  char v164;
  _BYTE v165[76];
  int v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  if (!sub_21DF2EDB4(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(int **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 128)))return 0;
  v2 = sub_21DF77960(a1);
  v3 = sub_21DF83DCC(a1);
  v4 = *(int **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 560);
  v5 = (unsigned __int16 *)((char *)v4 - *v4);
  v6 = *v5;
  if (v6 >= 9)
  {
    if (v5[4])
      v7 = (unsigned int *)((char *)v4 + v5[4] + *(unsigned int *)((char *)v4 + v5[4]));
    else
      v7 = 0;
LABEL_9:
    v9 = (int *)v5[2];
    if (v5[2])
      v9 = (int *)((char *)v9 + (_QWORD)v4 + *(unsigned int *)((char *)v9 + (_QWORD)v4));
    goto LABEL_11;
  }
  v7 = 0;
  v9 = 0;
  if (v6 >= 5)
    goto LABEL_9;
LABEL_11:
  v10 = (unsigned __int16 *)((char *)v9 - *v9);
  v11 = *v10;
  v142 = v2;
  v143 = v3;
  if (v11 < 0x25)
    goto LABEL_21;
  if (v10[18] && *((_BYTE *)v9 + v10[18]))
    goto LABEL_17;
  if (v11 < 0x27)
  {
LABEL_21:
    v12 = 0;
    goto LABEL_22;
  }
  if (!v10[19] || !*((_BYTE *)v9 + v10[19]))
  {
    if (v11 >= 0x29)
    {
      v13 = v10[20];
      if (v13)
      {
        v12 = *((unsigned __int8 *)v9 + v13) != 0;
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
LABEL_17:
  v12 = 1;
LABEL_22:
  v141 = v12;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 368))(a1, v7);
  v14 = *(unsigned int *)(a1 + 3880);
  if ((_DWORD)v14)
  {
    v15 = (char *)sub_21DF2EACC(*(unsigned int *)(a1 + 3880));
    memset(v15, 255, 4 * v14);
    v16 = &v15[4 * v14];
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = (int)*v7;
  v18 = *(unsigned __int16 *)((char *)v7 - v17 + 8);
  if (*(_WORD *)((char *)v7 - v17 + 8))
  {
    v19 = *(unsigned int *)((char *)v7 + v18);
    v20 = (char *)v7 + v18 + v19;
  }
  else
  {
    v18 = 0;
    v20 = 0;
    v19 = *v7;
  }
  v21 = *(unsigned int *)((char *)v7 + v18 + v19);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 4 * v21;
    while (1)
    {
      v26 = *(unsigned int *)&v20[v22 + 4];
      v27 = &v20[v22 + v26];
      v28 = *((int *)v27 + 1);
      v29 = v26 - v28;
      v30 = &v20[v22 + v26 - v28];
      v31 = *((unsigned __int16 *)v30 + 2);
      if (v31 < 5)
      {
        v36 = v24;
      }
      else
      {
        v32 = -v28;
        v33 = *((unsigned __int16 *)v30 + 4);
        if (!v33
          || v20[v22 + 4 + v26 + v33] != 1
          || (v31 < 7 || (v34 = *(unsigned __int16 *)&v20[v22 + 10 + v29]) == 0
            ? (v35 = 0)
            : (v35 = *(unsigned int *)&v20[v22 + 4 + v26 + v34]),
              *(_DWORD *)&v15[4 * v35] != -1))
        {
          v36 = v24;
LABEL_40:
          v37 = v32 + v22;
          if (*(_WORD *)&v20[v26 + 8 + v37] && v20[v22 + 4 + v26 + *(unsigned __int16 *)&v20[v26 + 8 + v37]] == 5)
            v23 += 2;
          goto LABEL_43;
        }
        v36 = (v24 + 1);
        *(_DWORD *)&v15[4 * v35] = v24;
        v38 = *((int *)v27 + 1);
        if (*(unsigned __int16 *)&v20[v22 + 4 + v26 - v38] >= 5u)
        {
          v32 = -v38;
          goto LABEL_40;
        }
      }
LABEL_43:
      v22 += 4;
      v24 = v36;
      if (v25 == v22)
        goto LABEL_48;
    }
  }
  v23 = 0;
LABEL_48:
  v139 = v23;
  v39 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  v40 = *(_BYTE *)(v39 + 1686);
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = (char *)v163;
  v162 = 0x800000000;
  v163[64] = 0x1FFFFFFFFLL;
  v164 = v40;
  v166 = 0;
  memset(v165, 0, 74);
  v167 = 1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 3816) + 60) & 4) != 0)
    v165[73] = 1;
  v41 = *(unsigned int *)(a1 + 3880);
  if ((_DWORD)v41)
  {
    v42 = 0;
    for (i = 0; i < v41; ++i)
    {
      v44 = *(_QWORD *)(a1 + 3872) + v42;
      v45 = *(_DWORD *)&v15[4 * *(unsigned int *)(v44 + 16)];
      if (v45 != -1)
      {
        *(_DWORD *)(v44 + 16) = v45;
        sub_21DF99E7C((uint64_t)&v158, v44);
        v41 = *(unsigned int *)(a1 + 3880);
      }
      v42 += 64;
    }
    v39 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  }
  sub_21DF9A30C((uint64_t)&v158, v39);
  v46 = *(_QWORD *)a1;
  sub_21DF9A5E4(&v158, *(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1634), 0);
  sub_21DF9A678((uint64_t)&v158, a1 + *(_QWORD *)(v46 - 24) + 704);
  v47 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v140 = v162;
  if ((_DWORD)v162)
  {
    v137 = v16;
    sub_21DF9A860((uint64_t)v161, (unint64_t)&v161[64 * (unint64_t)v162], 126 - 2 * __clz(v162), 1);
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    v145 = xmmword_21DFA6160;
    v146 = 0u;
    v147 = 0u;
    v148 = 0;
    v149 = 1;
    v150 = 256;
    v151 = 0;
    if ((_DWORD)v162)
    {
      v135 = v47;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      do
      {
        v52 = &v161[64 * v48];
        v55 = (char *)*((_QWORD *)v52 + 3);
        v53 = v52 + 24;
        v54 = v55;
        v56 = v53[23];
        if (v56 >= 0)
          v57 = v53;
        else
          v57 = v54;
        if (v56 >= 0)
          v58 = v53[23];
        else
          v58 = *((_QWORD *)v53 + 1);
        v59 = sub_21DF2DAB0((uint64_t)__p, v57, v58);
        v60 = v59;
        if (v50 >= v51)
        {
          v61 = (v50 - v49) >> 2;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62)
LABEL_179:
            abort();
          if ((v51 - v49) >> 1 > v62)
            v62 = (v51 - v49) >> 1;
          if ((unint64_t)(v51 - v49) >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          if (v63)
          {
            if (v63 >> 62)
              sub_21DF256A4();
            v64 = (char *)operator new(4 * v63);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v61];
          *(_DWORD *)v65 = v60;
          v66 = v65 + 4;
          while (v50 != v49)
          {
            v67 = *((_DWORD *)v50 - 1);
            v50 -= 4;
            *((_DWORD *)v65 - 1) = v67;
            v65 -= 4;
          }
          v51 = &v64[4 * v63];
          if (v49)
            operator delete(v49);
          v49 = v65;
          v50 = v66;
        }
        else
        {
          *(_DWORD *)v50 = v59;
          v50 += 4;
        }
        ++v48;
      }
      while (v48 < v162);
      if ((_DWORD)v162)
      {
        BYTE6(v148) = 1;
        sub_21DF2E13C((uint64_t)__p, v50 - v49, 4uLL);
        sub_21DF2E13C((uint64_t)__p, v50 - v49, 4uLL);
        v68 = v50 - v49;
        if (v50 == v49)
          v69 = (char *)&unk_21DFA30F2;
        else
          v69 = v49;
        if (v50 != v49)
        {
          v70 = v68 >> 2;
          v71 = v69 - 4;
          do
          {
            v72 = v70 - 1;
            v73 = *(_DWORD *)&v71[4 * v70];
            sub_21DF2DF68((uint64_t)__p, 4uLL);
            sub_21DF2E0DC((uint64_t)__p, v146 - v147 + DWORD2(v146) - v73 + 4);
            v70 = v72;
          }
          while (v72);
        }
        BYTE6(v148) = 0;
        v74 = sub_21DF2E0DC((uint64_t)__p, (unint64_t)v68 >> 2);
        BYTE6(v148) = 1;
        v75 = v146 - v147 + WORD4(v146);
        if (v74)
        {
          v76 = v74;
          sub_21DF2DF68((uint64_t)__p, 4uLL);
          sub_21DF2E08C((uint64_t *)__p, 4, v146 - v147 + DWORD2(v146) - v76 + 4);
        }
        v77 = sub_21DF2DC24((uint64_t)__p, v75);
        sub_21DF2ED04((uint64_t)__p, v77);
      }
      v47 = v135;
    }
    else
    {
      v49 = 0;
    }
    v80 = a1 + v47 + 704;
    v81 = sub_21DF2EC98(v80, (void *)v147, (v146 - v147 + DWORD2(v146)));
    if (v49)
      operator delete(v49);
    sub_21DF2E778(__p);
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    v145 = xmmword_21DFA6160;
    v146 = 0u;
    v147 = 0u;
    v148 = 0;
    v149 = 1;
    v150 = 256;
    v151 = 0;
    if ((_DWORD)v162)
    {
      v136 = a1 + v47 + 704;
      v138 = v81;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      do
      {
        v86 = v161[64 * v82 + 8] | (unsigned __int16)(*(_DWORD *)&v161[64 * v82 + 12] << 8) | (*(_DWORD *)&v161[64 * v82 + 4] << 16) & 0x80FFFFFF | ((*(_DWORD *)&v161[64 * v82] & 0x7F) << 24);
        if ((unint64_t)v84 >= v85)
        {
          v87 = v84 - v83;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
            goto LABEL_179;
          if ((uint64_t)(v85 - (_QWORD)v83) >> 1 > v88)
            v88 = (uint64_t)(v85 - (_QWORD)v83) >> 1;
          if (v85 - (unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
            v89 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v89 = v88;
          if (v89)
            v89 = (unint64_t)sub_21DF2EACC(v89);
          else
            v90 = 0;
          v91 = (unsigned int *)(v89 + 4 * v87);
          *v91 = v86;
          v92 = v91 + 1;
          while (v84 != v83)
          {
            v93 = *--v84;
            *--v91 = v93;
          }
          v85 = v89 + 4 * v90;
          if (v83)
            operator delete(v83);
          v83 = v91;
          v84 = v92;
        }
        else
        {
          *v84++ = v86;
        }
        ++v82;
      }
      while (v82 < v162);
      v16 = v137;
      if ((_DWORD)v162)
      {
        if (v84 == v83)
          v94 = (unsigned int *)&unk_2553B3E08;
        else
          v94 = v83;
        v95 = sub_21DF2EA5C((uint64_t)__p, v94, v84 - v83);
        BYTE6(v148) = 1;
        v96 = v146 - v147 + WORD4(v146);
        sub_21DF2DB24((uint64_t *)__p, 4, v95);
        v97 = sub_21DF2DC24((uint64_t)__p, v96);
        sub_21DF2ED04((uint64_t)__p, v97);
        v99 = DWORD2(v146);
        v98 = (void *)v147;
        v100 = v146;
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v98 = 0;
      }
      v81 = v138;
      v80 = v136;
    }
    else
    {
      v83 = 0;
      v99 = 0;
      v100 = 0;
      v98 = 0;
    }
    v101 = sub_21DF2EC98(v80, v98, (v100 - (_DWORD)v98 + v99));
    if (v83)
      operator delete(v83);
    sub_21DF2E778(__p);
    v47 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v78 = v81;
    v79 = v101;
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  if (v16 == v15)
    v102 = &unk_2553B3E08;
  else
    v102 = v15;
  v103 = sub_21DF2EA5C(a1 + v47 + 704, v102, (v16 - v15) >> 2);
  if (v159 == v158)
    v104 = &unk_2553B3D8C;
  else
    v104 = v158;
  v105 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v104, (v159 - (_BYTE *)v158) >> 2);
  v106 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v107 = (uint64_t *)(v106 + 704);
  *(_BYTE *)(v106 + 774) = 1;
  v108 = *(_DWORD *)(v106 + 736) - *(_DWORD *)(v106 + 752) + *(_DWORD *)(v106 + 744);
  if (v140)
  {
    sub_21DF2DB24(v107, 4, v78);
    sub_21DF2DB24(v107, 6, v79);
    sub_21DF2FF00(v107, 22, *(unsigned __int8 *)(a1 + 37));
  }
  sub_21DF2DB24(v107, 8, v103);
  sub_21DF2DB24(v107, 10, v105);
  sub_21DF2FF00(v107, 12, v165[72]);
  sub_21DF2FF00(v107, 14, *(unsigned __int8 *)(a1 + 3853));
  sub_21DF2FF00(v107, 16, *(unsigned __int8 *)(a1 + 3852));
  if (*(_BYTE *)(a1 + 2384))
    v109 = v141;
  else
    v109 = 0;
  sub_21DF2FF00(v107, 20, v109);
  sub_21DF2FF00(v107, 18, v141);
  v110 = sub_21DF2DC24((uint64_t)v107, v108);
  v111 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_BYTE *)(v111 + 774) = 1;
  v112 = *(_DWORD *)(v111 + 736) - *(_DWORD *)(v111 + 752) + *(_DWORD *)(v111 + 744);
  sub_21DF34D10((uint64_t *)(v111 + 704), v142);
  sub_21DF34D6C((uint64_t *)(v111 + 704), v143);
  if (v110)
  {
    sub_21DF2DF68(v111 + 704, 4uLL);
    sub_21DF2E08C((uint64_t *)(v111 + 704), 14, *(_DWORD *)(v111 + 736) - *(_DWORD *)(v111 + 752) + *(_DWORD *)(v111 + 744) - v110 + 4);
  }
  v113 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704;
  v114 = sub_21DF2DC24(v111 + 704, v112);
  sub_21DF2ED04(v113, v114);
  v115 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v116 = (unsigned int *)(v115[23].__r_.__value_.__l.__size_
                        + *(unsigned __int16 *)(v115[23].__r_.__value_.__l.__size_
                                              - *(int *)v115[23].__r_.__value_.__l.__size_
                                              + 4));
  v117 = (unsigned int *)((char *)v116
                        + *v116
                        + *(unsigned __int16 *)((char *)v116 + *v116 - *(unsigned int *)((char *)v116 + *v116) + 8));
  if (*(unsigned int *)((char *)v117 + *v117) > 0x20)
  {
    v8 = 0;
  }
  else
  {
    v118 = *(_DWORD *)(*(_QWORD *)(v115[16].__r_.__value_.__r.__words[2] + 32) + 44);
    if (v166 + v139 <= v118)
    {
      v8 = 1;
    }
    else
    {
      v119 = v115 + 17;
      std::to_string(&v153, v166 + v139);
      v120 = std::string::insert(&v153, 0, "Number of varying components(");
      v121 = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      v122 = std::string::append(&v154, ") ");
      v123 = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      v124 = std::string::append(&v155, "exceeds the limit (");
      v125 = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      v156.__r_.__value_.__r.__words[2] = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v152, v118);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = &v152;
      else
        v126 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        size = v152.__r_.__value_.__l.__size_;
      v128 = std::string::append(&v156, (const std::string::value_type *)v126, size);
      v129 = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      v130 = std::string::append(&v157, ")");
      v131 = v130->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      *(_QWORD *)&v145 = v131;
      v130->__r_.__value_.__l.__size_ = 0;
      v130->__r_.__value_.__r.__words[2] = 0;
      v130->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v145) & 0x80u) == 0)
        v132 = __p;
      else
        v132 = (void **)__p[0];
      if ((SBYTE7(v145) & 0x80u) == 0)
        v133 = BYTE7(v145);
      else
        v133 = (std::string::size_type)__p[1];
      std::string::append(v119, (const std::string::value_type *)v132, v133);
      if (SBYTE7(v145) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      v8 = 0;
    }
  }
  __p[0] = v165;
  sub_21DF34DC8((void ***)__p);
  sub_21DF34954(&v161);
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v15)
    operator delete(v15);
  return v8;
}

uint64_t sub_21DF34778(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 - 2432);
  *(_QWORD *)(a1 - 2432) = &off_24E1E8140;
  v2 = a1 + 1976;
  *(_QWORD *)(a1 + 1976) = &unk_24E1E8368;
  *(_QWORD *)a1 = &unk_24E1E82F0;
  sub_21DF34954((char **)(a1 + 1440));
  sub_21DF349C0(v1, (uint64_t *)off_24E1E83D0);
  return sub_21DF2E650(v2);
}

void sub_21DF347D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 - 2432);
  *(_QWORD *)(a1 - 2432) = &off_24E1E8140;
  v2 = a1 + 1976;
  *(_QWORD *)(a1 + 1976) = &unk_24E1E8368;
  *(_QWORD *)a1 = &unk_24E1E82F0;
  sub_21DF34954((char **)(a1 + 1440));
  sub_21DF349C0(v1, (uint64_t *)off_24E1E83D0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF34840(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *(_QWORD *)v1 = &off_24E1E8140;
  *((_QWORD *)v1 + 551) = &unk_24E1E8368;
  *((_QWORD *)v1 + 304) = &unk_24E1E82F0;
  sub_21DF34954((char **)v1 + 484);
  sub_21DF349C0((uint64_t *)v1, (uint64_t *)off_24E1E83D0);
  return sub_21DF2E650((uint64_t)(v1 + 4408));
}

void sub_21DF348A4(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *(_QWORD *)v1 = &off_24E1E8140;
  *((_QWORD *)v1 + 551) = &unk_24E1E8368;
  *((_QWORD *)v1 + 304) = &unk_24E1E82F0;
  sub_21DF34954((char **)v1 + 484);
  sub_21DF349C0((uint64_t *)v1, (uint64_t *)off_24E1E83D0);
  sub_21DF2E650((uint64_t)(v1 + 4408));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF34920()
{
  return "fragment";
}

uint64_t sub_21DF3492C()
{
  return 1;
}

void sub_21DF34934(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21DF32B40((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

uint64_t sub_21DF34944(_QWORD *a1)
{
  return sub_21DF33A74((uint64_t)a1 + *(_QWORD *)(*a1 - 96));
}

char **sub_21DF34954(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      if (v2[v4 - 17] < 0)
        operator delete(*(void **)&v2[v4 - 40]);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_21DF349C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t j;
  uint64_t v23;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[7];
  a1[304] = a2[8];
  v5 = a1[475];
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 473));
  v7 = a1[472];
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 470));
  v9 = a1[469];
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 467));
  v11 = a1[466];
  if (v11 != -8192 && v11 != -4096 && v11)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 464));
  v12 = a1[463];
  if (v12 != -8192 && v12 != -4096 && v12)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 461));
  v13 = a1[460];
  if (v13 != -8192 && v13 != -4096 && v13)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 458));
  v14 = a1[456];
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 454));
  v15 = a1[453];
  if (v15 != -8192 && v15 != -4096 && v15)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 451));
  v16 = a1[450];
  if (v16 != -8192 && v16 != -4096 && v16)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 448));
  v17 = a1[447];
  if (v17 != -8192 && v17 != -4096 && v17)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 445));
  v18 = a1[444];
  if (v18 != -8192 && v18 != -4096 && v18)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 442));
  for (i = 0; i != -32; i -= 4)
  {
    v20 = a1[i + 440];
    if (v20 != -8192 && v20 != -4096 && v20 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[i + 438]);
  }
  for (j = 0; j != -32; j -= 4)
  {
    v23 = a1[j + 408];
    if (v23 != -8192 && v23 != -4096 && v23 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[j + 406]);
  }
  return sub_21DF73870((uint64_t)a1, a2 + 2);
}

uint64_t sub_21DF34BEC()
{
  return 0;
}

uint64_t sub_21DF34BF4()
{
  return 0;
}

uint64_t sub_21DF34BFC()
{
  return 1;
}

uint64_t sub_21DF34C08()
{
  return 1;
}

uint64_t sub_21DF34C10()
{
  return 0;
}

uint64_t sub_21DF34C18()
{
  return 0;
}

uint64_t sub_21DF34C20()
{
  return 0;
}

uint64_t sub_21DF34C40()
{
  return 1;
}

uint64_t sub_21DF34C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a1 + 70) = 1;
  v6 = 4 * a3;
  sub_21DF2E13C(a1, 4 * a3, 4uLL);
  sub_21DF2E13C(a1, v6, 4uLL);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_21DF2DF68(a1, 4uLL);
      sub_21DF2E0DC(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      v8 = v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 70) = 0;
  return sub_21DF2E0DC(a1, a3);
}

uint64_t *sub_21DF34D10(uint64_t *result, int a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = result;
    sub_21DF2DF68((uint64_t)result, 4uLL);
    return sub_21DF2E08C(v3, 4, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t *sub_21DF34D6C(uint64_t *result, int a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = result;
    sub_21DF2DF68((uint64_t)result, 4uLL);
    return sub_21DF2E08C(v3, 8, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

void sub_21DF34DC8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21DF34E40(std::string *a1, const void **a2, unsigned int __val)
{
  std::string v5;

  std::to_string(&v5, __val);
  sub_21DF35174(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_21DF34E94(std::string *a1, const void **a2, char *__s)
{
  void *__p[2];
  char v6;

  sub_21DF1AF28(__p, __s);
  sub_21DF35174(a1, a2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_21DF34EE8(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t i;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  void *v18[2];
  char v19;
  std::string v20;
  void *v21[2];
  char v22;
  void *__p;
  std::string::size_type v24;
  unsigned __int8 v25;
  void *__dst[2];
  uint64_t v27;
  std::string v28;
  std::string v29;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_21DF205EC(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
  }
  sub_21DF35908((void **)&v28.__r_.__value_.__l.__data_, (std::string::value_type *)__dst, 0);
  sub_21DF1AF28(v21, "{");
  sub_21DF35908(&__p, (std::string::value_type *)v21, 0);
  if ((v25 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v25 & 0x80u) == 0)
    v8 = v25;
  else
    v8 = v24;
  v9 = std::string::append(&v28, p_p, v8);
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__dst[0]);
    if (!a4)
      goto LABEL_41;
    goto LABEL_20;
  }
  if (a4)
  {
LABEL_20:
    for (i = 24 * a4; i; i -= 24)
    {
      if (*(char *)(a3 + 23) < 0)
        sub_21DF205EC(&v28, *(void **)a3, *(_QWORD *)(a3 + 8));
      else
        v28 = *(std::string *)a3;
      v12 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        sub_21DF205EC(&v20, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        v20 = v28;
      sub_21DF35908(&__p, (std::string::value_type *)&v20, 1);
      if ((v25 & 0x80u) == 0)
        v13 = (const std::string::value_type *)&__p;
      else
        v13 = (const std::string::value_type *)__p;
      if ((v25 & 0x80u) == 0)
        v14 = v25;
      else
        v14 = v24;
      std::string::append(&v29, v13, v14);
      if ((char)v25 < 0)
        operator delete(__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if (v12 < 0)
LABEL_40:
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      else if (v12 < 0)
      {
        goto LABEL_40;
      }
      a3 += 24;
    }
  }
LABEL_41:
  sub_21DF1AF28(v18, "}");
  sub_21DF35908((void **)&v28.__r_.__value_.__l.__data_, (std::string::value_type *)v18, 0);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v29;
  else
    v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&v28, 0, (const std::string::value_type *)v15, size);
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_21DF35174(std::string *a1, const void **a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v13;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v13;
  sub_21DF2BBDC((uint64_t)&v13, v6 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v13, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF35258(std::string *a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *__p;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_21DF2E3C8((uint64_t)v9);
  v4 = sub_21DF28BA4(v10, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v10[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_21DF35174(a1, a2, (uint64_t)&__p);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2207A790C](&v12);
}

void sub_21DF35368(std::string *a1, unsigned int *a2)
{
  char *v4;
  uint64_t i;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v20, "AGCBlendState");
  sub_21DF1AF28(v18, "enabled");
  if ((*a2 & 1) != 0)
    v4 = "yes";
  else
    v4 = "no";
  sub_21DF34E94(&v22, (const void **)v18, v4);
  sub_21DF1AF28(v16, "src");
  sub_21DF34E94(&v23, (const void **)v16, off_24E1E8CA8[((unint64_t)*a2 >> 1) & 0x1F]);
  sub_21DF1AF28(v14, "dst");
  sub_21DF34E94(&v24, (const void **)v14, off_24E1E8CA8[((unint64_t)*a2 >> 6) & 0x1F]);
  sub_21DF1AF28(v12, "srcA");
  sub_21DF34E94(&v25, (const void **)v12, off_24E1E8CA8[(unsigned __int16)*a2 >> 11]);
  sub_21DF1AF28(v10, "dstA");
  sub_21DF34E94(&v26, (const void **)v10, off_24E1E8CA8[*((_WORD *)a2 + 1) & 0x1F]);
  sub_21DF1AF28(v8, "equation");
  sub_21DF34E94(&v27, (const void **)v8, off_24E1E8D48[((unint64_t)*a2 >> 21) & 7]);
  sub_21DF1AF28(__p, "equationA");
  sub_21DF34E94(&v28, (const void **)__p, off_24E1E8D48[*((_BYTE *)a2 + 3) & 7]);
  sub_21DF34EE8(a1, (uint64_t)v20, (uint64_t)&v22, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v28.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v28.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_21DF355E8(std::string *a1, _DWORD *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v19, "AGCDrawBuffer");
  sub_21DF1AF28(v17, "pbeSourceFormat");
  sub_21DF34E94(&v21, (const void **)v17, off_24E1E8D80[*a2 & 0x1F]);
  sub_21DF1AF28(v15, "numWrittenComponents");
  sub_21DF34E40(&v22, (const void **)v15, *a2 >> 5);
  sub_21DF1AF28(v13, "gammaCorrection");
  sub_21DF34E40(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_21DF1AF28(v11, "colorSpaceConversion");
  sub_21DF34E94(&v24, (const void **)v11, off_24E1E8E38[((unint64_t)*a2 >> 9) & 7]);
  sub_21DF1AF28(v9, "preEmitSwizzle");
  sub_21DF34E94(&v25, (const void **)v9, off_24E1E8E60[((unint64_t)*a2 >> 12) & 7]);
  sub_21DF1AF28(v7, "outputPartitionOffset");
  sub_21DF34E40(&v26, (const void **)v7, (*a2 >> 15));
  sub_21DF1AF28(__p, "unused");
  sub_21DF34E40(&v27, (const void **)__p, *a2 >> 23);
  sub_21DF34EE8(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
}

uint64_t sub_21DF35850(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = sub_21DF2BBDC(a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_21DF35908(void **a1, std::string::value_type *a2, int a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *p_p;
  std::string __p;
  std::string v14;

  sub_21DF1AF28(&v14, (char *)&unk_21DFAD77A);
  if (a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    sub_21DF205EC(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  if (a2[23] < 0)
  {
    v7 = a2;
    a2 = *(std::string::value_type **)a2;
    v6 = *((_QWORD *)v7 + 1);
    if (!v6)
      goto LABEL_19;
  }
  else
  {
    v6 = a2[23];
    if (!a2[23])
      goto LABEL_19;
  }
  do
  {
    v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        size = v14.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  sub_21DF2BBDC((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF35A70(llvm::CallBase *this)
{
  int v2;
  uint64_t NumSubclassExtraOperandsDynamic;
  uint64_t Descriptor;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v2 == 39)
  {
    NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    NumSubclassExtraOperandsDynamic = 2;
  }
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
  {
    Descriptor = 0;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  Descriptor = llvm::User::getDescriptor(this);
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    goto LABEL_9;
  v11 = llvm::User::getDescriptor(this);
  v5 = v11 + v12;
LABEL_10:
  if (((v5 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    v6 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    v7 = llvm::User::getDescriptor(this);
    v9 = (*(_DWORD *)(v7 + v8 - 4) - v6);
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
}

void sub_21DF35B3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3D00);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3D00))
    {
      qword_2553B3CE0 = 0;
      *(_QWORD *)&dword_2553B3CE8 = 0;
      qword_2553B3CF0 = 0x3000000000;
      __cxa_atexit((void (*)(void *))sub_21DF35BA4, &qword_2553B3CE0, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3D00);
    }
  }
}

uint64_t sub_21DF35BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 49));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF35C1C(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int i;
  _QWORD *String;
  size_t v19;
  size_t v20;
  int Key;
  BOOL v24;

  sub_21DF35E18();
  sub_21DF35E80();
  result = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16));
  *a5 = result;
  a5[1] = v11;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    v12 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 8);
  else
    v12 = *(_DWORD *)(a1 + 8);
  v13 = v12 > 6;
  if (v12 <= 6)
    v14 = 0;
  else
    v14 = 3;
  *a4 = v14;
  *a3 = v13;
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 < 4)
    goto LABEL_38;
  v16 = 2;
  for (i = 3; i < v15; ++i)
  {
    String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * v15 + 8 * i));
    v20 = v19;
    Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)dword_2553B3DC0)
    {
      result = (uint64_t)sub_21DF35EE8(String, v20);
      *a3 = *(_DWORD *)(*(_QWORD *)result + 8);
      goto LABEL_36;
    }
    result = llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1 && (int)result != (unint64_t)dword_2553B3DE8)
    {
      result = (uint64_t)sub_21DF35FEC(String, v20);
      *a4 = *(_DWORD *)(*(_QWORD *)result + 8);
      goto LABEL_36;
    }
    if (v20 == 12)
    {
      if (*String == 0x5F6772612E726961 && *((_DWORD *)String + 2) == 1701667182)
LABEL_35:
        i = v16 + 2;
    }
    else if (v20 == 17)
    {
      v24 = *String == 0x5F6772612E726961 && String[1] == 0x6D616E5F65707974;
      if (v24 && *((_BYTE *)String + 16) == 101)
        goto LABEL_35;
    }
LABEL_36:
    v16 = i;
    v15 = *(_DWORD *)(a2 + 8);
  }
  v13 = *a3;
LABEL_38:
  if (v13 == 1 && *a4 != 3)
    *a4 = 3;
  return result;
}

void sub_21DF35E18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3DD8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3DD8))
    {
      qword_2553B3DB8 = 0;
      *(_QWORD *)&dword_2553B3DC0 = 0;
      qword_2553B3DC8 = 0x1000000000;
      __cxa_atexit((void (*)(void *))sub_21DF36168, &qword_2553B3DB8, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3DD8);
    }
  }
}

void sub_21DF35E80()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3E00);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3E00))
    {
      qword_2553B3DE0 = 0;
      *(_QWORD *)&dword_2553B3DE8 = 0;
      qword_2553B3DF0 = 0x1000000000;
      __cxa_atexit((void (*)(void *))sub_21DF360F0, &qword_2553B3DE0, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3E00);
    }
  }
}

uint64_t *sub_21DF35EE8(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3DB8 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3DC8) = qword_2553B3DC8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_2553B3DC4;
  for (i = (uint64_t *)(qword_2553B3DB8
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3DB8));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_21DF35FEC(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3DE0 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3DF0) = qword_2553B3DF0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_2553B3DEC;
  for (i = (uint64_t *)(qword_2553B3DE0
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3DE0));
        !*i || *i == -8;
  return i;
}

uint64_t sub_21DF360F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF36168(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

__n128 sub_21DF361E0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  __n128 result;

  v3 = sub_21DF3626C(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1 + (v5 << 6);
  v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)v6 = v7;
  v8 = (_BYTE *)(v6 + 24);
  if (*(char *)(v3 + 47) < 0)
  {
    sub_21DF205EC(v8, *(void **)(v3 + 24), *(_QWORD *)(v3 + 32));
  }
  else
  {
    v9 = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(v3 + 40);
    *(_OWORD *)v8 = v9;
  }
  result = *(__n128 *)(v3 + 48);
  *(__n128 *)(v4 + (v5 << 6) + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_21DF3626C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + (v3 << 6);
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_21DF362D0((uint64_t *)a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_21DF362D0((uint64_t *)a1);
    }
  }
  return v2;
}

void sub_21DF362D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2;
  v4 = (char *)*a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = &v4[64 * v5];
    v7 = v2;
    do
    {
      v8 = *(_OWORD *)v4;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)v7 = v8;
      v9 = *(_OWORD *)(v4 + 24);
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v4 + 5);
      *(_OWORD *)(v7 + 24) = v9;
      *((_QWORD *)v4 + 4) = 0;
      *((_QWORD *)v4 + 5) = 0;
      *((_QWORD *)v4 + 3) = 0;
      *(_OWORD *)(v7 + 48) = *((_OWORD *)v4 + 3);
      v4 += 64;
      v7 += 64;
    }
    while (v4 != v6);
    v4 = (char *)*a1;
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        if (v4[v11 - 17] < 0)
          operator delete(*(void **)&v4[v11 - 40]);
        v11 -= 64;
      }
      while (v11);
      v4 = (char *)*a1;
    }
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = v3;
  *((_DWORD *)a1 + 3) = 0;
}

void sub_21DF363B8(_QWORD *a1)
{
  sub_21DF38FCC(a1);
  JUMPOUT(0x2207A7960);
}

llvm::User *sub_21DF363DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type ***v22;
  uint64_t Select;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  llvm::Instruction *v27;
  uint64_t FCmpHelper;
  uint64_t FirstInsertionPt;
  llvm::User *v30;
  llvm::BasicBlock *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  _BYTE v38[32];
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;
  uint64_t *v42;

  v42 = a2;
  v4 = *a2;
  v6 = 1120;
  if (*a2 == a1[20])
    v6 = 1112;
  v5 = a1[43];
  v7 = *(_QWORD *)(v5 + v6);
  if (v7)
    v8 = strlen(*(const char **)(v5 + v6));
  else
    v8 = 0;
  v9 = sub_21DF203DC((uint64_t)a1, v7, v8, v4, v4);
  v36 = llvm::ConstantFP::get();
  v33 = llvm::ConstantFP::get();
  sub_21DF38804((uint64_t)a1, a2);
  v10 = (uint64_t)(a1 + 1);
  v11 = a1[7];
  v32 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v12 = operator new();
  llvm::BasicBlock::BasicBlock();
  v40[0] = "not_less_than_one";
  v13 = operator new();
  llvm::BasicBlock::BasicBlock();
  v35 = v12;
  a1[7] = v12;
  a1[8] = v12 + 40;
  v41 = 257;
  v14 = sub_21DF191A4((uint64_t)(a1 + 1), *(_QWORD *)(v9 + 24), v9, (uint64_t)&v42, 1, (uint64_t)v40);
  v39 = 257;
  v34 = sub_21DF20300((uint64_t)(a1 + 1), (uint64_t)v14, (uint64_t)v42, (uint64_t)v38);
  sub_21DF38D0C(a1 + 1);
  a1[7] = v13;
  a1[8] = v13 + 40;
  v41 = 257;
  v15 = (uint64_t *)sub_21DF38C30((uint64_t)(a1 + 1), v36, (uint64_t)v42, (uint64_t)v40);
  v37 = sub_21DF38804((uint64_t)a1, v15);
  v41 = 257;
  v16 = sub_21DF191A4((uint64_t)(a1 + 1), *(_QWORD *)(v9 + 24), v9, (uint64_t)&v37, 1, (uint64_t)v40);
  v39 = 257;
  v17 = sub_21DF20300((uint64_t)(a1 + 1), (uint64_t)v16, (uint64_t)v37, (uint64_t)v38);
  v41 = 257;
  v18 = sub_21DF20828((uint64_t)(a1 + 1), v33, v17, (uint64_t)v40);
  v19 = 23;
  if (v4 == a1[20])
    v19 = 24;
  v20 = a1[v19];
  v21 = llvm::ConstantInt::get();
  v41 = 257;
  v22 = (llvm::Type ***)sub_21DF1A79C((uint64_t)(a1 + 1), 49, (uint64_t)v15, v20, (uint64_t)v40);
  v39 = 257;
  sub_21DF19478(a1 + 1, 40, v22, v21, (uint64_t)v38);
  v41 = 257;
  sub_21DF389F8((uint64_t)(a1 + 1), v18, (uint64_t)v40);
  v39 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  sub_21DF38D0C(a1 + 1);
  v24 = *(_QWORD *)(v11 + 40);
  if (v24 == v11 + 40)
  {
    v27 = 0;
  }
  else
  {
    v25 = (llvm::Instruction *)(v24 - 24);
    if (v24)
      v26 = v24 - 24;
    else
      v26 = 0;
    if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
      v27 = 0;
    else
      v27 = v25;
  }
  llvm::Instruction::eraseFromParent(v27);
  a1[7] = v11;
  a1[8] = v11 + 40;
  v41 = 257;
  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  sub_21DF38D70(a1 + 1, FCmpHelper, v35, v13);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v32);
  sub_21DF19018(v10, (uint64_t)v32, FirstInsertionPt);
  v41 = 257;
  v30 = sub_21DF38DEC(v10, v4, 2, (uint64_t)v40);
  sub_21DF38EDC(v30, v34, v35);
  sub_21DF38EDC(v30, Select, v13);
  return v30;
}

uint64_t sub_21DF367D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Select;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;

  llvm::ConstantFP::get();
  v4 = llvm::ConstantFP::get();
  v5 = llvm::ConstantFP::get();
  v18 = 257;
  v6 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v17);
  v16 = 257;
  v7 = (uint64_t *)sub_21DF20828(a1 + 8, v4, v6, (uint64_t)v15);
  v8 = sub_21DF38B68(a1, v7);
  v18 = 257;
  v9 = sub_21DF2074C(a1 + 8, v4, a2, (uint64_t)v17);
  v18 = 257;
  v10 = sub_21DF38C30(a1 + 8, v4, (uint64_t)v8, (uint64_t)v17);
  v18 = 257;
  sub_21DF20300(a1 + 8, v10, v9, (uint64_t)v17);
  v18 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v18 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v18 = 257;
  v12 = sub_21DF38C30(a1 + 8, v4, Select, (uint64_t)v17);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v12);
  v16 = 257;
  return sub_21DF20300(a1 + 8, v5, v13, (uint64_t)v15);
}

uint64_t sub_21DF36968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  _BYTE v15[32];
  __int16 v16;

  v4 = llvm::ConstantFP::get();
  v5 = llvm::ConstantFP::get();
  v16 = 257;
  v6 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v15);
  v14 = 257;
  v7 = (uint64_t *)sub_21DF20828(a1 + 8, v4, v6, (uint64_t)v13);
  v8 = sub_21DF38B68(a1, v7);
  v16 = 257;
  v9 = sub_21DF2074C(a1 + 8, v4, (uint64_t)v8, (uint64_t)v15);
  v16 = 257;
  v10 = sub_21DF38C30(a1 + 8, a2, v9, (uint64_t)v15);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v10);
  v14 = 257;
  return sub_21DF20300(a1 + 8, v5, v11, (uint64_t)v13);
}

uint64_t sub_21DF36A64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  llvm::Value *v5;
  _BYTE v7[32];
  __int16 v8;

  v3 = a1 + 8;
  v8 = 257;
  v4 = (uint64_t *)sub_21DF389F8(a1 + 8, a2, (uint64_t)v7);
  v5 = sub_21DF38AA0(a1, v4);
  v8 = 257;
  return sub_21DF389F8(v3, (uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_21DF36AC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t FCmpHelper;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::Value *v17;
  uint64_t v19;
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;

  v6 = (uint64_t *)(a1 + 8);
  sub_21DF38804(a1, a3);
  llvm::ConstantFP::get();
  v22 = 257;
  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  v8 = *(_QWORD *)(a1 + 192);
  v22 = 257;
  v9 = sub_21DF388CC((uint64_t)v6, (uint64_t)a3, v8, (uint64_t)v21);
  v10 = llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Type ***)sub_21DF1A410((uint64_t)v6, v9, v10, (uint64_t)v21);
  v12 = llvm::ConstantInt::get();
  v20 = 257;
  v13 = sub_21DF19478(v6, 32, v11, v12, (uint64_t)&v19);
  v22 = 257;
  v14 = sub_21DF1A410((uint64_t)v6, v13, FCmpHelper, (uint64_t)v21);
  llvm::ConstantFP::get();
  v22 = 257;
  v15 = llvm::IRBuilderBase::CreateFCmpHelper();
  v22 = 257;
  sub_21DF1A410((uint64_t)v6, v15, v14, (uint64_t)v21);
  v16 = (uint64_t *)sub_21DF38804(a1, a2);
  v17 = sub_21DF38924(a1, v16, (uint64_t)a3);
  v22 = 257;
  sub_21DF389F8((uint64_t)v6, (uint64_t)v17, (uint64_t)v21);
  v20 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF36C88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  _BYTE v13[32];
  __int16 v14;
  uint64_t *v15;

  v15 = a2;
  v4 = a1[43];
  v5 = *(_QWORD *)(v4 + 1160);
  if (v5)
    v6 = strlen(*(const char **)(v4 + 1160));
  else
    v6 = 0;
  v7 = sub_21DF203DC((uint64_t)a1, v5, v6, a1[24], a1[20]);
  sub_21DF38804((uint64_t)a1, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  v14 = 257;
  v8 = sub_21DF191A4((uint64_t)(a1 + 1), **(_QWORD **)(*(_QWORD *)v7 + 16), v7, (uint64_t)&v15, 1, (uint64_t)v13);
  v9 = a1[20];
  v12 = 257;
  sub_21DF2053C((uint64_t)(a1 + 1), (uint64_t)v8, v9, (uint64_t)v11);
  v14 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF36DAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD v8[20];
  _BYTE v9[32];
  __int16 v10;

  v4 = *a2;
  llvm::ConstantFP::get();
  sub_21DF38804(a1, a2);
  v10 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v5 = *(_QWORD *)(a1 + 192);
  v10 = 257;
  v6 = sub_21DF388CC(a1 + 8, (uint64_t)a2, v5, (uint64_t)v9);
  v8[16] = 257;
  sub_21DF2053C(a1 + 8, v6, v4, (uint64_t)v8);
  v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF36EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v6 = *(unsigned __int8 *)(a3 + 1);
  if (v6 == 16)
  {
    v9 = *(_QWORD *)(a1 + 344);
    v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v16 = *(_DWORD *)(a1 + 104);
    v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 80))(v9, &v14, a2, 16, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v15)
    {
LABEL_7:
      v10 = *(_QWORD *)(a1 + 192);
      v13 = 257;
      return sub_21DF1A79C(a1 + 8, 49, v8, v10, (uint64_t)v12);
    }
LABEL_6:
    llvm::MetadataTracking::untrack();
    goto LABEL_7;
  }
  if (v6 == 8)
  {
    v7 = *(_QWORD *)(a1 + 344);
    v17 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v19 = *(_DWORD *)(a1 + 104);
    v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 80))(v7, &v17, a2, 8, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v18)
      goto LABEL_7;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_21DF36FD8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  __int16 v21;

  v5 = a3[1];
  if (v5 == 16)
  {
    v10 = *(_QWORD *)(a1 + 232);
    v21 = 257;
    v11 = sub_21DF1A79C(a1 + 8, 49, a2, v10, (uint64_t)v20);
    v12 = *(_QWORD *)(a1 + 344);
    v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v16 = *(_DWORD *)(a1 + 104);
    v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 88))(v12, &v14, v11, 16, a3[3], 32);
    if (!v15)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5 != 8)
    return 0;
  v6 = *(_QWORD *)(a1 + 280);
  v21 = 257;
  v7 = sub_21DF1A79C(a1 + 8, 49, a2, v6, (uint64_t)v20);
  v8 = *(_QWORD *)(a1 + 344);
  v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v19 = *(_DWORD *)(a1 + 104);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 88))(v8, &v17, v7, 8, a3[3], 32);
  if (v18)
LABEL_6:
    llvm::MetadataTracking::untrack();
LABEL_7:
  if (*a3 == 16)
    return sub_21DF79090((_QWORD *)a1, v9, *(_QWORD *)(a1 + 152));
  return v9;
}

uint64_t sub_21DF37158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  __int16 v26;

  v4 = llvm::UndefValue::get();
  v26 = 257;
  v5 = llvm::ConstantInt::get();
  v6 = sub_21DF79584(a1 + 8, a2, v5, (uint64_t)v25);
  v7 = *(_QWORD *)(a1 + 344);
  v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v24 = *(_DWORD *)(a1 + 104);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 80))(v7, &v22, v6, 8, 0, 1);
  v26 = 257;
  v9 = llvm::ConstantInt::get();
  v10 = sub_21DF7980C(a1 + 8, v4, v8, v9, (uint64_t)v25);
  if (v23)
    llvm::MetadataTracking::untrack();
  for (i = 0; i != 3; ++i)
  {
    v26 = 257;
    v12 = llvm::ConstantInt::get();
    v13 = sub_21DF79584(a1 + 8, a2, v12, (uint64_t)v25);
    v14 = *(_QWORD *)(a1 + 344);
    v19 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v21 = *(_DWORD *)(a1 + 104);
    v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 136))(v14, &v19, v13, 0, *(_QWORD *)(a1 + 176));
    if (v20)
      llvm::MetadataTracking::untrack();
    v26 = 257;
    v16 = llvm::ConstantInt::get();
    v10 = sub_21DF7980C(a1 + 8, v10, v15, v16, (uint64_t)v25);
  }
  v17 = *(_QWORD *)(a1 + 192);
  v26 = 257;
  return sub_21DF1A79C(a1 + 8, 49, v10, v17, (uint64_t)v25);
}

uint64_t sub_21DF37358(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  llvm::IRBuilderBase *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[32];
  __int16 v38;

  if (a4 > 4)
  {
    v10 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v10 == 1983145521)
    {
      v11 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v10 < 0x76346631)
    {
      v11 = -1;
    }
    else
    {
      v11 = 1;
    }
    v5 = (llvm::IRBuilderBase *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 280);
    v38 = 257;
    v13 = sub_21DF1A79C(a1 + 8, 49, a2, v12, (uint64_t)v37);
    v14 = v11 == 0;
    v7 = v13;
    v8 = v14;
    if (v14)
      v9 = 16;
    else
      v9 = 32;
  }
  else
  {
    v5 = (llvm::IRBuilderBase *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 280);
    v38 = 257;
    v7 = sub_21DF1A79C(a1 + 8, 49, a2, v6, (uint64_t)v37);
    v8 = 0;
    v9 = 32;
  }
  v15 = llvm::UndefValue::get();
  v16 = *(_QWORD *)(a1 + 344);
  v34 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v5);
  v36 = *(_DWORD *)(a1 + 104);
  v38 = 257;
  v17 = llvm::ConstantInt::get();
  v18 = v7;
  v19 = sub_21DF79584(a1 + 8, v7, v17, (uint64_t)v37);
  v20 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 88))(v16, &v34, v19, 8, 0, v9);
  if (v35)
    llvm::MetadataTracking::untrack();
  v38 = 257;
  v21 = llvm::ConstantInt::get();
  v22 = sub_21DF7980C(a1 + 8, v15, v20, v21, (uint64_t)v37);
  v23 = 0;
  if (v8)
    v24 = 152;
  else
    v24 = 160;
  do
  {
    v38 = 257;
    v25 = llvm::ConstantInt::get();
    v26 = sub_21DF79584(a1 + 8, v18, v25, (uint64_t)v37);
    v27 = *(_QWORD *)(a1 + 344);
    v31 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(v5);
    v33 = *(_DWORD *)(a1 + 104);
    v28 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 144))(v27, &v31, v26, 0, *(_QWORD *)(a1 + v24));
    if (v32)
      llvm::MetadataTracking::untrack();
    v38 = 257;
    v29 = llvm::ConstantInt::get();
    result = sub_21DF7980C(a1 + 8, v22, v28, v29, (uint64_t)v37);
    v22 = result;
    ++v23;
  }
  while (v23 != 3);
  return result;
}

uint64_t sub_21DF37608(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const std::string::value_type *v15;
  uint64_t v16;
  const std::string::value_type **v17;
  char v18;
  int v19;
  const std::string::value_type *v20;
  int *v21;
  const std::string::value_type *v22;
  const char *v23;
  const char *v24;
  int v25;
  std::string *v26;
  std::string::size_type size;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *p_str;
  char *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  char *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string *v47;
  std::string *v48;
  char *v49;
  std::string *v50;
  std::string::size_type v51;
  int Key;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  llvm::IRBuilderBase *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::APInt *v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  llvm::APInt *v91;
  unsigned int v92;
  BOOL v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::APInt *v102;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  __int16 v113;
  __int16 v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  _OWORD v118[2];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  int v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  std::string v134;
  std::string __str;
  std::string v136;
  __int16 v137;

  v4 = *(_QWORD *)*a2;
  v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 & 0xFE;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 344) + 1649))
    goto LABEL_6;
  v7 = *(_DWORD *)(v4 + 8);
  if (v6 == 18)
    v7 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  if ((v7 & 0xFFFFFF00) != 0x100)
  {
LABEL_6:
    if (v6 == 18)
      v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
    v8 = v5 & 0xFFFFFF00;
    v9 = *(_QWORD *)(a1 + 704);
    if (v8 == 256)
    {
      if (v9)
        *(_BYTE *)(v9 + 9) = 1;
    }
    else if (v9)
    {
      *(_BYTE *)(v9 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 720) = 0;
  }
  v10 = atomic_load((unsigned __int8 *)&qword_2553B3280);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3280))
  {
    qword_2553B3260 = 0;
    *(_QWORD *)&dword_2553B3268 = 0;
    qword_2553B3270 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_21DF3868C, &qword_2553B3260, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B3280);
  }
  v117 = a1;
  v11 = dword_2553B326C;
  if (!dword_2553B326C)
  {
    v12 = 0;
    memset(&v136, 0, sizeof(v136));
    v13 = ".s";
    v14 = ".u";
    v119 = *(_QWORD *)".xchg.i32";
    qmemcpy(v118, ".load.i3.store.i.cmpxchg.weak.i3", sizeof(v118));
    v15 = ".i32";
    do
    {
      LODWORD(v120) = v11;
      sub_21DF1AF28(&__str, off_24E1E91F8[v12]);
      v16 = 0;
      do
      {
        v121 = v16;
        v17 = (const std::string::value_type **)&(&off_24E1E9188)[2 * v16];
        v18 = 1;
        do
        {
          std::string::operator=(&v136, &__str);
          std::string::append(&v136, *v17);
          v19 = v18 & 1;
          if ((v18 & 1) != 0)
            v20 = v14;
          else
            v20 = v13;
          if ((v18 & 1) != 0)
            v21 = (int *)v17 + 3;
          else
            v21 = (int *)(v17 + 1);
          std::string::append(&v136, v20);
          std::string::append(&v136, v15);
          v22 = v15;
          v23 = v14;
          v24 = v13;
          v25 = *v21;
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v136;
          else
            v26 = (std::string *)v136.__r_.__value_.__r.__words[0];
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          else
            size = v136.__r_.__value_.__l.__size_;
          v18 = 0;
          v28 = *sub_21DF38704(v26, size);
          *(_DWORD *)(v28 + 8) = 0;
          *(_DWORD *)(v28 + 12) = v25;
          v13 = v24;
          v14 = v23;
          v15 = v22;
        }
        while (v19);
        v16 = v121 + 1;
      }
      while (v121 != 6);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v29 = __str.__r_.__value_.__l.__size_;
      sub_21DF2BBDC((uint64_t)&v134, v29 + 9);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v134;
      else
        v30 = (std::string *)v134.__r_.__value_.__r.__words[0];
      if (v29)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v30, p_str, v29);
      }
      v32 = (char *)v30 + v29;
      *(_QWORD *)v32 = v119;
      *((_WORD *)v32 + 4) = 50;
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136 = v134;
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v136;
      else
        v33 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      else
        v34 = v136.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF38704(v33, v34) + 8) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v35 = __str.__r_.__value_.__l.__size_;
      sub_21DF2BBDC((uint64_t)&v134, v35 + 17);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v134;
      else
        v36 = (std::string *)v134.__r_.__value_.__r.__words[0];
      if (v35)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__str;
        else
          v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v36, v37, v35);
      }
      v38 = (char *)v36 + v35;
      *(_OWORD *)v38 = v118[1];
      *((_WORD *)v38 + 8) = 50;
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136 = v134;
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v136;
      else
        v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      else
        v40 = v136.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF38704(v39, v40) + 8) = 0xD00000001;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v41 = __str.__r_.__value_.__l.__size_;
      sub_21DF2BBDC((uint64_t)&v134, v41 + 10);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v134;
      else
        v42 = (std::string *)v134.__r_.__value_.__r.__words[0];
      if (v41)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &__str;
        else
          v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v42, v43, v41);
      }
      *(std::string::size_type *)((char *)v42->__r_.__value_.__r.__words + v41) = *((_QWORD *)&v118[0] + 1);
      strcpy(&v42->__r_.__value_.__s.__data_[v41 + 8], "32");
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136 = v134;
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v136;
      else
        v44 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      else
        v45 = v136.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF38704(v44, v45) + 8) = 0xD00000003;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v46 = __str.__r_.__value_.__l.__size_;
      sub_21DF2BBDC((uint64_t)&v134, v46 + 9);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v134;
      else
        v47 = (std::string *)v134.__r_.__value_.__r.__words[0];
      if (v46)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &__str;
        else
          v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v47, v48, v46);
      }
      v49 = (char *)v47 + v46;
      *(_QWORD *)v49 = *(_QWORD *)&v118[0];
      *((_WORD *)v49 + 4) = 50;
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v136 = v134;
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v136;
      else
        v50 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      else
        v51 = v136.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF38704(v50, v51) + 8) = 0xD00000002;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v11 = 1;
      v12 = 1;
      v15 = v22;
    }
    while ((v120 & 1) == 0);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
  }
  Key = llvm::StringMapImpl::FindKey();
  v53 = Key;
  if (Key == -1)
    v53 = dword_2553B3268;
  v54 = *(_QWORD *)(qword_2553B3260 + 8 * v53);
  switch(*(_DWORD *)(v54 + 8))
  {
    case 0:
      v55 = (_QWORD *)*a2;
      v56 = a2[3];
      v115 = a2;
      v57 = (uint64_t *)a2[1];
      v58 = *(_QWORD *)(v117 + 344);
      v131 = *(_OWORD *)(v117 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v117 + 8));
      v133 = *(_DWORD *)(v117 + 104);
      v59 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t))(*(_QWORD *)v58 + 64))(v58, &v131, v55, v56);
      if (v132)
        llvm::MetadataTracking::untrack();
      v60 = sub_21DF38434((uint64_t *)(v117 + 8), *(unsigned int *)(v54 + 12), v59, v57);
      v61 = v60;
      v62 = v115[4];
      goto LABEL_150;
    case 1:
      v64 = (_QWORD *)*a2;
      v63 = a2[1];
      v137 = 257;
      v65 = (llvm::IRBuilderBase *)(v117 + 8);
      v121 = v63;
      v120 = sub_21DF19394((uint64_t *)(v117 + 8), **(llvm::Type ***)(*(_QWORD *)v63 + 16), v63, 0, (uint64_t)&v136);
      v66 = a2[3];
      v67 = (_QWORD *)(v66 + 24);
      if (*(_DWORD *)(v66 + 32) >= 0x41u)
        v67 = (_QWORD *)*v67;
      v68 = *(_DWORD *)v67;
      if ((v68 - 2) >= 4)
        v69 = 2;
      else
        v69 = v68 + 2;
      LODWORD(v119) = v69;
      v70 = (uint64_t *)a2[2];
      v71 = a2[5];
      v116 = a2;
      v72 = *(_QWORD *)(v117 + 344);
      v128 = *(_OWORD *)(v117 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(v65);
      v130 = *(_DWORD *)(v117 + 104);
      (*(void (**)(uint64_t, __int128 *, _QWORD *, uint64_t))(*(_QWORD *)v72 + 64))(v72, &v128, v64, v71);
      if (v129)
        llvm::MetadataTracking::untrack();
      Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(v117 + 56));
      DataLayout = llvm::Module::getDataLayout(Module);
      sub_21DF1B320(DataLayout, *v70);
      v136.__r_.__value_.__r.__words[0] = (unint64_t)(v75 + 7) >> 3;
      v136.__r_.__value_.__l.__size_ = v76 == 1;
      llvm::TypeSize::operator unsigned long long();
      v77 = llvm::User::operator new((llvm::User *)0x40);
      llvm::AtomicCmpXchgInst::AtomicCmpXchgInst();
      v137 = 257;
      (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)(v117 + 88) + 16))(*(_QWORD *)(v117 + 88), v77, &v136, *(_QWORD *)(v117 + 56), *(_QWORD *)(v117 + 64));
      v78 = *(unsigned int *)(v117 + 16);
      if ((_DWORD)v78)
      {
        v79 = *(_QWORD *)(v117 + 8);
        v80 = v79 + 16 * v78;
        do
        {
          llvm::Instruction::setMetadata();
          v79 += 16;
        }
        while (v79 != v80);
      }
      v81 = v116[6];
      if (v81 && *(_BYTE *)(v81 + 16) == 16)
      {
        v82 = (llvm::APInt *)(v81 + 24);
        v83 = *(_DWORD *)(v81 + 32);
        if (v83 > 0x40)
          v84 = llvm::APInt::countLeadingZerosSlowCase(v82) == v83;
        else
          v84 = *(_QWORD *)v82 == 0;
        v111 = v84;
        *(_WORD *)(v77 + 18) = *(_WORD *)(v77 + 18) & 0xFFFE | v111 ^ 1;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      v137 = 257;
      v61 = sub_21DF1ACD0((uint64_t)v65, v77, (uint64_t)&__str, 1, (uint64_t)&v136);
      sub_21DF385B0((uint64_t *)v65, (llvm::Type **)v61, v121, 0);
      return v61;
    case 2:
      v85 = a2[2];
      v86 = (_QWORD *)*a2;
      v87 = a2;
      v88 = *(_QWORD *)*a2;
      v89 = *(_DWORD *)(v88 + 8);
      if ((v89 & 0xFE) == 0x12)
        v89 = *(_DWORD *)(**(_QWORD **)(v88 + 16) + 8);
      if ((v89 & 0xFFFFFF00) == 0x300)
      {
        v137 = 257;
        v61 = sub_21DF19394((uint64_t *)(v117 + 8), **(llvm::Type ***)(v88 + 16), (uint64_t)v86, 0, (uint64_t)&v136);
        v90 = v87[3];
        if (v90 && *(_BYTE *)(v90 + 16) == 16)
        {
          v91 = (llvm::APInt *)(v90 + 24);
          v92 = *(_DWORD *)(v90 + 32);
          if (v92 > 0x40)
            v93 = llvm::APInt::countLeadingZerosSlowCase(v91) == v92;
          else
            v93 = *(_QWORD *)v91 == 0;
          v113 = v93;
          *(_WORD *)(v61 + 18) = *(_WORD *)(v61 + 18) & 0xFFFE | v113 ^ 1;
        }
      }
      else
      {
        v105 = *(_QWORD *)(v117 + 344);
        v125 = *(_OWORD *)(v117 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v117 + 8));
        v127 = *(_DWORD *)(v117 + 104);
        v106 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t))(*(_QWORD *)v105 + 64))(v105, &v125, v86, v85);
        if (v126)
          llvm::MetadataTracking::untrack();
        v107 = (uint64_t *)llvm::ConstantInt::get();
        v60 = sub_21DF38434((uint64_t *)(v117 + 8), 1, v106, v107);
        v61 = v60;
        v62 = v87[3];
LABEL_150:
        sub_21DF38544(v60, v62);
      }
      return v61;
    case 3:
      v94 = (_QWORD *)*a2;
      v95 = a2[3];
      v96 = a2;
      v97 = (uint64_t *)a2[1];
      v98 = *(_DWORD *)(*(_QWORD *)*a2 + 8);
      if ((v98 & 0xFE) == 0x12)
        v98 = *(_DWORD *)(**(_QWORD **)(*v94 + 16) + 8);
      if ((v98 & 0xFFFFFF00) != 0x300)
      {
        v108 = *(_QWORD *)(v117 + 344);
        v122 = *(_OWORD *)(v117 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v117 + 8));
        v124 = *(_DWORD *)(v117 + 104);
        v109 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t))(*(_QWORD *)v108 + 64))(v108, &v122, v94, v95);
        if (v123)
          llvm::MetadataTracking::untrack();
        v110 = sub_21DF38434((uint64_t *)(v117 + 8), 0, v109, v97);
        sub_21DF38544(v110, v96[4]);
        return 0;
      }
      v99 = sub_21DF385B0((uint64_t *)(v117 + 8), (llvm::Type **)a2[1], *a2, 0);
      v100 = a2[4];
      if (!v100 || *(_BYTE *)(v100 + 16) != 16)
        return 0;
      v101 = v99;
      v102 = (llvm::APInt *)(v100 + 24);
      v103 = *(_DWORD *)(v100 + 32);
      if (v103 > 0x40)
        v104 = llvm::APInt::countLeadingZerosSlowCase(v102) == v103;
      else
        v104 = *(_QWORD *)v102 == 0;
      v114 = v104;
      v61 = 0;
      *(_WORD *)(v101 + 18) = *(_WORD *)(v101 + 18) & 0xFFFE | v114 ^ 1;
      return v61;
    default:
      return 0;
  }
}

uint64_t sub_21DF3827C()
{
  return 0;
}

uint64_t sub_21DF38284()
{
  return 0;
}

uint64_t sub_21DF3828C()
{
  return 0;
}

uint64_t sub_21DF38294()
{
  return 0;
}

uint64_t sub_21DF3829C()
{
  return 0;
}

uint64_t sub_21DF382A4()
{
  return 0;
}

uint64_t sub_21DF382AC()
{
  return 0;
}

uint64_t sub_21DF382B4()
{
  return 0;
}

uint64_t sub_21DF382BC()
{
  return 0;
}

uint64_t sub_21DF382C4()
{
  return 0;
}

uint64_t sub_21DF382CC()
{
  return 0;
}

uint64_t sub_21DF382D4()
{
  return 0;
}

uint64_t sub_21DF382DC()
{
  return 0;
}

uint64_t sub_21DF382E4()
{
  return 0;
}

uint64_t sub_21DF382EC()
{
  return 0;
}

uint64_t sub_21DF382F4()
{
  return 0;
}

uint64_t sub_21DF382FC()
{
  return 0;
}

uint64_t sub_21DF38304()
{
  return 0;
}

uint64_t sub_21DF3830C()
{
  return 0;
}

uint64_t sub_21DF38314()
{
  return 0;
}

uint64_t sub_21DF3831C()
{
  return 0;
}

uint64_t sub_21DF38324()
{
  return 0;
}

uint64_t sub_21DF3834C()
{
  return 0;
}

llvm::Value *sub_21DF38354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v2 = *(_QWORD *)(a1 + 344);
  if (*(_QWORD *)(v2 + 888))
    strlen(*(const char **)(v2 + 888));
  v3 = sub_21DF206CC();
  v6 = 257;
  return sub_21DF191A4(a1 + 8, **(_QWORD **)(*(_QWORD *)v3 + 16), v3, 0, 0, (uint64_t)v5);
}

uint64_t sub_21DF383D4()
{
  return 0;
}

uint64_t sub_21DF383DC()
{
  return 0;
}

uint64_t sub_21DF383E4()
{
  return 0;
}

uint64_t sub_21DF383EC()
{
  return 0;
}

uint64_t sub_21DF383F4()
{
  return 0;
}

uint64_t sub_21DF383FC()
{
  return 0;
}

uint64_t sub_21DF38404()
{
  return 0;
}

uint64_t sub_21DF3840C()
{
  return 0;
}

uint64_t sub_21DF38434(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  __int16 v16;

  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = llvm::Module::getDataLayout(Module);
  sub_21DF1B320(DataLayout, *a4);
  v15[0] = (unint64_t)(v8 + 7) >> 3;
  v15[1] = v9 == 1;
  llvm::TypeSize::operator unsigned long long();
  v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicRMWInst::AtomicRMWInst();
  v16 = 257;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, v15, a1[6], a1[7]);
  v11 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v11)
  {
    v12 = *a1;
    v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t sub_21DF38544(uint64_t a1, uint64_t a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  BOOL v5;
  __int16 v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 16)
  {
    v3 = (llvm::APInt *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 32);
    if (v4 > 0x40)
      v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
    else
      v5 = *(_QWORD *)v3 == 0;
    v6 = v5;
    *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFFE | v6 ^ 1;
  }
  return a1;
}

uint64_t sub_21DF385B0(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  v14 = 257;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t sub_21DF3868C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_21DF38704(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3260 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3270) = qword_2553B3270 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 17, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  v9[1] = 0;
  *i = (uint64_t)v9;
  ++dword_2553B326C;
  for (i = (uint64_t *)(qword_2553B3260
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3260));
        !*i || *i == -8;
  return i;
}

llvm::Value *sub_21DF38804(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.fabs");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF388CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return sub_21DF1A79C(a1, 42, a2, a3, a4);
}

llvm::Value *sub_21DF38924(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _WORD v10[20];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*a2 == *(_QWORD *)(a1 + 152))
  {
    v8 = "llvm.agx.powr.f16";
LABEL_6:
    v7 = sub_21DF1B0B0(a1, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *(_QWORD *)(a1 + 160))
  {
    v8 = "llvm.agx.powr.f32";
    goto LABEL_6;
  }
  v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

uint64_t sub_21DF389F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    v5 = llvm::UnaryOperator::Create();
    sub_21DF19658(a1, v5);
LABEL_9:
    sub_21DF1A3A4((uint64_t *)a1, v5, a3);
    return v5;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 200))(*(_QWORD *)(a1 + 72));
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
  else
    v6 = 0;
  if (v6)
    goto LABEL_9;
  return v5;
}

llvm::Value *sub_21DF38AA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.floor");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *sub_21DF38B68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.sqrt");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF38C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  v7 = sub_21DF204B4(a1, 21, a2, a3, a4);
  if (!v7)
  {
    v7 = llvm::BinaryOperator::Create();
    sub_21DF19658(a1, v7);
    sub_21DF1A3A4((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_21DF38D0C(uint64_t *a1)
{
  uint64_t v2;
  _BYTE v4[32];
  __int16 v5;

  v2 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  v5 = 257;
  return sub_21DF1A3A4(a1, v2, (uint64_t)v4);
}

uint64_t sub_21DF38D70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x2207A6934](v8, a3, a4, a2, 0);
  v11 = 257;
  return sub_21DF1A3A4(a1, v8, (uint64_t)v10);
}

llvm::User *sub_21DF38DEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  llvm::User *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = (llvm::User *)llvm::User::operator new((llvm::User *)0x40);
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(v7);
  if (sub_21DF195AC((uint64_t)v7))
    sub_21DF19658(a1, (uint64_t)v7);
  (*(void (**)(_QWORD, llvm::User *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v7, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v8 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)a1;
    v10 = v9 + 16 * v8;
    do
    {
      llvm::Instruction::setMetadata();
      v9 += 16;
    }
    while (v9 != v10);
  }
  return v7;
}

_DWORD *sub_21DF38EDC(_DWORD *this, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;

  v5 = this;
  v6 = this[5];
  if ((v6 & 0x7FFFFFF) == this[15])
  {
    this = (_DWORD *)llvm::PHINode::growOperands((llvm::PHINode *)this);
    v6 = v5[5];
  }
  v7 = (v6 + 1) & 0x7FFFFFF;
  v5[5] = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  v8 = (v7 - 1);
  if ((v6 & 0x40000000) != 0)
    v9 = (_DWORD *)*((_QWORD *)v5 - 1);
  else
    v9 = &v5[-8 * v7];
  v10 = &v9[8 * v8];
  if (*(_QWORD *)v10)
  {
    **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  }
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v13 = (_QWORD *)(a2 + 8);
    v12 = v14;
    v15 = &v9[8 * v8];
    *((_QWORD *)v15 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v15 + 2;
    *((_QWORD *)v15 + 2) = v13;
    *v13 = v10;
  }
  v16 = v5[5];
  v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0)
    v18 = (_DWORD *)*((_QWORD *)v5 - 1);
  else
    v18 = &v5[-8 * v17];
  *(_QWORD *)&v18[8 * v5[15] + 2 * (v17 - 1)] = a3;
  return this;
}

_QWORD *sub_21DF38FCC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = off_24E1E8EA0;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 61));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 60));
  v2 = (_QWORD *)a1[45];
  if (v2 != a1 + 47)
    free(v2);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 17));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 16));
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  return a1;
}

llvm::Instruction *sub_21DF39040(uint64_t a1, uint64_t *a2, std::string::size_type a3, std::string::size_type a4)
{
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  int v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string::size_type size;
  uint64_t v19;
  llvm::Instruction *v20;
  void *__p[2];
  uint64_t v23;
  __int16 v24;
  std::string v25;
  std::string v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  sub_21DF1AF28(&v25, "llvm.fma.");
  v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v26, *(_DWORD *)(v8 + 32));
    v10 = std::string::insert(&v26, 0, "v");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v23 >= 0)
      v13 = HIBYTE(v23);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(&v25, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v9 = *(_DWORD *)(v8 + 8);
  }
  v14 = v9 & 0xFE;
  v15 = v8;
  if (v14 == 18)
    v15 = **(_QWORD **)(v8 + 16);
  if (v15 == *(_QWORD *)(a1 + 160))
    v16 = "f32";
  else
    v16 = "f16";
  std::string::append(&v25, v16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v25;
  else
    v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  v19 = sub_21DF1AFD4(a1, (uint64_t)v17, size, v8, v8, v8, v8);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v26.__r_.__value_.__l.__size_ = a3;
  v26.__r_.__value_.__r.__words[2] = a4;
  v24 = 257;
  v20 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v19 + 24), v19, (uint64_t)&v26, 3, (uint64_t)__p);
  llvm::Instruction::setHasAllowReassoc(v20);
  llvm::Instruction::setHasApproxFunc(v20);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v20;
}

llvm::Value *sub_21DF39218(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.rsqrt");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF392E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Select;
  _BYTE v11[32];
  __int16 v12;

  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  v6 = a1 + 8;
  v12 = 257;
  v7 = sub_21DF38C30(a1 + 8, a2, a3, (uint64_t)v11);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v7);
  v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v12 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v12 = 257;
  sub_21DF2074C(v6, v8, Select, (uint64_t)v11);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_21DF3943C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[32];
  __int16 v26;

  v6 = *a2;
  v7 = llvm::ConstantFP::get();
  v26 = 257;
  v8 = (uint64_t *)sub_21DF20300(a1 + 8, (uint64_t)a2, v7, (uint64_t)v25);
  if (a3)
  {
    v9 = llvm::ConstantFP::get();
    v26 = 257;
    v8 = (uint64_t *)sub_21DF2074C(a1 + 8, (uint64_t)v8, v9, (uint64_t)v25);
  }
  v10 = sub_21DF38AA0(a1, v8);
  v26 = 257;
  v11 = sub_21DF20828(a1 + 8, (uint64_t)v8, (uint64_t)v10, (uint64_t)v25);
  v12 = llvm::ConstantFP::get();
  v13 = llvm::ConstantFP::get();
  v26 = 257;
  v14 = sub_21DF20300(a1 + 8, v11, v12, (uint64_t)v25);
  v15 = *(_QWORD *)(a1 + 344);
  if (!*(_BYTE *)(v15 + 1650))
  {
    v26 = 257;
    v16 = sub_21DF20828(a1 + 8, v13, v14, (uint64_t)v25);
    v17 = sub_21DF3961C(a1, v14, v16);
    v26 = 257;
    v18 = sub_21DF20828(a1 + 8, v14, v12, (uint64_t)v25);
    v14 = sub_21DF39700(a1, v17, v18);
    v15 = *(_QWORD *)(a1 + 344);
  }
  v24 = v14;
  v19 = 1128;
  if (v6 == *(_QWORD *)(a1 + 152))
    v19 = 1136;
  v20 = *(_QWORD *)(v15 + v19);
  if (v20)
    v21 = strlen(*(const char **)(v15 + v19));
  else
    v21 = 0;
  v22 = sub_21DF203DC(a1, v20, v21, v6, v6);
  v26 = 257;
  return sub_21DF191A4(a1 + 8, *(_QWORD *)(v22 + 24), v22, (uint64_t)&v24, 1, (uint64_t)v25);
}

uint64_t sub_21DF3961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v8 = (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + *(_QWORD *)(a1 + 704) + 104) & 2) == 0 && v6 == 2;
  v9 = *(_QWORD *)(a1 + 344);
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v9 + 48))(v9, &v12, a2, a3, v8);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t sub_21DF39700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v8 = (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + *(_QWORD *)(a1 + 704) + 104) & 2) == 0 && v6 == 2;
  v9 = *(_QWORD *)(a1 + 344);
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v9 + 56))(v9, &v12, a2, a3, v8);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t sub_21DF397E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = a1 + 8;
  v5 = sub_21DF3943C(a1, a2, 0);
  v6 = sub_21DF3943C(a1, a2, 1);
  v9 = 257;
  return sub_21DF38C30(v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v8);
}

llvm::Value *sub_21DF39850(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int *v5;
  llvm::Type *v6;
  uint64_t v7;
  llvm::Type **v8;
  unsigned int v9;
  uint64_t v11;
  llvm::Type **v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int ScalarSizeInBits;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Type *v22;
  _BYTE v24[32];
  __int16 v25;

  v5 = (unsigned int *)*a2;
  v6 = **(llvm::Type ***)(*(_QWORD *)a3 + 16);
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12 && (v7 = v5[8], (_DWORD)v7 != 1))
  {
    v11 = llvm::UndefValue::get();
    v12 = (llvm::Type **)llvm::UndefValue::get();
    if ((_DWORD)v7)
    {
      v22 = v6;
      for (i = 0; i != v7; ++i)
      {
        v25 = 257;
        v14 = llvm::ConstantInt::get();
        v15 = (uint64_t *)sub_21DF79584((uint64_t)(a1 + 1), (uint64_t)a2, v14, (uint64_t)v24);
        v16 = (uint64_t)sub_21DF3943C((uint64_t)a1, v15, 1);
        ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v5);
        if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v22))
          v16 = sub_21DF79090(a1, v16, (uint64_t)v22);
        v25 = 257;
        v18 = llvm::ConstantInt::get();
        v12 = (llvm::Type **)sub_21DF7980C((uint64_t)(a1 + 1), (uint64_t)v12, v16, v18, (uint64_t)v24);
        v19 = sub_21DF3943C((uint64_t)a1, v15, 0);
        v25 = 257;
        v20 = llvm::ConstantInt::get();
        v11 = sub_21DF7980C((uint64_t)(a1 + 1), v11, (uint64_t)v19, v20, (uint64_t)v24);
      }
    }
    sub_21DF385B0(a1 + 1, v12, a3, 0);
    return (llvm::Value *)v11;
  }
  else
  {
    v8 = (llvm::Type **)sub_21DF3943C((uint64_t)a1, a2, 1);
    v9 = llvm::Type::getScalarSizeInBits((llvm::Type *)v5);
    if (v9 > llvm::Type::getScalarSizeInBits(v6))
      v8 = (llvm::Type **)sub_21DF79090(a1, (uint64_t)v8, (uint64_t)v6);
    sub_21DF385B0(a1 + 1, v8, a3, 0);
    return sub_21DF3943C((uint64_t)a1, a2, 0);
  }
}

llvm::Value *sub_21DF39A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t *v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = a1 + 8;
  v13 = 257;
  v5 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v12);
  v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  v7 = (uint64_t *)sub_21DF20828(v4, v5, v6, (uint64_t)v11);
  v8 = sub_21DF38B68(a1, v7);
  v13 = 257;
  v9 = (uint64_t *)sub_21DF2074C(v4, a2, (uint64_t)v8, (uint64_t)v12);
  return sub_21DF39B38(a1, v9);
}

llvm::Value *sub_21DF39B38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.log");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *sub_21DF39C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t *v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = a1 + 8;
  v13 = 257;
  v5 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v12);
  v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  v7 = (uint64_t *)sub_21DF2074C(v4, v5, v6, (uint64_t)v11);
  v8 = sub_21DF38B68(a1, v7);
  v13 = 257;
  v9 = (uint64_t *)sub_21DF2074C(v4, a2, (uint64_t)v8, (uint64_t)v12);
  return sub_21DF39B38(a1, v9);
}

uint64_t sub_21DF39CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v4 = llvm::ConstantFP::get();
  v12 = 257;
  v5 = sub_21DF2074C(a1 + 8, v4, a2, (uint64_t)v11);
  v12 = 257;
  v6 = sub_21DF20828(a1 + 8, v4, a2, (uint64_t)v11);
  v12 = 257;
  v7 = (uint64_t *)sub_21DF38C30(a1 + 8, v5, v6, (uint64_t)v11);
  v8 = sub_21DF39B38(a1, v7);
  v9 = llvm::ConstantFP::get();
  v12 = 257;
  return sub_21DF20300(a1 + 8, (uint64_t)v8, v9, (uint64_t)v11);
}

uint64_t sub_21DF39D7C(uint64_t a1, uint64_t *a2)
{
  llvm::Value *v4;
  uint64_t *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v10[20];
  _BYTE v11[32];
  __int16 v12;

  v4 = sub_21DF39E24(a1, a2);
  v12 = 257;
  v5 = (uint64_t *)sub_21DF389F8(a1 + 8, (uint64_t)a2, (uint64_t)v11);
  v6 = sub_21DF39E24(a1, v5);
  v12 = 257;
  v7 = sub_21DF2074C(a1 + 8, (uint64_t)v4, (uint64_t)v6, (uint64_t)v11);
  v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return sub_21DF20300(a1 + 8, v7, v8, (uint64_t)v10);
}

llvm::Value *sub_21DF39E24(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.exp");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF39EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::IRBuilderBase *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  llvm::Value *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v6 = (llvm::IRBuilderBase *)(a1 + 8);
  v18 = 257;
  v7 = (uint64_t *)sub_21DF38C30(a1 + 8, a2, a3, (uint64_t)v17);
  v8 = *(_QWORD *)(a1 + 344);
  v19 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v6);
  v9 = *(_DWORD *)(a1 + 104);
  v21 = v9;
  v13 = v19;
  v14 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track();
    v9 = v21;
  }
  v15 = v9;
  v10 = sub_21DF2102C(v8, (uint64_t)&v13, v7, "llvm.trunc");
  if (v14)
    llvm::MetadataTracking::untrack();
  if (v20)
    llvm::MetadataTracking::untrack();
  v18 = 257;
  v11 = sub_21DF20300((uint64_t)v6, (uint64_t)v10, a3, (uint64_t)v17);
  v16 = 257;
  return sub_21DF20828((uint64_t)v6, a2, v11, (uint64_t)&v13);
}

uint64_t sub_21DF3A014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v6 = a1 + 8;
  v13 = 257;
  v7 = (uint64_t *)sub_21DF38C30(a1 + 8, a2, a3, (uint64_t)v12);
  v8 = sub_21DF38AA0(a1, v7);
  v13 = 257;
  v9 = sub_21DF20300(v6, (uint64_t)v8, a3, (uint64_t)v12);
  v11[16] = 257;
  return sub_21DF20828(v6, a2, v9, (uint64_t)v11);
}

uint64_t sub_21DF3A0A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v4 = a1 + 8;
  v5 = sub_21DF38AA0(a1, a2);
  v15 = 257;
  v6 = sub_21DF20828(v4, (uint64_t)a2, (uint64_t)v5, (uint64_t)v14);
  v7 = *a2;
  v8 = *(_DWORD *)(*a2 + 8);
  v9 = v8;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
  if (v9 == 2 && (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + *(_QWORD *)(a1 + 704) + 104) & 4) == 0)
  {
    if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
    if (v8 == 2)
    {
      v10 = llvm::ConstantInt::get();
      v11 = *(_QWORD *)(a1 + 160);
    }
    else
    {
      v10 = llvm::ConstantInt::get();
      v11 = *(_QWORD *)(a1 + 152);
    }
    v15 = 257;
    v12 = sub_21DF1A79C(v4, 49, v10, v11, (uint64_t)v14);
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
      sub_21DF79DF4(a1, *(_DWORD *)(v7 + 32), v12);
    sub_21DF38804(a1, a2);
    v15 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantFP::get();
    v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v6;
}

uint64_t sub_21DF3A248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v5 = a1 + 8;
  v9 = 257;
  v6 = sub_21DF20300(a1 + 8, a2, a3, (uint64_t)v8);
  v9 = 257;
  return sub_21DF2074C(v5, v6, a4, (uint64_t)v8);
}

llvm::Value *sub_21DF3A2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = llvm::ConstantFP::get();
  v8 = 257;
  v5 = (uint64_t *)sub_21DF20300(a1 + 8, a2, v4, (uint64_t)v7);
  return sub_21DF3A304(a1, v5);
}

llvm::Value *sub_21DF3A304(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.exp2");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF3A3CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = llvm::ConstantFP::get();
  v5 = sub_21DF3A43C(a1, a2);
  v8 = 257;
  return sub_21DF20300(a1 + 8, (uint64_t)v5, v4, (uint64_t)v7);
}

llvm::Value *sub_21DF3A43C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 104);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = sub_21DF2102C(v4, (uint64_t)&v11, a2, "llvm.log2");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF3A504(uint64_t a1, uint64_t *a2)
{
  uint64_t Select;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int16 v11;
  _BYTE v12[32];
  __int16 v13;

  sub_21DF38804(a1, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateSelect();
  v11 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v13 = 257;
  v5 = sub_21DF2074C(a1 + 8, (uint64_t)a2, Select, (uint64_t)v12);
  v6 = *(_QWORD *)(a1 + 192);
  v13 = 257;
  v7 = sub_21DF388CC(a1 + 8, v5, v6, (uint64_t)v12);
  v8 = *(_QWORD *)(a1 + 160);
  v11 = 257;
  sub_21DF2053C(a1 + 8, v7, v8, (uint64_t)&v10);
  llvm::ConstantFP::get();
  v13 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v13 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF3A6D0(uint64_t a1, uint64_t *a2)
{
  llvm::Value *v4;
  uint64_t *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v10[20];
  _BYTE v11[32];
  __int16 v12;

  v4 = sub_21DF39E24(a1, a2);
  v12 = 257;
  v5 = (uint64_t *)sub_21DF389F8(a1 + 8, (uint64_t)a2, (uint64_t)v11);
  v6 = sub_21DF39E24(a1, v5);
  v12 = 257;
  v7 = sub_21DF20828(a1 + 8, (uint64_t)v4, (uint64_t)v6, (uint64_t)v11);
  v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return sub_21DF20300(a1 + 8, v7, v8, (uint64_t)v10);
}

uint64_t sub_21DF3A778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  v4 = a1 + 8;
  v5 = llvm::ConstantFP::get();
  v14 = 257;
  v6 = (uint64_t *)sub_21DF20300(v4, a2, v5, (uint64_t)v13);
  v7 = sub_21DF39E24(a1, v6);
  v8 = llvm::ConstantFP::get();
  v14 = 257;
  v9 = sub_21DF20828(v4, (uint64_t)v7, v8, (uint64_t)v13);
  v10 = llvm::ConstantFP::get();
  v14 = 257;
  v11 = sub_21DF2074C(v4, (uint64_t)v7, v10, (uint64_t)v13);
  v14 = 257;
  return sub_21DF38C30(v4, v9, v11, (uint64_t)v13);
}

uint64_t sub_21DF3A850(uint64_t *a1, llvm::Type ***a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  char *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void *v23;
  size_t v24;
  unsigned int v25;
  int16x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  char v36;
  int Key;
  uint64_t v38;
  uint64_t v39;
  llvm::Type **v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Value *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Type ***v65;
  uint64_t v66;
  llvm::Type ***v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  char v75;
  int v76;
  char *__s;
  char *v78;
  char v79;
  char *v80;
  char *v81;
  int v82;
  __int16 v83;
  __int16 v84;
  _BYTE v85[32];
  __int16 v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_2553B3230);
  v5 = &qword_2553B3210;
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3230))
  {
    qword_2553B3210 = 0;
    *(_QWORD *)&dword_2553B3218 = 0;
    qword_2553B3220 = 0x1800000000;
    __cxa_atexit((void (*)(void *))sub_21DF3B08C, &qword_2553B3210, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B3230);
  }
  if (!dword_2553B321C)
  {
    v67 = a2;
    v68 = a1;
    v74 = 0;
    v88 = &v90;
    v89 = xmmword_21DFA6140;
    while (1)
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v81 = off_24E1E90B8[v6];
        __s = v81 + 2;
        v69 = v6;
        v75 = byte_21DFA0D73[v6];
        v76 = *v81;
        do
        {
          v8 = off_24E1E90B8[v7];
          if (*v81 == 102)
          {
            v73 = 1;
          }
          else
          {
            v73 = 2;
            if (*v8 != 102)
            {
              v72 = 0;
              v9 = 1;
              goto LABEL_11;
            }
          }
          v72 = 1;
          v9 = 4;
LABEL_11:
          v70 = v7;
          v71 = v9;
          v10 = 0;
          v79 = byte_21DFA0D73[v7];
          v78 = v8 + 2;
          v80 = off_24E1E90B8[v7];
          do
          {
            v11 = 0;
            v12 = 0;
            v13 = v73;
            if ((v72 & (v10 == 0)) == 0)
              v13 = v10;
            v82 = v13;
            v14 = 1;
            do
            {
              v83 = *v8;
              v84 = *v81;
              *(_QWORD *)&v89 = 0;
              sub_21DF3B104((uint64_t)&v88, *v81);
              sub_21DF3B104((uint64_t)&v88, v81[1]);
              v15 = (char *)*(&off_24E1E9098 + v74);
              v16 = strlen(v15);
              sub_21DF2DA34(&v88, v15, &v15[v16]);
              v17 = strlen(__s);
              sub_21DF2DA34(&v88, __s, &__s[v17]);
              sub_21DF2DA34(&v88, ".", "");
              sub_21DF3B104((uint64_t)&v88, *v8);
              sub_21DF3B104((uint64_t)&v88, v8[1]);
              v18 = strlen(v15);
              sub_21DF2DA34(&v88, v15, &v15[v18]);
              v19 = strlen(v78);
              sub_21DF2DA34(&v88, v78, &v78[v19]);
              v20 = v10;
              v21 = strlen((const char *)*(&off_24E1E9110 + v10));
              sub_21DF2DA34(&v88, *(&off_24E1E9110 + v10), (_BYTE *)*(&off_24E1E9110 + v10) + v21);
              v22 = strlen((const char *)*(&off_24E1E9140 + v12));
              sub_21DF2DA34(&v88, *(&off_24E1E9140 + v12), (_BYTE *)*(&off_24E1E9140 + v12) + v22);
              v23 = v88;
              v24 = v89;
              v25 = llvm::StringMapImpl::LookupBucketFor();
              v27 = *v5;
              v28 = v25;
              v29 = *(_QWORD *)(*v5 + 8 * v25);
              if (v29 == -8)
              {
                LODWORD(qword_2553B3220) = qword_2553B3220 - 1;
              }
              else if (v29)
              {
                v8 = v80;
                v10 = v20;
                goto LABEL_28;
              }
              v30 = v5;
              v31 = MEMORY[0x2207A6DD8](v24 + 25, 8);
              v32 = (_QWORD *)v31;
              v33 = v31 + 24;
              if (v24)
                memcpy((void *)(v31 + 24), v23, v24);
              *(_BYTE *)(v33 + v24) = 0;
              v32[1] = 0;
              v32[2] = 0;
              *v32 = v24;
              *(_QWORD *)(v27 + 8 * v28) = v32;
              v5 = v30;
              ++*((_DWORD *)v30 + 3);
              v34 = (uint64_t *)(*v30 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v30));
              v8 = v80;
              v10 = v20;
              while (1)
              {
                v29 = *v34;
                if (*v34 && v29 != -8)
                  break;
                ++v34;
              }
LABEL_28:
              v26.i16[0] = v83;
              v26.i16[1] = v84;
              *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vceq_s16((int16x4_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 0), (int16x4_t)0x73007300660066), (int8x8_t)0x1000100010001);
              *(_DWORD *)(v29 + 8) = vmovn_s16(v26).u32[0];
              *(_BYTE *)(v29 + 12) = v79;
              *(_BYTE *)(v29 + 13) = v75;
              *(_DWORD *)(v29 + 16) = v82;
              *(_BYTE *)(v29 + 20) = v11;
              v36 = v14 & (v76 != 102);
              v11 = 1;
              v12 = 1;
              v14 = 0;
            }
            while ((v36 & 1) != 0);
            ++v10;
          }
          while (v10 != v71);
          v7 = v70 + 1;
        }
        while (v70 != 10);
        v6 = v69 + 1;
      }
      while (v69 != 10);
      if (++v74 == 4)
      {
        if (v88 != &v90)
          free(v88);
        a2 = v67;
        a1 = v68;
        break;
      }
    }
  }
  Key = llvm::StringMapImpl::FindKey();
  v38 = Key;
  if (Key == -1)
    v38 = *((unsigned int *)v5 + 2);
  v39 = *(_QWORD *)(*v5 + 8 * v38);
  v40 = *a2;
  if (*(_BYTE *)(v39 + 9))
  {
    v41 = *(unsigned __int8 *)(v39 + 13);
    if (*(_BYTE *)(v39 + 8))
    {
      if (v41 >= *(unsigned __int8 *)(v39 + 12))
      {
        v52 = a1[20];
        v91 = 257;
        return sub_21DF2F978((uint64_t)(a1 + 1), (uint64_t)v40, v52, (uint64_t)&v88);
      }
      v42 = *(_DWORD *)(v39 + 16);
      if (v42 == 1 || v42 == 2)
      {
        v43 = a1[19];
        v91 = 257;
        return sub_21DF20674((uint64_t)(a1 + 1), (uint64_t)v40, v43, (uint64_t)&v88);
      }
      return 0;
    }
    v49 = 20;
    if (v41 == 16)
      v49 = 19;
    if (*(_DWORD *)(v39 + 16) == 1)
    {
      v50 = a1[v49];
      v51 = (uint64_t)(a1 + 1);
      if (*(_BYTE *)(v39 + 10))
      {
        v91 = 257;
        return sub_21DF2053C(v51, (uint64_t)v40, v50, (uint64_t)&v88);
      }
      else
      {
        v86 = 257;
        return sub_21DF20594(v51, (uint64_t)v40, v50, (uint64_t)v85);
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(v39 + 8))
  {
    v53 = 0;
    v54 = *(unsigned __int8 *)(v39 + 13);
    if (v54 <= 0xF)
    {
      if (v54 == 1)
      {
        v65 = (llvm::Type ***)sub_21DF79ED0((uint64_t)a1, *a2, *(unsigned __int8 *)(v39 + 10));
        v66 = llvm::ConstantInt::get();
        v91 = 257;
        return sub_21DF19478(a1 + 1, 33, v65, v66, (uint64_t)&v88);
      }
      if (v54 != 8)
        goto LABEL_85;
      v55 = a1 + 22;
    }
    else
    {
      switch(v54)
      {
        case 0x10u:
          v55 = a1 + 23;
          break;
        case 0x20u:
          v55 = a1 + 24;
          break;
        case 0x40u:
          v55 = a1 + 25;
          break;
        default:
LABEL_85:
          if (v54 >= *(unsigned __int8 *)(v39 + 12))
          {
            v63 = (uint64_t)(a1 + 1);
            if (*(_BYTE *)(v39 + 10))
            {
              v91 = 257;
              v64 = 40;
            }
            else
            {
              v91 = 257;
              v64 = 39;
            }
          }
          else
          {
            v63 = (uint64_t)(a1 + 1);
            v91 = 257;
            v64 = 38;
          }
          return sub_21DF1A79C(v63, v64, (uint64_t)v40, v53, (uint64_t)&v88);
      }
    }
    v53 = *v55;
    goto LABEL_85;
  }
  v45 = sub_21DF78BE0((uint64_t)a1, (uint64_t *)*a2, 1);
  v46 = 0;
  v87 = v45;
  v47 = *(unsigned __int8 *)(v39 + 13);
  if (v47 > 0xF)
  {
    switch(v47)
    {
      case 0x10u:
        v48 = a1 + 23;
        break;
      case 0x20u:
        v48 = a1 + 24;
        break;
      case 0x40u:
        v48 = a1 + 25;
        break;
      default:
        goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v47 == 1)
  {
    llvm::ConstantFP::get();
    v91 = 257;
    return llvm::IRBuilderBase::CreateFCmpHelper();
  }
  if (v47 == 8)
  {
    v48 = a1 + 22;
LABEL_70:
    v46 = *v48;
  }
LABEL_71:
  v56 = *(_DWORD *)(v39 + 16);
  if (v56 == 2)
  {
    v60 = (uint64_t)(a1 + 1);
    if (*(_BYTE *)(v39 + 11))
    {
      v91 = 257;
      return sub_21DF388CC(v60, v45, v46, (uint64_t)&v88);
    }
    else
    {
      v91 = 257;
      return sub_21DF1AC78(v60, v45, v46, (uint64_t)&v88);
    }
  }
  else
  {
    if (v56 != 1)
      return 0;
    v57 = a1[43];
    v58 = *(_QWORD *)(v57 + 1160);
    if (v58)
      v59 = strlen(*(const char **)(v57 + 1160));
    else
      v59 = 0;
    v61 = sub_21DF203DC((uint64_t)a1, v58, v59, a1[24], a1[20]);
    v91 = 257;
    v62 = sub_21DF191A4((uint64_t)(a1 + 1), *(_QWORD *)(v61 + 24), v61, (uint64_t)&v87, 1, (uint64_t)&v88);
    v86 = 257;
    return sub_21DF1ABB0((uint64_t)(a1 + 1), (uint64_t)v62, v46, 0, (uint64_t)v85);
  }
}

uint64_t sub_21DF3B08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF3B104(uint64_t result, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(result + 16))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v3[1];
  }
  *(_BYTE *)(*v3 + v4) = a2;
  ++v3[1];
  return result;
}

uint64_t sub_21DF3B160(uint64_t a1, uint64_t *a2)
{
  int Key;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  llvm::Type *v11;
  uint64_t NullValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  __int16 v32;

  sub_21DF3B474();
  Key = llvm::StringMapImpl::FindKey();
  v5 = qword_2553B3238;
  if (Key == -1)
    v6 = dword_2553B3240;
  else
    v6 = Key;
  v7 = *(_QWORD *)(qword_2553B3238 + 8 * v6);
  switch(*(_DWORD *)(v7 + 8))
  {
    case 0:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, *a2, v7 + 12);
    case 1:
      v9 = *(_QWORD *)*a2;
      if (*(_DWORD *)(v9 + 32) == 3)
      {
        if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
          v9 = **(_QWORD **)(v9 + 16);
        v10 = sub_21DF7969C(a1, *a2, 4);
        *a2 = v10;
        NullValue = llvm::Constant::getNullValue((llvm::Constant *)v9, v11);
        v32 = 257;
        v13 = llvm::ConstantInt::get();
        *a2 = sub_21DF7980C(a1 + 8, v10, NullValue, v13, (uint64_t)v31);
      }
      v14 = *(_QWORD *)(a1 + 344);
      v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v30 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 96))(v14, &v28, 5, *(_QWORD *)(a1 + 192), *a2, 1, *(unsigned __int8 *)(*(_QWORD *)(v5 + 8 * v6) + 12));
      if (v29)
        goto LABEL_17;
      return v15;
    case 2:
      v16 = *(_QWORD *)(a1 + 344);
      v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v27 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 96))(v16, &v25, 0, *(_QWORD *)(a1 + 184), *a2, 1, 0);
      if (!v26)
        return v15;
      goto LABEL_17;
    case 3:
      v17 = *(_QWORD *)(a1 + 344);
      v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v24 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 96))(v17, &v22, 7, *(_QWORD *)(a1 + 184), *a2, 1, 0);
      if (!v23)
        return v15;
      goto LABEL_17;
    case 4:
      v18 = *(_QWORD *)(a1 + 344);
      v19 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v21 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 96))(v18, &v19, 8, *(_QWORD *)(a1 + 184), *a2, 1, 0);
      if (v20)
LABEL_17:
        llvm::MetadataTracking::untrack();
      return v15;
    case 5:
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, *a2);
    default:
      return 0;
  }
}

void sub_21DF3B474()
{
  unsigned __int8 v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char *v10;
  unsigned __int8 v11;
  std::string *v12;
  std::string::size_type size;
  const void *p_p;
  size_t v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  char v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  const std::string::value_type *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  char v36;
  char v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  char v41;
  char v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  uint64_t v47;
  char v48;
  char v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  uint64_t v54;
  char v55;
  char v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  void *__p;
  size_t v67;
  unsigned __int8 v68;
  std::string v69;
  std::string v70;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3258))
  {
    qword_2553B3238 = 0;
    *(_QWORD *)&dword_2553B3240 = 0;
    qword_2553B3248 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_21DF3BA68, &qword_2553B3238, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B3258);
  }
  v1 = dword_2553B3244;
  if (!dword_2553B3244)
  {
    v2 = 0;
    do
    {
      v3 = 0;
      v4 = 0;
      v62 = v1;
      v5 = off_24E1E9150[v2];
      do
      {
        v6 = 0;
        v64 = v3;
        v7 = off_24E1E9160[v4];
        do
        {
          v8 = atoi(v5);
          v9 = atoi(v7);
          v10 = off_24E1E9170[v6];
          v11 = atoi(v10);
          sub_21DF1AF28(&v70, ".");
          if ((v11 & 0xFE) != 0)
          {
            std::string::append(&v70, "v");
            std::string::append(&v70, v10);
          }
          std::string::append(&v70, "f");
          std::string::append(&v70, v5);
          sub_21DF1AF28(&v69, v10);
          std::string::append(&v69, "x");
          std::string::append(&v69, v7);
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v70;
          else
            v12 = (std::string *)v70.__r_.__value_.__r.__words[0];
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
          else
            size = v70.__r_.__value_.__l.__size_;
          std::string::append(&v69, (const std::string::value_type *)v12, size);
          std::operator+<char>();
          if ((v68 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v68 & 0x80u) == 0)
            v15 = v68;
          else
            v15 = v67;
          v16 = ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v11 << 48);
          *(_QWORD *)(*sub_21DF3BAE0(p_p, v15) + 8) = v16 | 0x100000000000000;
          if ((char)v68 < 0)
            operator delete(__p);
          std::operator+<char>();
          if ((v68 & 0x80u) == 0)
            v17 = &__p;
          else
            v17 = __p;
          if ((v68 & 0x80u) == 0)
            v18 = v68;
          else
            v18 = v67;
          *(_QWORD *)(*sub_21DF3BAE0(v17, v18) + 8) = v16;
          if ((char)v68 < 0)
            operator delete(__p);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          ++v6;
        }
        while (v6 != 3);
        v3 = 1;
        v4 = 1;
      }
      while ((v64 & 1) == 0);
      v1 = 1;
      v2 = 1;
    }
    while ((v62 & 1) == 0);
    v19 = 0;
    v20 = 0;
    v63 = 0x10000000001;
    do
    {
      v61 = v19;
      v21 = 1;
      do
      {
        v65 = v21;
        v22 = (v21 & 1) == 0;
        if ((v21 & 1) != 0)
          v23 = ".rgb10.v3f";
        else
          v23 = ".rgb10a2.v4f";
        v24 = 0x1000000000000;
        if (!v22)
          v24 = 0;
        v25 = v63 | v24;
        v26 = 1;
        do
        {
          v27 = v26;
          if ((v26 & 1) != 0)
            v28 = "unorm";
          else
            v28 = "snorm";
          if ((v26 & 1) != 0)
            v29 = 0;
          else
            v29 = 0x100000000;
          v30 = v25 | v29;
          v31 = 1;
          do
          {
            v32 = v31;
            sub_21DF1AF28(&v70, v28);
            std::string::append(&v70, v23);
            std::string::append(&v70, off_24E1E9150[v20]);
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v33 = &v70;
            else
              v33 = (std::string *)v70.__r_.__value_.__r.__words[0];
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
            else
              v34 = v70.__r_.__value_.__l.__size_;
            *(_QWORD *)(*sub_21DF3BAE0(v33, v34) + 8) = v30;
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v70.__r_.__value_.__l.__data_);
            v31 = 0;
          }
          while ((v32 & 1) != 0);
          v26 = 0;
        }
        while ((v27 & 1) != 0);
        v21 = 0;
      }
      while ((v65 & 1) != 0);
      v63 = 1;
      v19 = 1;
      v20 = 1;
    }
    while ((v61 & 1) == 0);
    v35 = 0;
    v36 = 1;
    do
    {
      v37 = v36;
      sub_21DF1AF28(&v70, "unorm.rgb565.v3f");
      std::string::append(&v70, off_24E1E9150[v35]);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v70;
      else
        v38 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        v39 = v70.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF3BAE0(v38, v39) + 8) = 2;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v36 = 0;
      v35 = 1;
    }
    while ((v37 & 1) != 0);
    v40 = 0;
    v41 = 1;
    do
    {
      v42 = v41;
      sub_21DF1AF28(&v69, "unorm4x8.srgb.v4f");
      v43 = std::string::append(&v69, off_24E1E9150[v40]);
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v70;
      else
        v45 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        v46 = v70.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF3BAE0(v45, v46) + 8) = 5;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v41 = 0;
      v40 = 1;
    }
    while ((v42 & 1) != 0);
    v47 = 0;
    v48 = 1;
    do
    {
      v49 = v48;
      sub_21DF1AF28(&v69, "unorm.rg11b10f.v3f");
      v50 = std::string::append(&v69, off_24E1E9150[v47]);
      v51 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v70;
      else
        v52 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        v53 = v70.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF3BAE0(v52, v53) + 8) = 3;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v48 = 0;
      v47 = 1;
    }
    while ((v49 & 1) != 0);
    v54 = 0;
    v55 = 1;
    do
    {
      v56 = v55;
      sub_21DF1AF28(&v69, "unorm.rgb9e5.v3f");
      v57 = std::string::append(&v69, off_24E1E9150[v54]);
      v58 = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v70;
      else
        v59 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        v60 = v70.__r_.__value_.__l.__size_;
      *(_QWORD *)(*sub_21DF3BAE0(v59, v60) + 8) = 4;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v55 = 0;
      v54 = 1;
    }
    while ((v56 & 1) != 0);
  }
}

uint64_t sub_21DF3BA68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_21DF3BAE0(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3238 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3248) = qword_2553B3248 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_2553B3244;
  for (i = (uint64_t *)(qword_2553B3238
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3238));
        !*i || *i == -8;
  return i;
}

uint64_t sub_21DF3BBE4(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  int Key;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;

  sub_21DF3B474();
  Key = llvm::StringMapImpl::FindKey();
  v9 = qword_2553B3238;
  if (Key == -1)
    v10 = dword_2553B3240;
  else
    v10 = Key;
  v11 = *(_QWORD *)(qword_2553B3238 + 8 * v10);
  switch(*(_DWORD *)(v11 + 8))
  {
    case 0:
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 88))(a1, *a2, v11 + 12);
    case 1:
      if (*(_BYTE *)(v11 + 14))
        v17 = 5;
      else
        v17 = 4;
      v18 = *(_BYTE *)(v11 + 13) == 0;
      v19 = 152;
      if (v18)
        v19 = 160;
      v20 = *(_QWORD *)(a1 + v19);
      v21 = *(_QWORD *)(a1 + 344);
      v43 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v45 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v21 + 104))(v21, &v43, v17, v20, *a2, 1, *(unsigned __int8 *)(*(_QWORD *)(v9 + 8 * v10) + 12));
      if (v44)
        goto LABEL_50;
      return v16;
    case 2:
      if (a4 > 2)
      {
        v22 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v22 == 26161)
        {
          v23 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v22 < 0x6631)
        {
          v23 = -1;
        }
        else
        {
          v23 = 1;
        }
        if (v23)
          v13 = (uint64_t *)(a1 + 160);
        else
          v13 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v13 = (uint64_t *)(a1 + 160);
      }
      v28 = *v13;
      v29 = *(_QWORD *)(a1 + 344);
      v40 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v42 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v29 + 104))(v29, &v40, 0, v28, *a2, 1, 0);
      if (!v41)
        return v16;
      goto LABEL_50;
    case 3:
      if (a4 > 2)
      {
        v24 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v24 == 26161)
        {
          v25 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v24 < 0x6631)
        {
          v25 = -1;
        }
        else
        {
          v25 = 1;
        }
        if (v25)
          v14 = (uint64_t *)(a1 + 160);
        else
          v14 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v14 = (uint64_t *)(a1 + 160);
      }
      v30 = *v14;
      v31 = *(_QWORD *)(a1 + 344);
      v37 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v39 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v31 + 104))(v31, &v37, 7, v30, *a2, 1, 0);
      if (!v38)
        return v16;
      goto LABEL_50;
    case 4:
      if (a4 > 2)
      {
        v26 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v26 == 26161)
        {
          v27 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v26 < 0x6631)
        {
          v27 = -1;
        }
        else
        {
          v27 = 1;
        }
        if (v27)
          v15 = (uint64_t *)(a1 + 160);
        else
          v15 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v15 = (uint64_t *)(a1 + 160);
      }
      v32 = *v15;
      v33 = *(_QWORD *)(a1 + 344);
      v34 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v36 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v33 + 104))(v33, &v34, 8, v32, *a2, 1, 0);
      if (v35)
LABEL_50:
        llvm::MetadataTracking::untrack();
      return v16;
    case 5:
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)a1 + 104))(a1, *a2, a3, a4);
    default:
      return 0;
  }
}

uint64_t sub_21DF3BFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF3C060(uint64_t a1, llvm::Type ****a2, unsigned __int8 *a3)
{
  int v4;
  llvm::Type ***v5;
  llvm::Type ***v6;
  llvm::Type ***v8;
  llvm::Type ***v9;
  llvm::Type ***v10;
  llvm::Type ***v11;
  llvm::Type ***v12;
  uint64_t v13;
  llvm::Type **v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = *a3;
  if (v4 == 117)
  {
    v8 = a2[2];
    v9 = (llvm::Type ***)sub_21DF7A358(a1, *a2, a2[1], 34);
    return sub_21DF7A358(a1, v9, v8, 36);
  }
  else if (v4 == 115)
  {
    v5 = a2[2];
    v6 = (llvm::Type ***)sub_21DF7A358(a1, *a2, a2[1], 38);
    return sub_21DF7A358(a1, v6, v5, 40);
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    v13 = *(_QWORD *)(a1 + 344);
    v16 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v18 = *(_DWORD *)(a1 + 104);
    v14 = *v10;
    if (((_DWORD)(*v10)[1] & 0xFE) == 0x12)
      v14 = *(llvm::Type ***)v14[2];
    v15 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type ***, llvm::Type ***, llvm::Type ***, BOOL))(*(_QWORD *)v13 + 72))(v13, &v16, v10, v11, v12, v14 == *(llvm::Type ***)(a1 + 160));
    if (v17)
      llvm::MetadataTracking::untrack();
    return v15;
  }
}

uint64_t sub_21DF3C1A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  _BYTE v13[32];
  __int16 v14;
  _BYTE v15[32];
  __int16 v16;
  uint64_t v17;

  v4 = *a2;
  v5 = a1[23];
  v6 = *a2 == a1[22] || v4 == v5;
  v7 = *a2;
  if (v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[43] + 784) + 42))
      v7 = a1[24];
    else
      v7 = a1[23];
  }
  if (v7 == v5)
    v8 = "llvm.ctpop.i16";
  else
    v8 = "llvm.ctpop.i32";
  v9 = sub_21DF203DC((uint64_t)a1, (uint64_t)v8, 14, v4, v4);
  v10 = (uint64_t)(a1 + 1);
  v16 = 257;
  v17 = sub_21DF1A79C(v10, 39, (uint64_t)a2, v7, (uint64_t)v15);
  v14 = 257;
  v11 = sub_21DF191A4(v10, *(_QWORD *)(v9 + 24), v9, (uint64_t)&v17, 1, (uint64_t)v13);
  v16 = 257;
  return sub_21DF1A79C(v10, 38, (uint64_t)v11, v4, (uint64_t)v15);
}

uint64_t sub_21DF3C2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD v7[20];
  _BYTE v8[32];
  __int16 v9;

  v4 = llvm::ConstantInt::get();
  a1 += 8;
  v9 = 257;
  v5 = sub_21DF1A184(a1, v4, a2, (uint64_t)v8);
  v7[16] = 257;
  return sub_21DF3BFA0(a1, v5, v4, (uint64_t)v7);
}

uint64_t sub_21DF3C320(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Type ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type ***v18;
  uint64_t v19;
  llvm::Type *v20;
  uint64_t AllOnesValue;
  uint64_t v22;
  uint64_t v23;
  uint64_t Select;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;

  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = **(_QWORD **)a2;
  v8 = *(llvm::Type ****)(a2 + 16);
  v9 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 192);
  v29 = 257;
  v11 = sub_21DF1A79C(a1 + 8, 39, (uint64_t)v5, v10, (uint64_t)v28);
  v29 = 257;
  v12 = sub_21DF1AE6C((uint64_t)v9, v11, v6, (uint64_t)v28);
  v13 = sub_21DF3C2A4(a1, (uint64_t)v8);
  v27 = 257;
  v14 = sub_21DF1A410((uint64_t)v9, v12, v13, (uint64_t)v26);
  if (*a3 == 115)
  {
    v15 = llvm::ConstantInt::get();
    v29 = 257;
    v16 = sub_21DF3BFA0((uint64_t)v9, (uint64_t)v8, v15, (uint64_t)v28);
    v27 = 257;
    v17 = sub_21DF1A184((uint64_t)v9, v15, v16, (uint64_t)v26);
    v29 = 257;
    v18 = (llvm::Type ***)sub_21DF1A410((uint64_t)v9, v14, v17, (uint64_t)v28);
    v19 = llvm::ConstantInt::get();
    v27 = 257;
    sub_21DF19478(v9, 33, v18, v19, (uint64_t)v26);
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 192), v20);
    v29 = 257;
    v22 = sub_21DF1A184((uint64_t)v9, AllOnesValue, (uint64_t)v8, (uint64_t)v28);
    v27 = 257;
    sub_21DF1A4A0((uint64_t)v9, v14, v22, (uint64_t)v26);
    v29 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  v23 = llvm::ConstantInt::get();
  v29 = 257;
  sub_21DF19478(v9, 32, v8, v23, (uint64_t)v28);
  v27 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v29 = 257;
  return sub_21DF1A79C((uint64_t)v9, 38, Select, v7, (uint64_t)v28);
}

uint64_t sub_21DF3C534(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Type ***v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Select;
  _BYTE v22[32];
  __int16 v23;
  _BYTE v24[32];
  __int16 v25;

  v3 = *(uint64_t **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = **(_QWORD **)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(llvm::Type ****)(a2 + 24);
  v8 = (uint64_t *)(a1 + 8);
  v9 = sub_21DF3C2A4(a1, (uint64_t)v6);
  v25 = 257;
  v10 = sub_21DF1A184((uint64_t)v8, v9, v7, (uint64_t)v24);
  v11 = *(_QWORD *)(a1 + 192);
  v25 = 257;
  v12 = sub_21DF1A79C((uint64_t)v8, 39, (uint64_t)v3, v11, (uint64_t)v24);
  v13 = *(_QWORD *)(a1 + 192);
  v25 = 257;
  v14 = sub_21DF1A79C((uint64_t)v8, 39, v4, v13, (uint64_t)v24);
  v25 = 257;
  v15 = sub_21DF3C6D4((uint64_t)v8, v10, (uint64_t)v24);
  v23 = 257;
  v16 = sub_21DF1A410((uint64_t)v8, v12, v15, (uint64_t)v22);
  v25 = 257;
  v17 = sub_21DF1A184((uint64_t)v8, v14, v7, (uint64_t)v24);
  v23 = 257;
  v18 = sub_21DF1A410((uint64_t)v8, v17, v10, (uint64_t)v22);
  v25 = 257;
  sub_21DF1A4A0((uint64_t)v8, v16, v18, (uint64_t)v24);
  v19 = llvm::ConstantInt::get();
  v25 = 257;
  sub_21DF19478(v8, 32, v6, v19, (uint64_t)v24);
  v23 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v25 = 257;
  return sub_21DF1A79C((uint64_t)v8, 38, Select, v5, (uint64_t)v24);
}

uint64_t sub_21DF3C6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Not;
  BOOL v6;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    Not = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 208))(*(_QWORD *)(a1 + 72), a2);
    if (Not)
      v6 = *(unsigned __int8 *)(Not + 16) >= 0x1Cu;
    else
      v6 = 0;
    if (v6)
      sub_21DF1A3A4((uint64_t *)a1, Not, a3);
  }
  else
  {
    Not = llvm::BinaryOperator::CreateNot();
    sub_21DF1A3A4((uint64_t *)a1, Not, a3);
  }
  return Not;
}

uint64_t sub_21DF3C784(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  void *__p[2];
  unsigned __int8 v16;
  uint64_t v17;

  v4 = *a2;
  sub_21DF1AF28(__p, *(char **)(*(_QWORD *)(a1 + 344) + 1088));
  if ((v16 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = (uint64_t)__p[1];
  v7 = sub_21DF203DC(a1, (uint64_t)v5, v6, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v8 = *(_QWORD *)(a1 + 192);
  v14 = 257;
  v17 = sub_21DF1A79C(a1 + 8, 39, (uint64_t)a2, v8, (uint64_t)v13);
  v14 = 257;
  v9 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)&v17, 1, (uint64_t)v13);
  v17 = (uint64_t)v9;
  v10 = llvm::ConstantInt::get();
  v14 = 257;
  v17 = sub_21DF1AE6C(a1 + 8, (uint64_t)v9, v10, (uint64_t)v13);
  v14 = 257;
  v11 = sub_21DF1A79C(a1 + 8, 38, v17, v4, (uint64_t)v13);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  return v11;
}

uint64_t sub_21DF3C8B8(uint64_t a1, llvm::Constant *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, sizeof(v15));
  v5 = sub_21DF79A74(a1, a2, (llvm::Constant **)v15);
  v6 = *(_QWORD *)&v15[0];
  if (v5 >= 2)
  {
    v7 = a1 + 8;
    v8 = v5 - 1;
    v9 = (uint64_t *)v15 + 1;
    do
    {
      v10 = *v9;
      v14 = 257;
      if (a3)
        v11 = sub_21DF1A4A0(v7, v6, v10, (uint64_t)v13);
      else
        v11 = sub_21DF1A410(v7, v6, v10, (uint64_t)v13);
      v6 = v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return v6;
}

uint64_t sub_21DF3C990()
{
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF3CA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;

  v8 = llvm::ConstantFP::get();
  a1 += 8;
  v15 = 257;
  v9 = sub_21DF20828(a1, v8, a4, (uint64_t)v14);
  v13[16] = 257;
  v10 = sub_21DF20300(a1, a2, v9, (uint64_t)v13);
  v15 = 257;
  v11 = sub_21DF20300(a1, a3, a4, (uint64_t)v14);
  v15 = 257;
  return sub_21DF2074C(a1, v10, v11, (uint64_t)v14);
}

uint64_t sub_21DF3CB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    return sub_21DF7A26C(a1, a2, a3);
  v5 = 257;
  return sub_21DF20300(a1 + 8, a2, a3, (uint64_t)v4);
}

uint64_t sub_21DF3CB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + *(_QWORD *)(a1 + 704);
  v5 = v4 + 8;
  v6 = *(_DWORD *)(v4 + 104);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v10 = *(_DWORD *)(a1 + 104);
  sub_21DF18F98((uint64_t)&v8, v5);
  if (v9)
    llvm::MetadataTracking::untrack();
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 704) + 24))(*(_QWORD *)(a1 + 704), a2);
  *(_DWORD *)(*(_QWORD *)(a1 + 704) + *(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + 104) = v6;
  return result;
}

uint64_t sub_21DF3CC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 704) - 24) + *(_QWORD *)(a1 + 704);
  v5 = v4 + 8;
  v6 = *(_DWORD *)(v4 + 104);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  sub_21DF18F98((uint64_t)&v10, v5);
  if (v11)
    llvm::MetadataTracking::untrack();
  v7 = *(uint64_t **)(a1 + 704);
  v8 = *v7;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 104) = v6;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 32))(v7, a2);
}

uint64_t sub_21DF3CCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::Value *v6;
  uint64_t *v7;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = a1 + 8;
  v5 = (uint64_t *)sub_21DF3CB90(a1, a2);
  v6 = sub_21DF38804(a1, v5);
  v7 = (uint64_t *)sub_21DF3CC48(a1, a2);
  v8 = sub_21DF38804(a1, v7);
  v11 = 257;
  return sub_21DF2074C(v4, (uint64_t)v6, (uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_21DF3CD74(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *(_QWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  v7 = 184;
  if (*a2 == *(_QWORD *)(a1 + 160))
    v7 = 192;
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v6 + 136))(v6, &v10, a2, a3, *(_QWORD *)(a1 + v7));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t sub_21DF3CE28(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *(_QWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  v7 = 152;
  if (*a2 == *(_QWORD *)(a1 + 192))
    v7 = 160;
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v6 + 144))(v6, &v10, a2, a3, *(_QWORD *)(a1 + v7));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t sub_21DF3CEDC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *Select;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type ***v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v4 = *(uint64_t **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_21DF3D104((uint64_t)a1, *(uint64_t **)a2, v5);
  sub_21DF3D1C4((uint64_t)a1, v4, v5);
  v15 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  Select = (_QWORD *)llvm::IRBuilderBase::CreateSelect();
  v7 = (uint64_t *)sub_21DF3D104((uint64_t)a1, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  sub_21DF3D104((uint64_t)a1, v7, *(_QWORD *)(a2 + 16));
  if (*Select == a1[20])
    v8 = a1[24];
  else
    v8 = a1[23];
  v15 = 257;
  v9 = sub_21DF1A79C((uint64_t)(a1 + 1), 49, (uint64_t)Select, v8, (uint64_t)v14);
  v10 = llvm::ConstantInt::get();
  v15 = 257;
  v11 = (llvm::Type ***)sub_21DF1A410((uint64_t)(a1 + 1), v9, v10, (uint64_t)v14);
  v12 = llvm::ConstantInt::get();
  v15 = 257;
  sub_21DF19478(a1 + 1, 34, v11, v12, (uint64_t)v14);
  v15 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF3D104(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *(_QWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, uint64_t, BOOL))(*(_QWORD *)v6 + 48))(v6, &v10, a2, a3, v7 == *(_QWORD *)(a1 + 160));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t sub_21DF3D1C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *(_QWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, uint64_t, BOOL))(*(_QWORD *)v6 + 56))(v6, &v10, a2, a3, v7 == *(_QWORD *)(a1 + 160));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t sub_21DF3D284(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_21DF3961C(a1, *a2, v4);
  sub_21DF39700(a1, v3, v4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF3D378(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = (uint64_t)a2;
  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if (a2[16] == 74)
  {
    v5 = *((_QWORD *)a2 - 4);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v6 == 91)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 64) + 16);
      if (v7 == 73)
        v8 = *(_QWORD *)(v5 - 64);
      else
        v8 = 0;
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 32) + 16);
      if (v9 == 73)
        v10 = *(_QWORD *)(v5 - 32);
      else
        v10 = 0;
      if (v8 | v10
        && ((v7 - 11) < 2 || *(_QWORD *)(**(_QWORD **)(v8 - 32) + 24) == *(_QWORD *)(a1 + 160))
        && ((v9 - 11) <= 1 || *(_QWORD *)(**(_QWORD **)(v10 - 32) + 24) == *(_QWORD *)(a1 + 160)))
      {
        llvm::FixedVectorType::get();
        if (v8)
        {
          v11 = *(_QWORD *)(v8 - 32);
          if (v10)
          {
LABEL_23:
            v12 = *(_QWORD *)(v10 - 32);
LABEL_26:
            v13 = *(_QWORD *)(v5 + 64);
            v14 = *(unsigned int *)(v5 + 72);
            v22 = 257;
            v2 = sub_21DF1A530(a1 + 8, v11, v12, v13, v14, (uint64_t)v21);
            goto LABEL_27;
          }
        }
        else
        {
          v11 = llvm::UndefValue::get();
          if (v10)
            goto LABEL_23;
        }
        v12 = llvm::UndefValue::get();
        goto LABEL_26;
      }
    }
    else if (v5 && v6 == 73 && *(_QWORD *)(**(_QWORD **)(v5 - 32) + 24) == *(_QWORD *)(a1 + 160))
    {
      v2 = *(_QWORD *)(v5 - 32);
    }
  }
LABEL_27:
  v27 = llvm::ConstantInt::get();
  v28 = llvm::ConstantInt::get();
  v29 = llvm::ConstantInt::get();
  v15 = sub_21DF79408(a1, v2, v4 - 1, 1);
  v16 = llvm::ConstantVector::get();
  v22 = 257;
  v17 = sub_21DF19EE8(a1 + 8, v2, v2, v16, (uint64_t)v21);
  v22 = 257;
  v18 = sub_21DF38C30(a1 + 8, v15, v17, (uint64_t)v21);
  v23 = llvm::ConstantInt::get();
  v24 = llvm::ConstantInt::get();
  v25 = llvm::ConstantInt::get();
  v26 = llvm::ConstantInt::get();
  v19 = llvm::ConstantVector::get();
  v22 = 257;
  return sub_21DF19EE8(a1 + 8, v18, v17, v19, (uint64_t)v21);
}

uint64_t sub_21DF3D630()
{
  return 0;
}

uint64_t sub_21DF3D638()
{
  return llvm::ConstantInt::get();
}

uint64_t sub_21DF3D69C()
{
  return llvm::ConstantInt::get();
}

void sub_21DF3D700(uint64_t a1, llvm::Instruction *a2)
{
  const char *v3;
  llvm::Function *Function;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t Name;
  unint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string __dst;
  void *__p[2];
  std::string::size_type v17;

  if (MGGetBoolAnswer()
    && (v3 = (const char *)sub_21DF21324("AGC_ENABLE_IS_UNIFORM_STRIPPING")) != 0
    && *v3 != 48
    && atoi(v3))
  {
    Function = (llvm::Function *)llvm::Module::getFunction();
    v5 = *((_QWORD *)a2 + 1);
    if (v5)
    {
      do
      {
        v6 = *(_QWORD *)(v5 + 8);
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v5 + 24));
        v5 = v6;
      }
      while (v6);
    }
    llvm::Instruction::eraseFromParent(a2);
    if (!*((_QWORD *)Function + 1))
      llvm::Function::eraseFromParent(Function);
  }
  else
  {
    v7 = (llvm::Value *)*((_QWORD *)a2 - 4);
    v8 = *((_QWORD *)v7 + 3);
    Name = llvm::Value::getName(v7);
    if (Name)
    {
      if (v10 >= 0xE)
        v11 = 14;
      else
        v11 = v10;
      sub_21DF24420(&__dst, (void *)(Name + v11), v10 - v11);
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    v12 = std::string::insert(&__dst, 0, "llvm.agx.is.uniform");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    llvm::Module::getOrInsertFunction();
    *((_QWORD *)a2 + 9) = v8;
    sub_21DF3D87C((uint64_t)a2, v14);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_21DF3D87C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t sub_21DF3D8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)(a1 + 200);
  v5 = 257;
  return sub_21DF1A79C(a1 + 8, 47, a2, v2, (uint64_t)v4);
}

uint64_t *sub_21DF3D904(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x2207A6DD8](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *(_WORD *)(v11 + 28) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

llvm::Value *sub_21DF3D9F8(uint64_t a1, uint64_t *a2)
{
  return sub_21DF3943C(a1, a2, 1);
}

llvm::Value *sub_21DF3DA00(uint64_t a1, uint64_t *a2)
{
  return sub_21DF3943C(a1, a2, 0);
}

uint64_t sub_21DF3DA08()
{
  return 0;
}

uint64_t sub_21DF3DA10(uint64_t a1, _QWORD *a2)
{
  return sub_21DF3CE28(a1, a2, 0);
}

uint64_t sub_21DF3DA18(uint64_t a1, _QWORD *a2)
{
  return sub_21DF3CD74(a1, a2, 0);
}

uint64_t sub_21DF3DA20(uint64_t a1, _QWORD *a2)
{
  return sub_21DF3CE28(a1, a2, 1);
}

uint64_t sub_21DF3DA28(uint64_t a1, _QWORD *a2)
{
  return sub_21DF3CD74(a1, a2, 1);
}

llvm::Value *sub_21DF3DA30(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v3;
  llvm::Type *v5;
  const char **v6;
  int ScalarSizeInBits;
  const char **v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t Neg;
  uint64_t v16;
  BOOL v17;
  _WORD v18[20];
  _BYTE v19[32];
  __int16 v20;

  v3 = *a2;
  if (*a3 != 117)
  {
    v5 = *(llvm::Type **)v3;
    if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
      v5 = **(llvm::Type ***)(*(_QWORD *)v3 + 16);
    v6 = *(const char ***)(a1 + 344);
    ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v5);
    switch(ScalarSizeInBits)
    {
      case 8:
        v8 = v6 + 114;
        break;
      case 32:
        v8 = v6 + 116;
        break;
      case 16:
        v8 = v6 + 115;
        break;
      default:
LABEL_12:
        v13 = llvm::ConstantInt::get();
        v14 = (uint64_t *)(a1 + 8);
        v20 = 257;
        sub_21DF19478((uint64_t *)(a1 + 8), 40, (llvm::Type ***)v3, v13, (uint64_t)v19);
        v18[16] = 257;
        if (*(unsigned __int8 *)(v3 + 16) <= 0x14u)
        {
          v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 192))(*(_QWORD *)(a1 + 80), v3, 0, 0);
          if (v16)
            v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
          else
            v17 = 0;
          if (v17)
            sub_21DF1A3A4(v14, v16, (uint64_t)v18);
        }
        else
        {
          v20 = 257;
          Neg = llvm::BinaryOperator::CreateNeg();
          sub_21DF1A3A4(v14, Neg, (uint64_t)v18);
        }
        v20 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    }
    v9 = *v8;
    if (*v8)
    {
      v10 = strlen(*v8);
      v11 = sub_21DF203DC(a1, (uint64_t)v9, v10, (uint64_t)v5, (uint64_t)v5);
      return sub_21DF79F74(a1, v11, (llvm::Constant *)v3);
    }
    goto LABEL_12;
  }
  return (llvm::Value *)v3;
}

uint64_t sub_21DF3DBF8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  llvm::Type ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  _BYTE v11[32];
  __int16 v12;

  v3 = *(llvm::Type ****)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1 + 8;
  if (*a3 == 117)
  {
    v12 = 257;
    v6 = (uint64_t *)(a1 + 8);
    v7 = 36;
  }
  else
  {
    v12 = 257;
    v6 = (uint64_t *)(a1 + 8);
    v7 = 40;
  }
  sub_21DF19478(v6, v7, v3, v4, (uint64_t)v11);
  v12 = 257;
  sub_21DF3BFA0(v5, v4, (uint64_t)v3, (uint64_t)v11);
  v10 = 257;
  sub_21DF3BFA0(v5, (uint64_t)v3, v4, (uint64_t)v9);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_21DF3DCC8(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  llvm::Type **v4;
  llvm::Type **v5;
  int v6;
  llvm::Type *v7;
  const char **v8;
  int ScalarSizeInBits;
  const char **v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v15;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type ***v19;
  llvm::Type **Select;
  llvm::Type *v21;
  llvm::Type ***v22;
  llvm::Type *v23;
  llvm::Type *v24;
  llvm::Type **v25;
  uint64_t v26;
  _BYTE v27[32];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  v6 = *a3;
  v7 = **a2;
  v8 = *(const char ***)(a1 + 344);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v7);
  if (v6 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v10 = v8 + 118;
        break;
      case 32:
        v10 = v8 + 120;
        break;
      case 16:
        v10 = v8 + 119;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v10 = v8 + 121;
        break;
      case 32:
        v10 = v8 + 123;
        break;
      case 16:
        v10 = v8 + 122;
        break;
      default:
        goto LABEL_16;
    }
  }
  v11 = *v10;
  if (*v10)
  {
    v12 = strlen(*v10);
    v13 = sub_21DF1B0B0(a1, (uint64_t)v11, v12, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v29[0] = v4;
    v29[1] = v5;
    v28 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)v29, 2, (uint64_t)v27);
  }
LABEL_16:
  v25 = 0;
  v26 = 0;
  v24 = 0;
  sub_21DF4EBA8(*(_QWORD *)(a1 + 72), v7, v6 == 115, &v26, &v25, (uint64_t *)&v24);
  v15 = (uint64_t *)(a1 + 8);
  if (v6 == 115)
  {
    v16 = v24;
    v28 = 257;
    v17 = sub_21DF4ECE4((uint64_t)v15, v4, v24, (uint64_t)v27);
    v28 = 257;
    v18 = sub_21DF4ECE4((uint64_t)v15, v5, v16, (uint64_t)v27);
    v28 = 257;
    v19 = (llvm::Type ***)sub_21DF19FAC((uint64_t)v15, v17, v18, (uint64_t)v27);
    v28 = 257;
    sub_21DF19478(v15, 38, v19, (uint64_t)v25, (uint64_t)v27);
    v30 = 257;
    sub_21DF19478(v15, 40, v19, v26, (uint64_t)v29);
    llvm::IRBuilderBase::CreateSelect();
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v21 = *v4;
    v28 = 257;
    return (llvm::Value *)sub_21DF4ECE4((uint64_t)v15, Select, v21, (uint64_t)v27);
  }
  else
  {
    v28 = 257;
    v22 = (llvm::Type ***)sub_21DF19FAC((uint64_t)v15, (uint64_t)v4, (uint64_t)v5, (uint64_t)v27);
    v28 = 257;
    sub_21DF19478(v15, 36, v22, (uint64_t)v4, (uint64_t)v27);
    v23 = *v4;
    v30 = 257;
    sub_21DF25A08((uint64_t)v15, v25, v23, (uint64_t)v29);
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::Value *sub_21DF3DFA8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  llvm::Type **v4;
  uint64_t v5;
  int v6;
  llvm::Type *v7;
  const char **v8;
  int ScalarSizeInBits;
  const char **v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type ***v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Type **v23;
  llvm::Type **v24;
  llvm::Type ***v25;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(llvm::Type ***)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = **(llvm::Type ***)a2;
  v8 = *(const char ***)(a1 + 344);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v7);
  if (v6 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v10 = v8 + 124;
        break;
      case 32:
        v10 = v8 + 126;
        break;
      case 16:
        v10 = v8 + 125;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v10 = v8 + 127;
        break;
      case 32:
        v10 = v8 + 129;
        break;
      case 16:
        v10 = v8 + 128;
        break;
      default:
        goto LABEL_16;
    }
  }
  v11 = *v10;
  if (*v10)
  {
    v12 = strlen(*v10);
    v13 = sub_21DF1B0B0(a1, (uint64_t)v11, v12, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v37[0] = v4;
    v37[1] = v5;
    v36 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)v37, 2, (uint64_t)v35);
  }
LABEL_16:
  v33 = 0;
  v34 = 0;
  v32 = 0;
  sub_21DF4EBA8(*(_QWORD *)(a1 + 72), v7, v6 == 115, &v34, &v33, &v32);
  v15 = (uint64_t *)(a1 + 8);
  v36 = 257;
  if (v6 == 115)
  {
    v16 = sub_21DF3BFA0((uint64_t)v15, (uint64_t)v4, v5, (uint64_t)v35);
    v36 = 257;
    v17 = sub_21DF4ED70(v15, (uint64_t)v4, v5, (uint64_t)v35);
    v38 = 257;
    v18 = sub_21DF4ED70(v15, v5, v16, (uint64_t)v37);
    v31 = 257;
    v19 = sub_21DF3C6D4((uint64_t)v15, v18, (uint64_t)v30);
    v29 = 257;
    v20 = (llvm::Type ***)sub_21DF1A410((uint64_t)v15, v17, v19, (uint64_t)v28);
    v21 = llvm::ConstantInt::get();
    v27 = 257;
    sub_21DF19478(v15, 40, v20, v21, (uint64_t)v26);
    v22 = llvm::ConstantInt::get();
    v36 = 257;
    sub_21DF19478(v15, 39, (llvm::Type ***)v4, v22, (uint64_t)v35);
    v23 = (llvm::Type **)*v4;
    v36 = 257;
    sub_21DF1A79C((uint64_t)v15, 38, v33, (uint64_t)v23, (uint64_t)v35);
    v24 = (llvm::Type **)*v4;
    v38 = 257;
    sub_21DF1A79C((uint64_t)v15, 38, v34, (uint64_t)v24, (uint64_t)v37);
    v31 = 257;
    llvm::IRBuilderBase::CreateSelect();
    v36 = 257;
  }
  else
  {
    v25 = (llvm::Type ***)sub_21DF3BFA0((uint64_t)v15, (uint64_t)v4, v5, (uint64_t)v35);
    v36 = 257;
    sub_21DF19478(v15, 34, v25, (uint64_t)v4, (uint64_t)v35);
    llvm::ConstantInt::get();
    v38 = 257;
  }
  return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_21DF3E2E4(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  llvm::Type **v4;
  llvm::Type **v5;
  llvm::Type **v6;
  int v7;
  llvm::Type *v8;
  const char **v9;
  int ScalarSizeInBits;
  const char **v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type ***v22;
  llvm::Type ***Select;
  llvm::Type **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type ***v29;
  llvm::Type **v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v7 = *a3;
  v8 = **a2;
  v9 = *(const char ***)(a1 + 344);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v8);
  if (v7 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v11 = v9 + 130;
        break;
      case 32:
        v11 = v9 + 132;
        break;
      case 16:
        v11 = v9 + 131;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        v11 = v9 + 133;
        break;
      case 32:
        v11 = v9 + 135;
        break;
      case 16:
        v11 = v9 + 134;
        break;
      default:
        goto LABEL_16;
    }
  }
  v12 = *v11;
  if (*v11)
  {
    v13 = strlen(*v11);
    v14 = sub_21DF1AFD4(a1, (uint64_t)v12, v13, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v36[0] = v5;
    v36[1] = v4;
    v36[2] = v6;
    v35 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(v14 + 24), v14, (uint64_t)v36, 3, (uint64_t)v34);
  }
LABEL_16:
  v32 = 0;
  v33 = 0;
  v31 = 0;
  sub_21DF4EBA8(*(_QWORD *)(a1 + 72), v8, v7 == 115, &v33, &v32, (uint64_t *)&v31);
  v16 = (uint64_t *)(a1 + 8);
  v17 = v31;
  v35 = 257;
  if (v7 == 115)
  {
    v18 = sub_21DF4ECE4((uint64_t)v16, v5, v31, (uint64_t)v34);
    v35 = 257;
    v19 = sub_21DF4ECE4((uint64_t)v16, v4, v17, (uint64_t)v34);
    v35 = 257;
    v20 = sub_21DF4ECE4((uint64_t)v16, v6, v17, (uint64_t)v34);
    v35 = 257;
    v21 = sub_21DF1A864((uint64_t)v16, v18, v19, (uint64_t)v34);
    v35 = 257;
    v22 = (llvm::Type ***)sub_21DF19FAC((uint64_t)v16, v21, v20, (uint64_t)v34);
    v35 = 257;
    sub_21DF19478(v16, 40, v22, v33, (uint64_t)v34);
    v37 = 257;
    Select = (llvm::Type ***)llvm::IRBuilderBase::CreateSelect();
    v35 = 257;
    sub_21DF19478(v16, 38, Select, v32, (uint64_t)v34);
    v37 = 257;
    v24 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v35 = 257;
    return (llvm::Value *)sub_21DF4ECE4((uint64_t)v16, v24, v8, (uint64_t)v34);
  }
  else
  {
    v25 = sub_21DF25A08((uint64_t)v16, v5, v31, (uint64_t)v34);
    v35 = 257;
    v26 = sub_21DF25A08((uint64_t)v16, v4, v17, (uint64_t)v34);
    v35 = 257;
    v27 = sub_21DF25A08((uint64_t)v16, v6, v17, (uint64_t)v34);
    v35 = 257;
    v28 = sub_21DF1A864((uint64_t)v16, v25, v26, (uint64_t)v34);
    v35 = 257;
    v29 = (llvm::Type ***)sub_21DF19FAC((uint64_t)v16, v28, v27, (uint64_t)v34);
    v35 = 257;
    sub_21DF19478(v16, 34, v29, v32, (uint64_t)v34);
    v37 = 257;
    v30 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v35 = 257;
    return (llvm::Value *)sub_21DF25A08((uint64_t)v16, v30, v8, (uint64_t)v34);
  }
}

uint64_t sub_21DF3E674(uint64_t a1, llvm::Type ****a2, _BYTE *a3)
{
  uint64_t v3;

  if (*a3 == 115)
    v3 = 38;
  else
    v3 = 34;
  return sub_21DF7A358(a1, *a2, a2[1], v3);
}

uint64_t sub_21DF3E694(uint64_t a1, llvm::Type ****a2, _BYTE *a3)
{
  uint64_t v3;

  if (*a3 == 115)
    v3 = 40;
  else
    v3 = 36;
  return sub_21DF7A358(a1, *a2, a2[1], v3);
}

uint64_t sub_21DF3E6B4(uint64_t a1, llvm::Constant *a2)
{
  return sub_21DF3C8B8(a1, a2, 1);
}

uint64_t sub_21DF3E6BC(uint64_t a1, llvm::Constant *a2)
{
  return sub_21DF3C8B8(a1, a2, 0);
}

uint64_t sub_21DF3E6C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 344);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v10 = *(_DWORD *)(a1 + 104);
  v5 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, BOOL))(*(_QWORD *)v4 + 40))(v4, &v8, a2, v5 == *(_QWORD *)(a1 + 160));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t sub_21DF3E774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v8 = *(_QWORD *)(a1 + 344);
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v13 = *(_DWORD *)(a1 + 104);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, &v11, a2, a3, a4, 0);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t sub_21DF3E818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a1 + 344);
  v7 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v9 = *(_DWORD *)(a1 + 104);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, &v7, a2, 0);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t sub_21DF3E8A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v3 = *a2;
  v2 = a2[1];
  v6 = 257;
  return sub_21DF1A864(a1 + 8, v3, v2, (uint64_t)v5);
}

uint64_t sub_21DF3E8D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v3 = a1 + 8;
  v4 = *a2;
  v5 = a2[1];
  v11 = 257;
  v6 = sub_21DF1A864(a1 + 8, v4, v5, (uint64_t)v10);
  v7 = a2[2];
  v9[16] = 257;
  return sub_21DF19FAC(v3, v6, v7, (uint64_t)v9);
}

uint64_t sub_21DF3E93C(uint64_t a1, llvm::Type ****a2, _BYTE *a3)
{
  llvm::Type ***v4;
  uint64_t v5;
  llvm::Type ***v6;

  v4 = a2[2];
  if (*a3 == 115)
    v5 = 40;
  else
    v5 = 36;
  v6 = (llvm::Type ***)sub_21DF7A358(a1, *a2, a2[1], v5);
  return sub_21DF7A358(a1, v6, v4, v5);
}

uint64_t sub_21DF3E998(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_21DF3D104(a1, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  return sub_21DF3D104(a1, v4, *(_QWORD *)(a2 + 16));
}

uint64_t sub_21DF3E9D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_21DF3961C(a1, *a2, a2[1]);
  return sub_21DF3961C(a1, v4, a2[2]);
}

uint64_t sub_21DF3EA08(uint64_t a1, llvm::Type ****a2, _BYTE *a3)
{
  llvm::Type ***v4;
  uint64_t v5;
  llvm::Type ***v6;

  v4 = a2[2];
  if (*a3 == 115)
    v5 = 38;
  else
    v5 = 34;
  v6 = (llvm::Type ***)sub_21DF7A358(a1, *a2, a2[1], v5);
  return sub_21DF7A358(a1, v6, v4, v5);
}

uint64_t sub_21DF3EA64(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_21DF3D1C4(a1, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  return sub_21DF3D1C4(a1, v4, *(_QWORD *)(a2 + 16));
}

uint64_t sub_21DF3EA9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_21DF39700(a1, *a2, a2[1]);
  return sub_21DF39700(a1, v4, a2[2]);
}

uint64_t sub_21DF3EAD4(uint64_t a1, llvm::Type ****a2, _BYTE *a3)
{
  llvm::Type ***v4;
  llvm::Type ***v5;
  llvm::Type ***v6;
  uint64_t *v7;
  llvm::Type ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = (uint64_t *)(a1 + 8);
  v8 = *a2;
  if (*a3 == 115)
  {
    v9 = sub_21DF7A358(a1, v8, v5, 40);
    v10 = sub_21DF7A358(a1, v4, v5, 38);
    v18 = 257;
    sub_21DF19478(v7, 41, v6, v9, (uint64_t)v17);
    v16 = 257;
    v11 = v7;
    v12 = 39;
  }
  else
  {
    v13 = sub_21DF7A358(a1, v8, v5, 36);
    v10 = sub_21DF7A358(a1, v4, v5, 34);
    v18 = 257;
    sub_21DF19478(v7, 37, v6, v13, (uint64_t)v17);
    v16 = 257;
    v11 = v7;
    v12 = 35;
  }
  sub_21DF19478(v11, v12, v6, v10, (uint64_t)v15);
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF3EC28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  _DWORD *Name;
  unint64_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;
  char *v15[2];

  v2 = *(_QWORD *)(a1 + 320);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = (llvm::Value *)(v4 - 56);
      else
        v5 = 0;
      v4 = *(_QWORD *)(v4 + 8);
      Name = (_DWORD *)llvm::Value::getName(v5);
      v15[0] = 0;
      v15[1] = 0;
      v13 = 0;
      v14 = 0;
      if (sub_21DF3ED18(Name, v7, v15, &v13) && llvm::GlobalValue::isDeclaration(v5))
      {
        v8 = *(_QWORD *)(a1 + 712);
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1)
          v10 = *(unsigned int *)(v8 + 8);
        else
          v10 = Key;
        v11 = (_QWORD *)(*(_QWORD *)v8 + 8 * v10);
        if (v11 != (_QWORD *)(**(_QWORD **)(a1 + 712) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 712) + 8)))
          sub_21DF3EDCC(a1 + 352, v5, *v11 + 8, v13, v14);
      }
    }
    while (v4 != v3);
  }
  return *(unsigned __int8 *)(a1 + 720);
}

uint64_t sub_21DF3ED18(_DWORD *a1, unint64_t a2, char **a3, char **a4)
{
  size_t v4;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  size_t v12;
  char *v13;
  size_t v14;

  v4 = a2 - 4;
  if (a2 < 4 || *a1 != 779250017)
    return 0;
  v8 = (char *)(a1 + 1);
  if (a2 < 5 || (v9 = (char *)memchr(a1 + 1, 46, v4)) == 0 || (v10 = (char *)(v9 - v8), v9 - v8 == -1))
  {
    v14 = 0;
    *a3 = v8;
    a3[1] = (char *)v4;
    v13 = (char *)&unk_21DFAD77A;
  }
  else
  {
    if (v4 >= (unint64_t)v10)
      v11 = (char *)(v9 - v8);
    else
      v11 = (char *)v4;
    *a3 = v8;
    a3[1] = v11;
    if (v4 >= (unint64_t)(v10 + 1))
      v12 = (size_t)(v10 + 1);
    else
      v12 = v4;
    v13 = &v8[v12];
    v14 = v4 - v12;
  }
  *a4 = v13;
  a4[1] = (char *)v14;
  return 1;
}

uint64_t sub_21DF3EDCC(uint64_t a1, llvm::Function *this, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  llvm::Function *v6;
  int v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  llvm::Instruction *v21;
  int FastMathFlags;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  llvm::Instruction *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Type *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  const char *v51;
  uint64_t v52;
  _QWORD *v53;
  const char *v54;
  uint64_t v55;
  _QWORD *v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v59;
  _OWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  int v70;
  uint64_t v71;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  _QWORD v82[4];
  __int16 v83;
  _OWORD v84[3];
  uint64_t v85;
  uint64_t v86;

  v6 = this;
  v86 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a3 + 16);
  if (v8 == 9)
  {
    v11 = *((_QWORD *)this + 1);
    if (v11)
    {
      do
      {
        v12 = *(const char **)a3;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v13 >> 1));
        if ((v13 & 1) != 0)
          v12 = *(const char **)(*v14 + v12);
        v15 = *(_QWORD *)(v11 + 8);
        ((void (*)(_QWORD *, _QWORD))v12)(v14, *(_QWORD *)(v11 + 24));
        v11 = v15;
      }
      while (v15);
    }
  }
  else if (v8 == 8)
  {
    v9 = *(char **)a3;
    if (*(_QWORD *)a3)
    {
      v10 = strlen(*(const char **)a3);
      *(_QWORD *)&v84[0] = (char *)&v84[1] + 8;
      *(_OWORD *)((char *)v84 + 8) = xmmword_21DFA6140;
      sub_21DF2DA34(v84, v9, &v9[v10]);
    }
    else
    {
      *(_QWORD *)&v84[1] = 64;
      *(_QWORD *)&v84[0] = (char *)&v84[1] + 8;
      *((_QWORD *)&v84[0] + 1) = 0;
    }
    sub_21DF2DA34(v84, ".", "");
    sub_21DF2DA34(v84, a4, &a4[a5]);
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    if (*(_OWORD **)&v84[0] != (_OWORD *)((char *)&v84[1] + 8))
      free(*(void **)&v84[0]);
  }
  else
  {
    v16 = **(_QWORD **)(*((_QWORD *)this + 3) + 16);
    v17 = (*(_DWORD *)(v16 + 8) & 0xFE) != 0x12 || *(_BYTE *)(a3 + 21) == 0;
    v18 = !v17;
    if (v17)
      v19 = 1;
    else
      v19 = *(_DWORD *)(v16 + 32);
    v70 = v19;
    v68 = *(_DWORD *)(a1 + 104);
    v20 = *((_QWORD *)this + 1);
    if (v20)
    {
      do
      {
        v21 = *(llvm::Instruction **)(v20 + 24);
        v71 = *(_QWORD *)(v20 + 8);
        FastMathFlags = sub_21DF195AC((uint64_t)v21);
        if (FastMathFlags)
          FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
        *(_DWORD *)(a1 + 104) = FastMathFlags;
        sub_21DF3F430(a1 + 8, (uint64_t)v21);
        v23 = llvm::UndefValue::get();
        if (v70)
        {
          for (i = 0; i != v70; ++i)
          {
            v75 = v23;
            v85 = 0;
            memset(v84, 0, sizeof(v84));
            v25 = sub_21DF35A70(v21) - (_QWORD)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
            if ((v25 & 0x1FFFFFFFE0) != 0)
            {
              v26 = (v25 >> 5);
              v27 = (uint64_t *)v84;
              v28 = v21;
              do
              {
                v29 = (uint64_t *)((char *)v28 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
                v30 = *v29;
                *v27 = *v29;
                if (v18 && (*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
                {
                  v83 = 257;
                  v31 = llvm::ConstantInt::get();
                  *v27 = sub_21DF79584(a1 + 8, v30, v31, (uint64_t)v82);
                }
                ++v27;
                v28 = (llvm::Instruction *)((char *)v28 + 32);
                --v26;
              }
              while (v26);
            }
            if (*(_BYTE *)(a3 + 20))
            {
              v32 = **(llvm::Type ***)&v84[0];
              if ((*(_DWORD *)(**(_QWORD **)&v84[0] + 8) & 0xFE) == 0x12)
                v32 = (llvm::Type *)**((_QWORD **)v32 + 2);
              v82[0] = llvm::Type::getPrimitiveSizeInBits(v32);
              v82[1] = v33;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v34 = 0;
              }
              else
              {
                v35 = *(_QWORD *)(a1 + 160);
                if ((*(_DWORD *)(**(_QWORD **)&v84[0] + 8) & 0xFE) == 0x12)
                  v35 = llvm::FixedVectorType::get();
                if ((v25 & 0x1FFFFFFFE0) != 0)
                {
                  v36 = (v25 >> 5);
                  v37 = v84;
                  do
                  {
                    v38 = *(_QWORD *)v37;
                    if (*(_BYTE *)(**(_QWORD **)v37 + 8) != 15)
                    {
                      v83 = 257;
                      *(_QWORD *)v37 = sub_21DF2F978(a1 + 8, v38, v35, (uint64_t)v82);
                    }
                    v37 = (_OWORD *)((char *)v37 + 8);
                    --v36;
                  }
                  while (v36);
                }
                v34 = 1;
              }
            }
            else
            {
              v34 = 0;
            }
            v39 = *(_QWORD *)(a1 + 344);
            v79 = *(_OWORD *)(a1 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
            v81 = *(_DWORD *)(a1 + 104);
            sub_21DF18F98((uint64_t)&v79, v39 + 8);
            if (v80)
              llvm::MetadataTracking::untrack();
            switch(*(_DWORD *)(a3 + 16))
            {
              case 1:
                v40 = *(const char **)a3;
                v41 = *(_QWORD *)(a3 + 8);
                v42 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v41 >> 1));
                if ((v41 & 1) != 0)
                  v40 = *(const char **)(*v42 + v40);
                v43 = ((uint64_t (*)(_QWORD *))v40)(v42);
                goto LABEL_73;
              case 2:
                v45 = *(const char **)a3;
                v46 = *(_QWORD *)(a3 + 8);
                v47 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v46 >> 1));
                if ((v46 & 1) != 0)
                  v45 = *(const char **)(*v47 + v45);
                v48 = *(_QWORD *)v21;
                goto LABEL_57;
              case 3:
                v45 = *(const char **)a3;
                v49 = *(_QWORD *)(a3 + 8);
                v47 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v49 >> 1));
                if ((v49 & 1) != 0)
                  v45 = *(const char **)(*v47 + v45);
                v48 = *(_QWORD *)&v84[0];
LABEL_57:
                v43 = ((uint64_t (*)(_QWORD *, uint64_t))v45)(v47, v48);
                goto LABEL_73;
              case 4:
                v50 = (unsigned int *)(*(_QWORD *)&v84[0] + 24);
                if (*(_DWORD *)(*(_QWORD *)&v84[0] + 32) >= 0x41u)
                  v50 = *(unsigned int **)v50;
                v51 = *(const char **)a3;
                v52 = *(_QWORD *)(a3 + 8);
                v53 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v52 >> 1));
                if ((v52 & 1) != 0)
                  v51 = *(const char **)(*v53 + v51);
                v43 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v51)(v53, *(_QWORD *)v21, *v50);
                goto LABEL_73;
              case 5:
                v54 = *(const char **)a3;
                v55 = *(_QWORD *)(a3 + 8);
                v56 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v55 >> 1));
                if ((v55 & 1) != 0)
                  v54 = *(const char **)(*v56 + v54);
                v43 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v54)(v56, *(_QWORD *)&v84[0], *((_QWORD *)&v84[0] + 1));
                goto LABEL_73;
              case 6:
                v57 = *(const char **)a3;
                v58 = *(_QWORD *)(a3 + 8);
                v59 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v58 >> 1));
                if ((v58 & 1) != 0)
                  v57 = *(const char **)(*v59 + v57);
                v61 = (_BYTE *)*((_QWORD *)&v84[0] + 1);
                v60 = *(_OWORD **)&v84[0];
                v62 = *(_QWORD *)&v84[1];
                goto LABEL_72;
              case 7:
                v57 = *(const char **)a3;
                v63 = *(_QWORD *)(a3 + 8);
                v59 = (_QWORD *)(*(_QWORD *)(a1 + 344) + (v63 >> 1));
                if ((v63 & 1) != 0)
                  v57 = *(const char **)(*v59 + v57);
                v60 = v84;
                v62 = a5;
                v61 = a4;
LABEL_72:
                v43 = ((uint64_t (*)(_QWORD *, _OWORD *, _BYTE *, uint64_t))v57)(v59, v60, v61, v62);
LABEL_73:
                v44 = v43;
                break;
              default:
                v44 = 0;
                break;
            }
            v64 = *(_QWORD *)(a1 + 344);
            v76 = *(_OWORD *)(v64 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v64 + 8));
            v78 = *(_DWORD *)(v64 + 104);
            sub_21DF18F98((uint64_t)&v76, a1 + 8);
            if (v77)
              llvm::MetadataTracking::untrack();
            if (v34)
            {
              v65 = *(_QWORD *)v21;
              if (v18 && (*(_DWORD *)(v65 + 8) & 0xFE) == 0x12)
                v65 = **(_QWORD **)(v65 + 16);
              v83 = 257;
              v44 = sub_21DF20674(a1 + 8, v44, v65, (uint64_t)v82);
            }
            if (v18)
            {
              v83 = 257;
              v66 = llvm::ConstantInt::get();
              v44 = sub_21DF7980C(a1 + 8, v75, v44, v66, (uint64_t)v82);
            }
            v23 = v44;
          }
        }
        if (*(_QWORD *)v21 != *(_QWORD *)(a1 + 144))
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v21);
        v20 = v71;
      }
      while (v71);
    }
    *(_DWORD *)(a1 + 104) = v68;
    v6 = this;
  }
  return llvm::Function::eraseFromParent(v6);
}

uint64_t sub_21DF3F430(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a2 + 24;
  v3 = *(_QWORD *)(a2 + 48);
  v5 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track();
    v3 = v5;
  }
  result = sub_21DF1908C(a1, v3);
  if (v5)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_21DF3F494(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v4 = *(uint64_t **)(*(_QWORD *)a1 + 8 * i);
        if (v4 != (uint64_t *)-8 && v4 != 0)
        {
          v6 = *v4;
          if (*((_DWORD *)v4 + 5))
          {
            v7 = *((unsigned int *)v4 + 4);
            if ((_DWORD)v7)
            {
              v8 = 0;
              v9 = 8 * v7;
              do
              {
                v10 = *(llvm **)(v4[1] + v8);
                if (v10 != (llvm *)-8 && v10 != 0)
                  llvm::deallocate_buffer(v10, (void *)(*(_QWORD *)v10 + 25));
                v8 += 8;
              }
              while (v9 != v8);
            }
          }
          free((void *)v4[1]);
          llvm::deallocate_buffer((llvm *)v4, (void *)(v6 + 41));
        }
      }
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_21DF3F570(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3288 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3298) = qword_2553B3298 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 41, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 40;
  if (a2)
    memcpy((void *)(v8 + 40), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0x1800000000;
  *i = (uint64_t)v9;
  ++dword_2553B3294;
  for (i = (uint64_t *)(qword_2553B3288
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3288));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_21DF3F678(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x2207A6DD8](a3 + 25, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_21DF3F768(uint64_t a1, uint64_t a2)
{
  return a2;
}

llvm::Value *sub_21DF3F770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _WORD v8[20];
  _BYTE v9[32];
  __int16 v10;

  v4 = llvm::ConstantFP::get();
  v10 = 257;
  v5 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v9);
  v8[16] = 257;
  v6 = (uint64_t *)sub_21DF20828(a1 + 8, v4, v5, (uint64_t)v8);
  return sub_21DF38B68(a1, v6);
}

uint64_t sub_21DF3F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v4 = llvm::ConstantFP::get();
  v11 = 257;
  v5 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v10);
  v9[16] = 257;
  v6 = (uint64_t *)sub_21DF2074C(a1 + 8, v4, v5, (uint64_t)v9);
  v7 = sub_21DF38B68(a1, v6);
  v11 = 257;
  return sub_21DF38C30(a1 + 8, a2, (uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_21DF3F8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v4 = llvm::ConstantFP::get();
  v11 = 257;
  v5 = sub_21DF20300(a1 + 8, a2, a2, (uint64_t)v10);
  v9[16] = 257;
  v6 = (uint64_t *)sub_21DF2074C(a1 + 8, v4, v5, (uint64_t)v9);
  v7 = sub_21DF38B68(a1, v6);
  v11 = 257;
  return sub_21DF38C30(a1 + 8, v4, (uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_21DF3F944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = a1 + 8;
  v4 = sub_21DF3F770(a1, a2);
  v7 = 257;
  return sub_21DF38C30(v3, a2, (uint64_t)v4, (uint64_t)v6);
}

uint64_t sub_21DF3F98C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = a1 + 8;
  v4 = sub_21DF3F770(a1, a2);
  v7 = 257;
  return sub_21DF38C30(v3, (uint64_t)v4, a2, (uint64_t)v6);
}

uint64_t sub_21DF3F9D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  llvm::GlobalValue *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  int v34;
  char v35;
  void *__p[2];
  char v37;

  v2 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320);
  v3 = v2 + 24;
  for (i = *(_QWORD *)(v2 + 32); i != v3; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v5 = (llvm::GlobalValue *)(i - 56);
    else
      v5 = 0;
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      sub_21DF2F440(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v5);
      break;
    }
  }
  sub_21DF2FC20(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 24))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (sub_21DF2D948(v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 24))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    sub_21DF28954(v7, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    v14 = (*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 72))(__p);
    if (v37 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    sub_21DF28954((uint64_t)v14, (const char *)v21, v15, v16, v17, v18, v19, v20, v35);
    if (v37 < 0)
      operator delete(__p[0]);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 24))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    sub_21DF28954(v22, "------ End compilation key description for %s shader %u  ------", v23, v24, v25, v26, v27, v28, v22);
  }
  v29 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v30 = *(_QWORD *)(v29 + 400);
  v31 = *(_QWORD *)(v29 + 320);
  if (*(_BYTE *)(a1 + 8))
  {
    v32 = sub_21DF2D264(v30, v29, v31, 16843009, 2, 0);
    result = 0;
    if ((v32 & 1) == 0)
      return result;
  }
  else
  {
    v34 = sub_21DF2D264(v30, v29, v31, 16843009, 3, 0);
    result = 0;
    if (!v34)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 80))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if ((_DWORD)result)
  {
    sub_21DF40324(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    return 1;
  }
  return result;
}

uint64_t sub_21DF3FBBC()
{
  return 0;
}

uint64_t sub_21DF3FBC4(uint64_t a1)
{
  sub_21DF2E650(a1 + 24);
  return a1;
}

void sub_21DF3FBEC(uint64_t a1)
{
  sub_21DF2E650(a1 + 24);
  JUMPOUT(0x2207A7960);
}

BOOL sub_21DF3FC24(uint64_t a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  uint64_t *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v48;
  _BOOL4 v49;

  v2 = sub_21DF2EDB4(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(int **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 128));
  v3 = v2;
  if (v2)
  {
    v49 = v2;
    v4 = sub_21DF2EB00(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v48 = sub_21DF2DC24((uint64_t)v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v11 = (uint64_t *)(v10 + 704);
      *(_BYTE *)(v10 + 774) = 1;
      v12 = *(_DWORD *)(v10 + 736);
      v13 = *(_DWORD *)(v10 + 752);
      v14 = *(_DWORD *)(v10 + 744);
      sub_21DF2FF00((uint64_t *)(v10 + 704), 4, 0);
      if (i == 6)
      {
        v15 = sub_21DF2E0DC((uint64_t)v11, 2);
        sub_21DF2E00C(v11, 6, v15);
        v16 = sub_21DF2E0DC((uint64_t)v11, 2);
        sub_21DF2E00C(v11, 8, v16);
        v17 = sub_21DF2FFE8((uint64_t)v11, 2);
        sub_21DF2E00C(v11, 10, v17);
      }
      else
      {
        sub_21DF2E08C(v11, 6, 0);
        sub_21DF2E08C(v11, 8, 0);
        sub_21DF2FF00(v11, 10, 0);
      }
      v18 = sub_21DF2DC24((uint64_t)v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      v19 = v18;
      if ((unint64_t)v7 >= v8)
      {
        v20 = (v7 - v6) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v21)
          v21 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (unint64_t)sub_21DF2EACC(v22);
        else
          v23 = 0;
        v24 = (char *)(v22 + 4 * v20);
        *(_DWORD *)v24 = v19;
        v25 = v24 + 4;
        while (v7 != v6)
        {
          v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        v8 = v22 + 4 * v23;
        if (v6)
          operator delete(v6);
        v6 = v24;
        v7 = v25;
      }
      else
      {
        *(_DWORD *)v7 = v18;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v27 = (char *)&unk_2553B3D8C;
    else
      v27 = v6;
    v28 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v27, (v7 - v6) >> 2);
    v29 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v30 = (uint64_t *)(v29 + 704);
    *(_BYTE *)(v29 + 774) = 1;
    v31 = *(_DWORD *)(v29 + 736) - *(_DWORD *)(v29 + 752) + *(_DWORD *)(v29 + 744);
    sub_21DF2E08C((uint64_t *)(v29 + 704), 4, 0);
    sub_21DF2E08C(v30, 6, 0);
    sub_21DF2E08C(v30, 8, 0);
    sub_21DF2E08C(v30, 10, 0);
    sub_21DF2E08C(v30, 12, 0);
    v32 = *(_DWORD *)(a1 + 12);
    if (v32 <= 4)
      v32 = 4;
    sub_21DF2E08C(v30, 14, v32 - 4);
    v33 = sub_21DF2DC24((uint64_t)v30, v31);
    v34 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v35 = (uint64_t *)(v34 + 704);
    *(_BYTE *)(v34 + 774) = 1;
    v36 = *(_DWORD *)(v34 + 736) - *(_DWORD *)(v34 + 752) + *(_DWORD *)(v34 + 744);
    sub_21DF2E08C((uint64_t *)(v34 + 704), 14, 0);
    sub_21DF2E08C(v35, 12, 0);
    sub_21DF2E08C(v35, 10, 0);
    sub_21DF2E08C(v35, 8, 0);
    sub_21DF2E08C(v35, 6, 0);
    sub_21DF2E08C(v35, 4, 0);
    v37 = sub_21DF2DC24((uint64_t)v35, v36);
    v38 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v39 = (uint64_t *)(v38 + 704);
    *(_BYTE *)(v38 + 774) = 1;
    v40 = *(_DWORD *)(v38 + 736) - *(_DWORD *)(v38 + 752) + *(_DWORD *)(v38 + 744);
    v41 = sub_21DF2FFE8(v38 + 704, 1);
    sub_21DF2E00C(v39, 6, v41);
    sub_21DF2FF00(v39, 8, 0);
    sub_21DF2E08C(v39, 10, *(_DWORD *)(a1 + 12));
    sub_21DF2E08C(v39, 12, 0);
    sub_21DF2E08C(v39, 14, 0);
    sub_21DF2DB24(v39, 16, v33);
    sub_21DF2DB24(v39, 18, v37);
    sub_21DF2FF00(v39, 20, 0);
    sub_21DF2DB24(v39, 22, v28);
    sub_21DF2E08C(v39, 26, 0);
    v42 = sub_21DF2DC24((uint64_t)v39, v40);
    v43 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v44 = (uint64_t *)(v43 + 704);
    *(_BYTE *)(v43 + 774) = 1;
    LODWORD(v39) = *(_DWORD *)(v43 + 736) - *(_DWORD *)(v43 + 752) + *(_DWORD *)(v43 + 744);
    sub_21DF34D10((uint64_t *)(v43 + 704), v48);
    sub_21DF402C8(v44, v42);
    v45 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704;
    v46 = sub_21DF2DC24((uint64_t)v44, (__int16)v39);
    sub_21DF2ED04(v45, v46);
    v3 = v49;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *sub_21DF400F8()
{
  return "passthrough";
}

uint64_t sub_21DF40104()
{
  return 6;
}

void sub_21DF4010C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  std::string v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v9, (char *)&unk_21DFAD77A);
  sub_21DF1AF28(v7, "passthrough_size");
  sub_21DF34E40(&v11, (const void **)v7, *(_DWORD *)(a1 + 16));
  sub_21DF1AF28(__p, "pad_size");
  sub_21DF34E40(&v12, (const void **)__p, *(_DWORD *)(a1 + 20));
  sub_21DF34EE8(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

uint64_t sub_21DF40228(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 24);
}

void sub_21DF4023C(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 24);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF4027C()
{
  return "passthrough";
}

uint64_t sub_21DF40288()
{
  return 6;
}

uint64_t sub_21DF40290(_QWORD *a1)
{
  return sub_21DF3F9D4((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

uint64_t sub_21DF402A0()
{
  return 0;
}

void sub_21DF402A8(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF4010C((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF402B8(_QWORD *a1)
{
  return sub_21DF3FC24((uint64_t)a1 + *(_QWORD *)(*a1 - 96));
}

uint64_t *sub_21DF402C8(uint64_t *result, int a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = result;
    sub_21DF2DF68((uint64_t)result, 4uLL);
    return sub_21DF2E08C(v3, 6, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

void sub_21DF40324(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  _OWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 *v13;
  __int128 *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _OWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__p[4];
  __int128 v84;
  uint64_t v85;
  _BYTE v86[24];
  int v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  _OWORD v94[2];
  __int128 v95;
  _OWORD v96[2];
  int v97;
  _OWORD v98[2];
  __int128 v99;
  _QWORD v100[4];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int16 v108;
  void *v109[2];
  char v110;

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (!sub_21DF2D948(v2))
    return;
  if (*(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744))
  {
    v3 = operator new();
    *(_DWORD *)((char *)__p + 3) = 0;
    LODWORD(__p[0]) = 0;
    __p[1] = (void *)0x10100000002;
    LOBYTE(__p[2]) = 1;
    *(void **)((char *)&__p[2] + 1) = 0;
    BYTE1(__p[3]) = 0;
    sub_21DF1AF28(&v84, "std::unique_ptr");
    v89 = 0;
    v88 = 0u;
    memset(v86, 0, sizeof(v86));
    v87 = 0;
    sub_21DF1AF28(&v90, "T");
    v92 = 1;
    v93 = 0;
    memset(v94, 0, 29);
    v95 = 0u;
    memset(v96, 0, sizeof(v96));
    v97 = 1;
    memset(v98, 0, 27);
    v99 = 0u;
    memset(v100, 0, sizeof(v100));
    v101 = 0u;
    v102 = 0;
    sub_21DF1AF28(&v103, "_generated");
    v105 = 0u;
    v106 = 0;
    v107 = 1uLL;
    v108 = 257;
    *(_OWORD *)v3 = 0u;
    *(_QWORD *)(v3 + 16) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v3 + 24) = 1;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_QWORD *)(v3 + 80) = v3 + 88;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_QWORD *)(v3 + 120) = 0;
    *(_QWORD *)(v3 + 128) = v3 + 136;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_QWORD *)(v3 + 168) = 0;
    *(_QWORD *)(v3 + 176) = v3 + 184;
    *(_QWORD *)(v3 + 216) = 0;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 224) = v3 + 232;
    *(_OWORD *)(v3 + 248) = 0u;
    *(_BYTE *)(v3 + 344) = 0;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 328) = 0u;
    *(_OWORD *)(v3 + 368) = 0u;
    *(_OWORD *)(v3 + 384) = 0u;
    *(_OWORD *)(v3 + 352) = xmmword_21DFA6160;
    *(_QWORD *)(v3 + 400) = 0;
    *(_QWORD *)(v3 + 408) = 1;
    *(_WORD *)(v3 + 416) = 256;
    *(_QWORD *)(v3 + 424) = 0;
    v4 = operator new(0x100uLL);
    *(_QWORD *)(v3 + 448) = v4 + 16;
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[15] = 0u;
    *(_BYTE *)(v3 + 480) = 0;
    *(_QWORD *)(v3 + 472) = 0;
    *(_OWORD *)(v3 + 456) = 0u;
    *(_QWORD *)(v3 + 484) = 7;
    *(_OWORD *)(v3 + 504) = 0u;
    *(_QWORD *)(v3 + 520) = v3 + 432;
    *(_QWORD *)(v3 + 496) = v3 + 504;
    *(_OWORD *)(v3 + 536) = 0u;
    *(_QWORD *)(v3 + 552) = v3 + 432;
    *(_QWORD *)(v3 + 528) = v3 + 536;
    *(_QWORD *)(v3 + 432) = v4;
    *(_QWORD *)(v3 + 440) = v4;
    *(_QWORD *)(v3 + 560) = 0;
    *(_WORD *)(v3 + 568) = 0;
    *(_OWORD *)(v3 + 640) = 0u;
    *(_OWORD *)(v3 + 572) = 0u;
    *(_OWORD *)(v3 + 588) = 0u;
    *(_OWORD *)(v3 + 604) = 0u;
    *(_OWORD *)(v3 + 616) = 0u;
    *(_QWORD *)(v3 + 632) = v3 + 640;
    *(_OWORD *)(v3 + 664) = 0u;
    *(_QWORD *)(v3 + 656) = v3 + 664;
    *(_QWORD *)(v3 + 696) = 0;
    *(_OWORD *)(v3 + 680) = 0u;
    *(_QWORD *)(v3 + 712) = 0;
    *(_QWORD *)(v3 + 720) = 0;
    *(_QWORD *)(v3 + 704) = v3 + 712;
    *(_OWORD *)(v3 + 728) = *(_OWORD *)__p;
    *(_OWORD *)(v3 + 738) = *(_OWORD *)((char *)&__p[1] + 2);
    v5 = (_BYTE *)(v3 + 760);
    if (SHIBYTE(v85) < 0)
    {
      sub_21DF205EC(v5, (void *)v84, *((unint64_t *)&v84 + 1));
    }
    else
    {
      *(_OWORD *)v5 = v84;
      *(_QWORD *)(v3 + 776) = v85;
    }
    v6 = (_BYTE *)(v3 + 784);
    if ((v86[23] & 0x80000000) != 0)
    {
      sub_21DF205EC(v6, *(void **)v86, *(unint64_t *)&v86[8]);
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)v86;
      *(_QWORD *)(v3 + 800) = *(_QWORD *)&v86[16];
    }
    *(_DWORD *)(v3 + 808) = v87;
    v7 = (_BYTE *)(v3 + 816);
    if (SHIBYTE(v89) < 0)
    {
      sub_21DF205EC(v7, (void *)v88, *((unint64_t *)&v88 + 1));
    }
    else
    {
      *(_OWORD *)v7 = v88;
      *(_QWORD *)(v3 + 832) = v89;
    }
    v8 = (_BYTE *)(v3 + 840);
    if (SHIBYTE(v91) < 0)
    {
      sub_21DF205EC(v8, (void *)v90, *((unint64_t *)&v90 + 1));
    }
    else
    {
      *(_OWORD *)v8 = v90;
      *(_QWORD *)(v3 + 856) = v91;
    }
    *(_WORD *)(v3 + 864) = v92;
    *(_BYTE *)(v3 + 866) = v93;
    v9 = (_BYTE *)(v3 + 872);
    if (SBYTE7(v94[1]) < 0)
    {
      sub_21DF205EC(v9, *(void **)&v94[0], *((unint64_t *)&v94[0] + 1));
    }
    else
    {
      *(_OWORD *)v9 = v94[0];
      *(_QWORD *)(v3 + 888) = *(_QWORD *)&v94[1];
    }
    *(_DWORD *)(v3 + 896) = DWORD2(v94[1]);
    *(_BYTE *)(v3 + 900) = BYTE12(v94[1]);
    v10 = (_BYTE *)(v3 + 904);
    if (SBYTE7(v96[0]) < 0)
    {
      sub_21DF205EC(v10, (void *)v95, *((unint64_t *)&v95 + 1));
    }
    else
    {
      *(_OWORD *)v10 = v95;
      *(_QWORD *)(v3 + 920) = *(_QWORD *)&v96[0];
    }
    v11 = (_BYTE *)(v3 + 928);
    if (SHIBYTE(v96[1]) < 0)
    {
      sub_21DF205EC(v11, *((void **)&v96[0] + 1), *(unint64_t *)&v96[1]);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)((char *)v96 + 8);
      *(_QWORD *)(v3 + 944) = *((_QWORD *)&v96[1] + 1);
    }
    *(_DWORD *)(v3 + 952) = v97;
    v12 = (_BYTE *)(v3 + 960);
    if (SBYTE7(v98[1]) < 0)
    {
      sub_21DF205EC(v12, *(void **)&v98[0], *((unint64_t *)&v98[0] + 1));
    }
    else
    {
      *(_OWORD *)v12 = v98[0];
      *(_QWORD *)(v3 + 976) = *(_QWORD *)&v98[1];
    }
    *(_WORD *)(v3 + 984) = WORD4(v98[1]);
    *(_BYTE *)(v3 + 986) = BYTE10(v98[1]);
    *(_QWORD *)(v3 + 992) = 0;
    *(_QWORD *)(v3 + 1008) = 0;
    *(_QWORD *)(v3 + 1000) = 0;
    v14 = (__int128 *)*((_QWORD *)&v99 + 1);
    v13 = (__int128 *)v99;
    v15 = *((_QWORD *)&v99 + 1) - v99;
    if (*((_QWORD *)&v99 + 1) != (_QWORD)v99)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      if (v16 >= 0xAAAAAAAAAAAAAABLL)
        goto LABEL_132;
      v17 = (char *)operator new(v15);
      *(_QWORD *)(v3 + 992) = v17;
      *(_QWORD *)(v3 + 1000) = v17;
      *(_QWORD *)(v3 + 1008) = &v17[24 * v16];
      do
      {
        if (*((char *)v13 + 23) < 0)
        {
          sub_21DF205EC(v17, *(void **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v18 = *v13;
          *((_QWORD *)v17 + 2) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v17 = v18;
        }
        v13 = (__int128 *)((char *)v13 + 24);
        v17 += 24;
      }
      while (v13 != v14);
      *(_QWORD *)(v3 + 1000) = v17;
    }
    v19 = (_BYTE *)(v3 + 1016);
    if (SHIBYTE(v100[3]) < 0)
    {
      sub_21DF205EC(v19, (void *)v100[1], v100[2]);
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)&v100[1];
      *(_QWORD *)(v3 + 1032) = v100[3];
    }
    v20 = (_BYTE *)(v3 + 1040);
    if (SHIBYTE(v102) < 0)
    {
      sub_21DF205EC(v20, (void *)v101, *((unint64_t *)&v101 + 1));
    }
    else
    {
      *(_OWORD *)v20 = v101;
      *(_QWORD *)(v3 + 1056) = v102;
    }
    v21 = (_BYTE *)(v3 + 1064);
    if (SHIBYTE(v104) < 0)
    {
      sub_21DF205EC(v21, (void *)v103, *((unint64_t *)&v103 + 1));
    }
    else
    {
      *(_OWORD *)v21 = v103;
      *(_QWORD *)(v3 + 1080) = v104;
    }
    v22 = (_BYTE *)(v3 + 1088);
    if (SHIBYTE(v106) < 0)
    {
      sub_21DF205EC(v22, (void *)v105, *((unint64_t *)&v105 + 1));
    }
    else
    {
      *(_OWORD *)v22 = v105;
      *(_QWORD *)(v3 + 1104) = v106;
    }
    *(_OWORD *)(v3 + 1112) = v107;
    *(_WORD *)(v3 + 1128) = v108;
    *(_BYTE *)(v3 + 1136) = 0;
    *(_OWORD *)(v3 + 1144) = 0u;
    *(_OWORD *)(v3 + 1160) = 0u;
    *(_OWORD *)(v3 + 1176) = 0u;
    *(_OWORD *)(v3 + 1192) = 0u;
    if (*(_BYTE *)(v3 + 984))
      *(_BYTE *)(v3 + 416) = 1;
    v23 = (_OWORD *)operator new();
    v24 = v23;
    *v23 = 0u;
    v23[1] = 0u;
    *(_QWORD *)(v3 + 304) = v23;
    v26 = *(_QWORD **)(v3 + 280);
    v25 = *(_QWORD *)(v3 + 288);
    if ((unint64_t)v26 < v25)
    {
      *v26 = v23;
      v27 = v26 + 1;
LABEL_66:
      *(_QWORD *)(v3 + 280) = v27;
      *(_QWORD *)(v3 + 296) = *(_QWORD *)(v3 + 304);
      sub_21DF1AF28(v109, "deprecated");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "required");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "key");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "shared");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "hash");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "id");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "force_align");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "bit_flags");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "bit_flags_all");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "bit_flags_none");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "original_order");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "nested_flatbuffer");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "csharp_partial");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "streaming");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "idempotent");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "cpp_type");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "cpp_ptr_type");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "cpp_ptr_type_get");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "cpp_str_type");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "cpp_str_flex_ctor");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "native_inline");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "native_custom_alloc");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "native_type");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "native_default");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "flexbuffer");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "private");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF1AF28(v109, "apple_internal");
      *((_BYTE *)sub_21DF9E804((uint64_t **)(v3 + 704), v109, (uint64_t)v109) + 56) = 1;
      if (v110 < 0)
        operator delete(v109[0]);
      sub_21DF9E694((uint64_t)__p);
      *(_BYTE *)(v3 + 733) = 1;
      flatbuffers::Parser::Deserialize((flatbuffers::Parser *)v3, byte_21DFA30F3);
      v36 = *(_QWORD *)(a1 + 752);
      memset(__p, 0, 24);
      sub_21DF9E8F8(v3, v36, (uint64_t)__p);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      sub_21DF28954(v37, "------ Start Translator Metadata %s shader %d ------\n", v38, v39, v40, v41, v42, v43, v37);
      if (SHIBYTE(__p[2]) >= 0)
        v51 = __p;
      else
        LOBYTE(v51) = __p[0];
      sub_21DF28954(v44, "%s", v45, v46, v47, v48, v49, v50, (char)v51);
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      sub_21DF28954(v52, "------ End Translator Metadata %s shader %d ------\n", v53, v54, v55, v56, v57, v58, v52);
      sub_21DF9E98C(v3);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_125;
    }
    v28 = *(_QWORD **)(v3 + 272);
    v29 = v26 - v28;
    v30 = v29 + 1;
    if (!((unint64_t)(v29 + 1) >> 61))
    {
      v31 = v25 - (_QWORD)v28;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 61)
          sub_21DF256A4();
        v33 = (char *)operator new(8 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[8 * v29];
      *(_QWORD *)v34 = v24;
      v27 = v34 + 8;
      if (v26 != v28)
      {
        do
        {
          v35 = *--v26;
          *((_QWORD *)v34 - 1) = v35;
          v34 -= 8;
        }
        while (v26 != v28);
        v26 = *(_QWORD **)(v3 + 272);
      }
      *(_QWORD *)(v3 + 272) = v34;
      *(_QWORD *)(v3 + 280) = v27;
      *(_QWORD *)(v3 + 288) = &v33[8 * v32];
      if (v26)
        operator delete(v26);
      goto LABEL_66;
    }
LABEL_132:
    abort();
  }
LABEL_125:
  if (*(_DWORD *)(a1 + 928) - *(_DWORD *)(a1 + 944) + *(_DWORD *)(a1 + 936))
  {
    v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 496))(*(_QWORD *)(a1 + 344));
    v60 = *(_QWORD *)(a1 + 944);
    memset(__p, 0, 24);
    sub_21DF9E8F8(v59, v60, (uint64_t)__p);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    sub_21DF28954(v61, "------ Start Target Translator Metadata %s shader %d ------\n", v62, v63, v64, v65, v66, v67, v61);
    if (SHIBYTE(__p[2]) >= 0)
      v75 = __p;
    else
      LOBYTE(v75) = __p[0];
    sub_21DF28954(v68, "%s", v69, v70, v71, v72, v73, v74, (char)v75);
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    sub_21DF28954(v76, "------ End Target Translator Metadata %s shader %d ------\n", v77, v78, v79, v80, v81, v82, v76);
    sub_21DF9E98C(v59);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_21DF41134(uint64_t a1)
{
  sub_21DF2E650(a1 + 24);
  return a1;
}

void sub_21DF4115C(uint64_t a1)
{
  sub_21DF2E650(a1 + 24);
  JUMPOUT(0x2207A7960);
}

BOOL sub_21DF41194(uint64_t a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  uint64_t *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v55;
  _BOOL4 v56;

  v2 = sub_21DF2EDB4(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(int **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 128));
  v3 = v2;
  if (v2)
  {
    v56 = v2;
    v4 = sub_21DF2EB00(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v55 = sub_21DF2DC24((uint64_t)v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v11 = (uint64_t *)(v10 + 704);
      *(_BYTE *)(v10 + 774) = 1;
      v12 = *(_DWORD *)(v10 + 736) - *(_DWORD *)(v10 + 752) + *(_DWORD *)(v10 + 744);
      sub_21DF2FF00((uint64_t *)(v10 + 704), 4, 0);
      sub_21DF2E08C(v11, 6, 0);
      sub_21DF2E08C(v11, 8, 0);
      sub_21DF2FF00(v11, 10, 0);
      v13 = sub_21DF2DC24((uint64_t)v11, v12);
      v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        v15 = (v7 - v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)sub_21DF2EACC(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v14;
        v20 = v19 + 4;
        while (v7 != v6)
        {
          v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        if (v6)
          operator delete(v6);
        v6 = v19;
        v7 = v20;
      }
      else
      {
        *(_DWORD *)v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v22 = (char *)&unk_2553B3D8C;
    else
      v22 = v6;
    v23 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v22, (v7 - v6) >> 2);
    v24 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v25 = (uint64_t *)(v24 + 704);
    *(_BYTE *)(v24 + 774) = 1;
    v26 = *(_DWORD *)(v24 + 736) - *(_DWORD *)(v24 + 752) + *(_DWORD *)(v24 + 744);
    sub_21DF2E08C((uint64_t *)(v24 + 704), 4, 0);
    sub_21DF2E08C(v25, 6, 0);
    v27 = sub_21DF2E0DC((uint64_t)v25, 3);
    sub_21DF2E00C(v25, 8, v27);
    sub_21DF2E08C(v25, 12, *(_DWORD *)(a1 + 16));
    v28 = sub_21DF2FFE8((uint64_t)v25, 3);
    sub_21DF2E00C(v25, 10, v28);
    v29 = sub_21DF2DC24((uint64_t)v25, v26);
    v30 = operator new(4uLL);
    *v30 = v29;
    v31 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v30, 1);
    v32 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v33 = (uint64_t *)(v32 + 704);
    *(_BYTE *)(v32 + 774) = 1;
    v34 = *(_DWORD *)(v32 + 736) - *(_DWORD *)(v32 + 752) + *(_DWORD *)(v32 + 744);
    sub_21DF2E08C((uint64_t *)(v32 + 704), 4, 0);
    sub_21DF2E08C(v33, 6, 0);
    sub_21DF2E08C(v33, 8, 0);
    sub_21DF2E08C(v33, 10, 0);
    sub_21DF2E08C(v33, 12, 0);
    v35 = *(_DWORD *)(a1 + 12);
    if (v35 <= 4)
      v35 = 4;
    sub_21DF2E08C(v33, 14, v35 - 4);
    v36 = sub_21DF2DC24((uint64_t)v33, v34);
    v37 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v38 = (uint64_t *)(v37 + 704);
    *(_BYTE *)(v37 + 774) = 1;
    v39 = *(_DWORD *)(v37 + 736) - *(_DWORD *)(v37 + 752) + *(_DWORD *)(v37 + 744);
    sub_21DF2E08C((uint64_t *)(v37 + 704), 14, 0);
    sub_21DF2E08C(v38, 12, 0);
    sub_21DF2E08C(v38, 10, 0);
    sub_21DF2E08C(v38, 8, 0);
    sub_21DF2E08C(v38, 6, 0);
    sub_21DF2E08C(v38, 4, 0);
    v40 = sub_21DF2DC24((uint64_t)v38, v39);
    v41 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v42 = v41 + 704;
    *(_BYTE *)(v41 + 774) = 1;
    v43 = *(_DWORD *)(v41 + 736) - *(_DWORD *)(v41 + 752) + *(_DWORD *)(v41 + 744);
    sub_21DF402C8((uint64_t *)(v41 + 704), v31);
    v44 = sub_21DF2DC24(v42, v43);
    v45 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = (uint64_t *)(v45 + 704);
    *(_BYTE *)(v45 + 774) = 1;
    LODWORD(v42) = *(_DWORD *)(v45 + 736) - *(_DWORD *)(v45 + 752) + *(_DWORD *)(v45 + 744);
    sub_21DF34D10((uint64_t *)(v45 + 704), v44);
    v47 = sub_21DF2FFE8((uint64_t)v46, 1);
    sub_21DF2E00C(v46, 6, v47);
    sub_21DF2FF00(v46, 8, 0);
    sub_21DF2E08C(v46, 10, *(_DWORD *)(a1 + 12));
    sub_21DF2E08C(v46, 12, 0);
    sub_21DF2E08C(v46, 14, 0);
    sub_21DF2DB24(v46, 16, v36);
    sub_21DF2DB24(v46, 18, v40);
    sub_21DF2FF00(v46, 20, 0);
    sub_21DF2DB24(v46, 22, v23);
    sub_21DF2E08C(v46, 26, 0);
    v48 = sub_21DF2DC24((uint64_t)v46, v42);
    v49 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v50 = (uint64_t *)(v49 + 704);
    *(_BYTE *)(v49 + 774) = 1;
    v51 = *(_DWORD *)(v49 + 736) - *(_DWORD *)(v49 + 752) + *(_DWORD *)(v49 + 744);
    sub_21DF34D10((uint64_t *)(v49 + 704), v55);
    sub_21DF402C8(v50, v48);
    v52 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704;
    v53 = sub_21DF2DC24((uint64_t)v50, v51);
    sub_21DF2ED04(v52, v53);
    operator delete(v30);
    v3 = v56;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *sub_21DF41734()
{
  return "clearvertex";
}

uint64_t sub_21DF41740()
{
  return 9;
}

void sub_21DF41748(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  std::string __p;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v6, (char *)&unk_21DFAD77A);
  sub_21DF1AF28(v4, "vertex_stride");
  sub_21DF34E40(&__p, (const void **)v4, *(_DWORD *)(a1 + 12));
  sub_21DF34EE8(a2, (uint64_t)v6, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

uint64_t sub_21DF41810(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 24);
}

void sub_21DF41824(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 24);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF41864()
{
  return "clearvertex";
}

uint64_t sub_21DF41870()
{
  return 9;
}

void sub_21DF41878(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF41748((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF41888(_QWORD *a1)
{
  return sub_21DF41194((uint64_t)a1 + *(_QWORD *)(*a1 - 96));
}

uint64_t sub_21DF41898(uint64_t a1)
{
  sub_21DF2E650(a1 + 48);
  return a1;
}

void sub_21DF418C0(uint64_t a1)
{
  sub_21DF2E650(a1 + 48);
  JUMPOUT(0x2207A7960);
}

BOOL sub_21DF418F8(uint64_t *a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  uint64_t *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  int v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v69;
  int v70;
  _BOOL4 v71;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  v3 = v2;
  if (v2)
  {
    v71 = v2;
    v4 = sub_21DF2EB00((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v70 = sub_21DF2DC24((uint64_t)v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v11 = (uint64_t *)(v10 + 704);
      *(_BYTE *)(v10 + 774) = 1;
      v12 = *(_DWORD *)(v10 + 736) - *(_DWORD *)(v10 + 752) + *(_DWORD *)(v10 + 744);
      sub_21DF2FF00((uint64_t *)(v10 + 704), 4, 0);
      sub_21DF2E08C(v11, 6, 0);
      sub_21DF2E08C(v11, 8, 0);
      sub_21DF2FF00(v11, 10, 0);
      v13 = sub_21DF2DC24((uint64_t)v11, v12);
      v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        v15 = (v7 - v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          goto LABEL_53;
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)sub_21DF2EACC(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v14;
        v20 = v19 + 4;
        while (v7 != v6)
        {
          v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        if (v6)
          operator delete(v6);
        v6 = v19;
        v7 = v20;
      }
      else
      {
        *(_DWORD *)v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v22 = (char *)&unk_2553B3D8C;
    else
      v22 = v6;
    v23 = sub_21DF34C5C((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704, (uint64_t)v22, (v7 - v6) >> 2);
    v24 = *a1;
    if (*((_DWORD *)a1 + 8) == -1)
    {
      v31 = 0;
      v34 = 0;
      v33 = 0;
    }
    else
    {
      v25 = (uint64_t)a1 + *(_QWORD *)(v24 - 24);
      v26 = (uint64_t *)(v25 + 704);
      *(_BYTE *)(v25 + 774) = 1;
      v27 = *(_DWORD *)(v25 + 736) - *(_DWORD *)(v25 + 752) + *(_DWORD *)(v25 + 744);
      sub_21DF2E08C((uint64_t *)(v25 + 704), 4, 0);
      sub_21DF2E08C(v26, 6, 0);
      v28 = sub_21DF2E0DC((uint64_t)v26, 3);
      sub_21DF2E00C(v26, 8, v28);
      sub_21DF2E08C(v26, 12, *((_DWORD *)a1 + 8));
      v29 = sub_21DF2FFE8((uint64_t)v26, 4);
      sub_21DF2E00C(v26, 10, v29);
      v30 = sub_21DF2DC24((uint64_t)v26, v27);
      v31 = (char *)sub_21DF2EACC(1uLL);
      v33 = &v31[4 * v32];
      *(_DWORD *)v31 = v30;
      v34 = v31 + 4;
      v24 = *a1;
    }
    v69 = v23;
    if (*((_DWORD *)a1 + 9) != -1)
    {
      v35 = (uint64_t)a1 + *(_QWORD *)(v24 - 24);
      v36 = (uint64_t *)(v35 + 704);
      *(_BYTE *)(v35 + 774) = 1;
      v37 = *(_DWORD *)(v35 + 736) - *(_DWORD *)(v35 + 752) + *(_DWORD *)(v35 + 744);
      sub_21DF2E08C((uint64_t *)(v35 + 704), 4, 0);
      sub_21DF2E08C(v36, 6, 0);
      v38 = sub_21DF2E0DC((uint64_t)v36, 3);
      sub_21DF2E00C(v36, 8, v38);
      sub_21DF2E08C(v36, 12, *((_DWORD *)a1 + 9));
      v39 = sub_21DF2FFE8((uint64_t)v36, 2);
      sub_21DF2E00C(v36, 10, v39);
      v40 = sub_21DF2DC24((uint64_t)v36, v37);
      v41 = v40;
      if (v34 >= v33)
      {
        v43 = (v34 - v31) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
LABEL_53:
          abort();
        if ((v33 - v31) >> 1 > v44)
          v44 = (v33 - v31) >> 1;
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v45 = (unint64_t)sub_21DF2EACC(v45);
        v46 = (char *)(v45 + 4 * v43);
        *(_DWORD *)v46 = v41;
        v42 = v46 + 4;
        while (v34 != v31)
        {
          v47 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        if (v31)
          operator delete(v31);
        v31 = v46;
      }
      else
      {
        *(_DWORD *)v34 = v40;
        v42 = v34 + 4;
      }
      v24 = *a1;
      v34 = v42;
    }
    v48 = sub_21DF34C5C((uint64_t)a1 + *(_QWORD *)(v24 - 24) + 704, (uint64_t)&unk_2553B3CDB, 0);
    if (v34 == v31)
      v49 = (char *)&unk_2553B3CDC;
    else
      v49 = v31;
    v50 = sub_21DF34C5C((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704, (uint64_t)v49, (v34 - v31) >> 2);
    v51 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v52 = (uint64_t *)(v51 + 704);
    *(_BYTE *)(v51 + 774) = 1;
    v53 = *(_DWORD *)(v51 + 736) - *(_DWORD *)(v51 + 752) + *(_DWORD *)(v51 + 744);
    sub_21DF2E08C((uint64_t *)(v51 + 704), 4, 0);
    sub_21DF2E08C(v52, 6, 0);
    sub_21DF2E08C(v52, 8, 0);
    sub_21DF2E08C(v52, 10, 0);
    sub_21DF2E08C(v52, 12, 0);
    sub_21DF2E08C(v52, 14, 0);
    LODWORD(v52) = sub_21DF2DC24((uint64_t)v52, v53);
    v54 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v55 = (uint64_t *)(v54 + 704);
    *(_BYTE *)(v54 + 774) = 1;
    v56 = *(_DWORD *)(v54 + 736) - *(_DWORD *)(v54 + 752) + *(_DWORD *)(v54 + 744);
    sub_21DF2E08C((uint64_t *)(v54 + 704), 14, 0);
    sub_21DF2E08C(v55, 12, 0);
    sub_21DF2E08C(v55, 10, 0);
    sub_21DF2E08C(v55, 8, 0);
    sub_21DF2E08C(v55, 6, 0);
    sub_21DF2E08C(v55, 4, 0);
    LODWORD(v55) = sub_21DF2DC24((uint64_t)v55, v56);
    v57 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v58 = (uint64_t *)(v57 + 704);
    *(_BYTE *)(v57 + 774) = 1;
    v59 = *(_DWORD *)(v57 + 736) - *(_DWORD *)(v57 + 752) + *(_DWORD *)(v57 + 744);
    sub_21DF34D10((uint64_t *)(v57 + 704), v48);
    sub_21DF402C8(v58, v50);
    v60 = sub_21DF2DC24((uint64_t)v58, v59);
    v61 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v62 = (uint64_t *)(v61 + 704);
    *(_BYTE *)(v61 + 774) = 1;
    v63 = *(_DWORD *)(v61 + 736) - *(_DWORD *)(v61 + 752) + *(_DWORD *)(v61 + 744);
    sub_21DF34D10((uint64_t *)(v61 + 704), v60);
    sub_21DF2FF00(v62, 6, 0);
    sub_21DF2FF00(v62, 8, *((_BYTE *)a1 + 44) != 0);
    sub_21DF2E08C(v62, 10, *((_DWORD *)a1 + 10));
    sub_21DF2E08C(v62, 12, 0);
    sub_21DF2E08C(v62, 14, 0);
    sub_21DF2DB24(v62, 16, (int)v52);
    sub_21DF2DB24(v62, 18, (int)v55);
    sub_21DF2FF00(v62, 20, 0);
    sub_21DF2DB24(v62, 22, v69);
    sub_21DF2E08C(v62, 26, 0);
    LODWORD(v58) = sub_21DF2DC24((uint64_t)v62, v63);
    v64 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v65 = (uint64_t *)(v64 + 704);
    *(_BYTE *)(v64 + 774) = 1;
    LODWORD(v62) = *(_DWORD *)(v64 + 736) - *(_DWORD *)(v64 + 752) + *(_DWORD *)(v64 + 744);
    sub_21DF34D10((uint64_t *)(v64 + 704), v70);
    sub_21DF402C8(v65, (int)v58);
    v66 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v67 = sub_21DF2DC24((uint64_t)v65, (__int16)v62);
    sub_21DF2ED04(v66, v67);
    if (v31)
      operator delete(v31);
    v3 = v71;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *sub_21DF42028()
{
  return "blitTA";
}

uint64_t sub_21DF42034()
{
  return 10;
}

void sub_21DF4203C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD **)(a1 + 24);
  sub_21DF1AF28(v21, "AGCTABlitState");
  sub_21DF1AF28(v19, "blitType");
  sub_21DF34E94(&v23, (const void **)v19, off_24E1EAAF0[*v3 & 7]);
  sub_21DF1AF28(v17, "primitiveSizePOT");
  sub_21DF34E40(&v24, (const void **)v17, (*v3 >> 8) & 7);
  sub_21DF1AF28(v15, "primitiveCount");
  sub_21DF34E40(&v25, (const void **)v15, (*v3 >> 11));
  sub_21DF1AF28(v13, "loopCount");
  sub_21DF34E40(&v26, (const void **)v13, (*v3 >> 19) & 0xF);
  sub_21DF1AF28(v11, "sampleCountPOT");
  sub_21DF34E40(&v27, (const void **)v11, (*v3 >> 23) & 3);
  sub_21DF1AF28(v9, "regionOffset");
  sub_21DF34E40(&v28, (const void **)v9, (*v3 >> 25) & 1);
  sub_21DF1AF28(v7, "blitTextureFormat");
  sub_21DF34E40(&v29, (const void **)v7, *v3 >> 3);
  sub_21DF1AF28(__p, "unused");
  sub_21DF34E40(&v30, (const void **)__p, (*v3 >> 27) & 0xF);
  sub_21DF34EE8(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
}

uint64_t sub_21DF422C4(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 48);
}

void sub_21DF422D8(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 48);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF42318()
{
  return "blitTA";
}

uint64_t sub_21DF42324()
{
  return 10;
}

void sub_21DF4232C(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF4203C((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF4233C(_QWORD *a1)
{
  return sub_21DF418F8((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

uint64_t sub_21DF4234C(uint64_t a1)
{
  sub_21DF2E650(a1 + 592);
  return a1;
}

void sub_21DF42374(uint64_t a1)
{
  sub_21DF2E650(a1 + 592);
  JUMPOUT(0x2207A7960);
}

BOOL sub_21DF423AC(_QWORD *a1)
{
  _BOOL8 v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  int v11;
  uint64_t *v12;
  __int16 v13;
  int v14;
  char *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v21;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    v3 = *(_QWORD *)(*a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)((char *)a1 + v3 + 344) + 1672))
    {
      v21 = 0x8000000000008000;
      v4 = sub_21DF2FCF4((uint64_t)&v21, (uint64_t)a1 + v3 + 704);
      v5 = operator new(4uLL);
      *v5 = v4;
      v6 = sub_21DF34C5C((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704, (uint64_t)v5, 1);
      operator delete(v5);
      v3 = *(_QWORD *)(*a1 - 24);
    }
    else
    {
      v6 = 0;
    }
    v7 = sub_21DF2EB00((uint64_t)a1 + v3);
    v8 = (uint64_t)v7;
    v10 = v9;
    if (*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 1672))
      sub_21DF42F40(v7, v6);
    v11 = sub_21DF2DC24(v8, v10);
    v12 = sub_21DF8339C(a1 + 2);
    v14 = sub_21DF2DC24((uint64_t)v12, v13);
    v15 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v16 = (uint64_t *)(v15 + 704);
    v15[774] = 1;
    v17 = *((_DWORD *)v15 + 184) - *((_DWORD *)v15 + 188) + *((_DWORD *)v15 + 186);
    sub_21DF34D10((uint64_t *)v15 + 88, v11);
    sub_21DF34D6C(v16, v14);
    v18 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v19 = sub_21DF2DC24((uint64_t)v16, v17);
    sub_21DF2ED04(v18, v19);
  }
  return v2;
}

const char *sub_21DF42544()
{
  return "clear";
}

uint64_t sub_21DF42550()
{
  return 11;
}

void sub_21DF42558(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  std::string v4;
  std::string v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_21DF427EC(&v5, *(_QWORD *)(a1 + 544));
  sub_21DF1AF28(v14, "AGCColorMaskState");
  sub_21DF1AF28(v12, "redEnableBits");
  sub_21DF35258(&v16, (const void **)v12);
  sub_21DF1AF28(v10, "greenEnableBits");
  sub_21DF35258(&v17, (const void **)v10);
  sub_21DF1AF28(v8, "blueEnableBits");
  sub_21DF35258(&v18, (const void **)v8);
  sub_21DF1AF28(__p, "alphaEnableBits");
  sub_21DF35258(&v19, (const void **)__p);
  sub_21DF34EE8(&v4, (uint64_t)v14, (uint64_t)&v16, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  sub_21DF35850(a2, (const void **)&v5.__r_.__value_.__l.__data_, (const void **)&v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF42724(uint64_t a1)
{
  return sub_21DF2E650(a1 + 576);
}

void sub_21DF4272C(uint64_t a1)
{
  sub_21DF2E650(a1 + 576);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF42764(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 592);
}

void sub_21DF42778(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 592);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF427B8()
{
  return "clear";
}

uint64_t sub_21DF427C4()
{
  return 11;
}

void sub_21DF427CC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21DF42558((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF427DC(_QWORD *a1)
{
  return sub_21DF423AC((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

void sub_21DF427EC(std::string *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  std::string __p;
  void *v7[2];
  char v8;
  std::string v9;
  void *v10[2];
  char v11;
  std::string v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  std::string v21;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  std::string v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v44, "AGCDrawBufferState");
  sub_21DF1AF28(v42, "enabledBits");
  sub_21DF35258(&v54, (const void **)v42);
  sub_21DF1AF28(v40, "sampleCount");
  sub_21DF34E40(&v55, (const void **)v40, (*(_DWORD *)(a2 + 32) >> 8) & 0xF);
  sub_21DF1AF28(v38, "colorSampleCount");
  sub_21DF34E40(&v56, (const void **)v38, (unsigned __int16)*(_DWORD *)(a2 + 32) >> 12);
  sub_21DF1AF28(v36, "outputPartitionSize");
  sub_21DF34E40(&v57, (const void **)v36, *(unsigned __int8 *)(a2 + 34));
  sub_21DF1AF28(v34, "LIBSpilling");
  sub_21DF34E40(&v58, (const void **)v34, HIBYTE(*(_DWORD *)(a2 + 32)) & 1);
  sub_21DF1AF28(v32, "unused");
  sub_21DF34E40(&v59, (const void **)v32, *(_DWORD *)(a2 + 32) >> 25);
  sub_21DF1AF28(v30, "encoded : ");
  sub_21DF1AF28(v28, "encoded[0]");
  sub_21DF42CD8(&v27, (_DWORD *)a2);
  sub_21DF35174(&v46, (const void **)v28, (uint64_t)&v27);
  sub_21DF1AF28(v25, "encoded[1]");
  sub_21DF42CD8(&v24, (_DWORD *)(a2 + 4));
  sub_21DF35174(&v47, (const void **)v25, (uint64_t)&v24);
  sub_21DF1AF28(v22, "encoded[2]");
  sub_21DF42CD8(&v21, (_DWORD *)(a2 + 8));
  sub_21DF35174(&v48, (const void **)v22, (uint64_t)&v21);
  sub_21DF1AF28(v19, "encoded[3]");
  sub_21DF42CD8(&v18, (_DWORD *)(a2 + 12));
  sub_21DF35174(&v49, (const void **)v19, (uint64_t)&v18);
  sub_21DF1AF28(v16, "encoded[4]");
  sub_21DF42CD8(&v15, (_DWORD *)(a2 + 16));
  sub_21DF35174(&v50, (const void **)v16, (uint64_t)&v15);
  sub_21DF1AF28(v13, "encoded[5]");
  sub_21DF42CD8(&v12, (_DWORD *)(a2 + 20));
  sub_21DF35174(&v51, (const void **)v13, (uint64_t)&v12);
  sub_21DF1AF28(v10, "encoded[6]");
  sub_21DF42CD8(&v9, (_DWORD *)(a2 + 24));
  sub_21DF35174(&v52, (const void **)v10, (uint64_t)&v9);
  sub_21DF1AF28(v7, "encoded[7]");
  sub_21DF42CD8(&__p, (_DWORD *)(a2 + 28));
  sub_21DF35174(&v53, (const void **)v7, (uint64_t)&__p);
  sub_21DF34EE8(&v60, (uint64_t)v30, (uint64_t)&v46, 8);
  sub_21DF34EE8(a1, (uint64_t)v44, (uint64_t)&v54, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v60.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v60.__r_.__value_.__l.__data_ + i * 8));
  }
  for (j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + j * 8));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
}

void sub_21DF42CD8(std::string *a1, _DWORD *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v19, "AGCDrawBuffer");
  sub_21DF1AF28(v17, "pbeSourceFormat");
  sub_21DF34E94(&v21, (const void **)v17, off_24E1EAB28[*a2 & 0x1F]);
  sub_21DF1AF28(v15, "numWrittenComponents");
  sub_21DF34E40(&v22, (const void **)v15, *a2 >> 5);
  sub_21DF1AF28(v13, "gammaCorrection");
  sub_21DF34E40(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_21DF1AF28(v11, "colorSpaceConversion");
  sub_21DF34E94(&v24, (const void **)v11, off_24E1EABE0[((unint64_t)*a2 >> 9) & 7]);
  sub_21DF1AF28(v9, "preEmitSwizzle");
  sub_21DF34E94(&v25, (const void **)v9, off_24E1EAC08[((unint64_t)*a2 >> 12) & 7]);
  sub_21DF1AF28(v7, "outputPartitionOffset");
  sub_21DF34E40(&v26, (const void **)v7, (*a2 >> 15));
  sub_21DF1AF28(__p, "unused");
  sub_21DF34E40(&v27, (const void **)__p, *a2 >> 23);
  sub_21DF34EE8(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
}

uint64_t *sub_21DF42F40(uint64_t *result, int a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = result;
    sub_21DF2DF68((uint64_t)result, 4uLL);
    return sub_21DF2E08C(v3, 10, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t sub_21DF42FB4(uint64_t a1)
{
  sub_21DF2E650(a1 + 592);
  return a1;
}

void sub_21DF42FDC(uint64_t a1)
{
  sub_21DF2E650(a1 + 592);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF43014()
{
  return "bgo";
}

uint64_t sub_21DF43020()
{
  return 12;
}

void sub_21DF43028(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 *v4;
  uint64_t i;
  std::string v6;
  std::string v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_21DF427EC(&v7, *(_QWORD *)(a1 + 544));
  v4 = *(unsigned __int16 **)(a1 + 584);
  sub_21DF1AF28(v12, "AGCBackgroundObjectState");
  sub_21DF1AF28(v10, "dimensionBits");
  std::to_string(&v14, *v4);
  sub_21DF35174(&v15, (const void **)v10, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  sub_21DF1AF28(&v14, "arrayBits");
  sub_21DF43294(&v16, (const void **)&v14.__r_.__value_.__l.__data_, *((_BYTE *)v4 + 2));
  sub_21DF1AF28(__p, "clearedBits");
  sub_21DF43294(&v17, (const void **)__p, *((_BYTE *)v4 + 3));
  sub_21DF34EE8(&v6, (uint64_t)v12, (uint64_t)&v15, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v17.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  sub_21DF35850(a2, (const void **)&v7.__r_.__value_.__l.__data_, (const void **)&v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF431DC(uint64_t a1)
{
  return sub_21DF2E650(a1 + 576);
}

void sub_21DF431E4(uint64_t a1)
{
  sub_21DF2E650(a1 + 576);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF4321C(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 592);
}

void sub_21DF43230(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 592);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF43270()
{
  return "bgo";
}

uint64_t sub_21DF4327C()
{
  return 12;
}

void sub_21DF43284(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21DF43028((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void sub_21DF43294(std::string *a1, const void **a2, unsigned __int8 a3)
{
  std::string v5;

  std::to_string(&v5, a3);
  sub_21DF35174(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF432E8(uint64_t a1)
{
  sub_21DF2E650(a1 + 32);
  return a1;
}

void sub_21DF43310(uint64_t a1)
{
  sub_21DF2E650(a1 + 32);
  JUMPOUT(0x2207A7960);
}

BOOL sub_21DF43348(uint64_t *a1)
{
  _BOOL8 v2;
  uint64_t *v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    v3 = sub_21DF2EB00((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v5 = sub_21DF2DC24((uint64_t)v3, v4);
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = v6 + 704;
    *(_BYTE *)(v6 + 774) = 1;
    v8 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
    sub_21DF34D10((uint64_t *)(v6 + 704), v5);
    v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v10 = sub_21DF2DC24(v7, v8);
    sub_21DF2ED04(v9, v10);
    if (*((_BYTE *)a1 + 25))
    {
      v11 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v12 = (uint64_t *)(v11 + 896);
      *(_BYTE *)(v11 + 966) = 1;
      v13 = *(_DWORD *)(v11 + 928) - *(_DWORD *)(v11 + 944) + *(_DWORD *)(v11 + 936);
      v14 = sub_21DF2FFE8(v11 + 896, 1);
      sub_21DF2E00C(v12, 4, v14);
      sub_21DF2FF00(v12, 6, 0);
      sub_21DF2E08C(v12, 8, 0);
      sub_21DF2E08C(v12, 10, 0);
      v15 = sub_21DF2DC24((uint64_t)v12, v13);
      v16 = *a1;
      v17 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      *(_BYTE *)(v17 + 966) = 1;
      v18 = *(_DWORD *)(v17 + 928) - *(_DWORD *)(v17 + 944) + *(_DWORD *)(v17 + 936);
      if (v15)
      {
        v19 = v15;
        sub_21DF2DF68(v17 + 896, 4uLL);
        sub_21DF2E08C((uint64_t *)(v17 + 896), 8, *(_DWORD *)(v17 + 928) - *(_DWORD *)(v17 + 944) + *(_DWORD *)(v17 + 936) - v19 + 4);
        v16 = *a1;
      }
      v20 = (uint64_t)a1 + *(_QWORD *)(v16 - 24) + 896;
      v21 = sub_21DF2DC24(v17 + 896, v18);
      sub_21DF2ED04(v20, v21);
    }
  }
  return v2;
}

const char *sub_21DF43528(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 78) & 0x20) != 0)
    return "sw_eot";
  else
    return "eot";
}

uint64_t sub_21DF4354C()
{
  return 15;
}

void sub_21DF43554(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  std::string __p;
  void *v7[2];
  char v8;
  std::string v9;
  void *v10[2];
  char v11;
  std::string v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  std::string v21;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  std::string v27;
  void *v28[2];
  char v29;
  std::string v30;
  void *v31[2];
  char v32;
  std::string v33;
  void *v34[2];
  char v35;
  std::string v36;
  void *v37[2];
  char v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string v45;
  void *v46[2];
  char v47;
  std::string v48;
  void *v49[2];
  char v50;
  std::string v51;
  void *v52[2];
  char v53;
  std::string v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  sub_21DF1AF28(v73, "AGCEndOfTileState");
  sub_21DF1AF28(v71, "emitMask");
  sub_21DF35258(&v92, (const void **)v71);
  sub_21DF1AF28(v69, "conditionalMask");
  sub_21DF35258(&v93, (const void **)v69);
  sub_21DF1AF28(v67, "sampleCount");
  sub_21DF43DF0(&v94, (const void **)v67, *(_DWORD *)(v3 + 76) & 0xFLL);
  sub_21DF1AF28(v65, "outputPartitionSize");
  sub_21DF43DF0(&v95, (const void **)v65, (*(_QWORD *)(v3 + 72) >> 36) & 0x7FLL);
  sub_21DF1AF28(v63, "numEmits");
  sub_21DF43DF0(&v96, (const void **)v63, (*(_QWORD *)(v3 + 72) >> 43) & 0x1FLL);
  sub_21DF1AF28(v61, "dummyEmitIndex");
  sub_21DF43DF0(&v97, (const void **)v61, *(_WORD *)(v3 + 78) & 0x1FLL);
  sub_21DF1AF28(v59, "unused");
  sub_21DF43DF0(&v98, (const void **)v59, *(_QWORD *)(v3 + 72) >> 54);
  sub_21DF1AF28(v57, "encoded : ");
  sub_21DF1AF28(v55, "encoded[0]");
  sub_21DF43E44(&v54, (unsigned __int8 *)v3);
  sub_21DF35174(&v75, (const void **)v55, (uint64_t)&v54);
  sub_21DF1AF28(v52, "encoded[1]");
  sub_21DF43E44(&v51, (unsigned __int8 *)(v3 + 4));
  sub_21DF35174(&v76, (const void **)v52, (uint64_t)&v51);
  sub_21DF1AF28(v49, "encoded[2]");
  sub_21DF43E44(&v48, (unsigned __int8 *)(v3 + 8));
  sub_21DF35174(&v77, (const void **)v49, (uint64_t)&v48);
  sub_21DF1AF28(v46, "encoded[3]");
  sub_21DF43E44(&v45, (unsigned __int8 *)(v3 + 12));
  sub_21DF35174(&v78, (const void **)v46, (uint64_t)&v45);
  sub_21DF1AF28(v43, "encoded[4]");
  sub_21DF43E44(&v42, (unsigned __int8 *)(v3 + 16));
  sub_21DF35174(&v79, (const void **)v43, (uint64_t)&v42);
  sub_21DF1AF28(v40, "encoded[5]");
  sub_21DF43E44(&v39, (unsigned __int8 *)(v3 + 20));
  sub_21DF35174(&v80, (const void **)v40, (uint64_t)&v39);
  sub_21DF1AF28(v37, "encoded[6]");
  sub_21DF43E44(&v36, (unsigned __int8 *)(v3 + 24));
  sub_21DF35174(&v81, (const void **)v37, (uint64_t)&v36);
  sub_21DF1AF28(v34, "encoded[7]");
  sub_21DF43E44(&v33, (unsigned __int8 *)(v3 + 28));
  sub_21DF35174(&v82, (const void **)v34, (uint64_t)&v33);
  sub_21DF1AF28(v31, "encoded[8]");
  sub_21DF43E44(&v30, (unsigned __int8 *)(v3 + 32));
  sub_21DF35174(&v83, (const void **)v31, (uint64_t)&v30);
  sub_21DF1AF28(v28, "encoded[9]");
  sub_21DF43E44(&v27, (unsigned __int8 *)(v3 + 36));
  sub_21DF35174(&v84, (const void **)v28, (uint64_t)&v27);
  sub_21DF1AF28(v25, "encoded[10]");
  sub_21DF43E44(&v24, (unsigned __int8 *)(v3 + 40));
  sub_21DF35174(&v85, (const void **)v25, (uint64_t)&v24);
  sub_21DF1AF28(v22, "encoded[11]");
  sub_21DF43E44(&v21, (unsigned __int8 *)(v3 + 44));
  sub_21DF35174(&v86, (const void **)v22, (uint64_t)&v21);
  sub_21DF1AF28(v19, "encoded[12]");
  sub_21DF43E44(&v18, (unsigned __int8 *)(v3 + 48));
  sub_21DF35174(&v87, (const void **)v19, (uint64_t)&v18);
  sub_21DF1AF28(v16, "encoded[13]");
  sub_21DF43E44(&v15, (unsigned __int8 *)(v3 + 52));
  sub_21DF35174(&v88, (const void **)v16, (uint64_t)&v15);
  sub_21DF1AF28(v13, "encoded[14]");
  sub_21DF43E44(&v12, (unsigned __int8 *)(v3 + 56));
  sub_21DF35174(&v89, (const void **)v13, (uint64_t)&v12);
  sub_21DF1AF28(v10, "encoded[15]");
  sub_21DF43E44(&v9, (unsigned __int8 *)(v3 + 60));
  sub_21DF35174(&v90, (const void **)v10, (uint64_t)&v9);
  sub_21DF1AF28(v7, "encoded[16]");
  sub_21DF43E44(&__p, (unsigned __int8 *)(v3 + 64));
  sub_21DF35174(&v91, (const void **)v7, (uint64_t)&__p);
  sub_21DF34EE8(&v99, (uint64_t)v57, (uint64_t)&v75, 17);
  sub_21DF34EE8(a2, (uint64_t)v73, (uint64_t)&v92, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v99.__r_.__value_.__l.__data_ + i * 8));
  }
  v5 = 51;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0)
      operator delete(v73[v5]);
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (v74 < 0)
    operator delete(v73[0]);
}

uint64_t sub_21DF43D44(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 32);
}

void sub_21DF43D58(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 32);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF43D98(_QWORD *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 16) + 78) & 0x20) != 0)
    return "sw_eot";
  else
    return "eot";
}

uint64_t sub_21DF43DC8()
{
  return 15;
}

void sub_21DF43DD0(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF43554((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF43DE0(_QWORD *a1)
{
  return sub_21DF43348((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

void sub_21DF43DF0(std::string *a1, const void **a2, unint64_t __val)
{
  std::string v5;

  std::to_string(&v5, __val);
  sub_21DF35174(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_21DF43E44(std::string *a1, unsigned __int8 *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v15, "AGCEmitState");
  sub_21DF1AF28(v13, "slotIndex");
  sub_21DF34E40(&v17, (const void **)v13, *a2);
  sub_21DF1AF28(v11, "channelFormat");
  sub_21DF34E40(&v18, (const void **)v11, a2[1]);
  sub_21DF1AF28(v9, "dimension");
  sub_21DF34E40(&v19, (const void **)v9, a2[2]);
  sub_21DF1AF28(v7, "gammaCorrection");
  sub_21DF34E40(&v20, (const void **)v7, HIBYTE(*(_DWORD *)a2) & 1);
  sub_21DF1AF28(__p, "sparse");
  sub_21DF34E40(&v21, (const void **)__p, (*(_DWORD *)a2 >> 25) & 1);
  sub_21DF34EE8(a1, (uint64_t)v15, (uint64_t)&v17, 5);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v21.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v21.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
}

uint64_t sub_21DF4400C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  void *__p[2];
  char v29;

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (sub_21DF2D948(v2))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    sub_21DF28954(v3, "------ Start compilation key description for %s shader %u  ------", v4, v5, v6, v7, v8, v9, v3);
    v10 = (*(_QWORD *(**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(__p, a1);
    if (v29 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    sub_21DF28954((uint64_t)v10, (const char *)v17, v11, v12, v13, v14, v15, v16, v27);
    if (v29 < 0)
      operator delete(__p[0]);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    sub_21DF28954(v18, "------ End compilation key description for %s shader %u  ------", v19, v20, v21, v22, v23, v24, v18);
  }
  v25 = sub_21DF2D264(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400), a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320), 16843009, 2, 0);
  result = 0;
  if (v25)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    if ((_DWORD)result)
    {
      sub_21DF40324(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      return 1;
    }
  }
  return result;
}

BOOL sub_21DF44138(_QWORD *a1)
{
  _BOOL8 v2;
  uint64_t *v3;
  __int16 v4;
  int v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    v3 = sub_21DF2EB00((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v5 = sub_21DF2DC24((uint64_t)v3, v4);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = (uint64_t)(v6 + 704);
    v6[774] = 1;
    v8 = *((_DWORD *)v6 + 184) - *((_DWORD *)v6 + 188) + *((_DWORD *)v6 + 186);
    sub_21DF34D10((uint64_t *)v6 + 88, v5);
    v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v10 = sub_21DF2DC24(v7, v8);
    sub_21DF2ED04(v9, v10);
  }
  return v2;
}

const char *sub_21DF441F4()
{
  return "utility";
}

uint64_t sub_21DF44200()
{
  return 14;
}

uint64_t sub_21DF44208(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  return 0;
}

_QWORD *sub_21DF44218@<X0>(_QWORD *a1@<X8>)
{
  return sub_21DF1AF28(a1, "{ /* No compilation key */ }");
}

uint64_t sub_21DF44228(uint64_t a1)
{
  sub_21DF2E650(a1 + 8);
  return a1;
}

void sub_21DF44250(uint64_t a1)
{
  sub_21DF2E650(a1 + 8);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF44288(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 8);
}

void sub_21DF4429C(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 8);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF442DC()
{
  return "utility";
}

uint64_t sub_21DF442E8()
{
  return 14;
}

uint64_t sub_21DF442F0(_QWORD *a1)
{
  return sub_21DF4400C((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

_QWORD *sub_21DF44300@<X0>(_QWORD *a1@<X8>)
{
  return sub_21DF1AF28(a1, "{ /* No compilation key */ }");
}

BOOL sub_21DF44310(_QWORD *a1)
{
  return sub_21DF44138((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

uint64_t sub_21DF44320(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t sub_21DF44330(uint64_t a1)
{
  sub_21DF2E650(a1 + 600);
  return a1;
}

void sub_21DF44358(uint64_t a1)
{
  sub_21DF2E650(a1 + 600);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF44390(uint64_t a1)
{
  int v1;
  const char *v2;

  v1 = *(_DWORD *)(a1 + 592);
  v2 = "texture fetch";
  if (v1 == 10)
    v2 = "blit3D";
  if (v1 == 8)
    return "resolve_gl";
  else
    return v2;
}

void sub_21DF443C0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v4;
  uint64_t i;
  std::string *v6;
  std::string::size_type v7;
  unsigned int v8;
  unsigned __int8 v9;
  const std::string::value_type *v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_21DF427EC(&v13, *(_QWORD *)(a1 + 544));
  v4 = *(_DWORD **)(a1 + 584);
  if (v4)
  {
    sub_21DF1AF28(&v30, "AGC3DBlitState");
    sub_21DF1AF28(v28, "blitType");
    sub_21DF34E94(&v31, (const void **)v28, off_24E1EAC38[*v4 & 7]);
    sub_21DF1AF28(v26, "readBufferSampleCount");
    sub_21DF34E40(&v32, (const void **)v26, (*v4 >> 3) & 0xF);
    sub_21DF1AF28(v24, "sample3D");
    sub_21DF34E40(&v33, (const void **)v24, (*v4 >> 7) & 1);
    sub_21DF1AF28(v22, "regionOffset");
    sub_21DF34E40(&v34, (const void **)v22, (*v4 >> 8) & 1);
    sub_21DF1AF28(v20, "remapAddress");
    sub_21DF34E40(&v35, (const void **)v20, (*v4 >> 9) & 1);
    sub_21DF1AF28(v18, "remapAddressPOT");
    sub_21DF34E40(&v36, (const void **)v18, (*v4 >> 10) & 1);
    sub_21DF1AF28(v16, "strideDiscard");
    sub_21DF34E40(&v37, (const void **)v16, (*v4 >> 11) & 1);
    sub_21DF1AF28(__p, "blitTextureFormat");
    sub_21DF34E40(&v38, (const void **)__p, (*v4 >> 12) & 0x1F);
    sub_21DF34EE8(&v12, (uint64_t)&v30, (uint64_t)&v31, 8);
    for (i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v38.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_21DF1AF28(&v12, (char *)&unk_21DFAD77A);
  }
  sub_21DF35850((uint64_t)&v30, (const void **)&v13.__r_.__value_.__l.__data_, (const void **)&v12.__r_.__value_.__l.__data_);
  v6 = std::string::append(&v30, "\ntoken type : ");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(_DWORD *)(a1 + 592);
  v9 = atomic_load((unsigned __int8 *)&qword_2553B3928);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3928))
  {
    sub_21DF1AF28(qword_2553B32B0, "AGCStreamTokenUnknownShader");
    sub_21DF1AF28(&qword_2553B32B0[3], "AGCStreamTokenGLSLVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[6], "AGCStreamTokenGLSLFragmentShader");
    sub_21DF1AF28(&qword_2553B32B0[9], "AGCStreamTokenMetalVertexProgram");
    sub_21DF1AF28(&qword_2553B32B0[12], "AGCStreamTokenMetalFragmentProgram");
    sub_21DF1AF28(&qword_2553B32B0[15], "AGCStreamTokenMetalTileProgram");
    sub_21DF1AF28(&qword_2553B32B0[18], "AGCStreamTokenMetalComputeProgram");
    sub_21DF1AF28(&qword_2553B32B0[21], "AGCStreamTokenClearFragmentShader");
    sub_21DF1AF28(&qword_2553B32B0[24], "AGCStreamTokenResolveFragmentShaderGL");
    sub_21DF1AF28(&qword_2553B32B0[27], "AGCStreamTokenBackgroundObjectFragmentShader");
    sub_21DF1AF28(&qword_2553B32B0[30], "AGCStreamToken3DBlitFragmentShader");
    sub_21DF1AF28(&qword_2553B32B0[33], "AGCStreamTokenTABlitVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[36], "AGCStreamTokenBlitComputeShader");
    sub_21DF1AF28(&qword_2553B32B0[39], "AGCStreamTokenBlitSparseShader");
    sub_21DF1AF28(&qword_2553B32B0[42], "AGCStreamTokenEndOfTileProgram");
    sub_21DF1AF28(&qword_2553B32B0[45], "AGCStreamTokenExecuteIndirectESLGenerationVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[48], "AGCStreamTokenExecuteIndirectRangeExecutionVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[51], "AGCStreamTokenExecuteIndirectRangeExecutionComputeShader");
    sub_21DF1AF28(&qword_2553B32B0[54], "AGCStreamTokenExecuteIndirectCDMPatchUpShader");
    sub_21DF1AF28(&qword_2553B32B0[57], "AGCStreamTokenVisibilityVertexClearShader");
    sub_21DF1AF28(&qword_2553B32B0[60], "AGCStreamTokenTileDispatchVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[63], "AGCStreamTokenClearVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[66], "AGCStreamTokenResolveVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[69], "AGCStreamTokenBlitVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[72], "AGCStreamTokenVDMStateSyncProgram");
    sub_21DF1AF28(&qword_2553B32B0[75], "AGCStreamTokenContextSaveProgram");
    sub_21DF1AF28(&qword_2553B32B0[78], "AGCStreamTokenContextRestoreProgram");
    sub_21DF1AF28(&qword_2553B32B0[81], "AGCStreamTokenToggledContextSaveProgram");
    sub_21DF1AF28(&qword_2553B32B0[84], "AGCStreamTokenToggledContextRestoreProgram");
    sub_21DF1AF28(&qword_2553B32B0[87], "AGCStreamTokenComputeFlushProgram");
    sub_21DF1AF28(&qword_2553B32B0[90], "AGCStreamTokenComputeFlushProgramWithFWInterrupt");
    sub_21DF1AF28(&qword_2553B32B0[93], "AGCStreamTokenComputeFenceProgram");
    sub_21DF1AF28(&qword_2553B32B0[96], "AGCStreamTokenComputeTGSizeOptimizationProgram");
    sub_21DF1AF28(&qword_2553B32B0[99], "AGCStreamTokenSwTessellationNonBucketedEmitDrawCommandsVSProgram");
    sub_21DF1AF28(&qword_2553B32B0[102], "AGCStreamTokenSwTessellationBucketedComputeInstanceCountsVSProgram");
    sub_21DF1AF28(&qword_2553B32B0[105], "AGCStreamTokenSwTessellationBucketedSumInstanceCountsVSProgram");
    sub_21DF1AF28(&qword_2553B32B0[108], "AGCStreamTokenSwTessellationBucketedEmitDrawCommandsVSProgram");
    sub_21DF1AF28(&qword_2553B32B0[111], "AGCStreamTokenVDMNOPDBGProgram");
    sub_21DF1AF28(&qword_2553B32B0[114], "AGCStreamTokenSwTessellationBucketedClearInstanceCountsProgram");
    sub_21DF1AF28(&qword_2553B32B0[117], "AGCStreamTokenUtilityProgram");
    sub_21DF1AF28(&qword_2553B32B0[120], "AGCStreamTokenNumGfxShaders");
    sub_21DF1AF28(&qword_2553B32B0[123], "AGCStreamTokenBitCodeGLIR");
    sub_21DF1AF28(&qword_2553B32B0[126], "AGCStreamTokenVertexContextStateGL");
    sub_21DF1AF28(&qword_2553B32B0[129], "AGCStreamTokenFragmentContextStateGL");
    sub_21DF1AF28(&qword_2553B32B0[132], "AGCStreamTokenVertexContextStateAGP");
    sub_21DF1AF28(&qword_2553B32B0[135], "AGCStreamTokenFragmentContextStateAGP");
    sub_21DF1AF28(&qword_2553B32B0[138], "AGCStreamTokenSamplerRemapState");
    sub_21DF1AF28(&qword_2553B32B0[141], "AGCStreamTokenSamplerPCFState");
    sub_21DF1AF28(&qword_2553B32B0[144], "AGCStreamTokenDrawBufferState");
    sub_21DF1AF28(&qword_2553B32B0[147], "AGCStreamTokenTileState");
    sub_21DF1AF28(&qword_2553B32B0[150], "AGCStreamTokenBackgroundObjectState");
    sub_21DF1AF28(&qword_2553B32B0[153], "AGCStreamTokenEndOfTileState");
    sub_21DF1AF28(&qword_2553B32B0[156], "AGCStreamToken3DBlitState");
    sub_21DF1AF28(&qword_2553B32B0[159], "AGCStreamTokenTABlitState");
    sub_21DF1AF28(&qword_2553B32B0[162], "AGCStreamTokenCDMBlitState");
    sub_21DF1AF28(&qword_2553B32B0[165], "AGCStreamTokenBlitSparseState");
    sub_21DF1AF28(&qword_2553B32B0[168], "AGCStreamTokenVaryingSemantics");
    sub_21DF1AF28(&qword_2553B32B0[171], "AGCStreamTokenVaryingTypes");
    sub_21DF1AF28(&qword_2553B32B0[174], "AGCStreamTokenClearFragmentColorMaskState");
    sub_21DF1AF28(&qword_2553B32B0[177], "AGCStreamTokenComputeContextStateAGP");
    sub_21DF1AF28(&qword_2553B32B0[180], "AGCStreamTokenTexUnitBiasState");
    sub_21DF1AF28(&qword_2553B32B0[183], "AGCStreamTokenTessellationDriverState");
    sub_21DF1AF28(&qword_2553B32B0[186], "AGCStreamTokenExecuteIndirectDriverState");
    sub_21DF1AF28(&qword_2553B32B0[189], "AGCStreamTokenGPUGatherVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[192], "AGCStreamTokenGPUGatherComputeShader");
    sub_21DF1AF28(&qword_2553B32B0[195], "AGCStreamTokenPDSPatchUpVertexShader");
    sub_21DF1AF28(&qword_2553B32B0[198], "AGCStreamTokenPDSPatchUpComputeShader");
    sub_21DF1AF28(&qword_2553B32B0[201], "ACGStreamTokenArch");
    sub_21DF1AF28(&qword_2553B32B0[204], "AGCStreamTokenEnd");
    __cxa_atexit((void (*)(void *))sub_21DF44EE8, qword_2553B32B0, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B3928);
  }
  v10 = (const std::string::value_type *)&qword_2553B32B0[3 * v8];
  if (v10[23] < 0)
    v10 = *(const std::string::value_type **)v10;
  v11 = std::string::append(&v31, v10);
  *a2 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF44DF8()
{
  return 13;
}

uint64_t sub_21DF44E00(uint64_t a1)
{
  return sub_21DF2E650(a1 + 584);
}

void sub_21DF44E08(uint64_t a1)
{
  sub_21DF2E650(a1 + 584);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF44E40(_QWORD *a1)
{
  return sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 600);
}

void sub_21DF44E54(_QWORD *a1)
{
  sub_21DF2E650((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 600);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF44E94(_QWORD *a1)
{
  int v1;
  const char *v2;

  v1 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 592);
  v2 = "texture fetch";
  if (v1 == 10)
    v2 = "blit3D";
  if (v1 == 8)
    return "resolve_gl";
  else
    return v2;
}

uint64_t sub_21DF44ED0()
{
  return 13;
}

void sub_21DF44ED8(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF443C0((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

uint64_t sub_21DF44EE8(uint64_t a1)
{
  uint64_t v2;

  v2 = 1656;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0)
      operator delete(*(void **)(a1 + v2 - 24));
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t *sub_21DF44F28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v3 - 24)) = a2[1];
  *((_BYTE *)a1 + 8) = 0;
  v4 = operator new();
  v5 = MEMORY[0x2207A7210](v4, &unk_21DFAD77A, 0, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 336));
  v6 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320) = v5;
  v7 = (uint64_t)a1 + *(_QWORD *)(v6 - 24);
  v8 = *(_QWORD *)(v7 + 320);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 400) + 32);
  v10 = *(void **)(v9 + 8);
  if (v10)
    v11 = strlen(*(const char **)(v9 + 8));
  else
    v11 = 0;
  sub_21DF2CC40(v8, v10, v11);
  v12 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 32);
  if (*(_QWORD *)(v12 + 16))
    strlen(*(const char **)(v12 + 16));
  llvm::Module::setDataLayout();
  v13 = *a1;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 320) = *(uint64_t *)((char *)a1
                                                                                         + *(_QWORD *)(*a1 - 24)
                                                                                         + 320);
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 24) + 344) + 328) = (char *)a1 + *(_QWORD *)(v13 - 24) + 592;
  sub_21DF2FB64();
  v14 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 104) = -1;
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 24) + 344) + 104) = -1;
  return a1;
}

uint64_t sub_21DF45088(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[4];
  __int16 v16;

  v6 = llvm::User::operator new((llvm::User *)0x58);
  v15[0] = "agc.region_offsets";
  v16 = 259;
  v7 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v7 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  v8 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v16 = 257;
  v9 = sub_21DF19394(v8 + 1, **(llvm::Type ***)(*(_QWORD *)v6 + 16), v6, 0, (uint64_t)v15);
  v10 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v11 = llvm::ConstantInt::get();
  v16 = 257;
  *a2 = sub_21DF1A410(v10, v9, v11, (uint64_t)v15);
  v12 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v16 = 257;
  v13 = llvm::ConstantInt::get();
  result = sub_21DF1AE6C(v12, v9, v13, (uint64_t)v15);
  *a3 = result;
  return result;
}

uint64_t sub_21DF45214(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];
  __int16 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  _BYTE v91[32];
  __int16 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;

  v4 = a4;
  v98 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v7 = *(_DWORD *)(a4 + 32);
  else
    v7 = 1;
  switch(a2)
  {
    case 11:
      v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v9 = *((_QWORD *)v8 + 43);
      v76 = *(_OWORD *)(v8 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
      v78 = *((_DWORD *)v8 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 96))(v9, &v76, 6, v4, a3, 0, 0);
      if (v77)
        goto LABEL_26;
      return v10;
    case 12:
      v93 = llvm::ConstantInt::get();
      v94 = llvm::ConstantInt::get();
      v95 = llvm::ConstantInt::get();
      v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v17 = llvm::ConstantVector::get();
      v92 = 257;
      v18 = sub_21DF19EE8(v16, a3, a3, v17, (uint64_t)v91);
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v20 = *((_QWORD *)v19 + 43);
      v88 = *(_OWORD *)(v19 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 8));
      v90 = *((_DWORD *)v19 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 96))(v20, &v88, 0, v4, v18, 1, 0);
      if (v89)
        goto LABEL_26;
      return v10;
    case 13:
      v93 = llvm::ConstantInt::get();
      v94 = llvm::ConstantInt::get();
      v95 = llvm::ConstantInt::get();
      v96 = llvm::ConstantInt::get();
      v21 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v22 = llvm::ConstantVector::get();
      v92 = 257;
      v23 = sub_21DF19EE8(v21, a3, a3, v22, (uint64_t)v91);
      v24 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v25 = *((_QWORD *)v24 + 43);
      v85 = *(_OWORD *)(v24 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 8));
      v87 = *((_DWORD *)v24 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 96))(v25, &v85, 1, v4, v23, 1, 0);
      if (v86)
        goto LABEL_26;
      return v10;
    case 14:
      v93 = llvm::ConstantInt::get();
      v94 = llvm::ConstantInt::get();
      v95 = llvm::ConstantInt::get();
      v96 = llvm::ConstantInt::get();
      v26 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v27 = llvm::ConstantVector::get();
      v92 = 257;
      v28 = sub_21DF19EE8(v26, a3, a3, v27, (uint64_t)v91);
      v29 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v30 = *((_QWORD *)v29 + 43);
      v82 = *(_OWORD *)(v29 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v29 + 8));
      v84 = *((_DWORD *)v29 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 96))(v30, &v82, 2, v4, v28, 1, 0);
      if (v83)
        goto LABEL_26;
      return v10;
    case 15:
      v93 = llvm::ConstantInt::get();
      v94 = llvm::ConstantInt::get();
      v95 = llvm::ConstantInt::get();
      v96 = llvm::ConstantInt::get();
      v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v32 = llvm::ConstantVector::get();
      v92 = 257;
      v33 = sub_21DF19EE8(v31, a3, a3, v32, (uint64_t)v91);
      v34 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v35 = *((_QWORD *)v34 + 43);
      v79 = *(_OWORD *)(v34 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v34 + 8));
      v81 = *((_DWORD *)v34 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 96))(v35, &v79, 3, v4, v33, 1, 0);
      if (v80)
        goto LABEL_26;
      return v10;
    case 16:
      v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v37 = *((_QWORD *)v36 + 43);
      v73 = *(_OWORD *)(v36 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v36 + 8));
      v75 = *((_DWORD *)v36 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 96))(v37, &v73, 7, v4, a3, 0, 0);
      if (v74)
        goto LABEL_26;
      return v10;
    case 17:
      v38 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v39 = *((_QWORD *)v38 + 43);
      v70 = *(_OWORD *)(v38 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 8));
      v72 = *((_DWORD *)v38 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 96))(v39, &v70, 8, v4, a3, 0, 0);
      if (v71)
        goto LABEL_26;
      return v10;
    case 18:
      v40 = llvm::ConstantFP::get();
      v41 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v92 = 257;
      v42 = llvm::ConstantInt::get();
      v43 = sub_21DF79584(v41, a3, v42, (uint64_t)v91);
      v44 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v45 = (uint64_t)(v44 + 8);
      v46 = *((_QWORD *)v44 + 20);
      v92 = 257;
      v47 = sub_21DF1A79C((uint64_t)(v44 + 8), 49, v43, v46, (uint64_t)v91);
      v97 = 257;
      v48 = sub_21DF20300(v45, v47, v40, (uint64_t)&v93);
      v49 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 192);
      v69 = 257;
      return sub_21DF1AC78(v45, v48, v49, (uint64_t)v68);
    case 19:
      v93 = llvm::ConstantInt::get();
      v94 = llvm::ConstantInt::get();
      v95 = llvm::ConstantInt::get();
      v96 = llvm::ConstantInt::get();
      v51 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v52 = llvm::ConstantVector::get();
      v92 = 257;
      v53 = sub_21DF19EE8(v51, a3, a3, v52, (uint64_t)v91);
      v54 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v55 = *((_QWORD *)v54 + 43);
      v65 = *(_OWORD *)(v54 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v54 + 8));
      v67 = *((_DWORD *)v54 + 26);
      v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v55 + 120))(v55, &v65, v53);
      if (v66)
LABEL_26:
        llvm::MetadataTracking::untrack();
      return v10;
    default:
      if (v7 == 4)
      {
        v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v92 = 257;
        v14 = (uint64_t *)v91;
        v13 = a3;
      }
      else
      {
        if (v7 != 1)
        {
          v10 = llvm::UndefValue::get();
          if (v7)
          {
            v57 = 0;
            v58 = v7;
            do
            {
              v59 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
              v92 = 257;
              v60 = llvm::ConstantInt::get();
              v61 = sub_21DF79584(v59, a3, v60, (uint64_t)v91);
              v62 = v4;
              if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
                v62 = **(_QWORD **)(v4 + 16);
              v97 = 257;
              v63 = sub_21DF1ABB0(v59, v61, v62, 0, (uint64_t)&v93);
              v69 = 257;
              v64 = llvm::ConstantInt::get();
              v10 = sub_21DF7980C(v59, v10, v63, v64, (uint64_t)v68);
              ++v57;
            }
            while (v58 != v57);
          }
          return v10;
        }
        v11 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v92 = 257;
        v12 = llvm::ConstantInt::get();
        v13 = sub_21DF79584(v11, a3, v12, (uint64_t)v91);
        if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
          v4 = **(_QWORD **)(v4 + 16);
        v97 = 257;
        v14 = &v93;
        v15 = v11;
      }
      return sub_21DF1ABB0(v15, v13, v4, 0, (uint64_t)v14);
  }
}

uint64_t sub_21DF45C0C(uint64_t result, _QWORD *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  char *v8;

  switch(a3)
  {
    case 1:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 176);
      goto LABEL_14;
    case 2:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 184);
      goto LABEL_14;
    case 3:
    case 18:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 192);
      goto LABEL_16;
    case 4:
      v7 = 0;
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 160);
      goto LABEL_17;
    case 5:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 224);
      goto LABEL_14;
    case 6:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 232);
      goto LABEL_14;
    case 7:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 240);
      goto LABEL_16;
    case 8:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 280);
      goto LABEL_14;
    case 9:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 288);
LABEL_14:
      v7 = 7;
      goto LABEL_17;
    case 10:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 296);
LABEL_16:
      v7 = 6;
LABEL_17:
      v6 = v4;
      break;
    case 11:
      v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v4 = *((_QWORD *)v8 + 24);
      v6 = *((_QWORD *)v8 + 36);
      v7 = 7;
      break;
    case 12:
      v5 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v5[23];
      goto LABEL_20;
    case 13:
    case 14:
    case 15:
      v3 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v3[23];
      goto LABEL_22;
    case 16:
    case 17:
      v5 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v5[24];
LABEL_20:
      v6 = v5[31];
      goto LABEL_23;
    case 19:
      v3 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v3[36];
LABEL_22:
      v6 = v3[33];
LABEL_23:
      v7 = 1;
      break;
    default:
      v4 = 0;
      v6 = 0;
      v7 = 9;
      break;
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

uint64_t sub_21DF45D98(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Type ***v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t Select;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  _BYTE v66[32];
  __int16 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 11:
      v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v8 = *((_QWORD *)v7 + 43);
      v54 = *(_OWORD *)(v7 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 8));
      v56 = *((_DWORD *)v7 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 104))(v8, &v54, 6, a4, a3, 0, 0);
      if (v55)
        goto LABEL_31;
      return a3;
    case 12:
      v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v10 = *((_QWORD *)v9 + 43);
      v68 = *(_OWORD *)(v9 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 8));
      v70 = *((_DWORD *)v9 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 104))(v10, &v68, 0, a4, a3, 1, 0);
      if (v69)
        llvm::MetadataTracking::untrack();
      v71 = llvm::ConstantInt::get();
      v72 = llvm::ConstantInt::get();
      v73 = llvm::ConstantInt::get();
      v12 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      goto LABEL_37;
    case 13:
      v13 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v14 = *((_QWORD *)v13 + 43);
      v63 = *(_OWORD *)(v13 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v13 + 8));
      v65 = *((_DWORD *)v13 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 104))(v14, &v63, 1, a4, a3, 1, 0);
      if (v64)
        goto LABEL_14;
      goto LABEL_15;
    case 14:
      v15 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v16 = *((_QWORD *)v15 + 43);
      v60 = *(_OWORD *)(v15 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v15 + 8));
      v62 = *((_DWORD *)v15 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 104))(v16, &v60, 2, a4, a3, 1, 0);
      if (!v61)
        goto LABEL_15;
LABEL_14:
      llvm::MetadataTracking::untrack();
LABEL_15:
      v71 = llvm::ConstantInt::get();
      v72 = llvm::ConstantInt::get();
      v73 = llvm::ConstantInt::get();
      goto LABEL_36;
    case 15:
      v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v18 = *((_QWORD *)v17 + 43);
      v57 = *(_OWORD *)(v17 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 8));
      v59 = *((_DWORD *)v17 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 104))(v18, &v57, 3, a4, a3, 1, 0);
      if (v58)
        goto LABEL_34;
      goto LABEL_35;
    case 16:
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v20 = *((_QWORD *)v19 + 43);
      v51 = *(_OWORD *)(v19 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 8));
      v53 = *((_DWORD *)v19 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 104))(v20, &v51, 7, a4, a3, 0, 0);
      if (!v52)
        return a3;
      goto LABEL_31;
    case 17:
      v21 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v22 = *((_QWORD *)v21 + 43);
      v48 = *(_OWORD *)(v21 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v21 + 8));
      v50 = *((_DWORD *)v21 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 104))(v22, &v48, 8, a4, a3, 0, 0);
      if (v49)
LABEL_31:
        llvm::MetadataTracking::untrack();
      return a3;
    case 18:
      v23 = llvm::ConstantFP::get();
      v24 = llvm::ConstantInt::get();
      v25 = llvm::ConstantInt::get();
      v26 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v27 = llvm::ConstantInt::get();
      v67 = 257;
      v28 = (llvm::Type ***)sub_21DF1A410(v26, a3, v27, (uint64_t)v66);
      v29 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v67 = 257;
      v30 = sub_21DF19FAC(v29, (uint64_t)v28, v24, (uint64_t)v66);
      v31 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 160);
      v75 = 257;
      sub_21DF1A79C(v29, 49, v30, v31, (uint64_t)&v71);
      v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v33 = (uint64_t)(v32 + 8);
      v34 = *((_QWORD *)v32 + 20);
      v67 = 257;
      v35 = sub_21DF20594((uint64_t)(v32 + 8), (uint64_t)v28, v34, (uint64_t)v66);
      v75 = 257;
      sub_21DF38C30(v33, v35, v23, (uint64_t)&v71);
      v36 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
      v67 = 257;
      sub_21DF19478(v36, 34, v28, v25, (uint64_t)v66);
      v67 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      v38 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v39 = *((_QWORD *)v38 + 24);
      v67 = 257;
      v40 = sub_21DF1A79C((uint64_t)(v38 + 8), 49, Select, v39, (uint64_t)v66);
      goto LABEL_38;
    case 19:
      v41 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v42 = *((_QWORD *)v41 + 43);
      v45 = *(_OWORD *)(v41 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 8));
      v47 = *((_DWORD *)v41 + 26);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v42 + 112))(v42, &v45, a3);
      if (v46)
LABEL_34:
        llvm::MetadataTracking::untrack();
LABEL_35:
      v71 = llvm::ConstantInt::get();
      v72 = llvm::ConstantInt::get();
      v73 = llvm::ConstantInt::get();
LABEL_36:
      v74 = llvm::ConstantInt::get();
      v12 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
LABEL_37:
      v43 = llvm::ConstantVector::get();
      v67 = 257;
      v40 = sub_21DF19EE8(v12, v11, v11, v43, (uint64_t)v66);
LABEL_38:
      a3 = v40;
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t sub_21DF465B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  __int16 v9;

  v2 = a1[8];
  v3 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x2207A697C](v3, v2, 0, 0);
  v9 = 257;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v3, v8, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      result = llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_21DF46650(uint64_t a1, uint64_t a2, llvm::Type *a3, unsigned int a4, int a5)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[12];
  unsigned int v36;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500(a1 + 24, a2, a3);
  v8 = sub_21DF44F28((uint64_t *)a1, (uint64_t *)off_24E1E9360);
  *(_QWORD *)a1 = off_24E1E9250;
  *(_QWORD *)(a1 + 24) = &unk_24E1E92F8;
  v36 = a5 + a4;
  *(_DWORD *)(a1 + 12) = a5 + a4;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a5;
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v35[-v10];
  if (v9 >= 0x200)
    v12 = 512;
  else
    v12 = v9;
  bzero(&v35[-v10], v12);
  if (a4)
  {
    v13 = *(_QWORD *)(a1 + 184);
    v14 = v11;
    v15 = a4;
    do
    {
      *v14++ = v13;
      --v15;
    }
    while (v15);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v17 = v16;
  *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xC00F | 0x660;
  v37[0] = "entry";
  v38 = 259;
  operator new();
  v18 = llvm::BasicBlock::BasicBlock();
  v19 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v19 + 56) = v18;
  *(_QWORD *)(v19 + 64) = v18 + 40;
  v20 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v21 = v20[43];
  v22 = *(_QWORD *)(v21 + 1232);
  if (v22)
    v23 = strlen(*(const char **)(v21 + 1232));
  else
    v23 = 0;
  v24 = sub_21DF1B0B0((uint64_t)v20, v22, v23, v20[18], v20[73], v20[20]);
  if ((*(_WORD *)(v17 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v17);
  v25 = a1 + 8;
  if (a4)
  {
    v26 = 0;
    v27 = *(_QWORD *)(v17 + 88);
    do
    {
      v39 = 0;
      v40 = 0;
      v39 = llvm::ConstantInt::get();
      v40 = v27;
      v28 = v25 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v38 = 257;
      sub_21DF191A4(v28, *(_QWORD *)(v24 + 24), v24, (uint64_t)&v39, 2, (uint64_t)v37);
      ++v26;
      v27 += 40;
    }
    while (a4 != v26);
  }
  if (v36 > a4)
  {
    do
    {
      v39 = 0;
      v40 = 0;
      v39 = llvm::ConstantInt::get();
      v40 = llvm::ConstantFP::get();
      v29 = v25 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v38 = 257;
      sub_21DF191A4(v29, *(_QWORD *)(v24 + 24), v24, (uint64_t)&v39, 2, (uint64_t)v37);
      ++a4;
      --a5;
    }
    while (a5);
  }
  v30 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v31 = *(_QWORD *)(a1 + v30 + 344);
  if (*(_QWORD *)(v31 + 1264))
  {
    strlen(*(const char **)(v31 + 1264));
    v32 = sub_21DF206CC();
    v33 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v38 = 257;
    sub_21DF191A4(v33 + 8, **(_QWORD **)(*(_QWORD *)v32 + 16), v32, 0, 0, (uint64_t)v37);
    v30 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  }
  sub_21DF465B0((uint64_t *)(v30 + a1 + 8));
  return a1;
}

uint64_t sub_21DF469F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF46AAC(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  llvm::Type **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[4];
  __int16 v43;
  unsigned int v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[4];
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500(a1 + 24, a2, a3);
  sub_21DF44F28((uint64_t *)a1, (uint64_t *)off_24E1E94A0);
  *(_QWORD *)a1 = off_24E1E9390;
  *(_QWORD *)(a1 + 24) = &unk_24E1E9438;
  *(_DWORD *)(a1 + 12) = 1;
  v44 = 0;
  *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 368) + 312))(*(_QWORD *)(a1 + 368), &v44, 3);
  v4 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v44)
  {
    v5 = 8 * v44;
    v6 = (char *)operator new(v5);
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)(v4 + 192);
    do
    {
      *(_QWORD *)&v6[v8] = v9;
      v8 += 8;
    }
    while (v5 != v8);
  }
  else
  {
    v7 = 0;
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v11 = v10;
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x660;
  v42[0] = "entry";
  v43 = 259;
  operator new();
  v12 = llvm::BasicBlock::BasicBlock();
  v13 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v13 + 56) = v12;
  *(_QWORD *)(v13 + 64) = v12 + 40;
  if ((*(_BYTE *)(v11 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v11);
  v14 = *(_DWORD *)(a1 + 16);
  if (v14)
    v15 = 40 * (v14 - 1) + 40;
  else
    v15 = 0;
  v16 = (uint64_t *)(*(_QWORD *)(v11 + 88) + v15);
  llvm::Type::getInt32PtrTy(*(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336), (llvm::LLVMContext *)1);
  v17 = llvm::User::operator new((llvm::User *)0x58);
  v42[0] = "agc.bufferaddress";
  v43 = 259;
  v18 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v18 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v19 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
  v20 = llvm::ConstantInt::get();
  v43 = 257;
  v21 = (uint64_t *)sub_21DF19FAC(v19, (uint64_t)v16, v20, (uint64_t)v42);
  v22 = (llvm::Type **)llvm::ConstantInt::get();
  v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v43 = 257;
  v24 = (uint64_t *)sub_21DF19394((uint64_t *)(v23 + 8), **(llvm::Type ***)(*(_QWORD *)v17 + 16), v17, 0, (uint64_t)v42);
  v49 = 257;
  v25 = sub_21DF1A924(v23, v24, v16, (uint64_t)v48);
  sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v22, v25, 0);
  v26 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v43 = 257;
  v27 = (uint64_t *)sub_21DF19394((uint64_t *)(v26 + 8), **(llvm::Type ***)(*(_QWORD *)v17 + 16), v17, 0, (uint64_t)v42);
  v49 = 257;
  v28 = sub_21DF1A924(v26, v27, v21, (uint64_t)v48);
  sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v22, v28, 0);
  v29 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v30 = (uint64_t *)(a1 + v29);
  v31 = *(_QWORD *)(a1 + v29 + 344);
  if (*(_BYTE *)(v31 + 1639))
  {
    v32 = *(_QWORD *)(v31 + 1240);
    if (v32)
      v33 = strlen(*(const char **)(v31 + 1240));
    else
      v33 = 0;
    v34 = sub_21DF1B0B0((uint64_t)v30, v32, v33, v30[18], v30[73], v30[20]);
    v48[0] = llvm::ConstantInt::get();
    v48[1] = llvm::ConstantFP::get();
    v35 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v43 = 257;
    sub_21DF191A4(v35, *(_QWORD *)(v34 + 24), v34, (uint64_t)v48, 2, (uint64_t)v42);
    v47[0] = llvm::ConstantInt::get();
    v47[1] = llvm::ConstantFP::get();
    v36 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v43 = 257;
    sub_21DF191A4(v36, *(_QWORD *)(v34 + 24), v34, (uint64_t)v47, 2, (uint64_t)v42);
    v46[0] = llvm::ConstantInt::get();
    v46[1] = llvm::ConstantFP::get();
    v37 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v43 = 257;
    sub_21DF191A4(v37, *(_QWORD *)(v34 + 24), v34, (uint64_t)v46, 2, (uint64_t)v42);
    v45[0] = llvm::ConstantInt::get();
    v45[1] = llvm::ConstantFP::get();
    v38 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v43 = 257;
    sub_21DF191A4(v38, *(_QWORD *)(v34 + 24), v34, (uint64_t)v45, 2, (uint64_t)v42);
    v29 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v31 = *(_QWORD *)(a1 + v29 + 344);
  }
  if (*(_QWORD *)(v31 + 1264))
  {
    strlen(*(const char **)(v31 + 1264));
    v39 = sub_21DF206CC();
    v40 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v43 = 257;
    sub_21DF191A4(v40 + 8, **(_QWORD **)(*(_QWORD *)v39 + 16), v39, 0, 0, (uint64_t)v42);
    v29 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  }
  sub_21DF465B0((uint64_t *)(v29 + a1 + 8));
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_21DF47120(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  uint64_t *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Type **v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  _BYTE v81[32];
  __int16 v82;
  _QWORD v83[4];
  __int16 v84;
  unsigned int v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v85 = 0;
  v4 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  *(_DWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v4 + 312))(v4, &v85, 4);
  v5 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v85)
  {
    v6 = 8 * v85;
    v7 = (char *)operator new(v6);
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)(v5 + 192);
    do
    {
      *(_QWORD *)&v7[v9] = v10;
      v9 += 8;
    }
    while (v6 != v9);
  }
  else
  {
    v8 = 0;
  }
  strlen(off_24E1E95F8[*a2 & 7]);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  *(_QWORD *)(a1 + 16) = v11;
  *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xC00F | 0x660;
  v83[0] = "entry";
  v84 = 259;
  operator new();
  v12 = llvm::BasicBlock::BasicBlock();
  v13 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v13 + 56) = v12;
  *(_QWORD *)(v13 + 64) = v12 + 40;
  v14 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v14 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 16));
  v15 = *(_DWORD *)(a1 + 32);
  if (v15)
    v16 = 40 * (v15 - 1) + 40;
  else
    v16 = 0;
  v17 = *(_QWORD *)(v14 + 88) + v16;
  v18 = ((unint64_t)*a2 >> 8) & 7;
  v79 = a2;
  v73 = v18;
  v71 = v8;
  v19 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
  llvm::PointerType::get();
  v83[0] = "agc.buffer_src";
  v84 = 259;
  llvm::GlobalVariable::GlobalVariable();
  v19[80] |= 1u;
  llvm::GlobalObject::setSection();
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v84 = 257;
  v21 = sub_21DF19394((uint64_t *)(v20 + 8), **(llvm::Type ***)(*(_QWORD *)v19 + 16), (uint64_t)v19, 0, (uint64_t)v83);
  v22 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
  llvm::PointerType::get();
  v83[0] = "agc.buffer_dst";
  v84 = 259;
  llvm::GlobalVariable::GlobalVariable();
  v22[80] |= 1u;
  llvm::GlobalObject::setSection();
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v84 = 257;
  v24 = sub_21DF19394((uint64_t *)(v23 + 8), **(llvm::Type ***)(*(_QWORD *)v22 + 16), (uint64_t)v22, 0, (uint64_t)v83);
  v25 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
  v26 = llvm::ConstantInt::get();
  v84 = 257;
  v27 = (uint64_t *)sub_21DF1A864(v25, v26, v17, (uint64_t)v83);
  v28 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v84 = 257;
  v74 = sub_21DF1A924(v28, (uint64_t *)v21, v27, (uint64_t)v83);
  v29 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v84 = 257;
  v30 = (uint64_t *)v24;
  v31 = v79;
  v32 = sub_21DF1A924(v29, v30, v27, (uint64_t)v83);
  v33 = v32;
  v75 = 0;
  if ((*v79 & 7) == 1)
  {
    v34 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    if ((*v79 & 0x4000000) != 0)
    {
      v39 = a1 + v34 + 8;
      v40 = llvm::ConstantInt::get();
      v84 = 257;
      v31 = v79;
      v41 = (uint64_t *)sub_21DF1A410(v39, v17, v40, (uint64_t)v83);
      v42 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v84 = 257;
      v38 = sub_21DF1A924(v42, (uint64_t *)v21, v41, (uint64_t)v83);
      v82 = 257;
      v35 = **(llvm::Type ***)(*(_QWORD *)v38 + 16);
      v36 = (uint64_t *)(v42 + 8);
      v37 = v81;
    }
    else
    {
      v84 = 257;
      v35 = **(llvm::Type ***)(*(_QWORD *)v21 + 16);
      v36 = (uint64_t *)(a1 + v34 + 8);
      v37 = v83;
      v38 = v21;
    }
    v32 = sub_21DF19394(v36, v35, v38, 0, (uint64_t)v37);
    v75 = v32;
  }
  v72 = (uint64_t *)v33;
  v43 = (uint64_t *)v74;
  v44 = v75;
  if ((*v31 & 0x780000) != 0)
  {
    v80 = 0;
    v77 = v73 | 0x100;
    v78 = a1 + 192;
    do
    {
      v76 = &v70;
      MEMORY[0x24BDAC7A8](v32);
      v47 = (char *)&v70 - v46;
      if (v45 >= 0x200)
        v48 = 512;
      else
        v48 = v45;
      bzero((char *)&v70 - v46, v48);
      v49 = *v31;
      MEMORY[0x24BDAC7A8](v50);
      v53 = (char *)&v70 - v52;
      if (v51 >= 0x200)
        v54 = 512;
      else
        v54 = v51;
      bzero((char *)&v70 - v52, v54);
      if ((v49 >> 11))
      {
        v55 = 0;
        do
        {
          v56 = (uint64_t *)llvm::ConstantInt::get();
          *(_QWORD *)&v47[8 * v55] = v56;
          v57 = v79;
          v49 = *v79;
          v32 = v44;
          if ((v49 & 7) != 1)
          {
            v58 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v84 = 257;
            v59 = sub_21DF1A924(v58, v43, v56, (uint64_t)v83);
            v82 = 257;
            v32 = sub_21DF19394((uint64_t *)(v58 + 8), **(llvm::Type ***)(*(_QWORD *)v59 + 16), v59, v77, (uint64_t)v81);
            v49 = *v57;
          }
          *(_QWORD *)&v53[8 * v55++] = v32;
        }
        while (v55 < (v49 >> 11));
      }
      if ((v49 & 0x7F800) != 0)
      {
        v60 = 0;
        v31 = v79;
        v62 = v72;
        v61 = v73;
        do
        {
          v63 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v64 = (uint64_t *)(v63 + 8);
          v65 = *(llvm::Type ***)&v53[8 * v60];
          v66 = *(uint64_t **)&v47[8 * v60];
          v84 = 257;
          v67 = sub_21DF1A924(v63, v62, v66, (uint64_t)v83);
          v68 = v21 & 0xFFFFFFFFFFFF0000 | v61;
          v21 = v68 | 0x100;
          v32 = sub_21DF385B0(v64, v65, v67, (unsigned __int16)v68 | 0x100u);
          ++v60;
        }
        while (v60 < ((unint64_t)*v31 >> 11));
      }
      else
      {
        v31 = v79;
      }
      v44 = v75;
      v69 = (*v31 >> 19) & 0xF;
      ++v80;
      v43 = (uint64_t *)v74;
    }
    while (v80 < v69);
  }
  if (v71)
    operator delete(v71);
}

uint64_t sub_21DF47928(uint64_t a1, uint64_t a2, llvm::Type *a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Impl;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Type **v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  size_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  size_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  llvm::Module *v170;
  _QWORD *v171;
  _QWORD *v172;
  llvm::GlobalValue *v173;
  BOOL v174;
  llvm::GlobalValue *v175;
  uint64_t v176;
  void *__p;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unsigned int *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  _QWORD v193[2];
  _QWORD v194[2];
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  _QWORD v201[4];
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  __int128 v207;
  _BYTE v208[28];
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  __int16 v218;
  uint64_t __src;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int16 v223;
  uint64_t v224;

  v5 = a2;
  v6 = a1;
  v224 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500(a1 + 48, a2, a3);
  sub_21DF44F28((uint64_t *)v6, (uint64_t *)off_24E1E95E0);
  *(_QWORD *)v6 = off_24E1E94D0;
  *(_QWORD *)(v6 + 48) = &unk_24E1E9578;
  *(_QWORD *)(v6 + 32) = -1;
  *(_DWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 44) = 0;
  *(_QWORD *)(v6 + 24) = a4;
  v189 = v6;
  switch(*a4 & 7)
  {
    case 0u:
    case 1u:
      sub_21DF47120(v6, a4);
      break;
    case 2u:
    case 3u:
      LODWORD(v194[0]) = 0;
      *(_DWORD *)(v6 + 32) = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 392) + 312))(*(_QWORD *)(v6 + 392), v194, 4);
      v7 = *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 344);
      *(_DWORD *)(v6 + 36) = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 312))(v7, v194, 2);
      if (LODWORD(v194[0]))
      {
        v8 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v9 = 8 * LODWORD(v194[0]);
        v10 = (char *)operator new(v9);
        v11 = 0;
        v12 = *(_QWORD *)(v8 + 192);
        do
        {
          *(_QWORD *)&v10[v11] = v12;
          v11 += 8;
        }
        while (v9 != v11);
        __p = v10;
      }
      else
      {
        __p = 0;
      }
      v179 = v5;
      strlen(off_24E1E95F8[*a4 & 7]);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      *(_QWORD *)(v6 + 16) = v25;
      *(_WORD *)(v25 + 18) = *(_WORD *)(v25 + 18) & 0xC00F | 0x660;
      v195 = "entry";
      LOWORD(v199) = 259;
      operator new();
      v26 = llvm::BasicBlock::BasicBlock();
      v27 = *(_QWORD *)(*(_QWORD *)v6 - 24) + v6;
      *(_QWORD *)(v27 + 56) = v26;
      *(_QWORD *)(v27 + 64) = v26 + 40;
      v28 = *(_QWORD *)(v6 + 16);
      if ((*(_BYTE *)(v28 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v6 + 16));
      v29 = *(_DWORD *)(v6 + 32);
      v30 = *(_DWORD *)(v6 + 36);
      v31 = 40 * (v29 - 1) + 40;
      if (!v29)
        v31 = 0;
      v32 = *(_QWORD *)(v28 + 88) + v31;
      v33 = 40 * (v30 + ~v29) + 40;
      if (v29 >= v30)
        v33 = 0;
      v34 = v32 + v33;
      sub_21DF45C0C((uint64_t)&v195, (_QWORD *)v6, *a4 >> 3);
      v186 = v197;
      v187 = v196;
      v35 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.image_words";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v36 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      if (*(_BYTE *)(*(_QWORD *)(v36 + 344) + 1647))
      {
        v195 = (void *)llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        v196 = llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        v197 = llvm::ValueAsMetadata::get();
        v198 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v199 = llvm::ValueAsMetadata::get();
        v37 = *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 328);
        Impl = llvm::MDTuple::getImpl();
        sub_21DF19CD0(v37, Impl);
      }
      else
      {
        sub_21DF7A774(v36);
      }
      v59 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.sampler_words";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v185 = v59;
      sub_21DF7A774(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
      v60 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v195 = "agc.buffer_address";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v60[80] |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
      v61 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      LOWORD(v199) = 257;
      v184 = (uint64_t *)sub_21DF19394((uint64_t *)(v61 + 8), **(llvm::Type ***)(*(_QWORD *)v60 + 16), (uint64_t)v60, 0, (uint64_t)&v195);
      v62 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.buffer_stride";
      LOWORD(v199) = 259;
      v63 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v63 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
      v64 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      LOWORD(v199) = 257;
      v65 = sub_21DF19394((uint64_t *)(v64 + 8), **(llvm::Type ***)(*(_QWORD *)v62 + 16), v62, 0, (uint64_t)&v195);
      v66 = *(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 8;
      LOWORD(v199) = 257;
      v67 = sub_21DF1A864(v66, v34, v65, (uint64_t)&v195);
      v68 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
      v69 = llvm::ConstantInt::get();
      v223 = 257;
      v70 = sub_21DF1A184(v68, v32, v69, (uint64_t)&__src);
      v218 = 257;
      v191 = (uint64_t *)sub_21DF19FAC(v66, v67, v70, (uint64_t)&v215);
      v71 = llvm::UndefValue::get();
      v72 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      LOWORD(v199) = 257;
      v73 = v72 + 8;
      v74 = llvm::ConstantInt::get();
      v75 = sub_21DF7980C(v73, v71, v32, v74, (uint64_t)&v195);
      v76 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      LOWORD(v199) = 257;
      v77 = v76 + 8;
      v78 = llvm::ConstantInt::get();
      v79 = sub_21DF7980C(v77, v75, v34, v78, (uint64_t)&v195);
      v80 = *a4;
      if ((*a4 & 0x2000000) != 0)
      {
        __src = 0;
        *(_QWORD *)&v215 = 0;
        sub_21DF45088((_QWORD *)v6, &__src, (uint64_t *)&v215);
        v81 = llvm::UndefValue::get();
        v82 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v83 = v79;
        v84 = __src;
        LOWORD(v199) = 257;
        v85 = v82 + 8;
        v86 = llvm::ConstantInt::get();
        v87 = sub_21DF7980C(v85, v81, v84, v86, (uint64_t)&v195);
        v88 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v89 = v215;
        LOWORD(v199) = 257;
        v90 = v88 + 8;
        v91 = llvm::ConstantInt::get();
        v92 = sub_21DF7980C(v90, v87, v89, v91, (uint64_t)&v195);
        v93 = *(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 8;
        LOWORD(v199) = 257;
        v79 = sub_21DF19FAC(v93, v83, v92, (uint64_t)&v195);
        v80 = *a4;
      }
      if ((v80 & 7) == 3)
        v94 = 3;
      else
        v94 = 1;
      v182 = v94;
      v188 = a4;
      if ((v80 & 7) == 3)
      {
        v95 = llvm::User::operator new((llvm::User *)0x58);
        v195 = "agc.texture_slice";
        LOWORD(v199) = 259;
        v96 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v96 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        sub_21DF7A774(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
        v97 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        LOWORD(v199) = 257;
        v98 = sub_21DF19394((uint64_t *)(v97 + 8), **(llvm::Type ***)(*(_QWORD *)v95 + 16), v95, 0, (uint64_t)&v195);
        v99 = sub_21DF7969C(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24), v79, 4);
        v100 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        LOWORD(v199) = 257;
        v101 = v100 + 8;
        v102 = llvm::ConstantInt::get();
        v79 = sub_21DF7980C(v101, v99, v98, v102, (uint64_t)&v195);
        v80 = *a4;
      }
      v103 = 0;
      v104 = (v80 >> 23) & 3;
      v183 = v79;
      v181 = v104;
      v180 = v35;
      do
      {
        LODWORD(v195) = 2;
        HIDWORD(v195) = v182;
        LODWORD(v197) = 0;
        BYTE4(v197) = 0;
        v198 = 0;
        v200 = 0u;
        memset(v201, 0, 26);
        v202 = 0u;
        v203 = 0u;
        v204 = 0u;
        v205 = 0;
        v206 = 4;
        v207 = 0u;
        memset(v208, 0, sizeof(v208));
        v209 = 0;
        v210 = 0;
        v212 = 0;
        v211 = 0;
        v213 = 1;
        v214 = 0;
        LODWORD(v196) = v186;
        v199 = v35;
        v201[2] = v185;
        *(_QWORD *)&v204 = v79;
        if (v104)
        {
          v105 = llvm::ConstantInt::get();
          v106 = 0;
          v209 = v105;
          v206 = 3;
        }
        else
        {
          v206 = 1;
          v106 = llvm::ConstantInt::get();
        }
        *(_QWORD *)&v207 = v106;
        BYTE1(v197) = 1;
        v107 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v108 = *(_QWORD *)(v107 + 344);
        v215 = *(_OWORD *)(v107 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v107 + 8));
        v217 = *(_DWORD *)(v107 + 104);
        v109 = (*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v108 + 248))(v108, &v215, &v195);
        if (v216)
          llvm::MetadataTracking::untrack();
        v6 = v189;
        v110 = (llvm::Type **)sub_21DF45214((_QWORD *)v189, *a4 >> 3, v109, v187);
        v111 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v112 = (uint64_t *)(v111 + 8);
        v223 = 257;
        v113 = sub_21DF1A924(v111, v184, v191, (uint64_t)&__src);
        sub_21DF385B0(v112, v110, v113, 0);
        v114 = *(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 8;
        v115 = llvm::ConstantInt::get();
        v223 = 257;
        v191 = (uint64_t *)sub_21DF19FAC(v114, (uint64_t)v191, v115, (uint64_t)&__src);
        ++v103;
        v104 = v181;
        v35 = v180;
        v79 = v183;
      }
      while (!(v103 >> v181));
      if (__p)
        operator delete(__p);
      v5 = v179;
      goto LABEL_69;
    case 4u:
      LODWORD(v215) = 0;
      *(_DWORD *)(v6 + 32) = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(v6 + 392) + 312))(*(_QWORD *)(v6 + 392), &v215, 4);
      if ((_DWORD)v215)
      {
        v19 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v20 = 8 * v215;
        v21 = (char *)operator new(v20);
        v22 = v21;
        v23 = 0;
        v24 = *(_QWORD *)(v19 + 192);
        do
        {
          *(_QWORD *)&v21[v23] = v24;
          v23 += 8;
        }
        while (v20 != v23);
      }
      else
      {
        v22 = 0;
      }
      v188 = a4;
      strlen(off_24E1E95F8[*a4 & 7]);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      *(_QWORD *)(v189 + 16) = v121;
      *(_WORD *)(v121 + 18) = *(_WORD *)(v121 + 18) & 0xC00F | 0x660;
      v195 = "entry";
      LOWORD(v199) = 259;
      operator new();
      v122 = llvm::BasicBlock::BasicBlock();
      v123 = *(_QWORD *)(*(_QWORD *)v189 - 24) + v189;
      *(_QWORD *)(v123 + 56) = v122;
      *(_QWORD *)(v123 + 64) = v122 + 40;
      v124 = *(_QWORD *)(v189 + 16);
      if ((*(_BYTE *)(v124 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v189 + 16));
      v125 = *(_DWORD *)(v189 + 32);
      if (v125)
        v126 = 40 * (v125 - 1) + 40;
      else
        v126 = 0;
      v127 = *(_QWORD *)(v124 + 88) + v126;
      v128 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.icb_dst_index";
      LOWORD(v199) = 259;
      v129 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v129 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v130 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v192 = sub_21DF19394((uint64_t *)(v130 + 8), **(llvm::Type ***)(*(_QWORD *)v128 + 16), v128, 0, (uint64_t)&v195);
      v131 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.icb_src_index";
      LOWORD(v199) = 259;
      v132 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v132 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v133 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v134 = sub_21DF19394((uint64_t *)(v133 + 8), **(llvm::Type ***)(*(_QWORD *)v131 + 16), v131, 0, (uint64_t)&v195);
      v135 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v195 = "agc.icb_dst";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v135[80] |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v136 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v190 = sub_21DF19394((uint64_t *)(v136 + 8), **(llvm::Type ***)(*(_QWORD *)v135 + 16), (uint64_t)v135, 0, (uint64_t)&v195);
      v137 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v195 = "agc.icb_src";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v137[80] |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v138 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v139 = sub_21DF19394((uint64_t *)(v138 + 8), **(llvm::Type ***)(*(_QWORD *)v137 + 16), (uint64_t)v137, 0, (uint64_t)&v195);
      v140 = *(_QWORD *)(*(_QWORD *)v189 - 24) + v189 + 8;
      LOWORD(v199) = 257;
      v141 = sub_21DF19FAC(v140, v192, v127, (uint64_t)&v195);
      v142 = *(_QWORD *)(*(_QWORD *)v189 - 24) + v189 + 8;
      LOWORD(v199) = 257;
      v143 = sub_21DF19FAC(v142, v134, v127, (uint64_t)&v195);
      v144 = llvm::PointerType::get();
      v145 = *(_QWORD *)(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24) + 192);
      v146 = llvm::PointerType::get();
      v147 = *(_QWORD *)(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24) + 192);
      __src = v144;
      v220 = v145;
      v221 = v146;
      v222 = v147;
      v195 = &v197;
      v196 = 0x400000000;
      sub_21DF1B18C((uint64_t)&v195, &__src, &v223);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v149 = v148;
      if (v195 != &v197)
        free(v195);
      v150 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      __src = v190;
      v220 = v141;
      v221 = v139;
      v222 = v143;
      LOWORD(v199) = 257;
      sub_21DF191A4(v150 + 8, *(_QWORD *)(v149 + 24), v149, (uint64_t)&__src, 4, (uint64_t)&v195);
      if (v22)
        operator delete(v22);
      v6 = v189;
      goto LABEL_69;
    case 5u:
    case 6u:
      LODWORD(v215) = 0;
      *(_DWORD *)(v6 + 32) = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(v6 + 392) + 312))(*(_QWORD *)(v6 + 392), &v215, 4);
      if ((_DWORD)v215)
      {
        v13 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
        v14 = 8 * v215;
        v15 = (char *)operator new(v14);
        v16 = v15;
        v17 = 0;
        v18 = *(_QWORD *)(v13 + 192);
        do
        {
          *(_QWORD *)&v15[v17] = v18;
          v17 += 8;
        }
        while (v14 != v17);
      }
      else
      {
        v16 = 0;
      }
      v188 = a4;
      strlen(off_24E1E95F8[*a4 & 7]);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      *(_QWORD *)(v189 + 16) = v39;
      *(_WORD *)(v39 + 18) = *(_WORD *)(v39 + 18) & 0xC00F | 0x660;
      v195 = "entry";
      LOWORD(v199) = 259;
      operator new();
      v40 = llvm::BasicBlock::BasicBlock();
      v41 = *(_QWORD *)(*(_QWORD *)v189 - 24) + v189;
      *(_QWORD *)(v41 + 56) = v40;
      *(_QWORD *)(v41 + 64) = v40 + 40;
      v42 = *(_QWORD *)(v189 + 16);
      if ((*(_BYTE *)(v42 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v189 + 16));
      v43 = *(_DWORD *)(v189 + 32);
      if (v43)
        v44 = 40 * (v43 - 1) + 40;
      else
        v44 = 0;
      v45 = *(_QWORD *)(v42 + 88) + v44;
      v46 = llvm::User::operator new((llvm::User *)0x58);
      v195 = "agc.icb_dst_index";
      LOWORD(v199) = 259;
      v47 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v47 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v48 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v49 = sub_21DF19394((uint64_t *)(v48 + 8), **(llvm::Type ***)(*(_QWORD *)v46 + 16), v46, 0, (uint64_t)&v195);
      v50 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v195 = "agc.icb_dst";
      LOWORD(v199) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v50[80] |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24));
      v51 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      LOWORD(v199) = 257;
      v52 = sub_21DF19394((uint64_t *)(v51 + 8), **(llvm::Type ***)(*(_QWORD *)v50 + 16), (uint64_t)v50, 0, (uint64_t)&v195);
      v53 = *(_QWORD *)(*(_QWORD *)v189 - 24) + v189 + 8;
      LOWORD(v199) = 257;
      v54 = sub_21DF19FAC(v53, v49, v45, (uint64_t)&v195);
      v55 = "air_optimize_render_command_wrapper";
      if ((*v188 & 7) != 6)
        v55 = 0;
      if ((*v188 & 7) == 5)
        v56 = "air_nop_render_command_wrapper";
      else
        v56 = v55;
      v57 = v189 + *(_QWORD *)(*(_QWORD *)v189 - 24);
      if (v56)
        v58 = strlen(v56);
      else
        v58 = 0;
      v116 = *(_QWORD *)(v57 + 144);
      v117 = llvm::PointerType::get();
      v118 = (uint64_t)v56;
      v6 = v189;
      v119 = sub_21DF1B0B0(v57, v118, v58, v116, v117, *(_QWORD *)(v189 + *(_QWORD *)(*(_QWORD *)v189 - 24) + 192));
      v120 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
      __src = v52;
      v220 = v54;
      LOWORD(v199) = 257;
      sub_21DF191A4(v120 + 8, *(_QWORD *)(v119 + 24), v119, (uint64_t)&__src, 2, (uint64_t)&v195);
      if (v16)
        operator delete(v16);
LABEL_69:
      a4 = v188;
      break;
    default:
      break;
  }
  v151 = *(_QWORD *)(*(_QWORD *)v6 - 24);
  v152 = (uint64_t *)(v6 + v151);
  v153 = *(_QWORD *)(v6 + v151 + 344);
  if (*(_BYTE *)(v153 + 1639))
  {
    v154 = *(_QWORD *)(v153 + 1240);
    if (v154)
      v155 = strlen(*(const char **)(v153 + 1240));
    else
      v155 = 0;
    v156 = sub_21DF1B0B0((uint64_t)v152, v154, v155, v152[18], v152[73], v152[20]);
    ++*(_DWORD *)(v6 + 40);
    __src = llvm::ConstantInt::get();
    v220 = llvm::ConstantFP::get();
    v157 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
    LOWORD(v199) = 257;
    sub_21DF191A4(v157, *(_QWORD *)(v156 + 24), v156, (uint64_t)&__src, 2, (uint64_t)&v195);
    ++*(_DWORD *)(v6 + 40);
    *(_QWORD *)&v215 = llvm::ConstantInt::get();
    *((_QWORD *)&v215 + 1) = llvm::ConstantFP::get();
    v158 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
    LOWORD(v199) = 257;
    sub_21DF191A4(v158, *(_QWORD *)(v156 + 24), v156, (uint64_t)&v215, 2, (uint64_t)&v195);
    ++*(_DWORD *)(v6 + 40);
    v194[0] = llvm::ConstantInt::get();
    v194[1] = llvm::ConstantFP::get();
    v159 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
    LOWORD(v199) = 257;
    sub_21DF191A4(v159, *(_QWORD *)(v156 + 24), v156, (uint64_t)v194, 2, (uint64_t)&v195);
    ++*(_DWORD *)(v6 + 40);
    v193[0] = llvm::ConstantInt::get();
    v193[1] = llvm::ConstantFP::get();
    v160 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
    LOWORD(v199) = 257;
    sub_21DF191A4(v160, *(_QWORD *)(v156 + 24), v156, (uint64_t)v193, 2, (uint64_t)&v195);
    v151 = *(_QWORD *)(*(_QWORD *)v6 - 24);
    v153 = *(_QWORD *)(v6 + v151 + 344);
  }
  v161 = *(const char **)(v153 + 1248);
  if (v161)
  {
    ++*(_DWORD *)(v6 + 40);
    __src = llvm::ConstantInt::get();
    v220 = llvm::ConstantFP::get();
    v162 = strlen(v161);
    v163 = sub_21DF1B0B0(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24), (uint64_t)v161, v162, *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 144), *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 584), *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 160));
    v164 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8;
    LOWORD(v199) = 257;
    sub_21DF191A4(v164, *(_QWORD *)(v163 + 24), v163, (uint64_t)&__src, 2, (uint64_t)&v195);
    *(_BYTE *)(v6 + 44) = 1;
    v151 = *(_QWORD *)(*(_QWORD *)v6 - 24);
    v153 = *(_QWORD *)(v6 + v151 + 344);
  }
  if (*(_QWORD *)(v153 + 1264))
  {
    strlen(*(const char **)(v153 + 1264));
    v165 = sub_21DF206CC();
    v166 = v6 + *(_QWORD *)(*(_QWORD *)v6 - 24);
    LOWORD(v199) = 257;
    sub_21DF191A4(v166 + 8, **(_QWORD **)(*(_QWORD *)v165 + 16), v165, 0, 0, (uint64_t)&v195);
    v151 = *(_QWORD *)(*(_QWORD *)v6 - 24);
  }
  sub_21DF465B0((uint64_t *)(v151 + v6 + 8));
  if ((*a4 & 7) - 4 <= 2)
  {
    v167 = sub_21DF2C728(v5, *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 320), 2);
    if (!v167)
      std::string::append((std::string *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 408), "unable to load EI runtime files");
    if ((sub_21DF2C968(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24), v167, *(unsigned __int8 *)(*(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 344) + 1674), *(llvm::Function **)(v6 + 16)) & 1) == 0)std::string::append((std::string *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 408), "unable to link EI runtime");
    if (*(char *)(v5 + 407) >= 0)
      v168 = v5 + 384;
    else
      v168 = *(_QWORD *)(v5 + 384);
    v169 = sub_21DF2C8E8(v168, *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 320));
    if (!v169)
      std::string::append((std::string *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 408), "unable to load math metal runtime files");
    if ((sub_21DF2C968(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24), v169, *(unsigned __int8 *)(*(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 344) + 1674), *(llvm::Function **)(v6 + 16)) & 1) == 0)std::string::append((std::string *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 408), "unable to link metal runtime");
    v170 = *(llvm::Module **)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 320);
    v171 = (_QWORD *)((char *)v170 + 24);
    v172 = (_QWORD *)*((_QWORD *)v170 + 4);
    if (v172 != (_QWORD *)((char *)v170 + 24))
    {
      do
      {
        v173 = (llvm::GlobalValue *)(v172 - 7);
        v174 = v172 == 0;
        v172 = (_QWORD *)v172[1];
        if (v174)
          v175 = 0;
        else
          v175 = v173;
        if ((llvm::GlobalValue::isDeclaration(v175) & 1) == 0 && v175 != *(llvm::GlobalValue **)(v6 + 16))
        {
          llvm::Function::addFnAttr();
          *((_DWORD *)v175 + 8) = *((_DWORD *)v175 + 8) & 0xFFFFBFC0 | 0x4007;
        }
      }
      while (v172 != v171);
      v170 = *(llvm::Module **)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 320);
    }
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v5 + 320), v170);
    v176 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 344)
                                                             + 488))(*(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 344), 0, *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 320));
    if ((sub_21DF3EC28(v176) & 1) == 0)
      std::string::append((std::string *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 408), "failed to replace builtins");
    if (v176)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 16))(v176);
  }
  return v6;
}

uint64_t sub_21DF49600(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_21DF44F28((uint64_t *)a1, a2 + 1);
  v9 = 0;
  v10 = a2[3];
  v8[2] = v10;
  v11 = v8 + 2;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(v10 - 24)) = a2[4];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  do
  {
    v12 = a1 + v9;
    *(_BYTE *)(v12 + 76) = 0;
    *(_BYTE *)(v12 + 80) = 0;
    v9 += 64;
  }
  while (v9 != 512);
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = a4;
  *(_DWORD *)(a1 + 552) = *(unsigned __int8 *)(a4 + 34);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_BYTE *)(a1 + 576) = 0;
  v13 = sub_21DF832C8(v11);
  v14 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = a2[5];
  *(_QWORD *)(a1 + 16) = a2[6];
  v15 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  if (*(_DWORD *)(a3 + 40))
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 152))(v15, v13);
  else
    (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v15 + 160))(v15, *(_QWORD *)(a1 + 544), v13);
  return a1;
}

_QWORD *sub_21DF4972C(_QWORD *a1, uint64_t a2, llvm::Type *a3, _DWORD *a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;

  sub_21DF2E500((uint64_t)(a1 + 74), a2, a3);
  sub_21DF49600((uint64_t)a1, (uint64_t *)off_24E1E9780, a2, a5);
  *a1 = off_24E1E9648;
  a1[74] = &unk_24E1E9718;
  a1[2] = &unk_24E1E96A0;
  a1[73] = a4;
  v9 = sub_21DF206CC();
  *(_WORD *)(v9 + 18) = *(_WORD *)(v9 + 18) & 0xC00F | 0x650;
  v19[0] = "entry";
  v20 = 259;
  operator new();
  v10 = llvm::BasicBlock::BasicBlock();
  v11 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = v10 + 40;
  v12 = ((HIWORD(*a4) | BYTE1(*a4) | *a4) | HIBYTE(*a4)) & *(_DWORD *)(a5 + 32);
  while (v12)
  {
    v13 = __clz(v12);
    v14 = v13 ^ 0x1F;
    v12 ^= 0x80000000 >> v13;
    v15 = llvm::User::operator new((llvm::User *)0x58);
    a5 = a5 & 0xFFFFFFFF00000000 | v14;
    v19[0] = "agc.clear_color";
    v19[2] = a5;
    v20 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v16 = *(_QWORD *)(*a1 - 24);
    v20 = 257;
    v17 = sub_21DF19394((_QWORD *)((char *)a1 + v16 + 8), **(llvm::Type ***)(*(_QWORD *)v15 + 16), v15, 0, (uint64_t)v19);
    sub_21DF820EC(a1 + 2, v17, v14, (*a4 >> v14) & 1 | (8 * ((HIBYTE(*a4) >> v14) & 1)) | (2* ((BYTE1(*a4) >> v14) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(*a4) >> v14) & 1)), 0);
  }
  sub_21DF465B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
  return a1;
}

_QWORD *sub_21DF499EC(_QWORD *a1, uint64_t a2, llvm::Type *a3, uint64_t a4, int *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Impl;
  llvm::LLVMContext *v43;
  llvm::GetElementPtrInst *v44;
  llvm::GetElementPtrInst *v45;
  llvm::GetElementPtrInst *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Value *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int v98;
  uint64_t v99;
  llvm::Value *v100;
  llvm::Value *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  llvm::Value *v113;
  _QWORD *v114;
  unint64_t v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  _BYTE v119[32];
  __int16 v120;
  _BYTE v121[32];
  __int16 v122;
  _QWORD v123[15];
  __int128 v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  _BYTE v128[28];
  llvm::Value *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500((uint64_t)(a1 + 74), a2, a3);
  sub_21DF49600((uint64_t)a1, (uint64_t *)off_24E1E9918, a2, a4);
  *a1 = off_24E1E97E0;
  a1[74] = &unk_24E1E98B0;
  a1[2] = &unk_24E1E9838;
  v9 = a1 + 2;
  a1[73] = a5;
  v10 = sub_21DF206CC();
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x650;
  v123[0] = "entry";
  LOWORD(v123[4]) = 259;
  operator new();
  v11 = llvm::BasicBlock::BasicBlock();
  v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v12 + 7) = v11;
  *((_QWORD *)v12 + 8) = v11 + 40;
  v13 = *(unsigned __int8 *)(a4 + 32);
  v14 = *((unsigned __int8 *)a5 + 4);
  v102 = a5;
  v15 = *a5;
  v123[0] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 216);
  v123[1] = v123[0];
  v123[2] = v123[0];
  llvm::StructType::get();
  v107 = v14;
  if (v14)
  {
    v16 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    if (*(_QWORD *)(v16 + 1456))
      strlen(*(const char **)(v16 + 1456));
    v17 = sub_21DF206CC();
    v18 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    if (*(_QWORD *)(v18 + 1464))
      strlen(*(const char **)(v18 + 1464));
    v19 = sub_21DF206CC();
    v20 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    LOWORD(v123[4]) = 257;
    v101 = sub_21DF191A4((uint64_t)(v20 + 8), **(_QWORD **)(*(_QWORD *)v17 + 16), v17, 0, 0, (uint64_t)v123);
    v21 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    LOWORD(v123[4]) = 257;
    v100 = sub_21DF191A4((uint64_t)(v21 + 8), **(_QWORD **)(*(_QWORD *)v19 + 16), v19, 0, 0, (uint64_t)v123);
    if ((*(_BYTE *)(a4 + 33) & 0xE0) != 0)
    {
      v22 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
      v9 = a1 + 2;
      if (*(_QWORD *)(v22 + 1472))
        strlen(*(const char **)(v22 + 1472));
      v23 = sub_21DF206CC();
      v24 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      LOWORD(v123[4]) = 257;
      v113 = sub_21DF191A4((uint64_t)(v24 + 8), **(_QWORD **)(*(_QWORD *)v23 + 16), v23, 0, 0, (uint64_t)v123);
      *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x680;
      if (!*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 1641))
      {
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        v123[0] = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
    }
    else
    {
      v113 = 0;
      v9 = a1 + 2;
    }
  }
  else
  {
    v113 = 0;
    v100 = 0;
    v101 = 0;
  }
  v25 = llvm::User::operator new((llvm::User *)0x58);
  v26 = a1 + 1;
  v123[0] = "agc.sampler_words";
  LOWORD(v123[4]) = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v99 = v25;
  sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  if (v13)
  {
    v27 = HIBYTE(v15);
    v28 = a1 + 43;
    v114 = a1 + 3;
    v106 = a1 + 24;
    v98 = v27;
    v112 = a1 + 1;
    while (1)
    {
      v29 = __clz(v13);
      v30 = v29 ^ 0x1F;
      v31 = 0x80000000 >> v29;
      if (((0x80000000 >> v29) & v27) != 0)
        break;
      if ((v31 & v107) != 0)
      {
        v35 = llvm::User::operator new((llvm::User *)0x58);
        v123[0] = "agc.image_words";
        v123[2] = v111 & 0xFFFFFFFF00000000 | v30;
        LOWORD(v123[4]) = 2051;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v36 = *(unsigned int *)(*(_QWORD *)((char *)v28 + *(_QWORD *)(*a1 - 24)) + 1600);
        v37 = __clz(v36) ^ 0x13F;
        if ((_DWORD)v36)
          v38 = v37;
        else
          v38 = 0;
        v39 = v38 | v109 & 0xFFFFFFFFFFFF0000;
        llvm::GlobalObject::setAlignment();
        v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
        v111 = v111 & 0xFFFFFFFF00000000 | v30;
        v108 = v35;
        v109 = v39;
        if (*(_BYTE *)(*(_QWORD *)(v40 + 344) + 1647))
        {
          memset(v123, 0, 40);
          v123[0] = llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          v123[1] = llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          v123[2] = llvm::ValueAsMetadata::get();
          v123[3] = llvm::MDString::get();
          llvm::ConstantInt::get();
          v123[4] = llvm::ValueAsMetadata::get();
          v41 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 328);
          Impl = llvm::MDTuple::getImpl();
          sub_21DF19CD0(v41, Impl);
        }
        else
        {
          sub_21DF7A774(v40);
        }
        v43 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
        v123[0] = "agc.pbe_rotation";
        v110 = v110 & 0xFFFFFFFF00000000 | v30;
        v123[2] = v110;
        LOWORD(v123[4]) = 2051;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
        v44 = sub_21DF1A668((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v43);
        v45 = sub_21DF1A668((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v43);
        v46 = sub_21DF1A668((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v43);
        v47 = *(_QWORD *)(*a1 - 24);
        LOWORD(v123[4]) = 257;
        v48 = sub_21DF19394((_QWORD *)((char *)v26 + v47), **(llvm::Type ***)(*(_QWORD *)v46 + 16), (uint64_t)v46, 0, (uint64_t)v123);
        v49 = *(_QWORD *)(*a1 - 24);
        v50 = (uint64_t)a1 + v49 + 8;
        LOWORD(v123[4]) = 257;
        v51 = sub_21DF19394((_QWORD *)((char *)v26 + v49), **(llvm::Type ***)(*(_QWORD *)v44 + 16), (uint64_t)v44, 0, (uint64_t)v123);
        v52 = sub_21DF79DF4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), 2, (uint64_t)v101);
        v122 = 257;
        v53 = sub_21DF20300(v50, v51, v52, (uint64_t)v121);
        v120 = 257;
        v54 = sub_21DF2074C(v50, v53, v48, (uint64_t)v119);
        v55 = *(_QWORD *)(*a1 - 24);
        v56 = (uint64_t)a1 + v55 + 8;
        LOWORD(v123[4]) = 257;
        v57 = sub_21DF19394((_QWORD *)((char *)v26 + v55), **(llvm::Type ***)(*(_QWORD *)v45 + 16), (uint64_t)v45, 0, (uint64_t)v123);
        v58 = sub_21DF79DF4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), 2, (uint64_t)v100);
        v122 = 257;
        v59 = sub_21DF20300(v56, v57, v58, (uint64_t)v121);
        v120 = 257;
        v60 = sub_21DF2074C(v56, v59, v54, (uint64_t)v119);
        v61 = *v102;
        v62 = dword_21DFA0D90[(((unsigned __int16)*v102 >> (2 * v30)) & 3) - 1];
        v105 = (((unsigned __int16)*v102 >> (2 * v30)) & 3) - 1;
        if ((((unsigned __int16)*v102 >> (2 * v30)) & 3) == 1)
        {
          v76 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v123[4]) = 257;
          v77 = (uint64_t)(v76 + 8);
          v78 = v60;
          v79 = llvm::ConstantInt::get();
          v60 = sub_21DF79584(v77, v78, v79, (uint64_t)v123);
        }
        else if ((((unsigned __int16)*v102 >> (2 * v30)) & 3) == 3)
        {
          v103 = sub_21DF7969C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v60, 4);
          v63 = *(_QWORD *)(*a1 - 24);
          v64 = llvm::User::operator new((llvm::User *)0x58);
          v123[0] = "agc.slice_index";
          v123[2] = v30;
          LOWORD(v123[4]) = 2051;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
          LOWORD(v123[4]) = 257;
          v65 = sub_21DF19394((_QWORD *)((char *)v112 + v63), **(llvm::Type ***)(*(_QWORD *)v64 + 16), v64, 0, (uint64_t)v123);
          v66 = *(_QWORD *)(*a1 - 24);
          v67 = *(_QWORD *)((char *)a1 + v66 + 344);
          if (*(_QWORD *)(v67 + 1520))
          {
            strlen(*(const char **)(v67 + 1520));
            v68 = sub_21DF206CC();
            v69 = *(_QWORD *)(*a1 - 24);
            v70 = (uint64_t)a1 + v69 + 8;
            LOWORD(v123[4]) = 257;
            v71 = sub_21DF191A4((uint64_t)v112 + v69, **(_QWORD **)(*(_QWORD *)v68 + 16), v68, 0, 0, (uint64_t)v123);
            v72 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 160);
            v122 = 257;
            v73 = sub_21DF20594(v70, (uint64_t)v71, v72, (uint64_t)v121);
            v120 = 257;
            v65 = sub_21DF2074C(v70, v73, v65, (uint64_t)v119);
            v66 = *(_QWORD *)(*a1 - 24);
          }
          v28 = a1 + 43;
          LOWORD(v123[4]) = 257;
          v74 = (uint64_t)a1 + v66 + 8;
          v75 = llvm::ConstantInt::get();
          v60 = sub_21DF7980C(v74, v103, v65, v75, (uint64_t)v123);
          goto LABEL_32;
        }
        v28 = a1 + 43;
LABEL_32:
        if (((1 << v30) & BYTE2(v61)) != 0)
        {
          v104 = v60;
          v80 = *(_QWORD *)(*a1 - 24);
          v81 = llvm::User::operator new((llvm::User *)0x58);
          v123[0] = "agc.slice_index";
          v123[2] = v30;
          LOWORD(v123[4]) = 2051;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
          LOWORD(v123[4]) = 257;
          v82 = sub_21DF19394((_QWORD *)((char *)v112 + v80), **(llvm::Type ***)(*(_QWORD *)v81 + 16), v81, 0, (uint64_t)v123);
          v83 = *(_QWORD *)((char *)v106 + *(_QWORD *)(*a1 - 24));
          v122 = 257;
          v84 = sub_21DF1AC78((uint64_t)a1 + v80 + 8, v82, v83, (uint64_t)v121);
          v85 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
          if (*(_QWORD *)(v85 + 1520))
          {
            strlen(*(const char **)(v85 + 1520));
            v86 = sub_21DF206CC();
            v87 = *(_QWORD *)(*a1 - 24);
            v88 = (uint64_t)a1 + v87 + 8;
            LOWORD(v123[4]) = 257;
            v89 = sub_21DF191A4((uint64_t)v112 + v87, **(_QWORD **)(*(_QWORD *)v86 + 16), v86, 0, 0, (uint64_t)v123);
            v90 = *(_QWORD *)((char *)v106 + *(_QWORD *)(*a1 - 24));
            v122 = 257;
            v91 = sub_21DF1A79C(v88, 38, (uint64_t)v89, v90, (uint64_t)v121);
            v92 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
            LOWORD(v123[4]) = 257;
            v84 = sub_21DF19FAC(v92, v84, v91, (uint64_t)v123);
          }
          v28 = a1 + 43;
          v60 = v104;
        }
        else
        {
          v84 = 0;
        }
        LODWORD(v123[0]) = 0;
        *(_QWORD *)((char *)v123 + 4) = v62 | 0x900000000;
        LODWORD(v123[2]) = 0;
        BYTE4(v123[2]) = 0;
        memset(&v123[3], 0, 58);
        memset(&v123[11], 0, 32);
        v124 = 0u;
        v125 = 0;
        v126 = 4;
        v127 = 0u;
        memset(v128, 0, sizeof(v128));
        v129 = 0;
        v130 = 0;
        v132 = 0;
        v131 = 0;
        v133 = 1;
        v134 = 0;
        v9 = a1 + 2;
        if (BYTE1(v114[8 * v30 + 4]))
          v93 = v114[8 * v30] == *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 264);
        else
          v93 = 3;
        LODWORD(v123[1]) = v93;
        v123[4] = v108;
        v123[9] = v99;
        *(_QWORD *)&v124 = v60;
        v125 = v84;
        if (v113 || !v105)
        {
          v94 = 0;
          v126 = 3;
        }
        else
        {
          v126 = 0;
          v94 = llvm::ConstantFP::get();
        }
        *(_QWORD *)&v127 = v94;
        v129 = v113;
        BYTE1(v123[2]) = 1;
        v95 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v96 = *((_QWORD *)v95 + 43);
        v116 = *(_OWORD *)(v95 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v95 + 8));
        v118 = *((_DWORD *)v95 + 26);
        v34 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v96 + 248))(v96, &v116, v123);
        v26 = a1 + 1;
        if (v117)
          llvm::MetadataTracking::untrack();
        v27 = v98;
        if (!v34)
          goto LABEL_48;
LABEL_47:
        sub_21DF820EC(v9, v34, v30, 15, 0);
      }
LABEL_48:
      v13 ^= v31;
      if (!v13)
        goto LABEL_49;
    }
    v32 = llvm::User::operator new((llvm::User *)0x58);
    v123[0] = "agc.clear_color";
    v115 = v115 & 0xFFFFFFFF00000000 | v30;
    v123[2] = v115;
    LOWORD(v123[4]) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v33 = *(_QWORD *)(*a1 - 24);
    LOWORD(v123[4]) = 257;
    v34 = sub_21DF19394((_QWORD *)((char *)v26 + v33), **(llvm::Type ***)(*(_QWORD *)v32 + 16), v32, 0, (uint64_t)v123);
    if (!v34)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_49:
  sub_21DF465B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
  return a1;
}

uint64_t sub_21DF4AA18(uint64_t a1, unsigned int a2, _DWORD *a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type ***v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  llvm::Value *v70;
  uint64_t v71;
  llvm::Value *v72;
  uint64_t v73;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  _QWORD __src[4];
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  llvm::FixedVectorType::get();
  v10 = llvm::User::operator new((llvm::User *)0x58);
  v11 = a2;
  v84 = "agc.pbe_words";
  v86[0] = a2;
  LOWORD(v87) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  v12 = *(const char **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1616);
  v71 = a6;
  if (v12)
    strlen(v12);
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v13 = llvm::User::operator new((llvm::User *)0x58);
  llvm::FixedVectorType::get();
  v84 = "agc.emit_info";
  v86[0] = a2;
  LOWORD(v87) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v73 = v13;
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 4 * a2);
  if (*a3 != (_DWORD)v14)
  {
    v15 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v16 = *(_QWORD **)(a1 + v15 + 344);
    v69 = a3;
    if (v16[185])
    {
      v17 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336), (llvm::LLVMContext *)1);
      v84 = "agc.framebuffer_slot";
      v86[0] = v14;
      LOWORD(v87) = 2051;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v18 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v87) = 257;
      v19 = sub_21DF19394((uint64_t *)(v18 + 8), **(llvm::Type ***)(*(_QWORD *)v17 + 16), v17, 0, (uint64_t)&v84);
      v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v21 = *(_QWORD *)(v20 + 344);
      v22 = *(_QWORD *)(v21 + 1480);
      if (v22)
        v23 = strlen(*(const char **)(v21 + 1480));
      else
        v23 = 0;
      v25 = sub_21DF203DC(v20, v22, v23, *(_QWORD *)(v20 + 192), *(_QWORD *)(v20 + 192));
      v26 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      __src[0] = llvm::ConstantInt::get();
      LOWORD(v87) = 257;
      v24 = sub_21DF191A4(v26 + 8, *(_QWORD *)(v25 + 24), v25, (uint64_t)__src, 1, (uint64_t)&v84);
      v15 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v16 = *(_QWORD **)(a1 + v15 + 344);
    }
    else
    {
      v19 = 0;
      v24 = 0;
    }
    v27 = a1 + v15;
    v79 = *(_OWORD *)(a1 + v15 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + v15 + 8));
    v81 = *(_DWORD *)(v27 + 104);
    v28 = (*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, _QWORD, uint64_t, llvm::Value *, _QWORD))(*v16 + 232))(v16, &v79, a2 & 7, *(_QWORD *)(a1 + 16), v19, v24, *(unsigned __int8 *)(a1 + 25));
    if (v80)
      llvm::MetadataTracking::untrack();
    if (v28)
    {
      v29 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v29 + 56) = v28;
      *(_QWORD *)(v29 + 64) = v28 + 40;
    }
    *v69 = v14;
  }
  if (v71)
  {
    v84 = "cond_emit";
    LOWORD(v87) = 259;
    v30 = operator new();
    llvm::BasicBlock::BasicBlock();
    v84 = "cond_skip";
    LOWORD(v87) = 259;
    v31 = operator new();
    llvm::BasicBlock::BasicBlock();
    v32 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v33 = llvm::ConstantInt::get();
    LOWORD(v87) = 257;
    v34 = (llvm::Type ***)sub_21DF1A410(v32, v71, v33, (uint64_t)&v84);
    v35 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
    v36 = llvm::ConstantInt::get();
    LOWORD(v87) = 257;
    v37 = sub_21DF19478(v35, 32, v34, v36, (uint64_t)&v84);
    sub_21DF38D70((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v37, v30, v31);
    v38 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    *(_QWORD *)(v38 + 56) = v30;
    *(_QWORD *)(v38 + 64) = v30 + 40;
  }
  else
  {
    v31 = 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a2) & 0x2000000) != 0)
  {
    *(_BYTE *)(a1 + 24) = 1;
    v39 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (*(_QWORD *)(v39 + 1456))
      strlen(*(const char **)(v39 + 1456));
    v40 = sub_21DF206CC();
    v41 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (*(_QWORD *)(v41 + 1464))
      strlen(*(const char **)(v41 + 1464));
    v42 = sub_21DF206CC();
    v43 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v87) = 257;
    v72 = sub_21DF191A4(v43 + 8, **(_QWORD **)(*(_QWORD *)v40 + 16), v40, 0, 0, (uint64_t)&v84);
    v44 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v87) = 257;
    v70 = sub_21DF191A4(v44 + 8, **(_QWORD **)(*(_QWORD *)v42 + 16), v42, 0, 0, (uint64_t)&v84);
    v45 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    v84 = "agc.sstt_address";
    v86[0] = a2;
    LOWORD(v87) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    v45[80] |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v46 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v87) = 257;
    v68 = sub_21DF19394((uint64_t *)(v46 + 8), **(llvm::Type ***)(*(_QWORD *)v45 + 16), (uint64_t)v45, 0, (uint64_t)&v84);
    v47 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    v84 = "agc.queue_address";
    v86[0] = a2;
    LOWORD(v87) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    v47[80] |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v48 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v87) = 257;
    v49 = (char *)sub_21DF19394((uint64_t *)(v48 + 8), **(llvm::Type ***)(*(_QWORD *)v47 + 16), (uint64_t)v47, 0, (uint64_t)&v84);
    v50 = llvm::User::operator new((llvm::User *)0x58);
    v84 = "agc.slice_level";
    v86[0] = a2;
    LOWORD(v87) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v51 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v87) = 257;
    v52 = sub_21DF19394((uint64_t *)(v51 + 8), **(llvm::Type ***)(*(_QWORD *)v50 + 16), v50, 0, (uint64_t)&v84);
    v53 = llvm::PointerType::get();
    v54 = llvm::PointerType::get();
    v55 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v56 = *(_QWORD *)(v55 + 160);
    v57 = *(_QWORD *)(v55 + 192);
    __src[0] = v53;
    __src[1] = v54;
    __src[2] = v56;
    __src[3] = v56;
    v83 = v57;
    v84 = (char *)v86;
    v85 = 0x500000000;
    sub_21DF1B18C((uint64_t)&v84, __src, &v84);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v59 = v58;
    if (v84 != (char *)v86)
      free(v84);
    v84 = v49;
    v85 = v68;
    v86[0] = v72;
    v86[1] = v70;
    v87 = v52;
    v60 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    LOWORD(v83) = 257;
    sub_21DF191A4(v60, *(_QWORD *)(v59 + 24), v59, (uint64_t)&v84, 5, (uint64_t)__src);
  }
  v61 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v62 = *(_QWORD *)(v61 + 344);
  v76 = *(_OWORD *)(v61 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v61 + 8));
  v78 = *(_DWORD *)(v61 + 104);
  result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v62 + 224))(v62, &v76, v10, a4, *(_QWORD *)(a1 + 16) + 4 * v11, v73, 0);
  if (v77)
    result = llvm::MetadataTracking::untrack();
  if (a5)
  {
    v64 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v65 = *(_QWORD *)(v64 + 344);
    if (*(_QWORD *)(v65 + 1544))
      strlen(*(const char **)(v65 + 1544));
    v66 = sub_21DF206CC();
    LOWORD(v87) = 257;
    result = (uint64_t)sub_21DF191A4(v64 + 8, **(_QWORD **)(*(_QWORD *)v66 + 16), v66, 0, 0, (uint64_t)&v84);
  }
  if (v31)
  {
    result = sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
    v67 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    *(_QWORD *)(v67 + 56) = v31;
    *(_QWORD *)(v67 + 64) = v31 + 40;
  }
  return result;
}

uint64_t sub_21DF4B604(uint64_t a1, uint64_t a2, llvm::Type *a3, uint64_t a4)
{
  uint64_t v6;
  llvm::Function *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Function *v41;
  int v42;
  void *__p[2];
  char v44;
  __int16 v45;

  sub_21DF2E500(a1 + 32, a2, a3);
  sub_21DF44F28((uint64_t *)a1, (uint64_t *)off_24E1E9A88);
  *(_QWORD *)a1 = off_24E1E9978;
  *(_QWORD *)(a1 + 32) = &unk_24E1E9A20;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = (*(_QWORD *)(a4 + 72) & 0x20000000000000uLL) >> 53;
  v6 = sub_21DF206CC();
  v7 = (llvm::Function *)v6;
  if (*(_BYTE *)(a1 + 25))
    v8 = 1728;
  else
    v8 = 1712;
  *(_WORD *)(v6 + 18) = *(_WORD *)(v6 + 18) & 0xC00F | v8;
  __p[0] = "entry";
  v45 = 259;
  operator new();
  v41 = v7;
  v9 = llvm::BasicBlock::BasicBlock();
  v10 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v10 + 56) = v9;
  *(_QWORD *)(v10 + 64) = v9 + 40;
  v11 = *(_QWORD *)(a4 + 72);
  v12 = v11 & WORD1(v11);
  v13 = (WORD1(v11) ^ 0xFFFF) & v11;
  if (!v13)
  {
    v14 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (!*(_BYTE *)(v14 + 1655))
    {
      v13 = 0;
      if (v12)
        goto LABEL_13;
LABEL_15:
      v21 = 0;
      goto LABEL_16;
    }
    v15 = HIWORD(v11) & 0x1F;
    if (*(_BYTE *)(v14 + 1656))
      v16 = v12 == 0;
    else
      v16 = 1;
    v17 = __clz(__rbit32(v12));
    if (!v16)
      LOBYTE(v15) = v17;
    v13 = 1 << v15;
    v12 &= ~(1 << v15);
  }
  if (!v12)
    goto LABEL_15;
LABEL_13:
  v18 = llvm::User::operator new((llvm::User *)0x58);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336), v19);
  __p[0] = "agc.emit_enabled";
  v45 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v45 = 257;
  v21 = sub_21DF19394((uint64_t *)(v20 + 8), **(llvm::Type ***)(*(_QWORD *)v18 + 16), v18, 0, (uint64_t)__p);
LABEL_16:
  v42 = 0;
  if (v12 && *(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1655))
  {
    do
    {
      v22 = __clz(__rbit32(v12));
      v12 ^= 1 << v22;
      if (v12 | v13)
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 344 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1544) != 0;
      else
        v23 = 0;
      sub_21DF4AA18(a1, v22, &v42, 0, v23, v21);
    }
    while (v12);
  }
  v24 = v12 | v13;
  v25 = v24 | (v24 >> 8);
  if (v25)
  {
    v26 = a1 + 344;
    do
    {
      v27 = __clz(__rbit32(v25));
      v28 = 1 << v27;
      if (((1 << v27) & v24) != 0)
      {
        v24 ^= v28;
        if (v24)
        {
          v29 = 0;
          v30 = *(_QWORD *)(*(_QWORD *)(v26 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1544) != 0;
        }
        else
        {
          v30 = 0;
          v29 = *(_BYTE *)(a1 + 25) == 0;
        }
        if ((v28 & v12) != 0)
          v31 = v21;
        else
          v31 = 0;
        sub_21DF4AA18(a1, v27, &v42, v29, v30, v31);
      }
      v32 = 256 << v27;
      if ((v24 & (256 << v27)) != 0)
      {
        v24 ^= v32;
        if (v24)
        {
          v33 = 0;
          v34 = *(_QWORD *)(*(_QWORD *)(v26 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1544) != 0;
        }
        else
        {
          v34 = 0;
          v33 = *(_BYTE *)(a1 + 25) == 0;
        }
        if ((v32 & v12) != 0)
          v35 = v21;
        else
          v35 = 0;
        sub_21DF4AA18(a1, v27 + 8, &v42, v33, v34, v35);
      }
      v25 ^= v28;
    }
    while (v25);
  }
  sub_21DF465B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
  if (*(_BYTE *)(a1 + 24))
  {
    v36 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v37 = **(_QWORD **)(v36 + 320);
    sub_21DF1AF28(__p, "on_demand_mapping");
    v38 = sub_21DF2CCE8(v37, (const UInt8 *)__p);
    if (v44 < 0)
      operator delete(__p[0]);
    if (v38)
    {
      v39 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v36 + 344) + 488))(*(_QWORD *)(v36 + 344), 0, v38);
      sub_21DF3EC28(v39);
      sub_21DF2C968(v36, v38, 0, v41);
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    }
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t *sub_21DF4BAB8(uint64_t *a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Function;
  uint64_t v8;
  void *v10;
  void *__p[2];
  char v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500((uint64_t)(a1 + 1), a2, a3);
  *a1 = (uint64_t)off_24E1E9AB8;
  a1[1] = (uint64_t)&unk_24E1E9B60;
  sub_21DF1AF28(__p, "utility_program");
  v5 = sub_21DF2CCE8((uint64_t)a3, (const UInt8 *)__p);
  v6 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320) = v5;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    v6 = *a1;
  }
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v6 - 24) + 344) + 320) = *(uint64_t *)((char *)a1
                                                                                        + *(_QWORD *)(v6 - 24)
                                                                                        + 320);
  Function = llvm::Module::getFunction();
  __p[0] = *(void **)(Function + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)__p);
  v10 = (void *)llvm::AttributeSet::addAttribute();
  LODWORD(__p[0]) = -1;
  __p[1] = v10;
  *(_QWORD *)(Function + 112) = llvm::AttributeList::get();
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  __p[0] = "agc.main";
  v13 = 259;
  llvm::Value::setName();
  sub_21DF2FB64();
  v8 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 104) = -1;
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24) + 344) + 104) = -1;
  return a1;
}

uint64_t sub_21DF4BC80(_QWORD *a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Impl;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  llvm::Value *v41;
  llvm::LLVMContext *v42;
  llvm::GetElementPtrInst *v43;
  llvm::GetElementPtrInst *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value *v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[4];
  __int128 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  _QWORD v94[4];
  __int16 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v8 = sub_21DF206CC();
  *(_WORD *)(v8 + 18) = *(_WORD *)(v8 + 18) & 0xC00F | 0x650;
  v76 = "entry";
  WORD4(v79) = 259;
  operator new();
  v9 = llvm::BasicBlock::BasicBlock();
  v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v10 + 7) = v9;
  *((_QWORD *)v10 + 8) = v9 + 40;
  if (*(_BYTE *)(a2 + 32))
  {
    v69 = a2;
    v11 = __clz(*(unsigned __int8 *)(a2 + 32)) ^ 0x1F;
    v12 = llvm::User::operator new((llvm::User *)0x58);
    v76 = "agc.image_words";
    WORD4(v79) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)(v13 + 344) + 1647))
    {
      v76 = (const char *)llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v77 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v78 = llvm::ValueAsMetadata::get();
      *(_QWORD *)&v79 = llvm::MDString::get();
      llvm::ConstantInt::get();
      *((_QWORD *)&v79 + 1) = llvm::ValueAsMetadata::get();
      v14 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 328);
      Impl = llvm::MDTuple::getImpl();
      sub_21DF19CD0(v14, Impl);
    }
    else
    {
      sub_21DF7A774(v13);
    }
    v16 = llvm::User::operator new((llvm::User *)0x58);
    v76 = "agc.sampler_words";
    WORD4(v79) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v68 = v11;
    if (a4 == 8)
    {
      v17 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
      if (*(_QWORD *)(v17 + 1456))
        strlen(*(const char **)(v17 + 1456));
      v31 = sub_21DF206CC();
      v32 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
      if (*(_QWORD *)(v32 + 1464))
        strlen(*(const char **)(v32 + 1464));
      v33 = sub_21DF206CC();
      v34 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v35 = llvm::UndefValue::get();
      v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      WORD4(v79) = 257;
      v37 = sub_21DF191A4((uint64_t)(v36 + 8), **(_QWORD **)(*(_QWORD *)v31 + 16), v31, 0, 0, (uint64_t)&v76);
      v95 = 257;
      v38 = llvm::ConstantInt::get();
      v39 = sub_21DF7980C((uint64_t)(v34 + 8), v35, (uint64_t)v37, v38, (uint64_t)v94);
      v40 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      WORD4(v79) = 257;
      v41 = sub_21DF191A4((uint64_t)(v40 + 8), **(_QWORD **)(*(_QWORD *)v33 + 16), v33, 0, 0, (uint64_t)&v76);
      v76 = *(const char **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 160);
      v77 = (uint64_t)v76;
      llvm::StructType::get();
      v67 = 1;
      v42 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
      v76 = "agc.y_adjust";
      WORD4(v79) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
      v43 = sub_21DF1A668((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v42);
      v44 = sub_21DF1A668((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v42);
      v45 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      WORD4(v79) = 257;
      v46 = sub_21DF19394(v45 + 1, **(llvm::Type ***)(*(_QWORD *)v43 + 16), (uint64_t)v43, 0, (uint64_t)&v76);
      v47 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      WORD4(v79) = 257;
      v48 = sub_21DF19394(v47 + 1, **(llvm::Type ***)(*(_QWORD *)v44 + 16), (uint64_t)v44, 0, (uint64_t)&v76);
      v49 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      WORD4(v79) = 257;
      v50 = sub_21DF20300(v49, (uint64_t)v41, v46, (uint64_t)&v76);
      v95 = 257;
      v51 = sub_21DF2074C(v49, v50, v48, (uint64_t)v94);
      v52 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      WORD4(v79) = 257;
      v53 = (uint64_t)(v52 + 8);
      v54 = llvm::ConstantInt::get();
      v27 = sub_21DF7980C(v53, v39, v51, v54, (uint64_t)&v76);
      v29 = v69;
      v30 = *(_DWORD *)(v69 + 32) >> 8;
    }
    else
    {
      if ((*a3 & 0x80) != 0)
        v18 = 3;
      else
        v18 = 1;
      v67 = v18;
      if ((*a3 & 0x80) != 0)
        v19 = 3;
      else
        v19 = 2;
      llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 272), (llvm::Type *)v19);
      v20 = llvm::User::operator new((llvm::User *)0x58);
      v76 = "agc.varying";
      WORD4(v79) = 259;
      v21 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v21 + 80) |= 1u;
      llvm::GlobalObject::setAlignment();
      v94[0] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v94[1] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v94[2] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v94[3] = llvm::ValueAsMetadata::get();
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      v22 = llvm::PointerType::get();
      v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      WORD4(v79) = 257;
      v24 = sub_21DF1A79C(v23, 49, v20, v22, (uint64_t)&v76);
      v25 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v26 = *((_QWORD *)v25 + 43);
      v73 = *(_OWORD *)(v25 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v25 + 8));
      v75 = *((_DWORD *)v25 + 26);
      v27 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v26 + 240))(v26, &v73, v19, 0, v24, 0);
      if (v74)
        llvm::MetadataTracking::untrack();
      v28 = *a3;
      v29 = v69;
      if ((*a3 & 0x80) != 0)
      {
        v27 = sub_21DF7969C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v27, 4);
        v28 = *a3;
      }
      v30 = v28 >> 3;
    }
    if ((v30 & 0xFu) < 2)
    {
      v56 = 0;
    }
    else
    {
      v55 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
      if (*(_QWORD *)(v55 + 1472))
        strlen(*(const char **)(v55 + 1472));
      v57 = sub_21DF206CC();
      v58 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      WORD4(v79) = 257;
      v56 = sub_21DF191A4((uint64_t)(v58 + 8), **(_QWORD **)(*(_QWORD *)v57 + 16), v57, 0, 0, (uint64_t)&v76);
      *(_WORD *)(v8 + 18) = *(_WORD *)(v8 + 18) & 0xC00F | 0x680;
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      v76 = (const char *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    LODWORD(v76) = 0;
    HIDWORD(v76) = v67;
    LODWORD(v78) = 0;
    BYTE4(v78) = 0;
    v79 = 0u;
    v80 = 0u;
    memset(v81, 0, 26);
    memset(&v81[2], 0, 32);
    v82 = 0u;
    v83 = 0;
    v86 = 0u;
    v87 = 0u;
    v88 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 256;
    v93 = 0;
    if (BYTE1(a1[8 * v68 + 7]))
      v59 = a1[8 * v68 + 3] == *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 264);
    else
      v59 = 3;
    LODWORD(v77) = v59;
    *((_QWORD *)&v79 + 1) = v12;
    *(_QWORD *)&v81[1] = v16;
    *(_QWORD *)&v82 = v27;
    if (v56)
    {
      v60 = 0;
      v84 = 3;
    }
    else
    {
      v84 = 0;
      v60 = llvm::ConstantFP::get();
    }
    v85 = v60;
    v89 = v56;
    BYTE1(v78) = 1;
    v61 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v62 = *((_QWORD *)v61 + 43);
    v70 = *(_OWORD *)(v61 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v61 + 8));
    v72 = *((_DWORD *)v61 + 26);
    v63 = (*(uint64_t (**)(uint64_t, __int128 *, const char **))(*(_QWORD *)v62 + 248))(v62, &v70, &v76);
    if (v71)
      llvm::MetadataTracking::untrack();
    v64 = *(unsigned __int8 *)(v29 + 32);
    while (v64)
    {
      v65 = __clz(v64);
      v64 ^= 0x80000000 >> v65;
      sub_21DF820EC(a1 + 2, v63, v65 ^ 0x1F, 15, 0);
    }
  }
  return sub_21DF465B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
}

uint64_t sub_21DF4C840(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;

  v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v15 = 257;
  *a4 = sub_21DF469F0(v9, a2, a3, (uint64_t)v14);
  v10 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v13[16] = 257;
  result = sub_21DF204B4((uint64_t)v10, 22, a2, a3, (uint64_t)v13);
  v12 = result;
  if (!result)
  {
    v15 = 257;
    v12 = llvm::BinaryOperator::Create();
    result = sub_21DF1A3A4(v10, v12, (uint64_t)v13);
  }
  *a5 = v12;
  return result;
}

uint64_t sub_21DF4C910(uint64_t a1, uint64_t a2, llvm::Type *a3, uint64_t a4, unsigned int *a5, int a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Impl;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  llvm::Type ***v33;
  uint64_t v34;
  uint64_t v35;
  llvm::BasicBlock *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  llvm::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  llvm::Value *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Value *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::Value *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  llvm::Value *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::Type *v173;
  uint64_t NullValue;
  uint64_t v175;
  uint64_t FirstInsertionPt;
  uint64_t v177;
  _DWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  llvm::Type ***v229;
  llvm::Constant *v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  llvm::Type ***v243;
  __int128 v244;
  __int128 v245;
  __int16 v246;
  __int128 v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  _BYTE v252[8];
  uint64_t v253;
  __int16 v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  _QWORD v261[4];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int16 v274;
  uint64_t v275;
  uint64_t v276;

  v276 = *MEMORY[0x24BDAC8D0];
  sub_21DF2E500(a1 + 600, a2, a3);
  sub_21DF49600(a1, (uint64_t *)off_24E1E9D10, a2, a4);
  *(_QWORD *)a1 = off_24E1E9BD8;
  *(_QWORD *)(a1 + 600) = &unk_24E1E9CA8;
  *(_QWORD *)(a1 + 16) = &unk_24E1E9C30;
  *(_QWORD *)(a1 + 584) = a5;
  *(_DWORD *)(a1 + 592) = a6;
  if (!a5)
  {
    v15 = (_QWORD *)a1;
    v16 = a4;
    v17 = 0;
LABEL_5:
    sub_21DF4BC80(v15, v16, v17, a6);
    return a1;
  }
  v11 = *a5;
  switch(v11 & 7)
  {
    case 0uLL:
      v15 = (_QWORD *)a1;
      v16 = a4;
      v17 = a5;
      goto LABEL_5;
    case 1uLL:
      v25 = (v11 >> 3) & 0xF;
      v26 = sub_21DF206CC();
      v27 = *(_WORD *)(v26 + 18) & 0xC00F;
      if (v25 < 2)
      {
        *(_WORD *)(v26 + 18) = v27 | 0x650;
      }
      else
      {
        *(_WORD *)(v26 + 18) = v27 | 0x680;
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        v255 = (const char *)llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
      v255 = "entry";
      LOWORD(v259) = 259;
      operator new();
      v34 = llvm::BasicBlock::BasicBlock();
      v35 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v35 + 56) = v34;
      *(_QWORD *)(v35 + 64) = v34 + 40;
      v36 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v37 = operator new();
      llvm::BasicBlock::BasicBlock();
      v255 = "skip";
      LOWORD(v259) = 259;
      v38 = operator new();
      llvm::BasicBlock::BasicBlock();
      sub_21DF45C0C((uint64_t)&v255, (_QWORD *)a1, (*a5 >> 12) & 0x1F);
      v39 = v255;
      v40 = *(const char **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1456);
      v231 = v25;
      if (v40)
        strlen(v40);
      v41 = sub_21DF206CC();
      v42 = *(const char **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1464);
      v230 = (llvm::Constant *)v39;
      if (v42)
        strlen(v42);
      v237 = v38;
      v43 = sub_21DF206CC();
      v44 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v259) = 257;
      v45 = sub_21DF191A4(v44, **(_QWORD **)(*(_QWORD *)v41 + 16), v41, 0, 0, (uint64_t)&v255);
      v46 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
      v254 = 257;
      v243 = (llvm::Type ***)sub_21DF1AC78(v44, (uint64_t)v45, v46, (uint64_t)v252);
      v47 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v259) = 257;
      v48 = sub_21DF191A4(v47, **(_QWORD **)(*(_QWORD *)v43 + 16), v43, 0, 0, (uint64_t)&v255);
      v49 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
      v254 = 257;
      v229 = (llvm::Type ***)sub_21DF1AC78(v47, (uint64_t)v48, v49, (uint64_t)v252);
      v50 = 0;
      *(_QWORD *)&v247 = 0;
      v251 = 0;
      if ((*((_BYTE *)a5 + 1) & 1) != 0)
      {
        sub_21DF45088((_QWORD *)a1, (uint64_t *)&v247, &v251);
        v50 = v247;
      }
      v233 = v50;
      v51 = llvm::User::operator new((llvm::User *)0x58);
      v255 = "agc.buffer_width";
      LOWORD(v259) = 259;
      v52 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v52 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v53 = llvm::User::operator new((llvm::User *)0x58);
      v255 = "agc.buffer_height";
      LOWORD(v259) = 259;
      v54 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v54 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v55 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v56 = sub_21DF19394((uint64_t *)(v55 + 8), **(llvm::Type ***)(*(_QWORD *)v51 + 16), v51, 0, (uint64_t)&v255);
      v57 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v58 = sub_21DF19394((uint64_t *)(v57 + 8), **(llvm::Type ***)(*(_QWORD *)v53 + 16), v53, 0, (uint64_t)&v255);
      if (v233)
      {
        v59 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v56 = sub_21DF19FAC(v59, v233, v56, (uint64_t)&v255);
        v60 = v233;
      }
      else
      {
        v60 = llvm::ConstantInt::get();
      }
      v61 = v251;
      v239 = v37;
      if (v251)
      {
        v62 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v58 = sub_21DF19FAC(v62, v251, v58, (uint64_t)&v255);
        v63 = v61;
      }
      else
      {
        v63 = llvm::ConstantInt::get();
      }
      v64 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      LOWORD(v259) = 257;
      v65 = sub_21DF19478(v64, 35, v243, v60, (uint64_t)&v255);
      v66 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      LOWORD(v259) = 257;
      v67 = sub_21DF19478(v66, 36, v243, v56, (uint64_t)&v255);
      v68 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      LOWORD(v259) = 257;
      v69 = (uint64_t)v229;
      v70 = sub_21DF19478(v68, 35, v229, v63, (uint64_t)&v255);
      v71 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      LOWORD(v259) = 257;
      v72 = sub_21DF19478(v71, 36, v229, v58, (uint64_t)&v255);
      v73 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v259) = 257;
      v74 = sub_21DF1A410(v73, v65, v67, (uint64_t)&v255);
      v75 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v254 = 257;
      v76 = sub_21DF1A410(v75, v70, v72, (uint64_t)v252);
      v246 = 257;
      v77 = sub_21DF1A410(v73, v74, v76, (uint64_t)&v244);
      v78 = v237;
      sub_21DF38D70((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v77, v239, v237);
      v79 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v79 + 56) = v239;
      *(_QWORD *)(v79 + 64) = v239 + 40;
      if ((*((_BYTE *)a5 + 1) & 1) != 0)
      {
        v80 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v243 = (llvm::Type ***)sub_21DF3BFA0(v80, (uint64_t)v243, v233, (uint64_t)&v255);
        v81 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v69 = sub_21DF3BFA0(v81, (uint64_t)v229, v61, (uint64_t)&v255);
      }
      v82 = llvm::User::operator new((llvm::User *)0x58);
      v255 = "agc.buffer_stride";
      LOWORD(v259) = 259;
      v83 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v83 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v84 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v255 = "agc.buffer_address";
      LOWORD(v259) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v84[80] |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v85 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v86 = sub_21DF19394((uint64_t *)(v85 + 8), **(llvm::Type ***)(*(_QWORD *)v82 + 16), v82, 0, (uint64_t)&v255);
      v87 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v259) = 257;
      v88 = sub_21DF1A864(v87, v69, v86, (uint64_t)&v255);
      v254 = 257;
      v89 = (uint64_t *)sub_21DF19FAC(v87, v88, (uint64_t)v243, (uint64_t)v252);
      if (v231 < 2)
      {
        v91 = (uint64_t *)(a1 + 16);
      }
      else
      {
        v90 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        v91 = (uint64_t *)(a1 + 16);
        if (*(_QWORD *)(v90 + 1472))
          strlen(*(const char **)(v90 + 1472));
        v159 = sub_21DF206CC();
        v160 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        LOWORD(v259) = 257;
        v161 = sub_21DF191A4(v160 + 8, **(_QWORD **)(*(_QWORD *)v159 + 16), v159, 0, 0, (uint64_t)&v255);
        v162 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
        v163 = llvm::ConstantInt::get();
        LOWORD(v259) = 257;
        v164 = sub_21DF1A184(v162, (uint64_t)v89, v163, (uint64_t)&v255);
        v254 = 257;
        v89 = (uint64_t *)sub_21DF19FAC(v162, v164, (uint64_t)v161, (uint64_t)v252);
        v78 = v237;
      }
      v165 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v166 = (uint64_t *)sub_21DF19394((uint64_t *)(v165 + 8), **(llvm::Type ***)(*(_QWORD *)v84 + 16), (uint64_t)v84, 0, (uint64_t)&v255);
      v167 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v168 = sub_21DF1A924(v167, v166, v89, (uint64_t)&v255);
      v169 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v170 = sub_21DF19394((uint64_t *)(v169 + 8), **(llvm::Type ***)(*(_QWORD *)v168 + 16), v168, 0, (uint64_t)&v255);
      v171 = sub_21DF45D98((_QWORD *)a1, (*a5 >> 12) & 0x1F, v170, (uint64_t)v230);
      sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
      v172 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v172 + 56) = v78;
      *(_QWORD *)(v172 + 64) = v78 + 40;
      NullValue = llvm::Constant::getNullValue(v230, v173);
      sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
      v175 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v36);
      sub_21DF19018(v175, (uint64_t)v36, FirstInsertionPt);
      v177 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v259) = 257;
      v178 = sub_21DF38DEC(v177, (uint64_t)v230, 2, (uint64_t)&v255);
      sub_21DF38EDC(v178, v171, v239);
      sub_21DF38EDC(v178, NullValue, v78);
      if ((*((_DWORD *)v230 + 2) & 0xFE) != 0x12 || *((_DWORD *)v230 + 8) <= 3u)
        v178 = (_DWORD *)sub_21DF7969C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v178, 4);
      v179 = v91;
      v180 = (uint64_t)v178;
      v181 = 0;
      goto LABEL_92;
    case 2uLL:
    case 3uLL:
      strlen((const char *)*(&off_24E1E9D58 + (v11 & 7)));
      v18 = sub_21DF206CC();
      *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xC00F | 0x650;
      v255 = "entry";
      LOWORD(v259) = 259;
      operator new();
      v19 = llvm::BasicBlock::BasicBlock();
      v20 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v20 + 56) = v19;
      *(_QWORD *)(v20 + 64) = v19 + 40;
      v21 = llvm::User::operator new((llvm::User *)0x58);
      v255 = "agc.image_words";
      LOWORD(v259) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v22 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      if (*(_BYTE *)(*(_QWORD *)(v22 + 344) + 1647))
      {
        v255 = (const char *)llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        v256 = llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        v257 = llvm::ValueAsMetadata::get();
        v258 = llvm::MDString::get();
        llvm::ConstantInt::get();
        v259 = llvm::ValueAsMetadata::get();
        v23 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 328);
        Impl = llvm::MDTuple::getImpl();
        sub_21DF19CD0(v23, Impl);
      }
      else
      {
        sub_21DF7A774(v22);
      }
      v28 = llvm::User::operator new((llvm::User *)0x58);
      v255 = "agc.sampler_words";
      LOWORD(v259) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v250 = 0;
      v251 = 0;
      v29 = *a5;
      if ((*a5 & 0x100) != 0)
      {
        sub_21DF45088((_QWORD *)a1, &v251, &v250);
        v29 = *a5;
      }
      v244 = 0u;
      v245 = 0u;
      if ((v29 & 7) == 3)
      {
        v232 = v251;
        v236 = v250;
        if (((v29 >> 3) & 0xF) >= 2)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 56) + 56);
          *(_WORD *)(v31 + 18) = *(_WORD *)(v31 + 18) & 0xC00F | 0x680;
          llvm::Module::getOrInsertNamedMetadata();
          llvm::ConstantInt::get();
          v255 = (const char *)llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
        }
        v32 = *(const char **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1456);
        v242 = v21;
        if (v32)
          strlen(v32);
        v94 = sub_21DF206CC();
        v95 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        if (*(_QWORD *)(v95 + 1464))
          strlen(*(const char **)(v95 + 1464));
        v122 = sub_21DF206CC();
        v123 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        if (*(_QWORD *)(v123 + 1472))
          strlen(*(const char **)(v123 + 1472));
        v124 = sub_21DF206CC();
        v125 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v126 = sub_21DF191A4(v125, **(_QWORD **)(*(_QWORD *)v94 + 16), v94, 0, 0, (uint64_t)&v255);
        v127 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
        v254 = 257;
        v128 = sub_21DF1AC78(v125, (uint64_t)v126, v127, (uint64_t)v252);
        v129 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v130 = sub_21DF191A4(v129, **(_QWORD **)(*(_QWORD *)v122 + 16), v122, 0, 0, (uint64_t)&v255);
        v131 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
        v254 = 257;
        v132 = sub_21DF1AC78(v129, (uint64_t)v130, v131, (uint64_t)v252);
        v133 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        LOWORD(v259) = 257;
        v134 = sub_21DF191A4(v133 + 8, **(_QWORD **)(*(_QWORD *)v124 + 16), v124, 0, 0, (uint64_t)&v255);
        v240 = llvm::ConstantInt::get();
        if ((*((_BYTE *)a5 + 1) & 2) != 0)
        {
          v143 = llvm::User::operator new((llvm::User *)0x58);
          v255 = "agc.address_remapping_factor";
          LOWORD(v259) = 259;
          v144 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v144 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v145 = llvm::User::operator new((llvm::User *)0x58);
          v255 = "agc.buffer_stride";
          LOWORD(v259) = 259;
          v146 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v146 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          if ((*((_BYTE *)a5 + 1) & 1) != 0)
          {
            v147 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v128 = sub_21DF3BFA0(v147, v128, v232, (uint64_t)&v255);
            v148 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v132 = sub_21DF3BFA0(v148, v132, v236, (uint64_t)&v255);
          }
          v149 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          LOWORD(v259) = 257;
          v150 = sub_21DF19394((uint64_t *)(v149 + 8), **(llvm::Type ***)(*(_QWORD *)v145 + 16), v145, 0, (uint64_t)&v255);
          v151 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v259) = 257;
          v152 = sub_21DF1A864(v151, v132, v150, (uint64_t)&v255);
          v254 = 257;
          v153 = sub_21DF19FAC(v151, v152, v128, (uint64_t)v252);
          v154 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v259) = 257;
          v155 = sub_21DF1A184(v154, v153, v240, (uint64_t)&v255);
          v254 = 257;
          v156 = sub_21DF19FAC(v154, v155, (uint64_t)v134, (uint64_t)v252);
          v157 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
          if ((*((_BYTE *)a5 + 1) & 4) != 0)
          {
            LOWORD(v259) = 257;
            v191 = sub_21DF19394(v157, **(llvm::Type ***)(*(_QWORD *)v143 + 16), v143, 0, (uint64_t)&v255);
            v192 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
            v193 = llvm::ConstantInt::get();
            LOWORD(v259) = 257;
            v194 = sub_21DF1A184(v192, v193, v191, (uint64_t)&v255);
            v195 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
            v196 = llvm::ConstantInt::get();
            LOWORD(v259) = 257;
            v197 = sub_21DF3BFA0(v195, v194, v196, (uint64_t)&v255);
            v254 = 257;
            v33 = (llvm::Type ***)sub_21DF1A410(v195, v156, v197, (uint64_t)v252);
            *(_QWORD *)&v244 = v33;
            v198 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v142 = sub_21DF1AE6C(v198, v156, v191, (uint64_t)&v255);
            goto LABEL_68;
          }
          LOWORD(v259) = 257;
          v158 = sub_21DF19394(v157, **(llvm::Type ***)(*(_QWORD *)v143 + 16), v143, 0, (uint64_t)&v255);
          sub_21DF4C840((_QWORD *)a1, v156, v158, (uint64_t *)&v244 + 1, (uint64_t *)&v244);
          v33 = (llvm::Type ***)v244;
        }
        else
        {
          v135 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
          v136 = llvm::ConstantInt::get();
          LOWORD(v259) = 257;
          v137 = sub_21DF1A184(v135, v128, v136, (uint64_t)&v255);
          v254 = 257;
          v33 = (llvm::Type ***)sub_21DF19FAC(v135, v137, (uint64_t)v134, (uint64_t)v252);
          *(_QWORD *)&v244 = v33;
          *((_QWORD *)&v244 + 1) = v132;
          if ((*((_BYTE *)a5 + 1) & 1) != 0)
          {
            v138 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v139 = sub_21DF1A184(v138, v232, v240, (uint64_t)&v255);
            v140 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v33 = (llvm::Type ***)sub_21DF3BFA0(v140, (uint64_t)v33, v139, (uint64_t)&v255);
            *(_QWORD *)&v244 = v33;
            v141 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            v142 = sub_21DF3BFA0(v141, v132, v236, (uint64_t)&v255);
LABEL_68:
            *((_QWORD *)&v244 + 1) = v142;
          }
        }
        v21 = v242;
        goto LABEL_74;
      }
      if ((v29 & 7) == 2)
      {
        v235 = v251;
        v238 = v250;
        v30 = *(const char **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1456);
        v241 = v21;
        if (v30)
          strlen(v30);
        v92 = sub_21DF206CC();
        v93 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        if (*(_QWORD *)(v93 + 1464))
          strlen(*(const char **)(v93 + 1464));
        v96 = sub_21DF206CC();
        v97 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v98 = sub_21DF191A4(v97, **(_QWORD **)(*(_QWORD *)v92 + 16), v92, 0, 0, (uint64_t)&v255);
        v99 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
        v254 = 257;
        v100 = sub_21DF1AC78(v97, (uint64_t)v98, v99, (uint64_t)v252);
        v101 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        LOWORD(v259) = 257;
        v102 = sub_21DF191A4(v101, **(_QWORD **)(*(_QWORD *)v96 + 16), v96, 0, 0, (uint64_t)&v255);
        v103 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
        v254 = 257;
        v104 = sub_21DF1AC78(v101, (uint64_t)v102, v103, (uint64_t)v252);
        if ((*((_BYTE *)a5 + 1) & 2) != 0)
        {
          v109 = llvm::User::operator new((llvm::User *)0x58);
          v255 = "agc.address_remapping_factor";
          LOWORD(v259) = 259;
          v110 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v110 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v111 = llvm::User::operator new((llvm::User *)0x58);
          v255 = "agc.buffer_view_stride";
          LOWORD(v259) = 259;
          v112 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v112 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v113 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          LOWORD(v259) = 257;
          v114 = sub_21DF19394((uint64_t *)(v113 + 8), **(llvm::Type ***)(*(_QWORD *)v111 + 16), v111, 0, (uint64_t)&v255);
          v115 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v259) = 257;
          v116 = sub_21DF1A864(v115, v104, v114, (uint64_t)&v255);
          v254 = 257;
          v100 = sub_21DF19FAC(v115, v116, v100, (uint64_t)v252);
          v117 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
          v118 = llvm::ConstantInt::get();
          LOWORD(v259) = 257;
          v119 = sub_21DF1AE6C(v117, v100, v118, (uint64_t)&v255);
          v120 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
          if ((*((_BYTE *)a5 + 1) & 4) != 0)
          {
            LOWORD(v259) = 257;
            v234 = sub_21DF19394(v120, **(llvm::Type ***)(*(_QWORD *)v109 + 16), v109, 0, (uint64_t)&v255);
            v182 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
            v183 = llvm::ConstantInt::get();
            LOWORD(v259) = 257;
            v184 = sub_21DF1A184(v182, v183, v234, (uint64_t)&v255);
            v185 = v100;
            v186 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
            v187 = llvm::ConstantInt::get();
            LOWORD(v259) = 257;
            v188 = sub_21DF3BFA0(v186, v184, v187, (uint64_t)&v255);
            v254 = 257;
            v189 = v186;
            v100 = v185;
            *(_QWORD *)&v244 = sub_21DF1A410(v189, v119, v188, (uint64_t)v252);
            v190 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            LOWORD(v259) = 257;
            *((_QWORD *)&v244 + 1) = sub_21DF1AE6C(v190, v119, v234, (uint64_t)&v255);
          }
          else
          {
            LOWORD(v259) = 257;
            v121 = sub_21DF19394(v120, **(llvm::Type ***)(*(_QWORD *)v109 + 16), v109, 0, (uint64_t)&v255);
            sub_21DF4C840((_QWORD *)a1, v119, v121, (uint64_t *)&v244 + 1, (uint64_t *)&v244);
          }
          if ((*((_BYTE *)a5 + 1) & 8) != 0)
          {
            v199 = llvm::User::operator new((llvm::User *)0x58);
            v255 = "agc.buffer_width";
            LOWORD(v259) = 259;
            v200 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v200 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v201 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
            v33 = (llvm::Type ***)v244;
            LOWORD(v259) = 257;
            v202 = sub_21DF19394(v201, **(llvm::Type ***)(*(_QWORD *)v199 + 16), v199, 0, (uint64_t)&v255);
            v254 = 257;
            *((_QWORD *)&v245 + 1) = sub_21DF19478(v201, 35, v33, v202, (uint64_t)v252);
          }
          else
          {
            v33 = (llvm::Type ***)v244;
          }
          v107 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
          v108 = llvm::ConstantInt::get();
          LOWORD(v259) = 257;
        }
        else
        {
          v105 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
          v106 = llvm::ConstantInt::get();
          LOWORD(v259) = 257;
          v33 = (llvm::Type ***)sub_21DF1AE6C(v105, v100, v106, (uint64_t)&v255);
          *(_QWORD *)&v244 = v33;
          *((_QWORD *)&v244 + 1) = v104;
          v107 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
          v108 = llvm::ConstantInt::get();
          LOWORD(v259) = 257;
        }
        *(_QWORD *)&v245 = sub_21DF1A410(v107, v100, v108, (uint64_t)&v255);
        v21 = v241;
        if ((*((_BYTE *)a5 + 1) & 1) != 0)
        {
          v203 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v259) = 257;
          v33 = (llvm::Type ***)sub_21DF19FAC(v203, (uint64_t)v33, v235, (uint64_t)&v255);
          *(_QWORD *)&v244 = v33;
          v204 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v259) = 257;
          *((_QWORD *)&v244 + 1) = sub_21DF19FAC(v204, *((uint64_t *)&v244 + 1), v238, (uint64_t)&v255);
        }
      }
      else
      {
        v33 = 0;
      }
LABEL_74:
      v205 = llvm::UndefValue::get();
      v206 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v259) = 257;
      v207 = v206 + 8;
      v208 = llvm::ConstantInt::get();
      v209 = sub_21DF7980C(v207, v205, (uint64_t)v33, v208, (uint64_t)&v255);
      v210 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v211 = *((_QWORD *)&v244 + 1);
      LOWORD(v259) = 257;
      v212 = v210 + 8;
      v213 = llvm::ConstantInt::get();
      v214 = sub_21DF7980C(v212, v209, v211, v213, (uint64_t)&v255);
      v215 = *(_QWORD *)a1;
      if (*(_BYTE *)(a1 + 57))
        v216 = *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + *(_QWORD *)(v215 - 24) + 264);
      else
        v216 = 3;
      v255 = (const char *)0x100000002;
      BYTE4(v257) = 0;
      v258 = 0;
      v260 = 0u;
      memset(v261, 0, 26);
      v262 = 0u;
      v263 = 0u;
      v264 = 0u;
      v268 = 0u;
      v269 = 0u;
      v272 = 0;
      v273 = 0;
      v274 = 256;
      v275 = 0;
      LODWORD(v257) = 0;
      LODWORD(v256) = v216;
      v259 = v21;
      v261[2] = v28;
      v265 = 0;
      *(_QWORD *)&v264 = v214;
      v271 = v245;
      if ((_QWORD)v245)
        v217 = 3;
      else
        v217 = 1;
      v270 = 0;
      v266 = v217;
      if ((_QWORD)v245)
      {
        v218 = 0;
      }
      else
      {
        v218 = llvm::ConstantInt::get();
        v215 = *(_QWORD *)a1;
      }
      v267 = v218;
      BYTE1(v257) = 1;
      v219 = a1 + *(_QWORD *)(v215 - 24);
      v220 = *(_QWORD *)(v219 + 344);
      v247 = *(_OWORD *)(v219 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v219 + 8));
      v249 = *(_DWORD *)(v219 + 104);
      v221 = (*(uint64_t (**)(uint64_t, __int128 *, const char **))(*(_QWORD *)v220 + 248))(v220, &v247, &v255);
      if (v248)
        llvm::MetadataTracking::untrack();
      v222 = *a5;
      if ((*a5 & 0x1F000) != 0x12000)
        goto LABEL_91;
      sub_21DF45C0C((uint64_t)v252, (_QWORD *)a1, (v222 >> 12) & 0x1F);
      v223 = v253;
      if ((v222 & 7) == 3)
      {
        v225 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
        v254 = 257;
        v226 = llvm::ConstantInt::get();
        v227 = sub_21DF79584(v225, v221, v226, (uint64_t)v252);
        v224 = sub_21DF45D98((_QWORD *)a1, (*a5 >> 12) & 0x1F, v227, v223);
      }
      else
      {
        if ((v222 & 7) != 2)
          goto LABEL_91;
        v224 = sub_21DF45214((_QWORD *)a1, (v222 >> 12) & 0x1F, v221, v253);
      }
      v221 = sub_21DF7969C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v224, 4);
LABEL_91:
      v181 = *((_QWORD *)&v245 + 1);
      v179 = (uint64_t *)(a1 + 16);
      v180 = v221;
LABEL_92:
      sub_21DF820EC(v179, v180, 0, 15, v181);
LABEL_93:
      sub_21DF465B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
      return a1;
    case 4uLL:
    case 5uLL:
    case 6uLL:
      strlen((const char *)*(&off_24E1E9D58 + (v11 & 7)));
      v12 = sub_21DF206CC();
      *(_WORD *)(v12 + 18) = *(_WORD *)(v12 + 18) & 0xC00F | 0x6C0;
      v255 = "entry";
      LOWORD(v259) = 259;
      operator new();
      v13 = llvm::BasicBlock::BasicBlock();
      v14 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      *(_QWORD *)(v14 + 56) = v13;
      *(_QWORD *)(v14 + 64) = v13 + 40;
      goto LABEL_93;
    default:
      return a1;
  }
}

uint64_t sub_21DF4EB3C(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(this);
    *((_QWORD *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  return a2;
}

uint64_t sub_21DF4EBA8(int a1, llvm::Type *this, int a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t result;

  llvm::Type::getScalarSizeInBits(this);
  *a6 = llvm::IntegerType::get();
  result = llvm::Type::getScalarSizeInBits(this);
  switch((_DWORD)result)
  {
    case 0x20:
      if (!a3)
        goto LABEL_10;
      break;
    case 0x10:
      if (!a3)
        goto LABEL_10;
      break;
    case 8:
      if (a3)
        break;
LABEL_10:
      *a4 = llvm::ConstantInt::get();
      result = llvm::ConstantInt::get();
      goto LABEL_11;
    default:
      return result;
  }
  *a4 = llvm::ConstantInt::getSigned();
  result = llvm::ConstantInt::getSigned();
LABEL_11:
  *a5 = result;
  return result;
}

uint64_t sub_21DF4ECE4(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return (uint64_t)a2;
    v10 = 38;
  }
  else
  {
    v10 = 40;
  }
  return sub_21DF1A79C(a1, v10, (uint64_t)a2, (uint64_t)a3, a4);
}

uint64_t sub_21DF4ED70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_21DF204B4((uint64_t)a1, 30, a2, a3, a4);
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    sub_21DF1A3A4(a1, v6, a4);
  }
  return v6;
}

uint64_t sub_21DF4EE04(const void *a1, size_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  void *v10;
  void *v11;
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v17;

  if (!a2)
    return 1;
  v17 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1580], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX"), 1, 0, &v17) & 1) == 0)
  {
    syslog(3, "Unable to create log directory");
    return 0;
  }
  v10 = (void *)MEMORY[0x24BDD17C8];
  if (qword_2553B3938 != -1)
    dispatch_once(&qword_2553B3938, &unk_24E1EAC90);
  v11 = (void *)objc_msgSend(v10, "stringWithFormat:", CFSTR("%@/%s_%@_%s.log"), CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX"), a3, objc_msgSend((id)qword_2553B3930, "stringFromDate:", objc_msgSend(MEMORY[0x24BDBCE60], "date")), a4);
  v12 = fopen((const char *)objc_msgSend(v11, "UTF8String"), "wb");
  if (!v12)
  {
    objc_msgSend(v11, "UTF8String");
    syslog(3, "Failure to create log file: %s");
    return 0;
  }
  v13 = v12;
  if (a5 && fwrite(a5, 1uLL, 4uLL, v12) != 4 || (v14 = 1, v15 = fwrite(a1, 1uLL, a2, v13), fclose(v13), v15 != a2))
  {
    objc_msgSend(v11, "UTF8String");
    syslog(3, "Failed to write log file (wrote %zu bytes, expected %zu bytes): %s");
    return 0;
  }
  return v14;
}

uint64_t sub_21DF4EFC0()
{
  qword_2553B3930 = (uint64_t)objc_alloc_init(MEMORY[0x24BDD1500]);
  objc_msgSend((id)qword_2553B3930, "setDateStyle:", 1);
  return MEMORY[0x24BEDD108](qword_2553B3930, sel_setDateFormat_);
}

uint64_t *sub_21DF4F000(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = (uint64_t)&off_24E1EACC8;
  v2 = (uint64_t)(a1 + 490);
  a1[490] = (uint64_t)&unk_24E1EAEF8;
  a1[304] = (uint64_t)&unk_24E1EAE80;
  v3 = a1[488];
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 486));
  sub_21DF349C0(a1, (uint64_t *)off_24E1EAF60);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF4F078(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = (uint64_t)&off_24E1EACC8;
  v2 = (uint64_t)(a1 + 490);
  a1[490] = (uint64_t)&unk_24E1EAEF8;
  a1[304] = (uint64_t)&unk_24E1EAE80;
  v3 = a1[488];
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 486));
  sub_21DF349C0(a1, (uint64_t *)off_24E1EAF60);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF4F100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF7C3C4((uint64_t)a1);
  v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 160))(v3, a1[370]);
  return v2;
}

uint64_t sub_21DF4F14C(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 3880);
  if (*v2 > a2)
    return v2[a2 + 1];
  return a2;
}

uint64_t sub_21DF4F16C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3864);
  if (v2)
    return *(unsigned __int16 *)(v2 + 2 * a2);
  else
    return 0;
}

BOOL sub_21DF4F184(uint64_t a1)
{
  return *(_QWORD *)(a1 + 3864) != 0;
}

uint64_t sub_21DF4F194(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3872);
  if (v2)
    return *(unsigned __int8 *)(v2 + a2);
  else
    return 0;
}

uint64_t sub_21DF4F1AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3912);
}

uint64_t sub_21DF4F1B4()
{
  return 0;
}

uint64_t sub_21DF4F1BC()
{
  return 0;
}

uint64_t sub_21DF4F1C4()
{
  return 0;
}

void sub_21DF4F1CC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  llvm::MDString *v11;
  llvm::MDString *v12;
  llvm::MDString *v13;
  const void *String;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  void **v36;
  void *__p[2];
  uint64_t v38;
  int v39;

  sub_21DF5152C();
  sub_21DF35E18();
  sub_21DF35E80();
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v8 = *(unsigned int *)(a2 + 32);
  else
    v8 = 1;
  v39 = 0;
  LODWORD(v28) = 3;
  sub_21DF7A834(0, a3, (unsigned int *)&v28, &v39);
  v9 = a3 - 8 * *(unsigned int *)(a3 + 8);
  v10 = *(_BYTE **)(v9 + 32);
  if (v10)
  {
    if (*v10)
      v11 = 0;
    else
      v11 = *(llvm::MDString **)(v9 + 32);
  }
  else
  {
    v11 = 0;
  }
  v12 = *(llvm::MDString **)(v9 + 40);
  if (v12)
  {
    if (*(_BYTE *)v12)
      v13 = 0;
    else
      v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  String = (const void *)llvm::MDString::getString(v11);
  v16 = v15;
  v17 = (const void *)llvm::MDString::getString(v13);
  v19 = v18;
  __p[0] = 0;
  __p[1] = 0;
  v38 = 0;
  v29 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = MEMORY[0x24BED83D8] + 16;
  v36 = __p;
  sub_21DF2C310((llvm::raw_ostream *)&v28);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    a2 = **(_QWORD **)(a2 + 16);
  llvm::Type::print((llvm::Type *)a2, (llvm::raw_ostream *)&v28);
  v20 = *((char *)v36 + 23);
  if (v20 >= 0)
    v21 = v36;
  else
    v21 = *v36;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)v36 + 23);
  else
    v22 = (size_t)v36[1];
  v23 = *(_DWORD *)(*sub_21DF35FEC(v17, v19) + 8);
  v24 = *(_DWORD *)(*sub_21DF35EE8(String, v16) + 8);
  if (v24 == 1)
    v25 = 3;
  else
    v25 = v23;
  *(_DWORD *)a4 = v8;
  *(_DWORD *)(a4 + 4) = v24;
  *(_DWORD *)(a4 + 8) = v25;
  v26 = sub_21DF51594(v21, v22);
  v27 = v39;
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(*v26 + 8);
  *(_DWORD *)(a4 + 16) = v27;
  *(_QWORD *)(a4 + 24) = sub_21DF80980(a1, 1, v27, (llvm::Type *)v8);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
}

uint64_t sub_21DF4F3DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  llvm::GetElementPtrInst *v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::GetElementPtrInst *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD v17[20];
  _BYTE v18[32];
  __int16 v19;

  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v5 = (llvm::LLVMContext *)sub_21DF513F8(a1);
  v6 = sub_21DF1A668(v4, v5);
  v7 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v8 = (llvm::LLVMContext *)sub_21DF513F8(a1);
  v9 = sub_21DF1A668(v7, v8);
  v10 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v19 = 257;
  v11 = sub_21DF19394(v10 + 1, **(llvm::Type ***)(*(_QWORD *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v18);
  v12 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v19 = 257;
  v13 = sub_21DF19394(v12 + 1, **(llvm::Type ***)(*(_QWORD *)v9 + 16), (uint64_t)v9, 0, (uint64_t)v18);
  v14 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v19 = 257;
  v15 = sub_21DF20300(v14, a2, v11, (uint64_t)v18);
  v17[16] = 257;
  return sub_21DF2074C(v14, v15, v13, (uint64_t)v17);
}

uint64_t sub_21DF4F50C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  llvm::GetElementPtrInst *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v5 = (llvm::LLVMContext *)sub_21DF513F8(a1);
  v6 = sub_21DF1A668(v4, v5);
  v7 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v15 = 257;
  v8 = sub_21DF19394(v7 + 1, **(llvm::Type ***)(*(_QWORD *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v14);
  v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v10 = *a2;
  v15 = 257;
  v11 = sub_21DF20674(v9, v8, v10, (uint64_t)v14);
  v12 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v15 = 257;
  return sub_21DF20300(v12, (uint64_t)a2, v11, (uint64_t)v14);
}

void sub_21DF4F5D8(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  char *v8;
  uint64_t k;
  uint64_t m;
  uint64_t v11;
  uint64_t n;
  uint64_t ii;
  unsigned int *v14;
  uint64_t jj;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  uint64_t kk;
  uint64_t v23;
  uint64_t mm;
  uint64_t nn;
  std::string *v26;
  std::string::size_type v27;
  uint64_t i1;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string v45;
  void *v46[2];
  char v47;
  std::string v48;
  void *v49[2];
  char v50;
  std::string v51;
  void *v52[2];
  char v53;
  std::string v54;
  void *__p[2];
  char v56;
  std::string v57;
  void *v58[2];
  char v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  void *v64[2];
  char v65;
  std::string v66;
  void *v67[2];
  std::string::size_type v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)a1[478];
  sub_21DF1AF28(v49, "AGCFragmentContextStateGL");
  sub_21DF1AF28(&v54, "AGCFragmentContextState");
  sub_21DF1AF28(v52, "fragmentState");
  sub_21DF1AF28(&v90, "AGCFragmentState");
  sub_21DF1AF28(&v75, "GL and Metal state:");
  sub_21DF1AF28(&v73, "alphaToCoverage");
  sub_21DF34E40(&v76, (const void **)&v73.__r_.__value_.__l.__data_, *v4 & 1);
  sub_21DF1AF28(v71, "alphaToOne");
  sub_21DF34E40(&v77, (const void **)v71, (*v4 >> 1) & 1);
  sub_21DF1AF28(v69, "sampleCoverage");
  sub_21DF34E40(&v78, (const void **)v69, (*v4 >> 2) & 1);
  sub_21DF1AF28(&v79, "GL specific state:");
  sub_21DF1AF28(v67, "depthStencilWriteDisabled");
  sub_21DF34E40(&v80, (const void **)v67, (*v4 >> 4) & 1);
  sub_21DF1AF28(&v66, "logicOp");
  sub_21DF34E40(&v81, (const void **)&v66.__r_.__value_.__l.__data_, (*v4 >> 5) & 1);
  sub_21DF1AF28(v64, "logicOpState");
  sub_21DF34E94(&v82, (const void **)v64, off_24E1EB768[((unint64_t)*v4 >> 6) & 0x1F]);
  sub_21DF1AF28(&v63, "alphaTest");
  sub_21DF34E40(&v83, (const void **)&v63.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  sub_21DF1AF28(&v62, "alphaTestFunc");
  sub_21DF34E94(&v84, (const void **)&v62.__r_.__value_.__l.__data_, off_24E1EB7F0[(unsigned __int16)*v4 >> 12]);
  sub_21DF1AF28(&v61, "smoothPoints");
  sub_21DF34E40(&v85, (const void **)&v61.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  sub_21DF1AF28(&v60, "pointSpriteEnabled");
  sub_21DF34E40(&v86, (const void **)&v60.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  sub_21DF1AF28(v58, "outputPointSize");
  sub_21DF34E40(&v87, (const void **)v58, (*v4 >> 18) & 1);
  sub_21DF1AF28(&v57, "shaderDebugEnable");
  sub_21DF34E40(&v88, (const void **)&v57.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  sub_21DF1AF28(__p, "unused");
  sub_21DF34E40(&v89, (const void **)__p, *v4 >> 20);
  sub_21DF50C18(&v51, (uint64_t)&v90, 0, (uint64_t)&v75, 15);
  v5 = 360;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 - 1] < 0)
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + v5));
    v5 -= 24;
  }
  while (v5);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  sub_21DF35174(&v90, (const void **)v52, (uint64_t)&v51);
  sub_21DF1AF28(v64, "colorMaskState");
  sub_21DF1AF28(&v73, "AGCColorMaskState");
  sub_21DF1AF28(v71, "redEnableBits");
  sub_21DF50EB4(&v75, (const void **)v71);
  sub_21DF1AF28(v69, "greenEnableBits");
  sub_21DF50EB4(&v76, (const void **)v69);
  sub_21DF1AF28(v67, "blueEnableBits");
  sub_21DF50EB4(&v77, (const void **)v67);
  sub_21DF1AF28(&v66, "alphaEnableBits");
  sub_21DF50EB4(&v78, (const void **)&v66.__r_.__value_.__l.__data_);
  sub_21DF50C18(&v63, (uint64_t)&v73, 0, (uint64_t)&v75, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v78.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v78.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  sub_21DF35174(&v91, (const void **)v64, (uint64_t)&v63);
  sub_21DF50C18(&v73, (uint64_t)&v54, 0, (uint64_t)&v90, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v90 + j * 8 + 24));
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  sub_21DF1AF28(&v61, "blendState");
  sub_21DF1AF28(&v90, "AGCBlendState");
  sub_21DF1AF28(v71, "enabled");
  if ((v4[4] & 1) != 0)
    v8 = "yes";
  else
    v8 = "no";
  sub_21DF34E94(&v75, (const void **)v71, v8);
  sub_21DF1AF28(v69, "src");
  sub_21DF34E94(&v76, (const void **)v69, off_24E1EB838[((unint64_t)v4[4] >> 1) & 0x1F]);
  sub_21DF1AF28(v67, "dst");
  sub_21DF34E94(&v77, (const void **)v67, off_24E1EB838[((unint64_t)v4[4] >> 6) & 0x1F]);
  sub_21DF1AF28(&v66, "srcA");
  sub_21DF34E94(&v78, (const void **)&v66.__r_.__value_.__l.__data_, off_24E1EB838[(unsigned __int16)v4[4] >> 11]);
  sub_21DF1AF28(v64, "dstA");
  sub_21DF34E94(&v79, (const void **)v64, off_24E1EB838[*((_WORD *)v4 + 9) & 0x1F]);
  sub_21DF1AF28(&v63, "equation");
  sub_21DF34E94(&v80, (const void **)&v63.__r_.__value_.__l.__data_, off_24E1EB8D8[((unint64_t)v4[4] >> 21) & 7]);
  sub_21DF1AF28(&v62, "equationA");
  sub_21DF34E94(&v81, (const void **)&v62.__r_.__value_.__l.__data_, off_24E1EB8D8[*((_BYTE *)v4 + 19) & 7]);
  sub_21DF50C18(&v60, (uint64_t)&v90, 0, (uint64_t)&v75, 7);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v81.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + k * 8));
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  sub_21DF35174(&v74, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  sub_21DF50C18(&v38, (uint64_t)v49, 0, (uint64_t)&v73, 2);
  for (m = 0; m != -6; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0)
      operator delete(*(void **)((char *)&v73 + m * 8 + 24));
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  v11 = a1[370];
  sub_21DF1AF28(&v73, "AGCDrawBufferState");
  sub_21DF1AF28(v71, "enabledBits");
  sub_21DF50EB4(&v90, (const void **)v71);
  sub_21DF1AF28(v69, "sampleCount");
  sub_21DF34E40(&v91, (const void **)v69, (*(_DWORD *)(v11 + 32) >> 8) & 0xF);
  sub_21DF1AF28(v67, "colorSampleCount");
  sub_21DF34E40(&v92, (const void **)v67, (unsigned __int16)*(_DWORD *)(v11 + 32) >> 12);
  sub_21DF1AF28(&v66, "outputPartitionSize");
  sub_21DF34E40(&v93, (const void **)&v66.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v11 + 34));
  sub_21DF1AF28(v64, "LIBSpilling");
  sub_21DF34E40(&v94, (const void **)v64, HIBYTE(*(_DWORD *)(v11 + 32)) & 1);
  sub_21DF1AF28(&v63, "unused");
  sub_21DF34E40(&v95, (const void **)&v63.__r_.__value_.__l.__data_, *(_DWORD *)(v11 + 32) >> 25);
  sub_21DF1AF28(&v62, "encoded : ");
  sub_21DF1AF28(&v61, "encoded[0]");
  sub_21DF50FC4(&v60, (_DWORD *)v11);
  sub_21DF35174(&v75, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  sub_21DF1AF28(v58, "encoded[1]");
  sub_21DF50FC4(&v57, (_DWORD *)(v11 + 4));
  sub_21DF35174(&v76, (const void **)v58, (uint64_t)&v57);
  sub_21DF1AF28(__p, "encoded[2]");
  sub_21DF50FC4(&v54, (_DWORD *)(v11 + 8));
  sub_21DF35174(&v77, (const void **)__p, (uint64_t)&v54);
  sub_21DF1AF28(v52, "encoded[3]");
  sub_21DF50FC4(&v51, (_DWORD *)(v11 + 12));
  sub_21DF35174(&v78, (const void **)v52, (uint64_t)&v51);
  sub_21DF1AF28(v49, "encoded[4]");
  sub_21DF50FC4(&v48, (_DWORD *)(v11 + 16));
  sub_21DF35174(&v79, (const void **)v49, (uint64_t)&v48);
  sub_21DF1AF28(v46, "encoded[5]");
  sub_21DF50FC4(&v45, (_DWORD *)(v11 + 20));
  sub_21DF35174(&v80, (const void **)v46, (uint64_t)&v45);
  sub_21DF1AF28(v43, "encoded[6]");
  sub_21DF50FC4(&v42, (_DWORD *)(v11 + 24));
  sub_21DF35174(&v81, (const void **)v43, (uint64_t)&v42);
  sub_21DF1AF28(v40, "encoded[7]");
  sub_21DF50FC4(&v39, (_DWORD *)(v11 + 28));
  sub_21DF35174(&v82, (const void **)v40, (uint64_t)&v39);
  sub_21DF50C18(&v96, (uint64_t)&v62, 0, (uint64_t)&v75, 8);
  sub_21DF50C18(&v37, (uint64_t)&v73, 0, (uint64_t)&v90, 7);
  for (n = 0; n != -21; n -= 3)
  {
    if (SHIBYTE(v96.__r_.__value_.__r.__words[n + 2]) < 0)
      operator delete(*(void **)((char *)&v96.__r_.__value_.__l.__data_ + n * 8));
  }
  for (ii = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[ii + 2]) < 0)
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + ii * 8));
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v14 = (unsigned int *)a1[485];
  sub_21DF1AF28(&v90, (char *)&unk_21DFAD77A);
  for (jj = 1; jj != 33; ++jj)
  {
    std::to_string(&v73, v14[jj]);
    v16 = std::string::append(&v73, " ");
    v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v75;
    else
      v18 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      size = v75.__r_.__value_.__l.__size_;
    std::string::append(&v90, (const std::string::value_type *)v18, size);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  sub_21DF1AF28(&v73, "AGCSamplerRemapStateGL");
  sub_21DF1AF28(v71, "samplerCount");
  sub_21DF34E40(&v75, (const void **)v71, *v14);
  sub_21DF1AF28(v69, "samplerToTexUnitMap");
  std::operator+<char>();
  v20 = std::string::append(&v66, "]");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v67 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v68 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35174(&v76, (const void **)v69, (uint64_t)v67);
  sub_21DF50C18(&v60, (uint64_t)&v73, 0, (uint64_t)&v75, 2);
  for (kk = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v76.__r_.__value_.__r.__words[kk + 2]) < 0)
      operator delete(*(void **)((char *)&v75 + kk * 8 + 24));
  }
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v23 = a1[483];
  if (v23)
  {
    v36 = a2;
    sub_21DF1AF28(&v62, (char *)&unk_21DFAD77A);
    for (mm = 0; mm != 32; ++mm)
    {
      sub_21DF1AF28(&v90, "AGCSamplerPCFState");
      sub_21DF1AF28(&v73, "compareFunc");
      sub_21DF34E94(&v75, (const void **)&v73.__r_.__value_.__l.__data_, off_24E1EB7F0[*(_WORD *)(v23 + 2 * mm) & 0xF]);
      sub_21DF1AF28(v71, "clampPCFEnabled");
      sub_21DF51230(&v76, (const void **)v71, (*(_WORD *)(v23 + 2 * mm) >> 4) & 1);
      sub_21DF1AF28(v69, "mipmapMinFilterEnabled");
      sub_21DF51230(&v77, (const void **)v69, (*(_WORD *)(v23 + 2 * mm) >> 5) & 1);
      sub_21DF1AF28(v67, "trilinearMinFilterEnabled");
      sub_21DF51230(&v78, (const void **)v67, (*(_WORD *)(v23 + 2 * mm) >> 6) & 1);
      sub_21DF1AF28(&v66, "linearMinFilterEnabled");
      sub_21DF51230(&v79, (const void **)&v66.__r_.__value_.__l.__data_, (*(_WORD *)(v23 + 2 * mm) >> 7) & 1);
      sub_21DF1AF28(v64, "linearMagFilterEnabled");
      sub_21DF51230(&v80, (const void **)v64, HIBYTE(*(_WORD *)(v23 + 2 * mm)) & 1);
      sub_21DF1AF28(&v63, "unused");
      sub_21DF51230(&v81, (const void **)&v63.__r_.__value_.__l.__data_, *(_WORD *)(v23 + 2 * mm) >> 9);
      sub_21DF50C18(&v61, (uint64_t)&v90, 1, (uint64_t)&v75, 7);
      for (nn = 0; nn != -21; nn -= 3)
      {
        if (SHIBYTE(v81.__r_.__value_.__r.__words[nn + 2]) < 0)
          operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + nn * 8));
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      if (v70 < 0)
        operator delete(v69[0]);
      if (v72 < 0)
        operator delete(v71[0]);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v61;
      else
        v26 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        v27 = v61.__r_.__value_.__l.__size_;
      std::string::append(&v62, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    sub_21DF1AF28(&v90, "AGCSamplerPCFStates");
    sub_21DF1AF28(&v75, "pcf : ");
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      sub_21DF205EC(&v76, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    else
      v76 = v62;
    a2 = v36;
    sub_21DF50C18(&v73, (uint64_t)&v90, 0, (uint64_t)&v75, 2);
    for (i1 = 0; i1 != -6; i1 -= 3)
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[i1 + 2]) < 0)
        operator delete(*(void **)((char *)&v75 + i1 * 8 + 24));
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_21DF1AF28(&v73, (char *)&unk_21DFAD77A);
  }
  sub_21DF35850((uint64_t)&v90, (const void **)&v38.__r_.__value_.__l.__data_, (const void **)&v37.__r_.__value_.__l.__data_);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v60;
  else
    v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v30 = v60.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v90, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v73;
  else
    v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v34 = v73.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v75, (const std::string::value_type *)v33, v34);
  *a2 = *v35;
  v35->__r_.__value_.__r.__words[0] = 0;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

BOOL sub_21DF508F8(_QWORD *a1)
{
  _BOOL8 v2;
  int v3;
  int v4;
  char *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    v3 = sub_21DF77960((uint64_t)a1);
    v4 = sub_21DF83DCC((uint64_t)a1);
    v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v6 = (uint64_t *)(v5 + 704);
    v5[774] = 1;
    v7 = *((_DWORD *)v5 + 184) - *((_DWORD *)v5 + 188) + *((_DWORD *)v5 + 186);
    sub_21DF34D10((uint64_t *)v5 + 88, v3);
    sub_21DF34D6C(v6, v4);
    v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v9 = sub_21DF2DC24((uint64_t)v6, v7);
    sub_21DF2ED04(v8, v9);
  }
  return v2;
}

uint64_t sub_21DF509CC(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 3824) + 2) >> 3) & 1;
}

uint64_t sub_21DF509DC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 - 304;
  *(a1 - 304) = &off_24E1EACC8;
  v2 = (uint64_t)(a1 + 186);
  a1[186] = &unk_24E1EAEF8;
  *a1 = &unk_24E1EAE80;
  v3 = a1[184];
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 182));
  sub_21DF349C0(v1, (uint64_t *)off_24E1EAF60);
  return sub_21DF2E650(v2);
}

void sub_21DF50A4C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 - 304;
  *(a1 - 304) = &off_24E1EACC8;
  v2 = (uint64_t)(a1 + 186);
  a1[186] = &unk_24E1EAEF8;
  *a1 = &unk_24E1EAE80;
  v3 = a1[184];
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 182));
  sub_21DF349C0(v1, (uint64_t *)off_24E1EAF60);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF50AD4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EACC8;
  v1[490] = (uint64_t)&unk_24E1EAEF8;
  v1[304] = (uint64_t)&unk_24E1EAE80;
  v2 = v1[488];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 486));
  sub_21DF349C0(v1, (uint64_t *)off_24E1EAF60);
  return sub_21DF2E650((uint64_t)(v1 + 490));
}

void sub_21DF50B4C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EACC8;
  v1[490] = (uint64_t)&unk_24E1EAEF8;
  v1[304] = (uint64_t)&unk_24E1EAE80;
  v2 = v1[488];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 486));
  sub_21DF349C0(v1, (uint64_t *)off_24E1EAF60);
  sub_21DF2E650((uint64_t)(v1 + 490));
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF50BDC(_QWORD *a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 64) + 3824) + 2) >> 3) & 1;
}

void sub_21DF50BF8(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF4F5D8((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 88)), a2);
}

BOOL sub_21DF50C08(_QWORD *a1)
{
  return sub_21DF508F8((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

void sub_21DF50C18(std::string *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  const std::string::value_type *p_p;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t i;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  void *v20[2];
  char v21;
  std::string v22;
  void *v23[2];
  char v24;
  void *__p;
  std::string::size_type v26;
  unsigned __int8 v27;
  void *__dst[2];
  uint64_t v29;
  std::string v30;
  std::string v31;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_21DF205EC(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v29 = *(_QWORD *)(a2 + 16);
  }
  sub_21DF51284((void **)&v30.__r_.__value_.__l.__data_, (std::string::value_type *)__dst, a3);
  sub_21DF1AF28(v23, "{");
  sub_21DF51284(&__p, (std::string::value_type *)v23, a3);
  if ((v27 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v27 & 0x80u) == 0)
    v10 = v27;
  else
    v10 = v26;
  v11 = std::string::append(&v30, p_p, v10);
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst[0]);
    if (!a5)
      goto LABEL_41;
    goto LABEL_20;
  }
  if (a5)
  {
LABEL_20:
    for (i = 24 * a5; i; i -= 24)
    {
      if (*(char *)(a4 + 23) < 0)
        sub_21DF205EC(&v30, *(void **)a4, *(_QWORD *)(a4 + 8));
      else
        v30 = *(std::string *)a4;
      v14 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        sub_21DF205EC(&v22, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        v22 = v30;
      sub_21DF51284(&__p, (std::string::value_type *)&v22, a3 + 1);
      if ((v27 & 0x80u) == 0)
        v15 = (const std::string::value_type *)&__p;
      else
        v15 = (const std::string::value_type *)__p;
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = v26;
      std::string::append(&v31, v15, v16);
      if ((char)v27 < 0)
        operator delete(__p);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v14 < 0)
LABEL_40:
          operator delete(v30.__r_.__value_.__l.__data_);
      }
      else if (v14 < 0)
      {
        goto LABEL_40;
      }
      a4 += 24;
    }
  }
LABEL_41:
  sub_21DF1AF28(v20, "}");
  sub_21DF51284((void **)&v30.__r_.__value_.__l.__data_, (std::string::value_type *)v20, a3);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v31;
  else
    v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v19 = std::string::insert(&v30, 0, (const std::string::value_type *)v17, size);
  *a1 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF50EB4(std::string *a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *__p;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_21DF2E3C8((uint64_t)v9);
  v4 = sub_21DF28BA4(v10, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v10[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_21DF35174(a1, a2, (uint64_t)&__p);
  if (v8 < 0)
    operator delete(__p);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2207A790C](&v12);
}

void sub_21DF50FC4(std::string *a1, _DWORD *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v19, "AGCDrawBuffer");
  sub_21DF1AF28(v17, "pbeSourceFormat");
  sub_21DF34E94(&v21, (const void **)v17, off_24E1EB910[*a2 & 0x1F]);
  sub_21DF1AF28(v15, "numWrittenComponents");
  sub_21DF34E40(&v22, (const void **)v15, *a2 >> 5);
  sub_21DF1AF28(v13, "gammaCorrection");
  sub_21DF34E40(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_21DF1AF28(v11, "colorSpaceConversion");
  sub_21DF34E94(&v24, (const void **)v11, off_24E1EB9C8[((unint64_t)*a2 >> 9) & 7]);
  sub_21DF1AF28(v9, "preEmitSwizzle");
  sub_21DF34E94(&v25, (const void **)v9, off_24E1EB9F0[((unint64_t)*a2 >> 12) & 7]);
  sub_21DF1AF28(v7, "outputPartitionOffset");
  sub_21DF34E40(&v26, (const void **)v7, (*a2 >> 15));
  sub_21DF1AF28(__p, "unused");
  sub_21DF34E40(&v27, (const void **)__p, *a2 >> 23);
  sub_21DF50C18(a1, (uint64_t)v19, 0, (uint64_t)&v21, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_21DF51230(std::string *a1, const void **a2, unsigned __int16 a3)
{
  std::string v5;

  std::to_string(&v5, a3);
  sub_21DF35174(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_21DF51284(void **a1, std::string::value_type *a2, int a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *p_p;
  std::string __p;
  std::string v14;

  sub_21DF1AF28(&v14, (char *)&unk_21DFAD77A);
  for (; a3; --a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    sub_21DF205EC(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  if (a2[23] < 0)
  {
    v7 = a2;
    a2 = *(std::string::value_type **)a2;
    v6 = *((_QWORD *)v7 + 1);
    if (!v6)
      goto LABEL_19;
  }
  else
  {
    v6 = a2[23];
    if (!a2[23])
      goto LABEL_19;
  }
  do
  {
    v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        size = v14.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  sub_21DF2BBDC((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t sub_21DF513F8(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = a1[488];
  if (!result)
  {
    llvm::StructType::get();
    v3 = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 486), v3);
    return a1[488];
  }
  return result;
}

void sub_21DF5152C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3DB0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3DB0))
    {
      qword_2553B3D90 = 0;
      unk_2553B3D98 = 0;
      qword_2553B3DA0 = 0x1000000000;
      __cxa_atexit((void (*)(void *))sub_21DF51698, &qword_2553B3D90, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3DB0);
    }
  }
}

uint64_t *sub_21DF51594(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3D90 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3DA0) = qword_2553B3DA0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_2553B3D9C;
  for (i = (uint64_t *)(qword_2553B3D90
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3D90));
        !*i || *i == -8;
  return i;
}

uint64_t sub_21DF51698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF51710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v23;

  sub_21DF2E500(a1 + 3920, a2, *(llvm::Type **)a3);
  v15 = sub_21DF83580(a1, (uint64_t *)off_24E1EAF60, (llvm::Module *)a3, a4, a7, 1);
  *(_QWORD *)a1 = &off_24E1EACC8;
  *(_QWORD *)(a1 + 3920) = &unk_24E1EAEF8;
  *(_QWORD *)(a1 + 2432) = &unk_24E1EAE80;
  *(_QWORD *)(a1 + 3864) = a6;
  *(_QWORD *)(a1 + 3872) = a8;
  *(_QWORD *)(a1 + 3880) = a5;
  *(_QWORD *)(a1 + 3888) = 4;
  *(_QWORD *)(a1 + 3904) = 0;
  *(_QWORD *)(a1 + 3896) = 0;
  sub_21DF9DCF4(v15);
  v16 = (_QWORD *)(a3 + 168);
  v17 = *(char *)(a3 + 191);
  if (v17 < 0)
  {
    if (*(_QWORD *)(a3 + 176) != 22)
    {
LABEL_15:
      v23 = 0;
      goto LABEL_16;
    }
    v16 = (_QWORD *)*v16;
  }
  else if (v17 != 22)
  {
    goto LABEL_15;
  }
  v18 = (_QWORD *)*v16;
  v19 = v16[1];
  v20 = *(_QWORD *)((char *)v16 + 14);
  v23 = v18 == (_QWORD *)0x746E656D67617246 && v19 == 0x505F65746174535FLL && v20 == 0x6D6172676F72505FLL;
LABEL_16:
  *(_BYTE *)(a1 + 3912) = v23;
  return a1;
}

void sub_21DF51844(uint64_t isDeclaration, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Argument *v11;
  llvm::Argument *v12;
  llvm::Argument *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Instruction **v22;
  uint64_t v23;
  llvm::Instruction *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  llvm *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  llvm::Instruction *v38;
  uint64_t v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  llvm::CallBase *v45;
  _QWORD *v46;
  _QWORD **v48;
  _QWORD *v49;
  _QWORD **v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  llvm::CallBase *i;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  llvm::BasicBlock *v63;
  uint64_t v64;
  llvm *v65;
  llvm *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Instruction *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  _QWORD *v83[2];
  llvm *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD v90[18];

  v90[16] = *MEMORY[0x24BDAC8D0];
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v8 = isDeclaration + 24;
  v9 = *(_QWORD *)(isDeclaration + 32);
  if (v9 != isDeclaration + 24)
  {
    v75 = isDeclaration + 24;
    while (1)
    {
      v10 = v9 ? v9 - 56 : 0;
      isDeclaration = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v10);
      if ((isDeclaration & 1) == 0)
        break;
LABEL_125:
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v8)
      {
        v72 = v80;
        v73 = HIDWORD(v80);
        v74 = v81;
        goto LABEL_128;
      }
    }
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v83[0] = 0;
    v83[1] = 0;
    v82 = (uint64_t *)v83;
    if ((*(_BYTE *)(v10 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v10);
      v11 = *(llvm::Argument **)(v10 + 88);
      if ((*(_WORD *)(v10 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v10);
        v12 = *(llvm::Argument **)(v10 + 88);
LABEL_12:
        v13 = (llvm::Argument *)((char *)v12 + 40 * *(_QWORD *)(v10 + 96));
        while (v11 != v13)
        {
          v14 = *(_DWORD *)(*(_QWORD *)v11 + 8);
          if (v14 == 15)
          {
            if ((v14 & 0xFE) == 0x12)
              v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
            if (v14 <= 0xFF)
            {
              if (llvm::Argument::hasNoAliasAttr(v11))
                sub_21DF51E7C((uint64_t)v11, (uint64_t)&v84, &v82, (uint64_t)&v79);
            }
          }
          v11 = (llvm::Argument *)((char *)v11 + 40);
        }
        v88 = v90;
        v89 = 0x1000000000;
        v15 = *(_QWORD *)(v10 + 80);
        if (v15)
          v16 = v15 - 24;
        else
          v16 = 0;
        v17 = v16 + 40;
        v18 = *(_QWORD *)(v16 + 48);
        if (v18 != v17)
        {
          do
          {
            v19 = *(_QWORD *)(v18 + 8);
            v20 = v18 - 24;
            if (v18)
              v21 = v18 - 24;
            else
              v21 = 0;
            if (*(_BYTE *)(v21 + 16) == 59)
              sub_21DF19CD0((uint64_t)&v88, v20);
            v18 = v19;
          }
          while (v19 != v17);
          if ((_DWORD)v89)
          {
            v22 = (llvm::Instruction **)v88;
            v23 = 8 * v89;
            do
            {
              v24 = *v22;
              if (*((_QWORD *)*v22 + 1))
              {
                ++HIDWORD(v79);
                sub_21DF51E7C((uint64_t)v24, (uint64_t)&v84, &v82, (uint64_t)&v79);
              }
              else
              {
                llvm::Instruction::eraseFromParent(v24);
                ++v81;
              }
              ++v22;
              v23 -= 8;
            }
            while (v23);
          }
        }
        LODWORD(v89) = 0;
        if ((_DWORD)v85)
        {
          v25 = *(_QWORD *)(v10 + 80);
          v77 = v10 + 72;
          if (v25 != v10 + 72)
          {
            v76 = v9;
            v26 = 0;
            v78 = 0;
            while (1)
            {
              if (v25)
                v27 = v25 - 24;
              else
                v27 = 0;
              v28 = *(_QWORD *)(v27 + 48);
              if (v28 != v27 + 40)
              {
                do
                {
                  if (v28)
                    v29 = (unsigned __int8 *)(v28 - 24);
                  else
                    v29 = 0;
                  v30 = *(_QWORD *)(v28 + 8);
                  LODWORD(v79) = v79 + 1;
                  v31 = v29[16];
                  if (v28 && v31 == 61)
                  {
                    v32 = *((_QWORD *)v29 - 4);
                    v87 = 0;
                    v33 = v84;
                    v34 = v86;
                    v35 = sub_21DF52324((uint64_t)v84, v86, v32, &v87);
                    v36 = v87;
                    if (v35)
                      v37 = v87 == (_QWORD)v33 + 32 * v34;
                    else
                      v37 = 1;
                    if (!v37)
                    {
                      *(_QWORD *)(v87 + 8) = *((_QWORD *)v29 - 8);
                      *(_DWORD *)(v36 + 16) = v26;
                    }
                    goto LABEL_94;
                  }
                  if (v31 == 60)
                    v38 = (llvm::Instruction *)v29;
                  else
                    v38 = 0;
                  if (!v28 || v31 != 60)
                  {
                    if (v31 == 84)
                      v45 = (llvm::CallBase *)v29;
                    else
                      v45 = 0;
                    if (v28)
                    {
                      v46 = v83[0];
                      if (v31 == 84 && v83[0] != 0)
                      {
                        v48 = v83;
                        do
                        {
                          v49 = v46;
                          v50 = v48;
                          v51 = v46[4];
                          v52 = v46 + 1;
                          if (v51 >= (unint64_t)v45)
                          {
                            v52 = v49;
                            v48 = (_QWORD **)v49;
                          }
                          v46 = (_QWORD *)*v52;
                        }
                        while (v46);
                        if (v48 != v83)
                        {
                          if (v51 < (unint64_t)v45)
                            v49 = v50;
                          if ((unint64_t)v45 >= v49[4])
                          {
                            v53 = 0;
                            for (i = v45; ; i = (llvm::CallBase *)((char *)i + 32))
                            {
                              v55 = sub_21DF35A70(v45);
                              v56 = *((_DWORD *)v45 + 5) & 0x7FFFFFF;
                              if (v53 >= ((unint64_t)(v55
                                                                          - ((_QWORD)v45
                                                                           + 32 * -(int)v56)) >> 5))
                                break;
                              v57 = *((_QWORD *)i - 4 * v56);
                              v87 = 0;
                              v58 = v84;
                              v59 = v86;
                              v60 = sub_21DF52324((uint64_t)v84, v86, v57, &v87);
                              v61 = v87;
                              if (v60)
                                v62 = v87 == (_QWORD)v58 + 32 * v59;
                              else
                                v62 = 1;
                              if (!v62)
                              {
                                *(_QWORD *)(v87 + 8) = 0;
                                *(_DWORD *)(v61 + 16) = v26;
                              }
                              ++v53;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_94;
                  }
                  v39 = *((_QWORD *)v38 - 4);
                  v87 = 0;
                  v40 = v84;
                  v41 = v86;
                  v42 = sub_21DF52324((uint64_t)v84, v86, v39, &v87);
                  v43 = v87;
                  if (v42)
                    v44 = v87 == (_QWORD)v40 + 32 * v41;
                  else
                    v44 = 1;
                  if (!v44)
                  {
                    if (*(_DWORD *)(v87 + 16) == v26)
                    {
                      if (!*(_QWORD *)(v87 + 8))
                        goto LABEL_93;
                    }
                    else
                    {
                      if (!*(_BYTE *)(v87 + 21))
                      {
LABEL_93:
                        *(_QWORD *)(v87 + 8) = v38;
                        *(_DWORD *)(v43 + 16) = v26;
                        *(_BYTE *)(v43 + 20) = 0;
                        goto LABEL_94;
                      }
                      llvm::UndefValue::get();
                    }
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent(v38);
                    --*(_DWORD *)(v43 + 24);
                    LODWORD(v80) = v80 + 1;
                    v78 = 1;
                  }
LABEL_94:
                  v28 = v30;
                }
                while (v30 != v27 + 40);
              }
              v25 = *(_QWORD *)(v25 + 8);
              if (v25 == v77)
                break;
              if (v25)
                v63 = (llvm::BasicBlock *)(v25 - 24);
              else
                v63 = 0;
              if (llvm::BasicBlock::getSinglePredecessor(v63) != v27)
                ++v26;
            }
            v8 = v75;
            v9 = v76;
            if ((v78 & 1) != 0 && (_DWORD)v85)
            {
              if (v86)
              {
                v64 = 32 * v86;
                v65 = v84;
                while ((*(_QWORD *)v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v65 = (llvm *)((char *)v65 + 32);
                  v64 -= 32;
                  if (!v64)
                    goto LABEL_122;
                }
              }
              else
              {
                v65 = v84;
              }
              v66 = (llvm *)((char *)v84 + 32 * v86);
              if (v65 != v66)
              {
                v67 = HIDWORD(v80);
                v68 = v81;
LABEL_112:
                if (*((_BYTE *)v65 + 20) && !*((_DWORD *)v65 + 6))
                {
                  v69 = *(_QWORD *)v65;
                  v70 = *(_QWORD *)(*(_QWORD *)v65 + 8);
                  if (v70)
                  {
                    do
                    {
                      v71 = *(llvm::Instruction **)(v70 + 24);
                      v70 = *(_QWORD *)(v70 + 8);
                      llvm::Instruction::eraseFromParent(v71);
                      ++v67;
                    }
                    while (v70);
                    v69 = *(_QWORD *)v65;
                  }
                  v68 += sub_21DF523B8(v69);
                }
                while (1)
                {
                  v65 = (llvm *)((char *)v65 + 32);
                  if (v65 == v66)
                    break;
                  if ((*(_QWORD *)v65 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    if (v65 != v66)
                      goto LABEL_112;
                    break;
                  }
                }
                HIDWORD(v80) = v67;
                v81 = v68;
              }
            }
          }
        }
LABEL_122:
        if (v88 != v90)
          free(v88);
        sub_21DF2E824(v83[0]);
        isDeclaration = llvm::deallocate_buffer(v84, (void *)(32 * v86));
        goto LABEL_125;
      }
    }
    else
    {
      v11 = *(llvm::Argument **)(v10 + 88);
    }
    v12 = v11;
    goto LABEL_12;
  }
  v74 = 0;
  v73 = 0;
  v72 = 0;
LABEL_128:
  if (v73 + v72 + v74)
    sub_21DF28954(isDeclaration, "SimplifyGenericIR: %u alloca's, Removed %u loads, %u stores, %u other out of %u insts, total %4.2f %c insts\n", a3, a4, a5, a6, a7, a8, SBYTE4(v79));
  else
    sub_21DF28954(isDeclaration, "SimplifyGenericIR: %u alloca's, unable to simplify the IR\n", a3, a4, a5, a6, a7, a8, SBYTE4(v79));
}

uint64_t sub_21DF51E7C(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  llvm::BasicBlock *v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t **v20;
  char v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
    return result;
  v6 = result;
  v45 = **(_QWORD **)(*(_QWORD *)result + 16);
  if ((*(_DWORD *)(v45 + 8) & 0xFE) != 0x10)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a3 + 1;
    v21 = 1;
    do
    {
      v22 = *(_QWORD *)(v4 + 24);
      v23 = *(unsigned __int8 *)(v22 + 16);
      if (v22)
        v24 = v23 >= 0x1C;
      else
        v24 = 0;
      if (!v24)
        return result;
      if (v23 == 84)
      {
        v25 = *v20;
        v26 = a3 + 1;
        v27 = a3 + 1;
        if (*v20)
        {
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v25;
              v28 = v25[4];
              if (v22 >= v28)
                break;
              v25 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_47;
            }
            if (v28 >= v22)
              break;
            v25 = v27[1];
            if (!v25)
            {
              v26 = v27 + 1;
              goto LABEL_47;
            }
          }
        }
        else
        {
LABEL_47:
          v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v22;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          *v26 = v29;
          v30 = (uint64_t *)**a3;
          if (v30)
          {
            *a3 = v30;
            v31 = *v26;
          }
          else
          {
            v31 = v29;
          }
          result = (uint64_t)sub_21DF25404(a3[1], v31);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
        }
        v17 = 1;
      }
      else if (v23 == 61)
      {
        if (*(_QWORD *)(v22 - 32) != v6 || (*(_WORD *)(v22 + 18) & 1) != 0)
          return result;
      }
      else
      {
        if (v23 != 60 || *(_QWORD *)(v22 - 32) != v6 || (*(_WORD *)(v22 + 18) & 1) != 0)
          return result;
        ++v19;
      }
      v32 = v18 == 0;
      if (v18)
        v33 = v18;
      else
        v33 = *(_QWORD *)(v22 + 40);
      if (v18 == *(_QWORD *)(v22 + 40))
        v32 = 1;
      v21 &= v32;
      v4 = *(_QWORD *)(v4 + 8);
      v18 = v33;
    }
    while (v4);
    v34 = *(unsigned __int8 *)(v6 + 16);
    if (v34 == 62)
      v34 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 16);
    if (v34 == 59)
    {
      v35 = llvm::UndefValue::get();
      v36 = (v17 & 1) == 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v21 = 0;
    }
    *(_QWORD *)&v46[0] = 0;
    result = sub_21DF52324(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, v46);
    v37 = *(_QWORD *)&v46[0];
    if ((result & 1) != 0)
    {
LABEL_72:
      *(_QWORD *)(v37 + 8) = v35;
      *(_DWORD *)(v37 + 16) = 0;
      *(_BYTE *)(v37 + 20) = v36;
      *(_BYTE *)(v37 + 21) = v21;
      *(_DWORD *)(v37 + 24) = v19;
      return result;
    }
    v38 = *(_DWORD *)(a2 + 8);
    v39 = *(_DWORD *)(a2 + 16);
    if (4 * v38 + 4 >= 3 * v39)
    {
      v39 *= 2;
    }
    else if (v39 + ~v38 - *(_DWORD *)(a2 + 12) > v39 >> 3)
    {
LABEL_69:
      ++*(_DWORD *)(a2 + 8);
      if (*(_QWORD *)v37 != -4096)
        --*(_DWORD *)(a2 + 12);
      *(_DWORD *)(v37 + 24) = 0;
      *(_QWORD *)v37 = v6;
      *(_QWORD *)(v37 + 8) = 0;
      *(_QWORD *)(v37 + 14) = 0;
      goto LABEL_72;
    }
    sub_21DF52448(a2, v39);
    *(_QWORD *)&v46[0] = 0;
    result = sub_21DF52324(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, v46);
    v37 = *(_QWORD *)&v46[0];
    goto LABEL_69;
  }
  if (*(_DWORD *)(v45 + 8) == 17
    && (*(_DWORD *)(**(_QWORD **)(v45 + 16) + 8) & 0xFE) != 0x10
    && *(_QWORD *)(v45 + 32) <= 4uLL)
  {
    memset(v46, 0, sizeof(v46));
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 24);
      if (!v8)
        break;
      if (*(_BYTE *)(v8 + 16) != 62)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      result = llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v8);
      if (!(_DWORD)result || (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
        break;
      v9 = *(_QWORD *)(v8 - 64);
      result = v9 + 24;
      v10 = *(_DWORD *)(v9 + 32);
      if (v10 > 0x40)
      {
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if ((_DWORD)result != v10)
          return result;
      }
      else if (*(_QWORD *)result)
      {
        return result;
      }
      v11 = *(_QWORD *)(v8 - 32);
      v12 = (_QWORD *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u)
        v12 = (_QWORD *)*v12;
      v13 = (_QWORD *)*v12;
      if (v13 >= *(_DWORD *)(v45 + 32))
        break;
      if (!*((_QWORD *)v46 + v13))
      {
        *((_QWORD *)v46 + v13) = llvm::Instruction::clone((llvm::Instruction *)v8);
        --*(_DWORD *)(a4 + 16);
        v14 = *(unsigned __int8 *)(v6 + 16);
        if (v14 == 21)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 80);
          if (v15)
            v16 = (llvm::BasicBlock *)(v15 - 24);
          else
            v16 = 0;
          llvm::BasicBlock::getFirstInsertionPt(v16);
          llvm::Instruction::insertBefore();
        }
        else if (v14 == 59)
        {
          llvm::Instruction::insertAfter();
        }
      }
      ++*(_DWORD *)(a4 + 16);
      llvm::Value::replaceAllUsesWith();
      result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v8);
      if (!v4)
      {
        v40 = *(_QWORD *)(v45 + 32);
        if (v40)
        {
          v41 = 0;
          v42 = 1;
          do
          {
            result = *((_QWORD *)v46 + v41);
            if (result)
            {
              result = sub_21DF51E7C(result, a2, a3, a4);
              v40 = *(_QWORD *)(v45 + 32);
            }
            v41 = v42;
          }
          while (v40 > v42++);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_21DF52324(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_21DF523B8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      return 0;
    }
    else
    {
      LODWORD(v1) = 0;
      while (1)
      {
        v2 = *(_DWORD *)(a1 + 20);
        if ((v2 & 0x7FFFFFF) == 0)
          break;
        v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v2 & 0x7FFFFFF));
        v4 = *v3;
        if (*(unsigned __int8 *)(*v3 + 16) <= 0x1Bu)
          break;
        llvm::Instruction::eraseFromParent((llvm::Instruction *)a1);
        v1 = (v1 + 1);
        a1 = v4;
        if (*(_QWORD *)(v4 + 8))
          return v1;
      }
      llvm::Instruction::eraseFromParent((llvm::Instruction *)a1);
      return (v1 + 1);
    }
  }
  return v1;
}

_QWORD *sub_21DF52448(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x2207A6DD8](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    v12 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v13 = 32 * v3;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          sub_21DF52324(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          v16 = v20;
          *v20 = *(_QWORD *)v14;
          v17 = *(_OWORD *)((char *)v14 + 8);
          v16[3] = *((_QWORD *)v14 + 3);
          *(_OWORD *)(v16 + 1) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 32);
        v13 -= 32;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 32 * v18;
      do
      {
        *result = -4096;
        result += 4;
        v19 -= 32;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t *sub_21DF52594(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return sub_21DF5262C(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *sub_21DF5262C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_21DF25404(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_21DF52680(uint64_t *result, unint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;

  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu && a2 != 0)
  {
    v4 = result;
    v6 = result + 4;
    v5 = (_QWORD *)result[4];
    if (!v5)
      goto LABEL_18;
    v7 = result + 4;
    do
    {
      v8 = v5[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v5;
      else
        v10 = v5 + 1;
      if (v9)
        v7 = v5;
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 == v6 || v7[4] > a2)
    {
LABEL_18:
      v12 = (unint64_t *)result[1];
      v11 = result[2];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((uint64_t)v12 - *result) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v15 = v11 - *result;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)sub_21DF527B8(v17);
        else
          v18 = 0;
        v19 = (unint64_t *)(v17 + 8 * v14);
        v20 = v17 + 8 * v18;
        *v19 = a2;
        v13 = v19 + 1;
        v22 = (char *)*v4;
        v21 = (char *)v4[1];
        if (v21 != (char *)*v4)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v19 = v23;
          }
          while (v21 != v22);
          v21 = (char *)*v4;
        }
        *v4 = (uint64_t)v19;
        v4[1] = (uint64_t)v13;
        v4[2] = v20;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v12 = a2;
        v13 = v12 + 1;
      }
      v4[1] = (uint64_t)v13;
      return sub_21DF52594(v6 - 1, a2, a2);
    }
  }
  return result;
}

void *sub_21DF527B8(unint64_t a1)
{
  if (a1 >> 61)
    sub_21DF256A4();
  return operator new(8 * a1);
}

uint64_t sub_21DF527EC()
{
  return mach_timebase_info((mach_timebase_info_t)&dword_2553B3940);
}

unint64_t sub_21DF527F8(uint64_t a1)
{
  if (qword_2553B3948 != -1)
    dispatch_once(&qword_2553B3948, &unk_24E1EBA40);
  return (*(unsigned int *)algn_2553B3944 + (unint64_t)dword_2553B3940 * a1 - 1)
       / *(unsigned int *)algn_2553B3944;
}

uint64_t *sub_21DF52854(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EBCC0);
  sub_21DF2E650(v2 + 3168);
  return a1;
}

void sub_21DF52888(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EBCC0);
  sub_21DF2E650(v1 + 3168);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF528CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *String;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t Function;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  const char *v23;

  v2 = *(_QWORD *)(a1 + 160);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v4 = *(_QWORD *)(a1 + 160);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v3 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(v3 + 32));
      if (!v6 || !*(_QWORD *)(v3 + 8))
        goto LABEL_37;
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
      if (v8 == 34)
        break;
      if (v8 != 31)
      {
        if (v8 != 27)
          goto LABEL_37;
        v9 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
        v10 = v9 && String[2] == 0x675F6E695F6E6F69;
        if (!v10 || *(_QWORD *)((char *)String + 19) != 0x646972675F6E695FLL)
          goto LABEL_37;
LABEL_25:
        if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
          goto LABEL_70;
        goto LABEL_37;
      }
      if (*String == 0x657268742E726961
        && String[1] == 0x7865646E695F6461
        && String[2] == 0x657268745F6E695FLL
        && *(_QWORD *)((char *)String + 23) == 0x70756F7267646165)
      {
LABEL_70:
        *(_BYTE *)(a1 + 3160) = 1;
        goto LABEL_38;
      }
LABEL_37:
      v3 += 40;
      if (v3 == v5)
        goto LABEL_38;
    }
    if (memcmp(String, "air.thread_position_in_threadgroup", 0x22uLL))
      goto LABEL_37;
    goto LABEL_25;
  }
LABEL_38:
  v15 = sub_21DF5578C(a1);
  if ((_DWORD)v15)
  {
    LOBYTE(v16) = 1;
    if (*(_BYTE *)(a1 + 2728))
    {
LABEL_57:
      *(_QWORD *)(a1 + 2808) = -1;
      *(_DWORD *)(a1 + 2816) = -1;
LABEL_58:
      sub_21DF227A4(a1 + 2784, 0);
      *(_DWORD *)(a1 + 2808) = 0;
    }
    else
    {
      v17 = 0;
      v16 = 0;
      do
      {
        strlen(off_24E1EBD00[v17]);
        Function = llvm::Module::getFunction();
        if (Function)
        {
          if (!*(_QWORD *)(Function + 96))
            goto LABEL_56;
          v19 = *(_QWORD *)(Function + 8);
          if (v19)
          {
            while (1)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) - 32 * (*(_DWORD *)(*(_QWORD *)(v19 + 24) + 20) & 0x7FFFFFF));
              if (!v20 || *(_BYTE *)(v20 + 16) != 16)
                break;
              v22 = (_QWORD *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u)
                v22 = (_QWORD *)*v22;
              v16 |= 1 << *(_DWORD *)v22;
              v19 = *(_QWORD *)(v19 + 8);
              if (!v19)
                goto LABEL_52;
            }
LABEL_56:
            LOBYTE(v16) = 7;
            goto LABEL_57;
          }
        }
LABEL_52:
        if (v17 > 6)
          break;
        ++v17;
      }
      while (v16 != 7);
      *(_QWORD *)(a1 + 2808) = -1;
      *(_DWORD *)(a1 + 2816) = -1;
      if ((v16 & 1) != 0)
        goto LABEL_58;
    }
    if ((v16 & 6) != 0)
    {
      sub_21DF227A4(a1 + 2784, 3);
      if ((v16 & 2) != 0)
        *(_DWORD *)(a1 + 2812) = *(_DWORD *)(a1 + 2792) - 1;
      if ((v16 & 4) != 0)
        *(_DWORD *)(a1 + 2816) = *(_DWORD *)(a1 + 2792) - 1;
    }
    llvm::Module::getOrInsertNamedMetadata();
    if (MGGetBoolAnswer())
    {
      v23 = (const char *)sub_21DF21324("AGC_DISABLE_ATOMIC_OPTIMIZATIONS");
      if (v23)
      {
        if (*v23 != 48)
          atoi(v23);
      }
    }
    llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return v15;
}

uint64_t sub_21DF52CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 2792);
  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if ((_DWORD)v1)
  {
    v3 = (char *)operator new(8 * v1);
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 192);
    do
    {
      *(_QWORD *)&v3[v5] = v6;
      v5 += 8;
    }
    while (8 * v1 != v5);
  }
  else
  {
    v4 = 0;
  }
  v7 = llvm::FunctionType::get();
  if (v4)
    operator delete(v4);
  return v7;
}

uint64_t sub_21DF52D60()
{
  return 106;
}

uint64_t sub_21DF52D68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t String;
  uint64_t v13;
  uint64_t result;

  v2 = a1[20];
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    v6 = a1[20];
    v5 = *(unint64_t **)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    v2 = v6;
  }
  else
  {
    v5 = *(unint64_t **)(v2 + 88);
  }
  v7 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  while (v5 != (unint64_t *)v7)
  {
    if (v5[1])
    {
      v8 = *(_QWORD *)(v4 + 40);
      v9 = v8 ? v8 - 24 : 0;
      sub_21DF56A4C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v9, a1[5]);
      v10 = *((unsigned int *)v5 + 8);
      v11 = *(_QWORD *)(a1[9] + 8 * v10);
      if ((sub_21DF9D590(a1, v5, v10, v11) & 1) == 0)
      {
        String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, unint64_t))(*a1 + 344))(a1, String, v13, *v5);
        if (!result)
          return result;
        llvm::Value::replaceAllUsesWith();
      }
    }
    v5 += 5;
  }
  return 1;
}

uint64_t sub_21DF52E8C()
{
  llvm::Function *Function;

  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((_QWORD *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t sub_21DF52EE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  llvm::BasicBlock *v3;
  llvm::BasicBlock *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::Instruction *v9;
  _QWORD *v10;
  llvm::Instruction *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueHandleBase *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  llvm::Type ***v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t FirstInsertionPt;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  llvm::Type **v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t Function;
  uint64_t *v86;
  char *v87;
  size_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  llvm::Instruction *v99;
  int FastMathFlags;
  uint64_t v101;
  uint64_t i;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  llvm::Instruction *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Type *v110;
  uint64_t v111;
  int v112;
  char *v113;
  const char *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  _QWORD *v124;
  const char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  const char *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  _QWORD *v137;
  _OWORD *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  llvm::Instruction *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  const char **v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v174;
  int v175;
  _QWORD *v176;
  llvm::Function *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  llvm::ValueHandleBase *v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  int v191;
  uint64_t PrimitiveSizeInBits;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;
  __int128 v201;
  int v202;
  uint64_t v203;
  _QWORD v204[26];
  _QWORD *v205;
  _OWORD v206[2];
  __int128 v207;
  uint64_t v208;
  uint64_t v209;

  v1 = (uint64_t)a1;
  v209 = *MEMORY[0x24BDAC8D0];
  v174 = sub_21DF59910(a1);
  if (v174)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 80);
    if (v2)
      v3 = (llvm::BasicBlock *)(v2 - 24);
    else
      v3 = 0;
    if (*(_BYTE *)(v1 + 2728))
    {
      *(_QWORD *)&v189 = llvm::BasicBlock::getFirstInsertionPt(v3);
      sub_21DF5BCC0((uint64_t)v3, (uint64_t)&v189);
      v196 = "kernel_entry";
      v200 = 259;
      v4 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
      v196 = "early_out_block";
      v200 = 259;
      v5 = operator new();
      v6 = llvm::BasicBlock::BasicBlock();
      v7 = *(_QWORD *)(*(_QWORD *)v1 - 24) + v1;
      *(_QWORD *)(v7 + 56) = v6;
      *(_QWORD *)(v7 + 64) = v6 + 40;
      sub_21DF465B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)v1 - 24) + v1 + 8));
      v8 = (_QWORD *)*((_QWORD *)v3 + 5);
      if (v8 == (_QWORD *)((char *)v3 + 40))
      {
        v11 = 0;
      }
      else
      {
        v9 = (llvm::Instruction *)(v8 - 3);
        if (v8)
          v10 = v8 - 3;
        else
          v10 = 0;
        if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB)
          v11 = 0;
        else
          v11 = v9;
      }
      llvm::Instruction::eraseFromParent(v11);
      v36 = *(_QWORD *)(*(_QWORD *)v1 - 24) + v1;
      *(_QWORD *)(v36 + 56) = v3;
      *(_QWORD *)(v36 + 64) = (char *)v3 + 40;
      v37 = sub_21DF565B0((uint64_t *)v1, 0);
      v38 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v39 = *(_QWORD *)(v38 + 232);
      v200 = 257;
      v40 = sub_21DF1A79C(v38 + 8, 49, v37, v39, (uint64_t)&v196);
      v41 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v200 = 257;
      v42 = v41 + 8;
      v43 = llvm::ConstantInt::get();
      v44 = sub_21DF79584(v42, v40, v43, (uint64_t)&v196);
      v45 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v46 = (uint64_t *)(v45 + 8);
      v47 = (llvm::Type ***)sub_21DF5646C(v1, *(_QWORD *)(v45 + 184), 0);
      v200 = 257;
      v48 = sub_21DF19478(v46, 35, v47, v44, (uint64_t)&v196);
      sub_21DF38D70((uint64_t *)(*(_QWORD *)(*(_QWORD *)v1 - 24) + v1 + 8), v48, v5, (uint64_t)v4);
      v49 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
      sub_21DF19018(v49, (uint64_t)v4, FirstInsertionPt);
      memset(v206, 0, 24);
      v51 = sub_21DF565B0((uint64_t *)v1, 1);
      v52 = sub_21DF565B0((uint64_t *)v1, 2);
      v53 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v54 = 184;
      if (!*(_QWORD *)(*(_QWORD *)(v53 + 344) + 936))
        v54 = 192;
      v55 = *(_QWORD *)(v53 + v54);
      v56 = (uint64_t *)sub_21DF5646C(v1, v55, 0);
      if (*(_BYTE *)(v1 + 3160))
      {
        v57 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v200 = 257;
        v58 = v57 + 8;
        v59 = 1;
        v60 = llvm::ConstantInt::get();
        v61 = sub_21DF79584(v58, v40, v60, (uint64_t)&v196);
        v62 = *(_QWORD *)(*(_QWORD *)v1 - 24) + v1 + 8;
        v200 = 257;
        v63 = sub_21DF1A79C(v62, 39, v61, v55, (uint64_t)&v196);
        v64 = (uint64_t *)sub_21DF566FC((_QWORD *)v1, v56, v63, v51, (uint64_t *)&v206[1]);
        v65 = sub_21DF56330((_QWORD *)v1, v55, 0);
        v66 = sub_21DF566FC((_QWORD *)v1, v64, v65, v52, (uint64_t *)v206 + 1);
        v67 = 0;
        *(_QWORD *)&v206[0] = v66;
        do
        {
          v68 = v67;
          v69 = *(_QWORD *)(*(_QWORD *)v1 - 24);
          v70 = *((_QWORD *)v206 + v59);
          v71 = *(_QWORD *)(v1 + 192 + v69);
          v200 = 257;
          v72 = sub_21DF1A79C(v69 + v1 + 8, 39, v70, v71, (uint64_t)&v196);
          PrimitiveSizeInBits = 4;
          v193 = 0;
          v194 = v72;
          if (v72 != -8192 && v72 != -4096 && v72 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
          sub_21DF569CC((llvm::ValueHandleBase *)(v1 + 24 * v59 + 2824), &PrimitiveSizeInBits);
          if (v194 != -8192 && v194 != -4096 && v194)
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
          v67 = 1;
          v59 = 2;
        }
        while ((v68 & 1) == 0);
        v74 = *(_QWORD *)&v206[0];
      }
      else
      {
        v75 = sub_21DF56330((_QWORD *)v1, v55, 0);
        v74 = sub_21DF566FC((_QWORD *)v1, v56, v75, v52, 0);
        *(_QWORD *)&v206[0] = v74;
      }
      v76 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v77 = *(_QWORD *)(v76 + 192);
      v200 = 257;
      v78 = sub_21DF1A79C(v76 + 8, 39, v74, v77, (uint64_t)&v196);
      PrimitiveSizeInBits = 4;
      v193 = 0;
      v194 = v78;
      if (v78 != -8192 && v78 != -4096 && v78 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
      sub_21DF569CC((llvm::ValueHandleBase *)(v1 + 2824), &PrimitiveSizeInBits);
      if (v194 != -8192 && v194 != -4096 && v194)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
      v80 = sub_21DF5646C(v1, *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 192), 0);
      v196 = (void *)4;
      v197 = 0;
      v198 = v80;
      if (v80 != -8192 && v80 != -4096 && v80 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v196);
      sub_21DF569CC((llvm::ValueHandleBase *)(v1 + 2896), &v196);
      if (v198 != -8192 && v198 != -4096 && v198)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v196);
    }
    else
    {
      v12 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8;
      v13 = llvm::BasicBlock::getFirstInsertionPt(v3);
      sub_21DF19018(v12, (uint64_t)v3, v13);
      v14 = 0;
      v15 = (llvm::ValueHandleBase *)(v1 + 2824);
      v16 = 1;
      do
      {
        v17 = sub_21DF5646C(v1, *(_QWORD *)(v1 + 192 + *(_QWORD *)(*(_QWORD *)v1 - 24)), v14);
        sub_21DF4EB3C(v15, v17);
        v16 &= *((_QWORD *)v15 + 2) != 0;
        ++v14;
        v15 = (llvm::ValueHandleBase *)((char *)v15 + 24);
      }
      while (v14 != 3);
      if ((v16 & 1) != 0)
      {
        v18 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v19 = v18 + 8;
        v20 = *(_QWORD *)(v1 + 2888);
        v21 = sub_21DF56330((_QWORD *)v1, *(_QWORD *)(v18 + 192), 1u);
        v200 = 257;
        v22 = sub_21DF1A864(v19, v20, v21, (uint64_t)&v196);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2896), v22);
        v23 = *(_QWORD *)(*(_QWORD *)v1 - 24) + v1 + 8;
        v24 = *(_QWORD *)(v1 + 2912);
        v25 = *(_QWORD *)(v1 + 2864);
        v200 = 257;
        v26 = sub_21DF19FAC(v23, v24, v25, (uint64_t)&v196);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2896), v26);
        v27 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v28 = v27 + 8;
        v29 = *(_QWORD *)(v1 + 2912);
        v30 = sub_21DF56330((_QWORD *)v1, *(_QWORD *)(v27 + 192), 0);
        v200 = 257;
        v31 = sub_21DF1A864(v28, v29, v30, (uint64_t)&v196);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2896), v31);
        v32 = *(_QWORD *)(*(_QWORD *)v1 - 24) + v1 + 8;
        v33 = *(_QWORD *)(v1 + 2912);
        v34 = *(_QWORD *)(v1 + 2840);
        v200 = 257;
        v35 = sub_21DF19FAC(v32, v33, v34, (uint64_t)&v196);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2896), v35);
      }
    }
    v82 = *(llvm::Type ***)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 320);
    sub_21DF78A10((uint64_t)&v196, *v82);
    v205 = (_QWORD *)v1;
    v196 = &off_24E1F1118;
    v204[23] = v82;
    v83 = atomic_load((unsigned __int8 *)&qword_2553B3B58);
    if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3B58))
    {
      qword_2553B3958[0] = (uint64_t)"air.get_global_size.i32";
      unk_2553B3960 = sub_21DF55C9C;
      qword_2553B3968 = 0;
      dword_2553B3970 = 4;
      word_2553B3974 = 0;
      qword_2553B3978 = (uint64_t)"air.get_global_size.i16";
      unk_2553B3980 = sub_21DF55C9C;
      qword_2553B3988 = 0;
      dword_2553B3990 = 4;
      word_2553B3994 = 0;
      qword_2553B3998 = (uint64_t)"air.get_global_id.i32";
      unk_2553B39A0 = sub_21DF55D1C;
      qword_2553B39A8 = 0;
      dword_2553B39B0 = 4;
      word_2553B39B4 = 0;
      qword_2553B39B8 = (uint64_t)"air.get_global_id.i16";
      unk_2553B39C0 = sub_21DF55D1C;
      qword_2553B39C8 = 0;
      dword_2553B39D0 = 4;
      word_2553B39D4 = 0;
      qword_2553B39D8 = (uint64_t)"air.get_local_size.i32";
      unk_2553B39E0 = sub_21DF55DEC;
      qword_2553B39E8 = 0;
      dword_2553B39F0 = 4;
      word_2553B39F4 = 0;
      qword_2553B39F8 = (uint64_t)"air.get_local_size.i16";
      unk_2553B3A00 = sub_21DF55DEC;
      qword_2553B3A08 = 0;
      dword_2553B3A10 = 4;
      word_2553B3A14 = 0;
      qword_2553B3A18 = (uint64_t)"air.get_local_id.i32";
      unk_2553B3A20 = sub_21DF55DF0;
      qword_2553B3A28 = 0;
      dword_2553B3A30 = 4;
      word_2553B3A34 = 0;
      qword_2553B3A38 = (uint64_t)"air.get_local_id.i16";
      unk_2553B3A40 = sub_21DF55DF0;
      qword_2553B3A48 = 0;
      dword_2553B3A50 = 4;
      word_2553B3A54 = 0;
      qword_2553B3A58 = (uint64_t)"air.get_local_linear_id.i32";
      unk_2553B3A60 = sub_21DF55E40;
      qword_2553B3A68 = 0;
      dword_2553B3A70 = 2;
      word_2553B3A74 = 0;
      qword_2553B3A78 = (uint64_t)"air.get_local_linear_id.i16";
      unk_2553B3A80 = sub_21DF55E40;
      qword_2553B3A88 = 0;
      dword_2553B3A90 = 2;
      word_2553B3A94 = 0;
      qword_2553B3A98 = (uint64_t)"air.get_global_linear_id.i32";
      unk_2553B3AA0 = sub_21DF55E88;
      qword_2553B3AA8 = 0;
      dword_2553B3AB0 = 2;
      word_2553B3AB4 = 0;
      qword_2553B3AB8 = (uint64_t)"air.get_global_linear_id.i16";
      unk_2553B3AC0 = sub_21DF55E88;
      qword_2553B3AC8 = 0;
      dword_2553B3AD0 = 2;
      word_2553B3AD4 = 0;
      qword_2553B3AD8 = (uint64_t)"air.get_num_groups.i32";
      unk_2553B3AE0 = sub_21DF55FBC;
      qword_2553B3AE8 = 0;
      dword_2553B3AF0 = 4;
      word_2553B3AF4 = 0;
      qword_2553B3AF8 = (uint64_t)"air.get_num_groups.i16";
      unk_2553B3B00 = sub_21DF55FBC;
      qword_2553B3B08 = 0;
      dword_2553B3B10 = 4;
      word_2553B3B14 = 0;
      qword_2553B3B18 = (uint64_t)"air.get_group_id.i32";
      unk_2553B3B20 = sub_21DF56160;
      qword_2553B3B28 = 0;
      dword_2553B3B30 = 4;
      word_2553B3B34 = 0;
      qword_2553B3B38 = (uint64_t)"air.get_group_id.i16";
      unk_2553B3B40 = sub_21DF56160;
      qword_2553B3B48 = 0;
      dword_2553B3B50 = 4;
      word_2553B3B54 = 0;
      __cxa_guard_release(&qword_2553B3B58);
    }
    v84 = 0;
    v176 = (_QWORD *)v1;
    do
    {
      v178 = v84;
      if (qword_2553B3958[4 * v84])
        strlen((const char *)qword_2553B3958[4 * v84]);
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v86 = &qword_2553B3958[4 * v178];
        v180 = v86 + 1;
        v182 = v86 + 3;
        v177 = (llvm::Function *)Function;
        if (*((_DWORD *)v86 + 6) == 9)
        {
          v89 = *(_QWORD *)(Function + 8);
          if (v89)
          {
            do
            {
              v90 = (const char *)*v180;
              v91 = v180[1];
              v92 = (_QWORD *)((char *)v205 + (v91 >> 1));
              if ((v91 & 1) != 0)
                v90 = *(const char **)(*v92 + v90);
              v93 = *(_QWORD *)(v89 + 8);
              ((void (*)(_QWORD *, _QWORD))v90)(v92, *(_QWORD *)(v89 + 24));
              v89 = v93;
            }
            while (v93);
          }
        }
        else if (*((_DWORD *)v86 + 6) == 8)
        {
          v87 = (char *)*v180;
          if (*v180)
          {
            v88 = strlen((const char *)*v180);
            *(_QWORD *)&v206[0] = (char *)&v206[1] + 8;
            *(_OWORD *)((char *)v206 + 8) = xmmword_21DFA6140;
            sub_21DF2DA34(v206, v87, &v87[v88]);
          }
          else
          {
            *(_QWORD *)&v206[1] = 64;
            v206[0] = (unint64_t)&v206[1] + 8;
          }
          sub_21DF2DA34(v206, ".", "");
          v145 = *((_QWORD *)&v206[0] + 1);
          if (*(_QWORD *)&v206[1] < *((_QWORD *)&v206[0] + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v145 = *((_QWORD *)&v206[0] + 1);
          }
          *((_QWORD *)&v206[0] + 1) = v145;
          llvm::Module::getOrInsertFunction();
          llvm::Value::replaceAllUsesWith();
          if (*(_OWORD **)&v206[0] != (_OWORD *)((char *)&v206[1] + 8))
            free(*(void **)&v206[0]);
        }
        else
        {
          v94 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
          v95 = (*(_DWORD *)(v94 + 8) & 0xFE) != 0x12 || BYTE5(qword_2553B3958[4 * v178 + 3]) == 0;
          v96 = !v95;
          if (v95)
            v97 = 1;
          else
            v97 = *(unsigned int *)(v94 + 32);
          v183 = v97;
          v175 = v202;
          v98 = *(_QWORD *)(Function + 8);
          if (v98)
          {
            do
            {
              v99 = *(llvm::Instruction **)(v98 + 24);
              v179 = *(_QWORD *)(v98 + 8);
              FastMathFlags = sub_21DF195AC((uint64_t)v99);
              if (FastMathFlags)
                FastMathFlags = llvm::Instruction::getFastMathFlags(v99);
              v202 = FastMathFlags;
              sub_21DF3F430((uint64_t)&v197, (uint64_t)v99);
              v101 = llvm::UndefValue::get();
              if (v183)
              {
                for (i = 0; i != v183; ++i)
                {
                  v184 = v101;
                  v208 = 0;
                  v207 = 0u;
                  memset(v206, 0, sizeof(v206));
                  v103 = sub_21DF35A70(v99) - (_QWORD)v99 + 32 * (*((_DWORD *)v99 + 5) & 0x7FFFFFF);
                  if ((v103 & 0x1FFFFFFFE0) != 0)
                  {
                    v104 = (v103 >> 5);
                    v105 = (uint64_t *)v206;
                    v106 = v99;
                    do
                    {
                      v107 = (uint64_t *)((char *)v106 - 32 * (*((_DWORD *)v99 + 5) & 0x7FFFFFF));
                      v108 = *v107;
                      *v105 = *v107;
                      if (v96 && (*(_DWORD *)(*(_QWORD *)v108 + 8) & 0xFE) == 0x12)
                      {
                        v195 = 257;
                        v109 = llvm::ConstantInt::get();
                        *v105 = sub_21DF79584((uint64_t)&v197, v108, v109, (uint64_t)&PrimitiveSizeInBits);
                      }
                      ++v105;
                      v106 = (llvm::Instruction *)((char *)v106 + 32);
                      --v104;
                    }
                    while (v104);
                  }
                  if (!BYTE4(qword_2553B3958[4 * v178 + 3]))
                    goto LABEL_93;
                  v110 = **(llvm::Type ***)&v206[0];
                  if ((*(_DWORD *)(**(_QWORD **)&v206[0] + 8) & 0xFE) == 0x12)
                    v110 = (llvm::Type *)**((_QWORD **)v110 + 2);
                  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v110);
                  v193 = v111;
                  if (llvm::TypeSize::operator unsigned long long() != 32)
                  {
                    v118 = v204[3];
                    if ((*(_DWORD *)(**(_QWORD **)&v206[0] + 8) & 0xFE) == 0x12)
                      v118 = llvm::FixedVectorType::get();
                    if ((v103 & 0x1FFFFFFFE0) != 0)
                    {
                      v119 = (v103 >> 5);
                      v120 = v206;
                      do
                      {
                        v121 = *(_QWORD *)v120;
                        if (*(_BYTE *)(**(_QWORD **)v120 + 8) != 15)
                        {
                          v195 = 257;
                          *(_QWORD *)v120 = sub_21DF2F978((uint64_t)&v197, v121, v118, (uint64_t)&PrimitiveSizeInBits);
                        }
                        v120 = (_OWORD *)((char *)v120 + 8);
                        --v119;
                      }
                      while (v119);
                      v112 = 1;
                    }
                    else
                    {
                      v112 = 1;
                    }
                  }
                  else
                  {
LABEL_93:
                    v112 = 0;
                  }
                  v113 = (char *)v205 + *(_QWORD *)(*v205 - 24);
                  v189 = v201;
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)&v197);
                  v191 = v202;
                  sub_21DF18F98((uint64_t)&v189, (uint64_t)(v113 + 8));
                  if (v190)
                    llvm::MetadataTracking::untrack();
                  switch(*v182)
                  {
                    case 1:
                      v114 = (const char *)*v180;
                      v115 = v180[1];
                      v116 = (_QWORD *)((char *)v205 + (v115 >> 1));
                      if ((v115 & 1) != 0)
                        v114 = *(const char **)(*v116 + v114);
                      v117 = ((uint64_t (*)(_QWORD *))v114)(v116);
                      goto LABEL_131;
                    case 2:
                      v125 = (const char *)*v180;
                      v134 = v180[1];
                      v127 = (_QWORD *)((char *)v205 + (v134 >> 1));
                      if ((v134 & 1) != 0)
                        v125 = *(const char **)(*v127 + v125);
                      v128 = *(_QWORD *)v99;
                      goto LABEL_123;
                    case 3:
                      v125 = (const char *)*v180;
                      v126 = v180[1];
                      v127 = (_QWORD *)((char *)v205 + (v126 >> 1));
                      if ((v126 & 1) != 0)
                        v125 = *(const char **)(*v127 + v125);
                      v128 = *(_QWORD *)&v206[0];
LABEL_123:
                      v117 = ((uint64_t (*)(_QWORD *, uint64_t))v125)(v127, v128);
                      goto LABEL_131;
                    case 4:
                      v130 = (unsigned int *)(*(_QWORD *)&v206[0] + 24);
                      if (*(_DWORD *)(*(_QWORD *)&v206[0] + 32) >= 0x41u)
                        v130 = *(unsigned int **)v130;
                      v131 = (const char *)*v180;
                      v132 = v180[1];
                      v133 = (_QWORD *)((char *)v205 + (v132 >> 1));
                      if ((v132 & 1) != 0)
                        v131 = *(const char **)(*v133 + v131);
                      v117 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v131)(v133, *(_QWORD *)v99, *v130);
                      goto LABEL_131;
                    case 5:
                      v122 = (const char *)*v180;
                      v123 = v180[1];
                      v124 = (_QWORD *)((char *)v205 + (v123 >> 1));
                      if ((v123 & 1) != 0)
                        v122 = *(const char **)(*v124 + v122);
                      v117 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v122)(v124, *(_QWORD *)&v206[0], *((_QWORD *)&v206[0] + 1));
                      goto LABEL_131;
                    case 6:
                      v135 = (const char *)*v180;
                      v136 = v180[1];
                      v137 = (_QWORD *)((char *)v205 + (v136 >> 1));
                      if ((v136 & 1) != 0)
                        v135 = *(const char **)(*v137 + v135);
                      v139 = (void *)*((_QWORD *)&v206[0] + 1);
                      v138 = *(_OWORD **)&v206[0];
                      v140 = *(_QWORD *)&v206[1];
                      goto LABEL_130;
                    case 7:
                      v135 = (const char *)*v180;
                      v141 = v180[1];
                      v137 = (_QWORD *)((char *)v205 + (v141 >> 1));
                      if ((v141 & 1) != 0)
                        v135 = *(const char **)(*v137 + v135);
                      v138 = v206;
                      v139 = &unk_21DFAD77A;
                      v140 = 0;
LABEL_130:
                      v117 = ((uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))v135)(v137, v138, v139, v140);
LABEL_131:
                      v129 = v117;
                      break;
                    default:
                      v129 = 0;
                      break;
                  }
                  v142 = (char *)v205 + *(_QWORD *)(*v205 - 24);
                  v186 = *(_OWORD *)(v142 + 56);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v142 + 8));
                  v188 = *((_DWORD *)v142 + 26);
                  sub_21DF18F98((uint64_t)&v186, (uint64_t)&v197);
                  if (v187)
                    llvm::MetadataTracking::untrack();
                  if (v112)
                  {
                    v143 = *(_QWORD *)v99;
                    if (v96 && (*(_DWORD *)(v143 + 8) & 0xFE) == 0x12)
                      v143 = **(_QWORD **)(v143 + 16);
                    v195 = 257;
                    v129 = sub_21DF20674((uint64_t)&v197, v129, v143, (uint64_t)&PrimitiveSizeInBits);
                  }
                  if (v96)
                  {
                    v195 = 257;
                    v144 = llvm::ConstantInt::get();
                    v129 = sub_21DF7980C((uint64_t)&v197, v184, v129, v144, (uint64_t)&PrimitiveSizeInBits);
                  }
                  v101 = v129;
                }
              }
              if (*(_QWORD *)v99 != v204[1])
                llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v99);
              v98 = v179;
            }
            while (v179);
          }
          v202 = v175;
          v1 = (uint64_t)v176;
        }
        llvm::Function::eraseFromParent(v177);
      }
      v84 = v178 + 1;
    }
    while (v178 != 15);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v204);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v203);
    if (v197 != &v199)
      free(v197);
    v146 = llvm::Module::getFunction();
    if (v146)
    {
      v147 = v146;
      if (!*(_QWORD *)(v1 + 2960))
      {
        v196 = "agc.barrier_target_count";
        v200 = 259;
        v148 = sub_21DF55BB0((_QWORD *)v1);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2944), v148);
      }
      if (!*(_QWORD *)(v1 + 2984))
      {
        v149 = llvm::User::operator new((llvm::User *)0x58);
        v196 = "agc.barrier_counter";
        v200 = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        sub_21DF4EB3C((llvm::ValueHandleBase *)(v1 + 2968), v149);
      }
      v150 = *(_QWORD *)(v147 + 8);
      if (v150)
      {
        v151 = 0;
        v152 = v1 + 192;
        v185 = v1 + 344;
        v153 = v1 + 8;
        v181 = (llvm::ValueHandleBase *)(v1 + 2992);
        do
        {
          v154 = *(llvm::Instruction **)(v150 + 24);
          v155 = *((_QWORD *)v154 - 4 * (*((_DWORD *)v154 + 5) & 0x7FFFFFF));
          v156 = (_QWORD *)(v155 + 24);
          if (*(_DWORD *)(v155 + 32) >= 0x41u)
            v156 = (_QWORD *)*v156;
          v150 = *(_QWORD *)(v150 + 8);
          v157 = (_QWORD *)*v156;
          v196 = &v198;
          v197 = (void *)0x400000000;
          v158 = llvm::PointerType::get();
          sub_21DF19CD0((uint64_t)&v196, v158);
          v159 = llvm::PointerType::get();
          sub_21DF19CD0((uint64_t)&v196, v159);
          sub_21DF19CD0((uint64_t)&v196, *(_QWORD *)(v152 + *(_QWORD *)(*v176 - 24)));
          v160 = *(_QWORD *)((char *)v176 + *(_QWORD *)(*v176 - 24) + 344);
          if (*(_QWORD *)(v160 + 880))
            v161 = (v157 & 1) == 0;
          else
            v161 = 1;
          if (v161)
          {
            v163 = (const char **)(v160 + 872);
          }
          else
          {
            v162 = llvm::PointerType::get();
            sub_21DF19CD0((uint64_t)&v196, v162);
            v163 = (const char **)(*(_QWORD *)(v185 + *(_QWORD *)(*v176 - 24)) + 880);
          }
          v164 = *v163;
          llvm::FunctionType::get();
          if (v164)
            strlen(v164);
          llvm::Module::getOrInsertFunction();
          v166 = v165;
          if (v196 != &v198)
            free(v196);
          sub_21DF3F430((uint64_t)v176 + *(_QWORD *)(*v176 - 24) + 8, (uint64_t)v154);
          v196 = &v198;
          v197 = (void *)0x400000000;
          sub_21DF19CD0((uint64_t)&v196, v176[373]);
          sub_21DF19CD0((uint64_t)&v196, v176[370]);
          v167 = llvm::ConstantInt::get();
          sub_21DF19CD0((uint64_t)&v196, v167);
          v168 = *(_QWORD *)(*v176 - 24);
          v169 = *(_QWORD *)(v185 + v168);
          if (!*(_BYTE *)(v169 + 1636))
            ++v151;
          if (*(_QWORD *)(v169 + 880) && (v157 & 1) != 0)
          {
            v170 = v176[376];
            if (!v170)
            {
              *(_QWORD *)&v206[0] = "agc.mem_fence_addr";
              LOWORD(v207) = 259;
              llvm::PointerType::get();
              v171 = sub_21DF55BB0(v176);
              sub_21DF4EB3C(v181, v171);
              v168 = *(_QWORD *)(*v176 - 24);
              v170 = v176[376];
            }
            LOWORD(v207) = 257;
            v172 = sub_21DF19394((uint64_t *)(v153 + v168), **(llvm::Type ***)(*(_QWORD *)v170 + 16), v170, 0, (uint64_t)v206);
            sub_21DF19CD0((uint64_t)&v196, v172);
            v168 = *(_QWORD *)(*v176 - 24);
          }
          LOWORD(v207) = 257;
          sub_21DF191A4(v153 + v168, *(_QWORD *)(v166 + 24), v166, (uint64_t)v196, v197, (uint64_t)v206);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v154);
          if (v196 != &v198)
            free(v196);
        }
        while (v150);
      }
    }
  }
  return v174;
}

uint64_t sub_21DF54328(_QWORD *a1)
{
  sub_21DF9DDFC(a1);
  return 1;
}

uint64_t sub_21DF54340(_QWORD *a1)
{
  return *(unsigned int *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 812);
}

uint64_t sub_21DF54358()
{
  return 1;
}

uint64_t sub_21DF54360()
{
  return 0;
}

uint64_t sub_21DF54368()
{
  return 0;
}

uint64_t sub_21DF54370(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 2720) + 12) >> 3) & 1;
}

const char *sub_21DF54380()
{
  return "compute";
}

uint64_t sub_21DF5438C()
{
  return 2;
}

uint64_t sub_21DF54394(uint64_t a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  *a2 = *(_DWORD *)(v4[43] + 840);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 64))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[43] + 840);
  }
  v6 = *(_DWORD *)(a1 + 2732);
  if (v6)
  {
    v7 = 0;
    v8 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v9 = *(_QWORD *)(v8 + 400);
    v10 = *(_DWORD *)(*(_QWORD *)(v8 + 344) + 840);
    v11 = *(_DWORD *)(v9 + 416);
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v9 + 408);
    do
    {
      v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6)
        v12 = v14 - 1;
      else
        v7 = v14 + 1;
    }
    while (v7 <= v12);
    v15 = v10 / v11 * v12;
    if (v15 >= *a2)
      v15 = *a2;
    *a2 = v15;
    return 1;
  }
  return result;
}

void sub_21DF5446C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t i;
  char *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t j;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  uint64_t v36;
  std::string v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  std::string v42;
  void *v43[2];
  char v44;
  void *v45;
  std::string::size_type v46;
  unsigned __int8 v47;
  __int128 __dst;
  uint64_t v49;
  std::string __p;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 2720);
  sub_21DF1AF28(v35, "AGCComputeStateAGP");
  sub_21DF1AF28(v33, "mutableBuffers");
  sub_21DF2E3C8((uint64_t)&v37);
  v4 = sub_21DF28BA4(&v37.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v37.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v4
                                                                                               + *(_QWORD *)(v37.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_21DF35174(&v51, (const void **)v33, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v37.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + *(_QWORD *)(v37.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37.__r_.__value_.__r.__words[2] = v5;
  v38 = MEMORY[0x24BEDB848] + 16;
  if (v40 < 0)
    operator delete(v39);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2207A790C](&v41);
  sub_21DF1AF28(v31, "maxTotalThreadsPerThreadgroup");
  sub_21DF34E40(&v52, (const void **)v31, *(_DWORD *)(v3 + 8));
  sub_21DF1AF28(v29, "wgSizeMultipleOfSIMDWidth");
  sub_21DF34E40(&v53, (const void **)v29, *(_DWORD *)(v3 + 12) & 1);
  sub_21DF1AF28(v27, "genCompilerStatistics");
  sub_21DF34E40(&v54, (const void **)v27, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  sub_21DF1AF28(v25, "genTelemetryStatistics");
  sub_21DF34E40(&v55, (const void **)v25, (*(_DWORD *)(v3 + 12) >> 2) & 1);
  sub_21DF1AF28(v23, "disableTextureRWBoundsCheck");
  sub_21DF34E40(&v56, (const void **)v23, (*(_DWORD *)(v3 + 12) >> 4) & 1);
  sub_21DF1AF28(v21, "debugInstrumentationEnabled");
  sub_21DF34E40(&v57, (const void **)v21, (*(_DWORD *)(v3 + 12) >> 5) & 1);
  sub_21DF1AF28(v19, "unused");
  sub_21DF34E40(&v58, (const void **)v19, *(_DWORD *)(v3 + 12) >> 6);
  if (SHIBYTE(v36) < 0)
  {
    sub_21DF205EC(&__dst, v35[0], (unint64_t)v35[1]);
  }
  else
  {
    __dst = *(_OWORD *)v35;
    v49 = v36;
  }
  sub_21DF35908((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_21DF1AF28(v43, "{");
  sub_21DF35908(&v45, (std::string::value_type *)v43, 0);
  if ((v47 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&v45;
  else
    v6 = (const std::string::value_type *)v45;
  if ((v47 & 0x80u) == 0)
    v7 = v47;
  else
    v7 = v46;
  v8 = std::string::append(&__p, v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v47 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49) < 0)
    operator delete((void *)__dst);
  for (i = 0; i != 24; i += 3)
  {
    v11 = (char *)&v51 + i * 8;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[i + 2]) < 0)
      sub_21DF205EC(&__p, *(void **)v11, *((_QWORD *)v11 + 1));
    else
      __p = *(std::string *)v11;
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_21DF205EC(&v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v42 = __p;
    sub_21DF35908(&v45, (std::string::value_type *)&v42, 1);
    if ((v47 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&v45;
    else
      v13 = (const std::string::value_type *)v45;
    if ((v47 & 0x80u) == 0)
      v14 = v47;
    else
      v14 = v46;
    std::string::append(&v37, v13, v14);
    if ((char)v47 < 0)
      operator delete(v45);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
        continue;
    }
    else if ((v12 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_21DF1AF28(&v45, "}");
  sub_21DF35908((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v45, 0);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v37;
  else
    v15 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    size = v37.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, size);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  for (j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v58.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v58.__r_.__value_.__l.__data_ + j * 8));
  }
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
}

uint64_t sub_21DF549E4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD v52[4];
  __int16 v53;

  if (!a1[344])
  {
    v8 = llvm::PointerType::get();
    v9 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 792);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 288))(v9);
    v52[0] = "agc.stagein_buffer_pointer.";
    v52[2] = v10;
    v53 = 2051;
    v11 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 792);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 288))(v11);
    v13 = sub_21DF66EC0(a1, v8, (uint64_t)v52, v12, 24);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 342), v13);
  }
  llvm::FixedVectorType::get();
  v14 = llvm::UndefValue::get();
  v15 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v16 = a1[344];
  v53 = 257;
  v17 = (uint64_t *)sub_21DF19394(v15 + 1, **(llvm::Type ***)(*(_QWORD *)v16 + 16), v16, 0, (uint64_t)v52);
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(_QWORD *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (a3 != 24)
      return result;
    if (*a2 != 0x676174732E726961 || a2[1] != 0x6972675F6E695F65 || a2[2] != 0x6E696769726F5F64)
      return 0;
  }
  v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v24 = (uint64_t *)llvm::ConstantInt::get();
  v53 = 257;
  v25 = sub_21DF1A924(v23, v17, v24, (uint64_t)v52);
  v26 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v53 = 257;
  v27 = sub_21DF19394(v26 + 1, **(llvm::Type ***)(*(_QWORD *)v25 + 16), v25, 0, (uint64_t)v52);
  v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v53 = 257;
  v29 = (uint64_t)(v28 + 8);
  v30 = llvm::ConstantInt::get();
  v31 = sub_21DF7980C(v29, v14, v27, v30, (uint64_t)v52);
  v32 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v33 = (uint64_t *)llvm::ConstantInt::get();
  v53 = 257;
  v34 = sub_21DF1A924(v32, v17, v33, (uint64_t)v52);
  v35 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v53 = 257;
  v36 = sub_21DF19394(v35 + 1, **(llvm::Type ***)(*(_QWORD *)v34 + 16), v34, 0, (uint64_t)v52);
  v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v53 = 257;
  v38 = (uint64_t)(v37 + 8);
  v39 = llvm::ConstantInt::get();
  v40 = sub_21DF7980C(v38, v31, v36, v39, (uint64_t)v52);
  v41 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v42 = (uint64_t *)llvm::ConstantInt::get();
  v53 = 257;
  v43 = sub_21DF1A924(v41, v17, v42, (uint64_t)v52);
  v44 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v53 = 257;
  v45 = sub_21DF19394(v44 + 1, **(llvm::Type ***)(*(_QWORD *)v43 + 16), v43, 0, (uint64_t)v52);
  v46 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v53 = 257;
  v47 = (uint64_t)(v46 + 8);
  v48 = llvm::ConstantInt::get();
  v49 = sub_21DF7980C(v47, v40, v45, v48, (uint64_t)v52);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v50 = *(_DWORD *)(a4 + 32);
  else
    v50 = 1;
  v51 = sub_21DF79408((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v49, v50, 1);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    a4 = **(_QWORD **)(a4 + 16);
  return sub_21DF79090((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24)), v51, a4);
}

uint64_t sub_21DF54FA4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  std::string *v29;
  unsigned int *v30;
  int *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  int v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  __int128 v59;
  uint64_t v60;

  if (!sub_21DF2EDB4(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(int **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 128)))return 0;
  v52 = sub_21DF77960(a1);
  if (*(_DWORD *)(a1 + 2792))
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v7 = (uint64_t *)(v6 + 704);
      *(_BYTE *)(v6 + 774) = 1;
      v8 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
      sub_21DF2E08C((uint64_t *)(v6 + 704), 4, v2);
      sub_21DF2FF00(v7, 6, *(char *)(*(_QWORD *)(a1 + 2784) + 4 * v2));
      v9 = sub_21DF2DC24((uint64_t)v7, v8);
      v10 = v9;
      if ((unint64_t)v4 >= v5)
      {
        v12 = (v4 - v3) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        if ((uint64_t)(v5 - (_QWORD)v3) >> 1 > v13)
          v13 = (uint64_t)(v5 - (_QWORD)v3) >> 1;
        if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)sub_21DF2EACC(v14);
        else
          v15 = 0;
        v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)v16 = v10;
        v11 = v16 + 4;
        while (v4 != v3)
        {
          v17 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        v5 = v14 + 4 * v15;
        if (v3)
          operator delete(v3);
        v3 = v16;
      }
      else
      {
        *(_DWORD *)v4 = v9;
        v11 = v4 + 4;
      }
      ++v2;
      v4 = v11;
    }
    while (v2 < *(unsigned int *)(a1 + 2792));
  }
  else
  {
    v3 = 0;
    v11 = 0;
  }
  if (v11 == v3)
    v19 = (char *)&unk_2553B3CDA;
  else
    v19 = v3;
  v20 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v19, (v11 - v3) >> 2);
  v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v22 = (uint64_t *)(v21 + 704);
  *(_BYTE *)(v21 + 774) = 1;
  v23 = *(_DWORD *)(v21 + 736) - *(_DWORD *)(v21 + 752) + *(_DWORD *)(v21 + 744);
  sub_21DF34D10((uint64_t *)(v21 + 704), v20);
  sub_21DF2FF00(v22, 6, *(unsigned __int8 *)(a1 + 8));
  sub_21DF2FF00(v22, 8, *(unsigned __int8 *)(a1 + 9));
  sub_21DF2FF00(v22, 10, *(unsigned __int8 *)(a1 + 2728));
  sub_21DF2E08C(v22, 12, *(_DWORD *)(a1 + 2732));
  LODWORD(v22) = sub_21DF2DC24((uint64_t)v22, v23);
  v24 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v25 = (uint64_t *)(v24 + 704);
  *(_BYTE *)(v24 + 774) = 1;
  v26 = *(_DWORD *)(v24 + 736) - *(_DWORD *)(v24 + 752) + *(_DWORD *)(v24 + 744);
  sub_21DF34D10((uint64_t *)(v24 + 704), v52);
  sub_21DF42F40(v25, (int)v22);
  v27 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704;
  v28 = sub_21DF2DC24((uint64_t)v25, v26);
  sub_21DF2ED04(v27, v28);
  v29 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v30 = (unsigned int *)(v29[23].__r_.__value_.__l.__size_
                       + *(unsigned __int16 *)(v29[23].__r_.__value_.__l.__size_
                                             - *(int *)v29[23].__r_.__value_.__l.__size_
                                             + 4));
  v31 = (int *)((char *)v30 + *v30);
  v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*(unsigned int *)((char *)v31 + v32[4] + *(unsigned int *)((char *)v31 + v32[4])) <= 0x20)
  {
    if (*v32 < 0x3Du
      || (v33 = v32[30]) == 0
      || (v34 = *(int *)((char *)v31 + v33), v35 = *(_DWORD *)(v29[14].__r_.__value_.__l.__size_ + 820), v34 <= v35))
    {
      v18 = 1;
      if (!v3)
        return v18;
      goto LABEL_59;
    }
    v36 = v29 + 17;
    std::to_string(&v54, v34);
    v37 = std::string::insert(&v54, 0, "Threadgroup memory size (");
    v38 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v55, ") ");
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v56, "exceeds the maximum threadgroup memory allowed (");
    v42 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v35);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v53;
    else
      v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    v45 = std::string::append(&v57, (const std::string::value_type *)v43, size);
    v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v58, ")");
    v48 = v47->__r_.__value_.__r.__words[2];
    v59 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v60 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (v60 >= 0)
      v49 = (const std::string::value_type *)&v59;
    else
      v49 = (const std::string::value_type *)v59;
    if (v60 >= 0)
      v50 = HIBYTE(v60);
    else
      v50 = *((_QWORD *)&v59 + 1);
    std::string::append(v36, v49, v50);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)v59);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  v18 = 0;
  if (v3)
LABEL_59:
    operator delete(v3);
  return v18;
}

uint64_t sub_21DF5547C(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32)), (uint64_t *)&off_24E1EBCC0);
  return sub_21DF2E650(v1 + 3168);
}

void sub_21DF554A8(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EBCC0);
  sub_21DF2E650((uint64_t)(v1 + 396));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF554F8()
{
  return "compute";
}

uint64_t sub_21DF55504()
{
  return 2;
}

void sub_21DF5550C(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF5446C((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

uint64_t sub_21DF5551C(_QWORD *a1)
{
  return sub_21DF54FA4((uint64_t)a1 + *(_QWORD *)(*a1 - 96));
}

uint64_t sub_21DF5552C(_QWORD *a1, unsigned int *a2)
{
  return sub_21DF54394((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

uint64_t sub_21DF5553C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t i;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t k;
  uint64_t v28;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[7];
  v5 = a1[394];
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 392));
  v7 = a1[391];
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 389));
  v9 = a1[388];
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 386));
  for (i = 0; i != -9; i -= 3)
  {
    v12 = a1[i + 385];
    if (v12 != -8192 && v12 != -4096 && v12 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[i + 383]);
  }
  v14 = a1[376];
  if (v14 != -8192 && v14 != -4096 && v14 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 374));
  v16 = a1[373];
  if (v16 != -8192 && v16 != -4096 && v16)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 371));
  v17 = a1[370];
  if (v17 != -8192 && v17 != -4096 && v17)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 368));
  v18 = a1[367];
  if (v18 != -8192 && v18 != -4096 && v18)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 365));
  v19 = a1[364];
  if (v19 != -8192 && v19 != -4096 && v19)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 362));
  for (j = 0; j != -9; j -= 3)
  {
    v21 = a1[j + 361];
    if (v21 != -8192 && v21 != -4096 && v21 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[j + 359]);
  }
  v23 = (uint64_t *)a1[348];
  if (v23 != a1 + 350)
    free(v23);
  v24 = a1[347];
  if (v24 != -8192 && v24 != -4096 && v24)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 345));
  v25 = a2[1];
  *a1 = v25;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v25 - 24)) = a2[6];
  v26 = a1[344];
  if (v26 != -8192 && v26 != -4096 && v26)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 342));
  for (k = 0; k != -36; k -= 3)
  {
    v28 = a1[k + 339];
    if (v28 != -8192 && v28 != -4096 && v28 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[k + 337]);
  }
  return sub_21DF73870((uint64_t)a1, a2 + 3);
}

uint64_t sub_21DF5578C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  std::string *v4;
  std::string *v5;
  BOOL v6;
  unsigned int v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  unsigned int v21;
  std::string *p_p;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  std::string __p;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 2732);
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 2720) + 8);
  v4 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v5 = v4 + 17;
  if (v3)
    v6 = v2 == v3;
  else
    v6 = 1;
  if (!v6 && v2 != 0)
  {
    std::to_string(&v38, v2);
    v15 = std::string::insert(&v38, 0, ": Kernel specified max total threads per threadgroup (");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v39, ") ");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v40, "must match compute pipeline specified max total threads per threadgroup (");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = v3;
LABEL_13:
    std::to_string(&__p, v21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v41, (const std::string::value_type *)p_p, size);
    v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v42, ")");
    v27 = v26->__r_.__value_.__r.__words[2];
    v43 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v44 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0)
      v28 = (const std::string::value_type *)&v43;
    else
      v28 = (const std::string::value_type *)v43;
    if (v44 >= 0)
      v29 = HIBYTE(v44);
    else
      v29 = *((_QWORD *)&v43 + 1);
    std::string::append(v5, v28, v29);
    if (SHIBYTE(v44) < 0)
      operator delete((void *)v43);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    return 0;
  }
  v8 = *(_DWORD *)(v4[14].__r_.__value_.__l.__size_ + 824);
  if (!v2)
    v2 = *(_DWORD *)(*(_QWORD *)(a1 + 2720) + 8);
  if (v2 > v8)
  {
    std::to_string(&v38, v2);
    v9 = std::string::insert(&v38, 0, ": Specified total max threads per threadgroup (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v39, ") ");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v40, "exceeds the maximum total threads per threadgroup supported (");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v21 = v8;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 2732) = v2;
  sub_21DF58CF4(a1);
  llvm::Module::getOrInsertNamedMetadata();
  *(_QWORD *)&v43 = llvm::MDString::get();
  llvm::ConstantInt::get();
  *((_QWORD *)&v43 + 1) = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (*(_DWORD *)(a1 + 32) >= 2u)
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 312), *(llvm::Module **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320));
  v31 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320);
  v32 = v31 + 8;
  v33 = *(_QWORD *)(v31 + 16);
  if (v33 != v31 + 8)
  {
    do
    {
      if (v33)
        v34 = (uint64_t *)(v33 - 56);
      else
        v34 = 0;
      v35 = *v34;
      if (*v34)
      {
        v36 = *(_DWORD *)(v35 + 8);
        if ((v36 & 0xFE) == 0x12)
          v36 = *(_DWORD *)(**(_QWORD **)(v35 + 16) + 8);
        if ((v36 & 0xFFFFFF00) == 0x300)
          llvm::GlobalObject::setSection();
      }
      v33 = *(_QWORD *)(v33 + 8);
    }
    while (v33 != v32);
  }
  return 1;
}

uint64_t sub_21DF55BB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = llvm::User::operator new((llvm::User *)0x58);
  v3 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  return v2;
}

uint64_t sub_21DF55C9C(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  v5 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v6 = sub_21DF56330(a1, a2, a3);
  v7 = sub_21DF55FBC(a1, a2);
  v10 = 257;
  return sub_21DF1A864(v5, v6, v7, (uint64_t)v9);
}

uint64_t sub_21DF55D1C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v7 = sub_21DF56330(a1, a2, a3);
  v8 = sub_21DF56160(a1, a2, a3);
  v15 = 257;
  v9 = sub_21DF1A864(v6, v7, v8, (uint64_t)v14);
  v10 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v11 = a1[3 * a3 + 355];
  v15 = 257;
  v12 = sub_21DF1A79C(v10, 38, v11, a2, (uint64_t)v14);
  v15 = 257;
  return sub_21DF19FAC(v10, v9, v12, (uint64_t)v14);
}

uint64_t sub_21DF55DF0(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v4 = a1[3 * a3 + 355];
  v7 = 257;
  return sub_21DF1A79C(v3, 38, v4, a2, (uint64_t)v6);
}

uint64_t sub_21DF55E40(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v2 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v3 = a1[364];
  v6 = 257;
  return sub_21DF1A79C(v2, 38, v3, a2, (uint64_t)v5);
}

uint64_t sub_21DF55E88(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v5 = sub_21DF55D1C(a1, a2, 2u);
  v6 = sub_21DF55C9C(a1, a2, 1u);
  v18 = 257;
  v7 = sub_21DF1A864(v4, v5, v6, (uint64_t)v17);
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v9 = sub_21DF55D1C(a1, a2, 1u);
  v18 = 257;
  v10 = sub_21DF19FAC(v8, v7, v9, (uint64_t)v17);
  v11 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v12 = sub_21DF55C9C(a1, a2, 0);
  v18 = 257;
  v13 = sub_21DF1A864(v11, v10, v12, (uint64_t)v17);
  v14 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v15 = sub_21DF55D1C(a1, a2, 0);
  v18 = 257;
  return sub_21DF19FAC(v14, v13, v15, (uint64_t)v17);
}

uint64_t sub_21DF55FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _WORD v19[20];
  _QWORD v20[4];
  __int16 v21;

  v4 = a1[347];
  if (!v4)
  {
    v5 = llvm::PointerType::get();
    v6 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 792);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 232))(v6);
    v20[0] = "agc.indirect_wg_count_buffer_pointer.";
    v20[2] = v7;
    v21 = 2051;
    v8 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 792);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 232))(v8);
    v10 = sub_21DF66EC0(a1, v5, (uint64_t)v20, v9, 12);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 345), v10);
    v4 = a1[347];
  }
  v11 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v21 = 257;
  v12 = (uint64_t *)sub_21DF19394(v11 + 1, **(llvm::Type ***)(*(_QWORD *)v4 + 16), v4, 0, (uint64_t)v20);
  v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v14 = (uint64_t *)llvm::ConstantInt::get();
  v21 = 257;
  v15 = sub_21DF1A924(v13, v12, v14, (uint64_t)v20);
  v16 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v21 = 257;
  v17 = sub_21DF19394(v16, **(llvm::Type ***)(*(_QWORD *)v15 + 16), v15, 0, (uint64_t)v20);
  v19[16] = 257;
  return sub_21DF1A79C((uint64_t)v16, 38, v17, a2, (uint64_t)v19);
}

uint64_t sub_21DF56160(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  __int16 v11;
  llvm::ValueHandleBase *v12;
  uint64_t *v13;
  uint64_t v14;
  void *__p;
  char v17;
  __int16 v18;
  _QWORD v19[2];
  char *v20;
  __int16 v21;

  v6 = &a1[3 * a3];
  v7 = v6[379];
  if (!v7)
  {
    v8 = llvm::User::operator new((llvm::User *)0x58);
    v9 = off_24E1EBD40[a3];
    if (*v9)
    {
      v19[0] = "agx.group_id_";
      v20 = v9;
      v10 = 771;
    }
    else
    {
      v19[0] = "agx.group_id_";
      v10 = 259;
    }
    v21 = v10;
    llvm::GlobalVariable::GlobalVariable();
    if (*v9)
    {
      v19[0] = "cl_group_id_";
      v20 = v9;
      v11 = 771;
    }
    else
    {
      v19[0] = "cl_group_id_";
      v11 = 259;
    }
    v21 = v11;
    v12 = (llvm::ValueHandleBase *)(v6 + 377);
    llvm::Twine::str((llvm::Twine *)v19);
    llvm::GlobalObject::setSection();
    if (v17 < 0)
      operator delete(__p);
    llvm::GlobalObject::setAlignment();
    sub_21DF4EB3C(v12, v8);
    v7 = *((_QWORD *)v12 + 2);
  }
  v13 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v21 = 257;
  v14 = sub_21DF19394(v13, **(llvm::Type ***)(*(_QWORD *)v7 + 16), v7, 0, (uint64_t)v19);
  v18 = 257;
  return sub_21DF1A79C((uint64_t)v13, 38, v14, a2, (uint64_t)&__p);
}

uint64_t sub_21DF56330(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::ValueHandleBase *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v6 = &a1[3 * a3];
  v7 = v6[324];
  if (!v7)
  {
    v8 = (llvm::ValueHandleBase *)(v6 + 322);
    *(_QWORD *)&v14 = "agc.";
    *(_QWORD *)&v15 = "local_size";
    LOWORD(v16) = 771;
    v9 = off_24E1EBA60[a3];
    if (*v9)
    {
      *(_QWORD *)&v17 = &v14;
      *(_QWORD *)&v18 = v9;
      LOWORD(v19) = 770;
    }
    else
    {
      v17 = v14;
      v18 = v15;
      v19 = v16;
    }
    v10 = sub_21DF55BB0(a1);
    sub_21DF4EB3C(v8, v10);
    v7 = *((_QWORD *)v8 + 2);
  }
  v11 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  LOWORD(v19) = 257;
  v12 = sub_21DF19394(v11, **(llvm::Type ***)(*(_QWORD *)v7 + 16), v7, 0, (uint64_t)&v17);
  LOWORD(v16) = 257;
  return sub_21DF1A79C((uint64_t)v11, 38, v12, a2, (uint64_t)&v14);
}

uint64_t sub_21DF5646C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[32];
  __int16 v21;

  v3 = *(_DWORD *)(a1 + 4 * a3 + 2808);
  if (v3 == -1)
    return 0;
  v7 = *(_QWORD *)(a1 + 152);
  if ((*(_WORD *)(v7 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 152));
  v8 = 40 * (v3 - 1) + 40;
  if (!v3)
    v8 = 0;
  v9 = *(_QWORD *)(v7 + 88) + v8;
  if (a3)
  {
    v10 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v11 = *(_QWORD *)(v10 + 232);
    v21 = 257;
    v12 = sub_21DF1A79C(v10 + 8, 49, v9, v11, (uint64_t)v20);
    v13 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v21 = 257;
    v14 = v13 + 8;
    v15 = llvm::ConstantInt::get();
    v16 = sub_21DF79584(v14, v12, v15, (uint64_t)v20);
    v17 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    v21 = 257;
    v9 = sub_21DF1A79C(v17, 39, v16, a2, (uint64_t)v20);
  }
  v18 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
  v21 = 257;
  return sub_21DF1A79C(v18, 38, v9, a2, (uint64_t)v20);
}

uint64_t sub_21DF565B0(uint64_t *a1, int a2)
{
  uint64_t *v3;
  llvm::ValueHandleBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const char *v9;
  __int16 v10;

  if (a2 == 2)
  {
    v3 = a1 + 394;
    if (!a1[394])
    {
      v4 = (llvm::ValueHandleBase *)(a1 + 392);
      v9 = "agc.local_xdim_mul_and_shift";
      v10 = 259;
      goto LABEL_9;
    }
  }
  else if (a2 == 1)
  {
    v3 = a1 + 391;
    if (!a1[391])
    {
      v4 = (llvm::ValueHandleBase *)(a1 + 389);
      v9 = "agc.local_slice_mul_and_shift";
      v10 = 259;
LABEL_9:
      v5 = sub_21DF55BB0(a1);
      sub_21DF4EB3C(v4, v5);
    }
  }
  else
  {
    v3 = a1 + 388;
    if (!a1[388])
    {
      v4 = (llvm::ValueHandleBase *)(a1 + 386);
      v9 = "agc.local_slice_and_linear_size";
      v10 = 259;
      goto LABEL_9;
    }
  }
  v6 = *v3;
  v7 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v10 = 257;
  return sub_21DF19394(v7 + 1, **(llvm::Type ***)(*(_QWORD *)v6 + 16), v6, 0, (uint64_t)&v9);
}

uint64_t sub_21DF566FC(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[32];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v48 = 257;
  v11 = (uint64_t)(v10 + 8);
  v12 = llvm::ConstantInt::get();
  v13 = sub_21DF79584(v11, a4, v12, (uint64_t)v47);
  v14 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v48 = 257;
  v15 = (uint64_t)(v14 + 8);
  v16 = llvm::ConstantInt::get();
  v17 = sub_21DF79584(v15, a4, v16, (uint64_t)v47);
  v18 = *(_QWORD *)(*a1 - 24);
  v19 = (uint64_t)a1 + v18;
  v20 = *(_QWORD *)((char *)a1 + v18 + 344);
  v21 = *(_QWORD *)(v20 + 936);
  if (v21)
  {
    v22 = strlen(*(const char **)(v20 + 936));
    v23 = sub_21DF1AFD4(v19, v21, v22, *(_QWORD *)(v19 + 184), *(_QWORD *)(v19 + 184), *(_QWORD *)(v19 + 184), *(_QWORD *)(v19 + 184));
    v49[0] = a2;
    v49[1] = v13;
    v49[2] = a2;
    v24 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v48 = 257;
    v25 = (uint64_t)sub_21DF191A4(v24, *(_QWORD *)(v23 + 24), v23, (uint64_t)v49, 3, (uint64_t)v47);
  }
  else
  {
    v26 = (uint64_t)a1 + v18 + 8;
    v27 = *(_QWORD *)(v19 + 192);
    v48 = 257;
    v28 = sub_21DF1A79C(v26, 39, v13, v27, (uint64_t)v47);
    v50 = 257;
    v29 = sub_21DF1A864(v26, (uint64_t)a2, v28, (uint64_t)v49);
    v30 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v48 = 257;
    v31 = sub_21DF19FAC(v30, v29, (uint64_t)a2, (uint64_t)v47);
    v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v33 = *((_QWORD *)v32 + 29);
    v48 = 257;
    v34 = sub_21DF1A79C((uint64_t)(v32 + 8), 49, v31, v33, (uint64_t)v47);
    v35 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v48 = 257;
    v36 = (uint64_t)(v35 + 8);
    v37 = llvm::ConstantInt::get();
    v25 = sub_21DF79584(v36, v34, v37, (uint64_t)v47);
  }
  v38 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v48 = 257;
  v39 = sub_21DF1AE6C(v38, v25, v17, (uint64_t)v47);
  v40 = *a2;
  v50 = 257;
  v41 = sub_21DF1A79C(v38, 39, v39, v40, (uint64_t)v49);
  v42 = v41;
  if (a5)
    *a5 = v41;
  v43 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v48 = 257;
  v44 = sub_21DF1A864(v43, v42, a3, (uint64_t)v47);
  v45 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v48 = 257;
  return sub_21DF3BFA0(v45, (uint64_t)a2, v44, (uint64_t)v47);
}

llvm::ValueHandleBase *sub_21DF569CC(llvm::ValueHandleBase *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::ValueHandleBase *v5;

  v2 = *((_QWORD *)this + 2);
  v3 = a2[2];
  if (v2 != v3)
  {
    v5 = this;
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
    {
      this = (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList(this);
      v3 = a2[2];
    }
    *((_QWORD *)v5 + 2) = v3;
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToExistingUseList(v5, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t sub_21DF56A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    llvm::DebugLoc::DebugLoc();
    v5 = (_QWORD *)(a2 + 48);
    if (&v8 == (uint64_t *)(a2 + 48))
    {
      if (v8)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      if (*v5)
        llvm::MetadataTracking::untrack();
      v6 = v8;
      *v5 = v8;
      if (v6)
      {
        llvm::MetadataTracking::retrack();
        v8 = 0;
      }
    }
  }
  return sub_21DF3F430(a1 + 8, a2);
}

uint64_t *sub_21DF56AE8(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EBFA8);
  sub_21DF2E650(v2 + 3168);
  return a1;
}

void sub_21DF56B1C(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EBFA8);
  sub_21DF2E650(v1 + 3168);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF56B60(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v6;
  const char *v8;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = a4;
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(_QWORD *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
    v8 = "agc.stage_in_grid_size";
  }
  else
  {
    if (a3 != 24)
      return 0;
    v6 = *a2 == 0x676174732E726961 && a2[1] == 0x6972675F6E695F65;
    if (!v6 || a2[2] != 0x6E696769726F5F64)
      return 0;
    v8 = "agc.stage_in_grid_origin";
  }
  v12 = *(_DWORD *)(a4 + 8) & 0xFE;
  v21 = 261;
  v20[0] = v8;
  v20[1] = a3;
  llvm::FixedVectorType::get();
  v13 = sub_21DF55BB0(a1);
  v14 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v21 = 257;
  v15 = sub_21DF19394(v14 + 1, **(llvm::Type ***)(*(_QWORD *)v13 + 16), v13, 0, (uint64_t)v20);
  v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (v12 == 18)
  {
    v17 = sub_21DF79408(v16, v15, *(_DWORD *)(v4 + 32), 1);
    v4 = **(_QWORD **)(v4 + 16);
  }
  else
  {
    v18 = v16 + 8;
    v21 = 257;
    v19 = llvm::ConstantInt::get();
    v17 = sub_21DF79584(v18, v15, v19, (uint64_t)v20);
  }
  return sub_21DF79090((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24)), v17, v4);
}

uint64_t sub_21DF56D50(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32)), (uint64_t *)&off_24E1EBFA8);
  return sub_21DF2E650(v1 + 3168);
}

void sub_21DF56D7C(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EBFA8);
  sub_21DF2E650((uint64_t)(v1 + 396));
  JUMPOUT(0x2207A7960);
}

uint64_t *sub_21DF56DCC(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)&off_24E1EC2A0;
  v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_24E1EC470;
  sub_21DF56FA4((uint64_t)(a1 + 396));
  sub_21DF5553C(a1, (uint64_t *)&off_24E1EC4E0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF56E24(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)&off_24E1EC2A0;
  v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_24E1EC470;
  sub_21DF56FA4((uint64_t)(a1 + 396));
  sub_21DF5553C(a1, (uint64_t *)&off_24E1EC4E0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF56E8C(_QWORD *a1)
{
  sub_21DF77C44((uint64_t)a1, (uint64_t)(a1 + 396));
  return sub_21DF52D68(a1);
}

const char *sub_21DF56EB4()
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t sub_21DF56EC0()
{
  return 16;
}

uint64_t sub_21DF56EC8(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EC2A0;
  v1[400] = (uint64_t)&unk_24E1EC470;
  sub_21DF56FA4((uint64_t)(v1 + 396));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EC4E0);
  return sub_21DF2E650((uint64_t)(v1 + 400));
}

void sub_21DF56F20(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EC2A0;
  v1[400] = (uint64_t)&unk_24E1EC470;
  sub_21DF56FA4((uint64_t)(v1 + 396));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EC4E0);
  sub_21DF2E650((uint64_t)(v1 + 400));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF56F90()
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t sub_21DF56F9C()
{
  return 16;
}

uint64_t sub_21DF56FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_21DF5701C(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EC240);
  sub_21DF2E650(v2 + 3168);
  return a1;
}

void sub_21DF57050(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C(a1, (uint64_t *)&off_24E1EC240);
  sub_21DF2E650(v1 + 3168);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF57094(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32)), (uint64_t *)&off_24E1EC240);
  return sub_21DF2E650(v1 + 3168);
}

void sub_21DF570C0(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EC240);
  sub_21DF2E650((uint64_t)(v1 + 396));
  JUMPOUT(0x2207A7960);
}

uint64_t *sub_21DF57110(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)&off_24E1EC548;
  v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_24E1EC718;
  sub_21DF56FA4((uint64_t)(a1 + 396));
  sub_21DF5553C(a1, (uint64_t *)&off_24E1EC788);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF57168(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)&off_24E1EC548;
  v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_24E1EC718;
  sub_21DF56FA4((uint64_t)(a1 + 396));
  sub_21DF5553C(a1, (uint64_t *)&off_24E1EC788);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF571D0(_QWORD *a1)
{
  sub_21DF77C44((uint64_t)a1, (uint64_t)(a1 + 396));
  return sub_21DF52D68(a1);
}

const char *sub_21DF571F8()
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t sub_21DF57204(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EC548;
  v1[400] = (uint64_t)&unk_24E1EC718;
  sub_21DF56FA4((uint64_t)(v1 + 396));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EC788);
  return sub_21DF2E650((uint64_t)(v1 + 400));
}

void sub_21DF5725C(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = (uint64_t)&off_24E1EC548;
  v1[400] = (uint64_t)&unk_24E1EC718;
  sub_21DF56FA4((uint64_t)(v1 + 396));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1EC788);
  sub_21DF2E650((uint64_t)(v1 + 400));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF572CC()
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t sub_21DF572D8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Module *v12;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  int v23;
  unsigned int v24[8];
  __int16 v25;

  v7 = sub_21DF9C730((uint64_t *)a1, a2 + 1, a3, "air.kernel", (uint64_t)&unk_2553B3950, 0);
  v8 = *a2;
  *v7 = *a2;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(v8 - 24)) = a2[5];
  v9 = 2432;
  do
  {
    v10 = (_QWORD *)(a1 + v9);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = 4;
    v11 = a1 + v9 + 24;
    v9 += 24;
  }
  while ((uint64_t *)v11 != v7 + 340);
  *(_QWORD *)(a1 + 2720) = a4;
  *(_BYTE *)(a1 + 2728) = (*(_DWORD *)(a4 + 12) & 1) == 0;
  *(_QWORD *)(a1 + 2736) = 4;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_QWORD *)(a1 + 2744) = 0;
  sub_21DF9E5E4(a1, (*(_DWORD *)(a4 + 12) >> 1) & 1, (*(_DWORD *)(a4 + 12) >> 2) & 1);
  *(_BYTE *)(a1 + 14) = (*(_BYTE *)(a4 + 12) & 0x20) != 0;
  *(_QWORD *)(a1 + 2272) = *(_QWORD *)a4;
  v12 = *(llvm::Module **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320);
  *(_QWORD *)v24 = "air.kernel";
  v25 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)v24);
  if (NamedMetadata)
  {
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    v15 = 0;
    v16 = *(unsigned int *)(Operand + 8);
    if (v16 >= 4)
    {
      v17 = Operand;
      v18 = 3;
      while (1)
      {
        v19 = *(unsigned __int8 **)(v17 - 8 * v16 + 8 * v18);
        v20 = *v19;
        if (v20 <= 0x22 && ((0x7FFFFFFF0uLL >> v20) & 1) != 0)
        {
          v24[0] = 0;
          if (*((_DWORD *)v19 + 2))
            break;
        }
LABEL_14:
        if (++v18 >= v16)
          goto LABEL_15;
      }
      while (1)
      {
        v23 = 0;
        if ((sub_21DF7A834("air.max_work_group_size", (uint64_t)v19, v24, &v23) & 1) != 0)
          break;
        if (++v24[0] >= *((_DWORD *)v19 + 2))
        {
          v16 = *(unsigned int *)(v17 + 8);
          goto LABEL_14;
        }
      }
      v15 = v23;
    }
  }
  else
  {
LABEL_15:
    v15 = 0;
  }
  *(_DWORD *)(a1 + 2732) = v15;
  *(_BYTE *)(a1 + 15) = (*(_BYTE *)(a4 + 12) & 0x10) != 0;
  return a1;
}

uint64_t sub_21DF574A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  result = sub_21DF572D8(a1, a2 + 1, a3, a4);
  v6 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + *(_QWORD *)(v6 - 24)) = a2[7];
  *(_QWORD *)(result + 2760) = 4;
  *(_QWORD *)(result + 2776) = 0;
  *(_QWORD *)(result + 2768) = 0;
  *(_QWORD *)(result + 2784) = result + 2800;
  *(_QWORD *)(result + 2792) = 0x200000000;
  v7 = 2824;
  do
  {
    v8 = (_QWORD *)(result + v7);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 4;
    v9 = result + v7 + 24;
    v7 += 24;
  }
  while (v9 != result + 2896);
  *(_QWORD *)(result + 2896) = 4;
  *(_QWORD *)(result + 2912) = 0;
  *(_QWORD *)(result + 2904) = 0;
  *(_QWORD *)(result + 2920) = 4;
  *(_QWORD *)(result + 2936) = 0;
  *(_QWORD *)(result + 2928) = 0;
  *(_QWORD *)(result + 2944) = 4;
  *(_QWORD *)(result + 2960) = 0;
  *(_QWORD *)(result + 2952) = 0;
  *(_QWORD *)(result + 2968) = 4;
  *(_QWORD *)(result + 2984) = 0;
  *(_QWORD *)(result + 2976) = 0;
  *(_QWORD *)(result + 2992) = 4;
  *(_QWORD *)(result + 3008) = 0;
  v10 = 3016;
  *(_QWORD *)(result + 3000) = 0;
  do
  {
    v11 = (_QWORD *)(result + v10);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 4;
    v12 = result + v10 + 24;
    v10 += 24;
  }
  while (v12 != result + 3088);
  *(_QWORD *)(result + 3088) = 4;
  *(_QWORD *)(result + 3104) = 0;
  *(_QWORD *)(result + 3096) = 0;
  *(_QWORD *)(result + 3112) = 4;
  *(_QWORD *)(result + 3128) = 0;
  *(_QWORD *)(result + 3120) = 0;
  *(_QWORD *)(result + 3136) = 4;
  *(_QWORD *)(result + 3152) = 0;
  *(_QWORD *)(result + 3144) = 0;
  *(_BYTE *)(result + 3160) = 0;
  return result;
}

uint64_t *sub_21DF575AC(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x2207A6DD8](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t *sub_21DF576A0(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_21DF5553C(a1, (uint64_t *)&off_24E1ECA30);
  sub_21DF2E650(v2 + 3168);
  return a1;
}

void sub_21DF576D4(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C(a1, (uint64_t *)&off_24E1ECA30);
  sub_21DF2E650(v1 + 3168);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF57718()
{
  return "execute-indirect-compute-driver-legacy";
}

uint64_t sub_21DF57724(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32)), (uint64_t *)&off_24E1ECA30);
  return sub_21DF2E650(v1 + 3168);
}

void sub_21DF57750(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1ECA30);
  sub_21DF2E650((uint64_t)(v1 + 396));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF577A0()
{
  return "execute-indirect-compute-driver-legacy";
}

uint64_t *sub_21DF577AC(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_21DF5553C(a1, (uint64_t *)&off_24E1ECCD8);
  sub_21DF2E650(v2 + 3168);
  return a1;
}

void sub_21DF577E0(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C(a1, (uint64_t *)&off_24E1ECCD8);
  sub_21DF2E650(v1 + 3168);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF57824()
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

uint64_t sub_21DF57830(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_21DF5553C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32)), (uint64_t *)&off_24E1ECCD8);
  return sub_21DF2E650(v1 + 3168);
}

void sub_21DF5785C(_QWORD *a1)
{
  uint64_t *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  sub_21DF5553C(v1, (uint64_t *)&off_24E1ECCD8);
  sub_21DF2E650((uint64_t)(v1 + 396));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF578AC()
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

uint64_t sub_21DF578C0(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  llvm::Module *v3;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v5;
  uint64_t Operand;
  uint64_t String;
  char v8;
  _DWORD *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t GlobalVariable;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  llvm::GlobalValue *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned int v114;
  llvm::Instruction **v115;
  llvm::Instruction **v116;
  llvm::Instruction **v117;
  llvm::Instruction **v118;
  llvm::Instruction **v119;
  uint64_t v120;
  llvm::Use *v121;
  llvm::CallBase *v122;
  unsigned int v123;
  BOOL v124;
  _QWORD *i;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  llvm::Instruction **v134;
  unint64_t v135;
  char *v136;
  llvm::CallBase **v137;
  llvm::Instruction **v138;
  llvm::CallBase *v139;
  llvm::CallBase **v140;
  llvm::Instruction **v141;
  llvm::CallBase *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  llvm::Instruction **v146;
  llvm::Instruction *v147;
  llvm::Instruction **v148;
  llvm::Instruction *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  _BOOL4 v164;
  int v165;
  int v166;
  BOOL v167;
  const char *v168;
  const char *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  llvm::NamedMDNode *inserted;
  llvm::NamedMDNode *v174;
  int NumOperands;
  int v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t *v181;
  char *v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  llvm::GlobalValue *v188;
  llvm::GlobalValue *v189;
  int v190;
  char v192;
  _BOOL4 v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char *v200;
  int v201;
  uint64_t v202;
  llvm::Instruction **v203;
  _QWORD **v204;
  _QWORD *v205;
  uint64_t v206;
  char __str[8];
  uint64_t v208;
  _BYTE v209[7];
  char v210;
  __int16 v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD v214[6];

  v214[4] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 29))
    return 0;
  v1 = a1;
  v193 = MGGetBoolAnswer()
      && (v2 = (const char *)sub_21DF21324("AGC_DEBUG_LLVM_IR")) != 0
      && *v2 != 48
      && atoi(v2) != 0;
  v194 = v1;
  v3 = *(llvm::Module **)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 320);
  *(_QWORD *)__str = "air.shaderSource";
  v211 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)__str);
  if (NamedMetadata)
  {
    v5 = NamedMetadata;
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    String = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    if (String)
    {
      v8 = String;
      v9 = (_DWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
      v10 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
      if (sub_21DF2D948(v10))
      {
        v11 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
        snprintf(__str, 0x80uLL, "%s shader %u (shader source)", v11, v9[174]);
        v12 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 24))(v9);
        v13 = strcmp(v12, "compute");
        if ((_DWORD)v13 && (v13 = strcmp(v12, "compute-program"), (_DWORD)v13))
          v20 = "Graphics";
        else
          v20 = "Compute";
        sub_21DF28954(v13, "------ Start %s %s -------\n", v14, v15, v16, v17, v18, v19, (char)v20);
        sub_21DF28954(v22, "%s\n", v23, v24, v25, v26, v27, v28, v8);
        sub_21DF28954(v29, "------ End %s %s -------\n", v30, v31, v32, v33, v34, v35, (char)v20);
      }
    }
    llvm::NamedMDNode::eraseFromParent(v5);
  }
  v36 = (char *)v1;
  sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "generic");
  v37 = (*(uint64_t (**)(char *))(*(_QWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)] + 24))(&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)]);
  sub_21DF28954(v37, "------ Compilation flags for %s shader %u ------", v38, v39, v40, v41, v42, v43, v37);
  sub_21DF28954(v44, "Object fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v45, v46, v47, v48, v49, v50, (*(_DWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24) + 104] & 2) != 0);
  sub_21DF28954(v51, "Target fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v52, v53, v54, v55, v56, v57, (*(_DWORD *)(*(_QWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24) + 344] + 104) & 2) != 0);
  sub_21DF28954(v58, "Codegen fast-math options: { finite-math=%d, unsafe-fp-math=%d, less_pecise_fmad=%d}", v59, v60, v61, v62, v63, v64, *(_BYTE *)(v1 + 26));
  v65 = (*(uint64_t (**)(char *))(*(_QWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)] + 24))(&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)]);
  sub_21DF28954(v65, "------ End compilation flags for %s shader %u ------", v66, v67, v68, v69, v70, v71, v65);
  v72 = (*(uint64_t (**)(char *))(*(_QWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)] + 24))(&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)]);
  sub_21DF28954(v72, "------ Start compilation key description for %s shader %u  ------", v73, v74, v75, v76, v77, v78, v72);
  v79 = (*(_QWORD *(**)(char *__return_ptr))(*(_QWORD *)&v36[*(_QWORD *)(*(_QWORD *)v36 - 24)] + 72))(__str);
  if (v210 >= 0)
    v86 = __str;
  else
    v86 = *(char **)__str;
  sub_21DF28954((uint64_t)v79, v86, v80, v81, v82, v83, v84, v85, v192);
  if (v210 < 0)
    operator delete(*(void **)__str);
  v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 24))(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
  sub_21DF28954(v87, "------ End compilation key description for %s shader %u  ------", v88, v89, v90, v91, v92, v93, v87);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
    GlobalVariable = llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)GlobalVariable);
  if (!*(_BYTE *)(v1 + 37))
  {
LABEL_154:
    sub_21DF5BE20((_QWORD *)v1, v95, v96, v97, v98, v99, v100, v101);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
    if (!v193)
      goto LABEL_164;
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after simplifyGenericIR");
    v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after initCompile");
    v158 = *(_QWORD *)v1;
    if ((v157 & 1) != 0)
    {
      v159 = (*(uint64_t (**)(uint64_t))(v158 + 104))(v1);
      sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupShaderInputs");
      if ((v159 & 1) != 0)
      {
        v160 = sub_21DF5C7CC(v1);
        sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupArgumentBuffers");
        if ((v160 & 1) != 0)
        {
          v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
          sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupShaderWrapper");
          if ((v161 & 1) != 0)
          {
            v162 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
            sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupShaderOutputs");
            if ((v162 & 1) != 0)
            {
              sub_21DF5EC4C(v1);
              sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after cleanupShaderIR");
              v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1);
              sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupImageBlocks");
              if ((v163 & 1) != 0)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
                sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "After setupIndirectSamplers");
                v164 = sub_21DF5ED18(v1);
                sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "After allocateTexturesAndSamplers");
                if (v164)
                {
                  v165 = sub_21DF60FD4(v1);
LABEL_181:
                  sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after replaceTexturesAndSamplers");
                  sub_21DF62E88((_QWORD *)v1);
                  sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after simplifyTrigIdentities");
                  goto LABEL_182;
                }
LABEL_180:
                v165 = 0;
                goto LABEL_181;
              }
LABEL_179:
              sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "After setupIndirectSamplers");
              sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "After allocateTexturesAndSamplers");
              goto LABEL_180;
            }
LABEL_178:
            sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after cleanupShaderIR");
            sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupImageBlocks");
            goto LABEL_179;
          }
LABEL_177:
          sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupShaderOutputs");
          goto LABEL_178;
        }
LABEL_176:
        sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupShaderWrapper");
        goto LABEL_177;
      }
    }
    else
    {
      sub_21DF2F24C(v1 + *(_QWORD *)(v158 - 24), "after setupShaderInputs");
    }
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after setupArgumentBuffers");
    goto LABEL_176;
  }
  v102 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 320);
  v103 = *(_QWORD *)(v102 + 32);
  v195 = v102 + 24;
  if (v103 == v102 + 24)
  {
    v196 = 0;
    goto LABEL_152;
  }
  v196 = 0;
  do
  {
    v197 = v103;
    if (v103)
      v104 = (llvm::GlobalValue *)(v103 - 56);
    else
      v104 = 0;
    GlobalVariable = llvm::GlobalValue::isDeclaration(v104);
    if ((GlobalVariable & 1) != 0)
      goto LABEL_149;
    *(_QWORD *)__str = v209;
    v208 = 0x1000000000;
    v105 = *((_QWORD *)v104 + 10);
    if (v105)
      v106 = v105 - 24;
    else
      v106 = 0;
    v107 = v106 + 40;
    v108 = *(_QWORD *)(v106 + 48);
    if (v108 == v106 + 40)
    {
      LOBYTE(v111) = 0;
      v1 = v194;
      goto LABEL_148;
    }
    do
    {
      if (v108)
        v109 = v108 - 24;
      else
        v109 = 0;
      if (v108 && *(_BYTE *)(v109 + 16) == 59)
        GlobalVariable = sub_21DF19CD0((uint64_t)__str, v109);
      v108 = *(_QWORD *)(v108 + 8);
    }
    while (v108 != v107);
    v110 = *(char **)__str;
    if (!(_DWORD)v208)
    {
      LOBYTE(v111) = 0;
      goto LABEL_146;
    }
    v111 = 0;
    v199 = *(_QWORD *)__str + 8 * v208;
    do
    {
      v112 = *(_QWORD *)v110;
      v212 = v214;
      v213 = 0x400000001;
      v214[0] = v112;
      v206 = 0;
      v204 = &v205;
      v113 = operator new(0x28uLL);
      v113[4] = v112;
      *v113 = 0;
      v113[1] = 0;
      v113[2] = &v205;
      v204 = (_QWORD **)v113;
      v205 = v113;
      sub_21DF25404(v113, v113);
      ++v206;
      v114 = v213;
      if (!(_DWORD)v213)
      {
        LODWORD(v144) = 0;
        goto LABEL_133;
      }
      v200 = v110;
      v201 = v111;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v203 = 0;
      v119 = 0;
      v198 = 0;
      do
      {
        v120 = v212[--v114];
        LODWORD(v213) = v114;
        v121 = *(llvm::Use **)(v120 + 8);
        if (v121)
        {
          while (1)
          {
            v122 = (llvm::CallBase *)*((_QWORD *)v121 + 3);
            v123 = *((unsigned __int8 *)v122 + 16);
            v124 = v123 < 0x1C || v122 == 0;
            if (v124)
              goto LABEL_127;
            if (*((unsigned __int8 *)v122 + 16) <= 0x3Du)
            {
              if (v123 == 60)
              {
                if (*((_QWORD *)v122 - 4) != v120 || (*((_WORD *)v122 + 9) & 1) != 0)
                  goto LABEL_127;
                if (v118 >= v203)
                {
                  v202 = v120;
                  v132 = v118 - v117;
                  v133 = v132 + 1;
                  if ((unint64_t)(v132 + 1) >> 61)
LABEL_290:
                    abort();
                  v134 = v116;
                  if (((char *)v203 - (char *)v117) >> 2 > v133)
                    v133 = ((char *)v203 - (char *)v117) >> 2;
                  if ((unint64_t)((char *)v203 - (char *)v117) >= 0x7FFFFFFFFFFFFFF8)
                    v135 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v135 = v133;
                  if (v135)
                  {
                    if (v135 >> 61)
LABEL_291:
                      sub_21DF256A4();
                    v136 = (char *)operator new(8 * v135);
                  }
                  else
                  {
                    v136 = 0;
                  }
                  v140 = (llvm::CallBase **)&v136[8 * v132];
                  *v140 = v122;
                  v141 = v140 + 1;
                  while (v118 != v117)
                  {
                    v142 = *--v118;
                    *--v140 = v142;
                  }
                  v203 = (llvm::Instruction **)&v136[8 * v135];
                  if (v117)
                    operator delete(v117);
                  v117 = v140;
                  v118 = v141;
                  v116 = v134;
                  v120 = v202;
                }
                else
                {
                  *v118++ = v122;
                }
              }
              else
              {
                if (v123 != 61 || *((_QWORD *)v122 - 4) != v120 || (*((_WORD *)v122 + 9) & 1) != 0)
                  goto LABEL_127;
                if (v115 >= v116)
                {
                  v128 = v115 - v119;
                  v129 = v128 + 1;
                  if ((unint64_t)(v128 + 1) >> 61)
                    goto LABEL_290;
                  if (((char *)v116 - (char *)v119) >> 2 > v129)
                    v129 = ((char *)v116 - (char *)v119) >> 2;
                  if ((unint64_t)((char *)v116 - (char *)v119) >= 0x7FFFFFFFFFFFFFF8)
                    v130 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v130 = v129;
                  if (v130)
                  {
                    if (v130 >> 61)
                      goto LABEL_291;
                    v131 = (char *)operator new(8 * v130);
                  }
                  else
                  {
                    v131 = 0;
                  }
                  v137 = (llvm::CallBase **)&v131[8 * v128];
                  *v137 = v122;
                  v138 = v137 + 1;
                  if (v115 != v119)
                  {
                    do
                    {
                      v139 = *--v115;
                      *--v137 = v139;
                    }
                    while (v115 != v119);
                    v115 = v119;
                  }
                  v119 = v137;
                  v116 = (llvm::Instruction **)&v131[8 * v130];
                  if (v115)
                    operator delete(v115);
                  v115 = v138;
                }
                else
                {
                  *v115++ = v122;
                }
              }
              goto LABEL_116;
            }
            if (v123 != 62)
            {
              if (v123 == 84)
              {
                if ((llvm::AttributeList::hasFnAttr() & 1) == 0
                  && ((llvm::CallBase::hasReadingOperandBundles(v122) & 1) != 0
                   || (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) == 0))
                {
                  if (*(_BYTE *)(*(_QWORD *)v122 + 8) != 7)
                    goto LABEL_127;
                  v127 = *((_QWORD *)v122 - 4);
                  if (!v127
                    || *(_BYTE *)(v127 + 16)
                    || *(_QWORD *)(v127 + 24) != *((_QWORD *)v122 + 9)
                    || (*(_BYTE *)(v127 + 33) & 0x20) == 0
                    || (*(_DWORD *)(v127 + 36) - 167) >= 2)
                  {
                    llvm::Use::getOperandNo(v121);
                    if (!llvm::CallBase::paramHasAttr())
                      goto LABEL_127;
                    if ((llvm::CallBase::paramHasAttr() & 1) != 0)
                    {
                      v198 = 1;
                    }
                    else if ((llvm::CallBase::paramHasAttr() & 1) == 0)
                    {
                      goto LABEL_127;
                    }
                  }
                }
                goto LABEL_116;
              }
              if (v123 != 77)
                goto LABEL_127;
            }
            for (i = v205; i; i = (_QWORD *)*i)
            {
              v126 = i[4];
              if ((unint64_t)v122 >= v126)
              {
                if (v126 >= (unint64_t)v122)
                  goto LABEL_116;
                ++i;
              }
            }
            sub_21DF19CD0((uint64_t)&v212, *((_QWORD *)v121 + 3));
            sub_21DF52594((uint64_t *)&v204, (unint64_t)v122, (uint64_t)v122);
LABEL_116:
            v121 = (llvm::Use *)*((_QWORD *)v121 + 1);
            if (!v121)
            {
              v114 = v213;
              break;
            }
          }
        }
      }
      while (v114);
      v143 = (char *)v115 - (char *)v119;
      if ((v117 != v118) | v198 & 1)
      {
        if (v143 != 8 || v117 == v118)
        {
LABEL_127:
          LODWORD(v144) = 0;
        }
        else
        {
          LODWORD(v144) = 0;
          v145 = *((_QWORD *)*v119 - 4);
          v146 = v117;
          do
          {
            v147 = *v146;
            if (*((_QWORD *)*v146 - 4) == v145)
            {
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v147);
              LODWORD(v144) = v144 + 1;
            }
            ++v146;
          }
          while (v146 != v118);
        }
        v111 = v201;
        v110 = v200;
        if (!v117)
          goto LABEL_130;
LABEL_129:
        operator delete(v117);
        goto LABEL_130;
      }
      v144 = v143 >> 3;
      v111 = v201;
      v110 = v200;
      if (v119 == v115)
      {
        v119 = v115;
      }
      else
      {
        v148 = v119;
        do
        {
          v149 = *v148++;
          llvm::Instruction::eraseFromParent(v149);
        }
        while (v148 != v115);
      }
      if (v117)
        goto LABEL_129;
LABEL_130:
      if (v119)
        operator delete(v119);
LABEL_133:
      sub_21DF2E824(v205);
      GlobalVariable = (uint64_t)v212;
      if (v212 != v214)
        free(v212);
      v111 += v144;
      v110 += 8;
    }
    while (v110 != (char *)v199);
    v110 = *(char **)__str;
LABEL_146:
    v1 = v194;
    if (v110 != v209)
      free(v110);
LABEL_148:
    v196 += v111;
LABEL_149:
    v103 = *(_QWORD *)(v197 + 8);
  }
  while (v103 != v195);
LABEL_152:
  sub_21DF28954(GlobalVariable, "RemoveAndForwardAllocaStores: removed %u instructions", v96, v97, v98, v99, v100, v101, v196);
  if (v193)
  {
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after RemoveAndForwardAllocaStores");
    goto LABEL_154;
  }
  sub_21DF5BE20((_QWORD *)v1, v150, v151, v152, v153, v154, v155, v156);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
LABEL_164:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) & 1) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1) & 1) != 0
    && (sub_21DF5C7CC(v1) & 1) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1) & 1) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1) & 1) != 0
    && (sub_21DF5EC4C(v1), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1) & 1) != 0)
    && ((*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1), sub_21DF5ED18(v1)))
  {
    v165 = sub_21DF60FD4(v1);
  }
  else
  {
    v165 = 0;
  }
  sub_21DF62E88((_QWORD *)v1);
LABEL_182:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 344) + 784) + 43))
    v166 = 0;
  else
    v166 = v165;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 344) + 784) + 43))
    v167 = v165 == 0;
  else
    v167 = 1;
  if (!v167)
    v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
  if (*(_BYTE *)(v1 + 10) || !MGGetBoolAnswer())
    goto LABEL_201;
  v168 = (const char *)sub_21DF21324("AGC_ENABLE_F16_FASTMATH_BUILTINS");
  if (v168 && *v168 != 48)
  {
    if (atoi(v168))
    {
      if (!v166)
      {
        if (v193)
          sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after replace f16 builtins");
LABEL_195:
        v166 = 0;
        goto LABEL_203;
      }
      v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
      if (v193)
      {
        sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after replace f16 builtins");
        if ((v166 & 1) != 0)
          goto LABEL_202;
        goto LABEL_195;
      }
    }
LABEL_201:
    if (v166)
      goto LABEL_202;
    goto LABEL_203;
  }
  if ((v166 & 1) == 0)
    goto LABEL_195;
LABEL_202:
  v166 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 176))(v1, 0);
LABEL_203:
  if (MGGetBoolAnswer()
    && (v169 = (const char *)sub_21DF21324("AGC_ENABLE_PRECISE_MATH")) != 0
    && *v169 != 48
    && atoi(v169))
  {
    v170 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 344) + 784) + 32);
    if (v170)
      v171 = 0;
    else
      v171 = v166;
    if (v170 && ((v166 ^ 1) & 1) == 0)
      v171 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 176))(v1, 1);
  }
  else
  {
    v171 = v166;
  }
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after linking runtime");
  if (v171)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
  else
    v21 = 0;
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after replaceBuiltins");
  if ((_DWORD)v21)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after promoteGlobalConstants");
  if ((_DWORD)v21)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after improveDMAPromotionOpportunity");
  if ((_DWORD)v21)
  {
    v172 = *(_QWORD *)(v194 + 152);
    *(_WORD *)(v172 + 18) = *(_WORD *)(v172 + 18) & 0xC00F | (16
                                                            * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 88))(v194));
    v1 = v194;
    inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
    if (inserted)
    {
      v174 = inserted;
      NumOperands = llvm::NamedMDNode::getNumOperands(inserted);
      v176 = NumOperands;
      *(_QWORD *)__str = v209;
      v208 = 0x400000000;
      if (NumOperands)
        v177 = (NumOperands - 1) + 1;
      else
        v177 = 0;
      if (v177 < 5)
      {
        v178 = 0;
        v179 = 0;
        if (!NumOperands)
          goto LABEL_241;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v178 = v208;
        v179 = v208;
        if (!v176)
          goto LABEL_241;
      }
      v180 = 0;
      v181 = (uint64_t *)(*(_QWORD *)__str + 8 * v178);
      do
      {
        *v181++ = llvm::NamedMDNode::getOperand(v174);
        ++v180;
      }
      while (v176 != v180);
      v179 = v208;
      v1 = v194;
LABEL_241:
      LODWORD(v208) = v179 + v177;
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 320), v174);
      llvm::Module::getOrInsertNamedMetadata();
      v182 = *(char **)__str;
      if ((_DWORD)v208)
      {
        v183 = 8 * v208;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)v182 - 8 * *(unsigned int *)(*(_QWORD *)v182 + 8)))
            llvm::NamedMDNode::addOperand();
          v182 += 8;
          v183 -= 8;
        }
        while (v183);
        v182 = *(char **)__str;
        v1 = v194;
      }
      if (v182 != v209)
        free(v182);
    }
  }
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after prunePRIDsOfDeletedGlobals");
  if ((_DWORD)v21)
    sub_21DF2F440(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), *(_QWORD *)(v1 + 152));
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after finalizeDriverBindings");
  if ((_DWORD)v21)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
  if (v193)
    sub_21DF2F24C(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), "after markInvariantOutputs");
  if (MGGetBoolAnswer())
  {
    v184 = (const char *)sub_21DF21324("AGX_FORCE_LATE_INLINING");
    if (v184)
    {
      if (*v184 != 48 && atoi(v184))
      {
        if ((_DWORD)v21)
        {
          *(_DWORD *)(v194 + 32) = 0;
          v185 = *(_QWORD *)(v194 + *(_QWORD *)(*(_QWORD *)v194 - 24) + 320);
          v186 = v185 + 24;
          v187 = *(_QWORD *)(v185 + 32);
          if (v187 != v185 + 24)
          {
            do
            {
              v188 = (llvm::GlobalValue *)(v187 - 56);
              v124 = v187 == 0;
              v187 = *(_QWORD *)(v187 + 8);
              if (v124)
                v189 = 0;
              else
                v189 = v188;
              if ((llvm::GlobalValue::isDeclaration(v189) & 1) == 0)
              {
                ++*(_DWORD *)(v194 + 32);
                if (v189 != *(llvm::GlobalValue **)(v194 + 152))
                {
                  llvm::Function::addFnAttr();
                  *((_DWORD *)v189 + 8) = *((_DWORD *)v189 + 8) & 0xFFFFBFC0 | 0x4007;
                }
              }
            }
            while (v187 != v186);
            if (*(_DWORD *)(v194 + 32) > 1u)
              llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(v194 + *(_QWORD *)(*(_QWORD *)v194 - 24) + 400) + 304), *(llvm::Module **)(v194 + *(_QWORD *)(*(_QWORD *)v194 - 24) + 320));
          }
        }
        v1 = v194;
        if (v193)
          sub_21DF2F24C(v194 + *(_QWORD *)(*(_QWORD *)v194 - 24), "after inlineFunctionsLate");
      }
    }
  }
  if ((_DWORD)v21)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 168))(v1))
      goto LABEL_285;
    v190 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) != 2)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) == 16)
        v190 = 1;
      else
        v190 = 2;
    }
    if (sub_21DF2D264(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400), v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 320), *(unsigned int *)(v1 + 25), v190, *(unsigned __int8 *)(v1 + 36))&& (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 80))(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)))
    {
      sub_21DF40324(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
      v21 = 1;
    }
    else
    {
LABEL_285:
      v21 = 0;
    }
  }
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 360) = mach_absolute_time()
                                                            - *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 352);
  return v21;
}

void sub_21DF58CE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_21DF51844(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_21DF58CF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  _QWORD v12[5];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v3 = *(_QWORD *)(v2 + 320);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 400) + 32);
  v5 = *(void **)(v4 + 8);
  if (v5)
    v6 = strlen(*(const char **)(v4 + 8));
  else
    v6 = 0;
  sub_21DF2CC40(v3, v5, v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 32);
  if (*(_QWORD *)(v7 + 16))
    strlen(*(const char **)(v7 + 16));
  llvm::Module::setDataLayout();
  sub_21DF2FB64();
  sub_21DF2FC20(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  llvm::Module::getOrInsertNamedMetadata();
  v14 = llvm::MDString::get();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  llvm::ConstantInt::get();
  v15 = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (*(_DWORD *)(a1 + 32) >= 2u)
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 304), *(llvm::Module **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320));
  v8 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (*(_BYTE *)(v8[43] + 1690) && (*(unsigned int (**)(_QWORD *))(*v8 + 32))(v8) <= 3)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v12[1] = llvm::MDString::get();
    llvm::ConstantInt::get();
    v12[2] = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
  if (v9)
    v10 = (llvm::BasicBlock *)(v9 - 24);
  else
    v10 = 0;
  v12[0] = llvm::BasicBlock::getFirstInsertionPt(v10);
  sub_21DF5BCC0((uint64_t)v10, (uint64_t)v12);
  v13 = 257;
  llvm::BasicBlock::splitBasicBlock();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return 1;
}

void sub_21DF58FD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  llvm::BasicBlock *v14;
  uint64_t v15;
  uint64_t FirstInsertionPt;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const std::string::value_type *v20;
  std::string *v21;
  std::string::size_type v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string __dst;
  __int16 v47;
  void *__p[2];
  uint64_t v49;

  sub_21DF5BD40();
  v2 = *(_QWORD *)(a1 + 160);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v4 = *(_QWORD *)(a1 + 160);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v3 != v5)
  {
    v6 = a1 + 8;
    v7 = a1 + 192;
    v44 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(v3 + 32));
      if (!v8 || !*(_QWORD *)(v3 + 8))
        goto LABEL_45;
      llvm::MDString::getString(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8));
      Key = llvm::StringMapImpl::FindKey();
      v10 = Key;
      if (Key == -1 || Key == (unint64_t)dword_2553B3CB8)
        goto LABEL_45;
      v12 = qword_2553B3CB0;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
      if (v13)
        v14 = (llvm::BasicBlock *)(v13 - 24);
      else
        v14 = 0;
      v15 = v6 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v14);
      sub_21DF19018(v15, (uint64_t)v14, FirstInsertionPt);
      v17 = *(_QWORD *)v3;
      if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
        v17 = **(_QWORD **)(v17 + 16);
      v18 = *(_QWORD *)(v12 + 8 * v10);
      v19 = *(void **)(v18 + 8);
      if (v19)
        sub_21DF24420(&__dst, v19, *(_QWORD *)(v18 + 16));
      else
        memset(&__dst, 0, sizeof(__dst));
      if (v17 == *(_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)a1 - 24)))
        v20 = ".i32";
      else
        v20 = ".i16";
      v21 = std::string::append(&__dst, v20);
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v49 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if (v49 >= 0)
        v24 = HIBYTE(v49);
      else
        v24 = (uint64_t)__p[1];
      if (*(_BYTE *)(v18 + 24))
      {
        v25 = sub_21DF206CC();
        v26 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v47 = 257;
        v27 = **(_QWORD **)(*(_QWORD *)v25 + 16);
        v28 = v6 + v26;
        v29 = 0;
        v30 = 0;
      }
      else
      {
        v31 = sub_21DF203DC(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v23, v24, v17, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192));
        if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
        {
          v32 = *(unsigned int *)(*(_QWORD *)v3 + 32);
          v33 = llvm::UndefValue::get();
          if ((_DWORD)v32)
          {
            for (i = 0; i != v32; ++i)
            {
              v35 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              v45 = llvm::ConstantInt::get();
              v47 = 257;
              v36 = sub_21DF191A4(v6 + v35, *(_QWORD *)(v31 + 24), v31, (uint64_t)&v45, 1, (uint64_t)&__dst);
              v37 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
              v47 = 257;
              v38 = v6;
              v39 = v7;
              v40 = v37 + 8;
              v41 = llvm::ConstantInt::get();
              v42 = v40;
              v7 = v39;
              v6 = v38;
              v33 = sub_21DF7980C(v42, v33, (uint64_t)v36, v41, (uint64_t)&__dst);
            }
          }
          goto LABEL_42;
        }
        v43 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v45 = llvm::ConstantInt::get();
        v28 = v43 + 8;
        v47 = 257;
        v27 = *(_QWORD *)(v31 + 24);
        v29 = &v45;
        v25 = v31;
        v30 = 1;
      }
      sub_21DF191A4(v28, v27, v25, (uint64_t)v29, v30, (uint64_t)&__dst);
LABEL_42:
      llvm::Value::replaceAllUsesWith();
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      v5 = v44;
LABEL_45:
      v3 += 40;
    }
    while (v3 != v5);
  }
}

uint64_t sub_21DF59368(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  _QWORD *v8;
  llvm::Instruction *v9;
  _QWORD *v10;
  llvm::Instruction *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  llvm::User *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int v54;
  llvm::User *v55;
  _BYTE v56[32];
  __int16 v57;
  _QWORD v58[2];
  void *v59;
  uint64_t v60;
  _BYTE v61[16];
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *))(*a1 + 80))(a1);
  llvm::Module::getOrInsertFunction();
  a1[19] = v2;
  v3 = a1[20];
  if (*(_QWORD *)(v3 + 72) != v3 + 72)
  {
    sub_21DF5BC50(v2 + 72, (uint64_t *)(v2 + 72), v3 + 72, *(uint64_t **)(v3 + 80), (uint64_t *)(v3 + 72));
    v3 = a1[20];
  }
  v59 = *(void **)(v3 + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v59);
  v4 = llvm::AttributeSet::removeAttribute();
  v58[1] = v4;
  if (v4)
  {
    v5 = a1[19];
    LODWORD(v59) = -1;
    v60 = v4;
    *(_QWORD *)(v5 + 112) = llvm::AttributeList::get();
  }
  v6 = *(_QWORD *)(a1[19] + 80);
  if (v6)
    v7 = (llvm::BasicBlock *)(v6 - 24);
  else
    v7 = 0;
  v58[0] = llvm::BasicBlock::getFirstInsertionPt(v7);
  sub_21DF5BCC0((uint64_t)v7, (uint64_t)v58);
  v62 = 257;
  llvm::BasicBlock::splitBasicBlock();
  v8 = (_QWORD *)*((_QWORD *)v7 + 5);
  if (v8 == (_QWORD *)((char *)v7 + 40))
  {
    v11 = 0;
  }
  else
  {
    v9 = (llvm::Instruction *)(v8 - 3);
    if (v8)
      v10 = v8 - 3;
    else
      v10 = 0;
    if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB)
      v11 = 0;
    else
      v11 = v9;
  }
  llvm::Instruction::eraseFromParent(v11);
  v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v12 + 7) = v7;
  *((_QWORD *)v12 + 8) = (char *)v7 + 40;
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 296))(v14, a1[19]);
    sub_21DF38D0C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
    v59 = "wrapper_exit";
    v62 = 259;
    v15 = operator new();
    v16 = llvm::BasicBlock::BasicBlock();
    v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v18 = v16 + 40;
    *((_QWORD *)v17 + 7) = v16;
    *((_QWORD *)v17 + 8) = v16 + 40;
    v19 = a1[19];
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(_QWORD *)(*(_QWORD *)(v19 + 80) + 8);
    v22 = **(_QWORD **)(*(_QWORD *)(a1[20] + 24) + 16);
    v23 = *(_QWORD *)(*a1 - 24);
    v24 = *(_QWORD *)((char *)a1 + v23 + 144);
    v59 = v61;
    v60 = 0x500000000;
    if (v21 == v20)
    {
      v45 = (char *)a1 + v23;
      *((_QWORD *)v45 + 7) = v15;
      *((_QWORD *)v45 + 8) = v18;
    }
    else
    {
      v54 = v13;
      do
      {
        if (v21)
          v25 = v21 - 24;
        else
          v25 = 0;
        v26 = *(_QWORD *)(v25 + 40);
        if (v26 != v25 + 40)
        {
          v27 = (llvm::Instruction *)(v26 - 24);
          v28 = v26 ? v26 - 24 : 0;
          v29 = *(unsigned __int8 *)(v28 + 16) - 40;
          v30 = v29 >= 0xFFFFFFF5 ? (uint64_t)v27 : 0;
          if (v29 >= 0xFFFFFFF5 && *(_BYTE *)(v30 + 16) == 29)
          {
            sub_21DF3F430((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8, v30);
            sub_21DF38D0C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
            if (v22 != v24)
            {
              v32 = *(_DWORD *)(v30 + 20) & 0x7FFFFFF;
              if ((_DWORD)v32)
                v33 = *(_QWORD *)(v30 - 32 * v32);
              else
                v33 = 0;
              v34 = v60;
              if (v60 >= (unint64_t)HIDWORD(v60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v34 = v60;
              }
              v35 = (char *)v59 + 16 * v34;
              *v35 = v33;
              v35[1] = v25;
              LODWORD(v60) = v60 + 1;
            }
            llvm::Instruction::eraseFromParent(v27);
          }
        }
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21 != v20);
      v36 = v60;
      v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      *((_QWORD *)v37 + 7) = v15;
      *((_QWORD *)v37 + 8) = v18;
      v13 = v54;
      if (v22 != v24 && v36)
      {
        v38 = sub_21DF203DC((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)"agc.finalize", 12, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 144), **(_QWORD **)(*(_QWORD *)(a1[20] + 24) + 16));
        v39 = *(_QWORD *)(*a1 - 24);
        if ((_DWORD)v60 != 1)
        {
          v49 = **(_QWORD **)(*(_QWORD *)(a1[20] + 24) + 16);
          v57 = 257;
          v50 = sub_21DF38DEC((uint64_t)a1 + v39 + 8, v49, v60, (uint64_t)v56);
          if ((_DWORD)v60)
          {
            v51 = 0;
            v52 = 0;
            do
            {
              sub_21DF38EDC(v50, *(_QWORD *)((char *)v59 + v51), *(_QWORD *)((char *)v59 + v51 + 8));
              ++v52;
              v51 += 16;
            }
            while (v52 < v60);
          }
          v53 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          v55 = v50;
          v57 = 257;
          sub_21DF191A4((uint64_t)(v53 + 8), *(_QWORD *)(v38 + 24), v38, (uint64_t)&v55, 1, (uint64_t)v56);
          v13 = v54;
          goto LABEL_50;
        }
        v40 = v59;
        v41 = (uint64_t)a1 + v39 + 8;
        v57 = 257;
        v42 = *(_QWORD *)(v38 + 24);
        v43 = v38;
        v44 = 1;
LABEL_49:
        sub_21DF191A4(v41, v42, v43, (uint64_t)v40, v44, (uint64_t)v56);
LABEL_50:
        (*(void (**)(_QWORD *))(*a1 + 72))(a1);
        sub_21DF465B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        if (v59 != v61)
          free(v59);
        return v13;
      }
    }
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v43 = v46;
    v47 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v57 = 257;
    v42 = **(_QWORD **)(*(_QWORD *)v46 + 16);
    v41 = (uint64_t)(v47 + 8);
    v40 = 0;
    v44 = 0;
    goto LABEL_49;
  }
  return v13;
}

uint64_t sub_21DF59910(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344)
                                                           + 488))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344), a1, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320));
  v2 = sub_21DF3EC28(v1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return v2;
}

uint64_t sub_21DF59970(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  _DWORD *Name;
  unint64_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  char *v16[2];

  v1 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344)
                                                           + 488))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344), a1, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320));
  v2 = *(_QWORD *)(v1 + 320);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = (llvm::Value *)(v4 - 56);
      else
        v5 = 0;
      v4 = *(_QWORD *)(v4 + 8);
      Name = (_DWORD *)llvm::Value::getName(v5);
      v16[0] = 0;
      v16[1] = 0;
      v14 = 0;
      v15 = 0;
      if (sub_21DF3ED18(Name, v7, v16, &v14) && llvm::GlobalValue::isDeclaration(v5))
      {
        v8 = *(_QWORD *)(v1 + 712);
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1)
          v10 = *(unsigned int *)(v8 + 8);
        else
          v10 = Key;
        v11 = (_QWORD *)(*(_QWORD *)v8 + 8 * v10);
        if (v11 != (_QWORD *)(**(_QWORD **)(v1 + 712) + 8 * *(unsigned int *)(*(_QWORD *)(v1 + 712) + 8))
          && llvm::StringRef::find() != -1)
        {
          sub_21DF3EDCC(v1 + 352, v5, *v11 + 8, v14, v15);
        }
      }
    }
    while (v4 != v3);
  }
  v12 = *(unsigned __int8 *)(v1 + 720);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return v12;
}

uint64_t sub_21DF59AC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  FILE *v14;
  void *Name;
  size_t v16;
  std::string *v17;
  void *v18;
  size_t v19;
  std::string *v20;
  std::string v21;

  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = v4 - 56;
      else
        v5 = 0;
      if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v5)
        && *(_QWORD *)(v5 + 8)
        && (*(_BYTE *)(v5 + 33) & 0x20) == 0)
      {
        v14 = (FILE *)*MEMORY[0x24BDAC8D8];
        Name = (void *)llvm::Value::getName((llvm::Value *)v5);
        sub_21DF5BC3C(&v21, Name, v16);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v21;
        else
          v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
        fprintf(v14, "AGC: %s:%d:%s: !!! Encountered unlowered function call to %s\n", "agc_llvm_air_user_object.cpp", 8296, "virtual BOOL AGCLLVMUserObject::verifyLoweredIR()", (const char *)v17);
        std::string::~string(&v21);
        v18 = (void *)llvm::Value::getName((llvm::Value *)v5);
        sub_21DF5BC3C(&v21, v18, v19);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v21;
        else
          v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
        syslog(3, "AGC: %s:%d:%s: !!! Encountered unlowered function call to %s\n", "agc_llvm_air_user_object.cpp", 8296, "virtual BOOL AGCLLVMUserObject::verifyLoweredIR()", (const char *)v20);
        std::string::~string(&v21);
        abort();
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
    v3 = *(_QWORD *)(v2 + 32);
  }
  if (v3 != v2 + 24)
  {
    v6 = v3;
    while (1)
    {
      if (v6 != v3)
      {
        v7 = v6 ? v6 - 56 : 0;
        if (v7 == a1[19])
          break;
      }
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v2 + 24)
        return 1;
    }
    llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList();
    v8 = *(_QWORD *)(v7 + 56);
    v9 = *(_QWORD **)(v7 + 64);
    *v9 = v8;
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    v10 = a1[19];
    v11 = *(uint64_t **)(v2 + 32);
    llvm::SymbolTableListTraits<llvm::Function>::addNodeToList();
    v12 = *v11;
    *(_QWORD *)(v10 + 56) = *v11;
    *(_QWORD *)(v10 + 64) = v11;
    v10 += 56;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
  }
  return 1;
}

uint64_t sub_21DF59CB4(uint64_t a1, int a2)
{
  char **v4;
  uint64_t Function;
  uint64_t v6;
  std::string::size_type size;
  void **v8;
  std::string *p_dst;
  std::string::size_type v10;
  void **v11;
  std::string *v12;
  uint64_t v13;
  llvm::Instruction *v14;
  uint64_t v15;
  char *v16;
  char **v17;
  BOOL v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string __dst;
  char **v26;
  char *v27[2];

  if (*(_BYTE *)(a1 + 10))
    return 1;
  (*(void (**)(char ***__return_ptr))(**(_QWORD **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 336))(&v26);
  v4 = v26;
  if (v26 != v27)
  {
    do
    {
      Function = llvm::Module::getFunction();
      if (Function)
      {
        v6 = Function;
        if (*((char *)v4 + 55) < 0)
          sub_21DF205EC(&__dst, v4[4], (unint64_t)v4[5]);
        else
          __dst = *(std::string *)(v4 + 4);
        std::string::insert(&__dst, 0, "agx.");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        sub_21DF2BBDC((uint64_t)v23, size + 5);
        if (v24 >= 0)
          v8 = v23;
        else
          v8 = (void **)v23[0];
        if (size)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          memmove(v8, p_dst, size);
        }
        strcpy((char *)v8 + size, ".fast");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v10 = __dst.__r_.__value_.__l.__size_;
        sub_21DF2BBDC((uint64_t)__p, v10 + 8);
        if (v22 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if (v10)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &__dst;
          else
            v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".nonfast");
        v13 = *(_QWORD *)(v6 + 8);
        while (v13)
        {
          v14 = *(llvm::Instruction **)(v13 + 24);
          v13 = *(_QWORD *)(v13 + 8);
          llvm::Instruction::getFastMathFlags(v14);
          llvm::Module::getOrInsertFunction();
          *((_QWORD *)v14 + 9) = *(_QWORD *)(v15 + 24);
          sub_21DF3D87C((uint64_t)v14, v15);
        }
        if (v22 < 0)
          operator delete(__p[0]);
        if (v24 < 0)
          operator delete(v23[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v16 = v4[1];
      if (v16)
      {
        do
        {
          v17 = (char **)v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char **)v4[2];
          v18 = *v17 == (char *)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != v27);
  }
  sub_21DF253BC(v27[0]);
  v19 = sub_21DF2C728(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400), *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320), a2);
  if (!v19)
    return 1;
  else
    return sub_21DF2C968(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v19, *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1674), *(llvm::Function **)(a1 + 152));
}

uint64_t sub_21DF59FE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  llvm::GlobalValue *v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Function *v19;
  BOOL v20;
  llvm::Function *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v2 = sub_21DF2C728(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400), *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320), 2);
  if (!v2)
    return 1;
  v3 = v2;
  v4 = v2 + 24;
  for (i = *(_QWORD *)(v2 + 32); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = (llvm::GlobalValue *)(i - 56);
    else
      v6 = 0;
    if (llvm::GlobalValue::isDeclaration(v6))
    {
      if ((*((_BYTE *)v6 + 34) & 0x80) != 0)
        sub_21DF2CCA0((uint64_t)v6, 3);
    }
  }
  v7 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 32);
  v8 = *(void **)(v7 + 8);
  if (v8)
    v9 = strlen(*(const char **)(v7 + 8));
  else
    v9 = 0;
  sub_21DF2CC40(v3, v8, v9);
  v11 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 32);
  if (*(_QWORD *)(v11 + 16))
    strlen(*(const char **)(v11 + 16));
  llvm::Module::setDataLayout();
  v31 = v3;
  v32[3] = 0;
  v12 = llvm::Linker::linkModules();
  if (!v32)
    (*(void (**)(void))(v32[0] + 32))();
  v13 = MEMORY[0x2207A721C](v31);
  MEMORY[0x2207A7960](v13, 0x10B2C407FF26C1CLL);
  if ((v12 & 1) == 0)
  {
    v14 = *a1;
    v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 344) + 1674))
    {
      v16 = *(_QWORD *)(v15 + 320);
      v17 = v16 + 24;
      v18 = *(_QWORD *)(v16 + 32);
      while (v18 != v17)
      {
        v19 = (llvm::Function *)(v18 - 56);
        v20 = v18 == 0;
        v18 = *(_QWORD *)(v18 + 8);
        if (v20)
          v21 = 0;
        else
          v21 = v19;
        if (v21 != (llvm::Function *)a1[19] && !*((_QWORD *)v21 + 1))
          llvm::Function::eraseFromParent(v21);
      }
    }
    else
    {
      *((_DWORD *)a1 + 8) = 1;
      v22 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 24) + 320);
      v23 = v22 + 24;
      v24 = *(_QWORD *)(v22 + 32);
      if (v24 != v22 + 24)
      {
        do
        {
          v25 = v24 - 56;
          v20 = v24 == 0;
          v24 = *(_QWORD *)(v24 + 8);
          if (v20)
            v26 = 0;
          else
            v26 = v25;
          if (v26 != a1[19])
          {
            if (*(_QWORD *)(v26 + 8))
            {
              if ((*(_BYTE *)(v26 + 33) & 0x20) == 0
                && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v26) & 1) == 0)
              {
                *(_DWORD *)(v26 + 32) = *(_DWORD *)(v26 + 32) & 0xFFFFBFC0 | 0x4007;
                llvm::Function::addFnAttr();
                ++*((_DWORD *)a1 + 8);
              }
            }
            else
            {
              llvm::Function::eraseFromParent((llvm::Function *)v26);
            }
          }
        }
        while (v24 != v23);
        v22 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
      }
      v27 = v22 + 8;
      v28 = *(_QWORD *)(v22 + 16);
      if (v28 != v22 + 8)
      {
        do
        {
          v29 = v28 - 56;
          v20 = v28 == 0;
          v28 = *(_QWORD *)(v28 + 8);
          if (v20)
            v30 = 0;
          else
            v30 = v29;
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v30) & 1) == 0)
          {
            if (*(_QWORD *)(v30 + 8))
              *(_DWORD *)(v30 + 32) = *(_DWORD *)(v30 + 32) & 0xFFFFBFC0 | 0x4007;
            else
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v30);
          }
        }
        while (v28 != v27);
      }
      if (*((_DWORD *)a1 + 8) > 1u)
      {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 320), *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320));
        *((_DWORD *)a1 + 8) = 1;
      }
    }
  }
  return v12 ^ 1u;
}

uint64_t sub_21DF5A34C(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::GlobalValue *v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  llvm::Module *v12;
  char *v13;
  uint64_t v14;
  llvm::Module *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *Name;
  uint64_t v24;
  llvm::GlobalVariable *v25;
  llvm::ValueHandleBase *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  llvm::Instruction *v53;
  llvm::Instruction *v54;
  uint64_t v55;
  llvm::ValueHandleBase *v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  llvm::ValueHandleBase *v79;
  uint64_t i;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t BitCast;
  uint64_t *v97;
  void *v98;
  uint64_t v99;
  llvm::GetElementPtrInst *v100;
  llvm::ValueHandleBase *v101;
  uint64_t j;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t ElementPtr;
  llvm::ValueHandleBase *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  llvm::ValueHandleBase *v133;
  uint64_t k;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  llvm::Instruction *v145;
  llvm::GlobalValue **v146;
  uint64_t v147;
  llvm::GlobalValue *v148;
  llvm::Type *v149;
  llvm *v150;
  llvm::ValueHandleBase *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v155;
  void *v157;
  uint64_t *v158;
  uint64_t *v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  llvm *v163[2];
  unsigned int v164;
  _BYTE v165[40];
  void *v166;
  uint64_t v167;
  _BYTE v168[16];
  __int16 v169;
  void *v170;
  uint64_t v171;
  _QWORD v172[34];

  v172[32] = *MEMORY[0x24BDAC8D0];
  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_BYTE *)(*((_QWORD *)v1 + 43) + 1662))
  {
    v2 = *((_QWORD *)v1 + 40);
    v3 = v2 + 8;
    v4 = *(_QWORD *)(v2 + 16);
    if (v4 != v2 + 8)
    {
      while (1)
      {
        v6 = v4 ? (llvm::GlobalValue *)(v4 - 56) : 0;
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
        {
          if ((llvm::GlobalValue::isDeclaration(v6) & 1) == 0)
          {
            v8 = *(_DWORD *)(v7 + 8);
            if ((v8 & 0xFE) == 0x12)
              v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
            if ((v8 & 0xFFFFFF00) == 0x200 && *((_QWORD *)v6 + 1))
              break;
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == v3)
          return 1;
      }
      v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v11 = *((_QWORD *)v10 + 50);
      v12 = (llvm::Module *)*((_QWORD *)v10 + 40);
      sub_21DF2C660(v11);
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v11 + 336), v12);
      v13 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v14 = *((_QWORD *)v13 + 50);
      v15 = (llvm::Module *)*((_QWORD *)v13 + 40);
      sub_21DF2C6C4(v14);
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v14 + 344), v15);
      v164 = 128;
      v163[0] = (llvm *)MEMORY[0x2207A6DD8](0x2000, 8);
      sub_21DF5B2E4((uint64_t)v163);
      v165[0] = 0;
      v165[24] = 0;
      v170 = v172;
      v171 = 0x2000000000;
      v16 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
      v17 = v16 + 8;
      v18 = *(_QWORD *)(v16 + 16);
      if (v18 != v16 + 8)
      {
        do
        {
          if (v18)
            v19 = (llvm::Value *)(v18 - 56);
          else
            v19 = 0;
          v20 = *(_QWORD *)v19;
          if (*(_QWORD *)v19 && (llvm::GlobalValue::isDeclaration(v19) & 1) == 0)
          {
            v21 = *(_DWORD *)(v20 + 8);
            if ((v21 & 0xFE) == 0x12)
              v21 = *(_DWORD *)(**(_QWORD **)(v20 + 16) + 8);
            if ((v21 & 0xFFFFFF00) == 0x200)
            {
              v22 = llvm::User::operator new((llvm::User *)0x58);
              Name = (void *)llvm::Value::getName(v19);
              v169 = 261;
              v166 = Name;
              v167 = v24;
              v25 = (llvm::GlobalVariable *)llvm::GlobalVariable::GlobalVariable();
              llvm::GlobalVariable::copyAttributesFrom(v25, v19);
              llvm::GlobalObject::setSection();
              if ((llvm::GlobalValue::isDeclaration(v19) & 1) == 0)
              {
                llvm::ValueMapper::ValueMapper();
                llvm::ValueMapper::mapConstant();
                MEMORY[0x2207A6B2C](&v166);
                llvm::GlobalVariable::setInitializer();
              }
              v26 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, (uint64_t)v19);
              sub_21DF4EB3C(v26, v22);
              v27 = v171;
              if (v171 >= (unint64_t)HIDWORD(v171))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v27 = v171;
              }
              *((_QWORD *)v170 + v27) = v19;
              LODWORD(v171) = v171 + 1;
            }
          }
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18 != v17);
        v28 = (char *)v170;
        if ((_DWORD)v171)
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v161 = (char *)v170 + 8 * v171;
          do
          {
            v33 = *(_QWORD *)(*(_QWORD *)v28 + 8);
            if (v33)
            {
              while (1)
              {
                v34 = *(_QWORD *)(v33 + 24);
                v35 = *(unsigned __int8 *)(v34 + 16);
                if (v34 && v35 >= 0x1C)
                  break;
                if (v34)
                  v37 = v35 == 5;
                else
                  v37 = 0;
                if (v37)
                {
                  if ((unint64_t)v32 >= v31)
                  {
                    v43 = (v32 - v29) >> 3;
                    v44 = v43 + 1;
                    if ((unint64_t)(v43 + 1) >> 61)
LABEL_285:
                      abort();
                    if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v44)
                      v44 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                    if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                      v41 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v41 = v44;
                    if (v41)
                      v41 = (unint64_t)sub_21DF527B8(v41);
                    else
                      v42 = 0;
                    v45 = (char *)(v41 + 8 * v43);
                    *(_QWORD *)v45 = v34;
                    v38 = v45 + 8;
                    while (v30 != v29)
                    {
                      v47 = *((_QWORD *)v30 - 1);
                      v30 -= 8;
                      *((_QWORD *)v45 - 1) = v47;
                      v45 -= 8;
                    }
                    goto LABEL_68;
                  }
LABEL_51:
                  *(_QWORD *)v32 = v34;
                  v32 += 8;
                  v38 = v32;
                  goto LABEL_71;
                }
                v38 = v30;
LABEL_71:
                v33 = *(_QWORD *)(v33 + 8);
                v30 = v38;
                if (!v33)
                  goto LABEL_72;
              }
              if ((unint64_t)v32 >= v31)
              {
                v39 = (v32 - v29) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  goto LABEL_285;
                if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v40)
                  v40 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v40;
                if (v41)
                  v41 = (unint64_t)sub_21DF527B8(v41);
                else
                  v42 = 0;
                v45 = (char *)(v41 + 8 * v39);
                *(_QWORD *)v45 = v34;
                v38 = v45 + 8;
                while (v30 != v29)
                {
                  v46 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *((_QWORD *)v45 - 1) = v46;
                  v45 -= 8;
                }
LABEL_68:
                v31 = v41 + 8 * v42;
                if (v29)
                  operator delete(v29);
                v29 = v45;
                v32 = v38;
                goto LABEL_71;
              }
              goto LABEL_51;
            }
LABEL_72:
            v28 += 8;
          }
          while (v28 != v161);
          if (v29 == v32)
          {
            v48 = 0;
          }
          else
          {
            v48 = 0;
            v49 = 0;
            v160 = 0;
            do
            {
              v51 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              v50 = v51;
              v52 = *(unsigned __int8 *)(v51 + 16);
              if (v51 && v52 == 60 || v50 && v52 == 84)
              {
                v53 = (llvm::Instruction *)v50;
                v54 = (llvm::Instruction *)llvm::Instruction::clone((llvm::Instruction *)v50);
                llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList();
                v55 = *((_QWORD *)v53 + 3);
                *((_QWORD *)v54 + 4) = (char *)v53 + 24;
                *((_QWORD *)v54 + 3) = v55;
                *(_QWORD *)(v55 + 8) = (char *)v54 + 24;
                *((_QWORD *)v53 + 3) = (char *)v54 + 24;
                llvm::ValueMapper::ValueMapper();
                llvm::ValueMapper::remapInstruction((llvm::ValueMapper *)&v166, v54);
                MEMORY[0x2207A6B2C](&v166);
                v56 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, (uint64_t)v53);
                sub_21DF4EB3C(v56, (uint64_t)v54);
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent(v53);
              }
              else
              {
                v162 = v50;
                if (v50 && v52 == 77)
                {
                  v57 = v49;
                  if (*(_QWORD *)(*(_QWORD *)v50 + 24))
                    llvm::PointerType::get();
                  else
                    llvm::PointerType::get(**(llvm::PointerType ***)v50, (llvm::LLVMContext *)0x40);
                  v76 = llvm::User::operator new((llvm::User *)0x40);
                  sub_21DF5B394((uint64_t)v163, *(_QWORD *)(v50 - 32));
                  v77 = (void *)llvm::Value::getName((llvm::Value *)v50);
                  v169 = 261;
                  v166 = v77;
                  v167 = v78;
                  llvm::BitCastInst::BitCastInst();
                  v79 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, v50);
                  sub_21DF4EB3C(v79, v76);
                  for (i = *(_QWORD *)(v50 + 8); i; v32 = v82)
                  {
                    v81 = *(_QWORD *)(i + 24);
                    if ((unint64_t)v32 >= v31)
                    {
                      v83 = (v32 - v29) >> 3;
                      v84 = v83 + 1;
                      if ((unint64_t)(v83 + 1) >> 61)
                        goto LABEL_285;
                      if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v84)
                        v84 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                      if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                        v85 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v85 = v84;
                      if (v85)
                        v85 = (unint64_t)sub_21DF527B8(v85);
                      else
                        v86 = 0;
                      v87 = (char *)(v85 + 8 * v83);
                      *(_QWORD *)v87 = v81;
                      v82 = v87 + 8;
                      while (v32 != v29)
                      {
                        v88 = *((_QWORD *)v32 - 1);
                        v32 -= 8;
                        *((_QWORD *)v87 - 1) = v88;
                        v87 -= 8;
                      }
                      v31 = v85 + 8 * v86;
                      if (v29)
                        operator delete(v29);
                      v29 = v87;
                    }
                    else
                    {
                      *(_QWORD *)v32 = v81;
                      v82 = v32 + 8;
                    }
                    i = *(_QWORD *)(i + 8);
                  }
                  v89 = v57;
                  if ((unint64_t)v57 >= v160)
                  {
                    v90 = (v57 - (char *)v48) >> 3;
                    v91 = v90 + 1;
                    if ((unint64_t)(v90 + 1) >> 61)
                      goto LABEL_285;
                    if ((uint64_t)(v160 - (_QWORD)v48) >> 2 > v91)
                      v91 = (uint64_t)(v160 - (_QWORD)v48) >> 2;
                    if (v160 - (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                      v92 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v92 = v91;
                    if (v92)
                      v92 = (unint64_t)sub_21DF527B8(v92);
                    else
                      v93 = 0;
                    v117 = (uint64_t *)(v92 + 8 * v90);
                    *v117 = v162;
                    v118 = (char *)(v117 + 1);
                    while (v89 != (char *)v48)
                    {
                      v119 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *--v117 = v119;
                    }
                    v160 = v92 + 8 * v93;
                    if (v48)
                      operator delete(v48);
                    v48 = v117;
                    v49 = v118;
                  }
                  else
                  {
                    *(_QWORD *)v57 = v162;
                    v49 = v57 + 8;
                  }
                }
                else if (v50 && v52 == 62)
                {
                  v159 = (uint64_t *)v49;
                  v58 = *(_DWORD *)(v50 + 20) & 0x7FFFFFF;
                  v59 = (uint64_t *)(v50 - 32 * v58 + 32);
                  if (v59 == (uint64_t *)v50)
                  {
                    v60 = 0;
                    v61 = 0;
                    v71 = -v58;
                  }
                  else
                  {
                    v158 = v48;
                    v60 = 0;
                    v61 = 0;
                    v62 = 0;
                    do
                    {
                      v63 = *v59;
                      if ((unint64_t)v61 >= v62)
                      {
                        v64 = (v61 - v60) >> 3;
                        v65 = v64 + 1;
                        if ((unint64_t)(v64 + 1) >> 61)
                          goto LABEL_285;
                        if ((uint64_t)(v62 - (_QWORD)v60) >> 2 > v65)
                          v65 = (uint64_t)(v62 - (_QWORD)v60) >> 2;
                        if (v62 - (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                          v66 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v66 = v65;
                        if (v66)
                          v66 = (unint64_t)sub_21DF527B8(v66);
                        else
                          v67 = 0;
                        v68 = (char *)(v66 + 8 * v64);
                        *(_QWORD *)v68 = v63;
                        v69 = v68 + 8;
                        while (v61 != v60)
                        {
                          v70 = *((_QWORD *)v61 - 1);
                          v61 -= 8;
                          *((_QWORD *)v68 - 1) = v70;
                          v68 -= 8;
                        }
                        v62 = v66 + 8 * v67;
                        if (v60)
                          operator delete(v60);
                        v60 = v68;
                        v61 = v69;
                        v50 = v162;
                      }
                      else
                      {
                        *(_QWORD *)v61 = v63;
                        v61 += 8;
                      }
                      v59 += 4;
                    }
                    while (v59 != (uint64_t *)v50);
                    v71 = -(uint64_t)(*(_DWORD *)(v50 + 20) & 0x7FFFFFF);
                    v48 = v158;
                  }
                  v97 = (uint64_t *)sub_21DF5B394((uint64_t)v163, *(_QWORD *)(v50 + 32 * v71))[2];
                  v98 = (void *)llvm::Value::getName((llvm::Value *)v50);
                  v169 = 261;
                  v166 = v98;
                  v167 = v99;
                  v100 = (llvm::GetElementPtrInst *)sub_21DF5B450(v97, (uint64_t **)v60, (v61 - v60) >> 3);
                  llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v50);
                  llvm::GetElementPtrInst::setIsInBounds(v100);
                  v101 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, v50);
                  sub_21DF4EB3C(v101, (uint64_t)v100);
                  for (j = *(_QWORD *)(v50 + 8); j; v32 = v104)
                  {
                    v103 = *(_QWORD *)(j + 24);
                    if ((unint64_t)v32 >= v31)
                    {
                      v105 = (v32 - v29) >> 3;
                      v106 = v105 + 1;
                      if ((unint64_t)(v105 + 1) >> 61)
                        goto LABEL_285;
                      if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v106)
                        v106 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                      if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                        v107 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v107 = v106;
                      if (v107)
                        v107 = (unint64_t)sub_21DF527B8(v107);
                      else
                        v108 = 0;
                      v109 = (char *)(v107 + 8 * v105);
                      *(_QWORD *)v109 = v103;
                      v104 = v109 + 8;
                      while (v32 != v29)
                      {
                        v110 = *((_QWORD *)v32 - 1);
                        v32 -= 8;
                        *((_QWORD *)v109 - 1) = v110;
                        v109 -= 8;
                      }
                      v31 = v107 + 8 * v108;
                      if (v29)
                        operator delete(v29);
                      v29 = v109;
                    }
                    else
                    {
                      *(_QWORD *)v32 = v103;
                      v104 = v32 + 8;
                    }
                    j = *(_QWORD *)(j + 8);
                  }
                  v111 = v159;
                  if ((unint64_t)v159 >= v160)
                  {
                    v113 = v159 - v48;
                    v114 = v113 + 1;
                    if ((unint64_t)(v113 + 1) >> 61)
                      goto LABEL_285;
                    if ((uint64_t)(v160 - (_QWORD)v48) >> 2 > v114)
                      v114 = (uint64_t)(v160 - (_QWORD)v48) >> 2;
                    if (v160 - (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                      v115 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v115 = v114;
                    if (v115)
                      v115 = (unint64_t)sub_21DF527B8(v115);
                    else
                      v116 = 0;
                    v143 = (uint64_t *)(v115 + 8 * v113);
                    *v143 = v50;
                    v112 = (char *)(v143 + 1);
                    while (v111 != v48)
                    {
                      v144 = *--v111;
                      *--v143 = v144;
                    }
                    v160 = v115 + 8 * v116;
                    if (v48)
                      operator delete(v48);
                    v48 = v143;
                  }
                  else
                  {
                    *v159 = v50;
                    v112 = (char *)(v159 + 1);
                  }
                  if (v60)
                    operator delete(v60);
                  v49 = v112;
                }
                else
                {
                  if (v52 == 5)
                    v72 = v50;
                  else
                    v72 = 0;
                  if (*(_WORD *)(v72 + 18) == 34)
                  {
                    v166 = v168;
                    v167 = 0x2000000000;
                    v73 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
                    v74 = v73 - 1;
                    if (v73 == 1)
                    {
                      v75 = 1;
                    }
                    else
                    {
                      v120 = v72 + 32;
                      do
                      {
                        sub_21DF19CD0((uint64_t)&v166, *(_QWORD *)(v120 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF)));
                        v120 += 32;
                        --v74;
                      }
                      while (v74);
                      v75 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
                    }
                    v121 = sub_21DF5B394((uint64_t)v163, *(_QWORD *)(v72 - 32 * v75))[2];
                    if (v121)
                      v122 = *(unsigned __int8 *)(v121 + 16) >= 0x1Cu;
                    else
                      v122 = 0;
                    if (v122)
                    {
                      ElementPtr = sub_21DF5B450((uint64_t *)v121, (uint64_t **)v166, v167);
                      llvm::Instruction::insertAfter();
                    }
                    else
                    {
                      ElementPtr = llvm::ConstantExpr::getGetElementPtr();
                    }
                    v133 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, v72);
                    sub_21DF4EB3C(v133, ElementPtr);
                    for (k = *(_QWORD *)(v72 + 8); k; v32 = v136)
                    {
                      v135 = *(_QWORD *)(k + 24);
                      if ((unint64_t)v32 >= v31)
                      {
                        v137 = (v32 - v29) >> 3;
                        v138 = v137 + 1;
                        if ((unint64_t)(v137 + 1) >> 61)
                          goto LABEL_285;
                        if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v138)
                          v138 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                        if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                          v139 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v139 = v138;
                        if (v139)
                          v139 = (unint64_t)sub_21DF527B8(v139);
                        else
                          v140 = 0;
                        v141 = (char *)(v139 + 8 * v137);
                        *(_QWORD *)v141 = v135;
                        v136 = v141 + 8;
                        while (v32 != v29)
                        {
                          v142 = *((_QWORD *)v32 - 1);
                          v32 -= 8;
                          *((_QWORD *)v141 - 1) = v142;
                          v141 -= 8;
                        }
                        v31 = v139 + 8 * v140;
                        if (v29)
                          operator delete(v29);
                        v29 = v141;
                      }
                      else
                      {
                        *(_QWORD *)v32 = v135;
                        v136 = v32 + 8;
                      }
                      k = *(_QWORD *)(k + 8);
                    }
                    if (v166 != v168)
                      free(v166);
                  }
                  else
                  {
                    v94 = sub_21DF5B394((uint64_t)v163, *(_QWORD *)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF)))[2];
                    if (v94)
                      v95 = *(unsigned __int8 *)(v94 + 16) >= 0x1Cu;
                    else
                      v95 = 0;
                    if (v95)
                    {
                      BitCast = llvm::User::operator new((llvm::User *)0x40);
                      llvm::PointerType::get();
                      v169 = 257;
                      llvm::BitCastInst::BitCastInst();
                      llvm::Instruction::insertAfter();
                    }
                    else
                    {
                      llvm::PointerType::get();
                      BitCast = llvm::ConstantExpr::getBitCast();
                    }
                    v124 = (llvm::ValueHandleBase *)sub_21DF5B394((uint64_t)v163, v72);
                    sub_21DF4EB3C(v124, BitCast);
                    while (1)
                    {
                      v72 = *(_QWORD *)(v72 + 8);
                      if (!v72)
                        break;
                      v125 = *(_QWORD *)(v72 + 24);
                      if ((unint64_t)v32 >= v31)
                      {
                        v126 = (v32 - v29) >> 3;
                        v127 = v126 + 1;
                        if ((unint64_t)(v126 + 1) >> 61)
                          goto LABEL_285;
                        if ((uint64_t)(v31 - (_QWORD)v29) >> 2 > v127)
                          v127 = (uint64_t)(v31 - (_QWORD)v29) >> 2;
                        if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                          v128 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v128 = v127;
                        if (v128)
                          v128 = (unint64_t)sub_21DF527B8(v128);
                        else
                          v129 = 0;
                        v130 = (char *)(v128 + 8 * v126);
                        *(_QWORD *)v130 = v125;
                        v131 = v130 + 8;
                        while (v32 != v29)
                        {
                          v132 = *((_QWORD *)v32 - 1);
                          v32 -= 8;
                          *((_QWORD *)v130 - 1) = v132;
                          v130 -= 8;
                        }
                        v31 = v128 + 8 * v129;
                        if (v29)
                          operator delete(v29);
                        v29 = v130;
                        v32 = v131;
                      }
                      else
                      {
                        *(_QWORD *)v32 = v125;
                        v32 += 8;
                      }
                    }
                  }
                }
              }
            }
            while (v29 != v32);
            while (v49 != (char *)v48)
            {
              v145 = (llvm::Instruction *)*((_QWORD *)v49 - 1);
              v49 -= 8;
              llvm::Instruction::eraseFromParent(v145);
            }
          }
          if ((_DWORD)v171)
          {
            v146 = (llvm::GlobalValue **)v170;
            v147 = 8 * v171;
            do
            {
              v148 = *v146;
              if ((llvm::GlobalValue::isDeclaration(*v146) & 1) == 0)
              {
                if (*((_QWORD *)v148 + 1))
                {
                  llvm::Constant::getNullValue(*(llvm::Constant **)v148, v149);
                  llvm::Value::replaceAllUsesWith();
                }
                llvm::GlobalVariable::eraseFromParent(v148);
              }
              ++v146;
              v147 -= 8;
            }
            while (v147);
          }
          if (v48)
            operator delete(v48);
          if (v29)
            operator delete(v29);
          v28 = (char *)v170;
        }
        if (v28 != (char *)v172)
          free(v28);
      }
      sub_21DF5B48C((uint64_t)v165);
      v150 = v163[0];
      if (v164)
      {
        v151 = (llvm *)((char *)v163[0] + 40);
        v152 = (unint64_t)v164 << 6;
        do
        {
          v153 = *((_QWORD *)v151 - 2);
          if ((v153 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v155 = *((_QWORD *)v151 + 2);
            if (v155 != -8192 && v155 != -4096 && v155 != 0)
            {
              llvm::ValueHandleBase::RemoveFromUseList(v151);
              v153 = *((_QWORD *)v151 - 2);
            }
          }
          if (v153 != -8192 && v153 != -4096 && v153 != 0)
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v151 - 32));
          v151 = (llvm::ValueHandleBase *)((char *)v151 + 64);
          v152 -= 64;
        }
        while (v152);
        v150 = v163[0];
        v157 = (void *)((unint64_t)v164 << 6);
      }
      else
      {
        v157 = 0;
      }
      llvm::deallocate_buffer(v150, v157);
    }
  }
  return 1;
}

BOOL sub_21DF5B224(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  return (!*(_BYTE *)(a1 + 10) || *(_BYTE *)(v1 + 1674)) && *(_BYTE *)(v1 + 1658) != 0;
}

BOOL sub_21DF5B25C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  return (!*(_BYTE *)(a1 + 10) || *(_BYTE *)(v1 + 1674)) && *(_BYTE *)(v1 + 1659) != 0;
}

BOOL sub_21DF5B294(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  return (!*(_BYTE *)(a1 + 10) || *(_BYTE *)(v1 + 1674)) && *(_BYTE *)(v1 + 1660) != 0;
}

uint64_t sub_21DF5B2D4(_QWORD *a1)
{
  return sub_21DF578C0((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

uint64_t sub_21DF5B2E4(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 6));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1F15B8;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 56;
      result = (uint64_t)v3 + 64;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

_QWORD *sub_21DF5B394(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_21DF5B518(&v7, a2);
  v7 = &unk_24E1F15B8;
  v10 = a1;
  v11 = 0;
  v3 = sub_21DF5B56C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)sub_21DF5B600(a1, (uint64_t)&v7, (uint64_t)v11);
    sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 6;
    v4[6] = 0;
    v4[7] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

uint64_t sub_21DF5B450(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  return sub_21DF1AA2C(**(_QWORD **)(v3 + 16), a1, a2, a3);
}

uint64_t sub_21DF5B48C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 16);
    v3 = *(llvm **)result;
    if ((_DWORD)v2)
    {
      v4 = (_QWORD *)((char *)v3 + 8);
      v5 = 16 * v2;
      do
      {
        if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*v4)
            llvm::MetadataTracking::untrack();
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v3 = *(llvm **)v1;
      v6 = (void *)(16 * *(unsigned int *)(v1 + 16));
    }
    else
    {
      v6 = 0;
    }
    result = llvm::deallocate_buffer(v3, v6);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

_QWORD *sub_21DF5B518(_QWORD *a1, uint64_t a2)
{
  llvm::ValueHandleBase *v3;

  a1[1] = 2;
  a1[2] = 0;
  v3 = (llvm::ValueHandleBase *)(a1 + 1);
  *((_QWORD *)v3 + 2) = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v3);
  *a1 = MEMORY[0x24BED83B0] + 16;
  return a1;
}

uint64_t sub_21DF5B56C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 6);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 6);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_21DF5B600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF5B6B0(a1, v6);
  v8 = 0;
  sub_21DF5B56C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF5B6B0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((unint64_t)v8 << 6, 8);
  if (!v4)
    return sub_21DF5B2E4(a1);
  sub_21DF5B2E4(a1);
  v9 = (void *)(v3 << 6);
  if ((_DWORD)v3)
  {
    v10 = (_QWORD *)((char *)v4 + 32);
    v11 = v3 << 6;
    do
    {
      v12 = *(v10 - 1);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        sub_21DF5B56C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v15 = v18;
        sub_21DF569CC((llvm::ValueHandleBase *)(v18 + 8), v10 - 3);
        *(_QWORD *)(v15 + 32) = *v10;
        sub_21DF5B820((llvm::ValueHandleBase *)(v15 + 40), 3u, v10 + 1);
        ++*(_DWORD *)(a1 + 8);
        v16 = v10[3];
        if (v16 != -8192 && v16 != -4096 && v16)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v10 + 1));
      }
      v13 = *(v10 - 1);
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v10 - 3));
      v10 += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return llvm::deallocate_buffer(v4, v9);
}

llvm::ValueHandleBase *sub_21DF5B820(llvm::ValueHandleBase *this, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;

  *(_QWORD *)this = 2 * a2;
  *((_QWORD *)this + 1) = 0;
  v4 = a3[2];
  *((_QWORD *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  return this;
}

uint64_t sub_21DF5B874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v10 = v2;
  v11 = 0;
  result = sub_21DF5B56C(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if ((_DWORD)result)
  {
    v4 = v11;
    v5 = v11[7];
    if (v5 != -8192 && v5 != -4096 && v5 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 + 5));
    v12[1] = 0;
    v12[2] = -8192;
    v11 = &unk_24E1F15B8;
    v12[0] = 2;
    v12[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v12);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return result;
}

uint64_t sub_21DF5B968(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  void *v17;
  _BYTE v18[16];
  uint64_t v19;
  int32x2_t *v20;
  void *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v18, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v17 = &unk_24E1F15B8;
  v20 = v4;
  v25 = 0;
  result = sub_21DF5B56C((uint64_t)*v4, v4[2].i32[0], v19, &v25);
  if ((_DWORD)result)
    v6 = v25;
  else
    v6 = (_QWORD *)(*(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 6));
  if ((_QWORD *)(*(_QWORD *)v20 + ((unint64_t)v20[2].u32[0] << 6)) != v6)
  {
    sub_21DF5B820((llvm::ValueHandleBase *)v15, 3u, v6 + 5);
    v7 = v20;
    v8 = v6[7];
    if (v8 != -8192 && v8 != -4096 && v8 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v6 + 5));
    v26[1] = 0;
    v27 = -8192;
    v25 = &unk_24E1F15B8;
    v26[0] = 2;
    v28 = 0;
    sub_21DF569CC((llvm::ValueHandleBase *)(v6 + 1), v26);
    v10 = v27;
    v6[4] = v28;
    if (v10 != -8192 && v10 != -4096 && v10)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v11 = (uint64_t)v20;
    sub_21DF5B820((llvm::ValueHandleBase *)v13, 3u, v15);
    sub_21DF5B518(&v21, a2);
    v21 = &unk_24E1F15B8;
    v24 = v11;
    sub_21DF5B820((llvm::ValueHandleBase *)v26, (LODWORD(v22[0]) >> 1) & 3, v22);
    v25 = &unk_24E1F15B8;
    v28 = v24;
    sub_21DF5B820((llvm::ValueHandleBase *)v29, 3u, v13);
    v31 = 0;
    result = sub_21DF5B56C(*(_QWORD *)v11, *(_DWORD *)(v11 + 16), v27, &v31);
    if ((result & 1) == 0)
    {
      v12 = (_QWORD *)sub_21DF5B600(v11, (uint64_t)&v25, v31);
      sub_21DF569CC((llvm::ValueHandleBase *)(v12 + 1), v26);
      v12[4] = v28;
      result = (uint64_t)sub_21DF5B820((llvm::ValueHandleBase *)(v12 + 5), 3u, v29);
    }
    if (v30 != -8192 && v30 != -4096 && v30)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    if (v27 != -8192 && v27 != -4096 && v27)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    if (v23 != -8192 && v23 != -4096 && v23)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    if (v14 != -8192 && v14 != -4096 && v14)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
    if (v16 != -8192 && v16 != -4096 && v16)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
  }
  if (v19 != -8192 && v19 != -4096)
  {
    if (v19)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
  }
  return result;
}

_QWORD *sub_21DF5BC3C(_QWORD *__dst, void *__src, size_t __len)
{
  if (__src)
    return sub_21DF24420(__dst, __src, __len);
  *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  return __dst;
}

uint64_t sub_21DF5BC50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != a5)
  {
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
    if (a4 != a5)
    {
      v9 = *a5;
      v10 = *a4;
      *(_QWORD *)(v10 + 8) = a5;
      *a5 = v10;
      v11 = *a2;
      *(_QWORD *)(v9 + 8) = a2;
      *a4 = v11;
      *(_QWORD *)(v11 + 8) = a4;
      *a2 = v9;
    }
  }
  return result;
}

uint64_t sub_21DF5BCC0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result + 40;
  v3 = *(_QWORD *)(result + 48);
  if (v3 != result + 40)
  {
    do
    {
      result = v3 - 24;
      v5 = v3 == 0;
      v3 = *(_QWORD *)(v3 + 8);
      if (v5)
        v6 = 0;
      else
        v6 = result;
      if (*(_BYTE *)(v6 + 16) == 59)
      {
        if (*(_QWORD *)a2)
          v7 = *(_QWORD *)a2 - 24;
        else
          v7 = 0;
        if (result == v7)
          *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        else
          result = llvm::Instruction::moveBefore();
      }
    }
    while (v3 != v2);
  }
  return result;
}

void sub_21DF5BD40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3CD0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3CD0))
    {
      qword_2553B3CB0 = 0;
      *(_QWORD *)&dword_2553B3CB8 = 0;
      qword_2553B3CC0 = 0x2000000000;
      __cxa_atexit((void (*)(void *))sub_21DF5BDA8, &qword_2553B3CB0, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3CD0);
    }
  }
}

uint64_t sub_21DF5BDA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_21DF5BE20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t Function;
  const void *v20;
  uint64_t *i;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *j;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void **v55;
  uint64_t v56;
  const void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::GlobalValue *v74;
  llvm::GlobalValue *v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  char v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  int v107;
  _BYTE v108[128];
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  _BYTE v113[128];
  BOOL v114[16];
  char v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[64];
  _QWORD *v119;
  uint64_t v120;
  _QWORD v121[10];

  v121[8] = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*(_BYTE *)(*((_QWORD *)v9 + 43) + 1674) || *((_BYTE *)a1 + 37))
    goto LABEL_3;
  v23 = *((_QWORD *)v9 + 40);
  v24 = (uint64_t *)(v23 + 168);
  v25 = *(char *)(v23 + 191);
  if (v25 < 0)
  {
    if (*(_QWORD *)(v23 + 176) != 20)
      goto LABEL_177;
    v24 = (uint64_t *)*v24;
  }
  else if (v25 != 20)
  {
    goto LABEL_177;
  }
  v76 = (uint64_t *)*v24;
  v77 = v24[1];
  v78 = *((_DWORD *)v24 + 4);
  if (v76 == (uint64_t *)0x535F786574726556 && v77 == 0x6F72505F65746174 && v78 == 1835102823)
  {
    sub_21DF28954((uint64_t)a1, "Disabling non-inlined functions for ES1 vertex shader", a3, a4, a5, a6, a7, a8, v103);
LABEL_3:
    v10 = 0;
    v11 = 0;
    goto LABEL_4;
  }
LABEL_177:
  v81 = a1[20];
  if ((*(_WORD *)(v81 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    v82 = *(_QWORD *)(v81 + 88);
    if ((*(_WORD *)(v81 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v81);
      v83 = *(_QWORD *)(v81 + 88);
      goto LABEL_182;
    }
  }
  else
  {
    v82 = *(_QWORD *)(v81 + 88);
  }
  v83 = v82;
LABEL_182:
  v84 = v83 + 40 * *(_QWORD *)(v81 + 96);
  if (v82 != v84)
  {
    v85 = 0;
    while (1)
    {
      if (*(_QWORD *)(v82 + 8))
      {
        v86 = *(_QWORD *)(a1[9] + 8 * *(unsigned int *)(v82 + 32));
        v87 = sub_21DF241E0(*(llvm::MDString **)(v86 - 8 * *(unsigned int *)(v86 + 8) + 8), "air.indirect_buffer");
        if (v87)
        {
          sub_21DF28954(v87, "Disabling non-inlined functions due to use of indirect argument buffer", v88, v89, v90, v91, v92, v93, v103);
          v11 = 0;
          goto LABEL_200;
        }
        if (sub_21DF241E0(*(llvm::MDString **)(v86 - 8 * *(unsigned int *)(v86 + 8) + 8), "air.texture"))
        {
          LOBYTE(v119) = 0;
          LOBYTE(v116) = 0;
          v94 = sub_21DF7AB58(v86, &v109, &v104, &v119, &v116, v114, v114);
          v101 = !v94 || v119 == 0;
          if (!v101 && v116 != 0)
          {
            sub_21DF28954(v94, "Inlining all texture functions due to the use of a RW texture", v95, v96, v97, v98, v99, v100, v103);
            v85 = 1;
          }
        }
      }
      v82 += 40;
      if (v82 == v84)
        goto LABEL_198;
    }
  }
  v85 = 0;
LABEL_198:
  v11 = 1;
LABEL_200:
  v10 = v85 & 1;
LABEL_4:
  *((_DWORD *)a1 + 8) = 0;
  v12 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
  v13 = v12 + 24;
  v14 = *(_QWORD *)(v12 + 32);
  if (v14 != v12 + 24)
  {
    while (1)
    {
      v15 = v14 - 56;
      v22 = v14 == 0;
      v14 = *(_QWORD *)(v14 + 8);
      v16 = v22 ? 0 : v15;
      llvm::Function::removeFnAttr();
      if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v16))
        break;
      if (!*(_QWORD *)(v16 + 8))
        goto LABEL_15;
LABEL_22:
      if (v14 == v13)
        goto LABEL_23;
    }
    if (v16 == a1[20])
    {
      v17 = *(_DWORD *)(v16 + 32);
      *(_DWORD *)(v16 + 32) = v17 & 0xFFFFFFF0;
      if ((v17 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v16) & 1) == 0)
        *(_DWORD *)(v16 + 32) |= 0x4000u;
      if ((v11 & 1) == 0)
        *(_QWORD *)(a1[20] + 112) = 0;
      ++*((_DWORD *)a1 + 8);
      goto LABEL_22;
    }
    if (*(_QWORD *)(v16 + 8))
    {
      ++*((_DWORD *)a1 + 8);
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v16 + 32) & 0xFFFFBFC0 | 0x4007;
      if ((v11 & 1) == 0)
        llvm::Function::addFnAttr();
      goto LABEL_22;
    }
LABEL_15:
    llvm::Function::eraseFromParent((llvm::Function *)v16);
    goto LABEL_22;
  }
LABEL_23:
  if ((v11 & 1) == 0)
    return;
  v18 = 0;
  v119 = v121;
  v120 = 0x800000000;
  v109 = v113;
  v110 = v113;
  v111 = 16;
  v112 = 0;
  do
  {
    if (off_24E1F1508[v18])
      strlen(off_24E1F1508[v18]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v20 = (const void *)Function;
      if (*(_QWORD *)(Function + 8))
      {
        sub_21DF19CD0((uint64_t)&v119, Function);
        sub_21DF69C20((uint64_t)&v104, &v109, v20);
      }
    }
    ++v18;
  }
  while (v18 != 2);
  sub_21DF35B3C();
  if (dword_2553B3CE8)
  {
    for (i = (uint64_t *)qword_2553B3CE0; ; ++i)
    {
      v22 = !*i || *i == -8;
      if (!v22)
        break;
    }
  }
  else
  {
    i = (uint64_t *)qword_2553B3CE0;
  }
  v26 = qword_2553B3CE0 + 8 * dword_2553B3CE8;
  if (i != (uint64_t *)v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = *i;
    do
    {
      v30 = llvm::Module::getFunction();
      if (v30)
      {
        v31 = (const void *)v30;
        if (*(_QWORD *)(v30 + 8))
        {
          if (*(_BYTE *)(v29 + 31))
            v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 24) + 16) + 8 * *(unsigned __int8 *)(v29 + 31) + 8);
          v32 = *(_DWORD *)(v29 + 8);
          if (v32 == 3 || v32 == 8 || v10)
          {
            sub_21DF19CD0((uint64_t)&v119, v30);
            sub_21DF69C20((uint64_t)&v104, &v109, v31);
            v32 = *(_DWORD *)(v29 + 8);
          }
          if ((v32 | 4) == 5 && (*(unsigned int (**)(_QWORD *))(*a1 + 248))(a1))
          {
            sub_21DF19CD0((uint64_t)&v119, (uint64_t)v31);
            sub_21DF69C20((uint64_t)&v104, &v109, v31);
            v27 = 1;
          }
        }
      }
      do
      {
        v33 = i[1];
        ++i;
        v29 = v33;
        if (v33)
          v34 = v29 == -8;
        else
          v34 = 1;
      }
      while (v34);
    }
    while (i != (uint64_t *)v26);
    if ((v10 & 1) == 0)
      goto LABEL_82;
    goto LABEL_64;
  }
  v28 = 0;
  v27 = 0;
  if ((v10 & 1) != 0)
  {
LABEL_64:
    sub_21DF634A0();
    if (dword_2553B3BF0)
    {
      for (j = (_QWORD *)qword_2553B3BE8; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = (_QWORD *)qword_2553B3BE8;
    }
    v37 = qword_2553B3BE8 + 8 * dword_2553B3BF0;
    while (j != (_QWORD *)v37)
    {
      v38 = llvm::Module::getFunction();
      if (v38)
      {
        v39 = (const void *)v38;
        if (*(_QWORD *)(v38 + 8))
        {
          sub_21DF19CD0((uint64_t)&v119, v38);
          sub_21DF69C20((uint64_t)&v104, &v109, v39);
        }
      }
      do
      {
        v41 = j[1];
        ++j;
        v40 = v41;
        if (v41)
          v42 = v40 == -8;
        else
          v42 = 1;
      }
      while (v42);
    }
  }
LABEL_82:
  if (((v28 != 0) & v27) == 1)
  {
    v43 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
    v44 = v43 + 24;
    v45 = *(_QWORD *)(v43 + 32);
    if (v45 != v43 + 24)
    {
      while (1)
      {
        v46 = v45 - 56;
        v22 = v45 == 0;
        v45 = *(_QWORD *)(v45 + 8);
        v47 = v22 ? 0 : v46;
        if (v47 != a1[20])
          break;
LABEL_99:
        if (v45 == v44)
          goto LABEL_100;
      }
      if ((*(_WORD *)(v47 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v47);
        v48 = *(_QWORD **)(v47 + 88);
        if ((*(_WORD *)(v47 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v47);
          v49 = *(_QWORD **)(v47 + 88);
LABEL_93:
          v50 = &v49[5 * *(_QWORD *)(v47 + 96)];
          while (v48 != v50)
          {
            if (*v48 == v28 && v48[1])
            {
              sub_21DF19CD0((uint64_t)&v119, v47);
              llvm::Function::addFnAttr();
              goto LABEL_99;
            }
            v48 += 5;
          }
          goto LABEL_99;
        }
      }
      else
      {
        v48 = *(_QWORD **)(v47 + 88);
      }
      v49 = v48;
      goto LABEL_93;
    }
  }
LABEL_100:
  v51 = v120;
  while (v51)
  {
    v52 = v119[--v51];
    LODWORD(v120) = v51;
    v53 = *(_QWORD *)(v52 + 8);
    if (v53)
    {
      do
      {
        v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 24) + 40) + 56);
        if (v54 != a1[20])
        {
          sub_21DF69C20((uint64_t)&v104, &v109, *(const void **)(*(_QWORD *)(*(_QWORD *)(v53 + 24) + 40) + 56));
          if ((_BYTE)v106)
          {
            llvm::Function::addFnAttr();
            sub_21DF19CD0((uint64_t)&v119, v54);
          }
        }
        v53 = *(_QWORD *)(v53 + 8);
      }
      while (v53);
      v51 = v120;
    }
  }
  v116 = v118;
  v117 = 0x800000000;
  sub_21DF63640(a1, (uint64_t)&v116);
  v55 = (const void **)v116;
  v104 = v108;
  v105 = v108;
  v106 = 16;
  v107 = 0;
  if (!(_DWORD)v117)
    goto LABEL_147;
  v56 = 8 * v117;
  do
  {
    v57 = *v55++;
    sub_21DF69C20((uint64_t)v114, &v104, v57);
    v56 -= 8;
  }
  while (v56);
  v58 = v117;
  if (!(_DWORD)v117)
    goto LABEL_147;
  do
  {
    v59 = *((_QWORD *)v116 + --v58);
    LODWORD(v117) = v58;
    v60 = *(_QWORD *)(v59 + 8);
    if (!v60)
      continue;
    do
    {
      v61 = *(_QWORD *)(v60 + 24);
      v62 = *(unsigned __int8 *)(v61 + 16);
      if (v61)
        v63 = v62 >= 0x1C;
      else
        v63 = 0;
      if (v63)
      {
        v65 = v62 - 28;
      }
      else
      {
        if (v61)
          v64 = v62 == 5;
        else
          v64 = 0;
        if (!v64)
        {
LABEL_127:
          if (!v61 || v62 != 84)
            goto LABEL_144;
          v66 = *(_QWORD *)(v61 - 32);
          if (!v66 || *(_BYTE *)(v66 + 16) || *(_QWORD *)(v66 + 24) != *(_QWORD *)(v61 + 72))
            v66 = 0;
          llvm::Function::addFnAttr();
          if ((*(_WORD *)(v66 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v66);
            v67 = *(unsigned int **)(v66 + 88);
            if ((*(_WORD *)(v66 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v66);
              v68 = *(unsigned int **)(v66 + 88);
LABEL_138:
              v69 = &v68[10 * *(_QWORD *)(v66 + 96)];
              while (v67 != v69)
              {
                if (*(_QWORD *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32 * v67[8]) == v59)
                {
                  sub_21DF69C20((uint64_t)v114, &v104, v67);
                  if (v115)
                    sub_21DF19CD0((uint64_t)&v116, (uint64_t)v67);
                }
                v67 += 10;
              }
              goto LABEL_144;
            }
          }
          else
          {
            v67 = *(unsigned int **)(v66 + 88);
          }
          v68 = v67;
          goto LABEL_138;
        }
        v65 = *(unsigned __int16 *)(v61 + 18);
      }
      if (v65 != 49)
        goto LABEL_127;
      sub_21DF69C20((uint64_t)v114, &v104, *(const void **)(v60 + 24));
      if (v115)
        sub_21DF19CD0((uint64_t)&v116, v61);
LABEL_144:
      v60 = *(_QWORD *)(v60 + 8);
    }
    while (v60);
    v58 = v117;
  }
  while (v58);
LABEL_147:
  if (MGGetBoolAnswer())
  {
    v70 = (const char *)sub_21DF21324("AGX_STRESS_NO_INLINING");
    if (v70)
    {
      if (*v70 != 48 && atoi(v70))
      {
        v71 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
        v72 = v71 + 24;
        v73 = *(_QWORD *)(v71 + 32);
        while (v73 != v72)
        {
          v74 = (llvm::GlobalValue *)(v73 - 56);
          v22 = v73 == 0;
          v73 = *(_QWORD *)(v73 + 8);
          if (v22)
            v75 = 0;
          else
            v75 = v74;
          if ((llvm::GlobalValue::isDeclaration(v75) & 1) == 0 && (llvm::Function::hasFnAttribute() & 1) == 0)
            llvm::Function::addFnAttr();
        }
      }
    }
  }
  if (v105 != v104)
    free(v105);
  if (v116 != v118)
    free(v116);
  if (v110 != v109)
    free(v110);
  if (v119 != v121)
    free(v119);
}

uint64_t sub_21DF5C7CC(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  void **v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  llvm::Instruction *v31;
  uint64_t v32;
  uint64_t *v33;
  const char *v34;
  uint64_t *v35;
  const char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  llvm::LLVMContext *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Type **v51;
  llvm::LLVMContext *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  llvm::Instruction *v69;
  uint64_t v70;
  llvm::LLVMContext *v71;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  BOOL v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Type **v84;
  llvm::LLVMContext *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  uint64_t *v100;
  llvm::Type *v101;
  llvm::Type **v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm::Type **v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm::Type **v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  llvm::Instruction *v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int *v146;
  int v147;
  unint64_t v148;
  _BOOL4 v149;
  char *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  std::string::size_type v162;
  const std::string::value_type *v163;
  std::string::size_type v164;
  int v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  std::string::size_type v169;
  const std::string::value_type *v170;
  std::string::size_type v171;
  unsigned __int8 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int data;
  int v179;
  char *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  llvm::Instruction *v186;
  llvm::Instruction *v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  uint8x8_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD **v214;
  _QWORD *i;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  llvm::Type *v221;
  unint64_t v222;
  uint8x8_t v223;
  _QWORD **v224;
  unint64_t v225;
  __int128 v226;
  float v227;
  _BOOL8 v228;
  unint64_t v229;
  unint64_t v230;
  int8x8_t prime;
  void *v232;
  void *v233;
  uint64_t v234;
  _QWORD **v235;
  unint64_t v236;
  uint8x8_t v237;
  unint64_t v238;
  uint8x8_t v239;
  uint64_t v240;
  _QWORD *j;
  unint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  uint64_t v248;
  _DWORD *v249;
  _DWORD *v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  llvm::Type **v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v262;
  std::string *v263;
  std::string::size_type v264;
  std::string *v265;
  std::string::size_type v266;
  const std::string::value_type *v267;
  std::string::size_type v268;
  int v269;
  uint64_t v270;
  _QWORD *v271;
  unsigned __int8 **v272;
  _QWORD *v273;
  std::string::size_type v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  llvm::Instruction *v278;
  _QWORD *v279;
  _QWORD *v280;
  void *v281;
  _QWORD *v282;
  _QWORD *v283;
  void *v284;
  std::string *v285;
  std::string::size_type v286;
  std::string *v287;
  std::string::size_type v288;
  const std::string::value_type *v289;
  std::string::size_type v290;
  __int128 v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  std::string::size_type v305;
  uint64_t *v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  void *__p[2];
  int64_t v311;
  _QWORD v312[2];
  llvm::Instruction *v313;
  char v314;
  char *v315;
  _QWORD v316[2];
  llvm::Instruction *v317;
  _QWORD v318[3];
  unsigned int __val;
  _BYTE v320[32];
  int v321;
  std::string v322;
  _QWORD *v323;
  __int16 v324;
  std::string v325;
  uint64_t v326;
  __int16 v327;
  _BYTE v328[24];
  unint64_t v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  float v333;
  uint64_t v334;

  v334 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 504))(v328, v2, *(unsigned int *)(a1 + 2280), *(unsigned int *)(a1 + 2284), *(unsigned int *)(a1 + 2288), *(unsigned int *)(a1 + 2292), *(unsigned int *)(a1 + 2296), *(unsigned int *)(a1 + 2300), *(unsigned __int8 *)(a1 + 14));
  *(_OWORD *)__p = *(_OWORD *)&v328[8];
  v311 = v329;
  v3 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (v328[0])
  {
    std::string::append(v3 + 17, "Total number of indirect argument buffer resources exceeded for");
    if (v311 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if (v311 >= 0)
      v5 = HIBYTE(v311);
    else
      v5 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408), (const std::string::value_type *)v4, v5);
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v3[14].__r_.__value_.__l.__size_ + 1678))
  {
    v8 = *(unsigned int *)(a1 + 2160);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(a1 + 2152);
      v10 = 8 * v8;
      while (1)
      {
        v11 = *v9;
        if (*(_BYTE *)(*v9 + 1))
        {
          if (*(_BYTE *)(v11 + 2))
            break;
        }
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_19;
      }
      std::to_string((std::string *)v320, *(_DWORD *)(v11 + 40));
      v285 = std::string::insert((std::string *)v320, 0, "buffer(");
      v286 = v285->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v325.__r_.__value_.__l.__data_ = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
      v325.__r_.__value_.__r.__words[2] = v286;
      v285->__r_.__value_.__l.__size_ = 0;
      v285->__r_.__value_.__r.__words[2] = 0;
      v285->__r_.__value_.__r.__words[0] = 0;
      v287 = std::string::append(&v325, "): Argument buffer participates in modification as well as resource use");
      v288 = v287->__r_.__value_.__r.__words[2];
      *(_OWORD *)v328 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
      *(_QWORD *)&v328[16] = v288;
      v287->__r_.__value_.__l.__size_ = 0;
      v287->__r_.__value_.__r.__words[2] = 0;
      v287->__r_.__value_.__r.__words[0] = 0;
      if (v328[23] >= 0)
        v289 = v328;
      else
        v289 = *(const std::string::value_type **)v328;
      if (v328[23] >= 0)
        v290 = v328[23];
      else
        v290 = *(_QWORD *)&v328[8];
      std::string::append((std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408), v289, v290);
      if ((v328[23] & 0x80000000) != 0)
        operator delete(*(void **)v328);
      if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v325.__r_.__value_.__l.__data_);
      if ((v320[23] & 0x80000000) != 0)
        operator delete(*(void **)v320);
      goto LABEL_9;
    }
  }
LABEL_19:
  if (*(_DWORD *)(a1 + 2216))
  {
    v12 = (int32x2_t *)(a1 + 2208);
    v297 = a1 + 344;
    v296 = a1 + 8;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 2208);
      v14 = *(unsigned int *)(a1 + 2224);
      v15 = v13 + 48 * v14;
      if ((_DWORD)v14)
      {
        v16 = 48 * v14;
        while ((*(_QWORD *)(v13 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 48;
          v16 -= 48;
          if (!v16)
          {
            v13 = v15;
            break;
          }
        }
      }
      v17 = *(_QWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 40);
      sub_21DF72958(v12, v13);
      if ((*(_DWORD *)v18 & 0xFFFFFFFC) != 4)
        goto LABEL_9;
      v19 = *(unsigned __int8 *)(v17 + 16);
      if (v19 == 62 && v17 != 0)
      {
        v23 = *(uint64_t **)(a1 + 2192);
        if (!v23)
LABEL_452:
          abort();
        v24 = *(_DWORD *)(*(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 32);
        while (1)
        {
          while (1)
          {
            v25 = *((_DWORD *)v23 + 8);
            if (v24 >= v25)
              break;
            v23 = (uint64_t *)*v23;
            if (!v23)
              goto LABEL_452;
          }
          if (v25 >= v24)
            break;
          v23 = (uint64_t *)v23[1];
          if (!v23)
            goto LABEL_452;
        }
        v26 = v23[5];
        sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v17);
        if (*(_DWORD *)v18 == 7)
        {
          *(_QWORD *)&v331 = 0;
          sub_21DF256B0(*(int **)(v26 + 48), v17, (unint64_t *)&v331, v328);
          v27 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
          v28 = (char *)v17;
          v29 = (char *)v331;
          *(_QWORD *)v328 = &v328[16];
          *(_QWORD *)&v328[8] = 0x800000000;
          sub_21DF71FA8((uint64_t)v328, &v28[-32 * v27 + 32], (char *)v331);
          sub_21DF25EA8(&v325, v18, v328);
          v30 = v29;
          v31 = (llvm::Instruction *)v28;
          sub_21DF71FA8((uint64_t)&v325, v30, v28);
          v32 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v33 = *(uint64_t **)(v26 + 104);
          LOWORD(v321) = 257;
          sub_21DF66DE4(v32, v33, (uint64_t **)v325.__r_.__value_.__l.__data_, LODWORD(v325.__r_.__value_.__r.__words[1]), (uint64_t)v320);
          if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
            free(v325.__r_.__value_.__l.__data_);
          if (*(_BYTE **)v328 != &v328[16])
            free(*(void **)v328);
          v34 = "constant_gep";
        }
        else
        {
          *(_QWORD *)v320 = &v320[16];
          *(_QWORD *)&v320[8] = 0x400000000;
          v37 = (char *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
          *(_QWORD *)v328 = &v328[16];
          *(_QWORD *)&v328[8] = 0x800000000;
          sub_21DF71FA8((uint64_t)v328, v37, (char *)v17);
          v38 = *(_DWORD *)v18;
          v307 = v26;
          v303 = (uint64_t *)v17;
          if (*(_DWORD *)v18 == 6)
          {
            v70 = *(_QWORD *)(v297 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v322.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322.__r_.__value_.__r.__words[2];
            v322.__r_.__value_.__l.__size_ = 0x300000000;
            sub_21DF227A4((uint64_t)&v322, 0);
            if (*(_BYTE *)(v70 + 1646))
              sub_21DF227A4((uint64_t)&v322, 1);
            sub_21DF227A4((uint64_t)&v322, 2);
            v72 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if (LODWORD(v322.__r_.__value_.__r.__words[1]))
            {
              v73 = v322.__r_.__value_.__r.__words[0] + 4 * LODWORD(v322.__r_.__value_.__r.__words[1]);
              do
              {
                v74 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v75 = *(uint64_t **)(v26 + 104);
                v76 = LODWORD(v72->__r_.__value_.__l.__data_) != 1;
                if (LODWORD(v72->__r_.__value_.__l.__data_) == 2)
                  v76 = 1;
                if (LODWORD(v72->__r_.__value_.__l.__data_))
                  v77 = v76;
                else
                  v77 = 0;
                v325.__r_.__value_.__r.__words[0] = (std::string::size_type)&v325.__r_.__value_.__r.__words[2];
                v325.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v18 + 104))
                  sub_21DF226D8((uint64_t)&v325, v18 + 96);
                v78 = *(unsigned int *)(v18 + 184);
                if ((_DWORD)v78)
                {
                  v79 = *(unsigned int **)(v18 + 176);
                  v80 = &v79[2 * v78];
                  do
                  {
                    v81 = *v79;
                    v82 = v79[1];
                    v79 += 2;
                    *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * v82) = *(_QWORD *)(*(_QWORD *)v328 + 8 * v81);
                  }
                  while (v79 != v80);
                }
                v83 = a1 + v74;
                v84 = (llvm::Type **)(a1 + v74 + 8);
                llvm::Type::getInt32Ty(v84[8], v71);
                *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v77)
                {
                  v86 = sub_21DF25BB0(v18, v84, v328);
                  v87 = LODWORD(v325.__r_.__value_.__r.__words[1]);
                  *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 8) = v86;
                }
                else
                {
                  llvm::Type::getInt32Ty(v84[8], v85);
                  *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  v88 = sub_21DF25BB0(v18, v84, v328);
                  sub_21DF19CD0((uint64_t)&v325, v88);
                  v87 = LODWORD(v325.__r_.__value_.__r.__words[1]);
                }
                LOWORD(v333) = 257;
                v89 = sub_21DF66DE4(v83, v75, (uint64_t **)v325.__r_.__value_.__l.__data_, v87, (uint64_t)&v331);
                sub_21DF19CD0((uint64_t)v320, v89);
                if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
                  free(v325.__r_.__value_.__l.__data_);
                v72 = (std::string *)((char *)v72 + 4);
                v26 = v307;
              }
              while (v72 != (std::string *)v73);
              v72 = (std::string *)v322.__r_.__value_.__r.__words[0];
            }
            if (v72 != (std::string *)&v322.__r_.__value_.__r.__words[2])
              free(v72);
            v34 = "sampler_gep";
          }
          else if (v38 == 5)
          {
            v39 = *(_QWORD *)(v297 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v322.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322.__r_.__value_.__r.__words[2];
            v322.__r_.__value_.__l.__size_ = 0x400000000;
            sub_21DF227A4((uint64_t)&v322, 0);
            if (*(_BYTE *)(v39 + 1645))
              sub_21DF227A4((uint64_t)&v322, 1);
            sub_21DF227A4((uint64_t)&v322, 2);
            sub_21DF227A4((uint64_t)&v322, 3);
            v41 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if (LODWORD(v322.__r_.__value_.__r.__words[1]))
            {
              v305 = v322.__r_.__value_.__r.__words[0] + 4 * LODWORD(v322.__r_.__value_.__r.__words[1]);
              do
              {
                v42 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v43 = *(uint64_t **)(v26 + 104);
                switch(LODWORD(v41->__r_.__value_.__l.__data_))
                {
                  case 0:
                    v44 = 0;
                    break;
                  case 1:
                    v44 = 0;
                    break;
                  case 2:
                    v44 = 1;
                    break;
                  case 3:
                    v44 = 1;
                    break;
                  default:
                    v44 = 1;
                    break;
                }
                v325.__r_.__value_.__r.__words[0] = (std::string::size_type)&v325.__r_.__value_.__r.__words[2];
                v325.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v18 + 104))
                  sub_21DF226D8((uint64_t)&v325, v18 + 96);
                v45 = *(unsigned int *)(v18 + 184);
                if ((_DWORD)v45)
                {
                  v46 = *(unsigned int **)(v18 + 176);
                  v47 = &v46[2 * v45];
                  do
                  {
                    v48 = *v46;
                    v49 = v46[1];
                    v46 += 2;
                    *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * v49) = *(_QWORD *)(*(_QWORD *)v328 + 8 * v48);
                  }
                  while (v46 != v47);
                }
                v50 = a1 + v42;
                v51 = (llvm::Type **)(a1 + v42 + 8);
                llvm::Type::getInt32Ty(v51[8], v40);
                *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if ((v44 & 1) != 0)
                {
                  v53 = sub_21DF25BB0(v18, v51, v328);
                  v54 = LODWORD(v325.__r_.__value_.__r.__words[1]);
                  *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 8) = v53;
                }
                else
                {
                  llvm::Type::getInt32Ty(v51[8], v52);
                  *(_QWORD *)(v325.__r_.__value_.__r.__words[0] + 8 * LODWORD(v325.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  v55 = sub_21DF25BB0(v18, v51, v328);
                  sub_21DF19CD0((uint64_t)&v325, v55);
                  v54 = LODWORD(v325.__r_.__value_.__r.__words[1]);
                }
                v26 = v307;
                LOWORD(v333) = 257;
                v56 = sub_21DF66DE4(v50, v43, (uint64_t **)v325.__r_.__value_.__l.__data_, v54, (uint64_t)&v331);
                sub_21DF19CD0((uint64_t)v320, v56);
                if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
                  free(v325.__r_.__value_.__l.__data_);
                v41 = (std::string *)((char *)v41 + 4);
              }
              while (v41 != (std::string *)v305);
              v41 = (std::string *)v322.__r_.__value_.__r.__words[0];
            }
            if (v41 != (std::string *)&v322.__r_.__value_.__r.__words[2])
              free(v41);
            v34 = "texture_gep";
          }
          else
          {
            if (v38 == 4)
              v90 = v18;
            else
              v90 = 0;
            v91 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v92 = *(uint64_t **)(v26 + 104);
            sub_21DF25CC8(&v325, v90, (llvm::Type **)(v91 + 8), v328);
            LOWORD(v333) = 257;
            v93 = sub_21DF66DE4(v91, v92, (uint64_t **)v325.__r_.__value_.__l.__data_, LODWORD(v325.__r_.__value_.__r.__words[1]), (uint64_t)&v331);
            sub_21DF19CD0((uint64_t)v320, v93);
            if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
              free(v325.__r_.__value_.__l.__data_);
            v34 = "buffer_gep";
          }
          v94 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v95 = *(uint64_t **)(v26 + 104);
          *(_QWORD *)&v331 = *(_QWORD *)(**(_QWORD **)v320
                                       - 32 * (*(_DWORD *)(**(_QWORD **)v320 + 20) & 0x7FFFFFF)
                                       + 32);
          *((_QWORD *)&v331 + 1) = llvm::ConstantInt::get();
          *(_QWORD *)&v332 = llvm::ConstantInt::get();
          v327 = 257;
          v96 = sub_21DF66DE4(v94, v95, (uint64_t **)&v331, 3, (uint64_t)&v325);
          v97 = llvm::ConstantInt::get();
          sub_21DF19CD0((uint64_t)v320, v96);
          sub_21DF19CD0((uint64_t)v320, v97);
          v325.__r_.__value_.__r.__words[0] = (std::string::size_type)&v325.__r_.__value_.__r.__words[2];
          v325.__r_.__value_.__l.__size_ = 0x400000000;
          if (*(_DWORD *)&v320[8])
          {
            v98 = *(uint64_t ***)v320;
            v99 = 8 * *(unsigned int *)&v320[8];
            do
            {
              v100 = *v98++;
              sub_21DF19CD0((uint64_t)&v325, *v100);
              v99 -= 8;
            }
            while (v99);
          }
          v101 = (llvm::Type *)llvm::StructType::get();
          v102 = (llvm::Type **)llvm::UndefValue::get();
          LODWORD(v322.__r_.__value_.__l.__data_) = 0;
          if (*(_DWORD *)&v320[8])
          {
            v103 = 0;
            do
            {
              v104 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              v105 = *(_QWORD *)(*(_QWORD *)v320 + 8 * v103);
              LOWORD(v333) = 257;
              v102 = (llvm::Type **)sub_21DF1A244(v104, (uint64_t)v102, v105, (uint64_t)&v322, 1, (uint64_t)&v331);
              v103 = LODWORD(v322.__r_.__value_.__l.__data_) + 1;
              LODWORD(v322.__r_.__value_.__l.__data_) = v103;
            }
            while (*(_DWORD *)&v320[8] > v103);
          }
          v106 = sub_21DF7A588(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v101);
          sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v102, v106, 0);
          sub_21DF72CB4((_QWORD *)a1, v106, *v303);
          if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
            free(v325.__r_.__value_.__l.__data_);
          v12 = (int32x2_t *)(a1 + 2208);
          if (*(_BYTE **)v328 != &v328[16])
            free(*(void **)v328);
          v31 = (llvm::Instruction *)v303;
          if (*(_BYTE **)v320 != &v320[16])
            free(*(void **)v320);
        }
        v107 = 1;
        BYTE1(v330) = 1;
        if (*v34)
        {
          *(_QWORD *)v328 = v34;
          v107 = 3;
        }
        LOBYTE(v330) = v107;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v31);
        goto LABEL_151;
      }
      if (v19 == 60 && v17 != 0)
      {
        sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v17);
        *(_QWORD *)v328 = &v328[16];
        *(_QWORD *)&v328[8] = 0x400000000;
        if (*(_DWORD *)v18 == 6)
        {
          sub_21DF25D6C(&v325, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336));
          sub_21DF22A7C((uint64_t)v328, (uint64_t)&v325);
          if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
            free(v325.__r_.__value_.__l.__data_);
          v35 = (uint64_t *)v17;
          sub_21DF72D38((_QWORD *)a1, (uint64_t *)v17, (uint64_t)v328);
          v36 = "sampler_load";
        }
        else if (*(_DWORD *)v18 == 5)
        {
          sub_21DF25DFC(&v325, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336));
          sub_21DF22A7C((uint64_t)v328, (uint64_t)&v325);
          if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
            free(v325.__r_.__value_.__l.__data_);
          v35 = (uint64_t *)v17;
          sub_21DF72D38((_QWORD *)a1, (uint64_t *)v17, (uint64_t)v328);
          v36 = "texture_load";
        }
        else
        {
          v35 = (uint64_t *)v17;
          v57 = *(_QWORD *)(v17 - 32);
          v325.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
          llvm::StructType::get();
          v58 = llvm::PointerType::get();
          v59 = (uint64_t *)sub_21DF72CB4((_QWORD *)a1, v57, v58);
          v60 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          *(_QWORD *)v320 = llvm::ConstantInt::get();
          *(_QWORD *)&v320[8] = llvm::ConstantInt::get();
          v327 = 257;
          v61 = sub_21DF66DE4(v60, v59, (uint64_t **)v320, 2, (uint64_t)&v325);
          v62 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v327 = 257;
          v63 = sub_21DF19394((uint64_t *)(v296 + v62), **(llvm::Type ***)(*(_QWORD *)v61 + 16), v61, 0, (uint64_t)&v325);
          v64 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v327 = 257;
          v65 = sub_21DF19394((uint64_t *)(v296 + v64), **(llvm::Type ***)(*(_QWORD *)v63 + 16), v63, 0, (uint64_t)&v325);
          v66 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          v67 = *v35;
          v327 = 257;
          sub_21DF1A79C(v66, 48, v65, v67, (uint64_t)&v325);
          v36 = "buffer_load";
        }
        v68 = 1;
        HIBYTE(v327) = 1;
        if (*v36)
        {
          v325.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          v68 = 3;
        }
        LOBYTE(v327) = v68;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        v69 = (llvm::Instruction *)v35;
        goto LABEL_149;
      }
      if (v19 != 61 || v17 == 0)
        goto LABEL_9;
      sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v17);
      *(_QWORD *)v328 = &v328[16];
      *(_QWORD *)&v328[8] = 0x400000000;
      if (*(_DWORD *)v18 == 6)
        break;
      if (*(_DWORD *)v18 == 5)
      {
        sub_21DF25DFC(&v325, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336));
LABEL_144:
        sub_21DF22A7C((uint64_t)v328, (uint64_t)&v325);
        if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
          free(v325.__r_.__value_.__l.__data_);
        sub_21DF729C4((_QWORD *)a1, v17, (uint64_t)v328);
        goto LABEL_148;
      }
      v108 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v109 = *(_QWORD *)(v17 - 64);
      v110 = *(_QWORD *)(a1 + 200 + v108);
      v327 = 257;
      v111 = (llvm::Type **)sub_21DF1A79C(v108 + a1 + 8, 47, v109, v110, (uint64_t)&v325);
      v325.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
      v325.__r_.__value_.__l.__size_ = llvm::PointerType::get();
      v325.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 192 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      llvm::StructType::get();
      v112 = v17;
      v113 = *(_QWORD *)(v17 - 32);
      v114 = llvm::PointerType::get();
      v115 = sub_21DF72CB4((_QWORD *)a1, v113, v114);
      v116 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v327 = 257;
      v117 = sub_21DF19394((uint64_t *)(v296 + v116), **(llvm::Type ***)(*(_QWORD *)v115 + 16), v115, 0, (uint64_t)&v325);
      v118 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      *(_DWORD *)v320 = 0;
      v327 = 257;
      v119 = sub_21DF1ACD0(v118, v117, (uint64_t)v320, 1, (uint64_t)&v325);
      v120 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      *(_DWORD *)v320 = 1;
      v327 = 257;
      v121 = sub_21DF1ACD0(v120, v117, (uint64_t)v320, 1, (uint64_t)&v325);
      v122 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      *(_DWORD *)v320 = 2;
      v327 = 257;
      v123 = sub_21DF1ACD0(v122, v117, (uint64_t)v320, 1, (uint64_t)&v325);
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v111, v119, 0);
      v124 = (llvm::Type **)v123;
      v17 = v112;
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v124, v121, 0);
      v12 = (int32x2_t *)(a1 + 2208);
LABEL_148:
      v69 = (llvm::Instruction *)v17;
LABEL_149:
      llvm::Instruction::eraseFromParent(v69);
      if (*(_BYTE **)v328 != &v328[16])
        free(*(void **)v328);
LABEL_151:
      if (!*(_DWORD *)(a1 + 2216))
        goto LABEL_152;
    }
    sub_21DF25D6C(&v325, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336));
    goto LABEL_144;
  }
LABEL_152:
  v125 = *(unsigned int *)(a1 + 2160);
  if ((_DWORD)v125)
  {
    v126 = *(_QWORD *)(a1 + 2152);
    v127 = (_QWORD *)(v126 + 8 * v125);
    v128 = a1 + 408;
    v299 = a1 + 8;
    LOBYTE(v6) = 1;
    v295 = v127;
    while (1)
    {
      if ((v6 & 1) != 0)
      {
        v129 = *(_QWORD *)v126;
        memset(v320, 0, sizeof(v320));
        v321 = 1065353216;
        v331 = 0u;
        v332 = 0u;
        v333 = 1.0;
        __val = *(_DWORD *)(v129 + 40);
        v308 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 344 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1678);
        v318[0] = a1;
        v318[1] = v320;
        v318[2] = &__val;
        v130 = *(uint64_t **)(v129 + 8);
        v131 = v130[1];
        if (v131)
        {
          v302 = v129;
          v306 = *(uint64_t **)(v129 + 8);
          while (1)
          {
            v132 = *(llvm::Instruction **)(v131 + 24);
            v133 = *(_QWORD *)(v131 + 8);
            v316[0] = 4;
            v316[1] = 0;
            v317 = v132;
            if (v132 != (llvm::Instruction *)-8192 && v132 != (llvm::Instruction *)-4096 && v132 != 0)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v316);
            v309 = v133;
            if (sub_21DF71908(*(_BYTE *)(a1 + 37), (uint64_t)v132, (uint64_t)v130))
            {
              sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v132);
              v135 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              v136 = *(_QWORD *)(v129 + 104);
              v137 = *v130;
              LOWORD(v330) = 257;
              v138 = sub_21DF1A79C(v135, 49, v136, v137, (uint64_t)v328);
              v139 = (uint64_t *)((char *)v132 - 64);
              if (*((_QWORD *)v132 - 8))
              {
                **((_QWORD **)v132 - 6) = *((_QWORD *)v132 - 7);
                v140 = *((_QWORD *)v132 - 7);
                if (v140)
                  *(_QWORD *)(v140 + 16) = *((_QWORD *)v132 - 6);
              }
              *v139 = v138;
              if (v138)
              {
                v143 = *(_QWORD *)(v138 + 8);
                v141 = (uint64_t **)(v138 + 8);
                v142 = v143;
                *((_QWORD *)v132 - 7) = v143;
                if (v143)
                  *(_QWORD *)(v142 + 16) = (char *)v132 - 56;
                *((_QWORD *)v132 - 6) = v141;
                *v141 = v139;
              }
              v144 = 3;
              goto LABEL_389;
            }
            v145 = (uint64_t)v317;
            if (!v317 || *((_BYTE *)v317 + 16) != 62)
              break;
            v315 = 0;
            v314 = 0;
            v146 = sub_21DF256B0(*(int **)(v129 + 48), (unint64_t)v317, (unint64_t *)&v315, &v314);
            v147 = *v146;
            if ((*v146 & 0xFFFFFFFC) != 4)
            {
              if (!v308)
                goto LABEL_386;
              std::to_string(&v322, __val);
              v166 = std::string::insert(&v322, 0, "buffer(");
              v167 = v166->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v325.__r_.__value_.__l.__data_ = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              v325.__r_.__value_.__r.__words[2] = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              v168 = std::string::append(&v325, "): Unable to map argument buffer access to resource");
              v169 = v168->__r_.__value_.__r.__words[2];
              *(_OWORD *)v328 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
              *(_QWORD *)&v328[16] = v169;
              v168->__r_.__value_.__l.__size_ = 0;
              v168->__r_.__value_.__r.__words[2] = 0;
              v168->__r_.__value_.__r.__words[0] = 0;
              if (v328[23] >= 0)
                v170 = v328;
              else
                v170 = *(const std::string::value_type **)v328;
              if (v328[23] >= 0)
                v171 = v328[23];
              else
                v171 = *(_QWORD *)&v328[8];
              std::string::append((std::string *)(v128 + *(_QWORD *)(*(_QWORD *)a1 - 24)), v170, v171);
              v165 = v328[23];
              v129 = v302;
LABEL_199:
              v130 = v306;
              if (v165 < 0)
                goto LABEL_200;
              goto LABEL_201;
            }
            v148 = (unint64_t)v146;
            v149 = v308 != 0;
            if (!v314)
              v149 = 0;
            v150 = v315;
            if (v149 && v315 == (char *)v145 && sub_21DF71968((_QWORD *)a1, (_QWORD *)v145))
            {
              sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v145);
              v129 = v302;
              v151 = *(uint64_t **)(v302 + 104);
              v152 = *v151;
              if ((*(_DWORD *)(*v151 + 8) & 0xFE) == 0x12)
                v152 = **(_QWORD **)(v152 + 16);
              v153 = **(_QWORD **)(v152 + 16);
              v154 = *(uint64_t **)(v145 - 32 * (*(_DWORD *)(v145 + 20) & 0x7FFFFFF) + 32);
              v155 = v299 + *(_QWORD *)(*(_QWORD *)a1 - 24);
              LOWORD(v330) = 257;
              v156 = sub_21DF1A95C(v155, v153, v151, v154, (uint64_t)v328);
              v157 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              v158 = *(_QWORD *)v145;
              LOWORD(v330) = 257;
              sub_21DF1A79C(v157, 49, v156, v158, (uint64_t)v328);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v145);
LABEL_206:
              v144 = 3;
LABEL_388:
              v130 = v306;
              goto LABEL_389;
            }
            sub_21DF25A94(v148, v145);
            v301 = v172;
            if (!v172)
            {
              if (v147 != 4)
              {
                if (v147 != 7)
                {
                  v130 = v306;
                  if (!v308)
                  {
                    v144 = 3;
                    goto LABEL_422;
                  }
                  std::to_string(&v322, __val);
                  v263 = std::string::insert(&v322, 0, "buffer(");
                  v264 = v263->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v325.__r_.__value_.__l.__data_ = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
                  v325.__r_.__value_.__r.__words[2] = v264;
                  v263->__r_.__value_.__l.__size_ = 0;
                  v263->__r_.__value_.__r.__words[2] = 0;
                  v263->__r_.__value_.__r.__words[0] = 0;
                  v265 = std::string::append(&v325, "): Argument buffer accessed with non-zero array index");
                  v266 = v265->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v328 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v328[16] = v266;
                  v265->__r_.__value_.__l.__size_ = 0;
                  v265->__r_.__value_.__r.__words[2] = 0;
                  v265->__r_.__value_.__r.__words[0] = 0;
                  if (v328[23] >= 0)
                    v267 = v328;
                  else
                    v267 = *(const std::string::value_type **)v328;
                  if (v328[23] >= 0)
                    v268 = v328[23];
                  else
                    v268 = *(_QWORD *)&v328[8];
                  std::string::append((std::string *)(v128 + *(_QWORD *)(*(_QWORD *)a1 - 24)), v267, v268);
                  v129 = v302;
                  if ((v328[23] & 0x80000000) != 0)
LABEL_200:
                    operator delete(*(void **)v328);
LABEL_201:
                  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v325.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v322.__r_.__value_.__l.__data_);
                  v144 = 1;
                  goto LABEL_389;
                }
LABEL_224:
                if (!v308)
                  goto LABEL_386;
                v180 = (char *)(v145 - 32 * (*(_DWORD *)(v145 + 20) & 0x7FFFFFF) + 32);
                *(_QWORD *)v328 = &v328[16];
                *(_QWORD *)&v328[8] = 0x800000000;
                sub_21DF71FA8((uint64_t)v328, v180, v150);
                sub_21DF25EA8(&v325, v148, v328);
                sub_21DF71FA8((uint64_t)&v325, v150, (char *)v145);
                sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v145);
                v181 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                v182 = *(uint64_t **)(v302 + 104);
                v324 = 257;
                sub_21DF66DE4(v181, v182, (uint64_t **)v325.__r_.__value_.__l.__data_, LODWORD(v325.__r_.__value_.__r.__words[1]), (uint64_t)&v322);
                llvm::Value::replaceAllUsesWith();
                llvm::Value::takeName();
                if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
                  free(v325.__r_.__value_.__l.__data_);
                if (*(_BYTE **)v328 != &v328[16])
                  free(*(void **)v328);
                goto LABEL_417;
              }
LABEL_229:
              if (!v308)
              {
LABEL_386:
                v144 = 3;
LABEL_387:
                v129 = v302;
                goto LABEL_388;
              }
              v183 = *(_QWORD *)(v145 + 8);
              if (!v183)
                goto LABEL_417;
              v298 = v145 + 32;
              v184 = 0x9DDFEA08EB382D69 * (((8 * v148) + 8) ^ HIDWORD(v148));
              v185 = 0x9DDFEA08EB382D69 * (HIDWORD(v148) ^ (v184 >> 47) ^ v184);
              v300 = 0x9DDFEA08EB382D69 * (v185 ^ (v185 >> 47));
              v294 = (_QWORD *)v126;
              while (2)
              {
                v186 = *(llvm::Instruction **)(v183 + 24);
                v183 = *(_QWORD *)(v183 + 8);
                v312[0] = 4;
                v312[1] = 0;
                v313 = v186;
                v187 = v186;
                if (v186 != (llvm::Instruction *)-8192)
                {
                  v188 = v186 == (llvm::Instruction *)-4096 || v186 == 0;
                  v187 = v186;
                  if (!v188)
                  {
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v312);
                    v187 = v313;
                  }
                }
                v189 = *((unsigned __int8 *)v187 + 16);
                if (v189 == 61)
                  goto LABEL_369;
                if (v189 == 60)
                {
                  if (!v301)
                    goto LABEL_263;
                  if (llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v145))
                  {
                    v190 = v183;
                    v191 = *(unsigned int *)(v148 + 224);
                    v192 = *(unsigned int *)(v148 + 16);
                    if ((_DWORD)v192)
                    {
                      v193 = *(_QWORD *)(v148 + 8);
                      v194 = 16 * v192;
                      do
                      {
                        v195 = *(_QWORD *)(v298
                                         - 32 * (*(_DWORD *)(v145 + 20) & 0x7FFFFFF)
                                         + 32 * *(unsigned int *)(*(_QWORD *)v193 + 24));
                        v196 = (_QWORD *)(v195 + 24);
                        if (*(_DWORD *)(v195 + 32) >= 0x41u)
                          v196 = (_QWORD *)*v196;
                        v191 = (v191 + *(_DWORD *)(*(_QWORD *)v193 + 20) * *(_DWORD *)v196);
                        v193 += 16;
                        v194 -= 16;
                      }
                      while (v194);
                    }
                    if (*(_BYTE *)v302)
                      (*(void (**)(uint64_t, llvm::Instruction *, uint64_t, _QWORD))(*(_QWORD *)a1 + 216))(a1, v313, v191, __val);
                    v197 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
                    if (v197)
                      v198 = v197 - 24;
                    else
                      v198 = 0;
                    v199 = *(_QWORD *)(v198 + 40);
                    if (v199)
                      v200 = v199 - 24;
                    else
                      v200 = 0;
                    sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v200);
                    if (v313)
                    {
                      sub_21DF71A00((uint64_t)v318, v191, v148);
                      llvm::Value::replaceAllUsesWith();
                      v183 = v190;
                      break;
                    }
                    v187 = 0;
                    v183 = v190;
LABEL_369:
                    if (v187 != (llvm::Instruction *)-8192 && v187 != (llvm::Instruction *)-4096 && v187 != 0)
                      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v312);
                    if (!v183)
                      goto LABEL_417;
                    continue;
                  }
                  v201 = &unk_21DFA0EE8;
                  if (*(_BYTE *)(v148 + 268))
                    v201 = (_DWORD *)(v148 + 264);
                  if (*v201 == -1)
                  {
LABEL_263:
                    v204 = v183;
                    sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v186);
                    v205 = v315;
                    v206 = (char *)(v298 - 32 * (*(_DWORD *)(v145 + 20) & 0x7FFFFFF));
                    *(_QWORD *)v328 = &v328[16];
                    *(_QWORD *)&v328[8] = 0x800000000;
                    sub_21DF71FA8((uint64_t)v328, v206, v315);
                    sub_21DF25CC8(&v325, v148, (llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v328);
                    sub_21DF71FA8((uint64_t)&v325, v205, (char *)v145);
                    v207 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v208 = *(uint64_t **)(v302 + 104);
                    v324 = 257;
                    v209 = sub_21DF66DE4(v207, v208, (uint64_t **)v325.__r_.__value_.__l.__data_, LODWORD(v325.__r_.__value_.__r.__words[1]), (uint64_t)&v322);
                    v210 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v324 = 257;
                    v211 = sub_21DF19394((uint64_t *)(v299 + v210), **(llvm::Type ***)(*(_QWORD *)v209 + 16), v209, 0, (uint64_t)&v322);
                    v212 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                    v213 = *(_QWORD *)v186;
                    v324 = 257;
                    sub_21DF1A79C(v212, 48, v211, v213, (uint64_t)&v322);
                    llvm::Value::replaceAllUsesWith();
                    if ((std::string::size_type *)v325.__r_.__value_.__l.__data_ != &v325.__r_.__value_.__r.__words[2])
                      free(v325.__r_.__value_.__l.__data_);
                    v183 = v204;
                    if (*(_BYTE **)v328 != &v328[16])
                      free(*(void **)v328);
                  }
                  else
                  {
                    v292 = v183;
                    if (*((_QWORD *)&v331 + 1))
                    {
                      v202 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v331 + 8));
                      v202.i16[0] = vaddlv_u8(v202);
                      if (v202.u32[0] > 1uLL)
                      {
                        v203 = v300;
                        if (v300 >= *((_QWORD *)&v331 + 1))
                          v203 = v300 % *((_QWORD *)&v331 + 1);
                      }
                      else
                      {
                        v203 = v300 & (*((_QWORD *)&v331 + 1) - 1);
                      }
                      v214 = *(_QWORD ***)(v331 + 8 * v203);
                      if (v214)
                      {
                        for (i = *v214; i; i = (_QWORD *)*i)
                        {
                          v216 = i[1];
                          if (v216 == v300)
                          {
                            if (i[2] == v148)
                              goto LABEL_366;
                          }
                          else
                          {
                            if (v202.u32[0] > 1uLL)
                            {
                              if (v216 >= *((_QWORD *)&v331 + 1))
                                v216 %= *((_QWORD *)&v331 + 1);
                            }
                            else
                            {
                              v216 &= *((_QWORD *)&v331 + 1) - 1;
                            }
                            if (v216 != v203)
                              break;
                          }
                        }
                      }
                    }
                    v217 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
                    if (v217)
                      v218 = v217 - 24;
                    else
                      v218 = 0;
                    v219 = *(_QWORD *)(v218 + 40);
                    if (v219)
                      v220 = v219 - 24;
                    else
                      v220 = 0;
                    sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v220);
                    v221 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(v148 + 256), (llvm::Type *)*(unsigned int *)(v148 + 232));
                    v304 = (uint64_t *)sub_21DF7A588(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v221);
                    v222 = *((_QWORD *)&v331 + 1);
                    if (*((_QWORD *)&v331 + 1))
                    {
                      v223 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v331 + 8));
                      v223.i16[0] = vaddlv_u8(v223);
                      if (v223.u32[0] > 1uLL)
                      {
                        v126 = v300;
                        if (v300 >= *((_QWORD *)&v331 + 1))
                          v126 = v300 % *((_QWORD *)&v331 + 1);
                      }
                      else
                      {
                        v126 = v300 & (*((_QWORD *)&v331 + 1) - 1);
                      }
                      v224 = *(_QWORD ***)(v331 + 8 * v126);
                      if (v224)
                      {
                        for (i = *v224; i; i = (_QWORD *)*i)
                        {
                          v225 = i[1];
                          if (v225 == v300)
                          {
                            if (i[2] == v148)
                              goto LABEL_359;
                          }
                          else
                          {
                            if (v223.u32[0] > 1uLL)
                            {
                              if (v225 >= *((_QWORD *)&v331 + 1))
                                v225 %= *((_QWORD *)&v331 + 1);
                            }
                            else
                            {
                              v225 &= *((_QWORD *)&v331 + 1) - 1;
                            }
                            if (v225 != v126)
                              break;
                          }
                        }
                      }
                    }
                    *(_QWORD *)&v226 = v148;
                    *((_QWORD *)&v226 + 1) = v304;
                    v291 = v226;
                    i = operator new(0x20uLL);
                    *i = 0;
                    i[1] = v300;
                    *((_OWORD *)i + 1) = v291;
                    v227 = (float)(unint64_t)(*((_QWORD *)&v332 + 1) + 1);
                    if (!v222 || (float)(v333 * (float)v222) < v227)
                    {
                      v228 = (v222 & (v222 - 1)) != 0;
                      if (v222 < 3)
                        v228 = 1;
                      v229 = v228 | (2 * v222);
                      v230 = vcvtps_u32_f32(v227 / v333);
                      if (v229 <= v230)
                        prime = (int8x8_t)v230;
                      else
                        prime = (int8x8_t)v229;
                      if (*(_QWORD *)&prime == 1)
                      {
                        prime = (int8x8_t)2;
                      }
                      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                      {
                        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                        v222 = *((_QWORD *)&v331 + 1);
                      }
                      if (*(_QWORD *)&prime <= v222)
                      {
                        if (*(_QWORD *)&prime < v222)
                        {
                          v238 = vcvtps_u32_f32((float)*((unint64_t *)&v332 + 1) / v333);
                          if (v222 < 3
                            || (v239 = (uint8x8_t)vcnt_s8((int8x8_t)v222),
                                v239.i16[0] = vaddlv_u8(v239),
                                v239.u32[0] > 1uLL))
                          {
                            v238 = std::__next_prime(v238);
                          }
                          else
                          {
                            v240 = 1 << -(char)__clz(v238 - 1);
                            if (v238 >= 2)
                              v238 = v240;
                          }
                          if (*(_QWORD *)&prime <= v238)
                            prime = (int8x8_t)v238;
                          if (*(_QWORD *)&prime >= v222)
                          {
                            v222 = *((_QWORD *)&v331 + 1);
                          }
                          else
                          {
                            if (prime)
                              goto LABEL_315;
                            v262 = (void *)v331;
                            *(_QWORD *)&v331 = 0;
                            if (v262)
                              operator delete(v262);
                            v222 = 0;
                            *((_QWORD *)&v331 + 1) = 0;
                          }
                        }
                      }
                      else
                      {
LABEL_315:
                        if (*(_QWORD *)&prime >> 61)
                          sub_21DF256A4();
                        v232 = operator new(8 * *(_QWORD *)&prime);
                        v233 = (void *)v331;
                        *(_QWORD *)&v331 = v232;
                        if (v233)
                          operator delete(v233);
                        v234 = 0;
                        *((int8x8_t *)&v331 + 1) = prime;
                        do
                          *(_QWORD *)(v331 + 8 * v234++) = 0;
                        while (*(_QWORD *)&prime != v234);
                        v235 = (_QWORD **)v332;
                        if ((_QWORD)v332)
                        {
                          v236 = *(_QWORD *)(v332 + 8);
                          v237 = (uint8x8_t)vcnt_s8(prime);
                          v237.i16[0] = vaddlv_u8(v237);
                          if (v237.u32[0] > 1uLL)
                          {
                            if (v236 >= *(_QWORD *)&prime)
                              v236 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v236 &= *(_QWORD *)&prime - 1;
                          }
                          *(_QWORD *)(v331 + 8 * v236) = &v332;
                          for (j = *v235; j; v236 = v242)
                          {
                            v242 = j[1];
                            if (v237.u32[0] > 1uLL)
                            {
                              if (v242 >= *(_QWORD *)&prime)
                                v242 %= *(_QWORD *)&prime;
                            }
                            else
                            {
                              v242 &= *(_QWORD *)&prime - 1;
                            }
                            if (v242 != v236)
                            {
                              if (!*(_QWORD *)(v331 + 8 * v242))
                              {
                                *(_QWORD *)(v331 + 8 * v242) = v235;
                                goto LABEL_340;
                              }
                              *v235 = (_QWORD *)*j;
                              *j = **(_QWORD **)(v331 + 8 * v242);
                              **(_QWORD **)(v331 + 8 * v242) = j;
                              j = v235;
                            }
                            v242 = v236;
LABEL_340:
                            v235 = (_QWORD **)j;
                            j = (_QWORD *)*j;
                          }
                        }
                        v222 = (unint64_t)prime;
                      }
                      if ((v222 & (v222 - 1)) != 0)
                      {
                        if (v300 >= v222)
                          v126 = v300 % v222;
                        else
                          v126 = v300;
                      }
                      else
                      {
                        v126 = (v222 - 1) & v300;
                      }
                    }
                    v243 = v331;
                    v244 = *(_QWORD **)(v331 + 8 * v126);
                    if (v244)
                    {
                      *i = *v244;
                      goto LABEL_357;
                    }
                    *i = v332;
                    *(_QWORD *)&v332 = i;
                    *(_QWORD *)(v243 + 8 * v126) = &v332;
                    if (*i)
                    {
                      v245 = *(_QWORD *)(*i + 8);
                      if ((v222 & (v222 - 1)) != 0)
                      {
                        if (v245 >= v222)
                          v245 %= v222;
                      }
                      else
                      {
                        v245 &= v222 - 1;
                      }
                      v244 = (_QWORD *)(v331 + 8 * v245);
LABEL_357:
                      *v244 = i;
                    }
                    ++*((_QWORD *)&v332 + 1);
LABEL_359:
                    if (*(_DWORD *)(v148 + 232))
                    {
                      v246 = 0;
                      do
                      {
                        v247 = *(_DWORD *)(v148 + 224);
                        v248 = *(unsigned int *)(v148 + 16);
                        if ((_DWORD)v248)
                        {
                          v249 = *(_DWORD **)(v148 + 8);
                          v250 = &v249[4 * v248];
                          v251 = v246;
                          do
                          {
                            v252 = v249[2];
                            v253 = v251 / v252;
                            v251 %= v252;
                            v247 += *(_DWORD *)(*(_QWORD *)v249 + 20) * v253;
                            v249 += 4;
                          }
                          while (v249 != v250);
                        }
                        v254 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                        v325.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                        v325.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                        LOWORD(v330) = 257;
                        v255 = sub_21DF66DE4(v254, v304, (uint64_t **)&v325, 2, (uint64_t)v328);
                        v256 = (llvm::Type **)sub_21DF71A00((uint64_t)v318, v247, v148);
                        sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v256, v255, 0);
                        ++v246;
                      }
                      while (v246 < *(unsigned int *)(v148 + 232));
                    }
                    v126 = (unint64_t)v294;
LABEL_366:
                    sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v186);
                    v257 = (uint64_t *)i[3];
                    v258 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v325.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                    v325.__r_.__value_.__l.__size_ = sub_21DF258F0(v148, (llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v145);
                    LOWORD(v330) = 257;
                    v259 = sub_21DF66DE4(v258, v257, (uint64_t **)&v325, 2, (uint64_t)v328);
                    v260 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    LOWORD(v330) = 257;
                    sub_21DF19394((uint64_t *)(v299 + v260), **(llvm::Type ***)(*(_QWORD *)v259 + 16), v259, 0, (uint64_t)v328);
                    llvm::Value::replaceAllUsesWith();
                    v183 = v292;
                  }
                }
                break;
              }
              v187 = v313;
              if (v313)
              {
                llvm::Instruction::eraseFromParent(v186);
                v187 = v313;
              }
              goto LABEL_369;
            }
            if (v147 == 7)
              goto LABEL_224;
            if (v147 == 4)
              goto LABEL_229;
            if (v147 == 5)
              v173 = v148;
            else
              v173 = 0;
            if (v147 == 6)
              v174 = v148;
            else
              v174 = 0;
            v175 = **(_QWORD **)(*(_QWORD *)v145 + 16);
            v176 = **(_QWORD **)(v175 + 16);
            if (!v308 && !*(_BYTE *)v302)
            {
              v144 = 3;
              goto LABEL_387;
            }
            v293 = (_QWORD *)v126;
            if (v173)
            {
              v328[9] = *(_BYTE *)(v173 + 236);
              v328[8] = *(_BYTE *)(v173 + 237);
              v177 = (unsigned int *)(v173 + 240);
              if (!*(_BYTE *)(v173 + 244))
                v177 = (unsigned int *)&unk_21DFA0EE8;
              *(_QWORD *)&v328[12] = *v177;
              v329 = v173;
              v330 = v176;
              sub_21DF72028((unsigned int *)&v325, *(_DWORD *)(v173 + 228), __val);
              data = v325.__r_.__value_.__l.__data_;
              v179 = *(_DWORD *)(v173 + 232);
              *(_DWORD *)v328 = v325.__r_.__value_.__l.__data_;
              *(_DWORD *)&v328[4] = v179;
              sub_21DF69C94((uint64_t *)(a1 + 840), v325.__r_.__value_.__l.__data_, (uint64_t)v328);
            }
            else
            {
              *(_QWORD *)&v328[8] = v174;
              *(_QWORD *)&v328[16] = v176;
              sub_21DF72028((unsigned int *)&v325, *(_DWORD *)(v174 + 228), __val);
              data = v325.__r_.__value_.__l.__data_;
              v269 = *(_DWORD *)(v174 + 232);
              *(_DWORD *)v328 = v325.__r_.__value_.__l.__data_;
              *(_DWORD *)&v328[4] = v269;
              sub_21DF7209C((uint64_t *)(a1 + 864), v325.__r_.__value_.__l.__data_, (uint64_t)v328);
            }
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v145);
            v270 = sub_21DF258F0(v148, (llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v145);
            v271 = (_QWORD *)v145;
            if (v308)
              v271 = (_QWORD *)llvm::UndefValue::get();
            v312[0] = vadd_s32(vdup_n_s32(data), (int32x2_t)sub_21DF25A94(v148, v145));
            if (v173)
              v272 = (unsigned __int8 **)(a1 + 2056);
            else
              v272 = (unsigned __int8 **)(a1 + 2104);
            v273 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v274 = v273[30];
            v325.__r_.__value_.__r.__words[0] = v273[24];
            v325.__r_.__value_.__l.__size_ = v274;
            v325.__r_.__value_.__r.__words[2] = v325.__r_.__value_.__r.__words[0];
            v326 = *v271;
            v275 = sub_21DF72140(v272, v273[40], v175);
            v276 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v322.__r_.__value_.__r.__words[0] = v270;
            v322.__r_.__value_.__l.__size_ = sub_21DF25850((uint64_t)v312, (llvm::Type **)(v276 + a1 + 8));
            v322.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
            v323 = v271;
            LOWORD(v330) = 257;
            sub_21DF191A4(v299 + v276, *(_QWORD *)(v275 + 24), v275, (uint64_t)&v322, 4, (uint64_t)v328);
            llvm::Value::takeName();
            v277 = *(_QWORD *)(v145 + 8);
            v126 = (unint64_t)v293;
            while (v277)
            {
              v278 = *(llvm::Instruction **)(v277 + 24);
              v277 = *(_QWORD *)(v277 + 8);
              if (v278 && *((_BYTE *)v278 + 16) == 60)
              {
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent(v278);
              }
            }
LABEL_417:
            v144 = 0;
            v130 = v306;
            if (!v308)
            {
              v128 = a1 + 408;
LABEL_422:
              v129 = v302;
              goto LABEL_389;
            }
            v128 = a1 + 408;
            v129 = v302;
            if (v317)
            {
              llvm::Instruction::eraseFromParent(v132);
              v144 = 0;
            }
LABEL_389:
            if (v317 != (llvm::Instruction *)-8192 && v317 != (llvm::Instruction *)-4096 && v317)
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v316);
            if (v144 != 3 && v144)
            {
              v6 = 0;
              goto LABEL_429;
            }
            v131 = v309;
            if (!v309)
              goto LABEL_425;
          }
          if (!v308)
            goto LABEL_206;
          std::to_string(&v322, __val);
          v159 = std::string::insert(&v322, 0, "buffer(");
          v160 = v159->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v325.__r_.__value_.__l.__data_ = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
          v325.__r_.__value_.__r.__words[2] = v160;
          v159->__r_.__value_.__l.__size_ = 0;
          v159->__r_.__value_.__r.__words[2] = 0;
          v159->__r_.__value_.__r.__words[0] = 0;
          v161 = std::string::append(&v325, "): Unable to map argument buffer access to resource");
          v162 = v161->__r_.__value_.__r.__words[2];
          *(_OWORD *)v328 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          *(_QWORD *)&v328[16] = v162;
          v161->__r_.__value_.__l.__size_ = 0;
          v161->__r_.__value_.__r.__words[2] = 0;
          v161->__r_.__value_.__r.__words[0] = 0;
          if (v328[23] >= 0)
            v163 = v328;
          else
            v163 = *(const std::string::value_type **)v328;
          if (v328[23] >= 0)
            v164 = v328[23];
          else
            v164 = *(_QWORD *)&v328[8];
          std::string::append((std::string *)(v128 + *(_QWORD *)(*(_QWORD *)a1 - 24)), v163, v164);
          v165 = v328[23];
          goto LABEL_199;
        }
LABEL_425:
        if (!v308)
          llvm::Value::replaceAllUsesWith();
        v6 = 1;
LABEL_429:
        v279 = (_QWORD *)v332;
        if ((_QWORD)v332)
        {
          do
          {
            v280 = (_QWORD *)*v279;
            operator delete(v279);
            v279 = v280;
          }
          while (v280);
        }
        v281 = (void *)v331;
        *(_QWORD *)&v331 = 0;
        v127 = v295;
        if (v281)
          operator delete(v281);
        v282 = *(_QWORD **)&v320[16];
        if (*(_QWORD *)&v320[16])
        {
          do
          {
            v283 = (_QWORD *)*v282;
            operator delete(v282);
            v282 = v283;
          }
          while (v283);
        }
        v284 = *(void **)v320;
        *(_QWORD *)v320 = 0;
        if (v284)
          operator delete(v284);
      }
      else
      {
        v6 = 0;
      }
      v126 += 8;
      if ((_QWORD *)v126 == v127)
        goto LABEL_10;
    }
  }
  v6 = 1;
LABEL_10:
  if (SHIBYTE(v311) < 0)
    operator delete(__p[0]);
  return v6;
}

uint64_t sub_21DF5EC4C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 72);
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 80);
  if (v2 != v3)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      llvm::MergeBlockIntoPredecessor();
      v2 = v4;
    }
    while (v4 != v3);
  }
  llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 328), *(llvm::Module **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320));
  llvm::NamedMDNode::eraseFromParent(*(llvm::NamedMDNode **)(a1 + 48));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 48))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)))
  {
    llvm::Function::getSubprogram(*(llvm::Function **)(a1 + 160));
    llvm::Function::setSubprogram();
  }
  result = llvm::Function::eraseFromParent(*(llvm::Function **)(a1 + 160));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

BOOL sub_21DF5ED18(uint64_t a1)
{
  BOOL v2;
  const char *v3;
  const char *v4;
  _BOOL4 v5;
  const char *v6;
  _BOOL4 v7;
  uint64_t v8;
  char v9;
  int v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  llvm::Value *v17;
  llvm::Value *v18;
  int Key;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t i;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t **v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t (***v50)();
  uint64_t v51;
  _QWORD *v52;
  uint64_t (***v53)();
  uint64_t v54;
  _QWORD **v55;
  void *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  uint64_t (***v72)();
  void *v73;
  uint64_t NullValue;
  char v75;
  char v76;
  uint64_t (***p_p_src)();
  llvm::Constant *v78;
  llvm::Type *v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t (***v83)();
  uint64_t v84;
  char v85;
  char v86;
  uint64_t (***v87)();
  char v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD **v92;
  uint64_t v93;
  uint64_t v94;
  char **v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (***v135)();
  uint64_t v136;
  _QWORD *v137;
  uint64_t (***v138)();
  char v139;
  char *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  llvm::ValueHandleBase *v151;
  llvm::ValueHandleBase *v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  llvm::Value *v162;
  BOOL v163;
  _BOOL4 v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  llvm::Value *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (***v178)();
  uint64_t v179;
  const char *v180;
  const char *v181;
  unsigned int v182;
  _DWORD *v183;
  int v184;
  size_t v185;
  char *v186;
  size_t v187;
  char *v188;
  uint64_t (****v189)();
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  char *v194;
  uint64_t (***v195)();
  uint64_t (****v196)();
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  unint64_t v202;
  BOOL v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t (****v213)();
  uint64_t *v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  BOOL v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  uint64_t (***v224)();
  uint64_t (****v225)();
  uint64_t v226;
  unsigned int v227;
  const void ***v228;
  const void **v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const void **v233;
  const void **v234;
  const void *v235;
  uint64_t (***v236)();
  llvm::ValueHandleBase *v237;
  uint64_t v238;
  uint64_t (***v239)();
  uint64_t v240;
  uint64_t (***v241)();
  uint64_t v242;
  uint64_t (***v243)();
  uint64_t v244;
  void **v245;
  uint64_t v246;
  llvm::ValueHandleBase *j;
  void *v248;
  void *v249;
  char v250;
  int v251;
  llvm::ValueHandleBase *v252;
  char *v253;
  char *v254;
  char v255;
  BOOL v256;
  char v257;
  llvm::ValueHandleBase *v258;
  llvm::ValueHandleBase *v259;
  uint64_t v260;
  unint64_t v261;
  _QWORD *v262;
  _QWORD v263[2];
  _QWORD *v264;
  _QWORD v265[2];
  _QWORD *v266;
  _QWORD v267[2];
  _QWORD **v268;
  _QWORD *v269[2];
  _QWORD *v270;
  _QWORD v271[2];
  _QWORD *v272;
  _QWORD v273[2];
  BOOL v274;
  char *v275;
  char *v276;
  uint64_t v277;
  int v278;
  _BYTE v279[64];
  uint64_t v280;
  unsigned int v281;
  char v282[24];
  _QWORD *v283;
  _QWORD v284[3];
  _QWORD *v285;
  _QWORD v286[3];
  _QWORD *v287;
  _BYTE v288[24];
  _BYTE *v289;
  _QWORD v290[3];
  _QWORD *v291;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t (**__src)();
  void **v296;
  uint64_t (***v297)();
  uint64_t (***v298)();
  __int16 v299;
  uint64_t (**v300)();
  void **v301;
  uint64_t *v302;
  uint64_t (***v303)();
  uint64_t (**v304)();
  uint64_t (***v305)();
  uint64_t (***v306)();
  _BYTE v307[40];
  int v308;
  uint64_t (**v309)();
  _QWORD **v310;
  _QWORD *v311;
  uint64_t (***v312)();
  void *p_src;
  void *v314;
  unint64_t v315;
  void **v316;
  char v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (***v321)();
  void **v322;
  void *v323[2];
  _BYTE v324[32];
  unsigned int v325;
  uint64_t v326;

  v326 = *MEMORY[0x24BDAC8D0];
  sub_21DF35B3C();
  sub_21DF634A0();
  sub_21DF63570();
  sub_21DF69AC8();
  sub_21DF635D8();
  v275 = v279;
  v276 = v279;
  v277 = 8;
  v278 = 0;
  v2 = 0;
  if (MGGetBoolAnswer())
  {
    v3 = (const char *)sub_21DF21324("AGX_FORCE_CS_SAMPLERS");
    v2 = v3 && *v3 != 48 && atoi(v3) != 0;
  }
  v5 = MGGetBoolAnswer()
    && (v4 = (const char *)sub_21DF21324("AGC_FORCE_BINDLESS")) != 0
    && *v4 != 48
    && atoi(v4) != 0;
  v7 = MGGetBoolAnswer()
    && (v6 = (const char *)sub_21DF21324("AGC_FORCE_BINDLESS_HEAP")) != 0
    && *v6 != 48
    && atoi(v6) != 0;
  v8 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678))
  {
    v9 = 0;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 2160);
    if (v10)
      v9 = 1;
    else
      v9 = v2;
    v11 = (*(_DWORD *)(a1 + 2296) + *(_DWORD *)(a1 + 2284)) > 0x30 || v10 != 0;
    if (v11 || v5 || v7)
    {
      v12 = !v7;
      if (v10)
        v12 = 0;
      v257 = 1;
      goto LABEL_27;
    }
  }
  v257 = 0;
  v12 = 0;
LABEL_27:
  *(_BYTE *)(a1 + 2385) = v12;
  v13 = *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24) + 320);
  v14 = *(_QWORD *)(v13 + 32);
  v260 = v13 + 24;
  if (v14 == v13 + 24)
    goto LABEL_81;
  v255 = v9;
  v256 = v2;
  v15 = (_QWORD *)(a1 + 840);
  v16 = (uint64_t **)(a1 + 848);
  do
  {
    v17 = (llvm::Value *)(v14 - 56);
    v20 = v14 == 0;
    v14 = *(_QWORD *)(v14 + 8);
    if (v20)
      v18 = 0;
    else
      v18 = v17;
    llvm::Value::getName(v18);
    Key = llvm::StringMapImpl::FindKey();
    v20 = Key == -1 || Key == (unint64_t)dword_2553B3CE8;
    if (v20)
    {
      llvm::Value::getName(v18);
      v21 = llvm::StringMapImpl::FindKey();
      if (v21 == -1 || v21 == (unint64_t)dword_2553B3BF0)
      {
        llvm::Value::getName(v18);
        v22 = llvm::StringMapImpl::FindKey();
        if (v22 == -1 || v22 == (unint64_t)dword_2553B3C40)
        {
          llvm::Value::getName(v18);
          v23 = llvm::StringMapImpl::FindKey();
          if (v23 == -1)
            continue;
          if (v23 == (unint64_t)dword_2553B3C90)
            continue;
          *(_QWORD *)v307 = llvm::Value::getName(v18);
          *(_QWORD *)&v307[8] = v24;
          if (llvm::StringRef::find() != -1)
            continue;
        }
      }
      v27 = 0;
      v26 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(qword_2553B3CE0 + 8 * Key);
      v26 = *(unsigned __int8 *)(v25 + 30);
      v27 = *(_DWORD *)(v25 + 20) < 3;
    }
    for (i = *((_QWORD *)v18 + 1); i; i = *(_QWORD *)(i + 8))
    {
      v29 = *(void **)(*(_QWORD *)(i + 24) - 32 * (*(_DWORD *)(*(_QWORD *)(i + 24) + 20) & 0x7FFFFFF) + 32 * v26);
      sub_21DF69C20((uint64_t)v307, &v275, v29);
      if (v27 && *(_BYTE *)(*(_QWORD *)(a1 + 344 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1647))
      {
        v30 = llvm::Value::stripPointerCasts((llvm::Value *)v29);
        if (!v30 || (v31 = v30, *(_BYTE *)(v30 + 16) != 84))
        {
          std::string::append((std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408), "Could not statically determine the target of a texture");
          v49 = 0;
          goto LABEL_245;
        }
        v32 = *(_QWORD *)(v30 - 32);
        if (!v32
          || *(_BYTE *)(v32 + 16)
          || *(_QWORD *)(v32 + 24) != *(_QWORD *)(v31 + 72)
          || (llvm::Value::getName((llvm::Value *)v32), v46 = llvm::StringMapImpl::FindKey(), v46 == -1)
          || v46 == (unint64_t)dword_2553B3C68)
        {
          v33 = *(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 64);
          v34 = (_QWORD *)(v33 + 24);
          if (*(_DWORD *)(v33 + 32) >= 0x41u)
            v34 = (_QWORD *)*v34;
          v35 = *v16;
          if (!*v16)
            goto LABEL_65;
          v36 = *(_DWORD *)v34;
          v37 = a1 + 848;
          v38 = *v16;
          do
          {
            v39 = *((_DWORD *)v38 + 9) + *((_DWORD *)v38 + 8);
            v40 = v39 > v36;
            if (v39 <= v36)
              v41 = (uint64_t **)(v38 + 1);
            else
              v41 = (uint64_t **)v38;
            if (v40)
              v37 = (uint64_t)v38;
            v38 = *v41;
          }
          while (*v41);
          if ((uint64_t **)v37 == v16 || *(_DWORD *)(v37 + 32) > v36)
LABEL_65:
            v37 = a1 + 848;
          v42 = *(_OWORD *)(v37 + 48);
          *(_OWORD *)v307 = *(_OWORD *)(v37 + 32);
          *(_OWORD *)&v307[16] = v42;
          *(_QWORD *)&v307[32] = *(_QWORD *)(v37 + 64);
          v43 = *(_QWORD **)(v37 + 8);
          v44 = (_QWORD *)v37;
          if (v43)
          {
            do
            {
              v45 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v45 = (_QWORD *)v44[2];
              v20 = *v45 == (_QWORD)v44;
              v44 = v45;
            }
            while (!v20);
          }
          if (*v15 == v37)
            *v15 = v45;
          --*(_QWORD *)(a1 + 856);
          sub_21DF6D3D0(v35, (uint64_t *)v37);
          operator delete((void *)v37);
          *(_DWORD *)&v307[16] = 1;
          sub_21DF69C94((uint64_t *)(a1 + 840), *(unsigned int *)v307, (uint64_t)v307);
        }
      }
    }
  }
  while (v14 != v260);
  v8 = *(_QWORD *)a1;
  v2 = v256;
  v9 = v255;
LABEL_81:
  v274 = 1;
  if (((*(uint64_t (**)(uint64_t))(v8 + 288))(a1) & 1) == 0)
  {
    v273[0] = 0;
    v273[1] = 0;
    v272 = v273;
    sub_21DF69D38((uint64_t *)&v272, *(_QWORD **)(a1 + 864), (_QWORD *)(a1 + 872));
    *(_QWORD *)v307 = &v307[16];
    *(_QWORD *)&v307[8] = 0x400000000;
    v310 = &v311;
    v309 = &off_24E1F15F8;
    v312 = 0;
    v311 = 0;
    v304 = &off_24E1F1A48;
    v305 = &v309;
    v306 = &v304;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2032), (uint64_t)&v304);
    v50 = v306;
    if (v306 == &v304)
    {
      v51 = 4;
      v50 = &v304;
    }
    else
    {
      if (!v306)
        goto LABEL_97;
      v51 = 5;
    }
    (*v50)[v51]();
LABEL_97:
    v300 = &off_24E1F1AD8;
    v301 = (void **)&v309;
    v303 = &v300;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2128), (uint64_t)&v300);
    v53 = v303;
    if (v303 == &v300)
    {
      v54 = 4;
      v53 = &v300;
    }
    else
    {
      if (!v303)
        goto LABEL_102;
      v54 = 5;
    }
    (*v53)[v54]();
LABEL_102:
    v292 = 0u;
    v293 = 0u;
    v294 = 1065353216;
    v55 = v310;
    if (v310 != &v311)
    {
      v56 = (void *)(a1 + 632);
      while (1)
      {
        v57 = v273[0];
        if (!v273[0])
          break;
        v58 = *((_DWORD *)v55 + 9);
        v59 = v273;
        do
        {
          v60 = (uint64_t *)v57;
          v61 = v59;
          v62 = *(_DWORD *)(v57 + 36) + *(_DWORD *)(v57 + 32);
          v63 = (uint64_t *)(v57 + 8);
          if (v62 > v58)
          {
            v63 = v60;
            v59 = v60;
          }
          v57 = *v63;
        }
        while (v57);
        if (v59 == v273)
          break;
        if (v62 > v58)
        {
          v64 = (uint64_t)(v60 + 4);
        }
        else
        {
          v60 = v61;
          v64 = (uint64_t)(v61 + 4);
        }
        if (v58 < *((_DWORD *)v60 + 8))
          break;
        v65 = *((_DWORD *)v55 + 7);
        if (*((_DWORD *)v55 + 8) != v65)
          break;
        v66 = sub_21DF70290(v64, v65);
        v68 = v67;
        v69 = (char *)llvm::User::operator new((llvm::User *)0x58);
        if ((v66 & 0x80000000) != 0)
        {
          __src = (uint64_t (**)())(HIWORD(v66) & 0x7FFF);
          v297 = (uint64_t (***)())".";
          v299 = 776;
          v70 = 2;
          v71 = 8;
          v72 = (uint64_t (***)())&p_src;
          p_src = &__src;
          v315 = (unsigned __int16)v66;
        }
        else
        {
          LODWORD(p_src) = (unsigned __int16)v66;
          v70 = 8;
          v71 = 1;
          v72 = (uint64_t (***)())p_src;
        }
        v73 = v56;
        v317 = v70;
        v318 = v71;
        v319 = (uint64_t)"agc.sampler_words";
        v321 = v72;
        LOBYTE(v323[0]) = 3;
        BYTE1(v323[0]) = v70;
        llvm::GlobalVariable::GlobalVariable();
        v69[80] |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
          && *(_BYTE *)(*(_QWORD *)(a1 + 344 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1651))
        {
          NullValue = llvm::User::operator new((llvm::User *)0x58);
          if ((v66 & 0x80000000) != 0)
          {
            __src = (uint64_t (**)())(HIWORD(v66) & 0x7FFF);
            v297 = (uint64_t (***)())".";
            v299 = 776;
            v75 = 2;
            v76 = 8;
            p_p_src = (uint64_t (***)())&p_src;
            p_src = &__src;
            v315 = (unsigned __int16)v66;
          }
          else
          {
            LODWORD(p_src) = (unsigned __int16)v66;
            v75 = 8;
            v76 = 1;
            p_p_src = (uint64_t (***)())p_src;
          }
          v317 = v75;
          v318 = v76;
          v319 = (uint64_t)"agc.es1_sampler_lod_bias";
          v321 = p_p_src;
          LOBYTE(v323[0]) = 3;
          BYTE1(v323[0]) = v75;
          llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(NullValue + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        }
        else
        {
          v78 = (llvm::Constant *)llvm::PointerType::get();
          NullValue = llvm::Constant::getNullValue(v78, v79);
        }
        v80 = llvm::User::operator new((llvm::User *)0x58);
        if ((v66 & 0x80000000) != 0)
        {
          __src = (uint64_t (**)())(HIWORD(v66) & 0x7FFF);
          v297 = (uint64_t (***)())".";
          v299 = 776;
          v81 = 2;
          v82 = 8;
          v83 = (uint64_t (***)())&p_src;
          p_src = &__src;
          v315 = (unsigned __int16)v66;
        }
        else
        {
          LODWORD(p_src) = (unsigned __int16)v66;
          v81 = 8;
          v82 = 1;
          v83 = (uint64_t (***)())p_src;
        }
        v317 = v81;
        v318 = v82;
        v319 = (uint64_t)"agc.sampler_unique_id";
        v321 = v83;
        LOBYTE(v323[0]) = 3;
        BYTE1(v323[0]) = v81;
        llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v80 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        if ((*(_BYTE *)(v68 + 9) & 1) == 0)
        {
          v319 = llvm::PointerType::get();
          v320 = llvm::PointerType::get();
          v321 = (uint64_t (***)())llvm::PointerType::get();
          llvm::StructType::setBody();
        }
        v319 = (uint64_t)v69;
        v320 = NullValue;
        v321 = (uint64_t (***)())v80;
        llvm::ConstantStruct::get();
        v84 = llvm::User::operator new((llvm::User *)0x58);
        if ((v66 & 0x80000000) != 0)
        {
          __src = (uint64_t (**)())(HIWORD(v66) & 0x7FFF);
          v297 = (uint64_t (***)())".";
          v299 = 776;
          v85 = 2;
          v86 = 8;
          v87 = (uint64_t (***)())&p_src;
          p_src = &__src;
          v315 = (unsigned __int16)v66;
        }
        else
        {
          LODWORD(p_src) = (unsigned __int16)v66;
          v85 = 8;
          v86 = 1;
          v87 = (uint64_t (***)())p_src;
        }
        v56 = v73;
        v317 = v85;
        v318 = v86;
        v319 = (uint64_t)"agc.sampler_state_struct_ptr";
        v321 = v87;
        LOBYTE(v323[0]) = 3;
        BYTE1(v323[0]) = v85;
        v250 = 0;
        llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v84 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        sub_21DF5B518(&v319, v84);
        v319 = (uint64_t)&unk_24E1F1578;
        v323[0] = v73;
        p_src = 0;
        v88 = sub_21DF675B4(*(_QWORD *)(a1 + 632), *(_DWORD *)(a1 + 648), (uint64_t)v322, &p_src);
        v89 = (uint64_t)p_src;
        if ((v88 & 1) == 0)
        {
          v89 = sub_21DF70FA0((uint64_t)v73, (uint64_t)&v319, (uint64_t)p_src);
          sub_21DF569CC((llvm::ValueHandleBase *)(v89 + 8), &v320);
          *(void **)(v89 + 32) = v323[0];
          *(_DWORD *)(v89 + 40) = 0;
        }
        if (v322 != (void **)-8192 && v322 != (void **)-4096 && v322)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v320);
        *(_DWORD *)(v89 + 40) = (unsigned __int16)v66;
        v319 = 4;
        v320 = 0;
        v90 = (_QWORD *)v84;
        v321 = (uint64_t (***)())v84;
        if (v84 != -8192)
        {
          v90 = (_QWORD *)v84;
          if (v84 != -4096)
          {
            v90 = (_QWORD *)v84;
            if (v84)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v319);
              v90 = v321;
            }
          }
        }
        sub_21DF689C8((uint64_t *)(a1 + 760), (unint64_t)v90, &v319);
        if (v321 != (uint64_t (***)())-8192 && v321 != (uint64_t (***)())-4096 && v321)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v319);
        sub_21DF6EDDC((float *)&v292, *((_DWORD *)v55 + 7), (_DWORD *)v55 + 7)[3] = v84;
        v91 = v55[1];
        if (v91)
        {
          do
          {
            v92 = (_QWORD **)v91;
            v91 = (_QWORD *)*v91;
          }
          while (v91);
        }
        else
        {
          do
          {
            v92 = (_QWORD **)v55[2];
            v20 = *v92 == v55;
            v55 = v92;
          }
          while (!v20);
        }
        v55 = v92;
        if (v92 == &v311)
          goto LABEL_153;
      }
      v97 = 0;
      goto LABEL_165;
    }
LABEL_153:
    __src = (uint64_t (**)())&v292;
    LOBYTE(v280) = 1;
    v319 = (uint64_t)&off_24E1F1B68;
    v320 = (uint64_t)&v280;
    v321 = &__src;
    v322 = (void **)&v319;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2032), (uint64_t)&v319);
    v95 = (char **)v322;
    if (v322 == (void **)&v319)
    {
      v96 = 4;
      v95 = (char **)&v319;
    }
    else
    {
      if (!v322)
        goto LABEL_159;
      v96 = 5;
    }
    (*(void (**)(char **, uint64_t, uint64_t))&(*v95)[8 * v96])(v95, v93, v94);
LABEL_159:
    p_src = &off_24E1F1BF8;
    v314 = &v280;
    v315 = (unint64_t)&__src;
    v316 = &p_src;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2128), (uint64_t)&p_src);
    v100 = v316;
    if (v316 == &p_src)
    {
      v101 = 4;
      v100 = &p_src;
    }
    else
    {
      if (!v316)
      {
LABEL_164:
        v97 = (_BYTE)v280 != 0;
LABEL_165:
        sub_21DF6F1B4((uint64_t)&v292);
        sub_21DF2E824(v311);
        if (*(_BYTE **)v307 != &v307[16])
          free(*(void **)v307);
        v274 = v97;
        v52 = (_QWORD *)v273[0];
        goto LABEL_168;
      }
      v101 = 5;
    }
    (*((void (**)(void **, uint64_t, uint64_t))*v100 + v101))(v100, v98, v99);
    goto LABEL_164;
  }
  if ((v9 & 1) == 0)
  {
    v271[0] = 0;
    v271[1] = 0;
    v270 = v271;
    sub_21DF69D38((uint64_t *)&v270, *(_QWORD **)(a1 + 864), (_QWORD *)(a1 + 872));
    v274 = sub_21DF69E9C(a1, a1 + 2008, a1 + 2104, (uint64_t)&v270);
    v52 = (_QWORD *)v271[0];
LABEL_168:
    sub_21DF2E824(v52);
    goto LABEL_184;
  }
  if (v2)
  {
    v321 = 0;
    v322 = 0;
    v319 = (uint64_t)&off_24E1F15F8;
    v320 = (uint64_t)&v321;
    *(_QWORD *)v307 = &v307[16];
    *(_QWORD *)&v307[8] = 0x400000000;
    v290[0] = &off_24E1F1E38;
    v290[1] = &v319;
    v291 = v290;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2032), (uint64_t)v290);
    v47 = v291;
    if (v291 == v290)
    {
      v48 = 4;
      v47 = v290;
LABEL_170:
      (*(void (**)(void))(*v47 + 8 * v48))();
    }
    else if (v291)
    {
      v48 = 5;
      goto LABEL_170;
    }
    sub_21DF6A148((uint64_t)&v319, (uint64_t)v307, a1 + 864);
    sub_21DF6A2A4(a1, (uint64_t)v307);
    p_src = (void *)a1;
    v102 = operator new(0x20uLL);
    *v102 = &off_24E1F1EC8;
    v102[1] = &v274;
    v102[2] = &v319;
    v102[3] = &p_src;
    v289 = v102;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2032), (uint64_t)v288);
    v103 = v289;
    if (v289 == v288)
    {
      v104 = 4;
      v103 = v288;
LABEL_175:
      (*(void (**)(void))(*v103 + 8 * v104))();
    }
    else if (v289)
    {
      v104 = 5;
      goto LABEL_175;
    }
    if (*(_BYTE **)v307 != &v307[16])
      free(*(void **)v307);
    sub_21DF2E824(v321);
  }
  else
  {
    *(_QWORD *)v307 = &unk_21DFAD77A;
    memset(&v307[8], 0, 32);
    v308 = 1065353216;
    v269[0] = 0;
    v269[1] = 0;
    v268 = v269;
    sub_21DF69D38((uint64_t *)&v268, *(_QWORD **)(a1 + 864), (_QWORD *)(a1 + 872));
    v274 = sub_21DF69E9C(a1, a1 + 2008, (uint64_t)v307, (uint64_t)&v268);
    sub_21DF2E824(v269[0]);
    sub_21DF6BCA8(0);
  }
  *(_QWORD *)v307 = a1;
  v286[0] = &off_24E1F1F58;
  v286[1] = &v274;
  v286[2] = v307;
  v287 = v286;
  sub_21DF6A0F0(*(_QWORD *)(a1 + 2128), (uint64_t)v286);
  v105 = v287;
  if (v287 == v286)
  {
    v106 = 4;
    v105 = v286;
LABEL_183:
    (*(void (**)(void))(*v105 + 8 * v106))();
  }
  else if (v287)
  {
    v106 = 5;
    goto LABEL_183;
  }
LABEL_184:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) & 1) == 0)
  {
    if (v274)
    {
      v267[0] = 0;
      v267[1] = 0;
      v266 = v267;
      sub_21DF6A45C((uint64_t *)&v266, *(_QWORD **)(a1 + 840), (_QWORD *)(a1 + 848));
      v274 = sub_21DF6A5C0((_QWORD *)a1, a1 + 1960, a1 + 2056, (uint64_t)&v266);
      v112 = (_QWORD *)v267[0];
LABEL_243:
      sub_21DF2E824(v112);
      goto LABEL_244;
    }
LABEL_202:
    v274 = 0;
    goto LABEL_244;
  }
  if ((v257 & 1) == 0)
  {
    if (sub_21DF6B8C4(a1, *(_QWORD *)(a1 + 1984))
      && sub_21DF6B8C4(a1, *(_QWORD *)(a1 + 2080)))
    {
      if (v274)
      {
        v265[0] = 0;
        v265[1] = 0;
        v264 = v265;
        sub_21DF6A45C((uint64_t *)&v264, *(_QWORD **)(a1 + 840), (_QWORD *)(a1 + 848));
        v274 = sub_21DF6A5C0((_QWORD *)a1, a1 + 1960, a1 + 2056, (uint64_t)&v264);
        v112 = (_QWORD *)v265[0];
        goto LABEL_243;
      }
      goto LABEL_202;
    }
    if (!v274)
      goto LABEL_202;
    v263[0] = 0;
    v263[1] = 0;
    v262 = v263;
    sub_21DF6A45C((uint64_t *)&v262, *(_QWORD **)(a1 + 840), (_QWORD *)(a1 + 848));
    v321 = 0;
    v322 = 0;
    v319 = (uint64_t)&off_24E1F15F8;
    v320 = (uint64_t)&v321;
    *(_QWORD *)v307 = &v307[16];
    *(_QWORD *)&v307[8] = 0x400000000;
    p_src = &off_24E1F21E0;
    v314 = &v319;
    v316 = &p_src;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)&p_src);
    v115 = v316;
    if (v316 == &p_src)
    {
      v116 = 4;
      v115 = &p_src;
    }
    else
    {
      if (!v316)
        goto LABEL_235;
      v116 = 5;
    }
    (*((void (**)(void **, uint64_t, uint64_t))*v115 + v116))(v115, v113, v114);
LABEL_235:
    __src = &off_24E1F2270;
    v296 = (void **)&v319;
    v298 = &__src;
    sub_21DF6A0F0(*(_QWORD *)(a1 + 2080), (uint64_t)&__src);
    v135 = v298;
    if (v298 == &__src)
    {
      v136 = 4;
      v135 = &__src;
    }
    else
    {
      if (!v298)
      {
LABEL_240:
        sub_21DF6B970((unint64_t)&v319, (uint64_t)v307, (uint64_t)&v262);
        sub_21DF6BF90((_QWORD *)a1, (uint64_t *)v307);
        sub_21DF6BAB0(a1, (uint64_t)v307);
        v304 = (uint64_t (**)())a1;
        LOBYTE(v300) = 1;
        v137 = operator new(0x20uLL);
        *v137 = &off_24E1F2300;
        v137[1] = &v300;
        v137[2] = &v319;
        v137[3] = &v304;
        *((_QWORD *)&v293 + 1) = v137;
        sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)&v292);
        (*(void (**)(_QWORD *))(*v137 + 40))(v137);
        v138 = (uint64_t (***)())operator new(0x20uLL);
        *v138 = &off_24E1F2390;
        v138[1] = (uint64_t (**)())&v300;
        v138[2] = (uint64_t (**)())&v319;
        v138[3] = (uint64_t (**)())&v304;
        v312 = v138;
        sub_21DF6A0F0(*(_QWORD *)(a1 + 2080), (uint64_t)&v309);
        ((void (*)(uint64_t (***)()))(*v138)[5])(v138);
        v139 = (char)v300;
        if (*(_BYTE **)v307 != &v307[16])
          free(*(void **)v307);
        sub_21DF2E824(v321);
        v274 = v139;
        v112 = (_QWORD *)v263[0];
        goto LABEL_243;
      }
      v136 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v135)[v136])(v135, v133, v134);
    goto LABEL_240;
  }
  if (!*(_BYTE *)(a1 + 2385))
  {
    if (!v274)
      goto LABEL_244;
    if (v276 == v275)
      v117 = (uint64_t *)((char *)&v277 + 4);
    else
      v117 = &v277;
    v118 = *(unsigned int *)v117;
    if ((_DWORD)v118)
    {
      v119 = 8 * v118;
      v120 = v276;
      while (*(_QWORD *)v120 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v120 += 8;
        v119 -= 8;
        if (!v119)
          goto LABEL_262;
      }
    }
    else
    {
      v120 = v276;
    }
    v141 = &v276[8 * v118];
    if (v120 == v141)
    {
LABEL_262:
      v145 = 0;
      v147 = 0;
    }
    else
    {
      v142 = 0;
      v143 = v120;
LABEL_251:
      v144 = v142++;
      while (1)
      {
        v143 += 8;
        if (v143 == v141)
          break;
        if (*(_QWORD *)v143 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v143 != v141)
            goto LABEL_251;
          break;
        }
      }
      if (v144 >= 0x1FFFFFFFFFFFFFFFLL)
        goto LABEL_450;
      v145 = (char *)sub_21DF527B8(v142);
      v146 = *(_QWORD *)v120;
      v147 = v145;
      while (2)
      {
        *(_QWORD *)v147 = v146;
        do
        {
          v120 += 8;
          if (v120 == v141)
          {
            v147 += 8;
            goto LABEL_264;
          }
          v146 = *(_QWORD *)v120;
        }
        while (*(_QWORD *)v120 >= 0xFFFFFFFFFFFFFFFELL);
        v147 += 8;
        if (v120 != v141)
          continue;
        break;
      }
    }
LABEL_264:
    v148 = (unint64_t)(v147 - v145) >> 3;
    v281 = v148;
    v321 = 0;
    v322 = 0;
    v319 = (uint64_t)&off_24E1F15E0;
    v320 = (uint64_t)&v321;
    v323[0] = v324;
    v323[1] = (void *)0x800000000;
    v325 = 0;
    llvm::IntEqClasses::grow((llvm::IntEqClasses *)v323);
    v149 = v147 - v145;
    v261 = (v147 - v145) >> 3;
    v253 = v147;
    if (v147 == v145)
    {
      v152 = 0;
      v151 = 0;
      goto LABEL_314;
    }
    if (v149 < 0x1FFFFFFFFFFFFFF9)
    {
      v150 = (char *)operator new(8 * v149);
      v151 = (llvm::ValueHandleBase *)v150;
      v152 = (llvm::ValueHandleBase *)&v150[64 * v261];
      v153 = v261 << 6;
      v154 = v150 + 32;
      do
      {
        *((_QWORD *)v154 - 4) = v154;
        *((_QWORD *)v154 - 3) = v154;
        *((_QWORD *)v154 - 2) = 4;
        *((_DWORD *)v154 - 2) = 0;
        v154 += 64;
        v153 -= 64;
      }
      while (v153);
      if (v253 != v145)
      {
        v251 = v148;
        v258 = (llvm::ValueHandleBase *)v150;
        v155 = 0;
        v156 = 0;
        while (1)
        {
          *(_QWORD *)v307 = &v307[32];
          *(_QWORD *)&v307[8] = &v307[32];
          *(_QWORD *)&v307[16] = 8;
          *(_DWORD *)&v307[24] = 0;
          __src = *(uint64_t (***)())&v145[8 * v155];
          p_src = &v315;
          v314 = (void *)0x800000000;
          sub_21DF1B18C((uint64_t)&p_src, &__src, &v296);
          v157 = v314;
          if (!(_DWORD)v314)
            goto LABEL_307;
          v158 = 0;
          v254 = (char *)v258 + 64 * v155;
          do
          {
            v159 = *((_QWORD *)p_src + v157 - 1);
            LODWORD(v314) = v157 - 1;
            sub_21DF69C20((uint64_t)&__src, v307, (const void *)v159);
            if (!(_BYTE)v297)
              goto LABEL_300;
            v160 = *(unsigned __int8 *)(v159 + 16);
            if (v159 && v160 == 84)
            {
              v161 = *(_QWORD *)(v159 - 32);
              if (v161)
              {
                if (!*(_BYTE *)(v161 + 16) && *(_QWORD *)(v161 + 24) == *(_QWORD *)(v159 + 72))
                {
                  v162 = (llvm::Value *)llvm::Value::stripPointerCasts((llvm::Value *)v161);
                  if (!*((_BYTE *)v162 + 16))
                  {
                    v171 = v162;
                    if (sub_21DF6BCFC((const char **)(a1 + 2056), v162)
                      || sub_21DF6BCFC((const char **)(a1 + 1960), v171))
                    {
                      sub_21DF257D0(&v292, *(llvm::Constant **)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF) + 32));
                      sub_21DF6BD74((uint64_t)&v319, v292, v156);
                      sub_21DF69C20((uint64_t)&__src, v254, (const void *)v159);
                      goto LABEL_300;
                    }
                  }
                }
              }
              v160 = *(unsigned __int8 *)(v159 + 16);
            }
            if (v159 && v160 == 85)
            {
              sub_21DF19CD0((uint64_t)&p_src, *(_QWORD *)(v159 - 64));
              sub_21DF19CD0((uint64_t)&p_src, *(_QWORD *)(v159 - 32));
            }
            else
            {
              if (v159)
                v163 = (v160 - 21) >= 7;
              else
                v163 = 0;
              if (v163)
              {
                v165 = v160 == 60 || v160 == 84;
                v166 = *(_DWORD *)(v159 + 20);
                if ((v166 & 0x40000000) != 0)
                {
                  v168 = *(uint64_t **)(v159 - 8);
                  v167 = v166 & 0x7FFFFFF;
                }
                else
                {
                  v167 = v166 & 0x7FFFFFF;
                  v168 = (uint64_t *)(v159 - 32 * v167);
                }
                v158 |= v165;
                if (v167)
                {
                  v169 = 32 * v167;
                  do
                  {
                    v170 = *v168;
                    v168 += 4;
                    sub_21DF19CD0((uint64_t)&p_src, v170);
                    v169 -= 32;
                  }
                  while (v169);
                }
              }
              else
              {
                v158 |= v160 == 21;
              }
            }
LABEL_300:
            v157 = v314;
          }
          while ((_DWORD)v314);
          if ((v158 & 1) != 0)
            llvm::IntEqClasses::join((llvm::IntEqClasses *)v323);
LABEL_307:
          if (p_src != &v315)
            free(p_src);
          if (*(_QWORD *)&v307[8] != *(_QWORD *)v307)
            free(*(void **)&v307[8]);
          v155 = (v156 + 1);
          v156 = v155;
          if (v261 <= v155)
          {
            v151 = v258;
            LODWORD(v148) = v251;
            break;
          }
        }
      }
LABEL_314:
      *(_QWORD *)v307 = &v319;
      *(_QWORD *)&v307[8] = &v281;
      *(_QWORD *)&v292 = &off_24E1F1658;
      *((_QWORD *)&v292 + 1) = v307;
      *((_QWORD *)&v293 + 1) = &v292;
      sub_21DF6A0F0(*(_QWORD *)(a1 + 2080), (uint64_t)&v292);
      v174 = (__int128 *)*((_QWORD *)&v293 + 1);
      if (*((__int128 **)&v293 + 1) == &v292)
      {
        v175 = 4;
        v174 = &v292;
      }
      else
      {
        if (!*((_QWORD *)&v293 + 1))
          goto LABEL_319;
        v175 = 5;
      }
      (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v174 + 8 * v175))(v174, v172, v173);
LABEL_319:
      v309 = &off_24E1F16E8;
      v310 = (_QWORD **)v307;
      v312 = &v309;
      sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)&v309);
      v178 = v312;
      if (v312 == &v309)
      {
        v179 = 4;
        v178 = &v309;
      }
      else
      {
        if (!v312)
        {
LABEL_324:
          llvm::IntEqClasses::compress((llvm::IntEqClasses *)v323);
          v259 = v151;
          if ((MGGetBoolAnswer() & 1) != 0)
          {
            v180 = (const char *)sub_21DF21324("AGC_FORCE_BINDLESS");
            if (v180)
            {
              if (*v180 != 48 && atoi(v180))
                goto LABEL_331;
            }
          }
          if (sub_21DF21324("AGC_MAX_TEXTURE_REGISTERS"))
          {
            v181 = (const char *)sub_21DF21324("AGC_MAX_TEXTURE_REGISTERS");
            if (!v181 || *v181 == 48)
            {
LABEL_331:
              v182 = 0;
              goto LABEL_334;
            }
            v182 = atoi(v181);
          }
          else
          {
            v182 = 48;
          }
LABEL_334:
          v252 = v152;
          v183 = v323[0];
          v184 = *((_DWORD *)v323[0] + v281);
          if (v325)
          {
            v185 = 12 * v325;
            v186 = (char *)operator new(v185);
            v187 = 12 * ((v185 - 12) / 0xC) + 12;
            bzero(v186, v187);
            v188 = &v186[v187];
          }
          else
          {
            v188 = 0;
            v186 = 0;
          }
          v189 = (uint64_t (****)())v320;
          if ((uint64_t (****)())v320 != &v321)
          {
            do
            {
              v190 = *((_DWORD *)v189 + 7);
              v191 = *((_DWORD *)v189 + 8);
              v192 = *((unsigned int *)v189 + 9);
              v193 = v183[v192];
              v194 = &v186[12 * v193];
              if (!v194[4])
                v194[4] = 1;
              *(_DWORD *)v194 = v192;
              *(_DWORD *)&v186[12 * v193 + 8] += v191 - v190 + 1;
              v195 = v189[1];
              if (v195)
              {
                do
                {
                  v196 = (uint64_t (****)())v195;
                  v195 = (uint64_t (***)())*v195;
                }
                while (v195);
              }
              else
              {
                do
                {
                  v196 = (uint64_t (****)())v189[2];
                  v20 = *v196 == (uint64_t (***)())v189;
                  v189 = v196;
                }
                while (!v20);
              }
              v189 = v196;
            }
            while (v196 != &v321);
          }
          v197 = (v148 + 1);
          llvm::IntEqClasses::uncompress((llvm::IntEqClasses *)v323);
          v198 = v188 - v186;
          if (v188 != v186)
          {
            v199 = 0;
            v200 = 0;
            v201 = 0;
            v202 = 0xAAAAAAAAAAAAAAABLL * (v198 >> 2);
            do
            {
              if (v186[12 * v199 + 4])
                v203 = v184 == v201;
              else
                v203 = 1;
              if (!v203)
              {
                v204 = *(_DWORD *)&v186[12 * v199 + 8] + v200;
                if (v204 <= v182)
                  v200 = v204;
                llvm::IntEqClasses::join((llvm::IntEqClasses *)v323);
              }
              v199 = ++v201;
            }
            while (v202 > v201);
          }
          llvm::IntEqClasses::compress((llvm::IntEqClasses *)v323);
          v205 = MGGetBoolAnswer();
          if ((v205 & 1) != 0
            && (v205 = (uint64_t)sub_21DF21324("AGC_DEBUG_LLVM_IR")) != 0
            && *(_BYTE *)v205 != 48
            && (v205 = atoi((const char *)v205), (_DWORD)v205))
          {
            sub_21DF28954(v205, "----- Texture allocations ------\n", v206, v207, v208, v209, v210, v211, v250);
            v212 = 1;
          }
          else
          {
            v212 = 0;
          }
          *(_QWORD *)v307 = &v307[16];
          *(_QWORD *)&v307[8] = 0x800000000;
          v213 = (uint64_t (****)())v320;
          if ((uint64_t (****)())v320 != &v321)
          {
            v214 = (uint64_t *)(a1 + 848);
            do
            {
              if (*((_DWORD *)v323[0] + *((unsigned int *)v213 + 9)) == *((_DWORD *)v323[0] + v197))
              {
                v215 = *v214;
                v216 = *((_DWORD *)v213 + 7);
                if (!*v214)
                  goto LABEL_375;
                v217 = a1 + 848;
                do
                {
                  v218 = *(_DWORD *)(v215 + 36) + *(_DWORD *)(v215 + 32);
                  v219 = v218 > v216;
                  if (v218 <= v216)
                    v220 = (uint64_t *)(v215 + 8);
                  else
                    v220 = (uint64_t *)v215;
                  if (v219)
                    v217 = v215;
                  v215 = *v220;
                }
                while (*v220);
                if ((uint64_t *)v217 == v214 || v216 < *(_DWORD *)(v217 + 32))
LABEL_375:
                  v217 = a1 + 848;
                *((_DWORD *)v213 + 9) = *(_DWORD *)&v307[8];
                if (v216 <= *((_DWORD *)v213 + 8))
                {
                  v221 = v217 + 32;
                  do
                  {
                    sub_21DF6C078((uint64_t)&p_src, v221, v216);
                    v205 = sub_21DF6C0F8((uint64_t)v307, (unint64_t)&p_src);
                    v222 = *(_QWORD *)v307 + 24 * *(unsigned int *)&v307[8];
                    v223 = *(_OWORD *)v205;
                    *(_QWORD *)(v222 + 16) = *(_QWORD *)(v205 + 16);
                    *(_OWORD *)v222 = v223;
                    ++*(_DWORD *)&v307[8];
                    ++v216;
                  }
                  while (v216 <= *((_DWORD *)v213 + 8));
                }
                if ((v212 & 1) != 0)
                  sub_21DF28954(v205, "[%08x - %08x] TS%d - TS%d", v206, v207, v208, v209, v210, v211, *((_DWORD *)v213 + 7));
              }
              else if (v212)
              {
                sub_21DF28954(v205, "[%08x - %08x] bindless", v206, v207, v208, v209, v210, v211, *((_DWORD *)v213 + 7));
              }
              v224 = v213[1];
              if (v224)
              {
                do
                {
                  v225 = (uint64_t (****)())v224;
                  v224 = (uint64_t (***)())*v224;
                }
                while (v224);
              }
              else
              {
                do
                {
                  v225 = (uint64_t (****)())v213[2];
                  v20 = *v225 == (uint64_t (***)())v213;
                  v213 = v225;
                }
                while (!v20);
              }
              v213 = v225;
            }
            while (v225 != &v321);
          }
          sub_21DF6BF90((_QWORD *)a1, (uint64_t *)v307);
          p_src = &v317;
          v314 = &v317;
          v315 = 4;
          LODWORD(v316) = 0;
          if (v253 != v145)
          {
            v226 = 0;
            v227 = 0;
            do
            {
              if (*((_DWORD *)v323[0] + v226) == *((_DWORD *)v323[0] + v281))
              {
                sub_21DF69C20((uint64_t)&__src, (_QWORD *)(a1 + 888), *(const void **)&v145[8 * v226]);
              }
              else
              {
                v228 = (const void ***)((char *)v259 + 64 * v226);
                v229 = v228[1];
                if (v229 == *v228)
                  v230 = 20;
                else
                  v230 = 16;
                v231 = *(unsigned int *)((char *)v228 + v230);
                if ((_DWORD)v231)
                {
                  v232 = 8 * v231;
                  v233 = v229;
                  while ((unint64_t)*v233 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v233;
                    v232 -= 8;
                    if (!v232)
                      goto LABEL_408;
                  }
                }
                else
                {
                  v233 = v229;
                }
                v234 = &v229[v231];
                if (v233 != v234)
                {
                  v235 = *v233;
LABEL_404:
                  sub_21DF69C20((uint64_t)&__src, &p_src, v235);
                  while (++v233 != v234)
                  {
                    v235 = *v233;
                    if ((unint64_t)*v233 < 0xFFFFFFFFFFFFFFFELL)
                    {
                      if (v233 != v234)
                        goto LABEL_404;
                      break;
                    }
                  }
                }
              }
LABEL_408:
              v226 = ++v227;
            }
            while (v261 > v227);
          }
          v304 = &off_24E1F1778;
          v305 = (uint64_t (***)())a1;
          v306 = &v304;
          __src = &off_24E1F1730;
          v296 = (void **)&v319;
          v297 = &v304;
          v298 = &__src;
          sub_21DF6C170(&p_src, (uint64_t)&__src);
          v236 = v298;
          if (v298 == &__src)
          {
            v238 = 4;
            v236 = &__src;
            v237 = v259;
          }
          else
          {
            v237 = v259;
            if (!v298)
              goto LABEL_414;
            v238 = 5;
          }
          (*v236)[v238]();
LABEL_414:
          v239 = v306;
          if (v306 == &v304)
          {
            v240 = 4;
            v239 = &v304;
          }
          else
          {
            if (!v306)
              goto LABEL_419;
            v240 = 5;
          }
          (*v239)[v240]();
LABEL_419:
          if (v314 != p_src)
            free(v314);
          v316 = 0;
          v315 = 0;
          v314 = &v315;
          p_src = &off_24E1F15F8;
          __src = &off_24E1F17C0;
          v296 = &p_src;
          v298 = &__src;
          sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)&__src);
          v241 = v298;
          if (v298 == &__src)
          {
            v242 = 4;
            v241 = &__src;
          }
          else
          {
            if (!v298)
              goto LABEL_426;
            v242 = 5;
          }
          (*v241)[v242]();
LABEL_426:
          sub_21DF6B970((unint64_t)&p_src, (uint64_t)v307, a1 + 840);
          sub_21DF6BAB0(a1, (uint64_t)v307);
          v280 = a1;
          v300 = &off_24E1F1850;
          v301 = &p_src;
          v302 = &v280;
          v303 = &v300;
          sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)&v300);
          v243 = v303;
          if (v303 == &v300)
          {
            v244 = 4;
            v243 = &v300;
          }
          else
          {
            if (!v303)
              goto LABEL_431;
            v244 = 5;
          }
          (*v243)[v244]();
LABEL_431:
          sub_21DF2E824((_QWORD *)v315);
          v280 = a1;
          p_src = &unk_24E1F1928;
          v314 = &v280;
          v316 = &p_src;
          sub_21DF6A0F0(*(_QWORD *)(a1 + 2080), (uint64_t)&p_src);
          v245 = v316;
          if (v316 == &p_src)
          {
            v246 = 4;
            v245 = &p_src;
          }
          else
          {
            if (!v316)
            {
LABEL_436:
              if (*(_BYTE **)v307 != &v307[16])
                free(*(void **)v307);
              if (v186)
                operator delete(v186);
              if (v237)
              {
                for (j = v252; j != v237; j = (llvm::ValueHandleBase *)((char *)j - 64))
                {
                  v249 = (void *)*((_QWORD *)j - 8);
                  v248 = (void *)*((_QWORD *)j - 7);
                  if (v248 != v249)
                    free(v248);
                }
                operator delete(v237);
              }
              v319 = (uint64_t)&off_24E1F15E0;
              if (v323[0] != v324)
                free(v323[0]);
              sub_21DF2E824(v321);
              v274 = 1;
              if (v145)
                operator delete(v145);
              goto LABEL_244;
            }
            v246 = 5;
          }
          (*((void (**)(void))*v245 + v246))();
          goto LABEL_436;
        }
        v179 = 5;
      }
      ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v178)[v179])(v178, v176, v177);
      goto LABEL_324;
    }
LABEL_450:
    abort();
  }
  if (&v275 != (char **)(a1 + 888))
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(a1 + 888), (const llvm::SmallPtrSetImplBase *)&v275);
  v316 = 0;
  v315 = 0;
  v314 = &v315;
  p_src = &off_24E1F15F8;
  *(_QWORD *)v307 = &v307[16];
  *(_QWORD *)&v307[8] = 0x400000000;
  v319 = (uint64_t)&v321;
  v320 = 0x400000000;
  __src = (uint64_t (**)())sub_21DF1B2C4((llvm::DataLayout *)(a1 + 168), *(llvm::Type **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344)+ 1576));
  v296 = v107;
  LODWORD(v292) = llvm::TypeSize::operator unsigned long long();
  v284[0] = &off_24E1F23D8;
  v284[1] = &p_src;
  v285 = v284;
  sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)v284);
  v110 = v285;
  if (v285 == v284)
  {
    v111 = 4;
    v110 = v284;
LABEL_213:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v110 + 8 * v111))(v110, v108, v109);
  }
  else if (v285)
  {
    v111 = 5;
    goto LABEL_213;
  }
  sub_21DF6B970((unint64_t)&p_src, (uint64_t)v307, a1 + 840);
  __src = (uint64_t (**)())a1;
  v296 = (void **)&v292;
  v121 = operator new(0x20uLL);
  *v121 = &off_24E1F2468;
  v121[1] = &v274;
  v121[2] = &p_src;
  v121[3] = &__src;
  v283 = v121;
  sub_21DF6A0F0(*(_QWORD *)(a1 + 1984), (uint64_t)v282);
  (*(void (**)(_QWORD *))(*v121 + 40))(v121);
  v122 = *(unsigned int *)&v307[8];
  if (*(_DWORD *)&v307[8])
  {
    v123 = 0;
    v124 = 0;
    while (1)
    {
      v125 = *(_QWORD *)v307;
      v126 = *(unsigned __int16 *)(*(_QWORD *)v307 + v123);
      if (v126 <= 0x3F)
        break;
      v127 = 1 << v126;
      *(_QWORD *)(a1 + 2400) |= v127;
      v128 = (_QWORD *)(a1 + 2416);
      if (*(_BYTE *)(v125 + v123 + 9))
        goto LABEL_220;
LABEL_221:
      v129 = *(unsigned int *)(v125 + v123 + 4);
      if ((_DWORD)v129 != -1)
      {
        v130 = v292;
        v131 = v320;
        if (v320 >= (unint64_t)HIDWORD(v320))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v131 = v320;
        }
        *(_QWORD *)(v319 + 8 * v131) = (v130 * v124) | (unint64_t)(v129 << 32);
        LODWORD(v320) = v320 + 1;
        v122 = *(unsigned int *)&v307[8];
      }
      ++v124;
      v123 += 24;
      if (v124 >= v122)
        goto LABEL_226;
    }
    v127 = 1 << v126;
    *(_QWORD *)(a1 + 2392) |= v127;
    v128 = (_QWORD *)(a1 + 2408);
    if (!*(_BYTE *)(v125 + v123 + 9))
      goto LABEL_221;
LABEL_220:
    *v128 |= v127;
    goto LABEL_221;
  }
LABEL_226:
  if ((_DWORD)v320)
  {
    v132 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v132 + 184))(v132, &v319);
  }
  sub_21DF6BAB0(a1, (uint64_t)v307);
  if ((uint64_t (****)())v319 != &v321)
    free((void *)v319);
  if (*(_BYTE **)v307 != &v307[16])
    free(*(void **)v307);
  sub_21DF2E824((_QWORD *)v315);
LABEL_244:
  sub_21DF6BC3C((_QWORD *)(a1 + 1960));
  sub_21DF6BC3C((_QWORD *)(a1 + 2008));
  sub_21DF6BC3C((_QWORD *)(a1 + 2056));
  sub_21DF6BC3C((_QWORD *)(a1 + 2104));
  v49 = v274;
LABEL_245:
  if (v276 != v275)
    free(v276);
  return v49;
}

uint64_t sub_21DF60FD4(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int Key;
  int v23;
  BOOL v24;
  int v25;
  std::string::size_type v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type *v37;
  char *v38;
  char *v39;
  std::string::size_type v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  std::string *v50;
  const std::string::value_type *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t Impl;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Module *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  int v68;
  llvm::Type *v69;
  uint64_t v70;
  llvm::Instruction *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BOOL4 v80;
  int v82;
  llvm::Type *v83;
  int v84;
  llvm::Value *v85;
  llvm::Value *v86;
  int v87;
  int v89;
  uint64_t v90;
  uint64_t v91;
  llvm::CallBase *v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  llvm::Type ***v104;
  uint64_t v105;
  uint64_t v106;
  llvm::Type ***v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::GlobalValue *v118;
  unsigned int v119;
  uint64_t v120;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Instruction *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  llvm::Instruction *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  llvm::Instruction *v140;
  unsigned __int8 *v141;
  llvm::Constant **v142;
  uint64_t *v143;
  llvm::Type *v144;
  uint64_t NullValue;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void *Name;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::string::size_type v171;
  unsigned int *v172;
  int v173;
  llvm **v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  llvm *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  BOOL v195;
  _QWORD *v196;
  uint64_t v197;
  BOOL v198;
  unint64_t *SectionImpl;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  llvm::Value *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v225;
  uint64_t v226;
  uint64_t i;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  llvm::Instruction *v233;
  uint64_t v234;
  llvm::Instruction *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  std::string *v256;
  std::string::size_type v257;
  std::string *v258;
  const char *v259;
  const std::string::value_type *p_p;
  std::string::size_type v261;
  unsigned int *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  uint64_t v269;
  char v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  llvm::GlobalValue *v276;
  std::string v277;
  void *v278;
  uint64_t v279;
  _BYTE v280[64];
  void *v281;
  llvm::Type *v282;
  _BYTE v283[64];
  void *v284;
  uint64_t v285;
  _BYTE v286[64];
  __int128 __p;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  int v293;
  std::string *v294;
  std::string v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;

  v298 = *MEMORY[0x24BDAC8D0];
  sub_21DF35B3C();
  sub_21DF634A0();
  sub_21DF63508();
  sub_21DF63570();
  sub_21DF635D8();
  v284 = v286;
  v285 = 0x800000000;
  sub_21DF63640((_QWORD *)a1, (uint64_t)&v284);
  v281 = v283;
  v282 = (llvm::Type *)0x800000000;
  v278 = v280;
  v279 = 0x800000000;
  v267 = a1;
  if (!(_DWORD)v285)
    goto LABEL_85;
  v2 = (uint64_t **)v284;
  v3 = (uint64_t **)((char *)v284 + 8 * v285);
  do
  {
    v4 = *v2;
    v295.__r_.__value_.__r.__words[0] = 0;
    sub_21DF63708((uint64_t)v4, (unint64_t *)&v295);
    v5 = *(char **)(a1 + 816);
    v6 = *(_QWORD *)(a1 + 824);
    if ((unint64_t)v5 >= v6)
    {
      v8 = *(char **)(a1 + 808);
      v9 = (v5 - v8) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        goto LABEL_372;
      v11 = v6 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_21DF256A4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = v295.__r_.__value_.__r.__words[0];
      v7 = v14 + 8;
      while (v5 != v8)
      {
        v15 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      *(_QWORD *)(a1 + 808) = v14;
      *(_QWORD *)(a1 + 816) = v7;
      *(_QWORD *)(a1 + 824) = &v13[8 * v12];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v5 = v295.__r_.__value_.__r.__words[0];
      v7 = v5 + 8;
    }
    *(_QWORD *)(a1 + 816) = v7;
    sub_21DF35B3C();
    sub_21DF635D8();
    *(_QWORD *)&__p = &v288;
    *((_QWORD *)&__p + 1) = 0x2000000000;
    sub_21DF19CD0((uint64_t)&__p, (uint64_t)v4);
    v16 = DWORD2(__p);
    if (!DWORD2(__p))
    {
LABEL_43:
      v25 = 0;
      goto LABEL_45;
    }
    while (1)
    {
      v17 = *(_QWORD *)(__p + 8 * v16-- - 8);
      DWORD2(__p) = v16;
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
        break;
LABEL_42:
      if (!v16)
        goto LABEL_43;
    }
    while (1)
    {
      v19 = *(_QWORD *)(v18 + 24);
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 <= 0x1B)
      {
        if (v20 != 5 || *(_WORD *)(v19 + 18) != 49)
          goto LABEL_44;
        goto LABEL_28;
      }
      if (v20 == 84)
        break;
      if (v20 != 77)
        goto LABEL_44;
LABEL_28:
      sub_21DF19CD0((uint64_t)&__p, v19);
LABEL_29:
      v18 = *(_QWORD *)(v18 + 8);
      if (!v18)
      {
        v16 = DWORD2(__p);
        goto LABEL_42;
      }
    }
    v21 = *(_QWORD *)(v19 - 32);
    if (v21 && !*(_BYTE *)(v21 + 16) && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v19 + 72))
    {
      llvm::Value::getName((llvm::Value *)v21);
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_2553B3CE8)
        goto LABEL_29;
      v23 = llvm::StringMapImpl::FindKey();
      v24 = v23 == (unint64_t)dword_2553B3C90 || v23 == -1;
      if (!v24)
        goto LABEL_29;
    }
LABEL_44:
    v25 = 1;
LABEL_45:
    if ((const char **)__p != &v288)
      free((void *)__p);
    if (!v25)
      goto LABEL_71;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1))
    {
      v50 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408);
      v51 = "Indirect samplers are not supported";
      goto LABEL_206;
    }
    v26 = v295.__r_.__value_.__r.__words[0];
    v27 = *(_QWORD **)(a1 + 792);
    v28 = *(_QWORD *)(a1 + 784);
    v29 = (uint64_t)v27 - v28;
    v30 = *(_QWORD *)(a1 + 800);
    if ((unint64_t)v27 < v30)
    {
      *v27 = v295.__r_.__value_.__r.__words[0];
      v31 = v27 + 1;
      goto LABEL_66;
    }
    v32 = (v29 >> 3) + 1;
    if (v32 >> 61)
LABEL_372:
      abort();
    v33 = v30 - v28;
    v34 = v33 >> 2;
    if (v33 >> 2 <= v32)
      v34 = (v29 >> 3) + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v35 = (unint64_t)sub_21DF527B8(v35);
    else
      v36 = 0;
    v37 = (std::string::size_type *)(v35 + 8 * (v29 >> 3));
    *v37 = v26;
    v31 = v37 + 1;
    v38 = *(char **)(a1 + 792);
    v39 = *(char **)(a1 + 784);
    if (v38 == v39)
    {
      v41 = (_QWORD *)a1;
    }
    else
    {
      do
      {
        v40 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *--v37 = v40;
      }
      while (v38 != v39);
      v41 = (_QWORD *)a1;
      v38 = *(char **)(a1 + 784);
    }
    v41[98] = v37;
    v41[99] = v31;
    v41[100] = v35 + 8 * v36;
    if (v38)
      operator delete(v38);
LABEL_66:
    *(_QWORD *)(a1 + 792) = v31;
    v42 = v282;
    if (v282 >= HIDWORD(v282))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v282;
    }
    *((_QWORD *)v281 + v42) = ((unint64_t)v29 >> 3) | 0x100000000;
    LODWORD(v282) = (_DWORD)v282 + 1;
    v43 = llvm::ConstantInt::get();
    v44 = v279;
    if (v279 >= (unint64_t)HIDWORD(v279))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = v279;
    }
    *((_QWORD *)v278 + v44) = v43;
    LODWORD(v279) = v279 + 1;
    v45 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    v46 = llvm::ConstantInt::get();
    v47 = *v4;
    LOWORD(v290) = 257;
    sub_21DF1A79C(v45, 48, v46, v47, (uint64_t)&__p);
    llvm::Value::replaceAllUsesWith();
LABEL_71:
    ++v2;
  }
  while (v2 != v3);
  if ((_DWORD)v282)
  {
    v48 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 1744), (llvm::Type *)v282);
    if (**(_BYTE **)(a1 + 1736))
    {
      *(_QWORD *)&__p = *(_QWORD *)(a1 + 1736);
      v288 = "_indirect";
      v49 = 771;
    }
    else
    {
      *(_QWORD *)&__p = "_indirect";
      v49 = 259;
    }
    LOWORD(v290) = v49;
    llvm::GlobalVariable::GlobalVariable();
    if (*(_QWORD *)(a1 + 1752))
      strlen(*(const char **)(a1 + 1752));
    llvm::GlobalObject::setSection();
    *(_QWORD *)&__p = &v288;
    *((_QWORD *)&__p + 1) = 0x2000000000;
    v52 = llvm::ValueAsMetadata::get();
    sub_21DF19CD0((uint64_t)&__p, v52);
    llvm::ConstantInt::get();
    v53 = llvm::ValueAsMetadata::get();
    if ((_DWORD)v282)
    {
      v54 = v53;
      v55 = (char *)v281;
      v56 = 8 * v282;
      do
      {
        *(_OWORD *)&v295.__r_.__value_.__l.__data_ = (unint64_t)v54;
        v55 += 8;
        llvm::ConstantInt::get();
        v295.__r_.__value_.__l.__size_ = llvm::ValueAsMetadata::get();
        Impl = llvm::MDTuple::getImpl();
        sub_21DF19CD0((uint64_t)&__p, Impl);
        v56 -= 8;
      }
      while (v56);
    }
    v58 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 328);
    v59 = llvm::MDTuple::getImpl();
    sub_21DF19CD0(v58, v59);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 1712), v48);
    if ((const char **)__p != &v288)
      free((void *)__p);
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200), (llvm::Type *)v282);
    v60 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200), (llvm::Type *)v282);
    *(_QWORD *)&__p = "agc.constant_sampler_unique_id";
    LOWORD(v290) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v60 + 80) |= 1u;
    llvm::ConstantArray::get();
    llvm::GlobalVariable::setInitializer();
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 1824), v60);
  }
LABEL_85:
  sub_21DF69AC8();
  v61 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v62 = *(llvm::Module **)(a1 + v61 + 320);
  v63 = (_QWORD *)((char *)v62 + 24);
  v64 = (_QWORD *)*((_QWORD *)v62 + 4);
  if (v64 == (_QWORD *)((char *)v62 + 24))
    goto LABEL_129;
  v271 = (_QWORD *)((char *)v62 + 24);
  v65 = &qword_2553B3000;
  while (2)
  {
    v66 = (llvm::Value *)(v64 - 7);
    v24 = v64 == 0;
    v64 = (_QWORD *)v64[1];
    if (v24)
      v67 = 0;
    else
      v67 = v66;
    llvm::Value::getName(v67);
    v68 = llvm::StringMapImpl::FindKey();
    if (v68 != -1 && v68 != (unint64_t)*((unsigned int *)v65 + 794))
    {
      sub_21DF35B3C();
      sub_21DF634A0();
      sub_21DF63570();
      sub_21DF635D8();
      v274 = v64;
      if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678))
      {
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getIntToPtr();
      }
      else
      {
        llvm::Constant::getNullValue(**(llvm::Constant ***)(*((_QWORD *)v67 + 3) + 16), v69);
      }
      v70 = *((_QWORD *)v67 + 1);
      if (!v70)
        goto LABEL_126;
      while (1)
      {
        v71 = *(llvm::Instruction **)(v70 + 24);
        v70 = *(_QWORD *)(v70 + 8);
        v72 = *((_QWORD *)v71 + 1);
        if (!v72)
          goto LABEL_125;
        do
        {
          v73 = *(_QWORD *)(v72 + 24);
          v72 = *(_QWORD *)(v72 + 8);
          if (v73)
          {
            if (*(_BYTE *)(v73 + 16) == 84)
            {
              v74 = *(_QWORD *)(v73 - 32);
              if (v74)
              {
                if (!*(_BYTE *)(v74 + 16) && *(_QWORD *)(v74 + 24) == *(_QWORD *)(v73 + 72))
                {
                  llvm::Value::getName(*(llvm::Value **)(v73 - 32));
                  v75 = llvm::StringMapImpl::FindKey();
                  v76 = v75;
                  if (v75 == -1)
                    v76 = dword_2553B3CE8;
                  v77 = qword_2553B3CE0 + 8 * v76;
                  llvm::Value::getName((llvm::Value *)v74);
                  v78 = llvm::StringMapImpl::FindKey();
                  v80 = v78 != -1 && v78 != (unint64_t)dword_2553B3BF0;
                  if (v77 != qword_2553B3CE0 + 8 * dword_2553B3CE8 || v80)
                  {
                    llvm::UndefValue::get();
LABEL_121:
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v73);
                    continue;
                  }
                  llvm::Value::getName((llvm::Value *)v74);
                  v82 = llvm::StringMapImpl::FindKey();
                  if (v82 != -1 && v82 != (unint64_t)dword_2553B3C90)
                  {
                    llvm::Constant::getNullValue(*(llvm::Constant **)v73, v83);
                    goto LABEL_121;
                  }
                  llvm::Value::getName((llvm::Value *)v74);
                  v84 = llvm::StringMapImpl::FindKey();
                  if (v84 != -1 && v84 != (unint64_t)dword_2553B3C40)
                  {
                    llvm::ConstantInt::get();
                    goto LABEL_121;
                  }
                }
              }
            }
          }
        }
        while (v72);
        if (*((_QWORD *)v71 + 1))
          llvm::Value::replaceAllUsesWith();
LABEL_125:
        llvm::Instruction::eraseFromParent(v71);
        if (!v70)
        {
LABEL_126:
          llvm::Function::eraseFromParent(v67);
          v64 = v274;
          v63 = v271;
          v65 = &qword_2553B3000;
          break;
        }
      }
    }
    if (v64 != v63)
      continue;
    break;
  }
  v61 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v62 = *(llvm::Module **)(a1 + v61 + 320);
  v64 = (_QWORD *)*((_QWORD *)v62 + 4);
LABEL_129:
  v272 = (_QWORD *)((char *)v62 + 24);
  if (v64 == (_QWORD *)((char *)v62 + 24))
    goto LABEL_209;
  v270 = 0;
  v273 = a1 + 8;
  do
  {
    v85 = (llvm::Value *)(v64 - 7);
    v24 = v64 == 0;
    v64 = (_QWORD *)v64[1];
    if (v24)
      v86 = 0;
    else
      v86 = v85;
    llvm::Value::getName(v86);
    v87 = llvm::StringMapImpl::FindKey();
    if (v87 != -1 && v87 != (unint64_t)dword_2553B3CE8)
    {
      if (!sub_21DF637D4((uint64_t *)a1, (uint64_t)v86, (int *)(*(_QWORD *)(qword_2553B3CE0 + 8 * v87) + 8)))
      {
LABEL_207:
        v147 = 0;
        goto LABEL_353;
      }
LABEL_162:
      if (*((_QWORD *)v86 + 1))
        goto LABEL_177;
      goto LABEL_199;
    }
    llvm::Value::getName(v86);
    v89 = llvm::StringMapImpl::FindKey();
    v275 = v64;
    if (v89 != -1 && v89 != (unint64_t)dword_2553B3BF0)
    {
      v90 = *((_QWORD *)v86 + 1);
      if (v90)
      {
        v91 = *(_QWORD *)(qword_2553B3BE8 + 8 * v89);
        while (1)
        {
          v92 = *(llvm::CallBase **)(v90 + 24);
          v90 = *(_QWORD *)(v90 + 8);
          v93 = (unsigned __int8 *)*((_QWORD *)v92 - 4 * (*((_DWORD *)v92 + 5) & 0x7FFFFFF));
          if (v93[16] - 11 > 1)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) & 1) == 0
              && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v93) + 16) > 0x14u)
            {
              goto LABEL_146;
            }
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v92);
            v94 = *(_DWORD *)(v91 + 12);
            switch(v94)
            {
              case 0:
              case 1:
              case 2:
                if (v94 || !*(_BYTE *)(v91 + 16))
                {
                  v96 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                  v97 = sub_21DF66288(a1, (llvm::GlobalValue *)v93, 2u);
                  LOWORD(v290) = 257;
                  v98 = sub_21DF19394((uint64_t *)(v273 + v96), **(llvm::Type ***)(*(_QWORD *)v97 + 16), v97, 0, (uint64_t)&__p);
                  v99 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                  LOWORD(v290) = 257;
                  v100 = v99 + 8;
                  v101 = llvm::ConstantInt::get();
                  v95 = sub_21DF79584(v100, v98, v101, (uint64_t)&__p);
                }
                else
                {
                  v95 = sub_21DF683A4((uint64_t *)a1, (llvm::GlobalValue *)v93);
                }
                v102 = v95;
                v103 = sub_21DF35A70(v92);
                v104 = (llvm::Type ***)((char *)v92 - 32 * (*((_DWORD *)v92 + 5) & 0x7FFFFFF));
                if (((v103 - (_QWORD)v104) & 0x1FFFFFFFE0) == 0x40)
                {
                  v105 = sub_21DF79ED0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v104[4], 0);
                  v106 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                  LOWORD(v290) = 257;
                  v107 = (llvm::Type ***)sub_21DF1AE6C(v106, v102, v105, (uint64_t)&__p);
                  v108 = llvm::ConstantInt::get();
                  llvm::ConstantInt::get();
                  v109 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v267 - 24) + v267 + 8);
                  LOWORD(v290) = 257;
                  sub_21DF19478(v109, 32, v107, v108, (uint64_t)&__p);
                  LOWORD(v290) = 257;
                  a1 = v267;
                  llvm::IRBuilderBase::CreateSelect();
                }
                break;
              case 3:
                v110 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v111 = sub_21DF66288(a1, (llvm::GlobalValue *)v93, 2u);
                LOWORD(v290) = 257;
                v112 = sub_21DF19394((uint64_t *)(v273 + v110), **(llvm::Type ***)(*(_QWORD *)v111 + 16), v111, 0, (uint64_t)&__p);
                v113 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                LOWORD(v290) = 257;
                v114 = v113 + 8;
                v115 = llvm::ConstantInt::get();
                sub_21DF79584(v114, v112, v115, (uint64_t)&__p);
                break;
              case 4:
                v116 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v117 = a1;
                v118 = (llvm::GlobalValue *)v93;
                v119 = 5;
                goto LABEL_160;
              case 5:
                v116 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v117 = a1;
                v118 = (llvm::GlobalValue *)v93;
                v119 = 6;
LABEL_160:
                v120 = sub_21DF66288(v117, v118, v119);
                LOWORD(v290) = 257;
                sub_21DF19394((uint64_t *)(v273 + v116), **(llvm::Type ***)(*(_QWORD *)v120 + 16), v120, 0, (uint64_t)&__p);
                break;
              default:
                break;
            }
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v92);
LABEL_146:
          if (!v90)
            goto LABEL_176;
        }
      }
LABEL_199:
      llvm::Function::eraseFromParent(v86);
      continue;
    }
    llvm::Value::getName(v86);
    v122 = llvm::StringMapImpl::FindKey();
    if (v122 != -1 && v122 != (unint64_t)dword_2553B3C90)
    {
      *(_QWORD *)&__p = llvm::Value::getName(v86);
      *((_QWORD *)&__p + 1) = v123;
      v124 = llvm::StringRef::find();
      v125 = *((_QWORD *)v86 + 1);
      if (v125)
      {
        v126 = v124;
        do
        {
          v127 = *(llvm::Instruction **)(v125 + 24);
          v125 = *(_QWORD *)(v125 + 8);
          v128 = (unsigned __int8 *)*((_QWORD *)v127 - 4 * (*((_DWORD *)v127 + 5) & 0x7FFFFFF));
          if (v128[16] - 11 > 1)
          {
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v127);
            if (v126 == -1)
            {
              v129 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              v130 = sub_21DF66288(a1, (llvm::GlobalValue *)v128, 9u);
              LOWORD(v290) = 257;
              sub_21DF19394((uint64_t *)(v273 + v129), **(llvm::Type ***)(*(_QWORD *)v130 + 16), v130, 0, (uint64_t)&__p);
            }
            else
            {
              *(_QWORD *)&__p = 0;
              if (sub_21DF63708((uint64_t)v128, (unint64_t *)&__p))
                llvm::ConstantInt::get();
              else
                sub_21DF67950((_QWORD *)a1, (llvm::GlobalValue *)v128, 2u);
            }
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v127);
        }
        while (v125);
LABEL_176:
        v64 = v275;
        if (*((_QWORD *)v86 + 1))
        {
LABEL_177:
          v270 = 1;
          continue;
        }
      }
      goto LABEL_199;
    }
    llvm::Value::getName(v86);
    v131 = llvm::StringMapImpl::FindKey();
    if (v131 != -1 && v131 != (unint64_t)dword_2553B3C18)
    {
      v132 = *((_QWORD *)v86 + 1);
      if (!v132)
        goto LABEL_199;
      while (2)
      {
        v133 = *(llvm::Instruction **)(v132 + 24);
        v132 = *(_QWORD *)(v132 + 8);
        v134 = (unsigned __int8 *)*((_QWORD *)v133 - 4 * (*((_DWORD *)v133 + 5) & 0x7FFFFFF));
        if (v134[16] - 11 <= 1)
        {
          llvm::UndefValue::get();
          goto LABEL_188;
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) & 1) != 0
          || *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v134) + 16) <= 0x14u)
        {
          sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v133);
          v135 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
          if (*(_QWORD *)(v135 + 904))
            strlen(*(const char **)(v135 + 904));
          v136 = sub_21DF206CC();
          v137 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          LOWORD(v290) = 257;
          sub_21DF191A4(v273 + v137, **(_QWORD **)(*(_QWORD *)v136 + 16), v136, 0, 0, (uint64_t)&__p);
          v64 = v275;
LABEL_188:
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v133);
        }
        if (!v132)
          goto LABEL_162;
        continue;
      }
    }
    llvm::Value::getName(v86);
    v138 = llvm::StringMapImpl::FindKey();
    if (v138 != -1 && v138 != (unint64_t)dword_2553B3C40)
    {
      v139 = *((_QWORD *)v86 + 1);
      if (v139)
      {
        do
        {
          v140 = *(llvm::Instruction **)(v139 + 24);
          v139 = *(_QWORD *)(v139 + 8);
          v141 = (unsigned __int8 *)*((_QWORD *)v140 - 4 * (*((_DWORD *)v140 + 5) & 0x7FFFFFF));
          if (v141[16] - 11 > 1)
          {
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v140);
            v142 = (llvm::Constant **)sub_21DF66D58(a1, (llvm::GlobalValue *)v141);
            v143 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
            LOWORD(v290) = 257;
            NullValue = llvm::Constant::getNullValue(*v142, v144);
            v64 = v275;
            sub_21DF19478(v143, 32, (llvm::Type ***)v142, NullValue, (uint64_t)&__p);
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v140);
        }
        while (v139);
        goto LABEL_162;
      }
      goto LABEL_199;
    }
  }
  while (v64 != v272);
  v146 = *(_QWORD *)a1;
  if ((v270 & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(v146 + 272))(a1))
      v51 = "Could not statically determine the target of a texture write";
    else
      v51 = "Could not resolve texture/sampler references";
    v50 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408);
LABEL_206:
    std::string::append(v50, v51);
    goto LABEL_207;
  }
  v61 = *(_QWORD *)(v146 - 24);
  v62 = *(llvm::Module **)(a1 + v61 + 320);
LABEL_209:
  v148 = *(_QWORD *)(a1 + v61 + 400);
  sub_21DF2C6C4(v148);
  llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v148 + 344), v62);
  v149 = *(_QWORD **)(a1 + 760);
  v150 = (_QWORD *)(a1 + 768);
  if (v149 != (_QWORD *)(a1 + 768))
  {
    v151 = MEMORY[0x24BED83D8] + 16;
    do
    {
      v152 = v149[6];
      if (v152)
      {
        if (*(_QWORD *)(v152 + 8))
        {
          Name = (void *)llvm::Value::getName((llvm::Value *)v149[6]);
          if (Name)
          {
            Name = sub_21DF24420(&__p, Name, v154);
          }
          else
          {
            __p = 0uLL;
            v288 = 0;
          }
          sub_21DF28954((uint64_t)Name, "%s: image or sample GV %s still has references: \n", v155, v156, v157, v158, v159, v160, (char)"void AGCLLVMUserObject::cleanupSamplerGlobalVariables()");
          if (SHIBYTE(v288) < 0)
          {
            v163 = (void *)__p;
          }
          else
          {
            do
            {
LABEL_227:
              v152 = *(_QWORD *)(v152 + 8);
              if (!v152)
                goto LABEL_216;
              memset(&v295, 0, sizeof(v295));
              DWORD2(__p) = 0;
              v291 = 0;
              v292 = 0;
              v293 = 1;
              v289 = 0;
              v290 = 0;
              v288 = 0;
              *(_QWORD *)&__p = v151;
              v294 = &v295;
              sub_21DF2C310((llvm::raw_ostream *)&__p);
              v164 = llvm::Value::print(*(llvm::Value **)(v152 + 24), (llvm::raw_ostream *)&__p);
              LOBYTE(v171) = (_BYTE)v294;
              if (SHIBYTE(v294->__r_.__value_.__r.__words[2]) < 0)
                v171 = v294->__r_.__value_.__r.__words[0];
              sub_21DF28954(v164, "\t%s\n", v165, v166, v167, v168, v169, v170, v171);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
            }
            while ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0);
            v163 = (void *)v295.__r_.__value_.__r.__words[0];
          }
          operator delete(v163);
          goto LABEL_227;
        }
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v149[6]);
      }
LABEL_216:
      v161 = (_QWORD *)v149[1];
      if (v161)
      {
        do
        {
          v162 = v161;
          v161 = (_QWORD *)*v161;
        }
        while (v161);
      }
      else
      {
        do
        {
          v162 = (_QWORD *)v149[2];
          v24 = *v162 == (_QWORD)v149;
          v149 = v162;
        }
        while (!v24);
      }
      v149 = v162;
    }
    while (v162 != v150);
  }
  v172 = (unsigned int *)v267;
  sub_21DF6726C(*(_QWORD **)(v267 + 768));
  *(_QWORD *)(v267 + 760) = v150;
  *(_OWORD *)(v267 + 768) = 0u;
  v173 = *(_DWORD *)(v267 + 704);
  if (v173 || *(_DWORD *)(v267 + 708))
  {
    v174 = (llvm **)(v267 + 696);
    v175 = *(unsigned int *)(v267 + 712);
    if (v175 <= 4 * v173 || v175 < 0x41)
    {
      v288 = 0;
      v289 = -4096;
      v296 = -8192;
      *(_QWORD *)&__p = &unk_24E1F1550;
      *((_QWORD *)&__p + 1) = 2;
      v290 = 0;
      v295.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24E1F1550;
      *(_OWORD *)&v295.__r_.__value_.__r.__words[1] = 2uLL;
      v297 = 0;
      if ((_DWORD)v175)
      {
        v180 = *v174;
        v181 = 48 * v175;
        v182 = (_QWORD *)((char *)v180 + 32);
        do
        {
          sub_21DF569CC((llvm::ValueHandleBase *)(v182 - 3), (_QWORD *)&__p + 1);
          *v182 = v290;
          v182 += 6;
          v181 -= 48;
        }
        while (v181);
        v183 = v296;
        *(_QWORD *)(v267 + 704) = 0;
        if (v183 != -8192 && v183 != -4096 && v183 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v295.__r_.__value_.__r.__words[1]);
      }
      else
      {
        *(_QWORD *)(v267 + 704) = 0;
      }
      if (v289 != -8192 && v289 != -4096 && v289)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)&__p + 8));
    }
    else
    {
      sub_21DF678F4(v267 + 696);
      v176 = 1 << (33 - __clz(v173 - 1));
      if (v176 <= 64)
        v176 = 64;
      if (v173)
        v177 = v176;
      else
        v177 = 0;
      if (v177 != *(_DWORD *)(v267 + 712))
      {
        llvm::deallocate_buffer(*v174, (void *)(48 * v175));
        if (!v177)
        {
          *v174 = 0;
          *(_QWORD *)(v267 + 704) = 0;
          *(_DWORD *)(v267 + 712) = 0;
          goto LABEL_260;
        }
        v178 = (4 * v177 / 3u + 1) | ((unint64_t)(4 * v177 / 3u + 1) >> 1);
        v179 = v178 | (v178 >> 2) | ((v178 | (v178 >> 2)) >> 4);
        LODWORD(v179) = (((v179 | (v179 >> 8)) >> 16) | v179 | (v179 >> 8)) + 1;
        *(_DWORD *)(v267 + 712) = v179;
        *(_QWORD *)(v267 + 696) = MEMORY[0x2207A6DD8](48 * v179, 8);
      }
      sub_21DF67840(v267 + 696);
    }
  }
LABEL_260:
  sub_21DF5B48C(v267 + 720);
  if (*(_QWORD *)(v267 + 784) != *(_QWORD *)(v267 + 792))
  {
    v185 = *(_QWORD *)(*(_QWORD *)v267 - 24);
    v186 = *(_QWORD *)(v267 + v185 + 320);
    v187 = v186 + 8;
    v188 = *(_QWORD *)(v186 + 16);
    if (v188 == v186 + 8)
    {
      v189 = 0;
      v204 = 0;
    }
    else
    {
      v189 = 0;
      v190 = 0;
      v191 = 0;
      do
      {
        if (v188)
          v192 = v188 - 56;
        else
          v192 = 0;
        if (*(_QWORD *)(v192 + 8))
        {
          if ((*(_BYTE *)(v192 + 34) & 0x40) != 0
            && (v193 = (_QWORD *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v192), v194 == 11)
            && (*v193 == 0x74735F6567616D69
              ? (v195 = *(_QWORD *)((char *)v193 + 3) == 0x65746174735F6567)
              : (v195 = 0),
                v195))
          {
            if (*(_BYTE *)(*(_QWORD *)v192 + 8) == 17)
              v189 = (v189 + *(_DWORD *)(*(_QWORD *)v192 + 32));
            else
              v189 = (v189 + 1);
          }
          else if ((*(_BYTE *)(v192 + 34) & 0x40) != 0
                 && (v196 = (_QWORD *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v192), v197 == 13)
                 && (*v196 == 0x5F72656C706D6173
                   ? (v198 = *(_QWORD *)((char *)v196 + 5) == 0x65746174735F7265)
                   : (v198 = 0),
                     v198))
          {
            ++v190;
          }
          else if ((*(_BYTE *)(v192 + 34) & 0x40) != 0)
          {
            SectionImpl = (unint64_t *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v192);
            if (v200 == 15)
            {
              v201 = bswap64(*SectionImpl);
              v202 = 0x636F6E7374616E74;
              if (v201 == 0x636F6E7374616E74
                && (v201 = bswap64(*(unint64_t *)((char *)SectionImpl + 7)),
                    v202 = 0x745F647269766572,
                    v201 == 0x745F647269766572))
              {
                v203 = 0;
              }
              else
              {
                v203 = v201 < v202 ? -1 : 1;
              }
              if (!v203)
                ++v191;
            }
          }
        }
        v188 = *(_QWORD *)(v188 + 8);
      }
      while (v188 != v187);
      v172 = (unsigned int *)v267;
      v185 = *(_QWORD *)(*(_QWORD *)v267 - 24);
      v204 = (v190 + v191);
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)v172 + v185 + 344) + 344))(*(_QWORD *)((char *)v172 + v185 + 344), v189, v204) & 1) == 0)
    {
      std::to_string(&v277, v204 + v189);
      v256 = std::string::insert(&v277, 0, "Total number of textures and samplers (");
      v257 = v256->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v295.__r_.__value_.__l.__data_ = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
      v295.__r_.__value_.__r.__words[2] = v257;
      v256->__r_.__value_.__l.__size_ = 0;
      v256->__r_.__value_.__r.__words[2] = 0;
      v256->__r_.__value_.__r.__words[0] = 0;
      v258 = std::string::append(&v295, ") exceeds GPU allowance.");
      v259 = (const char *)v258->__r_.__value_.__r.__words[2];
      __p = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
      v288 = v259;
      v258->__r_.__value_.__l.__size_ = 0;
      v258->__r_.__value_.__r.__words[2] = 0;
      v258->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v288) >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (SHIBYTE(v288) >= 0)
        v261 = HIBYTE(v288);
      else
        v261 = *((_QWORD *)&__p + 1);
      std::string::append((std::string *)((char *)v172 + *(_QWORD *)(*(_QWORD *)v172 - 24) + 408), p_p, v261);
      if (SHIBYTE(v288) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v295.__r_.__value_.__l.__data_);
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v277.__r_.__value_.__l.__data_);
      goto LABEL_207;
    }
  }
  if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v172 + 280))(v172) & 1) == 0)
  {
    v205 = *(_QWORD *)((char *)v172 + *(_QWORD *)(*(_QWORD *)v172 - 24) + 320);
    v206 = *(_QWORD *)(v205 + 32);
    v263 = v205 + 24;
    if (v206 != v205 + 24)
    {
      v262 = v172 + 86;
      v265 = v172 + 46;
      v268 = v172 + 2;
      do
      {
        v264 = *(_QWORD *)(v206 + 8);
        if (v206)
          v207 = (llvm::Value *)(v206 - 56);
        else
          v207 = 0;
        v208 = *(_QWORD *)((char *)v262 + *(_QWORD *)(*(_QWORD *)v172 - 24));
        v209 = llvm::Value::getName(v207);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v208 + 544))(v208, v209, v210))
        {
          v211 = *((_QWORD *)v207 + 1);
          if (v211)
          {
            v269 = (uint64_t)v207;
            do
            {
              v212 = 0;
              v213 = *(_QWORD *)(v211 + 24);
              v214 = *(_QWORD *)(v211 + 8);
              *(_QWORD *)&__p = &v288;
              *((_QWORD *)&__p + 1) = 0x1000000000;
              v266 = v214;
              while (1)
              {
                v215 = sub_21DF35A70((llvm::CallBase *)v213);
                v216 = v213 - 32 * (*(_DWORD *)(v213 + 20) & 0x7FFFFFF);
                if (v212 >= ((unint64_t)(v215 - v216) >> 5))
                {
                  v225 = 0;
                  v218 = 0;
                  LODWORD(v212) = 0;
                  goto LABEL_326;
                }
                v217 = *(_QWORD *)(v216 + 32 * v212);
                v218 = *(_QWORD *)v217;
                sub_21DF19CD0((uint64_t)&__p, v217);
                v219 = *(unsigned __int8 *)(v217 + 16);
                do
                {
                  if (v219 != 77)
                    break;
                  v217 = *(_QWORD *)(v217 - 32);
                  v219 = *(unsigned __int8 *)(v217 + 16);
                }
                while (v217);
                if (v219 == 84)
                {
                  v220 = *(_QWORD *)(v217 - 32);
                  if (v220)
                  {
                    if (!*(_BYTE *)(v220 + 16) && *(_QWORD *)(v220 + 24) == *(_QWORD *)(v217 + 72))
                    {
                      v221 = (_QWORD *)llvm::Value::getName((llvm::Value *)v220);
                      if (v222 == 21)
                      {
                        v223 = *v221 == 0x7867612E6D766C6CLL && v221[1] == 0x657275747865742ELL;
                        if (v223 && *(_QWORD *)((char *)v221 + 13) == 0x6574617453657275)
                          break;
                      }
                    }
                  }
                }
                ++v212;
              }
              v225 = *(_QWORD *)(v217 - 32 * (*(_DWORD *)(v217 + 20) & 0x7FFFFFF) + 32);
LABEL_326:
              v226 = (v212 + 1);
              for (i = v213 + 32 * v226; ; i += 32)
              {
                v228 = sub_21DF35A70((llvm::CallBase *)v213);
                v229 = *(_DWORD *)(v213 + 20) & 0x7FFFFFF;
                if (v226 >= ((v228
                                                         - (v213
                                                          + 32 * (unint64_t)-(int)v229)) >> 5))
                  break;
                sub_21DF19CD0((uint64_t)&__p, *(_QWORD *)(i - 32 * v229));
                LODWORD(v226) = v226 + 1;
              }
              if (v225 && *(unsigned __int8 *)(v225 + 16) >= 0x15u)
              {
                v230 = *(_QWORD *)(v213 + 40);
                v295.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.end";
                LOWORD(v297) = 259;
                v231 = llvm::BasicBlock::splitBasicBlock();
                v232 = *(_QWORD *)(v230 + 40);
                if (v232 == v230 + 40)
                {
                  v235 = 0;
                }
                else
                {
                  v233 = (llvm::Instruction *)(v232 - 24);
                  if (v232)
                    v234 = v232 - 24;
                  else
                    v234 = 0;
                  if (*(unsigned __int8 *)(v234 + 16) - 29 >= 0xB)
                    v235 = 0;
                  else
                    v235 = v233;
                }
                llvm::Instruction::eraseFromParent(v235);
                v236 = (char *)v172 + *(_QWORD *)(*(_QWORD *)v172 - 24);
                *((_QWORD *)v236 + 7) = v230;
                *((_QWORD *)v236 + 8) = v230 + 40;
                v237 = *(_QWORD *)(*(_QWORD *)v172 - 24);
                v238 = *(_QWORD *)((char *)v265 + v237);
                LOWORD(v297) = 257;
                v239 = sub_21DF1A79C((uint64_t)v172 + v237 + 8, 38, v225, v238, (uint64_t)&v295);
                v240 = v172[571];
                v241 = (char *)v172 + *(_QWORD *)(*(_QWORD *)v172 - 24);
                v242 = llvm::User::operator new((llvm::User *)0x40);
                v243 = v239;
                v244 = v242;
                MEMORY[0x2207A69C4](v242, v243, v231, v240, 0);
                LOWORD(v297) = 257;
                (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**((_QWORD **)v241 + 11) + 16))(*((_QWORD *)v241 + 11), v244, &v295, *((_QWORD *)v241 + 7), *((_QWORD *)v241 + 8));
                v245 = *((unsigned int *)v241 + 4);
                if ((_DWORD)v245)
                {
                  v246 = *((_QWORD *)v241 + 1);
                  v247 = v246 + 16 * v245;
                  do
                  {
                    llvm::Instruction::setMetadata();
                    v246 += 16;
                  }
                  while (v246 != v247);
                }
                if ((_DWORD)v240)
                {
                  v248 = 0;
                  do
                  {
                    v276 = (llvm::GlobalValue *)llvm::ConstantInt::get();
                    v295.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.case";
                    LOWORD(v297) = 259;
                    v249 = operator new();
                    llvm::BasicBlock::BasicBlock();
                    llvm::SwitchInst::addCase();
                    v250 = *(_QWORD *)(*(_QWORD *)v267 - 24) + v267;
                    *(_QWORD *)(v250 + 56) = v249;
                    *(_QWORD *)(v250 + 64) = v249 + 40;
                    v251 = sub_21DF66288(v267, v276, 1u);
                    v252 = *(_QWORD *)(*(_QWORD *)v267 - 24) + v267 + 8;
                    LOWORD(v297) = 257;
                    v253 = sub_21DF1A79C(v252, 49, v251, v218, (uint64_t)&v295);
                    *(_QWORD *)(__p + 8 * v212) = v253;
                    v254 = (uint64_t)v268 + *(_QWORD *)(*(_QWORD *)v267 - 24);
                    LOWORD(v297) = 257;
                    sub_21DF191A4(v254, *(_QWORD *)(v269 + 24), v269, __p, DWORD2(__p), (uint64_t)&v295);
                    sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v267 - 24) + v267 + 8));
                    ++v248;
                  }
                  while (v240 > (unsigned __int16)v248);
                }
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent((llvm::Instruction *)v213);
                v172 = (unsigned int *)v267;
              }
              v211 = v266;
              if ((const char **)__p != &v288)
                free((void *)__p);
            }
            while (v266);
          }
        }
        v206 = v264;
      }
      while (v264 != v263);
    }
  }
  v147 = 1;
LABEL_353:
  if (v278 != v280)
    free(v278);
  if (v281 != v283)
    free(v281);
  if (v284 != v286)
    free(v284);
  return v147;
}

void sub_21DF62E88(_QWORD *a1)
{
  char *v1;
  llvm::Type **v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::Type **v23;
  llvm::Type *v24;
  llvm::Value *v25;
  _DWORD *Name;
  unint64_t v27;
  char *v28;
  size_t v29;
  int Key;
  uint64_t v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  char *v48;
  void (*v49)(_QWORD *, _QWORD);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t __len;
  char *__src;
  char __srca;
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  void *__dst[2];
  uint64_t v60;
  char *v61;
  char *v62;
  size_t v63;
  char *v64[2];
  char *v65;
  size_t v66;
  uint64_t (**v67)();
  void *v68;
  _DWORD v69[26];
  uint64_t v70;
  uint64_t v71;
  llvm::Type **v72;
  uint64_t v73;
  uint64_t (**v74)();
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[26];
  uint64_t (***v79)();
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = (llvm::Type **)*((_QWORD *)v1 + 40);
  v3 = *((_QWORD *)v1 + 43);
  sub_21DF78A10((uint64_t)&v67, *v2);
  v73 = v3;
  v67 = &off_24E1F15A0;
  sub_21DF78A10((uint64_t)&v74, *v2);
  v79 = &v67;
  v78[23] = v2;
  v74 = &off_24E1E9230;
  v72 = v2;
  v69[20] = *(_DWORD *)(v3 + 104);
  v4 = atomic_load((unsigned __int8 *)&qword_2553B32A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2553B32A8))
  {
    qword_2553B3288 = 0;
    *(_QWORD *)&dword_2553B3290 = 0;
    qword_2553B3298 = 0x2800000000;
    __cxa_atexit((void (*)(void *))sub_21DF3F494, &qword_2553B3288, &dword_21DF15000);
    __cxa_guard_release(&qword_2553B32A8);
  }
  if (!dword_2553B3294)
  {
    v5 = sub_21DF3F570("fast_sin", 8uLL);
    v6 = *sub_21DF3F678((llvm::StringMapImpl *)(*v5 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v6 + 8) = sub_21DF3F768;
    *(_QWORD *)(v6 + 16) = 0;
    v7 = sub_21DF3F570("fast_sin", 8uLL);
    v8 = *sub_21DF3F678((llvm::StringMapImpl *)(*v7 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v8 + 8) = sub_21DF3F770;
    *(_QWORD *)(v8 + 16) = 0;
    v9 = sub_21DF3F570("fast_sin", 8uLL);
    v10 = *sub_21DF3F678((llvm::StringMapImpl *)(*v9 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v10 + 8) = sub_21DF3F7FC;
    *(_QWORD *)(v10 + 16) = 0;
    v11 = sub_21DF3F570("fast_cos", 8uLL);
    v12 = *sub_21DF3F678((llvm::StringMapImpl *)(*v11 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v12 + 8) = sub_21DF3F770;
    *(_QWORD *)(v12 + 16) = 0;
    v13 = sub_21DF3F570("fast_cos", 8uLL);
    v14 = *sub_21DF3F678((llvm::StringMapImpl *)(*v13 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v14 + 8) = sub_21DF3F768;
    *(_QWORD *)(v14 + 16) = 0;
    v15 = sub_21DF3F570("fast_cos", 8uLL);
    v16 = *sub_21DF3F678((llvm::StringMapImpl *)(*v15 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v16 + 8) = sub_21DF3F8A0;
    *(_QWORD *)(v16 + 16) = 0;
    v17 = sub_21DF3F570("fast_tan", 8uLL);
    v18 = *sub_21DF3F678((llvm::StringMapImpl *)(*v17 + 8), "fast_asin", 9uLL);
    *(_QWORD *)(v18 + 8) = sub_21DF3F944;
    *(_QWORD *)(v18 + 16) = 0;
    v19 = sub_21DF3F570("fast_tan", 8uLL);
    v20 = *sub_21DF3F678((llvm::StringMapImpl *)(*v19 + 8), "fast_acos", 9uLL);
    *(_QWORD *)(v20 + 8) = sub_21DF3F98C;
    *(_QWORD *)(v20 + 16) = 0;
    v21 = sub_21DF3F570("fast_tan", 8uLL);
    v22 = *sub_21DF3F678((llvm::StringMapImpl *)(*v21 + 8), "fast_atan", 9uLL);
    *(_QWORD *)(v22 + 8) = sub_21DF3F768;
    *(_QWORD *)(v22 + 16) = 0;
  }
  v23 = v72 + 3;
  v24 = v72[4];
  if (v24 != (llvm::Type *)(v72 + 3))
  {
    do
    {
      if (v24)
        v25 = (llvm::Type *)((char *)v24 - 56);
      else
        v25 = 0;
      v24 = (llvm::Type *)*((_QWORD *)v24 + 1);
      Name = (_DWORD *)llvm::Value::getName(v25);
      v65 = 0;
      v66 = 0;
      v64[0] = 0;
      v64[1] = 0;
      if (sub_21DF3ED18(Name, v27, &v65, v64))
      {
        v28 = v65;
        v29 = v66;
        Key = llvm::StringMapImpl::FindKey();
        v31 = Key == -1 ? dword_2553B3290 : Key;
        if (v31 != dword_2553B3290)
        {
          v32 = *((_QWORD *)v25 + 1);
          if (v32)
          {
            v56 = qword_2553B3288;
            do
            {
              while (1)
              {
                v33 = *(llvm::Instruction **)(v32 + 24);
                v32 = *(_QWORD *)(v32 + 8);
                if (((sub_21DF35A70(v33) - ((_QWORD)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                {
                  sub_21DF3F430((uint64_t)&v68, (uint64_t)v33);
                  v34 = *((_QWORD *)v33 - 4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
                  if (v34)
                  {
                    if (*(_BYTE *)(v34 + 16) == 84
                      && ((sub_21DF35A70((llvm::CallBase *)v34) - (v34 + 32 * -(*(_DWORD *)(v34 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                    {
                      v35 = *(_QWORD *)(v34 - 32);
                      if (v35)
                      {
                        if (!*(_BYTE *)(v35 + 16) && *(_QWORD *)(v35 + 24) == *(_QWORD *)(v34 + 72))
                        {
                          v36 = (_DWORD *)llvm::Value::getName((llvm::Value *)v35);
                          v62 = 0;
                          v63 = 0;
                          if (sub_21DF3ED18(v36, v37, &v62, &v61))
                          {
                            v38 = *(_QWORD *)(v56 + 8 * v31);
                            __len = v63;
                            __src = v62;
                            v39 = llvm::StringMapImpl::FindKey();
                            v46 = (_DWORD)v39 == -1 ? *(unsigned int *)(v38 + 16) : (int)v39;
                            if (*(_QWORD *)(v38 + 8) + 8 * v46 != *(_QWORD *)(*(_QWORD *)(v56 + 8 * v31) + 8)
                                                                 + 8
                                                                 * *(unsigned int *)(*(_QWORD *)(v56 + 8 * v31) + 16))
                            {
                              v52 = *(_QWORD *)(v38 + 8) + 8 * v46;
                              if (v28)
                              {
                                v39 = (uint64_t)sub_21DF24420(__dst, v28, v29);
                                LOBYTE(v47) = __dst[0];
                                if (v60 >= 0)
                                  v47 = __dst;
                              }
                              else
                              {
                                __dst[0] = 0;
                                __dst[1] = 0;
                                v47 = __dst;
                                v60 = 0;
                              }
                              v48 = __src;
                              if (__src)
                              {
                                __srca = (char)v47;
                                v39 = (uint64_t)sub_21DF24420(__p, v48, __len);
                                LOBYTE(v47) = __srca;
                              }
                              else
                              {
                                __p[0] = 0;
                                __p[1] = 0;
                                v58 = 0;
                              }
                              sub_21DF28954(v39, "Simplify Identity: %s(%s)", v40, v41, v42, v43, v44, v45, (char)v47);
                              if (SHIBYTE(v58) < 0)
                                operator delete(__p[0]);
                              if (SHIBYTE(v60) < 0)
                                operator delete(__dst[0]);
                              v49 = *(void (**)(_QWORD *, _QWORD))(*(_QWORD *)v52 + 8);
                              v50 = *(_QWORD *)(*(_QWORD *)v52 + 16);
                              v51 = (uint64_t (***)())((char *)v79 + (v50 >> 1));
                              if ((v50 & 1) != 0)
                                v49 = *(void (**)(_QWORD *, _QWORD))(*v51 + v49);
                              v49(v51, *(_QWORD *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF)));
                              llvm::Value::replaceAllUsesWith();
                              llvm::Instruction::eraseFromParent(v33);
                              if (!llvm::Value::getNumUses((llvm::Value *)v34))
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (!v32)
                  goto LABEL_45;
              }
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v34);
            }
            while (v32);
          }
        }
      }
LABEL_45:
      ;
    }
    while (v24 != (llvm::Type *)v23);
  }
  v67 = &off_24E1F15A0;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v78);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v77);
  if (v75 != &v76)
    free(v75);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v71);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v70);
  if (v68 != v69)
    free(v68);
}

void sub_21DF634A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3C08);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3C08))
    {
      qword_2553B3BE8 = 0;
      *(_QWORD *)&dword_2553B3BF0 = 0;
      qword_2553B3BF8 = 0x1800000000;
      __cxa_atexit((void (*)(void *))sub_21DF69BA8, &qword_2553B3BE8, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3C08);
    }
  }
}

void sub_21DF63508()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3C30);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3C30))
    {
      qword_2553B3C10 = 0;
      *(_QWORD *)&dword_2553B3C18 = 0;
      qword_2553B3C20 = 0x800000000;
      __cxa_atexit((void (*)(void *))sub_21DF69B30, &qword_2553B3C10, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3C30);
    }
  }
}

void sub_21DF63570()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3C58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3C58))
    {
      qword_2553B3C38 = 0;
      *(_QWORD *)&dword_2553B3C40 = 0;
      qword_2553B3C48 = 0x800000000;
      __cxa_atexit((void (*)(void *))sub_21DF69B30, &qword_2553B3C38, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3C58);
    }
  }
}

void sub_21DF635D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3CA8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3CA8))
    {
      qword_2553B3C88 = 0;
      *(_QWORD *)&dword_2553B3C90 = 0;
      qword_2553B3C98 = 0x800000000;
      __cxa_atexit((void (*)(void *))sub_21DF69B30, &qword_2553B3C88, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3CA8);
    }
  }
}

uint64_t sub_21DF63640(_QWORD *a1, uint64_t a2)
{
  llvm::Module *v3;
  uint64_t result;
  llvm::NamedMDNode *v5;
  unsigned int i;
  uint64_t Operand;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v3 = *(llvm::Module **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
  v11 = "air.sampler_states";
  v12 = 259;
  result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&v11);
  if (result)
  {
    v5 = (llvm::NamedMDNode *)result;
    for (i = 0; ; ++i)
    {
      result = llvm::NamedMDNode::getNumOperands(v5);
      if (i >= result)
        break;
      Operand = llvm::NamedMDNode::getOperand(v5);
      v8 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v8)
      {
        if (*v8 - 1 > 1)
        {
          v10 = 0;
        }
        else
        {
          v9 = *((_QWORD *)v8 + 16);
          if (*(_BYTE *)(v9 + 16) == 3)
            v10 = v9;
          else
            v10 = 0;
        }
        sub_21DF19CD0(a2, v10);
      }
    }
  }
  return result;
}

uint64_t sub_21DF63708(uint64_t result, unint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t *v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;

  if (!result)
    return result;
  v2 = *(unsigned __int8 *)(result + 16);
  v3 = v2 - 28;
  if (v2 >= 0x1C)
    goto LABEL_8;
  if (v2 == 5)
  {
LABEL_6:
    v3 = *(unsigned __int16 *)(result + 18);
LABEL_8:
    while ((v3 & 0xFFFFFFFE) == 0x30)
    {
      v6 = *(_DWORD *)(result + 20);
      if ((v6 & 0x40000000) != 0)
        v7 = *(uint64_t **)(result - 8);
      else
        v7 = (uint64_t *)(result - 32 * (v6 & 0x7FFFFFF));
      result = *v7;
      v2 = *(unsigned __int8 *)(*v7 + 16);
      if (result)
        v8 = v2 >= 0x1C;
      else
        v8 = 0;
      if (!v8)
      {
        if (result)
          v9 = v2 == 5;
        else
          v9 = 0;
        if (v9)
          goto LABEL_6;
        goto LABEL_4;
      }
      v3 = v2 - 28;
    }
    goto LABEL_21;
  }
LABEL_4:
  if (v2 != 16)
  {
LABEL_21:
    if (v2 != 3)
      return 0;
    v10 = *(_QWORD *)(result - 32);
    if (!v10 || *(_BYTE *)(v10 + 16) != 16)
      return 0;
    v4 = (unint64_t *)(v10 + 24);
    v5 = *(_DWORD *)(v10 + 32);
    goto LABEL_25;
  }
  v4 = (unint64_t *)(result + 24);
  v5 = *(_DWORD *)(result + 32);
LABEL_25:
  if (v5 >= 0x41)
    v4 = (unint64_t *)*v4;
  v11 = *v4;
  if ((v11 & 0x8000000000000000) == 0)
    return 0;
  *a2 = v11;
  return 1;
}

uint64_t sub_21DF637D4(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  std::string *v7;
  _BYTE *size;
  int v9;
  BOOL v10;
  std::string *v11;
  const std::string::value_type *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::Instruction *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  llvm::Type *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t Splat;
  uint64_t i;
  uint64_t AggregateElement;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::User *v59;
  uint64_t *v60;
  uint64_t NullValue;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t GlobalVariable;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  char v72;
  char *v73;
  char v74;
  uint64_t v75;
  llvm::Type ***v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Type ***v82;
  char *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::Instruction *v93;
  uint64_t v94;
  llvm::Instruction *v95;
  uint64_t v96;
  uint64_t Select;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  llvm::Type **v135;
  uint64_t *v136;
  llvm::Type ***v137;
  llvm::Type *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  llvm::Type ***v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  llvm::Type **v156;
  uint64_t *v157;
  llvm::Type ***v158;
  llvm::Type *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  llvm::Type **v168;
  uint64_t *v169;
  llvm::Type ***v170;
  llvm::Type *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  llvm::Type ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  llvm::Type **v180;
  uint64_t *v181;
  llvm::Type ***v182;
  llvm::Type *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char v193;
  int v194;
  unsigned int v195;
  llvm::GlobalValue *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  char **v203;
  char v204;
  char *v205;
  uint64_t v206;
  llvm::Type *v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  _BOOL4 v218;
  char *v219;
  int v220;
  llvm::Constant **v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  llvm::Type ***v246;
  uint64_t v247;
  uint64_t v248;
  llvm::Type *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  unsigned __int8 *v265;
  llvm::GlobalValue *v266;
  char *v267;
  uint64_t v268;
  uint64_t PtrToInt;
  unsigned int *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  llvm::Type ***v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  llvm::Type *v299;
  uint64_t v300;
  uint64_t v301;
  llvm::Constant *v302;
  llvm::Type *v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v312;
  const char *v313;
  std::string *v314;
  llvm::GlobalValue *v315;
  void **v316;
  std::string::size_type v317;
  unint64_t v318;
  int v319;
  uint64_t *v320;
  uint64_t v321;
  _QWORD *v322;
  unsigned int v323;
  _QWORD *v324;
  uint64_t v325;
  int v326;
  int v327;
  _BOOL4 v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  llvm::Constant **v336;
  uint64_t v337;
  int v338;
  unsigned __int8 *v339;
  llvm::Constant *v340;
  uint64_t v341;
  llvm::GlobalValue *v342;
  __int128 v343;
  llvm::Type *v344;
  int v345;
  __int128 v346;
  llvm::Type *v347;
  int v348;
  __int128 v349;
  uint64_t v350;
  int v351;
  std::string v352;
  __int16 v353;
  void *__p[2];
  llvm::GlobalValue *v355;
  __int16 v356;
  __int16 v357;
  unint64_t v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  BOOL v363;
  __int128 v364;
  __int128 v365;
  _QWORD v366[4];
  __int128 v367;
  __int128 v368;
  __int128 v369;
  llvm::Type **v370;
  int v371;
  __int128 v372;
  _QWORD v373[4];
  llvm::Type **v374;
  uint64_t v375;
  llvm::Type ***v376;
  char v377;
  char v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;

  v385 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = (std::string *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  size = (_BYTE *)v7[14].__r_.__value_.__l.__size_;
  v9 = *a3;
  if (size[1673])
    v10 = 0;
  else
    v10 = a3[1] == 2;
  if (v10)
  {
    if ((v9 & 0xFFFFFFFE) == 2)
    {
      v11 = v7 + 17;
      v12 = "Read or write to cube texture not supported";
LABEL_17:
      std::string::append(v11, v12);
      return 0;
    }
  }
  else if (v9 == 3)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)size + 288))(size, a1[19]);
    v6 = *a1;
    size = *(_BYTE **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    v9 = *a3;
  }
  if (size[1663])
    v13 = v9 == 8;
  else
    v13 = 0;
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t *))(v6 + 304))(a1);
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 35) & 1) != 0)
      {
        v11 = (std::string *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 408);
        v12 = "Large MRT not supported with image block write";
        goto LABEL_17;
      }
    }
  }
  v359 = llvm::PointerType::get();
  llvm::StructType::get();
  v16 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
  v329 = *((unsigned __int8 *)a3 + 32);
  if (*((_BYTE *)a3 + 32))
    v17 = *(_BYTE *)(v16 + 1644) != 0;
  else
    v17 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v15 = 1;
  if (!v18)
    return v15;
  v324 = a1 + 43;
  v319 = *(unsigned __int8 *)(v16 + 1661);
  v322 = a1 + 1;
  v334 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8);
  v338 = !v17;
  v323 = *a3 & 0xFFFFFFFE;
  v320 = a1 + 95;
  v328 = v17;
  while (1)
  {
    while (1)
    {
      v19 = *(llvm::Instruction **)(v18 + 24);
      v18 = *(_QWORD *)(v18 + 8);
      sub_21DF3F430((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8, (uint64_t)v19);
      v359 = *(_QWORD *)a3;
      v363 = 0;
      v364 = 0u;
      v365 = 0u;
      memset(v366, 0, 26);
      v370 = 0;
      v368 = 0u;
      v369 = 0u;
      v367 = 0u;
      v372 = 0u;
      memset(v373, 0, 28);
      v374 = 0;
      v375 = 0;
      v377 = 0;
      v376 = 0;
      v378 = 1;
      v379 = 0;
      v20 = a3[3];
      v371 = 4;
      v21 = *((_DWORD *)v19 + 5) & 0x7FFFFFF;
      v362 = 0;
      v360 = v20;
      v22 = (_DWORD *)((char *)v19 - 32 * v21);
      if (*((_BYTE *)a3 + 23))
        v23 = *(unsigned __int8 **)&v22[8 * *((unsigned __int8 *)a3 + 23)];
      else
        v23 = 0;
      v24 = *(unsigned __int8 **)&v22[8 * *((unsigned __int8 *)a3 + 22)];
      if (v24 && v24[16] - 11 < 2)
        goto LABEL_31;
      if (!v23)
        break;
      if (v23[16] - 11 >= 2)
      {
        v358 = 0;
        v25 = sub_21DF63708((uint64_t)v23, &v358);
        if (!v24)
          goto LABEL_38;
        goto LABEL_36;
      }
LABEL_31:
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v19);
      if (!v18)
        return 1;
    }
    v25 = 0;
    v358 = 0;
    if (!v24)
      goto LABEL_38;
LABEL_36:
    if (*(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v24) + 16) >= 0x15u
      && !(*(unsigned int (**)(uint64_t *))(*a1 + 272))(a1))
    {
      goto LABEL_327;
    }
LABEL_38:
    if ((v25 & 1) == 0)
    {
      v30 = (*(uint64_t (**)(uint64_t *))(*a1 + 288))(a1);
      if (v23)
      {
        if ((v30 & 1) == 0 && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v23) + 16) > 0x14u)
          goto LABEL_327;
      }
    }
    if (((v338 | v25 | (*(unsigned int (**)(uint64_t *))(*a1 + 232))(a1) ^ 1) & 1) == 0)
      break;
    v357 = 0;
    if (v25)
    {
      v27 = v358;
      if (v17)
      {
        v28 = ((v358 >> 16) & 0xF) - 1;
        if (v28 > 7)
          LOBYTE(v29) = 0;
        else
          v29 = dword_21DFA0D44[v28];
        v357 = (32 * ((v358 & 0x6000) != 0)) | (((v358 & 0x6000) == 0x4000) << 6) | (((v358 & 0x1800) == 2048) << 7) | (((v358 & 0x600) == 512) << 8) | v29 & 0xF;
        v27 = v358 & 0xFFFFFFFFFFF0FFFFLL;
      }
      if (v323 == 4 && *(_BYTE *)(*(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24)) + 1646))
        v27 = v27 & 0xFFFFFFFFFFFF81FFLL | 0xA00;
      v23 = (unsigned __int8 *)sub_21DF68614(a1, v27);
    }
    v342 = (llvm::GlobalValue *)v24;
    v31 = v18;
    v32 = v25;
    v363 = (*a3 - 9) < 2;
    v33 = *((unsigned __int8 *)a3 + 27);
    v339 = v23;
    v337 = v31;
    v335 = v25;
    if (*((_BYTE *)a3 + 27))
    {
      v34 = (_DWORD *)((char *)v19 - 32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v35 = *(_QWORD *)&v34[8 * v33];
      v36 = (_QWORD *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
        v36 = (_QWORD *)*v36;
      if (*v36)
      {
        v37 = *(unsigned __int8 **)&v34[8 * v33 + 8];
        if (!v37 || v37[16] > 0x14u)
        {
          Splat = *(_QWORD *)&v34[8 * v33 + 8];
LABEL_72:
          *((_QWORD *)&v369 + 1) = Splat;
          v17 = v328;
          v31 = v337;
          v32 = v335;
          goto LABEL_73;
        }
        if ((llvm::Constant::isZeroValue((llvm::Constant *)v37) & 1) == 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)v37 + 8) & 0xFE) == 0x12)
          {
            v38 = *(unsigned int *)(*(_QWORD *)v37 + 32);
            llvm::ConstantInt::get();
            Splat = llvm::ConstantDataVector::getSplat();
            if ((_DWORD)v38)
            {
              for (i = 0; i != v38; ++i)
              {
                AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v37);
                v42 = AggregateElement;
                v43 = *(_DWORD *)(AggregateElement + 32);
                if (v43 > 0x40)
                  v44 = **(_QWORD **)(AggregateElement + 24);
                else
                  v44 = (uint64_t)(*(_QWORD *)(AggregateElement + 24) << -(char)v43) >> -(char)v43;
                if ((unint64_t)(v44 - 8) <= 0xFFFFFFFFFFFFFFEFLL)
                  v42 = llvm::ConstantInt::get();
                v45 = (char *)a1 + *(_QWORD *)(*a1 - 24);
                LOWORD(v384) = 257;
                v46 = (uint64_t)(v45 + 8);
                v47 = llvm::ConstantInt::get();
                Splat = sub_21DF7980C(v46, Splat, v42, v47, (uint64_t)&v380);
                v23 = v339;
              }
            }
          }
          else
          {
            v98 = *((_DWORD *)v37 + 8);
            if (v98 > 0x40)
              v99 = **((_QWORD **)v37 + 3);
            else
              v99 = (uint64_t)(*((_QWORD *)v37 + 3) << -(char)v98) >> -(char)v98;
            Splat = (uint64_t)v37;
            if ((unint64_t)(v99 - 8) <= 0xFFFFFFFFFFFFFFEFLL)
              Splat = llvm::ConstantInt::get();
          }
          goto LABEL_72;
        }
      }
    }
LABEL_73:
    if (*((_BYTE *)a3 + 31) && v363)
    {
      v48 = llvm::ConstantInt::get();
      LODWORD(v49) = v32;
    }
    else
    {
      LODWORD(v49) = v32;
      if (!*((_BYTE *)a3 + 31))
        goto LABEL_79;
      v48 = *((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 31) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    }
    v370 = (llvm::Type **)v48;
LABEL_79:
    if (v334 == 16)
    {
      if (!v17)
        HIBYTE(v362) = 1;
      if (*((_BYTE *)a3 + 37))
        v373[1] = *((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 37) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    }
    v50 = *((unsigned __int8 *)a3 + 29);
    if (*((_BYTE *)a3 + 29))
    {
      *((_QWORD *)&v372 + 1) = *((_QWORD *)v19 + 4 * v50 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v373[0] = *((_QWORD *)v19 + 4 * v50 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 4);
      v371 = 2;
      goto LABEL_86;
    }
    if (*((_BYTE *)a3 + 28))
    {
      v54 = (uint64_t *)((char *)v19 + 32 * *((unsigned __int8 *)a3 + 28) + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v55 = *v54;
      *(_QWORD *)&v372 = v54[4];
      v56 = (_QWORD *)(v55 + 24);
      if (*(_DWORD *)(v55 + 32) >= 0x41u)
        v56 = (_QWORD *)*v56;
      v57 = (_QWORD *)*v56;
      v371 = v57 != 0;
      if (!HIDWORD(v359))
      {
LABEL_314:
        v371 = 3;
        *(_QWORD *)&v372 = 0;
        goto LABEL_86;
      }
      if (!v57 && ((*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1) & 1) == 0)
      {
        v371 = 1;
        NullValue = llvm::ConstantFP::get();
        goto LABEL_320;
      }
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
      {
        v58 = *a1;
        if (*(_BYTE *)(*(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24)) + 1651))
        {
          v371 = 0;
          v49 = *(_QWORD *)(v58 - 24);
          v59 = sub_21DF67950(a1, (llvm::GlobalValue *)v23, 1u);
          LOWORD(v384) = 257;
          v60 = (_QWORD *)((char *)v322 + v49);
          LODWORD(v49) = v32;
          NullValue = sub_21DF19394(v60, **(llvm::Type ***)(*(_QWORD *)v59 + 16), (uint64_t)v59, 0, (uint64_t)&v380);
LABEL_320:
          *(_QWORD *)&v372 = NullValue;
        }
      }
    }
    else
    {
      v69 = *((unsigned __int8 *)a3 + 30);
      if (!*((_BYTE *)a3 + 30))
      {
        if (*((_BYTE *)a3 + 39))
        {
          v371 = 1;
          NullValue = llvm::ConstantInt::get();
        }
        else
        {
          if (!v363)
            goto LABEL_314;
          v371 = 0;
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 152), v26);
        }
        goto LABEL_320;
      }
      if (HIDWORD(v359))
      {
        v371 = 1;
        v70 = *((_QWORD *)v19 + 4 * v69 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      }
      else if ((_DWORD)v359 == 3)
      {
        v371 = 1;
        v70 = llvm::ConstantInt::get();
      }
      else
      {
        v70 = 0;
        v371 = 3;
      }
      *(_QWORD *)&v372 = v70;
      if (v319 && (*a3 == 8 || *a3 == 3))
      {
        v282 = *(_QWORD *)(*a1 - 24);
        v283 = sub_21DF66288((uint64_t)a1, v342, 7u);
        LOWORD(v384) = 257;
        v284 = sub_21DF19394((_QWORD *)((char *)v322 + v282), **(llvm::Type ***)(*(_QWORD *)v283 + 16), v283, 0, (uint64_t)&v380);
        v285 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
        v49 = (uint64_t)(v285 + 1);
        v286 = v372;
        v287 = sub_21DF79090(v285, v284, *(_QWORD *)v372);
        LOWORD(v384) = 257;
        v23 = v339;
        v288 = v49;
        LODWORD(v49) = v32;
        NullValue = sub_21DF19FAC(v288, v286, v287, (uint64_t)&v380);
        goto LABEL_320;
      }
    }
LABEL_86:
    if (v329)
      v373[2] = sub_21DF78BE0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *((uint64_t **)v19 + 4 * *((unsigned __int8 *)a3 + 32) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)), 1);
    v18 = v31;
    if (*((_BYTE *)a3 + 33))
      v374 = (llvm::Type **)*((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 33)
                                            + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    if (*((_BYTE *)a3 + 34))
      v375 = *((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 34) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    if (*((_BYTE *)a3 + 35))
      v376 = (llvm::Type ***)*((_QWORD *)v19
                             + 4 * *((unsigned __int8 *)a3 + 35)
                             + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    if (*((_BYTE *)a3 + 36))
    {
      v51 = *((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 36) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v52 = (_QWORD *)(v51 + 24);
      if (*(_DWORD *)(v51 + 32) >= 0x41u)
        v52 = (_QWORD *)*v52;
      v53 = *(_BYTE *)v52;
      goto LABEL_109;
    }
    if (v323 == 4)
    {
      v53 = 0;
LABEL_109:
      v377 = v53;
    }
    v62 = *a3;
    v63 = *a1;
    if (v23 || v62 == 8)
    {
      v325 = 0;
      goto LABEL_141;
    }
    __p[0] = (void *)4;
    __p[1] = 0;
    v355 = 0;
    if (!(*(unsigned int (**)(uint64_t *))(v63 + 232))(a1))
    {
      if (HIDWORD(v359))
        v66 = "agc.nnorm_sampler_wrapper_non_1d";
      else
        v66 = "agc.nnorm_sampler_wrapper_1d";
      GlobalVariable = llvm::Module::getGlobalVariable();
      if (GlobalVariable)
      {
        v68 = GlobalVariable;
      }
      else
      {
        if (HIDWORD(v359))
          v71 = "agc.nnorm_sampler_non_1d";
        else
          v71 = "agc.nnorm_sampler_1d";
        v72 = 1;
        v73 = (char *)llvm::User::operator new((llvm::User *)0x58);
        BYTE1(v384) = 1;
        if (*v71)
        {
          v380 = (char *)v71;
          v74 = 3;
        }
        else
        {
          v74 = 1;
        }
        LOBYTE(v384) = v74;
        llvm::GlobalVariable::GlobalVariable();
        v73[80] |= 1u;
        v100 = *(unsigned int *)(*(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24)) + 1604);
        v101 = __clz(v100) ^ 0x13F;
        if ((_DWORD)v100)
          v102 = v101;
        else
          v102 = 0;
        v318 = v102 | v318 & 0xFFFFFFFFFFFF0000;
        llvm::GlobalObject::setAlignment();
        llvm::GlobalObject::setSection();
        sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
        v380 = v73;
        llvm::ConstantStruct::get();
        v68 = llvm::User::operator new((llvm::User *)0x58);
        BYTE1(v384) = 1;
        if (*v66)
        {
          v380 = (char *)v66;
          v72 = 3;
        }
        LOBYTE(v384) = v72;
        llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v68 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        v380 = (char *)4;
        v381 = 0;
        v103 = v68;
        v382 = v68;
        if (v68 != -8192)
        {
          v103 = v68;
          if (v68 != -4096)
          {
            v103 = v68;
            if (v68)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v380);
              v103 = v382;
            }
          }
        }
        sub_21DF689C8(v320, v103, &v380);
        v23 = v339;
        if (v382 != -8192 && v382 != -4096 && v382)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v380);
      }
      sub_21DF4EB3C((llvm::ValueHandleBase *)__p, v68);
      LODWORD(v49) = v335;
      goto LABEL_136;
    }
    if (*a3 == 3)
    {
      v65 = 0x807BFF0000002049;
      if (a3[1])
        goto LABEL_134;
LABEL_117:
      v64 = v65 & 0xFFFFFFFFFFFF9FFFLL;
      goto LABEL_135;
    }
    v64 = 0x807BFF0000002049;
    if (*a3 == 2)
    {
      v65 = 0x807BFF0000002000;
      if (*((_BYTE *)a3 + 39)
        || (v65 = ((unint64_t)*((unsigned __int8 *)a1 + 10) << 6) | (8 * *((unsigned __int8 *)a1 + 10)) | *((unsigned __int8 *)a1 + 10) | 0x807BFF0000002000,
            a3[1]))
      {
LABEL_134:
        v64 = v65 & 0xFFFFFFFFFFFF9FFFLL | 0x2000;
        goto LABEL_135;
      }
      goto LABEL_117;
    }
LABEL_135:
    v75 = sub_21DF68614(a1, v64);
    sub_21DF4EB3C((llvm::ValueHandleBase *)__p, v75);
LABEL_136:
    v325 = sub_21DF7A4C8(v355);
    if (v355 != (llvm::GlobalValue *)-8192 && v355 != (llvm::GlobalValue *)-4096 && v355)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)__p);
    v63 = *a1;
LABEL_141:
    sub_21DF3F430((uint64_t)a1 + *(_QWORD *)(v63 - 24) + 8, (uint64_t)v19);
    v76 = (llvm::Type ***)*((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 26) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    *(_QWORD *)&v369 = v76;
    if ((a3[1] & 0xFFFFFFFE) == 2)
    {
      v76 = (llvm::Type ***)sub_21DF7969C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)v76, 4);
      v330 = 0;
      v332 = 0;
LABEL_194:
      *(_QWORD *)&v369 = v76;
      goto LABEL_195;
    }
    if (*((_BYTE *)a3 + 39))
    {
      v326 = v62;
      v77 = a3[2];
      v78 = a1 + 29;
      if (v77 == 1)
        v78 = a1 + 30;
      v79 = *(_QWORD *)((char *)v78 + *(_QWORD *)(*a1 - 24));
      v80 = sub_21DF683A4(a1, v342);
      v321 = llvm::ConstantInt::get();
      v81 = llvm::ConstantInt::get();
      v82 = (llvm::Type ***)v369;
      if (v77 != 1)
      {
        v83 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v84 = *((_QWORD *)v83 + 24);
        if ((*(_DWORD *)(*(_QWORD *)v369 + 8) & 0xFE) == 0x12)
          v84 = llvm::FixedVectorType::get();
        if ((*(_DWORD *)(v84 + 8) & 0xFE) == 0x12)
          v85 = *(unsigned __int8 *)(**(_QWORD **)(v84 + 16) + 8);
        else
          v85 = *(_DWORD *)(v84 + 8);
        v86 = (uint64_t)(v83 + 8);
        LOWORD(v384) = 257;
        if (v85 > 6)
          v87 = sub_21DF1A79C(v86, 39, (uint64_t)v82, v84, (uint64_t)&v380);
        else
          v87 = sub_21DF2F978(v86, (uint64_t)v82, v84, (uint64_t)&v380);
        v82 = (llvm::Type ***)v87;
      }
      *(_QWORD *)&v369 = v82;
      v88 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
      LOWORD(v384) = 257;
      v332 = sub_21DF19478(v88, 36, v82, v80, (uint64_t)&v380);
      v89 = *a3;
      if (*a3 == 3)
      {
        v90 = *(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24));
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 520))(v90))
        {
          v91 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 56);
          v380 = "skip_texture_buffer_write";
          LOWORD(v384) = 259;
          v330 = llvm::BasicBlock::splitBasicBlock();
          v92 = *(_QWORD *)(v91 + 40);
          if (v92 == v91 + 40)
          {
            v95 = 0;
          }
          else
          {
            v93 = (llvm::Instruction *)(v92 - 24);
            if (v92)
              v94 = v92 - 24;
            else
              v94 = 0;
            if (*(unsigned __int8 *)(v94 + 16) - 29 >= 0xB)
              v95 = 0;
            else
              v95 = v93;
          }
          llvm::Instruction::eraseFromParent(v95);
          v380 = "texture_buffer_write";
          LOWORD(v384) = 259;
          v104 = operator new();
          llvm::BasicBlock::BasicBlock();
          v105 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          *((_QWORD *)v105 + 7) = v91;
          *((_QWORD *)v105 + 8) = v91 + 40;
          sub_21DF38D70((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v332, v104, v330);
          v106 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          *((_QWORD *)v106 + 7) = v104;
          *((_QWORD *)v106 + 8) = v104 + 40;
          Select = v369;
          v18 = v337;
LABEL_193:
          v107 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          LOWORD(v384) = 257;
          v108 = sub_21DF1A410(v107, Select, v321, (uint64_t)&v380);
          v109 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          LOWORD(v384) = 257;
          v110 = sub_21DF1AE6C(v109, v369, v81, (uint64_t)&v380);
          v111 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v112 = **(_QWORD **)(v79 + 16);
          LOWORD(v384) = 257;
          v113 = sub_21DF68A90(v111, v108, v112, (uint64_t)&v380);
          v114 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v115 = **(_QWORD **)(v79 + 16);
          LOWORD(v384) = 257;
          v116 = sub_21DF68A90(v114, v110, v115, (uint64_t)&v380);
          v117 = llvm::UndefValue::get();
          v118 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v119 = (uint64_t)(v118 + 8);
          v120 = llvm::ConstantInt::get();
          v49 = sub_21DF7980C(v119, v117, v113, v120, (uint64_t)&v380);
          v121 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v122 = (uint64_t)(v121 + 8);
          v123 = llvm::ConstantInt::get();
          v76 = (llvm::Type ***)sub_21DF7980C(v122, v49, v116, v123, (uint64_t)&v380);
          v62 = v326;
          v17 = v328;
          LODWORD(v49) = v335;
          v23 = v339;
          goto LABEL_194;
        }
        v89 = *a3;
      }
      if (v89 == 2)
      {
        v96 = *(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24));
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 520))(v96);
      }
      llvm::ConstantInt::get();
      LOWORD(v384) = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      v330 = 0;
      *(_QWORD *)&v369 = Select;
      goto LABEL_193;
    }
    v330 = 0;
    v332 = 0;
LABEL_195:
    v124 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)(v124 + 344) + 1689) && !*((_BYTE *)a1 + 15))
    {
      v125 = *a3;
      v327 = v62;
      if (*a3 == 3)
      {
        v126 = v18;
        v127 = v49;
        if (a3[2] == 1)
          *(_QWORD *)&v369 = sub_21DF7A400(v124, v76, 16, 0);
        v128 = llvm::ConstantInt::get();
        if (*((_BYTE *)a3 + 31))
        {
          v129 = *(_QWORD *)(*a1 - 24);
          v130 = sub_21DF66288((uint64_t)a1, *((llvm::GlobalValue **)v19 - 4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)), 2u);
          LOWORD(v384) = 257;
          v131 = sub_21DF19394((_QWORD *)((char *)v322 + v129), **(llvm::Type ***)(*(_QWORD *)v130 + 16), v130, 0, (uint64_t)&v380);
          v132 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v133 = (uint64_t)(v132 + 8);
          v134 = llvm::ConstantInt::get();
          v135 = (llvm::Type **)sub_21DF79584(v133, v131, v134, (uint64_t)&v380);
          v136 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v137 = (llvm::Type ***)v370;
          v138 = *v370;
          LOWORD(v384) = 257;
          v139 = sub_21DF25A08((uint64_t)v136, v135, v138, (uint64_t)&v380);
          v356 = 257;
          v140 = sub_21DF19478(v136, 34, v137, v139, (uint64_t)__p);
          v353 = 257;
          v128 = sub_21DF1A4A0((uint64_t)v136, v128, v140, (uint64_t)&v352);
        }
        if (*((_BYTE *)a3 + 35))
        {
          v141 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v142 = v376;
          v143 = llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          v144 = sub_21DF19478(v141, 34, v142, v143, (uint64_t)&v380);
          v356 = 257;
          sub_21DF1A4A0((uint64_t)v141, v128, v144, (uint64_t)__p);
        }
        v23 = v339;
        v145 = v369;
        v146 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        if ((*(_DWORD *)(*(_QWORD *)v369 + 8) & 0xFE) == 0x12)
        {
          LOWORD(v384) = 257;
          v147 = (uint64_t)(v146 + 8);
          v148 = llvm::ConstantInt::get();
          sub_21DF79584(v147, v145, v148, (uint64_t)&v380);
          v149 = v369;
          v150 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          v49 = llvm::IRBuilderBase::CreateSelect();
          v356 = 257;
          v151 = llvm::ConstantInt::get();
          *(_QWORD *)&v369 = sub_21DF7980C((uint64_t)(v150 + 8), v149, v49, v151, (uint64_t)__p);
          v18 = v337;
          LODWORD(v49) = v335;
          v23 = v339;
        }
        else
        {
          llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          *(_QWORD *)&v369 = llvm::IRBuilderBase::CreateSelect();
          LODWORD(v49) = v127;
          v18 = v126;
        }
        v125 = *a3;
        v62 = v327;
        v17 = v328;
      }
      if (v125 == 2)
      {
        v152 = v49;
        v153 = llvm::ConstantInt::get();
        if ((_QWORD)v372)
        {
          v154 = *(_QWORD *)(*a1 - 24);
          v155 = sub_21DF66288((uint64_t)a1, v342, 5u);
          LOWORD(v384) = 257;
          v156 = (llvm::Type **)sub_21DF19394((_QWORD *)((char *)v322 + v154), **(llvm::Type ***)(*(_QWORD *)v155 + 16), v155, 0, (uint64_t)&v380);
          v157 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v158 = (llvm::Type ***)v372;
          v159 = *(llvm::Type **)v372;
          LOWORD(v384) = 257;
          v160 = sub_21DF25A08((uint64_t)v157, v156, v159, (uint64_t)&v380);
          v356 = 257;
          v161 = sub_21DF19478(v157, 34, v158, v160, (uint64_t)__p);
          v353 = 257;
          v153 = sub_21DF1A4A0((uint64_t)v157, v153, v161, (uint64_t)&v352);
        }
        if (*((_BYTE *)a3 + 31))
        {
          v162 = *(_QWORD *)(*a1 - 24);
          v163 = sub_21DF66288((uint64_t)a1, *((llvm::GlobalValue **)v19 - 4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)), 2u);
          LOWORD(v384) = 257;
          v164 = sub_21DF19394((_QWORD *)((char *)v322 + v162), **(llvm::Type ***)(*(_QWORD *)v163 + 16), v163, 0, (uint64_t)&v380);
          v165 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v166 = (uint64_t)(v165 + 8);
          v167 = llvm::ConstantInt::get();
          v168 = (llvm::Type **)sub_21DF79584(v166, v164, v167, (uint64_t)&v380);
          v169 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v170 = (llvm::Type ***)v370;
          v171 = *v370;
          LOWORD(v384) = 257;
          v172 = sub_21DF25A08((uint64_t)v169, v168, v171, (uint64_t)&v380);
          v356 = 257;
          v173 = sub_21DF19478(v169, 34, v170, v172, (uint64_t)__p);
          v353 = 257;
          v153 = sub_21DF1A4A0((uint64_t)v169, v153, v173, (uint64_t)&v352);
        }
        if (*((_BYTE *)a3 + 35))
        {
          v174 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v175 = v376;
          v176 = llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          v177 = sub_21DF19478(v174, 34, v175, v176, (uint64_t)&v380);
          v356 = 257;
          v153 = sub_21DF1A4A0((uint64_t)v174, v153, v177, (uint64_t)__p);
        }
        if (*((_BYTE *)a3 + 33))
        {
          v178 = *(_QWORD *)(*a1 - 24);
          v179 = sub_21DF66288((uint64_t)a1, v342, 6u);
          LOWORD(v384) = 257;
          v180 = (llvm::Type **)sub_21DF19394((_QWORD *)((char *)v322 + v178), **(llvm::Type ***)(*(_QWORD *)v179 + 16), v179, 0, (uint64_t)&v380);
          v181 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          v182 = (llvm::Type ***)v374;
          v183 = *v374;
          LOWORD(v384) = 257;
          v184 = sub_21DF25A08((uint64_t)v181, v180, v183, (uint64_t)&v380);
          v356 = 257;
          v185 = sub_21DF19478(v181, 34, v182, v184, (uint64_t)__p);
          v353 = 257;
          sub_21DF1A4A0((uint64_t)v181, v153, v185, (uint64_t)&v352);
        }
        v23 = v339;
        v186 = v369;
        v187 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        if ((*(_DWORD *)(*(_QWORD *)v369 + 8) & 0xFE) == 0x12)
        {
          LOWORD(v384) = 257;
          v188 = (uint64_t)(v187 + 8);
          v189 = llvm::ConstantInt::get();
          sub_21DF79584(v188, v186, v189, (uint64_t)&v380);
          v190 = v369;
          v191 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          v49 = llvm::IRBuilderBase::CreateSelect();
          v356 = 257;
          v192 = llvm::ConstantInt::get();
          *(_QWORD *)&v369 = sub_21DF7980C((uint64_t)(v191 + 8), v190, v49, v192, (uint64_t)__p);
          v18 = v337;
          v17 = v328;
          LODWORD(v49) = v335;
          v23 = v339;
        }
        else
        {
          llvm::ConstantInt::get();
          LOWORD(v384) = 257;
          *(_QWORD *)&v369 = llvm::IRBuilderBase::CreateSelect();
          v17 = v328;
          LODWORD(v49) = v152;
        }
        v62 = v327;
      }
    }
    BYTE1(v362) = v338;
    if (*((_BYTE *)a3 + 20))
      v193 = v338;
    else
      v193 = 0;
    LOBYTE(v362) = v193;
    *((_QWORD *)&v365 + 1) = sub_21DF66288((uint64_t)a1, v342, 2u);
    v366[0] = sub_21DF66288((uint64_t)a1, v342, 3u);
    v194 = v49;
    if (*a3 == 8 || *a3 == 3)
    {
      *(_QWORD *)&v364 = sub_21DF68B54(a1, v342);
      *(_QWORD *)&v365 = sub_21DF66288((uint64_t)a1, v342, 1u);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 280))(a1) & 1) != 0)
        goto LABEL_230;
      v195 = 4;
      v49 = (uint64_t)&v366[1];
      v196 = v342;
    }
    else
    {
      v196 = v342;
      v197 = sub_21DF68B54(a1, v342);
      v195 = 0;
      *(_QWORD *)&v364 = v197;
      v49 = (uint64_t)&v364 + 8;
    }
    *(_QWORD *)v49 = sub_21DF66288((uint64_t)a1, v196, v195);
    LOBYTE(v49) = v194;
LABEL_230:
    if (v62 == 8)
    {
      v198 = 32 * *((unsigned __int8 *)a3 + 24);
      *(_QWORD *)&v367 = *(_QWORD *)((char *)v19 + v198 + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      *((_QWORD *)&v367 + 1) = *(_QWORD *)((char *)v19 + v198 + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 32);
      *(_QWORD *)&v368 = *(_QWORD *)((char *)v19 + v198 + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 64);
      *((_QWORD *)&v368 + 1) = *(_QWORD *)((char *)v19 + v198 + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 96);
      v361 = a3[4];
      v199 = *((_QWORD *)v19 + 4 * *((unsigned __int8 *)a3 + 38) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v200 = (_QWORD *)(v199 + 24);
      if (*(_DWORD *)(v199 + 32) >= 0x41u)
        v200 = (_QWORD *)*v200;
      if (*v200)
        v379 = (*(uint64_t (**)(uint64_t *))(*a1 + 304))(a1);
      goto LABEL_237;
    }
    if (!v325)
    {
      if (v323 != 4
        || ((v209 = *(_QWORD *)(*a1 - 24), !*(_BYTE *)(*(_QWORD *)((char *)v324 + v209) + 1646))
          ? (v210 = 1)
          : (v210 = v49),
            (v210 & 1) != 0))
      {
        v366[2] = sub_21DF67950(a1, (llvm::GlobalValue *)v23, 0);
        if ((v49 & 1) != 0)
        {
          if (v17)
            goto LABEL_240;
          goto LABEL_257;
        }
        v225 = v23[16];
        if (v225 == 3)
        {
          v226 = (unsigned int *)(sub_21DF68BEC(a1[79], *((_DWORD *)a1 + 162), (uint64_t)v23) + 40);
LABEL_303:
          v202 = *v226;
          if ((_DWORD)v202 != -1)
            BYTE2(v362) = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 256))(a1, v202) & 1;
          goto LABEL_238;
        }
        if (v225 <= 0x14)
        {
          PtrToInt = llvm::ConstantExpr::getPtrToInt();
          v270 = (unsigned int *)(PtrToInt + 24);
          if (*(_DWORD *)(PtrToInt + 32) >= 0x41u)
            v270 = *(unsigned int **)v270;
          v226 = (unsigned int *)(a1[75] + 4 * *v270);
          goto LABEL_303;
        }
        goto LABEL_237;
      }
      v261 = *((_DWORD *)a1 + 178);
      if (v261)
      {
        v262 = a1[87];
        v263 = ((v23 >> 4) ^ (v23 >> 9)) & (v261 - 1);
        v264 = v262 + 48 * v263;
        v265 = *(unsigned __int8 **)(v264 + 24);
        if (v23 == v265)
        {
LABEL_295:
          if (v264 != v262 + 48 * v261)
          {
            v266 = *(llvm::GlobalValue **)(v264 + 40);
LABEL_348:
            v309 = (uint64_t)a1 + v209 + 8;
            v310 = sub_21DF7A4C8(v266);
            LODWORD(__p[0]) = 0;
            LOWORD(v384) = 257;
            v366[2] = sub_21DF1ACD0(v309, v310, (uint64_t)__p, 1, (uint64_t)&v380);
            v202 = 0xFFFFFFFFLL;
            v17 = v328;
            goto LABEL_238;
          }
        }
        else
        {
          v294 = 1;
          while (v265 != (unsigned __int8 *)-4096)
          {
            v295 = v263 + v294++;
            v263 = v295 & (v261 - 1);
            v264 = v262 + 48 * v263;
            v265 = *(unsigned __int8 **)(v264 + 24);
            if (v23 == v265)
              goto LABEL_295;
          }
        }
      }
      v341 = *(_QWORD *)(*a1 - 24);
      v296 = *(unsigned int *)(sub_21DF68BEC(a1[79], *((_DWORD *)a1 + 162), (uint64_t)v23) + 40);
      v297 = (char *)llvm::User::operator new((llvm::User *)0x58);
      v380 = "agc.gather_sampler_words";
      v382 = v296;
      LOWORD(v384) = 2051;
      v298 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v298 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
      v300 = (uint64_t)v23;
      v301 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v23 + 16) + 16) + 8), v299);
      v302 = (llvm::Constant *)llvm::PointerType::get();
      v304 = llvm::Constant::getNullValue(v302, v303);
      v380 = v297;
      v381 = v301;
      v382 = v304;
      llvm::ConstantStruct::get();
      v266 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
      v380 = "agc.gather_sampler_state_struct_ptr";
      v382 = v296;
      LOWORD(v384) = 2051;
      v305 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v305 + 80) |= 1u;
      llvm::GlobalVariable::setInitializer();
      sub_21DF5B518(&v380, v300);
      v380 = (char *)&unk_24E1F1550;
      v384 = a1 + 87;
      __p[0] = 0;
      v306 = sub_21DF675B4(a1[87], *((_DWORD *)a1 + 178), v383, __p);
      v307 = __p[0];
      if ((v306 & 1) == 0)
      {
        v307 = (_QWORD *)sub_21DF6764C((uint64_t)(a1 + 87), (uint64_t)&v380, (uint64_t)__p[0]);
        sub_21DF569CC((llvm::ValueHandleBase *)(v307 + 1), &v381);
        v307[4] = v384;
        v307[5] = 0;
      }
      v194 = v335;
      if (v383 != -8192 && v383 != -4096 && v383)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v381);
      v307[5] = v266;
      v380 = (char *)4;
      v381 = 0;
      v308 = (unint64_t)v266;
      v382 = (unint64_t)v266;
      if (v266 != (llvm::GlobalValue *)-8192)
      {
        v308 = (unint64_t)v266;
        if (v266 != (llvm::GlobalValue *)-4096)
        {
          v308 = (unint64_t)v266;
          if (v266)
          {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v380);
            v308 = v382;
          }
        }
      }
      sub_21DF689C8(v320, v308, &v380);
      if (v382 != -8192 && v382 != -4096 && v382)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v380);
      v209 = v341;
      goto LABEL_348;
    }
    v201 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    LODWORD(__p[0]) = 0;
    LOWORD(v384) = 257;
    v366[2] = sub_21DF1ACD0(v201, v325, (uint64_t)__p, 1, (uint64_t)&v380);
LABEL_237:
    v202 = 0xFFFFFFFFLL;
LABEL_238:
    if (v17)
    {
      if (v194)
      {
LABEL_240:
        v203 = (char **)&v357;
      }
      else
      {
        LOWORD(v380) = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 240))(a1, v202);
        v203 = &v380;
      }
      v208 = sub_21DF68C50((char *)a1, (uint64_t)&v359, v203);
      goto LABEL_259;
    }
    if (v329)
      v204 = v194;
    else
      v204 = 1;
    if ((v204 & 1) == 0 && ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 240))(a1, v202) & 0x10) != 0)
    {
      v205 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v206 = *((_QWORD *)v205 + 43);
      v349 = *(_OWORD *)(v205 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v205 + 8));
      v351 = *((_DWORD *)v205 + 26);
      v373[2] = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v206 + 40))(v206, &v349, v373[2], 0);
      if (v350)
        llvm::MetadataTracking::untrack();
    }
LABEL_257:
    v211 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v212 = *((_QWORD *)v211 + 43);
    v346 = *(_OWORD *)(v211 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v211 + 8));
    v348 = *((_DWORD *)v211 + 26);
    v208 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v212 + 248))(v212, &v346, &v359);
    v207 = v347;
    if (v347)
      llvm::MetadataTracking::untrack();
LABEL_259:
    if (v208)
    {
      v213 = v208;
      if (v334 == 16)
      {
        v213 = v208;
        if (!HIBYTE(v362))
        {
          v214 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          v215 = *((_QWORD *)v214 + 43);
          v343 = *(_OWORD *)(v214 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v214 + 8));
          v345 = *((_DWORD *)v214 + 26);
          v213 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v215 + 264))(v215, &v343, v208);
          v207 = v344;
          if (v344)
            llvm::MetadataTracking::untrack();
        }
      }
      if (v332)
      {
        v216 = *(_QWORD *)((char *)v324 + *(_QWORD *)(*a1 - 24));
        v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 520))(v216);
      }
      else
      {
        v217 = 0;
      }
      if (a3[1] == 2)
      {
        v218 = *((_BYTE *)a1 + 15) == 0;
        if (v330)
        {
LABEL_269:
          sub_21DF38D0C((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
          v219 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          *((_QWORD *)v219 + 7) = v330;
          *((_QWORD *)v219 + 8) = v330 + 40;
          v18 = v337;
LABEL_325:
          llvm::Value::replaceAllUsesWith();
          v17 = v328;
          goto LABEL_326;
        }
      }
      else
      {
        v218 = 0;
        if (v330)
          goto LABEL_269;
      }
      v220 = *a3;
      if (*a3 != 2 || !(v217 | v218))
      {
        v18 = v337;
        if (v220 == 10)
        {
          v267 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v224 = (uint64_t)(v267 + 8);
        }
        else
        {
          if (v220 != 9)
            goto LABEL_325;
          v223 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v224 = (uint64_t)(v223 + 8);
        }
        v268 = llvm::ConstantInt::get();
        sub_21DF79584(v224, v208, v268, (uint64_t)&v380);
        goto LABEL_325;
      }
      v221 = (llvm::Constant **)v208;
      if (v334 == 16)
      {
        v222 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        LODWORD(__p[0]) = 0;
        LOWORD(v384) = 257;
        v221 = (llvm::Constant **)sub_21DF1ACD0(v222, v208, (uint64_t)__p, 1, (uint64_t)&v380);
      }
      v331 = llvm::Constant::getNullValue(*v221, v207);
      if ((*((_DWORD *)*v221 + 2) & 0xFE) == 0x12)
        v340 = (llvm::Constant *)**((_QWORD **)*v221 + 2);
      else
        v340 = *v221;
      v227 = *(_QWORD *)(*a1 - 24);
      v228 = sub_21DF66288((uint64_t)a1, v342, 2u);
      LOWORD(v384) = 257;
      v229 = sub_21DF19394((_QWORD *)((char *)v322 + v227), **(llvm::Type ***)(*(_QWORD *)v228 + 16), v228, 0, (uint64_t)&v380);
      v230 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      LOWORD(v384) = 257;
      v231 = (uint64_t)(v230 + 8);
      v232 = llvm::ConstantInt::get();
      v233 = sub_21DF79584(v231, v229, v232, (uint64_t)&v380);
      v234 = (uint64_t *)v233;
      if (v218)
      {
        v336 = v221;
        v235 = (uint64_t *)v233;
        if ((_QWORD)v372)
        {
          v236 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v237 = *v234;
          LOWORD(v384) = 257;
          v238 = sub_21DF1A79C(v236, 39, v372, v237, (uint64_t)&v380);
          v239 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          LOWORD(v384) = 257;
          v235 = (uint64_t *)sub_21DF1AE6C(v239, (uint64_t)v234, v238, (uint64_t)&v380);
        }
        v240 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v241 = v369;
        LOWORD(v384) = 257;
        v242 = (uint64_t)(v240 + 8);
        v243 = llvm::ConstantInt::get();
        v244 = sub_21DF79584(v242, v241, v243, (uint64_t)&v380);
        v333 = (uint64_t)v235;
        v245 = *v235;
        v356 = 257;
        v246 = (llvm::Type ***)sub_21DF1A79C(v242, 39, v244, v245, (uint64_t)__p);
        v247 = *(_QWORD *)(*a1 - 24);
        v248 = sub_21DF66288((uint64_t)a1, v342, 4u);
        v249 = **(llvm::Type ***)(*(_QWORD *)v248 + 16);
        v380 = "packedFormatAndAlpha";
        LOWORD(v384) = 259;
        v250 = sub_21DF19394((_QWORD *)((char *)v322 + v247), v249, v248, 0, (uint64_t)&v380);
        v251 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v252 = llvm::ConstantInt::get();
        v380 = "alpha";
        LOWORD(v384) = 259;
        v253 = sub_21DF1AE6C(v251, v250, v252, (uint64_t)&v380);
        if (*((unsigned __int8 *)v340 + 8) <= 6u)
        {
          v254 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          LOWORD(v384) = 257;
          v253 = sub_21DF20594(v254, v253, (uint64_t)v340, (uint64_t)&v380);
        }
        v255 = sub_21DF79090((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24)), v253, (uint64_t)v340);
        if ((*((_DWORD *)*v336 + 2) & 0xFE) == 0x12)
        {
          v256 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v257 = (uint64_t)(v256 + 8);
          v258 = llvm::ConstantInt::get();
          sub_21DF7980C(v257, v331, v255, v258, (uint64_t)&v380);
        }
        v271 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
        LOWORD(v384) = 257;
        v272 = sub_21DF19478(v271, 35, v246, v333, (uint64_t)&v380);
        v273 = v369;
        if ((*(_DWORD *)(*(_QWORD *)v369 + 8) & 0xFE) == 0x12)
        {
          v274 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          LOWORD(v384) = 257;
          v275 = (uint64_t)(v274 + 8);
          v276 = llvm::ConstantInt::get();
          v277 = sub_21DF79584(v275, v273, v276, (uint64_t)&v380);
          v278 = *v234;
          v356 = 257;
          v279 = (llvm::Type ***)sub_21DF1A79C(v275, 39, v277, v278, (uint64_t)__p);
          v280 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
          LOWORD(v384) = 257;
          v281 = sub_21DF19478(v280, 35, v279, v333, (uint64_t)&v380);
          v356 = 257;
          sub_21DF1A4A0((uint64_t)v280, v272, v281, (uint64_t)__p);
        }
        v18 = v337;
        LOWORD(v384) = 257;
      }
      else
      {
        v18 = v337;
        if (!v217)
          goto LABEL_323;
        if (*((unsigned __int8 *)v340 + 8) <= 6u)
        {
          v259 = *(_QWORD *)(*a1 - 24);
          v260 = *(uint64_t *)((char *)a1 + v259 + 160);
          LOWORD(v384) = 257;
          v234 = (uint64_t *)sub_21DF1A79C((uint64_t)a1 + v259 + 8, 49, v233, v260, (uint64_t)&v380);
        }
        v289 = sub_21DF79090((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24)), (uint64_t)v234, (uint64_t)v340);
        v290 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        LOWORD(v384) = 257;
        v291 = (uint64_t)(v290 + 8);
        v292 = llvm::ConstantInt::get();
        sub_21DF7980C(v291, v331, v289, v292, (uint64_t)&v380);
        LOWORD(v384) = 257;
      }
      v213 = llvm::IRBuilderBase::CreateSelect();
LABEL_323:
      if (v334 == 16)
      {
        v293 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        LODWORD(__p[0]) = 0;
        LOWORD(v384) = 257;
        sub_21DF1A244(v293, v208, v213, (uint64_t)__p, 1, (uint64_t)&v380);
      }
      goto LABEL_325;
    }
LABEL_326:
    llvm::Instruction::eraseFromParent(v19);
LABEL_327:
    if (!v18)
      return 1;
  }
  v312 = sub_21DF1AF28(&v380, "sample");
  if (*a3 == 1)
  {
    v313 = "sample_compare";
LABEL_355:
    MEMORY[0x2207A77BC](v312, v313);
  }
  else if (*a3 == 5)
  {
    v313 = "gather_compare";
    goto LABEL_355;
  }
  std::operator+<char>();
  v314 = std::string::append(&v352, " must be known at compile time");
  v315 = (llvm::GlobalValue *)v314->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
  v355 = v315;
  v314->__r_.__value_.__l.__size_ = 0;
  v314->__r_.__value_.__r.__words[2] = 0;
  v314->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v355) >= 0)
    v316 = __p;
  else
    v316 = (void **)__p[0];
  if (SHIBYTE(v355) >= 0)
    v317 = HIBYTE(v355);
  else
    v317 = (std::string::size_type)__p[1];
  std::string::append((std::string *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 408), (const std::string::value_type *)v316, v317);
  if (SHIBYTE(v355) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  if (SHIBYTE(v382) < 0)
    operator delete(v380);
  return 0;
}

uint64_t sub_21DF66288(uint64_t a1, llvm::GlobalValue *this, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD v25[20];
  _BYTE v26[32];
  __int16 v27;
  uint64_t *v28;
  uint64_t v29;
  __int16 v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v6 = sub_21DF665F8(this);
  if (v6)
    return *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * a3);
  if (a3 != 8)
  {
    v8 = (uint64_t *)sub_21DF66684((_QWORD *)a1, this);
    if (v8)
      return sub_21DF66710(a1, v8, a3);
  }
  v9 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + v9 + 344) + 1678) && (a3 > 8 || ((1 << a3) & 0x103) == 0))
  {
    v8 = (uint64_t *)sub_21DF66D58(a1, this);
    return sub_21DF66710(a1, v8, a3);
  }
  v10 = *(uint64_t **)(a1 + 984 + 56 * a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + v9 + 184);
    v27 = 257;
    v12 = sub_21DF1A79C(v9 + a1 + 8, 47, (uint64_t)this, v11, (uint64_t)v26);
    if (*(_BYTE *)(a1 + 2385))
    {
      v13 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v28 = (uint64_t *)sub_21DF1B2C4((llvm::DataLayout *)(a1 + 168), *(llvm::Type **)(*(_QWORD *)(v13 + 344) + 1576));
      v29 = v14;
      llvm::TypeSize::operator unsigned long long();
      v15 = llvm::ConstantInt::get();
      v27 = 257;
      v12 = sub_21DF469F0(v13 + 8, v12, v15, (uint64_t)v26);
    }
    v16 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (a3 > 1 || *(unsigned __int8 *)(v12 + 16) < 0x15u)
    {
      v28 = (uint64_t *)llvm::ConstantInt::get();
      v29 = v12;
      v27 = 257;
      return sub_21DF66DE4(v16, v10, &v28, 2, (uint64_t)v26);
    }
    else
    {
      v17 = llvm::PointerType::get();
      v18 = sub_21DF1B0B0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)"llvm.agx.textureState", 21, v17, v17, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200));
      v19 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v27 = 257;
      v31[0] = sub_21DF1A79C(v19, 49, (uint64_t)v10, v17, (uint64_t)v26);
      v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v21 = *(_QWORD *)(v20 + 200);
      v30 = 257;
      v31[1] = sub_21DF1A79C(v20 + 8, 39, v12, v21, (uint64_t)&v28);
      v25[16] = 257;
      v22 = sub_21DF191A4(v19, *(_QWORD *)(v18 + 24), v18, (uint64_t)v31, 2, (uint64_t)v25);
      v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
      v24 = llvm::PointerType::get();
      v27 = 257;
      return sub_21DF1A79C(v23, 49, (uint64_t)v22, v24, (uint64_t)v26);
    }
  }
  else
  {
    llvm::PointerType::get();
    return llvm::UndefValue::get();
  }
}

uint64_t sub_21DF665F8(llvm::GlobalValue *this)
{
  unsigned int v2;
  int v3;
  llvm::GlobalValue **v4;

  while (1)
  {
    v2 = *((unsigned __int8 *)this + 16);
    if (v2 > 0x1B)
    {
      if (v2 != 77)
        return 0;
      goto LABEL_6;
    }
    if (v2 != 5)
      break;
    if (*((_WORD *)this + 9) != 49)
      return 0;
LABEL_6:
    v3 = *((_DWORD *)this + 5);
    if ((v3 & 0x40000000) != 0)
      v4 = (llvm::GlobalValue **)*((_QWORD *)this - 1);
    else
      v4 = (llvm::GlobalValue **)((char *)this - 32 * (v3 & 0x7FFFFFF));
    this = *v4;
  }
  if (v2 != 3 || (llvm::GlobalValue::isDeclaration(this) & 1) != 0)
    return 0;
  return *((_QWORD *)this - 4);
}

uint64_t sub_21DF66684(_QWORD *a1, void *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = sub_21DF671D8((llvm::SmallPtrSetImplBase *)(a1 + 111), a2);
  v5 = a1[112];
  v6 = 904;
  if (v5 == a1[111])
    v6 = 908;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)((char *)a1 + v6)))
    return 0;
  v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v8 = *((_QWORD *)v7 + 24);
  v11 = 257;
  return sub_21DF1A79C((uint64_t)(v7 + 8), 47, (uint64_t)a2, v8, (uint64_t)v10);
}

uint64_t sub_21DF66710(uint64_t a1, uint64_t *a2, int a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  llvm::ValueHandleBase *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::Type **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  char v65[32];
  __int16 v66;
  char v67[32];
  __int16 v68;
  char v69[32];
  __int16 v70;
  _QWORD v71[4];
  __int16 v72;

  v6 = a3 == 1;
  v7 = a1 + 24 * v6;
  v8 = *(_QWORD *)(v7 + 1904);
  if (!v8)
  {
    v9 = atomic_load((unsigned __int8 *)&qword_2553B3BE0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2553B3BE0))
    {
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BC0[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 304))(v42);
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BC4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 160))(v43);
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BC8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 312))(v44);
      v45 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BCC = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 168))(v45);
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BD0 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 320))(v46);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BD4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 176))(v47);
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BD8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 328))(v48);
      v49 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
      dword_2553B3BDC = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 184))(v49);
      __cxa_guard_release(&qword_2553B3BE0);
    }
    v10 = (llvm::ValueHandleBase *)(v7 + 1888);
    v11 = *(unsigned __int8 *)(a1 + 2385);
    v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 32))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) != 2
       && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 32))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) != 16;
    v13 = dword_2553B3BC0[4 * v11 + 2 * v6 + v12];
    v14 = llvm::PointerType::get();
    v71[0] = "agc.texture_heap.";
    v71[2] = v13;
    v72 = 2051;
    v15 = sub_21DF66EC0((uint64_t *)a1, v14, (uint64_t)v71, v13, 0);
    sub_21DF4EB3C(v10, v15);
    v8 = *((_QWORD *)v10 + 2);
  }
  v16 = 0;
  switch(a3)
  {
    case 0:
    case 1:
      v17 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
      v18 = llvm::PointerType::get();
      v72 = 257;
      v16 = sub_21DF1A79C(v17, 49, v8, v18, (uint64_t)v71);
      break;
    case 2:
      v19 = (llvm::Type *)llvm::FixedVectorType::get();
      goto LABEL_11;
    case 3:
      return v16;
    case 9:
      v16 = sub_21DF7A588(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200));
      v29 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v30 = (uint64_t *)(v29 + 8);
      v31 = *(_QWORD *)(v29 + 200);
      v72 = 257;
      v32 = (llvm::Type **)sub_21DF1A79C(v29 + 8, 39, (uint64_t)a2, v31, (uint64_t)v71);
      sub_21DF385B0(v30, v32, v16, 0);
      break;
    default:
      v19 = *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
LABEL_11:
      v20 = llvm::PointerType::get();
      v21 = llvm::PointerType::get();
      v16 = sub_21DF7A588(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v19);
      v22 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v72 = 257;
      v23 = sub_21DF19394((uint64_t *)(v22 + 8), **(llvm::Type ***)(*(_QWORD *)v8 + 16), v8, 0, (uint64_t)v71);
      v70 = 257;
      v24 = (uint64_t *)sub_21DF1A79C(v22 + 8, 49, v23, v20, (uint64_t)v69);
      v68 = 257;
      v25 = sub_21DF1A924(v22, v24, a2, (uint64_t)v67);
      v66 = 257;
      v26 = sub_21DF1A79C(v22 + 8, 49, v25, v21, (uint64_t)v65);
      switch(a3)
      {
        case 2:
          v27 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v28 = *(_QWORD *)(v27 + 344);
          v62 = *(_OWORD *)(v27 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v27 + 8));
          v64 = *(_DWORD *)(v27 + 104);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v28 + 448))(v28, &v62, v26, v16);
          if (v63)
            goto LABEL_16;
          break;
        case 4:
          v33 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v34 = *(_QWORD *)(v33 + 344);
          v50 = *(_OWORD *)(v33 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 8));
          v52 = *(_DWORD *)(v33 + 104);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v34 + 480))(v34, &v50, v26, v16);
          if (v51)
            goto LABEL_16;
          break;
        case 5:
          v36 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v37 = *(_QWORD *)(v36 + 344);
          v59 = *(_OWORD *)(v36 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v36 + 8));
          v61 = *(_DWORD *)(v36 + 104);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v37 + 456))(v37, &v59, v26, v16);
          if (v60)
            goto LABEL_16;
          break;
        case 6:
          v38 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v39 = *(_QWORD *)(v38 + 344);
          v56 = *(_OWORD *)(v38 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 8));
          v58 = *(_DWORD *)(v38 + 104);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v39 + 464))(v39, &v56, v26, v16);
          if (v57)
            goto LABEL_16;
          break;
        case 7:
          v40 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v41 = *(_QWORD *)(v40 + 344);
          v53 = *(_OWORD *)(v40 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v40 + 8));
          v55 = *(_DWORD *)(v40 + 104);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v41 + 472))(v41, &v53, v26, v16);
          if (v54)
LABEL_16:
            llvm::MetadataTracking::untrack();
          break;
        default:
          return v16;
      }
      break;
  }
  return v16;
}

uint64_t sub_21DF66D58(uint64_t a1, llvm::GlobalValue *this)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[32];
  __int16 v8;

  if (*(_BYTE *)(a1 + 2385) || (result = sub_21DF66684((_QWORD *)a1, this)) == 0)
  {
    v5 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v6 = sub_21DF66288(a1, this);
    v8 = 257;
    return sub_21DF19394((uint64_t *)(v5 + 8), **(llvm::Type ***)(*(_QWORD *)v6 + 16), v6, 0, (uint64_t)v7);
  }
  return result;
}

uint64_t sub_21DF66DE4(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v10 = **(_QWORD **)(v10 + 16);
  v11 = **(_QWORD **)(v10 + 16);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80)
                                                                                           + 48))(*(_QWORD *)(a1 + 80), v11, a2, a3, a4, 0);
  if (!v12)
  {
    v12 = sub_21DF1AA2C(v11, a2, a3, a4);
    sub_21DF1A3A4((uint64_t *)(a1 + 8), v12, a5);
  }
  return v12;
}

uint64_t sub_21DF66EC0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Impl;
  void *v32;
  uint64_t v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v8 = (_DWORD *)a1[288];
  v9 = *((unsigned int *)a1 + 578);
  v10 = &v8[4 * v9];
  if ((_DWORD)v9)
  {
    do
    {
      v11 = v9 >> 1;
      v12 = &v8[4 * (v9 >> 1)];
      v14 = *v12;
      v13 = v12 + 4;
      v9 += ~(v9 >> 1);
      if (v14 < a4)
        v8 = v13;
      else
        v9 = v11;
    }
    while (v9);
    if (v8 != v10)
      v10 = v8;
  }
  v15 = llvm::User::operator new((llvm::User *)0x58);
  v16 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v16 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v17 = a1[288];
  v18 = *((unsigned int *)a1 + 578);
  if ((_DWORD *)(v17 + 16 * v18) == v10)
  {
    if (v18 >= *((_DWORD *)a1 + 579))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *((unsigned int *)a1 + 578);
      v17 = a1[288];
    }
    v23 = (_QWORD *)(v17 + 16 * v18);
    *v23 = a4;
    v23[1] = v15;
    ++*((_DWORD *)a1 + 578);
  }
  else
  {
    v19 = ((uint64_t)v10 - v17) >> 4;
    if (v18 >= *((_DWORD *)a1 + 579))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = a1[288];
      v18 = *((unsigned int *)a1 + 578);
    }
    v20 = (_QWORD *)(v17 + 16 * v19);
    *(_OWORD *)(v17 + 16 * v18) = *(_OWORD *)(v17 + 16 * v18 - 16);
    v21 = *((unsigned int *)a1 + 578);
    v22 = a1[288] + 16 * v21 - 16;
    if ((_QWORD *)v22 != v20)
    {
      memmove(v20 + 2, v20, v22 - (_QWORD)v20);
      LODWORD(v21) = *((_DWORD *)a1 + 578);
    }
    *((_DWORD *)a1 + 578) = v21 + 1;
    *v20 = a4;
    v20[1] = v15;
  }
  v24 = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  v25 = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  v26 = llvm::ValueAsMetadata::get();
  v32 = v34;
  v33 = 0x400000000;
  v27 = *a1;
  v34[0] = v24;
  v34[1] = v25;
  v34[2] = v26;
  LODWORD(v33) = 3;
  if (a5)
  {
    llvm::ConstantInt::get();
    v28 = llvm::ValueAsMetadata::get();
    sub_21DF19CD0((uint64_t)&v32, v28);
    v27 = *a1;
  }
  v29 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v27 - 24) + 328);
  Impl = llvm::MDTuple::getImpl();
  sub_21DF19CD0(v29, Impl);
  if (v32 != v34)
    free(v32);
  return v15;
}

void **sub_21DF671D8(llvm::SmallPtrSetImplBase *this, void *a2)
{
  void **v4;
  void **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (void **)*((_QWORD *)this + 1);
  if (v4 == *(void ***)this)
  {
    v8 = *((unsigned int *)this + 5);
    result = &v4[v8];
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      while (*v4 != a2)
      {
        ++v4;
        v9 -= 8;
        if (!v9)
          return result;
      }
      return v4;
    }
  }
  else
  {
    result = (void **)llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2)
    {
      v6 = *((_QWORD *)this + 1);
      v7 = 16;
      if (v6 == *(_QWORD *)this)
        v7 = 20;
      return (void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  return result;
}

void sub_21DF6726C(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_21DF6726C(*a1);
    sub_21DF6726C(a1[1]);
    v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_21DF672C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = sub_21DF675B4(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_24E1F1550;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t sub_21DF673A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[16];
  uint64_t v13;
  int32x2_t *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v14 = v4;
  v19 = 0;
  result = sub_21DF675B4((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if ((_DWORD)result)
    v6 = v19;
  else
    v6 = (_QWORD *)(*(_QWORD *)v4 + 48 * v4[2].u32[0]);
  v7 = v14;
  if ((_QWORD *)(*(_QWORD *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    v8 = v6[5];
    v20[1] = 0;
    v21 = -8192;
    v19 = &unk_24E1F1550;
    v20[0] = 2;
    v22 = 0;
    sub_21DF569CC((llvm::ValueHandleBase *)(v6 + 1), v20);
    v9 = v21;
    v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v14;
    sub_21DF5B518(&v15, a2);
    v15 = &unk_24E1F1550;
    v18 = v10;
    sub_21DF5B820((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    v19 = &unk_24E1F1550;
    v22 = v18;
    v23 = v8;
    v24 = 0;
    result = sub_21DF675B4(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      v11 = (_QWORD *)sub_21DF6764C(v10, (uint64_t)&v19, v24);
      result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    if (v17 != -8192 && v17 != -4096 && v17)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
  }
  return result;
}

uint64_t sub_21DF675B4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 48 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_21DF6764C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF676FC(a1, v6);
  v8 = 0;
  sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF676FC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return sub_21DF67840(a1);
  sub_21DF67840(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        sub_21DF569CC((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t sub_21DF67840(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1F1550;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t sub_21DF678F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

llvm::User *sub_21DF67950(_QWORD *a1, llvm::GlobalValue *this, unsigned int a3)
{
  uint64_t v6;
  llvm::User *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  uint64_t v18;
  llvm::Instruction *v19;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  llvm::Type ***v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t FirstInsertionPt;
  uint64_t v36;
  uint64_t v37;
  _WORD v38[20];
  _QWORD v39[4];
  __int16 v40;

  v6 = sub_21DF665F8(this);
  if (!v6)
  {
    v9 = &a1[7 * a3];
    v10 = v9[195];
    v11 = v9[216];
    if (v10)
    {
      if (v11)
      {
        v12 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 56);
        v13 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
        v14 = operator new();
        llvm::BasicBlock::BasicBlock();
        v39[0] = "constant_sampler";
        v40 = 259;
        v15 = operator new();
        llvm::BasicBlock::BasicBlock();
        v16 = *(_QWORD *)(v12 + 40);
        if (v16 == v12 + 40)
        {
          v19 = 0;
        }
        else
        {
          v17 = (llvm::Instruction *)(v16 - 24);
          if (v16)
            v18 = v16 - 24;
          else
            v18 = 0;
          if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB)
            v19 = 0;
          else
            v19 = v17;
        }
        llvm::Instruction::eraseFromParent(v19);
        v21 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        *((_QWORD *)v21 + 7) = v12;
        *((_QWORD *)v21 + 8) = v12 + 40;
        v22 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v23 = *((_QWORD *)v22 + 25);
        v40 = 257;
        v24 = sub_21DF1A79C((uint64_t)(v22 + 8), 47, (uint64_t)this, v23, (uint64_t)v39);
        v25 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
        v26 = llvm::ConstantInt::get();
        v40 = 257;
        v27 = (llvm::Type ***)sub_21DF1A410((uint64_t)v25, v24, v26, (uint64_t)v39);
        v28 = llvm::ConstantInt::get();
        v38[16] = 257;
        v29 = sub_21DF19478(v25, 32, v27, v28, (uint64_t)v38);
        sub_21DF38D70((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v29, v14, v15);
        v30 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        *((_QWORD *)v30 + 7) = v14;
        *((_QWORD *)v30 + 8) = v14 + 40;
        v31 = (uint64_t *)sub_21DF67FB0((uint64_t)a1, (uint64_t)this, a3);
        sub_21DF38D0C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        *((_QWORD *)v32 + 7) = v15;
        *((_QWORD *)v32 + 8) = v15 + 40;
        v33 = sub_21DF67D50(a1, (uint64_t)this, a3);
        sub_21DF38D0C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        v34 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v13);
        sub_21DF19018(v34, (uint64_t)v13, FirstInsertionPt);
        v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v37 = *v31;
        v40 = 257;
        v7 = sub_21DF38DEC(v36, v37, 2, (uint64_t)v39);
        sub_21DF38EDC(v7, (uint64_t)v31, v14);
        sub_21DF38EDC(v7, v33, v15);
        return v7;
      }
    }
    else if (v11)
    {
      return (llvm::User *)sub_21DF67D50(a1, (uint64_t)this, a3);
    }
    return (llvm::User *)sub_21DF67FB0((uint64_t)a1, (uint64_t)this, a3);
  }
  v7 = *(llvm::User **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * a3);
  if (a3 == 2)
  {
    v8 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v40 = 257;
    return (llvm::User *)sub_21DF19394(v8 + 1, **(llvm::Type ***)(*(_QWORD *)v7 + 16), (uint64_t)v7, 0, (uint64_t)v39);
  }
  return v7;
}

uint64_t sub_21DF67D50(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _WORD v24[20];
  _BYTE v25[32];
  __int16 v26;
  uint64_t *v27[4];
  __int16 v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)a1[7 * a3 + 216];
  if (v5)
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 23);
    v26 = 257;
    v8 = sub_21DF1A79C((uint64_t)(v6 + 8), 47, a2, v7, (uint64_t)v25);
    v9 = (uint64_t *)v8;
    v10 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (!a3 && *(unsigned __int8 *)(v8 + 16) >= 0x15u)
    {
      v11 = llvm::PointerType::get();
      v12 = sub_21DF1B0B0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)"llvm.agx.samplerState", 21, v11, v11, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 200));
      v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v26 = 257;
      v29[0] = sub_21DF1A79C(v13, 49, (uint64_t)v5, v11, (uint64_t)v25);
      v14 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v15 = *((_QWORD *)v14 + 25);
      v28 = 257;
      v29[1] = sub_21DF1A79C((uint64_t)(v14 + 8), 39, (uint64_t)v9, v15, (uint64_t)v27);
      v24[16] = 257;
      v16 = sub_21DF191A4(v13, *(_QWORD *)(v12 + 24), v12, (uint64_t)v29, 2, (uint64_t)v24);
      v17 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v18 = llvm::PointerType::get();
      v26 = 257;
      return sub_21DF1A79C(v17, 49, (uint64_t)v16, v18, (uint64_t)v25);
    }
    v27[0] = (uint64_t *)llvm::ConstantInt::get();
    v27[1] = v9;
    v26 = 257;
    v20 = sub_21DF66DE4(v10, v5, v27, 2, (uint64_t)v25);
  }
  else
  {
    llvm::PointerType::get();
    v20 = llvm::UndefValue::get();
  }
  v21 = v20;
  if (a3 == 2)
  {
    v22 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v26 = 257;
    return sub_21DF19394(v22 + 1, **(llvm::Type ***)(*(_QWORD *)v20 + 16), v20, 0, (uint64_t)v25);
  }
  return v21;
}

uint64_t sub_21DF67FB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  llvm::Type ***v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::Type **Select;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[32];
  __int16 v35;
  uint64_t *v36[4];
  __int16 v37;
  uint64_t *v38[4];
  __int16 v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)(a1 + 1544 + 56 * a3 + 16);
  if (v5)
  {
    v7 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v8 = *(_QWORD *)(v7 + 184);
    v35 = 257;
    v9 = sub_21DF1A79C(v7 + 8, 47, a2, v8, (uint64_t)v34);
    v10 = (llvm::Type ***)v9;
    v11 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (!a3 && *(unsigned __int8 *)(v9 + 16) >= 0x15u)
    {
      v12 = llvm::PointerType::get();
      v13 = sub_21DF1B0B0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)"llvm.agx.samplerState", 21, v12, v12, *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200));
      v14 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v35 = 257;
      v40[0] = sub_21DF1A79C(v14, 49, (uint64_t)v5, v12, (uint64_t)v34);
      v15 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v16 = *(_QWORD *)(v15 + 200);
      v39 = 257;
      v40[1] = sub_21DF1A79C(v15 + 8, 39, (uint64_t)v10, v16, (uint64_t)v38);
      v37 = 257;
      v17 = sub_21DF191A4(v14, *(_QWORD *)(v13 + 24), v13, (uint64_t)v40, 2, (uint64_t)v36);
      v18 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
      v19 = llvm::PointerType::get();
      v35 = 257;
      return sub_21DF1A79C(v18, 49, (uint64_t)v17, v19, (uint64_t)v34);
    }
    if (a3 == 2 && !*(_BYTE *)(*(_QWORD *)(v11 + 344) + 1678) && *(_DWORD *)(a1 + 2160))
    {
      v22 = (llvm::Type ***)llvm::ConstantInt::get();
      v23 = (uint64_t *)sub_21DF7A358(v11, v10, v22, 36);
      v24 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v36[0] = (uint64_t *)llvm::ConstantInt::get();
      v36[1] = v23;
      v35 = 257;
      v25 = sub_21DF66DE4(v24, v5, v36, 2, (uint64_t)v34);
      v39 = 257;
      sub_21DF19394((uint64_t *)(v24 + 8), **(llvm::Type ***)(*(_QWORD *)v25 + 16), v25, 0, (uint64_t)v38);
      v26 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v27 = *(_QWORD *)(v26 + 200);
      v35 = 257;
      sub_21DF1A79C(v26 + 8, 47, a2, v27, (uint64_t)v34);
      v28 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
      v29 = llvm::ConstantInt::get();
      v35 = 257;
      sub_21DF19478(v28, 36, v10, v29, (uint64_t)v34);
      v39 = 257;
      Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      v31 = sub_21DF7A588(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200));
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), Select, v31, 0);
LABEL_12:
      v32 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v35 = 257;
      return sub_21DF19394((uint64_t *)(v32 + 8), **(llvm::Type ***)(*(_QWORD *)v31 + 16), v31, 0, (uint64_t)v34);
    }
    v38[0] = (uint64_t *)llvm::ConstantInt::get();
    v38[1] = (uint64_t *)v10;
    v35 = 257;
    v21 = sub_21DF66DE4(v11, v5, v38, 2, (uint64_t)v34);
  }
  else
  {
    llvm::PointerType::get();
    v21 = llvm::UndefValue::get();
  }
  v31 = v21;
  if (a3 == 2)
    goto LABEL_12;
  return v31;
}

uint64_t sub_21DF683A4(uint64_t *a1, llvm::GlobalValue *this)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _WORD v25[20];
  _QWORD v26[4];
  __int16 v27;

  v4 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (*(_BYTE *)(v4[43] + 1678))
  {
    v5 = sub_21DF66288((uint64_t)a1, this, 2u);
    v27 = 257;
    v6 = sub_21DF19394(v4 + 1, **(llvm::Type ***)(*(_QWORD *)v5 + 16), v5, 0, (uint64_t)v26);
    v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v27 = 257;
    v8 = (uint64_t)(v7 + 8);
    v9 = llvm::ConstantInt::get();
    return sub_21DF79584(v8, v6, v9, (uint64_t)v26);
  }
  else
  {
    v11 = a1[244];
    if (!v11)
    {
      if ((*(unsigned int (**)(char *))(*v4 + 32))((char *)a1 + *(_QWORD *)(*a1 - 24)) == 2)
      {
        v12 = 42;
      }
      else
      {
        v13 = (*(uint64_t (**)(char *))(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24)) + 32))((char *)a1 + *(_QWORD *)(*a1 - 24));
        v12 = 24;
        if (v13 == 16)
          v12 = 42;
      }
      v14 = (*(uint64_t (**)(void))(**(_QWORD **)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 792) + 8 * v12))();
      v15 = llvm::PointerType::get();
      v26[0] = "agc.texture_heap.";
      v26[2] = v14;
      v27 = 2051;
      v16 = sub_21DF66EC0(a1, v15, (uint64_t)v26, v14, 0);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 242), v16);
      v11 = a1[244];
    }
    v17 = sub_21DF66D58((uint64_t)a1, this);
    v18 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v19 = llvm::ConstantInt::get();
    v27 = 257;
    v20 = (uint64_t *)sub_21DF469F0(v18, v17, v19, (uint64_t)v26);
    v21 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v27 = 257;
    v22 = (uint64_t *)sub_21DF19394((uint64_t *)(v21 + 8), **(llvm::Type ***)(*(_QWORD *)v11 + 16), v11, 0, (uint64_t)v26);
    v25[16] = 257;
    v23 = sub_21DF1A924(v21, v22, v20, (uint64_t)v25);
    v24 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v27 = 257;
    return sub_21DF19394(v24 + 1, **(llvm::Type ***)(*(_QWORD *)v23 + 16), v23, 0, (uint64_t)v26);
  }
}

uint64_t sub_21DF68614(uint64_t *a1, uint64_t a2)
{
  uint64_t GlobalVariable;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t *v28;
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  v27[0] = "agc.const_sampler_state_struct_ptr_";
  v28 = &v26;
  v29 = 3587;
  llvm::Twine::str((llvm::Twine *)v27);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v5 = (_QWORD *)a1[99];
    v6 = a1[98];
    v7 = ((uint64_t)v5 - v6) >> 3;
    v8 = a1[100];
    if ((unint64_t)v5 >= v8)
    {
      if ((unint64_t)(v7 + 1) >> 61)
        abort();
      v10 = v8 - v6;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v7 + 1))
        v11 = v7 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)sub_21DF527B8(v12);
      else
        v13 = 0;
      v14 = (_QWORD *)(v12 + 8 * v7);
      v15 = v12 + 8 * v13;
      *v14 = v26;
      v9 = v14 + 1;
      v16 = (char *)a1[99];
      v17 = (char *)a1[98];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)a1[98];
      }
      a1[98] = (uint64_t)v14;
      a1[99] = (uint64_t)v9;
      a1[100] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = v26;
      v9 = v5 + 1;
    }
    a1[99] = (uint64_t)v9;
    (*(uint64_t (**)(uint64_t *))(*a1 + 296))(a1);
    v19 = llvm::User::operator new((llvm::User *)0x58);
    v27[0] = "agc.const_sampler_state_words_";
    v28 = &v26;
    v29 = 3587;
    v20 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v20 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v27[0] = llvm::PointerType::get();
    llvm::StructType::get();
    v27[0] = v19;
    llvm::ConstantStruct::get();
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    v29 = 260;
    v27[0] = &__p;
    v21 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v21 + 80) |= 1u;
    llvm::GlobalVariable::setInitializer();
    v22 = a1 + 95;
    v27[0] = 4;
    v27[1] = 0;
    v28 = (uint64_t *)GlobalVariable;
    v23 = GlobalVariable;
    if (GlobalVariable != -8192)
    {
      v23 = GlobalVariable;
      if (GlobalVariable != -4096)
      {
        v23 = GlobalVariable;
        if (GlobalVariable)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v27);
          v23 = (unint64_t)v28;
        }
      }
    }
    sub_21DF689C8(v22, v23, v27);
    if (v28 != (uint64_t *)-8192 && v28 != (uint64_t *)-4096 && v28)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v27);
  }
  if (v25 < 0)
    operator delete(__p);
  return GlobalVariable;
}

uint64_t *sub_21DF689C8(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x38uLL);
    sub_21DF5B820((llvm::ValueHandleBase *)(v9 + 4), 2u, a3);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v9 = *v6;
    }
    result = sub_21DF25404((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

uint64_t sub_21DF68A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TruncOrBitCast;
  BOOL v7;

  TruncOrBitCast = a2;
  if (*(_QWORD *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
    {
      TruncOrBitCast = llvm::CastInst::CreateTruncOrBitCast();
      sub_21DF1A3A4((uint64_t *)a1, TruncOrBitCast, a4);
    }
    else
    {
      TruncOrBitCast = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 304))(*(_QWORD *)(a1 + 72), a2, a3);
      if (TruncOrBitCast)
        v7 = *(unsigned __int8 *)(TruncOrBitCast + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        sub_21DF1A3A4((uint64_t *)a1, TruncOrBitCast, a4);
    }
  }
  return TruncOrBitCast;
}

uint64_t sub_21DF68B54(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v3 = sub_21DF66684(a1, a2);
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  if (v3)
    v5 = v3;
  else
    v5 = llvm::ConstantInt::get();
  v6 = llvm::PointerType::get();
  v9 = 257;
  return sub_21DF1A79C(v4, 48, v5, v6, (uint64_t)v8);
}

uint64_t sub_21DF68BEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return a1 + 48 * a2;
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = a1 + 48 * v4;
  v6 = *(_QWORD *)(v5 + 24);
  if (v6 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = a1 + 48 * (v8 & v3);
      v6 = *(_QWORD *)(v5 + 24);
      if (v6 == a3)
        return v5;
    }
    return a1 + 48 * a2;
  }
  return v5;
}

uint64_t sub_21DF68C50(char *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Select;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  BOOL v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Constant *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __int16 v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int j;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _WORD *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  __int128 v135;
  uint64_t v136;
  int v137;
  __int16 v138;
  __int128 v139;
  uint64_t v140;
  int v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  _QWORD v148[4];
  __int16 v149;
  uint64_t v150;

  v3 = a3;
  v150 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2 == 5)
  {
    v6 = *(unsigned int *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v7 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
    v8 = *((_QWORD *)v7 + 43);
    v135 = *(_OWORD *)(v7 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 8));
    v137 = *((_DWORD *)v7 + 26);
    Select = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 248))(v8, &v135, a2);
    if (v136)
      llvm::MetadataTracking::untrack();
    if ((*v3 & 0xF) != 0)
    {
      v10 = *(_QWORD *)(a2 + 184);
      if ((*v3 & 0x10) != 0)
      {
        v11 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
        v12 = *((_QWORD *)v11 + 43);
        v139 = *(_OWORD *)(v11 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v11 + 8));
        v141 = *((_DWORD *)v11 + 26);
        v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, &v139, v10, 0);
        if (v140)
          llvm::MetadataTracking::untrack();
      }
      sub_21DF79DF4((uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)], 4, v10);
      v13 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v14 = llvm::ConstantFP::get();
      sub_21DF79DF4(v13, 4, v14);
      v15 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v16 = llvm::ConstantFP::get();
      sub_21DF79DF4(v15, 4, v16);
      v149 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      v149 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
    }
    *(_DWORD *)(a2 + 8) = v6;
    return (**(uint64_t (***)(char *, uint64_t, uint64_t))&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)], Select, v6);
  }
  v17 = *(unsigned int *)(a2 + 8);
  v18 = *a3;
  v19 = (*a3 & 0xF) == 0 || (*a3 & 0x1C0) == 0;
  if (!v19
    && ((v18 & 0x20) != 0
     || *(_DWORD *)(a2 + 4) == 2
     || !*(_BYTE *)(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 344] + 1643)))
  {
    if ((v18 & 0x40) != 0)
      v20 = 3;
    else
      v20 = 2;
    *(_DWORD *)(a2 + 192) = v20;
  }
  else
  {
    *(_DWORD *)(a2 + 192) = 1;
    if ((*a3 & 0xF) != 0)
      *(_DWORD *)(a2 + 8) = 0;
  }
  v22 = *(_QWORD *)(a2 + 184);
  if ((*a3 & 0xF) == 0 || (*a3 & 0x1C0) == 0)
  {
    v24 = *(_QWORD *)a1;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)a1;
  if ((*a3 & 0x20) != 0
    || *(_DWORD *)(a2 + 4) == 2
    || (v25 = (uint64_t)&a1[*(_QWORD *)(v24 - 24)], !*(_BYTE *)(*(_QWORD *)(v25 + 344) + 1643)))
  {
LABEL_37:
    v85 = &a1[*(_QWORD *)(v24 - 24)];
    v86 = *((_QWORD *)v85 + 43);
    v132 = *(_OWORD *)(v85 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v85 + 8));
    v134 = *((_DWORD *)v85 + 26);
    v84 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v86 + 248))(v86, &v132, a2);
    if (v133)
      llvm::MetadataTracking::untrack();
    goto LABEL_39;
  }
  v128 = *(_QWORD *)(a2 + 184);
  v125 = v17;
  v26 = sub_21DF203DC(v25, (uint64_t)"llvm.floor.f32", 14, *(_QWORD *)(v25 + 160), *(_QWORD *)(v25 + 160));
  llvm::Function::addFnAttr();
  v27 = *(_QWORD *)(a2 + 120);
  v122 = *(_QWORD *)(a2 + 152);
  v121 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)a2 = 4;
  *(_QWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a2 + 144) = 3;
  *(_WORD *)(a2 + 224) = 0;
  v28 = (uint64_t *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v29 = *(_QWORD *)(a2 + 48);
  v149 = 257;
  v30 = sub_21DF19394(v28 + 1, **(llvm::Type ***)(*(_QWORD *)v29 + 16), v29, 0, (uint64_t)v148);
  v31 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v32 = v31 + 8;
  v33 = sub_21DF79408(v31, v30, 2, 1);
  v34 = *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 216];
  v149 = 257;
  v35 = sub_21DF2053C(v32, v33, v34, (uint64_t)v148);
  v36 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
  v149 = 257;
  v123 = v27;
  v37 = sub_21DF20300(v36, v27, v35, (uint64_t)v148);
  v38 = llvm::ConstantFP::get();
  v138 = 257;
  v39 = (llvm::Constant *)sub_21DF2074C(v36, v37, v38, (uint64_t)&v135);
  v40 = sub_21DF79F74((uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)], v26, v39);
  v41 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
  v149 = 257;
  v42 = sub_21DF20828(v41, (uint64_t)v39, (uint64_t)v40, (uint64_t)v148);
  v43 = *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 208];
  v138 = 257;
  v44 = sub_21DF20674(v41, v42, v43, (uint64_t)&v135);
  v45 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
  v46 = llvm::ConstantFP::get();
  v149 = 257;
  v47 = sub_21DF20828(v45, v46, v44, (uint64_t)v148);
  v48 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
  v149 = 257;
  *(_QWORD *)(a2 + 120) = sub_21DF38C30(v48, (uint64_t)v40, v35, (uint64_t)v148);
  v49 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v50 = *((_QWORD *)v49 + 43);
  v145 = *(_OWORD *)(v49 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v49 + 8));
  v147 = *((_DWORD *)v49 + 26);
  v120 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v50 + 248))(v50, &v145, a2);
  if (v146)
    llvm::MetadataTracking::untrack();
  v124 = v3;
  v51 = llvm::UndefValue::get();
  v52 = 0;
  for (i = 0; i != 4; ++i)
  {
    v127 = v51;
    v143 = 0;
    v144 = 0;
    v143 = llvm::ConstantInt::get();
    v144 = llvm::ConstantInt::get();
    v54 = llvm::ConstantVector::get();
    v55 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
    v149 = 257;
    v56 = sub_21DF19EE8(v55, v44, v47, v54, (uint64_t)v148);
    v57 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
    v149 = 257;
    v58 = v44;
    v59 = (uint64_t)(v57 + 8);
    v60 = llvm::ConstantInt::get();
    v61 = sub_21DF79584(v59, v56, v60, (uint64_t)v148);
    v62 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
    v138 = 257;
    v63 = (uint64_t)(v62 + 8);
    v64 = llvm::ConstantInt::get();
    v65 = sub_21DF79584(v63, v56, v64, (uint64_t)&v135);
    v142 = 257;
    v66 = sub_21DF20300(v59, v61, v65, (uint64_t)&v139);
    v67 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
    v149 = 257;
    v68 = (uint64_t)(v67 + 8);
    v69 = llvm::ConstantInt::get();
    v70 = v68;
    v44 = v58;
    v51 = sub_21DF7980C(v70, v127, v66, v69, (uint64_t)v148);
    v52 += 2;
  }
  v71 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v72 = *((_QWORD *)v71 + 34);
  v149 = 257;
  v73 = sub_21DF2F978((uint64_t)(v71 + 8), v51, v72, (uint64_t)v148);
  v148[0] = *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 296];
  v148[1] = v148[0];
  llvm::StructType::get();
  v74 = llvm::UndefValue::get();
  v75 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v76 = (uint64_t)(v75 + 8);
  v77 = *((_QWORD *)v75 + 37);
  v149 = 257;
  v78 = sub_21DF1A79C((uint64_t)(v75 + 8), 49, v120, v77, (uint64_t)v148);
  LODWORD(v139) = 0;
  v138 = 257;
  v79 = sub_21DF1A244(v76, v74, v78, (uint64_t)&v139, 1, (uint64_t)&v135);
  v80 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
  v81 = (uint64_t)(v80 + 8);
  v82 = *((_QWORD *)v80 + 37);
  v149 = 257;
  v83 = sub_21DF1A79C((uint64_t)(v80 + 8), 49, v73, v82, (uint64_t)v148);
  LODWORD(v139) = 1;
  v138 = 257;
  v84 = sub_21DF1A244(v81, v79, v83, (uint64_t)&v139, 1, (uint64_t)&v135);
  *(_QWORD *)(a2 + 120) = v123;
  *(_QWORD *)(a2 + 152) = v122;
  *(_DWORD *)(a2 + 144) = v121;
  *(_DWORD *)a2 = 1;
  v17 = v125;
  v22 = v128;
  v3 = v124;
LABEL_39:
  v87 = *v3;
  switch(*v3 & 0xF)
  {
    case 0:
      v88 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
      v89 = sub_21DF69A4C(a1, v84);
      return (**(uint64_t (***)(char *, uint64_t, _QWORD))v88)(v88, v89, *(unsigned int *)(a2 + 8));
    case 2:
      if ((v87 & 0x10) != 0)
        goto LABEL_52;
      goto LABEL_54;
    case 3:
      if ((v87 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_52;
    case 4:
      if ((v87 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_52;
    case 5:
      if ((v87 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_52;
    case 6:
      if ((v87 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_52;
    case 8:
      if ((v87 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_52;
    default:
      if ((v87 & 0x10) != 0)
      {
LABEL_52:
        v90 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
        v91 = *((_QWORD *)v90 + 43);
        v129 = *(_OWORD *)(v90 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v90 + 8));
        v131 = *((_DWORD *)v90 + 26);
        (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v91 + 40))(v91, &v129, v22, 0);
        if (v130)
          llvm::MetadataTracking::untrack();
      }
LABEL_54:
      if ((*v3 & 0x1C0) != 0)
      {
        *((_QWORD *)&v139 + 1) = 0;
        *((_QWORD *)&v145 + 1) = 0;
        v92 = llvm::ConstantFP::get();
        v93 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
        LODWORD(v135) = 0;
        v149 = 257;
        v94 = sub_21DF1ACD0(v93 + 8, v84, (uint64_t)&v135, 1, (uint64_t)v148);
        *(_QWORD *)&v139 = sub_21DF7939C(v93, v94, *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 160]);
        v95 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
        LODWORD(v143) = 1;
        v149 = 257;
        v96 = sub_21DF1ACD0(v95 + 8, v84, (uint64_t)&v143, 1, (uint64_t)v148);
        v97 = sub_21DF7939C(v95, v96, *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 160]);
        v98 = *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 264];
        v138 = 257;
        *(_QWORD *)&v145 = sub_21DF20674(v95 + 8, v97, v98, (uint64_t)&v135);
        v126 = v17;
        if ((*v3 & 0x40) != 0)
        {
          v101 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          LODWORD(v135) = 2;
          v149 = 257;
          v102 = sub_21DF1ACD0(v101 + 8, v84, (uint64_t)&v135, 1, (uint64_t)v148);
          *((_QWORD *)&v139 + 1) = sub_21DF7939C(v101, v102, *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 160]);
          v103 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          LODWORD(v143) = 3;
          v149 = 257;
          v104 = sub_21DF1ACD0(v103 + 8, v84, (uint64_t)&v143, 1, (uint64_t)v148);
          v105 = sub_21DF7939C(v103, v104, *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 160]);
          v106 = *(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 264];
          v138 = 257;
          *((_QWORD *)&v145 + 1) = sub_21DF20674(v103 + 8, v105, v106, (uint64_t)&v135);
          v99 = 8;
        }
        else
        {
          v99 = 4;
        }
        for (j = 0; j != v99; ++j)
        {
          v108 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v109 = *((_QWORD *)&v139 + (j >> 2));
          v149 = 257;
          v110 = (uint64_t)(v108 + 8);
          v111 = llvm::ConstantInt::get();
          sub_21DF79584(v110, v109, v111, (uint64_t)v148);
          v112 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
          v113 = *((_QWORD *)&v145 + (j >> 2));
          v149 = 257;
          v114 = (uint64_t)(v112 + 8);
          v115 = llvm::ConstantInt::get();
          v116 = sub_21DF79584(v114, v113, v115, (uint64_t)v148);
          v149 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          v117 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 8];
          v149 = 257;
          sub_21DF2074C(v117, v92, v116, (uint64_t)v148);
          v149 = 257;
          v92 = llvm::IRBuilderBase::CreateSelect();
        }
        v118 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 24)];
        v119 = *((_QWORD *)v118 + 20);
        v149 = 257;
        v100 = sub_21DF2F978((uint64_t)(v118 + 8), v92, v119, (uint64_t)v148);
        v17 = v126;
      }
      else
      {
        sub_21DF69A4C(a1, v84);
        v149 = 257;
        llvm::IRBuilderBase::CreateFCmpHelper();
        llvm::ConstantFP::get();
        llvm::ConstantFP::get();
        v149 = 257;
        v100 = llvm::IRBuilderBase::CreateSelect();
      }
      *(_DWORD *)(a2 + 8) = v17;
      result = (**(uint64_t (***)(char *, uint64_t, uint64_t))&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)], v100, v17);
      break;
  }
  return result;
}

uint64_t sub_21DF69A4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v2 = a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v8 = 257;
    v4 = (uint64_t)(v3 + 8);
    v5 = llvm::ConstantInt::get();
    return sub_21DF79584(v4, v2, v5, (uint64_t)v7);
  }
  return v2;
}

void sub_21DF69AC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2553B3C80);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2553B3C80))
    {
      qword_2553B3C60 = 0;
      *(_QWORD *)&dword_2553B3C68 = 0;
      qword_2553B3C70 = 0x800000000;
      __cxa_atexit((void (*)(void *))sub_21DF69B30, &qword_2553B3C60, &dword_21DF15000);
      __cxa_guard_release(&qword_2553B3C80);
    }
  }
}

uint64_t sub_21DF69B30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 9));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF69BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

_QWORD *sub_21DF69C20(uint64_t a1, _QWORD *a2, const void *a3)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = (_QWORD *)sub_21DF6D30C((uint64_t)a2, a3);
  v7 = a2[1];
  v8 = 16;
  if (v7 == *a2)
    v8 = 20;
  v9 = (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)a2 + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        result = v9;
        break;
      }
    }
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

uint64_t *sub_21DF69C94(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _OWORD *v9;
  __int128 v10;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x48uLL);
    v10 = *(_OWORD *)(a3 + 16);
    v9[2] = *(_OWORD *)a3;
    v9[3] = v10;
    *((_QWORD *)v9 + 8) = *(_QWORD *)(a3 + 32);
    return sub_21DF5262C(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t *sub_21DF69D38(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (unsigned int *)(v4 + 4);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)v6;
        if (v8)
          v15 = (uint64_t **)(v9 + 1);
        else
          v15 = (uint64_t **)v6;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v15 = (uint64_t **)v6;
        if (v8)
        {
          v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v8;
              v20 = *((_DWORD *)v8 + 8);
              if (v13 >= v20)
                break;
              v8 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v20 >= v13)
              break;
            v15 = v14 + 1;
            v8 = v14[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x38uLL);
        v17 = v4[6];
        v16[2] = *(_OWORD *)v7;
        *((_QWORD *)v16 + 6) = v17;
        result = sub_21DF5262C((uint64_t **)v5, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v12 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v12);
      }
      v4 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

BOOL sub_21DF69E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19[2];
  _BYTE v20[24];
  _QWORD *v21;
  _BYTE v22[24];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  void *v28[2];
  _QWORD v29[9];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = &off_24E1F15F8;
  v18[1] = v19;
  v28[1] = (void *)0x400000000;
  v26[0] = &off_24E1F1C40;
  v26[1] = v18;
  v27 = v26;
  v28[0] = v29;
  sub_21DF6A0F0(*(_QWORD *)(a2 + 24), (uint64_t)v26);
  v8 = v27;
  if (v27 == v26)
  {
    v9 = 4;
    v8 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v24[0] = &off_24E1F1CD0;
  v24[1] = v18;
  v25 = v24;
  sub_21DF6A0F0(*(_QWORD *)(a3 + 24), (uint64_t)v24);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_21DF6A148((uint64_t)v18, (uint64_t)v28, a4);
  sub_21DF6A2A4(a1, (uint64_t)v28);
  v17 = a1;
  v16 = 1;
  v12 = operator new(0x20uLL);
  *v12 = &off_24E1F1D60;
  v12[1] = &v16;
  v12[2] = v18;
  v12[3] = &v17;
  v23 = v12;
  sub_21DF6A0F0(*(_QWORD *)(a2 + 24), (uint64_t)v22);
  (*(void (**)(_QWORD *))(*v12 + 40))(v12);
  v13 = operator new(0x20uLL);
  *v13 = &off_24E1F1DF0;
  v13[1] = &v16;
  v13[2] = v18;
  v13[3] = &v17;
  v21 = v13;
  sub_21DF6A0F0(*(_QWORD *)(a3 + 24), (uint64_t)v20);
  (*(void (**)(_QWORD *))(*v13 + 40))(v13);
  v14 = v16;
  if (v28[0] != v29)
    free(v28[0]);
  sub_21DF2E824(v19[0]);
  return v14 != 0;
}

uint64_t sub_21DF6A0B8(uint64_t a1)
{
  void *v2;

  sub_21DF6BCA8(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_21DF6A0F0(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      v5 = v3[5];
      v4 = *(_QWORD *)(a2 + 24);
      if (!v4)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v5);
      v3 = (_QWORD *)*v3;
      if (!v3)
        return result;
    }
    sub_21DF6C9F8();
    return sub_21DF6A148();
  }
  return result;
}

uint64_t sub_21DF6A148(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v3 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)(result + 16);
  if (v3 != (_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_13;
      v8 = *((_DWORD *)v3 + 9);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        v11 = v10 > v8;
        if (v10 <= v8)
          v12 = (uint64_t *)(v7 + 8);
        else
          v12 = (uint64_t *)v7;
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_13:
        v9 = v6;
      v13 = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v3 + 9) = v13;
      v14 = *((_DWORD *)v3 + 7);
      if (v14 <= *((_DWORD *)v3 + 8))
      {
        v18 = (uint64_t)(v9 + 4);
        do
        {
          result = sub_21DF70290(v18, v14);
          v19 = result;
          v21 = v20;
          if (v13 >= *(_DWORD *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = *(_DWORD *)(a2 + 8);
          }
          v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v13);
          *v22 = v19;
          v22[1] = v21;
          v13 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v13;
          ++v14;
        }
        while (v14 <= *((_DWORD *)v3 + 8));
      }
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v3[2];
          v17 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v17);
      }
      v3 = v16;
    }
    while (v16 != v4);
  }
  return result;
}

void sub_21DF6A2A4(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  uint64_t v14;
  llvm::Constant *v15;
  llvm::Type *v16;
  uint64_t NullValue;

  if (*(_DWORD *)(a2 + 8))
  {
    if (MGGetBoolAnswer()
      && (v4 = (const char *)sub_21DF21324("AGX_FORCE_CS_SAMPLERS")) != 0
      && *v4 != 48
      && atoi(v4)
      && !*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678))
    {
      v15 = (llvm::Constant *)llvm::PointerType::get();
      NullValue = llvm::Constant::getNullValue(v15, v16);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 1544), NullValue);
    }
    else
    {
      sub_21DF70048((_QWORD *)a1, (uint64_t *)a2, a1 + 1544);
    }
    sub_21DF70048((_QWORD *)a1, (uint64_t *)a2, a1 + 1600);
    sub_21DF70048((_QWORD *)a1, (uint64_t *)a2, a1 + 1656);
    v5 = (uint64_t *)(a1 + 600);
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(_DWORD *)(a1 + 608);
    if (v7 != (_DWORD)v6)
    {
      if (v7 <= v6)
      {
        if (*(_DWORD *)(a1 + 612) < v6)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = *(_DWORD *)(a1 + 608);
        }
        if (v7 != (_DWORD)v6)
          bzero((void *)(*v5 + 4 * v7), 4 * v6 - 4 * v7);
      }
      *(_DWORD *)(a1 + 608) = v6;
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
    }
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = *(int **)a2;
      v10 = *v5;
      do
      {
        v11 = *v9;
        v9 += 4;
        *(_DWORD *)(v10 + 4 * v8++) = v11;
      }
      while (v8 < *(unsigned int *)(a2 + 8));
    }
  }
  else if (!*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678) && *(_DWORD *)(a1 + 2160))
  {
    v12 = (llvm::Constant *)llvm::PointerType::get();
    v14 = llvm::Constant::getNullValue(v12, v13);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 1544), v14);
    sub_21DF70048((_QWORD *)a1, (uint64_t *)a2, a1 + 1656);
  }
}

uint64_t *sub_21DF6A45C(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (unsigned int *)(v4 + 4);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)v6;
        if (v8)
          v15 = (uint64_t **)(v9 + 1);
        else
          v15 = (uint64_t **)v6;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v15 = (uint64_t **)v6;
        if (v8)
        {
          v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v8;
              v21 = *((_DWORD *)v8 + 8);
              if (v13 >= v21)
                break;
              v8 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v21 >= v13)
              break;
            v15 = v14 + 1;
            v8 = v14[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x48uLL);
        v17 = v4[8];
        v18 = *((_OWORD *)v4 + 3);
        v16[2] = *(_OWORD *)v7;
        v16[3] = v18;
        *((_QWORD *)v16 + 8) = v17;
        result = sub_21DF5262C((uint64_t **)v5, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v12 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v12);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

BOOL sub_21DF6A5C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t Int8PtrTy;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  _QWORD **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD **v44;
  char v45;
  char v46;
  _QWORD **v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD **v51;
  uint64_t v52;
  char v53;
  char v54;
  _QWORD **v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD **v59;
  const char *v60;
  uint64_t v61;
  char v62;
  char v63;
  _QWORD **v64;
  uint64_t v65;
  char v66;
  char v67;
  _QWORD **v68;
  uint64_t v69;
  char v70;
  char v71;
  _QWORD **v72;
  uint64_t NullValue;
  llvm::Constant *v74;
  llvm::Type *v75;
  uint64_t v76;
  llvm::Constant *v77;
  llvm::Type *v78;
  uint64_t v79;
  char v80;
  char v81;
  _QWORD **v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD **v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  _OWORD v111[2];
  int v112;
  uint64_t (**v113)();
  _QWORD **v114;
  _QWORD *v115[2];
  _QWORD v116[2];
  const char *v117;
  __int16 v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  _QWORD v124[3];
  _QWORD *v125;
  _QWORD v126[3];
  _QWORD *v127;
  _QWORD v128[3];
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  _BYTE v134[96];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v133 = 0x400000000;
  v113 = &off_24E1F15F8;
  v114 = v115;
  v115[0] = 0;
  v115[1] = 0;
  v130[0] = &off_24E1F1FE8;
  v130[1] = &v113;
  v131 = v130;
  v132 = v134;
  sub_21DF6A0F0(*(_QWORD *)(a2 + 24), (uint64_t)v130);
  v7 = v131;
  if (v131 == v130)
  {
    v8 = 4;
    v7 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v128[0] = &off_24E1F2078;
  v128[1] = &v113;
  v129 = v128;
  sub_21DF6A0F0(*(_QWORD *)(a3 + 24), (uint64_t)v128);
  v9 = v129;
  if (v129 == v128)
  {
    v10 = 4;
    v9 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v98 = a3;
  memset(v111, 0, sizeof(v111));
  v112 = 1065353216;
  v11 = v114;
  if (v114 == v115)
  {
LABEL_91:
    *(_QWORD *)&v135 = v111;
    LOBYTE(v119) = 1;
    v126[0] = &off_24E1F2108;
    v126[1] = &v119;
    v126[2] = &v135;
    v127 = v126;
    sub_21DF6A0F0(*(_QWORD *)(a2 + 24), (uint64_t)v126);
    v89 = v127;
    if (v127 == v126)
    {
      v90 = 4;
      v89 = v126;
    }
    else
    {
      if (!v127)
        goto LABEL_97;
      v90 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v89 + 8 * v90))(v89, v87, v88);
LABEL_97:
    v124[0] = &off_24E1F2198;
    v124[1] = &v119;
    v124[2] = &v135;
    v125 = v124;
    sub_21DF6A0F0(*(_QWORD *)(v98 + 24), (uint64_t)v124);
    v94 = v125;
    if (v125 == v124)
    {
      v95 = 4;
      v94 = v124;
    }
    else
    {
      if (!v125)
      {
LABEL_102:
        v91 = (_BYTE)v119 != 0;
        goto LABEL_103;
      }
      v95 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v94 + 8 * v95))(v94, v92, v93);
    goto LABEL_102;
  }
  v12 = (_QWORD *)(a4 + 8);
  v13 = a1 + 43;
  v14 = "driver_parameters";
  v99 = v12;
  while (1)
  {
    v15 = *v12;
    if (!*v12)
      break;
    v16 = *((_DWORD *)v11 + 9);
    v17 = v12;
    do
    {
      v18 = *(_DWORD *)(v15 + 36) + *(_DWORD *)(v15 + 32);
      v19 = v18 > v16;
      if (v18 <= v16)
        v20 = (uint64_t *)(v15 + 8);
      else
        v20 = (uint64_t *)v15;
      if (v19)
        v17 = (_QWORD *)v15;
      v15 = *v20;
    }
    while (*v20);
    if (v17 == v12)
      break;
    v22 = *((_DWORD *)v17 + 8);
    v21 = (uint64_t)(v17 + 4);
    if (v16 < v22)
      break;
    v23 = *((_DWORD *)v11 + 7);
    if (*((_DWORD *)v11 + 8) != v23)
      break;
    sub_21DF6C078((uint64_t)&v106, v21, v23);
    Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 336), (llvm::LLVMContext *)2);
    v25 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 192);
    *(_QWORD *)&v135 = Int8PtrTy;
    *((_QWORD *)&v135 + 1) = v25;
    *(_QWORD *)&v136 = v25;
    llvm::StructType::get();
    if ((*(_BYTE *)(v110 + 9) & 1) == 0)
    {
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
      *(_QWORD *)&v135 = llvm::PointerType::get();
      *((_QWORD *)&v135 + 1) = llvm::PointerType::get();
      llvm::FixedVectorType::get();
      *(_QWORD *)&v136 = llvm::PointerType::get();
      *((_QWORD *)&v136 + 1) = llvm::PointerType::get();
      *(_QWORD *)&v137 = llvm::PointerType::get();
      *((_QWORD *)&v137 + 1) = llvm::PointerType::get();
      *(_QWORD *)&v138 = llvm::PointerType::get();
      *((_QWORD *)&v138 + 1) = llvm::PointerType::get();
      *(_QWORD *)&v139 = llvm::PointerType::get();
      *((_QWORD *)&v139 + 1) = llvm::PointerType::get();
      llvm::StructType::setBody();
    }
    v26 = v106;
    v104 = ((unint64_t)v106 >> 16) & 0x7FFF;
    v105 = (unsigned __int16)v106;
    if (v108)
    {
      v27 = llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v116[0] = v104;
        v117 = ".";
        v118 = 776;
        v28 = 2;
        v29 = 8;
        v30 = &v119;
        v119 = v116;
        v121 = v105;
      }
      else
      {
        LODWORD(v119) = v105;
        v28 = 8;
        v29 = 1;
        v30 = (_QWORD **)v119;
      }
      v122 = v28;
      v123 = v29;
      *(_QWORD *)&v135 = "agc.read_image_words";
      *(_QWORD *)&v136 = v30;
      *((_QWORD *)&v136 + 1) = v120;
      LOBYTE(v137) = 3;
      BYTE1(v137) = v28;
      llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v27 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      if (*(_BYTE *)(*(_QWORD *)(v31 + 344) + 1647))
        sub_21DF6F5F4(a1);
      else
        sub_21DF7A774(v31);
      if (v107 != -1)
      {
        v32 = *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(v32, v27);
      }
    }
    else
    {
      v27 = 0;
    }
    if (v109)
    {
      v33 = llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v116[0] = v104;
        v117 = ".";
        v118 = 776;
        v119 = v116;
        v121 = v105;
        v34 = 2;
        v35 = 8;
        v36 = &v119;
      }
      else
      {
        LODWORD(v119) = v105;
        v34 = 8;
        v35 = 1;
        v36 = (_QWORD **)v119;
      }
      v122 = v34;
      v123 = v35;
      *(_QWORD *)&v135 = "agc.write_image_words";
      *(_QWORD *)&v136 = v36;
      *((_QWORD *)&v136 + 1) = v120;
      LOBYTE(v137) = 3;
      BYTE1(v137) = v34;
      v37 = v33;
      v38 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v38 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v39 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v102 = v37;
      if (*(_BYTE *)(*(_QWORD *)(v39 + 344) + 1647))
        sub_21DF6F5F4(a1);
      else
        sub_21DF7A774(v39);
      if (v107 != -1)
      {
        v40 = *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 168))(v40, v37);
      }
    }
    else
    {
      v102 = 0;
    }
    v41 = llvm::User::operator new((llvm::User *)0x58);
    llvm::FixedVectorType::get();
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v42 = 2;
      v43 = 8;
      v44 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v42 = 8;
      v43 = 1;
      v44 = (_QWORD **)v119;
    }
    v122 = v42;
    v123 = v43;
    *(_QWORD *)&v135 = "agc.image_dim";
    *(_QWORD *)&v136 = v44;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v42;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v41 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v103 = llvm::User::operator new((llvm::User *)0x58);
    v101 = v27;
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v45 = 2;
      v46 = 8;
      v47 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v45 = 8;
      v46 = 1;
      v47 = (_QWORD **)v119;
    }
    v122 = v45;
    v123 = v46;
    *(_QWORD *)&v135 = "agc.image_array_info";
    *(_QWORD *)&v136 = v47;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v45;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v103 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v48 = llvm::User::operator new((llvm::User *)0x58);
    v100 = v41;
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v49 = 2;
      v50 = 8;
      v51 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v49 = 8;
      v50 = 1;
      v51 = (_QWORD **)v119;
    }
    v122 = v49;
    v123 = v50;
    *(_QWORD *)&v135 = "agc.image_pack_format";
    *(_QWORD *)&v136 = v51;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v49;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v48 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v52 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v53 = 2;
      v54 = 8;
      v55 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v53 = 8;
      v54 = 1;
      v55 = (_QWORD **)v119;
    }
    v122 = v53;
    v123 = v54;
    *(_QWORD *)&v135 = "agc.image_mipmap_count";
    *(_QWORD *)&v136 = v55;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v53;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v52 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v56 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v57 = 2;
      v58 = 8;
      v59 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v57 = 8;
      v58 = 1;
      v59 = (_QWORD **)v119;
    }
    v122 = v57;
    v123 = v58;
    *(_QWORD *)&v135 = "agc.image_sample_count";
    *(_QWORD *)&v136 = v59;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v57;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v56 + 80) |= 1u;
    v60 = v14;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v61 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v62 = 2;
      v63 = 8;
      v64 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v62 = 8;
      v63 = 1;
      v64 = (_QWORD **)v119;
    }
    v122 = v62;
    v123 = v63;
    *(_QWORD *)&v135 = "agc.image_base_level";
    *(_QWORD *)&v136 = v64;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v62;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v61 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v65 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v66 = 2;
      v67 = 8;
      v68 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v66 = 8;
      v67 = 1;
      v68 = (_QWORD **)v119;
    }
    v122 = v66;
    v123 = v67;
    *(_QWORD *)&v135 = "agc.image_heap_index";
    *(_QWORD *)&v136 = v68;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v66;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v65 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    v69 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v70 = 2;
      v71 = 8;
      v72 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v70 = 8;
      v71 = 1;
      v72 = (_QWORD **)v119;
    }
    v122 = v70;
    v123 = v71;
    *(_QWORD *)&v135 = "agc.image_unique_id";
    *(_QWORD *)&v136 = v72;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v70;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v69 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    NullValue = v101;
    if (!v101)
    {
      v74 = (llvm::Constant *)llvm::PointerType::get();
      NullValue = llvm::Constant::getNullValue(v74, v75);
    }
    *(_QWORD *)&v135 = NullValue;
    v76 = v102;
    if (!v102)
    {
      v77 = (llvm::Constant *)llvm::PointerType::get();
      v76 = llvm::Constant::getNullValue(v77, v78);
    }
    *((_QWORD *)&v135 + 1) = v76;
    *(_QWORD *)&v136 = v100;
    *((_QWORD *)&v136 + 1) = v103;
    *(_QWORD *)&v137 = v48;
    *((_QWORD *)&v137 + 1) = v52;
    *(_QWORD *)&v138 = v56;
    *((_QWORD *)&v138 + 1) = v61;
    *(_QWORD *)&v139 = v65;
    *((_QWORD *)&v139 + 1) = v69;
    llvm::ConstantStruct::get();
    v79 = llvm::User::operator new((llvm::User *)0x58);
    if ((v26 & 0x80000000) != 0)
    {
      v116[0] = v104;
      v117 = ".";
      v118 = 776;
      v119 = v116;
      v121 = v105;
      v80 = 2;
      v81 = 8;
      v82 = &v119;
    }
    else
    {
      LODWORD(v119) = v105;
      v80 = 8;
      v81 = 1;
      v82 = (_QWORD **)v119;
    }
    v14 = v60;
    v122 = v80;
    v123 = v81;
    *(_QWORD *)&v135 = "agc.image_state_struct_ptr";
    *(_QWORD *)&v136 = v82;
    *((_QWORD *)&v136 + 1) = v120;
    LOBYTE(v137) = 3;
    BYTE1(v137) = v80;
    llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v79 + 80) |= 1u;
    llvm::GlobalVariable::setInitializer();
    v135 = 4uLL;
    v83 = v79;
    *(_QWORD *)&v136 = v79;
    if (v79 != -8192)
    {
      v83 = v79;
      if (v79 != -4096)
      {
        v83 = v79;
        if (v79)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v135);
          v83 = v136;
        }
      }
    }
    sub_21DF689C8(a1 + 95, v83, &v135);
    if ((_QWORD)v136 != -8192 && (_QWORD)v136 != -4096 && (_QWORD)v136)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v135);
    sub_21DF6EDDC((float *)v111, *((_DWORD *)v11 + 7), (_DWORD *)v11 + 7)[3] = v79;
    v84 = v11[1];
    if (v84)
    {
      do
      {
        v85 = (_QWORD **)v84;
        v84 = (_QWORD *)*v84;
      }
      while (v84);
    }
    else
    {
      do
      {
        v85 = (_QWORD **)v11[2];
        v86 = *v85 == v11;
        v11 = v85;
      }
      while (!v86);
    }
    v11 = v85;
    v12 = v99;
    v13 = a1 + 43;
    if (v85 == v115)
      goto LABEL_91;
  }
  v91 = 0;
LABEL_103:
  sub_21DF6F1B4((uint64_t)v111);
  sub_21DF2E824(v115[0]);
  if (v132 != v134)
    free(v132);
  return v91;
}

uint64_t sub_21DF6B8C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 1;
  v6[0] = &off_24E1F19B8;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  sub_21DF6A0F0(a2, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

unint64_t sub_21DF6B970(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _BYTE v20[24];

  v3 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)(result + 16);
  if (v3 != (_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_13;
      v8 = *((_DWORD *)v3 + 9);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        v11 = v10 > v8;
        if (v10 <= v8)
          v12 = (uint64_t *)(v7 + 8);
        else
          v12 = (uint64_t *)v7;
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_13:
        v9 = v6;
      *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
      v13 = *((_DWORD *)v3 + 7);
      if (v13 <= *((_DWORD *)v3 + 8))
      {
        v14 = (uint64_t)(v9 + 4);
        do
        {
          sub_21DF6C078((uint64_t)v20, v14, v13);
          result = sub_21DF6C0F8(a2, (unint64_t)v20);
          v15 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v16 = *(_OWORD *)result;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(result + 16);
          *(_OWORD *)v15 = v16;
          ++*(_DWORD *)(a2 + 8);
          ++v13;
        }
        while (v13 <= *((_DWORD *)v3 + 8));
      }
      v17 = (_QWORD *)v3[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v3[2];
          v19 = *v18 == (_QWORD)v3;
          v3 = v18;
        }
        while (!v19);
      }
      v3 = v18;
    }
    while (v18 != v4);
  }
  return result;
}

void sub_21DF6BAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 1880) = *(_DWORD *)(a2 + 8);
  v18[0] = 0;
  LOWORD(v17) = 0;
  BYTE2(v17) = 0;
  v16 = (void *)0xFFFFFFFF00040000;
  v4 = (uint64_t)&v16;
  v5 = sub_21DF6C0F8(a2, (unint64_t)&v16);
  v6 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  ++*(_DWORD *)(a2 + 8);
  v8 = sub_21DF6D028((_QWORD *)a1, (uint64_t *)a2, a1 + 1432);
  v16 = v18;
  v17 = 0x800000000;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v11 = 0;
    v12 = 0;
    v13 = 4;
    do
    {
      v14 = *(unsigned int *)(*(_QWORD *)a2 + v13);
      if ((_DWORD)v14 != -1)
      {
        v4 = v4 & 0xFFFFFF0000000000 | 4;
        sub_21DF6DCE8((uint64_t)&v16, v11 + v14, v4);
        v9 = *(unsigned int *)(a2 + 8);
      }
      ++v12;
      v11 += 0x400000000;
      v13 += 24;
    }
    while (v12 < v9);
    if ((_DWORD)v17)
    {
      v15 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v15 + 176))(v15, v10, &v16);
    }
  }
  if (v16 != v18)
    free(v16);
}

void sub_21DF6BC3C(_QWORD *a1)
{
  uint64_t **i;
  uint64_t v3;
  uint64_t j;

  for (i = (uint64_t **)a1[3]; i; i = (uint64_t **)*i)
    llvm::Function::eraseFromParent((llvm::Function *)i[5]);
  if (a1[4])
  {
    sub_21DF6BCA8((_QWORD *)a1[3]);
    a1[3] = 0;
    v3 = a1[2];
    if (v3)
    {
      for (j = 0; j != v3; ++j)
        *(_QWORD *)(a1[1] + 8 * j) = 0;
    }
    a1[4] = 0;
  }
}

void sub_21DF6BCA8(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = v2[5];
      if (v3 != -8192 && v3 != -4096 && v3 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 + 3));
      operator delete(v2);
    }
    while (v1);
  }
}

BOOL sub_21DF6BCFC(const char **a1, llvm::Value *this)
{
  uint64_t Name;
  size_t v4;
  const char *v5;
  const void *v6;
  size_t v7;
  size_t v8;

  Name = llvm::Value::getName(this);
  v5 = *a1;
  if (!v5)
    return 1;
  v6 = (const void *)Name;
  v7 = v4;
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  return !v8 || memcmp(v6, v5, v8) == 0;
}

void sub_21DF6BD74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;

  v4 = a2;
  v6 = HIDWORD(a2);
  v8 = (uint64_t **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v9 = (uint64_t *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 16);
    do
    {
      v11 = *(_DWORD *)(v10 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)(v10 + 8);
      if (v12)
        v9 = (uint64_t *)v10;
      v10 = *v13;
    }
    while (*v13);
    v14 = (uint64_t *)(a1 + 16);
    do
    {
      v15 = *(_DWORD *)(v7 + 28);
      v16 = v15 > HIDWORD(a2);
      if (v15 <= HIDWORD(a2))
        v17 = (uint64_t *)(v7 + 8);
      else
        v17 = (uint64_t *)v7;
      if (v16)
        v14 = (uint64_t *)v7;
      v7 = *v17;
    }
    while (*v17);
    if (v9 == v14)
    {
      v14 = v9;
    }
    else
    {
      v18 = v9;
      do
      {
        v19 = *((_DWORD *)v18 + 8);
        if (*((_DWORD *)v18 + 7) < v4)
          v4 = *((_DWORD *)v18 + 7);
        if (v6 <= v19)
          v6 = v19;
        else
          v6 = v6;
        (**(void (***)(uint64_t, uint64_t, _QWORD))a1)(a1, a3, *((unsigned int *)v18 + 9));
        v20 = (uint64_t *)v18[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v18[2];
            v22 = *v21 == (_QWORD)v18;
            v18 = v21;
          }
          while (!v22);
        }
        v18 = v21;
      }
      while (v21 != v14);
    }
    v23 = (uint64_t **)(a1 + 8);
    if (v9 != v14)
    {
      do
      {
        v24 = (uint64_t *)v9[1];
        v25 = v9;
        if (v24)
        {
          do
          {
            v26 = v24;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v26 = (uint64_t *)v25[2];
            v22 = *v26 == (_QWORD)v25;
            v25 = v26;
          }
          while (!v22);
        }
        if (*v23 == v9)
          *v23 = v26;
        v27 = *(uint64_t **)(a1 + 16);
        --*(_QWORD *)(a1 + 24);
        sub_21DF6D3D0(v27, v9);
        operator delete(v9);
        v9 = v26;
      }
      while (v26 != v14);
    }
    while (1)
    {
      v28 = *v8;
      if (!*v8)
        break;
      while (1)
      {
        v8 = (uint64_t **)v28;
        if (v6 < *((_DWORD *)v28 + 7))
          break;
        if (*((_DWORD *)v28 + 8) >= v4)
          return;
        v29 = (uint64_t **)(v28 + 1);
        v28 = (uint64_t *)v28[1];
        if (!v28)
          goto LABEL_49;
      }
    }
  }
  else
  {
    v23 = (uint64_t **)(a1 + 8);
  }
  v29 = v8;
LABEL_49:
  v30 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v30 + 28) = v4 | (v6 << 32);
  *((_DWORD *)v30 + 9) = a3;
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = v8;
  *v29 = (uint64_t *)v30;
  v31 = (uint64_t *)**v23;
  if (v31)
  {
    *v23 = v31;
    v32 = *v29;
  }
  else
  {
    v32 = (uint64_t *)v30;
  }
  sub_21DF25404(*(uint64_t **)(a1 + 16), v32);
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_21DF6BF90(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_21DF6D028(a1, a2, (uint64_t)(a1 + 123));
  sub_21DF6D278((uint64_t)a1, (uint64_t)a2, v4);
  v5 = sub_21DF6D028(a1, a2, (uint64_t)(a1 + 130));
  result = sub_21DF6D278((uint64_t)a1, (uint64_t)a2, v5);
  if (*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 1678))
  {
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 137));
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 144));
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 158));
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 165));
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 151));
    sub_21DF6D028(a1, a2, (uint64_t)(a1 + 172));
    return sub_21DF6D028(a1, a2, (uint64_t)(a1 + 186));
  }
  return result;
}

uint64_t sub_21DF6C078(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 224);
    v5 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD **)(v3 + 8);
      v7 = &v6[4 * v5];
      v8 = (unsigned __int16)a3 - *(_DWORD *)(v3 + 228);
      do
      {
        v9 = v6[2];
        v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(_QWORD *)v6 + 20) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFFF0000 | (unsigned __int16)v4;
  }
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(result + 10) = *(_DWORD *)(a2 + 16) == 1;
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = v11;
  return result;
}

unint64_t sub_21DF6C0F8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

uint64_t sub_21DF6C170(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;

  v3 = a1[1];
  if (v3 == *a1)
    v4 = (unsigned int *)a1 + 5;
  else
    v4 = (unsigned int *)(a1 + 2);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = (uint64_t *)a1[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return 1;
    }
  }
  else
  {
    i = (uint64_t *)a1[1];
  }
  v8 = (uint64_t *)(v3 + 8 * v5);
  if (i == v8)
    return 1;
  v9 = *i;
  do
  {
    v13 = v9;
    v10 = *(_QWORD *)(a2 + 24);
    if (!v10)
    {
      sub_21DF6C9F8();
      JUMPOUT(0x21DF6C24CLL);
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13);
    ++i;
    if ((_DWORD)result)
      v12 = i == v8;
    else
      v12 = 1;
    if (v12)
      break;
    while (1)
    {
      v9 = *i;
      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        break;
      if (++i == v8)
        return 1;
    }
  }
  while (i != v8);
  return result;
}

void sub_21DF6C250()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6C264(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24E1F1928;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6C298(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24E1F1928;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6C2B4(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v6[0] = &off_24E1F1970;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t sub_21DF6C358(llvm::Constant *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t i;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!this)
    return 1;
  v4 = *((_QWORD *)this + 1);
  while (v4)
  {
    v15 = v19;
    v16 = v19;
    v17 = 4;
    v18 = 0;
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 24);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 5;
    else
      v7 = 0;
    if (v7)
    {
      for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
        sub_21DF69C20((uint64_t)v14, &v15, *(const void **)(i + 24));
    }
    else
    {
      sub_21DF69C20((uint64_t)v14, &v15, (const void *)v6);
    }
    v9 = (_QWORD *)a2[3];
    if (v9)
    {
      if (v9 == a2)
      {
        v21 = v20;
        (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v20);
      }
      else
      {
        v21 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
      }
    }
    else
    {
      v21 = 0;
    }
    v10 = sub_21DF6C170(&v15, (uint64_t)v20);
    v11 = v21;
    if (v21 == v20)
    {
      v11 = v20;
      v12 = 4;
      goto LABEL_20;
    }
    if (v21)
    {
      v12 = 5;
LABEL_20:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    if (v16 != v15)
      free(v16);
    v4 = v5;
    if ((v10 & 1) == 0)
      return 0;
  }
  llvm::Constant::removeDeadConstantUsers(this);
  return 1;
}

void sub_21DF6C4F4()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6C508(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1970;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6C53C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1970;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6C558(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  const void *v9;
  _QWORD *v10;
  _BYTE v12[32];
  __int16 v13;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (_QWORD *)((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = v4[4];
  if (v5)
    v6 = v5 == v4[5] + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v5 - 24;
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v13 = 257;
  v9 = (const void *)sub_21DF19394(v8 + 1, **(llvm::Type ***)(*v4 + 16), (uint64_t)v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  v10 = v3 + 111;
  if (sub_21DF6C638((uint64_t)v10, v2))
    sub_21DF69C20((uint64_t)v12, v10, v9);
  return 1;
}

BOOL sub_21DF6C638(uint64_t a1, void *a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v3 = sub_21DF671D8((llvm::SmallPtrSetImplBase *)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 16;
  if (v4 == *(_QWORD *)a1)
    v5 = 20;
  v6 = (void **)(v4 + 8 * *(unsigned int *)(a1 + v5));
  if (v3 != v6)
  {
    *v3 = (void *)-2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v3 != v6;
}

void sub_21DF6C69C()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6C6B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1850;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6C6E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1850;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6C708(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  v7[0] = &unk_24E1F18E0;
  v7[1] = v4;
  v8 = v7;
  sub_21DF6C7AC(v2, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

uint64_t sub_21DF6C7AC(llvm::Constant *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24E1F1898;
  v7[1] = a2;
  v7[2] = a3;
  v8 = v7;
  v3 = sub_21DF6C358(a1, v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_21DF6C84C()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6C860(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6C898(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_21DF6C8B8(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = v4 + 16;
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v16;
    if (v9 >= v16)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16)
LABEL_12:
    v8 = v6;
  v12 = *(_QWORD *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    v13 = ((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    sub_21DF6C9BC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

void sub_21DF6C9BC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  v4 = a2;
  v3 = a3;
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 48))(a1, &v4, &v3);
  }
  else
  {
    sub_21DF6C9F8();
    sub_21DF6C9F8();
  }
}

void sub_21DF6C9F8()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x21DF6CA0CLL);
}

void sub_21DF6CA10()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6CA24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24E1F18E0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6CA58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24E1F18E0;
  a2[1] = v2;
  return result;
}

const void *sub_21DF6CA74(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::GlobalValue *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  _QWORD *v15;
  _BYTE v17[32];
  __int16 v18;

  v2 = (_QWORD *)*a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
  v6 = llvm::ConstantInt::get();
  v18 = 257;
  v7 = sub_21DF19FAC(v4, v5, v6, (uint64_t)v17);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v9 = *v2;
  v18 = 257;
  v10 = (llvm::GlobalValue *)sub_21DF1A79C(v8, 48, v7, v9, (uint64_t)v17);
  v11 = sub_21DF66D58((uint64_t)v3, v10);
  v12 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v13 = *v2;
  v18 = 257;
  v14 = (const void *)sub_21DF1A79C(v12, 48, v11, v13, (uint64_t)v17);
  v15 = v3 + 111;
  if (sub_21DF6C638((uint64_t)v15, v2))
    sub_21DF69C20((uint64_t)v17, v15, v14);
  return v14;
}

void sub_21DF6CBA0()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6CBB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F17C0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6CBE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F17C0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6CC04(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1808;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6CCA8()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6CCBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1808;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6CCF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1808;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6CD0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6CD88()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6CD9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6CDD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_21DF6CDF4(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = v4 + 16;
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v16;
    if (v9 >= v16)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16)
LABEL_12:
    v8 = v6;
  v12 = *(_QWORD *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    v13 = ((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    sub_21DF6C9BC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

void sub_21DF6CEFC()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6CF10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1778;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6CF44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1778;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6CF60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v6 = llvm::ConstantInt::get();
  v12 = 257;
  v7 = sub_21DF19FAC(v4, v5, v6, (uint64_t)v11);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v9 = *(_QWORD *)v2;
  v12 = 257;
  return sub_21DF1A79C(v8, 48, v7, v9, (uint64_t)v11);
}

uint64_t sub_21DF6D028(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Impl;
  uint64_t v13;
  uint64_t v14;
  void *v16[2];
  _QWORD v17[2];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  if (**(_BYTE **)(a3 + 24))
  {
    v16[0] = *(void **)(a3 + 24);
    v17[0] = "_indirect";
    v7 = 771;
  }
  else
  {
    v16[0] = "_indirect";
    v7 = 259;
  }
  v18 = v7;
  llvm::GlobalVariable::GlobalVariable();
  if (*(_QWORD *)(a3 + 40))
    strlen(*(const char **)(a3 + 40));
  llvm::GlobalObject::setSection();
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  v8 = llvm::ValueAsMetadata::get();
  sub_21DF19CD0((uint64_t)v16, v8);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v9 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a2;
    v11 = 24 * v9;
    do
    {
      v10 += 24;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      sub_21DF19CD0((uint64_t)v16, Impl);
      v11 -= 24;
    }
    while (v11);
  }
  v13 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 328);
  v14 = llvm::MDTuple::getImpl();
  sub_21DF19CD0(v13, v14);
  sub_21DF4EB3C((llvm::ValueHandleBase *)a3, v6);
  if (v16[0] != v17)
    free(v16[0]);
  return v6;
}

uint64_t sub_21DF6D278(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = result + 344;
    v9 = 4;
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)a2 + v9);
      if ((_DWORD)v10 != -1)
      {
        v11 = *(_QWORD *)(v8 + *(_QWORD *)(*v6 - 24));
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 168))(v11, a3, v10, 1, v7);
      }
      ++v7;
      v9 += 24;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t sub_21DF6D30C(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v5)
  {
LABEL_12:
    if (v5 < *(_DWORD *)(a1 + 16))
    {
      *(_DWORD *)(a1 + 20) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5) = a2;
      return *(_QWORD *)a1 + 8 * v5;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a2);
  }
  v6 = 0;
  v7 = 8 * v5;
  v3 = *(_QWORD **)(a1 + 8);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2)
      v6 = v3;
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_12;
      *v6 = a2;
      --*(_DWORD *)(a1 + 24);
      return (uint64_t)v6;
    }
  }
  return (uint64_t)v3;
}

uint64_t *sub_21DF6D3D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_21DF6D758()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6D76C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F16E8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6D7A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F16E8;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_21DF6D7BC(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_24E1F16A0;
  v7 = *v3;
  v8 = &v6;
  sub_21DF6C358(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void sub_21DF6D868()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6D87C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F16A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6D8B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F16A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21DF6D8D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;
  int Key;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v14[2];
  char v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  void *v21;
  uint64_t v22;
  _QWORD v23[10];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v16 = v20;
  v17 = v20;
  v18 = 8;
  v19 = 0;
  v4 = *(_QWORD *)(v3 + 8);
  v21 = v23;
  v22 = 0x800000000;
  sub_21DF6DB48((uint64_t)&v21, v4);
  sub_21DF35B3C();
  sub_21DF634A0();
  sub_21DF63508();
  sub_21DF63570();
  for (i = v22; (_DWORD)v22; i = v22)
  {
    v6 = *((_QWORD *)v21 + i - 1);
    LODWORD(v22) = i - 1;
    sub_21DF69C20((uint64_t)v14, &v16, (const void *)v6);
    if (v15)
    {
      sub_21DF6DB48((uint64_t)&v21, *(_QWORD *)(v6 + 8));
      if (v6)
      {
        if (*(_BYTE *)(v6 + 16) == 84)
        {
          v7 = *(_QWORD *)(v6 - 32);
          if (v7)
          {
            if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v6 + 72))
            {
              llvm::Value::getName((llvm::Value *)v7);
              Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)dword_2553B3CE8)
              {
                v9 = llvm::StringMapImpl::FindKey();
                if (v9 == -1 || v9 == (unint64_t)dword_2553B3BF0)
                {
                  v10 = llvm::StringMapImpl::FindKey();
                  if (v10 == -1 || v10 == (unint64_t)dword_2553B3C18)
                  {
                    v11 = llvm::StringMapImpl::FindKey();
                    if (v11 == -1 || v11 == (unint64_t)dword_2553B3C40)
                    {
                      v12 = *(_QWORD *)(a1 + 8);
                      sub_21DF257D0(v14, *(llvm::Constant **)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)));
                      sub_21DF6BD74(v12, v14[0], **(unsigned int **)(a1 + 16));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v21 != v23)
    free(v21);
  if (v17 != v16)
    free(v17);
  return 1;
}

uint64_t sub_21DF6DB48(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v3 + 8);
  }
  if (v2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7++ = *(_QWORD *)(v2 + 24);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(v3 + 8) = v6 + v4;
  return result;
}

void sub_21DF6DBD4()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6DBE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1658;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6DC1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1658;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_21DF6DC38(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_24E1F16A0;
  v7 = *v3;
  v8 = &v6;
  sub_21DF6C358(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

uint64_t sub_21DF6DCE0(uint64_t a1)
{
  return llvm::IntEqClasses::join((llvm::IntEqClasses *)(a1 + 32));
}

uint64_t sub_21DF6DCE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

void sub_21DF6DD58()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6DD6C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F2468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF6DDAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F2468;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***sub_21DF6DDD4(uint64_t (***result)(), llvm::Constant **a2))()
{
  uint64_t (**v2)();
  uint64_t (***v3)();
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = result[1];
  if (*(_BYTE *)v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (uint64_t)v3[2];
    v6 = v3[3];
    v8 = &off_24E1F24B0;
    v9 = *(_OWORD *)v6;
    v10 = &v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)&v8);
    result = v10;
    if (v10 == &v8)
    {
      v7 = 4;
      result = &v8;
    }
    else
    {
      if (!v10)
        return result;
      v7 = 5;
    }
    return (uint64_t (***)())(*result)[v7]();
  }
  else
  {
    *(_BYTE *)v2 = 0;
  }
  return result;
}

void sub_21DF6DE9C()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6DEB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F24B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6DEE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F24B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void *sub_21DF6DF08(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE v15[32];
  __int16 v16;

  v2 = (_QWORD *)*a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
  v6 = llvm::ConstantInt::get();
  v16 = 257;
  v7 = sub_21DF19FAC(v4, v5, v6, (uint64_t)v15);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v9 = llvm::ConstantInt::get();
  v16 = 257;
  v10 = sub_21DF1A864(v8, v7, v9, (uint64_t)v15);
  v11 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v12 = *v2;
  v16 = 257;
  v13 = (const void *)sub_21DF1A79C(v11, 48, v10, v12, (uint64_t)v15);
  if (sub_21DF6C638((uint64_t)(v3 + 111), v2))
    sub_21DF69C20((uint64_t)v15, v3 + 111, v13);
  return v13;
}

void sub_21DF6E04C()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E060(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F23D8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E094(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F23D8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6E0B0(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F2420;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6E154()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E168(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2420;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E19C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2420;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6E1B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6E234()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6E248(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F2390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF6E288(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F2390;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6E2B0(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_24E1F2348;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6E374()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E388(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2348;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E3BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2348;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6E3D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v6 = llvm::ConstantInt::get();
  v12 = 257;
  v7 = sub_21DF19FAC(v4, v5, v6, (uint64_t)v11);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v9 = *(_QWORD *)v2;
  v12 = 257;
  return sub_21DF1A79C(v8, 48, v7, v9, (uint64_t)v11);
}

void sub_21DF6E4A4()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6E4B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F2300;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF6E4F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F2300;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6E520(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_24E1F2348;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6E5E4()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E5F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2270;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E62C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2270;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6E648(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F22B8;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6E6EC()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E700(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F22B8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E734(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F22B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6E750(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6E7CC()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E7E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F21E0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E814(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F21E0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6E830(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F2228;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6E8D4()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6E8E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2228;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6E91C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2228;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6E938(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6E9B4()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6E9C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F19B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6EA00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F19B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6EA20(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v7[0] = &off_24E1F1A00;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6EAE0()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6EAF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1A00;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6EB28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1A00;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6EB44(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int Key;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _DWORD v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[34];

  v20[32] = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  sub_21DF257D0(v17, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  if (v17[1] != v17[0])
    return 0;
  sub_21DF35B3C();
  sub_21DF635D8();
  sub_21DF63508();
  sub_21DF63570();
  sub_21DF634A0();
  v18 = v20;
  v19 = 0x2000000000;
  sub_21DF19CD0((uint64_t)&v18, v2);
  v3 = v19;
  if ((_DWORD)v19)
  {
    while (1)
    {
      v4 = *((_QWORD *)v18 + --v3);
      LODWORD(v19) = v3;
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        break;
LABEL_30:
      if (!v3)
        goto LABEL_31;
    }
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      if (v7 <= 0x1B)
        break;
      if (v7 != 84)
      {
        if (v7 != 77)
          goto LABEL_33;
LABEL_10:
        sub_21DF19CD0((uint64_t)&v18, v6);
        goto LABEL_11;
      }
      v8 = *(_QWORD *)(v6 - 32);
      if (!v8
        || *(_BYTE *)(v8 + 16)
        || *(_QWORD *)(v8 + 24) != *(_QWORD *)(v6 + 72)
        || ((llvm::Value::getName((llvm::Value *)v8), Key = llvm::StringMapImpl::FindKey(), Key == -1)
         || Key == (unint64_t)dword_2553B3CE8)
        && ((v10 = llvm::StringMapImpl::FindKey(), v10 == -1) || v10 == (unint64_t)dword_2553B3C90)
        && ((v11 = llvm::StringMapImpl::FindKey(), v11 == -1) || v11 == (unint64_t)dword_2553B3C18)
        && ((v12 = llvm::StringMapImpl::FindKey(), v12 == -1) || v12 == (unint64_t)dword_2553B3C40)
        && ((v13 = llvm::StringMapImpl::FindKey(), v13 != (unint64_t)dword_2553B3BF0)
          ? (v14 = v13 == -1)
          : (v14 = 1),
            v14))
      {
LABEL_33:
        v15 = 0;
        goto LABEL_34;
      }
LABEL_11:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
      {
        v3 = v19;
        goto LABEL_30;
      }
    }
    if (v7 != 5 || *(_WORD *)(v6 + 18) != 49)
      goto LABEL_33;
    goto LABEL_10;
  }
LABEL_31:
  v15 = 1;
LABEL_34:
  if (v18 != v20)
    free(v18);
  return v15;
}

_QWORD *sub_21DF6EDDC(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_21DF256A4();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

uint64_t sub_21DF6F1B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_21DF6F200()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6F214(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F2198;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6F24C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F2198;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6F26C(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_24E1F2150;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6F330()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6F344(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2150;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6F378(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2150;
  a2[1] = v2;
  return result;
}

BOOL sub_21DF6F394(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v6;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF257D0(&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v4 = sub_21DF6F410(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t *sub_21DF6F410(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void sub_21DF6F4C8()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6F4DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F2108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6F514(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F2108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6F534(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_24E1F2150;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

uint64_t sub_21DF6F5F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t Impl;

  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 328);
  Impl = llvm::MDTuple::getImpl();
  return sub_21DF19CD0(v2, Impl);
}

void sub_21DF6F728()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6F73C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2078;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6F770(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2078;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6F78C(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F20C0;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6F830()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6F844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F20C0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6F878(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F20C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6F894(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6F910()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6F924(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1FE8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6F958(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1FE8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF6F974(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F2030;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF6FA18()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6FA2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F2030;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6FA60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F2030;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6FA7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF6FAF8()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6FB0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1F58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF6FB44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1F58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6FB64(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_24E1F1FA0;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6FC28()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6FC3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1FA0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6FC70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1FA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6FC8C(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  char v10[32];
  __int16 v11;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (_QWORD *)((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = v4[4];
  if (v5)
    v6 = v5 == v4[5] + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v5 - 24;
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v11 = 257;
  sub_21DF19394(v8 + 1, **(llvm::Type ***)(*v4 + 16), (uint64_t)v4, 0, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

void sub_21DF6FD48()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF6FD5C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F1EC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF6FD9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1EC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF6FDC4(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_24E1F1F10;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF6FE88()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF6FE9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1F10;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF6FED0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1F10;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF6FEEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t *v19[3];

  v19[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v6 = llvm::ConstantInt::get();
  v18 = 257;
  v7 = (uint64_t *)sub_21DF19FAC(v4, v5, v6, (uint64_t)v17);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24);
  v9 = (uint64_t *)v3[209];
  v19[0] = (uint64_t *)llvm::ConstantInt::get();
  v19[1] = v7;
  v18 = 257;
  v10 = sub_21DF66DE4(v8, v9, v19, 2, (uint64_t)v17);
  v16 = 257;
  v11 = sub_21DF19394((uint64_t *)(v8 + 8), **(llvm::Type ***)(*(_QWORD *)v10 + 16), v10, 0, (uint64_t)v15);
  v12 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v13 = *(_QWORD *)v2;
  v18 = 257;
  return sub_21DF1A79C(v12, 48, v11, v13, (uint64_t)v17);
}

void sub_21DF70048(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Impl;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  _QWORD v16[2];
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  if (**(_BYTE **)(a3 + 24))
  {
    v15[0] = *(void **)(a3 + 24);
    v16[0] = "_indirect";
    v7 = 771;
  }
  else
  {
    v15[0] = "_indirect";
    v7 = 259;
  }
  v17 = v7;
  llvm::GlobalVariable::GlobalVariable();
  if (*(_QWORD *)(a3 + 40))
    strlen(*(const char **)(a3 + 40));
  llvm::GlobalObject::setSection();
  v15[0] = v16;
  v15[1] = (void *)0x2000000000;
  v8 = llvm::ValueAsMetadata::get();
  sub_21DF19CD0((uint64_t)v15, v8);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v9 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a2;
    v11 = 16 * v9;
    do
    {
      v10 += 16;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      sub_21DF19CD0((uint64_t)v15, Impl);
      v11 -= 16;
    }
    while (v11);
  }
  v13 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 328);
  v14 = llvm::MDTuple::getImpl();
  sub_21DF19CD0(v13, v14);
  sub_21DF4EB3C((llvm::ValueHandleBase *)a3, v6);
  if (v15[0] != v16)
    free(v15[0]);
}

uint64_t sub_21DF70290(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 224);
    v4 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD **)(v2 + 8);
      v6 = &v5[4 * v4];
      v7 = (unsigned __int16)a2 - *(_DWORD *)(v2 + 228);
      do
      {
        v8 = v5[2];
        v9 = v7 / v8;
        v7 %= v8;
        v3 += *(_DWORD *)(*(_QWORD *)v5 + 20) * v9;
        v5 += 4;
      }
      while (v5 != v6);
    }
    return a2 & 0xFFFF0000 | (unsigned __int16)v3;
  }
  return a2;
}

void sub_21DF702F4()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70308(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1E38;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF7033C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1E38;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF70358(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1E80;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF703FC()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70410(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1E80;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF70444(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1E80;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF70460(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF704E0()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF704F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F1DF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF70534(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1DF0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF7055C(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_24E1F1DA8;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF70620()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70634(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1DA8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF70668(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1DA8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF70684(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF3F430((uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8, *a2);
  v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v5 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v6 = llvm::ConstantInt::get();
  v12 = 257;
  v7 = sub_21DF19FAC(v4, v5, v6, (uint64_t)v11);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
  v9 = *(_QWORD *)v2;
  v12 = 257;
  return sub_21DF1A79C(v8, 48, v7, v9, (uint64_t)v11);
}

void sub_21DF70750()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF70764(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24E1F1D60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_21DF707A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1D60;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF707CC(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_24E1F1DA8;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = sub_21DF6C7AC(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF70890()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF708A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1CD0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF708D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1CD0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF708F4(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1D18;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF70998()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF709AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1D18;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF709E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1D18;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF709FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF70A78()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70A8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1C40;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF70AC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1C40;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF70ADC(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1C88;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF70B80()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70B94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1C88;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF70BC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1C88;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF70BE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF70C60()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF70C74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1BF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF70CAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1BF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF70CCC(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_24E1F1BB0;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void sub_21DF70D90()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF70DA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1BB0;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF70DD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1BB0;
  a2[1] = v2;
  return result;
}

BOOL sub_21DF70DF4(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v6;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  sub_21DF257D0(&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v4 = sub_21DF6F410(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

void sub_21DF70E74()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF70E88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24E1F1B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21DF70EC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24E1F1B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_21DF70EE0(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_24E1F1BB0;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = sub_21DF6C358(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

uint64_t sub_21DF70FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF71050(a1, v6);
  v8 = 0;
  sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF71050(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return sub_21DF71190(a1);
  sub_21DF71190(a1);
  if ((_DWORD)v3)
  {
    v9 = (char *)v4 + 24;
    v10 = 48 * v3;
    do
    {
      v11 = *(_QWORD *)v9;
      if ((*(_QWORD *)v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        sub_21DF569CC((llvm::ValueHandleBase *)(v15 + 8), (_QWORD *)v9 - 2);
        v11 = *(_QWORD *)v9;
        *(_QWORD *)(v12 + 32) = *((_QWORD *)v9 + 1);
        *(_DWORD *)(v12 + 40) = *((_DWORD *)v9 + 4);
        ++*(_DWORD *)(a1 + 8);
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 16));
      v9 += 48;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t sub_21DF71190(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1F1578;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t sub_21DF71244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = sub_21DF675B4(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_24E1F1578;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t sub_21DF71320(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  uint64_t v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  int32x2_t *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v14 = v4;
  v19 = 0;
  result = sub_21DF675B4((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if ((_DWORD)result)
    v6 = (uint64_t)v19;
  else
    v6 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  v7 = v14;
  if (*(_QWORD *)v14 + 48 * v14[2].u32[0] != v6)
  {
    v8 = *(_DWORD *)(v6 + 40);
    v20[1] = 0;
    v21 = -8192;
    v19 = &unk_24E1F1578;
    v20[0] = 2;
    v22 = 0;
    sub_21DF569CC((llvm::ValueHandleBase *)(v6 + 8), v20);
    v9 = v21;
    *(_QWORD *)(v6 + 32) = v22;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v14;
    sub_21DF5B518(&v15, a2);
    v15 = &unk_24E1F1578;
    v18 = v10;
    sub_21DF5B820((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    v19 = &unk_24E1F1578;
    v22 = v18;
    v23 = v8;
    v24 = 0;
    result = sub_21DF675B4(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      v11 = sub_21DF70FA0(v10, (uint64_t)&v19, v24);
      result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v11 + 8), v20);
      *(_QWORD *)(v11 + 32) = v22;
      *(_DWORD *)(v11 + 40) = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    if (v17 != -8192 && v17 != -4096 && v17)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
  }
  return result;
}

void sub_21DF7153C()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF71550(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1AD8;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF71584(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1AD8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF715A0(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1B20;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF71644()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF71658(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1B20;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF7168C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1B20;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF716A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

void sub_21DF71724()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF71738(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1A48;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF7176C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1A48;
  a2[1] = v2;
  return result;
}

_QWORD *sub_21DF71788(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_24E1F1A90;
  v6[1] = v3;
  v7 = v6;
  sub_21DF6C358(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21DF7182C()
{
  JUMPOUT(0x2207A7960);
}

_QWORD *sub_21DF71840(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E1F1A90;
  result[1] = v3;
  return result;
}

uint64_t sub_21DF71874(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E1F1A90;
  a2[1] = v2;
  return result;
}

uint64_t sub_21DF71890(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_21DF257D0(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  sub_21DF6BD74(v3, v7, *v5);
  return 1;
}

BOOL sub_21DF71908(char a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  unsigned int v5;

  if (!a1)
    return 0;
  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 61)
  {
    v4 = **(_QWORD **)(a2 - 32);
    v5 = *(_DWORD *)(v4 + 8);
    if ((v5 & 0xFE) == 0x12)
      v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
    if (v5 <= 0xFF)
      return *(_QWORD *)(a2 - 64) == a3;
    return 0;
  }
  return result;
}

BOOL sub_21DF71968(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;
  _BOOL8 result;

  v2 = a2[1];
  if (**(_QWORD **)(*a2 + 16) != *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 176))
  {
    if (v2)
    {
      while (*(_BYTE *)(*(_QWORD *)(v2 + 24) + 16) == 77 && (sub_21DF71968(a1) & 1) != 0)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if (!v2)
    return 1;
  while (1)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 24) + 16);
    result = v4 == 84;
    if (v4 != 84)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 1;
  }
  return result;
}

uint64_t sub_21DF71A00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  float *v23;
  unint64_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  unint64_t v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = a2;
  v9 = v7[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a2;
      if (v9 <= a2)
        v11 = a2 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a2;
    }
    v12 = *(_QWORD **)(*v7 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == a2)
          {
            if (*((_DWORD *)v13 + 4) == a2)
              return v13[3];
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = *(_QWORD **)a1;
  v16 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24);
  v55 = *(_OWORD *)(v16 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 8));
  v57 = *(_DWORD *)(v16 + 104);
  v17 = *(_QWORD *)(v15[20] + 80);
  if (v17)
    v18 = v17 - 24;
  else
    v18 = 0;
  v19 = *(_QWORD *)(v18 + 40);
  if (v19)
    v20 = v19 - 24;
  else
    v20 = 0;
  sub_21DF3F430((uint64_t)v15 + *(_QWORD *)(*v15 - 24) + 8, v20);
  v21 = (unsigned int *)(a3 + 264);
  if (!*(_BYTE *)(a3 + 268))
    v21 = (unsigned int *)&unk_21DFA0EE8;
  v22 = sub_21DF726A8((uint64_t)v15, *(_QWORD *)(a3 + 256), a2, **(_DWORD **)(a1 + 16), *(_DWORD *)(a3 + 248), *v21);
  v23 = *(float **)(a1 + 8);
  v24 = *((_QWORD *)v23 + 1);
  if (v24)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v24 <= v8)
        v3 = v8 % v24;
    }
    else
    {
      v3 = ((_DWORD)v24 - 1) & v8;
    }
    v26 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
    if (v26)
    {
      v13 = (_QWORD *)*v26;
      if (*v26)
      {
        do
        {
          v27 = v13[1];
          if (v27 == v8)
          {
            if (*((_DWORD *)v13 + 4) == a2)
              goto LABEL_98;
          }
          else
          {
            if (v25.u32[0] > 1uLL)
            {
              if (v27 >= v24)
                v27 %= v24;
            }
            else
            {
              v27 &= v24 - 1;
            }
            if (v27 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v8;
  *((_DWORD *)v13 + 4) = a2;
  v13[3] = v22;
  v28 = (float)(unint64_t)(*((_QWORD *)v23 + 3) + 1);
  v29 = v23[8];
  if (!v24 || (float)(v29 * (float)v24) < v28)
  {
    v30 = 1;
    if (v24 >= 3)
      v30 = (v24 & (v24 - 1)) != 0;
    v31 = v30 | (2 * v24);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v24 = *((_QWORD *)v23 + 1);
    }
    if (*(_QWORD *)&prime > v24)
      goto LABEL_54;
    if (*(_QWORD *)&prime < v24)
    {
      v40 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 3) / v23[8]);
      if (v24 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v24)
      {
        v24 = *((_QWORD *)v23 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(_QWORD *)&prime >> 61)
            sub_21DF256A4();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = *(_QWORD **)v23;
          *(_QWORD *)v23 = v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          *((int8x8_t *)v23 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v23 + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*((_QWORD *)v23 + 2);
          if (v37)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v23 + 8 * v38) = v23 + 4;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v23 + 8 * v44))
                  {
                    *(_QWORD *)(*(_QWORD *)v23 + 8 * v44) = v37;
                    goto LABEL_79;
                  }
                  *v37 = *v43;
                  *v43 = **(_QWORD **)(*(_QWORD *)v23 + 8 * v44);
                  **(_QWORD **)(*(_QWORD *)v23 + 8 * v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_79:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v24 = (unint64_t)prime;
          goto LABEL_83;
        }
        v51 = *(_QWORD **)v23;
        *(_QWORD *)v23 = 0;
        if (v51)
          operator delete(v51);
        v24 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
    }
LABEL_83:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v24 <= v8)
        v3 = v8 % v24;
      else
        v3 = v8;
    }
    else
    {
      v3 = ((_DWORD)v24 - 1) & v8;
    }
  }
  v45 = *(_QWORD **)v23;
  v46 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
  if (v46)
  {
    *v13 = *v46;
  }
  else
  {
    v47 = *((_QWORD *)v23 + 2);
    *v13 = v47;
    *((_QWORD *)v23 + 2) = v13;
    v45[v3] = v23 + 4;
    if (!v47)
      goto LABEL_97;
    v48 = *(_QWORD *)(v47 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v48 >= v24)
        v48 %= v24;
    }
    else
    {
      v48 &= v24 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)v23 + 8 * v48);
  }
  *v46 = v13;
LABEL_97:
  ++*((_QWORD *)v23 + 3);
LABEL_98:
  v49 = (char *)v15 + *(_QWORD *)(*v15 - 24);
  v52 = v55;
  v53 = v56;
  if (v56)
    llvm::MetadataTracking::track();
  v54 = v57;
  sub_21DF18F98((uint64_t)&v52, (uint64_t)(v49 + 8));
  if (v53)
    llvm::MetadataTracking::untrack();
  if (v56)
    llvm::MetadataTracking::untrack();
  return v13[3];
}

uint64_t sub_21DF71FA8(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 32;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 5);
  return result;
}

unsigned int *sub_21DF72028(unsigned int *result, unsigned __int16 a2, int a3)
{
  unsigned int v3;

  *result = a2;
  switch(a3)
  {
    case -9:
      v3 = a2 | 0x80000;
      goto LABEL_10;
    case -8:
      v3 = a2 | 0x70000;
      goto LABEL_10;
    case -7:
      v3 = a2 | 0x60000;
      goto LABEL_10;
    case -5:
      v3 = a2 | 0x40000;
      goto LABEL_10;
    case -4:
      v3 = a2 | 0x30000;
      goto LABEL_10;
    case -3:
      v3 = a2 | 0x20000;
      goto LABEL_10;
    case -2:
      v3 = a2 | 0x10000;
      goto LABEL_10;
    case -1:
      return result;
    default:
      v3 = a2 | (a3 << 16) | 0x80000000;
LABEL_10:
      *result = v3;
      return result;
  }
}

uint64_t *sub_21DF7209C(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _OWORD *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x38uLL);
    v9[2] = *(_OWORD *)a3;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a3 + 16);
    return sub_21DF5262C(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t sub_21DF72140(unsigned __int8 **a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  _QWORD **v21;
  _QWORD *j;
  unint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t prime;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _QWORD v50[4];
  __int16 v51;
  void *__p;
  char v53;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (int8x8_t)a1[2];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = v8 & (*(_QWORD *)&v9 - 1);
    }
    v12 = *(_QWORD **)&a1[1][8 * v11];
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == a3)
            return i[5];
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
          }
          else
          {
            v14 &= *(_QWORD *)&v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  llvm::FunctionType::get();
  v15 = (uint64_t)*a1;
  v16 = **a1;
  v49 = a1[4];
  if (v16)
  {
    v50[0] = v15;
    v50[2] = &v49;
    v17 = 2563;
  }
  else
  {
    v50[0] = &v49;
    v17 = 266;
  }
  v51 = v17;
  llvm::Twine::str((llvm::Twine *)v50);
  llvm::Module::getOrInsertFunction();
  v47 = v18;
  if (v53 < 0)
    operator delete(__p);
  v19 = (unint64_t)a1[2];
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v19)
        v3 = v8 % v19;
    }
    else
    {
      v3 = v8 & (v19 - 1);
    }
    v21 = *(_QWORD ***)&a1[1][8 * v3];
    if (v21)
    {
      for (j = *v21; j; j = (_QWORD *)*j)
      {
        v23 = j[1];
        if (v23 == v8)
        {
          if (j[2] == a3)
            goto LABEL_95;
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= v19)
              v23 %= v19;
          }
          else
          {
            v23 &= v19 - 1;
          }
          if (v23 != v3)
            break;
        }
      }
    }
  }
  v24 = a1 + 3;
  j = operator new(0x30uLL);
  *j = 0;
  j[1] = v8;
  j[2] = a3;
  j[3] = 4;
  j[4] = 0;
  j[5] = 0;
  v25 = (float)(unint64_t)(a1[4] + 1);
  v26 = *((float *)a1 + 10);
  if (!v19 || (float)(v26 * (float)v19) < v25)
  {
    v27 = 1;
    if (v19 >= 3)
      v27 = (v19 & (v19 - 1)) != 0;
    v28 = v27 | (2 * v19);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = (int8x8_t)v29;
    else
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v19 = (unint64_t)a1[2];
    }
    if (*(_QWORD *)&prime > v19)
      goto LABEL_51;
    if (*(_QWORD *)&prime < v19)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)a1[4] / *((float *)a1 + 10));
      if (v19 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (*(_QWORD *)&prime <= v37)
        prime = (int8x8_t)v37;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = (unint64_t)a1[2];
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(_QWORD *)&prime >> 61)
            sub_21DF256A4();
          v31 = (unsigned __int8 *)operator new(8 * *(_QWORD *)&prime);
          v32 = a1[1];
          a1[1] = v31;
          if (v32)
            operator delete(v32);
          v33 = 0;
          a1[2] = (unsigned __int8 *)prime;
          do
            *(_QWORD *)&a1[1][8 * v33++] = 0;
          while (*(_QWORD *)&prime != v33);
          v34 = (_QWORD *)*v24;
          if (*v24)
          {
            v35 = v34[1];
            v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&prime)
                v35 %= *(_QWORD *)&prime;
            }
            else
            {
              v35 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)&a1[1][8 * v35] = v24;
            v40 = (_QWORD *)*v34;
            if (*v34)
            {
              do
              {
                v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(_QWORD *)&prime)
                    v41 %= *(_QWORD *)&prime;
                }
                else
                {
                  v41 &= *(_QWORD *)&prime - 1;
                }
                if (v41 != v35)
                {
                  v42 = a1[1];
                  if (!*(_QWORD *)&v42[8 * v41])
                  {
                    *(_QWORD *)&v42[8 * v41] = v34;
                    goto LABEL_76;
                  }
                  *v34 = *v40;
                  *v40 = **(_QWORD **)&a1[1][8 * v41];
                  **(_QWORD **)&a1[1][8 * v41] = v40;
                  v40 = v34;
                }
                v41 = v35;
LABEL_76:
                v34 = v40;
                v40 = (_QWORD *)*v40;
                v35 = v41;
              }
              while (v40);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_80;
        }
        v48 = a1[1];
        a1[1] = 0;
        if (v48)
          operator delete(v48);
        v19 = 0;
        a1[2] = 0;
      }
    }
LABEL_80:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v8 >= v19)
        v3 = v8 % v19;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v19 - 1) & v8;
    }
  }
  v43 = a1[1];
  v44 = *(unsigned __int8 **)&v43[8 * v3];
  if (v44)
  {
    *j = *(_QWORD *)v44;
  }
  else
  {
    *j = *v24;
    *v24 = j;
    *(_QWORD *)&v43[8 * v3] = v24;
    if (!*j)
      goto LABEL_94;
    v45 = *(_QWORD *)(*j + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v45 >= v19)
        v45 %= v19;
    }
    else
    {
      v45 &= v19 - 1;
    }
    v44 = &a1[1][8 * v45];
  }
  *(_QWORD *)v44 = j;
LABEL_94:
  ++a1[4];
LABEL_95:
  sub_21DF4EB3C((llvm::ValueHandleBase *)(j + 3), v47);
  return v47;
}

uint64_t sub_21DF726A8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[2];
  unint64_t v30;
  __int16 v31;

  v12 = *(_DWORD *)(a2 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if ((v12 & 0xFFFFFF00) == 0x300)
  {
    v13 = llvm::User::operator new((llvm::User *)0x58);
    v29[0] = "agc.local_buffer_pointers.";
    v30 = a3;
    v31 = 2051;
    v14 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v14 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
    v31 = 257;
    v16 = sub_21DF19394(v15, **(llvm::Type ***)(*(_QWORD *)v13 + 16), v13, 0, (uint64_t)v29);
    v28 = 257;
    v17 = sub_21DF1A79C((uint64_t)v15, 48, v16, a2, (uint64_t)v27);
  }
  else
  {
    if (a4 == -1)
    {
      LODWORD(v27[0]) = a3;
      v18 = 8;
      v19 = 1;
      v20 = (_QWORD *)v27[0];
    }
    else
    {
      v25[0] = a4;
      v25[2] = ".";
      v26 = 776;
      v27[0] = v25;
      v27[2] = a3;
      v18 = 2;
      v19 = 8;
      v20 = v27;
    }
    LOBYTE(v28) = v18;
    HIBYTE(v28) = v19;
    v29[0] = "agc.buffer_pointers.";
    v30 = (unint64_t)v20;
    LOBYTE(v31) = 3;
    HIBYTE(v31) = v18;
    sub_21DF72028(&v24, a3, a4);
    v13 = sub_21DF66EC0((uint64_t *)a1, a2, (uint64_t)v29, v24, a5);
    v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v31 = 257;
    v17 = sub_21DF19394((uint64_t *)(v21 + 8), **(llvm::Type ***)(*(_QWORD *)v13 + 16), v13, 0, (uint64_t)v29);
    if (a4 == -1)
      ++*(_DWORD *)(a1 + 2280);
  }
  if ((_DWORD)a6 != -1)
  {
    v22 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 168))(v22, v13, a6, 0, 0);
  }
  return v17;
}

int32x2_t sub_21DF72958(int32x2_t *a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD v5[4];

  v5[1] = 0;
  v5[2] = -8192;
  v5[0] = 2;
  v5[3] = 0;
  sub_21DF569CC((llvm::ValueHandleBase *)(a2 + 8), v5);
  *(_QWORD *)(a2 + 32) = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_21DF729C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  llvm::Type **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Type **v28;
  int v30;
  unsigned int v31;
  _BYTE v32[32];
  __int16 v33;

  llvm::StructType::get();
  v6 = *(_QWORD *)(a2 - 64);
  v7 = llvm::PointerType::get();
  v8 = sub_21DF72CB4(a1, v6, v7);
  v9 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v33 = 257;
  v10 = sub_21DF19394(v9 + 1, **(llvm::Type ***)(*(_QWORD *)v8 + 16), v8, 0, (uint64_t)v32);
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)a3;
    v13 = 8 * v11;
    do
    {
      *v12++ = llvm::PointerType::get();
      v13 -= 8;
    }
    while (v13);
  }
  v14 = llvm::PointerType::get();
  sub_21DF19CD0(a3, v14);
  sub_21DF19CD0(a3, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 192));
  llvm::StructType::get();
  v15 = *(_QWORD *)(a2 - 32);
  v16 = llvm::PointerType::get();
  v17 = sub_21DF72CB4(a1, v15, v16);
  v18 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v33 = 257;
  v19 = sub_21DF19394(v18 + 1, **(llvm::Type ***)(*(_QWORD *)v17 + 16), v17, 0, (uint64_t)v32);
  v31 = 0;
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    v20 = 0;
  }
  else
  {
    do
    {
      v21 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v33 = 257;
      v22 = (llvm::Type **)sub_21DF1ACD0(v21, v10, (uint64_t)&v31, 1, (uint64_t)v32);
      v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v33 = 257;
      v24 = sub_21DF1ACD0(v23, v19, (uint64_t)&v31, 1, (uint64_t)v32);
      sub_21DF385B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v22, v24, 0);
      v20 = ++v31;
    }
    while ((unint64_t)*(unsigned int *)(a3 + 8) - 2 > v31);
  }
  v25 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v30 = v20;
  v31 = v20 + 1;
  v33 = 257;
  v26 = sub_21DF1ACD0(v25, v19, (uint64_t)&v30, 1, (uint64_t)v32);
  v27 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v33 = 257;
  v28 = (llvm::Type **)sub_21DF1ACD0(v27, v19, (uint64_t)&v31, 1, (uint64_t)v32);
  return sub_21DF385B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v28, v26, 0);
}

uint64_t sub_21DF72CB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 25);
  v11 = 257;
  v7 = sub_21DF1A79C((uint64_t)(v5 + 8), 47, a2, v6, (uint64_t)v10);
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v11 = 257;
  return sub_21DF1A79C(v8, 48, v7, a3, (uint64_t)v10);
}

uint64_t sub_21DF72D38(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  llvm::Type *v6;
  llvm::Type **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[32];
  __int16 v25;
  unsigned int v26;
  _BYTE v27[32];
  __int16 v28;

  v6 = (llvm::Type *)llvm::StructType::get();
  v7 = (llvm::Type **)llvm::UndefValue::get();
  v8 = sub_21DF7A588((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v6);
  v9 = *(uint64_t **)a3;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *v9++ = llvm::PointerType::get();
      v11 -= 8;
    }
    while (v11);
  }
  llvm::StructType::get();
  v12 = *(a2 - 4);
  v13 = llvm::PointerType::get();
  v14 = sub_21DF72CB4(a1, v12, v13);
  v15 = *(_QWORD *)(*a1 - 24);
  v28 = 257;
  v16 = sub_21DF19394((_QWORD *)((char *)a1 + v15 + 8), **(llvm::Type ***)(*(_QWORD *)v14 + 16), v14, 0, (uint64_t)v27);
  v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    v17 = v16;
    do
    {
      v18 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v28 = 257;
      v19 = sub_21DF1ACD0(v18, v17, (uint64_t)&v26, 1, (uint64_t)v27);
      v20 = *(_QWORD *)(*a1 - 24);
      v21 = (uint64_t)a1 + v20 + 8;
      v28 = 257;
      v22 = sub_21DF19394((_QWORD *)((char *)a1 + v20 + 8), **(llvm::Type ***)(*(_QWORD *)v19 + 16), v19, 0, (uint64_t)v27);
      v25 = 257;
      v7 = (llvm::Type **)sub_21DF1A244(v21, (uint64_t)v7, v22, (uint64_t)&v26, 1, (uint64_t)v24);
      ++v26;
    }
    while (*(_DWORD *)(a3 + 8) > v26);
  }
  sub_21DF385B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v7, v8, 0);
  return sub_21DF72CB4(a1, v8, *a2);
}

uint64_t sub_21DF72F6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = sub_21DF675B4(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_24E1F1528;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t sub_21DF73048(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int32x2_t *v8;
  _QWORD *v9;
  _BYTE v10[16];
  uint64_t v11;
  int32x2_t *v12;
  void *v13;
  _QWORD v14[2];
  uint64_t v15;
  int32x2_t *v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v12 = v4;
  v17 = 0;
  if (sub_21DF675B4((uint64_t)*v4, v4[2].i32[0], v11, &v17))
    v5 = (uint64_t)v17;
  else
    v5 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  result = (uint64_t)v12;
  if (*(_QWORD *)v12 + 48 * v12[2].u32[0] != v5)
  {
    v7 = *(_QWORD *)(v5 + 40);
    sub_21DF72958(v12, v5);
    v8 = v12;
    sub_21DF5B518(&v13, a2);
    v13 = &unk_24E1F1528;
    v16 = v8;
    sub_21DF5B820((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    v17 = &unk_24E1F1528;
    v20 = v16;
    v21 = v7;
    v22 = 0;
    result = sub_21DF675B4((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      v9 = (_QWORD *)sub_21DF73200((uint64_t)v8, (uint64_t)&v17, v22);
      result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    if (v15 != -8192 && v15 != -4096 && v15)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
  }
  return result;
}

uint64_t sub_21DF73200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF732B0(a1, v6);
  v8 = 0;
  sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF732B0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return sub_21DF733F4(a1);
  sub_21DF733F4(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        sub_21DF569CC((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t sub_21DF733F4(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1F1528;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t *sub_21DF734A8(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3CE0 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3CF0) = qword_2553B3CF0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 49, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 48;
  if (a2)
    memcpy((void *)(v8 + 48), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  *i = (uint64_t)v9;
  ++dword_2553B3CEC;
  for (i = (uint64_t *)(qword_2553B3CE0
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3CE0));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_21DF735A8(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3BE8 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3BF8) = qword_2553B3BF8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 25, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 24;
  if (a2)
    memcpy((void *)(v8 + 24), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  *i = (uint64_t)v9;
  ++dword_2553B3BF4;
  for (i = (uint64_t *)(qword_2553B3BE8
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3BE8));
        !*i || *i == -8;
  return i;
}

uint64_t sub_21DF736A8(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  result = llvm::StringMapImpl::LookupBucketFor();
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v8)
  {
    if (v8 != -8)
      return result;
    --*((_DWORD *)a1 + 4);
  }
  v9 = result;
  v10 = MEMORY[0x2207A6DD8](a3 + 9, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 8;
  if (a3)
    memcpy((void *)(v10 + 8), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v7 + 8 * v9) = v11;
  *v11 = a3;
  ++*((_DWORD *)a1 + 3);
  return llvm::StringMapImpl::RehashTable(a1);
}

uint64_t *sub_21DF7376C(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(qword_2553B3CB0 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2553B3CC0) = qword_2553B3CC0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x2207A6DD8](a2 + 33, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 32;
  if (a2)
    memcpy((void *)(v8 + 32), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = a2;
  *i = (uint64_t)v9;
  ++dword_2553B3CBC;
  for (i = (uint64_t *)(qword_2553B3CB0
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2553B3CB0));
        !*i || *i == -8;
  return i;
}

uint64_t sub_21DF73870(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  llvm *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  uint64_t v21;
  uint64_t k;
  uint64_t v24;
  uint64_t m;
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  llvm *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  void *v40;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = a2[1];
  v4 = *(_QWORD *)(a1 + 832);
  if (v4)
  {
    sub_21DF2E824(*(_QWORD **)(v4 + 8));
    MEMORY[0x2207A7960](v4, 0x1020C4062D53EE8);
  }
  v5 = *(void **)(a1 + 2304);
  if (v5 != (void *)(a1 + 2320))
    free(v5);
  sub_21DF5B48C(a1 + 2232);
  v6 = *(unsigned int *)(a1 + 2224);
  v7 = *(llvm **)(a1 + 2208);
  if ((_DWORD)v6)
  {
    v8 = (uint64_t *)((char *)v7 + 24);
    v9 = 48 * v6;
    do
    {
      v10 = *v8;
      if (*v8 != -8192 && v10 != -4096 && v10 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v8 - 2));
      v8 += 6;
      v9 -= 48;
    }
    while (v9);
    v7 = *(llvm **)(a1 + 2208);
    v12 = 48 * *(unsigned int *)(a1 + 2224);
  }
  else
  {
    v12 = 0;
  }
  llvm::deallocate_buffer(v7, (void *)v12);
  sub_21DF2E824(*(_QWORD **)(a1 + 2192));
  v13 = *(char **)(a1 + 2152);
  v14 = *(unsigned int *)(a1 + 2160);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = v13 - 8;
    do
    {
      sub_21DF73B98((uint64_t *)&v16[v15]);
      v15 -= 8;
    }
    while (v15);
    v13 = *(char **)(a1 + 2152);
  }
  if (v13 != (char *)(a1 + 2168))
    free(v13);
  sub_21DF6A0B8(a1 + 2112);
  sub_21DF6A0B8(a1 + 2064);
  sub_21DF6A0B8(a1 + 2016);
  sub_21DF6A0B8(a1 + 1968);
  for (i = 0; i != -72; i -= 24)
  {
    v18 = *(_QWORD *)(a1 + i + 1952);
    if (v18 != -8192 && v18 != -4096 && v18 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + i + 1936));
  }
  for (j = 0; j != -168; j -= 56)
  {
    v21 = *(_QWORD *)(a1 + j + 1840);
    if (v21 != -8192 && v21 != -4096 && v21 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + j + 1824));
  }
  for (k = 0; k != -168; k -= 56)
  {
    v24 = *(_QWORD *)(a1 + k + 1672);
    if (v24 != -8192 && v24 != -4096 && v24 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + k + 1656));
  }
  for (m = 0; m != -560; m -= 56)
  {
    v27 = *(_QWORD *)(a1 + m + 1504);
    if (v27 != -8192 && v27 != -4096 && v27 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + m + 1488));
  }
  v29 = *(void **)(a1 + 896);
  if (v29 != *(void **)(a1 + 888))
    free(v29);
  sub_21DF2E824(*(_QWORD **)(a1 + 872));
  sub_21DF2E824(*(_QWORD **)(a1 + 848));
  v30 = *(void **)(a1 + 808);
  if (v30)
  {
    *(_QWORD *)(a1 + 816) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 784);
  if (v31)
  {
    *(_QWORD *)(a1 + 792) = v31;
    operator delete(v31);
  }
  sub_21DF6726C(*(_QWORD **)(a1 + 768));
  sub_21DF5B48C(a1 + 720);
  sub_21DF678F4(a1 + 696);
  llvm::deallocate_buffer(*(llvm **)(a1 + 696), (void *)(48 * *(unsigned int *)(a1 + 712)));
  sub_21DF5B48C(a1 + 656);
  v32 = *(unsigned int *)(a1 + 648);
  v33 = *(llvm **)(a1 + 632);
  if ((_DWORD)v32)
  {
    v34 = (uint64_t *)((char *)v33 + 24);
    v35 = 48 * v32;
    do
    {
      v36 = *v34;
      if (*v34 != -8192 && v36 != -4096 && v36 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v34 - 2));
      v34 += 6;
      v35 -= 48;
    }
    while (v35);
    v33 = *(llvm **)(a1 + 632);
    v38 = 48 * *(unsigned int *)(a1 + 648);
  }
  else
  {
    v38 = 0;
  }
  llvm::deallocate_buffer(v33, (void *)v38);
  v39 = *(void **)(a1 + 600);
  if (v39 != (void *)(a1 + 616))
    free(v39);
  MEMORY[0x2207A6964](a1 + 168);
  v40 = *(void **)(a1 + 72);
  if (v40 != (void *)(a1 + 88))
    free(v40);
  return a1;
}

uint64_t *sub_21DF73B98(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_21DF73BE4(v1 + 64);
    JUMPOUT(0x2207A7960);
  }
  return result;
}

uint64_t sub_21DF73BE4(uint64_t a1)
{
  char **v2;
  char *v3;
  void *v4;

  v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      sub_21DF2562C(v2 + 4);
      operator delete(v2);
      v2 = (char **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_21DF73C40(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v6;
  unsigned int v8;
  int v9;
  llvm::ArrayType *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  llvm::Type *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int **v27;
  int32x2_t *v28;
  llvm::LLVMContext *v29;
  llvm::Type *v30;
  llvm::LLVMContext *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  int *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Instruction *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned __int8 *v68;
  BOOL v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  BOOL v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  void **v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t *v112;
  uint64_t **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t **v125;
  unint64_t v126;
  int *v128;
  int *v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t **v134;
  uint64_t **v135;
  unsigned int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  int *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm::LLVMContext *v148;
  uint64_t v149;
  llvm::LLVMContext *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  llvm::Instruction *v158;
  uint64_t **v159;
  BOOL v160;
  char *v161;
  _BYTE *v162;
  uint64_t *v163;
  int **v164;
  int **v165;
  uint64_t *v166;
  uint64_t *v167;
  llvm::DataLayout *v168;
  uint64_t *v169;
  char v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  void *__p[2];
  __int128 v180;
  __int128 Int64Ty;
  int v182;
  __int16 v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[32];
  _BYTE *v187;
  uint64_t v188;
  _BYTE v189[32];
  char *v190;
  uint64_t v191;
  _BYTE v192[832];
  _BYTE *v193;
  uint64_t v194;
  _BYTE v195[32];
  void *v196[2];
  _BYTE v197[40];
  __int128 v198;
  uint64_t v199;
  int v200;
  __int16 v201;
  _DWORD *v202;
  uint64_t v203;
  _DWORD v204[12];
  _QWORD v205[3];
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t **v210;
  __int16 v211;
  uint64_t v212;

  v6 = a2;
  v212 = *MEMORY[0x24BDAC8D0];
  v174 = 1;
  v175 = a3;
  v173 = 0;
  v172 = 0;
  v171 = 0;
  v170 = 0;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*a2 + 16) + 8);
  sub_21DF7AE2C(a4, v8 >> 8, &v175, &v174, (unsigned int *)&v173 + 1, &v173, (uint64_t *)&v171, &v172, &v170);
  v9 = v172;
  *(_BYTE *)(a1 + 2384) |= v172;
  if (a5 != -1)
    v175 = a5;
  v166 = v6;
  if (!v170)
  {
    v10 = **(llvm::ArrayType ***)(*v6 + 16);
    if (*((_BYTE *)v10 + 8) != 15)
    {
      v118 = v175;
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 216))(a1, v6, v175, 0xFFFFFFFFLL);
      v119 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
      if (v119)
        v120 = v119 - 24;
      else
        v120 = 0;
      v121 = *(_QWORD *)(v120 + 40);
      if (v121)
        v122 = v121 - 24;
      else
        v122 = 0;
      sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v122);
      sub_21DF726A8(a1, *v6, v118, 0xFFFFFFFF, SHIDWORD(v173), (v9 - 1));
      llvm::Value::replaceAllUsesWith();
      return;
    }
    v11 = v174;
    v12 = llvm::ArrayType::get(v10, (llvm::Type *)v174);
    v13 = v175;
    __p[0] = "agc.buffer_pointers_array.";
    *(_QWORD *)&v180 = v175;
    LOWORD(Int64Ty) = 2051;
    v14 = (uint64_t *)sub_21DF66EC0((uint64_t *)a1, v12, (uint64_t)__p, (unsigned __int16)v175, 0);
    v15 = *(_QWORD *)(a1 + 832);
    if (v15)
    {
      v17 = (uint64_t **)(v15 + 8);
      v16 = *(uint64_t **)(v15 + 8);
      if (v16)
      {
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v16;
            v19 = *((_DWORD *)v16 + 7);
            if (v13 >= v19)
              break;
            v16 = *v18;
            if (!*v18)
            {
              v159 = v18;
LABEL_211:
              v142 = (uint64_t *)v18;
              v18 = (uint64_t **)operator new(0x28uLL);
              *((_DWORD *)v18 + 7) = v13;
              *((_DWORD *)v18 + 8) = 0;
              *v18 = 0;
              v18[1] = 0;
              v18[2] = v142;
              *v159 = (uint64_t *)v18;
              v143 = **(_QWORD **)v15;
              v144 = (uint64_t *)v18;
              if (v143)
              {
                *(_QWORD *)v15 = v143;
                v144 = *v159;
              }
              sub_21DF25404(*v17, v144);
              ++*(_QWORD *)(v15 + 16);
LABEL_214:
              *((_DWORD *)v18 + 8) = v11;
              v145 = v166[1];
              if (v145)
              {
                v146 = a1 + 8;
                do
                {
                  v147 = *(_QWORD *)(v145 + 24);
                  v145 = *(_QWORD *)(v145 + 8);
                  sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v147);
                  if (*(_BYTE *)(v147 + 16) == 60)
                  {
                    v149 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                    v201 = 257;
                    llvm::Type::getInt32Ty(*(llvm::Type **)(v149 + 72), v148);
                    v207 = llvm::ConstantInt::get();
                    llvm::Type::getInt32Ty(*(llvm::Type **)(v149 + 72), v150);
                    v208 = llvm::ConstantInt::get();
                    v151 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)(v149 + 80) + 48))(*(_QWORD *)(v149 + 80), 0, v14, &v207, 2, 0);
                    if (!v151)
                    {
                      LOWORD(Int64Ty) = 257;
                      v151 = sub_21DF1AA2C(0, v14, (uint64_t **)&v207, 2);
                      sub_21DF1A3A4((uint64_t *)(v149 + 8), v151, (uint64_t)&v198);
                    }
                    v152 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    LOWORD(Int64Ty) = 257;
                    sub_21DF19394((uint64_t *)(v146 + v152), **(llvm::Type ***)(*(_QWORD *)v151 + 16), v151, 0, (uint64_t)__p);
                    llvm::Value::replaceAllUsesWith();
                  }
                  else
                  {
                    v198 = 0uLL;
                    *(_QWORD *)&v198 = llvm::ConstantInt::get();
                    *((_QWORD *)&v198 + 1) = *(_QWORD *)(v147 - 32 * (*(_DWORD *)(v147 + 20) & 0x7FFFFFF) + 32);
                    v153 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                    LOWORD(Int64Ty) = 257;
                    v154 = sub_21DF66DE4(v153, v14, (uint64_t **)&v198, 2, (uint64_t)__p);
                    v155 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                    LOWORD(Int64Ty) = 257;
                    sub_21DF19394((uint64_t *)(v146 + v155), **(llvm::Type ***)(*(_QWORD *)v154 + 16), v154, 0, (uint64_t)__p);
                    v156 = *(_QWORD *)(v147 + 8);
                    if (v156)
                    {
                      do
                      {
                        v157 = *(_QWORD *)(v156 + 8);
                        v158 = *(llvm::Instruction **)(v156 + 24);
                        llvm::Value::replaceAllUsesWith();
                        llvm::Instruction::eraseFromParent(v158);
                        v156 = v157;
                      }
                      while (v157);
                    }
                  }
                  llvm::Instruction::eraseFromParent((llvm::Instruction *)v147);
                }
                while (v145);
              }
              return;
            }
          }
          if (v19 >= v13)
            goto LABEL_214;
          v16 = v18[1];
          if (!v16)
          {
            v159 = v18 + 1;
            goto LABEL_211;
          }
        }
      }
    }
    else
    {
      v15 = operator new();
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v17 = (uint64_t **)(v15 + 8);
      *(_QWORD *)v15 = v15 + 8;
      *(_QWORD *)(a1 + 832) = v15;
    }
    v159 = v17;
    v18 = v17;
    goto LABEL_211;
  }
  if ((_DWORD)v173)
    LODWORD(v169) = HIDWORD(v173) / v173;
  else
    LODWORD(v169) = 0;
  v20 = (uint64_t *)v175;
  v21 = v171;
  v22 = **(llvm::Type ***)(*v6 + 16);
  v23 = ((*(_QWORD *)(a1 + 2272) >> v175) & 1) == 0;
  v24 = operator new();
  v25 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336);
  v26 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  *(_BYTE *)v24 = v23;
  v27 = (int **)v24;
  *(_WORD *)(v24 + 1) = 0;
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 8) = v6;
  *(_QWORD *)(v24 + 24) = v25;
  *(_QWORD *)(v24 + 32) = a1 + 168;
  v168 = (llvm::DataLayout *)(a1 + 168);
  *(_DWORD *)(v24 + 40) = (_DWORD)v20;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_DWORD *)(v24 + 96) = 1065353216;
  v28 = sub_21DF21890(v24 + 16, v21, (uint64_t)v22);
  v164 = v27;
  v165 = v27 + 6;
  v27[6] = (int *)v28;
  if (*(_BYTE *)(v26 + 1678))
  {
    v163 = v20;
    LODWORD(v167) = v9;
    v30 = (llvm::Type *)v27[3];
    __p[0] = v28;
    __p[1] = (void *)v26;
    *(_QWORD *)&v180 = v30;
    *((_QWORD *)&v180 + 1) = llvm::Type::getInt32Ty(v30, v29);
    Int64Ty = (unint64_t)llvm::Type::getInt64Ty(v30, v31);
    v182 = 0;
    v183 = *(_WORD *)(v26 + 1645);
    v162 = v186;
    v184 = v186;
    v185 = 0x400000000;
    v187 = v189;
    v188 = 0x400000000;
    v190 = v192;
    v191 = 0x800000000;
    v193 = v195;
    v194 = 0x800000000;
    v196[0] = v197;
    v196[1] = (void *)0x400000000;
    sub_21DF19CD0((uint64_t)v196, 0);
    *(_QWORD *)&v198 = &v199;
    *((_QWORD *)&v198 + 1) = 0x400000000;
    v202 = v204;
    v203 = 0x400000000;
    v204[8] = 0;
    sub_21DF21ED0((uint64_t)&v190, (char *)&v198);
    if (v202 != v204)
      free(v202);
    if ((uint64_t *)v198 != &v199)
      free((void *)v198);
    *((_QWORD *)&Int64Ty + 1) = 0;
    v182 = 0;
    v32 = &v190[104 * v191];
    *((_DWORD *)v32 - 2) = *((_DWORD *)v32 - 24);
    sub_21DF19CD0((uint64_t)(v32 - 104), 0);
    sub_21DF21FC0((uint64_t)__p, (uint64_t)__p[0]);
    v27 = v164;
    v164[7] = *(int **)(*(_QWORD *)&v190[104 * v191 - 104] + 8);
    if (v196[0] != v197)
      free(v196[0]);
    if (v193 != v195)
      free(v193);
    sub_21DF21E74(v190, &v190[104 * v191]);
    v9 = (int)v167;
    if (v190 != v192)
      free(v190);
    v6 = v166;
    LODWORD(v20) = (_DWORD)v163;
    if (v187 != v189)
      free(v187);
    if (v184 != v162)
      free(v184);
  }
  __p[0] = v27;
  v33 = *(unsigned int *)(a1 + 2160);
  v34 = *(_QWORD *)(a1 + 2152);
  v35 = __p;
  if (v33 >= *(_DWORD *)(a1 + 2164))
  {
    v39 = a1 + 2152;
    v160 = v34 + 8 * v33 > (unint64_t)__p;
    if (v34 <= (unint64_t)__p && v160)
      goto LABEL_228;
    sub_21DF76400(a1 + 2152);
    v34 = *(_QWORD *)v39;
    v35 = __p;
  }
  while (1)
  {
    v36 = *(unsigned int *)(a1 + 2160);
    v37 = *v35;
    *v35 = 0;
    *(_QWORD *)(v34 + 8 * v36) = v37;
    *(_DWORD *)(a1 + 2160) = v36 + 1;
    v38 = __p[0];
    __p[0] = 0;
    if (v38)
    {
      sub_21DF73BE4((uint64_t)v38 + 64);
      MEMORY[0x2207A7960](v38, 0x10A0C40DDA12C90);
    }
    v39 = (v9 - 1);
    if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678))
      v22 = (llvm::Type *)v27[7];
    __p[0] = (void *)sub_21DF1B2C4(v168, v22);
    __p[1] = v40;
    v41 = (_DWORD)v169 * llvm::TypeSize::operator unsigned long long();
    v42 = llvm::PointerType::get();
    v27[13] = (int *)sub_21DF726A8(a1, v42, v20, 0xFFFFFFFF, v41, (v9 - 1));
    v27[14] = v43;
    v44 = v6;
    v45 = **(_QWORD **)(*v6 + 16);
    v180 = 0u;
    Int64Ty = 0u;
    *(_OWORD *)__p = 0u;
    v46 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v176 = *(_OWORD *)(v46 + 56);
    v163 = &v177;
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v46 + 8));
    v178 = *(_DWORD *)(v46 + 104);
    v47 = v44[1];
    if (v47)
    {
      v168 = (llvm::DataLayout *)(a1 + 192);
      v39 = 257;
      do
      {
        v48 = *(unsigned __int8 **)(v47 + 24);
        v47 = *(_QWORD *)(v47 + 8);
        if (*(_BYTE *)(*(_QWORD *)v48 + 8) == 15)
        {
          v49 = v48[16];
          if (v49 == 77)
          {
            v50 = 0;
            if (v45)
            {
              v51 = **(_QWORD **)(*(_QWORD *)v48 + 16);
              if (v45 != v51)
              {
                v50 = 0;
                v52 = v45;
                do
                {
                  v52 = **(_QWORD **)(v52 + 16);
                  if ((*(_DWORD *)(v52 + 8) & 0xFE) == 0x10)
                    v53 = v52;
                  else
                    v53 = 0;
                  ++v50;
                  if (v53)
                    v54 = v53 == v51;
                  else
                    v54 = 1;
                }
                while (!v54);
              }
            }
            v55 = (v50 + 1);
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v48);
            v56 = llvm::ConstantInt::get();
            *(_QWORD *)&v198 = &v199;
            *((_QWORD *)&v198 + 1) = 0x400000000;
            sub_21DF75C48((uint64_t)&v198, v55, v56);
            v57 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v211 = 257;
            v58 = sub_21DF66DE4(v57, v166, (uint64_t **)v198, DWORD2(v198), (uint64_t)&v207);
            v59 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v60 = *(_QWORD *)v48;
            v211 = 257;
            v61 = (llvm::Instruction *)sub_21DF1A79C(v59, 49, v58, v60, (uint64_t)&v207);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v48);
            if (v61 && *((_BYTE *)v61 + 16) == 77)
            {
              sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v61);
              sub_21DF75CF8((_QWORD *)a1, v61);
            }
            if ((uint64_t *)v198 != &v199)
              free((void *)v198);
          }
          else
          {
            if (v49 == 62)
              v62 = v48;
            else
              v62 = 0;
            *(_QWORD *)&v198 = v62;
            if (v62)
              sub_21DF75E38(__p, &v198);
          }
        }
      }
      while (v47);
      v63 = *((_QWORD *)&Int64Ty + 1);
      if (*((_QWORD *)&Int64Ty + 1))
      {
        v64 = &v199;
        v9 = 257;
        v167 = &v199;
        while (1)
        {
          v65 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)Int64Ty >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (Int64Ty & 0x1FF));
          *(_QWORD *)&Int64Ty = Int64Ty + 1;
          *((_QWORD *)&Int64Ty + 1) = v63 - 1;
          if ((unint64_t)Int64Ty >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&Int64Ty = Int64Ty - 512;
          }
          v66 = *(_QWORD *)(v65 + 8);
          if (v66)
          {
            v20 = (uint64_t *)(v65 + 32);
            v169 = (uint64_t *)(v65 + 32);
            do
            {
              v39 = *(_QWORD *)(v66 + 24);
              v66 = *(_QWORD *)(v66 + 8);
              v67 = *(unsigned __int8 *)(v39 + 16);
              if (v39 && v67 == 62)
              {
                v68 = *(unsigned __int8 **)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) + 32);
                if (v68)
                  v69 = v68[16] > 0x14u;
                else
                  v69 = 1;
                if (!v69)
                {
                  if (llvm::Constant::isZeroValue((llvm::Constant *)v68))
                  {
                    v70 = (char *)&v20[-4 * (*(_DWORD *)(v65 + 20) & 0x7FFFFFF)];
                    *(_QWORD *)&v198 = v64;
                    *((_QWORD *)&v198 + 1) = 0x400000000;
                    sub_21DF71FA8((uint64_t)&v198, v70, (char *)v65);
                    sub_21DF71FA8((uint64_t)&v198, (char *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) + 64), (char *)v39);
                    sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v39);
                    v71 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                    v72 = *(uint64_t **)(v65 - 32 * (*(_DWORD *)(v65 + 20) & 0x7FFFFFF));
                    v211 = 257;
                    v207 = sub_21DF66DE4(v71, v72, (uint64_t **)v198, DWORD2(v198), (uint64_t)&v207);
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v39);
                    sub_21DF75E38(__p, &v207);
                    if ((uint64_t *)v198 != v64)
                      free((void *)v198);
                  }
                }
              }
              else if (v39 && v67 == 77)
              {
                v73 = **(_QWORD **)(**(_QWORD **)(v39 - 32) + 16);
                if ((*(_DWORD *)(v73 + 8) & 0xFE) != 0x10)
                  goto LABEL_120;
                v74 = **(_QWORD **)(*(_QWORD *)v39 + 16);
                if (v73 == v74)
                  goto LABEL_120;
                LODWORD(v75) = 0;
                v76 = 1;
                do
                {
                  v77 = v76;
                  v73 = **(_QWORD **)(v73 + 16);
                  if ((*(_DWORD *)(v73 + 8) & 0xFE) == 0x10)
                    v78 = v73;
                  else
                    v78 = 0;
                  v75 = (v75 + 1);
                  ++v76;
                  if (v78)
                    v79 = v78 == v74;
                  else
                    v79 = 1;
                }
                while (!v79);
                if ((_DWORD)v75)
                {
                  v80 = (char *)&v20[-4 * (*(_DWORD *)(v65 + 20) & 0x7FFFFFF)];
                  *(_QWORD *)&v198 = v64;
                  *((_QWORD *)&v198 + 1) = 0x400000000;
                  sub_21DF71FA8((uint64_t)&v198, v80, (char *)v65);
                  v81 = v198 + 8 * DWORD2(v198);
                  v82 = llvm::ConstantInt::get();
                  v83 = v198;
                  v84 = DWORD2(v198);
                  v85 = DWORD2(v198) + (unint64_t)v75;
                  if ((_QWORD)v198 + 8 * DWORD2(v198) == v81)
                  {
                    if (v85 > HIDWORD(v198))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v84 = DWORD2(v198);
                      v83 = v198;
                    }
                    v95 = (uint64_t *)(v83 + 8 * v84);
                    v96 = v75;
                    do
                    {
                      *v95++ = v82;
                      --v96;
                    }
                    while (v96);
                    DWORD2(v198) = v84 + v75;
                  }
                  else
                  {
                    v86 = v198;
                    if (v85 > HIDWORD(v198))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v86 = v198;
                      v84 = DWORD2(v198);
                    }
                    v87 = (v81 - v83) >> 3;
                    v88 = (uint64_t *)(v86 + 8 * v87);
                    v89 = (uint64_t *)(v86 + 8 * v84);
                    v90 = (char *)v89 - (char *)v88;
                    if (v75 <= v89 - v88)
                    {
                      sub_21DF76380((uint64_t)&v198, (char *)&v89[-v75], (char *)(v86 + 8 * v84));
                      if (&v89[-v75] != v88)
                        memmove(&v88[v75], v88, (char *)&v89[-v75] - (char *)v88);
                      do
                      {
                        *v88++ = v82;
                        --v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      v91 = v90 >> 3;
                      DWORD2(v198) = v84 + v75;
                      if (v87 != v84)
                      {
                        memcpy((void *)(v86 + 8 * (v84 + v75) - 8 * v91), (const void *)(v86 + 8 * v87), v90);
                        v92 = v91;
                        do
                        {
                          *v88++ = v82;
                          --v92;
                        }
                        while (v92);
                      }
                      if (v75 != v91)
                      {
                        v93 = v91 - v77;
                        do
                          *v89++ = v82;
                        while (!__CFADD__(v93++, 1));
                      }
                    }
                  }
                  sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v39);
                  v97 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                  v98 = *(uint64_t **)(v65 - 32 * (*(_DWORD *)(v65 + 20) & 0x7FFFFFF));
                  v9 = 257;
                  v211 = 257;
                  v99 = sub_21DF66DE4(v97, v98, (uint64_t **)v198, DWORD2(v198), (uint64_t)&v207);
                  v100 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                  v101 = *(_QWORD *)v39;
                  v211 = 257;
                  v102 = sub_21DF1A79C(v100, 49, v99, v101, (uint64_t)&v207);
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent((llvm::Instruction *)v39);
                  if (*(_BYTE *)(v102 + 16) == 77)
                    v39 = v102;
                  else
                    v39 = 0;
                  v64 = v167;
                  if ((uint64_t *)v198 != v167)
                    free((void *)v198);
                  v20 = v169;
                }
                if (v39)
                {
LABEL_120:
                  sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v39);
                  sub_21DF75CF8((_QWORD *)a1, (llvm::Instruction *)v39);
                }
              }
            }
            while (v66);
          }
          v206 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions();
          v103 = v206;
          if (v206 == v205)
            break;
          if (v206)
          {
            v104 = 5;
LABEL_126:
            (*(void (**)(void))(*v103 + 8 * v104))();
          }
          v63 = *((_QWORD *)&Int64Ty + 1);
          if (!*((_QWORD *)&Int64Ty + 1))
            goto LABEL_128;
        }
        v103 = v205;
        v104 = 4;
        goto LABEL_126;
      }
    }
LABEL_128:
    v105 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v198 = v176;
    v199 = v177;
    if (v177)
      llvm::MetadataTracking::track();
    v200 = v178;
    sub_21DF18F98((uint64_t)&v198, v105 + 8);
    if (v199)
      llvm::MetadataTracking::untrack();
    if (v177)
      llvm::MetadataTracking::untrack();
    v106 = (void **)__p[1];
    v107 = (void **)v180;
    *((_QWORD *)&Int64Ty + 1) = 0;
    v108 = v180 - (unint64_t)__p[1];
    if ((unint64_t)v180 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v106);
        v107 = (void **)v180;
        v106 = (void **)((char *)__p[1] + 8);
        __p[1] = v106;
        v108 = v180 - (_QWORD)v106;
      }
      while ((_QWORD)v180 - (_QWORD)v106 > 0x10uLL);
    }
    v109 = v108 >> 3;
    if (v109 == 1)
    {
      v110 = 256;
      goto LABEL_140;
    }
    if (v109 == 2)
    {
      v110 = 512;
LABEL_140:
      *(_QWORD *)&Int64Ty = v110;
    }
    if (v106 != v107)
    {
      do
      {
        v111 = *v106++;
        operator delete(v111);
      }
      while (v106 != v107);
      if ((void *)v180 != __p[1])
        *(_QWORD *)&v180 = v180 + (((unint64_t)__p[1] - v180 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    v27 = *(int ***)a1;
    v112 = v166;
    if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678))
      break;
    v22 = (llvm::Type *)&v198;
    v6 = &v199;
    *(_QWORD *)&v198 = &v199;
    *((_QWORD *)&v198 + 1) = 0x800000000;
    __p[0] = &v180;
    __p[1] = (void *)0x800000000;
    v205[0] = *v165;
    v113 = (uint64_t **)operator new(0x30uLL);
    *v113 = (uint64_t *)&off_24E1F1610;
    v113[1] = (uint64_t *)&v198;
    v113[2] = (uint64_t *)a1;
    v113[3] = &v207;
    v113[4] = v205;
    v113[5] = (uint64_t *)__p;
    v210 = v113;
    v114 = llvm::ConstantInt::get();
    sub_21DF19CD0((uint64_t)&v198, v114);
    *(_QWORD *)&v176 = v205[0];
    if (v210)
    {
      ((void (*)(uint64_t **, __int128 *))(*v210)[6])(v210, &v176);
      if (LODWORD(__p[1]))
      {
        v115 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v115 + 176))(v115, v164[14], __p);
      }
      v116 = (uint64_t *)v210;
      if (v210 == (uint64_t **)&v207)
      {
        v117 = 4;
        v116 = &v207;
      }
      else
      {
        if (!v210)
          goto LABEL_164;
        v117 = 5;
      }
      (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_164:
      if (__p[0] != &v180)
        free(__p[0]);
      if ((uint64_t *)v198 != &v199)
        free((void *)v198);
      v123 = *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1678);
      LOBYTE(v205[0]) = 0;
      v112 = v166;
      if (v123)
        goto LABEL_169;
      goto LABEL_207;
    }
    sub_21DF6C9F8();
LABEL_228:
    v161 = (char *)__p - v34;
    sub_21DF76400(v39);
    v34 = *(_QWORD *)v39;
    v35 = (void **)&v161[*(_QWORD *)v39];
  }
  LOBYTE(v205[0]) = 0;
LABEL_169:
  v124 = v112[1];
  if (!v124)
    goto LABEL_207;
  LODWORD(v169) = 0;
  v125 = (uint64_t **)(a1 + 2192);
  do
  {
    v126 = *(_QWORD *)(v124 + 24);
    v124 = *(_QWORD *)(v124 + 8);
    if (!sub_21DF71908(*(_BYTE *)(a1 + 37), v126, (uint64_t)v112))
    {
      v207 = 4;
      v208 = 0;
      v209 = v126;
      if (v126 != -8192 && v126 != -4096 && v126 != 0)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v207);
        v126 = v209;
      }
      *(_QWORD *)&v176 = 0;
      v128 = sub_21DF256B0(*v165, v126, (unint64_t *)&v176, (char *)__p);
      if ((*v128 & 0xFFFFFFFC) == 4)
        v129 = v128;
      else
        v129 = 0;
      v130 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v198 = *(_OWORD *)(v130 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v130 + 8));
      v200 = *(_DWORD *)(v130 + 104);
      v131 = *v129;
      if (*v129 == 7 || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)v126 + 16) + 8) == 15)
      {
        __p[0] = &v180;
        __p[1] = (void *)0x400000000;
        if (sub_21DF75078(a1, (uint64_t)v129, v126, (uint64_t)__p, v131 == 7, v205))
        {
          v132 = *((_DWORD *)v112 + 8);
          v133 = *v125;
          v134 = (uint64_t **)(a1 + 2192);
          v135 = (uint64_t **)(a1 + 2192);
          if (*v125)
          {
            while (1)
            {
              while (1)
              {
                v135 = (uint64_t **)v133;
                v136 = *((_DWORD *)v133 + 8);
                if (v132 >= v136)
                  break;
                v133 = *v135;
                v134 = v135;
                if (!*v135)
                  goto LABEL_191;
              }
              if (v136 >= v132)
                break;
              v133 = v135[1];
              if (!v133)
              {
                v134 = v135 + 1;
                goto LABEL_191;
              }
            }
          }
          else
          {
LABEL_191:
            v137 = (uint64_t *)v135;
            v135 = (uint64_t **)operator new(0x30uLL);
            *((_DWORD *)v135 + 8) = v132;
            v135[5] = 0;
            *v135 = 0;
            v135[1] = 0;
            v135[2] = v137;
            *v134 = (uint64_t *)v135;
            v138 = **(_QWORD **)(a1 + 2184);
            v139 = (uint64_t *)v135;
            if (v138)
            {
              *(_QWORD *)(a1 + 2184) = v138;
              v139 = *v134;
            }
            sub_21DF25404(*(uint64_t **)(a1 + 2192), v139);
            ++*(_QWORD *)(a1 + 2200);
            v112 = v166;
          }
          v135[5] = (uint64_t *)v164;
          v140 = (int)v169;
          if (v131 != 7)
            v140 = 1;
          LODWORD(v169) = v140;
        }
        if (__p[0] != &v180)
          free(__p[0]);
      }
      if (v199)
        llvm::MetadataTracking::untrack();
      if (v209 != -8192 && v209 != -4096)
      {
        if (v209)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v207);
      }
    }
  }
  while (v124);
  if ((v169 & 1) != 0)
  {
    *((_BYTE *)v164 + 1) = 1;
    *((_BYTE *)v164 + 2) = v205[0];
  }
  else
  {
LABEL_207:
    v141 = *v165;
    *(_DWORD *)(a1 + 2300) += (*v165)[17];
    *(int32x2_t *)(a1 + 2292) = vadd_s32(*(int32x2_t *)(a1 + 2292), vrev64_s32(*(int32x2_t *)(v141 + 15)));
  }
}

uint64_t sub_21DF75078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  _BYTE *v20;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t result;
  uint64_t v27;

  v12 = *(_QWORD **)a4;
  v13 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = *(_QWORD **)a4;
    while (*v15 != a3)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
      {
        v15 = &v12[v13];
        break;
      }
    }
  }
  else
  {
    v15 = *(_QWORD **)a4;
  }
  if (v13 != v15 - v12)
    return 0;
  sub_21DF19CD0(a4, a3);
  v16 = *(_QWORD *)(a3 + 8);
  if (!v16)
  {
LABEL_41:
    result = 0;
    goto LABEL_42;
  }
  v17 = 0;
  v27 = a1 + 2208;
  do
  {
    v18 = *(unsigned __int8 **)(v16 + 24);
    v19 = v18[16];
    if (v18 && v19 == 61)
    {
      v20 = (_BYTE *)*((_QWORD *)v18 - 8);
      if (*(_BYTE *)(*(_QWORD *)v20 + 8) != 15 && (a5 & 1) == 0 && v20[16] != 75)
      {
        LOBYTE(v19) = 61;
LABEL_28:
        v22 = (((v19 - 75) >> 1) | (((_BYTE)v19 - 75) << 7));
        v23 = v22 > 5;
        v24 = (1 << v22) & 0x33;
        if (v23 || v24 == 0)
          *a6 |= a5 ^ 1;
        else
          v17 = sub_21DF75078(a1, a2, v18, a4, a5, a6);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v18 || v19 != 60)
        goto LABEL_28;
      if (*(_BYTE *)(*(_QWORD *)v18 + 8) != 15 && (_DWORD)a5 == 0)
      {
        LOBYTE(v19) = 60;
        goto LABEL_28;
      }
      if ((sub_21DF75078(a1, a2, *(_QWORD *)(v16 + 24), a4, a5, a6) & 1) == 0)
      {
        LOBYTE(v19) = v18[16];
        goto LABEL_28;
      }
    }
    if ((a5 & 1) == 0)
      *sub_21DF75294(v27, (uint64_t)v18) = a2;
    v17 = 1;
LABEL_33:
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16);
  if ((v17 & 1) == 0)
    goto LABEL_41;
  if (*(_BYTE *)(a3 + 16) == 62)
    *sub_21DF75294(v27, a3) = a2;
  result = 1;
LABEL_42:
  --*(_DWORD *)(a4 + 8);
  return result;
}

_QWORD *sub_21DF75294(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_21DF5B518(&v7, a2);
  v7 = &unk_24E1F1528;
  v10 = a1;
  v11 = 0;
  v3 = sub_21DF675B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)sub_21DF73200(a1, (uint64_t)&v7, (uint64_t)v11);
    sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

void sub_21DF7534C()
{
  JUMPOUT(0x2207A7960);
}

__n128 sub_21DF75360(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24E1F1610;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_21DF753A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24E1F1610;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21DF753D8(uint64_t *a1, int **a2)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t IndexedOffsetInType;
  void **v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  __int128 v32;
  void *__p[2];
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = **a2;
  if ((v4 - 3) < 0xFFFFFFFE)
  {
    switch(v4)
    {
      case 0:
        v5 = a1[1];
        v6 = llvm::ConstantInt::get();
        sub_21DF19CD0(v5, v6);
        v7 = a1[3];
        v35 = (_BYTE *)*((_QWORD *)v3 + 1);
        v8 = *(_QWORD *)(v7 + 24);
        if (!v8)
          goto LABEL_56;
        (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v8 + 48))(v8, &v35);
        goto LABEL_11;
      case 3:
        sub_21DF19CD0(a1[1], 0);
        if (!v3[4])
          goto LABEL_11;
        v13 = 0;
        while (1)
        {
          *(_QWORD *)(*(_QWORD *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
          v14 = a1[3];
          v35 = (_BYTE *)*((_QWORD *)v3 + 1);
          v15 = *(_QWORD *)(v14 + 24);
          if (!v15)
            goto LABEL_56;
          (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v15 + 48))(v15, &v35);
          if (++v13 >= (unint64_t)v3[4])
            goto LABEL_11;
        }
      case 4:
        v16 = llvm::DataLayout::getIndexedOffsetInType() << 32;
        if (*((_BYTE *)v3 + 268))
        {
          v16 |= v3[66];
          sub_21DF6DCE8(a1[5], v16, 8);
        }
        v17 = *((_QWORD *)v3 + 30);
        if (!v17)
        {
          v31 = 0;
          v32 = 0u;
          *(_OWORD *)__p = 0u;
          v34 = 1065353216;
          goto LABEL_54;
        }
        v40 = v42;
        v41 = 0x800000000;
        v35 = v39;
        v36 = v39;
        v37 = 8;
        v38 = 0;
        v32 = 0u;
        *(_OWORD *)__p = 0u;
        v34 = 1065353216;
        sub_21DF19CD0((uint64_t)&v40, v17);
        v18 = v41;
        if (!(_DWORD)v41)
          goto LABEL_44;
        break;
      case 5:
        if (*((_BYTE *)v3 + 244))
        {
          v26 = v3[60];
          IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType();
          sub_21DF6DCE8(a1[5], v26 | (IndexedOffsetInType << 32), 8);
        }
        return;
      default:
        return;
    }
    while (1)
    {
      v19 = (int *)*((_QWORD *)v40 + v18 - 1);
      LODWORD(v41) = v18 - 1;
      v20 = *v19;
      if (*v19 != 2)
        goto LABEL_25;
      sub_21DF6D30C((uint64_t)&v35, v19);
      if (v21)
        break;
LABEL_38:
      v18 = v41;
      if (!(_DWORD)v41)
      {
LABEL_44:
        if (v36 != v35)
          free(v36);
        if (v40 != v42)
          free(v40);
        v28 = (void **)__p[0];
        if (__p[0])
        {
          do
          {
            v16 = v16 & 0xFFFFFFFF00000000 | *((unsigned int *)v28 + 4);
            sub_21DF6DCE8(a1[5], v16, 0x100000008);
            v28 = (void **)*v28;
          }
          while (v28);
          v29 = __p[0];
          if (__p[0])
          {
            do
            {
              v30 = (_QWORD *)*v29;
              operator delete(v29);
              v29 = v30;
            }
            while (v30);
          }
        }
        v31 = (void *)v32;
LABEL_54:
        *(_QWORD *)&v32 = 0;
        if (v31)
          operator delete(v31);
        return;
      }
    }
    v20 = *v19;
LABEL_25:
    if ((v20 - 3) >= 0xFFFFFFFE)
    {
      v23 = v19[4];
      if ((_DWORD)v23)
      {
        v24 = (uint64_t *)*((_QWORD *)v19 + 1);
        v25 = 8 * v23;
        do
        {
          if (*v24)
            sub_21DF19CD0((uint64_t)&v40, *v24);
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
    }
    else
    {
      switch(v20)
      {
        case 0:
        case 3:
          v22 = *((_QWORD *)v19 + 1);
          goto LABEL_37;
        case 4:
          if (*((_BYTE *)v19 + 268))
            sub_21DF75880((float *)&v32, v19[66], v19[66]);
          v22 = *((_QWORD *)v19 + 30);
          if (v22)
LABEL_37:
            sub_21DF19CD0((uint64_t)&v40, v22);
          break;
        case 5:
          if (*((_BYTE *)v19 + 244))
            sub_21DF75880((float *)&v32, v19[60], v19[60]);
          break;
        default:
          goto LABEL_38;
      }
    }
    goto LABEL_38;
  }
  sub_21DF19CD0(a1[1], 0);
  v9 = v3[4];
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      if (*(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * i))
      {
        *(_QWORD *)(*(_QWORD *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
        v11 = a1[3];
        v35 = *(_BYTE **)(*((_QWORD *)v3 + 1) + 8 * i);
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
LABEL_56:
          sub_21DF6C9F8();
        (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v12 + 48))(v12, &v35);
        v9 = v3[4];
      }
    }
  }
LABEL_11:
  --*(_DWORD *)(a1[1] + 8);
}

void sub_21DF75880(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_21DF256A4();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  v32 = *((_QWORD *)a1 + 2);
  *v12 = v32;
  *((_QWORD *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

uint64_t sub_21DF75C48(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v5 = result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v8 = *(unsigned int *)(result + 8);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *(unsigned int *)(result + 8);
    if (v9)
    {
      v10 = *(_QWORD **)result;
      do
      {
        *v10++ = a3;
        --v9;
      }
      while (v9);
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * v8);
      do
        *v12++ = a3;
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_QWORD **)v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

_QWORD *sub_21DF75CF8(_QWORD *result, llvm::Instruction *this)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  __int16 v14;

  v3 = result;
  v4 = **(_QWORD **)(*(_QWORD *)this + 16);
  if (*(_BYTE *)(v4 + 8) == 15
    || (result = (_QWORD *)llvm::Type::isIntegerTy(**(llvm::Type ***)(*(_QWORD *)this + 16)), (_DWORD)result))
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5)
      return (_QWORD *)llvm::Instruction::eraseFromParent(this);
    v6 = 0;
    v7 = *((_QWORD *)this - 4);
    do
    {
      v8 = *(llvm::Instruction **)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
      if (v8 && *((_BYTE *)v8 + 16) == 60)
      {
        if (!v6)
        {
          v9 = *(_QWORD *)(*v3 - 24);
          v14 = 257;
          v10 = sub_21DF19394((_QWORD *)((char *)v3 + v9 + 8), **(llvm::Type ***)(*(_QWORD *)v7 + 16), v7, 0, (uint64_t)v13);
          v11 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
          if (*(_BYTE *)(v4 + 8) == 15)
          {
            v14 = 257;
            v12 = 49;
          }
          else
          {
            v14 = 257;
            v12 = 47;
          }
          v6 = sub_21DF1A79C(v11, v12, v10, v4, (uint64_t)v13);
        }
        llvm::Value::replaceAllUsesWith();
        result = (_QWORD *)llvm::Instruction::eraseFromParent(v8);
      }
    }
    while (v5);
    if (!*((_QWORD *)this + 1))
      return (_QWORD *)llvm::Instruction::eraseFromParent(this);
  }
  return result;
}

void sub_21DF75E38(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)sub_21DF527B8(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)sub_21DF527B8(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v64[-*a1] >> 2;
            v99 = (char *)sub_21DF527B8(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v64 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)sub_21DF527B8(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v111 = v35;
    *(_QWORD *)&v35 = v34;
    *((_QWORD *)&v35 + 1) = &v31[8 * v32];
    v108 = v35;
    v36 = operator new(0x1000uLL);
    if (v24 == v33)
    {
      v37 = 8 * v24;
      if (v6 >= 1)
      {
        v38 = v37 >> 3;
        if (v38 >= -1)
          v39 = v38 + 1;
        else
          v39 = v38 + 2;
        v34 -= 8 * (v39 >> 1);
        *((_QWORD *)&v40 + 1) = *((_QWORD *)&v108 + 1);
        *(_QWORD *)&v41 = v111;
        *(_QWORD *)&v40 = v34;
        *((_QWORD *)&v41 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v37 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)sub_21DF527B8(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v41 = v76;
      *((_QWORD *)&v41 + 1) = v34;
      *(_QWORD *)&v40 = v34;
      *((_QWORD *)&v40 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v108 = v40;
      v111 = v41;
      operator delete(v31);
    }
    v40 = v108;
    v41 = v111;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v40 = v40 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      {
        v81 = (_BYTE *)v40;
        if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
        {
          if (*((_QWORD *)&v40 + 1) == *((_QWORD *)&v41 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v40 + 1) - *((_QWORD *)&v41 + 1)) >> 2;
          v87 = 2 * v86;
          v88 = (char *)sub_21DF527B8(v86);
          v80 = &v88[(v87 + 6) & 0xFFFFFFFFFFFFFFF8];
          v90 = v80;
          v91 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v90 = &v80[v91 & 0xFFFFFFFFFFFFFFF8];
            v92 = 8 * (v91 >> 3);
            v93 = v80;
            v94 = v79;
            do
            {
              v95 = *v94++;
              *(_QWORD *)v93 = v95;
              v93 += 8;
              v92 -= 8;
            }
            while (v92);
          }
          *(_QWORD *)&v41 = v88;
          *((_QWORD *)&v41 + 1) = v80;
          *(_QWORD *)&v40 = v90;
          *((_QWORD *)&v40 + 1) = &v88[8 * v89];
          if (v79)
          {
            v109 = v40;
            v113 = v41;
            operator delete(v79);
            v40 = v109;
            v41 = v113;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v40 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v40 - *((_QWORD *)&v41 + 1)));
          if ((_QWORD)v40 == *((_QWORD *)&v41 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v41 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v40 + 1);
            v112 = v41;
            memmove((void *)(v85 - (v40 - *((_QWORD *)&v41 + 1))), *((const void **)&v41 + 1), v40 - *((_QWORD *)&v41 + 1));
            *((_QWORD *)&v40 + 1) = v110;
            *(_QWORD *)&v41 = v112;
          }
          *((_QWORD *)&v41 + 1) = v80;
          *(_QWORD *)&v40 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v41 + 1);
      }
      v96 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v96;
      *((_QWORD *)&v41 + 1) -= 8;
    }
    v97 = (char *)*a1;
    *(_OWORD *)a1 = v41;
    *((_OWORD *)a1 + 1) = v40;
    if (v97)
      operator delete(v97);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

uint64_t sub_21DF76380(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

void sub_21DF76400(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = 8 * v4;
    v7 = (_QWORD *)v2;
    do
    {
      v8 = *v3;
      *v3++ = 0;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    v9 = *(_QWORD *)a1 - 8;
    do
    {
      sub_21DF73B98((uint64_t *)(v9 + v5));
      v5 -= 8;
    }
    while (v5);
    v3 = *(uint64_t **)a1;
  }
  if (v3 != (uint64_t *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_21DF764A4(_QWORD *a1, unint64_t *a2, unsigned int a3, unsigned int a4, char a5, unsigned __int8 **a6)
{
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  llvm::Type *v12;
  uint64_t v13;
  unint64_t i;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t *v48;
  _QWORD *v49;
  llvm::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  llvm::Instruction **v55;
  uint64_t v56;
  void *Name;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Type **v79;
  llvm::Type *v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned __int8 **v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  _DWORD v97[2];
  void *__p[2];
  uint64_t v99;
  __int16 v100;
  uint64_t *v101[2];
  void *__src;
  uint64_t v103;
  _BYTE v104[256];
  void *v105;
  uint64_t v106;
  _QWORD v107[34];

  v8 = a2;
  v9 = a1;
  v107[32] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  if ((a5 & 1) != 0)
  {
    if (*(_BYTE *)(v10 + 8) != 15)
      return 0;
    v12 = **(llvm::Type ***)(v10 + 16);
    v13 = **((_QWORD **)v12 + 2);
    v96 = v13;
    if (*(_BYTE *)(v13 + 8) == 16)
      v96 = **(_QWORD **)(v13 + 16);
    v89 = **((_QWORD **)v12 + 2);
    __src = a2;
    v105 = v107;
    v106 = 0x2000000000;
    sub_21DF1B18C((uint64_t)&v105, &__src, &v103);
    for (i = v8[1]; i; i = *(_QWORD *)(i + 8))
    {
      v15 = *(_QWORD *)(i + 24);
      if (*(_BYTE *)(v15 + 16) == 77)
        sub_21DF19CD0((uint64_t)&v105, v15);
    }
    v16 = a3;
    __src = v104;
    v103 = 0x2000000000;
    v83 = v8;
    if ((_DWORD)v106)
    {
      v80 = v12;
      v17 = (uint64_t *)v105;
      v18 = (uint64_t *)((char *)v105 + 8 * v106);
      v19 = a4;
      v87 = v9 + 24;
      v88 = a6;
      v81 = a4;
      v92 = a3;
      v82 = a3;
      v85 = v18;
      v86 = a3 | ((unint64_t)(a3 + a4 - 1) << 32);
      v94 = v9;
      v84 = a4;
      while (1)
      {
        v20 = *(uint64_t **)(*(_QWORD *)*v17 + 16);
        v21 = *v20;
        v22 = *(unsigned __int8 *)(*v20 + 8);
        if (*v20)
          v23 = v22 == 16;
        else
          v23 = 0;
        if (v23)
        {
          if (*(_DWORD *)(v21 + 12) != 1)
            goto LABEL_79;
          v25 = *(unsigned __int8 *)(**(_QWORD **)(v21 + 16) + 8);
          v23 = v25 == 15;
          v24 = v25 != 15;
          if (!v23)
            v21 = **(_QWORD **)(v21 + 16);
          v22 = *(unsigned __int8 *)(v21 + 8);
        }
        else
        {
          v24 = 0;
        }
        if (v22 == 17)
          v26 = v21;
        else
          v26 = 0;
        if (v26)
        {
          if (*(_QWORD *)(v26 + 32) > v19)
            goto LABEL_79;
          v21 = **(_QWORD **)(v26 + 16);
          ++v24;
          v22 = *(unsigned __int8 *)(v21 + 8);
        }
        if (v22 == 16)
          v27 = v21;
        else
          v27 = 0;
        if (!v27)
        {
          v28 = v24 + 1;
LABEL_33:
          if (v26 | v27)
            v29 = v21 == v96;
          else
            v29 = 0;
          if (v29)
          {
            v93 = v24 + 1;
            v90 = *v17;
            v30 = *(_QWORD *)(*v17 + 8);
            if (v30)
            {
              v91 = v24;
              v95 = v28;
              do
              {
                v31 = *(_QWORD *)(v30 + 24);
                if (v31 && *(_BYTE *)(v31 + 16) == 62)
                {
                  v32 = *(_DWORD *)(v31 + 20) & 0x7FFFFFF;
                  v33 = (v32 - 1);
                  v34 = **(_QWORD **)(*(_QWORD *)v31 + 16);
                  if ((v34 != v96 || (_DWORD)v33 == v28) && (v34 != v27 || (_DWORD)v32 == v28))
                  {
                    if ((_DWORD)v32 == 1)
                    {
LABEL_61:
                      sub_21DF3F430((uint64_t)v94 + *(_QWORD *)(*v94 - 24) + 8, v31);
                      v43 = *(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 32 * v93);
                      v44 = *(_QWORD *)(*v94 - 24);
                      v45 = *(_QWORD *)((char *)v87 + v44);
                      v100 = 257;
                      v46 = sub_21DF1ABB0((uint64_t)v94 + v44 + 8, v43, v45, 0, (uint64_t)__p);
                      if (v46)
                        v47 = *(_BYTE *)(v46 + 16) == 16;
                      else
                        v47 = 0;
                      v48 = (uint64_t *)v86;
                      if (v47)
                      {
                        v49 = (_QWORD *)(v46 + 24);
                        if (*(_DWORD *)(v46 + 32) >= 0x41u)
                          v49 = (_QWORD *)*v49;
                        v48 = (uint64_t *)((*(_DWORD *)v49 + v92) | ((unint64_t)(*(_DWORD *)v49 + v92) << 32));
                      }
                      v101[0] = v48;
                      v50 = sub_21DF76BC0(v94, v88, v89, v46, (uint64_t)v101);
                      if (v34 == v27)
                      {
                        v51 = (uint64_t)v94 + *(_QWORD *)(*v94 - 24) + 8;
                        v52 = llvm::UndefValue::get();
                        v97[0] = 0;
                        v100 = 257;
                        sub_21DF1A244(v51, v52, (uint64_t)v50, (uint64_t)v97, 1, (uint64_t)__p);
                      }
                      for (j = *(_QWORD *)(v31 + 8); j; j = *(_QWORD *)(j + 8))
                      {
                        v54 = *(_QWORD *)(j + 24);
                        if (*(_BYTE *)(v54 + 16) == 60)
                        {
                          llvm::Value::replaceAllUsesWith();
                          sub_21DF19CD0((uint64_t)&__src, v54);
                        }
                      }
                      sub_21DF19CD0((uint64_t)&__src, v31);
                      v28 = v95;
                    }
                    else
                    {
                      v37 = v31 - 32 * v32 + 32;
                      v38 = v91;
                      while (1)
                      {
                        if (v38)
                        {
                          v39 = *(_QWORD *)v37;
                          if (*(_BYTE *)(*(_QWORD *)v37 + 16) != 16)
                            break;
                          v40 = (_QWORD *)(v39 + 24);
                          v41 = *(_DWORD *)(v39 + 32);
                          if (v41 >= 0x41)
                          {
                            v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v39 + 24));
                            v28 = v95;
                            if (v41 - v42 > 0x40)
                              break;
                            v40 = (_QWORD *)*v40;
                          }
                          if (*v40)
                            break;
                        }
                        v37 += 32;
                        --v38;
                        if (!--v33)
                          goto LABEL_61;
                      }
                    }
                  }
                }
                v30 = *(_QWORD *)(v30 + 8);
              }
              while (v30);
            }
            v9 = v94;
            v19 = v84;
            v18 = v85;
            if (*(unsigned __int8 *)(v90 + 16) > 0x1Bu)
              sub_21DF19CD0((uint64_t)&__src, v90);
          }
          goto LABEL_79;
        }
        if (*(_DWORD *)(v27 + 12) == 1)
        {
          v21 = **(_QWORD **)(v27 + 16);
          v28 = v24 + 2;
          goto LABEL_33;
        }
LABEL_79:
        if (++v17 == v18)
        {
          v8 = v83;
          a6 = v88;
          v16 = v82;
          a4 = v81;
          v12 = v80;
          if ((_DWORD)v103)
          {
            v55 = (llvm::Instruction **)__src;
            v56 = 8 * v103;
            do
            {
              if (!*((_QWORD *)*v55 + 1))
                llvm::Instruction::eraseFromParent(*v55);
              ++v55;
              v56 -= 8;
            }
            while (v56);
          }
          break;
        }
      }
    }
    if (v8[1])
    {
      Name = (void *)llvm::Value::getName((llvm::Value *)v8);
      if (Name)
      {
        Name = sub_21DF24420(__p, Name, v58);
        if (v99 >= 0)
          v65 = __p;
        else
          LOBYTE(v65) = __p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v65 = __p;
        v99 = 0;
      }
      sub_21DF28954((uint64_t)Name, "!!!! Perf: Argument %s: failed to patten match the array of texture/sampler, spilling!!", v59, v60, v61, v62, v63, v64, (char)v65);
      if (SHIBYTE(v99) < 0)
        operator delete(__p[0]);
      v73 = (uint64_t *)sub_21DF7A588((uint64_t)v9 + *(_QWORD *)(*v9 - 24), v12);
      v74 = v73 + 3;
      if (!v73)
        v74 = 0;
      sub_21DF19018((uint64_t)v9 + *(_QWORD *)(*v9 - 24) + 8, v73[5], v74[1]);
      if (a4)
      {
        v75 = 0;
        do
        {
          v97[0] = v16 + v75;
          v97[1] = v16 + v75;
          v76 = (uint64_t)v9 + *(_QWORD *)(*v9 - 24);
          v101[0] = (uint64_t *)llvm::ConstantInt::get();
          v101[1] = (uint64_t *)llvm::ConstantInt::get();
          v100 = 257;
          v77 = sub_21DF66DE4(v76, v73, v101, 2, (uint64_t)__p);
          v78 = llvm::ConstantInt::get();
          v79 = (llvm::Type **)sub_21DF76BC0(v9, a6, v89, v78, (uint64_t)v97);
          sub_21DF385B0((_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8), v79, v77, 0);
          ++v75;
        }
        while (a4 != v75);
      }
      llvm::Value::replaceAllUsesWith();
    }
    if (__src != v104)
      free(__src);
    if (v105 != v107)
      free(v105);
  }
  else
  {
    v66 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v67 = *(_QWORD *)(v9[20] + 80);
    if (v67)
      v68 = v67 - 24;
    else
      v68 = 0;
    v69 = *(_QWORD *)(v68 + 40);
    if (v69)
      v70 = v69 - 24;
    else
      v70 = 0;
    sub_21DF3F430(v66, v70);
    LODWORD(v105) = a3;
    HIDWORD(v105) = a3;
    v71 = llvm::ConstantInt::get();
    sub_21DF76BC0(v9, a6, v10, v71, (uint64_t)&v105);
    llvm::Value::replaceAllUsesWith();
  }
  return 1;
}

llvm::Value *sub_21DF76BC0(_QWORD *a1, unsigned __int8 **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type **v12;
  _WORD v14[20];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v9 = v8[30];
  v16 = v8[24];
  v17 = v9;
  v18 = v16;
  v10 = sub_21DF72140(a2, v8[40], a3);
  v11 = *(_QWORD *)(*a1 - 24);
  v15[0] = a4;
  v12 = (llvm::Type **)((char *)a1 + v11 + 8);
  v15[1] = sub_21DF25850(a5, v12);
  v15[2] = llvm::ConstantInt::get();
  v14[16] = 257;
  return sub_21DF191A4((uint64_t)v12, *(_QWORD *)(v10 + 24), v10, (uint64_t)v15, 3, (uint64_t)v14);
}

void sub_21DF76CCC(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Instruction *v14;
  uint64_t v15;
  llvm::BasicBlock *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  llvm::Instruction *v42;
  int v43;
  llvm::Instruction **v44;
  llvm::Instruction *v45;
  _BYTE *v46;
  unsigned int v47;
  llvm::Instruction *v48;
  _QWORD *v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  llvm::BasicBlock *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v67;
  llvm::BasicBlock *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  llvm::Instruction *v73;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  BOOL v81;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t FirstNonPHI;
  uint64_t v98;
  uint64_t v99;
  int v100;
  llvm::User *v101;
  unint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Value *v121;
  void **v122;
  void **v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _QWORD v133[4];
  __int16 v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  int v138;
  _BYTE v139[32];
  void *__p[2];
  __int128 v141;
  __int128 v142;
  uint8_t buf[8];
  uint64_t v144;
  _BYTE v145[16];
  __int16 v146;
  char *v147;
  uint64_t v148;
  _QWORD v149[18];

  v149[16] = *MEMORY[0x24BDAC8D0];
  v147 = (char *)v149;
  v148 = 0x1000000000;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + 24);
      if (v7 >= HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v148;
      }
      *(_QWORD *)&v147[8 * v7] = v8;
      v7 = v148 + 1;
      LODWORD(v148) = v148 + 1;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v9 = v147;
    if (v7)
    {
      v131 = &v147[8 * v7];
      v130 = a3;
      v10 = 32 * a3;
      v11 = a4;
      v129 = v10;
      while (1)
      {
        v12 = *(_QWORD *)v9;
        v13 = *(_QWORD *)v9 - 32 * (*(_DWORD *)(*(_QWORD *)v9 + 20) & 0x7FFFFFF);
        if (v11)
          v14 = *(llvm::Instruction **)(v13 + 32 * a4);
        else
          v14 = 0;
        v15 = *(_QWORD *)(v13 + v10);
        if (*(_BYTE *)(v15 + 16) != 83)
          goto LABEL_66;
        v16 = *(llvm::BasicBlock **)(v12 + 40);
        v17 = *((_QWORD *)v16 + 1);
        if (v17)
          break;
LABEL_64:
        llvm::UndefValue::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v12);
LABEL_65:
        v10 = v129;
LABEL_66:
        v9 += 8;
        if (v9 == v131)
        {
          v9 = v147;
          goto LABEL_240;
        }
      }
      v18 = *((_QWORD *)v16 + 1);
      while (1)
      {
        v19 = *(_QWORD *)(v18 + 24);
        v20 = *(unsigned __int8 *)(v19 + 16);
        v21 = v19 && v20 >= 0x1C;
        if (v21 && v20 - 29 <= 0xA)
          break;
        v18 = *(_QWORD *)(v18 + 8);
        if (!v18)
        {
LABEL_55:
          while (1)
          {
            v38 = *(_QWORD *)(v17 + 24);
            v39 = *(unsigned __int8 *)(v38 + 16);
            v40 = v38 && v39 >= 0x1C;
            if (v40 && v39 - 29 < 0xB)
              break;
            v17 = *(_QWORD *)(v17 + 8);
            if (!v17)
              goto LABEL_64;
          }
          if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) != 1)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_21DF15000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "All predecessors of the indirect sampler call have an unconditional branch, may need more code changes to handle this", buf, 2u);
            }
            abort();
          }
          v10 = v129;
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v15);
          if (v14)
          {
            if (*((_BYTE *)v14 + 16) == 83)
              v42 = v14;
            else
              v42 = 0;
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v42);
          }
          goto LABEL_66;
        }
      }
      v23 = 0;
LABEL_24:
      v24 = *(_QWORD *)(v19 + 40);
      v25 = *(_QWORD *)(v24 + 40);
      if (v25 == v24 + 40
        || ((v26 = v25 - 24, v25) ? (v27 = v25 - 24) : (v27 = 0),
            (v28 = *(unsigned __int8 *)(v27 + 16) - 40, v29 = __CFADD__(v28, 11), v28 >= 0xFFFFFFF5)
          ? (v30 = v26)
          : (v30 = 0),
            v29 ? (v31 = *(_BYTE *)(v30 + 16) == 30) : (v31 = 0),
            !v31 || (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) != 1))
      {
        v23 = v24;
      }
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 24);
        v32 = *(unsigned __int8 *)(v19 + 16);
        if (v19)
          v33 = v32 >= 0x1C;
        else
          v33 = 0;
        if (v33 && v32 - 29 < 0xB)
          goto LABEL_24;
      }
      if (!v23)
        goto LABEL_55;
      v35 = *(_QWORD **)(v23 + 40);
      if (v35 == (_QWORD *)(v23 + 40))
      {
        v36 = 0;
      }
      else
      {
        v36 = v35 - 3;
        if (v35)
          v37 = v35 - 3;
        else
          v37 = 0;
        if (*((unsigned __int8 *)v37 + 16) - 29 >= 0xB)
          v36 = 0;
      }
      v43 = *((_DWORD *)v36 + 5);
      if ((v43 & 0x7FFFFFF) != 0)
      {
        v44 = (v43 & 0x40000000) != 0
            ? (llvm::Instruction **)*(v36 - 1)
            : (llvm::Instruction **)&v36[-4 * (v43 & 0x7FFFFFF)];
        v45 = *v44;
        if (*((_BYTE *)*v44 + 16) == 60)
        {
          v46 = (_BYTE *)*((_QWORD *)v45 - 4);
          v47 = *(_DWORD *)(*(_QWORD *)v46 + 8);
          if ((v47 & 0xFE) == 0x12)
            v47 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v46 + 16) + 8);
          if (v47 <= 0xFF && v46[16] == 59)
          {
            while (1)
            {
              v48 = (llvm::Instruction *)(v35 - 3);
              if (!v35)
                v48 = 0;
              if (v48 == v45)
                break;
              v35 = (_QWORD *)*v35;
            }
            while (v35 != (_QWORD *)(v23 + 40))
            {
              if (v35)
                v49 = v35 - 3;
              else
                v49 = 0;
              if (v35 && *((_BYTE *)v49 + 16) == 61)
              {
                v50 = (_BYTE *)*(v49 - 4);
                if (v50 == v46)
                {
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent(v45);
                  llvm::ConstantFoldTerminator();
                  v17 = *((_QWORD *)v16 + 1);
                  break;
                }
                v51 = *(_DWORD *)(*(_QWORD *)v50 + 8);
                if ((v51 & 0xFE) == 0x12)
                  v51 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v50 + 16) + 8);
                if (v51 <= 0xFF && v50[16] != 59)
                  break;
              }
              v35 = (_QWORD *)*v35;
            }
          }
        }
      }
      if (v17)
      {
        while (1)
        {
          v52 = *(_QWORD *)(v17 + 24);
          v53 = *(unsigned __int8 *)(v52 + 16);
          v54 = v52 && v53 >= 0x1C;
          if (v54 && v53 - 29 <= 0xA)
            break;
          v17 = *(_QWORD *)(v17 + 8);
          if (!v17)
            goto LABEL_139;
        }
        do
        {
          v56 = v17;
          do
          {
            v17 = *(_QWORD *)(v17 + 8);
            if (!v17)
              break;
            v57 = *(_QWORD *)(v17 + 24);
            v58 = *(unsigned __int8 *)(v57 + 16);
            v59 = v57 && v58 >= 0x1C;
          }
          while (!v59 || v58 - 29 >= 0xB);
          v61 = *(llvm::BasicBlock **)(*(_QWORD *)(v56 + 24) + 40);
          v62 = *((_QWORD *)v61 + 1);
          if (v62)
          {
            while (1)
            {
              v63 = *(_QWORD *)(v62 + 24);
              v64 = *(unsigned __int8 *)(v63 + 16);
              v65 = v63 && v64 >= 0x1C;
              if (v65 && v64 - 29 < 0xB)
                break;
              v62 = *(_QWORD *)(v62 + 8);
              if (!v62)
                goto LABEL_132;
            }
          }
          else
          {
LABEL_132:
            v67 = *(_QWORD *)(*((_QWORD *)v61 + 7) + 80);
            if (v67)
              v68 = (llvm::BasicBlock *)(v67 - 24);
            else
              v68 = 0;
            if (v61 != v68)
            {
              llvm::BasicBlock::removePredecessor(v16, v61);
              if (!*((_QWORD *)v61 + 1))
                llvm::BasicBlock::eraseFromParent(v61);
            }
          }
        }
        while (v17);
      }
LABEL_139:
      v69 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
      v10 = v129;
      v70 = *(_QWORD *)(v69 + v129);
      if (v11)
      {
        if (*(_BYTE *)(v70 + 16) != 83 || v70 == 0)
          goto LABEL_66;
        v72 = *(_QWORD *)(v69 + 32 * a4);
        if (v72)
        {
          if (*(_BYTE *)(v72 + 16) == 83)
            v73 = *(llvm::Instruction **)(v69 + 32 * a4);
          else
            v73 = 0;
          goto LABEL_154;
        }
      }
      else
      {
        if (*(_BYTE *)(v70 + 16) != 83 || v70 == 0)
          goto LABEL_66;
        v72 = 0;
      }
      v73 = 0;
LABEL_154:
      v75 = 0;
      v141 = 0u;
      v142 = 0u;
      *(_OWORD *)__p = 0u;
      v135 = v139;
      v136 = v139;
      v137 = 4;
      v76 = v12;
      v138 = 0;
      while (1)
      {
        v77 = sub_21DF35A70((llvm::CallBase *)v12);
        v78 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        if (v75 >= ((v77 - (v12 + 32 * (unint64_t)-(int)v78)) >> 5))
          break;
        v79 = *(_QWORD *)(v76 - 32 * v78);
        if (*(unsigned __int8 *)(v79 + 16) <= 0x1Bu)
          v80 = 0;
        else
          v80 = (_QWORD *)v79;
        v133[0] = v80;
        if (v80)
          v81 = v80 == (_QWORD *)v70;
        else
          v81 = 1;
        if (!v81 && v80 != (_QWORD *)v72 && (llvm::BasicBlock *)v80[5] == v16)
        {
          sub_21DF69C20((uint64_t)buf, &v135, v80);
          if (v145[0])
            sub_21DF75E38(__p, v133);
        }
        ++v75;
        v76 += 32;
      }
      v83 = *((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v84 = v142;
        do
        {
          v85 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((v84 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v84 & 0x1FF));
          v86 = *(_DWORD *)(v85 + 20) & 0x7FFFFFF;
          if ((_DWORD)v86)
          {
            v87 = 0;
            v88 = 32 * v86;
            do
            {
              v89 = *(_DWORD *)(v85 + 20);
              if ((v89 & 0x40000000) != 0)
                v90 = *(_QWORD *)(v85 - 8);
              else
                v90 = v85 - 32 * (v89 & 0x7FFFFFF);
              v91 = *(_QWORD *)(v90 + v87);
              if (*(unsigned __int8 *)(v91 + 16) <= 0x1Bu)
                v92 = 0;
              else
                v92 = (_QWORD *)v91;
              v133[0] = v92;
              if (v92)
              {
                if ((llvm::BasicBlock *)v92[5] == v16)
                {
                  sub_21DF69C20((uint64_t)buf, &v135, v92);
                  if (v145[0])
                    sub_21DF75E38(__p, v133);
                }
              }
              v87 += 32;
            }
            while (v88 != v87);
            v83 = *((_QWORD *)&v142 + 1);
            v84 = v142;
          }
          --v83;
          *(_QWORD *)&v142 = ++v84;
          *((_QWORD *)&v142 + 1) = v83;
          if (v84 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            v84 = v142 - 512;
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&v142 = v142 - 512;
            v83 = *((_QWORD *)&v142 + 1);
          }
        }
        while (v83);
      }
      v93 = (_QWORD *)*((_QWORD *)v16 + 6);
      if (v93 != (_QWORD *)((char *)v16 + 40))
      {
        do
        {
          if (HIDWORD(v137) == v138)
            break;
          v94 = (_QWORD *)v93[1];
          if (v93)
            v95 = v93 - 3;
          else
            v95 = 0;
          if (sub_21DF6C638((uint64_t)&v135, v95))
            llvm::Instruction::moveBefore();
          v93 = v94;
        }
        while (v94 != (_QWORD *)((char *)v16 + 40));
      }
      v96 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v12 + 40));
      sub_21DF3F430(v96, FirstNonPHI);
      v98 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v99 = *(_QWORD *)v12;
      v100 = *(_DWORD *)(v70 + 20) & 0x7FFFFFF;
      v146 = 257;
      v101 = sub_21DF38DEC(v98, v99, v100, (uint64_t)buf);
      v102 = 0;
      *(_QWORD *)buf = v145;
      v144 = 0x1000000000;
      for (i = v12; ; i += 32)
      {
        v104 = sub_21DF35A70((llvm::CallBase *)v12);
        v105 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        if (v102 >= ((v104 - (v12 + 32 * (unint64_t)-(int)v105)) >> 5))
          break;
        sub_21DF19CD0((uint64_t)buf, *(_QWORD *)(i - 32 * v105));
        ++v102;
      }
      v106 = *(_DWORD *)(v70 + 20);
      if ((v106 & 0x40000000) != 0)
      {
        v108 = *(_QWORD *)(v70 - 8);
        v109 = *(unsigned int *)(v70 + 60);
        v110 = (uint64_t *)(v108 + 32 * v109);
        v107 = v106 & 0x7FFFFFF;
      }
      else
      {
        v107 = v106 & 0x7FFFFFF;
        v108 = v70 - 32 * v107;
        v109 = *(unsigned int *)(v70 + 60);
        v110 = (uint64_t *)(v108 + 32 * v109);
      }
      v111 = v108 + 32 * v109 + 8 * v107;
      while (v110 != (uint64_t *)v111)
      {
        v112 = *v110;
        v113 = *(_QWORD *)(*v110 + 40);
        if (v113 == *v110 + 40)
        {
          v116 = 0;
        }
        else
        {
          v114 = v113 - 24;
          if (v113)
            v115 = v113 - 24;
          else
            v115 = 0;
          if (*(unsigned __int8 *)(v115 + 16) - 29 >= 0xB)
            v116 = 0;
          else
            v116 = v114;
        }
        sub_21DF3F430((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8, v116);
        v117 = sub_21DF77780(v70, v112);
        v118 = v117;
        if (v73)
        {
          v119 = sub_21DF77780((uint64_t)v73, v112);
          *(_QWORD *)(*(_QWORD *)buf + 8 * v130) = v118;
          if (v119)
            *(_QWORD *)(*(_QWORD *)buf + 8 * a4) = v119;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)buf + 8 * v130) = v117;
        }
        v120 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v134 = 257;
        v121 = sub_21DF191A4(v120, *(_QWORD *)(a2 + 24), a2, *(uint64_t *)buf, v144, (uint64_t)v133);
        sub_21DF38EDC(v101, (uint64_t)v121, v112);
        ++v110;
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v12);
      if (!*(_QWORD *)(v70 + 8))
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v70);
      v11 = a4;
      if (v73 && !*((_QWORD *)v73 + 1))
        llvm::Instruction::eraseFromParent(v73);
      if (*(_BYTE **)buf != v145)
        free(*(void **)buf);
      if (v136 != v135)
        free(v136);
      v122 = (void **)__p[1];
      v123 = (void **)v141;
      *((_QWORD *)&v142 + 1) = 0;
      v124 = v141 - (unint64_t)__p[1];
      if ((unint64_t)v141 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v122);
          v123 = (void **)v141;
          v122 = (void **)((char *)__p[1] + 8);
          __p[1] = v122;
          v124 = v141 - (_QWORD)v122;
        }
        while ((_QWORD)v141 - (_QWORD)v122 > 0x10uLL);
      }
      v125 = v124 >> 3;
      if (v125 == 1)
      {
        v126 = 256;
      }
      else
      {
        if (v125 != 2)
          goto LABEL_234;
        v126 = 512;
      }
      *(_QWORD *)&v142 = v126;
LABEL_234:
      if (v122 != v123)
      {
        do
        {
          v127 = *v122++;
          operator delete(v127);
        }
        while (v122 != v123);
        if ((void *)v141 != __p[1])
          *(_QWORD *)&v141 = v141 + (((unint64_t)__p[1] - v141 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (__p[0])
        operator delete(__p[0]);
      goto LABEL_65;
    }
LABEL_240:
    if (v9 != (char *)v149)
      free(v9);
  }
}

uint64_t sub_21DF77780(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0)
        v5 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 60) + 8 * v4) == a2)
        break;
      if (v3 == ++v4)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  else
    v6 = a1 - 32 * v3;
  return *(_QWORD *)(v6 + 32 * v4);
}

void sub_21DF777EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  int Key;
  BOOL v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  sub_21DF35B3C();
  sub_21DF634A0();
  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 320);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      v5 = (llvm::Value *)(v4 - 56);
      v8 = v4 == 0;
      v4 = *(_QWORD *)(v4 + 8);
      if (v8)
        v6 = 0;
      else
        v6 = v5;
      llvm::Value::getName(v6);
      Key = llvm::StringMapImpl::FindKey();
      v8 = Key == -1 || Key == (unint64_t)dword_2553B3CE8;
      if (v8)
      {
        llvm::Value::getName(v6);
        v9 = llvm::StringMapImpl::FindKey();
        if (v9 == -1 || v9 == (unint64_t)dword_2553B3BF0)
          continue;
        v13 = a1;
        v14 = (uint64_t)v6;
        v11 = 0;
        v12 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(qword_2553B3CE0 + 8 * Key);
        v11 = *(unsigned __int8 *)(v10 + 30);
        v12 = *(unsigned __int8 *)(v10 + 31);
        v13 = a1;
        v14 = (uint64_t)v6;
      }
      sub_21DF76CCC(v13, v14, v11, v12);
    }
    while (v4 != v3);
  }
}

void sub_21DF77910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  llvm::Module *v3;

  if (*(_BYTE *)(a1 + 10))
  {
    sub_21DF777EC((_QWORD *)a1);
  }
  else
  {
    v1 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v2 = *(_QWORD *)(v1 + 400);
    v3 = *(llvm::Module **)(v1 + 320);
    sub_21DF2C660(v2);
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v2 + 336), v3);
  }
}

uint64_t sub_21DF77960(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v2 = *(uint64_t **)(a1 + 792);
  v3 = *(_QWORD *)(a1 + 808);
  v4 = *(_QWORD *)(a1 + 816);
  v34 = *(uint64_t **)(a1 + 784);
  if (v34 == v2)
  {
    v20 = 0;
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 816);
    v33 = *(_QWORD *)(a1 + 808);
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(uint64_t **)(a1 + 784);
    do
    {
      v35 = *v8;
      v9 = sub_21DF2FCF4((uint64_t)&v35, a1 + 704 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v10 = v9;
      if ((unint64_t)v6 >= v7)
      {
        v11 = (v6 - v5) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          abort();
        if ((uint64_t)(v7 - (_QWORD)v5) >> 1 > v12)
          v12 = (uint64_t)(v7 - (_QWORD)v5) >> 1;
        if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)sub_21DF2EACC(v13);
        else
          v14 = 0;
        v15 = (char *)(v13 + 4 * v11);
        *(_DWORD *)v15 = v10;
        v16 = v15 + 4;
        while (v6 != v5)
        {
          v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v17;
          v15 -= 4;
        }
        v7 = v13 + 4 * v14;
        if (v5)
          operator delete(v5);
        v5 = v15;
        v6 = v16;
      }
      else
      {
        *(_DWORD *)v6 = v9;
        v6 += 4;
      }
      ++v8;
    }
    while (v8 != v2);
    if (v6 == v5)
      v18 = (char *)&unk_2553B3CD8;
    else
      v18 = v5;
    v19 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v18, (v6 - v5) >> 2);
    if (v5)
      operator delete(v5);
    v20 = v19;
    v4 = v32;
    v3 = v33;
  }
  if (v3 == v4)
  {
    v26 = 0;
  }
  else
  {
    v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v22 = *(_QWORD *)(a1 + 808);
    v23 = *(_QWORD *)(a1 + 816);
    v24 = v23 - v22;
    if (v23 == v22)
      v25 = &unk_2553B3CD9;
    else
      v25 = *(void **)(a1 + 808);
    *(_BYTE *)(v21 + 774) = 1;
    sub_21DF2E13C(v21 + 704, v24, 4uLL);
    sub_21DF2E13C(v21 + 704, v24, 8uLL);
    sub_21DF2E174((uint64_t *)(v21 + 704), v25, v24);
    *(_BYTE *)(v21 + 774) = 0;
    v26 = sub_21DF2E0DC(v21 + 704, v24 >> 3);
  }
  v27 = sub_21DF2EB00(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v28 = (uint64_t)v27;
  v30 = v29;
  if (v34 != v2)
    sub_21DF42F40(v27, v20);
  if (v3 != v4 && v26)
  {
    sub_21DF2DF68(v28, 4uLL);
    sub_21DF2E08C((uint64_t *)v28, 12, *(_DWORD *)(v28 + 32) - *(_DWORD *)(v28 + 48) + *(_DWORD *)(v28 + 40) - v26 + 4);
  }
  sub_21DF2FF00((uint64_t *)v28, 20, *(unsigned __int8 *)(a1 + 37));
  if (*(_BYTE *)(a1 + 2385))
  {
    sub_21DF2DB90((uint64_t *)v28, 22, *(_QWORD *)(a1 + 2392));
    sub_21DF2DB90((uint64_t *)v28, 24, *(_QWORD *)(a1 + 2400));
    sub_21DF2DB90((uint64_t *)v28, 26, *(_QWORD *)(a1 + 2408));
    sub_21DF2DB90((uint64_t *)v28, 28, *(_QWORD *)(a1 + 2416));
  }
  sub_21DF2E08C((uint64_t *)v28, 30, *(_DWORD *)(a1 + 2424));
  return sub_21DF2DC24(v28, v30);
}

void sub_21DF77C44(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int i;
  _BOOL4 v15;
  llvm::MDString *v16;
  size_t v17;
  void *String;
  int Key;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  std::string::__raw *v48;
  std::string::size_type v49;
  int v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  size_t v61;
  void **p_p;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  _BYTE *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Instruction *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::string v78;
  __int16 v79;
  void *__p;
  std::string::size_type v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 160);
  if ((*(_WORD *)(v4 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v6 = v3[20];
    v5 = *(_QWORD *)(v4 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v3[20]);
    v4 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 88);
  }
  v75 = *(_QWORD *)(v4 + 88) + 40 * *(_QWORD *)(v4 + 96);
  if (v5 == v75)
    return;
  v73 = v3 + 1;
  v74 = a2;
  v76 = v3;
  do
  {
    v7 = *(_QWORD *)(v3[9] + 8 * *(unsigned int *)(v5 + 32));
    v77 = v5;
    if (*(_QWORD *)(v5 + 8))
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      goto LABEL_116;
    v9 = *(_QWORD *)(v76[20] + 80);
    v10 = v9 ? v9 - 24 : 0;
    v11 = *(_QWORD *)(v10 + 40);
    v12 = v11 ? v11 - 24 : 0;
    sub_21DF3F430((uint64_t)v76 + *(_QWORD *)(*v76 - 24) + 8, v12);
    if (!sub_21DF241E0(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.buffer")
      && !sub_21DF241E0(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.indirect_buffer"))
    {
      goto LABEL_116;
    }
    LODWORD(v13) = *(_DWORD *)(v7 + 8);
    if (v13 >= 3)
    {
      for (i = 2; i < v13; ++i)
      {
        v15 = sub_21DF241E0(*(llvm::MDString **)(v7 - 8 * v13 + 8 * i), "air.arg_name");
        v13 = *(unsigned int *)(v7 + 8);
        if (v15)
        {
          v16 = *(llvm::MDString **)(v7 - 8 * v13 + 8 * (i + 1));
          if (v16 && !*(_BYTE *)v16)
          {
            String = (void *)llvm::MDString::getString(v16);
            v17 = v61;
            goto LABEL_28;
          }
          i += 2;
        }
      }
    }
    v17 = 0;
    String = 0;
LABEL_28:
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v20 = *(unsigned int *)(a2 + 8);
    else
      v20 = Key;
    v21 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v20);
    switch(*(_DWORD *)(v21 + 12))
    {
      case 0:
        sub_21DF73C40((uint64_t)v76, (uint64_t *)v77, *(_DWORD *)(v77 + 32), v7, *(_DWORD *)(v21 + 16));
        goto LABEL_116;
      case 1:
        sub_21DF1AF28(&v78, "agc.");
        if (String)
        {
          sub_21DF24420(&__p, String, v17);
          v22 = HIBYTE(v82);
          v23 = (void **)__p;
          v24 = v81;
        }
        else
        {
          v24 = 0;
          v23 = 0;
          v22 = 0;
          __p = 0;
          v81 = 0;
          v82 = 0;
        }
        if ((v22 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = v23;
        if ((v22 & 0x80u) == 0)
          v63 = v22;
        else
          v63 = v24;
        v64 = std::string::append(&v78, (const std::string::value_type *)p_p, v63);
        v65 = v64->__r_.__value_.__r.__words[2];
        v83 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v84 = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82) < 0)
          operator delete(__p);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        v66 = 1;
        v67 = (_BYTE *)llvm::User::operator new((llvm::User *)0x58);
        v68 = &v83;
        if (v84 < 0)
          v68 = (__int128 *)v83;
        v79 = 257;
        if (*(_BYTE *)v68)
        {
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
          v66 = 3;
        }
        LOBYTE(v79) = v66;
        llvm::GlobalVariable::GlobalVariable();
        v67[80] |= 1u;
        llvm::GlobalObject::setSection();
        sub_21DF7A774((uint64_t)v76 + *(_QWORD *)(*v76 - 24));
        v69 = *(_QWORD *)(*v76 - 24);
        v79 = 257;
        sub_21DF19394((_QWORD *)((char *)v73 + v69), **(llvm::Type ***)(*(_QWORD *)v67 + 16), (uint64_t)v67, 0, (uint64_t)&v78);
        v70 = *(_QWORD *)(v77 + 8);
        if (v70)
        {
          do
          {
            v71 = *(_QWORD *)(v70 + 8);
            v72 = *(llvm::Instruction **)(v70 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v72);
            v70 = v71;
          }
          while (v71);
        }
        a2 = v74;
        if (SHIBYTE(v84) < 0)
          operator delete((void *)v83);
        goto LABEL_116;
      case 2:
        llvm::ConstantInt::get();
        v25 = *(_QWORD *)(v77 + 8);
        if (v25)
        {
          do
          {
            v26 = *(_QWORD *)(v25 + 8);
            v27 = *(llvm::Instruction **)(v25 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v27);
            v25 = v26;
          }
          while (v26);
        }
        goto LABEL_116;
      case 3:
        *(_OWORD *)&v78.__r_.__value_.__r.__words[1] = 0uLL;
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78.__r_.__value_.__l.__size_;
        v28 = (char *)operator new(8uLL);
        *(_QWORD *)v28 = v77;
        v29 = v28 + 8;
        v30 = v28 + 8;
        break;
      default:
        goto LABEL_116;
    }
    do
    {
      v31 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      for (j = *(_QWORD *)(v31 + 8); j; j = *(_QWORD *)(j + 8))
      {
        v33 = *(_QWORD *)(j + 24);
        if (v30 >= v29)
        {
          v34 = (v30 - v28) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            abort();
          if ((v29 - v28) >> 2 > v35)
            v35 = (v29 - v28) >> 2;
          if ((unint64_t)(v29 - v28) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v36 = (unint64_t)sub_21DF527B8(v36);
          else
            v37 = 0;
          v38 = (char *)(v36 + 8 * v34);
          *(_QWORD *)v38 = v33;
          v39 = v38 + 8;
          while (v30 != v28)
          {
            v40 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v40;
            v38 -= 8;
          }
          v29 = (char *)(v36 + 8 * v37);
          if (v28)
            operator delete(v28);
          v28 = v38;
          v30 = v39;
        }
        else
        {
          *(_QWORD *)v30 = v33;
          v30 += 8;
        }
        v41 = *(_QWORD *)(j + 24);
        size = v78.__r_.__value_.__l.__size_;
        p_size = &v78.__r_.__value_.__l.__size_;
        v44 = &v78.__r_.__value_.__l.__size_;
        if (v78.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            while (1)
            {
              v44 = (std::string::size_type *)size;
              v45 = *(_QWORD *)(size + 32);
              if (v41 >= v45)
                break;
              size = *v44;
              p_size = v44;
              if (!*v44)
                goto LABEL_64;
            }
            if (v45 >= v41)
              break;
            size = v44[1];
            if (!size)
            {
              p_size = v44 + 1;
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          v46 = (uint64_t *)operator new(0x28uLL);
          v46[4] = v41;
          *v46 = 0;
          v46[1] = 0;
          v46[2] = (uint64_t)v44;
          *p_size = (std::string::size_type)v46;
          if (*(_QWORD *)v78.__r_.__value_.__l.__data_)
          {
            v78.__r_.__value_.__r.__words[0] = *(_QWORD *)v78.__r_.__value_.__l.__data_;
            v47 = (uint64_t *)*p_size;
          }
          else
          {
            v47 = v46;
          }
          sub_21DF25404((uint64_t *)v78.__r_.__value_.__l.__size_, v47);
          ++v78.__r_.__value_.__r.__words[2];
        }
      }
    }
    while (v28 != v30);
    v48 = (std::string::__raw *)v78.__r_.__value_.__r.__words[0];
    a2 = v74;
    if ((std::string::size_type *)v78.__r_.__value_.__l.__data_ == &v78.__r_.__value_.__r.__words[1])
      goto LABEL_93;
    do
    {
      v49 = v48[1].__words[1];
      v50 = *(_DWORD *)(v49 + 20);
      if ((v50 & 0x40000000) != 0)
      {
        v52 = *(_QWORD *)(v49 - 8);
        v51 = v50 & 0x7FFFFFF;
        if (!v51)
          goto LABEL_80;
      }
      else
      {
        v51 = v50 & 0x7FFFFFF;
        v52 = v49 - 32 * v51;
        if (!v51)
          goto LABEL_80;
      }
      v53 = 32 * v51;
      v54 = (_QWORD **)(v52 + 16);
      do
      {
        if (*(v54 - 2))
        {
          **v54 = *(v54 - 1);
          v55 = (uint64_t)*(v54 - 1);
          if (v55)
            *(_QWORD *)(v55 + 16) = *v54;
        }
        *(v54 - 2) = 0;
        v54 += 4;
        v53 -= 32;
      }
      while (v53);
LABEL_80:
      v56 = (std::string *)v48->__words[1];
      if (v56)
      {
        do
        {
          v57 = v56;
          v56 = (std::string *)v56->__r_.__value_.__r.__words[0];
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (std::string *)v48->__words[2];
          v8 = v57->__r_.__value_.__r.__words[0] == (_QWORD)v48;
          v48 = (std::string::__raw *)v57;
        }
        while (!v8);
      }
      v48 = (std::string::__raw *)v57;
    }
    while (v57 != (std::string *)&v78.__r_.__value_.__r.__words[1]);
    v58 = v78.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v78.__r_.__value_.__l.__data_ != &v78.__r_.__value_.__r.__words[1])
    {
      do
      {
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v58 + 32));
        v59 = *(std::string **)(v58 + 8);
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (std::string *)v59->__r_.__value_.__r.__words[0];
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = *(std::string **)(v58 + 16);
            v8 = v60->__r_.__value_.__r.__words[0] == v58;
            v58 = (std::string::size_type)v60;
          }
          while (!v8);
        }
        v58 = (std::string::size_type)v60;
      }
      while (v60 != (std::string *)&v78.__r_.__value_.__r.__words[1]);
    }
LABEL_93:
    if (v28)
      operator delete(v28);
    sub_21DF2E824((_QWORD *)v78.__r_.__value_.__l.__size_);
LABEL_116:
    v3 = v76;
    v5 = v77 + 40;
  }
  while (v77 + 40 != v75);
}

void sub_21DF78330(uint64_t a1)
{
  sub_21DF2E650(a1);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF78354()
{
  return "compute_program";
}

uint64_t sub_21DF78360()
{
  return 16;
}

uint64_t sub_21DF78368(uint64_t a1)
{
  llvm::Module *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  llvm::GlobalValue *v8;
  const char *v9;
  __int16 v10;

  if (*(_DWORD *)(a1 + 992) == 31)
  {
    if (llvm::Module::getGlobalVariable())
    {
      llvm::GlobalObject::setSection();
      sub_21DF7A774(a1);
    }
    if (llvm::Module::getGlobalVariable())
      sub_21DF7A774(a1);
    if (llvm::Module::getGlobalVariable())
      sub_21DF7A774(a1);
  }
  v2 = *(llvm::Module **)(a1 + 320);
  v9 = "agx.compute_driver_bindings";
  v10 = 259;
  if (!llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v9))
  {
    v5 = *(_QWORD *)(a1 + 320);
    v6 = v5 + 24;
    for (i = *(_QWORD *)(v5 + 32); i != v6; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = (llvm::GlobalValue *)(i - 56);
      else
        v8 = 0;
      if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
      {
        sub_21DF2F440(a1, (uint64_t)v8);
        break;
      }
    }
  }
  v3 = sub_21DF2D264(*(_QWORD *)(a1 + 400), a1, *(_QWORD *)(a1 + 320), 16843009, 3, 0);
  result = 0;
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    if ((_DWORD)result)
    {
      sub_21DF40324(a1);
      return 1;
    }
  }
  return result;
}

void sub_21DF784F4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *v5;
  void **v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  void *v10;
  std::string::size_type v11;
  int v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  void *v23[2];
  unsigned __int8 v24;
  _DWORD v25[2];
  void *v26[2];
  uint64_t v27;
  std::string v28;
  void *v29[2];
  char v30;
  void *__p;
  std::string::size_type v32;
  unsigned __int8 v33;
  __int128 __dst;
  uint64_t v35;
  std::string v36;
  std::string v37;

  sub_21DF1AF28(v26, (char *)&unk_21DFAD77A);
  sub_21DF1AF28(v23, "token");
  std::to_string(&v36, *(_DWORD *)(a1 + 992));
  if ((v24 & 0x80u) == 0)
    v4 = v24;
  else
    v4 = (size_t)v23[1];
  v5 = &v37;
  sub_21DF2BBDC((uint64_t)&v37, v4 + 3);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if ((v24 & 0x80u) == 0)
      v6 = v23;
    else
      v6 = (void **)v23[0];
    memmove(v5, v6, v4);
  }
  *(_DWORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 2112032;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v36;
  else
    v7 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v37, (const std::string::value_type *)v7, size);
  v10 = (void *)v9->__r_.__value_.__r.__words[0];
  v11 = v9->__r_.__value_.__l.__size_;
  v25[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v25 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
  {
    sub_21DF205EC(&__dst, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    __dst = *(_OWORD *)v26;
    v35 = v27;
  }
  sub_21DF35908((void **)&v36.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_21DF1AF28(v29, "{");
  sub_21DF35908(&__p, (std::string::value_type *)v29, 0);
  if ((v33 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v14 = v33;
  else
    v14 = v32;
  v15 = std::string::append(&v36, p_p, v14);
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v33 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)__dst);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v12 & 0x80000000) == 0)
  {
LABEL_38:
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v36.__r_.__value_.__l.__size_ = v11;
    LODWORD(v36.__r_.__value_.__r.__words[2]) = v25[0];
    *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v25 + 3);
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = v12;
    v17 = v12;
LABEL_41:
    v28 = v36;
    goto LABEL_42;
  }
  sub_21DF205EC(&v36, v10, v11);
  v17 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_41;
  sub_21DF205EC(&v28, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
LABEL_42:
  sub_21DF35908(&__p, (std::string::value_type *)&v28, 1);
  if ((v33 & 0x80u) == 0)
    v18 = (const std::string::value_type *)&__p;
  else
    v18 = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v19 = v33;
  else
    v19 = v32;
  std::string::append(&v37, v18, v19);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_52;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (v17 < 0)
LABEL_52:
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_53:
  sub_21DF1AF28(&__p, "}");
  sub_21DF35908((void **)&v36.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v37;
  else
    v20 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v21 = v37.__r_.__value_.__l.__size_;
  v22 = std::string::insert(&v36, 0, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v12 < 0)
LABEL_65:
    operator delete(v10);
LABEL_66:
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

BOOL sub_21DF7888C(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t *v3;
  __int16 v4;
  int v5;
  uint64_t *v6;
  int v7;
  int v8;

  v2 = sub_21DF2EDB4(a1, *(int **)(*(_QWORD *)(a1 + 400) + 128));
  if (v2)
  {
    v3 = sub_21DF2EB00(a1);
    v5 = sub_21DF2DC24((uint64_t)v3, v4);
    v6 = (uint64_t *)(a1 + 704);
    *(_BYTE *)(a1 + 774) = 1;
    v7 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_21DF34D10(v6, v5);
    v8 = sub_21DF2DC24((uint64_t)v6, v7);
    sub_21DF2ED04((uint64_t)v6, v8);
  }
  return v2;
}

uint64_t sub_21DF78918(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;

  v3 = a2;
  switch(a3)
  {
    case 1:
      v11 = a1 + 8;
      v12 = 152;
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
        v12 = 264;
      v13 = *(_QWORD *)(a1 + v12);
      v16 = 257;
      v10 = sub_21DF20674(v11, a2, v13, (uint64_t)v15);
      goto LABEL_8;
    case 3:
    case 6:
      v5 = a1 + 8;
      v6 = *(_QWORD *)(a1 + 296);
      v16 = 257;
      v7 = 49;
      v8 = v3;
      goto LABEL_4;
    case 4:
    case 7:
      v9 = *(_QWORD *)(a1 + 296);
      v16 = 257;
      v8 = sub_21DF1A79C(a1 + 8, 49, a2, v9, (uint64_t)v15);
      v6 = *(_QWORD *)(a1 + 288);
      v16 = 257;
      v5 = a1 + 8;
      v7 = 38;
LABEL_4:
      v10 = sub_21DF1A79C(v5, v7, v8, v6, (uint64_t)v15);
LABEL_8:
      v3 = v10;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t sub_21DF78A10(uint64_t a1, llvm::Type *this)
{
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  llvm::LLVMContext *v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  llvm::LLVMContext *v10;

  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 136) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 72) = this;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 16) = 0x200000000;
  *(_QWORD *)(a1 + 88) = a1 + 136;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 512;
  *(_BYTE *)(a1 + 110) = 7;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24E1F2568;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 144) = llvm::Type::getVoidTy(this, this);
  *(_QWORD *)(a1 + 152) = llvm::Type::getHalfTy(*(llvm::Type **)(a1 + 72), v4);
  *(_QWORD *)(a1 + 160) = llvm::Type::getFloatTy(*(llvm::Type **)(a1 + 72), v5);
  *(_QWORD *)(a1 + 168) = llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 72), v6);
  *(_QWORD *)(a1 + 176) = llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 72), v7);
  *(_QWORD *)(a1 + 184) = llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 72), v8);
  *(_QWORD *)(a1 + 192) = llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), v9);
  *(_QWORD *)(a1 + 200) = llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 72), v10);
  *(_QWORD *)(a1 + 208) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 216) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 224) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 232) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 240) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 248) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 256) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 264) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 272) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 280) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 288) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 296) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 304) = llvm::FixedVectorType::get();
  *(_QWORD *)(a1 + 312) = llvm::IntegerType::get();
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = this;
  return a1;
}

uint64_t sub_21DF78BE0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  _BYTE v12[32];
  __int16 v13;

  v4 = (uint64_t)a2;
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 160);
  if (*a2 != v6)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      v6 = llvm::FixedVectorType::get();
      v8 = *(unsigned __int8 *)(v5 + 8);
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 8);
    }
    if ((v8 & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v5 + 16) + 8);
    v9 = a1 + 8;
    if (v8 > 6)
    {
      v13 = 257;
      if (a3)
        return sub_21DF2053C(v9, v4, v6, (uint64_t)v12);
      else
        return sub_21DF20594(v9, v4, v6, (uint64_t)v12);
    }
    else
    {
      v13 = 257;
      return sub_21DF2F978(v9, v4, v6, (uint64_t)v12);
    }
  }
  return v4;
}

uint64_t sub_21DF78CC0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *a3 = 1;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    *a3 = *(_DWORD *)(a2 + 32);
    a2 = **(_QWORD **)(a2 + 16);
  }
  result = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  v5 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = vextq_s8(*(int8x16_t *)(a1 + 184), *(int8x16_t *)(a1 + 184), 8uLL);
  v9 = v5;
  while (a2 != v6.i64[result])
  {
    if (++result == 6)
      return 9;
  }
  return result;
}

uint64_t sub_21DF78D78(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v18;
  size_t v19;
  uint64_t v20;
  _WORD v21[20];
  uint64_t *v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v7 = (llvm::Value *)a2;
  v27 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v9 = *a2;
  if (a1[19] == a3)
  {
    v10 = a1 + 20;
  }
  else
  {
    if (a1[23] != a3 && a1[22] != a3 && a1[21] != a3)
      return (uint64_t)v7;
    v10 = a1 + 24;
  }
  v11 = *v10;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
    v11 = llvm::FixedVectorType::get();
  v12 = *(_DWORD *)(v11 + 8) & 0xFE;
  if (v12 == 18)
    v13 = *(unsigned __int8 *)(**(_QWORD **)(v11 + 16) + 8);
  else
    v13 = *(_DWORD *)(v11 + 8);
  if (v13 > 6)
  {
    v26 = 257;
    if (a4)
      v15 = 40;
    else
      v15 = 39;
    return sub_21DF1A79C((uint64_t)(a1 + 1), v15, (uint64_t)v7, v11, (uint64_t)&v23);
  }
  if (!a5)
  {
    v26 = 257;
    return sub_21DF2F978((uint64_t)(a1 + 1), (uint64_t)v7, v11, (uint64_t)&v23);
  }
  if (v12 == 18)
    v14 = (*(_DWORD *)(v11 + 32) - 1);
  else
    v14 = 0;
  v23 = &v25;
  v24 = xmmword_21DFA6180;
  sub_21DF2DA34(&v23, "llvm.agx2.unopt.convert", "");
  v18 = strlen(off_24E1F2590[v14]);
  sub_21DF2DA34(&v23, off_24E1F2590[v14], &off_24E1F2590[v14][v18]);
  v19 = strlen(off_24E1F2570[v14]);
  sub_21DF2DA34(&v23, off_24E1F2570[v14], &off_24E1F2570[v14][v19]);
  v20 = sub_21DF78FB4((uint64_t)a1, (uint64_t)v23, v24, v11, v9);
  v21[16] = 257;
  v7 = sub_21DF191A4((uint64_t)(a1 + 1), *(_QWORD *)(v20 + 24), v20, (uint64_t)&v22, 1, (uint64_t)v21);
  if (v23 != &v25)
    free(v23);
  return (uint64_t)v7;
}

uint64_t sub_21DF78FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD __src[2];
  void *v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  __src[0] = a5;
  __src[1] = 0;
  v9[0] = v10;
  v9[1] = (void *)0x200000000;
  sub_21DF1B18C((uint64_t)v9, __src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v6 = v5;
  if (v9[0] != v10)
    free(v9[0]);
  return v6;
}

uint64_t sub_21DF79090(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  _BYTE v10[32];
  __int16 v11;

  v3 = a3;
  v4 = a2;
  if (a1[19] == a3 || a1[23] == a3 || a1[22] == a3)
  {
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v3 = llvm::FixedVectorType::get();
    if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
      v6 = *(unsigned __int8 *)(**(_QWORD **)(v3 + 16) + 8);
    else
      v6 = *(_DWORD *)(v3 + 8);
    v7 = (uint64_t)(a1 + 1);
    v11 = 257;
    if (v6 > 6)
      return sub_21DF1A79C(v7, 38, v4, v3, (uint64_t)v10);
    else
      return sub_21DF20674(v7, v4, v3, (uint64_t)v10);
  }
  return v4;
}

uint64_t sub_21DF79174(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  llvm::Value *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v15;
  size_t v16;
  uint64_t v17;
  _WORD v18[20];
  uint64_t *v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v4 = (llvm::Value *)a2;
  v24 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v7 = *a2;
  switch(a3)
  {
    case 1:
      v8 = (uint64_t *)(a1 + 152);
      goto LABEL_6;
    case 2:
      v8 = (uint64_t *)(a1 + 168);
      goto LABEL_6;
    case 4:
    case 7:
      v8 = (uint64_t *)(a1 + 184);
      goto LABEL_6;
    case 5:
    case 8:
      v8 = (uint64_t *)(a1 + 176);
LABEL_6:
      v9 = *v8;
      if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
        v9 = llvm::FixedVectorType::get();
      v10 = *(_DWORD *)(v9 + 8) & 0xFE;
      if (v10 == 18)
        v11 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
      else
        v11 = *(_DWORD *)(v9 + 8);
      if (v11 > 6)
      {
        v23 = 257;
        return sub_21DF1A79C(a1 + 8, 38, (uint64_t)v4, v9, (uint64_t)&v20);
      }
      if (!a4)
      {
        v23 = 257;
        return sub_21DF20674(a1 + 8, (uint64_t)v4, v9, (uint64_t)&v20);
      }
      if (v10 == 18)
        v12 = (*(_DWORD *)(v9 + 32) - 1);
      else
        v12 = 0;
      v20 = &v22;
      v21 = xmmword_21DFA6180;
      sub_21DF2DA34(&v20, "llvm.agx2.unopt.convert", "");
      v15 = strlen(off_24E1F2570[v12]);
      sub_21DF2DA34(&v20, off_24E1F2570[v12], &off_24E1F2570[v12][v15]);
      v16 = strlen(off_24E1F2590[v12]);
      sub_21DF2DA34(&v20, off_24E1F2590[v12], &off_24E1F2590[v12][v16]);
      v17 = sub_21DF78FB4(a1, (uint64_t)v20, v21, v9, v7);
      v18[16] = 257;
      v4 = sub_21DF191A4(a1 + 8, *(_QWORD *)(v17 + 24), v17, (uint64_t)&v19, 1, (uint64_t)v18);
      if (v20 != &v22)
        free(v20);
      return (uint64_t)v4;
    default:
      return (uint64_t)v4;
  }
}

uint64_t sub_21DF7939C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[32];
  __int16 v8;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    a3 = llvm::FixedVectorType::get();
  v8 = 257;
  return sub_21DF1A79C(a1 + 8, 49, a2, a3, (uint64_t)v7);
}

uint64_t sub_21DF79408(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[20];
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1 && a4)
  {
    LOWORD(v12) = 257;
    v6 = llvm::ConstantInt::get();
    return sub_21DF79584(a1 + 8, a2, v6, (uint64_t)v11);
  }
  else
  {
    v11[0] = llvm::ConstantInt::get();
    v11[1] = llvm::ConstantInt::get();
    v11[2] = llvm::ConstantInt::get();
    v11[3] = llvm::ConstantInt::get();
    v12 = llvm::ConstantInt::get();
    v13 = llvm::ConstantInt::get();
    v14 = llvm::ConstantInt::get();
    v15 = llvm::ConstantInt::get();
    v8 = llvm::ConstantVector::get();
    v9 = llvm::UndefValue::get();
    v10[16] = 257;
    return sub_21DF19EE8(a1 + 8, a2, v9, v8, (uint64_t)v10);
  }
}

uint64_t sub_21DF79584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 320))(*(_QWORD *)(a1 + 72), a2, a3);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      sub_21DF1A3A4((uint64_t *)a1, v8, a4);
  }
  else
  {
    v15 = 257;
    v8 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x2207A6EC8](v8, a2, a3, v14, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)a1;
      v12 = v11 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t sub_21DF7969C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  v17 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    llvm::FixedVectorType::get();
    v8 = llvm::UndefValue::get();
    v12 = 257;
    v9 = llvm::ConstantInt::get();
    return sub_21DF7980C(a1 + 8, v8, v3, v9, (uint64_t)v11);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + 32) != a3)
  {
    v13 = llvm::ConstantInt::get();
    v14 = llvm::ConstantInt::get();
    v15 = llvm::ConstantInt::get();
    v16 = llvm::ConstantInt::get();
    v5 = llvm::ConstantVector::get();
    v6 = llvm::UndefValue::get();
    v12 = 257;
    return sub_21DF19EE8(a1 + 8, v3, v6, v5, (uint64_t)v11);
  }
  return v3;
}

uint64_t sub_21DF7980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;

  if (a2
    && *(unsigned __int8 *)(a2 + 16) <= 0x14u
    && a3
    && *(unsigned __int8 *)(a3 + 16) <= 0x14u
    && a4
    && *(unsigned __int8 *)(a4 + 16) <= 0x14u)
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 328))(*(_QWORD *)(a1 + 72), a2, a3, a4);
    if (v10)
      v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
    else
      v11 = 0;
    if (v11)
      sub_21DF1A3A4((uint64_t *)a1, v10, a5);
  }
  else
  {
    v17 = 257;
    v10 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x2207A6E8C](v10, a2, a3, a4, v16, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v10, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)a1;
      v14 = v13 + 16 * v12;
      do
      {
        llvm::Instruction::setMetadata();
        v13 += 16;
      }
      while (v13 != v14);
    }
  }
  return v10;
}

uint64_t sub_21DF79940(uint64_t a1, llvm::Type *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  llvm::Constant *v6;
  llvm::Constant *v7;
  uint64_t NullValue;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;

  LODWORD(v3) = a3;
  v4 = (uint64_t)a2;
  v6 = *(llvm::Constant **)a2;
  v7 = *(llvm::Constant **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = (llvm::Constant *)**((_QWORD **)v6 + 2);
  NullValue = llvm::Constant::getNullValue(v7, a2);
  if (*((_DWORD *)v7 + 2) > 6u)
    v9 = llvm::ConstantInt::get();
  else
    v9 = llvm::ConstantFP::get();
  v10 = v9;
  v11 = *((_DWORD *)v6 + 8);
  v12 = v11 - v3;
  if (v11 > v3)
  {
    v3 = v3;
    do
    {
      if (v3 == 3)
        v13 = v10;
      else
        v13 = NullValue;
      v17 = 257;
      v14 = llvm::ConstantInt::get();
      v4 = sub_21DF7980C(a1 + 8, v4, v13, v14, (uint64_t)v16);
      ++v3;
      --v12;
    }
    while (v12);
  }
  return v4;
}

uint64_t sub_21DF79A74(uint64_t a1, llvm::Constant *a2, llvm::Constant **a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    sub_21DF79B44(a2, a3, 0);
    v6 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        if (!a3[i])
        {
          v11 = 257;
          v8 = llvm::ConstantInt::get();
          a3[i] = (llvm::Constant *)sub_21DF79584(a1 + 8, (uint64_t)a2, v8, (uint64_t)v10);
        }
      }
    }
  }
  else
  {
    *a3 = a2;
    return 1;
  }
  return v6;
}

void sub_21DF79B44(llvm::Constant *a1, void *a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _OWORD v19[2];
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  bzero(a2, 0x20uLL);
  if (a1 && a3 <= 5)
  {
    while (1)
    {
      v6 = *((unsigned __int8 *)a1 + 16);
      if (v6 != 90)
        break;
      v7 = *((_QWORD *)a1 - 4);
      if (v7)
        v8 = *(_BYTE *)(v7 + 16) == 16;
      else
        v8 = 0;
      if (v8)
      {
        v9 = (unsigned int *)(v7 + 24);
        if (*(_DWORD *)(v7 + 32) >= 0x41u)
          v9 = *(unsigned int **)v9;
        v10 = *v9;
        if (!*((_QWORD *)a2 + v10))
          *((_QWORD *)a2 + v10) = *((_QWORD *)a1 - 8);
        a1 = (llvm::Constant *)*((_QWORD *)a1 - 12);
        if (a1)
          continue;
      }
      return;
    }
    if (v6 == 91)
    {
      memset(v20, 0, sizeof(v20));
      memset(v19, 0, sizeof(v19));
      v11 = a3 + 1;
      sub_21DF79B44(*((_QWORD *)a1 - 8), v20, v11);
      sub_21DF79B44(*((_QWORD *)a1 - 4), v19, v11);
      v12 = *(unsigned int *)(*(_QWORD *)a1 + 32);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(_DWORD *)(**((_QWORD **)a1 - 8) + 32);
        do
        {
          if (!*((_QWORD *)a2 + v13))
          {
            v15 = *(int *)(*((_QWORD *)a1 + 8) + 4 * v13);
            if ((_DWORD)v15 == -1)
            {
              v16 = llvm::UndefValue::get();
            }
            else if (v15 >= v14)
            {
              v16 = *((_QWORD *)v19 + v15 - v14);
            }
            else
            {
              v16 = *((_QWORD *)v20 + v15);
            }
            *((_QWORD *)a2 + v13) = v16;
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    else if (v6 <= 0x14)
    {
      v17 = *(unsigned int *)(*(_QWORD *)a1 + 32);
      if ((_DWORD)v17)
      {
        for (i = 0; i != v17; ++i)
        {
          if (!*((_QWORD *)a2 + i))
            *((_QWORD *)a2 + i) = llvm::Constant::getAggregateElement(a1);
        }
      }
    }
  }
}

void sub_21DF79D0C(uint64_t a1, _BYTE *a2, void *a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _WORD v13[22];
  unsigned int v14;

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 12);
  bzero(a3, 8 * v6);
  if (a2[16] == 93)
  {
    v7 = a2;
    do
    {
      if (*((_DWORD *)v7 + 18) != 1)
        break;
      v8 = **((unsigned int **)v7 + 8);
      if (!*((_QWORD *)a3 + v8))
        *((_QWORD *)a3 + v8) = *((_QWORD *)v7 - 4);
      v7 = (_BYTE *)*((_QWORD *)v7 - 8);
    }
    while (v7[16] == 93 && v7 != 0);
  }
  v14 = 0;
  if ((_DWORD)v6)
  {
    v10 = 0;
    v11 = a1 + 8;
    do
    {
      if (!*((_QWORD *)a3 + v10))
      {
        v13[16] = 257;
        v12 = sub_21DF1ACD0(v11, (uint64_t)a2, (uint64_t)&v14, 1, (uint64_t)v13);
        v10 = v14;
        *((_QWORD *)a3 + v14) = v12;
      }
      v14 = ++v10;
    }
    while (v10 < v6);
  }
}

uint64_t sub_21DF79DF4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t Splat;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  if (a2 != 1)
  {
    llvm::ConstantInt::get();
    Splat = llvm::ConstantDataVector::getSplat();
    llvm::FixedVectorType::get();
    v6 = llvm::UndefValue::get();
    v12 = 257;
    v7 = llvm::ConstantInt::get();
    v8 = sub_21DF7980C(a1 + 8, v6, a3, v7, (uint64_t)v11);
    v9 = llvm::UndefValue::get();
    v12 = 257;
    return sub_21DF19EE8(a1 + 8, v8, v9, Splat, (uint64_t)v11);
  }
  return a3;
}

uint64_t sub_21DF79ED0(uint64_t a1, llvm::Type **a2, int a3)
{
  uint64_t v4;
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = (uint64_t)a2;
  v6 = *a2;
  if (llvm::Type::getScalarSizeInBits(*a2) != 32)
  {
    v7 = *(_QWORD *)(a1 + 192);
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12)
      v7 = llvm::FixedVectorType::get();
    v11 = 257;
    if (a3)
      v8 = 40;
    else
      v8 = 39;
    return sub_21DF1A79C(a1 + 8, v8, v4, v7, (uint64_t)v10);
  }
  return v4;
}

llvm::Value *sub_21DF79F74(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *v12;
  _BYTE v13[32];
  __int16 v14;
  llvm::Constant *v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    llvm::FixedVectorType::get();
    v6 = llvm::UndefValue::get();
    memset(v16, 0, sizeof(v16));
    sub_21DF79A74(a1, a3, (llvm::Constant **)v16);
    v7 = *(unsigned int *)(*(_QWORD *)a3 + 32);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v12 = (llvm::Value *)*((_QWORD *)v16 + i);
        v14 = 257;
        v9 = sub_21DF191A4(a1 + 8, *(_QWORD *)(a2 + 24), a2, (uint64_t)&v12, 1, (uint64_t)v13);
        v12 = v9;
        v14 = 257;
        v10 = llvm::ConstantInt::get();
        v6 = sub_21DF7980C(a1 + 8, v6, (uint64_t)v9, v10, (uint64_t)v13);
      }
    }
  }
  else
  {
    v14 = 257;
    return sub_21DF191A4(a1 + 8, *(_QWORD *)(a2 + 24), a2, (uint64_t)&v15, 1, (uint64_t)v13);
  }
  return (llvm::Value *)v6;
}

uint64_t sub_21DF7A0F0(uint64_t a1, llvm::Constant *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
    return (*(uint64_t (**)(uint64_t, llvm::Constant *))(a3 + 16))(a3, a2);
  memset(v14, 0, sizeof(v14));
  sub_21DF79A74(a1, a2, (llvm::Constant **)v14);
  v6 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  if (!(_DWORD)v6)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, *((_QWORD *)v14 + v7));
    if (!v8)
    {
      llvm::FixedVectorType::get();
      v8 = llvm::UndefValue::get();
    }
    v13 = 257;
    v10 = llvm::ConstantInt::get();
    v8 = sub_21DF7980C(a1 + 8, v8, v9, v10, (uint64_t)v12);
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

uint64_t sub_21DF7A26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;

  v3 = a1 + 8;
  v13 = 257;
  v4 = sub_21DF20300(a1 + 8, a2, a3, (uint64_t)v12);
  v13 = 257;
  v5 = llvm::ConstantInt::get();
  v6 = sub_21DF79584(v3, v4, v5, (uint64_t)v12);
  v7 = *(unsigned int *)(*(_QWORD *)v4 + 32);
  if (v7 >= 2)
  {
    for (i = 1; i != v7; ++i)
    {
      v13 = 257;
      v9 = llvm::ConstantInt::get();
      v10 = sub_21DF79584(v3, v4, v9, (uint64_t)v12);
      v13 = 257;
      v6 = sub_21DF2074C(v3, v6, v10, (uint64_t)v12);
    }
  }
  return v6;
}

uint64_t sub_21DF7A358(uint64_t a1, llvm::Type ***a2, llvm::Type ***a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE v9[32];
  __int16 v10;

  v5 = (uint64_t)a3;
  if (*a2 != *a3)
    v5 = sub_21DF79DF4(a1, *((_DWORD *)*a2 + 8), (uint64_t)a3);
  v10 = 257;
  sub_21DF19478((uint64_t *)(a1 + 8), a4, a2, v5, (uint64_t)v9);
  v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_21DF7A400(uint64_t a1, llvm::Type ***a2, uint64_t a3, int a4)
{
  llvm::Type ***v6;
  uint64_t v7;
  llvm::Type ***v8;
  uint64_t v9;
  llvm::Type ***v10;
  uint64_t v11;

  if (a4)
  {
    v6 = (llvm::Type ***)llvm::ConstantInt::get();
    v7 = sub_21DF7A358(a1, a2, v6, 40);
    v8 = (llvm::Type ***)llvm::ConstantInt::get();
    v9 = a1;
    v10 = (llvm::Type ***)v7;
    v11 = 38;
  }
  else
  {
    v8 = (llvm::Type ***)llvm::ConstantInt::get();
    v9 = a1;
    v10 = a2;
    v11 = 36;
  }
  return sub_21DF7A358(v9, v10, v8, v11);
}

uint64_t sub_21DF7A4C8(llvm::GlobalValue *this)
{
  uint64_t result;

  result = 0;
  if (this && *((_BYTE *)this + 16) == 3)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0 && (llvm::GlobalValue::isDeclaration(this) & 1) == 0)
      return *((_QWORD *)this - 4);
    else
      return 0;
  }
  return result;
}

uint64_t sub_21DF7A518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v5 = sub_21DF7969C(a1, a2, 4);
  v9 = 257;
  v6 = llvm::ConstantInt::get();
  return sub_21DF7980C(a1 + 8, v5, a3, v6, (uint64_t)v8);
}

uint64_t sub_21DF7A588(uint64_t a1, llvm::Type *a2)
{
  uint64_t *v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  uint64_t FirstInsertionPt;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = (uint64_t *)(a1 + 8);
  v16 = *(_OWORD *)(a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 80);
  if (v5)
    v6 = (llvm::BasicBlock *)(v5 - 24);
  else
    v6 = 0;
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v18 = *(_DWORD *)(a1 + 104);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
  if (FirstInsertionPt)
    v8 = FirstInsertionPt - 24;
  else
    v8 = 0;
  sub_21DF3F430((uint64_t)v4, v8);
  v15 = 257;
  v9 = sub_21DF7A698(v4, a2, (uint64_t)v14);
  v11 = v16;
  v12 = v17;
  if (v17)
    llvm::MetadataTracking::track();
  v13 = v18;
  sub_21DF18F98((uint64_t)&v11, (uint64_t)v4);
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v17)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t sub_21DF7A698(uint64_t *a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  v8 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a3, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t sub_21DF7A774(uint64_t a1)
{
  uint64_t v1;
  uint64_t Impl;

  v1 = *(_QWORD *)(a1 + 328);
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  Impl = llvm::MDTuple::getImpl();
  return sub_21DF19CD0(v1, Impl);
}

uint64_t sub_21DF7A834(const char *a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;

  result = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    result = sub_21DF241E0((llvm::MDString *)result, a1);
    if (!(_DWORD)result)
      return result;
    v9 = *a3;
    v10 = *a3 + 1;
    *a3 = v10;
    result = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v10);
    if (!result || *(unsigned __int8 *)result - 1 >= 2)
    {
      result = 0;
      *a3 = v9 + 2;
      return result;
    }
    *a3 = v9 + 2;
  }
  else
  {
    if (!result)
      return result;
    if (*(unsigned __int8 *)result - 1 >= 2)
      return 0;
  }
  v11 = *(_QWORD *)(result + 128);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 16;
  else
    v12 = 0;
  if (!v12)
    return 0;
  v13 = (_QWORD *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  *a4 = *v13;
  return 1;
}

uint64_t sub_21DF7A918(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  int v10;

  result = sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.location_index");
  if ((_DWORD)result)
  {
    v9 = *a2 + 1;
    result = sub_21DF7A834(0, a1, (unsigned int *)&v9, a3);
    if ((_DWORD)result)
    {
      v10 = *a2 + 2;
      result = sub_21DF7A834(0, a1, (unsigned int *)&v10, a4);
      if ((_DWORD)result)
      {
        *a2 += 3;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_21DF7A9C8(uint64_t a1, _DWORD *a2, _DWORD *a3, BOOL *a4)
{
  _QWORD *String;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v21;

  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8));
  if (v9 != 11)
    return 0;
  if (*String != 0x706D61732E726961 || *(_QWORD *)((char *)String + 3) != 0x72656C706D61732ELL)
    return 0;
  *a4 = 0;
  *a3 = 1;
  v12 = *(_DWORD *)(a1 + 8);
  v21 = 2;
  if (v12 >= 3)
  {
    do
    {
      if (sub_21DF7A918(a1, &v21, a2, a3))
      {
        v13 = v21;
      }
      else
      {
        v14 = sub_21DF7A834("air.binding", a1, &v21, a2);
        v15 = v21;
        v13 = v21;
        if ((v14 & 1) == 0)
        {
          v13 = ++v21;
          if (sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v15), "air.arg_type_name"))
          {
            v16 = v15 + 2;
            v21 = v16;
            v17 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v13));
            v19 = v18 >= 5 && *(_DWORD *)v17 == 1634890337 && *(_BYTE *)(v17 + 4) == 121;
            *a4 = v19;
            v13 = v16;
          }
        }
      }
    }
    while (v13 < v12);
  }
  return 1;
}

BOOL sub_21DF7AB58(uint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4, _BYTE *a5, BOOL *a6, _BYTE *a7)
{
  _BOOL8 v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  llvm::MDString *v18;
  uint64_t String;
  uint64_t v20;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  BOOL *v30;
  _BYTE *v31;
  unsigned int v32;

  v14 = sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.texture");
  if (v14)
  {
    *a4 = 1;
    v30 = a6;
    v31 = a5;
    *a5 = 0;
    *a6 = 0;
    *a7 = 0;
    v15 = *(_DWORD *)(a1 + 8);
    v32 = 2;
    if (v15 >= 3)
    {
      do
      {
        if ((sub_21DF7A918(a1, &v32, a2, a3) & 1) == 0)
        {
          if (sub_21DF7A834("air.binding", a1, &v32, a2))
          {
            *a3 = 1;
          }
          else
          {
            v16 = v32;
            v17 = ++v32;
            v18 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v16);
            if (!*(_BYTE *)v18)
            {
              String = llvm::MDString::getString(v18);
              if (v20 == 9)
              {
                if (*(_QWORD *)String != 0x746972772E726961 || *(_BYTE *)(String + 8) != 101)
                  continue;
                *a4 = 0;
                goto LABEL_24;
              }
              if (v20 == 17)
              {
                if (*(_QWORD *)String == 0x5F6772612E726961
                  && *(_QWORD *)(String + 8) == 0x6D616E5F65707974
                  && *(_BYTE *)(String + 16) == 101)
                {
                  v32 = v16 + 2;
                  v25 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v17));
                  v27 = v26 >= 5 && *(_DWORD *)v25 == 1634890337 && *(_BYTE *)(v25 + 4) == 121;
                  *v30 = v27;
                }
                continue;
              }
              if (v20 == 14
                && *(_QWORD *)String == 0x646165722E726961
                && *(_QWORD *)(String + 6) == 0x65746972775F6461)
              {
                *a4 = 1;
LABEL_24:
                *v31 = 1;
              }
            }
          }
        }
      }
      while (v32 < v15);
    }
  }
  return v14;
}

BOOL sub_21DF7AD94(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _BOOL8 result;
  int v7;
  _BYTE *v8;

  result = sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.struct_type_info");
  if (result)
  {
    v7 = (*a2)++;
    v8 = *(_BYTE **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v7 + 1));
    if (v8)
    {
      if (((*v8 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v8)) == 0)
        v8 = 0;
    }
    *a3 = v8;
    *a2 = v7 + 2;
    return v8 != 0;
  }
  return result;
}

BOOL sub_21DF7AE2C(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _DWORD *a6, uint64_t *a7, _BYTE *a8, char *a9)
{
  _BOOL8 result;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  _DWORD *v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  _QWORD *String;
  uint64_t v31;
  BOOL v32;
  char v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  int v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[32];
  uint64_t v52;
  unsigned int v53[3];

  if (!sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.buffer"))
  {
    result = sub_21DF241E0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.indirect_buffer");
    if (!result)
      return result;
  }
  *a8 = 0;
  v18 = *(_DWORD *)(a1 + 8);
  LODWORD(v47) = 2;
  if (v18 >= 3)
  {
    do
    {
      if ((sub_21DF7A918(a1, &v47, a3, a4) & 1) == 0
        && (sub_21DF7A834("air.buffer_size", a1, (unsigned int *)&v47, a5) & 1) == 0
        && (sub_21DF7A834("air.arg_type_size", a1, (unsigned int *)&v47, a6) & 1) == 0
        && !sub_21DF7AD94(a1, &v47, a7))
      {
        LODWORD(v47) = (_DWORD)v47 + 1;
      }
    }
    while (v47 < v18);
  }
  v19 = *a5;
  if (*a5)
  {
    if (v19 <= 0xFFFFFFFC && a2 == 2)
      v19 = (v19 + 3) & 0xFFFFFFFC;
    *a5 = v19;
  }
  if (!*a7)
  {
    v34 = 0;
    goto LABEL_65;
  }
  v52 = *a7;
  v47 = v51;
  v48 = v51;
  v49 = 4;
  v50 = 0;
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)__p = 0u;
  sub_21DF75E38(__p, &v52);
  v21 = *((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
  {
LABEL_47:
    v34 = 0;
    goto LABEL_50;
  }
  while (1)
  {
    v22 = *(_DWORD **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v46 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v46 & 0x1FF));
    *(_QWORD *)&v46 = v46 + 1;
    *((_QWORD *)&v46 + 1) = v21 - 1;
    if ((unint64_t)v46 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(_QWORD *)&v46 = v46 - 512;
    }
    sub_21DF6D30C((uint64_t)&v47, v22);
    if (v23)
    {
      v43 = 0;
      v24 = v22[2];
      if (v24)
        break;
    }
LABEL_46:
    v21 = *((_QWORD *)&v46 + 1);
    if (!*((_QWORD *)&v46 + 1))
      goto LABEL_47;
  }
  while (1)
  {
    v42 = 0;
    if (!sub_21DF7AD94((uint64_t)v22, &v43, &v42))
      break;
    sub_21DF75E38(__p, &v42);
    v25 = v43;
LABEL_45:
    if (v25 >= v24)
      goto LABEL_46;
  }
  v26 = v43;
  if (!sub_21DF241E0(*(llvm::MDString **)&v22[2 * v43 + -2 * v22[2]], "air.indirect_argument"))
  {
    v25 = v26 + 1;
    goto LABEL_44;
  }
  v25 = v26 + 1;
  v53[0] = v26 + 1;
  if ((sub_21DF7A834(0, (uint64_t)v22, v53, &v41) & 1) != 0)
    goto LABEL_42;
  v27 = *(unsigned __int8 **)&v22[2 * v25 + -2 * v22[2]];
  if (!v27)
    goto LABEL_44;
  v28 = *v27;
  if (v28 > 0x22 || ((0x7FFFFFFF0uLL >> v28) & 1) == 0)
    goto LABEL_44;
  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)&v27[-8 * *((unsigned int *)v27 + 2) + 8]);
  if (v31 == 21)
  {
    v32 = *String == 0x69646E692E726961 && String[1] == 0x6E6F635F74636572;
    if (v32 && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63)
    {
LABEL_42:
      v25 = v26 + 2;
LABEL_44:
      v43 = v25;
      goto LABEL_45;
    }
  }
  v34 = 1;
LABEL_50:
  v35 = (void **)__p[1];
  v36 = (void **)v45;
  *((_QWORD *)&v46 + 1) = 0;
  v37 = v45 - (unint64_t)__p[1];
  if ((unint64_t)v45 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v35);
      v36 = (void **)v45;
      v35 = (void **)((char *)__p[1] + 8);
      __p[1] = v35;
      v37 = v45 - (_QWORD)v35;
    }
    while ((_QWORD)v45 - (_QWORD)v35 > 0x10uLL);
  }
  v38 = v37 >> 3;
  if (v38 == 1)
  {
    v39 = 256;
LABEL_56:
    *(_QWORD *)&v46 = v39;
  }
  else if (v38 == 2)
  {
    v39 = 512;
    goto LABEL_56;
  }
  if (v35 != v36)
  {
    do
    {
      v40 = *v35++;
      operator delete(v40);
    }
    while (v35 != v36);
    if ((void *)v45 != __p[1])
      *(_QWORD *)&v45 = v45 + (((unint64_t)__p[1] - v45 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v48 != v47)
    free(v48);
LABEL_65:
  *a9 = v34;
  return 1;
}

void sub_21DF7B224(uint64_t a1)
{
  sub_21DF2E650(a1);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF7B248(uint64_t a1)
{
  const char *v1;
  const char *v2;

  if (*(_BYTE *)(a1 + 993))
    v1 = "context_save_toggle";
  else
    v1 = "context_save";
  v2 = "context_restore_toggle";
  if (!*(_BYTE *)(a1 + 993))
    v2 = "context_restore";
  if (*(_BYTE *)(a1 + 992))
    return v1;
  else
    return v2;
}

uint64_t sub_21DF7B288(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 992))
    return 4;
  else
    return 5;
}

uint64_t sub_21DF7B29C(uint64_t a1)
{
  uint64_t Function;
  llvm::Function *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Function *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::Type ***v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t Select;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  int v65;
  uint64_t result;
  _BYTE v67[32];
  __int16 v68;
  _BYTE v69[32];
  __int16 v70;
  _BYTE v71[32];
  __int16 v72;
  _BYTE v73[32];
  __int16 v74;
  _BYTE v75[32];
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81[2];
  _BYTE v82[16];
  __int16 v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  *(_QWORD *)(Function + 112) = 0;
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  if (*(_BYTE *)(a1 + 992))
  {
    v3 = (llvm::Function *)llvm::Module::getFunction();
    v4 = *(_QWORD *)(a1 + 344);
    if (*(_QWORD *)(v4 + 1552))
      strlen(*(const char **)(v4 + 1552));
    sub_21DF206CC();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 344) + 272))(*(_QWORD *)(a1 + 344), Function);
  }
  v5 = llvm::Module::getFunction();
  if (v5)
  {
    v6 = (llvm::Function *)v5;
    v7 = *(_QWORD *)(a1 + 344);
    if (*(_QWORD *)(v7 + 1560))
      strlen(*(const char **)(v7 + 1560));
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v6);
  }
  llvm::Module::getOrInsertNamedMetadata();
  if (*(_BYTE *)(a1 + 993))
  {
    v8 = operator new(0x20uLL);
    v9 = *(_QWORD *)(a1 + 192);
    *v8 = v9;
    v8[1] = v9;
    v8[2] = v9;
    v8[3] = v9;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v11 = v10;
    *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x6A0;
    v83 = 259;
    operator new();
    v12 = llvm::BasicBlock::BasicBlock();
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v12 + 40;
    v81[0] = v82;
    v81[1] = (void *)0x400000000;
    if ((*(_BYTE *)(v11 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v11);
      v13 = *(_QWORD *)(v11 + 88);
      if ((*(_WORD *)(v11 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v11);
        v14 = *(_QWORD *)(v11 + 88);
        goto LABEL_15;
      }
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 88);
    }
    v14 = v13;
LABEL_15:
    v15 = v14 + 40 * *(_QWORD *)(v11 + 96);
    while (v13 != v15)
    {
      sub_21DF19CD0((uint64_t)v81, v13);
      v13 += 40;
    }
    v16 = *(_QWORD *)v81[0];
    v17 = *(_QWORD *)(a1 + 200);
    v76 = 257;
    v18 = sub_21DF1A79C(a1 + 8, 39, v16, v17, (uint64_t)v75);
    v74 = 257;
    v19 = llvm::ConstantInt::get();
    v20 = sub_21DF1A184(a1 + 8, v18, v19, (uint64_t)v73);
    v21 = *((_QWORD *)v81[0] + 1);
    v22 = *(_QWORD *)(a1 + 200);
    v72 = 257;
    v23 = sub_21DF1A79C(a1 + 8, 39, v21, v22, (uint64_t)v71);
    v70 = 257;
    v24 = sub_21DF1A4A0(a1 + 8, v20, v23, (uint64_t)v69);
    v25 = llvm::PointerType::get();
    v68 = 257;
    v26 = (uint64_t *)sub_21DF1A79C(a1 + 8, 48, v24, v25, (uint64_t)v67);
    v27 = (uint64_t *)llvm::ConstantInt::get();
    v76 = 257;
    v28 = sub_21DF1A924(a1, v26, v27, (uint64_t)v75);
    v76 = 257;
    v29 = (llvm::Type ***)sub_21DF19394((uint64_t *)(a1 + 8), **(llvm::Type ***)(*(_QWORD *)v28 + 16), v28, 0, (uint64_t)v75);
    v30 = llvm::ConstantInt::get();
    v76 = 257;
    sub_21DF19478((uint64_t *)(a1 + 8), 33, v29, v30, (uint64_t)v75);
    v31 = (uint64_t *)llvm::ConstantInt::get();
    v76 = 257;
    sub_21DF1A924(a1, v26, v31, (uint64_t)v75);
    v32 = (uint64_t *)llvm::ConstantInt::get();
    v76 = 257;
    sub_21DF1A924(a1, v26, v32, (uint64_t)v75);
    v76 = 257;
    Select = llvm::IRBuilderBase::CreateSelect();
    v34 = *(_QWORD *)(a1 + 200);
    v76 = 257;
    v35 = sub_21DF1A79C(a1 + 8, 47, Select, v34, (uint64_t)v75);
    v36 = *(_QWORD *)(a1 + 200);
    v76 = 257;
    v37 = sub_21DF1A79C(a1 + 8, 39, v35, v36, (uint64_t)v75);
    v76 = 257;
    v38 = llvm::ConstantInt::get();
    v39 = sub_21DF1AE6C(a1 + 8, v37, v38, (uint64_t)v75);
    v40 = *(_QWORD *)(a1 + 192);
    v76 = 257;
    v77 = sub_21DF1A79C(a1 + 8, 38, v39, v40, (uint64_t)v75);
    v41 = *(_QWORD *)(a1 + 192);
    v76 = 257;
    v78 = sub_21DF1A79C(a1 + 8, 38, v35, v41, (uint64_t)v75);
    v42 = *((_QWORD *)v81[0] + 2);
    v43 = *(_QWORD *)(a1 + 200);
    v76 = 257;
    v44 = sub_21DF1A79C(a1 + 8, 39, v42, v43, (uint64_t)v75);
    v74 = 257;
    v45 = llvm::ConstantInt::get();
    v46 = sub_21DF1A184(a1 + 8, v44, v45, (uint64_t)v73);
    v47 = *((_QWORD *)v81[0] + 3);
    v48 = *(_QWORD *)(a1 + 200);
    v72 = 257;
    v49 = sub_21DF1A79C(a1 + 8, 39, v47, v48, (uint64_t)v71);
    v70 = 257;
    v50 = sub_21DF1A4A0(a1 + 8, v46, v49, (uint64_t)v69);
    v51 = llvm::PointerType::get();
    v68 = 257;
    v52 = (uint64_t *)sub_21DF1A79C(a1 + 8, 48, v50, v51, (uint64_t)v67);
    v53 = (uint64_t *)llvm::ConstantInt::get();
    v76 = 257;
    sub_21DF1A924(a1, v52, v53, (uint64_t)v75);
    v76 = 257;
    v54 = llvm::IRBuilderBase::CreateSelect();
    v55 = *(_QWORD *)(a1 + 200);
    v76 = 257;
    v56 = sub_21DF1A79C(a1 + 8, 47, v54, v55, (uint64_t)v75);
    v57 = *(_QWORD *)(a1 + 240);
    v76 = 257;
    v58 = sub_21DF1A79C(a1 + 8, 49, v56, v57, (uint64_t)v75);
    v76 = 257;
    v59 = llvm::ConstantInt::get();
    v79 = sub_21DF79584(a1 + 8, v58, v59, (uint64_t)v75);
    v76 = 257;
    v60 = llvm::ConstantInt::get();
    v80 = sub_21DF79584(a1 + 8, v58, v60, (uint64_t)v75);
    if ((*(_WORD *)(Function + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v61 = *(_QWORD *)(Function + 88);
      if ((*(_WORD *)(Function + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v62 = *(_QWORD *)(Function + 88);
        goto LABEL_23;
      }
    }
    else
    {
      v61 = *(_QWORD *)(Function + 88);
    }
    v62 = v61;
LABEL_23:
    for (i = v62 + 40 * *(_QWORD *)(Function + 96); v61 != i; v61 += 40)
      llvm::Value::replaceAllUsesWith();
    sub_21DF38D0C((uint64_t *)(a1 + 8));
    if (*(_QWORD *)(Function + 72) != Function + 72)
      sub_21DF5BC50(v11 + 72, (uint64_t *)(v11 + 72), Function + 72, *(uint64_t **)(Function + 80), (uint64_t *)(Function + 72));
    if (v81[0] != v82)
      free(v81[0]);
    operator delete(v8);
  }
  v81[0] = "agc.main";
  v83 = 259;
  llvm::Value::setName();
  if (llvm::Module::getGlobalVariable())
  {
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1);
  }
  v64 = llvm::Module::getFunction();
  sub_21DF2F440(a1, v64);
  v65 = sub_21DF2D264(*(_QWORD *)(a1 + 400), a1, *(_QWORD *)(a1 + 320), 16843009, 3, 0);
  result = 0;
  if (v65)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    if ((_DWORD)result)
    {
      sub_21DF40324(a1);
      return 1;
    }
  }
  return result;
}

void sub_21DF7BAF8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  const std::string::value_type *p_p;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  char v12;
  std::string *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  uint64_t i;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  uint64_t v26;
  std::string v27;
  void *v28[2];
  char v29;
  void *__p;
  std::string::size_type v31;
  unsigned __int8 v32;
  __int128 __dst;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_21DF1AF28(v25, (char *)&unk_21DFAD77A);
  sub_21DF1AF28(v23, "save");
  if (*(_BYTE *)(a1 + 992))
    v4 = "true";
  else
    v4 = "false";
  sub_21DF7C0A8(&v37, (const void **)v23, v4);
  sub_21DF1AF28(v21, "toggle");
  if (*(_BYTE *)(a1 + 993))
    v5 = "true";
  else
    v5 = "false";
  sub_21DF7C0A8(&v38, (const void **)v21, v5);
  if (SHIBYTE(v26) < 0)
  {
    sub_21DF205EC(&__dst, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    __dst = *(_OWORD *)v25;
    v34 = v26;
  }
  sub_21DF35908((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_21DF1AF28(v28, "{");
  sub_21DF35908(&__p, (std::string::value_type *)v28, 0);
  if ((v32 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v32 & 0x80u) == 0)
    v7 = v32;
  else
    v7 = v31;
  v8 = std::string::append(&v35, p_p, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = v10;
    v13 = &v37 + v11;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      sub_21DF205EC(&v35, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
    else
      v35 = *v13;
    v14 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      sub_21DF205EC(&v27, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v27 = v35;
    sub_21DF35908(&__p, (std::string::value_type *)&v27, 1);
    if ((v32 & 0x80u) == 0)
      v15 = (const std::string::value_type *)&__p;
    else
      v15 = (const std::string::value_type *)__p;
    if ((v32 & 0x80u) == 0)
      v16 = v32;
    else
      v16 = v31;
    std::string::append(&v36, v15, v16);
    if ((char)v32 < 0)
      operator delete(__p);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v27.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_41;
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_41:
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  sub_21DF1AF28(&__p, "}");
  sub_21DF35908((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v36;
  else
    v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  v19 = std::string::insert(&v35, 0, (const std::string::value_type *)v17, size);
  *a2 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((char)v32 < 0)
    operator delete(__p);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v37 + i * 8 + 24));
  }
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
}

BOOL sub_21DF7BE7C(uint64_t a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  uint64_t *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v28;
  _BOOL4 v29;

  v2 = sub_21DF2EDB4(a1, *(int **)(*(_QWORD *)(a1 + 400) + 128));
  v3 = v2;
  if (v2)
  {
    v29 = v2;
    v4 = sub_21DF2EB00(a1);
    v28 = sub_21DF2DC24((uint64_t)v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (uint64_t *)(a1 + 704);
    do
    {
      *(_BYTE *)(a1 + 774) = 1;
      v11 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
      sub_21DF2E08C((uint64_t *)(a1 + 704), 4, v9);
      sub_21DF2FF00((uint64_t *)(a1 + 704), 6, byte_21DFA0F9C[4 * v9]);
      v12 = sub_21DF2DC24(a1 + 704, v11);
      v13 = v12;
      if ((unint64_t)v7 >= v8)
      {
        v14 = (v7 - v6) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v15)
          v15 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)sub_21DF2EACC(v16);
        else
          v17 = 0;
        v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)v18 = v13;
        v19 = v18 + 4;
        while (v7 != v6)
        {
          v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        v8 = v16 + 4 * v17;
        if (v6)
          operator delete(v6);
        v6 = v18;
        v7 = v19;
      }
      else
      {
        *(_DWORD *)v7 = v12;
        v7 += 4;
      }
      ++v9;
    }
    while (v9 != 4);
    if (v7 == v6)
      v21 = (char *)&unk_2553B3CDA;
    else
      v21 = v6;
    v22 = sub_21DF34C5C(a1 + 704, (uint64_t)v21, (v7 - v6) >> 2);
    *(_BYTE *)(a1 + 774) = 1;
    v23 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_21DF34D10((uint64_t *)(a1 + 704), v22);
    v24 = sub_21DF2DC24(a1 + 704, v23);
    *(_BYTE *)(a1 + 774) = 1;
    v25 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_21DF34D10(v10, v28);
    sub_21DF42F40(v10, v24);
    v26 = sub_21DF2DC24((uint64_t)v10, v25);
    sub_21DF2ED04((uint64_t)v10, v26);
    v3 = v29;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

void sub_21DF7C0A8(std::string *a1, const void **a2, char *__s)
{
  size_t v5;
  std::string *v6;
  const void *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;

  sub_21DF1AF28(__p, __s);
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = &v13;
  sub_21DF2BBDC((uint64_t)&v13, v5 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_21DF7C1A8(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_21DF7C1B4(uint64_t a1, llvm::Type *a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  llvm::MemoryBuffer *v16;
  uint64_t v17;
  char v18;

  v8 = operator new();
  v9 = sub_21DF2E500(v8, a1, a2);
  *(_QWORD *)v9 = off_24E1F25C0;
  *(_BYTE *)(v9 + 992) = a3;
  *(_BYTE *)(v9 + 993) = a4;
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBuffer::getMemBufferRef(v16);
  llvm::parseBitcodeFile();
  v10 = v17;
  if ((v18 & 1) != 0 && v17)
  {
    (*(void (**)())(*(_QWORD *)v17 + 8))();
    v10 = *(_QWORD *)(v8 + 320);
  }
  else
  {
    *(_QWORD *)(v8 + 320) = v17;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 400) + 32);
  v12 = *(void **)(v11 + 8);
  if (v12)
    v13 = strlen(*(const char **)(v11 + 8));
  else
    v13 = 0;
  sub_21DF2CC40(v10, v12, v13);
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 400) + 32);
  if (*(_QWORD *)(v14 + 16))
    strlen(*(const char **)(v14 + 16));
  llvm::Module::setDataLayout();
  sub_21DF2FB64();
  if (v16)
    (*(void (**)())(*(_QWORD *)v16 + 8))();
  return v8;
}

uint64_t sub_21DF7C3C4(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t result;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  std::string::size_type size;
  std::string::size_type v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  sub_21DF58CF4(a1);
  v2 = sub_21DF832C8((uint64_t *)(a1 + 2432));
  v3 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24) + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v3 == *(_QWORD *)(a1 + v5 + 144))
    goto LABEL_41;
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8);
  if (!(_DWORD)v6)
    goto LABEL_41;
  v7 = 0;
  v8 = 8 * v6;
  do
  {
    v9 = *(unsigned __int8 *)(v3 + 8);
    v10 = v3;
    if (v9 == 16)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + v7);
      v9 = *(_DWORD *)(v10 + 8);
    }
    if ((v9 & 0xFE) == 0x12)
      v10 = **(_QWORD **)(v10 + 16);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8 * *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8) + v7);
    if (sub_21DF241E0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8)), "air.render_target"))
    {
      v45 = 0;
      LODWORD(v44) = 1;
      if (!sub_21DF7A834(0, v11, (unsigned int *)&v44, (_DWORD *)&v45 + 1))
        return 0;
      LODWORD(v44) = 2;
      if (!sub_21DF7A834(0, v11, (unsigned int *)&v44, &v45))
        return 0;
      v13 = v45;
      v12 = BYTE4(v45);
      if ((_DWORD)v45 != 1
        || ((v14 = *(_QWORD *)(a1 + 3824)) == 0
          ? (v15 = (unsigned int *)(*(_QWORD *)(a1 + 3816) + 4 * HIDWORD(v45) + 24))
          : (v15 = (unsigned int *)(v14 + 16)),
            (v16 = *v15, (v16 & 1) != 0)
         && (v2 = (__n128)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v16), (int8x16_t)xmmword_21DFA6190), (int32x4_t)xmmword_21DFA61A0), v2.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v2), v2.n128_u16[0] = vmaxv_u16((uint16x4_t)v2.n128_u64[0]), (v2.n128_u8[0] & 1) != 0)))
      {
        v17 = a1 + 32 * HIDWORD(v45);
        v18 = (_QWORD *)(v17 + 3016);
        v19 = (_QWORD *)(v17 + 3272);
        if (!(_DWORD)v45)
          v19 = v18;
        v20 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        if (*(_BYTE *)(a1 + 2440 + ((unint64_t)HIDWORD(v45) << 6) + 33))
        {
          v21 = *(_QWORD *)(a1 + v20 + 160);
          if (v10 == v21)
            goto LABEL_31;
          if (v10 != *(_QWORD *)(a1 + v20 + 152))
            v10 = *(_QWORD *)(a1 + v20 + 160);
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 160 + v20);
        }
        if (v10 != v21)
        {
          v22 = (_QWORD *)(a1 + v20);
          if (v10 == v22[19])
          {
            if (*v19 == v22[34])
              goto LABEL_33;
            v23 = v22 + 33;
          }
          else if (v10 == v22[24])
          {
            v23 = v22 + 37;
          }
          else
          {
            if (v10 != v22[23] || *v19 == v22[37])
            {
LABEL_33:
              if (!v13)
              {
                v24 = 1 << v12;
                if ((v24 & *(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32)) != 0)
                  *(_BYTE *)(a1 + 3008) |= v24;
              }
              goto LABEL_36;
            }
            v23 = v22 + 36;
          }
LABEL_32:
          *v19 = *v23;
          goto LABEL_33;
        }
LABEL_31:
        v23 = (_QWORD *)(a1 + 272 + v20);
        goto LABEL_32;
      }
    }
LABEL_36:
    v7 += 8;
  }
  while (v8 != v7);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 - 24);
LABEL_41:
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + v5 + 344) + 1360);
  v26 = **(_DWORD **)(a1 + 3808);
  if ((v26 & 4) != 0)
    v27 = 1;
  else
    v27 = v26 & 1;
  if (*(_BYTE *)(a1 + 3852))
    v28 = 1;
  else
    v28 = v27;
  *(_BYTE *)(a1 + 3852) = v28;
  result = (*(uint64_t (**)(uint64_t, __n128))(v4 + 360))(a1, v2);
  if (!(_DWORD)result)
    return result;
  if ((v26 & 0x800) != 0)
  {
    v33 = *(_BYTE *)(a1 + 3528);
    goto LABEL_59;
  }
  v30 = *(unsigned __int8 *)(a1 + 3843);
  if (!*(_BYTE *)(a1 + 3843) && !*(_BYTE *)(a1 + 3855))
  {
    if (*(_BYTE *)(a1 + 3852))
    {
      v33 = *(_BYTE *)(a1 + 3528);
LABEL_71:
      v34 = v33 | 2;
      goto LABEL_60;
    }
    if (!*(_BYTE *)(a1 + 3853) || (**(_BYTE **)(a1 + 3808) & 0x10) != 0)
      goto LABEL_61;
    v33 = *(_BYTE *)(a1 + 3528);
    if (!v25)
      goto LABEL_71;
LABEL_59:
    v34 = v33 | 1;
LABEL_60:
    *(_BYTE *)(a1 + 3528) = v34;
    goto LABEL_61;
  }
  if (*(_BYTE *)(a1 + 3853) || *(_BYTE *)(a1 + 3852))
    v31 = *(_BYTE *)(a1 + 3528) | 2;
  else
    v31 = *(_BYTE *)(a1 + 3528);
  v32 = *(unsigned __int8 *)(a1 + 3855);
  *(_BYTE *)(a1 + 3528) = v31 & 0xF3 | (4 * v30) | (8 * v32);
  if (!v30 && v32 && (v31 & 2) != 0)
  {
    *(_BYTE *)(a1 + 3528) = v31 & 0xF3 | (4 * v30) | (8 * v32) | 4;
    *(_BYTE *)(a1 + 3843) = 1;
    *(_QWORD *)(a1 + 3844) = 0x100000000;
  }
LABEL_61:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xEE) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    v44 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    v35 = *(_QWORD *)(a1 + 2960);
    *(_DWORD *)(a1 + 3832) = ~(-1 << (BYTE1(*(_DWORD *)(v35 + 32)) & 0xF));
    if ((((*(_DWORD *)(v35 + 32) >> 8) ^ (*(_DWORD *)(v35 + 32) >> 12)) & 0xF) != 0)
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      v44 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::Module::getOrInsertNamedMetadata();
      v36 = *(_DWORD *)(a1 + 3860) > 1u ? 0 : llvm::MDString::get();
      v44 = v36;
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (*(_DWORD *)(a1 + 3860) == 1)
      {
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        v44 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 3832) = 1;
  }
  *(_QWORD *)(a1 + 3000) = llvm::Module::getOrInsertNamedMetadata();
  v37 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  size = v37[13].__r_.__value_.__l.__size_;
  v39 = size + 8;
  for (i = *(_QWORD *)(size + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v39)
      return 1;
    v41 = (uint64_t *)(i - 56);
    if (!i)
      v41 = 0;
    v42 = *v41;
    if (*v41)
    {
      v43 = *(_DWORD *)(v42 + 8);
      if ((v43 & 0xFE) == 0x12)
        v43 = *(_DWORD *)(**(_QWORD **)(v42 + 16) + 8);
      if ((v43 & 0xFFFFFF00) == 0x300 && v41[1])
        break;
    }
  }
  std::string::append(v37 + 17, "Fragment shaders do not support shader declared threadgroup variables");
  return 0;
}

uint64_t sub_21DF7CAB4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  llvm::Type *v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::Type *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::Type **v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t v23;
  uint64_t *v24;
  llvm::Type **v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t *v30;
  llvm::Type **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _QWORD v43[4];
  __int16 v44;

  for (i = 0; i != 256; i += 32)
  {
    v3 = a1 + i;
    v4 = *(llvm::Type **)(a1 + i + 3016);
    if (v4)
    {
      v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      v44 = 257;
      v6 = sub_21DF7A698(v5, v4, (uint64_t)v43);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(v3 + 3024), v6);
    }
    v7 = *(llvm::Type **)(v3 + 3272);
    if (v7)
    {
      v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
      v44 = 257;
      v9 = sub_21DF7A698(v8, v7, (uint64_t)v43);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + i + 3280), v9);
    }
  }
  v10 = *(_BYTE *)(a1 + 3528);
  if ((v10 & 4) != 0)
  {
    v11 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v40 = *(_OWORD *)(v11 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v11 + 8));
    v42 = *(_DWORD *)(v11 + 104);
    sub_21DF19018(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 3728) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 3728) + 32));
    v12 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v13 = *(llvm::Type **)(v12 + 160);
    v44 = 257;
    v14 = sub_21DF7A698((uint64_t *)(v12 + 8), v13, (uint64_t)v43);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3536), v14);
    sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), *(llvm::Type ***)(a1 + 3728), *(_QWORD *)(a1 + 3552), 0);
    v15 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v37 = v40;
    v38 = v41;
    if (v41)
      llvm::MetadataTracking::track();
    v39 = v42;
    sub_21DF18F98((uint64_t)&v37, v15 + 8);
    if (v38)
      llvm::MetadataTracking::untrack();
    if (v41)
      llvm::MetadataTracking::untrack();
    v10 = *(_BYTE *)(a1 + 3528);
    if ((v10 & 8) == 0)
    {
LABEL_9:
      if ((v10 & 2) == 0)
        goto LABEL_10;
LABEL_20:
      v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v22 = *(llvm::Type **)(v21 + 192);
      v44 = 257;
      v23 = sub_21DF7A698((uint64_t *)(v21 + 8), v22, (uint64_t)v43);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3584), v23);
      v24 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
      v25 = (llvm::Type **)llvm::ConstantInt::get();
      sub_21DF385B0(v24, v25, *(_QWORD *)(a1 + 3600), 0);
      if ((*(_BYTE *)(a1 + 3528) & 1) == 0)
        return 1;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(a1 + 3528) & 8) == 0)
  {
    goto LABEL_9;
  }
  v16 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v17 = *(llvm::Type **)(v16 + 184);
  v44 = 257;
  v18 = sub_21DF7A698((uint64_t *)(v16 + 8), v17, (uint64_t)v43);
  sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3560), v18);
  v19 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
  v20 = (llvm::Type **)llvm::ConstantInt::get();
  sub_21DF385B0(v19, v20, *(_QWORD *)(a1 + 3576), 0);
  v10 = *(_BYTE *)(a1 + 3528);
  if ((v10 & 2) != 0)
    goto LABEL_20;
LABEL_10:
  if ((v10 & 1) == 0)
    return 1;
LABEL_21:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 3808) + 1) & 8) != 0)
  {
    v32 = llvm::User::operator new((llvm::User *)0x58);
    v43[0] = "agc.alpha_test_ref";
    v44 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v33 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v44 = 257;
    v34 = sub_21DF19394((uint64_t *)(v33 + 8), **(llvm::Type ***)(*(_QWORD *)v32 + 16), v32, 0, (uint64_t)v43);
    v35 = sub_21DF81494((_QWORD *)a1, v34);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3632), v35);
  }
  else
  {
    v26 = llvm::ConstantFP::get();
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3632), v26);
    *(_DWORD *)(a1 + 3656) = 6;
    v27 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v28 = *(llvm::Type **)(v27 + 160);
    v44 = 257;
    v29 = sub_21DF7A698((uint64_t *)(v27 + 8), v28, (uint64_t)v43);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3608), v29);
    v30 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
    v31 = (llvm::Type **)llvm::ConstantFP::get();
    sub_21DF385B0(v30, v31, *(_QWORD *)(a1 + 3624), 0);
  }
  return 1;
}

uint64_t sub_21DF7CED8(uint64_t a1)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t *v9;
  llvm::Type **v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Type **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::LLVMContext *v41;
  llvm::GetElementPtrInst *v42;
  llvm::GetElementPtrInst *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Type **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t Splat;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t Select;
  uint64_t v72;
  llvm::Type **v73;
  uint64_t FCmpHelper;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  llvm::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t FPCast;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Type **v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm::Type ***v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Type ***v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::Value *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t result;
  int v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  unsigned int i;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  llvm::Value *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  int v208;
  __int128 v209;
  uint64_t v210;
  int v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  __int128 v218;
  uint64_t v219;
  int v220;
  __int128 v221;
  uint64_t v222;
  int v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  __int128 v227;
  uint64_t v228;
  int v229;
  _QWORD v230[4];
  __int16 v231;
  _OWORD v232[2];
  __int128 v233;
  __int128 v234;
  _OWORD v235[2];
  __int16 v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  if (!Function || !*(_QWORD *)(Function + 8))
    goto LABEL_16;
  v3 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 56);
  *(_QWORD *)&v232[0] = "feedback_output";
  LOWORD(v233) = 259;
  v4 = operator new();
  llvm::BasicBlock::BasicBlock();
  sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
  *(_QWORD *)&v232[0] = "discard";
  LOWORD(v233) = 259;
  v5 = operator new();
  llvm::BasicBlock::BasicBlock();
  sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3664), v5);
  v6 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v7 = *(_QWORD *)(a1 + 3680);
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = v7 + 40;
  if ((*(_BYTE *)(a1 + 3528) & 4) != 0)
  {
    if (MGGetBoolAnswer())
    {
      v8 = (const char *)sub_21DF21324("AGC_RETURN_FOR_DEPTH_FEEDBACK_DISCARD");
      if (v8)
      {
        if (*v8 != 48 && atoi(v8))
        {
          sub_21DF465B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
          goto LABEL_15;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 3528) & 2) != 0)
  {
    v9 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
    v10 = (llvm::Type **)llvm::ConstantInt::get();
    v11 = *(_QWORD *)(a1 + 3600);
    goto LABEL_13;
  }
  if ((*(_BYTE *)(a1 + 3528) & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
    v10 = (llvm::Type **)llvm::ConstantFP::get();
    v11 = *(_QWORD *)(a1 + 3624);
LABEL_13:
    sub_21DF385B0(v9, v10, v11, 0);
  }
  sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
LABEL_15:
  v12 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v12 + 56) = v4;
  *(_QWORD *)(v12 + 64) = v4 + 40;
  if (!*(_BYTE *)(a1 + 3528))
  {
    v82 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v83 = llvm::FixedVectorType::get();
    *(_QWORD *)&v232[0] = "discard_BOOL";
    LOWORD(v233) = 259;
    v13 = sub_21DF38DEC(v82, v83, 2, (uint64_t)v232);
    v84 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v85 = llvm::ConstantInt::get();
    v86 = sub_21DF79DF4(v84, 4, v85);
    sub_21DF38EDC(v13, v86, *(_QWORD *)(a1 + 3680));
    v87 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v88 = llvm::ConstantInt::get();
    v89 = sub_21DF79DF4(v87, 4, v88);
    sub_21DF38EDC(v13, v89, v3);
    goto LABEL_17;
  }
LABEL_16:
  v13 = 0;
LABEL_17:
  v14 = **(_DWORD **)(a1 + 3808);
  if ((v14 & 1) != 0)
  {
    v15 = *(_QWORD *)(a1 + 3016);
    v16 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (v15 == *(_QWORD *)(v16 + 272) || v15 == *(_QWORD *)(v16 + 264))
    {
      v17 = *(_QWORD *)(v16 + 344);
      v227 = *(_OWORD *)(v16 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 8));
      v229 = *(_DWORD *)(v16 + 104);
      v18 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v19 = *(_QWORD *)(a1 + 3040);
      v236 = 257;
      v20 = sub_21DF19394((uint64_t *)(v18 + 8), **(llvm::Type ***)(*(_QWORD *)v19 + 16), v19, 0, (uint64_t)v235);
      LOWORD(v233) = 257;
      v21 = llvm::ConstantInt::get();
      v22 = sub_21DF79584(v18 + 8, v20, v21, (uint64_t)v232);
      v23 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, &v227, v22, (*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 8) & 0xF);
      if (v228)
        llvm::MetadataTracking::untrack();
      v24 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v25 = *(_QWORD *)(a1 + 3600);
      LOWORD(v233) = 257;
      v26 = sub_21DF19394((uint64_t *)(v24 + 8), **(llvm::Type ***)(*(_QWORD *)v25 + 16), v25, 0, (uint64_t)v232);
      v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v233) = 257;
      v28 = (llvm::Type **)sub_21DF1A410(v27, v26, v23, (uint64_t)v232);
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v28, *(_QWORD *)(a1 + 3600), 0);
      v14 = **(_DWORD **)(a1 + 3808);
    }
  }
  if ((v14 & 2) != 0)
  {
    v29 = *(_QWORD *)(a1 + 3016);
    v30 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    if (v29 == v30[34] || v29 == v30[33])
    {
      v31 = *(_QWORD *)(a1 + 3040);
      LOWORD(v233) = 257;
      v32 = sub_21DF19394(v30 + 1, **(llvm::Type ***)(*(_QWORD *)v31 + 16), v31, 0, (uint64_t)v232);
      v33 = llvm::ConstantFP::get();
      v34 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v233) = 257;
      v35 = v34 + 8;
      v36 = llvm::ConstantInt::get();
      v37 = (llvm::Type **)sub_21DF7980C(v35, v32, v33, v36, (uint64_t)v232);
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v37, *(_QWORD *)(a1 + 3040), 0);
      v14 = **(_DWORD **)(a1 + 3808);
    }
  }
  if ((v14 & 4) != 0)
  {
    v38 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v39 = *(_QWORD *)(v38 + 160);
    v40 = *(_QWORD *)(v38 + 192);
    *(_QWORD *)&v232[0] = v39;
    *((_QWORD *)&v232[0] + 1) = v40;
    llvm::StructType::get();
    v41 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
    *(_QWORD *)&v232[0] = "agc.coverage";
    LOWORD(v233) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v42 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v41);
    v43 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v41);
    v44 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v233) = 257;
    v45 = sub_21DF19394((uint64_t *)(v44 + 8), **(llvm::Type ***)(*(_QWORD *)v42 + 16), (uint64_t)v42, 0, (uint64_t)v232);
    v46 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v233) = 257;
    v47 = sub_21DF19394((uint64_t *)(v46 + 8), **(llvm::Type ***)(*(_QWORD *)v43 + 16), (uint64_t)v43, 0, (uint64_t)v232);
    v48 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v49 = *(_QWORD *)(v48 + 344);
    v224 = *(_OWORD *)(v48 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v48 + 8));
    v226 = *(_DWORD *)(v48 + 104);
    v50 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, &v224, v45, (*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 8) & 0xF);
    if (v225)
      llvm::MetadataTracking::untrack();
    if (*(_BYTE *)(a1 + 10) && (**(_BYTE **)(a1 + 3808) & 8) != 0)
    {
      v51 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v233) = 257;
      v50 = sub_21DF3C6D4(v51, v50, (uint64_t)v232);
    }
    v52 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    LOWORD(v233) = 257;
    v53 = sub_21DF1A410(v52, v50, v47, (uint64_t)v232);
    v54 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v55 = *(_QWORD *)(a1 + 3600);
    LOWORD(v233) = 257;
    v56 = sub_21DF19394((uint64_t *)(v54 + 8), **(llvm::Type ***)(*(_QWORD *)v55 + 16), v55, 0, (uint64_t)v232);
    v57 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    LOWORD(v233) = 257;
    v58 = (llvm::Type **)sub_21DF1A410(v57, v56, v53, (uint64_t)v232);
    sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v58, *(_QWORD *)(a1 + 3600), 0);
  }
  v205 = a1;
  if (*(_BYTE *)(a1 + 3842))
  {
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) & 0xE00) != 0)
      v59 = a1 + 3784;
    else
      v59 = a1 + 3760;
    v60 = *(_QWORD *)(v59 + 16);
    v61 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    llvm::ConstantFP::get();
    Splat = llvm::ConstantDataVector::getSplat();
    LOWORD(v233) = 257;
    v63 = sub_21DF20828(v61, v60, Splat, (uint64_t)v232);
    v64 = sub_21DF7A26C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v63, v63);
    v65 = llvm::ConstantFP::get();
    v66 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    LOWORD(v233) = 257;
    v67 = sub_21DF20828(v66, v65, v64, (uint64_t)v232);
    if (*(_BYTE *)(a1 + 3528))
    {
      if ((*(_BYTE *)(a1 + 3528) & 1) != 0)
      {
        llvm::ConstantFP::get();
        LOWORD(v233) = 257;
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
      }
      else
      {
        if ((*(_BYTE *)(a1 + 3528) & 2) != 0)
        {
          v68 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v69 = *(_QWORD *)(a1 + 3600);
          LOWORD(v233) = 257;
          v70 = sub_21DF19394((uint64_t *)(v68 + 8), **(llvm::Type ***)(*(_QWORD *)v69 + 16), v69, 0, (uint64_t)v232);
          llvm::ConstantFP::get();
          LOWORD(v233) = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantInt::get();
          llvm::ConstantInt::get();
          LOWORD(v233) = 257;
          Select = llvm::IRBuilderBase::CreateSelect();
          v72 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          LOWORD(v233) = 257;
          v73 = (llvm::Type **)sub_21DF1A410(v72, v70, Select, (uint64_t)v232);
          sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v73, *(_QWORD *)(a1 + 3600), 0);
        }
        FCmpHelper = 0;
      }
    }
    else
    {
      v75 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v76 = *(_QWORD *)(v75 + 344);
      v221 = *(_OWORD *)(v75 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v75 + 8));
      v223 = *(_DWORD *)(v75 + 104);
      v77 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 24))(v76, &v221, v77, v67, 2, *(unsigned int *)(a1 + 3832));
      if (v222)
        llvm::MetadataTracking::untrack();
      FCmpHelper = 0;
      *(_BYTE *)(a1 + 3532) = 1;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) == 0)
    {
      v78 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v79 = *(_QWORD *)(v78 + 344);
      v80 = *(_QWORD *)(v79 + 1416);
      if (v80)
        v81 = strlen(*(const char **)(v79 + 1416));
      else
        v81 = 0;
      v90 = sub_21DF203DC(v78, v80, v81, *(_QWORD *)(v78 + 160), *(_QWORD *)(v78 + 160));
      v91 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v92 = *(_QWORD *)(a1 + 3776);
      v93 = (_QWORD *)a1;
      LOWORD(v233) = 257;
      v94 = v91 + 8;
      v95 = llvm::ConstantInt::get();
      v230[0] = sub_21DF79584(v94, v92, v95, (uint64_t)v232);
      v236 = 257;
      v96 = sub_21DF191A4(v94, *(_QWORD *)(v90 + 24), v90, (uint64_t)v230, 1, (uint64_t)v235);
      v97 = (uint64_t)v93 + *(_QWORD *)(*v93 - 24) + 8;
      v98 = llvm::ConstantFP::get();
      LOWORD(v233) = 257;
      v99 = sub_21DF20828(v97, v98, (uint64_t)v96, (uint64_t)v232);
      v100 = (uint64_t)v93 + *(_QWORD *)(*v93 - 24) + 8;
      LOWORD(v233) = 257;
      v101 = sub_21DF20300(v100, (uint64_t)v96, v99, (uint64_t)v232);
      v236 = 257;
      v102 = sub_21DF38C30(v100, v67, v101, (uint64_t)v235);
      v103 = (char *)v93 + *(_QWORD *)(*v93 - 24);
      v104 = *((_QWORD *)v103 + 43);
      v218 = *(_OWORD *)(v103 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v103 + 8));
      v220 = *((_DWORD *)v103 + 26);
      FPCast = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v104 + 40))(v104, &v218, v102, 0);
      if (v219)
        llvm::MetadataTracking::untrack();
      v106 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v107 = *(_QWORD *)(a1 + 3040);
      LOWORD(v233) = 257;
      v108 = (uint64_t *)sub_21DF19394((uint64_t *)(v106 + 8), **(llvm::Type ***)(*(_QWORD *)v107 + 16), v107, 0, (uint64_t)v232);
      v109 = *v108;
      v110 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
      v236 = 257;
      v111 = llvm::ConstantInt::get();
      v112 = sub_21DF79584(v110, (uint64_t)v108, v111, (uint64_t)v235);
      v113 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v114 = **(_QWORD **)(v109 + 16);
      v231 = 257;
      if (*(_QWORD *)FPCast != v114)
      {
        v115 = (uint64_t *)(v113 + a1 + 8);
        if (*(unsigned __int8 *)(FPCast + 16) > 0x14u)
        {
          LOWORD(v233) = 257;
          FPCast = llvm::CastInst::CreateFPCast();
          sub_21DF1A3A4(v115, FPCast, (uint64_t)v230);
        }
        else
        {
          v116 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v113 + v205 + 80) + 256))(*(_QWORD *)(v113 + v205 + 80), FPCast, v114);
          FPCast = v116;
          if (v116 && *(unsigned __int8 *)(v116 + 16) >= 0x1Cu)
            sub_21DF1A3A4(v115, v116, (uint64_t)v230);
        }
        a1 = v205;
      }
      LOWORD(v233) = 257;
      v117 = sub_21DF20300(v110, v112, FPCast, (uint64_t)v232);
      v118 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v233) = 257;
      v119 = v118 + 8;
      v120 = llvm::ConstantInt::get();
      v121 = (llvm::Type **)sub_21DF7980C(v119, (uint64_t)v108, v117, v120, (uint64_t)v232);
      sub_21DF385B0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8), v121, *(_QWORD *)(a1 + 3040), 0);
    }
  }
  else
  {
    FCmpHelper = 0;
  }
  v122 = *(_BYTE *)(a1 + 3528);
  if ((v122 & 1) != 0)
  {
    v127 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v128 = a1 + v127;
    v129 = a1 + v127 + 8;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 3808) + 1) & 8) != 0)
    {
      v132 = *(_QWORD *)(a1 + 3040);
      v236 = 257;
      v133 = sub_21DF19394((uint64_t *)(a1 + v127 + 8), **(llvm::Type ***)(*(_QWORD *)v132 + 16), v132, 0, (uint64_t)v235);
      LOWORD(v233) = 257;
      v134 = llvm::ConstantInt::get();
      v135 = (uint64_t *)sub_21DF79584(v129, v133, v134, (uint64_t)v232);
      v136 = sub_21DF78BE0(v128, v135, 1);
      v131 = sub_21DF81494((_QWORD *)a1, v136);
    }
    else
    {
      v130 = *(_QWORD *)(a1 + 3624);
      LOWORD(v233) = 257;
      v131 = sub_21DF19394((uint64_t *)(a1 + v127 + 8), **(llvm::Type ***)(*(_QWORD *)v130 + 16), v130, 0, (uint64_t)v232);
    }
    v137 = v131;
    v138 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (*(_BYTE *)(a1 + 3842))
    {
      LOWORD(v233) = 257;
      v152 = llvm::IRBuilderBase::CreateFCmpHelper();
      v153 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      LOWORD(v233) = 257;
      sub_21DF1A410(v153, v152, FCmpHelper, (uint64_t)v232);
      llvm::ConstantFP::get();
      llvm::ConstantFP::get();
      LOWORD(v233) = 257;
      v154 = llvm::IRBuilderBase::CreateSelect();
      v155 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v156 = *(_QWORD *)(v155 + 344);
      v215 = *(_OWORD *)(v155 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v155 + 8));
      v217 = *(_DWORD *)(v155 + 104);
      v157 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v156 + 24))(v156, &v215, v154, v157, 4, *(unsigned int *)(a1 + 3832));
      if (!v216)
        goto LABEL_95;
    }
    else
    {
      v143 = a1 + v138;
      v144 = *(_QWORD *)(a1 + v138 + 344);
      v212 = *(_OWORD *)(a1 + v138 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + v138 + 8));
      v214 = *(_DWORD *)(v143 + 104);
      (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v144 + 24))(v144, &v212, v137, *(_QWORD *)(a1 + 3648), *(unsigned int *)(a1 + 3656), *(unsigned int *)(a1 + 3832));
      if (!v213)
        goto LABEL_95;
    }
    goto LABEL_94;
  }
  if ((*(_BYTE *)(a1 + 3528) & 0xC) != 0)
  {
    if ((*(_BYTE *)(a1 + 3528) & 4) != 0)
    {
      v145 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v146 = *(_QWORD *)(a1 + 3552);
      LOWORD(v233) = 257;
      v123 = sub_21DF19394((uint64_t *)(v145 + 8), **(llvm::Type ***)(*(_QWORD *)v146 + 16), v146, 0, (uint64_t)v232);
      v122 = *(_BYTE *)(a1 + 3528);
      if ((v122 & 8) != 0)
      {
LABEL_68:
        v124 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v125 = *(_QWORD *)(a1 + 3576);
        LOWORD(v233) = 257;
        v126 = sub_21DF19394((uint64_t *)(v124 + 8), **(llvm::Type ***)(*(_QWORD *)v125 + 16), v125, 0, (uint64_t)v232);
        if ((*(_BYTE *)(a1 + 3528) & 2) == 0)
          goto LABEL_93;
        goto LABEL_85;
      }
    }
    else
    {
      v123 = 0;
      if ((*(_BYTE *)(a1 + 3528) & 8) != 0)
        goto LABEL_68;
    }
    v126 = 0;
    if ((v122 & 2) == 0)
      goto LABEL_93;
LABEL_85:
    v147 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v148 = *(_QWORD *)(a1 + 3600);
    v149 = a1;
    LOWORD(v233) = 257;
    v150 = (llvm::Type ***)sub_21DF19394((uint64_t *)(v147 + 8), **(llvm::Type ***)(*(_QWORD *)v148 + 16), v148, 0, (uint64_t)v232);
    if (*(_BYTE *)(a1 + 3852))
    {
      v151 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
      if (*(_QWORD *)(v151 + 1472))
        strlen(*(const char **)(v151 + 1472));
      v158 = sub_21DF206CC();
      v149 = v205;
      v159 = v205 + *(_QWORD *)(*(_QWORD *)v205 - 24);
      LOWORD(v233) = 257;
      v160 = sub_21DF191A4(v159 + 8, **(_QWORD **)(*(_QWORD *)v158 + 16), v158, 0, 0, (uint64_t)v232);
      v161 = v149 + *(_QWORD *)(*(_QWORD *)v149 - 24) + 8;
      v162 = llvm::ConstantInt::get();
      LOWORD(v233) = 257;
      v163 = sub_21DF1A184(v161, v162, (uint64_t)v160, (uint64_t)v232);
      v164 = *(_QWORD *)(*(_QWORD *)v149 - 24) + v149 + 8;
      LOWORD(v233) = 257;
      v150 = (llvm::Type ***)sub_21DF1A410(v164, (uint64_t)v150, v163, (uint64_t)v232);
    }
    v165 = (uint64_t *)(v149 + *(_QWORD *)(*(_QWORD *)v149 - 24) + 8);
    v166 = llvm::ConstantInt::get();
    LOWORD(v233) = 257;
    sub_21DF19478(v165, 33, v150, v166, (uint64_t)v232);
    llvm::ConstantFP::get();
    LOWORD(v233) = 257;
    v123 = llvm::IRBuilderBase::CreateSelect();
    a1 = v149;
    if (*(int *)(v149 + 2952) <= 1)
      *(_DWORD *)(v149 + 2952) = 2;
LABEL_93:
    v167 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v168 = *(_QWORD *)(v167 + 344);
    v209 = *(_OWORD *)(v167 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v167 + 8));
    v211 = *(_DWORD *)(v167 + 104);
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v168 + 416))(v168, &v209, v123, v126);
    if (!v210)
    {
LABEL_95:
      *(_BYTE *)(a1 + 3532) = 1;
      goto LABEL_96;
    }
LABEL_94:
    llvm::MetadataTracking::untrack();
    goto LABEL_95;
  }
  if ((*(_BYTE *)(a1 + 3528) & 2) == 0)
    goto LABEL_96;
  v139 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v140 = *(_QWORD *)(a1 + 3600);
  LOWORD(v233) = 257;
  v141 = (llvm::Type ***)sub_21DF19394((uint64_t *)(v139 + 8), **(llvm::Type ***)(*(_QWORD *)v140 + 16), v140, 0, (uint64_t)v232);
  if (!*(_BYTE *)(a1 + 3532))
  {
    v192 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v193 = *(_QWORD *)(v192 + 344);
    v206 = *(_OWORD *)(v192 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v192 + 8));
    v208 = *(_DWORD *)(v192 + 104);
    (*(void (**)(uint64_t, __int128 *, llvm::Type ***))(*(_QWORD *)v193 + 424))(v193, &v206, v141);
    if (!v207)
      goto LABEL_95;
    goto LABEL_94;
  }
  if (*(_BYTE *)(a1 + 3852) && (*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) != 0)
  {
    v142 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (*(_QWORD *)(v142 + 1472))
      strlen(*(const char **)(v142 + 1472));
    v194 = sub_21DF206CC();
    v195 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v233) = 257;
    v196 = sub_21DF191A4(v195 + 8, **(_QWORD **)(*(_QWORD *)v194 + 16), v194, 0, 0, (uint64_t)v232);
    v197 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8;
    v198 = llvm::ConstantInt::get();
    LOWORD(v233) = 257;
    v199 = sub_21DF1A184(v197, v198, (uint64_t)v196, (uint64_t)v232);
    v200 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    LOWORD(v233) = 257;
    v141 = (llvm::Type ***)sub_21DF1A410(v200, (uint64_t)v141, v199, (uint64_t)v232);
  }
  v201 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v202 = llvm::ConstantInt::get();
  LOWORD(v233) = 257;
  v203 = sub_21DF19478((uint64_t *)(v201 + 8), 32, v141, v202, (uint64_t)v232);
  v13 = (_DWORD *)sub_21DF79DF4(v201, 4, v203);
LABEL_96:
  v204 = (uint64_t)v13;
  v169 = (uint64_t *)(a1 + 2432);
  v170 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2960) + 32);
  result = sub_21DF815A8((_QWORD *)a1);
  v172 = result;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1632))
  {
    v233 = 0u;
    v234 = 0u;
    memset(v232, 0, sizeof(v232));
    memset(v235, 0, sizeof(v235));
    for (; v170; v170 ^= v175)
    {
      v173 = __clz(v170);
      v174 = v173 ^ 0x1F;
      v175 = 0x80000000 >> v173;
      v176 = *(unsigned __int8 *)(a1 + 3008);
      v177 = a1;
      v178 = *(_DWORD *)(*(_QWORD *)(a1 + 3808) + 8);
      if (((0x80000000 >> v173) & v172) != 0)
        v179 = sub_21DF817FC(v177, v174);
      else
        v179 = 15;
      if ((v175 & v176) != 0)
        v180 = 15;
      else
        v180 = 0;
      *((_DWORD *)v235 + v174) = v180 & v179 & ((v178 >> v174) & 1 | (8 * ((HIBYTE(v178) >> v174) & 1)) | (2 * ((BYTE1(v178) >> v174) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v178) >> v174) & 1)));
      if ((v175 & v176) != 0)
      {
        a1 = v205;
        result = (uint64_t)sub_21DF818B0(v205, v174);
      }
      else
      {
        result = llvm::UndefValue::get();
        a1 = v205;
      }
      *((_QWORD *)v232 + v174) = result;
    }
    v181 = *(_QWORD *)(a1 + 2960);
    for (i = *(unsigned __int8 *)(v181 + 32);
          i;
          result = sub_21DF820EC(v169, *((_QWORD *)v232 + (v183 ^ 0x1F)), v183 ^ 0x1F, *((_DWORD *)v235 + (v183 ^ 0x1F)), (uint64_t)v13))
    {
      v183 = __clz(i);
      i ^= 0x80000000 >> v183;
    }
  }
  else
  {
    for (;
          v170;
          result = sub_21DF820EC(v169, v191, v185, v190 & v189 & ((v188 >> v185) & 1 | (8 * ((HIBYTE(v188) >> v185) & 1)) | (2 * ((BYTE1(v188) >> v185) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v188) >> v185) & 1))), v204))
    {
      v184 = __clz(v170);
      v185 = v184 ^ 0x1F;
      v186 = 0x80000000 >> v184;
      v187 = *(unsigned __int8 *)(v205 + 3008);
      v188 = *(_DWORD *)(*(_QWORD *)(v205 + 3808) + 8);
      if (((0x80000000 >> v184) & v172) != 0)
        v189 = sub_21DF817FC(v205, v185);
      else
        v189 = 15;
      if ((v186 & v187) != 0)
        v190 = 15;
      else
        v190 = 0;
      if ((v186 & v187) != 0)
        v191 = (uint64_t)sub_21DF818B0(v205, v185);
      else
        v191 = llvm::UndefValue::get();
      v170 ^= v186;
    }
  }
  return result;
}

uint64_t sub_21DF7E6D8()
{
  return llvm::FunctionType::get();
}

uint64_t sub_21DF7E6F0(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) != 0 && *(int *)(a1 + 2952) > 0)
    return 103;
  else
    return 101;
}

uint64_t sub_21DF7E71C(uint64_t a1)
{
  llvm::Function **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::Function *v60;
  _QWORD *v61;
  llvm::Function *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t String;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v75;
  int v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v85;
  llvm::Type **v86;
  unint64_t v87;
  llvm::Type *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Value *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  llvm::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t Function;
  uint64_t v169;
  uint64_t v170;
  llvm::CallBase *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Instruction *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  std::string *v201;
  const std::string::value_type *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  int v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  __int128 v218;
  uint64_t v219;
  int v220;
  unsigned int v221[8];
  __int16 v222;
  __int128 v223;
  __int128 v224;
  __int16 v225;
  __int128 v226;
  uint64_t v227;
  int v228;
  __int128 v229;
  uint64_t v230;
  int v231;
  _OWORD v232[2];
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::Function **)(a1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
  v4 = v3 - 24;
  if (!v3)
    v4 = 0;
  v208 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
  v6 = *(_QWORD *)(v4 + 40);
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  sub_21DF3F430(v5, v7);
  if (*(_BYTE *)(a1 + 3839) || (*(_BYTE *)(a1 + 3528) & 4) != 0)
  {
    v8 = sub_21DF80980((_QWORD *)a1, 6, 0, (llvm::Type *)1);
    if (*(_BYTE *)(a1 + 3839))
    {
      v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v10 = *(_QWORD *)(v9 + 344);
      v229 = *(_OWORD *)(v9 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 8));
      v231 = *(_DWORD *)(v9 + 104);
      v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v10 + 240))(v10, &v229, 1, 0, v8, 0);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3688), v11);
      if (v230)
        llvm::MetadataTracking::untrack();
    }
    if ((*(_BYTE *)(a1 + 3528) & 4) != 0)
    {
      v12 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v13 = *(_QWORD *)(v12 + 344);
      v226 = *(_OWORD *)(v12 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v12 + 8));
      v228 = *(_DWORD *)(v12 + 104);
      v14 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v13 + 240))(v13, &v226, 1, *(unsigned int *)(a1 + 3848), v8, 0);
      sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3712), v14);
      if (v227)
        llvm::MetadataTracking::untrack();
      if (*(_DWORD *)(a1 + 3848) == 1 && *(int *)(a1 + 2952) <= 1)
        *(_DWORD *)(a1 + 2952) = 2;
    }
  }
  if (*(_BYTE *)(a1 + 3839))
  {
    v15 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (*(_QWORD *)(v15 + 1456))
      strlen(*(const char **)(v15 + 1456));
    v16 = sub_21DF206CC();
    v17 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    if (*(_QWORD *)(v17 + 1464))
      strlen(*(const char **)(v17 + 1464));
    v18 = sub_21DF206CC();
    v19 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v20 = llvm::UndefValue::get();
    v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v225 = 257;
    v22 = sub_21DF191A4(v21 + 8, **(_QWORD **)(*(_QWORD *)v16 + 16), v16, 0, 0, (uint64_t)&v223);
    v222 = 257;
    v23 = llvm::ConstantInt::get();
    v24 = sub_21DF7980C(v19 + 8, v20, (uint64_t)v22, v23, (uint64_t)v221);
    v25 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v225 = 257;
    v26 = sub_21DF191A4(v25 + 8, **(_QWORD **)(*(_QWORD *)v18 + 16), v18, 0, 0, (uint64_t)&v223);
    v27 = (*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)a1 + 376))(a1, v26);
    v28 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v225 = 257;
    v29 = v28 + 8;
    v30 = llvm::ConstantInt::get();
    v31 = sub_21DF7980C(v29, v24, v27, v30, (uint64_t)&v223);
    v32 = sub_21DF80980((_QWORD *)a1, 0, 0, (llvm::Type *)1);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3736), v32);
    v33 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v34 = *(_QWORD *)(v33 + 344);
    v218 = *(_OWORD *)(v33 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 8));
    v220 = *(_DWORD *)(v33 + 104);
    v35 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v34 + 240))(v34, &v218, 1, 0, *(_QWORD *)(a1 + 3752), 0);
    if (v219)
      llvm::MetadataTracking::untrack();
    v36 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v37 = *(_QWORD *)(a1 + 3704);
    v225 = 257;
    v38 = v36 + 8;
    v39 = llvm::ConstantInt::get();
    v40 = sub_21DF7980C(v38, v31, v37, v39, (uint64_t)&v223);
    v41 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v225 = 257;
    v42 = v41 + 8;
    v43 = llvm::ConstantInt::get();
    v206 = sub_21DF7980C(v42, v40, v35, v43, (uint64_t)&v223);
  }
  else
  {
    v206 = 0;
  }
  if (*(_BYTE *)(a1 + 3840))
  {
    v44 = llvm::User::operator new((llvm::User *)0x58);
    *(_QWORD *)&v223 = "agc.front_direction";
    v225 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v45 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = *(_QWORD *)(v45 + 344);
    v215 = *(_OWORD *)(v45 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v45 + 8));
    v217 = *(_DWORD *)(v45 + 104);
    v205 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v46 + 368))(v46, &v215, v44);
    if (v216)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v205 = 0;
  }
  v47 = llvm::PointerType::get();
  if (*(_BYTE *)(a1 + 3841) || *(_BYTE *)(a1 + 3842) && (*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) == 0)
  {
    v48 = sub_21DF80980((_QWORD *)a1, 5, 0, (llvm::Type *)2);
    v49 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v50 = *(_QWORD *)(v49 + 344);
    v212 = *(_OWORD *)(v49 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v49 + 8));
    v214 = *(_DWORD *)(v49 + 104);
    v51 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    v225 = 257;
    v52 = sub_21DF1A79C(v51, 49, v48, v47, (uint64_t)&v223);
    v53 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v50 + 240))(v50, &v212, 2, 0, v52, 0);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3760), v53);
    if (v213)
      llvm::MetadataTracking::untrack();
  }
  if (*(_BYTE *)(a1 + 3842) && (*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) != 0)
  {
    v54 = sub_21DF80980((_QWORD *)a1, 5, 0, (llvm::Type *)2);
    v55 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v56 = *(_QWORD *)(v55 + 344);
    v209 = *(_OWORD *)(v55 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v55 + 8));
    v211 = *(_DWORD *)(v55 + 104);
    v57 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    v225 = 257;
    v58 = sub_21DF1A79C(v57, 49, v54, v47, (uint64_t)&v223);
    v59 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v56 + 240))(v56, &v209, 2, 1, v58, 0);
    sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3784), v59);
    if (v210)
      llvm::MetadataTracking::untrack();
    if (*(int *)(a1 + 2952) <= 1)
      *(_DWORD *)(a1 + 2952) = 2;
  }
  v60 = *v2;
  if ((*((_WORD *)*v2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v60);
    v62 = *v2;
    v61 = (_QWORD *)*((_QWORD *)v60 + 11);
    if ((*((_WORD *)*v2 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(*v2);
    v60 = v62;
  }
  else
  {
    v61 = (_QWORD *)*((_QWORD *)v60 + 11);
  }
  v63 = *((_QWORD *)v60 + 11) + 40 * *((_QWORD *)v60 + 12);
  v64 = v208;
  if (v61 == (_QWORD *)v63)
  {
LABEL_179:
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v169 = Function;
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      v170 = *(_QWORD *)(v169 + 8);
      while (v170)
      {
        v171 = *(llvm::CallBase **)(v170 + 24);
        v170 = *(_QWORD *)(v170 + 8);
        sub_21DF35A70(v171);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v171);
      }
    }
    v172 = llvm::Module::getFunction();
    if (!v172)
      return 1;
    v173 = v172;
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160), (llvm::Type *)(((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 2960) + 32) >> 7) & 0x1E));
    v174 = 1;
    v175 = (uint64_t *)llvm::User::operator new((llvm::User *)0x58);
    *(_QWORD *)&v223 = "agc.sample_positions";
    v225 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v176 = *(_QWORD *)(v173 + 8);
    if (v176)
    {
      do
      {
        v177 = *(_QWORD *)(v176 + 8);
        v178 = *(llvm::Instruction **)(v176 + 24);
        sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v178);
        v179 = llvm::UndefValue::get();
        v180 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v181 = *((_QWORD *)v178 - 4 * (*((_DWORD *)v178 + 5) & 0x7FFFFFF));
        v182 = llvm::ConstantInt::get();
        v225 = 257;
        v183 = sub_21DF1A864(v180, v181, v182, (uint64_t)&v223);
        v184 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        *(_QWORD *)&v232[0] = llvm::ConstantInt::get();
        *((_QWORD *)&v232[0] + 1) = v183;
        v225 = 257;
        v185 = sub_21DF66DE4(v184, v175, (uint64_t **)v232, 2, (uint64_t)&v223);
        v222 = 257;
        v186 = sub_21DF19394((uint64_t *)(v184 + 8), **(llvm::Type ***)(*(_QWORD *)v185 + 16), v185, 0, (uint64_t)v221);
        v187 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v225 = 257;
        v188 = v187 + 8;
        v189 = llvm::ConstantInt::get();
        v190 = sub_21DF7980C(v188, v179, v186, v189, (uint64_t)&v223);
        v191 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v174 = 1;
        v192 = llvm::ConstantInt::get();
        v225 = 257;
        v193 = sub_21DF19FAC(v191, v183, v192, (uint64_t)&v223);
        v194 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        *(_QWORD *)&v232[0] = llvm::ConstantInt::get();
        *((_QWORD *)&v232[0] + 1) = v193;
        v225 = 257;
        v195 = sub_21DF66DE4(v194, v175, (uint64_t **)v232, 2, (uint64_t)&v223);
        v222 = 257;
        v196 = sub_21DF19394((uint64_t *)(v194 + 8), **(llvm::Type ***)(*(_QWORD *)v195 + 16), v195, 0, (uint64_t)v221);
        v197 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v225 = 257;
        v198 = v197 + 8;
        v199 = llvm::ConstantInt::get();
        sub_21DF7980C(v198, v190, v196, v199, (uint64_t)&v223);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v178);
        v176 = v177;
      }
      while (v177);
    }
    return v174;
  }
  v204 = a1 + 344;
  v207 = a1 + 8;
  while (1)
  {
    if (v61[1])
    {
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *((unsigned int *)v61 + 8));
      v66 = *(_QWORD *)(v64 + 40);
      v67 = v66 ? v66 - 24 : 0;
      sub_21DF56A4C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v67, *(_QWORD *)(a1 + 40));
      if ((sub_21DF9D590((_QWORD *)a1, v61, *((_DWORD *)v61 + 8), v65) & 1) == 0)
        break;
    }
LABEL_176:
    v61 += 5;
    if (v61 == (_QWORD *)v63)
      goto LABEL_179;
  }
  String = llvm::MDString::getString(*(llvm::MDString **)(v65 - 8 * *(unsigned int *)(v65 + 8) + 8));
  v70 = (_QWORD *)String;
  v71 = v69;
  switch(v69)
  {
    case 12:
      v72 = *(_QWORD *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
      if (!v72)
        goto LABEL_123;
      if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12)
        v73 = *(unsigned __int8 *)(**(_QWORD **)(*v61 + 16) + 8);
      else
        v73 = *(_DWORD *)(*v61 + 8);
      v124 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v72 = v73 == 0;
      v125 = a1 + 272;
      if (v72)
        v125 = a1 + 264;
      v126 = *(_QWORD *)(v125 + v124);
      v127 = v124 + a1 + 8;
      v225 = 257;
      v128 = v206;
      goto LABEL_163;
    case 13:
      if (*(_QWORD *)String != 0x706D61732E726961 || *(_QWORD *)(String + 5) != 0x64695F656C706D61)
        goto LABEL_123;
      v75 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
      if (*(_QWORD *)(v75 + 1472))
        strlen(*(const char **)(v75 + 1472));
      v134 = sub_21DF206CC();
      v135 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v136 = v135 + a1 + 8;
      v225 = 257;
      v137 = sub_21DF191A4(v207 + v135, **(_QWORD **)(*(_QWORD *)v134 + 16), v134, 0, 0, (uint64_t)&v223);
      v138 = *v61;
      v222 = 257;
      v93 = sub_21DF1A79C(v136, 38, (uint64_t)v137, v138, (uint64_t)v221);
      if (*(int *)(a1 + 2952) <= 1)
        *(_DWORD *)(a1 + 2952) = 2;
      goto LABEL_172;
    case 15:
      if (*(_QWORD *)String != 0x6E696F702E726961 || *(_QWORD *)(String + 7) != 0x64726F6F635F746ELL)
        goto LABEL_123;
      if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12)
        v77 = *(unsigned __int8 *)(**(_QWORD **)(*v61 + 16) + 8);
      else
        v77 = *(_DWORD *)(*v61 + 8);
      v129 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v72 = v77 == 0;
      v130 = a1 + 208;
      if (!v72)
        v130 = a1 + 216;
      v126 = *(_QWORD *)(v130 + v129);
      v127 = v129 + a1 + 8;
      v128 = *(_QWORD *)(a1 + 3776);
      v225 = 257;
LABEL_163:
      v118 = sub_21DF20674(v127, v128, v126, (uint64_t)&v223);
      goto LABEL_171;
    case 16:
      if (*(_QWORD *)String != 0x6E6F72662E726961 || *(_QWORD *)(String + 8) != 0x676E696361665F74)
        goto LABEL_123;
      v79 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v80 = *v61;
      v225 = 257;
      v81 = 39;
      v82 = v205;
      goto LABEL_170;
    case 17:
      if (*(_QWORD *)String != 0x646E65722E726961
        || *(_QWORD *)(String + 8) != 0x65677261745F7265
        || *(_BYTE *)(String + 16) != 116)
      {
        goto LABEL_123;
      }
      v221[0] = 0;
      LODWORD(v223) = 2;
      if (!sub_21DF7A834(0, v65, (unsigned int *)&v223, v221))
        return 0;
      v85 = v221[0];
      v86 = (llvm::Type **)sub_21DF80BA8(a1 + 2432, v221[0], 0, 0);
      v87 = *v61;
      v88 = (llvm::Type *)llvm::FixedVectorType::get();
      v92 = sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v86, v88, *(unsigned __int8 *)(a1 + 2440 + (v85 << 6) + 34), *(unsigned __int8 *)(a1 + 2440 + (v85 << 6) + 33), v89, v90, v91);
      v93 = v92;
      if ((*(_DWORD *)(v87 + 8) & 0xFE) == 0x12)
      {
        v94 = *(_DWORD *)(v87 + 32);
        if (v94 == *(_DWORD *)(*(_QWORD *)v92 + 32))
          goto LABEL_166;
        v95 = sub_21DF79408(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v92, v94, 1);
      }
      else
      {
        v131 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v225 = 257;
        v132 = v131 + 8;
        v133 = llvm::ConstantInt::get();
        v95 = sub_21DF79584(v132, v93, v133, (uint64_t)&v223);
      }
      v93 = v95;
LABEL_166:
      v64 = v208;
      goto LABEL_172;
    case 18:
      if (*(_QWORD *)String != 0x676172662E726961
        || *(_QWORD *)(String + 8) != 0x706E695F746E656DLL
        || *(_WORD *)(String + 16) != 29813)
      {
        goto LABEL_123;
      }
      *(_BYTE *)(a1 + 3836) = 1;
      v223 = 0u;
      v224 = 0u;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 328))(&v223, a1, *v61, v65);
      if (!DWORD1(v223) && !*(_QWORD *)(a1 + 3752))
      {
        v98 = sub_21DF80980((_QWORD *)a1, 0, 0, (llvm::Type *)1);
        sub_21DF4EB3C((llvm::ValueHandleBase *)(a1 + 3736), v98);
      }
      goto LABEL_148;
    case 24:
      if (*(_QWORD *)String != 0x776569762E726961
        || *(_QWORD *)(String + 8) != 0x7272615F74726F70
        || *(_QWORD *)(String + 16) != 0x7865646E695F7961)
      {
        goto LABEL_123;
      }
      *(_BYTE *)(a1 + 3856) = 1;
      v223 = 0u;
      v224 = 0u;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 336))(&v223, a1, *v61, v65, "air.viewport_array_index", 24);
      goto LABEL_148;
    case 29:
      if (*(_QWORD *)String != 0x646E65722E726961
        || *(_QWORD *)(String + 8) != 0x65677261745F7265
        || *(_QWORD *)(String + 16) != 0x5F79617272615F74
        || *(_QWORD *)(String + 21) != 0x7865646E695F7961)
      {
        goto LABEL_123;
      }
      *(_BYTE *)(a1 + 3857) = 1;
      v116 = *(_QWORD *)a1;
      v117 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      if (*(_BYTE *)(*(_QWORD *)(a1 + v117 + 344) + 1670))
      {
        v223 = 0u;
        v224 = 0u;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, const char *, uint64_t))(v116 + 336))(&v223, a1, *v61, v65, "air.render_target_array_index", 29);
        goto LABEL_148;
      }
      v139 = v117 + a1 + 8;
      v82 = llvm::ConstantInt::get();
      v80 = *v61;
      v225 = 257;
      v79 = v139;
      v81 = 38;
LABEL_170:
      v118 = sub_21DF1A79C(v79, v81, v82, v80, (uint64_t)&v223);
      goto LABEL_171;
    default:
LABEL_123:
      if (sub_21DF807A0((uint64_t *)String, v69))
      {
        v104 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        if (*(_QWORD *)(v104 + 1504))
          strlen(*(const char **)(v104 + 1504));
        v107 = sub_21DF206CC();
        v108 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v109 = v108 + a1 + 8;
        v225 = 257;
        v110 = sub_21DF191A4(v207 + v108, **(_QWORD **)(*(_QWORD *)v107 + 16), v107, 0, 0, (uint64_t)&v223);
        v111 = *v61;
        v222 = 257;
        v93 = sub_21DF1A79C(v109, 38, (uint64_t)v110, v111, (uint64_t)v221);
        if (sub_21DF808A4(*(_DWORD *)(a1 + 3860), (uint64_t)v70, v71))
        {
          v112 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          v113 = llvm::ConstantInt::get();
          v225 = 257;
          v93 = sub_21DF1A410(v112, v93, v113, (uint64_t)&v223);
        }
        *(_BYTE *)(a1 + 3838) = 1;
        goto LABEL_172;
      }
      if (v71 == 21)
      {
        if (*v70 != 0x797261622E726961
          || v70[1] != 0x5F636972746E6563
          || *(_QWORD *)((char *)v70 + 13) != 0x64726F6F635F6369)
        {
          goto LABEL_145;
        }
        v119 = *(_QWORD *)(v204 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 536))(v119) & 1) == 0)
        {
          v201 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408);
          v202 = "barycentric_coords not supported for this device";
          goto LABEL_190;
        }
        memset(v232, 0, sizeof(v232));
        (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 352))(v232, a1, *v61, v65);
        v93 = sub_21DF80E00(a1, (unsigned int *)v232);
        if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12)
        {
          v120 = *(_DWORD *)(*v61 + 32);
          if (v120 == 3)
          {
            v144 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v225 = 257;
            v145 = v144 + 8;
            v146 = llvm::ConstantInt::get();
            v147 = sub_21DF79584(v145, v93, v146, (uint64_t)&v223);
            v148 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v225 = 257;
            v149 = v148 + 8;
            v150 = llvm::ConstantInt::get();
            v151 = sub_21DF79584(v149, v93, v150, (uint64_t)&v223);
            v152 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v153 = llvm::ConstantFP::get();
            v154 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v225 = 257;
            v155 = sub_21DF2074C(v154, v147, v151, (uint64_t)&v223);
            v222 = 257;
            v203 = sub_21DF20828(v152, v153, v155, (uint64_t)v221);
            v156 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v157 = llvm::UndefValue::get();
            v225 = 257;
            v158 = llvm::ConstantInt::get();
            v159 = sub_21DF7980C(v156 + 8, v157, v147, v158, (uint64_t)&v223);
            v160 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v225 = 257;
            v161 = v160 + 8;
            v162 = llvm::ConstantInt::get();
            v163 = sub_21DF7980C(v161, v159, v151, v162, (uint64_t)&v223);
            v164 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v225 = 257;
            v165 = v164 + 8;
            v166 = llvm::ConstantInt::get();
            v167 = v163;
            v64 = v208;
            v118 = sub_21DF7980C(v165, v167, v203, v166, (uint64_t)&v223);
            goto LABEL_171;
          }
          if (v120 == 2)
            goto LABEL_172;
          if (v120 != 1)
          {
LABEL_145:
            v93 = 0;
            goto LABEL_172;
          }
        }
        v121 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v225 = 257;
        v122 = v121 + 8;
        v123 = llvm::ConstantInt::get();
        v118 = sub_21DF79584(v122, v93, v123, (uint64_t)&v223);
LABEL_171:
        v93 = v118;
LABEL_172:
        if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*v61 + 32) == 1)
        {
          v140 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v141 = llvm::UndefValue::get();
          v225 = 257;
          v142 = llvm::ConstantInt::get();
          v143 = v141;
          v64 = v208;
          sub_21DF7980C(v140 + 8, v143, v93, v142, (uint64_t)&v223);
        }
        llvm::Value::replaceAllUsesWith();
        goto LABEL_176;
      }
      if (v71 != 16)
        goto LABEL_145;
      if (*v70 != 0x6D6972702E726961 || v70[1] != 0x64695F6576697469)
        goto LABEL_145;
      v106 = *(_QWORD *)(v204 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 528))(v106) & 1) != 0)
      {
        v223 = 0u;
        v224 = 0u;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 344))(&v223, a1, *v61);
LABEL_148:
        v118 = sub_21DF80E00(a1, (unsigned int *)&v223);
        goto LABEL_171;
      }
      v201 = (std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408);
      v202 = "primitive_id not supported for this device";
LABEL_190:
      std::string::append(v201, v202);
      return 0;
  }
}

BOOL sub_21DF7FEB8(uint64_t a1)
{
  llvm::CallBase *v2;
  uint64_t v3;
  _BYTE **v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int8 *v13;
  unint64_t v14;
  llvm::MDString *v16;
  uint64_t String;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type **v21;
  uint64_t *v23;
  uint64_t v24;
  unsigned int ScalarSizeInBits;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  llvm::Type ***v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t Select;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type **v46;
  llvm::Type **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Function *v56;
  uint64_t v57;
  llvm::Instruction *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *i;
  _QWORD *v75;
  llvm::Instruction *v76;
  uint64_t v77;
  unsigned int v78;
  llvm::Instruction *v79;
  int NumSuccessors;
  int v81;
  int j;
  llvm::BasicBlock *Successor;
  uint64_t v84;
  llvm::BasicBlock *v85;
  llvm::BasicBlock *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Function *Function;
  _BYTE *v93;
  _QWORD *v94;
  _BYTE v95[12];
  uint64_t v96;
  _WORD v97[16];
  _QWORD *v98;
  uint64_t v99;
  _BYTE v100[16];
  __int16 v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  Function = (llvm::Function *)llvm::Module::getFunction();
  v2 = *(llvm::CallBase **)(*((_QWORD *)Function + 1) + 24);
  v3 = sub_21DF35A70(v2);
  v4 = (_BYTE **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (_QWORD)v4) & 0x1FFFFFFFE0) != 0)
  {
    v93 = *v4;
    v5 = *(_QWORD *)v93;
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v93 = 0;
  }
  v7 = sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v2);
  MEMORY[0x24BDAC7A8](v7);
  if (v8 >= 0x200)
    v10 = 512;
  else
    v10 = v8;
  v94 = (uint64_t *)((char *)&v88 - v9);
  bzero((char *)&v88 - v9, v10);
  if (v6)
  {
    if (*(_BYTE *)(v5 + 8) == 16)
      sub_21DF79D0C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v93, v94);
    else
      *v94 = v93;
    v11 = 0;
    v12 = 0;
    v90 = a1 + 184;
    v89 = a1 + 2440;
    v91 = a1 + 192;
    do
    {
      v13 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 56) - 8 * *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8) + 8 * v11);
      if (v13)
      {
        v14 = *v13;
        if (v14 <= 0x22 && ((0x7FFFFFFF0uLL >> v14) & 1) != 0)
        {
          v16 = *(llvm::MDString **)&v13[-8 * *((unsigned int *)v13 + 2)];
          if (v16)
          {
            if (!*(_BYTE *)v16)
            {
              String = llvm::MDString::getString(v16);
              v19 = String;
              v20 = v18;
              v21 = (llvm::Type **)v94[v11];
              switch(v18)
              {
                case 9:
                  if (*(_QWORD *)String != 0x747065642E726961 || *(_BYTE *)(String + 8) != 104)
                    goto LABEL_46;
                  v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
                  v24 = *(_QWORD *)(a1 + 3552);
                  goto LABEL_53;
                case 11:
                  if (*(_QWORD *)String != 0x6E6574732E726961 || *(_QWORD *)(String + 3) != 0x6C69636E6574732ELL)
                    goto LABEL_46;
                  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*v21);
                  v27 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                  v28 = *(_QWORD *)(v90 + v27);
                  v101 = 257;
                  if (ScalarSizeInBits > 0x10)
                    v29 = 38;
                  else
                    v29 = 39;
                  v46 = (llvm::Type **)sub_21DF1A79C(v27 + a1 + 8, v29, (uint64_t)v21, v28, (uint64_t)&v98);
                  v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
                  v24 = *(_QWORD *)(a1 + 3576);
                  goto LABEL_54;
                case 12:
                  if (*(_QWORD *)String == 0x65766F632E726961 && *(_DWORD *)(String + 8) == 1701273970)
                    break;
                  goto LABEL_46;
                case 17:
                  if (*(_QWORD *)String != 0x646E65722E726961
                    || *(_QWORD *)(String + 8) != 0x65677261745F7265
                    || *(_BYTE *)(String + 16) != 116)
                  {
                    goto LABEL_46;
                  }
                  *(_QWORD *)v95 = 0;
                  LODWORD(v98) = 1;
                  if (!sub_21DF7A834(0, (uint64_t)v13, (unsigned int *)&v98, &v95[4]))
                    return v12;
                  LODWORD(v98) = 2;
                  if (!sub_21DF7A834(0, (uint64_t)v13, (unsigned int *)&v98, v95))
                    return v12;
                  v47 = (llvm::Type **)sub_21DF7969C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v21, 4);
                  v51 = a1 + 32 * *(unsigned int *)&v95[4];
                  v52 = v51 + 3016;
                  v53 = v51 + 3272;
                  if (*(_DWORD *)v95)
                    v54 = v53;
                  else
                    v54 = v52;
                  if (!*(_QWORD *)(v54 + 24))
                    break;
                  v46 = (llvm::Type **)sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v47, *(llvm::Type **)v54, *(unsigned __int8 *)(v89+ ((unint64_t)*(unsigned int *)&v95[4] << 6)+ 34), *(unsigned __int8 *)(v89+ ((unint64_t)*(unsigned int *)&v95[4] << 6)+ 33), v48, v49, v50);
                  v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
                  v24 = *(_QWORD *)(v54 + 24);
LABEL_54:
                  sub_21DF385B0(v23, v46, v24, 0);
                  break;
                default:
LABEL_46:
                  if (!sub_21DF807A0((uint64_t *)String, v18))
                    break;
                  if (sub_21DF808A4(*(_DWORD *)(a1 + 3860), v19, v20))
                  {
                    if ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 12 == 1)
                    {
                      v33 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v34 = llvm::ConstantInt::get();
                      v101 = 257;
                      v35 = (llvm::Type ***)sub_21DF1A410(v33, (uint64_t)v21, v34, (uint64_t)&v98);
                      v36 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
                      v37 = llvm::ConstantInt::get();
                      v101 = 257;
                      sub_21DF19478(v36, 32, v35, v37, (uint64_t)&v98);
                      llvm::ConstantInt::get();
                      llvm::ConstantInt::get();
                      v101 = 257;
                      Select = llvm::IRBuilderBase::CreateSelect();
                    }
                    else
                    {
                      v39 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v40 = llvm::ConstantInt::get();
                      v101 = 257;
                      v41 = sub_21DF1A410(v39, (uint64_t)v21, v40, (uint64_t)&v98);
                      v42 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v43 = llvm::ConstantInt::get();
                      v101 = 257;
                      v44 = sub_21DF1A184(v42, v41, v43, (uint64_t)&v98);
                      v45 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v101 = 257;
                      Select = sub_21DF1A4A0(v45, v44, v41, (uint64_t)&v98);
                    }
                    v21 = (llvm::Type **)Select;
                  }
                  v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
                  v24 = *(_QWORD *)(a1 + 3600);
LABEL_53:
                  v46 = v21;
                  goto LABEL_54;
              }
            }
          }
        }
      }
      v12 = ++v11 >= (unint64_t)v6;
    }
    while (v6 != v11);
  }
  if (v93)
    sub_21DF523B8((uint64_t)v93);
  llvm::Instruction::eraseFromParent(v2);
  llvm::Function::eraseFromParent(Function);
  v55 = llvm::Module::getFunction();
  if (v55)
  {
    v56 = (llvm::Function *)v55;
    v98 = v100;
    v99 = 0x400000000;
    v57 = *(_QWORD *)(v55 + 8);
    while (v57)
    {
      v58 = *(llvm::Instruction **)(v57 + 24);
      v57 = *(_QWORD *)(v57 + 8);
      sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v58);
      v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 56);
      v97[8] = 257;
      v60 = llvm::BasicBlock::splitBasicBlock();
      sub_21DF19CD0((uint64_t)&v98, v60);
      v61 = *(_QWORD *)(v59 + 40);
      if (v61 == v59 + 40)
      {
        v64 = 0;
      }
      else
      {
        v62 = v61 - 24;
        if (v61)
          v63 = v61 - 24;
        else
          v63 = 0;
        if (*(unsigned __int8 *)(v63 + 16) - 29 >= 0xB)
          v64 = 0;
        else
          v64 = v62;
      }
      v65 = *(_QWORD *)(a1 + 3680);
      v66 = (_QWORD *)(v64 - 32);
      if (*(_QWORD *)(v64 - 32))
      {
        **(_QWORD **)(v64 - 16) = *(_QWORD *)(v64 - 24);
        v67 = *(_QWORD *)(v64 - 24);
        if (v67)
          *(_QWORD *)(v67 + 16) = *(_QWORD *)(v64 - 16);
      }
      *v66 = v65;
      if (v65)
      {
        v70 = *(_QWORD *)(v65 + 8);
        v68 = (_QWORD *)(v65 + 8);
        v69 = v70;
        *(_QWORD *)(v64 - 24) = v70;
        if (v70)
          *(_QWORD *)(v69 + 16) = v64 - 24;
        *(_QWORD *)(v64 - 16) = v68;
        *v68 = v66;
      }
      llvm::Instruction::eraseFromParent(v58);
    }
    llvm::Function::eraseFromParent(v56);
    *(_QWORD *)&v95[4] = v97;
    v96 = 0x400000000;
    v71 = v99;
    if ((_DWORD)v99)
    {
      do
      {
        v72 = (_QWORD *)v98[v71 - 1];
        LODWORD(v99) = v71 - 1;
        sub_21DF19CD0((uint64_t)&v95[4], (uint64_t)v72);
        v73 = v72 + 5;
        for (i = (_QWORD *)v72[6]; i != v73; i = (_QWORD *)i[1])
        {
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
        v75 = (_QWORD *)*v73;
        if ((_QWORD *)*v73 != v73)
        {
          v76 = (llvm::Instruction *)(v75 - 3);
          v77 = v75 ? (uint64_t)(v75 - 3) : 0;
          v78 = *(unsigned __int8 *)(v77 + 16) - 29;
          v79 = v78 >= 0xB ? 0 : v76;
          if (v78 <= 0xA)
          {
            NumSuccessors = llvm::Instruction::getNumSuccessors(v76);
            if (NumSuccessors)
            {
              v81 = NumSuccessors;
              for (j = 0; j != v81; ++j)
              {
                Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v79);
                if (llvm::BasicBlock::getSinglePredecessor(Successor))
                {
                  v84 = llvm::Instruction::getSuccessor(v79);
                  sub_21DF19CD0((uint64_t)&v98, v84);
                }
                v85 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v79);
                llvm::BasicBlock::removePredecessor(v85, (llvm::BasicBlock *)v72);
              }
            }
          }
        }
        llvm::BasicBlock::dropAllReferences((llvm::BasicBlock *)v72);
        v71 = v99;
      }
      while ((_DWORD)v99);
      while ((_DWORD)v96)
      {
        v86 = *(llvm::BasicBlock **)(*(_QWORD *)&v95[4] + 8 * v96 - 8);
        LODWORD(v96) = v96 - 1;
        llvm::BasicBlock::eraseFromParent(v86);
      }
    }
    if (*(_WORD **)&v95[4] != v97)
      free(*(void **)&v95[4]);
    if (v98 != (_QWORD *)v100)
      free(v98);
  }
  return 1;
}

uint64_t sub_21DF807A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  result = 0;
  switch(a2)
  {
    case 15:
      v4 = *a1;
      v5 = *(uint64_t *)((char *)a1 + 7);
      v6 = v4 == 0x706D61732E726961;
      goto LABEL_14;
    case 18:
      v7 = *a1;
      v8 = a1[1];
      v9 = *((unsigned __int16 *)a1 + 8);
      v11 = v7 == 0x706D61732E726961 && v8 == 0x5F6B73616D5F656CLL && v9 == 28265;
      goto LABEL_17;
    case 21:
      v12 = *a1;
      v13 = a1[1];
      v5 = *(uint64_t *)((char *)a1 + 13);
      v14 = v12 == 0x6F6C6F632E726961;
      v15 = 0x656C706D61735F72;
      goto LABEL_11;
    case 22:
      v16 = *a1;
      v13 = a1[1];
      v5 = *(uint64_t *)((char *)a1 + 14);
      v14 = v16 == 0x747361722E726961;
      v15 = 0x6C706D61735F7265;
LABEL_11:
      v6 = v14 && v13 == v15;
LABEL_14:
      v11 = v6 && v5 == 0x6B73616D5F656C70;
LABEL_17:
      result = v11;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_21DF808A4(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (a1 == 1 && a3 == 18)
  {
    return *(_QWORD *)a2 == 0x706D61732E726961
        && *(_QWORD *)(a2 + 8) == 0x5F6B73616D5F656CLL
        && *(_WORD *)(a2 + 16) == 28265;
  }
  else
  {
    if (a3 != 21)
      return 0;
    v5 = 0x6169722E636F6C6FLL;
    v6 = bswap64(*(_QWORD *)a2);
    if (v6 == 0x6169722E636F6C6FLL
      && (v5 = 0x725F73616D706C65, v6 = bswap64(*(_QWORD *)(a2 + 8)), v6 == 0x725F73616D706C65)
      && (v5 = 0x706C655F6D61736BLL, v6 = bswap64(*(_QWORD *)(a2 + 13)), v6 == 0x706C655F6D61736BLL))
    {
      v7 = 0;
    }
    else if (v5 < v6)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    return v7 == 0;
  }
}

uint64_t sub_21DF80980(_QWORD *a1, int a2, int a3, llvm::Type *a4)
{
  uint64_t v4;

  if (a4 >= 2)
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 272), (llvm::Type *)a4);
  v4 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v4 + 80) |= 1u;
  llvm::GlobalObject::setAlignment();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return v4;
}

llvm::Type *sub_21DF80BA8(uint64_t a1, unsigned int a2, char a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v7 = a2;
  v8 = *(_QWORD *)(a1 + 528) + 4 * a2;
  if ((a4 & 1) == 0)
    *(_QWORD *)(a1 + 544) |= 15 << (4 * a2);
  if (*(int *)(a1 + 520) <= 0)
    *(_DWORD *)(a1 + 520) = 1;
  v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v10 = *(_QWORD *)(v9 + 344);
  v29 = *(_OWORD *)(v9 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 8));
  v31 = *(_DWORD *)(v9 + 104);
  v11 = a1 + (v7 << 6);
  v12 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v10 + 200))(v10, &v29, (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a1 + 528) + 32) >> 12, BYTE2(*(_DWORD *)(*(_QWORD *)(a1 + 528) + 32)), v8, *(_QWORD *)(v11 + 8));
  if (v30)
    llvm::MetadataTracking::untrack();
  v13 = sub_21DF2F9D0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v12, *(_QWORD *)(v11 + 24), *(_DWORD *)(v11 + 36));
  v14 = (llvm::Type *)sub_21DF81230(a1, v13, 0, a2);
  if ((a3 & 1) == 0)
  {
    v15 = a1 + (v7 << 6);
    if (*(_BYTE *)(v15 + 60))
    {
      if (*(_BYTE *)(v15 + 40))
      {
        v16 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v17 = *(_QWORD *)(v16 + 344);
        if (*(_BYTE *)(v17 + 1642))
        {
          v18 = a1 + (v7 << 6);
          if (!*(_BYTE *)(v18 + 64))
          {
            v26 = *(_OWORD *)(v16 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 8));
            v28 = *(_DWORD *)(v16 + 104);
            v14 = (llvm::Type *)sub_21DF2152C(v17, (uint64_t)&v26, v14, v18 + 44, 1);
            if (v27)
              llvm::MetadataTracking::untrack();
          }
        }
      }
    }
    v19 = sub_21DF79940(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v14, *(_DWORD *)(*(_QWORD *)(a1 + 528) + 4 * v7) >> 5);
    v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v21 = *(_QWORD *)(v20 + 344);
    v23 = *(_OWORD *)(v20 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v20 + 8));
    v25 = *(_DWORD *)(v20 + 104);
    v14 = (llvm::Type *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v21 + 400))(v21, &v23, v19, v8);
    if (v24)
      llvm::MetadataTracking::untrack();
  }
  return v14;
}

uint64_t sub_21DF80E00(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::LLVMContext *v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::GetElementPtrInst *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  llvm::IRBuilderBase *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _BYTE v43[32];
  __int16 v44;
  _BYTE v45[32];
  __int16 v46;
  uint64_t *v47[2];

  v4 = a2[3];
  v5 = *a2;
  if (a2[1] == 1)
  {
    *(_BYTE *)(a1 + 3837) = 1;
    v6 = 3;
  }
  else
  {
    v6 = a2[2];
    if ((_DWORD)v6 == 1)
    {
      if (*(int *)(a1 + 2952) <= 1)
        *(_DWORD *)(a1 + 2952) = 2;
      v6 = 1;
    }
  }
  v7 = llvm::PointerType::get();
  v8 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
  v9 = *((_QWORD *)a2 + 3);
  v46 = 257;
  v10 = (uint64_t *)sub_21DF1A79C(v8, 49, v9, v7, (uint64_t)v45);
  if ((_DWORD)v6 != 3)
  {
    v29 = a2[1];
    v30 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v31 = *(_QWORD *)(v30 + 344);
    v32 = (llvm::IRBuilderBase *)(v30 + 8);
    if (v29)
    {
      v37 = *(_OWORD *)(v30 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(v32);
      v39 = *(_DWORD *)(v30 + 104);
      v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v31 + 240))(v31, &v37, v5, v6, v10, 0);
      if (!v38)
        goto LABEL_26;
    }
    else
    {
      v40 = *(_OWORD *)(v30 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(v32);
      v42 = *(_DWORD *)(v30 + 104);
      v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v31 + 240))(v31, &v40, v5, v6, v10, *(_QWORD *)(a1 + 3752));
      if (!v41)
        goto LABEL_26;
    }
    llvm::MetadataTracking::untrack();
    goto LABEL_26;
  }
  llvm::FixedVectorType::get();
  v12 = (uint64_t *)llvm::UndefValue::get();
  if (!(_DWORD)v5)
  {
    if (v4 < 2)
      return sub_21DF79174(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v12, v4, *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1640));
    goto LABEL_29;
  }
  v36 = v4;
  for (i = 0; i != v5; ++i)
  {
    v14 = *v10;
    if ((*(_DWORD *)(*v10 + 8) & 0xFE) == 0x12)
      v14 = **(_QWORD **)(v14 + 16);
    v15 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v16 = **(_QWORD **)(v14 + 16);
    v44 = 257;
    llvm::Type::getInt32Ty(*(llvm::Type **)(v15 + 72), v11);
    v47[0] = (uint64_t *)llvm::ConstantInt::get();
    v17 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(v15 + 80) + 48))(*(_QWORD *)(v15 + 80), v16, v10, v47, 1, 1);
    if (!v17)
    {
      v46 = 257;
      v17 = (llvm::GetElementPtrInst *)sub_21DF1AA2C(v16, v10, v47, 1);
      llvm::GetElementPtrInst::setIsInBounds(v17);
      sub_21DF1A3A4((uint64_t *)(v15 + 8), (uint64_t)v17, (uint64_t)v43);
    }
    v46 = 257;
    v18 = sub_21DF19394((uint64_t *)(v15 + 8), **(llvm::Type ***)(*(_QWORD *)v17 + 16), (uint64_t)v17, 0, (uint64_t)v45);
    v19 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = 257;
    v20 = v19 + 8;
    v21 = llvm::ConstantInt::get();
    v22 = sub_21DF79584(v20, v18, v21, (uint64_t)v45);
    v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = 257;
    v24 = v23 + 8;
    v25 = llvm::ConstantInt::get();
    v12 = (uint64_t *)sub_21DF7980C(v24, (uint64_t)v12, v22, v25, (uint64_t)v45);
  }
  if ((_DWORD)v5 == 1)
  {
    v26 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = 257;
    v27 = v26 + 8;
    v28 = llvm::ConstantInt::get();
    v12 = (uint64_t *)sub_21DF79584(v27, (uint64_t)v12, v28, (uint64_t)v45);
    v4 = v36;
    if (v36 < 2)
      return sub_21DF79174(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v12, v4, *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1640));
    goto LABEL_28;
  }
  v4 = v36;
LABEL_26:
  if (v4 >= 2)
  {
    if ((_DWORD)v5 == 1)
    {
LABEL_28:
      v33 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v34 = *(_QWORD *)(a1 + v33 + 192);
LABEL_30:
      v46 = 257;
      v12 = (uint64_t *)sub_21DF1A79C(v33 + a1 + 8, 49, (uint64_t)v12, v34, (uint64_t)v45);
      return sub_21DF79174(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v12, v4, *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1640));
    }
LABEL_29:
    v34 = llvm::FixedVectorType::get();
    v33 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    goto LABEL_30;
  }
  return sub_21DF79174(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v12, v4, *(unsigned __int8 *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1640));
}

uint64_t sub_21DF81230(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 528) + 4 * a4) >> 12) & 7)
    __asm { BR              X14 }
  return a2;
}

uint64_t sub_21DF81494(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_QWORD *)v4 + 43);
  v14 = *(_OWORD *)(v4 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 8));
  v16 = *((_DWORD *)v4 + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 80))(v5, &v14, a2, 8, 0, 1);
  if (v15)
    llvm::MetadataTracking::untrack();
  v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v8 = *((_QWORD *)v7 + 43);
  v11 = *(_OWORD *)(v7 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 8));
  v13 = *((_DWORD *)v7 + 26);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 88))(v8, &v11, v6, 8, 0, 32);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t sub_21DF815A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  llvm::CallBase *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  size_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v16[12];
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = **(_QWORD **)(*(_QWORD *)(a1[20] + 24) + 16);
  if (v1 == *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 144))
    return 0;
  v3 = *(unsigned int *)(a1[7] + 8);
  v4 = *(llvm::CallBase **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
  v5 = sub_21DF35A70(v4);
  if (((v5 - ((_QWORD)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0)
  {
    return 0;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v5);
    v7 = &v16[-((v6 + 15) & 0xFFFFFFFF0)];
    if (v6 >= 0x200)
      v8 = 512;
    else
      v8 = v6;
    bzero(&v16[-((v6 + 15) & 0xFFFFFFFF0)], v8);
    if ((_DWORD)v3)
    {
      if (*(_BYTE *)(v1 + 8) == 16)
        sub_21DF79D0C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *((_BYTE **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), v7);
      else
        *v7 = *((_QWORD *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      v10 = 0;
      v9 = 0;
      do
      {
        v11 = *(_QWORD *)(a1[7] - 8 * *(unsigned int *)(a1[7] + 8) + 8 * v10);
        if (sub_21DF241E0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8)), "air.render_target"))
        {
          v12 = v7[v10];
          if (v12)
          {
            if (*(_BYTE *)(v12 + 16) == 21)
            {
              v13 = *(_QWORD *)(a1[9] + 8 * *(unsigned int *)(v12 + 32));
              if (v13)
              {
                if (sub_21DF241E0(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8), "air.render_target"))
                {
                  v17 = 0;
                  v18 = 2;
                  sub_21DF7A834(0, v13, &v18, (_DWORD *)&v17 + 1);
                  v18 = 1;
                  sub_21DF7A834(0, v11, &v18, &v17);
                  if (HIDWORD(v17) == (_DWORD)v17)
                    v14 = 1 << SBYTE4(v17);
                  else
                    LOBYTE(v14) = 0;
                  v9 |= v14;
                }
              }
            }
          }
        }
        ++v10;
      }
      while (v3 != v10);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_21DF817FC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned int v10;

  v2 = **(_DWORD **)(a1 + 3808);
  if ((v2 & 0x20) != 0)
  {
    v5 = (v2 >> 6) & 0x1F;
    v6 = v5 > 0x10;
    v7 = (1 << v5) & 0x10014;
    if (v6 || v7 == 0)
      return 15;
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 3824);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 16);
    if ((v4 & 1) != 0)
      goto LABEL_13;
    return 0;
  }
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 3816) + 4 * a2 + 24);
  if ((v4 & 1) == 0)
    return 0;
LABEL_13:
  if (sub_21DF83180((v4 >> 21) & 7, (v4 >> 1) & 0x1F, (v4 >> 6) & 0x1F))
    v10 = 0;
  else
    v10 = 7;
  if (sub_21DF83180(HIBYTE(v4) & 7, (unsigned __int16)v4 >> 11, HIWORD(v4) & 0x1F))
    return v10;
  else
    return v10 | 8;
}

llvm::Type **sub_21DF818B0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type **v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  llvm::Type **v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Type **v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Type **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Type *v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t AllOnesValue;
  unsigned int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type **v46;
  _DWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v73;
  int v74;
  uint64_t v75;
  llvm::Type **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Type **v81;
  unsigned __int8 *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  _BYTE v109[32];
  __int16 v110;
  _BYTE v111[32];
  __int16 v112;

  v2 = a2;
  v4 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v5 = a2;
  v6 = a1 + 32 * a2;
  v7 = *(_QWORD *)(v6 + 3040);
  v112 = 257;
  v11 = (llvm::Type **)sub_21DF19394((uint64_t *)(v4 + 8), **(llvm::Type ***)(*(_QWORD *)v7 + 16), v7, 0, (uint64_t)v111);
  v12 = *(_QWORD *)(v6 + 3296);
  if (v12)
  {
    v13 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v112 = 257;
    v14 = (llvm::Type **)sub_21DF19394((uint64_t *)(v13 + 8), **(llvm::Type ***)(*(_QWORD *)v12 + 16), v12, 0, (uint64_t)v111);
  }
  else
  {
    v14 = 0;
  }
  v15 = **(_DWORD **)(a1 + 3808);
  v16 = *(_QWORD *)(a1 + 3824);
  if (v16)
    v17 = (int *)(v16 + 16);
  else
    v17 = (int *)(*(_QWORD *)(a1 + 3816) + 4 * v5 + 24);
  v18 = *v17;
  if (!(**(_DWORD **)(a1 + 3808) & 0x20 | *v17 & 1))
    goto LABEL_50;
  v19 = a1 + 2432;
  if (*(_BYTE *)(a1 + 2432 + (v5 << 6) + 60))
  {
    v99 = v2;
    v20 = v11;
    if (*(_BYTE *)(a1 + 10))
      v21 = 1;
    else
      v21 = *(_BYTE *)(a1 + 24) == 0;
    v22 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v23 = *(_QWORD *)(v22 + 344);
    v106 = *(_OWORD *)(v22 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 8));
    v108 = *(_DWORD *)(v22 + 104);
    v24 = a1 + (v5 << 6) + 2476;
    v11 = (llvm::Type **)sub_21DF2152C(v23, (uint64_t)&v106, v20, v24, v21);
    if (v107)
      llvm::MetadataTracking::untrack();
    if (v14)
    {
      v25 = v11;
      v97 = v5;
      v26 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v27 = *(_QWORD *)(v26 + 344);
      v103 = *(_OWORD *)(v26 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v26 + 8));
      v105 = *(_DWORD *)(v26 + 104);
      v14 = (llvm::Type **)sub_21DF2152C(v27, (uint64_t)&v103, v14, v24, v21);
      if (v104)
        llvm::MetadataTracking::untrack();
      v5 = v97;
      v11 = v25;
    }
    v2 = v99;
    v19 = a1 + 2432;
  }
  if ((v15 & 0x20) != 0)
  {
    v28 = (llvm::Type **)sub_21DF80BA8(v19, v2, 0, 0);
    v11 = (llvm::Type **)sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v11, *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 280), 0, 1, v29, v30, v31);
    v35 = sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v28, *(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 280), 0, 1, v32, v33, v34);
    v37 = v35;
    v38 = 0;
    switch((**(_DWORD **)(a1 + 3808) >> 6) & 0x1F)
    {
      case 1:
        AllOnesValue = llvm::ConstantInt::get();
        goto LABEL_49;
      case 2:
        v48 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v49 = v111;
        v50 = (uint64_t)v11;
        goto LABEL_34;
      case 3:
        v51 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v52 = sub_21DF3C6D4(v51, v35, (uint64_t)v111);
        v110 = 257;
        v49 = v109;
        v48 = v51;
        v50 = (uint64_t)v11;
        goto LABEL_35;
      case 4:
        goto LABEL_51;
      case 5:
        v53 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v50 = sub_21DF3C6D4(v53, (uint64_t)v11, (uint64_t)v111);
        v110 = 257;
        v49 = v109;
        v48 = v53;
LABEL_34:
        v52 = v37;
LABEL_35:
        AllOnesValue = sub_21DF1A410(v48, v50, v52, (uint64_t)v49);
        goto LABEL_49;
      case 6:
        v54 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v112 = 257;
        AllOnesValue = sub_21DF4ED70(v54, (uint64_t)v11, v37, (uint64_t)v111);
        goto LABEL_49;
      case 7:
        v55 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v56 = v111;
        v57 = (uint64_t)v11;
        goto LABEL_44;
      case 8:
        v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v59 = v5;
        v112 = 257;
        v60 = sub_21DF1A4A0((uint64_t)v58, (uint64_t)v11, v35, (uint64_t)v111);
        goto LABEL_47;
      case 9:
        v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v59 = v5;
        v112 = 257;
        v60 = sub_21DF4ED70(v58, (uint64_t)v11, v35, (uint64_t)v111);
        goto LABEL_47;
      case 0xA:
        v61 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v62 = v111;
        v63 = v37;
        goto LABEL_48;
      case 0xB:
        v64 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v65 = sub_21DF3C6D4(v64, v35, (uint64_t)v111);
        v110 = 257;
        v56 = v109;
        v55 = v64;
        v57 = (uint64_t)v11;
        goto LABEL_45;
      case 0xC:
        v61 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v62 = v111;
        v63 = (uint64_t)v11;
        goto LABEL_48;
      case 0xD:
        v66 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v112 = 257;
        v57 = sub_21DF3C6D4(v66, (uint64_t)v11, (uint64_t)v111);
        v110 = 257;
        v56 = v109;
        v55 = v66;
LABEL_44:
        v65 = v37;
LABEL_45:
        AllOnesValue = sub_21DF1A4A0(v55, v57, v65, (uint64_t)v56);
        goto LABEL_49;
      case 0xE:
        v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v59 = v5;
        v112 = 257;
        v60 = sub_21DF1A410((uint64_t)v58, (uint64_t)v11, v35, (uint64_t)v111);
LABEL_47:
        v63 = v60;
        v110 = 257;
        v5 = v59;
        v62 = v109;
        v61 = (uint64_t)v58;
LABEL_48:
        AllOnesValue = sub_21DF3C6D4(v61, v63, (uint64_t)v62);
        goto LABEL_49;
      case 0xF:
        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 280), v36);
LABEL_49:
        v11 = (llvm::Type **)AllOnesValue;
        goto LABEL_50;
      case 0x10:
        v38 = 0;
        v11 = (llvm::Type **)v35;
        goto LABEL_51;
      default:
        v38 = 0;
        v11 = 0;
        goto LABEL_51;
    }
  }
  if ((v18 & 1) != 0
    && ((v40 = *(_DWORD *)(*(_QWORD *)(a1 + 2960) + 4 * v5) & 0x1F, v41 = v40 > 0x13, v42 = (1 << v40) & 0x81B30, !v41)
      ? (v43 = v42 == 0)
      : (v43 = 1),
        v43))
  {
    v44 = *(_QWORD *)(a1 + 3824);
    v45 = v19;
    v46 = v11;
    if (v44)
      v47 = (_DWORD *)(v44 + 16);
    else
      v47 = (_DWORD *)(*(_QWORD *)(a1 + 3816) + 4 * v5 + 24);
    v73 = (*v47 >> 1) & 0x1F;
    v74 = (*v47 >> 6) & 0x1F;
    v95 = (unsigned __int16)*v47 >> 11;
    v96 = HIBYTE(*v47) & 7;
    v93 = (*v47 >> 21) & 7;
    v94 = HIWORD(*v47) & 0x1F;
    v98 = v5;
    v75 = a1 + 2440 + (v5 << 6);
    v76 = (llvm::Type **)(v75 + 8);
    v80 = sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v46, *(llvm::Type **)(v75 + 8), 0, 1, v8, v9, v10);
    if (v14)
      v14 = (llvm::Type **)sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v14, *v76, 0, 1, v77, v78, v79);
    v81 = (llvm::Type **)sub_21DF80BA8(v45, v2, 0, 0);
    v83 = *(unsigned __int8 *)(v75 + 34);
    v82 = (unsigned __int8 *)(v75 + 34);
    v87 = sub_21DF2F5B8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v81, *v76, v83, *(v82 - 1), v84, v85, v86);
    if (v82[18])
    {
      v88 = v74;
      v89 = v73;
      v90 = v93;
      v38 = ((*v47 >> 21) & 7u) - 1 <= 1 && (HIBYTE(*v47) & 7u) - 1 < 2;
    }
    else
    {
      v38 = 0;
      v88 = v74;
      v89 = v73;
      v90 = v93;
    }
    v91 = sub_21DF82654((_QWORD *)a1, v80, v14, v87, v90, v89, v88, (uint64_t)(v82 + 2), *v82, 1u);
    v92 = sub_21DF82654((_QWORD *)a1, v80, v14, v87, v96, v95, v94, (uint64_t)(v82 + 2), *v82, 0);
    v11 = (llvm::Type **)sub_21DF7A518(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v91, v92);
    v5 = v98;
  }
  else
  {
LABEL_50:
    v38 = 0;
  }
LABEL_51:
  v67 = (_QWORD *)(a1 + 2432);
  v68 = a1 + 2432 + (v5 << 6);
  if (*(_BYTE *)(v68 + 60)
    && *(_BYTE *)(v68 + 40)
    && (!*(_BYTE *)(*(_QWORD *)((char *)v67 + *(_QWORD *)(*v67 - 24) + 344) + 1642) || LOBYTE(v67[8 * v5 + 8]))
    && !v38)
  {
    v69 = v5;
    v70 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v71 = *(_QWORD *)(v70 + 344);
    v100 = *(_OWORD *)(v70 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v70 + 8));
    v102 = *(_DWORD *)(v70 + 104);
    v11 = (llvm::Type **)sub_21DF2152C(v71, (uint64_t)&v100, v11, a1 + (v69 << 6) + 2476, 0);
    if (v101)
      llvm::MetadataTracking::untrack();
  }
  return v11;
}

uint64_t sub_21DF820EC(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type **v22;
  unsigned __int8 *v23;
  unsigned int v24;
  llvm::Type *v25;
  llvm::Type **Select;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t result;
  unsigned int v47;
  _DWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  __int16 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v50 = (_DWORD *)(a1[66] + 4 * a3);
  v51 = a3;
  v6 = *v50 >> 5;
  v7 = *a1;
  v9 = *(unsigned int *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 828);
  LOBYTE(v10) = 4;
  switch(*v50 & 0x1F)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      LODWORD(v10) = (v9 + v6 - 1) & -(int)v9;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
      v10 = ((v9 + 2 * v6 - 1) & (unint64_t)-v9) >> 1;
      break;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x12:
      v10 = (((4 * v6) + v9 - 1) & (unint64_t)-v9) >> 2;
      break;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      break;
    default:
      LOBYTE(v10) = 0;
      break;
  }
  v11 = ~(-1 << v10);
  if (((1 << (v6 - 1)) & a4) != 0)
    v12 = (-1 << v6) & 0xF;
  else
    v12 = 0;
  v13 = (v12 | a4) & ~(-1 << v10);
  a1[69] |= ((_DWORD)v13 << (4 * a3));
  v14 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v7 - 24) + 344);
  v47 = (v12 | a4) & ~(-1 << v10);
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 384))(v14, *v50 & 0x1F, v13);
  v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v17 = *((_QWORD *)v16 + 43);
  v57 = *(_OWORD *)(v16 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 8));
  v59 = *((_DWORD *)v16 + 26);
  v18 = &a1[8 * v51];
  v22 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v17
                                                                                                  + 408))(v17, &v57, a2, v50, (uint64_t)v18 + 44);
  if (v58)
    llvm::MetadataTracking::untrack();
  v24 = *((unsigned __int8 *)v18 + 41);
  v23 = (unsigned __int8 *)v18 + 41;
  v25 = (llvm::Type *)sub_21DF2F5B8((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v22, *(llvm::Type **)(v23 - 17), v23[1], v24, v19, v20, v21);
  Select = (llvm::Type **)sub_21DF79940((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v25, *(_DWORD *)(a1[66] + 4 * v51) >> 5);
  if ((v11 & ~v15) != 0)
  {
    *(_QWORD *)&v60 = llvm::ConstantInt::get();
    *((_QWORD *)&v60 + 1) = llvm::ConstantInt::get();
    *(_QWORD *)&v61 = llvm::ConstantInt::get();
    *((_QWORD *)&v61 + 1) = llvm::ConstantInt::get();
    llvm::ConstantVector::get();
    v27 = a3;
    sub_21DF80BA8((uint64_t)a1, a3, 1, 1);
    v56 = 257;
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v28 = 15;
    if (!a5)
      goto LABEL_21;
  }
  else
  {
    v27 = a3;
    v28 = v47;
    if (!a5)
      goto LABEL_21;
  }
  if (v6 <= 3)
  {
    v60 = 0u;
    v61 = 0u;
    v29 = v6;
    if ((_DWORD)v6)
    {
      v30 = 0;
      do
        *((_QWORD *)&v60 + v30++) = llvm::ConstantInt::get();
      while (v6 != v30);
    }
    do
      *((_QWORD *)&v60 + v29++) = llvm::ConstantInt::get();
    while (v29 != 4);
    v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v32 = v31 + 8;
    v33 = llvm::ConstantInt::get();
    v34 = sub_21DF79DF4(v31, 4, v33);
    v35 = llvm::ConstantVector::get();
    v56 = 257;
    sub_21DF19EE8(v32, a5, v34, v35, (uint64_t)v55);
    v27 = a3;
  }
  sub_21DF80BA8((uint64_t)a1, v27, 1, 0);
  sub_21DF2F5B8((uint64_t)a1 + *(_QWORD *)(*a1 - 24), Select, *(llvm::Type **)(v23 - 17), v23[1], *v23, v36, v37, v38);
  v56 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
LABEL_21:
  v39 = &a1[8 * v51];
  v40 = sub_21DF81230((uint64_t)a1, (uint64_t)Select, v28, v27);
  v42 = v41;
  v43 = sub_21DF2F9D0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v40, v39[1], *((_DWORD *)v39 + 8));
  v44 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v45 = *((_QWORD *)v44 + 43);
  v52 = *(_OWORD *)(v44 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v44 + 8));
  v54 = *((_DWORD *)v44 + 26);
  result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 192))(v45, &v52, (unsigned __int16)*(_DWORD *)(a1[66] + 32) >> 12, BYTE2(*(_DWORD *)(a1[66] + 32)), v50, v39[1], v43, v42);
  if (v53)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_21DF82654(_QWORD *a1, uint64_t a2, llvm::Type **a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v16;
  llvm::Type **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _BYTE v50[32];
  __int16 v51;

  v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (a10)
  {
    v17 = (llvm::Type **)a2;
    v18 = sub_21DF79408(v16, a2, 3, 1);
    v19 = sub_21DF79408((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a4, 3, 1);
  }
  else
  {
    v20 = v16 + 8;
    v51 = 257;
    v21 = llvm::ConstantInt::get();
    v17 = (llvm::Type **)a2;
    v18 = sub_21DF79584(v20, a2, v21, (uint64_t)v50);
    v22 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v51 = 257;
    v23 = llvm::ConstantInt::get();
    v19 = sub_21DF79584(v22, a4, v23, (uint64_t)v50);
  }
  v24 = v19;
  if (a5 == 6)
  {
    v25 = llvm::ConstantFP::get();
    if (a10)
      v43 = sub_21DF79DF4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), 3, v25);
    else
      v43 = v25;
    goto LABEL_10;
  }
  v43 = v18;
  if ((a5 - 1) >= 2)
  {
LABEL_10:
    v26 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v27 = sub_21DF82A04(a1, v17, a3, a4, a6, a8, a9, a10);
    v51 = 257;
    v43 = sub_21DF20300(v26, v43, v27, (uint64_t)v50);
    v28 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v29 = sub_21DF82A04(a1, v17, a3, a4, a7, a8, a9, a10);
    v51 = 257;
    v24 = sub_21DF20300(v28, v24, v29, (uint64_t)v50);
  }
  switch(a5)
  {
    case 1:
      v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v34 = *((_QWORD *)v33 + 43);
      v47 = *(_OWORD *)(v33 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 8));
      v49 = *((_DWORD *)v33 + 26);
      v32 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 48))(v34, &v47, v43, v24, 0);
      if (v48)
        goto LABEL_17;
      return v32;
    case 2:
      v35 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v36 = *((_QWORD *)v35 + 43);
      v44 = *(_OWORD *)(v35 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v35 + 8));
      v46 = *((_DWORD *)v35 + 26);
      v32 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 56))(v36, &v44, v43, v24, 0);
      if (v45)
LABEL_17:
        llvm::MetadataTracking::untrack();
      return v32;
    case 3:
    case 6:
      v30 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v51 = 257;
      v31 = sub_21DF2074C(v30, v43, v24, (uint64_t)v50);
      goto LABEL_21;
    case 4:
      v37 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v51 = 257;
      v38 = v43;
      v39 = v24;
      goto LABEL_20;
    case 5:
      v37 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v51 = 257;
      v38 = v24;
      v39 = v43;
LABEL_20:
      v31 = sub_21DF20828(v37, v38, v39, (uint64_t)v50);
LABEL_21:
      v32 = v31;
      break;
    default:
      v32 = 0;
      break;
  }
  return v32;
}

uint64_t sub_21DF82A04(_QWORD *a1, llvm::Type **a2, llvm::Type **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v10;
  llvm::Type **v11;
  uint64_t GlobalVariable;
  uint64_t *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Type **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _QWORD v78[4];
  __int16 v79;

  v8 = a8;
  v10 = a4;
  v11 = a3;
  if ((a5 & 0xFFFFFFFC) == 0xC)
  {
    GlobalVariable = llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      v78[0] = "agc.blend_color";
      v79 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
    }
    v18 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v79 = 257;
    v19 = (_QWORD *)sub_21DF19394(v18 + 1, **(llvm::Type ***)(*(_QWORD *)GlobalVariable + 16), GlobalVariable, 0, (uint64_t)v78);
    v20 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v21 = *((_QWORD *)v20 + 43);
    v75 = *(_OWORD *)(v20 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v20 + 8));
    v77 = *((_DWORD *)v20 + 26);
    v25 = (llvm::Type **)sub_21DF2152C(v21, (uint64_t)&v75, v19, a6, 0);
    if (v76)
      llvm::MetadataTracking::untrack();
    v26 = sub_21DF2F5B8((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v25, *a2, a7, 1, v22, v23, v24);
    v8 = a8;
    v11 = a3;
    v10 = a4;
  }
  else
  {
    v26 = 0;
  }
  switch(a5)
  {
    case 1:
    case 2:
      v27 = llvm::ConstantFP::get();
      goto LABEL_39;
    case 3:
      goto LABEL_32;
    case 4:
      v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v29 = llvm::ConstantFP::get();
      v30 = (uint64_t)(v28 + 8);
      v79 = 257;
      v31 = (uint64_t)a2;
      goto LABEL_30;
    case 5:
      v32 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v33 = llvm::ConstantInt::get();
      v34 = v32;
      v35 = (uint64_t)a2;
      goto LABEL_36;
    case 6:
      v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v37 = llvm::ConstantInt::get();
      v38 = v36;
      v39 = (uint64_t)a2;
      goto LABEL_38;
    case 7:
      v40 = 1;
      a2 = (llvm::Type **)v10;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 8:
      v41 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v29 = llvm::ConstantFP::get();
      v30 = (uint64_t)(v41 + 8);
      v79 = 257;
      v31 = v10;
      goto LABEL_30;
    case 9:
      v42 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v33 = llvm::ConstantInt::get();
      v34 = v42;
      v35 = v10;
      goto LABEL_36;
    case 10:
      v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v37 = llvm::ConstantInt::get();
      v38 = v36;
      v39 = v10;
      goto LABEL_38;
    case 11:
      v43 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v44 = llvm::ConstantInt::get();
      v45 = sub_21DF79584(v43, (uint64_t)a2, v44, (uint64_t)v78);
      v46 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v47 = llvm::ConstantInt::get();
      v48 = sub_21DF79584(v46, v10, v47, (uint64_t)v78);
      v49 = llvm::ConstantFP::get();
      v79 = 257;
      v50 = sub_21DF20828(v46, v49, v48, (uint64_t)v78);
      v51 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v52 = *((_QWORD *)v51 + 43);
      v72 = *(_OWORD *)(v51 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v51 + 8));
      v74 = *((_DWORD *)v51 + 26);
      v53 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v52 + 48))(v52, &v72, v45, v50, 0);
      if (v73)
        llvm::MetadataTracking::untrack();
      v54 = sub_21DF79DF4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), 4, v53);
      v55 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v56 = llvm::ConstantFP::get();
      v79 = 257;
      v57 = llvm::ConstantInt::get();
      v58 = sub_21DF7980C((uint64_t)(v55 + 8), v54, v56, v57, (uint64_t)v78);
      goto LABEL_31;
    case 12:
      v40 = 1;
      a2 = (llvm::Type **)v26;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 13:
      v59 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v29 = llvm::ConstantFP::get();
      v30 = (uint64_t)(v59 + 8);
      v79 = 257;
      v31 = v26;
      goto LABEL_30;
    case 14:
      v60 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v33 = llvm::ConstantInt::get();
      v34 = v60;
      v35 = v26;
      goto LABEL_36;
    case 15:
      v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v37 = llvm::ConstantInt::get();
      v38 = v36;
      v39 = v26;
      goto LABEL_38;
    case 16:
      v40 = 1;
      a2 = v11;
      if (v8)
        goto LABEL_41;
      goto LABEL_33;
    case 17:
      v61 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v29 = llvm::ConstantFP::get();
      v30 = (uint64_t)(v61 + 8);
      v79 = 257;
      v31 = (uint64_t)v11;
LABEL_30:
      v58 = sub_21DF20828(v30, v29, v31, (uint64_t)v78);
LABEL_31:
      a2 = (llvm::Type **)v58;
LABEL_32:
      v40 = 1;
      if (!v8)
        goto LABEL_33;
      goto LABEL_41;
    case 18:
      v65 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v33 = llvm::ConstantInt::get();
      v34 = v65;
      v35 = (uint64_t)v11;
LABEL_36:
      v27 = sub_21DF79584(v34, v35, v33, (uint64_t)v78);
      goto LABEL_39;
    case 19:
      v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v79 = 257;
      v37 = llvm::ConstantInt::get();
      v38 = v36;
      v39 = (uint64_t)v11;
LABEL_38:
      v66 = sub_21DF79584(v38, v39, v37, (uint64_t)v78);
      v67 = llvm::ConstantFP::get();
      v79 = 257;
      v27 = sub_21DF20828(v36, v67, v66, (uint64_t)v78);
LABEL_39:
      a2 = (llvm::Type **)v27;
      break;
    default:
      a2 = 0;
      break;
  }
  v40 = 0;
  if (v8)
  {
LABEL_41:
    v68 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    if (v40)
      return sub_21DF79408(v68, (uint64_t)a2, 3, 1);
    else
      return sub_21DF79DF4(v68, 3, (uint64_t)a2);
  }
LABEL_33:
  if (v40)
  {
    v62 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v79 = 257;
    v63 = llvm::ConstantInt::get();
    return sub_21DF79584(v62, (uint64_t)a2, v63, (uint64_t)v78);
  }
  return (uint64_t)a2;
}

uint64_t sub_21DF83180(int a1, int a2, int a3)
{
  int v3;
  uint64_t result;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  v3 = a1 - 1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((a2 != 2 || a3 != 1) && (a2 != 4 || a3 != 3) && (a2 != 4 || a3 != 7))
      {
        v6 = a3 == 3 || a3 == 7;
        v7 = v6;
        if ((a2 != 8 || !v7) && (a2 != 6 || a3 != 5) && (a2 != 6 || a3 != 9))
        {
          v8 = a3 == 5 || a3 == 9;
          v9 = v8;
          if ((a2 != 10 || !v9) && (a2 != 1 || a3 != 2) && (a2 != 3 || a3 != 4) && (a2 != 7 || a3 != 4))
          {
            v10 = a2 == 3 || a2 == 7;
            v11 = v10;
            if ((a3 != 8 || !v11) && (a2 != 5 || a3 != 6) && (a2 != 9 || a3 != 6))
            {
              v5 = (a2 == 5 || a2 == 9) && a3 == 10;
              goto LABEL_60;
            }
          }
        }
      }
      break;
    case 3:
      v5 = a2 == 2 && a3 == 1;
      goto LABEL_60;
    case 4:
    case 5:
      v5 = a2 == 1 && a3 == 2;
LABEL_60:
      result = v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

__n128 sub_21DF832C8(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  __n128 result;
  _OWORD v13[2];
  _OWORD v14[2];

  v1 = a1[66];
  v2 = *(unsigned __int8 *)(v1 + 32);
  if (*(_BYTE *)(v1 + 32))
  {
    v4 = a1 + 43;
    do
    {
      v5 = __clz(v2);
      v6 = v5 ^ 0x1F;
      v7 = *a1;
      v8 = *(_BYTE **)((char *)v4 + *(_QWORD *)(*a1 - 24));
      v9 = a1[66];
      if (v8[1638])
      {
        if (*(unsigned __int8 *)(v9 + 34) <= (*(_DWORD *)(v9 + 4 * v6) >> 15))
        {
          *((_DWORD *)a1 + 134) = 1;
          v8 = *(_BYTE **)((char *)v4 + *(_QWORD *)(v7 - 24));
        }
      }
      v2 ^= 0x80000000 >> v5;
      (*(void (**)(_OWORD *__return_ptr, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v8 + 376))(v13, v8, *(_DWORD *)(v9 + 4 * v6) & 0x1F, (*(_DWORD *)(v9 + 4 * v6) >> 8) & 1);
      v10 = &a1[8 * v6];
      v11 = v13[1];
      *(_OWORD *)(v10 + 1) = v13[0];
      *(_OWORD *)(v10 + 3) = v11;
      *(_OWORD *)(v10 + 5) = v14[0];
      result = *(__n128 *)((char *)v14 + 9);
      *(_OWORD *)((char *)v10 + 49) = *(_OWORD *)((char *)v14 + 9);
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_21DF8339C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *a1;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *(int **)(v3 + 560);
  v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u && (v6 = v5[4]) != 0)
    v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  else
    v7 = 0;
  v8 = (uint64_t *)(v3 + 704);
  *(_BYTE *)(v3 + 774) = 1;
  v9 = (unsigned __int16 *)((char *)v7 - *v7);
  v10 = *v9;
  if (v10 < 0x15)
  {
    v11 = 0;
    v12 = 0;
    if (v10 < 0x11)
      goto LABEL_14;
  }
  else if (v9[10])
  {
    v11 = *(_QWORD *)((char *)v7 + v9[10]);
  }
  else
  {
    v11 = 0;
  }
  v13 = v9[8];
  if (v13)
    v12 = *(_QWORD *)((char *)v7 + v13);
  else
    v12 = 0;
LABEL_14:
  v14 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v2 - 24) + 344);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 392))(v14, a1[66], v12, v11);
  sub_21DF2DB90(v8, 8, a1[69] & v15);
  if (!*((_BYTE *)a1 + 560))
  {
    v19 = (unsigned __int16 *)((char *)v7 - *v7);
    v20 = *v19;
    if (v20 < 0x13)
    {
      v21 = 0;
      v22 = 0;
      if (v20 < 0xF)
      {
LABEL_29:
        v24 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
        v17 = a1[68] & (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 392))(v24, a1[66], v22, v21);
        goto LABEL_30;
      }
    }
    else if (v19[9])
    {
      v21 = *(_QWORD *)((char *)v7 + v19[9]);
    }
    else
    {
      v21 = 0;
    }
    v23 = v19[7];
    if (v23)
      v22 = *(_QWORD *)((char *)v7 + v23);
    else
      v22 = 0;
    goto LABEL_29;
  }
  v16 = *(unsigned __int8 *)(a1[66] + 32);
  if (*(_BYTE *)(a1[66] + 32))
  {
    v17 = 0;
    do
    {
      v18 = __clz(v16);
      v17 |= 15 << (124 - 4 * v18);
      v16 ^= 0x80000000 >> v18;
    }
    while (v16);
  }
  else
  {
    v17 = 0;
  }
LABEL_30:
  sub_21DF2DB90(v8, 6, v17);
  return v8;
}

uint64_t sub_21DF83580(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unint64_t v21;
  uint64_t v22;
  unint64_t i;
  unsigned __int8 *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t j;
  uint64_t String;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t k;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::MDString *v61;
  _QWORD *v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t Function;
  BOOL v75;
  uint64_t v76;
  BOOL v77;
  const char *v79;
  __int16 v80;

  v11 = sub_21DF9C730((uint64_t *)a1, a2 + 1, (uint64_t)a3, "air.fragment", *a4, a6);
  v12 = 0;
  v13 = a2[5];
  v11[304] = v13;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(v13 - 24) + 2432) = a2[6];
  *(_OWORD *)(v11 + 365) = 0u;
  *(_OWORD *)(v11 + 367) = 0u;
  *(_OWORD *)(v11 + 361) = 0u;
  *(_OWORD *)(v11 + 363) = 0u;
  *(_OWORD *)(v11 + 357) = 0u;
  *(_OWORD *)(v11 + 359) = 0u;
  *(_OWORD *)(v11 + 353) = 0u;
  *(_OWORD *)(v11 + 355) = 0u;
  *(_OWORD *)(v11 + 349) = 0u;
  *(_OWORD *)(v11 + 351) = 0u;
  *(_OWORD *)(v11 + 345) = 0u;
  *(_OWORD *)(v11 + 347) = 0u;
  *(_OWORD *)(v11 + 341) = 0u;
  *(_OWORD *)(v11 + 343) = 0u;
  *(_OWORD *)(v11 + 337) = 0u;
  *(_OWORD *)(v11 + 339) = 0u;
  *(_OWORD *)(v11 + 333) = 0u;
  *(_OWORD *)(v11 + 335) = 0u;
  *(_OWORD *)(v11 + 329) = 0u;
  *(_OWORD *)(v11 + 331) = 0u;
  *(_OWORD *)(v11 + 325) = 0u;
  *(_OWORD *)(v11 + 327) = 0u;
  *(_OWORD *)(v11 + 321) = 0u;
  *(_OWORD *)(v11 + 323) = 0u;
  *(_OWORD *)(v11 + 317) = 0u;
  *(_OWORD *)(v11 + 319) = 0u;
  *(_OWORD *)(v11 + 313) = 0u;
  *(_OWORD *)(v11 + 315) = 0u;
  *(_OWORD *)(v11 + 309) = 0u;
  *(_OWORD *)(v11 + 311) = 0u;
  *(_OWORD *)(v11 + 305) = 0u;
  *(_OWORD *)(v11 + 307) = 0u;
  do
  {
    v14 = a1 + v12;
    *(_BYTE *)(v14 + 2492) = 0;
    *(_BYTE *)(v14 + 2496) = 0;
    v12 += 64;
  }
  while (v12 != 512);
  v15 = 0;
  *(_DWORD *)(a1 + 2952) = 0;
  *(_QWORD *)(a1 + 2960) = a5;
  *(_DWORD *)(a1 + 2968) = *(unsigned __int8 *)(a5 + 34);
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_BYTE *)(a1 + 2992) = 0;
  v16 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v16 - 24)) = a2[7];
  *(_QWORD *)(a1 + 2432) = a2[8];
  *(_BYTE *)(a1 + 3008) = 0;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  do
  {
    *(_QWORD *)(a1 + v15 + 3024) = 4;
    *(_OWORD *)(a1 + v15 + 3032) = 0uLL;
    v15 += 32;
  }
  while (v15 != 256);
  v17 = 0;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3272) = 0u;
  *(_OWORD *)(a1 + 3288) = 0u;
  do
  {
    *(_QWORD *)(a1 + v17 + 3280) = 4;
    *(_OWORD *)(a1 + v17 + 3288) = 0uLL;
    v17 += 32;
  }
  while (v17 != 256);
  *(_BYTE *)(a1 + 3528) = 0;
  *(_BYTE *)(a1 + 3532) = 0;
  *(_QWORD *)(a1 + 3536) = 4;
  *(_QWORD *)(a1 + 3552) = 0;
  *(_QWORD *)(a1 + 3544) = 0;
  *(_QWORD *)(a1 + 3560) = 4;
  *(_QWORD *)(a1 + 3576) = 0;
  *(_QWORD *)(a1 + 3568) = 0;
  *(_QWORD *)(a1 + 3584) = 4;
  *(_QWORD *)(a1 + 3600) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3608) = 4;
  *(_QWORD *)(a1 + 3624) = 0;
  *(_QWORD *)(a1 + 3616) = 0;
  *(_QWORD *)(a1 + 3632) = 4;
  *(_QWORD *)(a1 + 3648) = 0;
  *(_QWORD *)(a1 + 3640) = 0;
  *(_DWORD *)(a1 + 3656) = (unsigned __int16)*(_DWORD *)*a4 >> 12;
  *(_QWORD *)(a1 + 3664) = 4;
  *(_QWORD *)(a1 + 3680) = 0;
  *(_QWORD *)(a1 + 3672) = 0;
  *(_QWORD *)(a1 + 3688) = 4;
  *(_QWORD *)(a1 + 3704) = 0;
  *(_QWORD *)(a1 + 3696) = 0;
  *(_QWORD *)(a1 + 3712) = 4;
  *(_QWORD *)(a1 + 3728) = 0;
  *(_QWORD *)(a1 + 3720) = 0;
  *(_QWORD *)(a1 + 3736) = 4;
  *(_QWORD *)(a1 + 3752) = 0;
  *(_QWORD *)(a1 + 3744) = 0;
  *(_QWORD *)(a1 + 3760) = 4;
  *(_QWORD *)(a1 + 3776) = 0;
  *(_QWORD *)(a1 + 3768) = 0;
  *(_QWORD *)(a1 + 3784) = 4;
  *(_QWORD *)(a1 + 3800) = 0;
  *(_QWORD *)(a1 + 3792) = 0;
  v18 = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 3824) = a4[2];
  *(_OWORD *)(a1 + 3808) = v18;
  *(_BYTE *)(a1 + 3843) = 0;
  *(_QWORD *)(a1 + 3832) = 0;
  *(_WORD *)(a1 + 3840) = 0;
  v79 = "air.fragment";
  *(_QWORD *)(a1 + 3844) = 0x400000000;
  *(_QWORD *)(a1 + 3852) = 0;
  *(_DWORD *)(a1 + 3860) = 0;
  v80 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a3, (const llvm::Twine *)&v79);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v21 = *(unsigned int *)(Operand + 8);
  if (v21 >= 4)
  {
    v22 = Operand;
    for (i = 3; i < v21; ++i)
    {
      v24 = *(unsigned __int8 **)(v22 - 8 * v21 + 8 * i);
      v25 = *v24;
      v26 = v25 > 0x22 || ((0x7FFFFFFF0uLL >> v25) & 1) == 0;
      if (!v26)
      {
        v27 = *((unsigned int *)v24 + 2);
        if ((_DWORD)v27)
        {
          for (j = 0; j < v27; ++j)
          {
            if (sub_21DF241E0(*(llvm::MDString **)&v24[8 * j + -8 * v27], "air.fragment_rate"))
            {
              String = llvm::MDString::getString(*(llvm::MDString **)&v24[8 * j + 8 + -8 * *((unsigned int *)v24 + 2)]);
              if (v30 == 5)
              {
                v31 = *(_DWORD *)String == 1869377379 && *(_BYTE *)(String + 4) == 114;
                v32 = v31;
              }
              else
              {
                v32 = 0;
              }
              *(_DWORD *)(a1 + 3860) = v32;
              if ((((*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 12) ^ (*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 8)) & 0xF) == 0)
                *(_DWORD *)(a1 + 3860) = 0;
            }
            v27 = *((unsigned int *)v24 + 2);
          }
          v21 = *(unsigned int *)(v22 + 8);
        }
      }
    }
  }
  v33 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v33)
  {
    for (k = 0; k != v33; ++k)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * k);
      if (v35)
      {
        v36 = llvm::MDString::getString(*(llvm::MDString **)(v35 - 8 * *(unsigned int *)(v35 + 8) + 8));
        switch(v37)
        {
          case 12:
            if (*(_QWORD *)v36 == 0x69736F702E726961 && *(_DWORD *)(v36 + 8) == 1852795252)
              *(_BYTE *)(a1 + 3839) = 1;
            break;
          case 15:
            if (*(_QWORD *)v36 == 0x6E696F702E726961 && *(_QWORD *)(v36 + 7) == 0x64726F6F635F746ELL)
              *(_BYTE *)(a1 + 3841) = 1;
            break;
          case 16:
            if (*(_QWORD *)v36 == 0x6E6F72662E726961 && *(_QWORD *)(v36 + 8) == 0x676E696361665F74)
              *(_BYTE *)(a1 + 3840) = 1;
            break;
          case 18:
            if (*(_QWORD *)v36 == 0x706D61732E726961
              && *(_QWORD *)(v36 + 8) == 0x5F6B73616D5F656CLL
              && *(_WORD *)(v36 + 16) == 28265)
            {
              v43 = *(unsigned int *)(v35 + 8);
              if (v35 - 8 * v43 + 16 == v35)
              {
                v46 = 0;
              }
              else
              {
                v44 = -8 * v43;
                v45 = v35 + 16;
                do
                {
                  v46 = sub_21DF241E0(*(llvm::MDString **)(v45 + v44), "air.post_depth_coverage");
                  if (v46)
                    break;
                  v26 = v44 == -24;
                  v44 += 8;
                }
                while (!v26);
              }
              *(_BYTE *)(a1 + 3854) = v46;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  v47 = **(_DWORD **)(a1 + 3808);
  v48 = (v47 & 0x60000) == 0x40000 && ((v47 & 0x10000) != 0 || (*(_BYTE *)(*(_QWORD *)(a1 + 2960) + 33) & 0xE) != 0);
  *(_BYTE *)(a1 + 3842) = v48;
  v49 = *(_QWORD *)(a1 + 56);
  if (v49)
  {
    v50 = *(unsigned int *)(v49 + 8);
    if ((_DWORD)v50)
    {
      v51 = 0;
      while (1)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8 * *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8) + 8 * v51);
        v53 = llvm::MDString::getString(*(llvm::MDString **)(v52 - 8 * *(unsigned int *)(v52 + 8)));
        v55 = (_QWORD *)v53;
        v56 = v54;
        if (v54 == 12)
          break;
        if (v54 != 9)
          goto LABEL_92;
        if (*(_QWORD *)v53 != 0x747065642E726961 || *(_BYTE *)(v53 + 8) != 104)
          goto LABEL_92;
        *(_BYTE *)(a1 + 3843) = 1;
        *(_DWORD *)(a1 + 3848) = 0;
        v58 = *(unsigned int *)(v52 + 8);
        if (v58 >= 2)
        {
          v60 = 1;
          while (1)
          {
            v59 = v52 - 8 * v58;
            v61 = *(llvm::MDString **)(v59 + 8 * v60);
            if (!*(_BYTE *)v61)
              break;
            if (v58 == ++v60)
              goto LABEL_129;
          }
          v64 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v59 + 8 * v60));
          if (v65 == 19)
          {
            v66 = *v64 == 0x747065642E726961 && v64[1] == 0x66696C6175715F68;
            if (v66 && *(_QWORD *)((char *)v64 + 11) == 0x72656966696C6175)
              v61 = *(llvm::MDString **)(v52 - 8 * *(unsigned int *)(v52 + 8) + 8 * (v60 + 1));
          }
          v68 = (_QWORD *)llvm::MDString::getString(v61);
          switch(v69)
          {
            case 11:
              if (*v68 == 0x616572672E726961 && *(_QWORD *)((char *)v68 + 3) == 0x726574616572672ELL)
              {
                v70 = 1;
                goto LABEL_127;
              }
              break;
            case 8:
              v71 = 2 * (*v68 == 0x7373656C2E726961);
              goto LABEL_128;
            case 7:
              v70 = 0;
              v71 = 0;
              if (*(_DWORD *)v68 != 779250017 || *(_DWORD *)((char *)v68 + 3) != 2037276974)
                goto LABEL_128;
LABEL_127:
              v71 = v70;
LABEL_128:
              *(_DWORD *)(a1 + 3844) = v71;
              goto LABEL_129;
          }
          v71 = 0;
          goto LABEL_128;
        }
LABEL_129:
        if (++v51 == v50)
          goto LABEL_130;
      }
      if (*(_QWORD *)v53 != 0x65766F632E726961 || *(_DWORD *)(v53 + 8) != 1701273970)
      {
LABEL_92:
        if (!sub_21DF807A0((uint64_t *)v53, v54))
        {
          if (v56 == 11 && *v55 == 0x6E6574732E726961 && *(_QWORD *)((char *)v55 + 3) == 0x6C69636E6574732ELL)
            *(_BYTE *)(a1 + 3855) = 1;
          goto LABEL_129;
        }
      }
      *(_BYTE *)(a1 + 3852) = 1;
      goto LABEL_129;
    }
  }
LABEL_130:
  Function = llvm::Module::getFunction();
  if (Function)
    v75 = *(_QWORD *)(Function + 8) != 0;
  else
    v75 = 0;
  *(_BYTE *)(a1 + 3853) = v75;
  v76 = llvm::Module::getFunction();
  if (v76)
    v77 = *(_QWORD *)(v76 + 8) != 0;
  else
    v77 = 0;
  *(_BYTE *)(a1 + 11) = v77;
  return a1;
}

uint64_t sub_21DF83DCC(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;
  _BOOL4 v10;
  uint64_t *v11;
  __int16 v12;
  __int16 v13;
  int v14;
  int v16;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v3 = *(int **)(v2 + 560);
  v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 >= 9u && (v5 = v4[4]) != 0)
    v6 = (int *)((char *)v3 + v5 + *(unsigned int *)((char *)v3 + v5));
  else
    v6 = 0;
  v16 = 0;
  v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0xDu && (v8 = v7[6]) != 0)
    v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  else
    v9 = 0;
  v10 = sub_21DF2E85C(v2, v9, &v16);
  v11 = sub_21DF8339C((uint64_t *)(a1 + 2432));
  v13 = v12;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1
                                                                                        + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                        + 344)
                                                                          + 432))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), *(unsigned __int8 *)(a1 + 3837), (*(_DWORD *)(*(_QWORD *)(a1 + 2960) + 32) >> 8) & 0xF, *(unsigned __int8 *)(a1 + 3838), *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 480));
  sub_21DF2FF00(v11, 4, v14);
  if (v10)
    sub_21DF2DB24(v11, 10, v16);
  sub_21DF2FF00(v11, 12, *(char *)(a1 + 3844));
  return sub_21DF2DC24((uint64_t)v11, v13);
}

uint64_t sub_21DF83EF8(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char **v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  llvm::Value *v14;
  _WORD v16[20];
  uint64_t *v17;

  v17 = a2;
  v5 = *a2;
  v6 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v7 = *(const char ***)(v6 + 344);
  v8 = v7 + 178;
  if (*(_QWORD *)(v6 + 152) == *a2)
    v8 = v7 + 180;
  v9 = v7 + 177;
  v10 = v7 + 179;
  if (*(_QWORD *)(v6 + 152) != *a2)
    v10 = v9;
  if (!a3)
    v8 = v10;
  v11 = *v8;
  if (*v8)
    v12 = strlen(*v8);
  else
    v12 = 0;
  v13 = sub_21DF203DC(v6, (uint64_t)v11, v12, v5, v5);
  v16[16] = 257;
  v14 = sub_21DF191A4(v6 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)&v17, 1, (uint64_t)v16);
  if (a3 == 1)
    return (*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)a1 + 384))(a1, v14);
  return (uint64_t)v14;
}

_QWORD *sub_21DF83FE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  *a1 = &off_24E1F2680;
  a1[520] = &unk_24E1F2880;
  v2 = (void *)a1[517];
  if (v2)
  {
    a1[518] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[510];
  if (v3)
  {
    a1[511] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[487];
  if (v4 != a1 + 489)
    free(v4);
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F28E8);
  sub_21DF2E650((uint64_t)(a1 + 520));
  return a1;
}

void sub_21DF84070(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  *a1 = &off_24E1F2680;
  a1[520] = &unk_24E1F2880;
  v2 = (void *)a1[517];
  if (v2)
  {
    a1[518] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[510];
  if (v3)
  {
    a1[511] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[487];
  if (v4 != a1 + 489)
    free(v4);
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F28E8);
  sub_21DF2E650((uint64_t)(a1 + 520));
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF84108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  unint64_t v50;
  _DWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  void *v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::MDString *v73;
  unint64_t *String;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  char *v84;
  unint64_t v85;
  _DWORD *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  char *v100;
  unint64_t v101;
  _DWORD *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  int v114;
  char *v115;
  unint64_t v116;
  char *v117;
  _BYTE *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  char v132;
  int v133;
  int v134;
  int v135;

  sub_21DF58CF4(a1);
  v2 = *(_QWORD *)(a1 + 4112);
  v3 = *(unsigned int *)(v2 + 80);
  if (*(_DWORD *)(v2 + 80))
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned int **)(a1 + 3896);
      v6 = *(unsigned int *)(a1 + 3904);
      v7 = v5;
      if ((_DWORD)v6)
      {
        v8 = 4 * v6;
        v7 = *(unsigned int **)(a1 + 3896);
        while (*(unsigned __int8 *)(*(_QWORD *)(a1 + 4112) + 4 * v4) >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 4112) + 4 * *v7))
        {
          ++v7;
          v8 -= 4;
          if (!v8)
            goto LABEL_14;
        }
      }
      if (&v5[v6] == v7)
      {
LABEL_14:
        sub_21DF227A4(a1 + 3896, v4);
      }
      else
      {
        if (v6 >= *(_DWORD *)(a1 + 3908))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(_QWORD *)(a1 + 3896);
          v6 = *(unsigned int *)(a1 + 3904);
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 3896);
        }
        v10 = (_DWORD *)(v9 + 4 * (v7 - v5));
        *(_DWORD *)(v9 + 4 * v6) = *(_DWORD *)(v9 + 4 * v6 - 4);
        v11 = *(unsigned int *)(a1 + 3904);
        v12 = v9 + 4 * v11 - 4;
        if ((_DWORD *)v12 != v10)
        {
          memmove(v10 + 1, v10, v12 - (_QWORD)v10);
          LODWORD(v11) = *(_DWORD *)(a1 + 3904);
        }
        *(_DWORD *)(a1 + 3904) = v11 + 1;
        *v10 = v4;
      }
      ++v4;
    }
    while (v4 != v3);
  }
  v13 = *(unsigned int *)(a1 + 3904);
  v14 = *(_QWORD *)(a1 + 4144);
  v15 = *(_QWORD *)(a1 + 4136);
  v16 = (v14 - v15) >> 2;
  if (v13 <= v16)
  {
    if (v13 >= v16)
      goto LABEL_34;
    v30 = v15 + 4 * v13;
    goto LABEL_31;
  }
  v17 = v13 - v16;
  v18 = *(_QWORD *)(a1 + 4152);
  v19 = 4 * (v13 - v16);
  if (v13 - v16 <= (v18 - v14) >> 2)
  {
    bzero(*(void **)(a1 + 4144), 4 * (v13 - v16));
    v30 = v14 + 4 * v17;
LABEL_31:
    *(_QWORD *)(a1 + 4144) = v30;
    goto LABEL_34;
  }
  v20 = v18 - v15;
  if (v20 >> 1 > v13)
    v13 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v13;
  v22 = (char *)sub_21DF2EACC(v21);
  v23 = *(char **)(a1 + 4144);
  v24 = *(char **)(a1 + 4136);
  v25 = &v22[4 * v16];
  v27 = &v22[4 * v26];
  bzero(v25, v19);
  v28 = &v25[4 * v17];
  while (v23 != v24)
  {
    v29 = *((_DWORD *)v23 - 1);
    v23 -= 4;
    *((_DWORD *)v25 - 1) = v29;
    v25 -= 4;
  }
  *(_QWORD *)(a1 + 4136) = v25;
  *(_QWORD *)(a1 + 4144) = v28;
  *(_QWORD *)(a1 + 4152) = v27;
  if (v24)
    operator delete(v24);
LABEL_34:
  v31 = *(unsigned int *)(a1 + 3904);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 0;
    v135 = 0;
    v34 = a1 + 344;
    v128 = *(unsigned int *)(a1 + 3904);
    do
    {
      v35 = *(unsigned int *)(*(_QWORD *)(a1 + 3896) + 4 * v32);
      v36 = *(_QWORD *)(a1 + 4112);
      v37 = *(_DWORD *)(v36 + 4 * v35);
      v38 = v37;
      v39 = *(_QWORD *)(v36 + 80);
      if (v37 == BYTE4(v39))
      {
        v40 = 0;
        v41 = 0;
        v42 = 3;
      }
      else if (v37 == BYTE5(v39))
      {
        v40 = 0;
        v41 = 1;
        v42 = 1;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v40 = 1;
      }
      if (BYTE2(v37) > 0xAu)
        v43 = -1;
      else
        v43 = (dword_21DFA3030[BYTE2(v37)] + dword_21DFA3030[BYTE2(v37)] * BYTE1(v37) + 3) >> 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 4136) + 4 * v35) = v43;
      v44 = *(_DWORD *)(v36 + 4 * v35);
      v45 = BYTE1(v44);
      v46 = v44;
      v47 = BYTE2(v44);
      v48 = *(_DWORD *)(a1 + 3088);
      v49 = *(char **)(a1 + 4088);
      v50 = *(_QWORD *)(a1 + 4096);
      if ((unint64_t)v49 >= v50)
      {
        v134 = v33;
        v52 = *(char **)(a1 + 4080);
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - v52) >> 2);
        v54 = v53 + 1;
        if (v53 + 1 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_154;
        v129 = v43;
        v130 = v40;
        v131 = v41;
        v132 = BYTE4(v39);
        v133 = v38;
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - (_QWORD)v52) >> 2);
        if (2 * v55 > v54)
          v54 = 2 * v55;
        if (v55 >= 0x666666666666666)
          v56 = 0xCCCCCCCCCCCCCCCLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = v42;
          v58 = sub_21DF88368(v56);
          v42 = v57;
          v56 = (unint64_t)v58;
          v49 = *(char **)(a1 + 4088);
          v52 = *(char **)(a1 + 4080);
        }
        else
        {
          v59 = 0;
        }
        v60 = (_DWORD *)(v56 + 20 * v53);
        *v60 = v45;
        v60[1] = v46;
        v60[2] = v47;
        v60[3] = v48;
        v60[4] = v42;
        v61 = v60;
        if (v49 != v52)
        {
          do
          {
            v62 = *(_OWORD *)(v49 - 20);
            *(v61 - 1) = *((_DWORD *)v49 - 1);
            *(_OWORD *)(v61 - 5) = v62;
            v61 -= 5;
            v49 -= 20;
          }
          while (v49 != v52);
          v52 = *(char **)(a1 + 4080);
        }
        *(_QWORD *)(a1 + 4080) = v61;
        v51 = v60 + 5;
        *(_QWORD *)(a1 + 4088) = v60 + 5;
        *(_QWORD *)(a1 + 4096) = v56 + 20 * v59;
        if (v52)
          operator delete(v52);
        v38 = v133;
        v33 = v134;
        v34 = a1 + 344;
        v31 = v128;
        BYTE4(v39) = v132;
        v40 = v130;
        v41 = v131;
        v43 = v129;
      }
      else
      {
        *(_DWORD *)v49 = v45;
        *((_DWORD *)v49 + 1) = v46;
        *((_DWORD *)v49 + 2) = v47;
        *((_DWORD *)v49 + 3) = v48;
        v51 = v49 + 20;
        *((_DWORD *)v49 + 4) = v42;
      }
      *(_QWORD *)(a1 + 4088) = v51;
      v63 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)(v34 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 1653))
      {
        if (v40)
        {
          v43 = 0;
          v33 |= *(_QWORD *)(*(_QWORD *)(a1 + 4112) + 72) >> *(_BYTE *)(v36 + 4 * v35);
          v135 = 1;
        }
        else
        {
          v64 = v41 | v135;
          if (v38 == BYTE4(v39))
            v64 = 1;
          v135 = v64;
          if (v38 != BYTE4(v39))
            v33 |= v41;
          v43 = 0;
        }
      }
      *(_DWORD *)(a1 + 3088) += v43;
      ++v32;
    }
    while (v32 != v31);
  }
  else
  {
    LOBYTE(v135) = 0;
    LOBYTE(v33) = 0;
    v63 = *(_QWORD *)a1;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(v63 - 24) + 344) + 1654))
  {
    v65 = v33;
    v66 = *(_QWORD *)(a1 + 160);
    if ((*(_WORD *)(v66 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
      v69 = *(_QWORD *)(a1 + 160);
      v67 = *(_QWORD *)(v66 + 88);
      if ((*(_WORD *)(v69 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
      v66 = v69;
    }
    else
    {
      v67 = *(_QWORD *)(v66 + 88);
    }
    v70 = *(_QWORD *)(v66 + 88) + 40 * *(_QWORD *)(v66 + 96);
    if (v67 == v70)
    {
LABEL_96:
      v68 = 0;
    }
    else
    {
      while (1)
      {
        v71 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(v67 + 32));
        if (*(_QWORD *)(v67 + 8) && v71 != 0)
        {
          v73 = *(llvm::MDString **)(v71 - 8 * *(unsigned int *)(v71 + 8) + 8);
          if (!*(_BYTE *)v73)
          {
            String = (unint64_t *)llvm::MDString::getString(v73);
            if (v75 == 29)
            {
              v76 = bswap64(*String);
              v77 = 0x6169722E76657274;
              if (v76 != 0x6169722E76657274)
                goto LABEL_91;
              v76 = bswap64(String[1]);
              v77 = 0x65785F7472616E73;
              if (v76 == 0x65785F7472616E73
                && (v77 = 0x666F726D5F666565, v76 = bswap64(String[2]), v76 == 0x666F726D5F666565)
                && (v77 = 0x666565646261636BLL,
                    v76 = bswap64(*(unint64_t *)((char *)String + 21)),
                    v76 == 0x666565646261636BLL))
              {
                v78 = 0;
              }
              else
              {
LABEL_91:
                v78 = v76 < v77 ? -1 : 1;
              }
              if (!v78)
                break;
            }
          }
        }
        v67 += 40;
        if (v67 == v70)
          goto LABEL_96;
      }
      v68 = 1;
    }
    LOBYTE(v33) = v65;
  }
  else
  {
    v68 = 0;
  }
  if ((v135 & 1) != 0)
  {
    v79 = v33;
    v80 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80 + 312))(v80, a1 + 3088, 4);
    v82 = v81;
    v83 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 4112) + 84);
    v84 = *(char **)(a1 + 4088);
    v85 = *(_QWORD *)(a1 + 4096);
    if ((unint64_t)v84 >= v85)
    {
      v87 = *(char **)(a1 + 4080);
      v88 = 0xCCCCCCCCCCCCCCCDLL * ((v84 - v87) >> 2);
      v89 = v88 + 1;
      if (v88 + 1 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_154;
      v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - (_QWORD)v87) >> 2);
      if (2 * v90 > v89)
        v89 = 2 * v90;
      if (v90 >= 0x666666666666666)
        v91 = 0xCCCCCCCCCCCCCCCLL;
      else
        v91 = v89;
      if (v91)
      {
        v91 = (unint64_t)sub_21DF88368(v91);
        v84 = *(char **)(a1 + 4088);
        v87 = *(char **)(a1 + 4080);
      }
      else
      {
        v92 = 0;
      }
      v93 = (_DWORD *)(v91 + 20 * v88);
      v94 = v91 + 20 * v92;
      *v93 = 0;
      v93[1] = v83;
      v93[2] = 3;
      v93[3] = v82;
      v93[4] = 4;
      v86 = v93 + 5;
      if (v84 != v87)
      {
        do
        {
          v95 = *(_OWORD *)(v84 - 20);
          *(v93 - 1) = *((_DWORD *)v84 - 1);
          *(_OWORD *)(v93 - 5) = v95;
          v93 -= 5;
          v84 -= 20;
        }
        while (v84 != v87);
        v87 = *(char **)(a1 + 4080);
      }
      *(_QWORD *)(a1 + 4080) = v93;
      *(_QWORD *)(a1 + 4088) = v86;
      *(_QWORD *)(a1 + 4096) = v94;
      if (v87)
        operator delete(v87);
    }
    else
    {
      *(_DWORD *)v84 = 0;
      *((_DWORD *)v84 + 1) = v83;
      *((_DWORD *)v84 + 2) = 3;
      *((_DWORD *)v84 + 3) = v81;
      v86 = v84 + 20;
      *((_DWORD *)v84 + 4) = 4;
    }
    *(_QWORD *)(a1 + 4088) = v86;
    *(_DWORD *)(a1 + 4104) = v82;
    LOBYTE(v33) = v79;
  }
  if ((v33 & 1) != 0)
  {
    v96 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 312))(v96, a1 + 3088, 2);
    v98 = v97;
    v99 = ((unsigned __int16)WORD2(*(_QWORD *)(*(_QWORD *)(a1 + 4112) + 80)) >> 8);
    v100 = *(char **)(a1 + 4088);
    v101 = *(_QWORD *)(a1 + 4096);
    if ((unint64_t)v100 >= v101)
    {
      v103 = *(char **)(a1 + 4080);
      v104 = 0xCCCCCCCCCCCCCCCDLL * ((v100 - v103) >> 2);
      v105 = v104 + 1;
      if (v104 + 1 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_154;
      v106 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v101 - (_QWORD)v103) >> 2);
      if (2 * v106 > v105)
        v105 = 2 * v106;
      if (v106 >= 0x666666666666666)
        v107 = 0xCCCCCCCCCCCCCCCLL;
      else
        v107 = v105;
      if (v107)
      {
        v107 = (unint64_t)sub_21DF88368(v107);
        v100 = *(char **)(a1 + 4088);
        v103 = *(char **)(a1 + 4080);
      }
      else
      {
        v108 = 0;
      }
      v109 = (_DWORD *)(v107 + 20 * v104);
      v110 = v107 + 20 * v108;
      *v109 = 0;
      v109[1] = v99;
      v109[2] = 3;
      v109[3] = v98;
      v109[4] = 2;
      v102 = v109 + 5;
      if (v100 != v103)
      {
        do
        {
          v111 = *(_OWORD *)(v100 - 20);
          *(v109 - 1) = *((_DWORD *)v100 - 1);
          *(_OWORD *)(v109 - 5) = v111;
          v109 -= 5;
          v100 -= 20;
        }
        while (v100 != v103);
        v103 = *(char **)(a1 + 4080);
      }
      *(_QWORD *)(a1 + 4080) = v109;
      *(_QWORD *)(a1 + 4088) = v102;
      *(_QWORD *)(a1 + 4096) = v110;
      if (v103)
        operator delete(v103);
    }
    else
    {
      *(_DWORD *)v100 = 0;
      *((_DWORD *)v100 + 1) = v99;
      *((_DWORD *)v100 + 2) = 3;
      *((_DWORD *)v100 + 3) = v97;
      v102 = v100 + 20;
      *((_DWORD *)v100 + 4) = 2;
    }
    *(_QWORD *)(a1 + 4088) = v102;
    *(_DWORD *)(a1 + 4108) = v98;
  }
  if (v68)
  {
    v112 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 312))(v112, a1 + 3088, 5);
    v114 = v113;
    v115 = *(char **)(a1 + 4088);
    v116 = *(_QWORD *)(a1 + 4096);
    if ((unint64_t)v115 < v116)
    {
      *(_QWORD *)v115 = 0;
      *((_DWORD *)v115 + 2) = 3;
      *((_DWORD *)v115 + 3) = v113;
      v117 = v115 + 20;
      *((_DWORD *)v115 + 4) = 5;
LABEL_151:
      *(_QWORD *)(a1 + 4088) = v117;
      *(_DWORD *)(a1 + 3260) = v114;
      return 1;
    }
    v118 = *(_BYTE **)(a1 + 4080);
    v119 = 0xCCCCCCCCCCCCCCCDLL * ((v115 - v118) >> 2);
    v120 = v119 + 1;
    if (v119 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v116 - (_QWORD)v118) >> 2);
      if (2 * v121 > v120)
        v120 = 2 * v121;
      if (v121 >= 0x666666666666666)
        v122 = 0xCCCCCCCCCCCCCCCLL;
      else
        v122 = v120;
      if (v122)
      {
        v122 = (unint64_t)sub_21DF88368(v122);
        v115 = *(char **)(a1 + 4088);
        v118 = *(_BYTE **)(a1 + 4080);
      }
      else
      {
        v123 = 0;
      }
      v124 = v122 + 20 * v119;
      v125 = v122 + 20 * v123;
      *(_QWORD *)v124 = 0;
      *(_DWORD *)(v124 + 8) = 3;
      *(_DWORD *)(v124 + 12) = v114;
      *(_DWORD *)(v124 + 16) = 5;
      v117 = (char *)(v124 + 20);
      if (v115 != v118)
      {
        do
        {
          v126 = *(_OWORD *)(v115 - 20);
          *(_DWORD *)(v124 - 4) = *((_DWORD *)v115 - 1);
          *(_OWORD *)(v124 - 20) = v126;
          v124 -= 20;
          v115 -= 20;
        }
        while (v115 != v118);
        v118 = *(_BYTE **)(a1 + 4080);
      }
      *(_QWORD *)(a1 + 4080) = v124;
      *(_QWORD *)(a1 + 4088) = v117;
      *(_QWORD *)(a1 + 4096) = v125;
      if (v118)
        operator delete(v118);
      goto LABEL_151;
    }
LABEL_154:
    abort();
  }
  return 1;
}

uint64_t sub_21DF84B14(uint64_t a1)
{
  uint64_t Int8PtrTy;
  const char *v3;
  llvm::Function **v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::Instruction *v37;
  _QWORD *v38;
  llvm::Instruction *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  llvm::Type ***v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::LLVMContext *v53;
  unint64_t v54;
  uint64_t v55;
  llvm::GetElementPtrInst *v56;
  llvm::GetElementPtrInst *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t Select;
  unint64_t v66;
  llvm::LLVMContext *v67;
  uint64_t v68;
  llvm::GetElementPtrInst *v69;
  llvm::GetElementPtrInst *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::User *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t Function;
  uint64_t *v132;
  uint64_t v133;
  llvm::Function *v134;
  uint64_t v135;
  llvm::Function *v136;
  __int16 v137;
  uint64_t j;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *String;
  uint64_t v144;
  _BYTE *v146;
  llvm::MDString *v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  llvm::Function *v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  llvm::BasicBlock *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  llvm::Value *v175;
  llvm::Value *v176;
  llvm::Instruction *v177;
  uint64_t FirstInsertionPt;
  _DWORD v179[8];
  __int16 v180;
  int v181[8];
  __int16 v182;
  const char *v183;
  const char *v184;
  unint64_t v185;
  __int16 v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  sub_21DF939C4(a1);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 336), (llvm::LLVMContext *)2);
  v3 = *(const char **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
  v183 = (const char *)Int8PtrTy;
  v184 = v3;
  llvm::StructType::get();
  v4 = (llvm::Function **)(a1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
  if (v5)
    v6 = (llvm::BasicBlock *)(v5 - 24);
  else
    v6 = 0;
  v7 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1653))
  {
    v161 = *(_QWORD *)(*(_QWORD *)(a1 + 4112) + 72);
    v167 = *(_QWORD *)(*(_QWORD *)(a1 + 4112) + 64);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
    sub_21DF5BCC0((uint64_t)v6, (uint64_t)&FirstInsertionPt);
    sub_21DF19018(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v6, FirstInsertionPt);
    if (*(_DWORD *)(a1 + 4108) == -1)
    {
      v164 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v9 = sub_21DF99DC8((_QWORD *)a1);
      v10 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
      v186 = 257;
      v11 = sub_21DF1A79C(v8, 49, (uint64_t)v9, v10, (uint64_t)&v183);
      v12 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200);
      v182 = 257;
      v164 = sub_21DF1A79C(v8, 39, v11, v12, (uint64_t)v181);
    }
    if (*(_DWORD *)(a1 + 4104) == -1)
    {
      v32 = 0;
    }
    else
    {
      v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
      v28 = sub_21DF99DC8((_QWORD *)a1);
      v29 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
      v186 = 257;
      v30 = sub_21DF1A79C(v27, 49, (uint64_t)v28, v29, (uint64_t)&v183);
      v31 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 200);
      v182 = 257;
      v32 = sub_21DF1A79C(v27, 39, v30, v31, (uint64_t)v181);
    }
    v162 = v32;
    v33 = llvm::User::operator new((llvm::User *)0x58);
    v183 = "agc.primitive_buffer_path";
    v186 = 259;
    v34 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v34 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    v186 = 257;
    v165 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    *(_QWORD *)(a1 + 4072) = v165;
    v183 = "primbuf_path";
    v186 = 259;
    v170 = operator new();
    llvm::BasicBlock::BasicBlock();
    v183 = "va_path";
    v186 = 259;
    v169 = operator new();
    llvm::BasicBlock::BasicBlock();
    v35 = llvm::ConstantInt::get();
    v36 = (_QWORD *)*((_QWORD *)v6 + 5);
    if (v36 == (_QWORD *)((char *)v6 + 40))
    {
      v39 = 0;
    }
    else
    {
      v37 = (llvm::Instruction *)(v36 - 3);
      if (v36)
        v38 = v36 - 3;
      else
        v38 = 0;
      if (*((unsigned __int8 *)v38 + 16) - 29 >= 0xB)
        v39 = 0;
      else
        v39 = v37;
    }
    llvm::Instruction::eraseFromParent(v39);
    v40 = a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *(_QWORD *)(v40 + 48) = v6;
    *(_QWORD *)(v40 + 56) = (char *)v6 + 40;
    v41 = a1 + 8;
    v42 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v43 = (uint64_t *)(v42 + a1 + 8);
    v186 = 257;
    v44 = (llvm::Type ***)sub_21DF19394((uint64_t *)(a1 + 8 + v42), **(llvm::Type ***)(*(_QWORD *)v33 + 16), v33, 0, (uint64_t)&v183);
    v182 = 257;
    v160 = sub_21DF19478(v43, 32, v44, v35, (uint64_t)v181);
    sub_21DF38D70((uint64_t *)(a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), v160, v169, v170);
    v45 = a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v46 = llvm::BasicBlock::getFirstInsertionPt(v165);
    if (v46)
      v47 = v46 - 24;
    else
      v47 = 0;
    sub_21DF3F430(v45, v47);
    v48 = *(unsigned int *)(a1 + 3904);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = a1 + 200;
      v176 = (llvm::Value *)(a1 + 192);
      v166 = 4 * v48;
      v171 = a1 + 8;
      v168 = a1 + 200;
      do
      {
        v51 = *(_QWORD *)(a1 + 4112);
        v52 = 4 * *(unsigned int *)(*(_QWORD *)(a1 + 3896) + v49);
        v173 = *(unsigned int *)(*(_QWORD *)(a1 + 3896) + v49);
        llvm::FixedVectorType::get();
        v53 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
        v54 = v174 & 0xFFFFFFFF00000000 | *(unsigned __int8 *)(v51 + v52);
        v183 = "agc.vertex_attrib_info";
        v174 = v54;
        v185 = v54;
        v186 = 2051;
        v55 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v55 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        v56 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v53);
        v57 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v53);
        v58 = *(unsigned __int8 *)(v51 + v52);
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 4112) + 80);
        if (v58 == BYTE4(v59) || v58 == BYTE5(v59))
        {
          v60 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          *(_QWORD *)(v60 + 56) = v170;
          *(_QWORD *)(v60 + 64) = v170 + 40;
        }
        v61 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v186 = 257;
        v62 = (uint64_t *)sub_21DF19394((uint64_t *)(v41 + v61), **(llvm::Type ***)(*(_QWORD *)v56 + 16), (uint64_t)v56, 0, (uint64_t)&v183);
        v63 = 1 << *(_BYTE *)(v51 + v52);
        if ((v63 & v167) == 0)
        {
          v163 = (uint64_t)v57;
          v64 = v162;
          if ((v63 & v161) != 0)
          {
            v186 = 257;
            Select = llvm::IRBuilderBase::CreateSelect();
            v66 = *(unsigned __int8 *)(v51 + v52);
            v183 = *(const char **)((char *)v176 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v184 = v183;
            llvm::StructType::get();
            v67 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
            v183 = "agc.vertex_divisor_scale";
            v185 = v66;
            v186 = 2051;
            v68 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v68 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            sub_21DF7A774(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v69 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v67);
            v70 = sub_21DF1A668(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v67);
            v71 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v186 = 257;
            v72 = sub_21DF19394((uint64_t *)(v171 + v71), **(llvm::Type ***)(*(_QWORD *)v69 + 16), (uint64_t)v69, 0, (uint64_t)&v183);
            v73 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v186 = 257;
            v74 = sub_21DF19394((uint64_t *)(v171 + v73), **(llvm::Type ***)(*(_QWORD *)v70 + 16), (uint64_t)v70, 0, (uint64_t)&v183);
            v75 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v76 = *(_QWORD *)(v168 + v75);
            v186 = 257;
            v77 = sub_21DF1A79C(v75 + a1 + 8, 39, Select, v76, (uint64_t)&v183);
            v78 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v79 = v78 + a1 + 8;
            v80 = *(_QWORD *)(v168 + v78);
            v186 = 257;
            v81 = v72;
            v50 = a1 + 200;
            v82 = sub_21DF1A79C(v79, 39, v81, v80, (uint64_t)&v183);
            v182 = 257;
            v83 = sub_21DF1A864(v79, v82, v77, (uint64_t)v181);
            v180 = 257;
            v84 = sub_21DF19FAC(v79, v83, v77, (uint64_t)v179);
            v85 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v186 = 257;
            v86 = llvm::ConstantInt::get();
            v87 = sub_21DF1AE6C(v85, v84, v86, (uint64_t)&v183);
            v88 = *(_QWORD *)((char *)v176 + *(_QWORD *)(*(_QWORD *)a1 - 24));
            v182 = 257;
            v89 = sub_21DF1A79C(v85, 38, v87, v88, (uint64_t)v181);
            v90 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v186 = 257;
            v91 = v74;
            v41 = a1 + 8;
            v92 = sub_21DF1AE6C(v90, v89, v91, (uint64_t)&v183);
            v93 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v94 = *(_QWORD *)(v168 + v93);
            v186 = 257;
            v64 = sub_21DF1A79C(v93 + a1 + 8, 39, v92, v94, (uint64_t)&v183);
          }
          v95 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v186 = 257;
          v96 = sub_21DF19394((uint64_t *)(v41 + v95), **(llvm::Type ***)(*(_QWORD *)v163 + 16), v163, 0, (uint64_t)&v183);
          v97 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v98 = v97 + a1 + 8;
          v99 = *(_QWORD *)(v50 + v97);
          v186 = 257;
          v100 = sub_21DF1A79C(v98, 39, v96, v99, (uint64_t)&v183);
          v182 = 257;
          v101 = v98;
          v41 = a1 + 8;
          v102 = (uint64_t *)sub_21DF1A864(v101, v100, v64, (uint64_t)v181);
          v103 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v186 = 257;
          v62 = (uint64_t *)sub_21DF1A924(v103, v62, v102, (uint64_t)&v183);
        }
        v104 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
        v105 = llvm::PointerType::get();
        v186 = 257;
        v106 = sub_21DF1A79C(v104, 49, (uint64_t)v62, v105, (uint64_t)&v183);
        v107 = *(unsigned __int8 *)(v51 + v52);
        v108 = *(_QWORD *)(*(_QWORD *)(a1 + 4112) + 80);
        if (v107 == BYTE4(v108) || v107 == BYTE5(v108))
        {
          v109 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v110 = v109 + a1 + 8;
          v186 = 257;
          v111 = sub_21DF19394((uint64_t *)(v41 + v109), **(llvm::Type ***)(*(_QWORD *)v106 + 16), v106, 0, (uint64_t)&v183);
          v112 = *(_QWORD *)((char *)v176 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v182 = 257;
          v113 = sub_21DF1A79C(v110, 49, v111, v112, (uint64_t)v181);
          v114 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          *(_QWORD *)(v114 + 56) = v169;
          *(_QWORD *)(v114 + 64) = v169 + 40;
          v115 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v116 = *(_QWORD *)((char *)v176 + v115);
          if (*(unsigned __int8 *)(v51 + v52) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 4112) + 84))
          {
            v186 = 257;
            v117 = v164;
          }
          else
          {
            v186 = 257;
            v117 = v162;
          }
          v118 = sub_21DF1A79C(v115 + a1 + 8, 38, v117, v116, (uint64_t)&v183);
          v41 = a1 + 8;
          v119 = v171 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          v120 = llvm::BasicBlock::getFirstInsertionPt(v165);
          sub_21DF19018(v119, (uint64_t)v165, v120);
          v121 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v122 = *(_QWORD *)((char *)v176 + v121);
          v186 = 257;
          v123 = sub_21DF38DEC(v121 + a1 + 8, v122, 2, (uint64_t)&v183);
          sub_21DF38EDC(v123, v118, v169);
          sub_21DF38EDC(v123, v113, v170);
          v124 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
          v125 = llvm::BasicBlock::getFirstInsertionPt(v165);
          if (v125)
            v126 = v125 - 24;
          else
            v126 = 0;
          sub_21DF3F430(v124, v126);
          v50 = a1 + 200;
        }
        else
        {
          v127 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          v186 = 257;
          sub_21DF19394((uint64_t *)(v41 + v127), **(llvm::Type ***)(*(_QWORD *)v106 + 16), v106, 0, (uint64_t)&v183);
        }
        *(_QWORD *)(a1 + 8 * v173 + 3944) = sub_21DF88194(a1, *(_DWORD *)(v51 + 4 * v173));
        v49 += 4;
      }
      while (v166 != v49);
    }
    v128 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    *(_QWORD *)(v128 + 56) = v170;
    *(_QWORD *)(v128 + 64) = v170 + 40;
    sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
    v129 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    *(_QWORD *)(v129 + 56) = v169;
    *(_QWORD *)(v129 + 64) = v169 + 40;
    sub_21DF38D0C((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8));
    v130 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    *(_QWORD *)(v130 + 56) = v165;
    *(_QWORD *)(v130 + 64) = (char *)v165 + 40;
    v4 = (llvm::Function **)(a1 + 160);
  }
  else
  {
    *(_QWORD *)(a1 + 4072) = v6;
    v13 = *(_QWORD *)(v7 - 24) + a1 + 8;
    v14 = llvm::BasicBlock::getFirstInsertionPt(v6);
    if (v14)
      v15 = v14 - 24;
    else
      v15 = 0;
    sub_21DF3F430(v13, v15);
    v172 = *(unsigned int *)(a1 + 3904);
    if ((_DWORD)v172)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = (llvm::Value *)*(unsigned int *)(*(_QWORD *)(a1 + 3896) + 4 * v16);
        v19 = *(_QWORD *)(a1 + 4112);
        v20 = *(unsigned int *)(*(_QWORD *)(a1 + 4136) + 4 * (_QWORD)v18);
        llvm::FixedVectorType::get();
        v21 = llvm::UndefValue::get();
        if ((_DWORD)v20)
        {
          v175 = v18;
          for (i = 0; i != v20; ++i)
          {
            v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
            v24 = sub_21DF99DC8((_QWORD *)a1);
            v186 = 257;
            v25 = llvm::ConstantInt::get();
            v21 = sub_21DF7980C(v23 + 8, v21, (uint64_t)v24, v25, (uint64_t)&v183);
          }
          v17 += i;
          v18 = v175;
          v26 = sub_21DF88194(a1, *(_DWORD *)(v19 + 4 * (_QWORD)v175));
          v4 = (llvm::Function **)(a1 + 160);
        }
        else
        {
          v26 = sub_21DF88194(a1, *(_DWORD *)(v19 + 4 * (_QWORD)v18));
        }
        *(_QWORD *)(a1 + 8 * (_QWORD)v18 + 3944) = v26;
        ++v16;
      }
      while (v16 != v172);
    }
  }
  Function = llvm::Module::getFunction();
  v132 = (uint64_t *)Function;
  if (Function)
    v177 = *(llvm::Instruction **)(*(_QWORD *)(Function + 8) + 24);
  else
    v177 = 0;
  v133 = *(_QWORD *)(a1 + 4072);
  v181[0] = 0;
  v134 = *(llvm::Function **)(a1 + 160);
  if ((*((_WORD *)v134 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v136 = *v4;
    v137 = *((_WORD *)*v4 + 9);
    v135 = *((_QWORD *)v134 + 11);
    if ((v137 & 1) != 0)
      llvm::Function::BuildLazyArguments(v136);
    v134 = v136;
  }
  else
  {
    v135 = *((_QWORD *)v134 + 11);
  }
  for (j = *((_QWORD *)v134 + 11) + 40 * *((_QWORD *)v134 + 12); v135 != j; v135 += 40)
  {
    if (*(_QWORD *)(v135 + 8))
    {
      v139 = *(_QWORD *)(v133 + 40);
      v140 = v139 ? v139 - 24 : 0;
      sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v140);
      v141 = *(unsigned int *)(v135 + 32);
      v142 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v141);
      if ((sub_21DF9D590((_QWORD *)a1, (unint64_t *)v135, v141, v142) & 1) == 0)
      {
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v142 - 8 * *(unsigned int *)(v142 + 8) + 8));
        if (v144 == 16 && *String == 0x747265762E726961 && String[1] == 0x7475706E695F7865)
        {
          v146 = *(_BYTE **)(v142 - 8 * *(unsigned int *)(v142 + 8) + 16);
          if (v146)
          {
            if (*v146)
              v147 = 0;
            else
              v147 = *(llvm::MDString **)(v142 - 8 * *(unsigned int *)(v142 + 8) + 16);
          }
          else
          {
            v147 = 0;
          }
          v148 = llvm::MDString::getString(v147);
          if (v149 == 12
            && (*(_QWORD *)v148 == 0x61636F6C2E726961 ? (v150 = *(_DWORD *)(v148 + 8) == 1852795252) : (v150 = 0), v150))
          {
            v156 = *(uint64_t **)(*(_QWORD *)(v135 + 8) + 24);
            LODWORD(v183) = 3;
            sub_21DF7A834(0, v142, (unsigned int *)&v183, v181);
            sub_21DF877CC(a1, v156[1], v181[0], 0);
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v156);
          }
          else
          {
            v179[0] = 0;
            LODWORD(v183) = 3;
            sub_21DF7A834(0, v142, (unsigned int *)&v183, v179);
            v151 = v179[0];
            v152 = *(_QWORD *)(a1 + 4112);
            v153 = *(uint64_t **)(a1 + 8 * v179[0] + 3944);
            v154 = *(_QWORD *)(*(_QWORD *)(a1 + 4072) + 40);
            if (v154)
              v155 = v154 - 24;
            else
              v155 = 0;
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, v155);
            sub_21DF878BC((_QWORD *)a1, (int *)(v152 + 4 * v151), *(_QWORD *)v135, v153);
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
    }
  }
  if (v132)
  {
    if (v177)
    {
      if (llvm::Value::getNumUses(v177))
        sub_21DF877CC(a1, v132[1], *(unsigned __int8 *)(*(_QWORD *)(a1 + 4112) + 84), 3);
      else
        llvm::Instruction::eraseFromParent(v177);
    }
    llvm::Function::eraseFromParent((llvm::Function *)v132);
  }
  v157 = llvm::Module::getFunction();
  if (v157)
  {
    v158 = (llvm::Function *)v157;
    sub_21DF877CC(a1, *(_QWORD *)(v157 + 8), (unsigned __int16)WORD2(*(_QWORD *)(*(_QWORD *)(a1 + 4112) + 80)) >> 8, 1);
    llvm::Function::eraseFromParent(v158);
  }
  return 1;
}

uint64_t sub_21DF85C28(_QWORD *a1)
{
  return *(unsigned int *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 804);
}

uint64_t sub_21DF85C40(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 4128);
  if (*v2 > a2)
    return v2[a2 + 1];
  return a2;
}

uint64_t sub_21DF85C60(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 4120);
  if (v2)
    return *(unsigned __int16 *)(v2 + 2 * a2);
  else
    return 0;
}

BOOL sub_21DF85C78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 4120) == 0;
}

uint64_t sub_21DF85C88()
{
  return 0;
}

uint64_t sub_21DF85C90()
{
  return 0;
}

uint64_t sub_21DF85C98()
{
  return 0;
}

const char *sub_21DF85CA0()
{
  return "vertex";
}

uint64_t sub_21DF85CAC()
{
  return 0;
}

uint64_t sub_21DF85CB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[8];
  __int16 v20;
  int v21;

  v21 = 0;
  v19[0] = 1;
  result = sub_21DF7A834(0, a3, v19, &v21);
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v11 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 18;
  else
    v11 = 0;
  if (v11)
  {
    v13 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 4 * v21;
      do
      {
        v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v20 = 257;
        v17 = (uint64_t)(v16 + 8);
        v18 = llvm::ConstantInt::get();
        result = sub_21DF79584(v17, a2, v18, (uint64_t)v19);
        *a5 |= 1 << (v15 + v14);
        *(_QWORD *)(a4 + 8 * (v15 + v14++)) = result;
      }
      while (v13 != v14);
    }
  }
  else if (*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 160) == v10)
  {
    v12 = 4 * v21;
    *a5 |= 1 << (4 * v21);
    *(_QWORD *)(a4 + 8 * v12) = a2;
  }
  return result;
}

uint64_t sub_21DF85DF0(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  llvm::MDString *v15;
  llvm::MDString *v16;
  uint64_t v17;
  char v18;
  const void *String;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void **v31;
  int v33;
  int v34;
  unsigned int v35;

  sub_21DF35E18();
  sub_21DF35E80();
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * a3);
  v11 = sub_21DF78CC0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v10, &v34);
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
    v12 = *(_DWORD *)(v10 + 32);
  else
    v12 = 1;
  v33 = 0;
  v35 = 2;
  v13 = sub_21DF7A834(0, a4, &v35, &v33);
  v14 = a4 - 8 * *(unsigned int *)(a4 + 8);
  v15 = *(llvm::MDString **)(v14 + 24);
  if (v15 && *(_BYTE *)v15)
    v15 = 0;
  v16 = *(llvm::MDString **)(v14 + 32);
  if (!v16)
    return 0;
  v17 = 0;
  v18 = v13 ^ 1;
  if (!v15)
    v18 = 1;
  if ((v18 & 1) == 0 && !*(_BYTE *)v16)
  {
    String = (const void *)llvm::MDString::getString(v15);
    v21 = *(_DWORD *)(*sub_21DF35EE8(String, v20) + 8);
    v22 = (const void *)llvm::MDString::getString(v16);
    v24 = *(_DWORD *)(*sub_21DF35FEC(v22, v23) + 8);
    if (v21 == 1)
      v24 = 3;
    v25 = v33;
    v26 = v11 == 1;
    if (v11 == 1)
      v27 = 6;
    else
      v27 = 3;
    if (v11 == 1)
      v28 = 5;
    else
      v28 = 2;
    if (v11 == 1)
      v29 = 4;
    else
      v29 = 1;
    if (v21)
      v29 = v24;
    if (v21 != 1)
      v28 = v29;
    if (v21 == 2)
      v30 = v27;
    else
      v30 = v28;
    *(_DWORD *)a5 = v12;
    *(_DWORD *)(a5 + 4) = v11;
    *(_DWORD *)(a5 + 8) = v21;
    *(_DWORD *)(a5 + 12) = v24;
    *(_DWORD *)(a5 + 16) = v25;
    v31 = (void **)(a5 + 24);
    if (*(char *)(a5 + 47) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_BYTE *)(a5 + 56) = v26;
    *(_BYTE *)(a5 + 57) = 0;
    *(_DWORD *)(a5 + 60) = v30;
    return 1;
  }
  return v17;
}

uint64_t sub_21DF85F98()
{
  return 0;
}

uint64_t sub_21DF85FA0()
{
  return 0;
}

uint64_t sub_21DF85FA8(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(a1 + 4112) + 88)) & 1;
}

uint64_t sub_21DF85FB8(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v2 = a2;
  if (!a2)
    v2 = (uint64_t *)llvm::ConstantFP::get();
  v4 = llvm::User::operator new((llvm::User *)0x58);
  v14[0] = "agc.vertex_point_size_adjust";
  v15 = 259;
  v5 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v5 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_21DF7A774((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  v6 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v15 = 257;
  v7 = sub_21DF19394(v6, **(llvm::Type ***)(*(_QWORD *)v4 + 16), v4, 0, (uint64_t)v14);
  v8 = *v2;
  v13 = 257;
  v9 = sub_21DF20674((uint64_t)v6, v7, v8, (uint64_t)v12);
  v10 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
  v15 = 257;
  return sub_21DF2074C(v10, (uint64_t)v2, v9, (uint64_t)v14);
}

uint64_t sub_21DF86124(uint64_t a1)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;

  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1653))
    goto LABEL_68;
  Function = llvm::Module::getFunction();
  sub_21DF87698((uint64_t *)&v80, *(unsigned int *)(a1 + 3088));
  if ((*(_WORD *)(Function + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    v3 = *(_QWORD *)(Function + 88);
    if ((*(_WORD *)(Function + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v4 = *(_QWORD *)(Function + 88);
      goto LABEL_7;
    }
  }
  else
  {
    v3 = *(_QWORD *)(Function + 88);
  }
  v4 = v3;
LABEL_7:
  v5 = v4 + 40 * *(_QWORD *)(Function + 96);
  if (v3 != v5)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v3 + 8))
      {
        if ((v80 & 1) != 0)
          v80 = v80 & 0xFC00000000000000 | (2
                                            * (((v80 >> 1) & ~(-1 << (v80 >> 58)) | (1 << v6)) & ~(-1 << (v80 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v80 + 8 * (v6 >> 6)) |= 1 << v6;
      }
      v3 += 40;
      ++v6;
    }
    while (v3 != v5);
  }
  v7 = *(_QWORD *)(a1 + 4080);
  if (*(_QWORD *)(a1 + 4088) != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + 20 * v8;
      v11 = *(unsigned int *)(v10 + 8);
      if (v11 > 0xA)
        LODWORD(v12) = -1;
      else
        v12 = (qword_21DFA3060[v11] * (unint64_t)(*(_DWORD *)(v7 + 20 * v8) + 1) + 3) >> 2;
      v13 = *(unsigned int *)(v10 + 12);
      sub_21DF87698((uint64_t *)&v79, *(unsigned int *)(a1 + 3088));
      if ((_DWORD)v12)
      {
        v14 = v12 + v13;
        if ((v79 & 1) != 0)
        {
          v79 = v79 & 0xFC00000000000000 | (2
                                            * (((v79 >> 1) & ~(-1 << (v79 >> 58)) | ((1 << v14) + (-1 << v13))) & ~(-1 << (v79 >> 58)))) | 1;
          goto LABEL_30;
        }
        v15 = v13 >> 6;
        if ((v13 >> 6) == v14 >> 6)
        {
          v16 = (1 << v14) + (-1 << v13);
          v17 = (uint64_t *)(*(_QWORD *)v79 + 8 * v15);
LABEL_29:
          *v17 |= v16;
          goto LABEL_30;
        }
        v18 = *(uint64_t **)v79;
        *(_QWORD *)(*(_QWORD *)v79 + 8 * v15) |= -1 << v13;
        v19 = (v13 + 63) & 0xFFFFFFC0;
        if (v19 + 64 <= v14)
        {
          do
          {
            v18[v19 >> 6] = -1;
            v20 = v19 + 64;
            v21 = v19 + 128;
            v19 += 64;
          }
          while (v21 <= v14);
        }
        else
        {
          v20 = (v13 + 63) & 0xFFFFFFC0;
        }
        if (v20 < v14)
        {
          v16 = ~(-1 << v14);
          v17 = &v18[v20 >> 6];
          goto LABEL_29;
        }
      }
LABEL_30:
      if ((v79 & 1) != 0)
      {
        v32 = v79 >> 58;
        if ((v80 & 1) == 0)
        {
          v33 = *(unsigned int *)(v80 + 64);
          goto LABEL_47;
        }
        if ((((v79 & v80) >> 1) & ~((-1 << v32) | (-1 << (v80 >> 58)))) == 0)
          goto LABEL_63;
      }
      else
      {
        if ((v80 & 1) != 0)
        {
          v32 = *(unsigned int *)(v79 + 64);
          v33 = v80 >> 58;
LABEL_47:
          if (v33 < v32)
            v32 = v33;
          if (!v32)
          {
LABEL_63:
            v35 = *(_QWORD *)(a1 + 4080) + 20 * (int)v9;
            v36 = *(_QWORD *)(a1 + 4088);
            v37 = v36 - (v35 + 20);
            if (v36 != v35 + 20)
              memmove((void *)(*(_QWORD *)(a1 + 4080) + 20 * (int)v9), (const void *)(v35 + 20), v36 - (v35 + 20));
            *(_QWORD *)(a1 + 4088) = v35 + v37;
            goto LABEL_66;
          }
          v34 = 0;
          while (2)
          {
            if ((v79 & 1) != 0)
            {
              if (((v79 >> 1) & ~(-1 << (v79 >> 58)) & (1 << v34)) == 0)
                goto LABEL_59;
            }
            else if ((*(_QWORD *)(*(_QWORD *)v79 + 8 * (v34 >> 6)) & (1 << v34)) == 0)
            {
              goto LABEL_59;
            }
            if ((v80 & 1) != 0)
            {
              if (((v80 >> 1) & ~(-1 << (v80 >> 58)) & (1 << v34)) != 0)
                goto LABEL_62;
            }
            else if ((*(_QWORD *)(*(_QWORD *)v80 + 8 * (v34 >> 6)) & (1 << v34)) != 0)
            {
              goto LABEL_62;
            }
LABEL_59:
            if (v32 == ++v34)
              goto LABEL_63;
            continue;
          }
        }
        LODWORD(v22) = *(_DWORD *)(v79 + 8);
        v23 = *(_DWORD *)(v80 + 8);
        if (v23 >= v22)
          v22 = v22;
        else
          v22 = v23;
        if (!(_DWORD)v22)
          goto LABEL_63;
        v24 = *(uint64_t **)v79;
        v25 = *(uint64_t **)v80;
        v26 = v22 - 1;
        do
        {
          v28 = *v24++;
          v27 = v28;
          v29 = *v25++;
          v30 = v29 & v27;
          if (v30)
            v31 = 1;
          else
            v31 = v26 == 0;
          --v26;
        }
        while (!v31);
        if (!v30)
          goto LABEL_63;
      }
LABEL_62:
      ++v9;
LABEL_66:
      sub_21DF87774((void ***)&v79);
      v8 = v9;
      v7 = *(_QWORD *)(a1 + 4080);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 4088) - v7) >> 2) > v9);
  }
  sub_21DF87774((void ***)&v80);
LABEL_68:
  v38 = *(_QWORD *)(a1 + 4080);
  v39 = 0;
  if (-858993459 * ((unint64_t)(*(_QWORD *)(a1 + 4088) - v38) >> 2))
  {
    v40 = 0;
    v77 = 0;
    v78 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = (int *)(v38 + 20 * v43);
      v45 = v44[4];
      v46 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v47 = (uint64_t *)(v46 + 704);
      *(_BYTE *)(v46 + 774) = 1;
      v48 = *(_DWORD *)(v46 + 736) - *(_DWORD *)(v46 + 752) + *(_DWORD *)(v46 + 744);
      sub_21DF2E08C((uint64_t *)(v46 + 704), 4, *v44);
      sub_21DF2E08C(v47, 6, *(_DWORD *)(*(_QWORD *)(a1 + 4080) + 20 * v43 + 4));
      sub_21DF2E08C(v47, 8, *(_DWORD *)(*(_QWORD *)(a1 + 4080) + 20 * v43 + 8));
      v49 = *(_DWORD *)(*(_QWORD *)(a1 + 4080) + 20 * v43 + 12);
      if (v45)
      {
        sub_21DF2E08C(v47, 12, v49);
        sub_21DF2FF00(v47, 10, *(char *)(*(_QWORD *)(a1 + 4080) + 20 * v43 + 16));
        v50 = sub_21DF2DC24((uint64_t)v47, v48);
        v51 = v50;
        if ((unint64_t)v42 >= v78)
        {
          v55 = (v42 - v41) >> 2;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            goto LABEL_121;
          if ((uint64_t)(v78 - (_QWORD)v41) >> 1 > v56)
            v56 = (uint64_t)(v78 - (_QWORD)v41) >> 1;
          if (v78 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
            v57 = (unint64_t)sub_21DF2EACC(v57);
          else
            v58 = 0;
          v63 = (char *)(v57 + 4 * v55);
          *(_DWORD *)v63 = v51;
          v64 = v63 + 4;
          while (v42 != v41)
          {
            v65 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v65;
            v63 -= 4;
          }
          v78 = v57 + 4 * v58;
          if (v41)
            operator delete(v41);
          v54 = v40;
          v41 = v63;
          v42 = v64;
          goto LABEL_107;
        }
        *(_DWORD *)v42 = v50;
        v42 += 4;
      }
      else
      {
        sub_21DF2E08C(v47, 10, v49);
        v52 = sub_21DF2DC24((uint64_t)v47, v48);
        v53 = v52;
        if (v40 >= v77)
        {
          v59 = (v40 - v39) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
LABEL_121:
            abort();
          if ((v77 - v39) >> 1 > v60)
            v60 = (v77 - v39) >> 1;
          if ((unint64_t)(v77 - v39) >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
          {
            if (v61 >> 62)
              sub_21DF256A4();
            v62 = (char *)operator new(4 * v61);
          }
          else
          {
            v62 = 0;
          }
          v66 = &v62[4 * v59];
          *(_DWORD *)v66 = v53;
          v54 = v66 + 4;
          while (v40 != v39)
          {
            v67 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          v77 = &v62[4 * v61];
          if (v39)
            operator delete(v39);
          v39 = v66;
          goto LABEL_107;
        }
        *(_DWORD *)v40 = v52;
        v40 += 4;
      }
      v54 = v40;
LABEL_107:
      ++v43;
      v38 = *(_QWORD *)(a1 + 4080);
      v40 = v54;
      if (v43 >= -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 4088) - v38) >> 2))
        goto LABEL_110;
    }
  }
  v41 = 0;
  v42 = 0;
  v54 = 0;
LABEL_110:
  if (v54 == v39)
    v68 = (char *)&unk_2553B3CDB;
  else
    v68 = v39;
  v69 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v68, (v54 - v39) >> 2);
  if (v42 == v41)
    v70 = (char *)&unk_2553B3CDC;
  else
    v70 = v41;
  v71 = sub_21DF34C5C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704, (uint64_t)v70, (v42 - v41) >> 2);
  v72 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v73 = (uint64_t *)(v72 + 704);
  *(_BYTE *)(v72 + 774) = 1;
  v74 = *(_DWORD *)(v72 + 736) - *(_DWORD *)(v72 + 752) + *(_DWORD *)(v72 + 744);
  sub_21DF34D10((uint64_t *)(v72 + 704), v69);
  sub_21DF402C8(v73, v71);
  v75 = sub_21DF2DC24((uint64_t)v73, v74);
  if (v41)
    operator delete(v41);
  if (v39)
    operator delete(v39);
  return v75;
}

void sub_21DF868A4(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unint64_t i;
  std::string *v6;
  std::string::size_type size;
  uint64_t j;
  uint64_t k;
  uint64_t v10;
  uint64_t m;
  uint64_t n;
  std::string *p_dst;
  std::string::size_type v14;
  uint64_t ii;
  unsigned int *v16;
  uint64_t jj;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t kk;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string v30;
  std::string v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  std::string v36;
  std::string v37;
  std::string __p;
  std::string v39;
  void *v40[2];
  std::string::size_type v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  std::string __dst;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54[2];
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v2 = a1[514];
  sub_21DF1AF28(v34, "AGCVertexContextStateGL");
  sub_21DF1AF28(v32, "vertexUnpackState");
  sub_21DF1AF28(&v37, (char *)&unk_21DFAD77A);
  if (*(_DWORD *)(v2 + 80))
  {
    v3 = 0;
    do
    {
      v4 = (unsigned __int8 *)(v2 + 4 * v3);
      sub_21DF1AF28(&v47, "AGCVertexElement");
      sub_21DF1AF28(&v46, "code");
      sub_21DF34E40(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *v4);
      sub_21DF1AF28(v44, "components");
      sub_21DF34E40(&v50, (const void **)v44, v4[1]);
      sub_21DF1AF28(v42, "type");
      sub_21DF34E94(&v51, (const void **)v42, off_24E1F2FB0[v4[2]]);
      sub_21DF1AF28(v40, "normalized");
      sub_21DF34E40(&v52, (const void **)v40, HIBYTE(*(_DWORD *)v4) & 1);
      sub_21DF1AF28(&v39, "bgraSwizzle");
      sub_21DF34E40(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_DWORD *)v4 >> 25) & 1);
      sub_21DF1AF28(&__p, "unused");
      sub_21DF34E40(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)v4 >> 26);
      sub_21DF50C18(&v36, (uint64_t)&v47, 0, (uint64_t)&v49, 6);
      for (i = 0; i != 0x1FFFFFFFFFFFFFEELL; i -= 3)
      {
        if (SHIBYTE(v54[0].__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(v54[i / 3].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v36;
      else
        v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      std::string::append(&v37, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      ++v3;
    }
    while (v3 < *(unsigned int *)(v2 + 80));
  }
  sub_21DF1AF28(&v47, "AGCVertexUnpackState");
  sub_21DF1AF28(&v46, "currentAttribs");
  sub_21DF43DF0(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *(_QWORD *)(v2 + 64));
  sub_21DF1AF28(v44, "instancedAttribs");
  sub_21DF43DF0(&v50, (const void **)v44, *(_QWORD *)(v2 + 72));
  sub_21DF1AF28(v42, "elementCount");
  sub_21DF43DF0(&v51, (const void **)v42, *(unsigned int *)(v2 + 80));
  sub_21DF1AF28(v40, "vertexIDCode");
  sub_21DF43DF0(&v52, (const void **)v40, *(unsigned __int8 *)(v2 + 84));
  sub_21DF1AF28(&v39, "instanceIDCode");
  sub_21DF43DF0(&v53, (const void **)&v39.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 85));
  sub_21DF1AF28(&__p, "unused");
  sub_21DF43DF0(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v2 + 86));
  sub_21DF1AF28(&v36, "elements : ");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    sub_21DF205EC(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    __dst = v37;
  sub_21DF50C18(&v55, (uint64_t)&v36, 0, (uint64_t)&__dst, 1);
  sub_21DF50C18(&v31, (uint64_t)&v47, 0, (uint64_t)&v49, 7);
  for (j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v55.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + j * 8));
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  sub_21DF35174(&v49, (const void **)v32, (uint64_t)&v31);
  sub_21DF1AF28(&v47, "clip_distance_enable_mask");
  sub_21DF51230(&v50, (const void **)&v47.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 88));
  sub_21DF1AF28(&v46, "outputPointSize");
  sub_21DF51230(&v51, (const void **)&v46.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v2 + 88)) & 1);
  sub_21DF1AF28(v44, "shaderDebugEnable");
  sub_21DF51230(&v52, (const void **)v44, (*(_WORD *)(v2 + 88) >> 9) & 1);
  sub_21DF1AF28(v42, "unused");
  sub_21DF51230(&v53, (const void **)v42, *(_WORD *)(v2 + 88) >> 10);
  sub_21DF50C18(&v30, (uint64_t)v34, 0, (uint64_t)&v49, 5);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + k * 8));
  }
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  v10 = a1[515];
  if (v10)
  {
    sub_21DF1AF28(&v36, (char *)&unk_21DFAD77A);
    for (m = 0; m != 32; ++m)
    {
      sub_21DF1AF28(&v47, "AGCSamplerPCFState");
      sub_21DF1AF28(&v46, "compareFunc");
      sub_21DF34E94(&v49, (const void **)&v46.__r_.__value_.__l.__data_, off_24E1F3010[*(_WORD *)(v10 + 2 * m) & 0xF]);
      sub_21DF1AF28(v44, "clampPCFEnabled");
      sub_21DF51230(&v50, (const void **)v44, (*(_WORD *)(v10 + 2 * m) >> 4) & 1);
      sub_21DF1AF28(v42, "mipmapMinFilterEnabled");
      sub_21DF51230(&v51, (const void **)v42, (*(_WORD *)(v10 + 2 * m) >> 5) & 1);
      sub_21DF1AF28(v40, "trilinearMinFilterEnabled");
      sub_21DF51230(&v52, (const void **)v40, (*(_WORD *)(v10 + 2 * m) >> 6) & 1);
      sub_21DF1AF28(&v39, "linearMinFilterEnabled");
      sub_21DF51230(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_WORD *)(v10 + 2 * m) >> 7) & 1);
      sub_21DF1AF28(&__p, "linearMagFilterEnabled");
      sub_21DF51230(v54, (const void **)&__p.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v10 + 2 * m)) & 1);
      sub_21DF1AF28(&v37, "unused");
      sub_21DF51230(&v55, (const void **)&v37.__r_.__value_.__l.__data_, *(_WORD *)(v10 + 2 * m) >> 9);
      sub_21DF50C18(&__dst, (uint64_t)&v47, 1, (uint64_t)&v49, 7);
      for (n = 0; n != -21; n -= 3)
      {
        if (SHIBYTE(v55.__r_.__value_.__r.__words[n + 2]) < 0)
          operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + n * 8));
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v14 = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v36, (const std::string::value_type *)p_dst, v14);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    sub_21DF1AF28(&v47, "AGCSamplerPCFStates");
    sub_21DF1AF28(&v49, "pcf : ");
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_21DF205EC(&v50, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v50 = v36;
    sub_21DF50C18(&__p, (uint64_t)&v47, 0, (uint64_t)&v49, 2);
    for (ii = 0; ii != -6; ii -= 3)
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[ii + 2]) < 0)
        operator delete(*(void **)((char *)&v49 + ii * 8 + 24));
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_21DF1AF28(&__p, (char *)&unk_21DFAD77A);
  }
  v16 = (unsigned int *)a1[516];
  sub_21DF1AF28(&v47, (char *)&unk_21DFAD77A);
  for (jj = 1; jj != 33; ++jj)
  {
    std::to_string(&v46, v16[jj]);
    v18 = std::string::append(&v46, " ");
    v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v49;
    else
      v20 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      v21 = v49.__r_.__value_.__l.__size_;
    std::string::append(&v47, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  sub_21DF1AF28(&v46, "AGCSamplerRemapStateGL");
  sub_21DF1AF28(v44, "samplerCount");
  sub_21DF34E40(&v49, (const void **)v44, *v16);
  sub_21DF1AF28(v42, "samplerToTexUnitMap");
  std::operator+<char>();
  v22 = std::string::append(&v39, "]");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v40 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v41 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  sub_21DF35174(&v50, (const void **)v42, (uint64_t)v40);
  sub_21DF50C18(&v37, (uint64_t)&v46, 0, (uint64_t)&v49, 2);
  for (kk = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[kk + 2]) < 0)
      operator delete(*(void **)((char *)&v49 + kk * 8 + 24));
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  sub_21DF35850((uint64_t)&v49, (const void **)&v30.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v37;
  else
    v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v26 = v37.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
  *a2 = *v27;
  v27->__r_.__value_.__r.__words[0] = 0;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

BOOL sub_21DF8743C(_QWORD *a1)
{
  _BOOL8 v2;
  int v3;
  int v4;
  char *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = sub_21DF2EDB4((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *(int **)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    v3 = sub_21DF77960((uint64_t)a1);
    v4 = sub_21DF992B4((uint64_t)a1);
    v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v6 = (uint64_t *)(v5 + 704);
    v5[774] = 1;
    v7 = *((_DWORD *)v5 + 184) - *((_DWORD *)v5 + 188) + *((_DWORD *)v5 + 186);
    sub_21DF34D10((uint64_t *)v5 + 88, v3);
    sub_21DF402C8(v6, v4);
    v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 704;
    v9 = sub_21DF2DC24((uint64_t)v6, v7);
    sub_21DF2ED04(v8, v9);
  }
  return v2;
}

uint64_t sub_21DF87510(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(_QWORD *)(a1 + 4112) + 88) >> 9) & 1;
}

uint64_t sub_21DF87520(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F2680;
  v1[520] = &unk_24E1F2880;
  v2 = (void *)v1[517];
  if (v2)
  {
    v1[518] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[510];
  if (v3)
  {
    v1[511] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)v1[487];
  if (v4 != v1 + 489)
    free(v4);
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F28E8);
  return sub_21DF2E650((uint64_t)(v1 + 520));
}

void sub_21DF875A8(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F2680;
  v1[520] = &unk_24E1F2880;
  v2 = (void *)v1[517];
  if (v2)
  {
    v1[518] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[510];
  if (v3)
  {
    v1[511] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)v1[487];
  if (v4 != v1 + 489)
    free(v4);
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F28E8);
  sub_21DF2E650((uint64_t)(v1 + 520));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF87648()
{
  return "vertex";
}

uint64_t sub_21DF87654()
{
  return 0;
}

uint64_t sub_21DF8765C(_QWORD *a1)
{
  return (*(unsigned __int16 *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 64) + 4112) + 88) >> 9) & 1;
}

void sub_21DF87678(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF868A4((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 88)), a2);
}

BOOL sub_21DF87688(_QWORD *a1)
{
  return sub_21DF8743C((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)));
}

uint64_t *sub_21DF87698(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a2;
  *a1 = 1;
  if (a2 > 0x39)
  {
    v5 = (_QWORD *)operator new();
    v4 = (uint64_t)v5;
    v6 = (v2 + 63) >> 6;
    v7 = v5 + 2;
    *v5 = v5 + 2;
    v5[1] = 0x600000000;
    if ((v2 + 63) < 0x1C0)
    {
      if ((v2 + 63) >= 0x40)
      {
        do
        {
          *v7++ = 0;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      *((_DWORD *)v5 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD **)v4;
      do
      {
        *v8++ = 0;
        --v6;
      }
      while (v6);
    }
    *(_DWORD *)(v4 + 8) = (v2 + 63) >> 6;
    *(_DWORD *)(v4 + 64) = v2;
  }
  else
  {
    v4 = (a2 << 58) | 1;
  }
  *a1 = v4;
  return a1;
}

void ***sub_21DF87774(void ***a1)
{
  void **v2;

  v2 = *a1;
  if ((*a1 & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2207A7960](v2, 0x1080C40EF38A13ELL);
  }
  return a1;
}

uint64_t sub_21DF877CC(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  if (a2)
  {
    v5 = a2;
    v6 = (_QWORD *)result;
    v7 = *(_QWORD *)(result + 4112);
    v8 = result + 192;
    v9 = a4 & 0xFFFFFFFD;
    do
    {
      v10 = *(llvm::Instruction **)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
      v11 = *(_QWORD *)(*v6 - 24);
      v12 = (uint64_t *)(v8 + v11);
      if (v9 != 1)
        v12 = (uint64_t *)v10;
      v13 = *v12;
      sub_21DF3F430((uint64_t)v6 + v11 + 8, (uint64_t)v10);
      v14 = v6[514];
      v15 = *(unsigned int *)(v14 + 80);
      if (*(_DWORD *)(v14 + 80))
      {
        v16 = 0;
        while (*(unsigned __int8 *)(v7 + 4 * v16) != a3)
        {
          if (v15 == ++v16)
          {
            v17 = 0;
            LODWORD(v16) = v15;
            goto LABEL_12;
          }
        }
        v17 = (uint64_t *)v6[v16 + 493];
      }
      else
      {
        LODWORD(v16) = 0;
        v17 = 0;
      }
LABEL_12:
      sub_21DF878BC(v6, (int *)(v7 + 4 * v16), v13, v17);
      llvm::Value::replaceAllUsesWith();
      result = llvm::Instruction::eraseFromParent(v10);
    }
    while (v5);
  }
  return result;
}

uint64_t sub_21DF878BC(_QWORD *a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int *v6;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm::Type *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v52;
  int *v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _BYTE v63[32];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v5 = a3;
  v6 = a2;
  v69 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    v8 = *(_DWORD *)(a3 + 32);
    v5 = **(_QWORD **)(a3 + 16);
  }
  else
  {
    v8 = 1;
  }
  v9 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v5 == v9[20] || v5 == v9[19])
  {
    if (*((unsigned __int8 *)a2 + 2) - 9 >= 2)
      llvm::FixedVectorType::get();
    v11 = llvm::ConstantFP::get();
    v10 = llvm::ConstantFP::get();
    v13 = *v6;
    if ((*v6 & 0x1000000) == 0)
    {
      if (BYTE2(v13) <= 0xAu)
        __asm { BR              X10 }
      goto LABEL_9;
    }
    v14 = 1;
    v15 = 16;
    switch(BYTE2(v13))
    {
      case 3:
        v53 = v6;
        v28 = sub_21DF78BE0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a4, 1);
        v29 = llvm::ConstantFP::get();
        v30 = llvm::ConstantFP::get();
        v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v64 = 257;
        v32 = sub_21DF20300(v31, v28, v29, (uint64_t)v63);
        v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v34 = *((_QWORD *)v33 + 43);
        v60 = *(_OWORD *)(v33 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v33 + 8));
        v62 = *((_DWORD *)v33 + 26);
        v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 56))(v34, &v60, v32, v30, 0);
        if (v61)
          goto LABEL_42;
        goto LABEL_43;
      case 4:
        v35 = sub_21DF78BE0((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a4, 0);
        v38 = llvm::ConstantFP::get();
        v39 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
        v64 = 257;
        v25 = sub_21DF20300(v39, v35, v38, (uint64_t)v63);
        goto LABEL_44;
      case 5:
        goto LABEL_41;
      case 6:
        v14 = 0;
        goto LABEL_41;
      case 7:
        goto LABEL_40;
      case 8:
        v14 = 0;
LABEL_40:
        v15 = 8;
LABEL_41:
        v52 = a4;
        v53 = v6;
        v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v37 = *((_QWORD *)v36 + 43);
        v54 = *(_OWORD *)(v36 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v36 + 8));
        v56 = *((_DWORD *)v36 + 26);
        v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 88))(v37, &v54, v52, v15, v14, 32);
        if (v55)
LABEL_42:
          llvm::MetadataTracking::untrack();
LABEL_43:
        v6 = v53;
        break;
      case 9:
      case 0xA:
        v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v17 = *((_QWORD *)v16 + 43);
        v57 = *(_OWORD *)(v16 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 8));
        v59 = *((_DWORD *)v16 + 26);
        v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t *, uint64_t, BOOL))(*(_QWORD *)v17 + 104))(v17, &v57, 5, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 160), a4, 1, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
        if (v58)
          llvm::MetadataTracking::untrack();
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
    if (v5 != v9[24] && v5 != v9[23])
    {
      v10 = 0;
      v11 = 0;
LABEL_9:
      v12 = 0;
      goto LABEL_45;
    }
    v10 = 0;
    v18 = *((unsigned __int8 *)a2 + 2);
    if (v18 <= 0xA)
    {
      if (((1 << v18) & 0x2A8) != 0)
      {
        v19 = llvm::FixedVectorType::get();
        v11 = llvm::ConstantInt::get();
        v10 = llvm::ConstantInt::get();
        if (llvm::Type::getScalarSizeInBits((llvm::Type *)*a4) <= 0x1F)
        {
          v22 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v64 = 257;
          v23 = 40;
LABEL_31:
          v25 = sub_21DF1A79C(v22, v23, (uint64_t)a4, v19, (uint64_t)v63);
          goto LABEL_44;
        }
      }
      else
      {
        if (((1 << v18) & 0x550) == 0)
        {
          v11 = 0;
          v12 = 0;
          if (*((_BYTE *)a2 + 2))
            goto LABEL_45;
          v26 = llvm::FixedVectorType::get();
          v11 = llvm::ConstantInt::get();
          v10 = llvm::ConstantInt::get();
          v27 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v64 = 257;
          v25 = sub_21DF388CC(v27, (uint64_t)a4, v26, (uint64_t)v63);
          goto LABEL_44;
        }
        v19 = llvm::FixedVectorType::get();
        v11 = llvm::ConstantInt::get();
        v10 = llvm::ConstantInt::get();
        v20 = (llvm::Type *)*a4;
        if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12)
          v21 = *(unsigned __int8 *)(**((_QWORD **)v20 + 2) + 8);
        else
          v21 = *(_DWORD *)(*a4 + 8);
        if (v21 <= 6)
        {
          v24 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v64 = 257;
          v25 = sub_21DF1AC78(v24, (uint64_t)a4, v19, (uint64_t)v63);
LABEL_44:
          v12 = v25;
          goto LABEL_45;
        }
        if (llvm::Type::getScalarSizeInBits(v20) <= 0x1F)
        {
          v22 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v64 = 257;
          v23 = 39;
          goto LABEL_31;
        }
      }
      v12 = (uint64_t)a4;
      goto LABEL_45;
    }
    v11 = 0;
    v12 = 0;
  }
LABEL_45:
  v40 = *(_DWORD *)(*(_QWORD *)v12 + 32);
  v41 = *v6;
  if ((*v6 & 0x2000000) != 0)
  {
    v65 = llvm::ConstantInt::get();
    v66 = llvm::ConstantInt::get();
    v67 = llvm::ConstantInt::get();
    v68 = llvm::ConstantInt::get();
    v42 = llvm::ConstantVector::get();
    v43 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v44 = llvm::UndefValue::get();
    v64 = 257;
    v12 = sub_21DF19EE8(v43, v12, v44, v42, (uint64_t)v63);
    v41 = *v6;
  }
  v45 = BYTE1(v41);
  v46 = BYTE1(v41) + 1;
  if (v40 > v46)
    v12 = sub_21DF79408((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v12, v46, 0);
  if (v8 == 1 || v8 <= v45)
  {
    v12 = sub_21DF79408((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v12, v8, 1);
  }
  else if (v8 > v46)
  {
    v12 = sub_21DF7969C((uint64_t)a1 + *(_QWORD *)(*a1 - 24), v12, v8);
    do
    {
      if (v46 == 3)
        v47 = v10;
      else
        v47 = v11;
      v48 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v64 = 257;
      v49 = (uint64_t)(v48 + 8);
      v50 = llvm::ConstantInt::get();
      v12 = sub_21DF7980C(v49, v12, v47, v50, (uint64_t)v63);
      ++v46;
    }
    while (v8 != v46);
  }
  return sub_21DF79090((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24)), v12, v5);
}

uint64_t sub_21DF88194(uint64_t a1, int a2)
{
  if (BYTE2(a2) <= 0xAu)
    __asm { BR              X10 }
  return 0;
}

void *sub_21DF88368(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    sub_21DF256A4();
  return operator new(20 * a1);
}

uint64_t sub_21DF883AC(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  sub_21DF2E500(a1 + 4160, a2, *a3);
  v11 = sub_21DF99AB8(a1, (uint64_t *)off_24E1F28E8, (uint64_t)a3, a4, 1);
  *(_QWORD *)a1 = &off_24E1F2680;
  *(_QWORD *)(a1 + 4160) = &unk_24E1F2880;
  *(_QWORD *)(a1 + 3896) = a1 + 3912;
  *(_QWORD *)(a1 + 3904) = 0x800000000;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_QWORD *)(a1 + 4080) = 0;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_QWORD *)(a1 + 4104) = -1;
  *(_QWORD *)(a1 + 4112) = a4;
  *(_QWORD *)(a1 + 4120) = a6;
  *(_QWORD *)(a1 + 4128) = a5;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_QWORD *)(a1 + 4152) = 0;
  *(_DWORD *)(a1 + 3116) = *(unsigned __int8 *)(a4 + 88);
  sub_21DF9DCF4(v11);
  return a1;
}

_QWORD *sub_21DF88490(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F5320;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F5518;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3320);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF88518(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F5320;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F5518;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3320);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

void sub_21DF885B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 32) >= 2u)
  {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 312), *(llvm::Module **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320));
    sub_21DF2F24C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), "After inliner in AGCLLVMAGPVertexShaderRegular::simplifyGenericIR");
    *(_DWORD *)(a1 + 32) = 1;
  }
  sub_21DF51844(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_21DF88624(_QWORD *a1)
{
  uint64_t v2;
  uint64_t Function;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_21DF8B8E4((uint64_t)a1);
  if ((_DWORD)v2 && !*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344) + 1653))
  {
    Function = llvm::Module::getFunction();
    a1[564] = Function;
    if (!Function)
      a1[564] = llvm::Module::getFunction();
    v4 = llvm::Module::getFunction();
    a1[565] = v4;
    if (!v4)
      a1[565] = llvm::Module::getFunction();
    v5 = llvm::Module::getFunction();
    a1[566] = v5;
    if (!v5)
      a1[566] = llvm::Module::getFunction();
    v6 = llvm::Module::getFunction();
    a1[567] = v6;
    if (!v6)
      a1[567] = llvm::Module::getFunction();
  }
  return v2;
}

uint64_t sub_21DF8878C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  const char *v5;
  uint64_t v6;

  v2 = sub_21DF93848(a1);
  if (*(_BYTE *)(a1 + 10))
  {
    v3 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24) + 16) == *(_QWORD *)(v3 + 144))
    {
      v4 = *(_BYTE **)(v3 + 344);
      if (v4[1668])
        (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v4 + 272))(v4, *(_QWORD *)(a1 + 152));
    }
  }
  if (MGGetBoolAnswer())
  {
    v5 = (const char *)sub_21DF21324("AGX_MTL_TESSELLATION_VS_WRITETHROUGH");
    if (v5)
    {
      if (*v5 != 48 && atoi(v5))
      {
        v6 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 304))(v6, *(_QWORD *)(a1 + 152));
      }
    }
  }
  return v2;
}

uint64_t sub_21DF88854(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::Value *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::BasicBlock *v21;
  uint64_t v22;
  uint64_t Function;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t FirstInsertionPt;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Function *v72;
  uint64_t v73;
  uint64_t v74;
  llvm::BasicBlock *v75;
  unsigned int v76;
  llvm::Function *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD v80[4];
  __int16 v81;
  _QWORD v82[2];
  _QWORD v83[2];
  int v84;
  int v85;
  const char *v86;
  const char *v87;
  int v88;
  int v89;
  const char *v90;
  const char *v91;
  int v92;
  int v93;
  const char *v94;
  const char *v95;
  int v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  sub_21DF939C4(a1);
  v2 = *(_QWORD *)(a1 + 160);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v4 = *(_QWORD *)(a1 + 160);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  for (i = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96); v3 != i; v3 += 40)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
      v7 = v6 ? v6 - 24 : 0;
      v8 = *(_QWORD *)(v7 + 40);
      v9 = v8 ? v8 - 24 : 0;
      sub_21DF56A4C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v9, *(_QWORD *)(a1 + 40));
      v10 = *(unsigned int *)(v3 + 32);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v10);
      if ((sub_21DF9D590((_QWORD *)a1, (unint64_t *)v3, v10, v11) & 1) == 0)
      {
        if (sub_21DF241E0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_count"))
        {
          v12 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v13 = sub_21DF97554((_QWORD *)a1);
          *(_QWORD *)(a1 + 3136) = sub_21DF79090(v12, v13, *(_QWORD *)v3);
          llvm::Value::replaceAllUsesWith();
          *(_BYTE *)(a1 + 3145) = 1;
        }
        else if (sub_21DF241E0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_mask"))
        {
          v14 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v15 = sub_21DF98C2C((_QWORD *)a1);
          *(_QWORD *)(a1 + 3136) = sub_21DF79090(v14, v15, *(_QWORD *)v3);
          llvm::Value::replaceAllUsesWith();
        }
        else if (sub_21DF241E0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_id"))
        {
          v16 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          v17 = sub_21DF97490((_QWORD *)a1, *(_DWORD *)(a1 + 3152));
          *(_QWORD *)(a1 + 3128) = sub_21DF79090(v16, (uint64_t)v17, *(_QWORD *)v3);
          llvm::Value::replaceAllUsesWith();
          *(_BYTE *)(a1 + 3144) = 1;
        }
      }
    }
  }
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
  if (v20)
    v21 = (llvm::BasicBlock *)(v20 - 24);
  else
    v21 = 0;
  v74 = a1 + 344;
  v75 = v21;
  v22 = a1 + 8;
  v78 = 0;
  do
  {
    if ((&off_24E1F3058)[2 * v18])
      strlen((&off_24E1F3058)[2 * v18]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v72 = (llvm::Function *)Function;
      v73 = v18;
      v24 = *(_QWORD *)(Function + 8);
      if (v24)
      {
        v25 = LODWORD((&off_24E1F3058)[2 * v18 + 1]);
        do
        {
          v26 = *(uint64_t **)(v24 + 24);
          v24 = *(_QWORD *)(v24 + 8);
          if (v26[1])
          {
            if ((_DWORD)v25 == 3)
              v27 = v78;
            else
              v27 = v19;
            if (!v27)
            {
              v28 = *(_QWORD *)(v74 + *(_QWORD *)(*(_QWORD *)a1 - 24));
              v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 312))(v28, a1 + 3088, v25);
              v30 = v22 + *(_QWORD *)(*(_QWORD *)a1 - 24);
              FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v75);
              sub_21DF19018(v30, (uint64_t)v75, FirstInsertionPt);
              v32 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              v76 = v29;
              v33 = sub_21DF99DC8((_QWORD *)a1);
              v34 = *(_QWORD *)(a1 + 192 + *(_QWORD *)(*(_QWORD *)a1 - 24));
              LOWORD(v87) = 257;
              v35 = sub_21DF1A79C(v32, 49, (uint64_t)v33, v34, (uint64_t)v83);
              v36 = v35;
              v37 = (uint64_t)v78;
              if ((_DWORD)v25 == 3)
                v38 = (uint64_t)v19;
              else
                v38 = v35;
              if ((_DWORD)v25 == 3)
                v39 = v35;
              else
                v39 = (uint64_t)v78;
              v40 = *(_QWORD *)(v74 + *(_QWORD *)(*(_QWORD *)a1 - 24));
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 328))(v40, v25))
              {
                v41 = sub_21DF206CC();
                v42 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v43 = v42 + a1 + 8;
                LOWORD(v87) = 257;
                v44 = sub_21DF191A4(a1 + 8 + v42, **(_QWORD **)(*(_QWORD *)v41 + 16), v41, 0, 0, (uint64_t)v83);
                v81 = 257;
                v45 = sub_21DF19FAC(v43, v36, (uint64_t)v44, (uint64_t)v80);
                if ((_DWORD)v25 == 3)
                  v37 = v45;
                else
                  v19 = (_QWORD *)v45;
                v78 = (_QWORD *)v37;
                v22 = a1 + 8;
              }
              else
              {
                v19 = (_QWORD *)v38;
                v78 = (_QWORD *)v39;
                v22 = a1 + 8;
              }
              v46 = *(unsigned int *)(a1 + 4472);
              if (v46 >= *(unsigned int *)(a1 + 4476))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v46 = *(unsigned int *)(a1 + 4472);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 4464) + 8 * v46) = (v25 << 32) | v76;
              ++*(_DWORD *)(a1 + 4472);
              if ((_DWORD)v25 == 3)
                v27 = v78;
              else
                v27 = v19;
            }
            v47 = *v26;
            if (*v27 != *v26)
            {
              v48 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              LOWORD(v87) = 257;
              sub_21DF1A79C(v48, 38, (uint64_t)v27, v47, (uint64_t)v83);
            }
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v26);
        }
        while (v24);
      }
      llvm::Function::eraseFromParent(v72);
      v18 = v73;
    }
    ++v18;
  }
  while (v18 != 4);
  v49 = v22;
  v83[0] = "air.get_base_vertex.i32";
  v83[1] = "base_vertex";
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 136))(v50);
  v85 = 0;
  v86 = "air.get_base_vertex.i16";
  v87 = "base_vertex";
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 136))(v51);
  v89 = 0;
  v90 = "air.get_base_instance.i32";
  v91 = "base_instance";
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 144))(v52);
  v93 = 1;
  v94 = "air.get_base_instance.i16";
  v95 = "base_instance";
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
  v54 = 0;
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 144))(v53);
  v97 = 1;
  v82[0] = 0;
  v82[1] = 0;
  do
  {
    if (v83[3 * v54])
      strlen((const char *)v83[3 * v54]);
    v55 = llvm::Module::getFunction();
    if (v55)
    {
      v77 = (llvm::Function *)v55;
      v56 = *(_QWORD *)(v55 + 8);
      if (v56)
      {
        v57 = &v83[3 * v54];
        v58 = (unsigned int *)v57 + 5;
        v79 = v57 + 1;
        v59 = (unsigned int *)(v57 + 2);
        do
        {
          v60 = *(uint64_t **)(v56 + 24);
          v56 = *(_QWORD *)(v56 + 8);
          if (v60[1])
          {
            v61 = *v58;
            v62 = v82[v61];
            if (!v62)
            {
              v63 = llvm::PointerType::get();
              if (*(_BYTE *)*v79)
              {
                v80[2] = *v79;
                v64 = 3;
              }
              else
              {
                v64 = 1;
              }
              v80[0] = "agc.buffer_pointers.";
              LOBYTE(v81) = 3;
              HIBYTE(v81) = v64;
              v62 = sub_21DF66EC0((uint64_t *)a1, v63, (uint64_t)v80, *v59, 4);
              v82[v61] = v62;
            }
            sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v60);
            v65 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v81 = 257;
            v66 = sub_21DF19394((uint64_t *)(v49 + v65), **(llvm::Type ***)(*(_QWORD *)v62 + 16), v62, 0, (uint64_t)v80);
            v67 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v81 = 257;
            v68 = sub_21DF19394((uint64_t *)(v49 + v67), **(llvm::Type ***)(*(_QWORD *)v66 + 16), v66, 0, (uint64_t)v80);
            v69 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
            v70 = *v60;
            v81 = 257;
            sub_21DF1A79C(v69, 38, v68, v70, (uint64_t)v80);
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v60);
        }
        while (v56);
      }
      llvm::Function::eraseFromParent(v77);
    }
    ++v54;
  }
  while (v54 != 4);
  return 1;
}

uint64_t sub_21DF8906C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v36;
  const std::string::value_type *v37;
  uint64_t v38;
  std::string::size_type v39;
  int v40;
  std::string *p_dst;
  std::string::size_type size;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v48;
  std::string __str;
  std::string __dst;
  __int16 v51;
  size_t __idx;
  char v53;
  std::string v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v2 = sub_21DF93EF4((_QWORD *)a1);
  v9 = v2;
  v10 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24) + 16) == *(_QWORD *)(v10 + 144)
    && *(_BYTE *)(*(_QWORD *)(v10 + 344) + 1639))
  {
    v54.__r_.__value_.__r.__words[0] = llvm::ConstantFP::get();
    v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
    v54.__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[0];
    v55 = llvm::ConstantFP::get();
    v11 = (unsigned __int8 *)llvm::ConstantVector::get();
    v12 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
    v13 = *(_QWORD *)(a1 + 3288);
    v14 = *(_QWORD *)(a1 + 3304);
    v15 = *(_QWORD *)(a1 + 3296);
    v56 = 257;
    v16 = sub_21DF1A864(v12, v14, v15, (uint64_t)&v54);
    v51 = 257;
    v17 = sub_21DF19FAC(v12, v13, v16, (uint64_t)&__dst);
    v2 = (uint64_t)sub_21DF98000((_QWORD *)a1, v11, v17, 0, 0, *(unsigned __int8 *)(a1 + 3156));
  }
  v18 = *(_DWORD *)(a1 + 3908);
  if (v18)
  {
    sub_21DF28954(v2, "Following fragment input(s) mismatching vertex shader output type(s) or not written by vertex shader: ", v3, v4, v5, v6, v7, v8, v48);
    v26 = *(unsigned int *)(a1 + 3904);
    if ((_DWORD)v26)
    {
      for (i = *(uint64_t **)(a1 + 3896); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)(a1 + 3896);
    }
    v29 = *(_QWORD *)(a1 + 3896) + 8 * v26;
    if (i != (uint64_t *)v29)
    {
      v30 = *i;
      do
      {
        sub_21DF28954(v19, "\t%s", v20, v21, v22, v23, v24, v25, v30 + 16);
        do
        {
          v31 = i[1];
          ++i;
          v30 = v31;
          if (v31)
            v32 = v30 == -8;
          else
            v32 = 1;
        }
        while (v32);
      }
      while (i != (uint64_t *)v29);
    }
    v33 = *(unsigned int *)(a1 + 3904);
    if ((_DWORD)v33)
    {
      for (j = *(_QWORD *)(a1 + 3896); !*(_QWORD *)j || *(_QWORD *)j == -8; j += 8)
        ;
    }
    else
    {
      j = *(_QWORD *)(a1 + 3896);
    }
    v36 = *(_QWORD *)(a1 + 3896) + 8 * v33;
    if (j != v36)
    {
      v37 = (const std::string::value_type *)&unk_21DFAD77A;
      v38 = a1 + 408;
      do
      {
        std::string::append((std::string *)(v38 + *(_QWORD *)(*(_QWORD *)a1 - 24)), v37);
        sub_21DF24420(&__str, (void *)(*(_QWORD *)j + 16), **(_QWORD **)j);
        __idx = 0;
        v39 = std::string::find(&__str, "generated(", 0, 0xAuLL);
        if (v39 == -1)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            sub_21DF205EC(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            __dst = __str;
        }
        else
        {
          std::string::basic_string(&v54, &__str, v39 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__dst);
          v40 = std::stoi(&v54, &__idx, 10);
          std::string::basic_string(&__dst, &v54, __idx, v40, (std::allocator<char> *)&v53);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        std::string::append((std::string *)(v38 + *(_QWORD *)(*(_QWORD *)a1 - 24)), (const std::string::value_type *)p_dst, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        do
        {
          v44 = *(_QWORD *)(j + 8);
          j += 8;
          v43 = v44;
          if (v44)
            v45 = v43 == -8;
          else
            v45 = 1;
        }
        while (v45);
        v37 = ",";
      }
      while (j != v36);
    }
  }
  if (*(_BYTE *)(a1 + 3144))
  {
    llvm::Module::getOrInsertNamedMetadata();
    if (*(_DWORD *)(a1 + 3152) > 1u)
      v46 = 0;
    else
      v46 = llvm::MDString::get();
    v54.__r_.__value_.__r.__words[0] = v46;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  if (v18)
    return 0;
  else
    return v9;
}

uint64_t sub_21DF894A8(_QWORD *a1)
{
  sub_21DF9DDFC(a1);
  return 1;
}

void sub_21DF894C0(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  llvm::Type *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  llvm::Value *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t **v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  llvm::ArrayType *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  llvm *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void *v159;
  void *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176[4];
  __int16 v177;
  uint64_t v178[4];
  __int16 v179;
  _QWORD v180[4];
  __int16 v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  _BYTE v185[40];
  __int16 v186;
  char v187;
  uint64_t v188;
  BOOL v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  int v193;
  llvm::Type *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _QWORD *v197;
  uint64_t v198;
  _BYTE v199[64];
  char __str[32];
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1653)
    || !*(_QWORD *)(a1 + 4512) && !*(_QWORD *)(a1 + 4520))
  {
    return;
  }
  if (a4 == -1)
    snprintf(__str, 0x20uLL, "arg%d");
  else
    snprintf(__str, 0x20uLL, "arg%d.%d");
  v8 = **(llvm::Type ***)(*a2 + 16);
  v194 = v8;
  v9 = *((_DWORD *)v8 + 2);
  v10 = v9;
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
    v10 = *(unsigned __int8 *)(**((_QWORD **)v8 + 2) + 8);
  if (v10 == 15)
    return;
  if (v9 > 0x11)
    goto LABEL_37;
  if (((1 << v9) & 0xAC7F) == 0)
  {
    if (((1 << v9) & 0x30000) != 0)
    {
LABEL_42:
      if (!llvm::Type::isSizedDerivedType())
        return;
      goto LABEL_12;
    }
LABEL_37:
    if ((*((_DWORD *)v8 + 2) & 0xFE) != 0x12 && v9 != 21)
      return;
    goto LABEL_42;
  }
LABEL_12:
  v197 = (_QWORD *)sub_21DF1B2C4((llvm::DataLayout *)(a1 + 168), v8);
  v198 = v11;
  v12 = llvm::TypeSize::operator unsigned long long();
  v19 = v12;
  if ((v12 & 3) != 0)
  {
    sub_21DF28954(v12, "Cannot DMA promote %s : type size %u not a multiple of 4", v13, v14, v15, v16, v17, v18, (char)__str);
    return;
  }
  v193 = 0;
  v189 = 0;
  v188 = 0;
  v191 = 0;
  v190 = 0;
  v192 = 0;
  v184 = 128;
  v182 = MEMORY[0x2207A6DD8](0x4000, 8);
  sub_21DF8E17C((uint64_t)&v182);
  v166 = v185;
  v185[0] = 0;
  v185[24] = 0;
  v186 = 1;
  v187 = 0;
  if ((sub_21DF8BAB8(a1, (uint64_t)a2, (uint64_t)__str, &v193, (uint64_t)&v188, (uint64_t)&v182, v20, v21) & 1) != 0
    || sub_21DF8CAE0(a1, a2, (unsigned __int8 *)__str, &v194, v22, v23, v24, v25)
    && (v8 = v194,
        v197 = (_QWORD *)sub_21DF1B2C4((llvm::DataLayout *)(a1 + 168), v194),
        v198 = v26,
        v19 = llvm::TypeSize::operator unsigned long long(),
        sub_21DF8BAB8(a1, (uint64_t)a2, (uint64_t)__str, &v193, (uint64_t)&v188, (uint64_t)&v182, v27, v28)))
  {
    v29 = llvm::UndefValue::get();
    v165 = v199;
    v197 = v199;
    v198 = 0x800000000;
    v174 = v19 >> 2;
    sub_21DF75C48((uint64_t)&v197, v174, v29);
    v30 = sub_21DF8D3AC(a1, (uint64_t)v8, &v182);
    v38 = v37 + 3;
    v39 = (unint64_t)(v37 + 3) >> 2;
    v40 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v41 = *(_DWORD *)(*(_QWORD *)(a1 + v40 + 344) + 844);
    if (v41 >= 0x80)
      v41 = 128;
    if (*(_DWORD *)(a1 + 3088) + v39 - (v30 >> 2) >= v41 - 2)
    {
      sub_21DF28954(v30, "Cannot DMA promote %s : ran out of vi's, need %u, already allocated %u, limit %u", v31, v32, v33, v34, v35, v36, (char)__str);
    }
    else
    {
      v42 = v30;
      v172 = v30 >> 2;
      v173 = (uint64_t *)(v39 - (v30 >> 2));
      v164 = a1 + 168;
      v43 = v40 + a1 + 8;
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 80);
      if (v44)
        v45 = v44 - 24;
      else
        v45 = 0;
      v46 = *(_QWORD *)(v45 + 40);
      if (v46)
        v47 = v46 - 24;
      else
        v47 = 0;
      sub_21DF3F430(v43, v47);
      v171 = *(unsigned int *)(a1 + 3088);
      if (v19 >= 4)
      {
        v48 = 0;
        v49 = (v38 >> 2);
        v50 = (v42 >> 2);
        if (v174 <= 1)
          v51 = 1;
        else
          v51 = v174;
        do
        {
          if (v48 >= v50 && v48 < v49)
          {
            ++*(_DWORD *)(a1 + 3088);
            v52 = sub_21DF99DC8((_QWORD *)a1);
            v197[v48] = v52;
          }
          ++v48;
        }
        while (v51 != v48);
      }
      v53 = v186;
      v178[0] = (uint64_t)"vertex_input";
      v179 = 259;
      v177 = 264;
      LODWORD(v176[0]) = a3;
      sub_21DF8D64C((uint64_t)v180, v178, v176);
      v175 = sub_21DF8D6DC((_QWORD *)a1, v8, v53, &v197, (uint64_t)v180);
      sub_21DF28954(v175, "DMA promoting %s to VI, attribute size = %u words, only words [%u .. %u] actually used", v54, v55, v56, v57, v58, v59, (char)__str);
      v60 = v193 == 2;
      sub_21DF28954(v61, "DMA Entry = {reg_offset: %u, size : %u, offset %u, stride; %u, instanced: %s, div: %u, base_after_divisor: %s}",
        v62,
        v63,
        v64,
        v65,
        v66,
        v67,
        v171);
      LODWORD(v188) = v171;
      v68 = v175;
      sub_21DF72028((unsigned int *)v180, a3, a4);
      HIDWORD(v188) = v180[0];
      v190 = __PAIR64__(v172, v173);
      LODWORD(v191) = v174;
      v189 = v60;
      v69 = (_OWORD *)sub_21DF8D9E8(a1 + 3936, (unint64_t)&v188);
      v70 = (_OWORD *)(*(_QWORD *)(a1 + 3936) + 32 * *(unsigned int *)(a1 + 3944));
      v71 = v69[1];
      *v70 = *v69;
      v70[1] = v71;
      ++*(_DWORD *)(a1 + 3944);
      if (*(_BYTE *)(v68 + 16) == 60)
      {
        v173 = *(uint64_t **)(v68 - 32);
      }
      else if (v187)
      {
        v73 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v181 = 257;
        v74 = (uint64_t *)sub_21DF7A698(v73, v8, (uint64_t)v180);
        v75 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8);
        v173 = v74;
        sub_21DF385B0(v75, (llvm::Type **)v68, (uint64_t)v74, 0);
      }
      else
      {
        v173 = 0;
      }
      if (v183)
      {
        v171 = a1 + 192;
        v172 = a1 + 8;
        do
        {
          v76 = (_QWORD *)v182;
          if (v184)
          {
            v77 = (unint64_t)v184 << 7;
            v78 = (uint64_t **)(v182 + 24);
            v79 = v77;
            while (1)
            {
              v80 = *v78;
              if (((unint64_t)*v78 | 0x1000) != 0xFFFFFFFFFFFFF000)
                break;
              v78 += 16;
              v79 -= 128;
              if (!v79)
              {
                v80 = *(uint64_t **)(v182 + ((unint64_t)v184 << 7) + 24);
                break;
              }
            }
            v81 = (unint64_t)v184 << 7;
            v82 = v182;
            do
            {
              if ((*(_QWORD *)(v82 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_59;
              v82 += 128;
              v81 -= 128;
            }
            while (v81);
            v82 = v182 + ((unint64_t)v184 << 7);
LABEL_59:
            while ((v76[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v76 += 16;
              v77 -= 128;
              if (!v77)
              {
                v76 = (_QWORD *)(v182 + ((unint64_t)v184 << 7));
                break;
              }
            }
          }
          else
          {
            v80 = *(uint64_t **)(v182 + 24);
            v82 = v182;
          }
          sub_21DF8DA5C((int32x2_t *)&v182, v76);
          v83 = *(unsigned int *)(v82 + 48);
          v84 = sub_21DF3F430(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8, (uint64_t)v80);
          if ((_DWORD)v83)
          {
            if (*(_BYTE *)(v82 + 120))
            {
              v85 = MEMORY[0x24BDAC7A8](v84);
              v87 = (char *)&v162 - ((v86 + 15) & 0x7FFFFFFF0);
              v88 = *(_QWORD *)(v82 + 40);
              v89 = v87;
              v90 = v83;
              do
              {
                v91 = (_QWORD *)(*(_QWORD *)v88 + 24);
                if (*(_DWORD *)(*(_QWORD *)v88 + 32) >= 0x41u)
                  v91 = (_QWORD *)*v91;
                *v89++ = *v91;
                v88 += 8;
                --v90;
              }
              while (v90);
              switch(*(_DWORD *)(v82 + 124))
              {
                case 0:
                  v92 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                  v181 = 257;
                  sub_21DF1ACD0(v92, v68, (uint64_t)v87, v83, (uint64_t)v180);
                  break;
                case 1:
                  v109 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                  v181 = 257;
                  v110 = sub_21DF1ACD0(v109, v68, (uint64_t)v87, v83, (uint64_t)v180);
                  sub_21DF7969C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v110, *(_DWORD *)(*v80 + 32));
                  break;
                case 2:
                  sub_21DF1B320(v164, *v80);
                  v180[0] = (unint64_t)(v111 + 7) >> 3;
                  v180[1] = v112 == 1;
                  v113 = llvm::TypeSize::operator unsigned long long();
                  v114 = v113 >> 2;
                  v115 = *v80;
                  if ((*(_DWORD *)(*v80 + 8) & 0xFE) == 0x10)
                  {
                    v163 = &v162;
                    v116 = *(llvm::ArrayType **)(**(_QWORD **)(v115 + 16) + 24);
                    llvm::ArrayType::get(v116, (llvm::Type *)v114);
                    v117 = llvm::UndefValue::get();
                    LODWORD(v176[0]) = 0;
                    if (v113 >= 4)
                    {
                      v174 = (unint64_t)v116;
                      do
                      {
                        v135 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                        v181 = 257;
                        v136 = sub_21DF1ACD0(v135, v175, (uint64_t)v87, v83, (uint64_t)v180);
                        v137 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                        v181 = 257;
                        v138 = sub_21DF1A79C(v137, 49, v136, v174, (uint64_t)v180);
                        v179 = 257;
                        v117 = sub_21DF1A244(v137, v117, v138, (uint64_t)v176, 1, (uint64_t)v178);
                        ++*(_DWORD *)&v87[4 * (v83 - 1)];
                        ++LODWORD(v176[0]);
                      }
                      while (LODWORD(v176[0]) < v114);
                    }
                    v139 = llvm::UndefValue::get();
                    v140 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                    LODWORD(v178[0]) = 0;
                    v181 = 257;
                    sub_21DF1A244(v140, v139, v117, (uint64_t)v178, 1, (uint64_t)v180);
                  }
                  else
                  {
                    v130 = *(v80 - 4);
                    if (*(_BYTE *)(v130 + 16) == 62)
                    {
                      v131 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v181 = 257;
                      v132 = sub_21DF1ACD0(v131, v68, (uint64_t)v87, v83, (uint64_t)v180);
                      v133 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                      v134 = *v80;
                      v181 = 257;
                      sub_21DF1A79C(v133, 49, v132, v134, (uint64_t)v180);
                      break;
                    }
                    v163 = &v162;
                    v141 = **(_QWORD **)(**(_QWORD **)(v130 - 32) + 16);
                    llvm::FixedVectorType::get();
                    v142 = llvm::UndefValue::get();
                    if (v113 >= 4)
                    {
                      v143 = 0;
                      v170 = (v83 - 1);
                      if (v114 <= 1)
                        v144 = 1;
                      else
                        v144 = v114;
                      v168 = v141;
                      v169 = v144;
                      v167 = v83;
                      do
                      {
                        v174 = v142;
                        v145 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                        v181 = 257;
                        v146 = sub_21DF1ACD0(v145, v175, (uint64_t)v87, v167, (uint64_t)v180);
                        v147 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                        v181 = 257;
                        v148 = sub_21DF1A79C(v147 + 8, 49, v146, v168, (uint64_t)v180);
                        v179 = 257;
                        v149 = llvm::ConstantInt::get();
                        v142 = sub_21DF7980C(v147 + 8, v174, v148, v149, (uint64_t)v178);
                        ++*(_DWORD *)&v87[4 * v170];
                        ++v143;
                      }
                      while (v169 != v143);
                    }
                    v150 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                    v151 = *v80;
                    v181 = 257;
                    sub_21DF1A79C(v150, 49, v142, v151, (uint64_t)v180);
                  }
                  v68 = v175;
                  break;
                case 3:
                  MEMORY[0x24BDAC7A8](v85);
                  v120 = (uint64_t **)((char *)&v162 - v119);
                  if (v118 >= 0x200)
                    v121 = 512;
                  else
                    v121 = v118;
                  bzero((char *)&v162 - v119, v121);
                  v122 = llvm::ConstantInt::get();
                  v123 = 0;
                  *v120 = (uint64_t *)v122;
                  do
                  {
                    v120[v123 + 1] = *(uint64_t **)(*(_QWORD *)(v82 + 40) + v123 * 8);
                    ++v123;
                  }
                  while (v83 != v123);
                  v124 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
                  v181 = 257;
                  v125 = sub_21DF66DE4(v124, v173, v120, (v83 + 1), (uint64_t)v180);
                  v126 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                  v127 = llvm::PointerType::get();
                  v181 = 257;
                  v128 = sub_21DF1A79C(v126, 49, v125, v127, (uint64_t)v180);
                  v129 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                  v181 = 257;
                  sub_21DF19394((uint64_t *)(v172 + v129), **(llvm::Type ***)(*(_QWORD *)v128 + 16), v128, 0, (uint64_t)v180);
                  v68 = v175;
                  break;
                default:
                  break;
              }
            }
            else
            {
              MEMORY[0x24BDAC7A8](v84);
              v96 = (uint64_t **)((char *)&v162 - v95);
              if (v94 >= 0x200)
                v97 = 512;
              else
                v97 = v94;
              bzero((char *)&v162 - v95, v97);
              v98 = llvm::ConstantInt::get();
              v99 = 0;
              *v96 = (uint64_t *)v98;
              do
              {
                v96[v99 + 1] = *(uint64_t **)(*(_QWORD *)(v82 + 40) + v99 * 8);
                ++v99;
              }
              while (v83 != v99);
              v100 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
              v181 = 257;
              v101 = sub_21DF66DE4(v100, v173, v96, (v83 + 1), (uint64_t)v180);
              if ((*(_DWORD *)(v82 + 124) | 2) == 3)
              {
                v102 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
                v103 = llvm::PointerType::get();
                v181 = 257;
                v101 = sub_21DF1A79C(v102, 49, v101, v103, (uint64_t)v180);
              }
              v104 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              v181 = 257;
              sub_21DF19394((uint64_t *)(v172 + v104), **(llvm::Type ***)(*(_QWORD *)v101 + 16), v101, 0, (uint64_t)v180);
            }
          }
          else
          {
            v93 = *(_DWORD *)(v82 + 124);
            if (v93 == 3)
            {
              v105 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 8;
              v106 = llvm::PointerType::get();
              v181 = 257;
              v107 = sub_21DF1A79C(v105, 49, (uint64_t)v173, v106, (uint64_t)v180);
              v108 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              v181 = 257;
              sub_21DF19394((uint64_t *)(v172 + v108), **(llvm::Type ***)(*(_QWORD *)v107 + 16), v107, 0, (uint64_t)v180);
            }
            else if (v93 == 1)
            {
              sub_21DF7969C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v68, *(_DWORD *)(*v80 + 32));
            }
          }
          v152 = *(v80 - 4);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v80);
          if (!*(_QWORD *)(v152 + 8))
          {
            v196 = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions();
            v153 = v196;
            if (v196 == v195)
            {
              v153 = v195;
              v154 = 4;
              goto LABEL_112;
            }
            if (v196)
            {
              v154 = 5;
LABEL_112:
              (*(void (**)(void))(*v153 + 8 * v154))();
            }
          }
        }
        while (v183);
      }
    }
    if (v197 != (_QWORD *)v165)
      free(v197);
  }
  sub_21DF5B48C((uint64_t)v166);
  v155 = (llvm *)v182;
  if (v184)
  {
    v156 = v182 + 56;
    v157 = (unint64_t)v184 << 7;
    do
    {
      v158 = *(_QWORD *)(v156 - 32);
      if ((v158 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v159 = *(void **)(v156 - 16);
        if ((void *)v156 != v159)
        {
          free(v159);
          v158 = *(_QWORD *)(v156 - 32);
        }
      }
      if (v158 != -8192 && v158 != -4096 && v158 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v156 - 48));
      v156 += 128;
      v157 -= 128;
    }
    while (v157);
    v155 = (llvm *)v182;
    v161 = (void *)((unint64_t)v184 << 7);
  }
  else
  {
    v161 = 0;
  }
  llvm::deallocate_buffer(v155, v161);
}

uint64_t sub_21DF8A370()
{
  return 1;
}

uint64_t sub_21DF8A378(uint64_t a1, char a2)
{
  return 16 * ((*(_DWORD *)(a1 + 3120) >> a2) & 1u);
}

BOOL sub_21DF8A388(uint64_t a1)
{
  return *(_DWORD *)(a1 + 3120) != 0;
}

uint64_t sub_21DF8A398(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3929);
}

_QWORD *sub_21DF8A3A0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20[8];
  __int16 v21;
  int v22;

  v8 = result;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v10 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 18;
  else
    v10 = 0;
  if (v10)
  {
    v22 = 0;
    v20[0] = 1;
    result = (_QWORD *)sub_21DF7A834(0, a3, v20, &v22);
    v14 = *(unsigned int *)(v9 + 32);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 4 * v22;
      do
      {
        v17 = (char *)v8 + *(_QWORD *)(*v8 - 24);
        v21 = 257;
        v18 = (uint64_t)(v17 + 8);
        v19 = llvm::ConstantInt::get();
        result = (_QWORD *)sub_21DF79584(v18, a2, v19, (uint64_t)v20);
        *a5 |= 1 << (v16 + v15);
        a4[(v16 + v15++)] = (uint64_t)result;
      }
      while (v14 != v15);
    }
  }
  else if (v9 == *(_QWORD *)((char *)result + *(_QWORD *)(*result - 24) + 160))
  {
    *a5 |= 1u;
    *a4 = a2;
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 32);
    *a5 |= ~(-1 << v11);
    v22 = 0;
    if (v11)
    {
      do
      {
        v12 = (uint64_t)v8 + *(_QWORD *)(*v8 - 24) + 8;
        v21 = 257;
        result = (_QWORD *)sub_21DF1ACD0(v12, a2, (uint64_t)&v22, 1, (uint64_t)v20);
        v13 = v22;
        a4[v22] = (uint64_t)result;
        v22 = v13 + 1;
      }
      while (v13 + 1 < v11);
    }
  }
  return result;
}

uint64_t sub_21DF8A530(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  void *String;
  size_t v12;
  size_t v13;
  int Key;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 __dst;
  uint64_t v42;

  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  v13 = v12;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 3904))
    return 0;
  v40 = a6;
  v38 = *(_QWORD *)(a1 + 3896);
  v39 = Key;
  v15 = *(_DWORD *)(*(_QWORD *)(v38 + 8 * Key) + 8);
  v16 = BYTE2(v15);
  v17 = HIBYTE(v15) & 0x7F;
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * a3);
  v19 = sub_21DF78CC0(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), v18, &__dst);
  v20 = (*(_DWORD *)(v18 + 8) & 0xFE) == 0x12 ? *(_DWORD *)(v18 + 32) : 1;
  if (BYTE2(v15) != v19 || v17 != v20)
    return 0;
  v23 = v15;
  v24 = BYTE1(v15);
  v25 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v25;
  v26 = BYTE2(v15) == 1;
  if (BYTE2(v15) == 1)
    v27 = 6;
  else
    v27 = 3;
  if (BYTE2(v15) == 1)
    v28 = 14;
  else
    v28 = 11;
  if (v40)
    v27 = v28;
  if (BYTE2(v15) == 1)
    v29 = 5;
  else
    v29 = 2;
  if (BYTE2(v15) == 1)
    v30 = 13;
  else
    v30 = 10;
  if (v40)
    v29 = v30;
  if (BYTE2(v15) == 1)
    v31 = 4;
  else
    v31 = 1;
  if (BYTE2(v15) == 1)
    v32 = 12;
  else
    v32 = 9;
  if (v40)
    v31 = v32;
  if ((_BYTE)v15)
    v31 = v15;
  if (v15 != 1)
    v29 = v31;
  if (v15 == 2)
    v33 = v27;
  else
    v33 = v29;
  *(_DWORD *)a5 = v17;
  *(_DWORD *)(a5 + 4) = v16;
  *(_DWORD *)(a5 + 8) = v23;
  *(_DWORD *)(a5 + 12) = v24;
  *(_DWORD *)(a5 + 16) = v25;
  v34 = a5 + 24;
  if (*(char *)(a5 + 47) < 0)
    operator delete(*(void **)v34);
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_BYTE *)(a5 + 56) = v26;
  *(_BYTE *)(a5 + 57) = v40;
  *(_DWORD *)(a5 + 60) = v33;
  if (String)
  {
    sub_21DF24420(&__dst, String, v13);
    v35 = *(char *)(a5 + 47);
    v36 = v38;
    if (v35 < 0)
      operator delete(*(void **)v34);
  }
  else
  {
    __dst = 0uLL;
    v42 = 0;
    v36 = v38;
  }
  *(_OWORD *)v34 = __dst;
  *(_QWORD *)(v34 + 16) = v42;
  v37 = *(llvm **)(v36 + 8 * v39);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v37, (void *)(*(_QWORD *)v37 + 17));
  return 1;
}

uint64_t sub_21DF8A77C(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5)
{
  int Key;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  void **v16;
  llvm *v18;
  __int128 __dst;
  uint64_t v20;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  v11 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 3904))
    return 0;
  v12 = *(_QWORD *)(a1 + 3896);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 8 * Key) + 10);
  if ((v13 - 3) > 2)
    return 0;
  v14 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v14;
  if (a5)
    v15 = 10;
  else
    v15 = 2;
  *(_DWORD *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v13;
  *(_QWORD *)(a4 + 8) = 0x300000001;
  *(_DWORD *)(a4 + 16) = v14;
  v16 = (void **)(a4 + 24);
  if (*(char *)(a4 + 47) < 0)
    operator delete(*v16);
  *(_BYTE *)(a4 + 56) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_BYTE *)(a4 + 57) = a5;
  *(_DWORD *)(a4 + 60) = v15;
  if (a2)
  {
    sub_21DF24420(&__dst, a2, a3);
    if (*(char *)(a4 + 47) < 0)
      operator delete(*v16);
  }
  else
  {
    __dst = 0uLL;
    v20 = 0;
  }
  *(_OWORD *)v16 = __dst;
  *(_QWORD *)(a4 + 40) = v20;
  v18 = *(llvm **)(v12 + 8 * v11);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v18, (void *)(*(_QWORD *)v18 + 17));
  return 1;
}

uint64_t sub_21DF8A8D8(uint64_t a1, uint64_t a2)
{
  size_t **v3;
  size_t *v4;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void **v18;
  size_t *v19;
  __int128 __dst;
  uint64_t v21;

  if (!*(_BYTE *)(a1 + 3928) || !*(_DWORD *)(a1 + 3908))
    return 0;
  v3 = *(size_t ***)(a1 + 3896);
  if (*(_DWORD *)(a1 + 3904))
  {
    while (1)
    {
      v4 = *v3;
      if (*v3 && v4 + 1 != 0)
        break;
      ++v3;
    }
  }
  else
  {
    v4 = *v3;
  }
  v7 = *((_DWORD *)v4 + 2);
  v8 = BYTE2(v7);
  v9 = HIBYTE(v7) & 0x7F;
  v10 = v7;
  v11 = BYTE1(v7);
  v12 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v12;
  v13 = v8 == 1;
  if (v8 == 1)
    v14 = 6;
  else
    v14 = 3;
  if (v8 == 1)
    v15 = 5;
  else
    v15 = 2;
  if (v8 == 1)
    v16 = 4;
  else
    v16 = 1;
  if (v10)
    v16 = v11;
  if (v10 != 1)
    v15 = v16;
  if (v10 == 2)
    v17 = v14;
  else
    v17 = v15;
  *(_DWORD *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  v18 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = v13;
  *(_BYTE *)(a2 + 57) = 0;
  *(_DWORD *)(a2 + 60) = v17;
  sub_21DF24420(&__dst, *v3 + 2, **v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = __dst;
  *(_QWORD *)(a2 + 40) = v21;
  v19 = *v3;
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer((llvm *)v19, (void *)(*v19 + 17));
  return 1;
}

BOOL sub_21DF8AA40(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

uint64_t sub_21DF8AA4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21DF8AA54()
{
  return 0;
}

uint64_t sub_21DF8AA5C(uint64_t a1, llvm::AGX::CompileRequest *this)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;

  if (*(_DWORD *)(a1 + 3944))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      llvm::AGX::CompileRequest::addDMAListEntry(this);
      ++v5;
      v4 += 32;
    }
    while (v5 < *(unsigned int *)(a1 + 3944));
  }
  v6 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
  if ((result & 1) == 0 && *(_DWORD *)(a1 + 4472))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = llvm::AGX::CompileRequest::addDMAListEntry(this);
      ++v9;
      v8 += 8;
    }
    while (v9 < *(unsigned int *)(a1 + 4472));
  }
  return result;
}

void sub_21DF8AB30(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *__p[2];
  char v28;
  void *v29[2];
  _QWORD v30[11];
  char v31;
  _BYTE v32[152];
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  sub_21DF1AF28(v25, "AGCVertexContextStateAGP");
  sub_21DF1AF28(v23, "mutableBuffers");
  sub_21DF2E3C8((uint64_t)v29);
  v4 = sub_21DF28BA4(v30, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v30[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v30[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_21DF35174(&v33, (const void **)v23, (uint64_t)__p);
  if (v28 < 0)
    operator delete(__p[0]);
  v29[0] = *(void **)MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v29 + *((_QWORD *)v29[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v30[0] = v5;
  v30[1] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2207A790C](v32);
  sub_21DF1AF28(v29, "genCompilerStatistics");
  sub_21DF34E40(&v34, (const void **)v29, *(_DWORD *)(v3 + 12) & 1);
  sub_21DF1AF28(__p, "genTelemetryStatistics");
  sub_21DF34E40(&v35, (const void **)__p, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  sub_21DF1AF28(v21, "partition_mode");
  sub_21DF34E94(&v36, (const void **)v21, off_24E1FE950[((unint64_t)*(unsigned int *)(v3 + 12) >> 10) & 3]);
  sub_21DF1AF28(v19, "step_function");
  sub_21DF34E94(&v37, (const void **)v19, off_24E1FE970[((unint64_t)*(unsigned int *)(v3 + 12) >> 12) & 3]);
  sub_21DF1AF28(v17, "vertex_amplification_mode");
  sub_21DF34E94(&v38, (const void **)v17, off_24E1FE990[(unsigned __int16)*(_DWORD *)(v3 + 12) >> 14]);
  sub_21DF1AF28(v15, "manufactureUnlinkedVaryings");
  sub_21DF34E40(&v39, (const void **)v15, (*(_DWORD *)(v3 + 12) >> 20) & 1);
  sub_21DF1AF28(v13, "customBorderColor");
  sub_21DF34E40(&v40, (const void **)v13, (*(_DWORD *)(v3 + 12) >> 21) & 1);
  sub_21DF1AF28(v11, "disableTextureRWBoundsCheck");
  sub_21DF34E40(&v41, (const void **)v11, (*(_DWORD *)(v3 + 12) >> 22) & 1);
  sub_21DF1AF28(v9, "debugInstrumentationEnabled");
  sub_21DF34E40(&v42, (const void **)v9, (*(_DWORD *)(v3 + 12) >> 23) & 1);
  sub_21DF1AF28(v7, "unused");
  sub_21DF34E40(&v43, (const void **)v7, *(unsigned __int8 *)(v3 + 15));
  sub_21DF34EE8(a2, (uint64_t)v25, (uint64_t)&v33, 11);
  v6 = 264;
  do
  {
    if (v33.__r_.__value_.__s.__data_[v6 - 1] < 0)
      operator delete(*(void **)&v32[v6 + 128]);
    v6 -= 24;
  }
  while (v6);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v28 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30[0]) < 0)
    operator delete(v29[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
}

BOOL sub_21DF8AF34(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int *v90;
  unsigned int *v91;
  unsigned int *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;

  result = sub_21DF2EDB4(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), *(int **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 128));
  if (result)
  {
    v3 = sub_21DF77960(a1);
    v4 = sub_21DF992B4(a1);
    v5 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v6 = a1 + v5;
    v7 = *(int **)(a1 + v5 + 568);
    v93 = v3;
    v94 = v4;
    if (v7
      && (v8 = (unsigned __int16 *)((char *)v7 - *v7), *v8 >= 5u)
      && (v9 = v8[2]) != 0
      && (v10 = *(unsigned int *)((char *)v7 + v9), *(int *)((char *)v7 + v9 + v10)))
    {
      v11 = 0;
      v12 = 0;
      v99 = 0;
      v100 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = (uint64_t)&v7[v15] + v9 + v10;
        v17 = (int *)(v16 + 4 + *(unsigned int *)(v16 + 4));
        v18 = (unsigned __int16 *)((char *)v17 - *v17);
        v19 = *v18;
        if (v19 < 0xB)
        {
          LODWORD(v20) = 0;
        }
        else
        {
          v20 = v18[5];
          if (v18[5])
            LODWORD(v20) = *(int *)((char *)v17 + v20);
        }
        v21 = *(_DWORD *)(a1 + 3944);
        v22 = v20 - v21;
        if (v20 >= v21)
        {
          *(_BYTE *)(v6 + 774) = 1;
          if (v19 >= 5 && (v26 = v18[2]) != 0)
            v27 = *(int *)((char *)v17 + v26);
          else
            v27 = 0;
          v35 = (uint64_t *)(v6 + 704);
          v36 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
          v37 = *(_QWORD *)(a1 + 4464);
          sub_21DF2E08C((uint64_t *)(v6 + 704), 4, v27);
          sub_21DF2FF00(v35, 6, *(char *)(v37 + 8 * v22 + 4));
          v38 = sub_21DF2DC24((uint64_t)v35, v36);
          v39 = v38;
          if (v14 >= v99)
          {
            v40 = (v14 - v13) >> 2;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              goto LABEL_93;
            if ((v99 - v13) >> 1 > v41)
              v41 = (v99 - v13) >> 1;
            if ((unint64_t)(v99 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
              v42 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
            {
              if (v42 >> 62)
                goto LABEL_94;
              v43 = (char *)operator new(4 * v42);
            }
            else
            {
              v43 = 0;
            }
            v58 = &v43[4 * v40];
            *(_DWORD *)v58 = v39;
            v59 = v58 + 4;
            while (v14 != v13)
            {
              v60 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v58 - 1) = v60;
              v58 -= 4;
            }
            v99 = &v43[4 * v42];
            if (v13)
              operator delete(v13);
            v13 = v58;
            v14 = v59;
          }
          else
          {
            *(_DWORD *)v14 = v38;
            v14 += 4;
          }
        }
        else
        {
          *(_BYTE *)(v6 + 774) = 1;
          v98 = v13;
          if (v19 >= 5 && (v23 = v18[2]) != 0)
          {
            v24 = v11;
            v25 = *(int *)((char *)v17 + v23);
          }
          else
          {
            v24 = v11;
            v25 = 0;
          }
          v28 = v20;
          v29 = (uint64_t *)(v6 + 704);
          v96 = *(_DWORD *)(v6 + 752);
          v97 = *(_DWORD *)(v6 + 736);
          v95 = *(_DWORD *)(v6 + 744);
          v30 = *(_QWORD *)(a1 + 3936);
          sub_21DF2E08C((uint64_t *)(v6 + 704), 4, v25);
          v31 = v30 + 32 * v28;
          sub_21DF2E08C(v29, 6, *(_DWORD *)(v31 + 4));
          sub_21DF2FF00(v29, 8, *(unsigned __int8 *)(v31 + 8));
          v32 = (unsigned __int16 *)((char *)v17 - *v17);
          if (*v32 < 7u)
          {
            v34 = 0;
            v11 = v24;
          }
          else
          {
            v33 = v32[3];
            v11 = v24;
            if (v33)
              v34 = *(int *)((char *)v17 + v33);
            else
              v34 = 0;
          }
          v13 = v98;
          sub_21DF2E08C(v29, 10, v34);
          v44 = (unsigned __int16 *)((char *)v17 - *v17);
          if (*v44 < 9u)
          {
            v49 = 0;
            v47 = v96;
            v46 = v97;
            v48 = v95;
          }
          else
          {
            v45 = v44[4];
            v47 = v96;
            v46 = v97;
            v48 = v95;
            if (v45)
              v49 = *(int *)((char *)v17 + v45);
            else
              v49 = 0;
          }
          v50 = v46 - v47 + v48;
          sub_21DF2E08C(v29, 12, v49);
          v51 = v30 + 32 * v28;
          sub_21DF2E08C(v29, 14, *(_DWORD *)(v51 + 20));
          sub_21DF2E08C(v29, 16, *(_DWORD *)(v51 + 24));
          sub_21DF2FF00(v29, 18, *(unsigned __int8 *)(v51 + 28));
          v52 = sub_21DF2DC24((uint64_t)v29, v50);
          v53 = v52;
          if (v12 >= v100)
          {
            v54 = (v12 - v11) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
LABEL_93:
              abort();
            if ((v100 - v11) >> 1 > v55)
              v55 = (v100 - v11) >> 1;
            if ((unint64_t)(v100 - v11) >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
            {
              if (v56 >> 62)
LABEL_94:
                sub_21DF256A4();
              v57 = (char *)operator new(4 * v56);
            }
            else
            {
              v57 = 0;
            }
            v61 = &v57[4 * v54];
            *(_DWORD *)v61 = v53;
            v62 = v61 + 4;
            while (v12 != v11)
            {
              v63 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *((_DWORD *)v61 - 1) = v63;
              v61 -= 4;
            }
            v100 = &v57[4 * v56];
            if (v11)
              operator delete(v11);
            v11 = v61;
            v12 = v62;
          }
          else
          {
            *(_DWORD *)v12 = v52;
            v12 += 4;
          }
        }
        ++v15;
        v5 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v6 = a1 + v5;
        v7 = *(int **)(a1 + v5 + 568);
        v9 = *(unsigned __int16 *)((char *)v7 - *v7 + 4);
        v10 = *(unsigned int *)((char *)v7 + v9);
      }
      while (v15 < *(unsigned int *)((char *)v7 + v9 + v10));
    }
    else
    {
      v11 = 0;
      v13 = 0;
      v14 = 0;
      v12 = 0;
    }
    v64 = a1 + v5;
    v65 = a1 + v5 + 704;
    *(_BYTE *)(a1 + v5 + 774) = 1;
    sub_21DF2E13C(v65, v12 - v11, 4uLL);
    sub_21DF2E13C(v65, v12 - v11, 4uLL);
    v66 = v12 - v11;
    v101 = v11;
    if (v12 == v11)
      v67 = (char *)&unk_21DFA30B8;
    else
      v67 = v11;
    if (v12 != v11)
    {
      v68 = v66 >> 2;
      v69 = v67 - 4;
      do
      {
        v70 = v68 - 1;
        v71 = *(_DWORD *)&v69[4 * v68];
        sub_21DF2DF68(v65, 4uLL);
        sub_21DF2E0DC(v65, *(_DWORD *)(v64 + 736) - *(_DWORD *)(v64 + 752) + *(_DWORD *)(v64 + 744) - v71 + 4);
        v68 = v70;
      }
      while (v70);
    }
    *(_BYTE *)(v64 + 774) = 0;
    v72 = sub_21DF2E0DC(v65, (unint64_t)v66 >> 2);
    v73 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v74 = v73 + 704;
    *(_BYTE *)(v73 + 774) = 1;
    sub_21DF2E13C(v73 + 704, v14 - v13, 4uLL);
    sub_21DF2E13C(v73 + 704, v14 - v13, 4uLL);
    v75 = v14 - v13;
    if (v14 == v13)
      v76 = (char *)&unk_21DFA30B9;
    else
      v76 = v13;
    if (v14 != v13)
    {
      v77 = v75 >> 2;
      v78 = v76 - 4;
      do
      {
        v79 = v77 - 1;
        v80 = *(_DWORD *)&v78[4 * v77];
        sub_21DF2DF68(v74, 4uLL);
        sub_21DF2E0DC(v74, *(_DWORD *)(v73 + 736) - *(_DWORD *)(v73 + 752) + *(_DWORD *)(v73 + 744) - v80 + 4);
        v77 = v79;
      }
      while (v79);
    }
    *(_BYTE *)(v73 + 774) = 0;
    v81 = sub_21DF2E0DC(v74, (unint64_t)v75 >> 2);
    v82 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *(_BYTE *)(v82 + 774) = 1;
    v83 = *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744);
    sub_21DF2E08C((uint64_t *)(v82 + 704), 4, *(_DWORD *)(a1 + 3088));
    if (v72)
    {
      sub_21DF2DF68(v82 + 704, 4uLL);
      sub_21DF2E08C((uint64_t *)(v82 + 704), 6, *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744) - v72 + 4);
    }
    if (v81)
    {
      sub_21DF2DF68(v82 + 704, 4uLL);
      sub_21DF2E08C((uint64_t *)(v82 + 704), 8, *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744) - v81 + 4);
    }
    v84 = sub_21DF2DC24(v82 + 704, v83);
    if (v13)
      operator delete(v13);
    if (v101)
      operator delete(v101);
    v85 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v86 = v85 + 704;
    *(_BYTE *)(v85 + 774) = 1;
    v87 = *(_DWORD *)(v85 + 736) - *(_DWORD *)(v85 + 752) + *(_DWORD *)(v85 + 744);
    sub_21DF34D10((uint64_t *)(v85 + 704), v93);
    sub_21DF402C8((uint64_t *)(v85 + 704), v94);
    if (v84)
    {
      sub_21DF2DF68(v85 + 704, 4uLL);
      sub_21DF2E08C((uint64_t *)(v85 + 704), 12, *(_DWORD *)(v85 + 736) - *(_DWORD *)(v85 + 752) + *(_DWORD *)(v85 + 744) - v84 + 4);
    }
    v88 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 704;
    v89 = sub_21DF2DC24(v86, v87);
    sub_21DF2ED04(v88, v89);
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344)
                                                                                            + 440))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344), a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 896, *(unsigned __int8 *)(a1 + 3101), *(unsigned __int8 *)(a1 + 3102), *(unsigned __int8 *)(a1 + 3156), *(unsigned __int8 *)(a1 + 3157), *(unsigned __int8 *)(a1 + 3158), *(unsigned __int8 *)(a1 + 3159));
    v90 = *(int **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 560);
    v91 = (unsigned int *)((char *)v90 + *(unsigned __int16 *)((char *)v90 - *v90 + 4));
    v92 = (unsigned int *)((char *)v91
                         + *v91
                         + *(unsigned __int16 *)((char *)v91 + *v91 - *(unsigned int *)((char *)v91 + *v91) + 8));
    return *(unsigned int *)((char *)v92 + *v92) < 0x21;
  }
  return result;
}

uint64_t sub_21DF8B70C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F5320;
  v1[568] = &off_24E1F5518;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3320);
  return sub_21DF2E650((uint64_t)(v1 + 568));
}

void sub_21DF8B794(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F5320;
  v1[568] = &off_24E1F5518;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3320);
  sub_21DF2E650((uint64_t)(v1 + 568));
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF8B834(_QWORD *a1, llvm::AGX::CompileRequest *a2)
{
  return sub_21DF8AA5C((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

void sub_21DF8B844(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF8AB30((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

BOOL sub_21DF8B854(_QWORD *a1)
{
  return sub_21DF8AF34((uint64_t)a1 + *(_QWORD *)(*a1 - 96));
}

uint64_t sub_21DF8B864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_21DF8B8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  int Key;
  BOOL v10;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_21DF58CF4(a1);
  if (*(_BYTE *)(a1 + 3146))
  {
    v14 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 192);
    v15 = v14;
    llvm::StructType::get();
    v2 = llvm::PointerType::get();
    v12 = "agc.view_mappings_pointer_global";
    v13 = 259;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 792);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
    *(_QWORD *)(a1 + 3264) = sub_21DF66EC0((uint64_t *)a1, v2, (uint64_t)&v12, v4, *(_DWORD *)(a1 + 3148));
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1675))
    return 1;
  sub_21DF35B3C();
  v5 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 320);
  v6 = v5 + 24;
  v7 = *(_QWORD *)(v5 + 32);
  if (v7 == v5 + 24)
    return 1;
  while (1)
  {
    v8 = v7 ? (llvm::Value *)(v7 - 56) : 0;
    v7 = *(_QWORD *)(v7 + 8);
    llvm::Value::getName(v8);
    Key = llvm::StringMapImpl::FindKey();
    v10 = Key == -1 || Key == (unint64_t)dword_2553B3CE8;
    if (!v10 && *(_DWORD *)(*(_QWORD *)(qword_2553B3CE0 + 8 * Key) + 8) == 3 && *((_QWORD *)v8 + 1))
      break;
    if (v7 == v6)
      return 1;
  }
  std::string::append((std::string *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 408), "Texture writes not supported in vertex shaders");
  return 0;
}

uint64_t sub_21DF8BAB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  llvm::GEPOperator *v39;
  uint64_t v40;
  unint64_t SourceElementType;
  llvm::Type *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v66;
  uint64_t v67;
  llvm::Type *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t *v87;
  int v88;
  const char *v89;
  llvm::Constant *v91;
  llvm::Constant *v92;
  BOOL v93;
  uint64_t isNullValue;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  BOOL v129;
  char v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  llvm::Constant **v134;
  llvm::Constant **v135;
  llvm::Type *v136;
  uint64_t v137;
  void *Name;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  llvm *v177;
  char *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  char *v182;
  uint64_t v184;
  const char *v186;
  void *v187;
  uint64_t v190;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  _QWORD *v195;
  uint64_t v196;
  char v197;
  llvm::DataLayout *v198;
  llvm::Type *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  void *__p;
  uint64_t v205;
  uint64_t v206;
  __int16 v207;
  llvm *v208[2];
  unsigned int v209;
  _BYTE v210[40];
  void *v211;
  uint64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  char v215;
  uint64_t v216;
  int v217;
  void **p_p;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  _BYTE v222[64];
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  _BYTE v226[64];
  uint64_t v227;
  uint64_t v228;

  v197 = a3;
  v228 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    return 1;
  v9 = a6;
  v10 = a5;
  v11 = (_QWORD *)a1;
  if (!*(_QWORD *)(v8 + 8))
  {
    v12 = *(_QWORD *)(v8 + 24);
    if (*(_BYTE *)(v12 + 16) != 77)
      v12 = a2;
    v8 = *(_QWORD *)(v12 + 8);
    if (!v8)
      return 1;
  }
  v198 = (llvm::DataLayout *)(a1 + 168);
  v187 = (void *)(MEMORY[0x24BED83D8] + 16);
  v13 = 1;
  v195 = (_QWORD *)a1;
  while (1)
  {
    v14 = *(_QWORD *)(v8 + 24);
    if (!v14 || *(_BYTE *)(v14 + 16) != 62)
      break;
    v15 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32);
    if (v15 && *(_BYTE *)(v15 + 16) == 67)
      v15 = *(_QWORD *)(v15 - 32);
    v203 = 1;
    v202 = 0;
    v16 = sub_21DF8E8A4(v15, &v203, &v202);
    v23 = 0;
    if (v16)
    {
      if (*(_BYTE *)(v16 + 16) == 84)
      {
        v23 = *(_QWORD *)(v16 - 32);
        if (!v23 || *(_BYTE *)(v23 + 16) || *(_QWORD *)(v23 + 24) != *(_QWORD *)(v16 + 72))
          v23 = 0;
      }
    }
    v24 = v11[564];
    if (v23 == v24)
      v25 = 566;
    else
      v25 = 567;
    v26 = v202;
    v27 = v202 != 0;
    if (!v23 || (v28 = v11[v25], v23 != v24) && v23 != v11[565])
    {
      v186 = "Cannot DMA promote %s : GEP not indexed with instance_id/vertex_id";
      goto LABEL_315;
    }
    if (v202 && v202 != v28)
    {
      v186 = "Cannot DMA promote %s: GEP indexed with index type not matching base type";
      goto LABEL_315;
    }
    if ((v13 & 1) != 0)
    {
      v29 = v23 == v24;
      if (v23 == v24)
        v30 = 1;
      else
        v30 = 2;
      *a4 = v30;
      *(_DWORD *)(v10 + 24) = v203;
      *(_BYTE *)(v10 + 28) = v27;
      if (v29 && v26)
      {
        v186 = "Cannot DMA promote %s: GEP indexed with vertex_id and divisor with bias";
LABEL_315:
        sub_21DF28954(v16, v186, v17, v18, v19, v20, v21, v22, v197);
        return 0;
      }
      goto LABEL_41;
    }
    if (*a4 == 2)
    {
      v24 = v11[565];
    }
    else if (*a4 != 1)
    {
      goto LABEL_39;
    }
    if (v23 != v24)
      goto LABEL_312;
LABEL_39:
    if (v203 != *(_DWORD *)(v10 + 24) || *(unsigned __int8 *)(v10 + 28) != v27)
    {
LABEL_312:
      v186 = "Cannot DMA promote %s : GEP indexed inconsistently";
      goto LABEL_315;
    }
LABEL_41:
    v209 = 128;
    v208[0] = (llvm *)MEMORY[0x2207A6DD8](0x4000, 8);
    sub_21DF8EB04((uint64_t)v208);
    v210[0] = 0;
    v210[24] = 0;
    v224 = (uint64_t *)v226;
    v225 = 0x800000000;
    LOBYTE(v227) = 0;
    HIDWORD(v227) = 0;
    sub_21DF71FA8((uint64_t)&v224, (char *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 64), (char *)v14);
    v31 = v225;
    v190 = v8;
    v32 = 1;
    if ((_DWORD)v225)
    {
      v33 = v224;
      do
      {
        v34 = *v33++;
        v32 &= *(_BYTE *)(v34 + 16) == 16;
        --v31;
      }
      while (v31);
    }
    LOBYTE(v227) = v32;
    v35 = sub_21DF8EBB4((uint64_t)v208, v14);
    v36 = sub_21DF226D8(v35, (uint64_t)&v224);
    *(_QWORD *)(v36 + 80) = v227;
    v37 = (uint64_t *)operator new(8uLL);
    *v37 = v14;
    v38 = v37 + 1;
    v201 = v37 + 1;
    v192 = v14;
    while (1)
    {
      v193 = v38;
      v194 = v37;
      if (v37 == v38)
        break;
      v40 = *--v38;
      v39 = (llvm::GEPOperator *)v40;
      v220 = 0;
      SourceElementType = sub_21DF8DE9C((uint64_t)v208[0], v209, v40, &v220);
      if ((_DWORD)SourceElementType)
        v49 = (char *)v220;
      else
        v49 = (char *)v208[0] + 128 * (unint64_t)v209;
      v220 = v222;
      v221 = 0x800000000;
      v50 = *((_DWORD *)v49 + 12);
      if (v50)
      {
        SourceElementType = sub_21DF226D8((uint64_t)&v220, (uint64_t)(v49 + 40));
        v50 = v221;
      }
      v223 = *((_QWORD *)v49 + 15);
      v196 = (uint64_t)v39;
      if (v39 != (llvm::GEPOperator *)v14 || v50)
      {
        SourceElementType = llvm::GEPOperator::getSourceElementType(v39);
        v52 = *((_DWORD *)v39 + 5);
        v53 = v52 & 0x7FFFFFF;
        if ((v52 & 0x40000000) != 0)
          v54 = (_DWORD *)*((_QWORD *)v39 - 1);
        else
          v54 = (_DWORD *)((char *)v39 - 32 * v53);
        v55 = v54 + 8;
        v56 = SourceElementType | 4;
        v57 = &v54[8 * v53];
        if (v54 + 8 == v57)
        {
          LODWORD(v200) = 0;
        }
        else
        {
          do
          {
            v58 = v56;
            SourceElementType = v56 & 0xFFFFFFFFFFFFFFF8;
            if ((v56 & 4) == 0 || !SourceElementType)
              SourceElementType = llvm::StructType::getTypeAtIndex();
            v59 = *(unsigned __int8 *)(SourceElementType + 8);
            if (SourceElementType && v59 == 17 || SourceElementType && (v59 & 0xFE) == 0x12)
            {
              v56 = *(_QWORD *)(SourceElementType + 24) | 4;
            }
            else if (v59 == 16)
            {
              v56 = SourceElementType & 0xFFFFFFFFFFFFFFFBLL;
            }
            else
            {
              v56 = 0;
            }
            v55 += 8;
          }
          while (v55 != v57);
          v200 = (v58 >> 2) & 1;
        }
        v51 = v196;
      }
      else
      {
        LODWORD(v200) = 0;
        v51 = v14;
      }
      v60 = *(_QWORD *)(v51 + 8);
      if (!v60)
        goto LABEL_258;
      while (1)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v60 + 24) + 16) <= 0x1Bu)
          v61 = 0;
        else
          v61 = *(_QWORD *)(v60 + 24);
        v62 = *(unsigned __int8 *)(v61 + 16);
        if (v62 == 60 && v61 != 0)
        {
          SourceElementType = sub_21DF8EC80(v9, v61, (uint64_t)&v220);
          goto LABEL_257;
        }
        if (v62 == 62 && v61 != 0)
        {
          v128 = *(unsigned __int8 **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
          if (v128)
            v129 = v128[16] > 0x14u;
          else
            v129 = 1;
          if (!v129 && llvm::Constant::isNullValue((llvm::Constant *)v128))
          {
            v211 = v213;
            v212 = 0x800000000;
            if ((_DWORD)v221)
              sub_21DF226D8((uint64_t)&v211, (uint64_t)&v220);
            v219 = v223;
            sub_21DF71FA8((uint64_t)&v211, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
            v130 = v223;
            if ((_BYTE)v223)
            {
              v131 = v212;
              if ((_DWORD)v212)
              {
                v130 = 1;
                v132 = (uint64_t *)v211;
                do
                {
                  v133 = *v132++;
                  v130 &= *(_BYTE *)(v133 + 16) == 16;
                  --v131;
                }
                while (v131);
              }
              else
              {
                v130 = 1;
              }
            }
            LOBYTE(v219) = v130;
            v153 = sub_21DF8EBB4((uint64_t)v208, v61);
            v154 = sub_21DF226D8(v153, (uint64_t)&v211);
            *(_QWORD *)(v154 + 80) = v219;
            if (v38 < v201)
              goto LABEL_239;
            v155 = v38 - v37;
            v156 = v155 + 1;
            if (!((unint64_t)(v155 + 1) >> 61))
            {
              if (((char *)v201 - (char *)v37) >> 2 > v156)
                v156 = ((char *)v201 - (char *)v37) >> 2;
              if ((unint64_t)((char *)v201 - (char *)v37) >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v156;
              if (v149)
                v149 = (unint64_t)sub_21DF527B8(v149);
              else
                v42 = 0;
              v150 = (uint64_t *)(v149 + 8 * v155);
              *v150 = v61;
              v151 = v150 + 1;
              if (v38 != v37)
              {
                do
                {
                  v157 = *--v38;
                  *--v150 = v157;
                }
                while (v38 != v37);
                goto LABEL_251;
              }
              goto LABEL_252;
            }
LABEL_317:
            abort();
          }
          if ((_DWORD)v200)
          {
            v134 = (llvm::Constant **)*((_QWORD *)v220 + v221 - 1);
            v135 = *(llvm::Constant ***)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
            if (v135 == (llvm::Constant **)llvm::Constant::getNullValue(*v135, v42))
              goto LABEL_217;
            if (v134 == (llvm::Constant **)llvm::Constant::getNullValue(*v134, v136))
            {
              v134 = v135;
LABEL_217:
              v211 = v213;
              v212 = 0x800000000;
              v140 = v221;
              if ((_DWORD)v221)
              {
                sub_21DF226D8((uint64_t)&v211, (uint64_t)&v220);
                v140 = v212;
              }
              v219 = v223;
              LODWORD(v212) = v140 - 1;
              sub_21DF19CD0((uint64_t)&v211, (uint64_t)v134);
              sub_21DF71FA8((uint64_t)&v211, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
              v141 = v212;
              if ((_DWORD)v212)
              {
                v142 = 1;
                v143 = (uint64_t *)v211;
                do
                {
                  v144 = *v143++;
                  v142 &= *(_BYTE *)(v144 + 16) == 16;
                  --v141;
                }
                while (v141);
              }
              else
              {
                v142 = 1;
              }
              LOBYTE(v219) = v142;
              v145 = sub_21DF8EBB4((uint64_t)v208, v61);
              v146 = sub_21DF226D8(v145, (uint64_t)&v211);
              *(_QWORD *)(v146 + 80) = v219;
              if (v38 < v201)
              {
LABEL_239:
                *v38++ = v61;
              }
              else
              {
                v147 = v38 - v37;
                v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 61)
                  goto LABEL_317;
                if (((char *)v201 - (char *)v37) >> 2 > v148)
                  v148 = ((char *)v201 - (char *)v37) >> 2;
                if ((unint64_t)((char *)v201 - (char *)v37) >= 0x7FFFFFFFFFFFFFF8)
                  v149 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v149 = v148;
                if (v149)
                  v149 = (unint64_t)sub_21DF527B8(v149);
                else
                  v42 = 0;
                v150 = (uint64_t *)(v149 + 8 * v147);
                *v150 = v61;
                v151 = v150 + 1;
                if (v38 != v37)
                {
                  do
                  {
                    v152 = *--v38;
                    *--v150 = v152;
                  }
                  while (v38 != v37);
LABEL_251:
                  v38 = v37;
                }
LABEL_252:
                v37 = v150;
                v201 = (uint64_t *)(v149 + 8 * (_QWORD)v42);
                if (v38)
                  operator delete(v38);
                v38 = v151;
              }
              SourceElementType = (unint64_t)v211;
              if (v211 != v213)
                free(v211);
              goto LABEL_257;
            }
            if (*v135 == *v134)
            {
              sub_21DF3F430((uint64_t)v195 + *(_QWORD *)(*v195 - 24) + 8, v61);
              v137 = (uint64_t)v195 + *(_QWORD *)(*v195 - 24) + 8;
              Name = (void *)llvm::Value::getName((llvm::Value *)v61);
              LOWORD(v214) = 773;
              v211 = Name;
              v212 = v139;
              v213[0] = ".sum";
              v134 = (llvm::Constant **)sub_21DF19FAC(v137, (uint64_t)v135, (uint64_t)v134, (uint64_t)&v211);
              goto LABEL_217;
            }
          }
          goto LABEL_270;
        }
        if (v62 != 77 || v61 == 0)
        {
          sub_21DF28954(SourceElementType, "Cannot DMA promote %s : GEP not used in a load", v43, v44, v45, v46, v47, v48, v197);
          goto LABEL_270;
        }
        if (*(_BYTE *)(*(_QWORD *)v61 + 8) != 15)
        {
          sub_21DF28954(SourceElementType, "Cannot DMA promote %s : pointer bitcast to non-pointer type", v43, v44, v45, v46, v47, v48, v197);
          goto LABEL_270;
        }
        v66 = *(_QWORD *)(v61 + 8);
        if (v66)
          break;
LABEL_257:
        v60 = *(_QWORD *)(v60 + 8);
        if (!v60)
        {
LABEL_258:
          v211 = 0;
          if (sub_21DF8DE9C((uint64_t)v208[0], v209, v196, &v211))
            v158 = v211;
          else
            v158 = (_QWORD *)((char *)v208[0] + 128 * (unint64_t)v209);
          if ((_QWORD *)v208[0] + 16 * (unint64_t)v209 != v158)
            sub_21DF8EE98((int32x2_t *)v208, v158);
          v159 = 1;
          goto LABEL_271;
        }
      }
      v67 = **(_QWORD **)(**(_QWORD **)(v61 - 32) + 16);
      v68 = **(llvm::Type ***)(*(_QWORD *)v61 + 16);
      v199 = v68;
      while (1)
      {
        v69 = *(_QWORD *)(v66 + 24);
        v70 = *(unsigned __int8 *)(v69 + 16);
        if (!v69 || v70 != 60)
          break;
        if ((*(_DWORD *)(v67 + 8) & 0xFE) == 0x12
          && (v71 = *(_QWORD *)v69, (*(_DWORD *)(*(_QWORD *)v69 + 8) & 0xFE) == 0x12)
          && **(_QWORD **)(v67 + 16) == **(_QWORD **)(v71 + 16)
          && (v72 = *(unsigned int *)(v71 + 32), v73 = *(unsigned int *)(v67 + 32),
                                                 v72 > v73))
        {
          v74 = *(_QWORD *)(v69 + 8);
          if (v74)
          {
            while (1)
            {
              v75 = *(_QWORD *)(v74 + 24);
              v76 = *(unsigned __int8 *)(v75 + 16);
              if (v75 && v76 == 91)
              {
                v77 = *(unsigned int *)(*(_QWORD *)v75 + 32);
                v68 = v199;
                v78 = 0;
                if ((_DWORD)v77)
                {
                  v79 = *(unsigned int **)(v75 + 64);
                  v80 = -1;
                  while (1)
                  {
                    v82 = *v79++;
                    v81 = v82;
                    if ((v82 & 0x80000000) == 0 && v81 < v72)
                    {
                      SourceElementType = *(_QWORD *)(v75 - 64);
                      if (SourceElementType == v69)
                        goto LABEL_114;
                    }
                    if (v81 >= v72 && v81 < 2 * (int)v72)
                    {
                      SourceElementType = *(_QWORD *)(v75 - 32);
                      if (SourceElementType == v69)
                        break;
                    }
LABEL_118:
                    if (!--v77)
                      goto LABEL_129;
                  }
                  v81 = (v81 - v72);
LABEL_114:
                  if (v80 >= v81)
                    v80 = v81;
                  if (v78 <= v81)
                    v78 = v81;
                  goto LABEL_118;
                }
                v80 = -1;
LABEL_129:
                v84 = v78 + 1;
              }
              else
              {
                v80 = 0;
                v68 = v199;
                if (!v75)
                  goto LABEL_127;
                v84 = v72;
                if (v76 == 89)
                {
                  v85 = *(_QWORD *)(v75 - 32);
                  if (v85)
                    v86 = *(_BYTE *)(v85 + 16) == 16;
                  else
                    v86 = 0;
                  if (!v86)
                  {
                    v80 = 0;
LABEL_127:
                    v84 = v72;
                    goto LABEL_133;
                  }
                  v87 = (unint64_t *)(v85 + 24);
                  if (*(_DWORD *)(v85 + 32) >= 0x41u)
                    v87 = (unint64_t *)*v87;
                  v80 = *v87;
                  v84 = v80 + 1;
                }
              }
LABEL_133:
              if (v80 >= v84 || v84 > v73)
                goto LABEL_165;
              v74 = *(_QWORD *)(v74 + 8);
              v88 = 1;
              v89 = "DMA promotion %s : truncated extend bitcast pattern";
              if (!v74)
                goto LABEL_170;
            }
          }
          v88 = 1;
          v89 = "DMA promotion %s : truncated extend bitcast pattern";
        }
        else
        {
LABEL_165:
          if ((_BYTE)v223
            && (SourceElementType = sub_21DF8ED9C((uint64_t)v68, v67, (uint64_t)v198, v200), (SourceElementType & 1) != 0))
          {
            v88 = 2;
            v89 = "DMA promotion %s : reinterpreted array bitcast pattern";
          }
          else
          {
            v211 = (void *)sub_21DF1B2C4(v198, v68);
            v212 = v110;
            v111 = llvm::TypeSize::operator unsigned long long();
            __p = (void *)sub_21DF1B2C4(v198, (llvm::Type *)v67);
            v205 = v112;
            SourceElementType = llvm::TypeSize::operator unsigned long long();
            if (v111 > SourceElementType)
            {
              sub_21DF28954(SourceElementType, "DMA promotion %s : unrecognized GEP bitcast pattern: ", v43, v44, v45, v46, v47, v48, v197);
              __p = 0;
              v205 = 0;
              v206 = 0;
              LODWORD(v212) = 0;
              v215 = 0;
              v216 = 0;
              v217 = 1;
              v213[1] = 0;
              v214 = 0;
              v213[0] = 0;
              v211 = v187;
              p_p = &__p;
              sub_21DF2C310((llvm::raw_ostream *)&v211);
              v161 = llvm::Value::print((llvm::Value *)v61, (llvm::raw_ostream *)&v211);
              LOBYTE(v168) = (_BYTE)p_p;
              v9 = a6;
              if (*((char *)p_p + 23) < 0)
                v168 = *p_p;
              v14 = v192;
              sub_21DF28954(v161, "bitcast: %s", v162, v163, v164, v165, v166, v167, (char)v168);
              if (SHIBYTE(v206) < 0)
              {
                *(_BYTE *)__p = 0;
                v205 = 0;
              }
              else
              {
                LOBYTE(__p) = 0;
                HIBYTE(v206) = 0;
              }
              v169 = llvm::Value::print((llvm::Value *)v69, (llvm::raw_ostream *)&v211);
              LOBYTE(v176) = (_BYTE)p_p;
              if (*((char *)p_p + 23) < 0)
                v176 = *p_p;
              sub_21DF28954(v169, "load:    %s", v170, v171, v172, v173, v174, v175, (char)v176);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v211);
              if (SHIBYTE(v206) < 0)
                operator delete(__p);
              v159 = 0;
              goto LABEL_272;
            }
            v88 = 3;
            v89 = "DMA promotion %s : truncate to smaller sized type pattern";
            v9 = a6;
          }
        }
LABEL_170:
        sub_21DF28954(SourceElementType, v89, v43, v44, v45, v46, v47, v48, v197);
        if (HIDWORD(v223))
        {
          sub_21DF28954(v113, "DMA promotion %s : can't combine bitcast types", v114, v115, v116, v117, v118, v119, v197);
          goto LABEL_270;
        }
        v211 = v213;
        v212 = 0x800000000;
        if ((_DWORD)v221)
          sub_21DF226D8((uint64_t)&v211, (uint64_t)&v220);
        v219 = __PAIR64__(v88, v223);
        sub_21DF8EC80(v9, v69, (uint64_t)&v211);
        SourceElementType = (unint64_t)v211;
        if (v211 != v213)
          free(v211);
        v68 = v199;
LABEL_196:
        v66 = *(_QWORD *)(v66 + 8);
        if (!v66)
          goto LABEL_257;
      }
      if (v70 != 62 || v69 == 0)
      {
        v160 = "Cannot DMA promote %s : unknown GEP bitcast use";
        goto LABEL_269;
      }
      if (HIDWORD(v223))
      {
        v160 = "DMA promotion %s : GEP-of-bitcast can't combine bitcast types";
        goto LABEL_269;
      }
      if (!(_BYTE)v223
        || (SourceElementType = sub_21DF8ED9C((uint64_t)v68, v67, (uint64_t)v198, v200), !(_DWORD)SourceElementType)
        || *((_BYTE *)v68 + 8) != 16)
      {
        v160 = "Cannot DMA promote %s : unknown GEP-of-bitcast use";
LABEL_269:
        sub_21DF28954(SourceElementType, v160, v43, v44, v45, v46, v47, v48, v197);
        goto LABEL_270;
      }
      if ((*(_DWORD *)(v69 + 20) & 0x7FFFFFF) != 4)
      {
        v160 = "Cannot DMA promote %s : GEP-of-bitcast needs to index to a scalar";
        goto LABEL_269;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(v69 - 96) + 16) >= 0x15u)
        v91 = 0;
      else
        v91 = *(llvm::Constant **)(v69 - 96);
      if (*(unsigned __int8 *)(*(_QWORD *)(v69 - 64) + 16) >= 0x15u)
        v92 = 0;
      else
        v92 = *(llvm::Constant **)(v69 - 64);
      if (v91)
        v93 = v92 == 0;
      else
        v93 = 1;
      if (!v93)
      {
        if (llvm::Constant::isNullValue(v91))
        {
          isNullValue = llvm::Constant::isNullValue(v92);
          if ((_DWORD)isNullValue)
          {
            v101 = v9;
            v102 = (_QWORD *)*((_QWORD *)v220 + v221 - 1);
            v103 = *(_QWORD **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF) + 96);
            if (*v103 != *v102)
            {
              v159 = 0;
              v9 = v101;
              goto LABEL_271;
            }
            sub_21DF28954(isNullValue, "DMA promotion %s : reinterpreted array bitcast pattern (through struct-array GEP)", v95, v96, v97, v98, v99, v100, v197);
            v211 = v213;
            v212 = 0x800000000;
            if ((_DWORD)v221)
              sub_21DF226D8((uint64_t)&v211, (uint64_t)&v220);
            v219 = v223;
            v104 = (uint64_t)v195 + *(_QWORD *)(*v195 - 24) + 8;
            v207 = 257;
            v105 = sub_21DF19FAC(v104, (uint64_t)v102, (uint64_t)v103, (uint64_t)&__p);
            v106 = v212;
            *((_QWORD *)v211 + v212 - 1) = v105;
            v107 = 1;
            if ((_DWORD)v106)
            {
              v108 = (uint64_t *)v211;
              v9 = v101;
              do
              {
                v109 = *v108++;
                v107 &= *(_BYTE *)(v109 + 16) == 16;
                --v106;
              }
              while (v106);
            }
            else
            {
              v9 = v101;
            }
            LOBYTE(v219) = v107;
            HIDWORD(v219) = 2;
            v120 = sub_21DF8EBB4((uint64_t)v208, v69);
            v121 = sub_21DF226D8(v120, (uint64_t)&v211);
            *(_QWORD *)(v121 + 80) = v219;
            if (v38 >= v201)
            {
              v122 = v38 - v37;
              v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 61)
                goto LABEL_317;
              if (((char *)v201 - (char *)v37) >> 2 > v123)
                v123 = ((char *)v201 - (char *)v37) >> 2;
              if ((unint64_t)((char *)v201 - (char *)v37) >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
                v124 = (unint64_t)sub_21DF527B8(v124);
              else
                v42 = 0;
              v125 = (uint64_t *)(v124 + 8 * v122);
              *v125 = v69;
              v126 = v125 + 1;
              if (v38 != v37)
              {
                do
                {
                  v127 = *--v38;
                  *--v125 = v127;
                }
                while (v38 != v37);
                v38 = v37;
              }
              v37 = v125;
              v201 = (uint64_t *)(v124 + 8 * (_QWORD)v42);
              if (v38)
                operator delete(v38);
              v38 = v126;
            }
            else
            {
              *v38++ = v69;
            }
            v68 = v199;
            SourceElementType = (unint64_t)v211;
            if (v211 != v213)
              free(v211);
            goto LABEL_196;
          }
        }
      }
LABEL_270:
      v159 = 0;
LABEL_271:
      v14 = v192;
LABEL_272:
      if (v220 != v222)
        free(v220);
      if ((v159 & 1) == 0)
        goto LABEL_290;
    }
    v37 = v38;
LABEL_290:
    if (v224 != (uint64_t *)v226)
      free(v224);
    sub_21DF5B48C((uint64_t)v210);
    v177 = v208[0];
    if (v209)
    {
      v178 = (char *)v208[0] + 56;
      v179 = (unint64_t)v209 << 7;
      v180 = v193;
      do
      {
        v181 = *((_QWORD *)v178 - 4);
        if ((v181 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v182 = (char *)*((_QWORD *)v178 - 2);
          if (v178 != v182)
          {
            free(v182);
            v181 = *((_QWORD *)v178 - 4);
          }
        }
        if (v181 != -8192 && v181 != -4096 && v181 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v178 - 48));
        v178 += 128;
        v179 -= 128;
      }
      while (v179);
      v177 = v208[0];
      v184 = v209;
    }
    else
    {
      v184 = 0;
      v180 = v193;
    }
    a1 = llvm::deallocate_buffer(v177, (void *)(v184 << 7));
    if (v37)
      operator delete(v37);
    if (v194 != v180)
      return 0;
    v13 = 0;
    v8 = *(_QWORD *)(v190 + 8);
    v10 = a5;
    v11 = v195;
    if (!v8)
      return 1;
  }
  sub_21DF28954(a1, "Cannot DMA promote %s : found a non-GEP use", a3, (uint64_t)a4, a5, a6, a7, a8, v197);
  return 0;
}

BOOL sub_21DF8CAE0(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  _QWORD **v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  const char *v52;
  char v53;
  const char *v54;
  llvm::Type *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  unint64_t i;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::GetElementPtrInst *v95;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  _QWORD v101[4];
  __int16 v102;
  _QWORD v103[4];
  __int16 v104;
  char *v105;
  char v106;
  _QWORD v107[4];
  __int16 v108;
  uint64_t v109;

  v11 = a1;
  v109 = *MEMORY[0x24BDAC8D0];
  v12 = a2[1];
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
    while (1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(v12 + 24);
      if (!v17 || *(_BYTE *)(v17 + 16) != 62)
        return v16;
      v18 = *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 16) == 67)
        {
          v18 = *(_QWORD *)(v18 - 32);
          if (!v18)
            return 0;
        }
      }
      v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
      {
        if (v19 != 5)
        {
          LODWORD(v20) = 0;
LABEL_34:
          if (v19 != 5)
            return 0;
          v21 = *(unsigned __int16 *)(v18 + 18);
LABEL_37:
          if (v21 == 17)
            goto LABEL_41;
          if (v21 != 25)
            return 0;
          goto LABEL_39;
        }
        v21 = *(unsigned __int16 *)(v18 + 18);
        if (v21 != 13)
        {
          LODWORD(v20) = 0;
          goto LABEL_37;
        }
      }
      else if (v19 != 41)
      {
        LODWORD(v20) = 0;
        goto LABEL_31;
      }
      v22 = *(_DWORD *)(v18 + 20);
      if ((v22 & 0x40000000) != 0)
        v23 = *(_QWORD *)(v18 - 8);
      else
        v23 = v18 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(_QWORD *)(v23 + 32);
      if (v24)
        v25 = *(_BYTE *)(v24 + 16) == 16;
      else
        v25 = 0;
      if (!v25)
        return 0;
      v26 = *(_DWORD *)(v24 + 32);
      if (v26 > 0x40)
      {
        v20 = **(_QWORD **)(v24 + 24);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *(_QWORD *)(v24 + 24);
        if (v20 << -(char)v26 < 0)
          return 0;
      }
      v27 = (v22 & 0x40000000) != 0 ? *(uint64_t **)(v18 - 8) : (uint64_t *)(v18 - 32 * (v22 & 0x7FFFFFF));
      v18 = *v27;
      if (!v18)
        return 0;
      v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
        goto LABEL_34;
LABEL_31:
      if (v19 != 53)
      {
        if (v19 != 45)
          return 0;
LABEL_41:
        v30 = *(_DWORD *)(v18 + 20);
        if ((v30 & 0x40000000) != 0)
          v31 = *(uint64_t **)(v18 - 8);
        else
          v31 = (uint64_t *)(v18 - 32 * (v30 & 0x7FFFFFF));
        v37 = v31[4];
        if (v37)
          v38 = *(_BYTE *)(v37 + 16) == 16;
        else
          v38 = 0;
        if (!v38)
          return 0;
        v39 = (_QWORD *)(v37 + 24);
        if (*(_DWORD *)(v37 + 32) >= 0x41u)
          v39 = (_QWORD *)*v39;
        v40 = *(_DWORD *)v39;
        if (v20 >= *(_DWORD *)v39)
          return 0;
        goto LABEL_68;
      }
LABEL_39:
      v28 = *(_DWORD *)(v18 + 20);
      if ((v28 & 0x40000000) != 0)
        v29 = *(_QWORD *)(v18 - 8);
      else
        v29 = v18 - 32 * (v28 & 0x7FFFFFF);
      v32 = *(_QWORD *)(v29 + 32);
      if (v32)
        v33 = *(_BYTE *)(v32 + 16) == 16;
      else
        v33 = 0;
      if (!v33)
        return 0;
      v34 = (_QWORD **)(v32 + 24);
      v35 = *(_DWORD *)(v32 + 32);
      v36 = v34;
      if (v35 >= 0x41)
        v36 = *v34;
      if (*v36 > 0x1FuLL)
        return 0;
      if ((v28 & 0x40000000) != 0)
        v31 = *(uint64_t **)(v18 - 8);
      else
        v31 = (uint64_t *)(v18 - 32 * (v28 & 0x7FFFFFF));
      if (v35 >= 0x41)
        v34 = (_QWORD **)*v34;
      v40 = 1 << *(_DWORD *)v34;
      if (v40 <= v20)
        return 0;
LABEL_68:
      v41 = *v31;
      if ((v15 & 1) != 0)
      {
        a1 = sub_21DF8E8A4(*v31, (int *)v103, v107);
        if (!a1
          || *(_BYTE *)(a1 + 16) != 84
          || (v42 = *(_QWORD *)(a1 - 32)) == 0
          || *(_BYTE *)(v42 + 16)
          || *(_QWORD *)(v42 + 24) != *(_QWORD *)(a1 + 72)
          || v42 != *(_QWORD *)(v11 + 4512) && v42 != *(_QWORD *)(v11 + 4520))
        {
          sub_21DF28954(a1, "Will not coerce strided access %s : GEP not indexed with instance_id/vertex_id", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
        v13 = v41;
        v14 = v40;
      }
      else
      {
        v43 = v14 == v40 && v13 == v41;
        v41 = v13;
        v40 = v14;
        if (!v43)
        {
          sub_21DF28954(a1, "Will not coerce strided access %s : GEP indexed inconsistently", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
      }
      v15 = 0;
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_85;
    }
  }
  v41 = 0;
  v40 = 0;
LABEL_85:
  v98 = v41;
  v97[1] = v97;
  v44 = **(_QWORD **)(*a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)v97 - v46;
  if (v45 >= 0x200)
    v48 = 512;
  else
    v48 = v45;
  bzero((char *)v97 - v46, v48);
  if (v40)
  {
    v49 = v47;
    v50 = v40;
    do
    {
      *v49++ = v44;
      --v50;
    }
    while (v50);
  }
  v51 = *a3;
  v52 = "agc.struct.coerced_arg";
  v100 = (_QWORD *)v11;
  v101[0] = "agc.struct.coerced_arg";
  if (v51)
  {
    v101[2] = a3;
    v102 = 771;
    v53 = 2;
  }
  else
  {
    v102 = 259;
    v53 = 3;
  }
  if (v51)
    v52 = (const char *)v101;
  v103[0] = v52;
  v103[2] = "x";
  LOBYTE(v104) = v53;
  HIBYTE(v104) = 3;
  v107[0] = v103;
  v107[2] = v40;
  v108 = 2050;
  v54 = (const char *)&v105;
  llvm::Twine::str((llvm::Twine *)v107);
  if ((v106 & 0x80000000) == 0 || (v54 = v105) != 0)
    strlen(v54);
  v55 = (llvm::Type *)llvm::StructType::create();
  *a4 = v55;
  if (v106 < 0)
  {
    operator delete(v105);
    v55 = *a4;
  }
  v56 = v100;
  v107[0] = sub_21DF1B2C4((llvm::DataLayout *)(v100 + 21), v55);
  v107[1] = v57;
  v58 = llvm::TypeSize::operator unsigned long long();
  v16 = (v58 & 3) == 0;
  if ((v58 & 3) != 0)
  {
    sub_21DF28954(v58, "Will not coerce pointer %s : type size %u not a multiple of 4", v59, v60, v61, v62, v63, v64, (char)a3);
  }
  else
  {
    v65 = llvm::PointerType::get();
    v66 = *(_QWORD *)(v56[20] + 80);
    if (v66)
      v67 = v66 - 24;
    else
      v67 = 0;
    v68 = *(_QWORD *)(v67 + 40);
    if (v68)
      v69 = v68 - 24;
    else
      v69 = 0;
    sub_21DF3F430((uint64_t)v56 + *(_QWORD *)(*v56 - 24) + 8, v69);
    v70 = (uint64_t)v56 + *(_QWORD *)(*v56 - 24) + 8;
    v108 = 257;
    v99 = (uint64_t *)sub_21DF1A79C(v70, 49, (uint64_t)a2, v65, (uint64_t)v107);
    v71 = a2[1];
    if (v71)
    {
      v97[2] = v56 + 24;
      do
      {
        v72 = *(_QWORD *)(v71 + 24);
        v71 = *(_QWORD *)(v71 + 8);
        if (v72 && *(_BYTE *)(v72 + 16) == 62)
        {
          v73 = operator new(8uLL);
          *v73 = v98;
          v74 = llvm::ConstantInt::get();
          v75 = (char *)sub_21DF527B8(2uLL);
          v77 = v76;
          *((_QWORD *)v75 + 1) = v74;
          v78 = v75 + 16;
          *(_QWORD *)v75 = *v73;
          operator delete(v73);
          v79 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
          if (v79 < 3)
          {
            v83 = v75 + 16;
          }
          else
          {
            v80 = &v75[8 * v77];
            for (i = 2; i < v79; ++i)
            {
              v82 = *(_QWORD *)(v72 - 32 * v79 + 32 * i);
              if (v78 >= v80)
              {
                v84 = (v78 - v75) >> 3;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61)
                  abort();
                if ((v80 - v75) >> 2 > v85)
                  v85 = (v80 - v75) >> 2;
                if ((unint64_t)(v80 - v75) >= 0x7FFFFFFFFFFFFFF8)
                  v86 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v86 = v85;
                if (v86)
                  v86 = (unint64_t)sub_21DF527B8(v86);
                else
                  v87 = 0;
                v88 = (char *)(v86 + 8 * v84);
                *(_QWORD *)v88 = v82;
                v83 = v88 + 8;
                while (v78 != v75)
                {
                  v89 = *((_QWORD *)v78 - 1);
                  v78 -= 8;
                  *((_QWORD *)v88 - 1) = v89;
                  v88 -= 8;
                }
                v80 = (char *)(v86 + 8 * v87);
                if (v75)
                  operator delete(v75);
                v75 = v88;
              }
              else
              {
                *(_QWORD *)v78 = v82;
                v83 = v78 + 8;
              }
              v79 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
              v78 = v83;
            }
          }
          v90 = v100;
          sub_21DF3F430((uint64_t)v90 + *(_QWORD *)(*v90 - 24) + 8, v72);
          v91 = llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v72);
          v92 = (uint64_t)v90 + *(_QWORD *)(*v90 - 24);
          if ((v91 & 1) != 0)
          {
            v104 = 257;
            v93 = *v99;
            if ((*(_DWORD *)(*v99 + 8) & 0xFE) == 0x12)
              v93 = **(_QWORD **)(v93 + 16);
            v94 = **(_QWORD **)(v93 + 16);
            if (!(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, char *, int64_t, uint64_t))(**(_QWORD **)(v92 + 80) + 48))(*(_QWORD *)(v92 + 80), v94, v99, v75, (v83 - v75) >> 3, 1))
            {
              v108 = 257;
              v95 = (llvm::GetElementPtrInst *)sub_21DF1AA2C(v94, v99, (uint64_t **)v75, (v83 - v75) >> 3);
              llvm::GetElementPtrInst::setIsInBounds(v95);
              sub_21DF1A3A4((uint64_t *)(v92 + 8), (uint64_t)v95, (uint64_t)v103);
            }
          }
          else
          {
            v108 = 257;
            sub_21DF66DE4(v92, v99, (uint64_t **)v75, (v83 - v75) >> 3, (uint64_t)v107);
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v72);
          if (v75)
            operator delete(v75);
        }
      }
      while (v71);
    }
  }
  return v16;
}

uint64_t sub_21DF8D3AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  llvm::DataLayout *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;

  v5 = (llvm::DataLayout *)(a1 + 168);
  sub_21DF1B320(a1 + 168, a2);
  v6 = llvm::TypeSize::operator unsigned long long();
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x10)
    return 0;
  if (!*((_DWORD *)a3 + 2))
    return -1;
  v7 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v7)
  {
    v8 = v7 << 7;
    for (i = *a3; (*(_QWORD *)(i + 24) | 0x1000) == 0xFFFFFFFFFFFFF000; i += 128)
    {
      v8 -= 128;
      if (!v8)
        return -1;
    }
  }
  else
  {
    i = *a3;
  }
  v11 = *a3 + (v7 << 7);
  if (v11 == i)
    return -1;
  v12 = 0;
  v10 = -1;
LABEL_12:
  v13 = *(uint64_t **)(i + 24);
  if (*(_DWORD *)(i + 48))
  {
    v14 = **(_QWORD **)(i + 40);
    if (v14 && *(_BYTE *)(v14 + 16) == 16)
    {
      v26 = *(uint64_t **)(i + 24);
      v27 = v6;
      v16 = 0;
      v18 = 1;
      v19 = a2;
      while (1)
      {
        v20 = (unsigned int *)(v14 + 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u)
          v20 = *(unsigned int **)v20;
        v21 = *v20;
        v22 = *(unsigned __int8 *)(v19 + 8);
        if (v19 && v22 == 16)
        {
          if (*(_DWORD *)(v19 + 12) <= v21)
            return 0;
          v23 = *(_QWORD *)(llvm::DataLayout::getStructLayout() + 8 * v21 + 16);
          v19 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * v21);
        }
        else
        {
          if (!v19 || v22 != 17 || *(_QWORD *)(v19 + 32) <= v21)
            return 0;
          v19 = *(_QWORD *)(v19 + 24);
          sub_21DF1B2C4(v5, (llvm::Type *)v19);
          v23 = llvm::TypeSize::operator unsigned long long() * v21;
        }
        if (!v19)
          return 0;
        v16 += v23;
        sub_21DF1B320((uint64_t)v5, v19);
        v24 = llvm::TypeSize::operator unsigned long long();
        if (v18 < *(unsigned int *)(i + 48))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(i + 40) + 8 * v18);
          if (v14)
          {
            ++v18;
            if (*(_BYTE *)(v14 + 16) == 16)
              continue;
          }
        }
        v17 = v24 + v16;
        v13 = v26;
        v6 = v27;
        goto LABEL_18;
      }
    }
  }
  v16 = 0;
  v17 = v6;
LABEL_18:
  if (*(_DWORD *)(i + 124) && *(_BYTE *)(i + 120))
  {
    sub_21DF1B320((uint64_t)v5, *v13);
    v17 = llvm::TypeSize::operator unsigned long long() + v16;
  }
  if (v16 < v10)
    v10 = v16;
  if (v12 <= v17)
    v12 = v17;
  while (1)
  {
    i += 128;
    if (i == v11)
      return v10;
    if ((*(_QWORD *)(i + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != v11)
        goto LABEL_12;
      return v10;
    }
  }
}

uint64_t sub_21DF8D64C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *((unsigned __int8 *)a2 + 32);
  if (!*((_BYTE *)a2 + 32) || (v4 = *((unsigned __int8 *)a3 + 32), !*((_BYTE *)a3 + 32)))
  {
    *(_WORD *)(result + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *((_OWORD *)a3 + 1);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v5;
    v6 = a3[4];
LABEL_8:
    *(_QWORD *)(result + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v7;
    v6 = a2[4];
    goto LABEL_8;
  }
  v8 = (uint64_t *)*a2;
  v9 = a2[1];
  if (*((_BYTE *)a2 + 33) != 1)
  {
    LOBYTE(v3) = 2;
    v8 = a2;
  }
  v10 = a3[1];
  if (*((_BYTE *)a3 + 33) == 1)
  {
    v11 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v4) = 2;
    v11 = a3;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = v9;
  *(_QWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 24) = v10;
  *(_BYTE *)(result + 32) = v3;
  *(_BYTE *)(result + 33) = v4;
  return result;
}

uint64_t sub_21DF8D6DC(_QWORD *a1, llvm::Type *this, int a3, _QWORD *a4, uint64_t a5)
{
  int v8;
  uint64_t result;
  _BOOL8 v10;
  unsigned int v11;
  llvm::Type *v12;
  llvm::Type **v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned __int8 *PointerCast;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t *v29;
  _DWORD v30[8];
  __int16 v31;
  unint64_t v32;
  _BOOL8 v33;
  __int16 v34;

  if ((*((_DWORD *)this + 2) & 0xFE) != 0x10)
    return sub_21DF8E568(a1, this, 0, a4);
  if (a3)
  {
    v8 = *((_DWORD *)this + 2);
    if (v8 == 17)
    {
      result = sub_21DF8E45C(a1, (uint64_t)this, 0, a4);
      if (result)
        return result;
    }
    else if (v8 == 16)
    {
      result = sub_21DF8E22C(a1, (uint64_t)this, 0, a4, a5);
      if (result)
        return result;
    }
  }
  v32 = sub_21DF1B2C4((llvm::DataLayout *)(a1 + 21), this);
  v33 = v10;
  v11 = llvm::TypeSize::operator unsigned long long();
  v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 192), (llvm::Type *)(v11 >> 2));
  v13 = (llvm::Type **)llvm::UndefValue::get();
  sub_21DF1B320((uint64_t)(a1 + 21), (uint64_t)this);
  v32 = (unint64_t)(v14 + 7) >> 3;
  v33 = v15 == 1;
  v16 = llvm::TypeSize::operator unsigned long long();
  v30[0] = 0;
  if (v16 >= 4)
  {
    v17 = 0;
    v18 = v16 >> 2;
    do
    {
      v19 = *(_QWORD *)(*a1 - 24);
      v20 = *(_QWORD *)(*a4 + 8 * v17);
      v21 = *(_QWORD *)((char *)a1 + v19 + 192);
      v34 = 257;
      v22 = sub_21DF1A79C((uint64_t)a1 + v19 + 8, 49, v20, v21, (uint64_t)&v32);
      v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v34 = 257;
      v13 = (llvm::Type **)sub_21DF1A244(v23, (uint64_t)v13, v22, (uint64_t)v30, 1, (uint64_t)&v32);
      v17 = v30[0] + 1;
      v30[0] = v17;
    }
    while (v17 < v18);
  }
  v24 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v34 = 257;
  PointerCast = (unsigned __int8 *)sub_21DF7A698(v24, v12, (uint64_t)&v32);
  sub_21DF385B0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), v13, (uint64_t)PointerCast, 0);
  v26 = *(_QWORD *)(*a1 - 24);
  v27 = llvm::PointerType::get();
  v31 = 257;
  if (*(_QWORD *)PointerCast != v27)
  {
    if (PointerCast[16] > 0x14u)
    {
      v34 = 257;
      PointerCast = (unsigned __int8 *)llvm::CastInst::CreatePointerCast();
      sub_21DF1A3A4((_QWORD *)((char *)a1 + v26 + 8), (uint64_t)PointerCast, (uint64_t)v30);
    }
    else
    {
      PointerCast = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t))(**(_QWORD **)((char *)a1 + v26 + 80) + 232))(*(_QWORD *)((char *)a1 + v26 + 80), PointerCast, v27);
      if (PointerCast)
        v28 = PointerCast[16] >= 0x1Cu;
      else
        v28 = 0;
      if (v28)
        sub_21DF1A3A4((_QWORD *)((char *)a1 + v26 + 8), (uint64_t)PointerCast, (uint64_t)v30);
    }
  }
  v29 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v34 = 257;
  return sub_21DF19394(v29 + 1, **(llvm::Type ***)(*(_QWORD *)PointerCast + 16), (uint64_t)PointerCast, 0, (uint64_t)&v32);
}

unint64_t sub_21DF8D9E8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 32 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

int32x2_t sub_21DF8DA5C(int32x2_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  int32x2_t result;
  _QWORD v6[4];

  v4 = (_QWORD *)a2[5];
  if (v4 != a2 + 7)
    free(v4);
  v6[1] = 0;
  v6[2] = -8192;
  v6[0] = 2;
  v6[3] = 0;
  sub_21DF569CC((llvm::ValueHandleBase *)(a2 + 1), v6);
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_21DF8DADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = sub_21DF8DE9C(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (char *)v10[5];
    if (v5 != (char *)(v10 + 7))
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_24E1FE910;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void sub_21DF8DBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  int32x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];
  uint64_t v12;
  int32x2_t *v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  _DWORD *v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[64];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v13 = v4;
  v28 = 0;
  v5 = sub_21DF8DE9C((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5)
    v7 = v28;
  else
    v7 = (_DWORD *)v6;
  v8 = v13;
  if ((_DWORD *)(*(_QWORD *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    v24 = v26;
    v25 = 0x800000000;
    if (v7[12])
    {
      sub_21DF22A7C((uint64_t)&v24, (uint64_t)(v7 + 10));
      v8 = v13;
    }
    v27 = *((_QWORD *)v7 + 15);
    sub_21DF8DA5C(v8, v7);
    v9 = (uint64_t)v13;
    v19 = a2;
    v20 = v22;
    v21 = 0x800000000;
    if ((_DWORD)v25)
    {
      sub_21DF22A7C((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    v23 = v27;
    sub_21DF5B518(&v14, a2);
    v14 = &unk_24E1FE910;
    v17 = v9;
    sub_21DF5B820((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    v28 = &unk_24E1FE910;
    v31 = v17;
    v32 = v34;
    v33 = 0x800000000;
    if ((_DWORD)v21)
      sub_21DF22A7C((uint64_t)&v32, (uint64_t)&v20);
    v35 = v23;
    v18 = 0;
    if ((sub_21DF8DE9C(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      v10 = (_QWORD *)sub_21DF8DF30(v9, (uint64_t)&v28, v18);
      sub_21DF569CC((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if ((_DWORD)v33)
        sub_21DF22A7C((uint64_t)(v10 + 5), (uint64_t)&v32);
      v10[15] = v35;
    }
    if (v32 != v34)
      free(v32);
    if (v30 != -8192 && v30 != -4096 && v30)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    if (v16 != -8192 && v16 != -4096 && v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    if (v20 != v22)
      free(v20);
    if (v24 != v26)
      free(v24);
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
}

uint64_t sub_21DF8DE9C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 7);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 7);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_21DF8DF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF8DFE0(a1, v6);
  v8 = 0;
  sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF8DFE0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((unint64_t)v8 << 7, 8);
  if (!v4)
    return sub_21DF8E17C(a1);
  sub_21DF8E17C(a1);
  v9 = (char *)(v3 << 7);
  if ((_DWORD)v3)
  {
    v10 = 0;
    do
    {
      v11 = &v10[(_QWORD)v4];
      v12 = *(_QWORD *)&v10[(_QWORD)v4 + 24];
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v13 = v18;
        sub_21DF569CC((llvm::ValueHandleBase *)(v18 + 1), (_QWORD *)v11 + 1);
        v13[4] = *((_QWORD *)v11 + 4);
        v13[5] = v13 + 7;
        v14 = (void **)(v11 + 40);
        v13[6] = 0x800000000;
        if (*((_DWORD *)v11 + 12))
          sub_21DF22A7C((uint64_t)(v13 + 5), (uint64_t)(v11 + 40));
        v13[15] = *(_QWORD *)&v10[(_QWORD)v4 + 120];
        ++*(_DWORD *)(a1 + 8);
        if (&v10[(_QWORD)v4 + 56] != *v14)
          free(*v14);
      }
      v15 = *((_QWORD *)v11 + 3);
      if (v15 != -8192 && v15 != -4096 && v15 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(_QWORD)v4 + 8]);
      v10 += 128;
    }
    while (v9 != v10);
  }
  return llvm::deallocate_buffer(v4, v9);
}

uint64_t sub_21DF8E17C(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 7));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1FE910;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 120;
      result = (uint64_t)v3 + 128;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t sub_21DF8E22C(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t StructLayout;
  unsigned int v12;
  uint64_t v13;
  llvm::Type *v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  unint64_t v26;
  const char **v27;
  const char *v28;
  unint64_t v29;
  const char *v32;
  unint64_t v33;
  const char *v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  unsigned int v40;

  v10 = llvm::UndefValue::get();
  StructLayout = llvm::DataLayout::getStructLayout();
  v40 = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    v12 = 0;
    v13 = StructLayout + 16;
    while (1)
    {
      v14 = *(llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * v12);
      v15 = *(_DWORD *)(v13 + 8 * v12);
      v36 = sub_21DF1B2C4((llvm::DataLayout *)(a1 + 21), v14);
      v37 = v16;
      v17 = llvm::TypeSize::operator unsigned long long();
      if ((v15 & 3) != 0 || (v17 & 3) != 0)
        return 0;
      v19 = a3 + (v15 >> 2);
      if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x10)
      {
        v20 = *((_DWORD *)v14 + 2);
        if (v20 == 16)
        {
          v39 = 257;
          v21 = sub_21DF8E22C(a1, v14, v19, a4, &v36);
        }
        else
        {
          if (v20 != 17)
            return 0;
          v21 = sub_21DF8E45C(a1, (uint64_t)v14, v19, a4);
        }
      }
      else
      {
        v21 = sub_21DF8E568(a1, v14, v19, a4);
      }
      if (!v21)
        return 0;
      v22 = *(_QWORD *)(*a1 - 24);
      v23 = *(unsigned __int8 *)(a5 + 32);
      if (v23 == 1)
        break;
      if (*(_BYTE *)(a5 + 32))
      {
        v28 = *(const char **)a5;
        v29 = *(_QWORD *)(a5 + 8);
        v24 = 2;
        if (*(_BYTE *)(a5 + 33) != 1)
        {
          LOBYTE(v23) = 2;
          v28 = (const char *)a5;
        }
        v32 = v28;
        v33 = v29;
        v34 = ".elem";
        LOBYTE(v35) = v23;
        HIBYTE(v35) = 3;
        v26 = v5 & 0xFFFFFFFF00000000;
        v5 = v5 & 0xFFFFFFFF00000000 | v40;
        v27 = &v32;
        goto LABEL_22;
      }
      v24 = 0;
      v35 = 256;
      v5 &= 0xFFFFFFFF00000000;
      v25 = 1;
LABEL_23:
      LOBYTE(v39) = v24;
      HIBYTE(v39) = v25;
      v10 = sub_21DF1A244((uint64_t)a1 + v22 + 8, v10, v21, (uint64_t)&v40, 1, (uint64_t)&v36);
      v12 = v40 + 1;
      v40 = v12;
      if (v12 >= *(_DWORD *)(a2 + 12))
        return v10;
    }
    v32 = ".elem";
    v35 = 259;
    v5 = v5 & 0xFFFFFFFF00000000 | v40;
    v24 = 3;
    v26 = v33;
    v27 = (const char **)".elem";
LABEL_22:
    v36 = (unint64_t)v27;
    v37 = v26;
    v25 = 8;
    v38 = v5;
    goto LABEL_23;
  }
  return v10;
}

uint64_t sub_21DF8E45C(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  llvm::Type *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  unsigned int v19;

  v8 = *(llvm::Type **)(a2 + 24);
  v17[0] = sub_21DF1B2C4((llvm::DataLayout *)(a1 + 21), v8);
  v17[1] = v9;
  v10 = llvm::TypeSize::operator unsigned long long();
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x10 || (v10 & 3) != 0)
    return 0;
  v12 = llvm::UndefValue::get();
  v19 = 0;
  if (*(_QWORD *)(a2 + 32))
  {
    v13 = v10 >> 2;
    do
    {
      v14 = sub_21DF8E568(a1, v8, a3, a4);
      v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v18 = 257;
      v12 = sub_21DF1A244(v15, v12, v14, (uint64_t)&v19, 1, (uint64_t)v17);
      a3 += v13;
      ++v19;
    }
    while (*(_QWORD *)(a2 + 32) > (unint64_t)v19);
  }
  return v12;
}

uint64_t sub_21DF8E568(_QWORD *a1, llvm::Type *this, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  int ScalarSizeInBits;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _BYTE v38[32];
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
  {
    v20 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v21 = *(_QWORD *)(*a4 + 8 * a3);
    v39 = 257;
    return sub_21DF1A79C(v20, 49, v21, (uint64_t)this, (uint64_t)v38);
  }
  v8 = **((_QWORD **)this + 2);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  v10 = *((unsigned int *)this + 8);
  if (ScalarSizeInBits == 8)
  {
    v24 = llvm::FixedVectorType::get();
    v25 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v26 = *(_QWORD *)(*a4 + 8 * a3);
    v39 = 257;
    v11 = sub_21DF1A79C(v25, 49, v26, v24, (uint64_t)v38);
    if ((_DWORD)v10 == 4)
      return v11;
    v27 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v28 = v11;
    v29 = v10;
    return sub_21DF79408(v27, v28, v29, 1);
  }
  if (ScalarSizeInBits == 16)
  {
    v30 = llvm::FixedVectorType::get();
    v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v32 = *(_QWORD *)(*a4 + 8 * a3);
    v39 = 257;
    v11 = sub_21DF1A79C(v31, 49, v32, v30, (uint64_t)v38);
    if ((v10 - 3) > 1)
      return v11;
    v33 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v34 = *(_QWORD *)(*a4 + 8 * (a3 + 1));
    v39 = 257;
    v35 = sub_21DF1A79C(v33, 49, v34, v30, (uint64_t)v38);
    v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v40 = llvm::ConstantInt::get();
    v41 = llvm::ConstantInt::get();
    v42 = llvm::ConstantInt::get();
    v43 = llvm::ConstantInt::get();
    v37 = llvm::ConstantVector::get();
    v39 = 257;
    v11 = sub_21DF19EE8((uint64_t)(v36 + 8), v11, v35, v37, (uint64_t)v38);
    if ((_DWORD)v10 != 3)
      return v11;
    v27 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v28 = v11;
    v29 = 3;
    return sub_21DF79408(v27, v28, v29, 1);
  }
  if (ScalarSizeInBits != 32)
    return 0;
  v11 = llvm::UndefValue::get();
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = a3;
    do
    {
      v14 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
      v15 = *(_QWORD *)(*a4 + 8 * (v13 + v12));
      v39 = 257;
      v16 = sub_21DF1A79C(v14, 49, v15, v8, (uint64_t)v38);
      v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v39 = 257;
      v18 = (uint64_t)(v17 + 8);
      v19 = llvm::ConstantInt::get();
      v11 = sub_21DF7980C(v18, v11, v16, v19, (uint64_t)v38);
      ++v12;
    }
    while (v10 != v12);
  }
  return v11;
}

uint64_t sub_21DF8E8A4(uint64_t result, int *a2, _QWORD *a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *(_WORD *)(result + 18) != 13)
      return result;
  }
  else if (v3 != 41)
  {
    v4 = *(_DWORD *)(result + 20);
    v5 = 0;
    if ((v4 & 0x40000000) != 0)
      v6 = *(uint64_t **)(result - 8);
    else
      v6 = (uint64_t *)(result - 32 * (v4 & 0x7FFFFFF));
    v9 = result;
LABEL_20:
    v13 = *v6;
    v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 == 54)
    {
      v17 = *(_DWORD *)(v9 + 20);
      if ((v17 & 0x40000000) != 0)
        v18 = *(_QWORD *)(v9 - 8);
      else
        v18 = v9 - 32 * (v17 & 0x7FFFFFF);
      v25 = *(_QWORD *)(v18 + 32);
      if (v25)
        v26 = *(_BYTE *)(v25 + 16) == 16;
      else
        v26 = 0;
      if (v26)
      {
        if (*(_DWORD *)(v25 + 32) > 0x40u)
        {
          v27 = **(_QWORD **)(v25 + 24);
          if (v27 > 0x1F)
            return result;
        }
        else
        {
          v27 = *(_QWORD *)(v25 + 24);
          if (v27 >= 0x20)
            return result;
        }
        v24 = 1 << v27;
LABEL_75:
        *a2 = v24;
        *a3 = v5;
        return v13;
      }
    }
    else if (v14 == 47)
    {
      v15 = *(_DWORD *)(v9 + 20);
      v16 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
      v22 = *(_QWORD *)(v16 + 32);
      if (v22)
      {
        if (*(_BYTE *)(v22 + 16) == 16)
        {
          v23 = (_QWORD *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u)
            v23 = (_QWORD *)*v23;
          v24 = *(_DWORD *)v23;
          goto LABEL_75;
        }
      }
    }
    return result;
  }
  v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(uint64_t **)(result - 8);
  else
    v8 = (uint64_t *)(result - 32 * (v7 & 0x7FFFFFF));
  v9 = *v8;
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *(_DWORD *)(v9 + 20);
    if ((v11 & 0x7FFFFFF) != 0)
    {
      v12 = (v11 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v11 & 0x7FFFFFF));
      v19 = *v12;
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 <= 0x1B)
      {
        if (v20 != 5 || *(_WORD *)(v19 + 18) != 15)
          return result;
      }
      else if (v20 != 43)
      {
        return result;
      }
      v21 = (v7 & 0x40000000) != 0 ? *(_QWORD *)(result - 8) : result - 32 * (v7 & 0x7FFFFFF);
      v28 = *(_QWORD *)(v21 + 32);
      v29 = *(_BYTE *)(v28 + 16) == 84 ? v28 : 0;
      v30 = *(_DWORD *)(v19 + 20);
      v31 = (v30 & 0x40000000) != 0 ? *(_QWORD *)(v19 - 8) : v19 - 32 * (v30 & 0x7FFFFFF);
      v32 = *(_QWORD *)(v31 + 32);
      v33 = *(_BYTE *)(v32 + 16) == 84 ? v32 : 0;
      if (v29 && v33)
      {
        v5 = *(_QWORD *)(v29 - 32);
        if (!v5
          || *(_BYTE *)(v5 + 16)
          || (v34 = *(_QWORD *)(v29 + 72), v35 = *(_QWORD *)(v29 - 32), *(_QWORD *)(v5 + 24) != v34))
        {
          v35 = 0;
        }
        v36 = *(_QWORD *)(v33 - 32);
        if (!v36 || *(_BYTE *)(v36 + 16) || *(_QWORD *)(v36 + 24) != *(_QWORD *)(v33 + 72))
          v36 = 0;
        if (v35 == v36 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
        {
          if ((v30 & 0x40000000) != 0)
            v6 = *(uint64_t **)(v19 - 8);
          else
            v6 = (uint64_t *)(v19 - 32 * (v30 & 0x7FFFFFF));
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21DF8EB04(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 7));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = sub_21DF5B820((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_24E1FE938;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 120;
      result = (uint64_t)v3 + 128;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t sub_21DF8EBB4(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_21DF5B518(&v7, a2);
  v7 = &unk_24E1FE938;
  v10 = a1;
  v11 = 0;
  v3 = sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = sub_21DF8F2D8(a1, (uint64_t)&v7, v11);
    sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(_QWORD *)(v4 + 32) = v10;
    *(_QWORD *)(v4 + 40) = v4 + 56;
    *(_QWORD *)(v4 + 48) = 0x800000000;
    *(_BYTE *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 124) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 40;
}

uint64_t sub_21DF8EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  void *v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_21DF5B518(&v10, a2);
  v10 = &unk_24E1FE910;
  v13 = a1;
  v14 = 0;
  v5 = sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
  v6 = v14;
  if ((v5 & 1) == 0)
  {
    v6 = sub_21DF8DF30(a1, (uint64_t)&v10, v14);
    sub_21DF569CC((llvm::ValueHandleBase *)(v6 + 8), v11);
    *(_QWORD *)(v6 + 32) = v13;
    *(_QWORD *)(v6 + 40) = v6 + 56;
    *(_QWORD *)(v6 + 48) = 0x800000000;
    *(_BYTE *)(v6 + 120) = 0;
    *(_DWORD *)(v6 + 124) = 0;
  }
  if (v12 != -8192 && v12 != -4096 && v12 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  result = sub_21DF226D8(v6 + 40, a3);
  *(_QWORD *)(v6 + 120) = *(_QWORD *)(a3 + 80);
  *(_BYTE *)(a1 + 64) &= *(_BYTE *)(a3 + 80);
  v9 = *(_DWORD *)(a3 + 84);
  *(_BYTE *)(a1 + 65) |= v9 == 2;
  *(_BYTE *)(a1 + 66) |= v9 == 3;
  return result;
}

BOOL sub_21DF8ED9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 result;
  uint64_t v7;

  if (!a4)
    return 0;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    return 0;
  sub_21DF1B320(a3, a2);
  if (llvm::TypeSize::operator unsigned long long() != 4)
    return 0;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) != 0x10)
    return 1;
  if (*(_DWORD *)(a1 + 8) != 16 || *(_DWORD *)(a1 + 12) != 1)
    return 0;
  result = 0;
  v7 = **(_QWORD **)(a1 + 16);
  if (v7 && *(_BYTE *)(v7 + 8) == 17)
  {
    if (*(_QWORD *)(v7 + 32) == 3)
    {
      sub_21DF1B320(a3, **(_QWORD **)(v7 + 16));
      return llvm::TypeSize::operator unsigned long long() == 4;
    }
    return 0;
  }
  return result;
}

int32x2_t sub_21DF8EE98(int32x2_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  int32x2_t result;
  _QWORD v6[4];

  v4 = (_QWORD *)a2[5];
  if (v4 != a2 + 7)
    free(v4);
  v6[1] = 0;
  v6[2] = -8192;
  v6[0] = 2;
  v6[3] = 0;
  sub_21DF569CC((llvm::ValueHandleBase *)(a2 + 1), v6);
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_21DF8EF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = sub_21DF8DE9C(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (char *)v10[5];
    if (v5 != (char *)(v10 + 7))
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_24E1FE938;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)sub_21DF569CC((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void sub_21DF8F000(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  int32x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];
  uint64_t v12;
  int32x2_t *v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  _DWORD *v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[64];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 8;
  sub_21DF5B820((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v13 = v4;
  v28 = 0;
  v5 = sub_21DF8DE9C((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5)
    v7 = v28;
  else
    v7 = (_DWORD *)v6;
  v8 = v13;
  if ((_DWORD *)(*(_QWORD *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    v24 = v26;
    v25 = 0x800000000;
    if (v7[12])
    {
      sub_21DF22A7C((uint64_t)&v24, (uint64_t)(v7 + 10));
      v8 = v13;
    }
    v27 = *((_QWORD *)v7 + 15);
    sub_21DF8EE98(v8, v7);
    v9 = (uint64_t)v13;
    v19 = a2;
    v20 = v22;
    v21 = 0x800000000;
    if ((_DWORD)v25)
    {
      sub_21DF22A7C((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    v23 = v27;
    sub_21DF5B518(&v14, a2);
    v14 = &unk_24E1FE938;
    v17 = v9;
    sub_21DF5B820((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    v28 = &unk_24E1FE938;
    v31 = v17;
    v32 = v34;
    v33 = 0x800000000;
    if ((_DWORD)v21)
      sub_21DF22A7C((uint64_t)&v32, (uint64_t)&v20);
    v35 = v23;
    v18 = 0;
    if ((sub_21DF8DE9C(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      v10 = (_QWORD *)sub_21DF8F2D8(v9, (uint64_t)&v28, v18);
      sub_21DF569CC((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if ((_DWORD)v33)
        sub_21DF22A7C((uint64_t)(v10 + 5), (uint64_t)&v32);
      v10[15] = v35;
    }
    if (v32 != v34)
      free(v32);
    if (v30 != -8192 && v30 != -4096 && v30)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    if (v16 != -8192 && v16 != -4096 && v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    if (v20 != v22)
      free(v20);
    if (v24 != v26)
      free(v24);
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
}

uint64_t sub_21DF8F2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_21DF8F388(a1, v6);
  v8 = 0;
  sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_21DF8F388(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x2207A6DD8]((unint64_t)v8 << 7, 8);
  if (!v4)
    return sub_21DF8EB04(a1);
  sub_21DF8EB04(a1);
  v9 = (char *)(v3 << 7);
  if ((_DWORD)v3)
  {
    v10 = 0;
    do
    {
      v11 = &v10[(_QWORD)v4];
      v12 = *(_QWORD *)&v10[(_QWORD)v4 + 24];
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        sub_21DF8DE9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v13 = v18;
        sub_21DF569CC((llvm::ValueHandleBase *)(v18 + 1), (_QWORD *)v11 + 1);
        v13[4] = *((_QWORD *)v11 + 4);
        v13[5] = v13 + 7;
        v14 = (void **)(v11 + 40);
        v13[6] = 0x800000000;
        if (*((_DWORD *)v11 + 12))
          sub_21DF22A7C((uint64_t)(v13 + 5), (uint64_t)(v11 + 40));
        v13[15] = *(_QWORD *)&v10[(_QWORD)v4 + 120];
        ++*(_DWORD *)(a1 + 8);
        if (&v10[(_QWORD)v4 + 56] != *v14)
          free(*v14);
      }
      v15 = *((_QWORD *)v11 + 3);
      if (v15 != -8192 && v15 != -4096 && v15 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(_QWORD)v4 + 8]);
      v10 += 128;
    }
    while (v9 != v10);
  }
  return llvm::deallocate_buffer(v4, v9);
}

_QWORD *sub_21DF8F524(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F3378;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = &unk_24E1F3578;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1F5E98;
  a1[573] = &off_24E1F6090;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F35F0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF8F5CC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F3378;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = &unk_24E1F3578;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1F5E98;
  a1[573] = &off_24E1F6090;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F35F0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF8F684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF8878C((uint64_t)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

uint64_t sub_21DF8F6D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = *(unsigned int *)(a1 + 3944);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 3936);
    v4 = v3 + 32 * v2;
    v5 = *(uint64_t **)(a1 + 4552);
    v6 = *(unsigned int *)(a1 + 4560);
    v7 = &v5[v6];
    do
    {
      i = v5;
      if ((_DWORD)v6)
      {
        for (i = v5; !*i || *i == -8; ++i)
          ;
      }
      v10 = *(_DWORD *)(v3 + 4);
      if (i != v7)
      {
        v11 = *i;
        while (*(_DWORD *)(v11 + 8) != v10)
        {
          do
          {
            v12 = i[1];
            ++i;
            v11 = v12;
            if (v12)
              v13 = v11 == -8;
            else
              v13 = 1;
          }
          while (v13);
          if (i == v7)
            goto LABEL_21;
        }
        v10 = *(_DWORD *)(v11 + 16);
      }
LABEL_21:
      *(_DWORD *)(v3 + 4) = v10;
      v3 += 32;
    }
    while (v3 != v4);
  }
  sub_21DF77C44(a1, a1 + 4552);
  sub_21DF88854(a1);
  return 1;
}

void sub_21DF8F794(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD **)(a1 + 4544);
  if (v3)
  {
    sub_21DF1AF28(v13, "AGCTessellationDriverState");
    sub_21DF1AF28(v11, "patch_type");
    sub_21DF34E94(&v15, (const void **)v11, off_24E1FE9A0[*v3 & 3]);
    sub_21DF1AF28(v9, "partition_mode");
    sub_21DF34E94(&v16, (const void **)v9, off_24E1FE950[((unint64_t)*v3 >> 2) & 7]);
    sub_21DF1AF28(v7, "step_function");
    sub_21DF34E94(&v17, (const void **)v7, off_24E1FE970[*v3 >> 5]);
    sub_21DF1AF28(__p, "unused");
    sub_21DF34E40(&v18, (const void **)__p, *v3 >> 8);
    sub_21DF34EE8(a2, (uint64_t)v13, (uint64_t)&v15, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v18.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    sub_21DF1AF28(a2, (char *)&unk_21DFAD77A);
  }
}

uint64_t sub_21DF8F994(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F3378;
  v1[573] = &unk_24E1F3578;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1F5E98;
  v1[573] = &off_24E1F6090;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F35F0);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF8FA3C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F3378;
  v1[573] = &unk_24E1F3578;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1F5E98;
  v1[573] = &off_24E1F6090;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F35F0);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

void sub_21DF8FAFC(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  sub_21DF8F794((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

_QWORD *sub_21DF8FB0C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F6798;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1F6998;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1F6C88;
  a1[573] = &off_24E1F6E80;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4758);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF8FBB4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F6798;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1F6998;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1F6C88;
  a1[573] = &off_24E1F6E80;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4758);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF8FC6C(_QWORD *a1)
{
  uint64_t result;
  llvm::Function *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  _BYTE v9[32];
  __int16 v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  result = sub_21DF8F684(a1);
  if ((_DWORD)result)
  {
    result = llvm::Module::getFunction();
    if (result)
    {
      v3 = (llvm::Function *)result;
      v4 = sub_21DF203DC((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)"llvm.agx1.nop.dbg", 17, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 144), *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 184));
      v11[0] = llvm::ConstantInt::get();
      v5 = *((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          v7 = *(llvm::Instruction **)(v5 + 24);
          sub_21DF3F430((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8, (uint64_t)v7);
          v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
          v10 = 257;
          sub_21DF191A4(v8, *(_QWORD *)(v4 + 24), v4, (uint64_t)v11, 1, (uint64_t)v9);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v3);
      return 1;
    }
  }
  return result;
}

const char *sub_21DF8FDCC()
{
  return "vdmnopdbg-driver";
}

uint64_t sub_21DF8FDD8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F6798;
  v1[573] = off_24E1F6998;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1F6C88;
  v1[573] = &off_24E1F6E80;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4758);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF8FE80(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F6798;
  v1[573] = off_24E1F6998;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1F6C88;
  v1[573] = &off_24E1F6E80;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4758);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF8FF40()
{
  return "vdmnopdbg-driver";
}

_QWORD *sub_21DF8FF4C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F47C0;
  v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_24E1F49C0;
  sub_21DF56FA4((uint64_t)(a1 + 568));
  *a1 = off_24E1F7800;
  a1[572] = &off_24E1F79F8;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4A38);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF8FFF4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F47C0;
  v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_24E1F49C0;
  sub_21DF56FA4((uint64_t)(a1 + 568));
  *a1 = off_24E1F7800;
  a1[572] = &off_24E1F79F8;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4A38);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF900AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF8878C((uint64_t)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

const char *sub_21DF900F8()
{
  return "graphics-execute-indirect-esl-driver";
}

uint64_t sub_21DF90104(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F47C0;
  v1[572] = &unk_24E1F49C0;
  sub_21DF56FA4((uint64_t)(v1 + 568));
  *v1 = off_24E1F7800;
  v1[572] = &off_24E1F79F8;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4A38);
  return sub_21DF2E650((uint64_t)(v1 + 572));
}

void sub_21DF901AC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F47C0;
  v1[572] = &unk_24E1F49C0;
  sub_21DF56FA4((uint64_t)(v1 + 568));
  *v1 = off_24E1F7800;
  v1[572] = &off_24E1F79F8;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4A38);
  sub_21DF2E650((uint64_t)(v1 + 572));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF9026C()
{
  return "graphics-execute-indirect-esl-driver";
}

_QWORD *sub_21DF90278(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F4A98;
  v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_24E1F4C98;
  sub_21DF56FA4((uint64_t)(a1 + 568));
  *a1 = off_24E1F8378;
  a1[572] = &off_24E1F8570;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4D10);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF90320(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1F4A98;
  v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_24E1F4C98;
  sub_21DF56FA4((uint64_t)(a1 + 568));
  *a1 = off_24E1F8378;
  a1[572] = &off_24E1F8570;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4D10);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF903D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF8878C((uint64_t)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

const char *sub_21DF90424()
{
  return "graphics-execute-indirect-range-driver";
}

uint64_t sub_21DF90430(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F4A98;
  v1[572] = &unk_24E1F4C98;
  sub_21DF56FA4((uint64_t)(v1 + 568));
  *v1 = off_24E1F8378;
  v1[572] = &off_24E1F8570;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4D10);
  return sub_21DF2E650((uint64_t)(v1 + 572));
}

void sub_21DF904D8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1F4A98;
  v1[572] = &unk_24E1F4C98;
  sub_21DF56FA4((uint64_t)(v1 + 568));
  *v1 = off_24E1F8378;
  v1[572] = &off_24E1F8570;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4D10);
  sub_21DF2E650((uint64_t)(v1 + 572));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF90598()
{
  return "graphics-execute-indirect-range-driver";
}

_QWORD *sub_21DF905A4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F8EF0;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F90E8;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4FE8);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF9062C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F8EF0;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F90E8;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4FE8);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF906C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF8878C((uint64_t)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

const char *sub_21DF90710()
{
  return "gpu-gather-vertex-driver";
}

uint64_t sub_21DF9071C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F8EF0;
  v1[568] = &off_24E1F90E8;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4FE8);
  return sub_21DF2E650((uint64_t)(v1 + 568));
}

void sub_21DF907A4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F8EF0;
  v1[568] = &off_24E1F90E8;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4FE8);
  sub_21DF2E650((uint64_t)(v1 + 568));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF90844()
{
  return "gpu-gather-vertex-driver";
}

_QWORD *sub_21DF90850(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F9A68;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F9C60;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F52C0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF908D8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_24E1F9A68;
  v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_24E1F9C60;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F52C0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

uint64_t sub_21DF90970(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21DF8878C((uint64_t)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

const char *sub_21DF909BC()
{
  return "pds-patchup-vertex-driver";
}

uint64_t sub_21DF909C8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F9A68;
  v1[568] = &off_24E1F9C60;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F52C0);
  return sub_21DF2E650((uint64_t)(v1 + 568));
}

void sub_21DF90A50(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = off_24E1F9A68;
  v1[568] = &off_24E1F9C60;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F52C0);
  sub_21DF2E650((uint64_t)(v1 + 568));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF90AF0()
{
  return "pds-patchup-vertex-driver";
}

uint64_t sub_21DF90AFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::StringMapImpl *v13;
  int *v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *i;
  unsigned int v34;
  uint64_t v36;
  char *v37;
  _DWORD *v38;

  v8 = a4;
  v11 = sub_21DF99AB8(a1, a2 + 1, a3, a4, 0);
  v12 = *a2;
  *(_QWORD *)v11 = *a2;
  *(_QWORD *)(v11 + *(_QWORD *)(v12 - 24)) = a2[7];
  v13 = (llvm::StringMapImpl *)(v11 + 3896);
  *(_DWORD *)(v11 + 3912) = 0;
  *(_OWORD *)(v11 + 3896) = 0u;
  *(_DWORD *)(v11 + 3916) = 16;
  *(_WORD *)(v11 + 3928) = 0;
  *(_DWORD *)(v11 + 3932) = 0;
  *(_QWORD *)(v11 + 3936) = v11 + 3952;
  *(_QWORD *)(v11 + 3944) = 0x1000000000;
  *(_QWORD *)(v11 + 4464) = v11 + 4480;
  *(_QWORD *)(v11 + 4472) = 0x400000000;
  if (a5 && a6)
  {
    v14 = (int *)((char *)a5 + *a5);
    v15 = (int *)((char *)a6 + *a6);
    v16 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v16 >= 5u && (v17 = v16[2]) != 0)
      v38 = (int *)((char *)v14 + v17 + *(unsigned int *)((char *)v14 + v17));
    else
      v38 = 0;
    v18 = (unsigned __int16 *)((char *)v15 - *v15);
    v36 = v8;
    if (*v18 >= 5u && (v19 = v18[2]) != 0)
      v20 = (char *)v15 + v19 + *(unsigned int *)((char *)v15 + v19);
    else
      v20 = 0;
    if (*v38)
    {
      v21 = 0;
      v37 = v20 + 4;
      while (1)
      {
        v22 = *(_DWORD *)&v37[4 * v21];
        v23 = (char *)&v38[v21 + 2] + v38[v21 + 1];
        v24 = strlen(v23);
        v25 = llvm::StringMapImpl::LookupBucketFor();
        v26 = *(_QWORD *)v13;
        v27 = v25;
        v28 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v25);
        if (v28 == -8)
          break;
        if (!v28)
          goto LABEL_17;
LABEL_26:
        *(_DWORD *)(v28 + 8) = v22;
        if (++v21 >= (unint64_t)*v38)
          goto LABEL_27;
      }
      --*(_DWORD *)(a1 + 3912);
LABEL_17:
      v29 = MEMORY[0x2207A6DD8](v24 + 17, 8);
      v30 = v29;
      v31 = v29 + 16;
      if (v24)
        memcpy((void *)(v29 + 16), v23, v24);
      *(_BYTE *)(v31 + v24) = 0;
      *(_QWORD *)v30 = v24;
      *(_DWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v26 + 8 * v27) = v30;
      ++*(_DWORD *)(a1 + 3908);
      for (i = (uint64_t *)(*(_QWORD *)(a1 + 3896) + 8 * llvm::StringMapImpl::RehashTable(v13)); ; ++i)
      {
        v28 = *i;
        if (*i && v28 != -8)
          break;
      }
      goto LABEL_26;
    }
LABEL_27:
    v8 = v36;
    *(_BYTE *)(a1 + 3928) = (*(_DWORD *)(v36 + 12) & 0x100000) != 0;
  }
  *(_DWORD *)(a1 + 3116) = (*(_DWORD *)(v8 + 12) >> 2);
  *(_DWORD *)(a1 + 3120) = *(_DWORD *)(v8 + 8);
  sub_21DF9E5E4(a1, *(_DWORD *)(v8 + 12) & 1, (*(_DWORD *)(v8 + 12) >> 1) & 1);
  *(_BYTE *)(a1 + 14) = (*(_DWORD *)(v8 + 12) & 0x800000) != 0;
  *(_QWORD *)(a1 + 2272) = *(_QWORD *)v8;
  *(_DWORD *)(a1 + 3152) = (unsigned __int16)*(_DWORD *)(v8 + 12) >> 14;
  v34 = *(_WORD *)(v8 + 14) & 0xF;
  *(_DWORD *)(a1 + 3148) = v34;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 344) + 1676))
  {
    *(_BYTE *)(a1 + 3146) = v34 > 1;
    if (v34 >= 2)
      *(_DWORD *)(a1 + 3152) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 3146) = 0;
  }
  *(_BYTE *)(a1 + 15) = (*(_DWORD *)(v8 + 12) & 0x400000) != 0;
  *(_BYTE *)(a1 + 3929) = (*(_DWORD *)(v8 + 12) & 0x200000) != 0;
  return a1;
}

_QWORD *sub_21DF90E18(uint64_t a1, llvm::Module *this, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v12;
  const char *v14;
  __int16 v15;

  v14 = "air.vertex";
  v15 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v14);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (*(_DWORD *)(Operand + 8) == 4
    && sub_21DF241E0(*(llvm::MDString **)(*(_QWORD *)(Operand - 8) - 8 * *(unsigned int *)(*(_QWORD *)(Operand - 8) + 8)), "air.patch"))
  {
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Module *, uint64_t, unsigned int *, unsigned int *))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32), a1, this, a3, a4, a5);
  }
  v12 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v12 + 568), a1, *(llvm::Type **)this);
  sub_21DF90AFC((uint64_t)v12, (uint64_t *)off_24E1F3318, (uint64_t)this, a3, a4, a5);
  *v12 = &off_24E1F30B0;
  v12[568] = &unk_24E1F32B0;
  return v12;
}

double sub_21DF90F44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  int v11;
  uint64_t v12;

  v7 = atomic_load((unsigned __int8 *)&qword_2553B3D18);
  if ((v7 & 1) == 0)
  {
    v12 = a3;
    v11 = __cxa_guard_acquire(&qword_2553B3D18);
    a3 = v12;
    if (v11)
    {
      qword_2553B3D08 = 0;
      unk_2553B3D10 = 0;
      __cxa_guard_release(&qword_2553B3D18);
      a3 = v12;
    }
  }
  sub_21DF90AFC(a1, a2 + 2, a3, (uint64_t)&qword_2553B3D08, 0, 0);
  v8 = a2[1];
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[10];
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = a2[11];
  *(_QWORD *)(a1 + 4544) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_DWORD *)(a1 + 4568) = 0;
  *(_DWORD *)(a1 + 4572) = 32;
  return result;
}

_QWORD *sub_21DF91020(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FA368;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FA568;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FA858;
  a1[573] = &off_24E1FAA50;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F38D0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF910C8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FA368;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FA568;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FA858;
  a1[573] = &off_24E1FAA50;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F38D0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91180()
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

uint64_t sub_21DF9118C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FA368;
  v1[573] = off_24E1FA568;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FA858;
  v1[573] = &off_24E1FAA50;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F38D0);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF91234(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FA368;
  v1[573] = off_24E1FA568;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FA858;
  v1[573] = &off_24E1FAA50;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F38D0);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF912F4()
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

_QWORD *sub_21DF91300(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FB158;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FB358;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FB648;
  a1[573] = &off_24E1FB840;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3BB8);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF913A8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FB158;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FB358;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FB648;
  a1[573] = &off_24E1FB840;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3BB8);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91460()
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

uint64_t sub_21DF9146C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FB158;
  v1[573] = off_24E1FB358;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FB648;
  v1[573] = &off_24E1FB840;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3BB8);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF91514(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FB158;
  v1[573] = off_24E1FB358;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FB648;
  v1[573] = &off_24E1FB840;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3BB8);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF915D4()
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

_QWORD *sub_21DF915E0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FBF48;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FC148;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FC438;
  a1[573] = &off_24E1FC630;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3EA0);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF91688(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FBF48;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FC148;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FC438;
  a1[573] = &off_24E1FC630;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F3EA0);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91740()
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

uint64_t sub_21DF9174C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FBF48;
  v1[573] = off_24E1FC148;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FC438;
  v1[573] = &off_24E1FC630;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3EA0);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF917F4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FBF48;
  v1[573] = off_24E1FC148;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FC438;
  v1[573] = &off_24E1FC630;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F3EA0);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF918B4()
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

_QWORD *sub_21DF918C0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FCD38;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FCF38;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FD228;
  a1[573] = &off_24E1FD420;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4188);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF91968(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FCD38;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FCF38;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FD228;
  a1[573] = &off_24E1FD420;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4188);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91A20()
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

uint64_t sub_21DF91A2C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FCD38;
  v1[573] = off_24E1FCF38;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FD228;
  v1[573] = &off_24E1FD420;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4188);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF91AD4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FCD38;
  v1[573] = off_24E1FCF38;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FD228;
  v1[573] = &off_24E1FD420;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4188);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91B94()
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

_QWORD *sub_21DF91BA0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FDB28;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FDD28;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FE018;
  a1[573] = &off_24E1FE210;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4470);
  sub_21DF2E650(v2);
  return a1;
}

void sub_21DF91C48(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24E1FDB28;
  v2 = (uint64_t)(a1 + 573);
  a1[573] = off_24E1FDD28;
  sub_21DF56FA4((uint64_t)(a1 + 569));
  *a1 = off_24E1FE018;
  a1[573] = &off_24E1FE210;
  v3 = (_QWORD *)a1[558];
  if (v3 != a1 + 560)
    free(v3);
  v4 = (_QWORD *)a1[492];
  if (v4 != a1 + 494)
    free(v4);
  sub_21DF8B864((uint64_t)(a1 + 487));
  sub_21DF99CB8((uint64_t)a1, (uint64_t *)off_24E1F4470);
  sub_21DF2E650(v2);
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91D00()
{
  return "bucketed-clear-instance-counts-driver";
}

uint64_t sub_21DF91D0C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FDB28;
  v1[573] = off_24E1FDD28;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FE018;
  v1[573] = &off_24E1FE210;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4470);
  return sub_21DF2E650((uint64_t)(v1 + 573));
}

void sub_21DF91DB4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32));
  *v1 = &off_24E1FDB28;
  v1[573] = off_24E1FDD28;
  sub_21DF56FA4((uint64_t)(v1 + 569));
  *v1 = off_24E1FE018;
  v1[573] = &off_24E1FE210;
  v2 = (_QWORD *)v1[558];
  if (v2 != v1 + 560)
    free(v2);
  v3 = (_QWORD *)v1[492];
  if (v3 != v1 + 494)
    free(v3);
  sub_21DF8B864((uint64_t)(v1 + 487));
  sub_21DF99CB8((uint64_t)v1, (uint64_t *)off_24E1F4470);
  sub_21DF2E650((uint64_t)(v1 + 573));
  JUMPOUT(0x2207A7960);
}

const char *sub_21DF91E74()
{
  return "bucketed-clear-instance-counts-driver";
}

char *sub_21DF91E80(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void **v6;
  uint64_t i;
  const std::string::value_type **v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t j;
  const std::string::value_type **v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t k;
  llvm::Type **v18;
  _QWORD *v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[3];
  std::string __dst;

  sub_21DF1AF28(v44, "tess_nb_0_");
  sub_21DF1AF28(v45, "tess_nb_1_");
  v6 = (void **)&v44[3 * (*a3 & 3)];
  if (*((char *)v6 + 23) < 0)
    sub_21DF205EC(&__dst, *v6, (unint64_t)v6[1]);
  else
    __dst = *(std::string *)v6;
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v45[i + 2]) < 0)
      operator delete((void *)v44[i + 3]);
  }
  sub_21DF1AF28(v44, "0_");
  sub_21DF1AF28(v45, "1_");
  sub_21DF1AF28(v46, "2_");
  sub_21DF1AF28(v47, "3_");
  v8 = (const std::string::value_type **)&v44[3 * ((*a3 >> 2) & 7)];
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)&v44[3 * ((*a3 >> 2) & 7)];
  else
    v10 = *v8;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v8 + 23);
  else
    v11 = (std::string::size_type)v8[1];
  std::string::append(&__dst, v10, v11);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v47[j + 2]) < 0)
      operator delete((void *)v47[j]);
  }
  sub_21DF1AF28(v44, "0");
  sub_21DF1AF28(v45, "1");
  sub_21DF1AF28(v46, "2");
  sub_21DF1AF28(v47, "3");
  v13 = (const std::string::value_type **)&v44[3 * (*a3 >> 5)];
  v14 = *((char *)v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)&v44[3 * (*a3 >> 5)];
  else
    v15 = *v13;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v13 + 23);
  else
    v16 = (std::string::size_type)v13[1];
  std::string::append(&__dst, v15, v16);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v47[k + 2]) < 0)
      operator delete((void *)v47[k]);
  }
  v18 = (llvm::Type **)sub_21DF2CCE8(a2, (const UInt8 *)&__dst);
  v19 = (_QWORD *)operator new();
  sub_21DF2E500((uint64_t)(v19 + 573), a1, *v18);
  v20 = sub_21DF90F44((uint64_t)v19, (uint64_t *)off_24E1F38B8, (uint64_t)v18, (uint64_t)a3);
  *v19 = &off_24E1F3650;
  v19[573] = &unk_24E1F3850;
  v21 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v19[616] + 792) + 72))(*(_QWORD *)(v19[616] + 792), v20);
  v22 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "drawElementsIndirectCommands", 0x1CuLL);
  *(_QWORD *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 20) = 0;
  v23 = *(_QWORD *)(*(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 344) + 792);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
  v25 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "internalPerPatch_ID", 0x13uLL);
  *(_QWORD *)(v25 + 8) = 1;
  *(_DWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 20) = 0;
  v26 = *(_QWORD *)(*(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 344) + 792);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
  v28 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "internalPerPatch_Data", 0x15uLL);
  *(_QWORD *)(v28 + 8) = 2;
  *(_DWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 20) = 0;
  v29 = *(_QWORD *)(*(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 344) + 792);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v31 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "tessFactors", 0xBuLL);
  *(_QWORD *)(v31 + 8) = 3;
  *(_DWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 20) = 0;
  v32 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "tessFactorScale", 0xFuLL);
  *(_OWORD *)(v32 + 8) = xmmword_21DFA61B0;
  *(_DWORD *)(v32 + 24) = 2;
  v33 = *(_QWORD *)(*(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 344) + 792);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 80))(v33);
  v35 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "drawElementsIndirectCommands_ORIGINAL", 0x25uLL);
  *(_QWORD *)(v35 + 8) = 5;
  *(_DWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 20) = 0;
  v36 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "instanceCount", 0xDuLL);
  *(_OWORD *)(v36 + 8) = xmmword_21DFA61C0;
  *(_DWORD *)(v36 + 24) = 1;
  v37 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "patchCount", 0xAuLL);
  *(_OWORD *)(v37 + 8) = xmmword_21DFA61D0;
  *(_DWORD *)(v37 + 24) = 0;
  v38 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "instanceStrideInTessFactorUnits", 0x1FuLL);
  *(_OWORD *)(v38 + 8) = xmmword_21DFA61E0;
  *(_DWORD *)(v38 + 24) = 4;
  v39 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "patchStart", 0xAuLL);
  *(_OWORD *)(v39 + 8) = xmmword_21DFA61F0;
  *(_DWORD *)(v39 + 24) = 0;
  v40 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "baseInstance", 0xCuLL);
  *(_OWORD *)(v40 + 8) = xmmword_21DFA6200;
  *(_DWORD *)(v40 + 24) = 6;
  v41 = *sub_21DF575AC((llvm::StringMapImpl *)(v19 + 569), "maxTessellationFactor", 0x15uLL);
  *(_OWORD *)(v41 + 8) = xmmword_21DFA6210;
  *(_DWORD *)(v41 + 24) = 16;
  v42 = *(_QWORD *)(*v19 - 24);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return (char *)v19 + v42;
}

